<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>PHP中使用 $_GET 与$_POST 实现简单的前后台数据传输交互功能 - 卡尔西法calcifer</title>
<link>http://www.cnblogs.com/wq1994/p/7696253.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wq1994/p/7696253.html</guid>
<description>&lt;p&gt;在之前的学习过程中我们接触过前后台数据请求交互的方法有表单提交、AJAX请求以及Angularjs中的$http，今天我们尝试在PHP中使用 $_GET 与$_POST 实现简单的前后台数据传输交互功能；&lt;/p&gt;
&lt;p&gt;PHP中给我们提供了一群功能十分强大的超全局 数组，它们 可以在任何位置，任何作用域之内使用，而且无需声明，拿到即可使用!&lt;/p&gt;
&lt;p&gt;又称 ： 超全局数组、超全局变量、预定义数组、预定义变量
&lt;hr/&gt;
这篇文章里我们单独讲一下&lt;span&gt;PHP 中的&lt;span&gt;&lt;span&gt;$_GET 变量&lt;/span&gt;和&lt;span&gt;$_POST变量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;① 在 PHP 中，预定义的 $_GET 变量用于收集来自 method=&quot;get&quot; 的表单中的值。即用来获取前台通过get请求发送的数据。&lt;/p&gt;
&lt;p&gt;② 预定义的 $_POST 变量用于收集来自 method=&quot;post&quot; 的表单中的值。即用来获取前台通过post发送的数据。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;顺便我们回顾下表单的一些基础知识：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、 form表单的两个重要属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;action：表示表单提交的服务器地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;method：表单提交数据的方式，可选值有get、post两种。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、get、post的区别&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;get通过URL传递数据，所有内容在URL（地址栏）可以看到不安全，而post无法看见，比较安全。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;get传递的数据量是有限的且只能传递文本信息，而post可以传递大量数据并且可以传递图片、视频等其他文件类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;get传输速度比post快（这是get的唯一一个优点）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、get使用URL传递数据的格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http：//URL地址.html？name1=value1&amp;amp;name2=value2从： “？”表示参数传递的开始，多个参数之间用&amp;amp;符号间隔，同一个参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用name来标识value。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://127.0.0.1:8020/025454.html?username=123&amp;amp;password=123&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以使用表单时，input输入框的name属性一定不能省略， 如果省略input的name属性，则这个input的数据不会往后台传递；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;接下来我们使用PHP 中的&lt;span&gt;$_GET 变量和$_POST变量&lt;span&gt;实现简单的前后台数据传输交互功能：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;hr/&gt;&lt;/p&gt;
&lt;p&gt; form.html 文件代码如下&lt;/p&gt;
&lt;div readability=&quot;30.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;PHP $_GET 变量和$_POST变量使用示例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;03-ChaoQuanJuArray.php&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            用户名：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;        
            密码：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btn1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击发送post请求&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;03-ChaoQuanJuArray.php&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;get&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            用户名：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;        
            密码：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btn2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击发送get请求&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;      
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们新建一个PHP文件用来请求访问和判断，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if(isset($_GET[&quot;username&quot;])&amp;amp;&amp;amp; isset($_GET[&quot;pwd&quot;])){
    
     if($_GET[&quot;username&quot;]=='wq'&amp;amp;&amp;amp; $_GET[&quot;pwd&quot;]==&quot;123&quot;){
            echo &quot;登陆成功！&quot;;
        }else{
            echo &quot;登陆失败！&quot;;
        }
}

if(isset($_POST[&quot;username&quot;])&amp;amp;&amp;amp; isset($_POST[&quot;pwd&quot;])){
    
     if($_POST[&quot;username&quot;]=='wq'&amp;amp;&amp;amp; $_POST[&quot;pwd&quot;]==&quot;123&quot;){
            echo &quot;登陆成功！&quot;;
        }else{
            echo &quot;登陆失败！&quot;;
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;则相应的函数触发的JS代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
            $(&lt;/span&gt;&quot;#btn1&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username = $(&quot;input[name='username']&quot;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pwd = $(&quot;input[name='pwd']&quot;&lt;span&gt;).val();
                $.post(&lt;/span&gt;&quot;03-chaoQuanJuArray.php&quot;&lt;span&gt;,{
                    &lt;/span&gt;&quot;username&quot;&lt;span&gt;:username,
                    &lt;/span&gt;&quot;pwd&quot;&lt;span&gt;:pwd,
                },&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    alert(data);
                })
            });
            $(&lt;/span&gt;&quot;#btn2&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username = $(&quot;input[name='username']&quot;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pwd = $(&quot;input[name='pwd']&quot;&lt;span&gt;).val();
                $.get(&lt;/span&gt;&quot;03-chaoQuanJuArray.php&quot;&lt;span&gt;,{
                    &lt;/span&gt;&quot;username&quot;&lt;span&gt;:username,
                    &lt;/span&gt;&quot;pwd&quot;&lt;span&gt;:pwd,
                },&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    alert(data);
                })
            });
        &lt;/span&gt;&amp;lt;/script&amp;gt;
        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;！注意：&lt;/span&gt;&lt;span&gt;在运行时确保已经搭建好了运行环境，保证服务器在线且处于运行状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在运行HTML文件时，记得将服务器地址端口号改为localhost以访问本机文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1209629/201710/1209629-20171019225948537-1964294156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;则当我们输入密码，点击第一个按钮：点击发送POST请求时，表单演示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1209629/201710/1209629-20171019232209146-573410399.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;则当我们输入密码，点击第二个按钮：点击发送GET请求时，表单演示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1209629/201710/1209629-20171019232047084-1890784794.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;在 HTML 表单中使用 method=&quot;get&quot; 时，所有的变量名和值都会显示在 URL 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注释：&lt;/strong&gt;所以在发送密码或其他敏感信息时，不应该使用这个方法！&lt;/p&gt;
&lt;p&gt;然而，正因为变量显示在 URL 中，因此可以在收藏夹中收藏该页面。在某些情况下，这是很有用的。&lt;/p&gt;
&lt;strong&gt;注释：&lt;/strong&gt;HTTP GET 方法不适合大型的变量值。它的值是不能超过 2000 个字符的。&lt;/div&gt;

</description>
<pubDate>Thu, 19 Oct 2017 15:27:00 +0000</pubDate>
<dc:creator>卡尔西法calcifer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wq1994/p/7696253.html</dc:identifier>
</item>
<item>
<title>jquery访问浏览器本地存储cookie，localStorage和sessionStorage - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/7695976.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/7695976.html</guid>
<description>&lt;p&gt;前言：cookie，localStorage和sessionStorage都是浏览器本地存储数据的地方，其用法不尽相同；总结一下基本的用法。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一cookie&quot;&gt;一、cookie&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;定义：&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;存储在本地，容量最大4k，在同源的http请求时携带传递，损耗带宽；&lt;/li&gt;
&lt;li&gt;可设置访问路径，只有此路径及此路径的子路径才能访问此cookie，存在有效的时间。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;cookie的访问需要服务器环境，直接在本地文件访问无效；&lt;/li&gt;
&lt;li&gt;cookie的访问和设置需要导入jquery.cookie.js文件；&lt;/li&gt;
&lt;li&gt;浏览器对每一个访问的地址下可添加的cookie是有限制的；同时每个浏览器可添加的cookie个数也存在限制。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用：&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;储存用户的痕迹信息，如用户名，ID号，密码等，是服务器脚本发送给浏览器的加密数据，便于下次访问时用户可以直接登录等；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运用代码&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;//访问cookie，mycolor代表键
var $cook = $.cookie(&quot;mycolor&quot;);


//设置cookie
$.cookie(&quot;mycolor&quot;, &quot;red&quot;});
$.cookie(&quot;mycolor&quot;, &quot;red&quot;, { expires: 7, path: '/' });//增加了有效时间和访问路径

//删除cookie,传递null值
$.cookie(&quot;mycolor&quot;, null});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;'mycolor'参数相当于cookie存储数据的键，即数据的名字，通过名字访问；&lt;/li&gt;
&lt;li&gt;cookie的设置有三个参数，第一为设置数据的键，第二个为设置数据的值，expires表示有效时间，单位为天，path为访问路径，&quot;/&quot;表示当前文件路径，在网站中表示根目录。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;注意：如果不设置路径，默认情况下只有设置cookie的网页才可以访问此cookie；如果想网站的网页可以共享cookie，将路径设为根目录。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：cookie就相当于一个能存储数据的微型本地数据库，&quot;mycolor&quot;相当于每条数据的key。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;二localstorage&quot;&gt;二、localStorage&lt;/h2&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;定义：一个本地的小型数据文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存储在本地，容量为5M或者更大，不会在请求时候携带传递；&lt;/li&gt;
&lt;li&gt;数据在所有同源窗口中共享，一直有效，除非人为删除，可作为长期数据。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;localStorage数据不需要依赖服务器环境访问，可以直接在本地文件访问；&lt;/li&gt;
&lt;li&gt;不需要额外的文件支持。&lt;/li&gt;
&lt;li&gt;同源窗口指的是同一个域名下或者是index.html所在的文件夹下的文件路径。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码运用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;//设置：
localStorage.setItem(&quot;mycolor&quot;, &quot;456&quot;);
localStorage.mycolor= '456';

//获取：
var $color = localStorage.getItem(&quot;mycolor&quot;);
var $color = localStorage.mycolor

var $color = localStorage.key(0);//获取第一个键，按角标获取
var $color = localStorage.key(&quot;&quot;);//获取最后一个键

var $length = localStorage.length;//获取数据的长度

//删除
localStorage.removeItem(&quot;mycolor&quot;);

//清空
localStorage.clear();//将所有保存的数据删除&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;设置数据格式类似键值对，&quot;mycolor&quot;代表key,&quot;456&quot;代表值。&lt;/li&gt;
&lt;li&gt;数据是有排序的，后加入的角标靠前，最后加入的角标为0.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;注意：localStorage相当于将数据保存在磁盘，是永久的，但是其针对的是固定的域名下的文件，打开其他的域名下的网页，localStorage不会显示。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;三sessionstorage&quot;&gt;三、sessionStorage&lt;/h2&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;定义：一个本地的小型数据库&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存储在本地，容量为5M或者更大;&lt;/li&gt;
&lt;li&gt;不会在请求时候携带传递，在同源的当前窗口关闭前有效。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;sessionStorage同样不需要再服务器的环境下运行；&lt;/li&gt;
&lt;li&gt;不需要额外的文件支持；&lt;/li&gt;
&lt;li&gt;sessionStorage数据设置后即使页面进行重载也不会清除；但当该窗口关闭后，里面的数据就会清除，再打开没有数据。&lt;strong&gt;相当于将数据保存在内存中&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码运用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;//设置：
sessionStorage.setItem(&quot;mycolor&quot;, &quot;456&quot;);
sessionStorage.mycolor= '456';

//获取：
var $color = sessionStorage.getItem(&quot;mycolor&quot;);
var $color = sessionStorage.mycolor

var $color = sessionStorage.key(0);//获取第一个键，按角标获取
var $color = sessionStorage.key(&quot;&quot;);//获取最后一个键

var $length = sessionStorage.length;//获取数据的长度

//删除
sessionStorage.removeItem(&quot;mycolor&quot;);

//清空
sessionStorage.clear();//将所有保存的数据删除&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;sessionStorage的使用方法和localStorage一样。&lt;/li&gt;
&lt;li&gt;数据是有排序的，后加入的角标靠前，最后加入的角标为0.&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Thu, 19 Oct 2017 15:10:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/7695976.html</dc:identifier>
</item>
<item>
<title>bind、apply与call - liuyongjia</title>
<link>http://www.cnblogs.com/liuyongjia/p/7696101.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuyongjia/p/7696101.html</guid>
<description>&lt;p&gt;先说观点：&lt;strong&gt;不论是bind、apply还是call，最大的好处就是代码复用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;bind&quot;&gt;bind&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在开发中，我们只有复用代码时，才会出现this指向需要改动的情况。&lt;/strong&gt;&lt;br/&gt;纵观bind的常用方法，不论是偏函数还是快捷调用等等，即使是setTimeout，也都是希望能把别的地方的方法拿过来用，才会出现this指向不对的情况。&lt;br/&gt;一言以蔽之：&lt;strong&gt;因为是面向对象，才会出现绑定this的需要。&lt;/strong&gt;&lt;br/&gt;这话并不是空穴来风，面向对象的好处就在于抽象程度高，封装好的一个类，可以在不改变源码的情况下，经过一些操作，拿来即用。这是一个无比方便的地方，相信改过别人代码的同学对此深有体会。&lt;br/&gt;面向对象经过高度的抽象，使得代码复用更加方便，也导致了更多的模块管理相关的问题，这又是一个大课题，就不细讲了。&lt;br/&gt;不论是出于性能还是开发成本的考虑，我们在开发中，经常要用其他对象上的方法。举个例子，把类数组对象转为数组对象：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; transfer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;va&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;apply&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;slice&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;transfer&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bind的其他用法可以参考&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Example:_Creating_shortcuts&quot;&gt;MDN&lt;/a&gt;，我在这里不多写了。&lt;/p&gt;
&lt;h2 id=&quot;call与apply&quot;&gt;call与apply&lt;/h2&gt;
&lt;p&gt;call和apply大同小异，唯一不同在于传参，call接受变长参数，apply接受数组或者类数组对象。&lt;br/&gt;具体使用方法，参考MDN，&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;call&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;apply&lt;/a&gt;&lt;br/&gt;同样的，call和apply也是因为想要复用代码，出现了this指向不对的情况，怎么办，给它传this吧，传哪指哪。&lt;br/&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; say &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Mike'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'hi '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;sayHi&lt;/span&gt;(name)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;say&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;hi&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;sayHi&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Bob'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;bind与call和apply的区别&quot;&gt;bind与call和apply的区别&lt;/h2&gt;
&lt;p&gt;bind和call的区别就在于，bind会返回一个新的函数，call和apply都是直接调用原函数，并不会返回一个新函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在需要新函数的地方用bind，只是想做一锤子买卖，就用call和apply。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;在不清楚多少参数的地方，建议new一个数组，push参数进去，或者大部分情况下，可以传arguments对象，就用apply，否则，就用call。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 19 Oct 2017 15:04:00 +0000</pubDate>
<dc:creator>liuyongjia</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuyongjia/p/7696101.html</dc:identifier>
</item>
<item>
<title>canvas图表详解系列（4）：动态散点图 - 苏天天</title>
<link>http://www.cnblogs.com/chengduxiaoc/p/7696056.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengduxiaoc/p/7696056.html</guid>
<description>
&lt;p&gt;本章建议学习时间4小时&lt;/p&gt;
&lt;p&gt;学习方式：详细阅读，并手动实现相关代码（如果没有canvas基础，需要先学习前面的canvas基础笔记）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;：此教程将教会大家如何使用canvas绘制各种图表，详细分解步骤，本次讲解散点图。&lt;/p&gt;

&lt;p&gt;演示地址： &lt;a href=&quot;https://sutianbinde.github.io/charts/%E6%95%A3%E7%82%B9%E5%9B%BE-%E9%AB%98%E6%B8%85.html&quot; target=&quot;_blank&quot;&gt;https://sutianbinde.github.io/charts/%E6%95%A3%E7%82%B9%E5%9B%BE-%E9%AB%98%E6%B8%85.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;源文件下载地址：&lt;a href=&quot;https://github.com/sutianbinde/charts&quot; target=&quot;_blank&quot;&gt;https://github.com/sutianbinde/charts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;散点图&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;散点图是比较好看的图表了，我们的案例展示效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/799986/201710/799986-20171019222515662-338908283.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;功能：图表可以根据数据自动变换比例，绘制点的时候有由小到大的动画，绘制平均值线条，鼠标移入到对应模块会实现颜色变化，并且显示当前项的详细信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;--新建Html文件，写入总方法和数据，这次我们的代码和上几个图有所不同，我们只给定容器，而canvas通过js生成&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;533&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;chart&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;700&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;margin:50px&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; goChart(cBox,dataArr,textArr){
            

        }

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; dataArr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [[&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;193.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;187.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.8&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;181.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;62.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;184.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;173.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;173.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;178.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;164.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;173.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;60.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;183.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;189.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;170.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;59.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;61.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;88.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;59.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;169.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;164.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;55.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;163.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;57.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;61.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;164.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;101.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;171.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;56.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;197.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;175.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;102.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;169.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.7&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;184.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;53.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;178.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;168.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;55.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;157.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;58.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;88.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;58.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;116.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;163.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;198.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;166.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;166.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;168.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;108.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;102.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;95.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;193.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;95.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;96.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.8&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.4&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;92.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.7&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;61.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;168.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;160.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;88.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;101.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.7&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;102.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;183.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;183.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;62.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;98.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.2&lt;/span&gt;&lt;span&gt;]
            ];
            
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * 参数1 ：需要显示canvas的dom  (非canvas标签，需要指定height和width)
         * 参数2：二维数据  [0]横轴   [1]纵轴
         * 参数3：横轴名称 纵轴名称
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        goChart(document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chart&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),dataArr,[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;身 高&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;体 重&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])


    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;--在 goChart方法中定义需要使用的变量 并获取 canvas上下文 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明所需变量&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; canvas,ctx;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; cWidth, cHeight, cMargin, cSpace;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; originX, originY;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 柱状图属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; bMargin, tobalBars, bWidth, maxXValue, maxYValue, minXValue, minYValue;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; totalNomber;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; yAverage, minTrueYValue, maxTrueYValue;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运动相关变量&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ctr, numctr, speed;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标移动&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; mousePosition =&lt;span&gt; {};
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建canvas并获得canvas上下文&lt;/span&gt;
               canvas = document.createElement(&quot;canvas&quot;&lt;span&gt;);
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(canvas &amp;amp;&amp;amp;&lt;span&gt; canvas.getContext){
                ctx &lt;/span&gt;= canvas.getContext(&quot;2d&quot;&lt;span&gt;);
            }
               
               canvas.innerHTML &lt;/span&gt;= &quot;你的浏览器不支持HTML5 canvas&quot;&lt;span&gt;;
               cBox.appendChild(canvas);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;--初始化图表（接着上一步的代码写在 goChart方法中 ）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
            initChart(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initChart(){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表信息&lt;/span&gt;
                cMargin = 60&lt;span&gt;;
                cSpace &lt;/span&gt;= 80&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将canvas扩大2倍，然后缩小，以适应高清屏幕&lt;/span&gt;
                canvas.width = cBox.getAttribute(&quot;width&quot;)* 2&lt;span&gt; ;
                canvas.height &lt;/span&gt;= cBox.getAttribute(&quot;height&quot;)* 2&lt;span&gt;;
                canvas.style.height &lt;/span&gt;= canvas.height/2 + &quot;px&quot;;
                canvas.style.width = canvas.width/2 + &quot;px&quot;;
                cHeight = canvas.height - cMargin*2 -&lt;span&gt; cSpace;
                cWidth &lt;/span&gt;= canvas.width - cMargin*2 -&lt;span&gt; cSpace;
                originX &lt;/span&gt;= cMargin +&lt;span&gt; cSpace;
                originY &lt;/span&gt;= cMargin +&lt;span&gt; cHeight;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 柱状图信息&lt;/span&gt;
                bMargin = canvas.width/40;
                tobalBars =&lt;span&gt; dataArr.length;
                bWidth &lt;/span&gt;= parseInt( cWidth/tobalBars - bMargin );
                maxXValue = 0&lt;span&gt;;
                maxYValue &lt;/span&gt;= 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xArr =&lt;span&gt; [];
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; yArr =&lt;span&gt; [];
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;dataArr.length; i++&lt;span&gt;){
                    xArr.push( dataArr[i][&lt;/span&gt;0&lt;span&gt;] );
                    yArr.push( dataArr[i][&lt;/span&gt;1&lt;span&gt;] );
                }
                yAverage &lt;/span&gt;= ( eval(yArr.join(&quot;+&quot;))/yArr.length ).toFixed(2);
                &lt;span&gt;var&lt;/span&gt; addNb = parseInt(yAverage/10); //用于在轴前后加空白
&lt;span&gt;                
                minXValue &lt;/span&gt;= Math.min.apply(&lt;span&gt;null&lt;/span&gt;,xArr); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;求最小值&lt;/span&gt;
                minXValue = parseInt(Math.max(minXValue-addNb, 0)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果减去addNb后小于零，就取零&lt;/span&gt;
                maxXValue = parseInt(Math.max.apply(&lt;span&gt;null&lt;/span&gt;,xArr)+addNb); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于轴的显示，所以取整&lt;/span&gt;
&lt;span&gt;                
                minYValue &lt;/span&gt;= minTrueYValue = Math.min.apply(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,yArr);
                minYValue &lt;/span&gt;= parseInt(Math.max(minYValue-addNb, 0&lt;span&gt;));
                maxTrueYValue &lt;/span&gt;= Math.max.apply(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,yArr);
                maxYValue &lt;/span&gt;= parseInt(maxTrueYValue+&lt;span&gt;addNb);
                
                totalNomber &lt;/span&gt;= 5&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运动相关&lt;/span&gt;
                ctr = 1&lt;span&gt;;
                numctr &lt;/span&gt;= 50&lt;span&gt;;
                speed &lt;/span&gt;= 1.5&lt;span&gt;;

            }
               &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; --绘制坐标轴，以及纵横方向的线条（接着上一步的代码写在 goChart方法中 ）&lt;/p&gt;
&lt;p&gt;实现效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/799986/201710/799986-20171019224244740-1238380615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;            
            drawLineLabelMarkers(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawLineLabelMarkers(){
                ctx.translate(&lt;/span&gt;0.5,0.5);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当只绘制1像素的线的时候，坐标点需要偏移，这样才能画出1像素实线&lt;/span&gt;
                ctx.font = &quot;24px Arial&quot;&lt;span&gt;;
                ctx.lineWidth &lt;/span&gt;= 2&lt;span&gt;;
                ctx.fillStyle &lt;/span&gt;= &quot;#000&quot;&lt;span&gt;;
                ctx.strokeStyle &lt;/span&gt;= &quot;#000&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; y轴&lt;/span&gt;
&lt;span&gt;                drawLine(originX, originY, originX, cMargin);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; x轴&lt;/span&gt;
                drawLine(originX, originY, originX+&lt;span&gt;cWidth, originY);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标记&lt;/span&gt;
&lt;span&gt;                drawMarkers();
                ctx.translate(&lt;/span&gt;-0.5,-0.5);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 还原位置&lt;/span&gt;
&lt;span&gt;            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画线的方法&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawLine(x, y, X, Y){
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(X, Y);
                ctx.stroke();
                ctx.closePath();
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标记&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawMarkers(){
                ctx.strokeStyle &lt;/span&gt;= &quot;#E0E0E0&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制 y&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; oneYVal = (maxYValue-minYValue)/totalNomber;
&lt;span&gt;                
                ctx.textAlign &lt;/span&gt;= &quot;right&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;=totalNomber; i++&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; markerVal = parseInt(i*oneYVal+&lt;span&gt;minYValue);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xMarker = originX-10&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; yMarker = parseInt( originY-cHeight*(markerVal-minYValue)/(maxYValue-minYValue) );
&lt;span&gt;                    
                    ctx.fillText(markerVal, xMarker, yMarker&lt;/span&gt;+3, cSpace); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字&lt;/span&gt;
                    
                    &lt;span&gt;if&lt;/span&gt;(i&amp;gt;0&lt;span&gt;){
                        drawLine(originX&lt;/span&gt;+2, yMarker, originX+&lt;span&gt;cWidth, yMarker);
                    }
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制 x&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; oneXVal = (maxXValue-minXValue)/totalNomber;
                ctx.textAlign = &quot;center&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;=totalNomber; i++&lt;span&gt;){
                    
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; markerVal =  parseInt(i*oneXVal+&lt;span&gt;minXValue);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xMarker = parseInt( originX+cWidth*(markerVal-minXValue)/(maxXValue-minXValue));
                    &lt;span&gt;var&lt;/span&gt; yMarker = originY+30&lt;span&gt;;
                    ctx.fillText(markerVal, xMarker, yMarker, cSpace); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字&lt;/span&gt;
                    
                    &lt;span&gt;if&lt;/span&gt;(i&amp;gt;0&lt;span&gt;){
                        drawLine(xMarker, cMargin, xMarker, originY&lt;/span&gt;-2&lt;span&gt;);
                    }
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标题 y&lt;/span&gt;
&lt;span&gt;                ctx.save();
                ctx.rotate(&lt;/span&gt;-Math.PI/2);
                ctx.fillText(textArr[1], -canvas.height/2, cSpace-10);
&lt;span&gt;                ctx.restore();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标题 x&lt;/span&gt;
                ctx.fillText(textArr[0], originX+cWidth/2, originY+cSpace/2+30&lt;span&gt;);
            };
               &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; --绘制散点图动画（接着上一步的代码写在 goChart方法中 ）&lt;/p&gt;
&lt;p&gt;此处里面有对鼠标移动的处理，大家看到有mouseMove 的地方先搁置，写到后边就知道用处了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/799986/201710/799986-20171019224900631-719117839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;102&quot;&gt;
&lt;pre&gt;
               drawChartAnimate(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制柱状图的动画&lt;/span&gt;
               
               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制动画图&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawChartAnimate(mouseMove){
                
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ifTip = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tipArr = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;dataArr.length; i++&lt;span&gt;){
                    
                    ctx.fillStyle &lt;/span&gt;= &quot;rgba(46,199,201,0.5)&quot;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oX = originX+cWidth*(dataArr[i][0]-minXValue)/(maxXValue-minXValue);
                    &lt;span&gt;var&lt;/span&gt; oY = originY - cHeight*(dataArr[i][1]-minYValue)/(maxYValue-minYValue);
&lt;span&gt;                    ctx.beginPath();
                    
                    ctx.arc(oX,oY,&lt;/span&gt;8*ctr/numctr,0, Math.PI*2,true);
                    
                    &lt;span&gt;if&lt;/span&gt;(!ifTip &amp;amp;&amp;amp; mouseMove &amp;amp;&amp;amp; ctx.isPointInPath(mousePosition.x*2, mousePosition.y*2)){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是鼠标移动的到柱状图上，重新绘制图表&lt;/span&gt;
                        ctx.fillStyle = &quot;rgba(46,199,201,1)&quot;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否绘制提示&lt;/span&gt;
                        ifTip = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        tipArr &lt;/span&gt;=&lt;span&gt; dataArr[i];
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        ctx.fillStyle &lt;/span&gt;= &quot;rgba(46,199,201,0.5)&quot;&lt;span&gt;;
                    }
                    ctx.fill();
                    
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制平均值线&lt;/span&gt;
&lt;span&gt;                drawAverageLine();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制提示&lt;/span&gt;
                ifTip &amp;amp;&amp;amp; drawTips(mousePosition.x*2, mousePosition.y*2,tipArr[0],tipArr[1&lt;span&gt;]);
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ctr&amp;lt;&lt;span&gt;numctr){
                    ctr&lt;/span&gt;++&lt;span&gt;;
                    setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        ctx.clearRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width, canvas.height);
                        drawLineLabelMarkers();
                        drawChartAnimate();
                    }, speed&lt;/span&gt;*=1.08&lt;span&gt;);
                }
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制平均值线&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawAverageLine(){
                ctx.beginPath();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; yNb = originY-cHeight*(yAverage-minYValue)/(maxYValue-minYValue);
                &lt;span&gt;var&lt;/span&gt; xNb = originX+cWidth*ctr/numctr+cMargin/2&lt;span&gt;;
                ctx.moveTo(originX&lt;/span&gt;+2&lt;span&gt;,yNb);
                ctx.lineTo(xNb,yNb);
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置虚线&lt;/span&gt;
&lt;span&gt;                ctx.save();
                ctx.lineWidth &lt;/span&gt;= 4&lt;span&gt;;
                ctx.strokeStyle &lt;/span&gt;= ctx.fillStyle = &quot;#2ec7c9&quot;&lt;span&gt;;
                ctx.setLineDash([&lt;/span&gt;10&lt;span&gt;]);
                ctx.stroke();
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制三角&lt;/span&gt;
&lt;span&gt;                ctx.beginPath();
                ctx.moveTo(xNb,yNb);
                ctx.lineTo(xNb&lt;/span&gt;-5,yNb-8&lt;span&gt;);
                ctx.lineTo(xNb&lt;/span&gt;+12&lt;span&gt;,yNb);
                ctx.lineTo(xNb&lt;/span&gt;-5,yNb+8&lt;span&gt;);
                ctx.fill();
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制文本&lt;/span&gt;
                ctx.font = &quot;24px Arial&quot;&lt;span&gt;;
                ctx.fillText(yAverage, xNb&lt;/span&gt;-10,yNb-10&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;还原&lt;/span&gt;
&lt;span&gt;                ctx.restore();
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制提示框&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawTips(oX,oY,xVal,yVal){
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle &lt;/span&gt;= &quot;rgba(0,0,0,0.5)&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; H = 100&lt;span&gt;;
                roundedRect(ctx,oX&lt;/span&gt;+10,oY-H/2,2*H,H,5);
&lt;span&gt;                
                ctx.fillStyle &lt;/span&gt;= &quot;#fff&quot;&lt;span&gt;;
                ctx.fillText(textArr[&lt;/span&gt;1]+&quot;：&quot;+yVal, oX+H,oY-H/10);
                ctx.fillText(textArr[0]+&quot;：&quot;+xVal, oX+H,oY+H/4);
&lt;span&gt;                ctx.restore();
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制圆角矩形的方法&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; roundedRect(ctx,x,y,width,height,radius){
                ctx.moveTo(x,x&lt;/span&gt;+&lt;span&gt;radius);
                ctx.beginPath();
                ctx.lineTo(x,y&lt;/span&gt;+height-&lt;span&gt;radius);
                ctx.quadraticCurveTo(x,y&lt;/span&gt;+height,x+radius,y+&lt;span&gt;height);
                ctx.lineTo(x&lt;/span&gt;+width-radius, y+&lt;span&gt;height);
                ctx.quadraticCurveTo(x&lt;/span&gt;+width,y+height,x+width,y+height-&lt;span&gt;radius);
                ctx.lineTo(x&lt;/span&gt;+width,y+&lt;span&gt;radius);
                ctx.quadraticCurveTo(x&lt;/span&gt;+width,y,x+width-&lt;span&gt;radius,y);
                ctx.lineTo(x&lt;/span&gt;+&lt;span&gt;radius,y);
                ctx.quadraticCurveTo(x,y,x,y&lt;/span&gt;+&lt;span&gt;radius);
                ctx.closePath();
                ctx.fill();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  --监听鼠标移动，以实现移动到当前项作颜色变化（接着上一步的代码写在 goChart方法中 ）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测鼠标移动&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; mouseTimer = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            canvas.addEventListener(&lt;/span&gt;&quot;mousemove&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
                e &lt;/span&gt;= e ||&lt;span&gt; window.event;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( e.offsetX || e.offsetX==0&lt;span&gt; ){
                    mousePosition.x &lt;/span&gt;=&lt;span&gt; e.offsetX;
                    mousePosition.y &lt;/span&gt;=&lt;span&gt; e.offsetY;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;( e.layerX || e.layerX==0&lt;span&gt; ){
                    mousePosition.x &lt;/span&gt;=&lt;span&gt; e.layerX;
                    mousePosition.y &lt;/span&gt;=&lt;span&gt; e.layerY;
                }
                
                clearTimeout(mouseTimer);
                mouseTimer &lt;/span&gt;= setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    ctx.clearRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width, canvas.height);
                    drawLineLabelMarkers();
                    drawChartAnimate(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                },&lt;/span&gt;10&lt;span&gt;);
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;--点击图表刷新（接着上一步的代码写在 goChart方法中 ）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击刷新图表&lt;/span&gt;
            canvas.onclick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                initChart(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
                drawLineLabelMarkers(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
                drawChartAnimate(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制折线图的动画&lt;/span&gt;
            };
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 这样我们整个代码就编写完成了，为了代码更便于阅读，我们可以将所有方法放到后面，把调用方法的代码放到前面，经过调整的全部代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;655&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;chart&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;700&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;margin:50px&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; goChart(cBox,dataArr,textArr){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明所需变量&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; canvas,ctx;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; cWidth, cHeight, cMargin, cSpace;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; originX, originY;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 柱状图属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; bMargin, tobalBars, bWidth, maxXValue, maxYValue, minXValue, minYValue;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; totalNomber;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; yAverage, minTrueYValue, maxTrueYValue;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运动相关变量&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ctr, numctr, speed;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标移动&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; mousePosition &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {};
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建canvas并获得canvas上下文&lt;/span&gt;
&lt;span&gt;               canvas &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.createElement(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(canvas &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; canvas.getContext){
                ctx &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.getContext(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
               
               canvas.innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你的浏览器不支持HTML5 canvas&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
               cBox.appendChild(canvas);
            
            initChart(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
&lt;span&gt;            drawLineLabelMarkers(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
&lt;span&gt;            drawChartAnimate(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制柱状图的动画&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测鼠标移动&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; mouseTimer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            canvas.addEventListener(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mousemove&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
                e &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; window.event;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;( e.offsetX &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; e.offsetX&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
                    mousePosition.x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.offsetX;
                    mousePosition.y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.offsetY;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;( e.layerX &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; e.layerX&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
                    mousePosition.x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.layerX;
                    mousePosition.y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.layerY;
                }
                
                clearTimeout(mouseTimer);
                mouseTimer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    ctx.clearRect(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,canvas.width, canvas.height);
                    drawLineLabelMarkers();
                    drawChartAnimate(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                },&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击刷新图表&lt;/span&gt;
&lt;span&gt;            canvas.onclick &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                initChart(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
&lt;span&gt;                drawLineLabelMarkers(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
&lt;span&gt;                drawChartAnimate(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制折线图的动画&lt;/span&gt;
&lt;span&gt;            };


            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initChart(){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表信息&lt;/span&gt;
&lt;span&gt;                cMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;60&lt;/span&gt;&lt;span&gt;;
                cSpace &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将canvas扩大2倍，然后缩小，以适应高清屏幕&lt;/span&gt;
&lt;span&gt;                canvas.width &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cBox.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ;
                canvas.height &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cBox.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                canvas.style.height &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.height&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2 + &quot;px&quot;;&lt;/span&gt;
&lt;span&gt;                canvas.style.width &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.width&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2 + &quot;px&quot;;&lt;/span&gt;
&lt;span&gt;                cHeight &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.height &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; cMargin&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt; cSpace;
                cWidth &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.width &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; cMargin&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt; cSpace;
                originX &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cMargin &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; cSpace;
                originY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cMargin &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; cHeight;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 柱状图信息&lt;/span&gt;
&lt;span&gt;                bMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.width&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;40;&lt;/span&gt;
&lt;span&gt;                tobalBars &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; dataArr.length;
                bWidth &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt( cWidth&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tobalBars - bMargin );&lt;/span&gt;
&lt;span&gt;                maxXValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                maxYValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; xArr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; yArr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataArr.length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
                    xArr.push( dataArr[i][&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] );
                    yArr.push( dataArr[i][&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] );
                }
                yAverage &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; ( eval(yArr.join(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;yArr.length ).toFixed(2);&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; addNb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(yAverage&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;10); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于在轴前后加空白&lt;/span&gt;
&lt;span&gt;                
                minXValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.min.apply(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,xArr); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求最小值&lt;/span&gt;
&lt;span&gt;                minXValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(Math.max(minXValue&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;addNb, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果减去addNb后小于零，就取零&lt;/span&gt;
&lt;span&gt;                maxXValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(Math.max.apply(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,xArr)&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;addNb); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于轴的显示，所以取整&lt;/span&gt;
&lt;span&gt;                
                minYValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; minTrueYValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.min.apply(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,yArr);
                minYValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(Math.max(minYValue&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;addNb, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;));
                maxTrueYValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.max.apply(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,yArr);
                maxYValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(maxTrueYValue&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;addNb);
                
                totalNomber &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运动相关&lt;/span&gt;
&lt;span&gt;                ctr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                numctr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;50&lt;/span&gt;&lt;span&gt;;
                speed &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1.5&lt;/span&gt;&lt;span&gt;;

            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawLineLabelMarkers(){
                ctx.translate(&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当只绘制1像素的线的时候，坐标点需要偏移，这样才能画出1像素实线&lt;/span&gt;
&lt;span&gt;                ctx.font &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;24px Arial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                ctx.lineWidth &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                ctx.strokeStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; y轴&lt;/span&gt;
&lt;span&gt;                drawLine(originX, originY, originX, cMargin);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; x轴&lt;/span&gt;
&lt;span&gt;                drawLine(originX, originY, originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cWidth, originY);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标记&lt;/span&gt;
&lt;span&gt;                drawMarkers();
                ctx.translate(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 还原位置&lt;/span&gt;
&lt;span&gt;            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画线的方法&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawLine(x, y, X, Y){
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(X, Y);
                ctx.stroke();
                ctx.closePath();
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标记&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawMarkers(){
                ctx.strokeStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#E0E0E0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制 y&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; oneYVal &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (maxYValue&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minYValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;totalNomber;&lt;/span&gt;
&lt;span&gt;                
                ctx.textAlign &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt;totalNomber; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; markerVal &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt(i&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;oneYVal&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;minYValue);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; xMarker &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; originX&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; yMarker &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt( originY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cHeight&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(markerVal&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minYValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;(maxYValue-minYValue) );&lt;/span&gt;
&lt;span&gt;                    
                    ctx.fillText(markerVal, xMarker, yMarker&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, cSpace); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字&lt;/span&gt;
                    
                    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                        drawLine(originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, yMarker, originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cWidth, yMarker);
                    }
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制 x&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; oneXVal &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (maxXValue&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minXValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;totalNomber;&lt;/span&gt;
&lt;span&gt;                ctx.textAlign &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt;totalNomber; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
                    
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; markerVal &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;  parseInt(i&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;oneXVal&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;minXValue);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; xMarker &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; parseInt( originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cWidth&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(markerVal&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minXValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;(maxXValue-minXValue));&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; yMarker &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; originY&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
                    ctx.fillText(markerVal, xMarker, yMarker, cSpace); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字&lt;/span&gt;
                    
                    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
                        drawLine(xMarker, cMargin, xMarker, originY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
                    }
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标题 y&lt;/span&gt;
&lt;span&gt;                ctx.save();
                ctx.rotate(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;Math.PI&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2);&lt;/span&gt;
&lt;span&gt;                ctx.fillText(textArr[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;canvas.height&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2, cSpace-10);&lt;/span&gt;
&lt;span&gt;                ctx.restore();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标题 x&lt;/span&gt;
&lt;span&gt;                ctx.fillText(textArr[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;], originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cWidth&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2, originY+cSpace&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;);
            };

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制动画图&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawChartAnimate(mouseMove){
                
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; ifTip &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; tipArr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataArr.length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
                    
                    ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rgba(46,199,201,0.5)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oX &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cWidth&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(dataArr[i][&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minXValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;(maxXValue-minXValue);&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; oY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; originY &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; cHeight&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(dataArr[i][&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minYValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;(maxYValue-minYValue);&lt;/span&gt;
&lt;span&gt;                    ctx.beginPath();
                    
                    ctx.arc(oX,oY,&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;ctr&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;numctr,0, Math.PI*2,true);&lt;/span&gt;
                    
                    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;ifTip &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; mouseMove &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; ctx.isPointInPath(mousePosition.x&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, mousePosition.y&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)){ &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是鼠标移动的到柱状图上，重新绘制图表&lt;/span&gt;
&lt;span&gt;                        ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rgba(46,199,201,1)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否绘制提示&lt;/span&gt;
&lt;span&gt;                        ifTip &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                        tipArr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; dataArr[i];
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rgba(46,199,201,0.5)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    }
                    ctx.fill();
                    
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制平均值线&lt;/span&gt;
&lt;span&gt;                drawAverageLine();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制提示&lt;/span&gt;
&lt;span&gt;                ifTip &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; drawTips(mousePosition.x&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, mousePosition.y&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,tipArr[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;],tipArr[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(ctr&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;numctr){
                    ctr&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
                    setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        ctx.clearRect(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,canvas.width, canvas.height);
                        drawLineLabelMarkers();
                        drawChartAnimate();
                    }, speed&lt;/span&gt;&lt;span&gt;*=&lt;/span&gt;&lt;span&gt;1.08&lt;/span&gt;&lt;span&gt;);
                }
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制平均值线&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawAverageLine(){
                ctx.beginPath();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; yNb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; originY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;cHeight&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(yAverage&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;minYValue)&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;(maxYValue-minYValue);&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; xNb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cWidth&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;ctr&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;numctr+cMargin&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                ctx.moveTo(originX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,yNb);
                ctx.lineTo(xNb,yNb);
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置虚线&lt;/span&gt;
&lt;span&gt;                ctx.save();
                ctx.lineWidth &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
                ctx.strokeStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#2ec7c9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                ctx.setLineDash([&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;]);
                ctx.stroke();
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制三角&lt;/span&gt;
&lt;span&gt;                ctx.beginPath();
                ctx.moveTo(xNb,yNb);
                ctx.lineTo(xNb&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,yNb&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
                ctx.lineTo(xNb&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;,yNb);
                ctx.lineTo(xNb&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,yNb&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
                ctx.fill();
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制文本&lt;/span&gt;
&lt;span&gt;                ctx.font &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;24px Arial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                ctx.fillText(yAverage, xNb&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,yNb&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;还原&lt;/span&gt;
&lt;span&gt;                ctx.restore();
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制提示框&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawTips(oX,oY,xVal,yVal){
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rgba(0,0,0,0.5)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; H &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                roundedRect(ctx,oX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,oY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2,2*H,H,5);&lt;/span&gt;
&lt;span&gt;                
                ctx.fillStyle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#fff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                ctx.fillText(textArr[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;yVal, oX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;H,oY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;10);&lt;/span&gt;
&lt;span&gt;                ctx.fillText(textArr[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;xVal, oX&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;H,oY&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;4);&lt;/span&gt;
&lt;span&gt;                ctx.restore();
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制圆角矩形的方法&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; roundedRect(ctx,x,y,width,height,radius){
                ctx.moveTo(x,x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;radius);
                ctx.beginPath();
                ctx.lineTo(x,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;radius);
                ctx.quadraticCurveTo(x,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;height,x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;radius,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;height);
                ctx.lineTo(x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;radius, y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;height);
                ctx.quadraticCurveTo(x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;width,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;height,x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;width,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;radius);
                ctx.lineTo(x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;width,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;radius);
                ctx.quadraticCurveTo(x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;width,y,x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;radius,y);
                ctx.lineTo(x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;radius,y);
                ctx.quadraticCurveTo(x,y,x,y&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;radius);
                ctx.closePath();
                ctx.fill();
            }

        }

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; dataArr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [[&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;193.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;187.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.8&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;181.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;62.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;184.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;173.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;173.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;178.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;164.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;173.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;60.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;183.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;189.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;170.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;59.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;61.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;88.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;59.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;169.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;164.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;55.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;163.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;57.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;61.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;164.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;101.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;171.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;56.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;197.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;175.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;102.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;169.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.7&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;184.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;53.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;178.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;168.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;55.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;157.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;58.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;88.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;58.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;78.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;116.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;163.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.2&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;198.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;166.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;166.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;168.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;108.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;63.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;68.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;165.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;102.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;172.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;95.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;193.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;95.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;96.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.8&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;171.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.4&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;69.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;86.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;92.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;93.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.7&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;61.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;168.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;185.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.5&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;66.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;160.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;88.6&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;186.7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;101.4&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;91.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;67.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;175.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.7&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;175.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;81.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;181.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;182.9&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.0&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;102.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;184.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;71.8&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;94.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;70.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;64.5&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;77.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;72.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;87.3&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;174.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;80.0&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;176.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.6&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;74.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;188.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;85.9&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;73.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;167.6&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;76.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;183.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;65.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;183.0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;90.9&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;89.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;170.2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;62.3&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;82.7&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;179.1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;79.1&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;190.5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;98.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;177.8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;84.1&lt;/span&gt;&lt;span&gt;],
                [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.2&lt;/span&gt;&lt;span&gt;], [&lt;/span&gt;&lt;span&gt;180.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;83.2&lt;/span&gt;&lt;span&gt;]
            ];
            
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * 参数1 ：需要显示canvas的dom  (非canvas标签，需要指定height和width)
         * 参数2：二维数据  [0]横轴   [1]纵轴
         * 参数3：横轴名称 纵轴名称
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        goChart(document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chart&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),dataArr,[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;身 高&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;体 重&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])


    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/799986/201710/799986-20171019225451193-628384985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;好了，今天就讲到这里，希望大家把代码都自己敲一遍。&lt;/p&gt;


&lt;p&gt;关注公众号，博客更新即可收到推送&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/799986/201710/799986-20171011124427824-1210633966.jpg&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 19 Oct 2017 14:56:00 +0000</pubDate>
<dc:creator>苏天天</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengduxiaoc/p/7696056.html</dc:identifier>
</item>
<item>
<title>浅谈哈希表 - 迷失的小菜包</title>
<link>http://www.cnblogs.com/cbs-writing/p/7696017.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cbs-writing/p/7696017.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cbs.hash;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 定义哈希表的每一个节点
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; CBS
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; {
    K key;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;key值&lt;/span&gt;
    V value;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;value值&lt;/span&gt;
    Node&amp;lt;K,V&amp;gt; next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下一个节点&lt;/span&gt;
    
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node(){
        
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node(K k,V v){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key=&lt;span&gt;k;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value=&lt;span&gt;v;
    }
}

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cbs.hash;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 自定义哈希表
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; CBS
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyHashTable&amp;lt;K,V&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] table;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count=0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希表长度&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; f=0.75f;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装载因子&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; index;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组下标&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; hash;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希值
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化数组长度&lt;/span&gt;
    @SuppressWarnings(&quot;unchecked&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyHashTable(){
        table&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Node[9&lt;span&gt;];
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 添加方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; put(K key,V value){
        hash&lt;/span&gt;=key.hashCode();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取哈希值&lt;/span&gt;
        index = (hash &amp;amp; 0x7FFFFFFF) % table.length;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取下标值&lt;/span&gt;
&lt;span&gt;        
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; node=&lt;span&gt;table[index];
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; tem=&lt;span&gt;node;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果节点已经存在，更新value值&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(;tem!=&lt;span&gt;null&lt;/span&gt;;tem=&lt;span&gt;tem.next){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(hash==tem.key.hashCode() &amp;amp;&amp;amp;&lt;span&gt; tem.key.equals(key)){
                tem.value&lt;/span&gt;=&lt;span&gt;value;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; newNode=&lt;span&gt;new&lt;/span&gt; Node&amp;lt;K, V&amp;gt;&lt;span&gt;(key,value);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在链表的表头插入&lt;/span&gt;
        table[index]=&lt;span&gt;newNode;
        newNode.next&lt;/span&gt;=&lt;span&gt;node;
        count&lt;/span&gt;++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 查找指定key值下的节点
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; k
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; key值对应的节点对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Node&amp;lt;K, V&amp;gt;&lt;span&gt; find(K k){
        hash&lt;/span&gt;=&lt;span&gt;k.hashCode();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = (hash &amp;amp; 0x7FFFFFFF) %&lt;span&gt; table.length;
        
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; node=&lt;span&gt;table[index];
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; tem=&lt;span&gt;node;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(;tem!=&lt;span&gt;null&lt;/span&gt;;tem=&lt;span&gt;tem.next){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(hash==tem.key.hashCode() &amp;amp;&amp;amp;&lt;span&gt; tem.key.equals(k)){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tem;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 更新key值对应的value值
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; k
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; v
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(K k,V v){
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; node=&lt;span&gt;find(k);
        node.value&lt;/span&gt;=&lt;span&gt;v;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 删除指定key值的节点
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; k
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; delete(K k){
        hash&lt;/span&gt;=&lt;span&gt;k.hashCode();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = (hash &amp;amp; 0x7FFFFFFF) %&lt;span&gt; table.length;
        
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; node=&lt;span&gt;table[index];
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; tem=&lt;span&gt;node;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(;tem!=&lt;span&gt;null&lt;/span&gt;;tem=&lt;span&gt;tem.next){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(hash==tem.next.key.hashCode() &amp;amp;&amp;amp;&lt;span&gt; tem.next.key.equals(k)){
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; nextNode=&lt;span&gt;find(k);
        tem.next&lt;/span&gt;=&lt;span&gt;nextNode.next;
        count&lt;/span&gt;--&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取key值节点下面的value值
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; k
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;    V类型的值
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(K k){
        Node&lt;/span&gt;&amp;lt;K,V&amp;gt; Node=&lt;span&gt;find(k);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Node!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (V)Node.value;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; count;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 19 Oct 2017 14:49:00 +0000</pubDate>
<dc:creator>迷失的小菜包</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cbs-writing/p/7696017.html</dc:identifier>
</item>
<item>
<title>rewrap-ajax.js插件 - 微宇宙</title>
<link>http://www.cnblogs.com/hao5599/p/7695902.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hao5599/p/7695902.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　很久没有动手写技术的文章，这个过程中间一直在写日记，生活点滴的记录替代了技术文章的编写，可以看出以往的内心是激情或烈火，现在是&lt;/span&gt;...&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最近写了一个&lt;/span&gt;JS插件，用圈内的话说叫造了个轮子，造的好与不好都不是自己说了算，关键还是大家用的好与不好。&lt;br/&gt;&lt;span&gt;　　当然我自己也在使用，由于个人偏爱与喜好，所以未能借签其他&lt;/span&gt;Ajax框架的写法，目前的版本都是以版本一进行往上整合的成果，所以你想要全面了解内部的结构，可以先从版本一开始看起。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　现在我们说说整体的设计结构，版本一是好友收集整理的方法，基础的写法已经成型，调用&lt;/span&gt;nativeAjax方放即可，方法内部有三个参数，第一个为ajax的属性，第二个为成功的函数，第三个为错误的函数，具体如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; nativeAjax(postOption,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.1、请求成功回调&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    console.log(data);&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; },&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(error){&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.2、请求失败回调,返回HTTP状态码&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    console.log(error);&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　基于以上的设计模式，然后给他进行二次封装，首先&lt;/span&gt;ajax的服务属性固定不变，那么我们可以把所有的ajax properties绑定到对象上即可，如果直接绑定在指定的对象上，其实我们只管给参数和拿参数，省了很多事情，这个过程简单了不少，那么灵活性就不会很高。如果我们想自己在内部进行封装，那么就要求高灵活性和可复用属性，所以我把属性放在了function函数里面，于是在内部使用this指针绑定ajax属性进行调用，同时可以在内部进行插件的再次封装，这是我所理解的这个版本的内部结构的设计模式。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　版本二&lt;/span&gt;&lt;a href=&quot;https://github.com/ZWLTZ/rewrap-ajax&quot; target=&quot;_blank&quot;&gt;rewrap-ajax&lt;/a&gt;调用的外部结构类似jq的JQ.fn属性，是以链式结构的对象属性方法来使用的，所以我们在&amp;lt;script&amp;gt;内部使用wrap.service(`ajax`, foo)即可，然后foo函数内部具有ajax的服务属性，我们只要把ajax的属性绑定到this指针上即可，ajax属性分别有URL，TYPE，SUCCESS，ERROR四个属性，并且这4个属性都支持大小写的格式。然后this.success，this.error是二个方法，分别是调用成功的数据请求和调用错误状态的捕获，this.success和this.error仅一个参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; wrap.service('ajax',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ajax() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 支持大小写&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.URL = &quot;query.do&quot;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.TYPE = &quot;GET&quot;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.SUCCESS = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; val =&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        console.log(val)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.ERROR = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(err) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        console.log(err)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　版本三&lt;/span&gt;&lt;a href=&quot;https://github.com/ZWLTZ/rewrap-ajax&quot; target=&quot;_blank&quot;&gt;rewrap-ajax&lt;/a&gt;保持版本二的外部结构和this写法，this指针上多了二个功能，分别是props和methods方法，其中props道具内部结构为json的数据格式，return返回的对象{}具有多个state...状态，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;return {&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;State_01: [{ class : ‘.main’}],&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;State_02: { class : ‘.main’},&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;State_03: { class : ‘.main’}&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　其中每一个&lt;/span&gt;state状态对应的value值必须是使用数组[]保存，数组内部必须是一个对象{}，对象的属性以常规格式要求，对象对应的value必须是一个dom节点能访问的Element元素（或node节点，class类，id，tag标签等等）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然而&lt;/span&gt;methods方法的内部结构为常规的对象调用函数的格式，其中return返回的对象key键为API的方法，注意它不支持自定义写法，返回的对象的value为函数写法，那么函数方法接收一个参数，此参数为props管道内部的state状态属性。并且函数的方法内部使用this指针写法，如下：this.el().add()&lt;/p&gt;
&lt;p&gt;完整结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     addClass: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (scope){&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el([scope.class,scope.static]).add()&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    },&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     removeClass: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (scope){&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el([scope.class,scope.tip]).remove()&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    },&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     pushHtml: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (scope){&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el([scope.static,scope.class]).push()&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    },&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     hasClass: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (scope){&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el(scope.define.content).has()&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　其中&lt;/span&gt;.el()方法内部的参数通过props管道流出状态属性，此属性的$scope作用域为state属性，参数接收的结果为字符串，必须是从props获得的字符串，多个字符串的结果可以使用数组的[]形式储存，那么这些属性都具有这个API方法。el()后面的add方法的作用为当前的元素调用的add方法，然而add绑定的方法是API方法，比如addClass就是rewrap-ajax内部的API方法，但是你在外部调用的时候，可以使用你自定义的add方法去实现addClass方法，方法内部不需要参数，但是外部管道调用add是否需要参数取决与rewrap-ajax内部的API方法。所以之后会公开API方法。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;外部调用的方式，通过作用域&lt;/span&gt;$scope的形式获得props管道的方法，外部调用如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.ERROR = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;( $scope, err ) {
    $scope.$props.$el($scope.$props.$scope.define.static).add(&lt;/span&gt;'error_message'&lt;span&gt;)
    $scope.$props.$el($scope.$props.$scope.define.static).push(&lt;/span&gt;'调用出错 error'&lt;span&gt;)
    $scope.$props.$el($scope.$props.$scope.define.tip).remove(&lt;/span&gt;'show'&lt;span&gt;)
    console.log(err)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　目前$scope是&lt;/span&gt;作为方法的第一个参数流进来，那么元素的管道为$scope.$props.$scope，获得元素方法的管道为$scope.$props.$el()，元素调用API的方法为：add()，remove()，push()等等。&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;rewrap-ajax&quot; href=&quot;https://github.com/ZWLTZ/rewrap-ajax&quot; target=&quot;_blank&quot;&gt;rewrap-ajax&lt;/a&gt;详细&lt;strong&gt;GIT&lt;/strong&gt;地址：https://github.com/ZWLTZ/rewrap-ajax&lt;/p&gt;

</description>
<pubDate>Thu, 19 Oct 2017 14:29:00 +0000</pubDate>
<dc:creator>微宇宙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hao5599/p/7695902.html</dc:identifier>
</item>
<item>
<title>深入浅出 SpringMVC - 2 提升篇 - crawl+</title>
<link>http://www.cnblogs.com/crawl/p/7695768.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/crawl/p/7695768.html</guid>
<description>&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;　　本篇笔记是继 &lt;span&gt;&lt;a title=&quot;深入浅出 SpringMVC - 1&quot; href=&quot;http://www.cnblogs.com/crawl/p/7690973.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;深入浅出 SpringMVC - 1&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; 后的续篇，主要介绍了 SpringMVC 的实际小应用，包括 &lt;span&gt;SpringMVC 的数据格式化&lt;/span&gt;、&lt;span&gt;使用 JSR 303 验证标准&lt;/span&gt; 在 &lt;span&gt;SpringMVC 中进行数据的校验&lt;/span&gt;、&lt;span&gt;SpringMVC 结合 Ajax 在请求处理器中返回 JSON&lt;/span&gt;、&lt;span&gt;SpringMVC 的国际化及国际化错误消息的显示&lt;/span&gt;、&lt;span&gt;使用 SpringMVC 的进行文件的上传与下载&lt;/span&gt;、&lt;span&gt;在 SpringMVC 中自定义拦截器&lt;/span&gt;、&lt;span&gt;SpringMVC 中的异常处理&lt;/span&gt;、&lt;span&gt;Spring 整合 SpringMVC&lt;/span&gt; 进行了详细的介绍。&lt;/p&gt;
&lt;p&gt;　　笔记中提供了大量的代码示例，需要说明的是，大部分代码示例都是以图片的形式展示的，所有的图片都是来自本人所敲代码的截图，不足之处，请大家指正~&lt;/p&gt;
&lt;p&gt;　　若有疑惑或者需要本系列分享中的资料工具，敬请联系 qingqing_crawl@163.com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十二、数据的格式化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 时间日期格式化   时间日期的字符串 ---&amp;gt; Date 类型&lt;/p&gt;
&lt;p&gt;1）在 SpringMVC 的配置文件中配置：&lt;span&gt;&lt;strong&gt;&amp;lt;mvc:annotation-driven /&amp;gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2）在 JavaBean 的对应 Date 类型的属性上添加 &lt;span&gt;&lt;strong&gt;@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)&lt;/strong&gt;&lt;/span&gt; 注解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105556709-765396319.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 数值的格式化&lt;/p&gt;
&lt;p&gt;1）在 SpringMVC 的配置文件中配置：&lt;span&gt;&lt;strong&gt;&amp;lt;mvc:annotation-driven&amp;gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2）在 JavaBean 的对应数值类型的属性上添加 &lt;strong&gt;&lt;span&gt;@NumberFormat&lt;/span&gt;(pattern=&quot;#,###,###.#&quot;)&lt;/strong&gt; #代表数字&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105620927-664445635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 获取数据格式化出错信息：使用 &lt;span&gt;&lt;strong&gt;BindingResult&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105646209-2109114336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十三、使用 JSR 303 验证标准 在 SpringMVC 中进行数据的校验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 加入 Hibernate Validate 的 jar 包：hibernate-validator-5.0.0.CR2\dist 路径下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105725912-738542279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;加入hibernate-validator-5.0.0.CR2\dist\lib\required 目录下的的出去 el 的另 3 个 jar 包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105745787-1774984629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 在 SpringMVC 的配置文件中配置&lt;strong&gt; &lt;span&gt;&amp;lt;mvc:annotation-driven /&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.在 JavaBean 对应的属性中添加所需的注解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105802631-1510770315.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 在 请求控制器对应的方法中为 JavaBean 添加 &lt;strong&gt;@Valid 注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105824599-409366691.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5.出错之后页面的去向&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105836006-1836205193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.在 jsp 页面显示错误信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105848896-1066751230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105946349-1278754133.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7. 定制和国际化错误信息&lt;/p&gt;
&lt;p&gt;1）创建国际化资源文件 &lt;strong&gt;i18n.properties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019105957756-303577523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2) 在 SpringMVC 的配置文件中配合国际化资源文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110009068-222943962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十四、SpringMVC 的请求处理器中返回 JSON&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 导入 3 个 jar 包：\jackson\SpringMVC_JSON 目录下的（此目录是LZ为了方便自定义的目录~~，大家只需注意一下的 jar 包）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110058959-1902463167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. jsp 页面创建测试连接，发送 Ajax&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110140802-540243428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110144381-3872893.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 请求处理器类的目标方法 直接返回所需要的数组或集合，并为目标方法添加 &lt;span&gt;&lt;strong&gt;@ResponseBody&lt;/strong&gt;&lt;/span&gt; 注解：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110418849-203657264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;补：&lt;span&gt;&lt;strong&gt;HttpMessageConverter&lt;/strong&gt;&lt;/span&gt; 的使用：&lt;/p&gt;
&lt;p&gt;1. &lt;span&gt;@RequestBody 修饰入参     &lt;strong&gt;@ResponseBody &lt;/strong&gt;&lt;strong&gt;修饰方法&lt;/strong&gt;&lt;/span&gt;  二者不必同时使用&lt;/p&gt;
&lt;p&gt;1）模拟文件上传操作：&lt;/p&gt;
&lt;p&gt;① 表单准备：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110447146-544236499.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 目标方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110459349-976802007.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;span&gt; &lt;strong&gt;HttpEntity&amp;lt;T&amp;gt; &lt;/strong&gt;&lt;strong&gt;修饰入参&lt;/strong&gt; &lt;/span&gt;和 &lt;span&gt;&lt;strong&gt;ResponseEntity&amp;lt;T&amp;gt; 修饰返回值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1)使用&lt;strong&gt; ResponseEntity&amp;lt;T&amp;gt;&lt;/strong&gt; 模拟&lt;span&gt;&lt;strong&gt;文件下载&lt;/strong&gt;&lt;/span&gt;操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110530412-1493405851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110534631-41357772.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十五、SpringMVC 的国际化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进行国际化首先要配置 &lt;strong&gt;3 个国际化资源文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110547568-1592673279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110551537-604704041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在 SpringMVC 的配置文件中&lt;strong&gt;配置国际化资源文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110600677-466722523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1. 在页面上能够根据浏览器语言设置的情况对文本(不是内容), 时间, 数值进行本地化处理 解决： &lt;strong&gt;使用 JSTL 的 fmt 标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）i18n.jsp 中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110617474-1901279579.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110621802-870085955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.如何&lt;strong&gt;在请求处理器类的目标方法中获取国际化资源文件 Locale 对应的消息&lt;/strong&gt; 解决：&lt;strong&gt;在请求处理器类中注入 &lt;span&gt;ResourceBundleMessageSource&lt;/span&gt; 的实例, 使用其对应的 getMessage 方法即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110647443-868579777.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.通过&lt;strong&gt;超链接切换 Locale&lt;/strong&gt;, 而不再依赖于浏览器的语言设置情况&lt;/p&gt;
&lt;p&gt;1）jsp 页面配置超链接&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110700459-249716044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）&lt;strong&gt;SpringMVC 的配置文件中配置 &lt;span&gt;SessionLocaleResolver 和 LocaleChangeInterceptor&lt;/span&gt; 拦截器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110727881-807224621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十六、SpringMVC 的文件上传与下载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.SpringMVC 中的文件上传&lt;strong&gt;依赖 apache-commons-fileupload 组件&lt;/strong&gt;，所以要导入 jar 包 apache-commons\commons-fileupload-1.2.1\lib 下的第一个 jar 包&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;apache-commons-fileupload &lt;/strong&gt;&lt;strong&gt;依赖于 commons-io&lt;/strong&gt; ，所以导入 apache-commons\commons-io-2.0 下的 io 包&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;SpringMVC &lt;/strong&gt;&lt;strong&gt;的配置文件中配置 MultipartResolver&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110806631-1096821108.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.准备文件上传的表单&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110816443-738414869.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.请求处理器中编写目标方法&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110826943-1292891551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;补：文件的下载见 十五 节 补充中的第 2 小节&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十七、自定义拦截器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 如何定义？&lt;/p&gt;
&lt;p&gt;1）创建一个拦截器类&lt;strong&gt;实现 &lt;span&gt;HandlerInterceptor&lt;/span&gt; 接口&lt;/strong&gt;，实现其中的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110902943-233911398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）在 SpringMVC 配置文件中进行配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110914459-887559170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 自定义拦截器中的三个方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110927193-545349312.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.拦截器的进一步配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110939224-1826000404.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十八、SpringMVC 中的异常处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在 SpringMVC 的配置文件中配置 &lt;span&gt;&lt;strong&gt;&amp;lt;mvc:annotation-driven /&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2.模拟异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019110950256-167541970.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111000943-39215426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;span&gt;&lt;strong&gt;@ExceptionHandler&lt;/strong&gt;&lt;/span&gt; 注解标注方法进行异常的处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111018349-455224500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111025224-1052211817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;strong&gt;@ControllerAdvice &lt;/strong&gt;注解用来标注异常处理类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111042443-1616225485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5. &lt;span&gt;&lt;strong&gt;@ResponseStatus&lt;/strong&gt;&lt;/span&gt; 既可以用来标注自定义异常类，也可以标注方法&lt;/p&gt;
&lt;p&gt;1）自定义异常类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111201131-982944805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3）&lt;strong&gt;@ResponseStatus&lt;/strong&gt; 修饰方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111216006-2058191033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6. 在 SpringMVC 中使用 &lt;span&gt;&lt;strong&gt;SimpleMappingExceptionResolve&lt;/strong&gt;r&lt;/span&gt; 来映射异常&lt;/p&gt;
&lt;p&gt;1）模拟数组下标越界异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111237287-985771621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111241771-1041036005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）在 SpringMVC 的&lt;strong&gt;配置文件中进行映射异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105175/201710/1105175-20171019111255209-412277011.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十九、Spring 整合 SpringMVC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.是否需要整合？&lt;/p&gt;
&lt;p&gt;1）需要: 通常情况下, 类似于数据源, 事务, 整合其他框架都是放在 Spring 的配置文件中(而不是放在 SpringMVC 的配置文件中).实际上放入 Spring 配置文件对应的 IOC 容器中的还有 Service 和 Dao.&lt;/p&gt;
&lt;p&gt; 2） 不需要: 都放在 SpringMVC 的配置文件中. 也可以分多个 Spring 的配置文件, 然后使用 import 节点导入其他的配置文件&lt;/p&gt;
&lt;p&gt;2.整合时常见问题及解决办法&lt;/p&gt;
&lt;p&gt;问题：若 Spring 的 IOC 容器和 SpringMVC 的 IOC 容器扫描的包有重合的部分, 就会导致有的 bean 会被创建 2 次.&lt;/p&gt;
&lt;p&gt;解决:&lt;/p&gt;
&lt;p&gt;1） 使 Spring 的 IOC 容器扫描的包和 SpringMVC 的 IOC 容器扫描的包没有重合的部分. (不方便实现)&lt;/p&gt;
&lt;p&gt;2.）可以&lt;strong&gt;使用 &lt;span&gt;exclude-filter 和 include-filter&lt;/span&gt; 子节点来规定只能扫描的注解 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.SpringIOC 容器和 SpringMVC IOC 容器的关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SpringMVC &lt;/strong&gt;&lt;strong&gt;的 IOC 容器中的 bean 可以来引用 Spring IOC 容器中的 bean.反之则不行. Spring IOC 容器中的 bean 却不能来引用 SpringMVC IOC 容器中的 bean!&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 19 Oct 2017 14:10:00 +0000</pubDate>
<dc:creator>crawl+</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/crawl/p/7695768.html</dc:identifier>
</item>
<item>
<title>Linux系列教程（一）——Linux系统简介 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/7689137.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/7689137.html</guid>
<description>&lt;p&gt;　　本系列教程将完整的讲解整个Linux相关的知识，这是楼主学完之后重新对Linux知识体系的整理。从最基础的知识开始，对于一个完全不懂Linux系统的人，相信在看完整个系列教程之后，都能对Linux有一个完完全全的了解。那么废话不多说，本篇博客作为整个教程的第一讲，我们就先来对Linux有个简单的整体介绍。&lt;/p&gt;

&lt;h3&gt;1、Unix&lt;/h3&gt;
&lt;p&gt;　　可能大家首先看到Unix会有点奇怪，我们要讲的不是Linux吗？怎么蹦出个Unix，虽然它和Linux长得有点像。因为它们确实有很深的渊源！&lt;/p&gt;
&lt;p&gt;　　Unix 是在1969年美国贝尔实验室的 肯.汤普森开发出来的一款操作系统，什么是操作系统？大家正在玩的 Windows 和 Max OS就是两个操作系统。操作系统是用户和计算机的接口，同时也是计算机硬件和应用程序的接口，也就是说我们和计算机打交道以及计算机底层硬件和应用程序打交道都是通过操作系统。如下所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201710/1120165-20171018234848412-1675793755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　而我们所说的Unix也是一个操作系统，其源代码大部分都是用C语言写的。它是一个强大的多用户、多任务操作系统，而且支持多种处理器架构。在1984年，Unix用户协会颁发了使用标准。后来IEEE为此制定了POSIX标准（即IEEE1003标准）国际标准名称为ISO/IEC9945，它通过一组最小的功能定义了在UNIX操作系统和应用程序之间兼容的语言接口。这个标准很重要，后面很多系统的开发都是遵循这个标准来的。&lt;/p&gt;
&lt;p&gt;　　虽然Unix系统这么好用，但是很不幸，它是一个对源代码实行知识产权保护的传统商业软件，也就是说Unix系统源代码不开源，而且Unix系统也是一个收费软件。这也直接导致了Linux系统的诞生。&lt;/p&gt;

&lt;h3&gt;2、Linux&lt;/h3&gt;
&lt;p&gt;　　UNIX 最初免费发布，在1990年，UNIX 在服务器市场尤其是大学校园成为主流操作系统，许多校园都有 UNIX 主机，当然还包括一些研究它的计算机系的学生。这些学生都渴望能在自己的电脑上运行 UNIX 。不幸的是，从那时候开始，UNIX 开始变得商业化，它的价格也变得非常昂贵。而唯一低廉的选择就是 MINIX ,这是一个功能有限的类似 UNIX 的操作系统，作者 Andrew Tanebaum 开发它的目的是用于教学。&lt;/p&gt;
&lt;p&gt;　　1991 年 10 月，Linus Torvalds（Linux 之父）在赫尔辛基大学接触 UNIX ,他希望能在自己的电脑上运行一个类似的操作系统。可是 UNIX 的商业版本非常昂贵，于是他从 MINIX 开始入手，而 Linus Torvalds 对Minix不是很满意，于是决定自己编写软件。他以学生时代熟悉的Unix作为原型， 在一台Intel 386 PC上开始了他的工作。他的进展很快，受工作成绩的鼓舞，他将这项成果通过互连网与其他同学共享，主要用于学术领域。他第一次发行的版本很快吸引了一些黑客。尽管最初的 Linux 并没有多少用处，但由于一些黑客的加入使它很快就具有了许多吸引人的特性，甚至一些对操作系统开发不感兴趣的人也开始关注它。每当出现新问题时，有人会立刻找到解决办法并加入其中，很快的， Linux成为了一个操作系统。值得注意的是&lt;strong&gt;Linux并没有包括Unix源码，它是按照公开的POSIX标准重新编写的&lt;/strong&gt;。Linux大量使用了由麻省剑桥免费软件基金的GNU软件，同时Linux自身也是用它们构造而成。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201710/1120165-20171019215639099-625558298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3、Unix和Linux的区别&lt;/h3&gt;
&lt;p&gt;　　Linux和UNIX的最大的区别是，前者是&lt;strong&gt;开放源代码的自由软件&lt;/strong&gt;，而后者是对源代码实行知识产权保护的传统&lt;strong&gt;商业软件&lt;/strong&gt;。这应该是他们最大的不同，这种不同体现在用户对前者有很高的自主权，而对后者却只能去被动的适应；这种不同还表现在前者的开发是处在一个完全开放的环境之中,而后者的开发完全是处在一个黑箱之中,只有相关的开发人员才能够接触的产品的原型。具体区别如下：&lt;/p&gt;
&lt;p&gt;　　①、UNIX系统大多是与硬件配套的，而Linux则可运行在多种硬件平台上.&lt;/p&gt;
&lt;p&gt;　　②、UNIX是商业软件，收费，而Linux是自由软件，免费、公开源代码的.&lt;/p&gt;
&lt;p&gt;　　③、Linux商业化的有RedHat Linux 、SuSe Linux、slakeware Linux、国内的红旗等，还有Turbo Linux.&lt;/p&gt;
&lt;p&gt;　　④、Unix主要有Sun 的Solaris、IBM的AIX,　HP的HP-UX，以及x86平台的的SCO Unix/Unixware.&lt;/p&gt;

&lt;h3&gt;4、总结&lt;/h3&gt;
&lt;p&gt;　　本篇博客我们对Linux系统有个简单的了解，大家过一眼就行了。下一篇博客我们将讲解如何安装Linux系统。&lt;/p&gt;
</description>
<pubDate>Thu, 19 Oct 2017 14:01:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/7689137.html</dc:identifier>
</item>
<item>
<title>Java 内存模型- Java Memory Model - 黄山清水岸边石</title>
<link>http://www.cnblogs.com/huangqingshi/p/7689752.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangqingshi/p/7689752.html</guid>
<description>&lt;p&gt;　　多线程越来越多的使用，使得我们需要对它的深入理解。那么就涉及到了Java内存模型JMM。JMM是JVM的一部分，JMM定义了一个线程修改了一个共享变量，其他线程什么时候或者如何看到这个变量，如何去访问共享变量。&lt;/p&gt;
&lt;p&gt;　　咱们来看一张图（图片手绘的，字写的不好，见谅），JVM里边分为堆和栈，每一个线程都有一个线程栈，用于区分其他线程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1236784/201710/1236784-20171019171848959-978052784.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　每个线程的入口是一个run方法，然后run方法开始调用其他方法。在方法中有两种数据类型，一种是原始类型，一种是引用类型。原始类型如（ boolean, byte, short, char, int, long, float, double），这种其他线程根本看不到，只在线程中使用（&lt;strong&gt;存放在线程调用栈中&lt;/strong&gt;）。另外一种是引用类型，引用类型比如原始类型的对象类型，比如（Boolean,Byte等），线程使用的时候会在堆中生成一个对象，并且将变量对其进行指向。每个线程使用此种变量的时候会自己创建一个变量（副本）并且指向，只有当前线程知道，其他线程看不到。那么引用对象的成员变量又分为基本类型和原始类型，并且一次进行创建副本并且指向。&lt;/p&gt;
&lt;p&gt;　　 在方法中用到static对象的实例的需要进行区别对待。因为在堆里边只有一个对象，所有线程对其进行引用。此时不是&lt;strong&gt;副本&lt;/strong&gt;，需要注意。那么如果多线程对其惊醒操作的时候会出现值写的不对的，比如两个线程同时对对象里边的成员变量原始int类型count进行加1，如果count初始化的0的话，可能会出现结果为1的情况。&lt;/p&gt;
&lt;p&gt;　　那么&lt;strong&gt;如果传过来的参数分为基本类型和引用类型呢&lt;/strong&gt;？如果为基本类型，那么就是副本，如果是引用类型的话，就是原始对象的副本和副本指向，在这时需要注意，如果改了内存中对象的属相，那么随之这个对象会发生改变，但是对象的指向不会改变。&lt;/p&gt;
&lt;p&gt;　　下面咱们通过代码才详细看一下，看之前首先看看图片。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1236784/201710/1236784-20171019171942302-1080800276.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　咱们先进行简单的解释，一个对象，里边有两个方法，第一个方法只有一个原始类型变量，第二个方法有两个变量，一个是原始对象引用类型，另一个是静态对象实例的引用类型。这个图就是他们的内存结构图。下面咱们来看看代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hqs.jmm;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 
 * JMM对象
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; qs.huang
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyJMMObject &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
        methodOne();
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; methodOne() {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; var1 = 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法内部变量,原始类型&lt;/span&gt;
&lt;span&gt;        methodTwo();
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; methodTwo(){
        Integer var1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Integer(0); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法内部变量，引用变量&lt;/span&gt;
        MyReferenceObj var2 = MyReferenceObj.instance; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;静态引用变量&lt;/span&gt;
&lt;span&gt;    }
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hqs.jmm;


&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 
 * 引用对象
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; qs.huang
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyReferenceObj {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MyReferenceObj instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyReferenceObj();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Integer intObj = &lt;span&gt;new&lt;/span&gt; Integer(1&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; intPrimary = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏构造&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; MyReferenceObj(){}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为中的var1是方法1的局部变量，也是原始类型，每个用到它的地方，把它放到方法栈中。每一个线程都有自己的栈，所以每个一份。&lt;/p&gt;
&lt;p&gt;　　方法2中的var1是一个对象类型的也是局部的，每个线程需要在堆里边创建一个对象，同时对它进行指向。&lt;/p&gt;
&lt;p&gt;　　方法2中var2是一个静态对象实例的引用，所以再堆中只有一份，并且在加载的时候进行的实例化，因为对象中还有引用类型，所以产生了一个对intObj的引用，同时还有一个int原始类型存在堆里，跟随实例对象。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;那么方法中如果有基本类型的数组呢？&lt;/strong&gt;那数组会在堆中生成，然后对象只想堆中的数组对象，多线程的话，每个线程会生成自己所需要的副本，当方法调用完成后，该数组对象就会被收回。&lt;/p&gt;
&lt;p&gt;　　下面咱们来看看CPU的硬件结构以便大家更理解JMM。看图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1236784/201710/1236784-20171019193402256-225358479.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　  目前的电脑一般都是2个或2个以上的CPU，每个CPU可能是多核的。那么每个CPU在同一时间就可以处理一个线程，多个CPU就可以同一时间执行多个线程。&lt;/p&gt;
&lt;p&gt;　　每个CPU都有一个寄存器，CPU通过寄存器进行运算，那么在寄存器运算速度要高于在主内存进行运算。&lt;/p&gt;
&lt;p&gt;　　每个CPU都附带一个缓存，用于将数据从主内存中读取到缓存数据中，然后再运算的时候放到寄存器里。CPU访问寄存器的速度是最快的，访问缓存的速度其次，最后是访问主内存的速度，当然缓存分为L1,L2 两个缓存，当然我画的没有那么好，不过不影响理解。CPU不会读取缓存中的所有数据，而是按照缓存line去进行有选择的读取。&lt;/p&gt;
&lt;p&gt;　　当CPU执行完相关的运算并在适当的时候将结果刷到主内存RAM中，用于保存结果或让其他程序读取。咱们看一下JVM和CPU之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1236784/201710/1236784-20171019195239943-659275754.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　因为CPU没有堆和栈，JVM的堆和栈会在CPU的主内存中，但是程序执行的时候，会将栈或堆中的线程读取到缓存和寄存器中进行运算，并且将计算的结果重新刷新到主内存RAM中。在这个时候因为有多CPU的原因，那么假如说一个CPU一个变量，那么两个并行的线程在执行的时候会有什么样的问题呢？&lt;/p&gt;
&lt;p&gt;　　比如一个类中只有一个String state的成员变量，一个线程对其进行读取到CPU缓存中，然后将其设置为了'YES'，并放回到缓存中；另一个线程没有看到这个值的更改，因为没有看到起更改。然后将其读取到CPU缓存中，然后设置为'YES'或'NO'。这个就是&lt;strong&gt;可见性&lt;/strong&gt;问题，那么如何实现其他线程可见呢？Java有个关键字&lt;strong&gt;volatile&lt;/strong&gt;，这个关键字可以使得操作不写入CPU缓存，直接从主内存读取，更改后直接重写到主缓存中。&lt;/p&gt;
&lt;p&gt;　　比如这个类有个int count的成员变量，并且初始化值为0，向前面提到的，一个线程读取到这个count到CPU缓存中，另一个线程也把这个count读取到另一个CPU的线程中，那么两个线程放到寄存器计算，分别对其进行加1操作，这个时候都把结果刷新到缓存并且到主内存中。count的结果变为了1，这个不是大家想要的。因为每个线程对这个变量读取不可见，每个都用其副本进行操作。这个就是线程的&lt;strong&gt;竞态条件&lt;/strong&gt;。那么怎么才能都保证这个变量的正确呢，就是使用同步，也就是使用synchronize关键字或者是锁来进行处理。也就是在同一时间只能有一个线程去处理这个字段或者方法，同时程序也是从&lt;strong&gt;主内存&lt;/strong&gt;读取数据，然后计算完成后将程序写入到&lt;strong&gt;主内存&lt;/strong&gt;中保证保证计算的有序处理。&lt;/p&gt;
&lt;p&gt;　　这下同学们是否有了新的认识了呢？&lt;/p&gt;
&lt;p&gt;　　如果有写的不对的地方希望告知~&lt;/p&gt;
</description>
<pubDate>Thu, 19 Oct 2017 13:07:00 +0000</pubDate>
<dc:creator>黄山清水岸边石</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangqingshi/p/7689752.html</dc:identifier>
</item>
<item>
<title>JavaScript中的面向对象程序设计 - 郭志宏</title>
<link>http://www.cnblogs.com/guozhihong/p/7678178.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guozhihong/p/7678178.html</guid>
<description>&lt;p&gt; 本文内容目录顺序：&lt;/p&gt;
&lt;p&gt;1、Object概念讲述； 2、面向对象程序设计特点； 3、JavaScript中类和实例对象的创建； 4、原型概念； 5、原型API； 6、原型对象的具体使用；7、深入理解使用原型对象实现继承；8、多态：override—重写&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、Object概念讲述：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;面向对象程序设计我们首先要明白什么是对象，我在在引用数据类型中也说明了关于对象的这一概念；所以开篇我首先讲述一下对象的概念【Object——对象】：&lt;/p&gt;
&lt;p&gt;什么是对象：对象就是存储一个事物的属性和功能的一块存储空间，在起一个名字；&lt;/p&gt;
&lt;p&gt;何时使用对象：只要集中保存一个事物的属性和功能时；&lt;/p&gt;
&lt;p&gt;如何创建一个对象：（3种方式）&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一种&lt;/strong&gt;&lt;/span&gt;就是使用&lt;strong&gt;&lt;span&gt;对象直接量&lt;/span&gt;&lt;/strong&gt;创建一个对象并初始化对象成员：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;{ 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;         name:tom, 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;          age:25&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;         gender:M,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;          intro:&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (){
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;            alert(&quot;my name is tom&quot;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;         } 
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二种&lt;/span&gt;&lt;/strong&gt;就是使用&lt;span&gt;&lt;strong&gt;new关键字&lt;/strong&gt;&lt;/span&gt;创建一个空对象再向对象里添加成员：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; boj=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; obj.name=&quot;tom&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; obj.age=25&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; obj.gender=&quot;M&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; obj.intro=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     alert(&quot;my name is tom&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三种&lt;/span&gt;&lt;/strong&gt;就是使用&lt;strong&gt;&lt;span&gt;构造函数&lt;/span&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;在这里稍微解释一下构造函数：&lt;/p&gt;
&lt;p&gt;什么是构造函数：描述一类对象相同结构的函数；&lt;/p&gt;
&lt;p&gt;为什么：使用对象直接量创建对象会产生大量相同的代码，代码重复不便于维护；&lt;/p&gt;
&lt;p&gt;何时：只要反复创建多个相同结构的对象时；&lt;/p&gt;
&lt;p&gt;作用：描述结构；创建对象，并存储属性值（将空对象构建成要求的结构）；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
1 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义构造函数&lt;/span&gt;
 2 &lt;span&gt;function&lt;/span&gt; Person(name,age,gender){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数名我把它称作类型名首字母大写&lt;/span&gt;
 3     &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
 &lt;/span&gt;4     &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
 &lt;/span&gt;5     &lt;span&gt;this&lt;/span&gt;.gender=&lt;span&gt;gender;
 &lt;/span&gt;6     &lt;span&gt;this&lt;/span&gt;.intro=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
 &lt;/span&gt;7       alert(&quot;my name is&quot;+this.&lt;span&gt;name);
 &lt;/span&gt;8&lt;span&gt;     }
 &lt;/span&gt;9&lt;span&gt; }
&lt;/span&gt;10 
11 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用构造函数&lt;/span&gt;
12 &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;new&lt;/span&gt; Person('tom',25,'M',)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化了一个对象&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS：JavaScript中的对象本质就是一个关联数组，对象的成员的访问使用 &lt;strong&gt;.&lt;/strong&gt; 和 [ ] ，如果访问的属性名是固定的就使用 &lt;strong&gt;.&lt;/strong&gt; 访问，如果是动态生成的就用[ ]访问；所以在赋值操作中，如果属性名不存在那么就添加一个新属性不会报错；&lt;/p&gt;
&lt;p&gt;obj['属性名']  /  obj['方法名']() ;&lt;/p&gt;
&lt;p&gt;obj.属性名     / obj.方法名() ;                  &lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、面向对象程序设计特点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;三大特点：封装、继承和多态；&lt;/p&gt;
&lt;p&gt;封装：将现实中一个事物的属性和功能集中定义在一个对象中称之为封装；（现实中事物的属性会成为程序中对象的属性，现实中事物的功能会成为程序中对象的方法。属性：对象中描述对象的一个属性值的变量；方法：对象中定义对象的一个功能的函数；）&lt;/p&gt;
&lt;p&gt;继承：父对象的成员，子对象无需创建即可直接使用；（为什么：代码重用，节约内存；何时：只要同一类型的多个子对象有相同成员时；如何：JS中的继承都是通过原型对象来实现的；）&lt;/p&gt;
&lt;p&gt;多态：同一个事物在不同的情况下表现出不同的状态——JS中的多态只支持重写（override）；什么是重写：如果子对象觉得父对象的成员不好用时，可在子对象定义和父对象成员同名的自有成员；重写的结果就是：再调用该成员时，优先使用自有成员代替父对象中的共有成员，也体现了父子对象之间的差异；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、JavaScript面向对象程序设计——类和实例对象的创建&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;JavaScript不是一门面向对象的编程语言，它是一门基于对象的编程语言；面向对象有一个非常明显的标志就是【类】的概念；比如说Java语言面向对象，它本身就有类的概念，通过这个类能够创建出任意多个具有相同属性和方法的具体对象，而在JavaScript中是没有类这个概念的，我能只能用代码去模拟，去构造这样一个相同的结构然后去使用这个模拟的类；&lt;/p&gt;
&lt;p&gt;在开篇我们讲述了关于对象的实例，我们说面向对象就是可以通过一个类实例化出任意多个具有相同属性和方法的对象，那么JavaScript既然是基于对象的语言没有类的概念，我们是怎么通过代码模仿一个这样相同结构的类呢？&lt;strong&gt;&lt;span&gt;有俩种方式&lt;/span&gt;&lt;/strong&gt;，第一种就是工厂模式，我们知道工厂是可以生产出任意多款独立的产品，比如说生产某一款玩具他可以生产出很多个不同种类的玩具还有衣服工厂可以生产出任意不同款式的衣服，那么我们构造类的工厂模式也是类似的思维逻辑；第二种就是构造函数模式&lt;strong&gt;&lt;span&gt;（默认标准模式）&lt;/span&gt;&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在第二个序号下我们讲述了面向对象程序设计的三大特点：封装、继承和多态；简单来讲声明一个对象并定义对象成员就是封装，所以接下来的模拟类的创建和实例对象的创建都体现了封装这一概念；下面体会一下封装，封装的定义查看目录序号2；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第一工厂模式：&lt;/p&gt;
&lt;p&gt;创建一个工厂（函数），首先创建一个普通的函数，函数名就是&lt;strong&gt;&lt;span&gt;类型名&lt;/span&gt;&lt;/strong&gt;，在函数里面创建一个&lt;strong&gt;&lt;span&gt;模板对象&lt;/span&gt;&lt;/strong&gt;，并且添加相应的对象成员（对象的属性和方法称之为对象的成员），最后返回模板对象；即通过一个函数，在函数内部创建了一个模板对象，最后函数返回模板对象，外部通过传入不同的参数使用不同的变量去调用函数就会得到不同的结果；&lt;strong&gt;&lt;span&gt;PS：调用函数的不同变量就是实例化的不同对象；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; cellPhone(material,ms,mpx,cpu,ramc){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;       &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;       obj.material=material ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主屏材料&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;       obj.ms=ms ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主屏尺寸&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;       obj.mpx=mpx ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主屏分辨率&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;       obj.cpu=cpu ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;CPU型号&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;       obj.ramcl=ramc ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;RAM容量&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;    
&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  obj;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; c1=cellPhone('IPS',4.3,'1280*720','高通骁龙','2GB'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; c2=cellPhone('IPS',5,'1200*620','高通骁龙','4GB');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二构造函数：&lt;/p&gt;
&lt;p&gt;通过构造函数的形式去调用，约定成俗函数名第一个字母大写就是一个类型名，形参列表定义参数必须由外部传入才能运行时的属性值，使用this关键字绑定属性到调用函数者的对象上（this是函数作用域中自动定义的引用函数调用时 &lt;strong&gt;·&lt;/strong&gt; 前的对象的AO中的一个关键词默认创建）；模板构建好以后再构建一个对象去使用模板内容——构建一个对象通常有几个步骤，具体几个呢？使用new关键字，参数传递，使用模板内容和返回对象！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Student(name,age,gender,class){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.gender=&lt;span&gt;gender;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.class=&lt;span&gt;class;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.intro=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;               alert(&quot;我的名字叫&quot;+name+&quot;我来自&quot;+class+&quot;班&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;           }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  s1=&lt;span&gt;new&lt;/span&gt; Student('小红',12,'FM','4');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小红&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  s2=&lt;span&gt;new&lt;/span&gt; Student('小明',13,'M','4'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小明&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上述代码中new做了4件事：&lt;span&gt;&lt;strong&gt;1、&lt;/strong&gt;&lt;/span&gt;创建一个新的对象，并将this自动指向新对象 ； &lt;strong&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/strong&gt;让新对象继承构造函数的原型对象；&lt;strong&gt;&lt;span&gt;（下一部分讲解原型对象）&lt;/span&gt;&lt;span&gt;3、&lt;/span&gt;&lt;/strong&gt;执行构造函数中的语句，并向新对象中添加新成员并赋值；&lt;strong&gt;&lt;span&gt;4、&lt;/span&gt;&lt;/strong&gt;返回新对象的地址，保存到变量中；&lt;/p&gt;
&lt;p&gt; 下面通过这一段代码来验证JavaScript中使用代码来模仿的类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Student(name,age,gender,class){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.gender=&lt;span&gt;gender;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.class=&lt;span&gt;class;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.intro=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;               alert(&quot;我的名字叫&quot;+name+&quot;我来自&quot;+class+&quot;班&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  s1=&lt;span&gt;new&lt;/span&gt; Student('小红',12,'FM','4');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小红&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  s2=&lt;span&gt;new&lt;/span&gt; Student('小明',13,'M','4'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小明&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; alert(s1==s2);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false      验证了根据不同的模板创建出来不同的实例对象；&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(s1.constructor == Student); 返回true ; 表示s1的构造器是Student吗？结果时true;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(s2.constructor == Student); 返回true ; 表示s2的构造器是Student吗？结果时true;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         
&lt;span&gt;19&lt;/span&gt; alert(p1 &lt;span&gt;instanceof&lt;/span&gt; Student);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true  表示p1是Student的实例，返回false就说明不是；    &lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; alert(p1 &lt;span&gt;instanceof&lt;/span&gt; Object);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true   表示p1是Student的实例，返回false就说明不是；&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过以上一段代码使用三种方法验证了面对对象的类的概念，每一个实例对象都是基于一个相同的模板（构造函数）独立创建出来的对象；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;构造函数三种创建实例对象的方法：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、使用new关键字：var 变量名=new  类型名/构造函数名(属性值列表);&lt;/p&gt;
&lt;p&gt;2、把构造函数当做普通函数调用：类型名/构造函数名(属性值列表);   //当做一个普通函数调用，此时构造函数是一个全局的函数，在全局环境里定义属性并赋值 直接定义在window上了，this指向也是window了；&lt;/p&gt;
&lt;p&gt;3、在另一个对象的作用域中调用：使用call强制替换this的指向，比如现在有新新对象var  a=new Object();a对象里没有添加任何成员，现在要在新的对象a的作用域中调用上一段中我们创建的Student构造函数（类），具体操作如下:&lt;/p&gt;
&lt;p&gt;Student.call(a,'大明','16','M','1');&lt;/p&gt;
&lt;p&gt;此时就可以在对象a中访问name、age、gender、class等属性了；&lt;/p&gt;
&lt;p&gt;alert(a.name); //大明&lt;/p&gt;
&lt;p&gt;以上我们讲解了&lt;strong&gt;&lt;span&gt;2种&lt;/span&gt;&lt;/strong&gt;创建构造函数（类）和&lt;strong&gt;&lt;span&gt;3种&lt;/span&gt;&lt;/strong&gt;通过构造函数（类）创建实例对象的方法；那么构造函数（模仿的类）在直接使用中有什么弊端吗？来通过下面这短代码观察一下构造函数（模仿的类）在直接使用过程中有什么弊端。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Student(name,age,gender,class){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;      &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;      &lt;span&gt;this&lt;/span&gt;.gender=&lt;span&gt;gender;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;this&lt;/span&gt;.class=&lt;span&gt;class;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;      &lt;span&gt;this&lt;/span&gt;.intro=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                alert(&quot;我的名字叫&quot;+this.name+&quot;我来自&quot;+class+&quot;班&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  s1=&lt;span&gt;new&lt;/span&gt; Student('小红',12,'FM','4');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小红&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  s2=&lt;span&gt;new&lt;/span&gt; Student('小明',13,'M','4'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小明&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt; alert(s1.name==s2.name);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false &lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; alert(s1.intro==s2.intro);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上述代码，我们可以看到将方法和属性都定义在构造函数中，每创建一个新的对象时，都会为每个对象创建相同方法和属性的副本，这样就会有大量重复相同的代码出现，浪费内存影响代码的执行效率，我们每创建一个实例对象执行的属性和方法是相同的所以没有必要每次都去创建一个构造函数中想同方法和属性的副本。到这里有一些聪明的人就发现了，他把所有的属性和功能方法都放在构造函数外，在构造函数里以引用的方式去使用这些属性和方法，这些属性和方法就被公共出来了，那么问题又来了全局变量容易被污染或者篡改不安全还一直占用内存！显然这样不合适，那么有一种方法能够让这些共同的代码被共用并且还不是全局的办法吗？有的，在函数中是有的，那就是函数的prototype属性；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;封装的问题：将方法和属性定义在构造函数中，通过这个构造函数创建的所有的实例对象多会为他们创建相同的属性和方法的副本，浪费内存；【解决：使用继承，JS中的继承都是通过原型对象实现的】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以我们引出了下一个话题就是：原型对象和继承；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 4、原型概念&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我想之前有很多人知道原型这个概念，但是不清晰怎么去使用原型和只知道原型这样一个名词的大有人在；&lt;strong&gt;&lt;span&gt;原型是通过一个函数的prototype属性指向的一个空对象——原型对象&lt;/span&gt;&lt;/strong&gt;；那么原型对象在面向对象编程中究竟扮演着一种什么样的角色，原型对象、构造函数和实例对象有着怎样的三角关系？且听郭某给大家慢慢说来；我也希望大家能通过我的这一段文字和代码对于原型对象有一个更加深入的理解；&lt;/p&gt;
&lt;p&gt;原型=&amp;gt;prototype，原型是关于继承的，放在原型对象里的属性和方法是可以被由本构造器下所有实例对象所共享的，&lt;strong&gt;&lt;span&gt;所以原型对象也可以理解成是集中存储同一类型所有子对象共有成员的的父对象&lt;/span&gt;&lt;/strong&gt;；创建函数的时候都有一个prototype属性，这个属性其实就是一个指针，总是指向一个对象，这个对象的用途就是将你特定的属性和方法包含在内让所有实例对象共享的作用！所以这样就解决了上述通过构造函数法每创建一个新对象就重新复制一套属性和方法，这样放在同一个构造函数的prototype指向的对象里的所有的属性和方法，可以被所有使用本构造函数创建出来的实例对象共享；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个构造函数Student，保存的学生是同一个班级相同性别具有相同功能的学生资料；&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; Student(name,age){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;name和age不同每次都需要重新创建&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个函数都有一个prototype属性，这个属性总指向一个对象；&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj=Student.prototype;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的obj 就是名为Student函数的prototype属性指向的函数&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把所有相同的属性和方法共享出来；&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; obj.gender='男'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; obj.class=4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; obj.intro=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;        alert(&quot;我的名字叫&quot;+name+&quot;我来自&quot;+class+&quot;班&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  s1=&lt;span&gt;new&lt;/span&gt; Student('小红',12);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小红&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;  s2=&lt;span&gt;new&lt;/span&gt; Student('小明',13); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建了一个对象  小明&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; alert(s1.gender==s2.gender);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; alert(s1.intro==s2.intro);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;放在构造函数.prototype属性里的属性和方法可以共享不需要每一次重新创建，提高代码执行的效率&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以就上面的代码我们可以看出来，就是new出来一百万个对象放在函数prototype属性指向的对象我们JavaScript称其为原型对象里的共同属性和方法只有一个，也就是放在原型对象里的所有方法和属性被new出来的一百万个实例对象共享了；我的天呐，这得节约多少代码啊~~~~~~所以这样一来就把直接调用构造函数创建对象的弊端给解决掉了。下面我用一张图具体来标识一下构造函数、原型对象和实例对象之间的关系；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226735/201710/1226735-20171017000018818-1983442408.png&quot; alt=&quot;&quot; width=&quot;571&quot; height=&quot;315&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以构造函数、原型对象 、实例对象之间就有如下表达式：&lt;/p&gt;
&lt;p&gt;构造函数.prototype = 原型对象&lt;br/&gt;原型对象.constructor = 构造函数&lt;br/&gt;实例对象.prototype = 原型对象&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5、原型对象API：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;.&lt;/span&gt;isPrototypeOf(Object): 用于判断传入的对象是否是另外一个对象的原型。=&amp;gt;alert(obj.isPrototypeOf(s1));表述的意思就是s1的原型对象是obj吗？&lt;/p&gt;
&lt;p&gt;.hasOwnProperty();用于判断一个对象属性是自有属性吗？ 可用此方法判断属性是属于自己的还是继承自原型对象的；=&amp;gt;obj.hasOwnProperty('name');obj里有name属性吗？有返回true，没有返回false；&lt;/p&gt;
&lt;p&gt;.in   用于判断属性是否存在于 实例对象&lt;span&gt;&lt;strong&gt;和&lt;/strong&gt;&lt;/span&gt;原型对象中；不管是存在于实例对象中还是原型对象中只要当前对象能访问到就返回true；'name' in s1;=&amp;gt;只要在s1中或者s1的原型对象中任一个有就返回true;&lt;/p&gt;
&lt;p&gt;Object.getPrototypeOf();  由实例对象获得原型对象；var prototypeObj = Object.getPrototypeOf(s1);=&amp;gt;获取实例对象s1的原型对象，（本例中获取完成以后用一个变量接收了，也可以使用链式操作直接使用）；&lt;/p&gt;
&lt;p&gt;Object&lt;strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/strong&gt;keys();  获取到当前对象里的所有keys（属性名） 返回一个数组；&lt;/p&gt;
&lt;p&gt;Object&lt;strong&gt;.&lt;/strong&gt;getOwnPropertyNames(); 遍历对象所有的属性(不论该内部属性能否被遍历),返回一个包含所有遍历到属性的一个数组；var attributes = Object.getOwnPropertyNames(Student.prototype);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6、原型对象的具体使用：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原型对象在JS中有&lt;span&gt;俩大&lt;/span&gt;主要的作用：第一就是实现继承，另外一个作用就是扩展对象中的属性和方法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面通过实现一个自定义遍历多维数组的方法来体会原型对象是怎么去给对象扩展属性和方法的；我们知道ECS5针对数组API提出了一个遍历数组的新方法就是arr.forEach(function(val,i,arr){//val:值；i:下标；arr:数组变量名})，这个方法可以对数组内每个元素执行相同的操作，但是它值能适用与一维数组，多维数组遍历它会把大于一维数组的数组元素作为一个整体拿出来；那么下面通过向Array原型对象里扩展一个自定义的可以遍历多维数组的each方法；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向Array里添加 each方法&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ECMA5 forEach 循环遍历数组的每一项(只适用于遍历一维数组)&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var arr = [1,2,3,[a,b,c]4,5];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;arr.forEach(function(val , i , arr){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    alert(val);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;});  //查看弹出结果的不同
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自己向Array里添加一个 each方法 能遍历多维数组 &lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; arr = [1,2,3,[4,[5,[6]]]]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; arr.length&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                     
&lt;span&gt;12&lt;/span&gt; Array.prototype.each = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(fn){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 遍历数组的每一项x需要一个计数器记录当前遍历的元素位置&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.i || (&lt;span&gt;this&lt;/span&gt;.i=0);  &lt;span&gt;//使用自定义属性和短路逻辑检测并初始化一个计数器=&amp;gt;&lt;/span&gt;&lt;span&gt;var i = 0 ;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 判断什么时候去走each核心方法&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当数组的长度大于0的时候 &amp;amp;&amp;amp; 传递的参数必须为函数&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.length &amp;gt;0 &amp;amp;&amp;amp; fn.constructor ==&lt;span&gt; Function){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环遍历数组的每一项&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.i &amp;lt; &lt;span&gt;this&lt;/span&gt;.length){    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;while循环的范围 &lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取数组的每一项&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; t = &lt;span&gt;this&lt;/span&gt;[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.i];
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果获取到当前元素是一个数组&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(t &amp;amp;&amp;amp; t.constructor ==&lt;span&gt; Array){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接做递归操作&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    t.each(fn);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不是数组是一个单个元素&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这的目的就是为了把数组的当前元素传递给fn函数 并让函数执行&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;fn.apply(t,[t]);&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    fn.call(t,t);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.i++&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;              &lt;span&gt;his&lt;/span&gt;.i = &lt;span&gt;null&lt;/span&gt; ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 释放内存 垃圾回收机制回收变量&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;      } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 错误提醒&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     
&lt;span&gt;44&lt;/span&gt; arr.each(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;   alert(val);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;简单原型使用： &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;之前我们已经学过了原型如何使用，那么现在我们介绍一种简单原型的使用方式：即直接通过对象直接量来重写整个原型对象（这种方法会改变原型对象的构造器）；按照惯常的方法就是我们创建一个构造函数，然后通过构造函数的prototype的属性来为原型对象添加属性和方法，每次只能添加一个属性或者方法，操作起来有一些繁琐，那么简单原型只用就是把一个空对象或者是已经封装好要添加给原型对象的一些属性和方法的匿名对象赋值给这个构造函数的原型对象上，注意在这里执行的是赋值操作很显然这个匿名的对象的父类是一个Object，所以就有：构造函数类型名&lt;strong&gt;.&lt;/strong&gt;prototype&lt;strong&gt;.&lt;/strong&gt;constructor=&amp;gt;function Object(){[native code]} ; 所以简单原型使用方法就改变了构造函数的原型对象的构造器；那么怎么去解决这个问题呢？我们可以在简单原型方法封装匿名对象时首先添加一个属性constructor并赋值为构造函数的名称（constructor:构造函数的类型名）；我们知道在对象中构造器（constructor）属性是不可以被遍历到的，如果这样我们手动添加了constructor属性原型对象的构造器是保持一致了但是&lt;strong&gt;&lt;span&gt;【问题来了】&lt;/span&gt;&lt;/strong&gt;在这里的constructor属性是可以被遍历到的；&lt;strong&gt;&lt;span&gt;【解决】&lt;/span&gt;&lt;/strong&gt;ES5中的Object.defineProperty();方法可以为原型对象重新加入并设置构造器属性。（&lt;strong&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/strong&gt;因为是ES5的新特性所以本方法对于火狐4和IE8以前的浏览器是不被支持的；）；本方法有3个参数分别是：参数1 ：重设构造器的对象 ；参数2：设置什么属性 ； 参数3：options配置项（通常是一个对象）；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Student(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             
&lt;span&gt; 5&lt;/span&gt; Student.prototype =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;constructor : Student ,    //重新校正原型对象的构造器，此情此景下的constructor属性是可以被遍历到的；&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     name: '小明'&lt;span&gt; , 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     age : 12&lt;span&gt; , 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     gender : '男'&lt;span&gt; ,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     intro : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         alert('我是小明，我喜欢小红!'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ECMAScript5 提供给原型对象重新设置构造器的方法 Object.defineProperty();&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3个参数  参数1 ：重设构造器的对象   参数2：设置什么属性  参数3：options配置项&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;Object.defineProperty(Student.prototype , 'constructor' , {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                 enumerable : false , //设置属性不可被遍历
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                 value : Person 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            });    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;        
&lt;span&gt;21&lt;/span&gt;             
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; s1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(s1.name);&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;s1.intro();&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             alert(Student.prototype.constructor); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Student&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历对象的keys,使用第一种方法constructor是可以被遍历到的，使用ES5特性添加是不可以被遍历到的；&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;( attr &lt;span&gt;in&lt;/span&gt;&lt;span&gt; s1){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                alert(attr);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原型的动态性（注意原型和创建实例的先后顺序）&lt;/strong&gt;&lt;/span&gt;——&amp;gt;涉及到一个原型链的概念；&lt;/p&gt;
&lt;p&gt;原型链：由多级父元素连续继承形成的链式结构，保存着所有的属性和方法，控制着成员的使用顺序，沿原型链自底向上依次查找使用；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;原型链    VS    作用域链  &lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;作用域链：保存着所有变量，控制着变量的使用顺序，沿作用域链自上向下查找使用；&lt;/p&gt;
&lt;p&gt;我们知道JavaScript本身有一个特性就是解释执行即从上到下一行一行解析执行操作；我们还知道在JavaScript的对象中实例对象和原型对象是有继承关系的；所以就有原型对象的定义必须要先于实例对象的创建而创建，否则就不能使用到原型对象里的方法和属性了；所以简单原型的使用顺序必须是先定义远行对象然后再new实例对象！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;PS：原型对象的创建一定是先于实例对象的创建的；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Student(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; s1 = &lt;span&gt;new&lt;/span&gt; Student();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此时实例s1的原型对象就是一个空对象=&amp;gt;{}&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;----------------------------------------------------------------------    &lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在这里使用简单原型定义原型属性和方法实际上他的构造器属性已经发生了改变，构造器变成了Object（实质上就切断了Student和Student.prototype的关联关系了）；&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们为了一致又自己手动添加了一个constructor属性和其他需要的属性，所以在此之前实例的s1的原型对象是没有这些属性；        &lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; Student.prototype =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     constructor : Student ,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校正原型对象的构造器&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     intro: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;              alert('我是小明，我喜欢小红!'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;};    
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;s1.intro(); // error 因为原型对象里面没有任何属性和方法&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注意简单原型使用的顺序(实例对象必须在原型对象之后创建)&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; s2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; s2.intro();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我是小明，我喜欢小红！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;原型对象中常用的开发模式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码中介绍三种常用方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 混合使用原型和构造函数式 (模拟定义一个类即构造函数 开发时最常用的方式)&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;            function Person(name , age , friends , job){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;                this.name = name ; 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                this.age  = age ; 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                this.friends = friends ;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                this.job = job ;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            Person.prototype = {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                constructor: Person , 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                sayName : function(){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    alert(this.name);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            var p1 = new Person('z3' , 20 , ['王五','赵六'] , '技术总监');
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            var p2 = new Person('李四', 25 , ['王五','赵六' ,'赵7'] ,'boss');
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            alert(p1.friends);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            p1.sayName();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            alert(p2.friends);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            p2.sayName();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;动态原型模式：(所有的代码 都封装到一起)&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            function Person(name , age , friends , job){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                this.name = name ; 
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                this.age  = age ; 
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                this.friends = friends ;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                this.job = job ;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                //动态原型方法：
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                if( typeof this.sayName != 'function'){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                    Person.prototype.sayName = function(){
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                        alert(this.name);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            }            
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;             
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;稳妥构造函数式: durable object(稳妥对象) 非常安全的环境中&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;特点： 1 、没有公共属性 ， 2 、不能使用this对象&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            function Person(name , age , job){
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                    // 创建一个要返回的对象
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                    var obj = new Object();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                    //可以定义一下私有的变量和函数 private
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                    var name = name ; 
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                    //var sex = '男';
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                    //var saySex = function(){};
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                    //添加一个方法
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                    obj.sayName = function(){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                        alert(name);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                    return obj ;                
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;            var p1 = new Person('张三');
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            p1.sayName();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7、深入理解使用原型对象实现继承：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、使用prototype实现继承——原型继承&lt;/p&gt;
&lt;p&gt;参数要传递给被继承原型对象的父类实例中；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; A(){...}
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; A.prototype =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;    a : &quot;a&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;    sayA : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;        console.log(&quot;this is a.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 创建A()构造器的对象&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; A();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; B(){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.b = &quot;b&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.sayB = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;            console.log(&quot;this is b.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 将B.prototype指向A()构造器创建的对象&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;B.prototype = a;//显然此时B的原型对象将包含一个指向A原型的指针，相应的A原型中也包含着一个指向A构造函数的指针。&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. 将B.prototype指向A.prototype&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; B.prototype =&lt;span&gt; A.prototype;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; B();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;console.log(b.b);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;b.sayB();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;console.log(b.a);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; b.sayA();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、类继承（借用构造函数继承）有时候也管他叫call和apply继承——只继承构造函数不继承原型对象；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; A(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.a = &quot;a&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sayA = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             console.log(&quot;this is a.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; B(){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用A.call(this)方法,实现继承&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         A.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.b = &quot;b&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sayB = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             console.log(&quot;this is b.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; B();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;console.log(b.b);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;b.sayB();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;console.log(b.a);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; b.sayA();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、原型继承+借用构造函数继承 = 混合继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 父类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Person(name, age){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name ; 
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age  =&lt;span&gt; age ;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 父类的原型对象属性&lt;/span&gt;
Person.prototype.id = 10&lt;span&gt; ;
Person.prototype.sayName &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;(){alert(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 子类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Boy(name , age , sex){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; call apply&lt;/span&gt;
    Person.call(&lt;span&gt;this&lt;/span&gt;,name,age); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 借用构造函数继承 继承父类的模版&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex ; 
}    

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 原型继承&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 只剩下 父类的实例 和 父类的原型对象的关系了&lt;/span&gt;
Boy.prototype = &lt;span&gt;new&lt;/span&gt; Person(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承父类的原型对象&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; Boy('李四' , 20 , '男'&lt;span&gt;);
alert(b.name);
alert(b.sex);
b.sayName();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 在混合继承中我们知道在原型继承的这一步只是没有传递参数，没有执行构造函数罢了，其实同样是继承了构造函数和原型对象，那么在混合继承中就做了三件事：继承了俩遍构造函数和继承了一遍原型对象，&lt;span&gt;&lt;strong&gt;【问题来了】&lt;/strong&gt;&lt;/span&gt;既然构造函数已经被继承过一遍了能不能再只继承一遍原型对象呢？&lt;strong&gt;&lt;span&gt;【解决】&lt;/span&gt;&lt;/strong&gt;自定义一个方法只继承原型对象；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; extend(child ,father){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 目的： 实现只继承父类的原型对象&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; F = &lt;span&gt;new&lt;/span&gt; Function();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 创建一个空函数    目的：空函数进行中转&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;      F.prototype = father.prototype; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 实现空函数的原型对象和超类的原型对象转换&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     child.prototype = &lt;span&gt;new&lt;/span&gt; F();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 原型继承 &lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     child.prototype.constructor = child ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 还原子类的构造器&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存一下父类的原型对象: 一方面方便解耦  另一方面方便获得父类的原型对象&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     child.superClass = father.prototype; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义一个子类的静态属性 接受父类的原型对象&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断父类的原型对象的构造器 (加保险)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt;(father.prototype.constructor ==&lt;span&gt; Object.prototype.constructor){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         father.prototype.constructor = father ; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;手动欢迎父类原型对象的构造器&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             
&lt;span&gt;15&lt;/span&gt;             
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 混合继承：原型继承和借用构造函数继承&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Person( name , age){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name ; 
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age ; 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             
&lt;span&gt;22&lt;/span&gt; Person.prototype =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    constructor: Person ,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     sayHello: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             alert('hello world!'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Boy(name , age , sex){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;call 绑定父类的模版函数 实现 借用构造函数继承 只复制了父类的模版&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     Boy.superClass.constructor.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; , name , age);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex ;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原型继承的方式: 即继承了父类的模版 又继承了父类的原型对象&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Boy.prototype = new Person();&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只继承一遍父类的原型对象&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;extend(Boy , Person);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给子类加了一个 原型对象的方法&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; Boy.prototype.sayHello = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     alert('hi javascript!'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; Boy('张三' , 20 , '男'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;alert(b.name); 
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;alert(b.sex);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;b.sayHello();&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;Boy.superClass.sayHello.call(b);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(Boy.superClass.constructor);&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 混合继承的缺点： 3件事 : 继承了父类的2次模版 , 继承了一次父类的原型对象&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; extend方法 2件事: 继承1次父类的模版 继承一次父类的原型对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;8、多态：override—重写&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在上一个自定义只继承原型的例子里，代码41到43行就是一个重写，自定义属性superClass就是保存了父类的原型对象确保在重写之后还能很便捷的使用到父类的原型对象成员；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;提示：如需转载请注明出处！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 19 Oct 2017 12:51:00 +0000</pubDate>
<dc:creator>郭志宏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guozhihong/p/7678178.html</dc:identifier>
</item>
</channel>
</rss>