<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>致博客园团队？关于自己写了个文章还被移除首页！ - Code_Dog</title>
<link>http://www.cnblogs.com/dongjh/p/9692866.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongjh/p/9692866.html</guid>
<description>&lt;p&gt;我遇到了个访问hsql数据库文件的问题，由于自己之前没有用过花了2天时间才大概搞清楚怎么用。&lt;/p&gt;
&lt;p&gt;昨天晚上10点多我开始写这个文章，写了个一个多小时才敲完。早上一起来被移除首页！&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180923153231933-1765436823.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;如下是收到的邮件信息：&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;bubble-main left&quot; readability=&quot;41.610338835795&quot;&gt;
&lt;div class=&quot;bubble-content&quot; readability=&quot;54.523892267593&quot;&gt;
&lt;p&gt;您好，您的博文“&lt;a href=&quot;https://www.cnblogs.com/dongjh/p/9691566.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;访问Hsql .data数据库文件&lt;/a&gt;”被移出首页，由此给您带来麻烦，请谅解！&lt;/p&gt;
&lt;p&gt;首页是分享知识的地方，我们对发布在首页的博文的基本要求是：原创精品，排版整齐，有足够的篇幅，与程序员相关，能够让读者从中学到知识。&lt;/p&gt;
&lt;p&gt;如果工作人员处理不当，请您谅解并发邮件至 &lt;a href=&quot;mailto:contact@cnblogs.com&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;contact@cnblogs.com&lt;/a&gt; 与我们联系。&lt;/p&gt;
&lt;p&gt;我只想说你们这么随意移除别人写的文章是哪一条不符合你的要求？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;非原创？我自己一行行敲的自己写的文章有错吗！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;排版整齐？我自己写个文章还特意设置了标题，重要地方也标黄了这么用心上！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;足够篇幅？内容不够多吗，难道非要我写半天吗！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与程序员相关？难道这个内容不是相关的！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自己半夜写个文章不容易，这就移除了......伤！我还看到一个人复制了这篇文章！http://www.imooc.com/article/80785这个地址！难道不是MVP写的文章半毛钱都不值吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我很早就注册了博客园一直潜水，也想自己贡献一份力量。这么随意移除文章哪有心思再写下去！....伤！&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 23 Sep 2018 07:39:00 +0000</pubDate>
<dc:creator>Code_Dog</dc:creator>
<og:description>我遇到了个访问hsql数据库文件的问题，由于自己之前没有用过花了2天时间才大概搞清楚怎么用。 昨天晚上10点多我开始写这个文章，写了个一个多小时才敲完。早上一起来被移除首页！ 如下是收到的邮件信息：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongjh/p/9692866.html</dc:identifier>
</item>
<item>
<title>学习ML.NET(2): 使用模型进行预测 - feiyun0112</title>
<link>http://www.cnblogs.com/feiyun0112/p/ML-NET-2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feiyun0112/p/ML-NET-2.html</guid>
<description>&lt;p&gt;在&lt;a href=&quot;https://www.cnblogs.com/feiyun0112/p/ML-NET-1.html&quot; target=&quot;_blank&quot;&gt;上一篇文章&lt;/a&gt;中，我们已经通过LearningPipeline训练好了一个“&lt;span data-ttu-id=&quot;5ec8e-231&quot;&gt;&lt;span data-ttu-id=&quot;7cedf-108&quot;&gt;鸢尾花瓣预测&lt;/span&gt;&lt;/span&gt;”模型，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; model = pipeline.Train&amp;lt;IrisData, IrisPrediction&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在就可以让模型对一条没有人工标注结果的数据进行分析，返回一个预测结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; prediction = model.Predict(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; IrisData()
            {
                SepalLength &lt;/span&gt;= &lt;span&gt;3.3f&lt;/span&gt;&lt;span&gt;,
                SepalWidth &lt;/span&gt;= &lt;span&gt;1.6f&lt;/span&gt;&lt;span&gt;,
                PetalLength &lt;/span&gt;= &lt;span&gt;0.2f&lt;/span&gt;&lt;span&gt;,
                PetalWidth &lt;/span&gt;= &lt;span&gt;5.1f&lt;/span&gt;&lt;span&gt;,
            });
 
Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Predicted flower type is: {prediction.PredictedLabels}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者一次预测一批数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; inputs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;[]{
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; IrisData()
                {
                    SepalLength &lt;/span&gt;= &lt;span&gt;3.3f&lt;/span&gt;&lt;span&gt;,
                    SepalWidth &lt;/span&gt;= &lt;span&gt;1.6f&lt;/span&gt;&lt;span&gt;,
                    PetalLength &lt;/span&gt;= &lt;span&gt;0.2f&lt;/span&gt;&lt;span&gt;,
                    PetalWidth &lt;/span&gt;= &lt;span&gt;5.1f&lt;/span&gt;&lt;span&gt;,
                }
                ,&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; IrisData()
                {
                    SepalLength &lt;/span&gt;= &lt;span&gt;5.2f&lt;/span&gt;&lt;span&gt;,
                    SepalWidth &lt;/span&gt;= &lt;span&gt;3.5f&lt;/span&gt;&lt;span&gt;,
                    PetalLength &lt;/span&gt;= &lt;span&gt;1.5f&lt;/span&gt;&lt;span&gt;,
                    PetalWidth &lt;/span&gt;= &lt;span&gt;0.2f&lt;/span&gt;&lt;span&gt;,
                }
            };

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; predictions = model.Predict(inputs);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是大多数时候，已经训练好的模型以后还需要继续可以使用，因此需要把它持久化，写入到zip文件中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;await&lt;/span&gt; model.WriteAsync(&lt;span&gt;&quot;IrisPredictionM&lt;/span&gt;&lt;span&gt;odel.zip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一旦建立了机器学习模型，就可以部署它，利用它进行预测。我们可以通过REST API，接受来自客户端的数据输入，并返回预测结果。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;创建API项目&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet &lt;span&gt;new&lt;/span&gt; webapi -o myApi
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;安装依赖项&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd myApi
dotnet add package Microsoft.ML
dotnet restore&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt; 引用模型&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;要在API中引用我们前面保存的模型，只需将IrisPredictionModel.zip复制到API项目目录中即可。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;创建数据结构&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们的模型使用数据结构IrisData和&lt;code class=&quot;csharp plain&quot;&gt;IrisPrediction&lt;/code&gt;来定义特征和预测属性。因此，当使用我们的模型通过API进行预测时，它也需要引用这些数据结构。因此，我们需要在API项目中定义IrisData和&lt;code class=&quot;csharp plain&quot;&gt;IrisPrediction&lt;/code&gt;。类的内容与上一篇文章中创建模型项目中的内容相同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.ML.Runtime.Api;
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; myApi
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IrisData
    {
        [Column(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; SepalLength;

        [Column(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; SepalWidth;

        [Column(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; PetalLength;

        [Column(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; PetalWidth;

        [Column(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [ColumnName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Label;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.ML.Runtime.Api;
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; myApi
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IrisPrediction
    {
        [ColumnName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PredictedLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; PredictedLabels;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;创建Controller&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在，在API项目的Controllers目录中，创建PredictController类，用于处理来自客户端的预测请求，它包含一个POST方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.ML;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; myApi.Controllers
{
    [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [ApiController]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PredictController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; POST api/predict&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; Post([FromBody] IrisData value)
        {            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; model = &lt;span&gt;await&lt;/span&gt; PredictionModel.ReadAsync&amp;lt;IrisData,IrisPrediction&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IrisPredictionModel.zip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; prediction =&lt;span&gt; model.Predict(value);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; prediction.PredictedLabels;
        } 
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用如下命令行运行程序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
dotnet run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，使用POSTMAN或其他工具向&lt;code&gt;http://localhost:5000/api/predict&lt;/code&gt;发送POST请求，请求数据类似：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SepalLength&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;3.3&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SepalWidth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1.6&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PetalLength&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PetalWidth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;5.1&lt;/span&gt;&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果成功，将会返回&quot;Iris-virginica&quot;。&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 07:37:00 +0000</pubDate>
<dc:creator>feiyun0112</dc:creator>
<og:description>训练模型 在上一篇文章中，我们已经通过LearningPipeline训练好了一个“鸢尾花瓣预测”模型， 现在就可以让模型对一条没有人工标注结果的数据进行分析，返回一个预测结果。 或者一次预测一批数据</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feiyun0112/p/ML-NET-2.html</dc:identifier>
</item>
<item>
<title>腾讯WeTest受邀参展2018谷歌开发者大会，Android 9专区免费开放 - 腾讯WeTest</title>
<link>http://www.cnblogs.com/wetest/p/9692848.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wetest/p/9692848.html</guid>
<description>&lt;p&gt;2018谷歌开发者大会(Google Developer Days)于9月20日正式在上海拉开帷幕。在今年，围绕谷歌最新研发技术，来自机器学习、物联网、云服务等各领域精英参会并进行了案例分享。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153107332-248473261.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018谷歌开发者大会开放日主会场&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;会中，作为一站式品质开放平台，腾讯WeTest围绕应用于谷歌最新Pixel、Pixel 2系列机型的Android 9.0 Pie系统免费开放兼容性测试专区，并分享市面上TOP86款应用兼容测试后报告，助力开发者第一时间找到问题，打通难关，为产品上线再行铺路。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153121284-1193648613.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018谷歌开发者大会 - 腾讯WeTest展台&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;以动制动，明确Android 9.0 Pie常见兼容性问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;随着2018年8月7日，谷歌旗下Android 9 Pie面向全球发布，新的流量池正在被挖掘与重视。但想将新流量进一步转化，就要摸清新移动操作系统，进而提升软件兼容性。&lt;/p&gt;

&lt;p&gt;正因如此，腾讯WeTest第一时间基于谷歌Pixel、Pixel 2机型的Android 9 Pie系统，对市面TOP86款应用进行了安装、拉起、登录与主流程冒烟等深度兼容测试，以动制动，尝试整合兼容性常见问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153151377-431896033.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TOP86款测试应用类型分布图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本次测试覆盖了现阶段各大移动应用商店排行榜最热门的86款移动应用，调研成果具有较高的参考价值&lt;/p&gt;

&lt;p&gt;在测试中，腾讯WeTest发现共计44款应用出现兼容问题，&lt;strong&gt;UI异常、Crash问题、功能问题，安装拉起&lt;/strong&gt;成为问题“重灾区”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153205690-160444576.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于Pixel、Pixel 2系列机型的Android 9.0 Pie系统，TOP86款应用兼容性测试问题占比&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以应用类型划分，游戏类应用出现兼容问题的有38款。其中，集中于Pixel 2机型，UI异常的手游有29款，涉及角色扮演与休闲益智两类游戏。而在非游戏类应用中，其中视频类应用中的“&lt;strong&gt;屏幕旋转&lt;/strong&gt;”功能，存在较多适配问题。&lt;/p&gt;

&lt;p&gt;值得注意的是，特长屏幕适配问题在 UI 异常问题中占据了绝大多数，在全面屏和刘海屏的适配上需要重点关注。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153223466-633095808.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;此外，在应用最致命的“杀手”—— 闪退问题上，有16款测试应用出现Crash问题，手游类应用Crash率至22%，相对较高。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153234543-141206115.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt;&lt;strong&gt;其应若响，Android 9 Pie系统兼容测试功能全面推出&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本着“开放、分享、共赢”的理念，在本次谷歌开发者大会中，腾讯WeTest针对上述问题，现场分享可借鉴的优化建议，供开发者们对症下药。&lt;/p&gt;

&lt;p&gt;另一侧出于UI异常问题考虑，开发者可以具体按照设备的屏幕尺寸、GPU类型，来定制化应用的Android版本。&lt;/p&gt;

&lt;p&gt;此外，作为市面上最新推出的Android 9.0 pie系统，虽然有投放与更新计划，但由于面世时间较短，尚未普及到大多数安卓机型当中。当面对Android 9.0 pie与Pixel、Pixel 2系统与设备的双重升级，开发者难免经历无法第一时间获取适配机型或测试方法的阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153257309-1640243721.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018年9月4日-12日，&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;谷歌各版本安卓系统安装份额报告中显示，Android 9.0 Pie系统暂未普及&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片来源：谷歌&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;针对这一现状，为了助力开发者进行更良好的适配，&lt;strong&gt;腾讯WeTest针对Android 9.0 Pie系统，开放了免费测试专区&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;同时，通过云真机测试等技术，开发者可以在深度兼容性测试中进行产品人力配置、产品阶段、预算方案定制，体验应用在不同阶段适配新系统的测试个性化服务，帮助应用第一时间在新系统、新移动设备场景中实现“零延迟”“多点触控”“高帧率画面”的效果，最终实现市场竞争中的弯道超车。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/992994/201809/992994-20180923153313843-213917188.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt;&lt;strong&gt;产品为王，质量先行，从深度兼容性测试出发腾讯WeTest三周年再起航&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“注重品质的产品才能拼到最后，获取市场的认可”，2017年，腾讯互娱研发部助理总经理荆彦青谈到。&lt;/p&gt;

&lt;p&gt;因此，为了使开发者不被“设备少”“缺人力”“缺预算”“缺乏成熟的测试方法”四大“顽疾”阻碍脚步，除了与时俱进，腾讯WeTest在对外开放后的近三年里全力奔跑着。&lt;/p&gt;

&lt;p&gt;以腾讯WeTest兼容测试一环为例，目前已经降低了70%的测试成本，通过应用AI技术、精准覆盖TOP300主流机型、云真机调试等服务，最大程度保证了应用的测试质量与效率.依托于腾讯大数据，深度兼容性测试可以覆盖到近乎90%的安卓机用户。&lt;/p&gt;

&lt;p&gt;当然，在移动应用中场战事拉开之时，旨在兼容性测试提高产品质量并不是“尚方宝剑”。&lt;/p&gt;

&lt;p&gt;10月26日，腾讯WeTest即将迎来第四个年头。而以深度兼容性测试为起点，腾讯WeTest以AI测试、云平台、大数据分析等前沿技术为依托，将迎来全面升级。在“生日月”中，腾讯WeTest将针对安全测试服务，对线上多维度的用户体验和质量监控等能力继续深入建设。而在不久的未来，腾讯WeTest还将进一步优化压测服务，助力开发者在软件高速路上全速前行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 点击：&lt;a href=&quot;https://wetest.qq.com/cloud/help/AndroidP?from=content_cnblogs&quot; target=&quot;_blank&quot;&gt;https://wetest.qq.com/cloud/help/AndroidP&lt;/a&gt; 抢先领略 Android P测试专区。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 07:35:00 +0000</pubDate>
<dc:creator>腾讯WeTest</dc:creator>
<og:description>2018谷歌开发者大会(Google Developer Days)于9月20日正式在上海拉开帷幕。在今年，围绕谷歌最新研发技术，来自机器学习、物联网、云服务等各领域精英参会并进行了案例分享。 201</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wetest/p/9692848.html</dc:identifier>
</item>
<item>
<title>探讨npm依赖管理之peerDependencies - wonyun</title>
<link>http://www.cnblogs.com/wonyun/p/9692476.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wonyun/p/9692476.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;想必前端同学对npm的devDependencies和dependencies都比较熟悉，但是对peerDependencies可能就有点陌生，尤其是没有写过npm包插件的同学，比如之前使用grunt自动化工具的相关插件（如grunt-contrib-jasmine等）或者目前基于某个框架的ui组件库等等，这些都是需要对peerDependencies有一定了解的。下面我们就来说说peerDependencies。&lt;/p&gt;
&lt;h2 id=&quot;npm2中dependencies与peerdependencies区别&quot;&gt;npm2中dependencies与peerDependencies区别&lt;/h2&gt;
&lt;p&gt;假设我们当前的项目是MyProject，项目中有一些依赖，比方其中有一个依赖包&lt;strong&gt;PackageA&lt;/strong&gt;，该包的&lt;strong&gt;package.json&lt;/strong&gt;文件指定了对&lt;strong&gt;PackageB&lt;/strong&gt;的依赖：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
    &quot;dependencies&quot;: {
        &quot;PackageB&quot;: &quot;1.0.0&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们在我们的MyProject项目中执行&lt;code&gt;npm install PackageA&lt;/code&gt;, 我们会发现我们项目的目录结构会是如下形式：&lt;/p&gt;
&lt;pre class=&quot;tree&quot;&gt;
&lt;code&gt;MyProject
|- node_modules
   |- PackageA
      |- node_modules
         |- PackageB&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么在我们的项目中，我们能通过下面语句引入&quot;PackageA&quot;：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;var packageA = require('PackageA')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，如果你想在项目中直接引用PackageB:&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;var packageA = require('PackageA')
var packageB = require('PackageB')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是不行的，即使PackageB被安装过；因为Node只会在“MyProject/node_modules”目录下查找PackageB，它不会在进入PackageA模块下的node_modules下查找。&lt;/p&gt;
&lt;p&gt;所以，为了解决这个问题，在MyProject项目package.json中我们必须直接声明对PackageB的依赖并安装。&lt;/p&gt;
&lt;p&gt;但是，有时我们不用在当前项目中声明对PackageB的依赖就可以直接引用，尤其是，PackageA是一个类似于&lt;strong&gt;grunt&lt;/strong&gt;的插件，例如grunt-contrib-jshint。&lt;/p&gt;
&lt;p&gt;为什么在项目中不用声明就可以直接使用呢？这就不得不说说peerDependencies的作用了。&lt;/p&gt;
&lt;h2 id=&quot;peerdependencies的引入&quot;&gt;peerDependencies的引入&lt;/h2&gt;
&lt;p&gt;为了解决这种问题：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;如果你安装我，那么你最好也安装X,Y和Z.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;于是&lt;code&gt;peerDependencies&lt;/code&gt;就被引入了。例如上面PackageA的&lt;strong&gt;package.json&lt;/strong&gt;文件如果是下面这样：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;{
    &quot;peerDependencies&quot;: {
        &quot;PackageB&quot;: &quot;1.0.0&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么，它会告诉npm：如果某个package把我列为依赖的话，那么那个package也必需应该有对PackageB的依赖。&lt;/p&gt;
&lt;p&gt;也就是说，如果你&lt;code&gt;npm install PackageA&lt;/code&gt;，你将会得到下面的如下的目录结构：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;MyProject
|- node_modules
   |- PackageA
   |- PackageB&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可能注意到：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在npm2中，即使当前项目MyProject中没有直接依赖PackageB，该PackageB包依然会安装到当前项目的node_modules文件夹中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的代码现在可以正常工作了，因为两个包在&quot;MyProject/node_modules&quot;中被安装了：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;var packageA = require('PackageA')
var packageB = require('PackageB')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总结一句话，&lt;code&gt;peerDependencies&lt;/code&gt;的具体作用：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code&gt;peerDependencies&lt;/code&gt;的目的是提示宿主环境去安装满足插件peerDependencies所指定依赖的包，然后在插件import或者require所依赖的包的时候，永远都是引用宿主环境统一安装的npm包，最终解决插件与所依赖包不一致的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举个例子，就拿目前基于react的ui组件库&lt;strong&gt;ant-design@3.x&lt;/strong&gt;来说，因该ui组件库只是提供一套react组件库，它要求宿主环境需要安装指定的react版本。具体可以看它&lt;a href=&quot;https://github.com/ant-design/ant-design/blob/master/package.json#L37&quot;&gt;package.json&lt;/a&gt;中的配置：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;  &quot;peerDependencies&quot;: {
    &quot;react&quot;: &quot;&amp;gt;=16.0.0&quot;,
    &quot;react-dom&quot;: &quot;&amp;gt;=16.0.0&quot;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它要求宿主环境安装react@&amp;gt;=16.0.0和react-dom@&amp;gt;=16.0.0的版本，而在每个antd组件的定义文件顶部：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;import * as React from 'react';
import * as ReactDOM from 'react-dom';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;组件中引入的react和react-dom包其实都是宿主环境提供的依赖包。&lt;/p&gt;
&lt;h2 id=&quot;npm2和npm3中peerdependencies的区别&quot;&gt;npm2和npm3中peerDependencies的区别&lt;/h2&gt;
&lt;p&gt;正如上一节谈论的，在npm2中，PackageA包中&lt;code&gt;peerDependencies&lt;/code&gt;所指定的依赖会随着&lt;code&gt;npm install PackageA&lt;/code&gt;一起被强制安装，所以不需要在宿主环境的package.json文件中指定对PackageA中&lt;code&gt;peerDependencies&lt;/code&gt;内容的依赖。&lt;/p&gt;
&lt;p&gt;但是在npm3中，&lt;code&gt;peerDependencies&lt;/code&gt;的表现与npm2不同：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;npm3中不会再要求peerDependencies所指定的依赖包被强制安装，相反npm3会在安装结束后检查本次安装是否正确，如果不正确会给用户打印警告提示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就拿上面的例子来说，如果我们npm install PackageA安装PackageA时，你会得到一个警告提示说：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PackageB是一个需要的依赖，但是没有被安装。 &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时，你需要手动的在MyProject项目的package.json文件指定PackageB的依赖。&lt;/p&gt;
&lt;p&gt;另外，在npm3的项目中，可能存在一个问题就是你所依赖的一个package包更新了它peerDependencies的版本，那么你可能也需要在项目的package.json文件中手动更新到正确的版本。否则会出现类似下图所示的警告信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/408483/201809/408483-20180923150858602-1272873115.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;1、&lt;a href=&quot;https://nodejs.org/en/blog/npm/peer-dependencies/&quot;&gt;Peer Dependencies&lt;/a&gt;&lt;br/&gt;2、&lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc3&quot;&gt;package.json文件&lt;/a&gt;&lt;br/&gt;3、&lt;a href=&quot;https://codingwithspike.wordpress.com/2016/01/21/dealing-with-the-deprecation-of-peerdependencies-in-npm-3/&quot;&gt;Dealing with the deprecation of peerDependencies in NPM 3&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 07:33:00 +0000</pubDate>
<dc:creator>wonyun</dc:creator>
<og:description>引言 想必前端同学对npm的devDependencies和dependencies都比较熟悉，但是对peerDependencies可能就有点陌生，尤其是没有写过npm包插件的同学，比如之前使用gr</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wonyun/p/9692476.html</dc:identifier>
</item>
<item>
<title>关于python课程的浅显理解和一些小建议 - VipYZi</title>
<link>http://www.cnblogs.com/VipYZi/p/9692826.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/VipYZi/p/9692826.html</guid>
<description>&lt;p&gt;在我的理解中，python语言是一种强大的面向对象的计算机程序设计语言，语句较简单容易懂，但是对于我这种愚笨的学生，可能学的比较慢，也不太容易懂！所以在这里我恳切的希望老师多强调一些这门课程的重点难点！众所周知，熟能生巧，希望能通过反复的强调来达到这么一种效果！在我们的教学中，总是理论和实践相结合的！很明显python课程也不例外，周二讲解理论，周三实践，进行具体的编写！老师的教学也很好，周三的上机课大多是启发性的，学生遇到不会的程序题，不去告诉他怎么编写而是授之以渔。但是学生有各式各样的，有的学生有这方面的基础，自然没有什么问题；有些学生没有什么基础，像我这样的，尽管我周二的课程听的比较认真，但是还是不够，因为一到周三还是手生，启发可能也激不起灵感，所以如果有机会希望老师给这样的没有基础或者基础不扎实的学生多讲一些这方面的知识，带着他们一起去做我觉得可能更好！实际上，我总结得出，自己一开始就没有这方面的知识，思维有一种定式，打破惯常思维才能有突破吧！然后具体的练习也比较少，只有通过反复的练习，才有机会和可能去形成关于python课程的一套思维方式！另外我希望老师多给我们讲讲python的函数，因为在我的编写过程中，有时候知道要用到这种表达的函数，但是却不知道这个函数是什么！最后我整理了一下自己的学习计划，首先上课一定要认真听讲，争取早日掌握python课程的学习方法，上机课想法一定要大胆，觉得有机会实现结果的方法都可以试试，思维也要放射，多想几种方法！最后课余一定要多读程序，在程序阅读中总结经验，以达到“兼两”！&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 07:28:00 +0000</pubDate>
<dc:creator>VipYZi</dc:creator>
<og:description>在我的理解中，python语言是一种强大的面向对象的计算机程序设计语言，语句较简单容易懂，但是对于我这种愚笨的学生，可能学的比较慢，也不太容易懂！所以在这里我恳切的希望老师多强调一些这门课程的重点难点</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/VipYZi/p/9692826.html</dc:identifier>
</item>
<item>
<title>N数码问题的启发式搜索算法--A*算法python实现 - J.mg</title>
<link>http://www.cnblogs.com/Jm-15/p/9692687.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jm-15/p/9692687.html</guid>
<description>&lt;ul&gt;&lt;li&gt;&lt;strong&gt;一、&lt;span&gt;启发式搜索：&lt;/span&gt;A算法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1）评价函数的一般形式 : f(n) = g(n) + h(n)&lt;/p&gt;
&lt;p&gt;g(n):从S0到Sn的实际代价(搜索的横向因子)&lt;/p&gt;
&lt;p&gt;h(n):从N到目标节点的估计代价,称为启发函数(搜索的纵向因子);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;特点&lt;/span&gt;: 效率高, 无回溯,  &lt;/p&gt;
&lt;p&gt;搜索算法&lt;/p&gt;
&lt;p&gt;OPEN表 : 存放待扩展的节点.&lt;/p&gt;
&lt;p&gt;CLOSED表 : 存放已被扩展过的节点.&lt;/p&gt;
&lt;p&gt;2）评价函数  f(x) = g(x) + h(x)   &lt;/p&gt;
&lt;p&gt;&lt;span&gt;当&lt;/span&gt;f(x) = g(x)   时，为宽度优先搜索&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当&lt;/span&gt;f(x) = 1/g(x)时，为深度优先搜索&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当&lt;/span&gt;f(x) = h(x)   时，为全局优先搜索&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比较&lt;/span&gt;f(x)大小，决定节点搜索顺序，即在OPEN表中的顺序&lt;/p&gt;
&lt;p&gt;3)Step1:   把初始节点S0放入OPEN表中;&lt;/p&gt;
&lt;p&gt;Step2:   若OPEN表为空,则搜索失败,退出.&lt;/p&gt;
&lt;p&gt;Step3:   移出OPEN中第一个节点N放入CLOSED表&lt;span&gt;中&lt;/span&gt;, 并标以顺序号n;&lt;/p&gt;
&lt;p&gt;Step4:   若目标节点Sg=N, 则搜索成功,结束.&lt;/p&gt;
&lt;p&gt;Step5:   若N不可扩展, 则转Step2;&lt;/p&gt;
&lt;p&gt;Step6:   &lt;span&gt;扩展&lt;/span&gt;N, 生成一组子节点, 对这组子节点作如下处理后, 放入  OPEN表, 按f值&lt;span&gt;重新排序&lt;/span&gt;OPEN表, 转 Step2;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;删除重复节点和修改返回指针处理&lt;/span&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;二、&lt;strong&gt;&lt;span&gt;启发式搜索：&lt;/span&gt;A*算法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1）评价函数的一般形式:&lt;/p&gt;
&lt;p&gt;f(n) = g(n) + h(n)  且  h(n) &amp;lt;= h*(n)&lt;/p&gt;
&lt;p&gt;g(n),h(n):定义同A算法;&lt;/p&gt;
&lt;p&gt;h*(n):从N到目标节点的最短路径; &lt;span&gt;称此时的&lt;/span&gt;A算法为A*算法.&lt;/p&gt;
&lt;p&gt;2）程序关键点&lt;/p&gt;
&lt;p&gt;节点的扩展：close表存放已经扩展后的状态，open表存放未扩展的状态。首先获取节点能扩展的方向，扩展后将父节点放入close表中，如果转移之后的节点，既不在close表也不再open表，表明该节点还未被扩展，则插入open表，如果在close表中表明之前已经扩展过该状态，为了避免无限扩展应将该状态从open表舍弃，如果在open表则比较这两个矩阵的f值（选取最优解），留小的在open表，之后对open表中的节点根据f值进行排序，pop出f值最小的节点进行扩展，依次进行该过程，直至该节点为目标状态。&lt;br/&gt;解的路径的输出：通过目标状态节点向上回溯找其父节点，直至开始状态。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;三、python代码实现&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;Created on Sun Sep 16 14:31:40 2018
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;A*算法解决N数码问题
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;运行程序后如下是输入格式:
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;        请输入矩阵的行数
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;        3                            输入对应的N
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;        请输入初始矩阵A               
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;        1 0 2                        一行行输入，每行数字空格隔开，每行最后一个数字输入完成后直接回车开始输入第二行
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;        4 5 6
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;        3 7 8
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;        请输入目标矩阵B
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;        1 2 3
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;        8 0 4
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;        7 6 5
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; copy
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; operator &lt;span&gt;import&lt;/span&gt;&lt;span&gt; itemgetter
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; goal =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; get_location(vec, num):    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;根据num元素获取num在矩阵中的位置&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;     row_num = vec.shape[0]     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;numpy-shape函数获得矩阵的维数&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;     line_num = vec.shape[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(row_num):
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(line_num):
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; num ==&lt;span&gt; vec[i][j]:
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i, j
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; get_actions(vec):    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取当前位置可以移动的下一个位置，返回移动列表&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;     row_num =&lt;span&gt; vec.shape[0]
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     line_num = vec.shape[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     
&lt;span&gt; 45&lt;/span&gt;     (x, y) = get_location(vec, 0)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取0元素的位置&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;     action = [(0, 1), (0, -1), (1, 0), (-1&lt;span&gt;, 0)]
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; x == 0:    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果0在边缘则依据位置情况，减少0的可移动位置&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         action.remove((-1&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; y ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         action.remove((0, -1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; x == row_num - 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         action.remove((1&lt;span&gt;, 0))
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; y == line_num - 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         action.remove((0, 1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list(action)
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; result(vec, action):    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;移动元素，进行矩阵转化&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;      (x, y) = get_location(vec, 0)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取0元素的位置&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;      (a, b) = action    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取可移动位置&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;                                  
&lt;span&gt; 63&lt;/span&gt;      n = vec[x+a][y+b]    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;位置移动，交换元素&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;      s =&lt;span&gt; copy.deepcopy(vec)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;      s[x+a][y+b] =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;      s[x][y] =&lt;span&gt; n
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;      
&lt;span&gt; 68&lt;/span&gt;      &lt;span&gt;return&lt;/span&gt;&lt;span&gt; s
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; get_ManhattanDis(vec1, vec2):    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算两个矩阵的曼哈顿距离,vec1为目标矩阵,vec2为当前矩阵&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;     row_num =&lt;span&gt; vec1.shape[0]
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     line_num = vec1.shape[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     dis  =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;     
&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(row_num):
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(line_num):
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; vec1[i][j] != vec2[i][j] &lt;span&gt;and&lt;/span&gt; vec2[i][j] !=&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 k, m =&lt;span&gt; get_location(vec1, vec2[i][j])
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 d = abs(i - k) + abs(j -&lt;span&gt; m)
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 dis +=&lt;span&gt; d
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 
&lt;span&gt; 82&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dis
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; expand(p, actions, step):                          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;actions为当前矩阵的可扩展状态列表,p为当前矩阵,step为已走的步数&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;     children = []                                      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;children用来保存当前状态的扩展节点&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; action &lt;span&gt;in&lt;/span&gt;&lt;span&gt; actions:
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         child =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; p
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = (result(p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;], action))
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = get_ManhattanDis(goal[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;step&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = step + 1                       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每扩展一次当前已走距离加1&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] + child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;step&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;更新该节点的f值  f=g+h（step+child[dis]）                     &lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;         child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = get_actions(child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        children.append(child)
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; children
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; node_sort(nodelist):    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;按照节点中字典的距离字段对列表进行排序,从大到小&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; sorted(nodelist, key = itemgetter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), reverse=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_input(num):
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;     A =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(num):
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         temp =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         p =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         s =&lt;span&gt; input()
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         temp = s.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; temp:
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             t =&lt;span&gt; int(t)
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            p.append(t)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        A.append(p)
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;    
&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; A  
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_parent(node):
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;     q =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;     q = node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]   
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; q
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test():
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;     openlist = []    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;open表&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;     close = []       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;存储扩展的父节点&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;     
&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入矩阵的行数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;     num =&lt;span&gt; int(input())  
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;     
&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入初始矩阵A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;     A =&lt;span&gt; get_input(num)
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;  
&lt;span&gt;130&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入目标矩阵B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;     B =&lt;span&gt; get_input(num)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;     
&lt;span&gt;133&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入结果文件名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;     resultfile =&lt;span&gt; input()
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;     
&lt;span&gt;136&lt;/span&gt;     goal[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = np.array(B)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;建立矩阵&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;    
&lt;span&gt;138&lt;/span&gt;     p =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;     p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; np.array(A)
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = get_ManhattanDis(goal[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;     p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;step&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;     p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = get_actions(p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;     p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; 
&lt;span&gt;145&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == goal[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]).all():
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;     
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;    openlist.append(p)
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;     
&lt;span&gt;150&lt;/span&gt;     start_CPU = time.clock()    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;开始扩展时CPU开始计算&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;     
&lt;span&gt;152&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; openlist:
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;         
&lt;span&gt;154&lt;/span&gt;         children =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;         
&lt;span&gt;156&lt;/span&gt;         node = openlist.pop()    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;node为字典类型，pop出open表的最后一个元素&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;         close.append(node)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将该元素放入close表&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;       
&lt;span&gt;159&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == goal[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]).all():    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;比较当前矩阵和目标矩阵是否相同&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;             end_CPU = time.clock()    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;CPU结束计算&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;          
&lt;span&gt;162&lt;/span&gt;             h = open(resultfile,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将结果写入文件  并在控制台输出&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;             h.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;搜索树规模：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(len(openlist)+len(close)) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;             h.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;close：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(len(close)) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;             h.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;openlist：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(len(openlist)) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;             h.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cpu运行时间：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(end_CPU - start_CPU) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;             h.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;路径长：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;             
&lt;span&gt;169&lt;/span&gt;             h.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;解的路径：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;             i =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             way =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt; close:
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;                 way.append(node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;从最终状态开始依次向上回溯将其父节点存入way列表中&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;                 node =&lt;span&gt; get_parent(node)
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]).all():
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;                     way.append(node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt; way:
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;                 i += 1
&lt;span&gt;180&lt;/span&gt;                 h.write(str(i) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;                 h.write(str(way.pop()) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;            h.close()
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;             f = open(resultfile,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f.read())
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;             
&lt;span&gt;186&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;         
&lt;span&gt;188&lt;/span&gt;         children = expand(node, node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], node[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;step&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果不是目标矩阵，对当前节点进行扩展，取矩阵的可能转移情况&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;         
&lt;span&gt;190&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; child &lt;span&gt;in&lt;/span&gt; children:     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果转移之后的节点，既不在close表也不再open表则插入open表，如果在close表中则舍弃，如果在open表则比较这两个矩阵的f值，留小的在open表&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;             f =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;             flag =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;             j =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(openlist)):
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == openlist[i][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]).all():
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;                     j =&lt;span&gt; i
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;                     flag =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(close)):
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] ==&lt;span&gt; close[i]).all():
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;                     f =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;  f == False &lt;span&gt;and&lt;/span&gt; flag ==&lt;span&gt; False :
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;                openlist.append(child)
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;                 
&lt;span&gt;206&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; flag ==&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; child[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &amp;lt; openlist[j][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;                     &lt;span&gt;del&lt;/span&gt;&lt;span&gt; openlist[j]
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;                    openlist.append(child)
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;                     
&lt;span&gt;211&lt;/span&gt;         
&lt;span&gt;212&lt;/span&gt;         openlist = node_sort(openlist)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;对open表进行从大到小排序&lt;/span&gt;
&lt;span&gt;213&lt;/span&gt;     
&lt;span&gt;214&lt;/span&gt; test()
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;四、&lt;strong&gt;程序运行结果如下图所示&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1019336/201809/1019336-20180923143530006-1120913179.png&quot; alt=&quot;&quot; width=&quot;870&quot; height=&quot;608&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;                                                             图&lt;/span&gt; 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1019336/201809/1019336-20180923143548893-255634858.png&quot; alt=&quot;&quot; width=&quot;876&quot; height=&quot;511&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;                                                            图&lt;/span&gt; 2&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1019336/201809/1019336-20180923143601342-475761730.png&quot; alt=&quot;&quot; width=&quot;874&quot; height=&quot;495&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;                                                                图&lt;/span&gt; 3&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;五、&lt;strong&gt;总结&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;通过这次编程了解到了搜索具有探索性，要提高搜索效率&lt;/span&gt;(尽快地找到目标节点)，或要找最佳路径(最佳解)就必须注意搜索策略。对于状态图搜索，已经提出了许多策略，它们大体可分为盲目搜索（bland search)和启发式搜索（heuristic search）两大类。其中盲目搜索是无向导搜索。启发式搜索是有向导搜索，即利用启发信息（函数）引导去寻找问题解。通过A*算法解决N数码问题实验过程中也遇到很多问题，比如节点扩展的方向问题等，通过这次实验不仅锻炼了自己python编程能力，也让自己对N数码求解最优路径问题有了更清晰的认识，希望自己能在老师和同学的帮助下，能不断进步，当然最重要的是自己得付出，只会幻想而不行动的人,永远也体会不到收获果实时的喜悦。加油！！&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 06:49:00 +0000</pubDate>
<dc:creator>J.mg</dc:creator>
<og:description>一、启发式搜索：A算法 1）评价函数的一般形式 : f(n) = g(n) + h(n) g(n):从S0到Sn的实际代价(搜索的横向因子) h(n):从N到目标节点的估计代价,称为启发函数(搜索的纵</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jm-15/p/9692687.html</dc:identifier>
</item>
<item>
<title>实现斐波拉契数列的四种方式python代码 - skaarl</title>
<link>http://www.cnblogs.com/skaarl/p/9692667.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skaarl/p/9692667.html</guid>
<description>&lt;h2 id=&quot;斐波那契数列&quot;&gt;斐波那契数列&lt;/h2&gt;
&lt;h3 id=&quot;1-斐波拉契数列简介&quot;&gt;1. 斐波拉契数列简介&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&amp;gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从1963年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实就是从第三项开始，每项的值等于前两项的和。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是在面试中常见的问题：青蛙跳台阶&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只有一级台阶时，1；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有两节台阶的时候有两种跳法，11和2；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有三节台阶的时候有三种跳法，111、12、21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有四阶台阶的时候，有五种跳法，1111、112、121、22、211&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-实现斐波拉契数列生成&quot;&gt;2. 实现斐波拉契数列生成&lt;/h3&gt;
&lt;h4 id=&quot;21-使用匿名函数的方式生成&quot;&gt;2.1 使用匿名函数的方式生成&lt;/h4&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;lang-python&quot;&gt;  fib = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda n: n &lt;span class=&quot;hljs-keyword&quot;&gt;if n &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2 &lt;span class=&quot;hljs-keyword&quot;&gt;else fib(n - &lt;span class=&quot;hljs-number&quot;&gt;1) + fib(n - &lt;span class=&quot;hljs-number&quot;&gt;2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;通过执行&lt;code&gt;fib(n)&lt;/code&gt;来输出斐波那契数列前n项的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也可以通过&lt;code&gt;listData = [fib(i) for i in range(1,n)]&lt;/code&gt;来生成斐波拉契数列前n项的值，最后通过&lt;code&gt;print listData&lt;/code&gt;可以打印出结果。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;22-利用装饰器的方式生成&quot;&gt;2.2 利用装饰器的方式生成&lt;/h4&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;lang-python&quot;&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;memo&lt;span class=&quot;hljs-params&quot;&gt;(func):
    cache = {}
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;wrap&lt;span class=&quot;hljs-params&quot;&gt;(*args):
        &lt;span class=&quot;hljs-keyword&quot;&gt;if args &lt;span class=&quot;hljs-keyword&quot;&gt;not &lt;span class=&quot;hljs-keyword&quot;&gt;in cache:
            cache[args] = func(*args)
        &lt;span class=&quot;hljs-keyword&quot;&gt;return cache[args]
    &lt;span class=&quot;hljs-keyword&quot;&gt;return wrap


&lt;span class=&quot;hljs-decorator&quot;&gt;@ memo
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;fib&lt;span class=&quot;hljs-params&quot;&gt;(i):
    &lt;span class=&quot;hljs-keyword&quot;&gt;if i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2:
        &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;1
    &lt;span class=&quot;hljs-keyword&quot;&gt;return fib(i-&lt;span class=&quot;hljs-number&quot;&gt;1) + fib(i-&lt;span class=&quot;hljs-number&quot;&gt;2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;23-定义简单的方法来实现&quot;&gt;2.3 定义简单的方法来实现&lt;/h4&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;lang-python&quot;&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;fib&lt;span class=&quot;hljs-params&quot;&gt;(n):
    a, b = &lt;span class=&quot;hljs-number&quot;&gt;0, &lt;span class=&quot;hljs-number&quot;&gt;1
    &lt;span class=&quot;hljs-keyword&quot;&gt;for _ &lt;span class=&quot;hljs-keyword&quot;&gt;in xrange(n):
        a, b = b, a + b
    &lt;span class=&quot;hljs-keyword&quot;&gt;return b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;24-利用迭代器的方式实现python3&quot;&gt;2.4 利用迭代器的方式实现(Python3)&lt;/h4&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;lang-python&quot;&gt;  &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Fib&lt;span class=&quot;hljs-params&quot;&gt;(object):
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;span class=&quot;hljs-params&quot;&gt;(self):
        self.prev = &lt;span class=&quot;hljs-number&quot;&gt;0
        self.curr = &lt;span class=&quot;hljs-number&quot;&gt;1

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;__iter__&lt;span class=&quot;hljs-params&quot;&gt;(self):
        &lt;span class=&quot;hljs-keyword&quot;&gt;return self

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;__next__&lt;span class=&quot;hljs-params&quot;&gt;(self):
        value = self.curr
        self.curr += self.prev
        self.prev = value
        &lt;span class=&quot;hljs-keyword&quot;&gt;return value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;25-利用迭代器的方式实现python2&quot;&gt;2.5 利用迭代器的方式实现(Python2)&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;python2需要修改&lt;code&gt;__next__(self)&lt;/code&gt;:方法，其实生成的是一个无限循环的迭代器，也可以使用 itertools模块把无限迭代器转为有限迭代器。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;lang-python&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;from itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import islice

  &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Fib:
      &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;span class=&quot;hljs-params&quot;&gt;(self):
          self.prev = &lt;span class=&quot;hljs-number&quot;&gt;0
          self.curr = &lt;span class=&quot;hljs-number&quot;&gt;1

      &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;__iter__&lt;span class=&quot;hljs-params&quot;&gt;(self):
          &lt;span class=&quot;hljs-keyword&quot;&gt;return self

      &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;__next__&lt;span class=&quot;hljs-params&quot;&gt;(self):
          value = self.curr
          self.curr += self.prev
          self.prev = value
          &lt;span class=&quot;hljs-keyword&quot;&gt;return value

  &amp;gt;&amp;gt;&amp;gt; f = Fib()
  &amp;gt;&amp;gt;&amp;gt; list(islice(f, &lt;span class=&quot;hljs-number&quot;&gt;0, &lt;span class=&quot;hljs-number&quot;&gt;10))
  [&lt;span class=&quot;hljs-number&quot;&gt;1, &lt;span class=&quot;hljs-number&quot;&gt;1, &lt;span class=&quot;hljs-number&quot;&gt;2, &lt;span class=&quot;hljs-number&quot;&gt;3, &lt;span class=&quot;hljs-number&quot;&gt;5, &lt;span class=&quot;hljs-number&quot;&gt;8, &lt;span class=&quot;hljs-number&quot;&gt;13, &lt;span class=&quot;hljs-number&quot;&gt;21, &lt;span class=&quot;hljs-number&quot;&gt;34, &lt;span class=&quot;hljs-number&quot;&gt;55]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 23 Sep 2018 06:40:00 +0000</pubDate>
<dc:creator>skaarl</dc:creator>
<og:description>斐波那契数列 1. 斐波拉契数列简介 斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skaarl/p/9692667.html</dc:identifier>
</item>
<item>
<title>day46_Webservice学习笔记_02 - 黑泽明军</title>
<link>http://www.cnblogs.com/chenmingjun/p/9692658.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/9692658.html</guid>
<description>&lt;h2 id=&quot;h&quot;&gt;&lt;span&gt;&lt;strong&gt;一、回顾昨天所学&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;pre readability=&quot;16&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;26&quot;&gt;什么是webservice？&lt;br/&gt;什么是远程调用技术？答：系统和系统之间的调用，从远程系统当中获取业务数据。&lt;br/&gt;Webservice是web服务，他是用http传输SOAP协议数据的一种远程调用技术。&lt;p&gt;Webservice的入门程序&lt;br/&gt;服务端&lt;br/&gt;第一步：创建SEI接口&lt;br/&gt;第二步：创建SEI实现类，要在类上加入注解：&lt;span class=&quot;hljs-meta&quot;&gt;@WebService&lt;/span&gt;，作用是标识这个类是服务类，要发布里面的&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;方法。&lt;br/&gt;第三步：发布服务，Endpoint的publish方法，有&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;两个参数：&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.服务地址  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;.实现类实例&lt;br/&gt;第四步：测试服务是否发布成功，通过阅读使用说明书，确定服务接口、方法、参数和返回值存在，说明服务发布成功。&lt;br/&gt;WSDL地址：服务地址+”?wsdl”，比如：http:&lt;br/&gt;WSDL阅读方式，从下往上，service --&amp;gt; binding --&amp;gt; portType --&amp;gt; 其中有接口、方法、参数和返回值&lt;br/&gt;客户端&lt;br/&gt;第一步：使用wsimport命令生成客户端代码&lt;br/&gt;第二步：根据使用说明书，使用客户端调用服务端&lt;br/&gt;创建服务视图，视图是从service的name属性获取&lt;br/&gt;获取服务实现类，从portType的name属性获取&lt;br/&gt;调用查询方法，从portType下的operation标签的name属性获取&lt;/p&gt;&lt;p&gt;Webservice的优缺点：&lt;br/&gt;优点：发送方式采用http的post，http默认端口是&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;，所以跨防火墙。&lt;br/&gt;数据封装使用XML格式，XML是跨平台，所以webservice可以跨平台。&lt;br/&gt;Webservice支持面向对象开发。&lt;br/&gt;缺点：使用XML封装数据，需要额外传输其他标签，性能较差。&lt;/p&gt;&lt;p&gt;Webservice的应用场景&lt;br/&gt;宏观&lt;br/&gt;软件集成和复用&lt;br/&gt;微观&lt;br/&gt;适用场景：&lt;br/&gt;发布服务（对内/对外），不考虑性能，不考虑客户端类型，建议使用webservice&lt;br/&gt;服务端已经确定webservice，客户端只能使用webservice&lt;br/&gt;不适用场景：&lt;br/&gt;考虑性能时，不建议使用webservice&lt;br/&gt;同构程序下，不建议使用webservice，比如：客户端服务端都是java开发，建议使用Java RMI，Java的RMI同样可以实现远程调用，而且性能比webservice好很多。&lt;/p&gt;&lt;p&gt;Webservice的三要素&lt;br/&gt;WSDL:&lt;br/&gt;定义：web服务描述语言，它是webservice服务端的使用说明书，它说明服务、接口、方法、参数和返回值，它是伴随服务发布成功，而自动生成的，无需编写。&lt;br/&gt;文档结构：&lt;br/&gt;service&lt;br/&gt;binding&lt;br/&gt;portType&lt;br/&gt;message&lt;br/&gt;types&lt;br/&gt;阅读方式：从下往上&lt;br/&gt;SOAP:&lt;br/&gt;定义：SOAP即简单对象访问协议，它是使用http传输XML格式的数据，跨平台，跨防火墙，它不是webservice专有协议。&lt;br/&gt;Soap = http + xml&lt;br/&gt;协议的格式：&lt;br/&gt;必须项：envelope和body&lt;br/&gt;非必须项有：header和fault&lt;br/&gt;SOAP1.1和&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;区别&lt;br/&gt;相同点：&lt;br/&gt;都使用http的POST发送请求&lt;br/&gt;协议格式都相同：都有envelope和body标签&lt;br/&gt;不同点：&lt;br/&gt;Content-type不同：&lt;br/&gt;SOAP1.1：text/xml; charset=utf-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;&lt;br/&gt;SOAP1.2：application/soap+xml; charset=utf-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;命名空间不同：&lt;br/&gt;SOAP1.1：http:&lt;br/&gt;SOAP1.2：http:&lt;/p&gt;&lt;p&gt;Webservice的四种客户端调用方式&lt;br/&gt;生成客户端的调用方式&lt;br/&gt;Service编程的调用方式&lt;br/&gt;HttpURLConnecton调用方式&lt;br/&gt;Ajax调用方式&lt;/p&gt;&lt;p&gt;深入开发：用注解修改WSDL内容&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Webservice&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@WebMethod&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@WebParam&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@WebResult&lt;/span&gt;&lt;br/&gt;修改完WSDL之后，需要重新生成客户端代码。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h-1&quot;&gt;&lt;span&gt;&lt;strong&gt;二、课程安排&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;CXF的介绍、安装和配置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;使用CXF发布SOAP1.1协议的服务
&lt;ul&gt;&lt;li&gt;&lt;span&gt;使用CXF发布SOAP1.2协议的服务（了解一下）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;CXF + Spring整合发布SOAP的服务&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用CXF发布REST的服务（大企业中使用）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;什么是REST&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;CXF + Spring整合发布REST的服务&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;综合案例：把公网的服务集成到自己开发的系统中，通过调用服务实现查询功能，再把我们做的查询功能发布成一个服务，让外界的人去调用。（背着写）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;hcxf&quot;&gt;&lt;span&gt;&lt;strong&gt;三、CXF的介绍、安装和配置&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h31cxf&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1、CXF的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;10&quot;&gt;
&lt;code class=&quot;hljs nginx&quot; readability=&quot;14&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;Apache&lt;/span&gt; CXF = Celtix + Xfire，开始叫 Apache CeltiXfire，后来更名为 Apache CXF 了，以下简称为 CXF。&lt;p&gt;Apache CXF 是一个开源的web Services 框架，CXF 帮助您快速构建和开发 web Services ，它支持多种协议，比如：SOAP1.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;、XML/HTTP、RESTful HTTP 或者 CORBA。&lt;/p&gt;&lt;p&gt;CORBA（Common Object Request Broker Architecture公共对象请求代理体系结构，早期语言使用的WS。C,c++,C&lt;/p&gt;&lt;p&gt;CXF是基于SOA总线结构，依靠spring完成模块的集成，实现SOA方式。&lt;/p&gt;&lt;p&gt;灵活的部署：可以运行有Tomcat、Jboss、Jetty(内置)、Weblogic上面。&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;CXF是一个开源的webservice框架，提供很多完善功能，可以实现快速构建和开发。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;CXF支持的协议：SOAP1.1/1.2、REST（今天要讲的）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;CXF支持数据格式：XML、JSON（仅在REST方式下支持）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h32cxf&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2、CXF的安装及配置&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h2 id=&quot;hcxfsoap11&quot;&gt;&lt;span&gt;&lt;strong&gt;四、使用CXF发布SOAP1.1协议的服务&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h41&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1、需求&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;服务端：发布服务，接收客户端的城市名，返回天气数据给客户端。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;客户端：发送城市名给服务端，接收服务端的响应信息，打印。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h42&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2、实现-服务端&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开发步骤：&lt;br/&gt;　　第一步：导入jar包&lt;br/&gt;　　第二步：创建SEI接口，要在&lt;code&gt;接口&lt;/code&gt;上加入注解：@WebService&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs css&quot; readability=&quot;6&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.itheima&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.webservice&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.cxf&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.server&lt;/span&gt;;&lt;p&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.jws&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.WebService&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;@&lt;span class=&quot;hljs-keyword&quot;&gt;WebService&lt;/span&gt;&lt;br/&gt;public interface WeatherInterface {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;queryWeather&lt;/span&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cityName&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第三步：创建SEI实现类&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;5&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.webservice.cxf.server;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WeatherInterfaceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WeatherInterface&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;queryWeather&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String cityName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;from client...&quot;&lt;/span&gt; + cityName);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;北京&quot;&lt;/span&gt;.equals(cityName)) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;冷且霾&quot;&lt;/span&gt;;&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;暖且晴&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第四步：发布服务, &lt;code&gt;使用JaxWsServerFactoryBean发布服务，需要设置3个参数：1.服务接口； 2.服务实现类； 3.服务地址； Endpoint仅支持发布实现类，JaxWsServerFactoryBean支持发布接口。&lt;/code&gt;&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.webservice.cxf.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.jaxws.JaxWsServerFactoryBean;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WeatherServer&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;JaxWsServerFactoryBean jaxWsServerFactoryBean = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JaxWsServerFactoryBean();&lt;br/&gt;jaxWsServerFactoryBean.setServiceClass(WeatherInterface.class);&lt;br/&gt;jaxWsServerFactoryBean.setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:12345/weather&quot;&lt;/span&gt;);    &lt;br/&gt;jaxWsServerFactoryBean.setServiceBean(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WeatherInterfaceImpl());&lt;br/&gt;jaxWsServerFactoryBean.create();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第五步：测试服务是否发布成功，阅读使用说明书，确定关键点。我们先启动服务端服务，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_08.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　如果在CXF发布的服务下，直接访问服务地址：http://127.0.0.1:12345/weather，会如下异常:&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_09.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　此时直接访问使用说明书的地址即可：http://127.0.0.1:12345/weather?wsdl，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_10.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h43cxfsoap12&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3、使用CXF发布SOAP1.2协议的服务&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;在接口上加入如下注解：&lt;br/&gt;@BindingType(SOAPBinding.SOAP12HTTP_BINDING)&lt;/li&gt;
&lt;li&gt;&lt;span&gt;再重新发布服务端。注意：每次我们重新发布服务端的时候，端口都会被占用，需要我们手动结束任务，清理出端口来。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h44cxf&quot;&gt;&lt;span&gt;&lt;strong&gt;4.4、CXF拦截器&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;CXF拦截器的原理：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;拦截器可以拦截请求和响应&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;拦截器可以有多个&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;拦截器可以根据需要自定义&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CXF拦截器的使用：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;拦截器必须加到服务端，在服务端发布服务之前加入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;获取拦截器列表，将自己的拦截器加入列表中&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CXF拦截器的应用场景：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;一般用于测试，比如：安全性方面：过滤非法请求、非法代码等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;但是一般情况下是不会用的，因为拦截器加上了之后会增加正式服务器的负载，影响性能，而且这些拦截器和业务逻辑是无关的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;一般情况下，拦截器会加到代理服务器上面，以后用或不用，是由经理来决定的&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;10.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;15&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.webservice.cxf.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.interceptor.LoggingInInterceptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.interceptor.LoggingOutInterceptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.jaxws.JaxWsServerFactoryBean;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WeatherServer&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;JaxWsServerFactoryBean jaxWsServerFactoryBean = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JaxWsServerFactoryBean();&lt;br/&gt;jaxWsServerFactoryBean.setServiceClass(WeatherInterface.class);&lt;br/&gt;jaxWsServerFactoryBean.setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:12345/weather&quot;&lt;/span&gt;);&lt;br/&gt;jaxWsServerFactoryBean.setServiceBean(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; WeatherInterfaceImpl());&lt;/p&gt;&lt;p&gt;&lt;br/&gt;jaxWsServerFactoryBean.getInInterceptors().add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LoggingInInterceptor());&lt;br/&gt;jaxWsServerFactoryBean.getOutInterceptors().add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LoggingOutInterceptor());&lt;/p&gt;&lt;p&gt;&lt;br/&gt;jaxWsServerFactoryBean.create();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新发布服务端和客户端，服务端控制台打印出的结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;----------------------------&lt;br/&gt;ID: 1&lt;br/&gt;Address: http://127.0.0.1:12345/weather&lt;br/&gt;Encoding: UTF-8&lt;br/&gt;Http-Method: POST&lt;br/&gt;Content-Type: text/xml; charset=UTF-8&lt;br/&gt;Headers: {Accept=[*/*], Cache-Control=[no-cache], connection=[keep-alive], Content-Length=[240], content-type=[text/xml; charset=UTF-8], Host=[127.0.0.1:12345], Pragma=[no-cache], SOAPAction=[&quot;&quot;], User-Agent=[Apache-CXF/3.2.6]}&lt;br/&gt;Payload:&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;soap:Envelope&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:soap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;soap:Body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ns2:queryWeather&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:ns2&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://server.cxf.webservice.itheima.com/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;arg0&lt;/span&gt;&amp;gt;&lt;/span&gt;山西省运城市永济市&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;arg0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ns2:queryWeather&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;soap:Body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;soap:Envelope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;--------------------------------------&lt;br/&gt;from client...山西省运城市永济市&lt;br/&gt;九月 22, 2018 12:18:05 上午 org.apache.cxf.services.WeatherInterfaceService.WeatherInterfacePort.WeatherInterface&lt;br/&gt;信息: Outbound Message&lt;br/&gt;---------------------------&lt;br/&gt;ID: 1&lt;br/&gt;Response-Code: 200&lt;br/&gt;Encoding: UTF-8&lt;br/&gt;Content-Type: text/xml&lt;br/&gt;Headers: {}&lt;br/&gt;Payload: &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;soap:Envelope&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:soap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;soap:Body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ns2:queryWeatherResponse&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:ns2&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://server.cxf.webservice.itheima.com/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;return&lt;/span&gt;&amp;gt;&lt;/span&gt;暖且晴&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;return&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ns2:queryWeatherResponse&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;soap:Body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;soap:Envelope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;--------------------------------------&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h45&quot;&gt;&lt;span&gt;&lt;strong&gt;4.5、实现-客户端&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;第一步：生成客户端代码&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;wsdl2java命令是CXF提供的生成客户端的工具，它和wsimport类似，可以根据WSDL生成客户端代码。&lt;br/&gt;wsdl2java -p com.itheima.cxf.weather -d . http://127.0.0.1:12345/weather?wsdl&lt;br/&gt;演示效果如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_11.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;wsdl2java常用参数：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-d，指定客户端代码输出目录&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-p，指定客户端代码输出包名，如果不指定该参数，默认包名是WSDL的命名空间的倒序&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;wsdl2java支持SOAP1.1和SOAP1.2协议的客户端生成。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;第二步：使用说明书，使用生成的客户端代码调用服务端
&lt;ul&gt;&lt;li&gt;&lt;span&gt;先引入jar包&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;`使用JaxWsProxyFactoryBean调用服务端，设置2个参数：1.设置服务接口； 2.设置服务地址`&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;13&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.weather.client;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.jaxws.JaxWsProxyFactoryBean;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.cxf.weather.WeatherInterface;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WeatherClient&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;JaxWsProxyFactoryBean jaxWsProxyFactoryBean = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JaxWsProxyFactoryBean();&lt;br/&gt;jaxWsProxyFactoryBean.setServiceClass(WeatherInterface.class);&lt;br/&gt;jaxWsProxyFactoryBean.setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:12345/weather&quot;&lt;/span&gt;);&lt;br/&gt;WeatherInterface weatherInterface = jaxWsProxyFactoryBean.create(WeatherInterface.class);&lt;br/&gt;String weather = weatherInterface.queryWeather(&lt;span class=&quot;hljs-string&quot;&gt;&quot;山西省运城市永济市&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;System.out.println(weather);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;服务端效果截图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_12.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;客户端效果截图如下：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_13.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;hcxfspringsoap&quot;&gt;&lt;span&gt;&lt;strong&gt;五、CXF + Spring整合发布SOAP协议的服务&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h51webproject&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1、服务端-示例使用Web Project&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开发步骤：&lt;br/&gt;　　第一步：在MyEclipse中创建Web Project，之后在lib目录下引入jar包，然后添加至构建路径（在Eclipse中创建动态的Web Project）&lt;br/&gt;　　第二步：创建SEI接口&lt;br/&gt;　　第三步：创建SEI实现类&lt;br/&gt;  　　我们可以直接拷贝之前没有整合Spring时的代码：创建SEI接口的代码和创建SEI实现类的代码。&lt;br/&gt;  　　因为我们不在WeatherServer.java中发布服务端了，而是在Tomcat中发布服务端，所以我们需要删掉WeatherServer.java文件。&lt;br/&gt;　　第四步：整合Spring，&lt;code&gt;配置spring配置文件，applicationContext.xml，在Spring中使用 &amp;lt;jaxws:server 标签来发布服务，该标签是对 JaxWsServerFactoryBean类 的封装，需要设置：1.设置服务地址；2.设置服务接口；3.设置服务实现类&lt;/code&gt;&lt;br/&gt;示例代码如下：&lt;br/&gt;applicationContext.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxws&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxrs&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:cxf&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd&lt;br/&gt;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&lt;br/&gt;http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/weather&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;serviceClass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.WeatherInterface&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WeatherInterfaceImpl&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WeatherInterfaceImpl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.WeatherInterfaceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第五步：配置web.xml，&lt;code&gt;配置spring配置文件地址和配置加载的listener，配置CXF的servlet&lt;/code&gt;&lt;br/&gt;示例代码如下：&lt;br/&gt;web.xml&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;web-app&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WebApp_ID&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;display-name&lt;/span&gt;&amp;gt;&lt;/span&gt;day46_03_Webservice_cxf_spring_server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;display-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CXF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CXF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/ws/*&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;web-app&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第六步：部署到tomcat下，启动tomcat&lt;br/&gt;　　　　注意：启动tomcat时控制台会出现一个错误： Error configuring application listener of class [org.springframework.web.context.ContextLoaderListener]，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_14.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;解决办法：&lt;br/&gt;　　右击项目点击“Properties”，然后会出现一个弹框，弹框中找到“Deployment Assembly” 点击，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_15.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　然后点击“Add” 出现如下图：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_16.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　选择 Jave Build Path Entries，把程序用于的Library加入进来，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_17.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　加入成功后的截图如下：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_18.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　重新运行Server，即重新启动tomcat，控制台看不到这个问题了！噢耶
&lt;p&gt;　　第七步：测试服务，阅读使用说明书&lt;br/&gt;&lt;code&gt;　　　　WSDL地址规则：http://ip:端口号/项目名称/servlet拦截路径/服务名称?wsdl&lt;/code&gt;&lt;br/&gt;　　　　例如：http://127.0.0.1:8080/day46_03_Webservice_cxf_spring_server/webservice/weather?wsdl&lt;br/&gt;效果截图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_19.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;code&gt;说明界面地址：http://ip:端口号/项目名称/servlet拦截路径&lt;/code&gt;&lt;br/&gt;　　例如：http://127.0.0.1:8080/day46_03_Webservice_cxf_spring_server/webservice&lt;br/&gt;说明界面如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_20.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h52cxf&quot;&gt;&lt;span&gt;&lt;strong&gt;5.2、配置CXF拦截器&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;需要在 applicationContext.xml 进行配置&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxws&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxrs&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:cxf&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd&lt;br/&gt;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&lt;br/&gt;http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/weather&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;serviceClass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.WeatherInterface&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WeatherInterfaceImpl&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:inInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inInterceptor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:inInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:outInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outInterceptor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:outInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WeatherInterfaceImpl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.WeatherInterfaceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inInterceptor&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outInterceptor&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.cxf.interceptor.LoggingOutInterceptor&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启Tomcat，没有报错，CXF拦截器配置成功。&lt;/p&gt;
&lt;h3 id=&quot;h53endpoint&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3、使用Endpoint标签发布服务&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;使用&amp;lt;jaxws:endpoint&amp;gt;标签&lt;/code&gt;&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;7&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.webservice.cxf.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.jws.WebService;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@WebService&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HelloWorld&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello,&quot;&lt;/span&gt; + name;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;application.xml 文件中的配置如下：&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;5&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxws&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxrs&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:cxf&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd&lt;br/&gt;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&lt;br/&gt;http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:endpoint&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;implementor&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.HelloWorld&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:endpoint&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/weather&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;serviceClass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.WeatherInterface&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WeatherInterfaceImpl&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:inInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inInterceptor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:inInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:outInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outInterceptor&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:outInterceptors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WeatherInterfaceImpl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.webservice.cxf.server.WeatherInterfaceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inInterceptor&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outInterceptor&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.cxf.interceptor.LoggingOutInterceptor&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　然后重新启动tomcat，没有报错，表示成功！&lt;br/&gt;　　再次访问：http://127.0.0.1:8080/day46_03_Webservice_cxf_spring_server/webservice/weather?wsdl&lt;br/&gt;新的效果截图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_21.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　再次访问：http://127.0.0.1:8080/day46_03_Webservice_cxf_spring_server/webservice&lt;br/&gt;新的说明界面如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_22.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h54javaproject&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4、客户端-示例使用Java Project&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开发步骤：&lt;br/&gt;　　第一步：引入jar包&lt;br/&gt;　　第二步：生成客户端代码&lt;br/&gt;　　第三步：配置spring配置文件，applicationContent.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxws&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxrs&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:cxf&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd&lt;br/&gt;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&lt;br/&gt;http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;                     &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxrs:client&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;weatherClient&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:8080/day46_03_Webservice_cxf_spring_server/webservice/weather&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;serviceClass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.cxf.weather.WeatherInterface&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxrs:client&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第四步：从spring的上下文中获取服务实现类&lt;br/&gt;　　第五步：调用查询方法，打印&lt;br/&gt;　　客户端代码示例如下：&lt;br/&gt;WeatherClient.java&lt;/p&gt;
&lt;pre readability=&quot;9&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;12&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.weather.client;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.ApplicationContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.cxf.weather.WeatherInterface;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WeatherClient&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;ApplicationContext context = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:applicationContext.xml&quot;&lt;/span&gt;);&lt;br/&gt;WeatherInterface  weatherInterface  = (WeatherInterface) context.getBean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weatherClient&quot;&lt;/span&gt;);&lt;br/&gt;String weather = weatherInterface.queryWeather(&lt;span class=&quot;hljs-string&quot;&gt;&quot;山西省运城市永济市&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(weather);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　运行服务端代码，没有报错，成功！&lt;br/&gt;客户端控制台截图如下所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_23.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;服务端控制台截图如下所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_24.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h-2&quot;&gt;&lt;span&gt;&lt;strong&gt;六、回顾上午所学&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;hljs javascript&quot; readability=&quot;18&quot;&gt;CXF的介绍、安装和配置&lt;br/&gt;CXF是一个开源的webservice的框架，提供很多成熟的功能，可以实现快速开发&lt;br/&gt;CXF支持的协议：SOAP1&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;，REST&lt;br/&gt;CXF支持的数据格式：XML，&lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;&lt;br/&gt;安装和配置&lt;br/&gt;安装JDK，建议&lt;span class=&quot;hljs-number&quot;&gt;1.8&lt;/span&gt;&lt;br/&gt;解压cxf压缩包到指定目录，配置CXF_HOME&lt;br/&gt;CXF_HOME加入Path中&lt;br/&gt;测试成功，在cmd中输入wsdl2java –h&lt;p&gt;使用CXF发布SOAP协议的服务&lt;br/&gt;服务端&lt;br/&gt;第一步：引入jar包&lt;br/&gt;第二步：创建SEI接口，要在&lt;span class=&quot;hljs-string&quot;&gt;`接口`&lt;/span&gt;上加入注解：@WebService&lt;br/&gt;第三步：创建SEI实现类&lt;br/&gt;第四步：发布服务，使用JaxWsServerFactoryBean发布服务，设置&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;个参数，&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;服务接口； &lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;服务实现类； &lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt;服务地址&lt;br/&gt;第五步：测试服务&lt;/p&gt;&lt;p&gt;客户端&lt;br/&gt;第一步：引入jar包&lt;br/&gt;第二步：生成客户端代码&lt;br/&gt;第三步：使用JaxWSProxyFactoryBean调用服务端，设置&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;个参数，&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;服务接口；&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;服务地址&lt;br/&gt;第四步：获取实现类的实例，调用查询方法&lt;/p&gt;&lt;p&gt;CXF + Spring整合发布SOAP协议的服务&lt;br/&gt;服务端&lt;br/&gt;第一步：在MyEclipse中创建Web Project，之后在lib目录下引入jar包，然后添加至构建路径（在Eclipse中创建 动态的Web Project）&lt;br/&gt;第二步：创建SEI接口&lt;br/&gt;第三步：创建SEI实现类&lt;br/&gt;第四步：配置Spring配置文件，applicationContext.xml，&lt;span class=&quot;hljs-string&quot;&gt;`使用&amp;lt;jaxws:server&amp;gt;标签`&lt;/span&gt;&lt;br/&gt;第五步：配置web.xml，配置spring配置文件地址和配置加载的listener，以及CXF的servlet&lt;br/&gt;第六步：部署tomcat下，启动tomcat&lt;br/&gt;第七步：测试服务是否发布成功&lt;br/&gt;WSDL地址规则：http:&lt;/p&gt;&lt;p&gt;客户端&lt;br/&gt;第一步：引入jar包&lt;br/&gt;第二步：生成客户端代码&lt;br/&gt;第三步：配置spring的配置文件，applicationContext.xml，&lt;span class=&quot;hljs-string&quot;&gt;`使用&amp;lt;jaxws:client&amp;gt;标签`&lt;/span&gt;&lt;br/&gt;第四步：初始化spring上下文，获取接口实现类，调用查询方法&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hcxfrest&quot;&gt;&lt;span&gt;&lt;strong&gt;七、使用CXF发布REST的服务（大企业中使用）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h71rest&quot;&gt;&lt;span&gt;&lt;strong&gt;7.1、什么是REST&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;hljs nginx&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;REST&lt;/span&gt; 是一种软件架构模式，只是一种风格，，REST服务采用 HTTP 做传输协议，REST 对于 HTTP 的利用实现精确的资源定位。&lt;p&gt;Rest要求对资源定位更加准确，如下：&lt;br/&gt;非rest方式：http://ip:port/queryUser.action?userType=student&amp;amp;id=001&lt;br/&gt;Rest方式：http://ip:port/user/student/query/001&lt;br/&gt;Rest方式表示互联网上的资源更加准确，但是也有缺点，可能目录的层级较多不容易理解。&lt;/p&gt;&lt;p&gt;REST 是一种软件架构理念，现在被移植到Web服务上，那么在开发Web服务上，偏于面向资源的服务适用于REST。&lt;br/&gt;REST简单易用，效率高（不用生成客户端）。&lt;br/&gt;SOAP 成熟度较高，安全性较好。&lt;/p&gt;&lt;p&gt;注意：REST 不等于WebService，JAX-RS 只是将REST 设计风格应用到Web 服务开发上。    &lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;定义：REST就是一种编程风格，它可以精确定位网上资源（服务接口、方法、参数）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;REST支持数据格式：XML、JSON&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;REST支持发送方式：GET、POST&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h72&quot;&gt;&lt;span&gt;&lt;strong&gt;7.2、需求&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;第一个：查询单个学生&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;第二个：查询多个学生&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h73&quot;&gt;&lt;span&gt;&lt;strong&gt;7.3、实现-服务端&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开发步骤：&lt;br/&gt;　　第一步：导入jar包&lt;br/&gt;　　第二步：创建学生pojo类，&lt;code&gt;要在类上加入注解：@ XmlRootElement&lt;/code&gt;&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;11&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;16&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.rest.pojo;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.xml.bind.annotation.XmlRootElement;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@XmlRootElement&lt;/span&gt;(name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;student&quot;&lt;/span&gt;) &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Student&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; id;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Date birthday;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; id;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;hljs-title&quot;&gt;getBirthday&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; birthday;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setBirthday&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Date birthday)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.birthday = birthday;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第三步：创建SEI接口&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;hljs kotlin&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.rest.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.jws.WebService;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.GET;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.Path;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.PathParam;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.Produces;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.core.MediaType;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.cxf.rest.pojo.Student;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@WebService&lt;/span&gt;         &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/student&quot;&lt;/span&gt;)&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StudentInterface&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@GET&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Produces(MediaType.APPLICATION_XML)&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/query/{id}&quot;&lt;/span&gt;)&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Student query(&lt;span class=&quot;hljs-meta&quot;&gt;@PathParam(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt;long id);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@GET&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Produces(MediaType.APPLICATION_XML)&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Path(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/queryList/{name}&quot;&lt;/span&gt;)&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt; queryList(&lt;span class=&quot;hljs-meta&quot;&gt;@PathParam(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;name&quot;&lt;/span&gt;)&lt;/span&gt;String name);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第四步：创建SEI实现类&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;11&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;16&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.rest.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.cxf.rest.pojo.Student;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StudentInterfaceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StudentInterface&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Student &lt;span class=&quot;hljs-title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Student st = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Student();&lt;br/&gt;st.setId(&lt;span class=&quot;hljs-number&quot;&gt;110&lt;/span&gt;);&lt;br/&gt;st.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;张三&quot;&lt;/span&gt;);&lt;br/&gt;st.setBirthday(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date());&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; st;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;queryList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;Student st = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Student();&lt;br/&gt;st.setId(&lt;span class=&quot;hljs-number&quot;&gt;110&lt;/span&gt;);&lt;br/&gt;st.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;张三&quot;&lt;/span&gt;);&lt;br/&gt;st.setBirthday(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date());&lt;/p&gt;&lt;p&gt;Student st2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Student();&lt;br/&gt;st2.setId(&lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;);&lt;br/&gt;st2.setName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;李四&quot;&lt;/span&gt;);&lt;br/&gt;st2.setBirthday(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date());&lt;/p&gt;&lt;p&gt;List&amp;lt;Student&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Student&amp;gt;();&lt;br/&gt;list.add(st);&lt;br/&gt;list.add(st2);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第五步：发布服务, &lt;code&gt;使用JAXRSServerFactoryBean发布REST服务，发布前，需要设置3个参数，1.设置服务实现类；2.设置资源类；3.设置服务地址&lt;/code&gt;，然后我们启动服务端服务&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;7&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.rest.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.jaxrs.JAXRSServerFactoryBean;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StudentServer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;JAXRSServerFactoryBean jaxRSServerFactoryBean = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JAXRSServerFactoryBean();&lt;br/&gt;jaxRSServerFactoryBean.setServiceBean(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StudentInterfaceImpl());&lt;br/&gt;jaxRSServerFactoryBean.setResourceClasses(StudentInterfaceImpl.class);&lt;br/&gt;jaxRSServerFactoryBean.setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:12345/user&quot;&lt;/span&gt;);&lt;br/&gt;jaxRSServerFactoryBean.create();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第六步：测试服务&lt;/p&gt;
&lt;p&gt;1、访问服务地址：http://127.0.0.1:12345/user/student/query/110&lt;br/&gt;　　查询单个学生，返回XML数据，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_25.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;2、访问服务地址：http://127.0.0.1:12345/user/student/query/110&lt;br/&gt;　　查询单个学生，返回JSON数据，如下图所示：&lt;br/&gt;　　需要先修改学生接口中配置的注解为@Produces(MediaType.APPLICATION_JSON)，之后再重新发布服务&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_26.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;3、访问服务地址：http://127.0.0.1:12345/user/student/queryList/110&lt;br/&gt;　　查询多个学生，返回XML数据，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_27.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;4、访问服务地址：http://127.0.0.1:12345/user/student/queryList/110&lt;br/&gt;查询多个学生，返回JSON数据，如下图所示：&lt;br/&gt;需要先修改学生接口中配置的注解为@Produces(MediaType.APPLICATION_JSON)，之后再重新发布服务&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_28.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果服务端发布时指定请求方式是GET（POST），客户端必须使用GET（POST）访问服务端，否则会报如下异常：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_29.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;如果在同一方法上同时指定XML和JSON媒体类型，在GET请求下，默认返回XML数据，在POST请求下，默认返回JSON数据。
&lt;ul&gt;&lt;li&gt;&lt;span&gt;可以通过：&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;`http://127.0.0.1:12345/user/student/queryList/110?_type=json` 或者&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;`http://127.0.0.1:12345/user/student/queryList/110?_type=xml` 进行切换&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h74&quot;&gt;&lt;span&gt;&lt;strong&gt;7.4、实现-客户端&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;REST服务不用生成客户端代码，因为服务端返回来的就是XML数据或者JSON数据，我们只需要通过URL就能拿到数据进行解析就可以了，所以不需要生成客户端代码了。那么如何解析URL呢？方式一：使用dom4j框架。&lt;/p&gt;
&lt;p&gt;可以自学一下httpclient框架，该框架是专门发送Http请求，然后从URL中获取数据的框架。自学网址：http://hc.apache.org/httpclient-3.x/&lt;/p&gt;
&lt;p&gt;今天我们不使用httpclient框架，还是使用HttpURLConnection调用方式实现服务端调用&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;10.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;15&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.cxf.rest.client;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.BufferedReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.InputStreamReader;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.OutputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.HttpURLConnection;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.net.URL;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpClient&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;URL url = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; URL(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:12345/user/student/query/110&quot;&lt;/span&gt;);&lt;br/&gt;HttpURLConnection connection = (HttpURLConnection) url.openConnection();&lt;br/&gt;connection.setRequestMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;);&lt;br/&gt;connection.setDoInput(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; responseCode = connection.getResponseCode();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; == responseCode) { &lt;br/&gt;InputStream is = connection.getInputStream();&lt;br/&gt;InputStreamReader isr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(is); &lt;br/&gt;BufferedReader br = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BufferedReader(isr); &lt;/p&gt;&lt;p&gt;StringBuilder sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;String temp = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; != (temp = br.readLine())) {&lt;br/&gt;sb.append(temp);&lt;br/&gt;}&lt;br/&gt;System.out.println(sb.toString());&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;is.close();&lt;br/&gt;isr.close();&lt;br/&gt;br.close();&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hcxfspringrest&quot;&gt;&lt;span&gt;&lt;strong&gt;八、CXF + Spring整合发布REST的服务&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h81webproject&quot;&gt;&lt;span&gt;&lt;strong&gt;8.1、服务端-示例使用Web Project&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开发步骤：&lt;br/&gt;　　第一步：创建Web Project项目（引入jar包）&lt;br/&gt;　　第二步：创建POJO类&lt;br/&gt;　　第三步：创建SEI接口&lt;br/&gt;　　第四步：创建SEI实现类&lt;br/&gt;　　第五步：配置Spring配置文件，applicationContext.xml，&lt;code&gt;使用 &amp;lt;jaxrs:server&amp;gt; 标签，需要设置2个参数：1.服务地址；2.服务实现类&lt;/code&gt;&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxws&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxrs&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:cxf&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd&lt;br/&gt;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&lt;br/&gt;http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;                                 &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxrs:server&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/user&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxrs:serviceBeans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;studentInterface&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxrs:serviceBeans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxrs:server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;studentInterface&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.cxf.rest.server.StudentInterfaceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第六步：配置web.xml&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;web-app&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WebApp_ID&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;display-name&lt;/span&gt;&amp;gt;&lt;/span&gt;day46_07_Webservice_cxf_rest_spring_server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;display-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CXF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CXF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/webservice/*&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;web-app&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第七步：将项目部署到tomcat下，启动tomcat，控制台没有报错即可。&lt;br/&gt;　　第八步：测试服务&lt;br/&gt;&lt;code&gt;REST服务的使用说明书地址：http://127.0.0.1:8080/day46_07_Webservice_cxf_rest_spring_server/webservice/user?_wadl&lt;/code&gt; ，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_30.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h82javaprojectajax&quot;&gt;&lt;span&gt;&lt;strong&gt;8.2、客户端-示例使用Java Project，使用ajax调用方式&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;queryStudent&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;br/&gt;xhr.open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://127.0.0.1:8080/day46_07_Webservice_cxf_rest_spring_server/webservice/user/student/queryList/110?_type=json&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;xhr.onreadystatechange=&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; == xhr.readyState &amp;amp;&amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; == xhr.status) {&lt;br/&gt;alert(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt; + xhr.responseText + &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;).student[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].name);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;xhr.send(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;学生查询&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;javascript:queryStudent();&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;演示效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_31.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h-3&quot;&gt;&lt;span&gt;&lt;strong&gt;九、综合案例&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h91&quot;&gt;&lt;span&gt;&lt;strong&gt;9.1、需求&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;集成(调用)公网手机号归属地查询服务&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;对外发布自己的手机号归属地查询服务&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;提供查询界面&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h92&quot;&gt;&lt;span&gt;&lt;strong&gt;9.2、分析&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_37.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h93&quot;&gt;&lt;span&gt;&lt;strong&gt;9.3、实现&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;开发步骤：&lt;br/&gt;　　第一步：创建Web Project项目（引入jar包）&lt;br/&gt;　　第二步：生成公网客户端代码&lt;br/&gt;　　第三步：创建SEI接口&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.mobile.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.jws.WebService;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@WebService&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MobileInterface&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;queryMobile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String phoneNum)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第四步：创建SEI实现类，因为最后我们调用公网客户端代码的时候，调用的是服务接口中的实现类，所以我们要把公网客户端的服务接口给注入进来。公网客户端的服务接口为：MobileCodeWSSoap&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;10&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;14&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.mobile.server;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.mobile.MobileCodeWSSoap;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MobileInterfaceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MobileInterface&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MobileCodeWSSoap mobileClient;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MobileCodeWSSoap &lt;span class=&quot;hljs-title&quot;&gt;getMobileClient&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mobileClient;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setMobileClient&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(MobileCodeWSSoap mobileClient)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.mobileClient = mobileClient;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;queryMobile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String phoneNum)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mobileClient.getMobileCodeInfo(phoneNum, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第五步：创建queryMobile.jsp&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;language&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;pageEncoding&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;%&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;手机号归属地查询网站&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;queryMobile.action&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;手机号归属地查询：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;phoneNum&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;查询&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;查询结果：${result}&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第六步：创建MobileServlet.java&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;19&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;32&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.mobile.server.servlet;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.ServletException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.http.HttpServlet;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.http.HttpServletRequest;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.servlet.http.HttpServletResponse;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.ApplicationContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.web.context.support.WebApplicationContextUtils;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.mobile.server.MobileInterface;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MobileServlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpServlet&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; MobileInterface mobileServer;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException &lt;/span&gt;{&lt;br/&gt;String phoneNum = request.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;phoneNum&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; != phoneNum &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(phoneNum)) {&lt;br/&gt;ApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.getServletContext());&lt;br/&gt;mobileServer = (MobileInterface) context.getBean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mobileServer&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;String result = mobileServer.queryMobile(phoneNum);&lt;br/&gt;request.setAttribute(result, &lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;request.getRequestDispatcher(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/jsp/queryMobile.jsp&quot;&lt;/span&gt;).forward(request, response);;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException &lt;/span&gt;{&lt;br/&gt;doGet(request, response);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第七步：配置spring配置文件，applicationContext.xml&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;3&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxws&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:jaxrs&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/jaxrs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:cxf&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cxf.apache.org/core&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd&lt;br/&gt;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&lt;br/&gt;http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;                     &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/mobile&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;serviceClass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.mobile.server.MobileInterface&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mobileServer&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:serviceBean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mobileServer&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.mobile.server.MobileInterfaceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mobileClient&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mobileClient&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;jaxws:client&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mobileClient&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;address&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;serviceClass&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.mobile.MobileCodeWSSoap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;jaxws:client&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第八步：配置web.xml&lt;br/&gt;示例代码如下：&lt;/p&gt;
&lt;pre readability=&quot;9&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;12&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;web-app&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WebApp_ID&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;display-name&lt;/span&gt;&amp;gt;&lt;/span&gt;day46_09_Webservice_eg_mobile&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;display-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CXF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CXF&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/webservice/*&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;mobileServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;com.itheima.mobile.server.servlet.MobileServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;mobileServlet&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;*.action&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.html&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.htm&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;default.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;welcome-file-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;web-app&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　第九步：将项目部署到tomcat下，启动tomcat&lt;br/&gt;　　第十步：测试&lt;br/&gt;　　测试服务是否发布成功，访问地址：http://127.0.0.1:8080/day46_09_Webservice_eg_mobile/webservice，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_32.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　点击WSDL地址：http://127.0.0.1:8080/day46_09_Webservice_eg_mobile/webservice/mobile?wsdl，查看上下文，没有问题。如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_33.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　测试查询界面，查询网址：http://127.0.0.1:8080/day46_09_Webservice_eg_mobile/queryMobile.action，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_34.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　查询结果截图如下：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_35.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　查询结果截图如下：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pfdy1sgop.bkt.clouddn.com/day46_36.png&quot; alt=&quot;&quot;/&gt;</description>
<pubDate>Sun, 23 Sep 2018 06:38:00 +0000</pubDate>
<dc:creator>黑泽明军</dc:creator>
<og:description>一、回顾昨天所学 什么是webservice？ 什么是远程调用技术？答：系统和系统之间的调用，从远程系统当中获取业务数据。 Webservice是web服务，他是用http传输SOAP协议数据的一种远</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/9692658.html</dc:identifier>
</item>
<item>
<title>免费证书申请——Let's Encrypt的申请与应用（IIS，Tomcat） - GISer_Allan</title>
<link>http://www.cnblogs.com/hao-zhang/p/9692633.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hao-zhang/p/9692633.html</guid>
<description>[unable to retrieve full-text content]环境 Windows Server 2008 R2 Tomcat 8.5.31 JDK8 利用IIS+letsencrypt win simple.V1.9.1申请免费SSL证书 1. 新建一个IIS空网站test,并指向域名test.osgis.cn 2. 下载解压 &quot;letsencrypt wi</description>
<pubDate>Sun, 23 Sep 2018 06:25:00 +0000</pubDate>
<dc:creator>GISer_Allan</dc:creator>
<og:description>环境 Windows Server 2008 R2 Tomcat 8.5.31 JDK8 利用IIS+letsencrypt win simple.V1.9.1申请免费SSL证书 1. 新建一个IIS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hao-zhang/p/9692633.html</dc:identifier>
</item>
<item>
<title>性能测试之siege - 三十一||</title>
<link>http://www.cnblogs.com/sanshiyi/p/9692616.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sanshiyi/p/9692616.html</guid>
<description>&lt;h2&gt;一、siege介绍&lt;/h2&gt;
&lt;p&gt;Siege是一个压力测试和评测工具，设计用于WEB开发这评估应用在压力下的承受能力：可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。 &lt;/p&gt;
&lt;p&gt;Siege是一个多线程http&lt;a href=&quot;https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;负载测试&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;基准测试&lt;/a&gt;工具。&lt;/p&gt;
&lt;p&gt;Siege：这是&lt;a href=&quot;https://baike.baidu.com/item/Linux%E7%B3%BB%E7%BB%9F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Linux系统&lt;/a&gt;下的一个测试工具，完全使用C语言实现，可以对HTTP和&lt;a href=&quot;https://baike.baidu.com/item/FTP%E6%9C%8D%E5%8A%A1%E5%99%A8&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;FTP服务器&lt;/a&gt;进行负载和&lt;a href=&quot;https://baike.baidu.com/item/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;性能测试&lt;/a&gt;。通过使用Siege 提供的功能，可以很容易的制定&lt;a href=&quot;https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;测试计划&lt;/a&gt;：包括规定使用&lt;a href=&quot;https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91%E7%94%A8%E6%88%B7%E6%95%B0&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;并发用户数&lt;/a&gt;、重复数量，从而可以模拟在服务器、网络或者其它对象上附加负载以测试他们提供服务的受压能力，方便的测试服务器的性能。最后，利用Siege提供的测试结果来分析性能指标或者分析他们提供的服务在不同负载条件下的性能情况，分析测试结果，找出影响系统性能的瓶颈。&lt;/p&gt;
&lt;h2&gt;二、siege安装&lt;/h2&gt;
&lt;p&gt;本次环境基于Ubuntu系统root用户&lt;/p&gt;
&lt;p&gt;使用  apt-get siege  下载安装siege。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387286/201809/1387286-20180923141511064-536630782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用  siege -h  检测是否安装成功（出现如图界面则安装成功）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387286/201809/1387286-20180923141525161-813288634.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三、siege的简单使用&lt;/h2&gt;
&lt;p&gt;-R: 指定用特定的siege配置文件来运行&lt;/p&gt;
&lt;p&gt;-c: 模拟有Ｎ个用户在并发访问（ps:如果WEB服务器为apache的话，请不要将并发连接数设置超过200）&lt;/p&gt;
&lt;p&gt;-r:  重复测试运行Ｎ次&lt;/p&gt;
&lt;p&gt;-i:  随机访问-f指定的url.txt中的url列表项，以此模拟真实的访问情况(随机性)&lt;/p&gt;
&lt;p&gt;-b: 进行压力测试，不进行延时&lt;/p&gt;
&lt;p&gt;-Ａ: 指定访问的user-agent&lt;/p&gt;
&lt;p&gt;-f: 任务的URL列表&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;实战：&lt;/p&gt;
&lt;p&gt;目标url：http://192.168.1.126/ecshop/&lt;/p&gt;
&lt;p&gt;50个用户在并发访问&lt;/p&gt;
&lt;p&gt;重复运行2次&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387286/201809/1387286-20180923141542611-2064088791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果分析：&lt;/p&gt;
&lt;p&gt;Transactions:          完成了总的点击数&lt;/p&gt;
&lt;p&gt;Availability:              事物的成功率&lt;/p&gt;
&lt;p&gt;Elapsed time:          测试使用时间&lt;/p&gt;
&lt;p&gt;Data transferred:     每个用户的传输数据量&lt;/p&gt;
&lt;p&gt;Response time:       平均响应时间&lt;/p&gt;
&lt;p&gt;Transaction rate:      服务器每秒处理事务的平均数&lt;/p&gt;
&lt;p&gt;Throughput:             吞吐量&lt;/p&gt;
&lt;p&gt;Concurrency:          实际最高并发连接数&lt;/p&gt;
&lt;p&gt;Successful transactions:      成功事物数&lt;/p&gt;
&lt;p&gt;Failed transactions:             失败事物数&lt;/p&gt;
&lt;p&gt;Longest transaction:           最长的事务处理时间&lt;/p&gt;
&lt;p&gt;Shortest transaction:          最短的事务处理时间&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 06:17:00 +0000</pubDate>
<dc:creator>三十一||</dc:creator>
<og:description>一、siege介绍 Siege是一个压力测试和评测工具，设计用于WEB开发这评估应用在压力下的承受能力：可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sanshiyi/p/9692616.html</dc:identifier>
</item>
</channel>
</rss>