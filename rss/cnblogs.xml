<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>.Net Core开发日志——从搭建开发环境开始 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9260805.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9260805.html</guid>
<description>&lt;p&gt;.Net Core自2016年推出1.0版本开始，到目前已是2.1版本，在其roadmap计划里明年更会推出3.0版本，发展不可不谓之迅捷。不少公司在经过一个谨慎的观望期后，也逐步开始将系统升级至最新的.Net Core平台，所以现在开始进行.Net Core开发可谓正当其时。&lt;/p&gt;
&lt;p&gt;因为.Net Core支持Windows系统以外的Linux与Mac系统，在选择开发环境时，并不需要局限在原有的Windows平台，这里我选用了Mac平台。&lt;/p&gt;
&lt;p&gt;开发硬件设备是一台14年款的Apple Macbook Air，操作系统为macOS Sierra。&lt;/p&gt;
&lt;p&gt;开发工具没有使用强大的Visual Studio IDE，一方面是硬件设备性能不足的缘故，另一方面也是想测试下另一款编辑器Visual Studio Code是否同样可以完成大部分的开发工作。&lt;/p&gt;
&lt;p&gt;搭建开发环境的第一步从安装.Net Core的SDK开始。可以自微软的官方网站找到你想要的安装包：&lt;a href=&quot;https://www.microsoft.com/net/download/macos&quot;&gt;SDK&lt;/a&gt;，当前版本为v2.1.301。&lt;/p&gt;
&lt;p&gt;完成安装后在命令行窗口(我用的是iTerm)执行&lt;code&gt;dotnet --version&lt;/code&gt;检验是否安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703231126565-1459740020.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着是下载并安装Visual Studio Code编辑器，&lt;a href=&quot;https://code.visualstudio.com/Download&quot;&gt;VSC&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;完成这两步后，便可以开始写第一个程序了。&lt;/p&gt;
&lt;p&gt;在命令行窗口执行&lt;code&gt;dotnet new console -o helloApp&lt;/code&gt;，然后用Visual Studio Code(以下简称VSC)打开新建的helloApp文件夹。基础的文件与文件夹已经通过上述命令帮你完成构建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703224107986-1263149006.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Program.cs文件，会发现在VSC的右下角推荐你安装C#的扩展包，请直接点击Install按钮，这是你在开发C#程序时所必要的扩展包。&lt;/p&gt;
&lt;p&gt;所有VSC的扩展包在完成安装后都需要重新加载VSC才会生效，所以请再点击Reload按钮。&lt;/p&gt;
&lt;p&gt;重新加载后，右下角处又会出现新的提示框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703225021331-1902961471.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击Yes，会自动生成一个新的.vscode文件夹，其中的文件很重要，是编译与调试相关的配置。&lt;/p&gt;
&lt;p&gt;至此，又一个Hello World程序降临于世。&lt;/p&gt;
&lt;p&gt;想要运行这行程序也只需一条极简单的命令，你可以直接在VSC中通过Ctrl + ~快捷键调出命令行窗口，输入&lt;code&gt;dotnet run&lt;/code&gt;后回车即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180703225837499-258533418.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 15:14:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9260805.html</dc:identifier>
</item>
<item>
<title>Apollo 4 客户端 SDK 设计 - 莫那-鲁道</title>
<link>http://www.cnblogs.com/stateis0/p/9261088.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stateis0/p/9261088.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前聊了客户端的一些功能，例如融入 Spring， @value 注解的自动刷新实现，长轮询等，这次从客户端的整体设计来聊聊。&lt;/p&gt;
&lt;h2 id=&quot;设计&quot;&gt;设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-d5a191546f35ad20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是 client 项目的包结构。&lt;/p&gt;
&lt;p&gt;其中，核心包就是 internals 包，包含了客户端的主要功能逻辑。主要有以下功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取 ConfigService 服务的远程配置。&lt;/li&gt;
&lt;li&gt;长轮询/定时轮询 ConfigService。&lt;/li&gt;
&lt;li&gt;监听机制——更新后，立即通知应用程序。&lt;/li&gt;
&lt;li&gt;兼容 Spring 各个版本（这个是在 spring 包中，但我认为也算重要功能 &lt;code&gt;^_^&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;首先说第一个功能获取-configservice-服务的远程配置&quot;&gt;首先说第一个功能：&lt;strong&gt;获取 ConfigService 服务的远程配置&lt;/strong&gt;：&lt;/h5&gt;
&lt;p&gt;实现此功能的类为：RemoteConfigRepository。该类有以下几个重要的方法：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-96df10239dd861a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;构造方法：该方法里包含了很多初始化的过程，虽然我觉得应该放在 init 之类的方法中&lt;/li&gt;
&lt;li&gt;getConfig() 根据 namespace 获取配置&lt;/li&gt;
&lt;li&gt;onLongPollNotified() 当收到长连接通知时触发响应&lt;/li&gt;
&lt;li&gt;addChangeListener() 添加监听器&lt;/li&gt;
&lt;li&gt;removeChangeListener() 删除监听器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;注意：setUpstreamRepository 是空的。看注释，是个 fallback 设计。&lt;/p&gt;
&lt;p&gt;其中，getConfig 方法是获取这个 namespace 的配置，返回的是 Properties 对象（就是个 Map）。然后，从这个对象中取出对应的值，就 ok 了。&lt;/p&gt;
&lt;h5 id=&quot;第二个功能长轮询定时轮询-configservice&quot;&gt;第二个功能：长轮询/定时轮询 ConfigService。&lt;/h5&gt;
&lt;p&gt;这个功能的主要实现类是：RemoteConfigLongPollService。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-9c7d5aa0ae07d75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该类主要的方法有 2 个，构造方法和 submit 方法。注意，这个类是单例的（由 google 的 inject 实现）。&lt;br/&gt;构造方法中，做了很多的初始化工作。而 submit 方法则是开启长轮询，轮询的方式是：携带 AppId 去请求 ConfigServcie，得到所有的 namespace 更新通知，然后通知对应的 RemoteConfigRepository 去请求真正的数据。大概的设计如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-c07a2f5cf49b663c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每一个 namespace 在一个应用中，都对应一个 RemoteConfigRepository，所有的 RemoteConfigRepository 都归属 RemoteConfigLongPollService 长轮询服务管理，当长轮询得到通知，便通知对应的 RemoteConfigRepository 进行服务请求以便执行更新本地缓存和通知监听器操作。&lt;/p&gt;
&lt;p&gt;通知，作为 fallback 方案—— 定时轮询也充当了长轮询失效的最后屏障。&lt;/p&gt;
&lt;h5 id=&quot;第三个功能监听机制更新后立即通知应用程序&quot;&gt;第三个功能：监听机制——更新后，立即通知应用程序。&lt;/h5&gt;
&lt;p&gt;从上图可以看出，轮询之后，如果有更新响应，则立即通知 RemoteConfigRepository，然后，RemoteConfigRepository 再次从配置中心拉取配置，从而更新本地 Config 对象的内容。&lt;/p&gt;
&lt;p&gt;更新完毕后，则通知 Config 的“配置变化监听器”。也就是 ConfigChangeListener 的 onChange 方法。这个监听器是监听 Config 对象的。&lt;/p&gt;
&lt;p&gt;实际上，每个 Config 对象在初始化的时候，都会往 RemoteConfigRepository 对象里添加一个监听器，实际上就是添加自己。&lt;/p&gt;
&lt;p&gt;当 RemoteConfigRepository 发生变化的时候，触发 onRepositoryChange 方法，onRepositoryChange 又会触发 onChange 方法。大概的设计图就是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-4423ed2d7c5e51a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，紫色的 DefaultConfig 是核心，他依赖了 RemoteConfigRepository， 而 RemoteConfigRepository 反过来组合了他，同时 DefaultConfig 也聚合了用户实现的监听器 ConfigChangeListener 的子类。&lt;/p&gt;
&lt;p&gt;那么，当远程 Repository 变化的时候，就可以通知 Client 的缓存 Config 对象，而 Config 缓存对象变化的时候，就可以通知用户的程序（监听器）。实现整体的监听机制。&lt;/p&gt;
&lt;p&gt;总的来说，就是通过两层监听机制来实现的。其中 DefaultConfig 实现了两个角色，既是观察者，也是被观察者。&lt;/p&gt;
&lt;h5 id=&quot;第四个功能兼容-spring-各个版本&quot;&gt;第四个功能：兼容 Spring 各个版本&lt;/h5&gt;
&lt;p&gt;首先，如果没有这个功能，Apollo 也会能够正常运行的，不过，你只能使用 API 的方式，不能使用注解，标签等 Spring 应用熟悉的方式。&lt;/p&gt;
&lt;p&gt;如果想用 Spring 的方式使用 Apollo ，那么就得遵守 Spring 的约定，实现 Spring 的接口，将自己融入到 Spring 中。&lt;/p&gt;
&lt;p&gt;其中，主要解决的问题就是，如何在 Spring 初始化的时候，Apollo 也初始化？这点我们在之前的文章中说了，也就是 Spring 的 3 个入口。在这些入口里初始化。&lt;/p&gt;
&lt;p&gt;另外，将配置放置到 Spring 的环境中，也是一个工作，因为，如果不放到环境中，Spring 初始时需要的那些参数就无法取到了。&lt;/p&gt;
&lt;p&gt;所以，要将 Config 对象包装成 Spring 熟悉的 ConfigPropertySource 对象，算是一个适配器模式吧。&lt;/p&gt;
&lt;p&gt;在初始化配置的时候，会从远程配置中心拿到配置，包装成 ConfigPropertySource 对象，再利用 CompositePropertySource 组合属性配置（多个 namespace）聚合所有 Config 对象。&lt;/p&gt;
&lt;p&gt;CompositePropertySource 最后会添加到 ConfigurableEnvironment 环境对象中，spring 就可以从这个对象 中取出配置进行初始化。&lt;/p&gt;
&lt;p&gt;并且，在 SpringBoot 环境下，Apollo 可以优先加载指定的配置，这些配置在 SpringContext 容器初始化的时候就开始被注入到环境中，这样就可以将一些系统初始化的配置也放到配置中心了，尽量让本地少一点配置。这个功能的启用需要参数：&lt;code&gt;apollo.bootstrap.enabled=true&lt;/code&gt;，配置的namespace 则是 &lt;code&gt;apollo.bootstrap.namespaces = XXX&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;并且，该配置的优先级是最高的，Apollo 将这个配置放在了 Spring 环境对象中的第一个位置，当循环获取配置的时候，优先获取这个配置。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;好了，关于 Apollo 客户端的设计，大概就是这些，总体来讲比较简单， 4 个功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取远程配置&lt;/li&gt;
&lt;li&gt;长轮询/定时轮询&lt;/li&gt;
&lt;li&gt;配置更新监听机制。&lt;/li&gt;
&lt;li&gt;兼容 Spring。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;抛出一个问题：&lt;/p&gt;
&lt;p&gt;Apollo 似乎没有给用户留扩展接口？如果能像 Spring，Mybatis 一样，留一个或者多个切面给用户，让用户能够在加载配置的时候，做一些事情啥的，或许更好。&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 14:55:00 +0000</pubDate>
<dc:creator>莫那-鲁道</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stateis0/p/9261088.html</dc:identifier>
</item>
<item>
<title>js函数的节流与防抖 - 阿龙丶along</title>
<link>http://www.cnblogs.com/alongup/p/9261076.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alongup/p/9261076.html</guid>
<description>&lt;h3&gt;一、防抖&amp;amp;节流&lt;/h3&gt;
&lt;p&gt;　　在前端开发中有一部分用户行为会频繁的触发事件执行，而对于DOM的操作、资源加载等耗费性能的处理，很可能会导致界面卡顿，甚至浏览器奔溃。函数的节流与防抖就是为了解决类似需求而产生的。&lt;/p&gt;
&lt;p&gt;　　1）节流&lt;/p&gt;
&lt;p&gt;　　　　概念：函数的节流就是预定一个函数只有在大于等于执行周期时才会执行，周期内调用不会执行。好像一滴水只有积攒到一定重量才会落下一样。&lt;/p&gt;
&lt;p&gt;　　　　场景：窗口调整(resize)、页面滚动(scroll)、抢购疯狂点击(movedown)&lt;/p&gt;
&lt;p&gt;　　　　故事：阿里巴巴月饼门事件，中秋来临，阿里特意做了一个活动，抢月饼，但是每个人只能抢购一盒，有五位工程师写了js脚本，类似于12306的抢票软件，直接刷了一百多盒月饼，结果被开除了四个.其实对于他们来说并不是什么坏事，不知道有多少公司对他们敞开大门~那么如何解决这种问题呢，就用到了函数的节流&lt;/p&gt;
&lt;p&gt;　　1.1）案例(限时抢购)&lt;/p&gt;
&lt;p&gt;　　　　我写了这样一个简单的事件，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;button id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;抢购&amp;lt;/button&amp;gt;
&lt;span&gt;2&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/div&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;JS:&lt;br/&gt;1&lt;/span&gt; let oBtn=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; let oBox=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; oBtn.onclick=&lt;span&gt;function(){
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 　　oBox.innerText=parseInt(oBox.innerText)+&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; }  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　当我点击时，每点击一次，数量增加一，点击越快，增加越快，效果图如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703213753629-1819354067.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1.2）脚本攻击：这种简单的数量增加很容易遭到脚本的攻击，从而造成很大的损失。代码如下&lt;/p&gt;
&lt;p&gt;　　　　for(let i=0;i&amp;lt;100;i++){oBtn.click()}&lt;/p&gt;
&lt;p&gt;　　　　效果图如下：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703214710675-1781025359.gif&quot; alt=&quot;&quot; width=&quot;959&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1.3）如何解决(节流)&lt;/p&gt;
&lt;p&gt;　　　　上面并不是我们想要的结果，我们想要的是在规定时间内只能执行一次，比如1秒内只能执行一次.无论你点击多少次.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;button id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;抢购&amp;lt;/button&amp;gt;
&lt;span&gt;2&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; JS:&lt;br/&gt;1&lt;/span&gt; let oBtn=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     let oBox=document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        handle:buy函数
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        wait:规定在一秒钟内只能执行一次
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    function throttle (handle, wait) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         let lastTime = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; function (e) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             let nowTime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (nowTime - lastTime &amp;gt;&lt;span&gt; wait) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                handle();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 lastTime =&lt;span&gt; nowTime;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    function buy(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         oBox.innerText = parseInt(oBox.innerText)+&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     oBtn.onclick = throttle(buy, &lt;span&gt;1000&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703220646539-1975120691.gif&quot; alt=&quot;&quot; width=&quot;890&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　这样不仅可以达到想要的效果，还可以阻止恶意脚本的攻击.&lt;/p&gt;

&lt;p&gt;　　2.防抖&lt;/p&gt;
&lt;p&gt;　　　　概念：函数防抖就是函数需要频繁触发情况时，只有足够空闲的时候，才会执行一次。好像公交司机会等人都上车后才会开车一样.&lt;/p&gt;
&lt;p&gt;　　　　场景：实时搜索(keyup)、拖拽(mousemove)&lt;/p&gt;
&lt;p&gt;　　　　2.1）.案例(实时搜索)&lt;/p&gt;
&lt;p&gt;　　　　　　在之前看一下这个过程图，百度的实时搜索.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703221815968-1080312849.gif&quot; alt=&quot;&quot; width=&quot;638&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　在搜索nba的时候，并不是每输入一个字符，都会想服务器请求一次，而是在输入完成后发出一次请求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;input type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;JS:&lt;br/&gt;1&lt;/span&gt; let oIpt = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;function ajax () {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; oIpt.oninput = ajax;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703222614380-1561056731.gif&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;238&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　用户无论输入多快，都会发出请求，从而去加载服务器资源，对性能有很大的影响.&lt;/p&gt;
&lt;p&gt;　　　　2.3)解决(防抖)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let oIpt = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ipt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     let time = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    function debounce (handle, delay) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         let time = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; function () {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             let self = &lt;span&gt;this&lt;/span&gt;,arg =&lt;span&gt; arguments;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            clearTimeout(time);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             time =&lt;span&gt; setTimeout(function () {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                handle.apply(self,arg);　　//this绑定
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            },delay)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    function ajax (e) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         console.log(e,&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     oIpt.oninput = debounce(ajax, &lt;span&gt;1000&lt;/span&gt;)  //1s后发出请求
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　效果图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201807/1237383-20180703224816375-2005278446.gif&quot; alt=&quot;&quot; width=&quot;1020&quot; height=&quot;309&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这种方法可以解决多次请求的问题，对性能有很大的提高。&lt;/p&gt;
&lt;p&gt;　　喜欢的小伙伴点个关注哦~我会再接再厉的。&lt;/p&gt;




</description>
<pubDate>Tue, 03 Jul 2018 14:50:00 +0000</pubDate>
<dc:creator>阿龙丶along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alongup/p/9261076.html</dc:identifier>
</item>
<item>
<title>10分钟教你用Python做个打飞机小游戏超详细教程 - 短短的路走走停停</title>
<link>http://www.cnblogs.com/infroad/p/9260954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/infroad/p/9260954.html</guid>
<description>&lt;img title=&quot;微信公众号&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-80101f05ccc77525.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;微信公众号&quot;/&gt;&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;我知道你们一定想先看效果如何&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-7330886dc364bc0c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;/&gt;&lt;img title=&quot;image&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-61de76147b2067ee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;&lt;h3 id=&quot;h00&quot;&gt;&lt;span&gt;00 目录&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;整体框架&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;开始之前-精灵类Sprite&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;子弹类class Bullet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;玩家飞机类class Player&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;敌机类class Enemy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;游戏主体循环以及帧率设置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;让子弹飞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;刷出敌机 打怪&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;把飞机敌机子弹都画出来&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;处理键盘事件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分数显示 和 GameOver&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最终代码&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h01&quot;&gt;&lt;span&gt;01 前言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这次还是用python的pygame库来做的游戏。关于这个库的内容，读者可以上网了解一下。本文只讲解用到的知识。代码参考自网上，自己也做了一点代码简化。尽量把最核心的方面用最简单的方式呈现给大家，让大家尽快掌握这个游戏的框架。至于那些华丽的功能，大家在弄懂了核心知识以后，再去添加也是非常easy的。&lt;/p&gt;
&lt;h3 id=&quot;h02&quot;&gt;&lt;span&gt;02 整体框架&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个游戏设计用到了面向对象的编程思想。&lt;br/&gt;游戏主体划分为三个主要的类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;子弹类class Bullet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;玩家类class Player&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;敌机类class Enemy&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在屏幕上可见的也就是这三个东西了。自己的飞机、敌人的飞机、子弹。因此整个游戏的核心就是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;把这三个东西的图像呈现在屏幕上。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;判断和处理子弹撞击敌机和敌机撞击玩家这两种情况。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们会展开为大家一一讲解。&lt;/p&gt;
&lt;h3 id=&quot;h03sprite&quot;&gt;&lt;span&gt;03 开始之前-精灵类Sprite&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在下面的代码中，你们会大量见到这个pygame.sprite模块。这里就给大家介绍一下。“sprite”，中文翻译“精灵”，在游戏动画一般是指一个独立运动的画面元素，在pygame中，就可以是一个带有图像（Surface）和大小位置（Rect）的对象。 简单来说是一个会动图片。它的两个成员变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;self.image=要显示图片的Surface&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;self.rect = 显示Surface的区域&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于self.rect，常用的设置rect的方法：self.rect = self.image.get_rect()。然后设定self.rect.topleft=(0,0)来设定左上角的位置，从而设定这个精灵在屏幕上的显示位置。精灵特别适合用在OO语言中，比如Python。&lt;/p&gt;
&lt;p&gt;pygame.sprite.Sprite是pygame精灵的基类，一般来说，你总是需要写一个自己的精灵类继承一下它然后加入自己的代码。&lt;/p&gt;
&lt;p&gt;关于此类的其他函数，咱们用到的时候会详细跟大家说的。&lt;/p&gt;
&lt;h3 id=&quot;h04classbullet&quot;&gt;&lt;span&gt;04 子弹类class Bullet&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;先来看代码吧。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        self.image = bullet_img&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;        self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        self.rect.midbottom = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;        self.rect.top -= self.speed&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;子弹类继承于pygame.sprite.Sprite， 成员主要是子弹的图片对象和子弹刷出来的位置，当然，还有移动速度。一个方法就是移动，从发出位置直线往屏幕上方移动。&lt;/p&gt;
&lt;h3 id=&quot;h05classplayer&quot;&gt;&lt;span&gt;05 玩家飞机类class Player&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;老样子。先看代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, plane_img, player_rect, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        self.image = []                                 &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(len(player_rect)):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;            self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        self.rect = player_rect[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]                      &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;        self.rect.topleft = init_pos                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                  &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;        self.bullets = pygame.sprite.Group()            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;        self.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;                             &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;        bullet = Bullet(bullet_img, self.rect.midtop)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;        self.bullets.add(bullet)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;            self.rect.top = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;            self.rect.top -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveDown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;gt;= SCREEN_HEIGHT - self.rect.height:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            self.rect.top = SCREEN_HEIGHT - self.rect.height&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;            self.rect.top += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;            self.rect.left = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;            self.rect.left -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveRight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;gt;= SCREEN_WIDTH - self.rect.width:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;            self.rect.left = SCREEN_WIDTH - self.rect.width&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;            self.rect.left += self.speed&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;老样子，成员变量主要还是那几个。图像对象以及矩形参数和刷出位置，当然还会有移动速度和子弹集合（用来保存飞机射出的子弹）。方法的话就是上下左右移动了，不过需要做好边界判断。这个直接看代码就能理解了。&lt;/p&gt;
&lt;h3 id=&quot;h06classenemy&quot;&gt;&lt;span&gt;06 敌机类class Enemy&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;好吧，先上代码伺候。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Enemy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, enemy_img, enemy_down_imgs, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;       pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;       self.image = enemy_img   &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;       self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;       self.rect.topleft = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;       self.down_imgs = enemy_down_imgs &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;       self.speed = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;        self.rect.top += self.speed&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的时候，该类保存了两个图像对象，一个是正常情况下的敌机图像。一个是爆炸的敌机图像。以便在撞击时能把撞击效果显示出来。一个方法就是和子弹差不多的移动了，不过它是从屏幕上方往底下移动的而已。然后刷出位置的话，后面我们会用一个随机函数生成的。&lt;/p&gt;
&lt;h3 id=&quot;h07&quot;&gt;&lt;span&gt;07 游戏主体循环以及帧率设置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;游戏主体的话，我们直接开一个死循环来不断刷新显示上面介绍的三个对象。代码设计如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;clock = pygame.time.Clock()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;running = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; running:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    clock.tick(&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    ……游戏运行部分&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于pygame.time.Clock()，贪吃蛇那篇已经介绍过了。就是用来控制游戏帧率的。只要我们的玩家飞机没有被敌机撞到，即属于存活状态时。running将一直为真。&lt;/p&gt;
&lt;h3 id=&quot;h08&quot;&gt;&lt;span&gt;08 让子弹飞&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在running循环里面，我们要做的是不断自动刷出子弹。当然，子弹是从玩家飞机上射出来的。&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;首先是发射子弹&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency % &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        player.shoot(bullet_img)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;    shoot_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;9&lt;/span&gt;        shoot_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;shoot_frequency变量的作用就是控制子弹发射的频率，它控制在running每循环15次发射一个子弹。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接着是子弹移动&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bullet &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; player.bullets:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;bullet.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bullet.rect.bottom &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    player.bullets.remove(bullet)  &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;子弹移动的话，running每循环一次，就move一下。不过要注意当子弹移动出屏幕后删除。不然可能会爆电脑内存。&lt;/p&gt;
&lt;h3 id=&quot;h09&quot;&gt;&lt;span&gt;09 刷出敌机 打怪&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;和子弹类似的，在running循环里，随机刷出敌机。&lt;/p&gt;
&lt;ul readability=&quot;9&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;先是刷怪&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency % &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    enemy1_pos = [random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SCREEN_WIDTH - enemy1_rect.width), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    enemy1 = Enemy(enemy1_img, enemy1_down_imgs, enemy1_pos)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    enemies1.add(enemy1)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;enemy_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;9&lt;/span&gt;    enemy_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;enemy_frequency变量的作用同样是控制刷怪的频率。running每循环50次就刷一个怪出来，位置是randint函数随机生成的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;接着让怪移动&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    enemy.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy.rect.top &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        enemies1.remove(enemy)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;移动的话也很简单，每running循环一次就move一次就行。但是还是注意。敌机移出屏幕后要删除，避免爆内存啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;然后是碰撞检测&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pygame.sprite.collide_circle(enemy, player):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    enemies_down.add(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    enemies1.remove(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    player.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里介绍一下pygame.sprite.collide_circle，这个函数的作用是判断两个精灵对象有没有碰撞。如果敌机和玩家飞机装上了，那很明显GameOver了。直接把running循环给break就行了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h10&quot;&gt;&lt;span&gt;10 把飞机敌机子弹都画出来&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;前面说了这么多，最终我们还是要把这三个主要的对象画到屏幕上显示出来，然后通过每一次running循环更新它们的状态（正常？撞击？爆炸？）。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;enemies1_down = pygame.sprite.groupcollide(enemies1, player.bullets, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    enemies_down.add(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;screen.fill(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;screen.blit(background, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;    screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;    screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;    running = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;    enemies_down.remove(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;    score += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;    screen.blit(enemy_down.down_imgs, enemy_down.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;    player.bullets.draw(screen)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    enemies1.draw(screen)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意的是，玩家飞机和敌机都有两种状态，一种是正常状态，另外一种是爆炸状态。在画之前要判断清楚再下手。然后再介绍一下pygame.sprite.groupcollide函数，这个函数是判断两个精灵组里面的精灵有没有相互碰撞的。它会把A组的精灵逐个和B组的精灵进行比较判断。&lt;/p&gt;
&lt;h3 id=&quot;h11&quot;&gt;&lt;span&gt;11 处理键盘事件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;键盘事件的处理是十分重要的，我们通过键盘移动飞机，更新飞机的位置。最终再画出来。代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        pygame.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        exit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;key_pressed = pygame.key.get_pressed()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_w] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_UP]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;    player.moveUp()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_s] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_DOWN]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;    player.moveDown()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_a] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_LEFT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;    player.moveLeft()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_d] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_RIGHT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;    player.moveRight()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h12gameover&quot;&gt;&lt;span&gt;12 分数显示 和 GameOver&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;对于分数显示，其实很简单，用一个font对象，在render渲染到屏幕上就可以了。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;score_font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;score_text = score_font.render(&lt;span class=&quot;hljs-string&quot;&gt;'score: '&lt;/span&gt;+str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;text_rect = score_text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;text_rect.topleft = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;screen.blit(score_text, text_rect)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不过，需要注意的是，最后我们还要将总得分在游戏结束的时候写出来。然后游戏结束的时候，我们还要把GameOver那张图片也blit出来。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;text = font.render(&lt;span class=&quot;hljs-string&quot;&gt;'Final Score: '&lt;/span&gt;+ str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;text_rect = text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;text_rect.centerx = screen.get_rect().centerx&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;text_rect.centery = screen.get_rect().centery + &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;screen.blit(game_over, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;screen.blit(text, text_rect)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h13&quot;&gt;&lt;span&gt;13 最终代码&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;讲了这么多，相信大家都明白了。最后再贴一个完整的代码和游戏所需的资源吧。&lt;br/&gt;顺便附上代码和资源下载地址：&lt;br/&gt;&lt;strong&gt;链接: https://pan.baidu.com/s/1rxE2XtO2T1yyh7WXn_7Vug 密码: w9my&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pygame&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sys &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; exit&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pygame.locals &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  5&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  8&lt;/span&gt;SCREEN_WIDTH = &lt;span class=&quot;hljs-number&quot;&gt;480&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  9&lt;/span&gt;SCREEN_HEIGHT = &lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 12&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 13&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 14&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 15&lt;/span&gt;        self.image = bullet_img&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 16&lt;/span&gt;        self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 17&lt;/span&gt;        self.rect.midbottom = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 18&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 20&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 21&lt;/span&gt;        self.rect.top -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 24&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 25&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, plane_img, player_rect, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 26&lt;/span&gt;        pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 27&lt;/span&gt;        self.image = []                                 &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 28&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(len(player_rect)):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 29&lt;/span&gt;            self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 30&lt;/span&gt;        self.rect = player_rect[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]                      &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 31&lt;/span&gt;        self.rect.topleft = init_pos                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 32&lt;/span&gt;        self.speed = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                  &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 33&lt;/span&gt;        self.bullets = pygame.sprite.Group()            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 34&lt;/span&gt;        self.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;                             &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 36&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 37&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, bullet_img)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 38&lt;/span&gt;        bullet = Bullet(bullet_img, self.rect.midtop)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 39&lt;/span&gt;        self.bullets.add(bullet)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 41&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 42&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 43&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 44&lt;/span&gt;            self.rect.top = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 45&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 46&lt;/span&gt;            self.rect.top -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 48&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 49&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveDown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 50&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.top &amp;gt;= SCREEN_HEIGHT - self.rect.height:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 51&lt;/span&gt;            self.rect.top = SCREEN_HEIGHT - self.rect.height&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 52&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 53&lt;/span&gt;            self.rect.top += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 55&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 56&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 57&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 58&lt;/span&gt;            self.rect.left = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 59&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 60&lt;/span&gt;            self.rect.left -= self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 62&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 63&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;moveRight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 64&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.rect.left &amp;gt;= SCREEN_WIDTH - self.rect.width:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 65&lt;/span&gt;            self.rect.left = SCREEN_WIDTH - self.rect.width&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 66&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 67&lt;/span&gt;            self.rect.left += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 70&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Enemy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(pygame.sprite.Sprite)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 71&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self, enemy_img, enemy_down_imgs, init_pos)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 72&lt;/span&gt;       pygame.sprite.Sprite.__init__(self)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 73&lt;/span&gt;       self.image = enemy_img&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 74&lt;/span&gt;       self.rect = self.image.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 75&lt;/span&gt;       self.rect.topleft = init_pos&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 76&lt;/span&gt;       self.down_imgs = enemy_down_imgs&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 77&lt;/span&gt;       self.speed = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 79&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 80&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 81&lt;/span&gt;        self.rect.top += self.speed&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 84&lt;/span&gt;pygame.init()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 88&lt;/span&gt;screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 91&lt;/span&gt;pygame.display.set_caption(&lt;span class=&quot;hljs-string&quot;&gt;'Python打飞机大战'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 94&lt;/span&gt;background = pygame.image.load(&lt;span class=&quot;hljs-string&quot;&gt;'resources/image/background.png'&lt;/span&gt;).convert()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 95&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 96&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 97&lt;/span&gt;game_over = pygame.image.load(&lt;span class=&quot;hljs-string&quot;&gt;'resources/image/gameover.png'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 98&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 99&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;100&lt;/span&gt;plane_img = pygame.image.load(&lt;span class=&quot;hljs-string&quot;&gt;'resources/image/shoot.png'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;101&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;102&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;103&lt;/span&gt;player_rect = []&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;104&lt;/span&gt;player_rect.append(pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;102&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;))        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;105&lt;/span&gt;player_rect.append(pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;165&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;102&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;))     &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;106&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;107&lt;/span&gt;player_pos = [&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;108&lt;/span&gt;player = Player(plane_img, player_rect, player_pos)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;109&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;110&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;111&lt;/span&gt;bullet_rect = pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;1004&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;987&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;112&lt;/span&gt;bullet_img = plane_img.subsurface(bullet_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;113&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;114&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;115&lt;/span&gt;enemy1_rect = pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;534&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;612&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;116&lt;/span&gt;enemy1_img = plane_img.subsurface(enemy1_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;117&lt;/span&gt;enemy1_down_imgs = plane_img.subsurface(pygame.Rect(&lt;span class=&quot;hljs-number&quot;&gt;267&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;347&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;118&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;119&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;120&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;121&lt;/span&gt;enemies1 = pygame.sprite.Group()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;122&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;123&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;124&lt;/span&gt;enemies_down = pygame.sprite.Group()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;125&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;126&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;127&lt;/span&gt;shoot_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;128&lt;/span&gt;enemy_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;129&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;130&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;131&lt;/span&gt;score = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;132&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;133&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;134&lt;/span&gt;clock = pygame.time.Clock()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;135&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;136&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;137&lt;/span&gt;running = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;138&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;139&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; running:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;141&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;142&lt;/span&gt;    clock.tick(&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;143&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;144&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;145&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;146&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;147&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;148&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency % &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;149&lt;/span&gt;            player.shoot(bullet_img)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;150&lt;/span&gt;        shoot_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;151&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; shoot_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;152&lt;/span&gt;            shoot_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;153&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;154&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;155&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;156&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency % &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;157&lt;/span&gt;        enemy1_pos = [random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SCREEN_WIDTH - enemy1_rect.width), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;158&lt;/span&gt;        enemy1 = Enemy(enemy1_img, enemy1_down_imgs, enemy1_pos)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;159&lt;/span&gt;        enemies1.add(enemy1)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;160&lt;/span&gt;    enemy_frequency += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;161&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy_frequency &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;162&lt;/span&gt;        enemy_frequency = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;163&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;164&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; bullet &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; player.bullets:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;165&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;166&lt;/span&gt;        bullet.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;167&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;168&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bullet.rect.bottom &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;169&lt;/span&gt;            player.bullets.remove(bullet)   &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;170&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;171&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;172&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;173&lt;/span&gt;        enemy.move()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;174&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;175&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pygame.sprite.collide_circle(enemy, player):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;176&lt;/span&gt;            enemies_down.add(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;177&lt;/span&gt;            enemies1.remove(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;178&lt;/span&gt;            player.is_hit = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;179&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;180&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;181&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; enemy.rect.top &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;182&lt;/span&gt;            enemies1.remove(enemy)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;183&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;184&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;185&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;186&lt;/span&gt;    enemies1_down = pygame.sprite.groupcollide(enemies1, player.bullets, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;187&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies1_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;188&lt;/span&gt;        enemies_down.add(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;189&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;190&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;191&lt;/span&gt;    screen.fill(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;192&lt;/span&gt;    screen.blit(background, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;193&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;194&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;195&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; player.is_hit:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;196&lt;/span&gt;        screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;197&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;198&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;199&lt;/span&gt;        screen.blit(player.image[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], player.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;200&lt;/span&gt;        running = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;201&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;202&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;203&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; enemy_down &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; enemies_down:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;204&lt;/span&gt;        enemies_down.remove(enemy_down)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;205&lt;/span&gt;        score += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;206&lt;/span&gt;        screen.blit(enemy_down.down_imgs, enemy_down.rect) &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;207&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;208&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;209&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;210&lt;/span&gt;    player.bullets.draw(screen)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;211&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;212&lt;/span&gt;    enemies1.draw(screen)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;213&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;214&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;215&lt;/span&gt;    score_font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;216&lt;/span&gt;    score_text = score_font.render(&lt;span class=&quot;hljs-string&quot;&gt;'score: '&lt;/span&gt;+str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;217&lt;/span&gt;    text_rect = score_text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;218&lt;/span&gt;    text_rect.topleft = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;219&lt;/span&gt;    screen.blit(score_text, text_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;220&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;221&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;222&lt;/span&gt;    pygame.display.update()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;223&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;224&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;225&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;226&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;227&lt;/span&gt;            pygame.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;228&lt;/span&gt;            exit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;229&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;230&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;231&lt;/span&gt;    key_pressed = pygame.key.get_pressed()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;232&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;233&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;234&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_w] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_UP]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;235&lt;/span&gt;        player.moveUp()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;236&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_s] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_DOWN]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;237&lt;/span&gt;        player.moveDown()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;238&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_a] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_LEFT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;239&lt;/span&gt;        player.moveLeft()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;240&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key_pressed[K_d] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; key_pressed[K_RIGHT]:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;241&lt;/span&gt;        player.moveRight()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;242&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;243&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;244&lt;/span&gt;font = pygame.font.Font(&lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;245&lt;/span&gt;text = font.render(&lt;span class=&quot;hljs-string&quot;&gt;'Final Score: '&lt;/span&gt;+ str(score), &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;246&lt;/span&gt;text_rect = text.get_rect()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;247&lt;/span&gt;text_rect.centerx = screen.get_rect().centerx&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;248&lt;/span&gt;text_rect.centery = screen.get_rect().centery + &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;249&lt;/span&gt;screen.blit(game_over, (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;250&lt;/span&gt;screen.blit(text, text_rect)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;251&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;252&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;254&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; event &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pygame.event.get():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;255&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; event.type == pygame.QUIT:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;256&lt;/span&gt;            pygame.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;257&lt;/span&gt;            exit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;258&lt;/span&gt;    pygame.display.update()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 03 Jul 2018 14:15:00 +0000</pubDate>
<dc:creator>短短的路走走停停</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/infroad/p/9260954.html</dc:identifier>
</item>
<item>
<title>AC自动机学习笔记-1（怎么造一台AC自动机?） - sclbgw7</title>
<link>http://www.cnblogs.com/sclbgw7/p/9260756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sclbgw7/p/9260756.html</guid>
<description>&lt;p&gt;月更博主又来送温暖啦QwQ&lt;/p&gt;
&lt;p&gt;今天我们学习的算法是AC自动机。AC自动机是解决字符串多模匹配问题的利器，而且代码也十分好打=w=&lt;/p&gt;
&lt;p&gt;在这一篇博客里，我将讲解AC自动机是什么，以及怎么构建一个最朴素的AC自动机。（不知道为什么我写出来的AC自动机常数就是大得要命=。=）&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;前置知识&lt;/h2&gt;
&lt;p&gt;首先你一定要对Trie树以及KMP了如指掌，尤其是要明白KMP中失配数组(next或fail数组)的本质:利用已经匹配过的部分，跳过重复的匹配，达到快速匹配的目的。&lt;/p&gt;
&lt;h2 id=&quot;ac自动机是什么&quot;&gt;AC自动机是什么&lt;/h2&gt;
&lt;p&gt;大家都知道KMP可以用于在一个大字符串（文本串）中寻找另一个小的字符串（模式串），那么如果有n个模式串，要你把它们全部在文本串中找出来呢？当然，我们可以做n次KMP（别小瞧30分哦），但是其效率并不能差强人意。这个时候，我们可以尝试把模式串做成Trie树，似乎可以提高效率。&lt;/p&gt;
&lt;p&gt;比如说，我们有5个模式串：she,shr,say,he,her,那么它们所建出来的Trie树应该是长成这样的：（红色节点表示单词的结尾）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213144078-1801957981.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么，怎么用它来匹配呢？如果我们把文本串的每一个点都作为起点放到Tire树上匹配，它的复杂度将会是...我要你Tire树有何用(╯‵□′)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;既然这样，那么如果只把文本串的第一个字符为起点，会发生什么呢？&lt;/p&gt;
&lt;p&gt;你以为会是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213230940-524045718.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完美！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而实际上却是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213257110-1762572679.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题很明显，当我们匹配完she时，he其实也被匹配到了。所以我们希望这棵Trie树上能够加点东西，让它可以达到下面的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213310383-388458083.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，红色的箭头就是失配指针——fail指针。它表示文本串在当前节点失配后，我们应该到哪个节点去继续匹配。很显然，对于每个节点，我们要找到这个节点-代表的字符串-在树上所有的节点-表示的字符串中-能找到的最长的后缀，意思就是“我当前匹配到了这个点，我也相当于匹配到了的节点（中的深度最大的节点）。”比如说，在我举的例子中，当我们匹配到了she时，我们在树上走的路径也包含了he，he是she的一个后缀。我们在she上失配，至少说明我们已经匹配到了he，于是就可以跳到代表he的节点上继续匹配。&lt;/p&gt;
&lt;p&gt;到这里，你是不是发现fail指针和KMP中的next指针简直一毛一样？它们都被称为“失配指针”。将Trie树上的每一个点都加上fail指针，它就变成了AC自动机。AC自动机其实就是Trie+KMP，它可以用来解决在文本串中寻找很多模式串，即多模匹配问题。&lt;/p&gt;
&lt;p&gt;对于一开始的5个单词，它们所构建出的AC自动机就长这样（没有画出红色箭头的点，其fail指针都指向根节点）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213322731-1606805669.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何构建ac自动机&quot;&gt;如何构建AC自动机&lt;/h2&gt;
&lt;p&gt;显然，我们要做的就是快速地求出所有点的fail指针。我们以bfs的顺序依次求出每个节点的fail，这样，当我们要求一个节点的fail时，它的父亲的fail肯定已经求出来了。若当前节点为A，其父节点为B，B的fail为C，那么C所代表的字符串一定是B的最长的后缀。如果C有一个儿子D的字符与A的字符等同，那么显然D所代表的串（C加一个字符）就是A所代表的串（B加一个字符）的最长后缀。如果C没有一个儿子，使其字符与A的字符等同呢？很简单，只需要再访问C的fail就行了。如此反复，直到A的最长后缀找到，或者A的fail指向根节点为止。（A在Trie树中没有后缀，乖乖回到根重新匹配吧！）&lt;/p&gt;
&lt;p&gt;为了解释得更清楚，我举一个例子。下面这幅图是我根据别的地方的图重新画的（n次转载？），出处我没找到_(:з」∠)_。节点是根据bfs序标号的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213332706-1589913513.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为了少一些特判，设置一个辅助根节点0号节点，0号节点的所有儿子都指向真正的根节点1号节点，然后将1号节点的fail指向0号节点。&lt;/li&gt;
&lt;li&gt;找到2号节点的父亲节点的fail节点0号节点，看0号节点有没有为a的子节点。有，于是2号节点的fail指向1号节点。&lt;/li&gt;
&lt;li&gt;找到3号节点的父亲节点的fail节点0号节点，看0号节点有没有为b的子节点。有，于是3号节点的fail指向1号节点。&lt;/li&gt;
&lt;li&gt;找到4号节点的父亲节点的fail节点1号节点，看1号节点有没有为b的子节点。有，于是4号节点的fail指向3号节点。&lt;/li&gt;
&lt;li&gt;同上。&lt;/li&gt;
&lt;li&gt;同上。&lt;/li&gt;
&lt;li&gt;同上。&lt;/li&gt;
&lt;li&gt;找到8号节点的父亲节点的fail节点5号节点，看5号节点有没有为b的子节点。没有，于是再找到5号节点的fail节点2号节点，看2号节点有没有为b的子节点。有，于是8号节点的fail指向4号节点。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样，一个AC自动机就做好了。&lt;/p&gt;
&lt;p&gt;注意到由于辅助节点的存在，我们不需要做任何特判，在树上没有后缀的节点的fail指针会自动连向根节点。&lt;/p&gt;
&lt;p&gt;构建fail指针的代码：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;void build()
{
    for(int i=0;i&amp;lt;26;++i)ch[0][i]=1;
    fail[1]=0;
    queue&amp;lt;int&amp;gt;q;
    q.push(1);
    while(!q.empty())
    {
        int x=q.front();q.pop();
        for(int i=0;i&amp;lt;26;++i)
        {
            int c=ch[x][i];
            if(!c)continue;
            int fa=fail[x];
            while(fa&amp;amp;&amp;amp;!ch[fa][i])fa=fail[fa];
            fail[c]=ch[fa][i];
            q.push(c);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;如何利用ac自动机来查找&quot;&gt;如何利用AC自动机来查找&lt;/h2&gt;
&lt;p&gt;这个问题似乎显而易见，只要根据文本串的内容沿着Trie树的边往下走就行了，一失配就沿着fail边向上跳。&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;p&gt;我在被大佬虐飞之前也是这么想的QwQ&lt;/p&gt;
&lt;p&gt;fail边不只是失配指针这么简单，如果你像我刚才说的那么做的话，你就可能会面临下面这样的问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213357245-1362436414.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了不让这种事情发生，我们每遇到一个fail指针就必须向上跳到顶，以保证不会漏过任何一个子串，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1313742/201807/1313742-20180703213408820-186250902.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，这样未免也太蠢了，于是这里又有一个小优化：如果一个节点的fail指向一个结尾节点，那么这个点也成为一个（伪）结尾节点。在匹配时，如果遇到结尾节点，就进行相应的计数处理。&lt;/p&gt;
&lt;p&gt;进行匹配的代码：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;void print(int x)
{
    while(x)
    {
        if(end[x])
        {
            //计数、打印等等，视题目要求而定
        }
        x=fail[x];
    }
}

void match(char *s)
{
    int len=strlen(s),now=1;
    for(int i=0;i&amp;lt;len;++i)
    {
        int id=s[i]-'a';
        while(now&amp;amp;&amp;amp;!ch[now][id])now=fail[now];
        now=ch[now][id];
        if(end[now]||en[now])print(now);
        //en[now]即为伪结尾标记
    }
}

//记得在build中加上这句话
void build()
{
    ...
    if(end[fail[c]])en[c]=1;
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;一个被我们忽略的问题&quot;&gt;一个被我们忽略的问题&lt;/h2&gt;
&lt;p&gt;时间复杂度？？？&lt;/p&gt;
&lt;p&gt;设模式串平均长度为 $ l $ ，建树复杂度为 $ O(nl) $ ，构建fail指针为 $ O(nl) $ ，匹配时因为每次都要跳fail边，复杂度上界可以达到 $ O(ml) $ ，所以总复杂度为 $ O((n+m)l) $ ！&lt;/p&gt;
&lt;p&gt;这和暴力有什么区别(╯°Д°)╯︵┻━┻？？？&lt;/p&gt;
&lt;p&gt;虽然说，这个上界应该是十分松的，但是我们想要的是能跑 $ 1e6 $ 的速度！&lt;/p&gt;
&lt;p&gt;这个时候我们就需要优化了。。。然而我已经没时间写辣QwQ!这些就留到下一篇博客吧！&lt;/p&gt;
&lt;p&gt;谢谢你的资瓷啦QwQ!&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 13:49:00 +0000</pubDate>
<dc:creator>sclbgw7</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sclbgw7/p/9260756.html</dc:identifier>
</item>
<item>
<title>(二)行为化参数传递代码 - Vincili</title>
<link>http://www.cnblogs.com/vincili/p/9260681.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vincili/p/9260681.html</guid>
<description>&lt;p&gt;行为参数化就是可以帮助你处理频繁变更需求的一种软件开发模式。&lt;br/&gt;筛选苹果的例子：&lt;br/&gt;Apple 类&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Getter
@Setter
public class Apple {

    private Integer weight;

    private String color;
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1.筛选出绿苹果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static List&amp;lt;Apple&amp;gt; filterGreenApples(List&amp;lt;Apple&amp;gt; inventory) {
        List&amp;lt;Apple&amp;gt; result = new ArrayList&amp;lt;Apple&amp;gt;();
        for(Apple apple: inventory){
            if( &quot;green&quot;.equals(apple.getColor() ) {
                result.add(apple);
            }
        }
        return result;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当满足了筛选绿苹果的需求后，用户可能会改变需求，需要筛选红苹果，浅绿色苹果等，所以我们需要在编写类似的代码之后尝试对其进行抽象,把颜色变成一个参数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static List&amp;lt;Apple&amp;gt; filterApplesByColor(List&amp;lt;Apple&amp;gt; inventory,
                                                  String color) {
        List&amp;lt;Apple&amp;gt; result = new ArrayList&amp;lt;Apple&amp;gt;();
        for (Apple apple: inventory){
            if ( apple.getColor().equals(color) ) {
                result.add(apple);
            }
        }
        return result;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就能满足筛选不同颜色苹果的需求了。满足这个需求之后，农民可能会想，要是能筛选出重苹果或者轻苹果就好了，大于150g的为重苹果，于是就有&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static List&amp;lt;Apple&amp;gt; filterApplesByWeight(List&amp;lt;Apple&amp;gt; inventory,
                                                   int weight) {
        List&amp;lt;Apple&amp;gt; result = new ArrayList&amp;lt;Apple&amp;gt;();
        For (Apple apple: inventory){
            if ( apple.getWeight() &amp;gt; weight ){
                result.add(apple);
            }
        }
        return result;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样做虽然满足了需求，但是却复制了大部分代码，他们仅有下面两句代码不同&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    if ( apple.getColor().equals(color) ) {
                result.add(apple);
    }

    if ( apple.getWeight() &amp;gt; weight ){
                result.add(apple);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;行为参数化&quot;&gt;行为参数化&lt;/h4&gt;
&lt;p&gt;到这里，你可能会想到农民可能会根据苹果的产地，苹果的采摘时间等等各种不同属性来进行筛选，于是索性抽象出一个filterApples的方法。而筛选的条件无非就是根据苹果的各种属性进行判断，然后返回一个boolean值，于是我们抽象出ApplePredicate接口&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public interface ApplePredicate{
        boolean test (Apple apple);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在你就可以用ApplePredicate的多个实现代表不同的选择标准了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class AppleHeavyWeightPredicate implements ApplePredicate{
        public boolean test(Apple apple){
            return apple.getWeight() &amp;gt; 150;
        }
    }
    public class AppleGreenColorPredicate implements ApplePredicate{
        public boolean test(Apple apple){
            return &quot;green&quot;.equals(apple.getColor());
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里我们抽象了ApplePredicate，每一种筛选就是一个策略，我们定义了筛选苹果的一族算法，把他们封装起来然后，然后在运行时选择一种算法，这就和策略模式相关联了。&lt;br/&gt;经过抽象之后我们的filterApples方法是这样的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static List&amp;lt;Apple&amp;gt; filterApples(List&amp;lt;Apple&amp;gt; inventory,ApplePredicate p){
        List&amp;lt;Apple&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        for(Apple apple: inventory){
            if(p.test(apple)){ #筛选判断
                result.add(apple);
            }
        }
        return result;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到这里，当农民又提出新的需求，比如想要筛选出大于150g的红苹果，那么只需要实现ApplePredicate接口，然后传入filterApples就能满足需求了，这比之前的方式要灵活很多。这时filterApples方法的行为取决于你通过ApplePredicate对像传递的代码，也就是我们filterApples方法的行为参数化了。&lt;br/&gt;从上面的例子看比如筛选绿颜色苹果的类&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class AppleGreenColorPredicate implements ApplePredicate{
        public boolean test(Apple apple){
            return &quot;green&quot;.equals(apple.getColor());
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实我们只关心的是返回boolean值部分的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &quot;green&quot;.equals(apple.getColor());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而其他的代码都是实现一个接口的模板代码，都不是我们关心的,而通过lambda表达式我们就可以去掉那些臃肿的模板代码,像下面这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    filterApples(inventory,apple -&amp;gt; &quot;green&quot;.equals(apple.getColor()));&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;抽象升级&quot;&gt;抽象升级&lt;/h4&gt;
&lt;p&gt;现在我们已经能够应对农民筛选苹果的需求了，但是当农民提出要对自家梨，橘子也有各种不同的筛选需求，此时我们不会有跟着将上面类似的代码写三遍，而是进行进一步的抽象，抽象成对一个列表根据不同条件进行筛选的方法，各种筛选条件就是不同的行为参数，于是就有了jdk里面stream的filter方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Stream&amp;lt;T&amp;gt; filter(Predicate&amp;lt;? super T&amp;gt; predicate);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后面章节再介绍流&lt;br/&gt;像上面的例子就可以写成&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;apples.stream().filter(apple -&amp;gt; &quot;green&quot;.equals(apple.getColor()));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码的意思是通过通过apples获得一个流，然后利用filter方法对苹果进行筛选。&lt;br/&gt;类似于这样行为参数化的例子还有很多，他们结合lambda表达式会使得代码的编写变得更加简洁和优雅。通过抽象升级也使得代码更加灵活，易于扩展和维护，更加拥抱新的变化。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注:内容参考至《java8实战》扫描下方二维码关注微信公众号，输入java8sz下载该书。&lt;/em&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5042199-77cfde43eb077c2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/60&quot; alt=&quot;CodeBooker&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 13:21:00 +0000</pubDate>
<dc:creator>Vincili</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vincili/p/9260681.html</dc:identifier>
</item>
<item>
<title>spring源码解读-aop - 三杯然诺</title>
<link>http://www.cnblogs.com/sbrn/p/9260688.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sbrn/p/9260688.html</guid>
<description>&lt;p&gt;  aop是指面向切面编程，ProxyFactoryBean是spring aop的底层实现与源头，为什么这么说呢？首先我们看一段配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201807/1377586-20180703212422540-655200704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  1、target是目标对象，需要对其进行切面增强&lt;/p&gt;
&lt;p&gt;  2、proxyInterfaces是指代理对象所实现的接口&lt;/p&gt;
&lt;p&gt;  3、interceptorNames:是指通知器（Advisor）列表，通知器中包含了通知advice与切点pointcut&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;概括一下，ProxyFactoryBean的作用是：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  针对目标对象来创建代理对象，将对目标对象方法的调用转到对相应代理对象方法的调用，并且可以在代理对象方法调用前后执行与之匹配的各个通知器中定义好的方法&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;spring通过两种方式来创建目标代理对象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  1、JDK动态代理&lt;/p&gt;
&lt;p&gt;  2、CGLIB&lt;/p&gt;

&lt;p&gt;  在spring中这两种代理方式都实现了AopProxy接口去，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201807/1377586-20180703202303362-750630415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  spring中AopProxyFactory是一个接口，接口中只有一个方法createAopProxy，这个接口是有一个实现类DefaultAopProxyFactory，用来创建AopProxy对象，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201807/1377586-20180703203435482-1535722481.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;下面我们比较并实现以下两种代理方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   首先明确以下我们常用的代理模式有什么问题，在我们经常使用的代理模式中，真实对象必须是事先存在的，并将其作为代理对象的内部属性，在使用时，一个真实角色必须对应一个dialing角色，如果大量使用会导致类的急剧膨胀，java的动态代理类就可以解决这个问题。&lt;/p&gt;
&lt;p&gt;  JDK动态代理&lt;/p&gt;
&lt;p&gt;  java动态代理类位于java.lang.reflect包下，一般主要涉及到两个类：&lt;/p&gt;
&lt;p&gt;  1、Interface InvocationHandler:该接口中只定义了一个方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object invoke(Object proxy, Method method, Object[] args)
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt; Throwable;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  第一个参数proxy是指代理类，method是被代理的方法，args为该方法的参数数组&lt;/p&gt;

&lt;p&gt;  2、Proxy：该类为动态代理类，其主要方法如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Object newProxyInstance(ClassLoader loader,
                                          Class&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span&gt;[] interfaces,
                                          InvocationHandler h)
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt; IllegalArgumentException
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  该方法返回代理类的一个实例，返回后的代理类可以被当作代理类使用&lt;/p&gt;

&lt;p&gt;  JDK动态代理实现步骤：&lt;/p&gt;
&lt;p&gt;  1、创建一个实现接口InvocationHandler的类（DynamicSubject），它必须实现invoke方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DynamicSubject &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; InvocationHandler {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Object sub;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DynamicSubject(Object sub) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sub =&lt;span&gt; sub;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {

        System.out.println(&lt;/span&gt;&quot;before calling:&quot; +&lt;span&gt; method);
        method.invoke(sub, args);
        System.out.println(args &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;after calling:&quot; +&lt;span&gt; method);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  2、创建被代理的类(RealSubject)以及接口(Subject)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Subject {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; request();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RealSubject &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Subject {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; request() {
        System.out.println(&lt;/span&gt;&quot;from real subject&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  3、通过Proxy的静态方法newProxyInstance创建一个代理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        RealSubject realSubject &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RealSubject();
        InvocationHandler handler &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DynamicSubject(realSubject);
        Class&lt;/span&gt;&amp;lt;?&amp;gt; classType =&lt;span&gt; handler.getClass();
        Subject subject &lt;/span&gt;=&lt;span&gt; (Subject) Proxy.newProxyInstance(classType.getClassLoader(), realSubject.getClass().getInterfaces(), handler);
        subject.request();
        System.out.println(subject.getClass());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  如果目标类并未实现接口，那么Spring就会使用CGLIB库为其创建代理，如下demo运用了CGLIB实现代理&lt;/p&gt;
&lt;p&gt;  1、创建被代理类Person&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; study() {
        System.out.println(&lt;/span&gt;&quot;study&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  2、创建CglibProxy实现代理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CglibProxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; MethodInterceptor {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Enhancer enhancer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Enhancer();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object getProxy(Class&amp;lt;?&amp;gt;&lt;span&gt; clazz) {
        enhancer.setSuperclass(clazz);
        enhancer.setCallback(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        Object object &lt;/span&gt;=&lt;span&gt; enhancer.create();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {

        System.out.println(o.getClass().getName() &lt;/span&gt;+ &quot;.&quot; +&lt;span&gt; method.getName());

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行父类对应方法&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; Object result =&lt;span&gt; methodProxy.invokeSuper(o, objects);

        System.out.println(&lt;/span&gt;&quot;执行结束&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        CglibProxy proxy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CglibProxy();
        Person person &lt;/span&gt;= (Person) proxy.getProxy(Person.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        System.out.println(person.getClass().getName());
        person.study();

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  &lt;strong&gt;下面我们来比较一下，两种代理方法的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  1、JDK动态代理只能对实现了接口的类生成代理，而不能针对类&lt;/p&gt;
&lt;p&gt;  2、CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法&lt;/p&gt;
&lt;p&gt;  3、在spring中如果bean实现了接口spring用JDK动态代理，如果bean没有实现接口，spring使用CGLIB实现代理&lt;/p&gt;
&lt;p&gt;  4、CGLIb不能对声明为final的方法进行dialing，因为CGLib原理是动态生成被代理类的子类&lt;/p&gt;
&lt;p&gt;  5、JDK动态代理通过反射的newInstance方法产生代理类的对象&lt;/p&gt;

</description>
<pubDate>Tue, 03 Jul 2018 13:19:00 +0000</pubDate>
<dc:creator>三杯然诺</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sbrn/p/9260688.html</dc:identifier>
</item>
<item>
<title>一次艰难debug的反思 - kid551</title>
<link>http://www.cnblogs.com/kid551/p/9260586.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kid551/p/9260586.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/672506/201807/672506-20180703205421007-1313227346.jpg&quot; alt=&quot;&quot; width=&quot;478&quot; height=&quot;317&quot;/&gt;&lt;/p&gt;

&lt;p&gt;已经很久没有遇到如此顽固的bug了，总共耗费了我近1个礼拜的时间。期间的种种冲突，个人崩溃，最终解决方案的形成，到回过头来的反思，实在有太多值得梳理的东西。&lt;/p&gt;
&lt;p&gt;从结果上来讲，这是个人&lt;code&gt;js&lt;/code&gt;基础极端薄弱的集中体现，是对&lt;code&gt;js&lt;/code&gt;闭包、基本流程和运转方式掌握不到位的综合反应。正因为基础薄弱，所以debug到某个阶段，竟然不知道该如何制定探索方案。&lt;/p&gt;
&lt;p&gt;从调式的方式来讲，面对这样顽固的bug，我并没有做到冷静分析、科学梳理。在跨过某一个节点后，我可耻地又成为了newbie时期的模样：对一切都持神秘的态度。不过是因为别人提了一句，这个系统有点混乱。自己似乎一下子就找到了什么光明正大的理由，就可以把所有的责任推卸出去，可以不用、不必去把问题找出来。&lt;/p&gt;
&lt;p&gt;这种黑盒态度，等同于封建迷信，似乎要凭借什么不可告人的运势、辛苦和神秘，才能够将一个问题解决。这是我所厌恶的，但却依旧不断再犯的东西。从信念上讲，我再一次将问题划归为了“不可知”，于是，整个形势就陡然发生了巨变。因为你将一个问题判定为了“不可知”，你允许了侥幸心理的存在。因为你的侥幸心理，你对一切就不再保持一颗空灵之心，不再相信逻辑、相信理智。&lt;/p&gt;
&lt;p&gt;所谓的将理智抛诸脑后，就是开始颠倒黑白、指鹿为马。&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;你在过往经历中能找到某个类似bug的解决方案，不是因为你做了很多的无用功，而是因为你在这种低效的搜索中，恰好碰到了解决方案。所以这里的秘诀不是做无用功，而是枚举法、网格搜索法，不断地低效穷举。而如果你能够以更优的策略做搜寻，一定是可以更快地解决bug。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;总是用苦力和莫名其妙的怪异方法做比对，只会让自己徒劳耗费精力。但内心却总是有一种情感上的寄托，似乎历尽艰难，就能有回报。所以这是非理性的第二点：不是精准地找到是什么东西、核心策略导致你有回报、有成功，而是诉诸于“苦难情节”。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;越是找不到方法，就越是陷进去，开始不思考、不用谋略去制定测试和探索方案。像一只苍蝇一样乱撞。更可怕的是，自己越是这样，就越是深深不可自拔，不知道如何停下来，徒劳地耗费时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;再往后更可怕的是什么呢，开始像学生时代做不出数学竞赛题目时，思绪胡乱遨游，开始诉诸于命运、劫难、劫数等玄幻的封建迷信。似乎终有此劫无法逃避。可实际呢？一个技术问题解决不了和劫数有什么关系？无非是技术基本功不扎实，学的东西不到位，掌握的东西不细致。可自己早已脱离了理性，开始在“不可知”的世界里越走越起劲儿。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;伴随着非理性的，是自己抗压力的严重失衡。在高压之下，自己无法理性思考问题，无法合理地、系统性、有条理地制定自己的探索方案。面对一个bug，特别是一个神奇现象的bug，你能做的应该是不断地通过“不同种类”的测试，来将可能出现问题的范围缩小。这个时候，最重要的就是精心制定合理的测试方案。&lt;/p&gt;
&lt;p&gt;没有条理、没有理性的探索方式，就会导致制定出N个只会得出相同结论的test case。那么请问，这样的方案有何意义？如果你已经在某个方向上做了测试，那么你至少应该让问题的范围缩小一半，即是二分。而如果你的测试用例连这么基本的标准都无法达到，请问，你制定出来的探索方案还合理吗？&lt;/p&gt;
&lt;p&gt;再来，当你感觉到“应该”要用测试用例缩小问题的定位范围，而“实际”感觉困难或者不能时，你就应该果断地停下来细细思考，而不是闷头继续写一堆、执行一堆毫无用处的测试方案。你该从头到尾去梳理一遍，自己做过哪些测试，它们意味着什么，但同时又不意味着什么。关键就是要想清楚它们“不意味”着什么，才能发现还有哪些地方和模糊点尚待测试。这是关节处。&lt;/p&gt;
&lt;p&gt;所谓工程师，最重要的就是要能够把问题、把过程梳理得透彻，能够明察秋毫。什么叫明察秋毫？就是连羽毛、头发丝那样的细节、差别都可以发现。工程师的部署，应该&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484348&amp;amp;idx=1&amp;amp;sn=1e575b9c2330724d24187e84baafb4fc&amp;amp;chksm=ec20e400db576d169a2749b01875feac22d32cb3b839be3263fef349f7cb73b62f03921eda9a&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;让每一粒尘埃都有的放矢&lt;/a&gt;。那么，一个大前提便是，你至少要能够把每一粒尘埃都装进自己的脑海里做到心中有数。如果你只能够觉察到某一部分的尘埃，那有怎么去谈论让每一粒尘该都有的放矢呢？&lt;/p&gt;
&lt;p&gt;科学、工程的世界里，不允许有模糊不清的地方。你可以不知道，但你不能够把“不知道”当作知道，更不可以把“不知道”归因于各种莫名其妙的“不可知”黑盒。工程师的任务，首先要能够明确地察觉出、理清楚哪些是清楚的、哪些是不清楚的。基于这个认识，再理性地制定攻克方案，而不是蛮干、更不是寄托于“神谕”或者“祈祷”，期望通过侥幸使自己的方案发挥效果。&lt;/p&gt;
&lt;p&gt;这次经历，唯一值得称道、也是我解决这个bug的重要因素，便是我没有闭门造车，而是以开放的心态诚恳地向周围的朋友求助。在与他们的谈话中、建议下，自己不断获得启发，从而能够将这个bug解决。终于，在只求“解决问题”这个方面，自己更为激进一些了。&lt;/p&gt;
&lt;p&gt;感谢向我提供帮助的这些朋友们，有你们真好。&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;近期回顾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484365&amp;amp;idx=1&amp;amp;sn=3368e2043b1500a5684b0122075db079&amp;amp;chksm=ec20e471db576d670a3f325182a0e063888b83f1ef67a6e6775ce5587e2363e3125646606f0d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;J2EE导论 | 疑惑篇&lt;/a&gt;》&lt;br/&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484361&amp;amp;idx=1&amp;amp;sn=d277e80b078d47e9e67cfb75b3464e9a&amp;amp;chksm=ec20e475db576d63bc61f487d49e136f6249f4d7aa2dd9750e5e4b910849883ae3fdc1e03065&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;前端技术的碎碎念&lt;/a&gt;》&lt;br/&gt;《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5MDMyMTEwNw==&amp;amp;mid=2247484356&amp;amp;idx=1&amp;amp;sn=e0a37db74591a83e10b58156a373c070&amp;amp;chksm=ec20e478db576d6e9daf1c7ffe417a1d633f3961a4a7027c7f9b88d60e92981b8cb5a283e6f9&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;放眼望去都是痛&lt;/a&gt;》&lt;/p&gt;

&lt;h2&gt; &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果你喜欢我的文章或分享，请长按下面的二维码关注我的微信公众号，谢谢！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/672506/201807/672506-20180703205527301-1723836939.jpg&quot; alt=&quot;&quot; width=&quot;618&quot; height=&quot;309&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;   &lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;更多信息交流和观点分享，可加入知识星球：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/672506/201807/672506-20180703205621031-549177635.png&quot; alt=&quot;&quot; width=&quot;446&quot; height=&quot;275&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;VIP赞赏专区：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/672506/201807/672506-20180703205659703-899212248.jpg&quot; alt=&quot;&quot; width=&quot;237&quot; height=&quot;237&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 12:58:00 +0000</pubDate>
<dc:creator>kid551</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kid551/p/9260586.html</dc:identifier>
</item>
<item>
<title>深入理解CSS系列（一）：理解CSS的盒子模型 - 渔歌</title>
<link>http://www.cnblogs.com/yugege/p/9260563.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yugege/p/9260563.html</guid>
<description>&lt;p&gt;接触前端也有好几个年头了，但是，讲实话，对于&lt;code&gt;CSS&lt;/code&gt;的理解真的是不敢恭维，相信很多同行也有类似的感受吧！这是为什么呢？因为我们都认为&lt;code&gt;CSS&lt;/code&gt;太简单了，没有必要深入学习，果真如此？其实，只不过是自己图样图森破罢了。如果真的那么简单，为什么经常会遇到一些奇怪的样式问题，而要折腾好长时间呢？就是因为无从下手，终究还是基础不扎实啊！最近打算深入的学习一下&lt;code&gt;CSS&lt;/code&gt;，以便遇到问题时，才知道如何下手，从而迅速的对症下药。“深入理解”只是相对于我个人而言的哈，如果有大神觉得不够深入，请不喜勿喷。这是深入理解&lt;code&gt;CSS&lt;/code&gt;的第一篇，主要介绍&lt;code&gt;CSS的盒子模型&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;什么是盒子模型&quot;&gt;什么是盒子模型&lt;/h3&gt;
&lt;p&gt;说起盒子模型，作为前端开发的我们，相信大家都有了解过的 。这里套用mdn官网的解释：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;在一个文档中，每个元素都被表示为一个矩形的盒子。确定这些盒子的尺寸, 属性 --- 像它的颜色，背景，边框方面 --- 和位置是渲染引擎的目标。&lt;br/&gt;在&lt;code&gt;CSS中&lt;/code&gt;，使用标准盒模型描述这些矩形盒子中的每一个。这个模型描述了元素所占空间的内容。每个盒子有四个边：外边距边, 边框边, 内填充边与内容边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方语言总是那么的晦涩难懂，那我接用chrome的控制台的截图来说明吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/698814/201807/698814-20180703205107088-655819938.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最外面橙色的就是外边距区域(&lt;code&gt;margin area&lt;/code&gt; )，往里黄色的是边框区域(&lt;code&gt;border area&lt;/code&gt;)，再往里的绿色的是内边距区域(&lt;code&gt;padding area&lt;/code&gt; )，最里面绿色的就是内容区域（&lt;code&gt;content area&lt;/code&gt;）了。&lt;/p&gt;
&lt;h3 id=&quot;盒子模型的作用&quot;&gt;盒子模型的作用&lt;/h3&gt;
&lt;p&gt;好吧，盒子模型的概念好像没有什么好说的，就上面那张图片罢了。下面一起来看看盒子模型对我们布局有什么影响。举个栗子，假如想设置一个元素的大小为&lt;code&gt;200px&lt;/code&gt;，如果写了如下的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;style&amp;gt;
  .box {
    width: 200px;
    height: 100px;
    padding: 20px;
  }
&amp;lt;/style&amp;gt;
&amp;lt;div class=&quot;box&quot;&amp;gt;
  盒子模型
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果，你在审查元素时，发现这个元素的大小变成了&lt;code&gt;240px&lt;/code&gt;，而不是&lt;code&gt;200px&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/698814/201807/698814-20180703205135110-718853810.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是为什么呢？因为默认情况下，设置&lt;code&gt;width&lt;/code&gt; 、&lt;code&gt;height&lt;/code&gt; 等作用对象是内容区域，所以设置的&lt;code&gt;width: 200px&lt;/code&gt;仅仅是内容区域的宽度，加上左右内边距大小，导致了元素的整体尺寸变大了。这和我们对现实世界的中盒子的认识有差异的。比如，你我们说房子的面积，并不单单指可用面积，还要包括墙壁厚度、阳台、电梯之类的空间的。&lt;/p&gt;
&lt;h3 id=&quot;盒子模型和box-sizing&quot;&gt;盒子模型和box-sizing&lt;/h3&gt;
&lt;p&gt;为了把&lt;code&gt;CSS&lt;/code&gt;和现实世界对应起来，这时候&lt;code&gt;box-sizing&lt;/code&gt;就要用上场了。&lt;code&gt;box-sizing&lt;/code&gt;是用来设置&lt;code&gt;width&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;的作用对象的。有三个值，分别是&lt;code&gt;content-box&lt;/code&gt; 、 &lt;code&gt;paading-box&lt;/code&gt; 、 &lt;code&gt;border-box&lt;/code&gt;， 默认值是&lt;code&gt;content-box&lt;/code&gt;。可能有人会问，为什么没有&lt;code&gt;margin-box&lt;/code&gt;啊？具体原因就不知道了，可以参考张鑫旭老师在《CSS世界》一书中提到了两个原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;margin-box&lt;/code&gt;本身没有多大的价值&lt;/li&gt;
&lt;li&gt;和&lt;code&gt;margin&lt;/code&gt;的规范会冲突。因为&lt;code&gt;margin&lt;/code&gt;规范写着“ &lt;code&gt;margin&lt;/code&gt;的背景永远是透明的 ”，如果来个&lt;code&gt;margin-box&lt;/code&gt;，那&lt;code&gt;background&lt;/code&gt;怎么办？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;至于为什么没有&lt;code&gt;margin-box&lt;/code&gt;就简单的提一下，有兴趣的朋友可以自己去查一下。&lt;/p&gt;
&lt;h3 id=&quot;最佳实践&quot;&gt;最佳实践&lt;/h3&gt;
&lt;p&gt;为了布局上的方便，一些专家建议我们将所有的元素都设置为&lt;code&gt;box-sizing: border-box&lt;/code&gt;，具体原因可以参考这篇文章: &lt;a href=&quot;https://css-tricks.com/international-box-sizing-awareness-day/&quot;&gt;International box-sizing Awareness Day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果不考虑低版本浏览器的话，可以用下面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;*,
*:before,
*:after { 
  box-sizing: border-box;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后来,又有专家建议用的继承的方法，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种方法被称为最佳实践，具体原因就不说了，参考这里：&lt;a href=&quot;https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/&quot;&gt;Inheriting box-sizing Probably Slightly Better Best-Practice# Inheriting box-sizing Probably Slightly Better Best-Practice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既然是专家推荐 ，那我们以后可以把第二种方法的段代码放到reset.css里面的。&lt;/p&gt;
&lt;p&gt;好吧，先写这么多了，太久没有撸字，感觉写一个字也很痛苦呀。&lt;br/&gt;这是深入理解CSS的第一篇，讲真，我自己也承认写得一点也不深入，这也不能怪我呢，因为太久没有写过博文，真的很难静心来好好写，那就以个简单的知识点作为开头吧。&lt;/p&gt;
&lt;p&gt;有问题的欢迎在讨论区交流哈~&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 12:52:00 +0000</pubDate>
<dc:creator>渔歌</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yugege/p/9260563.html</dc:identifier>
</item>
<item>
<title>spring cloud微服务启动错误（1） - 村里唯一的架构师</title>
<link>http://www.cnblogs.com/clwydjgs/p/9260495.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/clwydjgs/p/9260495.html</guid>
<description>&lt;p&gt;&lt;span&gt;今天下午在启动spring cloud微服务的时候，报了这个错误：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2018-07-03 20:17:10.295 ERROR 19024 --- [ main] o.s.b.d.LoggingFailureAnalysisReporter :&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;***************************&lt;/span&gt;&lt;br/&gt;&lt;span&gt;APPLICATION FAILED TO START&lt;/span&gt;&lt;br/&gt;&lt;span&gt;***************************&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Description:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Cannot determine embedded database driver class for database type NONE&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Action:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you want an embedded database please put a supported one on the classpath. If you have database settings to be loaded from a particular profile you may need to active it (no profiles are currently active).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Disconnected from the target VM, address: '127.0.0.1:55393', transport: 'socket'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Process finished with exit code 1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1416523/201807/1416523-20180703201908617-837910523.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;刚开始我以为是端口被占用。果断cmd并输入netstat -aon，找半天没发现占用的端口，然后又网上看了一下，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转自：&lt;a href=&quot;https://blog.csdn.net/Loser100/article/details/78190703?locationNum=9&amp;amp;fps=1&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/Loser100/article/details/78190703?locationNum=9&amp;amp;fps=1&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SpringBoot启动报错：Cannot determine embedded database driver class for database type NONE&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;springboot启动时会自动注入数据源和配置jpa&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决办法一：启动类中加入注解：@SpringBootApplication(exclude={DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class})&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方法二：在Application.properties文件内配置数据源即可。代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;22&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我仔细的检查了一下，也加了注解，试了一下，我靠，没用啊，人生呐，真是改不完的bedug，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只好用出终极大招，拷贝我自己的代码，删除项目，从新从svn更新项目，导入运行，哎呦我去。怎么还是这问题？难道是我项目配置问题?不对啊，我其他的项目都没有问题啊。束手无策，只好求助小碗（一个认真工作的大佬）；&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;通过反复调试，终于找到了。问题所在，pom.xml里面有一个错误的配置，&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;删了就可以运行，微服务也可以注册。配置文件请大家仔细检查。配置文件不对，什么都是扯淡。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Jul 2018 12:34:00 +0000</pubDate>
<dc:creator>村里唯一的架构师</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/clwydjgs/p/9260495.html</dc:identifier>
</item>
</channel>
</rss>