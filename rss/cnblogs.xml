<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>第三方页面嵌入到web项目的方案 之 使用iframe嵌入 - wolfSoul</title>
<link>http://www.cnblogs.com/yuqing6/p/8462239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuqing6/p/8462239.html</guid>
<description>&lt;p&gt;有些项目中可能会遇到这样的需求, 需要在一个项目中嵌入其他的项目的页面或者功能.并且需要这两个页面之间能够进行交互.&lt;/p&gt;
&lt;p&gt;本文主要介绍如何实现这种第三方应用的嵌入, 主要有以下几个方向:&lt;/p&gt;
&lt;p&gt;1.iframe引入第三方应用&lt;/p&gt;
&lt;p&gt;2.嵌入js片段&lt;/p&gt;
&lt;p&gt;3.封装成SDK&lt;/p&gt;
&lt;p&gt;本篇将主要介绍第一种, 通过iframe嵌入第三方页面, 接下来的几篇文章将分别介绍其他两种方式&lt;/p&gt;
&lt;p&gt;使用iframe嵌入是目前使用很广泛的一种嵌入方案, 先看几个案例:  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一. 使用案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;搜狐移动端使用iframe嵌入广告: &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055753/201802/1055753-20180223144542261-564658176.png&quot; alt=&quot;搜狐移动端使用iframe嵌入广告&quot; width=&quot;716&quot; height=&quot;555&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;移动端视频网站使用iframe进行视频嵌入 &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055753/201802/1055753-20180223144809514-196161203.png&quot; alt=&quot;移动端视频网站嵌入广告&quot; width=&quot;662&quot; height=&quot;555&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt; 7724小游&lt;span&gt;戏使用iframe嵌入游戏 &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1055753/201802/1055753-20180223145226681-972707275.png&quot; alt=&quot;&quot; width=&quot;661&quot; height=&quot;555&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二. 实现过程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;s1&quot;&gt;iframe标签引入第三方页面地址&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　iframe的src设置为第三方服务器上部署的html页面，并将需要的参数作为URL的一部分传递给该页面&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;s1&quot;&gt;获取参数请求数据&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　第三方页面中,首先获取到URL中的参数，根据参数向服务端发起ajax请求，获得页面需要展示的数据&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;展示页面&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　根据获取的数据，将页面展示在主页面上&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三. 通信方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;由于iframe页面与主页面之间不在同下, 在iframe页面和主页面交互时, 会有跨域问题, 不能使用window.parent直接进行交互,目前跨域通信的方案有以下几种: &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;s1&quot;&gt;使用H5的PostMessage&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　HTML5新增的window.postMessage, 是一种安全的,基于事件的消息API.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;p1&quot;&gt;降级技术&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　对于低版本浏览器, 不支持PostMessage, 可使用以下降级方案:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　1.创建与父页面同源的ifame&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　2.使用window.name属性&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　3.通过hash&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　4.使用 ADdobe Flash 对象&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;使用easyXDM简化跨域&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　easyXDM是一个经过充分测试的JavaScript库,有如下优点&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　1.简化了跨域iframe之间的通信,并已经解决了所有的痛点.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　2.easyXDM 集成了现有的多种跨域解决方案，针对不同浏览器可以适配最合适的方案&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　　　3.可以将原来写死在页面上的 iframe 改为通过 easyXDM.Rpc() 的方式进行加载，从而更灵活的实现iframe嵌入。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;　　下面是easyXDM的github地址:&lt;span&gt; &lt;a href=&quot;https://github.com/oyvindkinsey/easyXDM#readme&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/oyvindkinsey/easyXDM#readme&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;以上跨域通信的具体实现不在此详细介绍.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;四. 使用iframe嵌入优劣势分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span&gt;优势: &lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;完全独立的DOM环境,&lt;span class=&quot;s1&quot;&gt;不会受主页面的样式影响&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;完全独立的window,避免和主页面其他脚本冲突&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;不需要跨域进行数据请求&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;安全, 主页面无法访问和更改iframe的DOM环境&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;劣势: &lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;iframe增加了http请求次数&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;iframe标签创建速度较慢 (可参考博客: https://www.cnblogs.com/sharpxiajun/p/4077515.html)&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p5&quot;&gt;&lt;span class=&quot;s3&quot;&gt;跨域iframe通信实现繁琐&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Fri, 23 Feb 2018 07:29:00 +0000</pubDate>
<dc:creator>wolfSoul</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuqing6/p/8462239.html</dc:identifier>
</item>
<item>
<title>MongoDB - Indexing, Replication, and Security - Shirley_BHU</title>
<link>http://www.cnblogs.com/shirley-bhu/p/8462222.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shirley-bhu/p/8462222.html</guid>
<description>&lt;p&gt;&lt;span&gt;Introduction of Indexes:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1&amp;gt; Provide high performance&lt;/p&gt;
&lt;p&gt;2&amp;gt; Provide efficient execution to queries&lt;/p&gt;
&lt;p&gt;3&amp;gt; Prevent collection scans&lt;/p&gt;
&lt;p&gt;4&amp;gt; Create indexes to support common and user-facing queries&lt;/p&gt;
&lt;p&gt;5&amp;gt; Store a small portion of collections data set&lt;/p&gt;
&lt;p&gt;6&amp;gt; Stores the values ofspecific fields, ordered by the value&lt;/p&gt;
&lt;p&gt;7&amp;gt; Can return sorted results directly from index&lt;/p&gt;
&lt;p&gt;8&amp;gt; Can return results without scannning any documents&lt;/p&gt;
&lt;p&gt;9&amp;gt; Are all B-tree indexes&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Index Concepts:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1&amp;gt; Multiple index types&lt;/p&gt;
&lt;p&gt;2&amp;gt; All stored as B-tree indexes&lt;/p&gt;
&lt;p&gt;3&amp;gt; Values are stored in a sorted order- ascending or descending&lt;/p&gt;
&lt;p&gt;4&amp;gt; Support different types of data and queries&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;7AAEB54E053443869764C38D0BB5FF45&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;Index Types:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1&amp;gt; Single field:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Includes data from only a single field&lt;/li&gt;
&lt;li&gt;Fields must be at the top level and on fields in sub-documents&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2&amp;gt; Compound:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Includes more than one field&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3&amp;gt; Multikey:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;References an array and records a match if a query matches any value in the array&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4&amp;gt; Geospatial:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Support location-based searches&lt;/li&gt;
&lt;li&gt;Data is sotred as either GeoJSON objects or coordinate pairs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;5&amp;gt; Text:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Supports searches on strings of data&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;6&amp;gt; Hashed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Maintain entries with hashes of values of the indexed field&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Index Properties:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Each index can have different properties&lt;/li&gt;
&lt;li&gt;Properties include:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;TTL&lt;/li&gt;
&lt;li&gt;Unique&lt;/li&gt;
&lt;li&gt;Sparse&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;TTL Indexes:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Used to automatically remove documents after a certain time&lt;/li&gt;
&lt;li&gt;Good for event logs, session information, etc.&lt;/li&gt;
&lt;li&gt;Limitations:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Compound indexes not supported&lt;/li&gt;
&lt;li&gt;Indexed field must be date&lt;/li&gt;
&lt;li&gt;If the field is an array with multiple data fields, the lowest is used for expiration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Unique Indexes:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Separate documents containg duplicate values for the indexed field are rejected in a collection&lt;/li&gt;
&lt;li&gt;When used on a compound index, uniqueness is on the combination of values&lt;/li&gt;
&lt;li&gt;Only one document in a collection can have NULL stored as the indexed field&lt;/li&gt;
&lt;li&gt;Cannot be specified on a hashed index&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Sparse Indexes:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Contain entries for documents with an indexed field, even if it is NULL&lt;/li&gt;
&lt;li&gt;Is &quot;Sparse&quot; because not all documents in a collection are included&lt;/li&gt;
&lt;li&gt;Can have a sparse and unique index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Query Plans:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Processes queries using the most efficient query plan&lt;/li&gt;
&lt;li&gt;Based on the available indexes&lt;/li&gt;
&lt;li&gt;Can specify the indexes used with Index Filters&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;6C3DC5F9DDB445328E59B3FDE88E9026&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Query Optimization: The query optimizer&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Execute the query using all available indexes in parallel&lt;/li&gt;
&lt;li&gt;Records matches and determine which index is the best for execution of the query&lt;/li&gt;
&lt;li&gt;The index becomes part of the query plan&lt;/li&gt;
&lt;li&gt;Query plan is cached for future executions of the same query&lt;/li&gt;
&lt;li&gt;Query optimizer re-evaluates the plan after certain events occur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Create simple index Demo:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;db.test.find()&lt;/p&gt;
&lt;p&gt;db.test.creatIndex({Title:1})&lt;/p&gt;
&lt;p&gt;db.test.creatIndex({Title:1, Author:1})&lt;/p&gt;
&lt;p&gt;Drop one index: db.test.dropIndex({Title:1})&lt;/p&gt;
&lt;p&gt;Drop all indexes: db.test.dropIndexes()&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Creating more complex indexes:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;db.test.find()&lt;/p&gt;
&lt;p&gt;db.test.createIndex({Title:1},{unique:true})&lt;/p&gt;
&lt;p&gt;db.test.createIndex({Title:1, Author:1}, {unique:true})&lt;/p&gt;
&lt;p&gt;db.collection.createIndex({Title:&quot;text&quot;})&lt;/p&gt;
&lt;p&gt;db.test.createIndex({price:&quot;hashed&quot;})&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Creating query plans:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;db.test.find()&lt;/p&gt;
&lt;p&gt;db.test.find({Author:&quot;Poe&quot;}).explain(&quot;executionState&quot;), completes the command to specify the winning plan for query.&lt;/p&gt;
&lt;p&gt;db.test.find({Title:&quot;The Raven&quot;}).explain(&quot;executionState&quot;)&lt;/p&gt;
&lt;p&gt;db.test.getIndexes()&lt;/p&gt;
&lt;p&gt;db.test.find({Author:&quot;Poe&quot;, Title:&quot;The Raven&quot;}).explain(&quot;executionState&quot;)&lt;/p&gt;
&lt;p&gt;db.test.find({Author:&quot;Poe&quot;}).explain(&quot;querPlanner&quot;)&lt;/p&gt;
&lt;p&gt;db.test.find({Author:&quot;Poe&quot;}).explain(&quot;allPlansExecution&quot;)&lt;/p&gt;

&lt;p&gt;&lt;span&gt;MongoDB replication:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;previous redundancy&lt;/li&gt;
&lt;li&gt;Increase data availablity&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;50C948A20EA8408CBEF6AA2B21A4574E&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Replica set is a group of instances&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;primary&lt;/li&gt;
&lt;li&gt;secondary&lt;/li&gt;
&lt;li&gt;optional arbiter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use asynchronous replication&lt;/li&gt;
&lt;li&gt;Support automatic failover&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Replica Set Architectures&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Affects the capacity and capability&lt;/li&gt;
&lt;li&gt;Three-member replica set is common&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Provides redundancy and fault tolerance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Complexity should be avoided&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Strategies for Designing Replica Sets&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Determine the number of member required&lt;/li&gt;
&lt;li&gt;Deploy odd numbers&lt;/li&gt;
&lt;li&gt;Consider fault tolerance&lt;/li&gt;
&lt;li&gt;Support dedicated functions using hidden members&lt;/li&gt;
&lt;li&gt;Load balance&lt;/li&gt;
&lt;li&gt;Foresee added demand and adjust&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Plannign Deployment&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;D6D88474271F47429840FBF08B5BDC94&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Replica Set High Availability&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Uses automatic failover&lt;/li&gt;
&lt;li&gt;Secondary becomes primary&lt;/li&gt;
&lt;li&gt;Usually does not require mannual intervention&lt;/li&gt;
&lt;li&gt;Replica set holds an election&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Replica Set Elections&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Used to determain the number to become the primary&lt;/li&gt;
&lt;li&gt;Each time primary becomes unavailable&lt;/li&gt;
&lt;li&gt;Each time a replica set is initated&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;A6553E6B6B894FAEAD9338D0F6C366E2&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Rollbacks During Failover&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Revers writes on a former primary&lt;/li&gt;
&lt;li&gt;Required only if primary had accepted writes the secondary's had NOT successfully replicated&lt;/li&gt;
&lt;li&gt;Used to maintain database consistency&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Read and Write Semantics&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Read operations are consistent with the last write operation&lt;/li&gt;
&lt;li&gt;User can configure read preferences&lt;/li&gt;
&lt;li&gt;May cause eventual consistency&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Write Concern&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Write operations succeeed on all members&lt;/li&gt;
&lt;li&gt;Guarantees consistency of reads from secondary members&lt;/li&gt;
&lt;li&gt;Default only confirm write operations onto the primary&lt;/li&gt;
&lt;li&gt;Can override&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;622825884E8A4969B5645D745CA0208F&quot;/&gt;&lt;/div&gt;
&lt;p&gt;MongoDB: Deploying a Replica Set&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Essentially you are starting mongod as a replica set, changing the current stand alone into a replica set.&lt;/li&gt;
&lt;li&gt;Mongod --port 27017 --dbpath /srv/mongodb/db0 --replSet re0&lt;/li&gt;
&lt;li&gt;Then initialize replica sets with rs.initiate()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Verify the replica set&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li&gt;Add members&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;rs.add(&quot;&amp;lt;hostname&amp;gt;&amp;lt;:port&amp;gt;&quot;), All members of the replica must use the same port&lt;/li&gt;
&lt;li&gt;rs.add(&quot;mongodb1.example.net&quot;)&lt;/li&gt;
&lt;li&gt;rs.add(&quot;mongodb2.example.net&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The new replica set will elect a primary&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;A replica set can have a maximum of seven voting memebers. To add a member to a replica set that already has seven votes, you must either add the member as a non-voting member or remove a vote from an existing member.&lt;/li&gt;
&lt;li&gt;To verify()&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;rs.status()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MongoDB: Managing the Replica Set Oplog&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The oplog (operations log) is a special capped collection that keeps a rolling record of all operations that modify the data stored in your databases&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;997625F368CA4F13B6E7E7B5650E611A&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;MongoDB applies database operations on the primary and then records the operations on the primary's oplog.&lt;/li&gt;
&lt;li&gt;The secondary members then copy and apply these operations in an asynchronous process.&lt;/li&gt;
&lt;li&gt;All replica set members contain a copy of the oplog, in the local.oplog.rs collection.&lt;/li&gt;
&lt;li&gt;To facilitate replication, all replica set members send heartbeats to all other members.&lt;/li&gt;
&lt;li&gt;Any member can import oplog entries from other member&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MongoDB: Replica Set Data Synchronization&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Initial sync copies all the data from one member of the replica set to member&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Clones all databases&lt;/li&gt;
&lt;li&gt;Applies all changes to the data set&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2 methods&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Restart the mongod with an empty data directory and let MongDB's normal initial syncing feature restore the data. This is the more simple option but may take longer to replace the data.&lt;/li&gt;
&lt;li&gt;Restart the mechine with a copy of recent data directory from another member in the replica set. This procedure can replace the data more quickly but requires more manual steps.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Security Introduction&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Users should only have access to data they require&lt;/li&gt;
&lt;li&gt;MongoDB offers:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Authentication mechanisms&lt;/li&gt;
&lt;li&gt;Role-based access control(authorization)&lt;/li&gt;
&lt;li&gt;Auditing&lt;/li&gt;
&lt;li&gt;Encryption&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;59823BEDA07B435A93A13DF775986D2F&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Security Checklist, endure to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Enable authentication and specify the mechanism&lt;/li&gt;
&lt;li&gt;Configure role-based access control - principle of least privilege&lt;/li&gt;
&lt;li&gt;Encrypt communication using SSL&lt;/li&gt;
&lt;li&gt;Limit network exposure&lt;/li&gt;
&lt;li&gt;Audit system activity&lt;/li&gt;
&lt;li&gt;Encrypt system activity&lt;/li&gt;
&lt;li&gt;Run processes using a dedicated user&lt;/li&gt;
&lt;li&gt;Use secure configuration options&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Authentication Overview&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Verifies the identity of the user&lt;/li&gt;
&lt;li&gt;All clients are required to authenticate themselves&lt;/li&gt;
&lt;li&gt;Client users are created in specific databases&lt;/li&gt;
&lt;li&gt;User name and database create a unique user&lt;/li&gt;
&lt;li&gt;All user information stored in the admin database&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Authentication Mechanisms&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Supports:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Challenge and response(MONGODB - CR) - default:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Verifies users using name, password, and database&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;x.509 certificate:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;For use with a secure SSL connection&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kerberos:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Must use configure Kerberos deployment and add user principal to MongoDB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Use &lt;span&gt;authenticateMechanisms to specify the method&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;MongoDB: Enabling Authentication and Specifying an Authenication Mechanism&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;mongod --auth --setParameter authenticationMechanisms=GSSAPI --service&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;AEFCAFE7012C4B82B0948AB6CDB4F555&quot;/&gt;&lt;/div&gt;
&lt;p&gt;MONGODB-CR&lt;/p&gt;
&lt;p&gt;PLAIN&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Configure a Kerberos service principal for each mongod and mongos instance in your MongoDB deployment&lt;/li&gt;
&lt;li&gt;Generate ans distribute keytab files for each MongoDB component(i.e. mongod and mongos) in your deployment. Ensure that you only transmit keytab files over secure channels&lt;/li&gt;
&lt;li&gt;Optional. Start the mongod instance without auth and create users inside of MongoDB that you can use to bootstrap your deployment&lt;/li&gt;
&lt;li&gt;Start mongod and mongos with the KRB5_KTNAME environment variable as well as a number of required run time options&lt;/li&gt;
&lt;li&gt;If you did not create users Kerberos user accounts, you can use the localhost exception to create users at this point until you create the first user on the admin database&lt;/li&gt;
&lt;li&gt;Authenticate clients, including the mongo shell using Kerberos.&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;span&gt;mongo --host mongoserver.xyz.com --authenticationMechanism=GSSAPI --authenticationDatabase=$external --username &lt;a href=&quot;mailto:someuser@xyz.com&quot;&gt;&lt;span&gt;someuser@xyz.com&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;Enabling Client Access Control&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;db.createUser({user:&quot;OurNewAdmin&quot;, pwd:&quot;password&quot;, roles:[{role:&quot;userAdmin&quot;, db:&quot;test&quot;}]})&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;FC8E514CCF6A493FA9D8F503427E47EE&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;mongod --auth --config C:/mongodb/mongod.config&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;9042E4067F364814B9AAD522DBDAD37F&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;Configuring Role-based Access Control&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;db.getUsers()&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;2EC5CEF5C8DB41CEAF460179D3CD68AB&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;db.getUser(&quot;jdoe&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;07A6A686C55F42CE87D77A3B3D5C4236&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;db.removeUser(&quot;jdoe&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;865E4FF43B7541B1A5D0259CB1EAE7C2&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;db.dropUser(&quot;OurNewAdmin&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;212BF8B6F20946CF87924FD55FDB781D&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;MongoDB: Configuring System Events Auditing&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;mongod --dbpath C:/mongodb/data/db/ --auditDestination syslog&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;75AB42E4D5584343AFAD42DC0202A8F6&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;mongod --dbpath data/db --auditDestination console&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For debugging purpose, when you want to output rhe system event logs to the screen.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;mongod --dbpath data/db --auditDestination file --auditFormat JSON --auditPath data/db/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configfuring Support for SSL&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Before you can use SSL, you must have a .pem file containing a public key certificate and its associate private key.&lt;/li&gt;
&lt;li&gt;Self Signed Cert on Unix/Linux /etc/ssl/ openssl req -newkey rsa:2048 -new -x509 -days 365 -nodes -out mongodb -cert.crt -keyout&lt;/li&gt;
&lt;li&gt;Create Pem file&lt;/li&gt;
&lt;li&gt;mongod --sslMode requireSSL --sslPEMKeyFile &amp;lt;pem&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;18AF64512B734044AB6F2C0397EC35AB&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;You may also specify these options in the configuration file, as in the following example:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li&gt;sslMode = requireSSL&lt;/li&gt;
&lt;li&gt;sslPEMKeyFile = /etc/ssl/mongodb.pem&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;01DBAEB3C1A24B968A8BF1250DCD1AC2&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;F6C1B5AE55924BF4A63330D6E166F5F3&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;157E9C045F3B4E87953EB80DFA99826A&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;75EF39D5E039401C97E65C4D9EFE2FCD&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;A9D8F4D4F25F4FA29BADAFDA79B9DCEF&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;1D1F32335FB147C5B753B8B2D2F3CE02&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;BFF7E72654064689BBF873D329374D99&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;E0BD8B54895242F8986163CF0F8BBFDC&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;0AEF759C5CD7460082A9A1DDC7549E1D&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 23 Feb 2018 07:27:00 +0000</pubDate>
<dc:creator>Shirley_BHU</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shirley-bhu/p/8462222.html</dc:identifier>
</item>
<item>
<title>Python基础——输出[print()]与输入[input()] - SmallWZQ</title>
<link>http://www.cnblogs.com/SmallWZQ/p/8461540.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SmallWZQ/p/8461540.html</guid>
<description>&lt;p&gt;　　&lt;span&gt;&lt;em&gt;&lt;strong&gt;Python版本：3.6.2  操作系统：Windows  作者：SmallWZQ&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/em&gt;Python是一种面向对象的解释型计算机程序设计语言，Python的特点是“简单”、“明确”和“优雅”。Python的语法比较简单，编写代码时：采用缩进方式（这是Python的一大特性）。&lt;/p&gt;
&lt;p&gt;　　代码示例如下：　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; a = 100
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出a的值&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a) 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; a &amp;gt;=&lt;span&gt;0:
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(-a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在python中，以&lt;span&gt;#&lt;/span&gt;开头的语句是&lt;span&gt;注释&lt;/span&gt;。其他每一行都是一个语句，当语句以&lt;span&gt;冒号:&lt;/span&gt;结尾时，缩进的语句视为&lt;span&gt;代码块&lt;/span&gt;。 &lt;/p&gt;
&lt;p&gt;　　缩进有利有弊。优点主要有二：&lt;/p&gt;
&lt;p&gt;　　优点一：强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用4个空格的缩进；&lt;/p&gt;
&lt;p&gt;　　优点二：强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;输出（print()）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;在Python 3.x版本中，print是函数。这意味着需要编写print(42)而不是print 42。除此之外，它的工作方式和之前的2.x版本差不多。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　用&lt;span&gt;print()&lt;/span&gt;在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出’hello, world’，用代码实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出字符串“hello world”&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello world!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：&lt;/p&gt;
&lt;p&gt;　　print()会依次打印每个字符串，遇到逗号“,”会输出一个空格。 &lt;/p&gt;
&lt;p&gt;　　示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print()函数可以接受多个并列的字符串&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Happy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;New&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;!!!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　print()也可以打印整数，或者计算结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;(888&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 888
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;整数相加，不能加引号，否则将输出字符串&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;(700+188&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 888
&lt;span&gt;6&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;700+188&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 700+188
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　print()函数用法总结如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print()总结&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不要忘记英文版逗号“,”&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Jack:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,22&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; Jack: 22
&lt;span&gt; 5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(1,2,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 1 2 3
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出元祖必须这样输出；&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;((1,2,3&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; (1, 2, 3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;变量也是可以的&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;peace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(name,22&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; peace 22
&lt;span&gt;15&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以使用‘+’连接字符串&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;peace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;hello,peace
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　特别地，正如代码注释所示：对于700+188，Python解释器自动计算出结果888，但是，&lt;code&gt;'700+188'&lt;/code&gt;是字符串而非数学公式，Python把它视为字符串。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;输入（input()）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　Python 3.x版本中input()取代了之前2.x版本中的raw_input()，2.x版本中的input()不再使用。&lt;/p&gt;
&lt;p&gt;　　Python 3.x版本提供了输入函数——input()。input()用法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;input()用法&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;name =&lt;span&gt; input()
Jack
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出结果含有引号‘’&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Jack&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果不包含引号&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(name)
Jack&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;phone = input()&lt;br/&gt;0571-8877&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;phone&lt;br/&gt;'0571-8877'&lt;br/&gt;#结果输出的是字符串&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　input()可以让用户输入数字，包括int类型，Float类型等等。&lt;/p&gt;
&lt;p&gt;　　代码示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;input()默认用户输入字符串&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用户输入int整数&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;num =&lt;span&gt; int(input())
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 12
&lt;span&gt; 5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;num
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 12
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;数字12没有引号哟&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;num_float =&lt;span&gt; float(input())
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 12.34
&lt;span&gt;10&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt;num_float
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 12.34
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注：input()默认用户输入的内容为字符串，如果需要输入数字，需要强制转换，务必加上int()、float()等。&lt;/p&gt;
</description>
<pubDate>Fri, 23 Feb 2018 07:23:00 +0000</pubDate>
<dc:creator>SmallWZQ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SmallWZQ/p/8461540.html</dc:identifier>
</item>
<item>
<title>mongodb window安装配置 - 两面一汤</title>
<link>http://www.cnblogs.com/lmyt/p/8462167.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lmyt/p/8462167.html</guid>
<description>&lt;p&gt;下载mongodb安装包&lt;/p&gt;
&lt;p&gt;1.&lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223150148621-1606590960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;https://www.mongodb.org/dl/win32/x86_64-2008plus-ssl?_ga=2.233271640.711265466.1519368764-1223643675.1519368764   这里是所有历史版本&lt;/p&gt;
&lt;p&gt;首先声明下，我下载了&lt;span&gt;此时最新版本3.6.3怎么安装都是报错，闪退，寻找各种办法都没有能够解决&lt;/span&gt;，最后降低版本安装才得以成功，我下载的版本是3.4.0&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解压安装mongodb，我是安装在d:/MongoDB目录下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.创建必须的文件夹&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223150301294-968895599.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;在 d:/MongoDB文件夹下创建data，然后在d:/MongoDB/data文件夹下分别创建db和log文件夹&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先配置数据的目录，例如我想存放在D:\mongodb\data\db这个目录下，我们在运行cmd.exe进入dos命令界面,然后进入cd D:\mongodb\bin目录下，运行mongod.exe命令，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223150724926-370264868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223150739618-2133105365.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 配置日志路径，例如我想存放在D:\mongodb\data\log 这个目录下，我们在运行cmd.exe进入dos命令界面,然后进入cd D:\mongodb\bin目录下，运行mongod.exe命令mongod.exe --logpath=D:\mongodb\data\log\mongodb.log ，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223150809418-1441997597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.测试运行是否正常&lt;/p&gt;
&lt;p&gt;  我们在运行cmd.exe进入dos命令界面,然后进入cd D:\mongodb\bin目录下，运行mongo命令，测试一下连接，如图所示： &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150315153804241?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;出现错误&lt;/p&gt;
&lt;p&gt;  说明：没有启动服务器，我们需要自己配置MongoDB服务器，我们在D:\mongodb目录下，创建一个mongodb.config 配置文件，有两个属性logpath和dbpath，分别设定值，就是刚才我们配置的路径,如图所示：&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150315153717046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; mongod.exe  --config d:\mongodb\mongodb.config来启动MongoDB服务器，--config 选项表示启动时通过d:\mongodb\mongodb.config配置文件的信息配置服务器。如图所示：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150315153924113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  这个dos命令界面先不要关闭，MongoDB服务器在运行，我在新打开一个dos命令界面，先进入到cd D:\mongodb\bin目录下，然后在运行mongo命令测试一下链接，如图所示：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150315153954112?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;说明这时配置成功。&lt;/p&gt;

&lt;p&gt;4.添加MongoDB到window service&lt;/p&gt;
&lt;p&gt;我们当我们把运行MongoDB服务器的dos命令界面关掉，这样我们就不能链接MongoDB，我们需要像mySql那样，添加到Windows Service，然后在命令行上启动服务和关闭服务，这样方便我们操作和管理服务。&lt;/p&gt;
&lt;p&gt; 我们接下来需要把MongoDB到Windows Service，用到的命令是--install设定安装MongoDB为服务器到Windows Service&lt;/p&gt;
&lt;p&gt;第一步：执行—install,以管理员的启动cmd, 进入dos命令界面，先进入到cd D:\mongodb\bin目录下，执行&lt;/p&gt;
&lt;p&gt;D:\mongodb\bin&amp;gt;mongod.exe --dbpath=d:\mongodb\data\db --logpath=d:\mongodb\data\log\log.txt  --install --serviceName &quot;MongoDB&quot;  如图所示：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;http://img.blog.csdn.net/20150315154026011?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150315154212703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 第二步：启动/关闭MongoDB服务&lt;/p&gt;
&lt;p&gt;   netstart mongodb 启动MongoDB服务&lt;/p&gt;
&lt;p&gt;  net stop mongodb 启动MongoDB服&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150315154257288?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29uZ2Nvbmc2OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.此时我们打开mongo.exe&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223151143623-944274923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器打开http://127.0.0.1:27017，可以看到以下界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1029816/201802/1029816-20180223151158100-433234132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 23 Feb 2018 07:16:00 +0000</pubDate>
<dc:creator>两面一汤</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lmyt/p/8462167.html</dc:identifier>
</item>
<item>
<title>requireJs使用 - 郭林涛</title>
<link>http://www.cnblogs.com/guolintao/p/8462084.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guolintao/p/8462084.html</guid>
<description>&lt;h2 id=&quot;require.js&quot;&gt;require.js&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用require.js的第一步，是先去官方网站下载最新版本。&lt;br/&gt;下载后，假定把它放在js子目录下面，就可以加载了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script src=&quot;js/require.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;有人可能会想到，加载这个文件，也可能造成网页失去响应。解决办法有两个，一个是把它放在网页底部加载，另一个是写成下面这样：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　&amp;lt;script src=&quot;js/require.js&quot; defer async=&quot;true&quot; &amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;async属性表明这个文件需要异步加载，避免网页失去响应。IE不支持这个属性，只支持defer，所以把defer也写上。&lt;br/&gt;加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　&amp;lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;data-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;主模块的写法&quot;&gt;主模块的写法&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;上一节的main.js，我把它称为&quot;主模块&quot;，意思是整个网页的入口代码。它有点像C语言的main()函数，所有代码都从这儿开始运行。&lt;br/&gt;下面就来看，怎么写main.js。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如果我们的代码不依赖任何其他模块，那么可以直接写入javascript代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　　// main.js
　　alert(&quot;加载成功！&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;但这样的话，就没必要使用require.js了。真正常见的情况是，主模块依赖于其他模块，这时就要使用AMD规范定义的的require()函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　// main.js
　　require(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){
　　　　// some code here
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;require()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是['moduleA', 'moduleB', 'moduleC']，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;require()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;下面，我们看一个实际的例子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;假定主模块依赖jquery、underscore和backbone这三个模块，main.js就可以这样写：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){
　　　　// some code here
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;require.js会先加载jQuery、underscore和backbone，然后再运行回调函数。主模块的代码就写在回调函数中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;模块的加载&quot;&gt;模块的加载&lt;/h2&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;上一节最后的示例中，主模块的依赖模块是['jquery', 'underscore', 'backbone']。默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　　require.config({
　　　　paths: {
　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,
　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,
　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;
　　　　}
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　　require.config({
　　　　paths: {
　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,
　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,
　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;
　　　　}
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;另一种则是直接改变基目录（baseUrl）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　　require.config({
　　　　baseUrl: &quot;js/lib&quot;,
　　　　paths: {
　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,
　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,
　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;
　　　　}
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如果某个模块在另一台主机上，也可以直接指定它的网址，比如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;require.config({
　　　　paths: {
　　　　　　&quot;jquery&quot;: &quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;
　　　　}
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;amd-模块的写法&quot;&gt;AMD 模块的写法&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;require.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。&lt;br/&gt;具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。&lt;br/&gt;假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　// math.js
　　define(function (){
　　　　var add = function (x,y){
　　　　　　return x+y;
　　　　};
　　　　return {
　　　　　　add: add
　　　　};
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;加载方法如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　// main.js
　　require(['math'], function (math){
　　　　alert(math.add(1,1));
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　　define(['myLib'], function(myLib){
　　　　function foo(){
　　　　　　myLib.doSomething();
　　　　}
　　　　return {
　　　　　　foo : foo
　　　　};
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;当require()函数加载上面这个模块的时候，就会先加载myLib.js文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;加载非规范模块&quot;&gt;加载非规范模块&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。那么，require.js是否能够加载非规范的模块呢？&lt;br/&gt;回答是可以的。&lt;br/&gt;这样的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。&lt;br/&gt;举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　require.config({
　　　　shim: {

　　　　　　'underscore':{
　　　　　　　　exports: '_'
　　　　　　},
　　　　　　'backbone': {
　　　　　　　　deps: ['underscore', 'jquery'],
　　　　　　　　exports: 'Backbone'
　　　　　　}
　　　　}
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;require.config()接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。&lt;br/&gt;比如，jQuery的插件可以这样定义：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　shim: {
　　　　'jquery.scroll': {
　　　　　　deps: ['jquery'],
　　　　　　exports: 'jQuery.fn.scroll'
　　　　}
　　}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;require.js插件&quot;&gt;require.js插件&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;require.js还提供一系列插件，实现一些特定的功能。&lt;br/&gt;domready插件，可以让回调函数在页面DOM结构加载完成后再运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　require(['domready!'], function (doc){
　　　　// called once the DOM is ready
　　});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;text和image插件，则是允许require.js加载文本和图片文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;　define([
　　　　'text!review.txt',
　　　　'image!cat.jpg'
　　　　],

　　　　function(review,cat){
　　　　　　console.log(review);
　　　　　　document.body.appendChild(cat);
　　　　}
　　);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;类似的插件还有json和mdown，用于加载json文件和markdown文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;1.7441860465116&quot;&gt;
&lt;p&gt;转自阮一峰个人博客：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/11/require_js.html&quot;&gt;Javascript模块化编程（三）：require.js的用法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 23 Feb 2018 07:01:00 +0000</pubDate>
<dc:creator>郭林涛</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guolintao/p/8462084.html</dc:identifier>
</item>
<item>
<title>python 3.x 爬虫基础---Urllib详解 - 王延领</title>
<link>http://www.cnblogs.com/kmonkeywyl/p/8458442.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kmonkeywyl/p/8458442.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/python%203.x%20爬虫基础---http%20headers详解&quot; target=&quot;_blank&quot;&gt;python 3.x 爬虫基础---http headers详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8458442.html&quot;&gt;python 3.x 爬虫基础---Urllib详解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　爬虫也了解了一段时间了希望在半个月的时间内结束它的学习，开启python的新大陆，今天大致总结一下爬虫基础相关的类库---&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8458442.html&quot;&gt;Urllib&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt; 官方文档地址：&lt;a href=&quot;https://docs.python.org/3/library/urllib.html&quot;&gt;https://docs.python.org/3/library/urllib.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;urllib提供了一系列用于操作URL的功能。&lt;/p&gt;
&lt;p&gt;Python3中将python2.7的urllib和urllib2两个包合并成了一个urllib库，其主要包括一下模块：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;urllib.request 请求模块&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;urllib.error 异常处理模块&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;urllib.parse url解析模块&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;urllib.robotparser robots.txt解析模块&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;urllib.request.urlopen&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223114901676-1845946356.png&quot; alt=&quot;&quot; width=&quot;513&quot; height=&quot;361&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过案例可以看出urlopen，会返回一个二进制的对象，对这个对象进行read（）操作可以得到一个包含网页的二进制字符串，然后用decode()解码成一段html代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;urlopen参数如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用参数：&lt;/p&gt;
&lt;p&gt;　　url:访问的地址，一般不只是地址。&lt;/p&gt;
&lt;p&gt;　　data:此参数为可选字段，特别要注意的是，如果选择，请求变为post传递方式,其中传递的参数需要转为bytes，如果是我们只需要通过 &lt;span class=&quot;cnblogs_code&quot;&gt;urllib.parse.urlencode&lt;/span&gt; 转换即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.parse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
data &lt;/span&gt;= bytes(urllib.parse.urlencode({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}), encoding=  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
response &lt;/span&gt;= urllib.request.urlopen(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xxxxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, data=&lt;span&gt;data)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　timeout:设置网站的访问超时时间&lt;/p&gt;
&lt;p&gt;其他参数：&lt;/p&gt;
&lt;p&gt;　　context 参数：它必须是 ssl.SSLContext 类型，用来指定 SSL 设置。&lt;/p&gt;
&lt;p&gt;　　cafile 和 capath 两个参数：是指定CA证书和它的路径，这个在请求 HTTPS 链接时会有用。&lt;/p&gt;
&lt;p&gt;　　cadefault 参数：现在已经弃用了，默认为 False &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;urlopen返回对象提供方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　read() , readline() ,readlines() , fileno() , close() ：对HTTPResponse类型数据进行操作。&lt;/p&gt;
&lt;p&gt;　　info()：返回HTTPMessage对象，表示远程服务器返回的头信息。&lt;/p&gt;
&lt;p&gt;　　getcode()：返回Http状态码。&lt;/p&gt;
&lt;p&gt;　　geturl()：返回请求的url。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d340907a-0a61-4de9-be9e-46c8ad0bf3d8')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_d340907a-0a61-4de9-be9e-46c8ad0bf3d8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d340907a-0a61-4de9-be9e-46c8ad0bf3d8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d340907a-0a61-4de9-be9e-46c8ad0bf3d8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d340907a-0a61-4de9-be9e-46c8ad0bf3d8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
response &lt;/span&gt;= urllib.request.urlopen(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://python.org/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看 response 的返回类型：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,type(response))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看反应地址信息: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,response)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看头部信息1(http header)：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,response.info())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看头部信息2(http header)：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,response.getheaders())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输出头部属性信息：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,response.getheader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看响应状态信息1(http status)：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,response.status)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看响应状态信息2(http status)：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,response.getcode())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查看响应 url 地址：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,response.geturl())
page &lt;/span&gt;=&lt;span&gt; response.read()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输出网页源码:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,page.decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;urllib.request.&lt;strong&gt;Request&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
headers &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;www.xicidaili.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/json, text/javascript, */*; q=0.01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
           &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Referer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.xicidaili.com/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, }
req &lt;/span&gt;= urllib.request.Request(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.xicidaili.com/nn/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, headers=&lt;span&gt;headers)
response &lt;/span&gt;=&lt;span&gt; urllib.request.urlopen(req)
html &lt;/span&gt;= response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过代码我们可以看出urlopen不再是传递url了,而是一个 request。这样一来我们不带把请求独立成一个对象，而且能更加灵活方便的配置访问参数，这是爬虫http必不可少的一步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Request参数如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用参数：　　&lt;/p&gt;
&lt;p&gt;　　url:访问的地址。&lt;/p&gt;
&lt;p&gt;　　data:此参数为可选字段，其中传递的参数需要转为bytes，如果是字典我们只需要通过 &lt;span class=&quot;cnblogs_code&quot;&gt;urllib.parse.urlencode 转换即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　  headers:http相应headers传递的信息，构造方法：headers 参数传递，通过调用 Request 对象的 add_header() 方法来添加请求头。&lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/python%203.x%20爬虫基础---http%20headers详解&quot; target=&quot;_blank&quot;&gt;python 3.x 爬虫基础---http headers详解&lt;/a&gt;，可参考此文章。&lt;/p&gt;
&lt;p&gt;其他参数：&lt;/p&gt;
&lt;p&gt;　　origin_req_host ：指的是请求方的 host 名称或者 IP 地址。&lt;/p&gt;
&lt;p&gt;　　unverifiable ：用来表明这个请求是否是无法验证的，默认是 False 。意思就是说用户没有足够权限来选择接收这个请求的结果。如果没有权限，这时 unverifiable 的值就是 True 。&lt;/p&gt;
&lt;p&gt;　　method ：用来指示请求使用的方法，比如 GET ， POST ， PUT 等&lt;/p&gt;
&lt;h2&gt;urllib.request.ProxyHandler（ip代理）&lt;/h2&gt;
&lt;p&gt;以上做些简单的demo是没有问题的，但是如果想让你的爬虫更加强大，那么 &lt;span class=&quot;cnblogs_code&quot;&gt;rulllib.request.ProxyHandler&lt;/span&gt; 设置代理你一定要知道，网站它会检测某一段时间某个IP 的访问次数，如果访问次数过多，它会禁止你的访问,所以这个时候需要通过设置代理来爬取数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ef Proxy_read(proxy_list, user_agent_list, i):
    proxy_ip &lt;/span&gt;=&lt;span&gt; proxy_list[i]
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;当前代理ip：%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;proxy_ip)
    user_agent &lt;/span&gt;=&lt;span&gt; random.choice(user_agent_list)
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;当前代理user_agent：%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;user_agent)
    sleep_time &lt;/span&gt;= random.randint(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;等待时间：%s s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;sleep_time)
    time.sleep(sleep_time)
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始获取&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    headers &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: user_agent,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/json, text/javascript, */*; q=0.01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Referer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
    proxy_support &lt;/span&gt;= request.ProxyHandler({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:proxy_ip})
    opener &lt;/span&gt;=&lt;span&gt; request.build_opener(proxy_support)
    request.install_opener(opener)
    req &lt;/span&gt;= request.Request(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/kmonkeywyl/p/8409715.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,headers=&lt;span&gt;headers)
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        html &lt;/span&gt;= request.urlopen(req).read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    except Exception &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; e:
        print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;******打开失败！******&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; count
    count &lt;/span&gt;+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OK!总计成功%s次！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%count)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码是前段时间写的刷新页面的但是没有达到想要的效果，不过里面有用到 &lt;span class=&quot;cnblogs_code&quot;&gt;request.ProxyHandler({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:proxy_ip})&lt;/span&gt; 。其中 &lt;span class=&quot;cnblogs_code&quot;&gt;urllib.request.build_opener()&lt;/span&gt;  方法来利用这个处理器构建一个 Opener ，那么这个 Opener 在发送请求的时候就具备了认证功能了。 &lt;span class=&quot;cnblogs_code&quot;&gt;request.install_opener(opener)&lt;/span&gt; 方法打开链接，就可以完成认证了。&lt;/p&gt;
&lt;h2&gt;urllib.request.HTTPCookieProcessor（cookie操作）&lt;/h2&gt;
&lt;p&gt;网站中通过cookie进行判断权限是很常见的。那么我们可以通过 &lt;span class=&quot;cnblogs_code&quot;&gt;urllib.request.HTTPCookieProcessor(cookie)&lt;/span&gt;  来操作cookie。使用Cookie和使用代理IP一样，也需要创建一个自己的opener。在HTTP包中，提供了cookiejar模块，用于提供对Cookie的支持。 http.cookiejar功能强大，我们可以利用本模块的CookieJar类的对象来捕获cookie并在后续连接请求时重新发送，比如可以实现模拟登录功能。该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取cookie( CookieJar)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3bb50644-3dde-49c1-9a7f-d36c506c67f3')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3bb50644-3dde-49c1-9a7f-d36c506c67f3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3bb50644-3dde-49c1-9a7f-d36c506c67f3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3bb50644-3dde-49c1-9a7f-d36c506c67f3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3bb50644-3dde-49c1-9a7f-d36c506c67f3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; http.cookiejar, urllib.request
cookie &lt;/span&gt;=&lt;span&gt; http.cookiejar.CookieJar()
handler &lt;/span&gt;=&lt;span&gt; urllib.request.HTTPCookieProcessor(cookie)
opener &lt;/span&gt;=&lt;span&gt; urllib.request.build_opener(handler)
response &lt;/span&gt;= opener.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cookie:
   &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(item.name+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+item.value)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223134003127-820536744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保存cookie(MozillaCookieJar)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f580984e-a128-4351-a2f5-92dd9d85afe7')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f580984e-a128-4351-a2f5-92dd9d85afe7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f580984e-a128-4351-a2f5-92dd9d85afe7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f580984e-a128-4351-a2f5-92dd9d85afe7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f580984e-a128-4351-a2f5-92dd9d85afe7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
filename = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cookie.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  
cookie &lt;/span&gt;=&lt;span&gt; http.cookiejar.MozillaCookieJar(filename)  
handler &lt;/span&gt;=&lt;span&gt; urllib.request.HTTPCookieProcessor(cookie)  
opener &lt;/span&gt;=&lt;span&gt; urllib.request.build_opener(handler)  
response &lt;/span&gt;= opener.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  
cookie.save(ignore_discard&lt;/span&gt;=True, ignore_expires=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223135055598-212459083.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;298&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用cookie&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('94758ea7-8c9e-427e-a49a-2d195af82f44')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_94758ea7-8c9e-427e-a49a-2d195af82f44&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94758ea7-8c9e-427e-a49a-2d195af82f44&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('94758ea7-8c9e-427e-a49a-2d195af82f44',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94758ea7-8c9e-427e-a49a-2d195af82f44&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; http.cookiejar, urllib.request
cookie &lt;/span&gt;=&lt;span&gt; http.cookiejar.MozillaCookieJar()
cookie.load(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cookie.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, ignore_discard=True, ignore_expires=&lt;span&gt;True)
handler &lt;/span&gt;=&lt;span&gt; urllib.request.HTTPCookieProcessor(cookie)
opener &lt;/span&gt;=&lt;span&gt; urllib.request.build_opener(handler)
response &lt;/span&gt;= opener.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223142831607-686317318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 其中FileCookieJar、MozillaCookieJar、LWPCookieJar约为保存cookie信息，只是保存格式不同。我们在进行操作cookie时使用对应的格式即可。&lt;/p&gt;

&lt;p&gt;　　用 try-except来捕捉异常,主要的错误方式就两种 URLError（错误信息）和HTTPError(错误编码).&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    data&lt;/span&gt;=&lt;span&gt;urllib.request.urlopen(url)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(data.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; urllib.error.HTTPError as e:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(e.code)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; urllib.error.URLError as e:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(e.reason)
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;urllib.parse.urlparse&lt;/h2&gt;
&lt;p&gt;将对应的URL解析成六部分，并以元组的数据格式返回来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.parse
o &lt;/span&gt;= urllib.parse.urlparse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/kmonkeywyl/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(o)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223140928267-1574353632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;result = urlparse('url',scheme='https')解析协议 可以去掉http://&lt;/p&gt;
&lt;p&gt;result = urlparse('url',scheme='http')&lt;/p&gt;
&lt;p&gt;result = urlparse('url',allow_fragments=False) url带有查询参数&lt;/p&gt;
&lt;p&gt;result = urlparse('url',allow_fragments=False) url不带有查询参数&lt;/p&gt;
&lt;h2&gt;urllib.parse.urlunparse&lt;/h2&gt;
&lt;p&gt;拼接url&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; urllib.parse &lt;span&gt;
data &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a=1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(urllib.parse.urlunparse(data))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223141604604-58962483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;urllib.parse.urljoin&lt;/h2&gt;
&lt;p&gt;用来拼接url的方法 或者叫组合方法,url必须为一致站点,否则后面参数会覆盖前面的host&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; urllib.parse &lt;span&gt;import&lt;/span&gt;&lt;span&gt; urljoin
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(urljoin(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FAQ.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(urljoin(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.badiu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com/FAQ.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(urljoin(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com/about.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com/FAQ.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(urljoin(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www.baidu.com#comment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;?category=2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个在这个就不过多的介绍了，有兴趣的可以去看资料。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201802/688939-20180223142104028-1908025580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 23 Feb 2018 06:24:00 +0000</pubDate>
<dc:creator>王延领</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kmonkeywyl/p/8458442.html</dc:identifier>
</item>
<item>
<title>SSE图像算法优化系列十六：经典USM锐化中的分支判断语句SSE实现的几种方法尝试。 - Imageshop</title>
<link>http://www.cnblogs.com/Imageshop/p/8461025.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Imageshop/p/8461025.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　分支判断的语句一般来说是不太适合进行SSE优化的，因为他会破坏代码的并行性，但是也不是所有的都是这样的，在合适的场景中运用SSE还是能对分支预测进行一定的优化的，我们这里以某一个算法的部分代码为例进行讲解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;在某一个版本的USM锐化算法中有这样的一段代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;int&lt;/span&gt; IM_UnsharpMask(unsigned &lt;span&gt;char&lt;/span&gt; *Src, unsigned &lt;span&gt;char&lt;/span&gt; *Dest, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt; Stride, &lt;span&gt;int&lt;/span&gt; Radius, &lt;span&gt;int&lt;/span&gt; Amount, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Threshold)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Channel = Stride /&lt;span&gt; Width;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Src == NULL) || (Dest == NULL))                                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_NULLREFRENCE;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Width &amp;lt;= &lt;span&gt;0&lt;/span&gt;) || (Height &amp;lt;= &lt;span&gt;0&lt;/span&gt;))                                  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Channel != &lt;span&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;3&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;4&lt;/span&gt;))             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Status =&lt;span&gt; IM_STATUS_OK;

    Status &lt;/span&gt;=&lt;span&gt; IM_ExpBlur(Src, Dest, Width, Height, Stride, Radius);  　　//　　这里标准过程是用IM_GaussBlur代替
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Status != IM_STATUS_OK)    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Status;

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; Inv255 = &lt;span&gt;1.0f&lt;/span&gt; / &lt;span&gt;255.0f&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; *Table = (&lt;span&gt;int&lt;/span&gt; *)malloc(&lt;span&gt;511&lt;/span&gt; * &lt;span&gt;256&lt;/span&gt; * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Table == NULL)    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_OUTOFMEMORY;

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = &lt;span&gt;0&lt;/span&gt;; Y &amp;lt; &lt;span&gt;256&lt;/span&gt;; Y++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; TempUp = Amount * sqrtf(&lt;span&gt;1.0f&lt;/span&gt; - Y * Inv255) / &lt;span&gt;100.0f&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; TempDown = Amount * sqrtf(Y * Inv255) / &lt;span&gt;100.0f&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; X = -&lt;span&gt;255&lt;/span&gt;; X &amp;lt;= &lt;span&gt;255&lt;/span&gt;; X++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Diff =&lt;span&gt; X;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Diff &amp;gt;=&lt;span&gt; Threshold)
            {
                Diff &lt;/span&gt;-=&lt;span&gt; Threshold;
                Table[((X &lt;/span&gt;+ &lt;span&gt;255&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;8&lt;/span&gt;) + Y] = IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;(Diff * TempUp + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Y);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (Diff &amp;lt; -&lt;span&gt;Threshold)
            {
                Diff &lt;/span&gt;+=&lt;span&gt; Threshold;
                Table[((X &lt;/span&gt;+ &lt;span&gt;255&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;8&lt;/span&gt;) + Y] = IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;(Diff * TempDown + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Y);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                Table[((X &lt;/span&gt;+ &lt;span&gt;255&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;8&lt;/span&gt;) + Y] = Y;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    不做变化&lt;/span&gt;
&lt;span&gt;            }
        }
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = &lt;span&gt;0&lt;/span&gt;; Y &amp;lt; Height * Stride; Y++)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    分四路并行速度只有一点点提高&lt;/span&gt;
&lt;span&gt;    {
        Dest[Y] &lt;/span&gt;= Table[((Src[Y] - Dest[Y] + &lt;span&gt;255&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;8&lt;/span&gt;) +&lt;span&gt; Src[Y]];
    }

    free(Table);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_OK;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个USM锐化的算法参考自：&lt;a href=&quot;https://github.com/pluginguy/plugins/tree/master/USM2&quot; target=&quot;_blank&quot;&gt;https://github.com/pluginguy/plugins/tree/master/USM2&lt;/a&gt;，源代码中的算法还提供了对高光、暗调和中间调进行不同调节的参数，我这里对他那个代码进行了适度的修改和简化，并且用查找表进行了优化。这个github的作者还提供了关于高斯模糊方面的资料，是个不错的参考点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;上述代码起始已经很高效了，复杂的浮点和开方计算都已经用查表的形式进行了简化，实测一副1080P的24位图像大处理时间大约在14.5ms左右，而其中的IM_ExpBlur耗时约有6.75ms，建立查找表花了0.75ms，后面的遍历图像进行查找表替换使用了7ms，注意前面的IM_ExpBlur的时间是已经进行了SSE编码后的优化时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;查找表其实本身也是个耗时的工作，因为这个可能有着严重的cache miss，特别是查找表比较大的时候。但是查找表本身呢在目前SIMD框架下是无法使用SSE优化的（除非是16个字节的查找表，可以使用_mm_shuffle_epi8来优化），因此，如果查找表本身的建立算法并不特别复杂，是可以考虑使用SSE来对表中每个元素进行直接的实现的，鉴于此，我们来考虑上述代码的查找表的直接SSE实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;为了表示清楚，我们把上述算法的非查找表方式实现的代码整理出来如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; IM_UnsharpMask(unsigned &lt;span&gt;char&lt;/span&gt; *Src, unsigned &lt;span&gt;char&lt;/span&gt; *Dest, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt; Stride, &lt;span&gt;int&lt;/span&gt; Radius, &lt;span&gt;int&lt;/span&gt; Amount, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Threshold)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Channel = Stride /&lt;span&gt; Width;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Src == NULL) || (Dest == NULL))                                　　&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_NULLREFRENCE;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Width &amp;lt;= &lt;span&gt;0&lt;/span&gt;) || (Height &amp;lt;= &lt;span&gt;0&lt;/span&gt;))                                    　&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Channel != &lt;span&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;3&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;4&lt;/span&gt;))                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Status =&lt;span&gt; IM_STATUS_OK;

    Status &lt;/span&gt;= IM_ExpBlur(Src, Dest, Width, Height, Stride, Radius);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    这里标准过程是用IM_GaussBlur代替&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (Status != IM_STATUS_OK)    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Status;

    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; Adjust = Amount / &lt;span&gt;100.0f&lt;/span&gt; / sqrtf(&lt;span&gt;255.0f&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = &lt;span&gt;0&lt;/span&gt;; Y &amp;lt; Height * Stride; Y++&lt;span&gt;)                        
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Diff = Src[Y] -&lt;span&gt; Dest[Y];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Diff &amp;gt;=&lt;span&gt; Threshold)
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;((Diff - Threshold) * Adjust * sqrtf(&lt;span&gt;255.0f&lt;/span&gt; - Src[Y]) + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Src[Y]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (Diff &amp;lt; -&lt;span&gt;Threshold)
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;((Diff + Threshold) * Adjust * sqrtf((&lt;span&gt;float&lt;/span&gt;)Src[Y]) + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Src[Y]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            Dest[Y] &lt;/span&gt;= Src[Y];        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    不做变化&lt;/span&gt;
&lt;span&gt;        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_OK;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　注意为减少计算我已经把一些重复的计算提取到Adjust变量中，其中的/sqrtf(255.0f)可以让循环内部的sqrtf的参数少一次乘法计算，并且在后面我们还可以看到他起到了另外一个特殊的作用。运行上述代码的同参数同照片耗时变为了55ms左右，可见查找表的优化也是很给力的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我注意到这段代码已经有很久了，也一直想使用SSE优化他们，但苦于能力，一直未得良方，不过最近过年重新审视这段代码，发现只要手指按住键盘，总会有新大陆发现的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;第一方案&lt;/strong&gt;：既然SSE不太好做分支判断，我就把所有分支的结果都计算出来，最后再根据分支条件做数据融合不就可以了吗，可以肯定SSE计算每个分支的速度肯定比C快，但是如果要每个分支都计算，这个增加的耗时和加速的时间比例如何呢，只有实践才知道，于是我硬着头皮把他们用SSE做个硬编码，代码如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    实在没有好的办法，极端情况下把所有的分支的结果都算出来，然后在最后根据判断条件合成，比如下面的代码，写出来后比原始的查找表方式也还是要快一点的。&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; IM_UnsharpMask(unsigned &lt;span&gt;char&lt;/span&gt; *Src, unsigned &lt;span&gt;char&lt;/span&gt; *Dest, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt; Stride, &lt;span&gt;int&lt;/span&gt; Radius, &lt;span&gt;int&lt;/span&gt; Amount, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Threshold)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Channel = Stride /&lt;span&gt; Width;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Src == NULL) || (Dest == NULL))                                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_NULLREFRENCE;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Width &amp;lt;= &lt;span&gt;0&lt;/span&gt;) || (Height &amp;lt;= &lt;span&gt;0&lt;/span&gt;))                                    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Channel != &lt;span&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;3&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;4&lt;/span&gt;))                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Status =&lt;span&gt; IM_STATUS_OK;

    Status &lt;/span&gt;=&lt;span&gt; IM_ExpBlur(Src, Dest, Width, Height, Stride, Radius);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Status != IM_STATUS_OK)    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Status;

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; Adjust = Amount / &lt;span&gt;100.0f&lt;/span&gt; / sqrt(&lt;span&gt;255.0f&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BlockSize = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Block = (Height * Stride) /&lt;span&gt; BlockSize;

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i Zero =&lt;span&gt; _mm_setzero_si128();
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i ThresholdV =&lt;span&gt; _mm_set1_epi16(Threshold);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i MinusThresholdV = _mm_set1_epi16(-&lt;span&gt;Threshold);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i One = _mm_set1_epi16(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i MinusOne = _mm_set1_epi16(-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128 Const255 = _mm_set1_ps(&lt;span&gt;255.0f&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128 AdjustV =&lt;span&gt; _mm_set1_ps(Adjust);

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = &lt;span&gt;0&lt;/span&gt;; Y &amp;lt; Block * BlockSize; Y +=&lt;span&gt; BlockSize)
    {
        __m128i SrcV &lt;/span&gt;= _mm_unpacklo_epi8(_mm_loadl_epi64((__m128i *)(Src +&lt;span&gt; Y)), Zero);
        __m128i DstV &lt;/span&gt;= _mm_unpacklo_epi8(_mm_loadl_epi64((__m128i *)(Dest +&lt;span&gt; Y)), Zero);
        __m128 SrcL &lt;/span&gt;=&lt;span&gt; _mm_cvtepi32_ps(_mm_unpacklo_epi8(SrcV, Zero));
        __m128 SrcH &lt;/span&gt;=&lt;span&gt; _mm_cvtepi32_ps(_mm_unpackhi_epi8(SrcV, Zero));
        __m128i Diff &lt;/span&gt;=&lt;span&gt; _mm_sub_epi16(SrcV, DstV);
        __m128i DiffA &lt;/span&gt;=&lt;span&gt; _mm_add_epi16(Diff, ThresholdV);
        __m128i DiffS &lt;/span&gt;=&lt;span&gt; _mm_sub_epi16(Diff, ThresholdV);
        __m128 DiffL &lt;/span&gt;=&lt;span&gt; _mm_cvtepi32_ps(_mm_cvtepi16_epi32(Diff));
        __m128 DiffH &lt;/span&gt;= _mm_cvtepi32_ps(_mm_cvtepi16_epi32(_mm_srli_si128(Diff, &lt;span&gt;8&lt;/span&gt;&lt;span&gt;)));

        __m128 UpL &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(AdjustV, _mm_sqrt_ps(_mm_sub_ps(Const255, SrcL)));
        __m128 UpH &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(AdjustV, _mm_sqrt_ps(_mm_sub_ps(Const255, SrcH)));
        __m128 DownL &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(AdjustV, _mm_sqrt_ps(SrcL));
        __m128 DownH &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(AdjustV, _mm_sqrt_ps(SrcH));

        __m128 DiffUpL &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(_mm_cvtepi32_ps(_mm_cvtepi16_epi32(DiffS)), UpL);
        __m128 DiffUpH &lt;/span&gt;= _mm_mul_ps(_mm_cvtepi32_ps(_mm_cvtepi16_epi32(_mm_srli_si128(DiffS, &lt;span&gt;8&lt;/span&gt;&lt;span&gt;))), UpH);
        __m128 DiffDownL &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(_mm_cvtepi32_ps(_mm_cvtepi16_epi32(DiffA)), DownL);
        __m128 DiffDownH &lt;/span&gt;= _mm_mul_ps(_mm_cvtepi32_ps(_mm_cvtepi16_epi32(_mm_srli_si128(DiffA, &lt;span&gt;8&lt;/span&gt;&lt;span&gt;))), DownH);

        __m128i DiffUp &lt;/span&gt;=&lt;span&gt; _mm_adds_epi16(_mm_packs_epi32(_mm_cvtps_epi32(DiffUpL), _mm_cvtps_epi32(DiffUpH)), SrcV);
        __m128i DiffDown &lt;/span&gt;=&lt;span&gt; _mm_adds_epi16(_mm_packs_epi32(_mm_cvtps_epi32(DiffDownL), _mm_cvtps_epi32(DiffDownH)), SrcV);

        __m128i DestV &lt;/span&gt;=&lt;span&gt; _mm_blendv_si128(SrcV, DiffUp, _mm_cmpgt_epi16(Diff, ThresholdV));
        DestV &lt;/span&gt;=&lt;span&gt; _mm_blendv_si128(DestV, DiffDown, _mm_cmplt_epi16(Diff, MinusThresholdV));&lt;br/&gt;_mm_storel_epi64((__m128i &lt;/span&gt;*)(Dest +&lt;span&gt; Y), _mm_packus_epi16(DestV, Zero));
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = Block * BlockSize; Y &amp;lt; Height * Stride; Y++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Diff = Src[Y] -&lt;span&gt; Dest[Y];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Diff &amp;gt;=&lt;span&gt; Threshold)
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;((Diff - Threshold) * Adjust * sqrtf(&lt;span&gt;255.0f&lt;/span&gt; - Src[Y]) + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Src[Y]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (Diff &amp;lt; -&lt;span&gt;Threshold)
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;((Diff + Threshold) * Adjust * sqrtf(&lt;span&gt;0.0f&lt;/span&gt; + Src[Y]) + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Src[Y]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            Dest[Y] &lt;/span&gt;= Src[Y];      
&lt;span&gt;        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_OK;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上述代码基本就是普通C语言的翻译，这里讲几个需要注意的地方。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第一、_mm_cvtepi16_epi32这是个讲signed short转换为signed int的函数，只处理XMM寄存的低8位，如果需要将高8位也进行转换，就必须得配合_mm_srli_si128一起使用，如果需要转换的signed short能确认是大于等于0的，也可以使用&lt;/span&gt;&lt;span&gt;_mm_unpacklo_epi16及_mm_unpackhi_epi16配合_mm_setzero_si128来实现，比如上面的SrcL和SrcH就是使用的这个技巧，但是如果有小于0的情况出现，一定只能用_mm_cvtepi16_epi32来实现，比如上面的DiffL和DiffH，我以前在这个上面吃过很多亏。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第二、在计算DiffUp和DiffDown这两个结果时，注意需要使用_mm_packs_epi32，而不是_mm_packus_epi32，因为计算结果是有负数存在的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第三、结果的融合这里的技巧很好，我们知道SSE4提供了两个__m128i变量融合的函数，比如_mm_blendv_epi8，但是他要求最后的融合选项是个常数，而我们这里的融合选项是变化的，所以无法使用，我们使用了一个叫做_mm_blendv_si128的内联函数，这个函数用一个__m128i变量作为融合参数，对128个位进行融合，其代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt;&lt;span&gt; inline __m128i _mm_blendv_si128(__m128i x, __m128i y, __m128i mask)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _mm_or_si128(_mm_andnot_si128(mask, x), _mm_and_si128(mask, y));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　当mask的某一位为0时，选择x中的对应位的值，否则选择y中对应位的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个函数正是我需要的，而且恰好前几天在浏览文章：&lt;a href=&quot;http://www.alfredklomp.com/programming/sse-intrinsics/&quot; target=&quot;_blank&quot;&gt;A few missing SSE intrinsics&lt;/a&gt;发现了他，有的时候真的觉得处处留心皆学问啊。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;这时我们来看下上面的融合的代码：&lt;/span&gt;&lt;span&gt;__m128i DestV = _mm_blendv_si128(SrcV, DiffUp, _mm_cmpgt_epi16(Diff, ThresholdV));&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;后面的_mm_cmpgt_epi16的比较函数会返回一个__m128i变量，当Diff &amp;gt; Threshold时，对应的16位数据为0xFFFF，否则为0，这样我们使用_mm_blendv_si128融合时，满足条件的部分结果就为DiffUp了，其他部分还保持SrcV不变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;接着 DestV = _mm_blendv_si128(DestV, DiffDown, _mm_cmplt_epi16(Diff, MinusThresholdV)); 使用Diff &amp;lt; -Threshold作为判断条件，因为该条件和Diff &amp;gt; Threshold不可能同时成立，所以_mm_cmplt_epi16的返回结果中的为true的部分和_mm_cmpgt_epi16返回的true部分的值不可能重叠，因此，再次执行_mm_blendv_si128混合的值就是我们融合的正确结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;那么我们最关心的速度来了，经过测试，上述算法对1080P彩色图能达到约14ms的执行速度，和查找表的C语言版本速度差不多，唯一的优势就是运算时少占用了一部分内存。但是同时也说明SSE的计算能力真的不是盖的，算一算，正正的SSE执行时间实际上只有14-6.75 =7.25ms，而不用查找表的C代码的用时为55-6.75=48.25ms，达到了进7倍的提速比，但这就是我们的终点了吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;第二方案：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们在仔细观察下Diff &amp;gt; Threshold和Diff &amp;lt; -Threshold时计算的不同，第一个不同是Diff &amp;gt; Threshold时使用了Diff - Threshold，而Diff &amp;lt; -Threshold时使用了Diff + Threshold；第二个不同为Diff &amp;gt; Threshold时使用了255.0f - Src[Y]作为开平方的算式，而Diff &amp;lt; -Threshold时使用了 Src[Y]。关于第一个不同，我们可以看到仅仅是个符号位不同，如果在Threshold前面根据不同的条件加个符号位在进行乘法不就可以了，也就是说如果我们根据Diff和Threshold的关系构建一个-1和1的中间变量，则可以把他们写在一个式子里，那这样的符号为要如何构建呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　自然而然我们又想到了上述方法的_mm_blendv_si128，简单的方式如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;p&gt;__m128i Sign = _mm_blendv_si128(Zero, MinusOne, _mm_cmpgt_epi16(Diff, ThresholdV));&lt;br/&gt;        Sign = _mm_blendv_si128(Sign, One, _mm_cmplt_epi16(Diff, MinusThresholdV));&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　Zero，MinusOne，One&lt;span&gt;这个还需不需要解释，上面的代码还需不需要解释？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第二个不同，我们这样看，我们把它们放在一起 255.0f - Src[Y]  |  Src[Y]，稍微改写一下255 - Src[Y]  | 0 -  Src[Y]，后面的+和-可以用类似前面的同样的方法处理，我们还需处理255和0，如果我们能够根据判断条件构造出255 和 0这样的序列，那是不是就解决问题了，如何构造？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;前面说过，_mm_cmpgt_epi16会返回0xFFFF和0，看成unsigned short类型则为65535和0， 如果我们把这个返回结果右移8位，是不是就变为了255和0呢，明白了吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最后我们注意一点，当-Threshold &amp;lt; Diff &amp;lt;Threshold时，我们的返回的是原图像的值，那在这种情况下是不是有问题呢，其实也不会，我们注意到此条件下Sign对应的符号位为0，而_mm_cmpgt_epi16返回的那部分数据也为0，也就是说此时对应的sqrt参数为0，那么作为乘法的一部分，整个前面的算式就为0，结果返回的恰好是原值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们还来在说下前面的符号问题，正或者负某个数，直接用符号位加乘法固然是可以实现的，但是有么有其他的方式更好的实现呢，翻一番SSE的手册，我们会发现有_mm_sign_epi8 、_mm_sign_epi16 、_mm_sign_epi32 这样的函数，他们是干什么的呢，我们以_mm_sign_epi16为例，看看他的文档说明：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;extern&lt;/span&gt;&lt;span&gt; __m128i _mm_sign_epi16 (__m128i a, __m128i b); 
Negate packed words &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; a &lt;span&gt;if&lt;/span&gt; corresponding sign &lt;span&gt;in&lt;/span&gt; b &lt;span&gt;is&lt;/span&gt;&lt;span&gt; less than zero. 
Interpreting a, b, and r &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; arrays of signed &lt;span&gt;16&lt;/span&gt;-&lt;span&gt;bit integers: 
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;8&lt;/span&gt;; i++&lt;span&gt;)
{ 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (b[i] &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) 
    { 
        r[i] &lt;/span&gt;= -&lt;span&gt;a[i]; 
    } 
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (b[i] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    { 
        r[i] &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
    } 
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
    { 
        r[i] &lt;/span&gt;=&lt;span&gt; a[i]; 
    } 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　什么意思，就是以参数b的符号位来决定a的值，当b为负数是，对a求反，当b为0时，a也为0，否则a值保持不变。&lt;/span&gt;&lt;span&gt;这不就可以直接实现上述的符号位的问题了吗？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　说了那么多，我贴出代码大家看一看：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; IM_UnsharpMask(unsigned &lt;span&gt;char&lt;/span&gt; *Src, unsigned &lt;span&gt;char&lt;/span&gt; *Dest, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt; Stride, &lt;span&gt;int&lt;/span&gt; Radius, &lt;span&gt;int&lt;/span&gt; Amount, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Threshold)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Channel = Stride /&lt;span&gt; Width;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Src == NULL) || (Dest == NULL))                                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_NULLREFRENCE;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Width &amp;lt;= &lt;span&gt;0&lt;/span&gt;) || (Height &amp;lt;= &lt;span&gt;0&lt;/span&gt;))                                    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((Channel != &lt;span&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;3&lt;/span&gt;) &amp;amp;&amp;amp; (Channel != &lt;span&gt;4&lt;/span&gt;))                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_INVALIDPARAMETER;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Status =&lt;span&gt; IM_STATUS_OK;

    Status &lt;/span&gt;=&lt;span&gt; IM_ExpBlur(Src, Dest, Width, Height, Stride, Radius);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Status != IM_STATUS_OK)    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Status;

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; Adjust = Amount / &lt;span&gt;100.0f&lt;/span&gt; / sqrt(&lt;span&gt;255.0f&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BlockSize = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Block = (Height * Stride) /&lt;span&gt; BlockSize;

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i Zero =&lt;span&gt; _mm_setzero_si128();
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i ThresholdV =&lt;span&gt; _mm_set1_epi16(Threshold);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i MinusThresholdV = _mm_set1_epi16(-&lt;span&gt;Threshold);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i MinusOne = _mm_set1_epi16(-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128 AdjustV =&lt;span&gt; _mm_set1_ps(Adjust);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; __m128i One = _mm_set1_epi16(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = &lt;span&gt;0&lt;/span&gt;; Y &amp;lt; Block * BlockSize; Y +=&lt;span&gt; BlockSize)
    {
        __m128i SrcV &lt;/span&gt;= _mm_unpacklo_epi8(_mm_loadl_epi64((__m128i *)(Src +&lt;span&gt; Y)), Zero);
        __m128i DstV &lt;/span&gt;= _mm_unpacklo_epi8(_mm_loadl_epi64((__m128i *)(Dest +&lt;span&gt; Y)), Zero);
        __m128i Diff &lt;/span&gt;= _mm_sub_epi16(SrcV, DstV);                                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    int Diff = Src[Y] - Dest[Y];
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    当Diff &amp;gt; ThresholdV时，Sign设置为负数，当Diff &amp;lt; -ThresholdV时，Sign设置为正数，
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    介于-ThresholdV和ThresholdV之间时为0,这里One和MinusOne只是取得一个代表性的值&lt;/span&gt;
&lt;span&gt;
        __m128i SignA &lt;/span&gt;= _mm_cmpgt_epi16(Diff, ThresholdV);                           
        __m128i SignB = _mm_cmplt_epi16(Diff, MinusThresholdV);                        &lt;span&gt;
        __m128i Sign &lt;/span&gt;=&lt;span&gt; _mm_blendv_si128(Zero, MinusOne, SignA);
        Sign &lt;/span&gt;=&lt;span&gt; _mm_blendv_si128(Sign, One, SignB);
            
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Diff 为不同值时，NewDiff需要带上不同符号，利用上面的Sign配合_mm_sign_epi16能很好的解决问题&lt;/span&gt;
        __m128i NewDiff =&lt;span&gt; _mm_add_epi16(Diff, _mm_sign_epi16(ThresholdV, Sign));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    _mm_cmpgt_epi16返回0xfffff和0两种值，我们这里需要的是0xff和0，因此需要进行下移位，注意此时在Diff &amp;lt; Threshold(Sign为0或者1时）
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    _mm_add_epi16的第一个参数都是0，而第二个参数对于Sign为0的情况则也返回0，这样0+0正好为0，Sqrt后也为0，对结果正好没有影响(巧合还是天意?)&lt;/span&gt;
        __m128i NewPower = _mm_add_epi16(_mm_srli_epi16(SignA, &lt;span&gt;8&lt;/span&gt;&lt;span&gt;), _mm_sign_epi16(SrcV, Sign));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    注意这里有负数存在，则必须用这种强制转换函数&lt;/span&gt;
        __m128 NewDiffL =&lt;span&gt; _mm_cvtepi32_ps(_mm_cvtepi16_epi32(NewDiff));                                    
        __m128 NewDiffH &lt;/span&gt;= _mm_cvtepi32_ps(_mm_cvtepi16_epi32(_mm_srli_si128(NewDiff, &lt;span&gt;8&lt;/span&gt;&lt;span&gt;)));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    都是正数就可以这样转化&lt;/span&gt;
        __m128 NewPowerL =&lt;span&gt; _mm_cvtepi32_ps(_mm_unpacklo_epi16(NewPower, Zero));                            
        __m128 NewPowerH &lt;/span&gt;=&lt;span&gt; _mm_cvtepi32_ps(_mm_unpackhi_epi16(NewPower, Zero));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    按公式计算结果&lt;/span&gt;
        __m128 DstL =&lt;span&gt; _mm_mul_ps(_mm_mul_ps(AdjustV, NewDiffL), _mm_sqrt_ps(NewPowerL));
        __m128 DstH &lt;/span&gt;=&lt;span&gt; _mm_mul_ps(_mm_mul_ps(AdjustV, NewDiffH), _mm_sqrt_ps(NewPowerH));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    合成到16位的结果，注意这里不要用_mm_packus_epi32,因为后面还有一个加法要进行&lt;/span&gt;
        __m128i Result =&lt;span&gt; _mm_packs_epi32(_mm_cvtps_epi32(DstL), _mm_cvtps_epi32(DstH));                    

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    合成到8位的结果，注意这要用抗饱和的加法_mm_adds_epi16&lt;/span&gt;
        _mm_storel_epi64((__m128i *)(Dest +&lt;span&gt; Y), _mm_packus_epi16(_mm_adds_epi16(Result, SrcV), Zero));
    }

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; Y = Block * BlockSize; Y &amp;lt; Height * Stride; Y++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Diff = Src[Y] -&lt;span&gt; Dest[Y];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Diff &amp;gt;=&lt;span&gt; Threshold)
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;((Diff - Threshold) * Adjust * sqrtf(&lt;span&gt;255.0f&lt;/span&gt; - Src[Y]) + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Src[Y]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (Diff &amp;lt; -&lt;span&gt;Threshold)
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;((Diff + Threshold) * Adjust * sqrtf(&lt;span&gt;0.0f&lt;/span&gt; + Src[Y]) + &lt;span&gt;0.5f&lt;/span&gt;) +&lt;span&gt; Src[Y]);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            Dest[Y] &lt;/span&gt;= IM_ClampToByte(&lt;span&gt;int&lt;/span&gt;(Diff * Adjust * sqrtf(&lt;span&gt;0.0f&lt;/span&gt; + &lt;span&gt;0.0f&lt;/span&gt;) + &lt;span&gt;0.5f&lt;/span&gt;) + Src[Y]);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    不做变化&lt;/span&gt;
&lt;span&gt;        }
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; IM_STATUS_OK;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　最后回到我们关心的速度问题上去，经过上述优化后能达到的速度平均值在11.5ms左右，比查找表版本的还要快了3ms左右。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　实际上上述求Sign的过程还有更为简单的优化过程的，想通了也很有道理，这个留个读者自行去研究，大概能加快0.4ms左右的速度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　关于分支预测的SSE优化，目前我掌握的技巧也就这么多，管件还是要看算法本身，有的时候要脱离原始算法，为了能用SSE而稍微改变下算法的外表。这就各位神仙各显神通了，当然有很多分支预测由于太复杂还是不能够用SIMD指令优化的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最后说一句，关于Photoshop的标准USM锐化并不是使用的上述算法，其原理应该说比上面的还要简单，但也不是网络上流行的那个计算公式，我已经通过测试推到得到了和其一模一样的计算式，这里不提，不过呢，为什么非要一样呢，这里的这个算法也是不错的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　算法Demo下载地址：&lt;a href=&quot;https://files.cnblogs.com/files/Imageshop/SSE_Optimization_Demo.rar&quot; target=&quot;_blank&quot;&gt;https://files.cnblogs.com/files/Imageshop/SSE_Optimization_Demo.rar&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/349293/201802/349293-20180223130132569-689784033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 23 Feb 2018 05:04:00 +0000</pubDate>
<dc:creator>Imageshop</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Imageshop/p/8461025.html</dc:identifier>
</item>
<item>
<title>SQL Server 文件操作 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4996060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4996060.html</guid>
<description>&lt;p&gt;在master数据库中，SQL Server提供系统扩展的存储过程，其中有一些存储过程的命名以xp_开头，用于处理操作系统的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，判断文件是否存在&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程sys.xp_fileexist 用于判断文件是否存在，参数是文件（file）的路径或目录的路径：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.sys.xp_fileexist &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\test.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该存储过程返回的结果集有一行数据，三个字段，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201802/628084-20180223111954280-1043410323.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，创建子目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程 sys.xp_create_subdir 用于创建子目录，参数是子目录的路径：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.sys.xp_create_subdir &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行存储过程，系统返回消息：Command(s) completed successfully，说明子目录创建成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，查看子目录结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程sys.xp_dirtree 用于显示当前目录的子目录，该存储过程有三个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;directory：第一个参数是要查询的目录；&lt;/li&gt;
&lt;li&gt;depth ：第二个参数是要显示的子目录的深度，默认值是0，表示显示所有的子目录；&lt;/li&gt;
&lt;li&gt;file ：第三个参数是bool类型，指定是否显示子目录中的文件（file），默认值是0，表示不显示任何文件，只显示子目录（directory）；&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.sys.xp_dirtree &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该存储过程返回的字段有子目录名称和相对深度，返回的结果中并没有显示子目录的父子关系：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201802/628084-20180223113119738-1947767926.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四，删除文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程 sys.xp_delete_file 用于删除文件，该存储过程有5个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一个参数是文件类型（File Type），有效值是0和1，0是指备份文件，1是指报表文件；&lt;/li&gt;
&lt;li&gt;第二个参数是目录路径（Folder Path）， 目录中的文件会被删除，目录路径必须以“\”结尾；&lt;/li&gt;
&lt;li&gt;第三个参数是文件的扩展名（File Extension），常用的扩展名是'BAK' 或'TRN'；&lt;/li&gt;
&lt;li&gt;第四个参数是Date，早于该日期创建的文件将会被删除；&lt;/li&gt;
&lt;li&gt;第五个参数是子目录（Subfolder），bool类型，0是指忽略子目录，1是指将会删除子目录中的文件；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该存储过程并不可以删除所有的文件，系统限制它只能删除特定类型的文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@Date&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;dateadd&lt;/span&gt;(&lt;span&gt;day&lt;/span&gt;,&lt;span&gt;-&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;getdate&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;exec&lt;/span&gt; master.sys.xp_delete_file &lt;span&gt;0&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\test\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bak&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;@Date&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;五，查看磁盘驱动的空闲空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程 sys.xp_fixeddrives用于查看磁盘驱动器剩余（free）的空间&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; sys.xp_fixeddrives
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201802/628084-20180223114413989-251859920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六，执行DOS命令操作文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程sys.xp_cmdshell 用于执行DOS命令，该功能对应SQL Server系统的xp_cmdshell高级选项，默认情况下，该选项是禁用的，执行该存储过程，系统会抛出错误消息：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SQL Server blocked access to procedure 'sys.xp_cmdshell' of component 'xp_cmdshell' because this component is turned off as part of the security configuration for this server. A system administrator can enable the use of 'xp_cmdshell' by using sp_configure. For more information about enabling 'xp_cmdshell', search for 'xp_cmdshell' in SQL Server Books Online.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因此，在执行该存储过程之前，必须启用&lt;span&gt;xp_cmdshell选项，由于启用该选项有潜在的风险，建议用户在执行代码之后，禁用该选项。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1，启用/禁用&lt;span&gt;xp_cmdshell选项&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;xp_cmdshell选项属于系统的高级选项，执行以下代码，允许用户修改高级选项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; To allow advanced options to be changed.  &lt;/span&gt;
&lt;span&gt;exec&lt;/span&gt; sp_configure &lt;span&gt;'&lt;/span&gt;&lt;span&gt;show advanced options&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;  
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; To update the currently configured value for advanced options.  &lt;/span&gt;
&lt;span&gt;reconfigure&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用以下代码启用xp_cmdshell选项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; To enable the feature.  &lt;/span&gt;
&lt;span&gt;exec&lt;/span&gt; sp_configure &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xp_cmdshell&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;  
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; To update the currently configured value for this feature.  &lt;/span&gt;
&lt;span&gt;reconfigure&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;go&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用以下代码禁用xp_cmdshell选项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; To disable the feature.  &lt;/span&gt;
&lt;span&gt;exec&lt;/span&gt; sp_configure &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xp_cmdshell&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;  
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; To update the currently configured value for this feature.  &lt;/span&gt;
&lt;span&gt;reconfigure&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;go&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，常用的DOS命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该存储过程使得用户可以通过TSQL命令执行DOS命令，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; sys.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;command_string&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.1 建立新文件或增加文件内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：ECHO 文件内容＞file_name  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;echo abc &amp;gt; D:\share\test.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.2 查看文件内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：TYPE file_name &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;type D:\share\test.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.3 复制文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式： COPY  file_name  new_folder &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;copy D:\test\test.txt D:\share\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.4 显示目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：DIR folder&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dir D:\share\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.5 创建目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：MD folder_name&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;md D:\share\test\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.6 删除目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：RD folder&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rd D:\share\test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.7 删除文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：DEL file_name&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;del D:\share\test.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.8 重命名文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：REN [盘符：][路径]〈旧文件名〉〈新文件名〉&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ren D:\test\test.txt new.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.9 移动文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：MOVE  file_name new_folder&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exec&lt;/span&gt; master.dbo.xp_cmdshell &lt;span&gt;'&lt;/span&gt;&lt;span&gt;move D:\test\new.txt D:\share\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.10 切换目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：CD[盘符：][路径名][子目录名]&lt;/p&gt;


&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/xp-cmdshell-server-configuration-option&quot; target=&quot;_blank&quot;&gt;xp_cmdshell Server Configuration Option&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql&quot; target=&quot;_blank&quot;&gt;xp_cmdshell (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/defen/p/5618226.html&quot; target=&quot;_blank&quot;&gt;常见dos命令总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/emanlee/archive/2011/11/10/2244009.html&quot; target=&quot;_blank&quot;&gt;DOS中的ECHO命令详解&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 23 Feb 2018 04:55:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4996060.html</dc:identifier>
</item>
<item>
<title>测试妹子的呐喊：为什么总是收不到推送？ - 陈树义</title>
<link>http://www.cnblogs.com/chanshuyi/p/head_first_of_push_01.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chanshuyi/p/head_first_of_push_01.html</guid>
<description>&lt;p&gt;小树最近在开发公司 App 的一个新的功能，需要在用户上线的时候，给关注了她的用户发送一条推送消息。小树很快就完成了开发， 但测试人员却反馈说无法正常接收到推送。这可让小树着急死了，但小树调用的是原来的推送接口，对推送的相关业务并不熟悉。于是小树准备寻求资深工程师小黑的帮助。&lt;/p&gt;
&lt;h2 id=&quot;苹果推送的沙盒环境&quot;&gt;苹果推送的沙盒环境&lt;/h2&gt;
&lt;p&gt;小树描述了以下问题，经验丰富的小黑立刻看出了端倪所在，问小树：是不是忘记设置推送类型为沙箱模式了？&lt;/p&gt;
&lt;p&gt;此时的小树一脸茫然，赶紧问：什么是沙箱环境啊？&lt;/p&gt;
&lt;p&gt;沙箱环境其实就是测试环境的意思，这是苹果系统习惯性的称呼。为了方便描述，我们下面还是用测试环境来替代沙箱环境吧。&lt;/p&gt;
&lt;p&gt;小树听完连忙点头，之后又继续发问：那就是说推送系统也有测试环境和正式环境之分？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3npq6ecr.bkt.clouddn.com/blog/head_first_of_push_01_01.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;小黑不急不忙地跟小树说：那是肯定的啊。如果没有区分测试环境和线上环境，那我们在测试新功能的时候岂不是会干扰到线上用户的正常使用。&lt;/p&gt;
&lt;p&gt;小黑接着说道：所以你提供给测试人员测试时，需要提供测试环境的推送，这样测试人员测试的时候才能正常收到推送。而当我们功能开发完成，需要发布到线上时，我们需要使用线上环境的推送。&lt;/p&gt;
&lt;p&gt;小树听完之后赶紧将推送类型改为测试模式，之后让测试妹子再次测试。果不其然，这次果然能收到推送提醒了。&lt;/p&gt;
&lt;h2 id=&quot;什么是苹果推送服务&quot;&gt;什么是苹果推送服务&lt;/h2&gt;
&lt;p&gt;虽然问题解决了，但小树还是感觉有什么东西没搞懂，于是坐在座位上冥思苦想，想了解一下推送的整个流程。&lt;/p&gt;
&lt;p&gt;在一旁的小黑看到了小树皱着眉头，于是拿起纸和笔画起了图跟小树讲解起来。&lt;/p&gt;
&lt;p&gt;对于苹果的 iOS 系统来说，它有自建的官方推送服务 APNS（Apple Push Notification service）。当我们的手机处于开机状态时，iOS 系统内置的一个推送服务便会一直处于运行的状态，并与 APNS 服务器保持长连接，随时准备接收APNS服务器的推送消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3npq6ecr.bkt.clouddn.com/blog/head_first_of_push_01_02.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们向 APNS 服务器发送一条推送消息时，APNS 服务器就会将消息推送给对应的设备。而对应的 iOS 设备接收到推送消息后，又会将消息传递给对应的 APP 处理。&lt;/p&gt;
&lt;h2 id=&quot;什么是devicetoken&quot;&gt;什么是DeviceToken&lt;/h2&gt;
&lt;p&gt;小树接着问：这个世界上的 iOS 设备那么多，APNS 服务器怎么知道这条消息是要推送给哪个设备的呢？&lt;/p&gt;
&lt;p&gt;小树问的问题真是问到点子上了，小黑高兴地夸奖道。&lt;/p&gt;
&lt;p&gt;要解答你这个问题，那就必须提一下&lt;em&gt;DeviceToken&lt;/em&gt;这个东西。只要有 DeviceToken，那么APNS 服务器就知道将消息推送到哪台 iOS 设备上。&lt;/p&gt;
&lt;p&gt;小树接着问：那也就是说 DeviceToken 是跟设备绑定的咯？&lt;/p&gt;
&lt;p&gt;其实你只答对了一半。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;其实 DeviceToken 是跟设备和App绑定在一起的。&lt;/em&gt;不同设备的同一应用，它们的 DeviceToken 是不同的。同一设备的不同应用，它们的 DeviceToken 也是不同的。&lt;/p&gt;
&lt;p&gt;还记得我们每次新装一个应用的时候都会弹出一个「是否允许XXX给你发送系统消息」的提示吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3npq6ecr.bkt.clouddn.com/blog/head_first_of_push_01_03.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当你点击「允许」之后，你的手机便会向 APNS 服务器请求生成一个 DeviceToken，此时 APNS 服务器便将这个 DeviceToken 和这个 iOS 联系起来了。除非你将应用卸载，否则这个 DeviceToken 就一直跟你的这个设备和这个应用绑定在一起了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3npq6ecr.bkt.clouddn.com/blog/head_first_of_push_01_04.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们需要发送推送消息时，APNS 服务器便会根据我们传递的 DeviceToken 参数寻找到对应的长连接，再将要发送的数据通过长连接推送到对应的设备上。&lt;/p&gt;
&lt;p&gt;小树听完连连称赞，没想到一个简单的推送还有这么多学问。&lt;/p&gt;
&lt;h2 id=&quot;苹果推送的流程&quot;&gt;苹果推送的流程&lt;/h2&gt;
&lt;p&gt;小黑看着小树似懂非懂的样子，于是让小树试着描述一下整个苹果推送的流程，借此看看小树是否真的掌握了。&lt;/p&gt;
&lt;p&gt;小树听到了跃跃欲试，开始滔滔不绝地讲起来。&lt;/p&gt;
&lt;p&gt;第一步，当我们启动应用后 App 弹出是否允许「系统通知」的请求，我们点击允许后，iOS 设备向 APNS 服务器请求一个 DeviceToken。此时，APNS 服务器将这个 DeviceToken 与该 iOS 设备绑定起来。&lt;/p&gt;
&lt;p&gt;第二步，当我们需要发送推送消息时，我们请求我们的后台服务器，告诉它我们要发一条推送消息给某个 DeviceToken。后台服务器接收到消息后转而请求APNS 服务器的沙箱环境接口或线上环境接口。&lt;/p&gt;
&lt;p&gt;第三步，当 APNS 服务器接收到请求后，它根据 DeviceToken 取出之前已经建立的与该 iOS 建立的长连接，最后将需要发送的内容输出到该长连接中。&lt;/p&gt;
&lt;p&gt;第四步，与 APNS 服务器建立长连接的 iOS 设备接收到消息后，分析这个 DeviceToken 属于哪个 App，并将其分发给对应的 App 进行处理。&lt;/p&gt;
&lt;p&gt;整个流程大概像下面这张图描述的这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3npq6ecr.bkt.clouddn.com/blog/head_first_of_push_01_05.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;小黑听完小树的复述不由得感慨，现在的年轻人学东西还蛮快的嘛，讲了一遍就都记住了。&lt;/p&gt;
&lt;p&gt;举一反三的小树又发问了：那安卓系统是不是也有对应的官方推送啊？&lt;/p&gt;
&lt;p&gt;那肯定的啊，不过我们这个留着下次你遇到问题再讲吧。遇到问题再学习，印象更加深刻。小黑故意埋了一个关子。&lt;/p&gt;

</description>
<pubDate>Fri, 23 Feb 2018 04:07:00 +0000</pubDate>
<dc:creator>陈树义</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chanshuyi/p/head_first_of_push_01.html</dc:identifier>
</item>
<item>
<title>浅谈JavaScript的事件（事件模拟） - 水击三千</title>
<link>http://www.cnblogs.com/ggz19/p/8461448.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ggz19/p/8461448.html</guid>
<description>&lt;p&gt;　　事件经常由操作或者通过浏览器功能触发，通过JavaScript也可以触发元素的事件。通过JavaScript触发事件，也称为事件的模拟。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;DOM中事件模拟&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　可以document的createEvent方法创建event对象。这个方法接收一个参数，即表示要创建的事件类型的字符串。在DOM2级中，所有这些字符串都使用英文复数形式，在DOM3级中都变成了单数。这几个字符串如下：UIEvents，一般化的ui事件，鼠标事件和键盘事件都继承于该事件，在DOM3级中是UIEvent；MouseEvents，一般化的鼠标事件，在DOM3级中是MouseEvent；MutationEvents，DOM变动事件DOM3级是MutationEvent；HTMLEvents，html事件，没有对应的DOM3级。&lt;/p&gt;
&lt;p&gt;　　在创建了event对象后，还需要使用与事件有关的信息对其进行初始化。每种类型的event都有一个对应的方法，为其传入一个参数就可以初始化事件对象。模拟事件的最后一步是触发事件，触发事件使用dispatchEvent方法，所有支持DOM事件的节点都支持该方法。调用dispatchEvent方法需要传入一个参数，即表示要触发事件的event对象。&lt;/p&gt;
&lt;p&gt;　　创建鼠标事件对象，并为其指定必要的信息，就可以模拟鼠标事件。创建鼠标事件的对象方法是createEvent方法，传入的参数是MouseEvents。返回的event对象有一个initMouseEvent方法，用于指定与鼠标事件有关的信息。这个方法接收15个参数，分别与鼠标事件中典型的属性一一对应，属性如下：type，表示要触发的事件类型，如“click”；bubbles，是否支持冒泡，如true；cancelable，表示事件是否可以取消，如true；view，事件关联的视图，一般是document.defaultView；detail，与事件有关的详细信息，通常设置为0；screenX，事件相对于屏幕的x坐标；screenY，事件相对于屏幕的y坐标；clientX，事件相对于视口的X坐标；clientY，事件相对于视口的Y坐标；ctrlKey，表示是否按下了ctrl键，一般为false；shiftKey，表示是否按下了shit键，一般为false；metaKey，表示是否按下了meta键，一般为false；button，表示按下的是哪一个鼠标键，默认为0；relatedTarget，表示与事件相关的对象，在模拟mouseout和mouseover时使用。&lt;/p&gt;
&lt;p&gt;　　对于需要模拟鼠标事件，一般只需要传递前3个参数。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; callback =&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                 console.log(&quot;1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             EventUtil.addEvent(document.getElementById(&quot;btnadd&quot;),&quot;click&quot;&lt;span&gt;,callback);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; evt = document.createEvent(&quot;MouseEvents&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;             evt.initMouseEvent(&quot;click&quot;,&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; btn =document.getElementById(&quot;btnadd&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;             btn.dispatchEvent(evt);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过上面的事件，我们就能触发btnadd元素的click事件。首先我们为元素绑定了click事件，这个事件需要用户操作才能触发。第5行通过createEvent创建了鼠标事件对象，通过initMouseEvent初始化了事件对象。然后通过元素的dispatchEvent方法来触发事件。&lt;/p&gt;
&lt;p&gt;　　DOM2级中对键盘事件没有做出规范的规定。在DOM3级中对键盘事件有明确的定义。调用createEvent方法，传入KeyboardEvent能够创建键盘事件。返回的事件对象包含一个initKeyEvent的方法。这个方法的参数如下：type，事件类型，如keydown；bubbles，事件是否支持冒泡，如true；cancelable，事件是否可以取消，如true；view，事件的视图，一般为document.defaultView；key，表示按下键的键码；location，表示按下了哪里的键，0表示默认的主键盘，1表示左，2表示右，3表示数字键盘，4表示移动设备，5表示手柄；modifiers，空格分隔的修改键列表，如shift；repeat，按这个键的次数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; txt=document.getElementById(&quot;inputtext&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;            txt.focus();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; evt =document.createEvent(&quot;KeyboardEvent&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             evt.initKeyboardEvent(&quot;keydown&quot;,&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;false&lt;/span&gt;,document.defaultView,&quot;a&quot;,0,&quot;Shift&quot;,0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             txt.dispatchEvent(evt);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码模拟了keydown事件，同时按下shift键和a键。&lt;/p&gt;
&lt;p&gt;　　可以通过JavaScript代码模拟鼠标事件、键盘事件、HTML事件和变动事件。同时也可以模拟自定义事件。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; add=document.getElementById(&quot;btnadd&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             EventUtil.addEvent(add,&quot;myevent&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(ev){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 ev=&lt;span&gt;EventUtil.getEvent(ev);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; target=&lt;span&gt;EventUtil.getTarget(ev);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                 console.log(ev.type);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;myevent&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; evt=document.createEvent(&quot;CustomEvent&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;             evt.initCustomEvent(&quot;myevent&quot;,&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;false,&quot;hello&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;             add.dispatchEvent(evt);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码通过createEvent方法创建了CustomEvent事件对象，也就是自定义事件对象，通过initCustomEvent初始化对象，最后触发myevent事件。第5行输出事件的类型为myevent，正是我们自定义的事件。&lt;/p&gt;
&lt;p&gt;　　上面的创建模拟事件的方法在ie8以及ie8以下的浏览器中，并不支持。可以使用以下的代码来模拟事件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; btn =document.getElementById(&quot;btnadd&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             EventUtil.addEvent(btn,&quot;click&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 console.log(&quot;click&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; evt=&lt;span&gt;document.createEventObject();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;             btn.fireEvent(&quot;onclick&quot;,evt);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后讲一下事件模拟中经常用到的一场景，比如需要下载一幅图片或者导出excel等，可以通过事件模拟来实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; downloadImg(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; userAgent = navigator.userAgent; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得浏览器的userAgent字符串&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; img = document.createElement(&quot;img&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                     img.src=&quot;Font-Awesome-3.2.1/src/assets/img/fort_awesome.jpg&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     img.style.display=&quot;none&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                    document.body.appendChild(img);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                  &lt;span&gt;if&lt;/span&gt; (userAgent.indexOf(&quot;MSIE&quot;) &amp;gt; -1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                       &lt;span&gt;var&lt;/span&gt; oPop = window.open(img.src,&quot;&quot;,&quot;width=1, height=1, top=5000, left=5000&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;(; oPop.document.readyState != &quot;complete&quot;&lt;span&gt;; )
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (oPop.document.readyState == &quot;complete&quot;)&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     oPop.document.execCommand(&quot;SaveAs&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    oPop.close();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                  &lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                  
&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; evt=document.createEvent(&quot;MouseEvents&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     evt.initMouseEvent(&quot;click&quot;,&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; a=document.createElement(&quot;a&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     a.download=&quot;test.jpg&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     a.href=&lt;span&gt;img.src;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    a.dispatchEvent(evt);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                 }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             downloadImg();
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 23 Feb 2018 03:56:00 +0000</pubDate>
<dc:creator>水击三千</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ggz19/p/8461448.html</dc:identifier>
</item>
</channel>
</rss>