<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>在html中使用js - happynood</title>
<link>http://www.cnblogs.com/xuyan1/p/js.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuyan1/p/js.html</guid>
<description>&lt;p&gt;1.使用defer属性可以让脚本在文档完全呈现出来之后在执行，延迟脚本总是按照制定他们的顺序进行。&lt;/p&gt;
&lt;p&gt;2.使用async属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现，不能保证异步顺序按照它们在页面中出现的顺序执行&lt;/p&gt;
&lt;p&gt;3.在body里使用noscript标签，标签内内容会在不支持js的浏览器显示出来。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 15:34:00 +0000</pubDate>
<dc:creator>happynood</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuyan1/p/js.html</dc:identifier>
</item>
<item>
<title>vue.js之过滤器，自定义指令，自定义键盘信息以及监听数据变化 - 蜜迷</title>
<link>http://www.cnblogs.com/15fj/p/8179737.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/15fj/p/8179737.html</guid>
<description>&lt;p&gt;一、监听数据变化&lt;/p&gt;
&lt;p&gt;　　1、监听数据变化有两种，深度和浅度，形式如下：&lt;/p&gt;
&lt;p&gt;　　　　vm.$watch(name,fnCb); //浅度&lt;br/&gt;　　　　vm.$watch(name,fnCb,{deep:true}); //深度监视&lt;/p&gt;
&lt;p&gt;　　2、实例用法&lt;/p&gt;
&lt;p&gt;　　　　2.1-1浅度监听：&lt;span&gt;当点击页面，弹出发生变化了，a的值变为1，b的值变为101&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;浅度监听1&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    a:&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;&lt;span&gt;,
                    b:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                }
            });

            vm.$watch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发生变化了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.b&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.a&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
            });

            document.onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                vm.a&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            };
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{a}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{b}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2.1-2浅度监听：点击页面之后，弹出“发生变化了”，页面变为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102215759831-323351516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;浅度监听2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    &lt;span&gt;json:{name:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;strive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;},&lt;/span&gt;
                    b:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                }
            });

            vm.$watch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发生变化了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            });

            document.onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;span&gt;vm.json.name&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;&lt;/span&gt;
            };
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{json | json}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{b}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2.2深度监听：可以监视对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;深度监听&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    json:{name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;strive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;},
                    b:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                }
            });

            vm.$watch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发生变化了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            },{deep:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;});

            document.onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                vm.json.name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            };
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{json | json}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{b}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102220252393-1726668724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、自定义指令&lt;/p&gt;
&lt;p&gt;vue中自带的指令往往有时候满足不了我们实际的需求，例如当小于9时显示为09，当大于9时显示为原本的数。所以我们这个时候就需要自己定义一些指令&lt;/p&gt;
&lt;p&gt;1、基本语法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;自定义指令:
    属性:

    Vue.directive(指令名称,function(参数){
        this.el    -&amp;gt; 原生DOM元素
    });

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;=&quot;参数&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

    指令名称:     v-red  -&amp;gt;  red

    * 注意: 必须以 v-开头      &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、基本用法&lt;/p&gt;
&lt;p&gt;　　2.1 v-red -&amp;gt; red&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){　　　　　　　　　　　　//和下面的v-red相对应
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        });

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    msg:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102221049893-1853987479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2.2、自定义指令参数为变量的用法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令参数用法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(&lt;span&gt;color&lt;/span&gt;){　　　　　　　　//将下面的a的值传给color
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt;color&lt;/span&gt;;
        });

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                   &lt;span&gt; a&lt;/span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　//是上面的变量a&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102221611315-18792895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.3参数为值的用法&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;参数为值的用法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(color){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;color;
        });

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;=&quot;'blue'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　　　　　//这里的blue就是普通的值&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102221900799-273943866.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.4自定义指令就是默认绑定的bind&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,{
            bind:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el.style.background&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;
            }
        });&lt;/span&gt;

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-red&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            asdfasd
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102222057440-1831505964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.5自定指令进行拖拽小实例：可以进行拖拽&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义指令--拖拽小实例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;drag&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oDiv&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.el;
            oDiv.onmousedown&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(ev){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; disX&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientX&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;oDiv.offsetLeft;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; disY&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;oDiv.offsetTop;

                document.onmousemove&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(ev){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; l&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientX&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;disX;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; t&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;ev.clientY&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;disY;
                    oDiv.style.left&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    oDiv.style.top&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                };
                document.onmouseup&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    document.onmousemove&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    document.onmouseup&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;;
                };
            };
        });&lt;/span&gt;

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    msg:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-drag :style&lt;/span&gt;&lt;span&gt;=&quot;{width:'100px', height:'100px', background:'blue', position:'absolute', right:0, top:0}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-drag :style&lt;/span&gt;&lt;span&gt;=&quot;{width:'100px', height:'100px', background:'red', position:'absolute', left:0, top:0}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 三、过滤器&lt;/p&gt;
&lt;p&gt;　　3.1、配合事件使用的过滤器：debounce—&amp;gt;延迟执行事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;debounce--延迟执行&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; @keyup&lt;/span&gt;&lt;span&gt;=&quot;&lt;span&gt;show | debounce 2000&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　//按键之后，将过2秒弹出1&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{

            },
            methods:{
                show:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    alert(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                }
            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 3.2配合数据使用的过滤器&lt;/p&gt;
&lt;p&gt;　　3.2.1：limitBy用法&lt;/p&gt;
&lt;p&gt;　　　　基本用法　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        limitBy    限制几个
        limitBy 参数(取几个)
        limitBy 取几个  从哪开始                &lt;/span&gt;　
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;limitBy    限制几个，&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;limitBy 参数(取几个)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;limitBy 限制几个&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;&lt;span&gt;val in arr | limitBy 2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　//限制显示为2个，也可改为参数&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102223023737-560283063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;span&gt;  limitBy 取几个  从哪开始       &lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;limitBy&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;val in arr | &lt;span&gt;limitBy 2 arr.length-2&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;span&gt;取2个，从数组的倒数第二个开始取&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102223508878-1793750759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 3.2.2、filterBy 过滤数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;filterBy的用法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;val in arr | filterBy a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                a:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：当在文本框输入w时只会出现width,其余的都将被过滤掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102223859878-233897092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.2.3、orderBy:倒序还是正序排列&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;orderBy倒序排列，1为正序，-1为倒序&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;val in arr | orderBy -1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;　　　　　　　　　　//这里的-1也可为变量&lt;/span&gt;&lt;span&gt;
                {{val}}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                arr:[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
                a:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102224345378-882168959.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;四、自定义过滤器&lt;/p&gt;
&lt;p&gt;　　1、基本语法　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;自定义过滤器:  model -&amp;gt;过滤 -&amp;gt; view
        &lt;span&gt;Vue.filter(name,function(input){
            
        });&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　2.基本用法&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　　　&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义过滤器&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{&lt;span&gt;a&lt;/span&gt; | &lt;span&gt;toDou&lt;/span&gt;}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.filter(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;toDou&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(input){　　　　　　　　　　//自定义过滤器
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; input&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;input:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;input;
        });
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
                a:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102224744862-1248613700.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、自定义时间转化器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义时间转化器&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{&lt;span&gt;a&lt;/span&gt; | &lt;span&gt;date&lt;/span&gt;}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        Vue.filter(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(input){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; oDate&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(input);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oDate.getFullYear()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;(oDate.getMonth()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getDate()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getHours()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getMinutes()&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;oDate.getSeconds();
        });

        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
            data:{
              &lt;span&gt;  a:Date.now()&lt;/span&gt;
            },
            methods:{

            }
        }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1202490/201801/1202490-20180102225403284-756619294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;五、自定义键盘信息&lt;/p&gt;
&lt;p&gt;1、基本 语法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;自定义键盘信息:
Vue.directive('on').keyCodes.ctrl=17;
Vue.directive('on').keyCodes.myenter=13;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;自定义&lt;/span&gt;键盘信息&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-capable&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;yes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;apple-mobile-web-app-status-bar-style&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctrl-&amp;gt;17&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;document.onkeydown=function(ev){
            console.log(ev.keyCode);
        };&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).keyCodes.ctrl&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//　　　　ctrl
&lt;/span&gt;&lt;span&gt;        Vue.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).keyCodes.myenter&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;;　　　　//enter

        window.onload&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; vm&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                data:{
                    a:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                },
                methods:{
                    show:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        alert(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    }
                }
            });
        };

    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; @keydown.myenter&lt;/span&gt;&lt;span&gt;=&quot;show | debounce 2000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：当按下enter键之后过2秒弹出1&lt;/p&gt;

</description>
<pubDate>Tue, 02 Jan 2018 14:56:00 +0000</pubDate>
<dc:creator>蜜迷</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/15fj/p/8179737.html</dc:identifier>
</item>
<item>
<title>深入学习rollup来进行打包 - 龙恩0707</title>
<link>http://www.cnblogs.com/tugenhua0707/p/8179686.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tugenhua0707/p/8179686.html</guid>
<description>&lt;p&gt;深入学习rollup来进行打包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阅读目录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一：什么是Rollup?&lt;/p&gt;
&lt;p&gt;  rollup是一款用来es6模块打包代码的构建工具(支持css和js打包)。当我们使用ES6模块编写应用或者库时，它可以打包成一个单独文件提供浏览器和Node.js来使用。&lt;br/&gt;&lt;strong&gt;它的优点有如下&lt;/strong&gt;：&lt;br/&gt;  1. 能组合我们的脚本文件。&lt;br/&gt;  2. 移除未使用的代码(仅仅使用ES6语法中)。&lt;br/&gt;  3. 在浏览器中支持使用 Node modules。&lt;br/&gt;  4. 压缩文件代码使文件大小尽可能最小化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rollup最主要的优点是&lt;/strong&gt; 它是基于ES2015模块的，相比于webpack或Browserify所使用的CommonJS模块更加有效率，因为Rollup使用一种叫做&lt;br/&gt;tree-shaking的特性来移除模块中未使用的代码，这也就是说当我们引用一个库的时候，我们只用到一个库的某一段的代码的时候，它不会把所有的代码打包进来，而仅仅打包使用到的代码(webpack2.0+貌似也引入了tree-shaking)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：Rollup只会在ES6模块中支持tree-shaking特性。目前按照CommonJS模块编写的jquery不能被支持tree-shaking.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rollup 的应用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在目前流行的打包有 gulp 和 webpack，那么与前面两个对比，我觉得rollup更适合打包js库，但是对于打包一个项目的整个应用的话，我到觉得webpack更适合，比如打包一些图片，字体等资源文件的时候，webpack很适合，目前貌似没有看到rollup可以做到这些。&lt;br/&gt;之所以我来研究rollup，是因为最近在看vuex的源码的时候，看到它的js库就是使用rollup来进行打包的。&lt;/p&gt;

&lt;p&gt;二：如何使用Rollup来处理并打包JS文件？&lt;/p&gt;
&lt;p&gt;2-1 安装Rollup并创建配置文件，通过如下命令安装：&lt;br/&gt;      进入项目根目录后，运行命令： npm install --save-dev rollup&lt;/p&gt;
&lt;p&gt;2-2 在项目的根目录下新建一个新文件 rollup.config.js, 之后再在文件中添加如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面再来了解一下各个配置的含义：&lt;br/&gt;&lt;strong&gt;input：&lt;/strong&gt; rollup先执行的入口文件。&lt;br/&gt;&lt;strong&gt;output：&lt;/strong&gt;rollup 输出的文件。&lt;br/&gt;&lt;strong&gt;output.format:&lt;/strong&gt; rollup支持的多种输出格式(有amd,cjs, es, iife 和 umd, 具体看 &lt;a href=&quot;http://www.cnblogs.com/tugenhua0707/p/8150915.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/tugenhua0707/p/8150915.html&lt;/a&gt;)&lt;br/&gt;&lt;strong&gt;sourceMap&lt;/strong&gt; —— 如果有 sourcemap 的话，那么在调试代码时会提供很大的帮助，这个选项会在生成文件中添加 sourcemap，来让事情变得更加简单。&lt;/p&gt;
&lt;p&gt;我们在package.json代码下 添加如下脚本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此我们只要在命令行中 输入命令：npm run build 即可完成打包；&lt;/p&gt;
&lt;p&gt;我们再看下各个文件下的代码：&lt;/p&gt;
&lt;p&gt;src/js/a.js 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  const temp &lt;/span&gt;= `Hello, ${name}!&lt;span&gt;`;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; b(name) {
  const temp &lt;/span&gt;= `Later, ${name}!&lt;span&gt;`;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/js/b.js代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
const addArray &lt;/span&gt;= arr =&amp;gt;&lt;span&gt; {
  const result &lt;/span&gt;= arr.reduce((a, b) =&amp;gt; a + b, 0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; addArray;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/main.js代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

console.log(res1);
console.log(res2);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终会在项目的根目录下生成文件 dist/js/main.min.js, 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  const temp &lt;/span&gt;= `Hello, ${name}!&lt;span&gt;`;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
const addArray &lt;/span&gt;= arr =&amp;gt;&lt;span&gt; {
  const result &lt;/span&gt;= arr.reduce((a, b) =&amp;gt; a + b, 0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

console.log(res1);
console.log(res2);

}());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上可以看到 在 src/js/a.js 下的 b函数没有被使用到，所以打包的时候没有被打包进来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：在上面代码打包后，只有现代浏览器会正常工作，如果要让不支持ES2015的旧版本浏览器下也正常工作的话，我们需要添加一些插件。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;三：设置Babel来使旧浏览器也支持ES6的代码&lt;/p&gt;
&lt;p&gt;如上打包后的代码，我们可以在现代浏览器下运行了，但是如果我们使用老版本的浏览器的话，就会产生错误。幸运的是，Babel已经提供了支持。&lt;br/&gt;我们首先需要安装一些依赖项如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
npm install --save-&lt;span&gt;dev 
babel&lt;/span&gt;-core babel-preset-env babel-plugin-external-&lt;span&gt;helpers 
babel&lt;/span&gt;-plugin-transform-runtime babel-preset-stage-2&lt;span&gt; 
babel&lt;/span&gt;-register rollup-plugin-babel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：Babel preset 是一个有关Babel插件的集合，它会告诉Babel我们需要转译什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 创建 .babelrc文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来需要在项目的根目录下创建 .babelrc的新文件了，它内部添加如下JSON代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;presets&quot;&lt;span&gt;: [
    [&lt;/span&gt;&quot;env&quot;&lt;span&gt;, {
      &lt;/span&gt;&quot;modules&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&quot;targets&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;browsers&quot;: [&quot;&amp;gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &amp;lt;= 8&quot;&lt;span&gt;]
      }
    }],
    &lt;/span&gt;&quot;stage-2&quot;&lt;span&gt;
  ],
  &lt;/span&gt;&quot;plugins&quot;: [&quot;transform-runtime&quot;, &quot;external-helpers&quot;]  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置runtime，不设置会报错&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会告诉Babel应该使用哪种preset来转译代码。&lt;/p&gt;
&lt;p&gt;因此我们再更新下 rollup.config.js，我们需要Babel插件，将它添加到一个新的配置选项plugins中，他会管控一个数组形式的插件列表，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_module下的所有文件&lt;/span&gt;
&lt;span&gt;    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了避免转译第三方脚本，我们需要设置一个 exclude 的配置选项来忽略掉 node_modules 目录下的所有文件。安装完成后，我们重新运行命令；然后打包后代码变成如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = &quot;Hello, &quot; + name + &quot;!&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; addArray = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; addArray(arr) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = arr.reduce(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, b) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a +&lt;span&gt; b;
  }, &lt;/span&gt;0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res1 = a('kongzhi'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res2 = addArray([1, 2, 3, 4&lt;span&gt;]);

console.log(res1);
console.log(res2);

}());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们对比下代码，可以看到 addArray 的箭头函数解析成真正的函数了。 在转译运行完成后，代码也差不多一样的，只是代码已经支持&lt;br/&gt;了IE9之前的浏览器了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意： Babel也提供了 babel-polyfill， 也可以让IE8之前的浏览器能够顺利执行。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;四：添加一个debug包来记录日志&lt;/p&gt;
&lt;p&gt; 为了查看日志，我们将在代码中添加一个debug包来记录下日志信息。通过如下命令安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm install --save debug
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们可以在 src/main.js中，添加一些简单的日志记录：如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
debug.enable('*'&lt;span&gt;);
log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index.html 代码变成如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;doctype html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt;
        content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Learning Rollup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Learning Rollup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    Let’s learn how to use &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;http://rollupjs.org/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Rollup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JS-generated output will be added here. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;debug&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;code &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;debug__output&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; This is the bundle generated by rollup.js &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./dist/js/main.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们直接访问index.html后，浏览器控制台报错了，错误信息如下：&lt;br/&gt;Uncaught ReferenceError: debug is not defined，然后我们可以继续查看，打包后的main.min.js的代码变为如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (debug) {
&lt;/span&gt;'use strict'&lt;span&gt;;

debug &lt;/span&gt;= debug &amp;amp;&amp;amp; debug.hasOwnProperty('default') ? debug['default'&lt;span&gt;] : debug;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(name) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = &quot;Hello, &quot; + name + &quot;!&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; addArray = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; addArray(arr) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = arr.reduce(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (a, b) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; a +&lt;span&gt; b;
  }, &lt;/span&gt;0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; log = debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
debug.enable('*'&lt;span&gt;);
log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res1 = a('kongzhi'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res2 = addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= 'sayHelloTo(\'Jason\') =&amp;gt; ' + res1 + '\n\n'&lt;span&gt;;
printTarget.innerText &lt;/span&gt;+= 'addArray([1, 2, 3, 4]) =&amp;gt; ' +&lt;span&gt; res2;

}(debug));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说 浏览器报错是因为打包后的debug是 undefined，这是因为一般的情况下，第三方node模块并不会被Rollup正确加载。&lt;br/&gt;Node模块使用的是CommonJS, 它不会被Rollup兼容因此不能直接被使用，为了解决这个问题，我们需要添加一些插件来&lt;br/&gt;处理Node依赖和CommonJS模块。&lt;br/&gt;为了解决上面的两个问题，我们需要在Rollup中添加如下两个插件：&lt;br/&gt;&lt;strong&gt;1. rollup-plugin-node-resolve&lt;/strong&gt; 该插件会允许加载在 node_modules中的第三方模块。&lt;br/&gt;&lt;strong&gt;2. rollup-plugin-commonjs&lt;/strong&gt; 它会将CommonJS模块转换为ES6来为Rollup获得兼容。&lt;/p&gt;
&lt;p&gt;因此如下命令即可安装：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-node-resolve rollup-plugin-commonjs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后我们继续更新下 rollup.config.js 代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到目前为止一切顺利，但是当我们运行index.html时候， rollup 时我们会得到一个日志信息：&lt;/p&gt;
&lt;p&gt;在控制台如下日志信息：&lt;br/&gt;app:log Logging is enabled! +0ms&lt;/p&gt;
&lt;p&gt;index.html 页面上显示如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Learning Rollup
Let’s learn how to use Rollup.

sayHelloTo(&lt;/span&gt;'Jason') =&amp;gt; Hello, kongzhi!&lt;span&gt;

addArray([&lt;/span&gt;1, 2, 3, 4]) =&amp;gt; 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码，我们看到引入了 rollup-plugin-json 插件了，该插件的作用是读取json信息的，比如我读取package.json的信息:&lt;/p&gt;
&lt;p&gt;然后我把main.js中引入对应代码。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
debug.enable('*'&lt;span&gt;);
log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在控制台输出如下信息：&lt;br/&gt;控制台输出 running version 1.0.0&lt;/p&gt;

&lt;p&gt;五：添加插件来替代环境变量&lt;/p&gt;
&lt;p&gt; 环境变量能为我们的开发流程提供很大的帮助，我们可以通过它来执行关闭或开启日志，注入开发环境脚本等功能。&lt;br/&gt;因此我们可以在main.js中添加基础配置的ENV。让我们添加一个环境变量来使我们的日志脚本只在非 production环境下才会执行&lt;br/&gt;。如下main.js代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是正式环境的话，不输出日志信息&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (ENV !== 'production'&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
  debug.enable('*'&lt;span&gt;);
  log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  debug.disable();
}

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后打包完成后，在浏览器查看 发现报错了，如下错误信息：&lt;br/&gt;Uncaught ReferenceError: ENV is not defined&lt;br/&gt;这也很正常，因为我们并没有定义它，现在我们还需要一个插件来将我们的环境变量用到bundle中。&lt;/p&gt;
&lt;p&gt;5-1 先安装 &lt;strong&gt;rollup-plugin-replcae&lt;/strong&gt;，该插件是一个用来查找和替换的工作，我们只需要找到目前的环境变量并且使用实际&lt;br/&gt;的值替代就可以了。先安装如下：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-replace&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后我们再来更新一下 rollup.config.js, 配置是我们可以添加一个 key:value 的配对表，key值是准备被替换的键，而value是将要被替换的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们现在运行 npm run build 的时候还是有日志信息的，因为默认的环境就是 development， 但是当我们在命令&lt;br/&gt;行中使用如下命令：&lt;strong&gt;`NODE_ENV=production ./node_modules/.bin/rollup -c`(mac系统下的命令)&lt;/strong&gt;， 然后打包&lt;br/&gt;后，刷新浏览器 就不会有日志记录信息了。&lt;br/&gt;&lt;strong&gt;注意：在winodw环境下，运行如下命令： SET NODE_ENV=production ./node_modules/.bin/rollup -c&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;六：添加 UglifyJS来压缩我们js的代码&lt;/p&gt;
&lt;p&gt; 安装插件 rollup-plugin-uglify&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令如下安装：&lt;br/&gt;npm install --save-dev rollup-plugin-uglify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再在 rollup.config.js 配置代码，为了在开发中使代码更具可读性，我们只在生产环境压缩代码：&lt;br/&gt;rollup.config.js配置代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify())
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在mac系统下运行命令 `NODE_ENV=production ./node_modules/.bin/rollup -c` 后，代码被压缩了，当我们运行&lt;br/&gt;npm run build 的时候，代码未被压缩。&lt;/p&gt;

&lt;p&gt;七：监听文件变化的插件 --- rollup-watch&lt;/p&gt;
&lt;p&gt;如下安装命令：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-watch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后在package.json 中设置 scripts属性即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;dev&quot;: &quot;rollup -c -w&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在 src/main.js 代码下 加入一句代码后 ： console.log(1122); 然后在浏览器下刷新下即可在控制台可以看到打印输出 1122这样的就可以监听到了。不需要重新打包即可。&lt;/p&gt;

&lt;p&gt;八：开启本地服务的插件 --- rollup-plugin-serve&lt;/p&gt;
&lt;p&gt; 安装命令如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-serve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在rollup.config.js 配置代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;
import serve from &lt;/span&gt;'rollup-plugin-serve'&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify()),
    serve({
      open: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否打开浏览器&lt;/span&gt;
      contentBase: './', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口html的文件位置&lt;/span&gt;
      historyApiFallback: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to true to return index.html instead of 404&lt;/span&gt;
      host: 'localhost'&lt;span&gt;,
      port: &lt;/span&gt;10001&lt;span&gt;
    })
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重启命令 npm run build 就可以会自动打开 http://localhost:10001/ 页面了。&lt;br/&gt;&lt;strong&gt;注意： 这边port配置的端口号是五位数，不是四位数。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;九：实时刷新页面 --- rollup-plugin-livereload&lt;/p&gt;
&lt;p&gt;命令安装如下：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-livereload&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注入LiveReload脚本&lt;/strong&gt;&lt;br/&gt;在LiveReload工作前，需要向页面中注入一段脚本用于和LiveReload的服务器建立连接。&lt;br/&gt;在src/main.js 中加入如下一段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable LiveReload&lt;/span&gt;
&lt;span&gt;document.write(
  &lt;/span&gt;'&amp;lt;script src=&quot;http://' + (location.host || 'localhost').split(':')[0] +
  ':35729/livereload.js?snipver=1&quot;&amp;gt;&amp;lt;/' + 'script&amp;gt;'&lt;span&gt;
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/main.js所有代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import { a } from './js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不是正式环境的话，不输出日志信息&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (ENV !== 'production'&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
  debug.enable('*'&lt;span&gt;);
  log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable LiveReload&lt;/span&gt;
&lt;span&gt;  document.write(
    &lt;/span&gt;'&amp;lt;script src=&quot;http://' + (location.host || 'localhost').split(':')[0] +
    ':35729/livereload.js?snipver=1&quot;&amp;gt;&amp;lt;/' + 'script&amp;gt;'&lt;span&gt;
  );
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  debug.disable();
}

const res1 &lt;/span&gt;= a('kongzhi'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);
console.log(&lt;/span&gt;1122&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行 LiveReload&lt;/strong&gt;&lt;br/&gt;LiveReload安装好并且脚本注入到文档中后，我们可以运行它去监听build目录：&lt;br/&gt;如下命令：&lt;br/&gt;&lt;strong&gt;./node_modules/.bin/livereload 'build/'&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行完成后 发现报错了 Error: listen EADDRINUSE :::35729；通过百度才发现端口被占用了，需要换端口，因此我直接把这个进程杀掉不就可以了，&lt;br/&gt;首先我们先使用如下命令来查看下进程：&lt;br/&gt;&lt;strong&gt;lsof -n -i4TCP:35729&lt;/strong&gt;&lt;br/&gt;看到信息如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
COMMAND  PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
node    1452 tugenhua   15u  IPv6 0xb0e27d409cc55a1b      0t0  TCP *:35729 (LISTEN)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行如下命令杀掉：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kill -9 1452&lt;/strong&gt;&lt;br/&gt;再在命令行输入 &lt;strong&gt;./node_modules/.bin/livereload 'src/'&lt;/strong&gt; 即可看到如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ ./node_modules/.bin/livereload 'src/'&lt;span&gt;
Starting LiveReload v0.6.3 for /Users/tugenhua/个人demo/vue1204/rollup-build/src on port 35729.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：./node_modules/.bin/livereload 'src/'&lt;/strong&gt; 这句代码的含义是 监听src文件夹的文件，因此index.html内会&lt;br/&gt;监听到，我们可以打开 src/index.html后，然后在index.html修改内容后，保存一下就可以看到页面会自动刷新内容了。&lt;/p&gt;
&lt;p&gt;如上虽然改变 src/index.html的内容后会自动刷新页面，但是感觉每次 都需要输入 ./node_modules/.bin/livereload 'src/' 这么一段命令，有点麻烦，因此我们可以在 package.json 脚本中来简化这个过程，在package.json下scripts加上如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;dev&quot;: &quot;rollup -c -w&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;reload&quot;: &quot;livereload 'src/'&quot;&lt;span&gt;
}, &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在命令行中 运行 npm run reload 也可以监听到了。但是我们监听不到 src/js 或 src/css 下的文件的变化，&lt;br/&gt;因为它不会自动打包，而只是监听src下的文件变化而已。但是我们又不能同时打开 watcher 和 Livereload，会报错端口被占用的情况。&lt;br/&gt;因此我们需要看第10条来解决这个问题哦；&lt;/p&gt;

&lt;p&gt;十. 安装同时运行watcher 和 Livereload的工具&lt;/p&gt;
&lt;p&gt; 为了能同时执行 Rollup和LiveReload, 我们需要使用一个叫做 npm-run-all 的工具。它的含义是一个终端可以执行多个任务。&lt;/p&gt;
&lt;p&gt;安装命令如下：&lt;br/&gt;&lt;strong&gt;npm install --save-dev npm-run-all&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后我们要在package.json中再加入一条调用npm-run-all的脚本。在scripts代码块内，添加如下内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&quot;scripts&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;dev&quot;: &quot;rollup -c -w&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;build&quot;: &quot;rollup -c&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;reload&quot;: &quot;livereload 'src/'&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;watch&quot;: &quot;npm-run-all --parallel dev&quot;&lt;span&gt;
},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;watch 就是新增的。因此我们可以在终端运行 npm run watch命令了，然后刷新浏览器(http://localhost:10002/src/index.html)，改变一下js或者css，浏览器会自动加载更新后的代码了。&lt;/p&gt;

&lt;p&gt;十一. rollup+PostCSS打包样式文件并添加 LiveReload&lt;/p&gt;
&lt;p&gt; 1. 在main.js中加载样式： 在main.js 中加入如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Import styles (automatically injected into &amp;lt;head&amp;gt;).&lt;/span&gt;
import './css/index.css'&lt;span&gt;;
所有的代码如下：
import &lt;/span&gt;'./css/index.css'&lt;span&gt;;

import { a } from &lt;/span&gt;'./js/a'&lt;span&gt;;
import addArray from &lt;/span&gt;'./js/b'&lt;span&gt;;
import debug from &lt;/span&gt;'debug'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加json&lt;/span&gt;
import pkg from '../package.json'&lt;span&gt;;
console.log( `running version ${pkg.version}` ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制台输出 running version 1.0.0&lt;/span&gt;
&lt;span&gt;
const log &lt;/span&gt;= debug('app:log'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不是正式环境的话，不输出日志信息&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (ENV !== 'production'&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable the logger.&lt;/span&gt;
  debug.enable('*'&lt;span&gt;);
  log(&lt;/span&gt;'Logging is enabled!'&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable LiveReload&lt;/span&gt;
&lt;span&gt;  document.write(
    &lt;/span&gt;'&amp;lt;script src=&quot;http://' + (location.host || 'localhost').split(':')[0] +
    ':35729/livereload.js?snipver=1&quot;&amp;gt;&amp;lt;/' + 'script&amp;gt;'&lt;span&gt;
  );
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  debug.disable();
}

const res1 &lt;/span&gt;= a('kongzhi222'&lt;span&gt;);
const res2 &lt;/span&gt;= addArray([1, 2, 3, 4&lt;span&gt;]);
console.log(&lt;/span&gt;11222211&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Print the results on the page.&lt;/span&gt;
const printTarget = document.getElementsByClassName('debug__output')[0&lt;span&gt;];

printTarget.innerText &lt;/span&gt;= `sayHelloTo('Jason') =&amp;gt;&lt;span&gt; ${res1}\n\n`;
printTarget.innerText &lt;/span&gt;+= `addArray([1, 2, 3, 4]) =&amp;gt; ${res2}`;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 安装PostCss插件&lt;/strong&gt;&lt;br/&gt;首先需要安装Rollup版本的PostCss插件，使用命令如下安装：&lt;br/&gt;&lt;strong&gt;npm install --save-dev rollup-plugin-postcss&lt;/strong&gt;&lt;br/&gt;然后 添加插件到 rollup.config.js中去：&lt;br/&gt;添加代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;
import serve from &lt;/span&gt;'rollup-plugin-serve'&lt;span&gt;;
import livereload from &lt;/span&gt;'rollup-plugin-livereload'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增的postcss&lt;/span&gt;
import postcss from 'rollup-plugin-postcss'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增的postcss&lt;/span&gt;
&lt;span&gt;    postcss({
      extensions: [&lt;/span&gt;'.css'&lt;span&gt;]
    }),
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify()),
    serve({
      open: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否打开浏览器&lt;/span&gt;
      contentBase: './', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口html的文件位置&lt;/span&gt;
      historyApiFallback: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to true to return index.html instead of 404&lt;/span&gt;
      host: 'localhost'&lt;span&gt;,
      port: &lt;/span&gt;10002&lt;span&gt;
    }),
    livereload()
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行npm run build 后，可以看到生成的 dist/js/main.min.js 中的代码，在文件开头几行，可以看到一个名叫__$styleInject()的新函数；&lt;br/&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; __$styleInject(css, returnValue) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; document === 'undefined'&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnValue;
  }
  css &lt;/span&gt;= css || ''&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; head = document.head || document.getElementsByTagName('head')[0&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; style = document.createElement('style'&lt;span&gt;);
  style.type &lt;/span&gt;= 'text/css'&lt;span&gt;;
  head.appendChild(style);
  
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (style.styleSheet){
    style.styleSheet.cssText &lt;/span&gt;=&lt;span&gt; css;
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    style.appendChild(document.createTextNode(css));
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnValue;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数创建了一个&amp;lt;style&amp;gt;元素并设置样式，然后添加到文档的&amp;lt;head&amp;gt;标签中。&lt;br/&gt;但现在这些样式并没有真正地被处理；PostCSS只是直接地传输了我们的样式。让我们添加一些需要的PostCSS插件，使得样式能在目标浏览器上工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 安装必要的 PostCSS插件&lt;/strong&gt;&lt;br/&gt;下面需要安装四个插件，如下插件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;postcss-simple-vars&lt;/strong&gt; 可以使用Sass风格的变量(e.g. $myColor: #fff;，color: $myColor;)而不是冗长的CSS语法(e.g. :root {--myColor: #fff}，color: var(--myColor))。&lt;br/&gt;&lt;strong&gt;postcss-nested&lt;/strong&gt; 允许使用嵌套规则。实际上我不用它写嵌套规则；&lt;br/&gt;&lt;strong&gt;postcss-cssnext&lt;/strong&gt; 这个插件集使得大多数现代CSS语法(通过最新的CSS标准)可用，编译后甚至可以在不支持新特性的旧浏览器中工作。&lt;br/&gt;&lt;strong&gt;cssnano&lt;/strong&gt; — 压缩，减小输出CSS文件大小。相当于JavaScript中对应的UglifyJS。&lt;/p&gt;
&lt;p&gt;使用如下命令安装即可：&lt;br/&gt;&lt;strong&gt;npm install --save-dev postcss-simple-vars postcss-nested postcss-cssnext cssnano&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们再来更下 rollup.config.js&lt;br/&gt;现在我们可以在rollup.config.js 中引入 postcss插件了，在配置对象的plugins属性上添加一个postcss。&lt;br/&gt;如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Rollup plugins&lt;/span&gt;
import babel from 'rollup-plugin-babel'&lt;span&gt;;
import resolve from &lt;/span&gt;'rollup-plugin-node-resolve'&lt;span&gt;;
import commonjs from &lt;/span&gt;'rollup-plugin-commonjs'&lt;span&gt;;
import json from &lt;/span&gt;'rollup-plugin-json'&lt;span&gt;;
import replace from &lt;/span&gt;'rollup-plugin-replace'&lt;span&gt;;
import uglify from &lt;/span&gt;'rollup-plugin-uglify'&lt;span&gt;;
import serve from &lt;/span&gt;'rollup-plugin-serve'&lt;span&gt;;
import livereload from &lt;/span&gt;'rollup-plugin-livereload'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增 rollup-plugin-postcss 插件&lt;/span&gt;
import postcss from 'rollup-plugin-postcss'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增 postcss plugins&lt;/span&gt;
import simplevars from 'postcss-simple-vars'&lt;span&gt;;
import nested from &lt;/span&gt;'postcss-nested'&lt;span&gt;;
import cssnext from &lt;/span&gt;'postcss-cssnext'&lt;span&gt;;
import cssnano from &lt;/span&gt;'cssnano'&lt;span&gt;;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  input: &lt;/span&gt;'./src/main.js'&lt;span&gt;,
  output: {
    file: &lt;/span&gt;'./dist/js/main.min.js'&lt;span&gt;,
    format: &lt;/span&gt;'iife'&lt;span&gt;
  },
  plugins: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新增的&lt;/span&gt;
&lt;span&gt;    postcss({
      extensions: [&lt;/span&gt;'.css'&lt;span&gt;],
      plugins: [
        simplevars(),
        nested(),
        cssnext({ warnForDuplicates: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, }),
        cssnano()
      ]
    }),
    resolve({
      jsnext: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性是指定将Node包转换为ES2015模块&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; main 和 browser 属性将使插件决定将那些文件应用到bundle中&lt;/span&gt;
      main: &lt;span&gt;true&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: true &lt;/span&gt;
      browser: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default: false&lt;/span&gt;
&lt;span&gt;    }),
    commonjs(),
    json(),
    babel({
      exclude: &lt;/span&gt;'node_modules/**'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 排除node_modules 下的文件&lt;/span&gt;
&lt;span&gt;    }),
    replace({
      ENV: JSON.stringify(process.env.NODE_ENV &lt;/span&gt;|| 'development'&lt;span&gt;)
    }),
    (process.env.NODE_ENV &lt;/span&gt;=== 'production' &amp;amp;&amp;amp;&lt;span&gt; uglify()),
    serve({
      open: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否打开浏览器&lt;/span&gt;
      contentBase: './', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口html的文件位置&lt;/span&gt;
      historyApiFallback: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to true to return index.html instead of 404&lt;/span&gt;
      host: 'localhost'&lt;span&gt;,
      port: &lt;/span&gt;10002&lt;span&gt;
    }),
    livereload()
  ]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们再来运行 npm run build, 后再打开浏览器就可以看到了head里面新增样式了，并且已经压缩的。&lt;/p&gt;
&lt;p&gt;注意：在cssnext()中配置了{ warnForDuplicates: false }是因为它和cssnano()都使用了Autoprefixer，会导致一个警告。 我们只需要知道它被执行了两次(在这个例子中没什么坏处)并且取消了警告。&lt;/p&gt;
&lt;p&gt;同理我们运行命令 npm run watch 后，修改css，也能实时加载到最新的css了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.rollupjs.com/&quot; target=&quot;_blank&quot;&gt;更多可以查看rollup中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tugenhua0707/rollup-demo&quot; target=&quot;_blank&quot;&gt;github项目rollup打包查看&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 14:39:00 +0000</pubDate>
<dc:creator>龙恩0707</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tugenhua0707/p/8179686.html</dc:identifier>
</item>
<item>
<title>移动端适配 - 叫我小红依吧</title>
<link>http://www.cnblogs.com/huyuzhu/p/8179524.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huyuzhu/p/8179524.html</guid>
<description>&lt;p&gt;作为一个前端开发人员，我们的任务是将UI设计师的图稿运用计算机语言呈现在用户面前。而现在的设备大小尺寸不一，近年来智能手机的普及更是让网页的用户大部分来源与手机，所以让不同大小的移动端屏幕都能较好的还原设计稿就成了一个前端开发者需要解决的当务之急。我查阅了大量资料和进行了一些实践，下面是我对移动端适配的一些认识。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;首先我们来谈谈我们在电脑端用的字体单位px和em&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在国内的网站中大多都是使用px作为字体单位，只有百度做了个可调的表率。而在大洋彼岸，几乎所有的主流站点都使用em作为字体单位，也就是可调的。他们为什么要用em作为单位呢，主要有一下几个原因&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;IE无法调整那些使用px作为单位的字体大小;&lt;/li&gt;
&lt;li&gt;国外的大部分网站能够调整的原因在于其使用了em作为字体单位;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Firefox能够调整px和em，但是96%以上的中国网民使用IE浏览器(或内核)。&lt;/p&gt;
&lt;h4 id=&quot;px和em概念&quot;&gt;px和em概念&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;px像素(Pixel):&lt;/strong&gt; 相对长度单位。像素px是相对于显示器屏幕分辨率而言的。&lt;br/&gt;__em:__是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明 Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。&lt;/p&gt;
&lt;p&gt;em有如下特点：&lt;br/&gt;　　1. em的值并不是固定的;&lt;br/&gt;　　2. em会继承父级元素的字体大小。&lt;br/&gt;所以我们在写CSS的时候，需要注意两点：&lt;br/&gt;　　1. body选择器中声明Font-size=62.5%;&lt;br/&gt;　　2. 将你的原来的px数值除以10，然后换上em作为单位;&lt;br/&gt;　　3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;下面我们来谈谈移动端的适配方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先讲讲一个基本概念&lt;/p&gt;
&lt;h4 id=&quot;视窗-viewport&quot;&gt;视窗 viewport&lt;/h4&gt;
&lt;p&gt;移动前端中常说的 viewport （视口）就是浏览器显示页面内容的屏幕区域。&lt;/p&gt;
&lt;p&gt;移动端的viewport太窄，为了能更好为CSS布局服务，所以提供了两个viewport:虚拟的visual viewport和布局的layout viewport。&lt;/p&gt;
&lt;h5 id=&quot;layout-viewport布局视口&quot;&gt;layout viewport（布局视口）&lt;/h5&gt;
&lt;p&gt;一般移动设备的浏览器都默认设置了一个viewport 元标签，定义一个虚拟的layout viewport（布局视口），用于解决早期的页面在手机上显示的问题。iOS, Android基本都将这个视口分辨率设置为 980px，所以pc上的网页基本能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。&lt;/p&gt;
&lt;p&gt;这里是一个小demo，分别是加了和没加页面的效果&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5349028-5bfd96af89a8e0a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;加了&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5349028-95b7d5963ae6d518.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;没加&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;visual-viewport视觉视口和物理像素&quot;&gt;visual viewport（视觉视口）和物理像素&lt;/h5&gt;
&lt;p&gt;visual viewport（视觉视口）备物理屏幕的可视区域，屏幕显示器的物理像素，同样尺寸的屏幕，像素密度大的设备，硬件像素会更多。例如iPhone的物理像素：&lt;/p&gt;
&lt;p&gt;dip （设备逻辑像素）跟设备的硬件像素无关的。一个 dip 在任意像素密度的设备屏幕上都占据相同的空间。&lt;/p&gt;
&lt;p&gt;比如MacBook Pro的 Retina （视网膜）屏显示器硬件像素是：2880 * 1800。当你设置屏幕分辨率为 1920 * 1200 的时候，ideal viewport（理想视口）的宽度值是1920像素， 那么 dip 的宽度值就是1920。设备像素比是1.5（2880/1920）。设备的逻辑像素宽度和物理像素宽度（像素分辨率）的关系满足如下公式：&lt;/p&gt;
&lt;p&gt;逻辑像素宽度*倍率 = 物理像素宽度&lt;/p&gt;
&lt;p&gt;而移动端手机屏幕通常不可以设置分辨率，一般都是设备厂家默认设置的固定值，换句话说 dip 的值就是 ideal viewport（理想视口）（也就是分辨率）的值，比如，iPhone的屏幕分辨率：&lt;/p&gt;
&lt;p&gt;iPhone5 ：分辨率 320 * 568，物理像素 640 * 1136，@2x&lt;br/&gt;iPhone6：分辨率 375 * 667，物理像素 750 * 1334，@2x&lt;br/&gt;iPhone6 Plus ：分辨率 414 * 736，物理像素1242 * 2208，@3x&lt;/p&gt;
&lt;p&gt;所以我们需要使用viewport元标签控制布局&lt;/p&gt;
&lt;p&gt;通常用到的适配代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里是每个属性的详细介绍&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5349028-8f2e97dcb2b59e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;width&quot;&gt;width&lt;/h5&gt;
&lt;p&gt;为了是适应布局，我们一般将width设为device-width。&lt;/p&gt;
&lt;p&gt;width=device-width 也就是将layout viewport（布局视口）的宽度设置 ideal viewport（理想视口）的宽度。网页缩放比例为100%时，一个CSS像素就对应一个 dip（设备逻辑像素），而layout viewport（布局视口）的宽度，ideal viewport（理想视口）的宽度（通常说的分辨率），dip 的宽度值是相等的。&lt;/p&gt;
&lt;h5 id=&quot;initial-scale&quot;&gt;initial-scale&lt;/h5&gt;
&lt;p&gt;initial-scale用于指定页面的初始缩放比例：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;initial-scale=1 表示将layout viewport（布局视口）的宽度设置为 ideal viewport（理想视口）的宽度，&lt;/li&gt;
&lt;li&gt;initial-scale=1.5 表示将layout viewport（布局视口）的宽度设置为 ideal viewport（理想视口）的宽度的1.5倍。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为分辨率和物理像素的关系，所以我们就需要通过js来确定页面的初始缩放比例，下面是控制初始缩放比例的代码。后面会进行解释&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var i = e.navigator.appVersion.match(/iphone/gi) ? e.devicePixelRatio :1, 
    a = 1 / i, &lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;然后我们谈谈rem&quot;&gt;然后我们谈谈rem&lt;/h4&gt;
&lt;p&gt;rem其实和em非常相似，在w3c中是这样描述rem的&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;font size of the root element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的用法和em差不多，区别是em是针对父元素的font-size做计算，而rem是相对与根元素做计算。我们在移动端使用rem作为所有大小的单位来解决适配的问题。&lt;/p&gt;
&lt;p&gt;我们设置根元素font-size的大小，应该是不同屏幕设置不一样的。比如一个740大的屏幕，我们会把它的font-size设为76px；而一个370大的屏幕，我们会把它的font-size设为34px，这要根据屏幕大小而言。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;所以，我们需要编写一个js文件来适应不同的屏幕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是某个网站的移动适配js，这里通过这个文件做一些解释&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;!function(e) {
    function t() {
        e.rem = d.getBoundingClientRect().width / 16, d.style.fontSize = e.rem + &quot;px&quot;;
    }
    var n, 
        i = e.navigator.appVersion.match(/iphone/gi) ? e.devicePixelRatio :1, 
        a = 1 / i, 
        d = document.documentElement, 
        o = document.createElement(&quot;meta&quot;);
    if (e.dpr = i, 
        e.addEventListener(&quot;resize&quot;, function() {
        clearTimeout(n), n = setTimeout(t, 300);
    }, !1), 
        e.addEventListener(&quot;pageshow&quot;, function(e) {
        e.persisted &amp;amp;&amp;amp; (clearTimeout(n), n = setTimeout(t, 300));
    }, !1), 
        d.setAttribute(&quot;data-dpr&quot;, i), o.setAttribute(&quot;name&quot;, &quot;viewport&quot;), 
        o.setAttribute(&quot;content&quot;, &quot;initial-scale=&quot; + a + &quot;, maximum-scale=&quot; + a + &quot;, minimum-scale=&quot; + a + &quot;, user-scalable=no&quot;), d.firstElementChild) 
        d.firstElementChild.appendChild(o); 
    else {
        var m = document.createElement(&quot;div&quot;);
        m.appendChild(o), document.write(m.innerHTML);
    }
    t();
}(window), document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    var e = document.createElement(&quot;input&quot;);
    e.type = &quot;hidden&quot;, 
    e.value = '{&quot;platform&quot;: &quot;qq_qzone_weixin_weibo_copy&quot;,&quot;title&quot;:&quot;&quot;,&quot;desc&quot;: &quot;&quot;,&quot;image&quot;:&quot;&quot;,&quot;comment&quot;: &quot;&quot;, &quot;url&quot;:&quot;&quot;,&quot;callback&quot;:&quot;shareCallback()&quot;}', 
    e.id = &quot;app_share_conf&quot;, document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);
}, !1);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;把视觉稿中的px转换成rem&quot;&gt;把视觉稿中的px转换成rem&lt;/h4&gt;
&lt;p&gt;我们在开发过程中拿到的设计稿都是以px作为单位的，那我们在进行移动端编程的时候该怎样对应rem大小呢?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;e.rem = d.getBoundingClientRect().width / 16&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码的意思是把屏幕分成16份，根元素的font-size就等于屏幕大小/分成份数。当然我们不一定要把屏幕分成16份，比如淘宝的Flexible.js将屏幕分成10份。&lt;/p&gt;
&lt;h4 id=&quot;缩放比例&quot;&gt;缩放比例&lt;/h4&gt;
&lt;p&gt;前面已经提到，针对不同的设备，屏幕分辨率和物理像素的倍速不同所以我们要通过获取设备来设置缩放比例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var  i = e.navigator.appVersion.match(/iphone/gi) ? e.devicePixelRatio :1, 
     a = 1 / i,&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;关于移动适配的meta标签，我们是不用事先编写的，通过这个js文件，将自动创建meta标签。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 02 Jan 2018 14:00:00 +0000</pubDate>
<dc:creator>叫我小红依吧</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huyuzhu/p/8179524.html</dc:identifier>
</item>
<item>
<title>剖析大数据平台的数据存储 - 张逸</title>
<link>http://www.cnblogs.com/wayfarer/p/data-storage-for-big-data.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wayfarer/p/data-storage-for-big-data.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;我在一次社区活动中做过一次分享，演讲题目为《大数据平台架构技术选型与场景运用》。在演讲中，我主要分析了大数据平台架构的生态环境，并主要以数据源、数据采集、数据存储与数据处理四个方面展开分析与讲解，并结合具体的技术选型与需求场景，给出了我个人对大数据平台的理解。本文讲解数据存储部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据作为一种资产，若少了存储，就成了无根之木，失去了后续挖掘的价值。在小数据时代，受存储容量与CPU处理能力限制，在现在看来相当小的数据，在当时其实也可以认为是“大数据”了。正如在蒸汽机时代，创造了时速126英里(203公里)纪录的Mallard蒸汽火车就可以被视为极速火车了。那么，为何在当时没人提出Big Data概念，得到业界关注并催生出一波数据浪潮呢？&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Big Data概念是1998年由SGI首席科学家John Masey在USENIX大会上提出的。他当时发表了一篇名为Big Data and the Next Wave of Infrastress的论文，使用了Big Data来描述数据爆炸的现象。但大数据真正得到业界关注，则是其后多年的事情了。其中大数据最重要的发酵素则是2003-2006年Google发布的GFS、MapReduce和BigTable三篇论文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我看来，小数据时代的数据量虽然在逐年增加，但是当时突破存储容量的解决办法依旧是垂直伸缩，即通过寻求更大容量的存储介质来解决这个问题。由于互联网业务不够流行，Web 2.0还未开始（更谈不上移动应用与物联网），当时IT系统要处理的数据结构相当单一，都是相对规整的关系型数据（结构数据）。因而在小数据时代，存储世界是关系数据库一统天下的时代。&lt;/p&gt;
&lt;p&gt;当存储技术的发展变得步履蹒跚，赶不上数据发展的速度时，分布式存储成为了必然选择，非结构型数据也对存储格式提出了新的要求。层出不穷的数据源也使得数据量产生了井喷似的迅猛增长。&lt;/p&gt;
&lt;p&gt;此时，分布式存储与NoSQL的诞生回应了这样的需求，解决了大数据存储的根本难题。&lt;/p&gt;
&lt;p&gt;数据存储工具如百花盛开，一时仿佛来到了数据存储的盛世。然而，乱花渐欲迷人眼，我们反而不知道该怎么选择合适的数据存储技术了。正如设计需要结合业务场景，对数据存储的技术决策同样需要结合具体的场景。决定的因素包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据源的类型与数据的采集方式&lt;/li&gt;
&lt;li&gt;采集后数据的格式与规模&lt;/li&gt;
&lt;li&gt;分析数据的应用场景&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果数据的采集是针对业务历史数据的同步与备份，那么HDFS可能就是最好的存储选择；如果数据的格式为文档型结构，那么诸如MongoDB之类的文档型数据库就可能是我们首要考虑的目标；如果存储的数据是要应对全文本搜索的应用场景，那么ElasticSearch可能才是我们的心头所爱。&lt;/p&gt;
&lt;p&gt;倘若存在某种业务场景，使得这几种决定因素互相冲突，例如既需要分布式的文档数据库，又需要支持高性能的统计分析，该怎么应对呢？这就引出了大数据平台数据存储的一个重要特征：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;相同的业务数据会以多种不同的表现形式，存储在不同类型的数据库中，形成polyglot-db这种产生数据冗余的生态环境。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有哪一款存储工具擅长应对所有的数据处理场景。&lt;/p&gt;
&lt;p&gt;在对数据存储进行技术决策时，我们需要充分了解各种存储工具的优缺点，然后结合业务场景对其进行选择。就像足球教练那样，要对各个球员的技术特点了如指掌，才能将他们安排在合适的位置上。&lt;/p&gt;
&lt;p&gt;在大数据存储领域，HDFS或许就是我们最放心的守门员，全量的历史数据都可以交给他。你几乎不用害怕他会“丢球”，而他守门的技巧是可以横向扩展的，再多再猛烈的射门他都能挡得住。&lt;/p&gt;
&lt;p&gt;PostgreSQL是保守型的后场选手，他技术全面，在保持数据一致性方面他能做到近乎完美的万无一失。性格稳重，以符合大多数教练对后防需求的思维方式来踢球。&lt;/p&gt;
&lt;p&gt;HBase属于后腰型选手，既能在防守上给PostgreSQL以协助，又不时通过列式存储的技术特点传出让人拍案叫绝的好球。&lt;/p&gt;
&lt;p&gt;Redis是中场提速器，他不仅能够加快球队的传球效率为球队提速，而且还以极高的传球命中率著称，偶尔传出的致命一击更能帮助球队攻城拔寨。Redis还是最好的团队成员，可以与各种类型的球员打出漂亮配合，他还不抢风头，只在自己最擅长的领域默默地展现自己的才华。&lt;/p&gt;
&lt;p&gt;ElasticSearch或许可以称得上是“中场大师”，因为他能为各种类型的前锋提供传球支持，并能保证球权处理的高效性。他的各种盘球技法（支持各式各样的查询）让人眼花缭乱。兴之所至时，他的盘带与传球真如水银泻地一般，No look pass的传球总是出人意料的精彩。&lt;/p&gt;
&lt;p&gt;诸如Parquet、Neo4j、Pilosa之类的数据库都可以称得上是剑走偏锋的前锋球员.他们不善于应对阵地战靠着稳扎稳打通过硬实力硬吃对手，而是像刺客一般伺机而动，对手稍有不慎，迎接他的就是一剑封喉的绝杀。&lt;/p&gt;
&lt;p&gt;对于polyglot-db这种解决方案，我们还需要细心处理好数据一致性问题，即当数据源的数据发生变化时，我们如何将这些数据变化反应到各种存储工具中。如果数据是以immutable形式存储，满足数据的一致就变得容易多了。因此在polyglot-db的场景下，我们倾向于数据保持不变。如果业务场景确实不支持，同步就会变得更复杂。在前面讲解数据采集时，我已经给出了不够完美的解决方案，庶几能解决数据同步问题。&lt;/p&gt;
&lt;p&gt;数据存储就是数据平台工程师手中的工具百宝箱，你需要熟悉各种工具的利弊，他们擅长处理的场景，然后再将好钢用在刀刃上，以求最大性的发挥工具的潜力。记住，在大数据平台中，&lt;strong&gt;不是数据驱动而是业务场景驱动你对数据存储的技术决策&lt;/strong&gt;。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 13:42:00 +0000</pubDate>
<dc:creator>张逸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wayfarer/p/data-storage-for-big-data.html</dc:identifier>
</item>
<item>
<title>Spring之DAO一 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/8179110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/8179110.html</guid>
<description>&lt;p&gt;前面博客把bean、aop简单了解了一下，今天主要是了解Spring中DAO层，如果使用传统的JDBC时需要创建连接、打开、执行sql、关闭连接这一系列的步骤，Spring框架对JDBC进行了封装，我们只需使用封装好的JdbcTemplate执行sql语句。主要还是继承了Spring提供的JdbcDaoSupport。下面主要是用来演示怎么使用JdbcDaoSupport。&lt;/p&gt;
&lt;p&gt;一、创建Model&lt;/p&gt;
&lt;p&gt;这里创建一个User类，作为model。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_038e2788-713c-407f-9aea-9abfd20423a0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_038e2788-713c-407f-9aea-9abfd20423a0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_038e2788-713c-407f-9aea-9abfd20423a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getUserId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setUserId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userId =&lt;span&gt; userId;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; money;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; getMoney() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; money;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setMoney(&lt;span&gt;float&lt;/span&gt;&lt;span&gt; money) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.money =&lt;span&gt; money;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;二、创建DAO接口并实现接口&lt;/p&gt;
&lt;p&gt;1.这里创建IUserDAO接口，声明了两个方法，一个是获取所有的User，一个是新增User。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_86f98932-a58c-4edb-a4df-575d4a634e62&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_86f98932-a58c-4edb-a4df-575d4a634e62&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_86f98932-a58c-4edb-a4df-575d4a634e62&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.IDao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Model.User;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserDAO {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt;QueryAllUser();
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Boolean AddUser(String name,&lt;span&gt;float&lt;/span&gt;&lt;span&gt; money);
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.这里实现接口IUserDAO,并且继承JdbcDaoSupport。在下面的代码中能找到getJdbcTemplate()，其实我们右键选择Open declaration 时可以定位到抽象类JdbcDaoSupport，JdbcDaoSupport里面有一个JdbcTemplate属性，而且还有get或set JDBC DataSource，然后选中JdbcTemplate，再Open declaration,发现JdbcTemplate的构造函数需要DataSource，JdbcDaoSupport提供JdbcTemplate对象，并维护着JdbcTemplate对象需要的DataSource。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_755a1ac7-ce74-4720-82ae-7cbf76aa00c1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_755a1ac7-ce74-4720-82ae-7cbf76aa00c1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_755a1ac7-ce74-4720-82ae-7cbf76aa00c1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.jdbc.core.support.JdbcDaoSupport;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.IDao.IUserDAO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Model.User;


&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserDAO &lt;span&gt;extends&lt;/span&gt; JdbcDaoSupport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IUserDAO {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; QueryAllUser() {
        
        String sql&lt;/span&gt;=&quot;select id,name,money from tb_user&quot;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; list=&lt;span&gt;getJdbcTemplate().queryForList(sql);
        List&lt;/span&gt;&amp;lt;User&amp;gt; userList=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Map&amp;lt;String,Object&amp;gt;&lt;span&gt; row:list)
        {
            User user&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
            user.setUserId((Integer)row.get(&lt;/span&gt;&quot;id&quot;&lt;span&gt;));
            user.setName((String)row.get(&lt;/span&gt;&quot;name&quot;&lt;span&gt;));
            user.setMoney((Float)row.get(&lt;/span&gt;&quot;money&quot;&lt;span&gt;));
            userList.add(user);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userList;
        
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Boolean AddUser(String name,&lt;span&gt;float&lt;/span&gt;&lt;span&gt; money) {
        String sql&lt;/span&gt;=&quot;insert into tb_user (name,money) values (?,?)&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; row=getJdbcTemplate().update(sql, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[]{name,money});
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(row&amp;gt;0&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_bce60634-4aa1-4411-9534-ffad313d5e70&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bce60634-4aa1-4411-9534-ffad313d5e70&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bce60634-4aa1-4411-9534-ffad313d5e70&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JdbcTemplate(DataSource dataSource) {
        setDataSource(dataSource);
        afterPropertiesSet();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3.上下文配置&lt;/p&gt;
&lt;p&gt;上面DataSource从哪里来呢?就需要在上下文中配置。首先配置DataSource，然后由于UserDAO继承了抽象类JdbcDaoSupport，所以也需要设置属性dataSource&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_19c43202-3a6d-4d59-9d22-f8d8beb9274f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_19c43202-3a6d-4d59-9d22-f8d8beb9274f&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_19c43202-3a6d-4d59-9d22-f8d8beb9274f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;span&gt;
xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;
&lt;/span&gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context/spring-context.xsd&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc/spring-mvc.xsd&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop/spring-aop.xsd&lt;/span&gt;
&quot;&amp;gt;
&amp;lt;bean id=&quot;dataSource&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&amp;gt;
  &amp;lt;property name=&quot;driverClassName&quot;&amp;gt; 
          &amp;lt;value&amp;gt;com.mysql.jdbc.Driver&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;url&quot;&amp;gt;
          &amp;lt;value&amp;gt;jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3306/spring&amp;lt;/value&amp;gt;&lt;/span&gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;username&quot;&amp;gt;
          &amp;lt;value&amp;gt;root&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;password&quot;&amp;gt;
      &amp;lt;value&amp;gt;123456&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt; 
&amp;lt;/bean&amp;gt; 
&amp;lt;bean id=&quot;userDao&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Dao.UserDAO&quot; depends-on=&quot;dataSource&quot;&amp;gt;
    &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;4.Mysql新增数据库和表&lt;/p&gt;
&lt;p&gt;上面2中UserDAO执行了两个sql，涉及到表tb_user，字段id、name、money。在3上下文配置mysql时指定了数据库名spring。所以按照上面的创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201801/733213-20180102211456518-1023663471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.实验&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_2de3fd7f-545d-4ef0-a68f-a500019bbb1b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2de3fd7f-545d-4ef0-a68f-a500019bbb1b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2de3fd7f-545d-4ef0-a68f-a500019bbb1b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
        ApplicationContext context=&lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span&gt;new&lt;/span&gt; String[]{&quot;ApplicationContext.xml&quot;&lt;span&gt;});
        BeanFactory factory&lt;/span&gt;=&lt;span&gt;context;
        IUserDAO userDao&lt;/span&gt;=(IUserDAO)factory.getBean(&quot;userDao&quot;&lt;span&gt;);
        userDao.AddUser(&lt;/span&gt;&quot;cuiywA&quot;,888&lt;span&gt;);
    
        userDao.AddUser(&lt;/span&gt;&quot;cuiywB&quot;,666&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;User&amp;gt; list=&lt;span&gt;userDao.QueryAllUser(); 
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(User u:list)
        {
            System.out.println(&lt;/span&gt;&quot;name:&quot;+u.getName()+&quot; money: &quot;+&lt;span&gt;u.getMoney());
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201801/733213-20180102211731924-1305263402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.错误&lt;/p&gt;
&lt;p&gt;在实现上面的步骤时报了好几个错误，有因为我疏忽的，还有数据类型和数据库不一直的，最重要的两个我这里也记录了下来。&lt;/p&gt;
&lt;p&gt;1.下面的错误是由于缺少commons-dbcp.jar、commons-pool.jar导致的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Cannot find &lt;span&gt;class&lt;/span&gt; [org.apache.commons.dbcp.BasicDataSource] &lt;span&gt;for&lt;/span&gt; bean with name 'dataSource' defined in &lt;span&gt;class&lt;/span&gt; path resource [ApplicationContext.xml]; nested exception is java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.还有就是我在UserDAO中继承了JdbcDaoSupport，但就是没自动提示要引入的包，这个第一次没经验，百度了才指定需要引入spring-jdbc.jar.&lt;/p&gt;
&lt;p&gt;3.忘记引入mysql驱动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Failed to obtain JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver &lt;span&gt;class&lt;/span&gt; 'com.mysql.jdbc.Driver'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的错误都是没有引入jar包，这里把pom.xml也放进来，留着以后好用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2a7589ae-107f-48b0-bdd8-c877de55c5c7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2a7589ae-107f-48b0-bdd8-c877de55c5c7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2a7589ae-107f-48b0-bdd8-c877de55c5c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
  xsi:schemaLocation&lt;/span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

  &amp;lt;groupId&amp;gt;Cuiyw&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;SpringAop&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;

  &amp;lt;name&amp;gt;SpringAop&amp;lt;/name&amp;gt;
  &amp;lt;url&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;maven.apache.org&amp;lt;/url&amp;gt;&lt;/span&gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
      &amp;lt;spring.version&amp;gt;5.0.0.RELEASE&amp;lt;/spring.version&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
       
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-dbcp&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-dbcp&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-pool&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-pool&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/mysql/mysql-connector-java --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        
        &amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
          &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
            &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/aspectj/aspectjweaver --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;aspectj&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.5.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
            &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/aspectj/aspectjrt --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;aspectj&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;aspectjrt&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.5.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    
  &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 02 Jan 2018 13:30:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/8179110.html</dc:identifier>
</item>
<item>
<title>自己动手写把”锁”之---JMM和volatile - metoy</title>
<link>http://www.cnblogs.com/qingquanzi/p/8179042.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qingquanzi/p/8179042.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、JAVA内存模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于Java内存模型的文章，网上真的数不胜数。在这里我就不打算说的很详细、很严谨了。只力求大家能更好的理解和运用，为后边的技术点做铺垫。&lt;/p&gt;

&lt;p&gt;内存模型并不是Java独有的概念，而是我们的计算机硬件平台的一个概念。内存模型描述了程序中变量如何在从内存读出、以及何时写会内存的底层细节。&lt;/p&gt;

&lt;p&gt;我们知道，程序运行其实就是CPU和内存的频繁交互的过程。随着CPU的快速发展，CPU的执行速度越来越快，但是内存却很难跟上CPU的执行速度，为了解决这一矛盾，CPU厂商就为每颗CPU加了高速缓存，用来缓解这个速度不匹配的问题。因此，CPU和内存的交互变成了这个样子：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203025549-344338965.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/85B805F85A0A44788B2FBE67E0C5B555&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;以上只是在CPU和内存之间加了个高速缓存，其实也还没什么问题。那内存模型这个概念是怎么产生的呢？继续往下看。&lt;/p&gt;

&lt;p&gt;CPU虽然在不停的发展，但单个CPU的主频速度不可能无限制的增长，为了进一步提高计算性能就引入了多核技术。由于每个cpu都有自己的高速缓存，当多个CPU操作同一个内存数据时，就产生了缓存不一致的问题。如下图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203122831-1096995048.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/178CB4466AD1464F84EC0248387620A5&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;为了解决这个不一致的问题，就需要处理器在运行时要遵循某些协议，这类协议包括MSI、MESI、MOSI等等。到这里就有了内存模型这个概念，它就是用来描述数据在各个高级缓存以及内存之间的交互细节。不同的硬件处理器架构，就会有不同的内存模型。所以用c/c++开发多线程程序时，就需要考虑不同操作平台下的内存模型。&lt;/p&gt;

&lt;p&gt;所幸我们是学Java的，Java平台为了屏蔽不同硬件平台的不同内存模型给开发人员带来的成本，引入了Java内存模型，即JAVA Memory Model，简称JMM。&lt;/p&gt;

&lt;p&gt;要想深入掌握JAVA多线程并发编程，Java内存模型是必须要了解的。Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。直白点说就是：同一个变量，被多个cpu上执行的多个线程访问，每个cpu的高速缓存都缓存了这个变量，当某个线程修改了高速缓存里的变量，何时通知给其他的cpu线程让它可见，以及何时将变量同步回内存(主存)。如下图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203227346-819183598.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/509DFDAD2F1944479953709CBE56BDB4&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Java虚拟机的内存模型和计算机硬件的内存模型基本一致。在Java内存模型中，分为线程私有的本地内存和线程共享的主内存，线程在读写变量时会把主内存里的变量缓存到本地内存，换句话说，本地内存存放了主内存中变量的副本。主内存和本地内存其实是一种逻辑上的划分，并不是实际的物理内存。&lt;/p&gt;

&lt;p&gt;这里需要强调一下，这里的变量指的是分配到堆上的变量，即线程之间可以共享的变量。本地变量是线程私有的，所以不会有可见性问题。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、volatile&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Java内存模型中说到了线程间共享变量的可见性问题。可见性问题其实就是缓存不一致的问题。如下图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203303815-2125562857.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/16F2F9275DDC4276AC779C5EBF042598&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;线程B读取变量X，并缓存到了自己的本地内存中，线程A也将变量X缓存到本地内存中并修改为2，这时线程B并不知道变量X修改为2。这就是线程间不可见的问题。为了解决这个问题，就引入了volatile关键字，被volatile修饰的变量将不会在本地内存缓存，线程直接通过主内存来读写变量。虽然解决了不可见的问题，但也是以牺牲性能为代价的。&lt;/p&gt;

&lt;p&gt;volatile关键字相信你已经理解了，但是在Java中volatile并不仅仅是这个功能。在这里我通过与c语言中的volatile对比扩展下。&lt;/p&gt;
&lt;p&gt;有的时候我们可能会面临这么个场景，线程1执行某些业务逻辑，线程2判断线程1是否执行完，执行完了则线程2执行另一个逻辑，如下伪代码：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1287675/201801/1287675-20180102203337862-1369204950.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/F6CD4C8E225B438D877EA9877128348B&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;我们通过一个flag变量来标识线程1是否执行完相关逻辑，为了保证flag的改变对线程2可见，这里使用了volatile关键字修饰。如果这个伪代码采用Java实现，这是没问题的，如果c实现，则就会有坑。&lt;/p&gt;
&lt;p&gt;这个坑主要是源于指令重排。为了提高执行效率减少内存的交互，编译器会根据情况对执行的指令做一个重排序。所以线程1中执行相关业务逻辑后，再将flag设置为true的逻辑，极有可能重排为：先设置flag=true然后再执行相关业务逻辑。这也是c语言为啥不提倡使用volatile的原因。&lt;/p&gt;

&lt;p&gt;但是为什么在Java中就不会有这个坑呢，难道Java没有指令重排序吗？&lt;/p&gt;
&lt;p&gt;当然不是，Java也会有重排序，不过Java对volatile做了如下的极大增强：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有对volatile变量的写操作之前的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的写操作之后。&lt;/li&gt;
&lt;li&gt;所有对volatile变量的读操作之后的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的读操作之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试中，有面试官比较喜欢问这么一个问题：能否用volatile修饰的整数变量n，通过n++操作实现计数的功能？这个问题就是考查应试者对volatile的理解。我这里简单地说一下。&lt;/p&gt;
&lt;p&gt;答案肯定是不能。volatile实现的是线程间共享变量的可见性，并不是原子性操作。++操作其实可以拆分为这么几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;读取主内存里的变量&lt;/li&gt;
&lt;li&gt;cpu完成变量的++,然后写会主内存。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以可以想象这么一个执行顺序：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;线程A读取volatile变量X=0&lt;/li&gt;
&lt;li&gt;线程B读取volatile变量X=0&lt;/li&gt;
&lt;li&gt;线程A完成++操作，然后将X=1写回主存。&lt;/li&gt;
&lt;li&gt;线程B也完成++操作将X=1写回主存。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这么一个执行顺序下，对X进行了++两次，但值却只增加了1。&lt;/p&gt;


&lt;p&gt;关于如何实现原子性操作，我将在下一节进行讨论。&lt;/p&gt;



</description>
<pubDate>Tue, 02 Jan 2018 12:35:00 +0000</pubDate>
<dc:creator>metoy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qingquanzi/p/8179042.html</dc:identifier>
</item>
<item>
<title>Java设计模式总汇一 - CMusketeer</title>
<link>http://www.cnblogs.com/cmusketeer/p/8146510.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmusketeer/p/8146510.html</guid>
<description>&lt;p&gt;PS：首先我们要带着问题读文章&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;什么是设计模式&lt;/li&gt;
&lt;li&gt;为什么要用设计模式&lt;/li&gt;
&lt;li&gt;使用设计模式有什么好处&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。&lt;/p&gt;
&lt;p&gt;　　　该篇文章主要写的是（介绍没有顺序）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;适配器设计模式&lt;/li&gt;
&lt;li&gt;单例设计模式&lt;/li&gt;
&lt;li&gt;静态代理设计模式&lt;/li&gt;
&lt;li id=&quot;6155-1513685496264&quot;&gt;简单工厂设计模式&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;1：适配器设计模式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;意图：&lt;/strong&gt;将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要解决：&lt;/strong&gt;主要解决在软件系统中，常常要将一些&quot;现存的对象&quot;放到新的环境中，而新环境要求的接口是现对象不能满足的。&lt;/p&gt;
&lt;p&gt;官方给出：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt; 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。&lt;/p&gt;
&lt;p&gt;示例：这里我简单写一个关于两个接口的例子，来调用里面的方法来看看效果这两个接口我们可以理解成充电器，一个是苹果lighting口，一个安卓充电器，我们都知道这两个充电器接口是不一样的，但是淘宝上有卖转换头的，可以在苹果头上套一个转换器就可以冲安卓手机里，这中间的转换头就是我们所说的适配器，我再配张图（中间一头是方形一头是圆形就是适配器）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201712/1258190-20171229220440148-1502730271.png&quot; alt=&quot;&quot; width=&quot;776&quot; height=&quot;264&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好，废话不多说，开始&lt;/p&gt;
&lt;p&gt;（1）首先写一个A苹果接口，一个B安卓接口然后实现该接口里的方法，开始工作&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//实现A
class PowerA {
        public void workA(){}
}
class PowerAiml extends PowerA{
        public void workA(){
                System.out.println(&quot;我是A，我要开始工作了&quot;);
        }
}
//实现B
class PowerB {
        public void workB(){}
}
class PowerBiml extends PowerB{
        public void workB(){
                System.out.println(&quot;我是B，我要开始工作了&quot;);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （2）写一个方法只有A（苹果）接口可以用。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public static void work(PowerA a){
                System.out.println(&quot;开始-------&quot;);
                a.workA();
                System.out.println(&quot;结束-------&quot;);
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （3）调用查看效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
PowerA pa=new PowerAiml();
                work(pa);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180102185706174-357747784.png&quot; alt=&quot;&quot; width=&quot;538&quot; height=&quot;136&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样使用是没有任何问题的，因为参数就是PowerA a，只要是传入实现PowerA接口的class都可以调用该方法，但是，问题来了，如果我想让使用PowerB怎么办呢，有两个方法，一个是再写一个work2（PowerB b），另一个是用适配器的方法，显然第一种方法对于这个例子是最简单的，但是在一个软件编写的过程中不光是这一点代码，代码有很多，难道都要再写方法吗，那样子就太麻烦了，现在就用适配器的方法&lt;/p&gt;
&lt;p&gt;（4）适配器&lt;/p&gt;
&lt;p&gt;想要使用A方法，就要伪装成A，把适配器实现PowerA&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//适配器：
class Adapter1 extends PowerA{
        public PowerB b;
        public Adapter1(PowerB b){
                this.b=b;
        }
        //当调用A的时候，就自动调用B里的方法。
        public void workA(){
                b.workB();
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 调用的时候是，一头与B关联，一头与A关联&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
PowerB b=new PowerBiml();
Adapter1 adapter=new Adapter1(b);
work(adapter);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180102190643424-941545564.png&quot; alt=&quot;&quot; width=&quot;591&quot; height=&quot;151&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解释一下：在Adapter1中传入的b，然后把adapter传入work，虽然调用的都是workA，但是关键来了，在workA方法中又调用了b.workB()；就是这么一个思路。&lt;/p&gt;
&lt;p&gt;这是一个非常简单的例子，在开发过程中，真正要用到适配器要比这个看似复杂点，原理都是一样的，毕竟小孩子的性格是天真的，大人的性格就变化莫测了。&lt;/p&gt;
&lt;h2&gt;2：代理设计模式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;意图：&lt;/strong&gt;为其他对象提供一种代理以控制对这个对象的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要解决：&lt;/strong&gt;在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;何时使用：&lt;/strong&gt;想在访问一个类时做一些控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何解决：&lt;/strong&gt;增加中间层。&lt;/p&gt;
&lt;p&gt;静态代理模式，说白了就是委托，将所有的事情都委托给别人帮你完成，你所要做的，就是给代理一些东西，接下来所有的事情都是代理帮你完成，你完全不用去关心内部是如何实现的。举个例子简单的说一下，一个人买衣服，可以去实体店也可以去网上，买火车票的时候，你就知道售票员就会给你 你想要的票，而且你只需要给他钱和身份证以及地点就可以了，他会经过处理，最后把票给你，他就处于一个代理模式。下面我简单写一个例子&lt;/p&gt;
&lt;p&gt;比如说我只想要水，我就给你送水的公司打电话让他们送一桶水，然后我就在家等着就可以，在这期间谁送水，怎么送，需要多久，什么样的水等一切我都不需要知道，这都被送水公司代理了。OK&lt;/p&gt;
&lt;p&gt;（1）先写一个要水的类和接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Action{
        public void work(){}
}
class MyAction extends Action{
        public void work(){
                //在这期间可能会有我不想做的事，但还是要有，比如说一共耗时，打水结果要的是水，但必需要拿水桶等。
                //这些东西都是可以让代理给做了，
                System.out.println(&quot;获得水&quot;);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （2）写代理类&lt;/p&gt;
&lt;p&gt;如果不写代理类的话，也可以直接调用work方法，但是就相当于自己去搬水，而不是用代理。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * 代理类
 *      控制，在方法前或后所要做的类。
 * */
class DaiLiAction extends Action{
        private Action action;
        public DaiLiAction(Action action){
                this.action=action;
        }
        public void work(){
                System.out.println(&quot;我是送水公司&quot;);
                System.out.println(&quot;代理正在处理中。。。&quot;);
                System.out.println(&quot;代理处理完了返回给你结果&quot;);
                action.work();
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （3）调用即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
Action ac=new MyAction();
//把对象给代理类，工作是由代理完成。
DaiLiAction dai=new DaiLiAction(ac);
dai.work();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180102193352487-1701837732.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;135&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3：单例设计模式&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/cmusketeer/p/8016550.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cmusketeer/p/8016550.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;4:简单工厂设计模式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;意图：&lt;/strong&gt;定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要解决：&lt;/strong&gt;主要解决接口选择的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;何时使用：&lt;/strong&gt;我们明确地计划不同条件下创建不同实例时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何解决：&lt;/strong&gt;让其子类实现工厂接口，返回的也是一个抽象的产品。&lt;/p&gt;
&lt;p&gt;哦，对了，这是简单工厂设计模式，还有抽象工厂设计模式，和这个类似，下一篇再说，这里先举例说明这个模式，使用该模式可以降低使用者和被使用者之间的依赖。比如说，我开了一个工厂，下面有部门，一个是造手机的，一个是造电脑的，OK&lt;/p&gt;
&lt;p&gt;（1）创建手机和电脑类&lt;/p&gt;
&lt;div readability=&quot;22&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * 工厂接口
 * */
interface Factory1{
        public void create();
}

/**
 * 手机
 * */
class Phone implements Factory1{
        @Override
        public void create() {
                System.out.println(&quot;我是造--手机--的&quot;);
                
        }
}
/**
 * 电脑
 * */
class Computer implements Factory1{
        @Override
        public void create() {
                System.out.println(&quot;我是造--电脑--的&quot;);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）创建工厂控制类FactoryControl&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * 工厂控制类
 * */

class FactoryControl{
        public static Factory1 getGood(String good){
                if(good.equalsIgnoreCase(&quot;phone&quot;)){
                        return new Phone();
                }else if(good.equalsIgnoreCase(&quot;computer&quot;)){
                        return new Computer();
                }
                return null;
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; (3)调用和效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
Factory1 factory=FactoryControl.getGood(&quot;phone&quot;);
                factory.create();
                
                factory=FactoryControl.getGood(&quot;computer&quot;);
                factory.create();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1258190/201801/1258190-20180102200431878-1015970498.png&quot; alt=&quot;&quot; width=&quot;546&quot; height=&quot;99&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以不经过FactoryControl（工厂类）,也是可以调用的，但是如果是大工程，使用该模式可以降低使用者和被使用者之间的依赖。这里就算你传入一个耳机，没有这个功能，它也不会报错，返回null。&lt;/p&gt;
&lt;p&gt;好了，下一篇就会继续写剩下的19个设计模式，例子都是简单易懂的，只要理解了，慢慢的再写复杂的代码就轻松了，只要有了思想，写代码就简单了，可以告别有能力但总觉得无处施展的尴尬。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 02 Jan 2018 12:11:00 +0000</pubDate>
<dc:creator>CMusketeer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmusketeer/p/8146510.html</dc:identifier>
</item>
<item>
<title>我是如何确认线上CLOSE_WAIT产生的原因及如何解决的。 - 杜先生的博客</title>
<link>http://www.cnblogs.com/dukuan/p/8178728.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dukuan/p/8178728.html</guid>
<description>&lt;p&gt;1、阐述&lt;/p&gt;
&lt;p&gt;　　内部架构：Tomcat应用程序---&amp;gt; nginx ---&amp;gt; 其他Tomcat应用程序，内部Tomcat应用通过nginx调用其他应用。&lt;/p&gt;
&lt;p&gt;　　HTTP插件：HttpClient 4.2.3&lt;/p&gt;
&lt;p&gt;　　关闭连接的代码：httpClient.getConnectionManager().closeIdleConnections(5, TimeUnit.SECONDS);&lt;/p&gt;
&lt;p&gt;2、说明&lt;/p&gt;
&lt;p&gt;　　要说明的是CLOSE_WAIT产生的原因和服务器、nginx、其他配置无关，是HttpClient的getConnectionManager引起的。&lt;/p&gt;
&lt;p&gt;3、排查思路&lt;/p&gt;
&lt;p&gt;　　这个问题已经困扰我很久了，查看过网上的很多办法，也试过很多方法。&lt;/p&gt;
&lt;p&gt;　　比如：修改服务器内核、修改nginx配置文件、更改nginx版本，都是没有用的，还是上面那句话和服务器、nginx无关。&lt;/p&gt;
&lt;p&gt;　　最后决定自己分析请求，查找真正的根本原因，以下为排查的最终步骤&lt;/p&gt;
&lt;p&gt;4、问题排查&lt;/p&gt;
&lt;p&gt;　　首先确认CLOSE_WAIT产生的链接，链接的IP和端口&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1095387/201801/1095387-20180102174806393-1814489249.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　由上图看出是本机链接nginx 81端口造成的CLOSE_WAIT&lt;/p&gt;
&lt;p&gt;　　抓包分析其中一个CLOSE_WAIT所用的本机端口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1095387/201801/1095387-20180102175517690-400142819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　抓包分析正常关闭的请求：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1095387/201801/1095387-20180102180730049-872426492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　分析不正常端口41584，晚上22点01分02秒请求连接，22点01分02秒传输数据结束，22点02分07秒，nginx发送关闭连接的包，Tomcat同意关闭，问题就出现在这里，在Nginx请求关闭连接后，Tomcat并没有回复同样关闭连接的包，没有完成四次握手，故产生了CLOSE_WAIT。&lt;/p&gt;
&lt;p&gt;　　分析所有正常连接发现没有产生CLOSE_WAIT的端口都是Tomcat主动关闭的，产生CLOSE_WAIT的都是nginx主动关闭，Tomcat被动关闭的。&lt;/p&gt;
&lt;p&gt;　　再次分析所有的不正常端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1095387/201801/1095387-20180102182923253-1093009831.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　发现Tomcat周期性的向Nginx发送关闭连接的请求，但是Nginx回复Reset包，说白了就是Tomcat请求关闭连接，但是Nginx说我没有这个链接(已经在前面主动关闭)，所有CLOSE_WAIT会一直存在，直至两个小时以后系统强制关闭。至于为什么会周期性的一起并发的关闭的连接，而不是一个一个关闭，或者为什么在收到Nginx关闭连接请求，Tomcat不关闭，看上述Java代码：httpClient.getConnectionManager().closeIdleConnections(5, TimeUnit.SECONDS);&lt;/p&gt;
&lt;p&gt;　　这段代码表示调用httpClient的getConnectionManager，然后利用closeIdleConnections进行关闭空闲连接，5代表是五秒(不知道解释的对不对)。&lt;/p&gt;
&lt;p&gt;　　网上查找getConnectionManager，说是httpclient的链接池管理工具。就是把请求都扔里面，然后Manager帮你做相关处理。&lt;/p&gt;
&lt;p&gt;　　但是上述代码写的是5秒之内连接空闲就会关闭，httpclient又是一个很成熟的技术，于是没有怀疑这个的问题(我不是开发，代码层我无法分析)。&lt;/p&gt;
&lt;p&gt;　　继续分析其他正常关闭的包，发现并不是所有正常关闭的连接都是五秒关闭的，而产生CLOSE_WAIT的，一般请求关闭都是超过65秒的(65是nginx keepalive timeout的值)，为了确认问题的根源，我把nginx的keepalive timeout设置为240秒(Nginx主动关闭连接后，最长Tomcat第一次发送关闭连接的包据数据传输完毕的时间间隔为3分28秒)，实时查看CLOSE的增长变得缓慢，改为360秒，几乎不怎么增长，但是还有增长，索性改为0，过了一个多小时，只会下降，不会增多，所以断定是HTTPCLIENT出现的问题。&lt;/p&gt;
&lt;p&gt;5、继续分析&lt;/p&gt;
&lt;p&gt;　　查看httpclient官方文档：http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ClientConnectionManager.html&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1095387/201801/1095387-20180102190431628-677106284.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面说在给定的时间内(上述代码的五秒)链接没有被使用，就会在池中关闭连接。同时也会关闭过期的连接。&lt;/p&gt;
&lt;p&gt;　　看解释说只要连接5秒没有被使用，就会关闭连接，不会大于65秒的，至此又回到诧异懵逼中。。。&lt;/p&gt;
&lt;p&gt;　　再次回想连接池中周期性发送FIN包，让我判断没有在五秒内关闭连接只有两种可能：一、配置没有生效，二、HTTPCLIENT空闲连接检测机制。&lt;/p&gt;
&lt;p&gt;　　把自己的想法说给开发人员说后，无法断定空间连接检测的机制是什么，于是决定修改代码，换用另一种关闭的方式(没有时间考虑上面的两个想法)：将所有完成请求的连接通过httpclient的releaseConnection和SHUTDOWN进行关闭，修改完成并在测试环境部署(测试环境也同样有CLOSE_WAIT)，运行至今改过代码的并无产生任何CLOSE_WAIT。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1095387/201801/1095387-20180102193654440-544118200.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;6、总结&lt;/p&gt;
&lt;p&gt;　　CLOSE_WAIT产生的原因是由代码引起的，目前能确认的是HTTPCLIENT的getConnectionManager的连接池引起的，但是为什么设置的5秒没有生效，空闲连接的检测机制是什么，这些还无法得知，&lt;/p&gt;




</description>
<pubDate>Tue, 02 Jan 2018 11:23:00 +0000</pubDate>
<dc:creator>杜先生的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dukuan/p/8178728.html</dc:identifier>
</item>
<item>
<title>2017年总结和明年规划 - 大魔王先生</title>
<link>http://www.cnblogs.com/wtzbk/p/8169154.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wtzbk/p/8169154.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;这一年的变化很大，其实也是受到园友的影响，在此谢谢Edison Chou!也是因为他开始我的博客之旅，还有很多思想方面，习惯都有很大的影响。当然答应你的龙井，今年明前茶给你搞点，哈哈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、2017年终总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;这一年一共写了20篇博客，最少每篇访问量基本在200人左右，收获粉丝18枚，这是一个很大的进步。当然这20篇博客也是伴随着我的学习过程，下面我主要说一下学习了那些东西：&lt;/p&gt;
&lt;p&gt;      1.图解TCP/IP&lt;/p&gt;
&lt;p&gt;         这本书写的相对来说比较简单,主要就是了解下TCP/IP方面的知识，整体上没什么难度，大力推荐阅读下，当然这也是我第一篇开篇博客，有很重大的意义。&lt;/p&gt;
&lt;p&gt;      2.图解HTTP&lt;/p&gt;
&lt;p&gt;         这本也是一本入门书籍，如果你是学习Web那必须要读一下这本书，或许能让你对Web的理解更上一层楼，主要讲述HTTP协议常用方法，报文结构，协议格式，状态码等一系列内容总体不错。&lt;/p&gt;
&lt;p&gt;     3.精通ASP.NET MVC5&lt;/p&gt;
&lt;p&gt;         这本书写的很好，看完整体上对MVC框架运作会有深入理解，也是大力推荐阅读，另外有兴趣还可以自己搞一个MVC框架玩一玩，这样理解更深刻，看这本书的时候我也写了几篇博客，但是一直没整理好，这是一个遗憾。&lt;/p&gt;
&lt;p&gt;     4.大话设计模式&lt;/p&gt;
&lt;p&gt;         这本书以故事的形式去讲解设计模式，写的风趣幽默，大概读了60%左右，有些个设计模式还是没有很融汇贯通，还需在努力一把，当然这本书也是大力推荐之一；&lt;/p&gt;
&lt;p&gt;     5.代码的整洁之道&lt;/p&gt;
&lt;p&gt;         这本书看完之后就忘记了，但是你想要写出优秀的代买这本还是必须要读，当然这也是我下一年要读的，到时候会来个一系列博客。&lt;/p&gt;
&lt;p&gt;     6.Java核心卷I&lt;/p&gt;
&lt;p&gt;        这是转Java以后的第一本书，除去Swing部分没有读，整本书通读一遍，另外重点部分比如集合，反射，代理和多线程部分又重新温习过一篇。&lt;/p&gt;
&lt;p&gt;     7.Java核心卷2&lt;/p&gt;
&lt;p&gt;        这本简单看了几章，基本已经忘光，不推荐买。&lt;/p&gt;
&lt;p&gt;     8.Spring实战&lt;/p&gt;
&lt;p&gt;        这本看算是看了50%吧，还是可以的入门级书，Spring部分源码还是需要读一下的。&lt;/p&gt;
&lt;p&gt;     9.大话数据结构&lt;/p&gt;
&lt;p&gt;        这本看了80%，讲的很不错，值得入手，数据结构和算法还是很重要的，这是内功需要学习下，当然读了这本书以后，在结合JDK集合源码思考下，那你集合基本上就理解彻底了。&lt;/p&gt;
&lt;p&gt;     10.深入理解Java虚拟机&lt;/p&gt;
&lt;p&gt;        这本书看了2遍，主要讲述了JVM相关方面的东西，非常值得读，看完以后感觉有本质的提升，是由内到外的那种感觉。&lt;/p&gt;
&lt;p&gt;     11.Java并发编程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;       &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt; 这本书本来计划在过年之前读完的，但是不幸家里有点事，只是读了前几章，但是还是很提推荐大家入手。&lt;/p&gt;
&lt;p&gt;     以上基本是这一年看过的书籍，不敢说全部理解，反正对我个人来说提升还是很大的，算上是飞跃的一年把，其实过程还是很痛苦的，熟悉C#的我一下转成Java难免会有些不适应，还有很多坑要去踩，还有好多框架需要去学习，理解；所以注定新年里还是奔波，忙碌的一年。&lt;/p&gt;
&lt;p&gt;     技术上的事谈完了，这里谈一下生活，当然这是我意想不到的事，一手抚养我长大的奶奶去了，遗憾的是没有见上最后一面，懊恼的是老人家一生受苦，为什么在我有能力让他享受天伦之乐的时候要让他换上这种病，当然还有就是我一直没有满足老人家心愿，早点带回去一个女朋友，让老人家带着遗憾走的，我也知道这种事不能强求，但是我还是不能原谅我自己，用一首诗来表达下我的心情：亲人已仙游,未呈儿孙福。游魂于千里,如何度思量。让我想起季老的《我和北大》的第一辑，深深体会到了他的那种遗憾与思念之情。再谈一下工作，在国企上班的这一年里，气氛太安逸，使我不适应，但是不得不说福利是很到位的，但是我又是一个不太想安逸的人，因为现在的安逸是为未来埋雷，怀揣的这样的心态，我这一年里看了上面那些书，做了转行Java的准备，在公司上了一个Java系统，就这样过完2017年。&lt;/p&gt;
&lt;p&gt;   这里总结一下，2017年我个人的进步还是值得肯定的，看书计划基本完成80%，总体比较满意，工作上领导布置的任务都能按时完成，但是过于安逸的氛围我不太喜欢，因为这样我怕我会懈怠，生活上自己也有几W的存款，这比在山西工作的2年进步的太多了，明年也有购房计划，当然我计划在太原或者郑州买房，估计要啃一把老了，奶奶去世我挺遗憾，但是我依然会前行，我相信她更希望看到进步的我，接下来我们谈一下新年计划吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、新年计划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;新年计划计划还是从工作、生活和学习三方面谈起。首先来谈一下工作：工作在2017年的时候基本有个简单计划，2018年是去落实的一年，总体上要实现这几个目标：&lt;/p&gt;
&lt;p&gt;   1.工作的语言由C#转变为Java；&lt;/p&gt;
&lt;p&gt;   2.选择金融行业或者电商行业的互联网公司，更偏向于大公司；&lt;/p&gt;
&lt;p&gt;   3.薪资希望在现在的基础上增加30%；&lt;/p&gt;
&lt;p&gt;   4.希望在并发和数据处理这块能扩展一下；&lt;/p&gt;
&lt;p&gt;   接下来谈一下生活：&lt;/p&gt;
&lt;p&gt;   1.如果有合适的妹子，那么就来谈一下对象吧；&lt;/p&gt;
&lt;p&gt;   2.房子不知道郑州还是太原，郑州发展更好一点，太原同学都在太原，有点不知道该如何抉择，但是在6-7月份还是要买的；&lt;/p&gt;
&lt;p&gt;   3.如果时间允许的话，想去趟西藏和云南；&lt;/p&gt;
&lt;p&gt;   4.继续2017年和Edison Chou的赌约每周10公里，天气转暖开始Keep锻炼；&lt;/p&gt;
&lt;p&gt;   最后来谈学习:&lt;/p&gt;
&lt;p&gt;   1.Java并发编程，这本书是重点，也是想搞好并发的基础，必须搞明白；&lt;/p&gt;
&lt;p&gt;   2.Redis实战，学习下理论知识，现在只是会用，需要对知识做一下系统整理；&lt;/p&gt;
&lt;p&gt;   3.Java编程思想，此书也是想搞好Java必读精品，阅读的时候对重点部分做一下博客整理；&lt;/p&gt;
&lt;p&gt;   4.Mysql技术Innodb存储引擎，深入了解下数据库方面的知识，不再是简单盲目的优化和处理；&lt;/p&gt;
&lt;p&gt;   5.大话数据结构，把剩下的部分阅读完成，这个需要在跳槽之前完成；&lt;/p&gt;
&lt;p&gt;   6.代码的整洁之道，结合自己代码进行实践；&lt;/p&gt;
&lt;p&gt;   8.重构-改善既有代码的设计，阅读这本书和代码的整洁之道基本也一样；&lt;/p&gt;
&lt;p&gt;   9.敏捷软件开发原则、模式和实践，也和上面2本的目标基本一样；&lt;/p&gt;
&lt;p&gt;   10.Liunx私房菜基础版，扩展下Liunx知识；&lt;/p&gt;
&lt;p&gt;    需要看的书基本就这些了，然后还需要看下JDK部分源码，还有Spring部分源码需要读一下，另外在学习Spring Cloud玩一下微服务设计，跟上时代步伐；另外学习下新概念的课程，英语好好搞一下，基本规划就这样，愿一切顺利进行。&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 10:53:00 +0000</pubDate>
<dc:creator>大魔王先生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wtzbk/p/8169154.html</dc:identifier>
</item>
</channel>
</rss>