<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【强化学习笔记】关于一篇对话系统文献综述的读后感 - 狼.wrz</title>
<link>http://www.cnblogs.com/wolfray/p/7887652.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wolfray/p/7887652.html</guid>
<description>&lt;h3&gt;本文由&lt;a href=&quot;http://www.cnblogs.com/wolfray/&quot; target=&quot;_blank&quot;&gt;@ray&lt;/a&gt; 出品，转载请注明出处。  &lt;br/&gt;文章链接：&lt;a href=&quot;http://blog.csdn.net/poem_qianmo/article/details/78309500&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 【强化学习笔记】关于一篇对话系统文献综述的读后感&quot; href=&quot;http://www.cnblogs.com/wolfray/p/7887652.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/wolfray/p/7887652.html&lt;/a&gt;&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;上周导师安排了一个任务——读一下这篇文章&lt;/p&gt;
&lt;blockquote readability=&quot;7.3894736842105&quot;&gt;
&lt;p&gt;出处：A Survey on Dialogue Systems: Recent Advances and New Frontiers &lt;br/&gt;文章地址： &lt;a href=&quot;https://arxiv.org/abs/1711.01731v1&quot; target=&quot;_blank&quot;&gt;https://arxiv.org/abs/1711.01731v1&lt;/a&gt; &lt;br/&gt;作者： Hongshen Chen, Xiaorui Liu, Dawei Yin, Jiliang Tang&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者之前都是搞图像处理啊、单片机啊、软件开发啊这些的，没有接触过自然语言处理，对话系统这些。&lt;/p&gt;
&lt;p&gt;通过阅读这篇文章，笔者对对话系统有了初步的了解，并产生了一些想法。&lt;/p&gt;
&lt;p&gt;首先放出读了这篇文章后的思维导图： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20171123205859021?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3oyMjg4MTkxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这篇文章主要概述了对话系统，尤其是对话系统在深度学习方面的进展；还讨论了可能的研究方向&lt;/p&gt;

&lt;p&gt;对话系统根据其应用可以分为面向任务型和非面向任务型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 面向任务型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.1 目的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面向任务型对话系统的目的是帮助用户完成某些任务，比如说查找产品、预定住宿等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.2 方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面向任务型的方法可以分为三种：&lt;/p&gt;
&lt;p&gt;①流水线&lt;/p&gt;
&lt;p&gt;流水线方法中包含4个模块：&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;自然语言理解（NLU）：又可分为语义槽、意图检测和槽填充三个部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;对话状态跟随器（Dialogue State Tracking）：确保对话系统健壮性的核心组成部分。它会在每一次对话中估计用户的目标。传统方法是用手工定制规则，新方法引入了信念追踪的深度学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;对话策略学习（Policy learning）：以从状态跟随器获得的状态表示作为条件，策略学习将产生下个可用的系统动作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;自然语言生成（NLG）：将抽象的对话动作转化为浅层的自然语言表达&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;流水线方法的缺点有两个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;分数分配问题，最终用户的反馈很难回传到上游模块&lt;/li&gt;
&lt;li&gt;处理相互依赖（模块间）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;②深度学习&lt;/p&gt;
&lt;p&gt;③端到端（end-end）：一个模块，可以与结构化的外部数据进行交互&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.3 特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面向任务型的特点是通常需要在外部知识库上进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 非面向任务型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.1 目的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非面向任务型的目的是在与人类交互过程中，提供合理的反应和娱乐；其主要专注于在开放域与人交谈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.2 方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非面向任务型的方法主要有两个：&lt;/p&gt;
&lt;p&gt;①生成方法：神经生成模型，可在对话过程中产生适当的回复。&lt;/p&gt;
&lt;p&gt;序列到序列（seq2seq）模型是神经生成模型的基础。&lt;/p&gt;
&lt;p&gt;目前神经生成模型的热门研究课题大概有如下几个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对话上下文&lt;/li&gt;
&lt;li&gt;回复多样性&lt;/li&gt;
&lt;li&gt;主题和个性&lt;/li&gt;
&lt;li&gt;外部知识库&lt;/li&gt;
&lt;li&gt;交互式对话学习&lt;/li&gt;
&lt;li&gt;评价&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;②检索方法：从数据库中选择当前对话的回复。这有可以分为单轮回复匹配、多轮回复匹配和混合方法。&lt;/p&gt;

&lt;p&gt;目前对话系统的发展特点有如下两个：&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;深度学习变成了对话系统的基础技术，应用于传统面向任务的对话系统的不同模块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;充分利用大数据，结合端到端的训练和强化学习。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;ol readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;语义槽（Semantic Slots）是什么？&lt;/p&gt;
&lt;p&gt;答：&lt;/p&gt;
&lt;p&gt;语义槽类似于元数据，描述数据的数据。&lt;/p&gt;
&lt;p&gt;语义槽允许用户去详细描述说法的变量值部分。&lt;/p&gt;
&lt;p&gt;在下面的说法案例中{到达城市}和{旅行日期}就是语义槽： &lt;br/&gt;我想去{到达城市} &lt;br/&gt;预定一次{出发日期}的行程； &lt;br/&gt;计划一个到{到达城市}的假期；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;引言中提到大多对话系统，仍然使用人工特征或人工编写的规则来处理状态和动作空间表示、意图检测和槽填充。这里的人工特征和人工编写的规则是指的什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;微软小娜和苹果siri是什么型的系统？&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;真的存在一个评价标准来评价回复的质量吗？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 23 Nov 2017 15:42:00 +0000</pubDate>
<dc:creator>狼.wrz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wolfray/p/7887652.html</dc:identifier>
</item>
<item>
<title>Java提高十五：容器元素比较Comparable&amp;Comparator深入分析 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/7881885.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/7881885.html</guid>
<description>&lt;p&gt;&lt;span&gt;我们经常用容器来存放元素，通常而言我们是不关系容器中的元素是否有序，但有些场景可能要求容器中的元素是有序的，这个时候用ArrayList  LinkedList  Hashtable HashMap HashSet 这些容器本身存放的时候就没有办法做到了，这个时候我们有两种思路：第一种思路：对刚刚我们提到的容器类的元素从新排序后存放，就是后面我们要介绍的利用Collections.sort 方法进行排序，第二种思路：是容器在添加元素的时候就进行大小的比较从而来保证元素的排序。下面我开始来详细介绍本节内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、排序概念&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在讲解上面的知识点前，我们首先需要知道最基础的知识，即什么是排序？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;排序：将一组数据按照某种&lt;strong&gt;规则&lt;/strong&gt;进行&lt;strong&gt;排列顺序&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、规则：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;基本数据类型：如数据，就是日常的大小顺序&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;引用数据类型：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;内置类（String，Integer等）：内部已经指定好规则，直接使用即可。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;自定义的类：需要按&lt;span&gt;&lt;strong&gt;业务规则&lt;/strong&gt;&lt;/span&gt;排序。 &lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;2、顺序：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;升序：从小到大&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;降序：从大到小&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;3、排列：算法，如：冒泡、选择、插入、shell、堆排序等等&lt;/span&gt;&lt;span&gt;               &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、冒泡排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面说到排序的时候算法有很多种，那么这里我们介绍最简单的一种，即：冒泡排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们将会三个版本来进行演练：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt; 简易版：简单&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; 优化版：减少每趟次数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; 最终版：考虑有序，减少趟数&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;简易版：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;


&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BubbleSort1 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] arr ={9,8,7,6,5&lt;span&gt;};        
        sort(arr);
        
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一版本，很简单&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++&lt;span&gt;){
            System.out.println(&lt;/span&gt;&quot;第&quot;+(j+1)+&quot;趟&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1;i++&lt;span&gt;){
                System.out.print(&lt;/span&gt;&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                    arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                    arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                }
                System.out.println(Arrays.toString(arr));
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sortSecond(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
        System.out.println(&lt;/span&gt;&quot;第一趟&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length-1;i++&lt;span&gt;){
            System.out.print(&lt;/span&gt;&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
            }
            System.out.println(Arrays.toString(arr));
        }
        System.out.println(&lt;/span&gt;&quot;第二趟&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length-1;i++&lt;span&gt;){
            System.out.print(&lt;/span&gt;&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
            }
            System.out.println(Arrays.toString(arr));
        }
        System.out.println(&lt;/span&gt;&quot;第三趟&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length-1;i++&lt;span&gt;){
            System.out.print(&lt;/span&gt;&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
            }
            System.out.println(Arrays.toString(arr));
        }
        System.out.println(&lt;/span&gt;&quot;第四趟&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length-1;i++&lt;span&gt;){
            System.out.print(&lt;/span&gt;&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
            }
            System.out.println(Arrays.toString(arr));
        }
    
    }
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sortFirst(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
        System.out.println(&lt;/span&gt;&quot;第一趟&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length-1;i++&lt;span&gt;){
            System.out.print(&lt;/span&gt;&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
            }
            System.out.println(Arrays.toString(arr));
        }
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        //第一趟 第一次
        System.out.println(&quot;第一趟 第一次&quot;);
        int i=0;
        if(arr[i]&amp;gt;arr[i+1]){
            int temp = arr[i];
            arr[i] =arr[i+1];
            arr[i+1] =temp;
        }
        System.out.println(Arrays.toString(arr));
        System.out.println(&quot;第一趟 第二次&quot;);
        i++;
        if(arr[i]&amp;gt;arr[i+1]){
            int temp = arr[i];
            arr[i] =arr[i+1];
            arr[i+1] =temp;
        }
        System.out.println(Arrays.toString(arr));
        
        System.out.println(&quot;第一趟 第三次&quot;);
        i++;
        if(arr[i]&amp;gt;arr[i+1]){
            int temp = arr[i];
            arr[i] =arr[i+1];
            arr[i+1] =temp;
        }
        System.out.println(Arrays.toString(arr));
        
        System.out.println(&quot;第一趟 第四次&quot;);
        i++;
        if(arr[i]&amp;gt;arr[i+1]){
            int temp = arr[i];
            arr[i] =arr[i+1];
            arr[i+1] =temp;
        }
        System.out.println(Arrays.toString(arr));
        
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;说明：即每个元素需要和后面的元素比较arr.length -1 次；那么arr.length 个元素，需要进行arr.length -1 趟比较，于是就有了上面的代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;优化版本：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bjsxt.sort.bubble;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BubbleSort2 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] arr ={9,8,7,6,5&lt;span&gt;};        
        sort(arr);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二版本，减少每一趟的次数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sort(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
                System.out.println(&quot;第&quot;+(j+1)+&quot;趟&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                    System.out.print(&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                        arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                        arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                    }
                    System.out.println(Arrays.toString(arr));
                }
            }
        }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;说明：即在每一趟元素比较的时候，其和每个元素比较的次数应该是不需要去重复进行前面比较过的，因此需要减少每趟比较的次数，即：地刺循环的时候变成了arr.length-1-j.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;最终版本：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bjsxt.sort.bubble;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 最终版本：考虑存在顺序
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BubbleSort {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {        
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] arr ={1,2,9,3,4&lt;span&gt;};
        sort1(arr);

        System.out.println(&lt;/span&gt;&quot;==========final============&quot;&lt;span&gt;);
        arr &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{9,1,2,3,4&lt;span&gt;};
        sortFinal(arr);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二版本，减少每一趟的次数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sortFinal(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; sorted= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
                sorted =&lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定有序&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                        arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                        arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                        sorted &lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定失败&lt;/span&gt;
&lt;span&gt;                    }
                    System.out.println(Arrays.toString(arr));
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sorted){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;减少趟数&lt;/span&gt;
                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二版本，减少每一趟的次数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sort1(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
                System.out.println(&quot;第&quot;+(j+1)+&quot;趟&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                    System.out.print(&quot;第&quot;+(i+1)+&quot;次&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(arr[i]&amp;gt;arr[i+1&lt;span&gt;]){
                        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arr[i];
                        arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                        arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                    }
                    System.out.println(Arrays.toString(arr));
                }
            }
        }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;说明：即如果有序了，则不需要进行比较了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、TreeSet 和 TreeMap &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在讲解TreeSet 和 TreeMap 前，我们要先介绍Comparable接口：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;“排序”的实体类都实现了java.lang.Comparable 接口，Comparable 接口中只有一个方法，即：public int compareTo(T o);   0 相等  正数 负数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;实现了Comparable接口的类通过实现了的compareTo 方法从而确定该类对象的排序方式。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、内置类：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Integer:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Integer &lt;span&gt;extends&lt;/span&gt; Number &lt;span&gt;implements&lt;/span&gt; Comparable&amp;lt;Integer&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;

     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(Integer anotherInteger) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; thisVal = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; anotherVal =&lt;span&gt; anotherInteger.value;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (thisVal&amp;lt;anotherVal ? -1 : (thisVal==anotherVal ? 0 : 1&lt;span&gt;));
    }

&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Character:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; Character &lt;span&gt;extends&lt;/span&gt; Object &lt;span&gt;implements&lt;/span&gt; java.io.Serializable, Comparable&amp;lt;Character&amp;gt;&lt;span&gt; {

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(Character anotherCharacter) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.value -&lt;span&gt; anotherCharacter.value;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;String:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; String
    &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt; java.io.Serializable, Comparable&amp;lt;String&amp;gt;&lt;span&gt;, CharSequence{

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(String anotherString) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len1 =&lt;span&gt; count;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len2 =&lt;span&gt; anotherString.count;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; n =&lt;span&gt; Math.min(len1, len2);
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; v1[] =&lt;span&gt; value;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; v2[] =&lt;span&gt; anotherString.value;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i =&lt;span&gt; offset;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; j =&lt;span&gt; anotherString.offset;

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (i ==&lt;span&gt; j) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; k =&lt;span&gt; i;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; lim = n +&lt;span&gt; i;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (k &amp;lt;&lt;span&gt; lim) {
        &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c1 =&lt;span&gt; v1[k];
        &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c2 =&lt;span&gt; v2[k];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c1 !=&lt;span&gt; c2) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; c1 -&lt;span&gt; c2;
        }
        k&lt;/span&gt;++&lt;span&gt;;
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (n-- != 0&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c1 = v1[i++&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c2 = v2[j++&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c1 !=&lt;span&gt; c2) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; c1 -&lt;span&gt; c2;
        }
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; len1 -&lt;span&gt; len2;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Date;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Date
    &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt; java.io.Serializable, Cloneable, Comparable&amp;lt;Date&amp;gt;&lt;span&gt;
{
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(Date anotherDate) {
    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; thisTime = getMillisOf(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; anotherTime =&lt;span&gt; getMillisOf(anotherDate);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (thisTime&amp;lt;anotherTime ? -1 : (thisTime==anotherTime ? 0 : 1&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 内置引用数据类型(常用)的比较
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo01 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Integer  a ; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据基本数据类型大小&lt;/span&gt;
        Character ch; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据Unicode编码顺序&lt;/span&gt;
        String str=&quot;abc&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果其中一个是例外一个起始开始的子串，返回长度之差&lt;/span&gt;
        String str2 =&quot;abcd123&quot;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;否则返回第一个不相等的unicode码之差&lt;/span&gt;
&lt;span&gt;        System.out.println(str.compareTo(str2));
        str &lt;/span&gt;=&quot;abc&quot;&lt;span&gt;;
        str2 &lt;/span&gt;=&quot;aad&quot;&lt;span&gt;;
        System.out.println(str.compareTo(str2));
        
        
        java.util.Date d ;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据日期的长整形数比较&lt;/span&gt;
&lt;span&gt;    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、内置类集合数组排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;String:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo02 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        String[] arr &lt;/span&gt;={&quot;a&quot;,&quot;abcd&quot;,&quot;abc&quot;,&quot;def&quot;&lt;span&gt;};
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从到小排序 降序&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; sorted= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
            sorted =&lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定有序&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(((Comparable)arr[i]).compareTo(arr[i+1])&amp;lt;0&lt;span&gt;){
                    String temp &lt;/span&gt;=&lt;span&gt; arr[i];
                    arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                    arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                    sorted &lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定失败&lt;/span&gt;
&lt;span&gt;                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sorted){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;减少趟数&lt;/span&gt;
                &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        
        System.out.println(Arrays.toString(arr));
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Date:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo03 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Date[] arr &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Date[3&lt;span&gt;];
        arr[&lt;/span&gt;0] =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        arr[&lt;/span&gt;1] =&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis()-1000*60*60&lt;span&gt;);
        arr[&lt;/span&gt;2] =&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis()+1000*60*60&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;降序
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从大到小排序 降序&lt;/span&gt;
            &lt;span&gt;boolean&lt;/span&gt; sorted= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
                sorted =&lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定有序&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;(((Comparable)arr[i]).compareTo(arr[i+1])&amp;lt;0&lt;span&gt;){
                        Date temp &lt;/span&gt;=&lt;span&gt; arr[i];
                        arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                        arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                        sorted &lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定失败&lt;/span&gt;
&lt;span&gt;                    }
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sorted){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;减少趟数&lt;/span&gt;
                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
            
            System.out.println(Arrays.toString(arr));
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到我们可以抽出工具类来，因为大部分代码是一样的，抽出工具类，则需要考虑可以放多种数据类型，因此会考虑到泛型和Object[] 来存放，工具类如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;



&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 排序
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Utils {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * List的排序+比较器
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; list
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; com
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;  &amp;lt;T&amp;gt; &lt;span&gt;void&lt;/span&gt; sort(List&amp;lt;T&amp;gt; list,Comparator&amp;lt;T&amp;gt;&lt;span&gt; com){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一步:转成数组&lt;/span&gt;
        Object[] arr =&lt;span&gt;list.toArray();
        sort(arr,com);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二步:改变容器中对应的值&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length;i++&lt;span&gt;){
            list.set(i, (T)(arr[i]));
        }
    }
    
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 数组的排序 （降序）+Comparator接口
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arr
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;void&lt;/span&gt; sort(Object[] arr,Comparator&amp;lt;T&amp;gt;&lt;span&gt; com){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从大到小排序 降序&lt;/span&gt;
            &lt;span&gt;boolean&lt;/span&gt; sorted= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
                sorted =&lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定有序&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;(com.compare((T)arr[i], (T)arr[i+1])&amp;lt;0&lt;span&gt;){
                        Object temp &lt;/span&gt;=&lt;span&gt; arr[i];
                        arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                        arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                        sorted &lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定失败&lt;/span&gt;
&lt;span&gt;                    }
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sorted){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;减少趟数&lt;/span&gt;
                    &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
    }
    
    
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 容器排序 (使用泛型方法)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;T&amp;gt;&amp;gt; &lt;span&gt;void&lt;/span&gt; sort(List&amp;lt;T&amp;gt;&lt;span&gt; list){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一步:转成数组&lt;/span&gt;
        Object[] arr =&lt;span&gt;list.toArray();
        sort(arr);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二步:改变容器中对应的值&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;arr.length;i++&lt;span&gt;){
            list.set(i, (T)(arr[i]));
        }
        
    }
    
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 数组排序 (使用泛型方法)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Comparable&amp;lt;T&amp;gt;&amp;gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sort(T[] arr){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从大到小排序 降序&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; sorted= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
            sorted =&lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定有序&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(((Comparable)arr[i]).compareTo(arr[i+1])&amp;lt;0&lt;span&gt;){
                    T temp &lt;/span&gt;=&lt;span&gt; arr[i];
                    arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                    arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                    sorted &lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定失败&lt;/span&gt;
&lt;span&gt;                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sorted){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;减少趟数&lt;/span&gt;
                &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
    }    
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 数组的排序 （降序）
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arr
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sort(Object[] arr){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从大到小排序 降序&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; sorted= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt;arr.length;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;len-1;j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;趟数&lt;/span&gt;
            sorted =&lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定有序&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;len-1-j;i++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;次数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(((Comparable)arr[i]).compareTo(arr[i+1])&amp;lt;0&lt;span&gt;){
                    Object temp &lt;/span&gt;=&lt;span&gt; arr[i];
                    arr[i] &lt;/span&gt;=arr[i+1&lt;span&gt;];
                    arr[i&lt;/span&gt;+1] =&lt;span&gt;temp;
                    sorted &lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假定失败&lt;/span&gt;
&lt;span&gt;                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sorted){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;减少趟数&lt;/span&gt;
                &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        
    }
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后接下来，我们使用我们的工具类进行排序操作：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo04 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Date[] arr &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Date[3&lt;span&gt;];
        arr[&lt;/span&gt;0] =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        arr[&lt;/span&gt;1] =&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis()-1000*60*60&lt;span&gt;);
        arr[&lt;/span&gt;2] =&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis()+1000*60*60&lt;span&gt;);
        Utils.sort(arr); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;降序&lt;/span&gt;
&lt;span&gt;        System.out.println(Arrays.toString(arr));
        
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符串&lt;/span&gt;
        String[] arr2 ={&quot;a&quot;,&quot;abcd&quot;,&quot;abc&quot;,&quot;def&quot;&lt;span&gt;};
        Utils.sort(arr2);
        System.out.println(Arrays.toString(arr2));
        
        
        System.out.println(&lt;/span&gt;&quot;==========List排序===========&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放容器中&lt;/span&gt;
        List&amp;lt;String&amp;gt; list =&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&quot;a&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abcd&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;def&quot;&lt;span&gt;);
        Utils.sort(list);
        System.out.println(list);
        
        
        
        
        System.out.println(&lt;/span&gt;&quot;==========使用Comparator 排序数组===============&quot;&lt;span&gt;);
        arr2 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; String[]{&quot;a&quot;,&quot;abcd&quot;,&quot;abc&quot;,&quot;def&quot;&lt;span&gt;};
        Utils.sort(arr2,&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringComp());
        System.out.println(Arrays.toString(arr2));
        
        System.out.println(&lt;/span&gt;&quot;==========List排序+比较器===========&quot;&lt;span&gt;);
        list &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&quot;a&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abcd&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;def&quot;&lt;span&gt;);
        Utils.sort(list,&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringComp());
        System.out.println(list);
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 排序规则的业务类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StringComp  &lt;span&gt;implements&lt;/span&gt; java.util.Comparator&amp;lt;String&amp;gt;&lt;span&gt;{
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 按长度比较大小 
     * 正数 &amp;gt;
     * 负数 &amp;lt;
     * 0 ==
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(String o1, String o2) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len1 =&lt;span&gt;o1.length();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len2 =&lt;span&gt;o2.length();        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -(len1-&lt;span&gt;len2);
    }
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面我们使用的是自己定义的工具类，下面我们使用JDK 提供的工具类进行排序操作：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 使用Collections对容器的比较
 * 1、 public static &amp;lt;T&amp;gt; void sort(List&amp;lt;T&amp;gt; list, Comparator&amp;lt;? super T&amp;gt; c)  
 * 2、public static &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; void sort(List&amp;lt;T&amp;gt; list)  
 * void sort(List&amp;lt;T&amp;gt; list)
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo05 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list =&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&quot;a&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abcd&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;def&quot;&lt;span&gt;);
        Collections.sort(list,&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringComp());
        System.out.println(list);
        
        
        list &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&quot;a&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abcd&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;def&quot;&lt;span&gt;);
        Collections.sort(list);
        System.out.println(list);
        
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、自定义类数据类型的排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;对于自定义的数据类型排序，两种方法:1.实体类 实现java.lang.Comparable + compareTo    2.业务排序类  实现java.util.Comparator + compare 方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二种方法，可以达到解耦的目的，比如实体类是一个calss 文件或者是其它部件提供的实体类等，可以通过定义业务排序类达到排序，更加灵活。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;实例一：Comparable 实现排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 新闻条目实体类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NewsItem &lt;span&gt;implements&lt;/span&gt; java.lang.Comparable&amp;lt;NewsItem&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String title;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击量&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hits;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;时间&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date pubTime;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NewsItem() {
    }
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; NewsItem(String title, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hits, Date pubTime) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.title =&lt;span&gt; title;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hits =&lt;span&gt; hits;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pubTime =&lt;span&gt; pubTime;
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getTitle() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; title;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTitle(String title) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.title =&lt;span&gt; title;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getHits() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; hits;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setHits(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hits) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hits =&lt;span&gt; hits;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getPubTime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pubTime;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPubTime(Date pubTime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pubTime =&lt;span&gt; pubTime;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;时间降序 +点击量升序+标题降序&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(NewsItem o) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result =0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较 时间&lt;/span&gt;
        result =-&lt;span&gt;this&lt;/span&gt;.pubTime.compareTo(o.pubTime); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;降序&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(0==result){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;时间相同
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击量 &lt;/span&gt;
            result =&lt;span&gt;this&lt;/span&gt;.hits-o.hits; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;升序&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(0==result){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击量相同
                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;
                result=-&lt;span&gt;this&lt;/span&gt;.title.compareTo(o.title);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;降序&lt;/span&gt;
&lt;span&gt;            }
        }        
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        StringBuilder sb &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
        sb.append(&lt;/span&gt;&quot;标题:&quot;).append(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.title);
        sb.append(&lt;/span&gt;&quot;,时间:&quot;).append(&lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pubTime));
        sb.append(&lt;/span&gt;&quot;,点击量:&quot;).append(&lt;span&gt;this&lt;/span&gt;.hits).append(&quot;\n&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.bjsxt.sort.innerType.Utils;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 使用Collections
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NewsItemApp {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;NewsItem&amp;gt; news=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;NewsItem&amp;gt;&lt;span&gt;();
        news.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; NewsItem(&quot;美国后怕了，逃跑了悲剧了&quot;,50,&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis()-1000*60*60&lt;span&gt;)));
        news.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; NewsItem(&quot;中国登上钓鱼岛了，全国欢呼了&quot;,100,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date()));
        news.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; NewsItem(&quot;小日本终于听话了，泪流满面笑了&quot;,60,&lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis()-1000*60*60&lt;span&gt;)));
        System.out.println(&lt;/span&gt;&quot;排序前:&quot;+&lt;span&gt;news);        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;排序
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Collections.sort(news);    &lt;/span&gt;
&lt;span&gt;        Utils.sort(news);
        System.out.println(&lt;/span&gt;&quot;排序后&quot;+&lt;span&gt;news);
        
        
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;实例二：&lt;/strong&gt;Comparator&lt;/span&gt; 实现排序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 实体类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;价格&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; price;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;收藏量&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fav;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Goods() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated constructor stub&lt;/span&gt;
&lt;span&gt;    }
    
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String name, &lt;span&gt;double&lt;/span&gt; price, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fav) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fav =&lt;span&gt; fav;
    }



    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getPrice() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPrice(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; price) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getFav() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fav;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setFav(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fav) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fav =&lt;span&gt; fav;
    }
    
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;商品名:&quot;+name+&quot;,收藏量&quot;+&lt;span&gt;this&lt;/span&gt;.fav+&quot;,价格:&quot;+&lt;span&gt;this&lt;/span&gt;.price+&quot;\n&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 按收藏量排序的业务类 （升序）
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GoodsFavComp &lt;span&gt;implements&lt;/span&gt; java.util.Comparator&amp;lt;Goods&amp;gt;&lt;span&gt; {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(Goods o1, Goods o2) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; o1.getFav()-&lt;span&gt;o2.getFav();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 按价格排序的业务类 （降序）
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GoodsPriceComp &lt;span&gt;implements&lt;/span&gt; java.util.Comparator&amp;lt;Goods&amp;gt;&lt;span&gt; {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(Goods o1, Goods o2) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -(o1.getPrice()-o2.getPrice()&amp;gt;0?1:(o1.getPrice()==o2.getPrice()?0:-1&lt;span&gt;));
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsApp {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        List&lt;/span&gt;&amp;lt;Goods&amp;gt; list =&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Goods&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;老马视频&quot;,100,2000&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;老高视频&quot;,50,2000&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;老裴视频&quot;,1000,1000&lt;span&gt;));
        System.out.println(&lt;/span&gt;&quot;排序前:&quot;+&lt;span&gt;list);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Collections.sort(list,new GoodsPriceComp());&lt;/span&gt;
        Collections.sort(list,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; GoodsFavComp());
        System.out.println(&lt;/span&gt;&quot;排序后:&quot;+&lt;span&gt;list);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、TreeSet  TreeMap&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;TreeMap:确保key可以排序或者提供灵活的比较器&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;TreeSet：确保元素实体可以排序或者提供灵活比较器&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Treeset 数据中的元素是排序的并且不能够重复，也是实现了Set接口，但和实现了Set接口的HashSet的是不同的，HashSet 是无序，也不可重复。都是不可以重复，但是它们判断的条件是不一样的，HashSet 的前面我们说到过，其元素中的类型时一定要实现hashCode 和equals 的方法来达到去重的目的，但是TreeSet 不一定要实现这两个方法，是通过比较器来实现的去重，即要么Comparable  or  Comparator 当元素比较返回值为0 即相等重复。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例；&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String name;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; handsome;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;帅气指数&lt;/span&gt;
    
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person() {
        name &lt;/span&gt;=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        handsome &lt;/span&gt;=0&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Person(String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; handsome) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.handsome =&lt;span&gt; handsome;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getHandsome() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; handsome;
    }

    
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;姓名:&quot;+&lt;span&gt;this&lt;/span&gt;.name+&quot;,帅气指数:&quot;+&lt;span&gt;this&lt;/span&gt;.handsome+&quot;\n&quot;&lt;span&gt;;
    }
    
    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 提供了 解耦的方式:业务排序类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetDemo {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Person p1 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;您&quot;,100&lt;span&gt;);
        Person p2 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;刘德华&quot;,1000&lt;span&gt;);
        Person p3 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;梁朝伟&quot;,1200&lt;span&gt;);
        Person p4 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;老裴&quot;,50&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;依次存放到TreeSet容器中,使用排序的业务类(匿名内部类)&lt;/span&gt;
        TreeSet&amp;lt;Person&amp;gt; persons =&lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;Person&amp;gt;&lt;span&gt;(
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; java.util.Comparator&amp;lt;Person&amp;gt;&lt;span&gt;(){

                        @Override
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(Person o1, Person o2) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -(o1.getHandsome()-&lt;span&gt;o2.getHandsome());
                        }
                        
                    }
                );
        persons.add(p1);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;TreeSet 在添加数据时排序&lt;/span&gt;
&lt;span&gt;        persons.add(p2);
        persons.add(p3);
        persons.add(p4);
        
        System.out.println(persons);
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        //改变数据
        p4.setHandsome(100);
        p4.setName(&quot;您&quot;);
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;p4 与p1 内容重复 &lt;/span&gt;
&lt;span&gt;        System.out.println(persons);
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意点：在添加数据的时候进行排序，数据更改不会影响到原来的顺序，不要改变数据，否则可能重复。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;样例2；采用实体类实现了Comparable接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Worker &lt;span&gt;implements&lt;/span&gt; java.lang.Comparable&amp;lt;Worker&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;工种&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String type;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;工资&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; salary;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Worker() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated constructor stub&lt;/span&gt;
&lt;span&gt;    }
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Worker(String type, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; salary) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type =&lt;span&gt; type;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.salary =&lt;span&gt; salary;
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; type;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setType(String type) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type =&lt;span&gt; type;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getSalary() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; salary;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSalary(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; salary) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.salary =&lt;span&gt; salary;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 按工资升序
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(Worker o) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.salary&amp;gt;o.salary?1:( &lt;span&gt;this&lt;/span&gt;.salary==o.salary?0:-1&lt;span&gt;);
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;工种:&quot;+&lt;span&gt;this&lt;/span&gt;.type+&quot;,工资:&quot;+&lt;span&gt;this&lt;/span&gt;.salary+&quot;\n&quot;&lt;span&gt;;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeSet;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 实体类实现Comparable 接口的应用
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetDemo2 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Worker w1 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Worker(&quot;垃圾回收员&quot;,12000&lt;span&gt;);
        Worker w2 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Worker(&quot;农民工&quot;,8000&lt;span&gt;);
        Worker w3 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Worker(&quot;程序猿&quot;,5000&lt;span&gt;);
        
        TreeSet&lt;/span&gt;&amp;lt;Worker&amp;gt; employees =&lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;Worker&amp;gt;&lt;span&gt;();
        employees.add(w1);
        employees.add(w2);
        employees.add(w3);
        System.out.println(employees);
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;最后TreeMap的演示：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeMap;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeMapDemo {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Person p1 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;您&quot;,100&lt;span&gt;);
        Person p2 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;刘德华&quot;,1000&lt;span&gt;);
        Person p3 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;梁朝伟&quot;,1200&lt;span&gt;);
        Person p4 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Person(&quot;老裴&quot;,50&lt;span&gt;);
        
        TreeMap&lt;/span&gt;&amp;lt;Person,String&amp;gt; map =&lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;Person,String&amp;gt;(&lt;span&gt;new&lt;/span&gt; java.util.Comparator&amp;lt;Person&amp;gt;&lt;span&gt;(){

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(Person o1, Person o2) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -(o1.getHandsome()-&lt;span&gt;o2.getHandsome());
            }
            
        } );
        map.put(p1, &lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        map.put(p2, &lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        map.put(p3, &lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        map.put(p4, &lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查看键&lt;/span&gt;
        Set&amp;lt;Person&amp;gt; persons =&lt;span&gt;map.keySet();
        System.out.println(persons);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.TreeMap;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeMapDemo02 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Worker w1 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Worker(&quot;垃圾回收员&quot;,12000&lt;span&gt;);
        Worker w2 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Worker(&quot;农民工&quot;,8000&lt;span&gt;);
        Worker w3 &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; Worker(&quot;程序猿&quot;,5000&lt;span&gt;);
        
        TreeMap&lt;/span&gt;&amp;lt;Worker,String &amp;gt; employees =&lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;Worker,String &amp;gt;&lt;span&gt;();
        employees.put(w1,&lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        employees.put(w2,&lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        employees.put(w3,&lt;/span&gt;&quot;bjsxt&quot;&lt;span&gt;);
        System.out.println(employees.keySet());
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、Collections 工具类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，此类完全由在 collection 上进行操作或返回 collection 的静态方法组成。它包含在 collection 上操作的多态算法，即“包装器”，包装器返回由指定 collection 支持的新 collection，以及少数其他内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果为此类的方法所提供的 collection 或类对象为 null，则这些方法都将抛出 &lt;tt&gt;NullPointerException&lt;/tt&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个类提供了很多静态方法来辅助我们操作集合类，如：&lt;/span&gt;&lt;/p&gt;
&lt;table summary=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;&lt;tbody readability=&quot;84.756463775922&quot;&gt;&lt;tr class=&quot;TableHeadingColor&quot; bgcolor=&quot;#CCCCFF&quot;&gt;&lt;th colspan=&quot;2&quot; align=&quot;left&quot;&gt;&lt;span&gt;方法摘要&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.5492957746479&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;table summary=&quot;&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;td nowrap=&quot;nowrap&quot;&gt;&lt;span&gt;&lt;code&gt;&amp;lt;T&amp;gt; boolean&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;addAll&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;? super T&amp;gt; c, T... elements)&lt;/code&gt;&lt;br/&gt;          将所有指定元素添加到指定 collection 中。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.3260869565217&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;asLifoQueue&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Deque&lt;/a&gt;&amp;lt;T&amp;gt; deque)&lt;/code&gt;&lt;br/&gt;          以后进先出 (Lifo) &lt;a title=&quot;java.util 中的接口&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; 的形式返回某个 &lt;a title=&quot;java.util 中的接口&quot;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt; 的视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.377245508982&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;binarySearch&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;? extends &lt;a title=&quot;java.lang 中的接口&quot;&gt;Comparable&lt;/a&gt;&amp;lt;? super T&amp;gt;&amp;gt; list, T key)&lt;/code&gt;&lt;br/&gt;          使用二分搜索法搜索指定列表，以获得指定对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.2485549132948&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;binarySearch&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;? extends T&amp;gt; list, T key, &lt;a title=&quot;java.util 中的接口&quot;&gt;Comparator&lt;/a&gt;&amp;lt;? super T&amp;gt; c)&lt;/code&gt;&lt;br/&gt;          使用二分搜索法搜索指定列表，以获得指定对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.9299363057325&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;checkedCollection&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;E&amp;gt; c, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;E&amp;gt; type)&lt;/code&gt;&lt;br/&gt;          返回指定 collection 的一个动态类型安全视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.2941176470588&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;checkedList&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;E&amp;gt; list, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;E&amp;gt; type)&lt;/code&gt;&lt;br/&gt;          返回指定列表的一个动态类型安全视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;5.025&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;checkedMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Map&lt;/a&gt;&amp;lt;K,V&amp;gt; m, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;K&amp;gt; keyType, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;V&amp;gt; valueType)&lt;/code&gt;&lt;br/&gt;          返回指定映射的一个动态类型安全视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.3488372093023&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;checkedSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Set&lt;/a&gt;&amp;lt;E&amp;gt; s, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;E&amp;gt; type)&lt;/code&gt;&lt;br/&gt;          返回指定 set 的一个动态类型安全视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;7.6086956521739&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;checkedSortedMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;SortedMap&lt;/a&gt;&amp;lt;K,V&amp;gt; m, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;K&amp;gt; keyType, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;V&amp;gt; valueType)&lt;/code&gt;&lt;br/&gt;          返回指定有序映射的一个动态类型安全视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.9803921568627&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;checkedSortedSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;SortedSet&lt;/a&gt;&amp;lt;E&amp;gt; s, &lt;a title=&quot;java.lang 中的类&quot;&gt;Class&lt;/a&gt;&amp;lt;E&amp;gt; type)&lt;/code&gt;&lt;br/&gt;          返回指定有序 set 的一个动态类型安全视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.6689655172414&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;copy&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;? super T&amp;gt; dest, &lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;? extends T&amp;gt; src)&lt;/code&gt;&lt;br/&gt;          将所有元素从一个列表复制到另一个列表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.2866242038217&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static boolean&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;disjoint&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;?&amp;gt; c1, &lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;?&amp;gt; c2)&lt;/code&gt;&lt;br/&gt;          如果两个指定 collection 中没有相同的元素，则返回 &lt;tt&gt;true&lt;/tt&gt;。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7111111111111&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;emptyList&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt;&lt;br/&gt;          返回空的列表（不可变的）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7608695652174&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;emptyMap&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt;&lt;br/&gt;          返回空的映射（不可变的）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7441860465116&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;emptySet&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt;&lt;br/&gt;          返回空的 set（不可变的）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.9421487603306&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;enumeration&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;T&amp;gt; c)&lt;/code&gt;&lt;br/&gt;          返回一个指定 collection 上的枚举。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.7519379844961&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;fill&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;? super T&amp;gt; list, T obj)&lt;/code&gt;&lt;br/&gt;          使用指定元素替换指定列表中的所有元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.236641221374&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static int&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;frequency&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;?&amp;gt; c, &lt;a title=&quot;java.lang 中的类&quot;&gt;Object&lt;/a&gt; o)&lt;/code&gt;&lt;br/&gt;          返回指定 collection 中等于指定对象的元素数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.5748792270531&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static int&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;indexOfSubList&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; source, &lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; target)&lt;/code&gt;&lt;br/&gt;          返回指定源列表中第一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.392523364486&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static int&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;lastIndexOfSubList&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; source, &lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; target)&lt;/code&gt;&lt;br/&gt;          返回指定源列表中最后一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.5167785234899&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;list&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Enumeration&lt;/a&gt;&amp;lt;T&amp;gt; e)&lt;/code&gt;&lt;br/&gt;          返回一个数组列表，它按返回顺序包含指定枚举返回的元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.1899441340782&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;max&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;? extends T&amp;gt; coll)&lt;/code&gt;&lt;br/&gt;          根据元素的&lt;em&gt;自然顺序&lt;/em&gt;，返回给定 collection 的最大元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.4831460674157&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;max&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;? extends T&amp;gt; coll, &lt;a title=&quot;java.util 中的接口&quot;&gt;Comparator&lt;/a&gt;&amp;lt;? super T&amp;gt; comp)&lt;/code&gt;&lt;br/&gt;          根据指定比较器产生的顺序，返回给定 collection 的最大元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.180790960452&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;min&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;? extends T&amp;gt; coll)&lt;/code&gt;&lt;br/&gt;          根据元素的&lt;em&gt;自然顺序&lt;/em&gt; 返回给定 collection 的最小元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.4831460674157&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;min&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;? extends T&amp;gt; coll, &lt;a title=&quot;java.util 中的接口&quot;&gt;Comparator&lt;/a&gt;&amp;lt;? super T&amp;gt; comp)&lt;/code&gt;&lt;br/&gt;          根据指定比较器产生的顺序，返回给定 collection 的最小元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.6451612903226&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;nCopies&lt;/a&gt;&lt;/strong&gt;(int n, T o)&lt;/code&gt;&lt;br/&gt;          返回由指定对象的 &lt;tt&gt;n&lt;/tt&gt; 个副本组成的不可变列表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.2710280373832&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;newSetFromMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Map&lt;/a&gt;&amp;lt;E,&lt;a title=&quot;java.lang 中的类&quot;&gt;Boolean&lt;/a&gt;&amp;gt; map)&lt;/code&gt;&lt;br/&gt;          返回指定映射支持的 set。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.5424836601307&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;table summary=&quot;&quot; border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;td nowrap=&quot;nowrap&quot;&gt;&lt;span&gt;&lt;code&gt;&amp;lt;T&amp;gt; boolean&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;replaceAll&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;T&amp;gt; list, T oldVal, T newVal)&lt;/code&gt;&lt;br/&gt;          使用另一个值替换列表中出现的所有某一指定值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7684210526316&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static void&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;reverse&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; list)&lt;/code&gt;&lt;br/&gt;          反转指定列表中元素的顺序。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.6&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;reverseOrder&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt;&lt;br/&gt;          返回一个比较器，它强行逆转实现了 &lt;tt&gt;Comparable&lt;/tt&gt; 接口的对象 collection 的&lt;em&gt;自然顺序&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.3333333333333&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;reverseOrder&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Comparator&lt;/a&gt;&amp;lt;T&amp;gt; cmp)&lt;/code&gt;&lt;br/&gt;          返回一个比较器，它强行逆转指定比较器的顺序。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.6774193548387&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static void&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;rotate&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; list, int distance)&lt;/code&gt;&lt;br/&gt;          根据指定的距离轮换指定列表中的元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7943925233645&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static void&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;shuffle&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; list)&lt;/code&gt;&lt;br/&gt;          使用默认随机源对指定列表进行置换。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.4471544715447&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static void&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;shuffle&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; list, &lt;a title=&quot;java.util 中的类&quot;&gt;Random&lt;/a&gt; rnd)&lt;/code&gt;&lt;br/&gt;          使用指定的随机源对指定列表进行置换。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.7735849056604&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;singleton&lt;/a&gt;&lt;/strong&gt;(T o)&lt;/code&gt;&lt;br/&gt;          返回一个只包含指定对象的不可变 set。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.6991150442478&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;singletonList&lt;/a&gt;&lt;/strong&gt;(T o)&lt;/code&gt;&lt;br/&gt;          返回一个只包含指定对象的不可变列表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.5862068965517&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;singletonMap&lt;/a&gt;&lt;/strong&gt;(K key, V value)&lt;/code&gt;&lt;br/&gt;          返回一个不可变的映射，它只将指定键映射到指定值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.4117647058824&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;sort&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;T&amp;gt; list)&lt;/code&gt;&lt;br/&gt;          根据元素的&lt;em&gt;自然顺序&lt;/em&gt; 对指定列表按升序进行排序。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.5135135135135&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;sort&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;T&amp;gt; list, &lt;a title=&quot;java.util 中的接口&quot;&gt;Comparator&lt;/a&gt;&amp;lt;? super T&amp;gt; c)&lt;/code&gt;&lt;br/&gt;          根据指定比较器产生的顺序对指定列表进行排序。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;4.6581196581197&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;code&gt;static void&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;swap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;?&amp;gt; list, int i, int j)&lt;/code&gt;&lt;br/&gt;          在指定列表的指定位置处交换元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.2075471698113&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;synchronizedCollection&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;T&amp;gt; c)&lt;/code&gt;&lt;br/&gt;          返回指定 collection 支持的同步（线程安全的）collection。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.4626865671642&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;synchronizedList&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;T&amp;gt; list)&lt;/code&gt;&lt;br/&gt;          返回指定列表支持的同步（线程安全的）列表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.3868613138686&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;synchronizedMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Map&lt;/a&gt;&amp;lt;K,V&amp;gt; m)&lt;/code&gt;&lt;br/&gt;          返回由指定映射支持的同步（线程安全的）映射。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.491935483871&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;synchronizedSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Set&lt;/a&gt;&amp;lt;T&amp;gt; s)&lt;/code&gt;&lt;br/&gt;          返回指定 set 支持的同步（线程安全的）set。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;6.0975609756098&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;synchronizedSortedMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;SortedMap&lt;/a&gt;&amp;lt;K,V&amp;gt; m)&lt;/code&gt;&lt;br/&gt;          返回指定有序映射支持的同步（线程安全的）有序映射。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.2451612903226&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;synchronizedSortedSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;SortedSet&lt;/a&gt;&amp;lt;T&amp;gt; s)&lt;/code&gt;&lt;br/&gt;          返回指定有序 set 支持的同步（线程安全的）有序 set。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.125&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;unmodifiableCollection&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Collection&lt;/a&gt;&amp;lt;? extends T&amp;gt; c)&lt;/code&gt;&lt;br/&gt;          返回指定 collection 的不可修改视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.4146341463415&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;unmodifiableList&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;List&lt;/a&gt;&amp;lt;? extends T&amp;gt; list)&lt;/code&gt;&lt;br/&gt;          返回指定列表的不可修改视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;3.3684210526316&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;unmodifiableMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Map&lt;/a&gt;&amp;lt;? extends K,? extends V&amp;gt; m)&lt;/code&gt;&lt;br/&gt;          返回指定映射的不可修改视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;1.6379310344828&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;unmodifiableSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;Set&lt;/a&gt;&amp;lt;? extends T&amp;gt; s)&lt;/code&gt;&lt;br/&gt;          返回指定 set 的不可修改视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;5.8775510204082&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;unmodifiableSortedMap&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;SortedMap&lt;/a&gt;&amp;lt;K,? extends V&amp;gt; m)&lt;/code&gt;&lt;br/&gt;          返回指定有序映射的不可修改视图。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;TableRowColor&quot; bgcolor=&quot;white&quot; readability=&quot;2.1&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; width=&quot;1%&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;static&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;strong&gt;&lt;a&gt;unmodifiableSortedSet&lt;/a&gt;&lt;/strong&gt;(&lt;a title=&quot;java.util 中的接口&quot;&gt;SortedSet&lt;/a&gt;&amp;lt;T&amp;gt; s)&lt;/code&gt;&lt;br/&gt;          返回指定有序 set 的不可修改视图。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; &lt;span&gt;其中最主要的一个方法，也是本节关注点，就是sort 排序，在对Java无序类集合，如List（ArrayList/LinkedList）、HashSet（TreeSet有序）、HashMap等排序时，Java中一个公共的类Collections，提供了对Java集合排序等很好的方法sort。 但是有一个要求是sort方法的参数为&amp;lt;List list&amp;gt;  或&amp;lt;List list, Comparator&amp;lt;? super T&amp;gt;  c&amp;gt;，即排序对象要求必须是List类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sort 方法的参数必须为List 的原因是，只有List可以定义排序的方法，让List中的元素改变在构建List时原始的相对位置（初始构建时，元素相对位置即为元素初始加入顺序）。HashSet、HashMap 在构建时，初始加入的元素已经按照元素的hashCode()方法的定义排好序。所以这里所说的&lt;strong&gt;HashSet 排序 和 HashMap 排序是指：将其中的元素导出到另一个集合中，对该载体集合排序。排序之后，原HashSet 和 HashMap 中元素顺序没有变。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;故而对Java无序类集合的排序问题，基本思路就是：将HashSet 或 HashMap 中的元素取出放入 List 中，对List 用 Collections.sort() 方法排序，之后输出排序后List中的元素，即为对Set/Map 中元素排序后的结果。&lt;strong&gt;注意HashSet、HashMap 中元素位置没有改变，依然只和 初始构建时，元素本身自定义的hashCode() 方法有关&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Comparator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Iterator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        ArrayList&lt;/span&gt;&amp;lt;String&amp;gt; listTest = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
        listTest.add(&lt;/span&gt;&quot;bbc&quot;&lt;span&gt;);
        listTest.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);
        listTest.add(&lt;/span&gt;&quot;acb&quot;&lt;span&gt;);        
        
        HashSet&lt;/span&gt;&amp;lt;String&amp;gt; setTest = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;&lt;span&gt;();
        setTest.add(&lt;/span&gt;&quot;bbc&quot;&lt;span&gt;);
        setTest.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);
        setTest.add(&lt;/span&gt;&quot;acb&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;HashSet BeforeSort:&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String s : setTest)
            System.out.println(s);
        
        HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt; mapTest = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, Integer&amp;gt;&lt;span&gt;();
        mapTest.put(&lt;/span&gt;&quot;bbc&quot;, 1&lt;span&gt;);
        mapTest.put(&lt;/span&gt;&quot;abc&quot;, 2&lt;span&gt;);
        mapTest.put(&lt;/span&gt;&quot;acb&quot;, 3&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;HashMap BeforeSort:&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Map.Entry&amp;lt;String, Integer&amp;gt;&lt;span&gt; entry : mapTest.entrySet())
            System.out.println(entry.getKey() &lt;/span&gt;+ &quot; &quot; +&lt;span&gt; entry.getValue());
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * List 
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Collections.sort(listTest);
        Iterator&lt;/span&gt;&amp;lt;String&amp;gt; list_iter =&lt;span&gt; listTest.iterator();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(list_iter.hasNext())
            System.out.println(list_iter.next());
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * Set
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;        
        LinkedList&lt;/span&gt;&amp;lt;String&amp;gt; setSort = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;String&amp;gt;&lt;span&gt;(setTest);        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Collections.sort(setSort);&lt;/span&gt;
        Comparator&amp;lt;String&amp;gt; setComp =&lt;span&gt; Collections.reverseOrder();
        Collections.sort(setSort, setComp);
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;LinkedList&amp;lt;String&amp;gt; setSort = new LinkedList&amp;lt;String&amp;gt;();
        for(String s : setTest)
            setSort.add(s);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String s : setTest)
            System.out.println(s);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String s : setSort)
            System.out.println(s);    
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * Map
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;        
        LinkedList&lt;/span&gt;&amp;lt;String&amp;gt; mapSort = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;String&amp;gt;&lt;span&gt;();
        mapSort.addAll(mapTest.keySet());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Collections.sort(mapSort);&lt;/span&gt;
        Comparator&amp;lt;String&amp;gt; mapComp =&lt;span&gt; Collections.reverseOrder();
        Collections.sort(mapSort, mapComp);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Map.Entry&amp;lt;String, Integer&amp;gt;&lt;span&gt; entry : mapTest.entrySet())
            System.out.println(entry.getKey() &lt;/span&gt;+ &quot; &quot; +&lt;span&gt; entry.getValue());
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; Iterator&amp;lt;String&amp;gt; map_iter=&lt;span&gt; mapSort.iterator(); map_iter.hasNext();)
            System.out.println(map_iter.next());        
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;        
        LinkedList&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt; mapEntry = new LinkedList&amp;lt;Map.Entry&amp;lt;String,Integer&amp;gt;&amp;gt;();
        mapEntry.addAll(mapTest.entrySet());
        Collections.sort(mapEntry, new Comparator&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt;() {
            public int compare(Map.Entry&amp;lt;String, Integer&amp;gt; a, Map.Entry&amp;lt;String, Integer&amp;gt; b){
                if(a.getValue() &amp;gt; b.getValue())
                    return -1;
                else
                    return 1;                
            }
        });        
        
        for(Map.Entry&amp;lt;String, Integer&amp;gt; entry : mapEntry)
            System.out.println(entry.getKey() + &quot; &quot; +entry.getValue());
        for(Map.Entry&amp;lt;String, Integer&amp;gt; entry : mapTest.entrySet())
            System.out.println(entry.getKey() + &quot; &quot; + entry.getValue());&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;        
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;结果；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HashSet BeforeSort:
abc
acb
bbc
HashMap BeforeSort:
abc &lt;/span&gt;2&lt;span&gt;
acb &lt;/span&gt;3&lt;span&gt;
bbc &lt;/span&gt;1
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;List AfterSort&lt;/span&gt;
&lt;span&gt;abc
acb
bbc
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;HashSet AfterSort&lt;/span&gt;
&lt;span&gt;abc
acb
bbc
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;setSort AfterSort (setSort is means HashSet to LinkedList)&lt;/span&gt;
&lt;span&gt;bbc
acb
abc
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;HashMap AfterSort&lt;/span&gt;
abc 2&lt;span&gt;
acb &lt;/span&gt;3&lt;span&gt;
bbc &lt;/span&gt;1
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mapSort AfterSort (mapSort is means HashMap to LinkedList)&lt;/span&gt;
&lt;span&gt;bbc
acb
abc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;小节：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;一、按key值排序
假设HashMap存储的键&lt;/span&gt;-&lt;span&gt;值对为（String，Integer），按key排序可以调用JDK函数sort（默认的按字典升序）：
Set&lt;/span&gt;&amp;lt;String&amp;gt; keySet =&lt;span&gt; map.keySet();
 Collections.sort(keySet);
 &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; ite =&lt;span&gt; keySet.iterator(); ite.hasNext();) {
     String temp &lt;/span&gt;=&lt;span&gt; ite.next();
     System.out.println(&lt;/span&gt;&quot;key-value: &quot;+temp+&quot;,&quot;+&lt;span&gt;map.getValue(temp);
 }
如果想要按字典的降序排列，则需改写sort方法里面的比较器Comparator：
Collections.sort(keySet, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Comparator() {
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(Object o1, Object o2) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Integer.parseInt(o1.toString())&amp;gt;&lt;span&gt;Integer.parseInt(o2.toString())
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Integer.parseInt(o1.toString())==&lt;span&gt;Integer.parseInt(o2.toString())
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
         &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
             &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
     }
 });




二、按value值排序
&lt;/span&gt;1&lt;span&gt;)方法一：用两个list链表实现
List&lt;/span&gt;&amp;lt;String&amp;gt; keyList = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;String&amp;gt;&lt;span&gt;();
 keyList.addAll(map.keySet());
 List&lt;/span&gt;&amp;lt;Integer&amp;gt; valueList = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;&lt;span&gt;();
 valueList.addAll(map.values());
 &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;valueList.size(); i++&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i+1; j&amp;lt;valueList.size(); j++&lt;span&gt;) {
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(valueList.get(j)&amp;gt;&lt;span&gt;valueList.get(i)) {
           valueList.set(j, valueList.get(i));
           valueList.set(i, valueList.get(j));
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同样调整对应的key值&lt;/span&gt;
&lt;span&gt;          keyList.set(j, keyList.get(i));
           keyList.set(i, kyeList.get(j));
       }
然后依次把key值和对应value值重新装入HashMap即可。
&lt;/span&gt;2&lt;span&gt;）方法二：改写JDK提供的Comparator接口方法compare
 List&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt; list = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt;&lt;span&gt;();
 list.addAll(map.entrySet());
 Collections.sort(list, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt;&lt;span&gt;() {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; compare(Map.Entry obj1, Map.Entry obj2) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从高往低排序&lt;/span&gt;
       
        &lt;span&gt;if&lt;/span&gt;(Integer.parseInt(obj1.getValue().toString())&amp;lt;&lt;span&gt;Integer.parseInt(obj2.getValue().toString()))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Integer.parseInt(obj1.getValue().toString())==&lt;span&gt;Integer.parseInt(obj2.getValue().toString()))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
           &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
    }
 });
 &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Iterator&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt; ite =&lt;span&gt; list.iterator(); ite.hasNext();) {
      Map.Entry&lt;/span&gt;&amp;lt;String, Integer&amp;gt; map =&lt;span&gt; ite.next();
     System.out.println(&lt;/span&gt;&quot;key-value: &quot; + map.getKey() + &quot;,&quot; +&lt;span&gt; map.getValue());
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 23 Nov 2017 15:22:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/7881885.html</dc:identifier>
</item>
<item>
<title>Python For嵌套循环 图形打印X型 nested loop -练习题 - xinersubai</title>
<link>http://www.cnblogs.com/learningpython-xinersubai/p/7887585.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/learningpython-xinersubai/p/7887585.html</guid>
<description>&lt;p&gt;For嵌套循环图形打印作业很多是C++语言做的，我觉得Python应该也能做，就来试一试。&lt;/p&gt;

&lt;p&gt;原网址C++练习题：&lt;a href=&quot;http://www.imooc.com/qadetail/216848?t=338800&quot; target=&quot;_blank&quot;&gt;http://www.imooc.com/qadetail/216848?t=338800&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1256047/201711/1256047-20171123231316375-1676107378.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;O.....O
.O...O.
..O.O..
...O...
..O.O..
.O...O.
O.....O&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我拆分成七个部分进行尝试写的，最后由3个代码块合成的，如下图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;O     .....     O
.O     ...     O.
..O     .     O..

...O...


..O     .     O..
.O     ...     O.
O     .....     O&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;希望新手都来写一写~~&lt;/p&gt;


&lt;p&gt;因为是新手，我也不知道有没有更简便的方法和不同的思维方式。&lt;/p&gt;

&lt;p&gt;我的答案写在下一篇文章中， 欢迎老鸟请来指导~~&lt;/p&gt;

&lt;p&gt;下一篇：&lt;a href=&quot;http://www.cnblogs.com/learningpython-xinersubai/p/7887594.html&quot; target=&quot;_blank&quot;&gt;Python For嵌套循环 图形打印X型 nested loop -练习题答案&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 15:22:00 +0000</pubDate>
<dc:creator>xinersubai</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/learningpython-xinersubai/p/7887585.html</dc:identifier>
</item>
<item>
<title>iOS项目的命名规范 - 码出境界</title>
<link>http://www.cnblogs.com/cchHers/p/7887579.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cchHers/p/7887579.html</guid>
<description>&lt;p&gt;一、关于本文档&lt;br/&gt;1、本文档的书写目的&lt;br/&gt;    《iOS项目的命名规范》的书写目的，在于让后续参加到该项目的iOS开发人员通过阅读该文档，了解在当前iOS项目的代码中的命名要求并严格按照本文档执行，以便保证代码的更好阅读与维护。&lt;/p&gt;&lt;p&gt;2、本文档的使用范围&lt;br/&gt;    《iOS项目的命名规范》在iOS项目中被强制要求执行。将本文中的WSF或者wsf替换成代表项目的前缀（请用三个大写字母），即可用于其他iOS项目。&lt;/p&gt;&lt;p&gt;3、本文档的更新负责人&lt;br/&gt;    《iOS项目的命名规范》由本ID和同事共同协商讨论制定，由本ID负责编辑、修改和后续的版本更新。&lt;/p&gt;
&lt;p&gt;二、目录结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/920367/201711/920367-20171123232622500-1671950724.png&quot; alt=&quot;&quot; width=&quot;443&quot; height=&quot;657&quot;/&gt;&lt;/p&gt;

&lt;p&gt;三、新建【业务模块文件夹】&lt;br/&gt;1、文件夹的名称需要体现该模块的功能概括。&lt;br/&gt;比如：支付系统、订单&lt;/p&gt;&lt;p&gt;2、二级文件夹根据编程设计模式分类命名，需要从下面词语中取词：&lt;br/&gt;ViewModel、Model、View、ViewController、其他&lt;/p&gt;&lt;p&gt;四、新建【子类】&lt;br/&gt;1、类名&lt;br/&gt;（1）遵循大驼峰命名法。&lt;br/&gt;（2）WSF+模块概括名+功能分区名+父类的惯用后缀。比如：WSFOrderListVC&lt;br/&gt;（3）为了整个项目代码的整洁与统一，建议使用List、Detail、Message、TView、Cell、VC、TVC、VM等字样。&lt;br/&gt;（4）模块概括名一定要是统一的、明确的、唯一的代表模块名称。&lt;br/&gt;（5）父类的惯用后缀的意思是：如果要从其他框架继承子类，那么必须遵循其命名惯例。比如，继承UIView的子类名称必须以View结尾。&lt;/p&gt;&lt;p&gt;2、属性名&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）后缀体现属性的数据类型。比如：orderPriceLabel、orderLimitsArray。&lt;br/&gt;（3）使用长的、描述性的命名方向。比如settingButton而不是setBtn。&lt;br/&gt;（4）要求NSString *nameString; 而不是NSString* nameString; 或者NSString * nameString;。&lt;/p&gt;&lt;p&gt;3、属性定义&lt;br/&gt;（1）定义属性的参数顺序排序：原子性、读写、内存管理。比如：@property (nonatomic, readwrite, copy) NSString *nameString;&lt;br/&gt;（2）BOOL类型的属性，需要为其getter方法带is前缀。getter方法放在内存管理限定符前面，比如：@property (nonatomic, readonly, getter=isEditable, assign) BOOL editable;&lt;/p&gt;&lt;p&gt;4、实例变量名&lt;br/&gt;（3）下划线开头&lt;br/&gt;（2）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（3）后缀体现属性的数据类型。比如：_orderPriceLabel、_orderLimitsArray。&lt;/p&gt;&lt;p&gt;5、公有方法名&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）不要使用“and”这个词，它不应该用来阐明有多个参数。&lt;/p&gt;&lt;p&gt;6、私有方法名&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）直接父类是Cocoa框架：p_开头。&lt;br/&gt;（3）直接父类是其他框架：以自己一贯的前缀（小写）+下划线开头或者wsf_。比如：abc_、wsf_。&lt;/p&gt;&lt;p&gt;7、纯C函数&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）加上WSF为前缀。&lt;/p&gt;&lt;p&gt;8、全局变量&lt;br/&gt;.h文件&lt;br/&gt;extern NSTimeInterval WSFPersonModelAnimationDuration;&lt;br/&gt;extern NSString *WSFPersonModelErrorMessage;&lt;br/&gt; &lt;br/&gt;.m文件&lt;br/&gt;NSTimeInterval WSFPersonModelAnimationDuration = 0.3;&lt;br/&gt;NSString *WSFPersonModelErrorMessage = @“ErrorMessage”;&lt;/p&gt;&lt;p&gt;（1）遵循大驼峰命名法、避免缩写。&lt;/p&gt;&lt;p&gt;9、枚举名&lt;br/&gt;（1）遵循大驼峰命名法、避免缩写。&lt;br/&gt;（2）使用OC的枚举方式。&lt;br/&gt;（3）枚举对象名：WSF+枚举范围概括名+Type。比如：WSFAlipayResultCodeType&lt;br/&gt;（4）枚举种类名：WSF+枚举范围概括名+Type_某种情况名。比如：WSFAlipayResultCodeType_success。&lt;/p&gt;&lt;p&gt;10、协议名&lt;br/&gt;（1）遵循大驼峰命名法、避免缩写。&lt;br/&gt;（2）代理协议：类名+Delegate。比如：WSFOrderListChangedDelegate。&lt;br/&gt;（3）数据源协议：类名+DataSource。比如：WSFOrderListDataSource。&lt;br/&gt;（4）普通协议：类名+Protocol。比如：WSFOrderListVCProtocol。&lt;/p&gt;&lt;p&gt;五、新建【分类】&lt;br/&gt;1、分类名&lt;br/&gt;（1）类名+标识前缀+扩展标识。&lt;br/&gt;（2）遵循大驼峰命名法、避免缩写。&lt;br/&gt;（3）WSF或者自己一贯使用前缀（大写）+下划线为前缀。比如：NSString (WSF_HTTPManager)、NSString（ABC_HTTPManager）。&lt;/p&gt;&lt;p&gt;2、方法名&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）wsf或者自己一贯使用前缀（小写）+下划线为前缀。比如：- (void)wsf_urlEncodedString;、- (void)abc_urlEncodedString;&lt;/p&gt;&lt;p&gt;六、新建【协议】&lt;br/&gt;1、协议名&lt;br/&gt;（1）遵循大驼峰命名法、避免缩写。&lt;br/&gt;2、方法名&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）如果是代理协议，以发送代理的对象类名作为代理方法名的开始（去掉类名的前缀，并且遵循小驼峰命名法）。&lt;/p&gt;&lt;p&gt;七、新建【第三方库的封装】&lt;br/&gt;（1）手动管理：比如使用MJRefresh框架，需要将它的类名全部加前缀以避免命名空间冲突。比如：命名为WSFMJRefresh。&lt;br/&gt;（2）pod管理：不需要特殊处理。&lt;/p&gt;&lt;p&gt;八、新建【常量】&lt;br/&gt;1、私有常量&lt;br/&gt;.m文件&lt;br/&gt;static const NSTimeInterval kAnimationDuration = 0.3;&lt;br/&gt;static NSString *const kErrorMessage = @“ErrorMessage”;&lt;/p&gt;&lt;p&gt;2、公开常量&lt;br/&gt;.h文件&lt;br/&gt;extern const NSTimeInterval WSFPersonModelAnimationDuration;&lt;br/&gt;extern NSString *const WSFPersonModelErrorMessage;&lt;br/&gt; &lt;br/&gt;.m文件&lt;br/&gt;const NSTimeInterval WSFPersonModelAnimationDuration = 0.3;&lt;br/&gt;NSString *const WSFPersonModelErrorMessage = @“ErrorMessage”;&lt;/p&gt;&lt;p&gt;说明：&lt;br/&gt;（1）遵循小驼峰命名法、避免缩写。&lt;br/&gt;（2）在声明公开常量时，也可以使用FOUNDATION_EXPORT替换extern。&lt;/p&gt;&lt;p&gt;3、常量名称的常用命名方法：若常量局限于某“编译单元”，也就是“实现文件”之内，则在前面加字母k；若常量在类之外可见，则通常以WSF+类名为前缀。&lt;/p&gt;&lt;p&gt;九、新建【通知】&lt;br/&gt;1、按照公共常量方法处理。&lt;br/&gt;2、以Notification为后缀。&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 15:21:00 +0000</pubDate>
<dc:creator>码出境界</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cchHers/p/7887579.html</dc:identifier>
</item>
<item>
<title>线程&amp;进程&amp;协程 - Jason_lincoln</title>
<link>http://www.cnblogs.com/Jason-lin/p/7887584.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jason-lin/p/7887584.html</guid>
<description>&lt;h3 id=&quot;线程&quot;&gt;线程&lt;/h3&gt;
&lt;p&gt;线程是应用程序中工作的最小单元，它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。Threading用于线程相关操作&lt;/p&gt;
&lt;p&gt;使用多线程和单线程的运行速度对比&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import threading
import time


def run(n):
    print(&quot;task&quot;, n)
    time.sleep(2)


t1 = threading.Thread(target=run, args=('t1',))
t2 = threading.Thread(target=run, args=('t2',))
# t1.start()
# t2.start()
run(1)
run(2)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;start 线程准备就绪，等待CPU调度&lt;/li&gt;
&lt;li&gt;setName 为线程设置名称&lt;/li&gt;
&lt;li&gt;getName 获取线程名称&lt;/li&gt;
&lt;li&gt;setDaemon 设置为后台线程或前台线程（默认）如果是后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，均停止&lt;br/&gt;如果是前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止&lt;/li&gt;
&lt;li&gt;join 逐个执行每个线程，执行完毕后继续往下执行，该方法使得多线程变得无意义&lt;/li&gt;
&lt;li&gt;run 线程被cpu调度后自动执行线程对象的run方法&lt;br/&gt;&lt;strong&gt;多线程例子&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;import threading
import time


def run(n):
    print(&quot;running task&quot;, n)
    time.sleep(2)
    print(&quot;task done&quot;, n)


start_time = time.time()
t_objs = []  # 存线程实例
for i in range(50):
    t = threading.Thread(target=run, args=(&quot;t-%s&quot; % i,))
    t_objs.append(t)
    t.start()

for t in t_objs:  # 循环线程实例列表，等待所有线程执行完毕
    t.join()

print(&quot;all thread has finished&quot;)
print(&quot;cost:&quot;, time.time() - start_time)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;守护线程&quot;&gt;守护线程&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;import threading
import time


def run(n):
    print(&quot;running task&quot;, n)
    time.sleep(2)
    print(&quot;task done&quot;, n)


start_time = time.time()
t_objs = []
for i in range(50):
    t = threading.Thread(target=run, args=(&quot;t-%s&quot; % i,))
    t.setDaemon(True)  # 把当前线程设置为守护线程
    t_objs.append(t)   # 为了不阻塞后面线程的启动，不在这里join
    t.start()

print(&quot;all thread has finished&quot;)
print(&quot;cost:&quot;, time.time() - start_time)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;线程锁互斥锁mutex&quot;&gt;线程锁(互斥锁Mutex)&lt;/h3&gt;
&lt;p&gt;由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，所以，出现了线程锁即：&lt;br/&gt;&lt;strong&gt;同一时刻允许一个线程执行操作。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import time
import threading


def run(n):
        global num  # 在每个线程中都获取这个全局变
        time.sleep(0.5)
        num += 1  # 对此公共变量进行-1操作
        print(&quot;num:&quot;, num)
        

num = 0  # 设定一个共享变量
thread_list = []
for i in range(100):
    t = threading.Thread(target=run, args=(&quot;t-%s&quot; % i,))
    t.start()
    thread_list.append(t)
for t in thread_list:  # 等待所有线程执行完毕
    t.join()

print('final num:', num)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正常来讲，这个num结果应该是0，Ubuntu上结果有时不为0,在python2.7下。python3.0+上可能自动加上锁&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import time
import threading


def addNum():
    global num  # 在每个线程中都获取这个全局变量
    print('--get num:', num)
    time.sleep(1)
    lock.acquire()  # 修改数据前加锁
    num -= 1  # 对此公共变量进行-1操作
    lock.release()  # 修改后释放


num = 100  # 设定一个共享变量
thread_list = []
lock = threading.Lock()  # 生成全局锁
for i in range(num):
    t = threading.Thread(target=addNum)
    t.start()
    thread_list.append(t)

for t in thread_list:  # 等待所有线程执行完毕
    t.join()

print('final num:', num)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;rlock递归锁&quot;&gt;RLOCK(递归锁)&lt;/h3&gt;
&lt;p&gt;大锁加小锁&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import threading,time
 
def run1():
    print(&quot;grab the first part data&quot;)
    lock.acquire()
    global num
    num +=1
    lock.release()
    return num
def run2():
    print(&quot;grab the second part data&quot;)
    lock.acquire()
    global  num2
    num2+=1
    lock.release()
    return num2
def run3():
    lock.acquire()
    res = run1()
    print('--------between run1 and run2-----')
    res2 = run2()
    lock.release()
    print(res,res2)
 
 
if __name__ == '__main__':
 
    num,num2 = 0,0
    lock = threading.RLock()
    for i in range(10):
        t = threading.Thread(target=run3)
        t.start()
 
while threading.active_count() != 1:
    print(threading.active_count())
else:
    print('----all threads done---')
    print(num,num2)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;信号量semaphone&quot;&gt;信号量（Semaphone）&lt;/h3&gt;
&lt;p&gt;互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;port threading,time
 
def run(n):
    semaphore.acquire()
    time.sleep(1)
    print(&quot;run the thread: %s\n&quot; %n)
    semaphore.release()
 
if __name__ == '__main__':
 
    num= 0
    semaphore  = threading.BoundedSemaphore(5) #最多允许5个线程同时运行
    for i in range(20):
        t = threading.Thread(target=run,args=(i,))
        t.start()
 
while threading.active_count() != 1:
    pass #print threading.active_count()
else:
    print('----all threads done---')
    print(num)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;timer&quot;&gt;Timer&lt;/h3&gt;
&lt;p&gt;定时器，指定n秒后执行某操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from threading import Timer
 
def hello():
    print(&quot;hello, world&quot;)
 
t = Timer(1, hello)
t.start()  # after 1 seconds, &quot;hello, world&quot; will be printed&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;events事件&quot;&gt;Events(事件)&lt;/h3&gt;
&lt;p&gt;python线程的事件用于主线程控制其他线程的执行，事件主要提供了三个方法 &lt;strong&gt;set、wait、clear。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事件处理的机制：全局定义了一个“Flag”，如果“Flag”值为 False，那么当程序执行 event.wait 方法时就会阻塞，如果“Flag”值为True，那么event.wait 方法时便不再阻塞。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;clear：将“Flag”设置为False&lt;/li&gt;
&lt;li&gt;set：将“Flag”设置为True&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;import threading,time
import random
def light():
    if not event.isSet():
        event.set() #wait就不阻塞 #绿灯状态
    count = 0
    while True:
        if count &amp;lt; 10:
            print('\033[42;1m--green light on---\033[0m')
        elif count &amp;lt;13:
            print('\033[43;1m--yellow light on---\033[0m')
        elif count &amp;lt;20:
            if event.isSet():
                event.clear()
            print('\033[41;1m--red light on---\033[0m')
        else:
            count = 0
            event.set() #打开绿灯
        time.sleep(1)
        count +=1
def car(n):
    while 1:
        time.sleep(random.randrange(10))
        if  event.isSet(): #绿灯
            print(&quot;car [%s] is running..&quot; % n)
        else:
            print(&quot;car [%s] is waiting for the red light..&quot; %n)
if __name__ == '__main__':
    event = threading.Event()
    Light = threading.Thread(target=light)
    Light.start()
    for i in range(3):
        t = threading.Thread(target=car,args=(i,))
        t.start()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;queue队列&quot;&gt;queue(队列)&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;queue.Queue 先入先出&lt;/li&gt;
&lt;li&gt;queue.LifoQueue 后入先出&lt;/li&gt;
&lt;li&gt;queue.PriorityQueue 存储数据时可设置优先级的队列&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;q = queue.Queue()

# q = queue.LifoQueue
# q = queue.PriorityQueue
q.put(2)
print(q.get())
# print(q.get())  # 卡住
# print(q.get(timeout=1))  # 设置等待时间
#  异常queue.Empty
print(q.get(block=False))  # 不卡&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;maxiside&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import queue

q = queue.Queue(maxsize=3)
q.put(1)
q.put(2)
q.put(2)
q.put(3)  # 卡住
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;queue.PriorityQueue&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import queue
q = queue.PriorityQueue()

q.put((-1, &quot;chenronghua&quot;))
q.put((3, &quot;hangyang&quot;))
q.put((10, &quot;alex&quot;))

print(q.get())
print(q.get())
print(q.get())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;详细点击&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5230609.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/alex3714/articles/5230609.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;队列的作用：&lt;/strong&gt;&lt;br/&gt;解耦、提高效率&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;队列和列表的区别：&lt;/strong&gt;&lt;br/&gt;队列取出一块硬盘，队列里自动减少一块。列表相当于复制一块。&lt;/p&gt;
&lt;p&gt;子进程相对于父进程，两个进程相互独立，分别属于两块内存空间&lt;/p&gt;
&lt;h3 id=&quot;生产者消费者模型&quot;&gt;生产者消费者模型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;什么是生产者消费者模式？&lt;/strong&gt;&lt;br/&gt;生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import time,random
import queue,threading
q = queue.Queue()
def Producer(name):
  count = 0
  while count &amp;lt;20:
    time.sleep(random.randrange(3))
    q.put(count)
    print('Producer %s has produced %s baozi..' %(name, count))
    count +=1
def Consumer(name):
  count = 0
  while count &amp;lt;20:
    time.sleep(random.randrange(4))
    if not q.empty():
        data = q.get()
        print(data)
        print('\033[32;1mConsumer %s has eat %s baozi...\033[0m' %(name, data))
    else:
        print(&quot;-----no baozi anymore----&quot;)
    count +=1
p1 = threading.Thread(target=Producer, args=('A',))
c1 = threading.Thread(target=Consumer, args=('B',))
p1.start()
c1.start()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;线程与进程的区别&quot;&gt;线程与进程的区别&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;线程是执行的指令集， 进程是资源的集合&lt;/li&gt;
&lt;li&gt;线程共享内存空间，进程的内存是独立的&lt;/li&gt;
&lt;li&gt;同一个进程的线程之间可以直接通信，两个进程想要通信，必须通过一个中间代理来实现&lt;/li&gt;
&lt;li&gt;创建新线程很简单（快）， 创建新进程需要对其父进程进行一次克隆（慢）。&lt;/li&gt;
&lt;li&gt;一个线程可以控制和操作同一个进程里的其他线程，但是进程只能操作子进程&lt;/li&gt;
&lt;li&gt;对主线程的更改(取消、优先级变更等)可能会影响进程的其他线程的行为;对父进程的更改不会影响子进程。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;既生进程何生线程&quot;&gt;既生进程何生线程&lt;/h3&gt;
&lt;p&gt;进程有很多优点，它提供了多道编程，让我们感觉我们每个人都拥有自己的CPU和其他资源，可以提高计算机的利用率。很多人就不理解了，既然进程这么优秀，为什么还要线程呢？其实，仔细观察就会发现进程还是有很多缺陷的，主要体现在两点上：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;多进程的应用场景&quot;&gt;多进程的应用场景&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;io 操作不占用cpu&lt;/li&gt;
&lt;li&gt;计算占用cpu&lt;/li&gt;
&lt;li&gt;python多线程，不适合cpu密集操作型的任务，适合io操作密集型的任务&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;from multiprocessing import Process
import os


def info(title):
    print(title)
    print('module name:', __name__)
    print('parent process:', os.getppid())
    print('process id:', os.getpid())
    # print(&quot;\n\n&quot;)


def f(name):
    info('\033[31;1m function f\033[0m')
    print('hello', name)


if __name__ == '__main__':
    info('\033[32;1m main process line\033[0m')
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;进程之间的通讯&quot;&gt;进程之间的通讯&lt;/h3&gt;
&lt;p&gt;不同进程间内存是不共享的，要想实现两个进程间的数据交换，可以用以下方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from multiprocessing import Process
from multiprocessing import Queue
import queue


def f(q):
    q.put([42, 'hello'])


if __name__ == '__main__':
    # q = queue.Queue()  # 线程queue
    q = Queue()
    p = Process(target=f, args=(q,))  # 复制了一份
    p.start()
    print(q.get())
    p.join()&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;from multiprocessing import Process
from multiprocessing import Pipe


def f(conn):
    conn.send([42, None, 'hello'])
    print(&quot;from parents:&quot;, conn.recv())
    conn.close()


if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print(parent_conn.recv())  # prints &quot;[42, None, 'hello']&quot;
    parent_conn.send(&quot;hi son&quot;)
    p.join()&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;from multiprocessing import Process, Manager
import os


def f(d, list_1):
    d[os.getpid()] = os.getpid()
    list_1.append(os.getpid())
    print(list_1)


if __name__ == '__main__':
    with Manager() as manager:
        d = manager.dict()  # 生成一个字典,可在多个进程间共享和传递
        list_1 = manager.list(range(3))  # 生成一个列表，可在多个进程间共享和传递
        p_list = []
        for i in range(10):
            p = Process(target=f, args=(d, list_1))
            p.start()
            p_list.append(p)
        for res in p_list:  # 等待结果
            res.join()
        print(d)
        print(list_1)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;进程池&quot;&gt;进程池&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;进程池的作用：&lt;/strong&gt;限制同一时间使用的进程数量。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from multiprocessing import Process
from multiprocessing import Pool
import time
import os


def Foo(i):
    time.sleep(2)
    print(&quot;in process&quot;, os.getpid())
    return i + 100


def Bar(arg):
    print('--&amp;gt;exec done:', arg, os.getpid())


# print(__name__)
if __name__ == '__main__': 
    pool = Pool(processes=5)  # 允许进程池同时放入5个进程
    print(&quot;主进程&quot;, os.getpid())
    for i in range(10):   # 启动十个线程
        pool.apply_async(func=Foo, args=(i,), callback=Bar)
        # pool.apply(func=Foo, args=(i,))  # 串行
        # pool.apply_async(func=Foo, args=(i,))  # 并行

    pool.close() # 必须先close()后join()
    pool.join()  # 进程池中进程执行完P毕后再关闭，如果注释，那么程序直接关闭。
    print('end')&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;进程同步进程锁&quot;&gt;进程同步&amp;amp;进程锁&lt;/h3&gt;
&lt;p&gt;进程锁存在的意义是，因为多进程共享同一个屏幕，控制屏幕打印的时候不乱。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from multiprocessing import Lock
from multiprocessing import Process


def f(l, i):
    l.acquire()
    print('hello world', i)
    l.release()


if __name__ == '__main__':
    lock = Lock()
    for num in range(10):
        Process(target=f, args=(lock, num)).start()&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;协程conroutine&quot;&gt;协程(Conroutine)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;协程是一种用户态的轻量级线程&lt;/strong&gt;。可以在单线程下实现并发&lt;/p&gt;
&lt;p&gt;线程和进程的操作是由程序触发系统接口，最后的执行者是系统；协程的操作则是程序员。&lt;br/&gt;协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时（保存状态，下次继续）。协程，则只使用一个线程，在一个线程中规定某个代码块执行顺序。&lt;br/&gt;协程的适用场景：当程序中存在大量不需要CPU的操作时（IO），适用于协程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协程的好处&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无需线程上下文切换的开销&lt;/li&gt;
&lt;li&gt;无需原子操作锁定及同步的开销&lt;/li&gt;
&lt;li&gt;&quot;原子操作(atomic operation)是不需要synchronized&quot;，所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。原子操作可以是一个步骤，也可以是多个操作步骤，但是其顺序是不可以被打乱，或者切割掉只执行部分。视作整体是原子性的核心。&lt;/li&gt;
&lt;li&gt;方便切换控制流，简化编程模型&lt;/li&gt;
&lt;li&gt;高并发+高扩展性+低成本：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。&lt;/li&gt;
&lt;li&gt;进行阻塞（Blocking）操作（如IO时）会阻塞掉整个程序&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;符合什么条件就能称之为协程？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;必须在只有一个单线程里实现并发&lt;/li&gt;
&lt;li&gt;修改共享数据不需加锁&lt;/li&gt;
&lt;li&gt;用户程序里自己保存多个控制流的上下文栈&lt;/li&gt;
&lt;li&gt;一个协程遇到IO操作自动切换到其它协程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;yeild协程例子&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def consumer(name):
    print(&quot;---&amp;gt;starting eating baozi...&quot;)
    while True:
        new_baozi = yield
        print(&quot;[%s] is eating baozi %s&quot; % (name, new_baozi))


def producer():
    r = con.__next__()
    r = con2.__next__()
    n = 0
    while n &amp;lt; 5:
        n += 1
        con.send(n)
        con2.send(n)
        print(&quot;\033[32;1m[producer]\033[0m is making baozi %s&quot; % n)


if __name__ == '__main__':
    con = consumer(&quot;c1&quot;)
    con2 = consumer(&quot;c2&quot;)
    p = producer()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Gevent&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import gevent
 
def func1():
    print('\033[31;1m李闯在跟海涛搞...\033[0m')
    gevent.sleep(2)
    print('\033[31;1m李闯又回去跟继续跟海涛搞...\033[0m')
 
def func2():
    print('\033[32;1m李闯切换到了跟海龙搞...\033[0m')
    gevent.sleep(1)
    print('\033[32;1m李闯搞完了海涛，回来继续跟海龙搞...\033[0m')
 
 
gevent.joinall([
    gevent.spawn(func1),
    gevent.spawn(func2),
    #gevent.spawn(func3),
])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Gevent版socket&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import sys
import socket
import time
import gevent

from gevent import socket, monkey

monkey.patch_all()


def server(port):
    s = socket.socket()
    s.bind(('0.0.0.0', port))
    s.listen(500)
    while True:
        cli, addr = s.accept()
        gevent.spawn(handle_request, cli)


def handle_request(conn):
    try:
        while True:
            data = conn.recv(1024)
            print(&quot;recv:&quot;, data)
            conn.send(data)
            if not data:
                conn.shutdown(socket.SHUT_WR)

    except Exception as  ex:
        print(ex)
    finally:
        conn.close()


if __name__ == '__main__':
    server(8001)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;rsa-非对称密钥验证&quot;&gt;RSA-非对称密钥验证&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;公钥 public key&lt;/li&gt;
&lt;li&gt;私钥 private key&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;import paramiko


private_key = paramiko.RSAKey.from_private_key_file('id_rsa')
ssh = paramiko.SSHClient()
# 允许连接不在.ssh/know_hosts文件中的主机
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
# 连接服务器
ssh.connect(hostname='192.168.31.102', port=22, username='root', pkey=private_key)
# 执行命令
stdin, stdout, stderr = ssh.exec_command('df')
# 获取命令结果
res = stdout.read()

ssh.close()
print(res.decode())&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 23 Nov 2017 15:21:00 +0000</pubDate>
<dc:creator>Jason_lincoln</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jason-lin/p/7887584.html</dc:identifier>
</item>
<item>
<title>函数劫持 - liuyongjia</title>
<link>http://www.cnblogs.com/liuyongjia/p/7887541.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuyongjia/p/7887541.html</guid>
<description>&lt;p&gt;前段时间接手了一个shi一样的项目，各种代码触目惊心。一个文件里，一会儿4个空格缩进，一会儿2个空格缩进；各种magic number；函数形参a,b,c……&lt;br/&gt;当然这篇也不打算吐槽，也不想说什么代码可读性的问题，只是想借这个机会谈一下维护这样的代码时候用到的一个小技巧。&lt;/p&gt;

&lt;p&gt;第一次看到这个概念，是在一本web攻防的书籍上。作者提到了利用函数劫持来将一些敏感信息记录下来或者发送到黑客的服务器上。也在一个网站上键入alert时，发现并没有弹窗，而是在console中log了出来。&lt;br/&gt;我猜测，大概代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (message) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'alert: '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;message&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的这个例子是一个非常浅显的函数劫持，我们也可以加一点别的内容上去。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (message) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'alert: '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;message&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;reportToMyServer&lt;/span&gt;(message)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//把信息上报到我们自己的服务器&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;先说一下需求，现在有一个修改url的函数，在许多地方被调用了，然后产品有一个小的临时的需求，在某些情况下，加一个参数上去，其他情况不加。&lt;br/&gt;修改url的参数大概实现如下：&lt;br/&gt;1.需要传入键值对&lt;br/&gt;2.把键值对转换成url拼接的形式，拼到url上，之前拼接的参数，一概不要。&lt;/p&gt;
&lt;p&gt;不要问我为什么要这么实现，我知道这个实现很奇怪，但是我也不打算修改他们的代码。只是一个小小的需求，我也不想在所以调用这个函数的地方，都再加一个键值对，太麻烦了，于是就想到了函数劫持。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;changeUrl&lt;/span&gt; (obj) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//我不想写具体实现了，诸君脑补&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//就是host + orgin + 键值对&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; 
    foo &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; changeUrl
&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
changeUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (obj) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;myParameter&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello-world'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;(obj)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子很简单，道理也很容易看明白。我想说的是，函数劫持其实有一些封装的思想：&lt;strong&gt;我不关心这个方法怎么实现，我只关心结果。&lt;/strong&gt; 其他的内容，内部实现，其实是对我们屏蔽的。&lt;br/&gt;我们劫持的方法，根本不需要关心他做了什么，怎么做的，只需要加入我们想加入的东西即可。这种思维方式可以用在我们平时的编程上，尽可能封装好大部分实现，只将几个口暴露给用户来调用。&lt;/p&gt;
&lt;p&gt;以上是个人理解，有不对的地方敬请指教。&lt;/p&gt;
</description>
<pubDate>Thu, 23 Nov 2017 15:08:00 +0000</pubDate>
<dc:creator>liuyongjia</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuyongjia/p/7887541.html</dc:identifier>
</item>
<item>
<title>canvas动画3：交互 - dkplus</title>
<link>http://www.cnblogs.com/dkplus/p/7887482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dkplus/p/7887482.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;时隔很久，本人终于又写博客了（重度拖延症），把之前留下的canvas交互动画讲一讲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电脑上的交互，指的是鼠标和键盘，我们今天主要用的是鼠标。&lt;/p&gt;
&lt;p&gt;既然是鼠标的话，就要获取鼠标的各种事件，这次以&lt;code&gt;mousemove&lt;/code&gt;做示例。&lt;/p&gt;
&lt;p&gt;我们先定义一个鼠标对象，然后添加&lt;code&gt;mousemove&lt;/code&gt;事件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; mouse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//这样的话控制台就会跟随我们的鼠标移动输出相应的坐标&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;mousemove&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (event) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(mouse)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们声明一个初始化函数&lt;code&gt;init()&lt;/code&gt;，用于把制造圆的过程封装：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    circleArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;circleArray&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; radius))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的话，按照上一篇文章的做法，我们的canvas会出现一些问题。所以，需要给Circle对象&lt;code&gt;update()&lt;/code&gt;里的属性都加上&lt;code&gt;this&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; radius) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; radius&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#000&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fill&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//圆触碰边界时反弹，偏移值为负&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; innerWidth &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; innerHeight &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//刷新绘制时圆的偏移运动&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//根据更新的值进行绘制&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们就要用mousemove于动画进行交互了，我们假定圆心在鼠标坐标周围50px以内的时候圆会增大，这段代码应该写在update()里：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// if (this.radius &amp;lt; maxRadius) {&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// }&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们设置了10个圆，把鼠标移上去的时候会看到在控制范围内的圆会不断变大，不会停下来，所以我在前面就设置了一个圆半径的最大值，以免它一直增大，然后把注释的内容去掉，圆就不会无限增大了：&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是有一个问题，圆放大了以后不会缩小，那么我们就让它在离开圆50px半径范围后缩小：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; maxRadius) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//其他的所有圆半径不断减小&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候又有新问题产生了，画面一片空白，因为圆心不在鼠标固定范围内的圆全都变小了，甚至半径为负！显然简单的else是不成立的，还是得加个条件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; maxRadius) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//其他的所有圆半径减小到最小值&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;minRadius&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里出现了一个新值：&lt;code&gt;minRadius&lt;/code&gt;，我加在了Circle对象里&lt;code&gt;this.minRadius = radius;&lt;/code&gt;，以原本的初始值作为它的最小值。好了，现在基本效果已经成型了：&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;接下来就是颜色的问题了，只要懂得canvas的基本api，修改颜色完全就是小儿科。我们设置一个数组，用于存放颜色值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; colorArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;st&quot;&gt;'#58D68D'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#E67F22'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#3598DB'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#E84C3D'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#9A59B5'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#27AE61'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#D25400'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#BEC3C7'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#297FB8'&lt;/span&gt;
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在Circle对象里加上一个&lt;code&gt;bg&lt;/code&gt;属性：&lt;code&gt;this.bg = colorArray[Math.floor(Math.random()*colorArray.length)];&lt;/code&gt;，再往Circle的绘制函数添上一句&lt;code&gt;ctx.fillStyle = this.bg;&lt;/code&gt;，然后&lt;code&gt;ctx.fill();&lt;/code&gt;，多彩运动的圆圈canvas就做完了。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这是一个运用mousemove事件做的canvas交互动画，有兴趣的可以尝试其他事件（制作游戏用的键盘事件以及其他鼠标事件），或者思考如何给球加重力，如何检测碰撞事件，canvas的世界并不只有这么一点，相关资料的话，给大家推荐本书《canvas开发详解》。&lt;/p&gt;
&lt;p&gt;本文的最终js代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@authors&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; dkplus (dkplus&lt;/span&gt;@qq.com)
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@date&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;    2017-10-01 20:37:26&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@version&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; $1.0$&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 获取canvas对象，设置宽度高度自适应&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;@type&lt;span class=&quot;co&quot;&gt; {[type]}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; canvas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#canvas&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ctx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;2d&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 屏幕鼠标坐标&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;@type&lt;span class=&quot;co&quot;&gt; {Object}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; mouse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{鼠标移动事件，回调函数，赋值给鼠标坐标}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; {[type]}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;mousemove&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (event) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// console.log(mouse);&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{重新设置窗口大小，使canvas宽高自适应屏幕}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; {[type]}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;resize&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//初始化canvas&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;//绘制圆的最大半径&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; maxRadius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// var minRadius = 2;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//圆的颜色数组&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; colorArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;st&quot;&gt;'#58D68D'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#E67F22'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#3598DB'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#E84C3D'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#9A59B5'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#27AE61'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#D25400'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#BEC3C7'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'#297FB8'&lt;/span&gt;
]
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{x圆中心的x坐标}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{y圆中心的y坐标}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{dx圆运动的x偏移量}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{dy圆运动的y偏移量}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{radius圆的半径}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * minRadius圆的最小半径&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * bg圆的背景颜色&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * draw绘制函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * update圆运动偏移&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; radius) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; radius&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;minRadius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; radius&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bg&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; colorArray[&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;colorArray&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;)]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#777&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bg&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// ctx.stroke();&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fill&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//圆触碰边界时反弹，偏移值为负&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; innerWidth &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; innerHeight &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//刷新绘制时圆的偏移运动&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//鼠标半径50像素范围内的圆，它们的半径逐步增加到最大值&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mouse&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; maxRadius) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//其他的所有圆半径减小到最小值&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;minRadius&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//根据更新的值进行绘制&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//圆的对象数组&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; circleArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 初始化函数，制造800个随机坐标、偏移速度和半径的圆，加入到对象数组&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; {[type]}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    circleArray &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; radius &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;circleArray&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Circle&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; dy&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; radius))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 动画函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; {[type]}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//更新前清楚画布&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(animate)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//每个圆都调用update()方法&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;circleArray&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        circleArray[i].&lt;span class=&quot;at&quot;&gt;update&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 23 Nov 2017 14:55:00 +0000</pubDate>
<dc:creator>dkplus</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dkplus/p/7887482.html</dc:identifier>
</item>
<item>
<title>一步一步教你用c# entity framework6 连接 sqlite 实现增删改查 - eshine</title>
<link>http://www.cnblogs.com/eshinex/p/7887106.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/eshinex/p/7887106.html</guid>
<description>


&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用entity framework6 连接 SQLite 数据库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多小型应用程序中，都要使用数据库，而现在比较流行的本地数据库非SQLite莫属。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：前期准备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发环境：vs2015 + sqlite-netFx46-setup-bundle-x86-2015-1.0.106.0.exe&lt;/p&gt;
&lt;p&gt;注：sqlite-netFx46-setup-bundle-x86-2015-1.0.106.0.exe 为vs2015添加设计时组件，详情请见：&lt;a href=&quot;http://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki&quot; target=&quot;_blank&quot;&gt;http://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki&lt;/a&gt;   （见下图说明）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123200220921-885397822.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装sqlite-netFx46-setup-bundle-x86-2015-1.0.106.0.exe，请勾选“Install the assemblies into the global assembly cache” 和“Install the designer components for Visual Studio 2015” 等两项。如果你的开发环境不是 vs2015，是2012 或2013，请下载相应的版本，vs2017没有设计时组件，预计明年一月份会出来。见官网说明：&lt;a href=&quot;http://system.data.sqlite.org/index.html/doc/trunk/www/news.wiki&quot; target=&quot;_blank&quot;&gt;http://system.data.sqlite.org/index.html/doc/trunk/www/news.wiki&lt;/a&gt; 。里面有一条关于设计时组件的说明，&lt;a href=&quot;http://system.data.sqlite.org/index.html/info/8292431f51&quot; target=&quot;_blank&quot;&gt;http://system.data.sqlite.org/index.html/info/8292431f51&lt;/a&gt; ，这个里面解释了为什么没有为vs2017做设计时组件。&lt;/p&gt;
&lt;p&gt;sqlite-netFx46-setup-bundle-x86-2015-1.0.106.0.exe安装截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123201452625-829928937.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123201623828-1940074555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：搭建项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目名称：SqliteEfTest&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搭建步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.创建SqliteEfTest的winform程序 （我选择的是4.0的，选4.0以上的应该也没有问题）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123202212250-22781308.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;2.在程序中添加一个文件，DataBase.db（由于Sqlite是文件型数据库，所以我直接创建了一个DataBase.text，然后修改后缀名为.db即可）&lt;/p&gt;
&lt;p&gt;打开项目所在目录，直接在根目录处添加DataBase.text，然后修改后缀名为DataBase.db&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123202653375-1509152416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123202958968-737532851.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.添加DataBase.txt，然后修改后缀名，文件变为：DataBase.db&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123203550531-1153347087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123203802187-1758692048.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123204002843-2058988628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123204312421-137250456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;4.点击显示所有文件，将DataBase.db文件包含到项目中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123204604703-2114028996.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;5.修改DataBase.db文件属性，使其在生成时，能够复制到bin文件夹中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123204704781-812416270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123205038359-814608195.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123205201406-2053865885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123205254171-263624543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;设置完DataBase.db的相关属性后，F6生成，F5运行后，你会发现，DataBase.db文件被复制到bin文件夹中（之所以要复制到bin文件夹中，和读取本地数据库有关系，同时，和数据库链接字符串也有关系，因为程序安装路径是随意的，你读取数据库的最简单办法就是读取程序当前路径）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123205654312-1952554620.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;6.安装SQLite相关依赖包：工具--&amp;gt;NuGet管理器--&amp;gt;管理解决方案的NuGet程序包，搜索sqlite，安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123205949515-614960545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123210157359-1105640915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123210648484-1884476674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123210738937-193479473.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123210926593-1170895668.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7.连接数据库创建表，给数据库DataBase.db创建相关表，我使用的Navicat for SQLite来创建表的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123211914203-1699558487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123211957156-1546646282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试连接成功，开始创建一张表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212102968-1594642711.jpg&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212125625-1031531046.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212329625-455548723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212556375-1826631490.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212654593-1263046289.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212748796-335845497.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;9.关闭当前Navicat连接，通过ADO.net，连接当前设计时数据库，自动生成ORM的相关代码吧！&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123212954890-2004820027.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123213028437-885147872.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123213545796-1903238158.jpg&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123213555234-321922245.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123213630812-351479774.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123213812140-1685989000.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123214341234-1407588698.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123214354609-857244720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123214412343-2115807183.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123214421328-509492771.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123214435453-1385451003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击“完成”按钮，等待代码自动生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123220254187-794352837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;10.修改App.config文件的连接字符串：去掉红色标记部分，只留下DataBase.db&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123220548234-1508176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123220637015-63900088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;11.下面写增删改查的相关业务逻辑，见打包上传的代码吧！&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123220803250-1283084534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123220912984-468781578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123221008921-1918900564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;12.比对设计时数据库和运行时数据库的差异：添加运行时数据库（bin文件夹下面的），用Navicat 再对bin文件夹下面的DataBase.db建立连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123221649265-370427963.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123221500687-119937793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/249616/201711/249616-20171123221557437-1976324989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计时表中的数据在F5后，并没有变化，但是运行时里面的 数据发生了改变，这就是修改 App.config连接字符串路径导致的。而设计时里面的数据是我未修改 连接字符串前插入的数据。先修改，再运行，是不会对设计时的表产生影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;源码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;附上源代码：源代码（百度网盘下载）&lt;a href=&quot;http://pan.baidu.com/s/1ge4zGQn&quot; target=&quot;_blank&quot;&gt;SqliteEfTest.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;http://pan.baidu.com/s/1ge4zGQn&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1ge4zGQn&lt;/a&gt; 密码：ugg2&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 14:32:00 +0000</pubDate>
<dc:creator>eshine</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/eshinex/p/7887106.html</dc:identifier>
</item>
<item>
<title>Celery 源码解析八：State 和 Result - 行者酱油君</title>
<link>http://www.cnblogs.com/makor/p/implement-of-state-and-result-in-celery.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makor/p/implement-of-state-and-result-in-celery.html</guid>
<description>&lt;p&gt;在前面几篇解析中，我们已经看过了 Worker 是如何运行的，Task 是如何创建的，以及怎么被路由到 Worker 中，除了这些之外，我们还对流量限制，Worker 控制和 Task/Worker 产生和处理 Event 进行了介绍。但这却不是全部，今天我将继续和大家一起来看看 Celery 的 Task Result 和 State 相关的内容。&lt;/p&gt;
&lt;h3 id=&quot;toc_0&quot;&gt;Task State&lt;/h3&gt;
&lt;p&gt;在 &lt;strong&gt;celery/celery/states.py&lt;/strong&gt; 中，可以看到 Task 的所有 State&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926156-1093191968.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;至于如果想要看 Task 的状态转变，那我们就需要回顾一下 Task 从产生到完成的过程，如果是一个普通的 Task 的话，那么它的执行流程应该是：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;从 Producer 产生 -①-&amp;gt; MQ -②-&amp;gt; Consumer 接收 -③-&amp;gt; 执行策略执行 -④-&amp;gt; 执行完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么这里的 ①②③④ 有没有设置状态，并且状态是啥，就是我们关注的重点了，ok，那我们就跟随之前的脚步快速得发掘一番：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926187-240588314.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这个是同步发送消息的时候，其实也是第一次出现 state 的时候，但是这个 state 已经是 ④ 之后的状态了，但是，无妨，我们已经知道了执行完成之后的状态是在这里 update 的。那么对于异步的情况又是如何更新状态的呢，那根据我们之前的 review，我们知道应该去找 &lt;code&gt;AsyncResult&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926156-1513426069.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;所以这里就是 backend 的事情啦，backend 再甩锅给 backend Consumer，然后就是在 backend Consumer 里面干活了，最后就到了这：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926156-929378583.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里其实虽然是调用的 &lt;code&gt;on_state_change&lt;/code&gt; 但是，我们应该知道的一点就是在这个时候其实状态已经变化了，那么我们就应该追述到上面的 &lt;code&gt;result._iter_meta&lt;/code&gt;，看看里面的实现，这里我就飘过很多细节了，直接看最实际的地方：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926140-1917750902.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里可以发现，其实结果是通过 &lt;strong&gt;Backend&lt;/strong&gt; 组件完成的，例如 Redis 就放在 Key 对应的 Value 中，其他的 Backend 也类似，如果没有的话，在 &lt;strong&gt;Line 667&lt;/strong&gt; 我们就知道了，状态就是 &lt;strong&gt;PENDING&lt;/strong&gt; 啦，第二个状态捕获！然后还有 &lt;strong&gt;Line 668&lt;/strong&gt; 这里的解析结果也是值得我们一看，我直接看最后吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926140-175250146.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;可以发现这里也是很有趣的，如果 Task 的状态是异常状态的话，还需要进行&lt;strong&gt;异常回溯&lt;/strong&gt;，其实就是把异常信息解压出来，展示给我们看。&lt;/p&gt;
&lt;p&gt;那我们是时候我们去找找第三个状态：&lt;strong&gt;Received&lt;/strong&gt; 了，我们可以猜测一下大概可能出现的位置，这里就是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926453-1426415705.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里可以发现居然是有一个 EVENT 发送出去，然后我们就应该去看看处理这个 Event 的人啦，如果你还有印象的话，那么你应该可以很容易得追踪到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926578-1642416319.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里你会发现你感兴趣的所有东西，哈哈，其实你需要看看一个字典：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926578-1826478411.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;你会发现所有的状态都可以在这里更新，哈哈。所以下面我就列一下各个 EVENT 的发出地点就好了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926562-1395333643.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;如果你够细心的话，你会发现 &lt;strong&gt;failed&lt;/strong&gt; 和 &lt;strong&gt;succeeded&lt;/strong&gt; 都是有两处发送地点，有兴趣猜测一下原因么？&lt;/p&gt;
&lt;h3 id=&quot;toc_1&quot;&gt;Task Result&lt;/h3&gt;
&lt;p&gt;其实在前面说 State 的过程中我们已经看到了很多和 Result 有关的东西了。Result 可以认为就两种，同步和异步的，其实也可以看成一种；但是，从另一个维度看，Result 其实也可看成成功的和失败的，anyway，这些都是在 Result 中保存了的。&lt;/p&gt;
&lt;p&gt;我在这里就简单回顾看看 &lt;strong&gt;第三篇&lt;/strong&gt; 中看过的内容，其实 Result 中就放了这几样东西：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926593-485116609.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;br/&gt;分别是 &lt;code&gt;任务ID&lt;/code&gt;、&lt;code&gt;返回值&lt;/code&gt;、&lt;code&gt;执行状态&lt;/code&gt; 以及 &lt;code&gt;错误堆栈信息&lt;/code&gt;，我们在调用的地方用这些信息就足够了。&lt;/p&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;Worker State&lt;/h3&gt;
&lt;p&gt;除了 Task 有状态之外，Worker 其实也是有状态的，回顾我们 &lt;strong&gt;第一篇&lt;/strong&gt; 的内容，Worker 的启动过程这么冗长，所以不是说一运行就到了 Runing 状态了，中间肯定是有各种状态的，所以我们不妨一起来看看。&lt;/p&gt;
&lt;p&gt;回顾一下我们之前看的一些代码，我们应该是有讲过一个叫做 &lt;strong&gt;HeartBeat&lt;/strong&gt; 的组件，它的作用就是保持发送心跳，告诉其他 Worker 这个 Worker 还活着，那么这是一种状态，除了这些状态之外，我们还可以找到的其他 Worker 状态有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;worker-offline&lt;/li&gt;
&lt;li&gt;worker-online&lt;/li&gt;
&lt;li&gt;worker-heartbeat&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Worker-heartbeat&lt;/strong&gt; 我们很清楚它在哪里发送出去的了，那么 &lt;strong&gt;Worker-online&lt;/strong&gt; 和 &lt;strong&gt;Worker-offline&lt;/strong&gt; 又是在哪里发出去的呢？其实都一样的，我们看到 &lt;strong&gt;Heart&lt;/strong&gt; 这个 &lt;strong&gt;Bootstep&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926546-209477540.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;着重看看 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法，我们会发现其实调用的都是同一个地方：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/469840/201711/469840-20171123215926765-1613303528.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;一切了然于胸！&lt;/p&gt;
</description>
<pubDate>Thu, 23 Nov 2017 14:00:00 +0000</pubDate>
<dc:creator>行者酱油君</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/makor/p/implement-of-state-and-result-in-celery.html</dc:identifier>
</item>
<item>
<title>JavaWeb框架SSH_Struts2_(二) - Mairr</title>
<link>http://www.cnblogs.com/Mairr/p/7871538.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mairr/p/7871538.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.  Struts2的核心配置(详解)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本章内容目录：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;配置struts.xml文件
&lt;ol&gt;&lt;li&gt;struts.xml文件&lt;/li&gt;
&lt;li&gt;常量配置&lt;/li&gt;
&lt;li&gt;包配置&lt;/li&gt;
&lt;li&gt;包含配置&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Action配置
&lt;ol&gt;&lt;li&gt;实现Action控制类&lt;/li&gt;
&lt;li&gt;配置Action&lt;/li&gt;
&lt;li&gt;使用通配符&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Action访问Servlet API
&lt;ol&gt;&lt;li&gt;通过ActionContext类访问&lt;/li&gt;
&lt;li&gt;通过特定接口访问、&lt;/li&gt;
&lt;li&gt;通过ServletActionContext访问&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Result结果类型
&lt;ol&gt;&lt;li&gt;配置Result&lt;/li&gt;
&lt;li&gt;预定义的结果类型&lt;/li&gt;
&lt;li&gt;dispatcher结果类型&lt;/li&gt;
&lt;li&gt;redirect结果类型&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.  具体内容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1  配置Struts.xml文件&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.1 Struts.xml文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;Struts2框架的核心配置文件是Struts.xml，该文件主要用来配置Action和请求的对应关系。Struts.xml文件可以被Struts2框架自动加载。&lt;/p&gt;
&lt;p&gt;搭建好了的Struts2项目（可参考上一讲如何搭建Struts2项目），其配置文件Struts.xml如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201711/1194681-20171121095402899-1395317404.png&quot; alt=&quot;&quot; width=&quot;790&quot; height=&quot;233&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　待配置的分块如下（注意注释部分）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE struts PUBLIC
        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;constant元素用于常量的配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.enable.DynamicMethodInvocation&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.devMode&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;ture&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;package元素用于包配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt;=&quot;struts-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置Action&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置Result&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;dispatcher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;location&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;br/&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;include元素用于包含配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=&quot;example.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　简单的包含关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201711/1194681-20171121110153743-1535164946.png&quot; alt=&quot;&quot; width=&quot;778&quot; height=&quot;387&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.2  常量配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　&lt;/strong&gt;　Struts2中常量配置共有3种方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在struts.xml文件中通过&amp;lt;constant&amp;gt;元素配置常量;&lt;/li&gt;
&lt;li&gt;在struts.properties文件中配置常量;&lt;/li&gt;
&lt;li&gt;在web.xml文件中通过&amp;lt;init-param&amp;gt;元素配置常量;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（1） 在Struts.xml文件中通过&amp;lt;constant&amp;gt;元素配置常量&lt;/p&gt;
&lt;p&gt;　　在Struts.xml文件中通过&amp;lt;constant.../&amp;gt;来配置常量时，需要两个必填的属性name和value。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;name：该属性指定了常量的常量名;&lt;/li&gt;
&lt;li&gt;value：该属性指定了常量的常量值;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　在Struts.xml文件中配置的示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置默认编码集为UTF-8&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.enable.SlashesInActionNames&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置使用开发模式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constant &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;struts.devMode&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;ture&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要注意的是，在struts.properties文件能配置的常量都可以在struts.xml文件中用&amp;lt;constant...&amp;gt;元素来配置。&lt;/p&gt;

&lt;p&gt;（2）在struts.properties文件是一个标准的properties文件，其格式为Key-Value对，即每个key对应一个value，key表示的是Struts2框架中的常量，而value表示的是常量值，具体配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
###设置默认编码集为UTF-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
struts.il8n.encoding&lt;/span&gt;=UTF-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;

###设置action请求的扩展名为action或者没有扩展名
struts.action.extension&lt;/span&gt;=&lt;span&gt;action,

###设置不使用开发模式
struts.devMode&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;

###设置不开启动态方法调用
struts.enable.DynamicMethodInvocation&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述代码段中，=号的左边的是key，右边是key对应的value，另外，代码片段中的###表示的是properties文件中的解释信息（注释），用于解释说明。&lt;/p&gt;

&lt;p&gt;（3）在web.xml文件中通过初始化参数配置常量&lt;/p&gt;
&lt;p&gt;　　在web.xml文件中配置核心过滤器StrutsPrepareAndExecuteFilter时，通过初始化参数来配置常量。通过&amp;lt;filter&amp;gt;元素的&amp;lt;init-param&amp;gt;子元素指定，每个&amp;lt;init-param&amp;gt;元素配置了一个struts常量。在web.xml文件中通过初始化参数配置常量方式，如下列代码段所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定struts2的核心过滤器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;struts2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;通过init-param元素配置struts2常量，配置默认编码集为UTF-8&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;struts.il8n.encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;struts2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　需要注意的是， &amp;lt;init-param&amp;gt;标签要放到&amp;lt;filter&amp;gt;之中。&lt;/p&gt;
&lt;p&gt;　　此外，Struts2框架的加载常量有一定的顺序，通常搜索顺序如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;default.properties:该文件在struts2-core-2.3.24.jar文件中的org.apache.struts2包里面;&lt;/li&gt;
&lt;li&gt;struts-default.xml:该文件保存在struts2-core-2.3.24.jar文件中;&lt;/li&gt;
&lt;li&gt;struts-plugin.xml:该文件保存在struts-Xxx-2.3.24.jar等Struts2插件JAR包中;&lt;/li&gt;
&lt;li&gt;struts.xml：该文件是Web应用自己的Struts配置文件Struts2配置文件;&lt;/li&gt;
&lt;li&gt;struts.properties：该文件是Web应用默认的Struts配置文件;&lt;/li&gt;
&lt;li&gt;web.xml：该文件是Web应用的配置文件;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.1.3  包配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　Struts2框架的核心组件是Action和拦截器，它使用包来管理Action和拦截器。每个包就是多个Action、多个拦截器、多个拦截器引用的集合。在Struts.xml文件中，package元素定义了一个包配置，每个package元素定义了一个包配置。package常用属性如下表所示：&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;属性&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;必填属性，指定包的名字，此名字是该包被其他包引用的key&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;可选属性，该属性定义该包的命名空间&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;extends&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;可选属性，指定该包继承自其他包，可以继承其他包的Action定义、&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;拦截器定义等。属性直常设为“strruts-default”&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;abstract&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;可选属性，他指定该包是否是一个抽象包，抽象包不能包含Action&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;定义。（例如：abstract=“true”----&amp;gt;抽象包）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;2.1.3  包含配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　Struts2默认只加载struts.xml文件，但一旦通过多个XML文件来配置Action，就必须通过struts.xml文件来包含其他配置文件。结下来示例一段代码来说明;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;包含4个配置文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;   不指定路径，默认在src下时的方式  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=&quot;struts-shop.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=&quot;struts-user.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=&quot;struts-shoppingcart.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  配置文件在具体包中的方式  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=&quot;cn/intcast/action/struts-product.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2  Action的配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2.2.1 实现Action控制类&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/strong&gt;Action作为Struts框架的核心类，实现对用户请求的处理，Action类被称为业务逻辑控制器。一个Action类代表一次请求或调用，每个请求的动作都对应于一个相应的Action类，一个Action类是一个独立的工作单元。也就是说，用户的每次请求动作都对应于一个相应的Action类里面，由这个Action类来进行处理。简而言之，Action就是用来处理一次用户请求的对象。&lt;/p&gt;
&lt;p&gt;　　实现Action控制有3中方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/strong&gt;(1) POJO的实现&lt;/p&gt;
&lt;p&gt;　　Action可以不继承特殊的类或不实现任何特殊接口，仅仅是一个POJO。POJO全称是Plain Ordinary Java Object（简单的Java对象），只要具有一部分getter/setter方法的类就可以称作为POJO。一般这个POJO类中，要有一个公共的无参构造方法和一个execute（）方法。execute方法是Action类的默认请求处理方法，其方法格式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exeception {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;   
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; execute（）方法要求如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;方法的权限修饰符为public&lt;/li&gt;
&lt;li&gt;返回一个字符串，就是指示的下一个页面的Result&lt;/li&gt;
&lt;li&gt;方法没有参数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　也就是说满足上述要求的POJO都可以算作是Struts的Action实现，但在实际的开发中，通常会让开发者自己编写Action类实现Action接口或者继承ActionSupport类。&lt;/p&gt;
&lt;p&gt;　　（2）实现Action接口&lt;/p&gt;
&lt;p&gt;　　（3）继承ActionSupport类&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（上述两个小部分都是java的简单实现，这篇文章不再赘述）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2.2.2 配置Action&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/strong&gt;Action映射是框架中的基本“工作单元”。Action映射就是将一个请求的URL映射到一个Action类，当一个Actio请求匹配某个Action名称时，框架就使用这个映射来确定如何处理请求。在Struts.xml文件中，通过&amp;lt;action&amp;gt;元素对请求的Action和Action类进行配置。&lt;/p&gt;
&lt;p&gt;　　&amp;lt;action&amp;gt;元素中共有4个属性，具体说明如下：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;属性&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;必填属性，标识Action，指定了Action所处理的请求的URL&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;class&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;可选属性，指定Action对应的实现类&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;method&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;可选属性，指定请求Action时调用的方法&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;converter&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;可选属性，指定类型转换器的类&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　需要注意的是，在配置action元素时，如果没有指定class属性直，则其默认直为com.opensymphony.work2.ActionSupport类，该默认类会使用默认的处理方法execute（）方法来处理请求，实际上，ActionSupport类中的execute（）不会做任何处理，而是直接返回success直。在配置&amp;lt;action&amp;gt;元素时，如果指定了method属性，则该Action可以调用method属性中指定的方法，如果不指定method属性，则Action会调用execute（）方法。&lt;/p&gt;
&lt;p&gt;　　接下来看一个struts.xml文件中配置的action元素，代码片段如下所示：（注意：action的配置在struts.xml的package包平配置的内部）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;userAction&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.action.UserAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/success.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&amp;lt;action&amp;gt;类的属性直将在其他地方引用，例如.jsp页面form表单的action属性直;class属性指明了Action的实现类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2.2.3 使用通配符&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/strong&gt;在&lt;/span&gt;使用method属性时，由于在Action类中有多个业务逻矩处理方法，在配置Action时，就需要使用多个action元素。在实现同样功能的情况下减轻struts.xml配置文件的负担，借助于通配符映射。&lt;/p&gt;
&lt;p&gt;　　使用通配符配置时，&amp;lt;package&amp;gt;元素的内容如下所示;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;User&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;/user&quot;&lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt;=&quot;struts-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;User_Action_*&quot; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.action.UserAction&quot; &lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;=&quot;(1)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意对于result也可以采用通配符。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3  Action访问Servlet API&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　 在struts2中，Action并没有直接和Servlet API进行耦合，也就是说，在Struts2的Action中不能直接访问Servlet API。在实现业务逻辑时，经常要访问Servlet中的对象，如session、request和application等。在struts2中，访问Servlet API有三种方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2.3.1 通过ActionContest类访问&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　ActionContext类访问Servlet API的常用方法：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;19&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;方法声明&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;功能描述&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;void put（String key，Object value）&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;将key-value键值对放入ActionContext中，模拟Servlet API中的HttpServletHttpServletRequest的setAttribute（）方法&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;Object get（String key）&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;通过参数key来查找当前ActionContext中的直&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;Map&amp;lt;String,Object&amp;gt; getApplication()&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回一个Aplication级的Map对象&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;static ActionContext getContext()&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span&gt;获取当前线程的ActionContext对象&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;Map&amp;lt;String,Object&amp;gt; getParameters()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回一个包含所有HttpServletRequest参数信息的Map对象&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;Map&amp;lt;String,Object&amp;gt; getSession()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;返回一个Map类型的HttpSession&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;void setApplication （Map&amp;lt;String,Object&amp;gt;application）&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;设置Application上下文　　&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;void setSession (Map&amp;lt;String,Object&amp;gt;session)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;设置一个Map类型的Session&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2.3.2 通过特定接口访问&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;ServletRequestAware：实现该接口的Action可以直接访问Web应用的HttpServletRequest实例;&lt;/li&gt;
&lt;li&gt;RequestResponseAware：实现该接口的Action可以直接访问Web应用的HttpServletResponse实例;&lt;/li&gt;
&lt;li&gt;SessionAware：实现该接口的Action可以直接访问Web应用的ServletContext实例;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2.3.3 通过ServletActionContext访问&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;static HttpServletRequest getRequest（）：获取Web应用的HttpServletRequest对象;&lt;/li&gt;
&lt;li&gt;static HttpServletResponse getResponse（）：获取Web应用的HttpServletResponse对象;&lt;/li&gt;
&lt;li&gt;static ServletContext getServletContext（）：获取Web应用中的ServletContext对象;&lt;/li&gt;
&lt;li&gt;static PageContext getPageContext（）：获取Web应用中的PageContext对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.4 Result结果类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.4.1 配置Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;在struts.xml文件中进行Result的配置，使用&amp;lt;result&amp;gt;元素来配置Result逻辑视图与无力视图之间的映射，&amp;lt;result&amp;gt;元素可以有name和type属性，但这两种属性都不是必选的;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201711/1194681-20171121110153743-1535164946.png&quot; alt=&quot;&quot; width=&quot;778&quot; height=&quot;387&quot;/&gt;name属性：指定逻辑视图的名称，默认值是success;&lt;/li&gt;
&lt;li&gt;type属性：指定返回的视图资源类型，不同的类型代表不同的结果输出，默认值是dispatcher。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　在Struts,xml文件中的&amp;lt;result&amp;gt;元素配置代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;logiAction&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.action.loginAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;success&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;dispatcher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;location&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/success.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意:&amp;lt;param&amp;gt;子元素的name属性有两个直，分别如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;location：指定该逻辑视图所对应的实际视图资源;&lt;/li&gt;
&lt;li&gt;parse：指定在逻辑视图资源名称中是否可以使用OGNL表达式。默认值为true，表示可以使用，如果设为false，则表示不支持。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上述配置可以简化为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;logiAction&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.action.loginAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/success.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　需要注意的是，在Result中，指定实际资源位置时，可以使用绝对路径，也可以使用相对路径。绝对路径以斜杠（/）开头，例如&amp;lt;result&amp;gt;/success.jsp&amp;lt;result&amp;gt;,相当于当前Web应用程序的上下文路径;相对路径不以斜杠开头，例如&amp;lt;result&amp;gt;success.jsp&amp;lt;/result&amp;gt;,相当于当前执行的Action路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.4.2 预定义的结果类型&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　在struts2中，当框架调用Action对请求进行处理后，就要向用户呈现一个结果视图。在struts2中，预定义了多种ResultType，其实就是定义了多种展示结果技术。&lt;/p&gt;
&lt;p&gt;　　每个&amp;lt;result-type&amp;gt;元素都是一种视图技术或者跳转方式的封装，其中的name属性指出在&amp;lt;result&amp;gt;元素中如何引用这种视图技术或者跳转方式，对应着&amp;lt;result&amp;gt;元素的type属性。struts2中预定义的ResultTyoe如下所示;&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;属性&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;chain&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来处理Action链，被跳转的Action中仍能获取送上个页面的直、如request信息&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来转向页面，通常处理JSP，默认的结果类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;freemarker&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来整合FreeWorker模板结果类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;httpheader&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来处理特殊的HTTP行为结果类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;redirect&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;重定向到一个URL，被跳转的页面中丢失传递的信息&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;redirectAction&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;重定向到一个Action，跳转的页面中丢失传递的信息&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;stream&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;向浏览器发送InputStream对象，通常用来处理文件下载，还可用于Ajax数据&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;velocity&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来整合Velocity木板结果类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;xslt&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来整合XML/ XSLT结果类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;plainText&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;显示原始文件内容，例如文件源代码&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;postback&lt;/span&gt;&lt;/td&gt;
&lt;td&gt; &lt;span&gt;使得当前请求参数以表单形式提交&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　上表列举了Struts2中预定义的全部11种结果类型，其中dispatcher是默认的结果类型，主要用来与JSP整合。在这全部11中结果类型中，dispatcher和redirect是比较常用的结果集。&lt;/p&gt;
&lt;p&gt;　　需要注意的是，&lt;span&gt;&lt;em&gt;&lt;strong&gt;dispatcher结果类型是将请求转发到JSP视图资源，而redirect类型是将请求重定向到JSP视图资源。他们之间最大的差别就是一个是请求转发、一个是请求重定向。&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;如果重定向了请求，那么将丢失所有参数，其中包括Action的处理结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.4.3 dispatcher结果类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;&lt;em&gt;&lt;strong&gt;dispatcher结果类型用来表示“转发”到指定的结果资源，他是struts2的默认结果类型。&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;dispatcher结果类型实现的是org.apache. struts2. dispatcher.ServletDispatcherResult,该类有location和parse两个属性，可以通过struts.xml配置文件中的result元素的param资源书来设置，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;success&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;dispatcher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;location&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/success.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;parse&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述代码中，location参数用于指定Action执行完毕后要转向的目标;parse参数是一个布尔型的直，默认是true，表示解析location参数中的OGNL表达式子，如果是faulse，则不解析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.4.4 redirect结果类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　redirect结果类型用来重定向到指定的结果资源，该资源可以是JSP文件，也可以是Action类。使用redirect结果类型时，系统将调用HttpServletResponse的sendRedirect（）方法将请求重定向到指定的URL。&lt;/p&gt;
&lt;p&gt;　　redirect结果类型实现的类是org.apache.struts2.dispatcher.ServletRedirectResult。在使用redirect时，用户要完成一次和服务器之间的交互，浏览器需要发送两次请求，请求过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1194681/201711/1194681-20171123203145703-517230293.png&quot; alt=&quot;&quot; width=&quot;653&quot; height=&quot;324&quot;/&gt; &lt;/p&gt;
&lt;p&gt;　　使用redirect结果类型的工作过程如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;浏览器发送一个请求，Struts框架调用对应的Action实例对请求进行处理;&lt;/li&gt;
&lt;li&gt;Action返回“success”结果字符串，Struts2框架根据这个结果选择对应的结果类型，这里使用的是redirect结果类型;&lt;/li&gt;
&lt;li&gt;ServletRedirectResult在内部使用HttpServletResponse的sendRedirect（）方法将请求重新定向到目标资源;&lt;/li&gt;
&lt;li&gt;浏览器重新发送一个针对目标资源的新请求;&lt;/li&gt;
&lt;li&gt;目标资源作为响应呈现给用户。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;logiAction&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.itcast.action.loginAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;success&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;redirect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/success.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;error&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;dispatcher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/error.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述配置中，&amp;lt;result&amp;gt;元素使用redirect类型，表示当Action处理请求后重新生成一个请求。&lt;/p&gt;


&lt;p&gt;　&lt;span&gt;&lt;strong&gt;　PS：什么是请求转发和请求重定向，具体区别是什么？（明天补上，同学越去喝酒了，哈哈哈哈哈）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 13:12:00 +0000</pubDate>
<dc:creator>Mairr</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mairr/p/7871538.html</dc:identifier>
</item>
</channel>
</rss>