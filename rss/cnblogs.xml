<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>运用深度学习进行文本生成 - massquantity</title>
<link>http://www.cnblogs.com/massquantity/p/9511694.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/massquantity/p/9511694.html</guid>
<description>&lt;p&gt;AI写诗？？ AI创作小说？？ 近年来人们时常听到这类新闻，听上去很不可思议，那么今天我们来一探究竟，这种功能是如何通过深度学习来实现的。&lt;/p&gt;
&lt;p&gt;通常文本生成的基本策略是借助语言模型，这是一种基于概率的模型，可根据输入数据预测下一个最有可能出现的词，而文本作为一种序列数据 (sequence data)，词与词之间存在上下文关系，所以使用循环神经网络 (RNN) 基本上是标配，这样的模型被称为神经语言模型 (neural language model)。在训练完一个语言模型后，可以输入一段初始文本，让模型生成一个词，把这个词加入到输入文本中，再预测下一个词。这样不断循环就可以生成任意长度的文本了，如下图给定一个句子 ”The cat sat on the m“ 可生成下一个字母 ”a“ ：&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;

&lt;p&gt;上图中语言模型 (language model) 的预测输出其实是字典中所有词的概率分布，而通常会选择生成其中概率最大的那个词。不过图中出现了一个采样策略 (sampling strategy)，这意味着有时候我们可能并不想总是生成概率最大的那个词。设想一个人的行为如果总是严格遵守规律缺乏变化，容易让人觉得乏味；同样一个语言模型若总是按概率最大的生成词，那么就容易变成 XX讲话稿了。&lt;/p&gt;
&lt;p&gt;因此在生成词的过程中引入了采样策略，在最后从概率分布中选择词的过程中引入一定的随机性，这样一些本来不大可能组合在一起的词可能也会被生成，进而生成的文本有时候会变得有趣甚至富有创造性。采样的关键是引入一个temperature参数，用于控制随机性。假设 &lt;span class=&quot;math inline&quot;&gt;\(p(x)\)&lt;/span&gt; 为模型输出的原始分布，则加入 temperature 后的新分布为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ p(x_{new}) = \frac{e^{\,{log(p(x_i))}\,/\,{temperature}}}{\sum\limits_i e^{\,{log(p(x_i))}\,/\,{temperature}}} \tag{1.1} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下图展示了不同的 temperature 分别得到的概率分布。temperature 越大，则新的概率分布越均匀，随机性也就越大，越容易生成一些意想不到的词。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def sample(p, temperature=1.0):  # 定义采样策略
    distribution = np.log(p) / temperature
    distribution = np.exp(distribution)
    return distribution / np.sum(distribution)

p = [0.05, 0.2, 0.1, 0.5, 0.15]

for i, t in zip(range(4), [0.1, 0.4, 0.8, 1.5]):
    plt.subplot(2, 2, i+1)
    plt.bar(np.arange(5), sample(p, t))
    plt.title(&quot;temperature = %s&quot; %t, size=16)
    plt.ylim(0,1)&lt;/code&gt;
&lt;/pre&gt;
&lt;center&gt;

&lt;/center&gt;

&lt;p&gt;本文将试验3种神经网络模型，用的库是Keras：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;One-hot encoding + LSTM&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedding + 双向GRU&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedding + GRU + Conv1D + 反向Conv1D&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;one-hot-encoding-lstm&quot;&gt;One-hot encoding + LSTM&lt;/h2&gt;
&lt;p&gt;这里训练的语料选择了老舍的遗作《正红旗下》。&lt;/p&gt;
&lt;p&gt;首先读取文件，将文本向量化，以每个字为单位分词，最后采用one-hot编码为3维张量。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;whole = open('正红旗下.txt', encoding='utf-8').read()

maxlen = 30  # 序列长度
sentences = []  # 存储提取的句子
next_chars = []  # 存储每个句子的下一个字符（即预测目标）

for i in range(0, len(whole) - maxlen):
    sentences.append(whole[i: i + maxlen])
    next_chars.append(whole[i + maxlen])
print('提取的句子总数:', len(sentences))

chars = sorted(list(set(whole))) # 语料中所有不重复的字符，即字典
char_indices = dict((char, chars.index(char)) for char in chars)

x = np.zeros((len(sentences), maxlen, len(chars)), dtype=np.bool)  # 3维张量（句子数，序列长度，字典长度）
y = np.zeros((len(sentences), len(chars)), dtype=np.bool) # 2维张量 （句子数，字典长度）
for i, sentence in enumerate(sentences):
    for t, char in enumerate(sentence):
        x[i, t, char_indices[char]] = 1.0
    y[i, char_indices[next_chars[i]]] = 1.0&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;先查看下数据的大小：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;print(np.round((sys.getsizeof(x) / 1024 / 1024 / 1024), 2), &quot;GB&quot;)
print(x.shape, y.shape)

# 6.11 GB
# (80095, 30, 2667) (80095, 2667)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;仅仅8万行数据就有 6GB 大小，这是由于使用 one-hot 编码普遍存在的高维稀疏问题。&lt;/p&gt;

&lt;p&gt;接下来搭建神经网络，中间仅用一层LSTM，后接全连接层用softmax输出字典中所有字符的概率：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;model = keras.models.Sequential()
model.add(layers.LSTM(256, input_shape=(maxlen, len(chars))))
model.add(layers.Dense(len(chars), activation='softmax'))

optimizer = keras.optimizers.RMSprop(lr=1e-3)
model.compile(loss='categorical_crossentropy', optimizer=optimizer) 
model.fit(x, y, epochs=100, batch_size=1024, verbose=2)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;训练了100个epoch后，可以开始生成文本了，主要有以下几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将已生成的文本以同样的方式 one-hot 编码，用训练好的模型得出所有字符的概率分布。&lt;/li&gt;
&lt;li&gt;根据给定的 temperature 得到新的概率分布。&lt;/li&gt;
&lt;li&gt;从新的概率分布中抽样得到下一个字符。&lt;/li&gt;
&lt;li&gt;将生成的新字符加到最后，并去掉原文本的第一个字符。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下列函数将原分布加入 temperature 后通过&lt;span class=&quot;math inline&quot;&gt;\((1.1)\)&lt;/span&gt;式转换为新分布，再从新的多项式分布中随机抽样获得最有可能出现的字符索引。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def sample(preds, temperature=1.0):
    if not isinstance(temperature, float) and not isinstance(temperature, int):
        print(&quot;temperature must be a number&quot;)
        raise TypeError
        
    preds = np.asarray(preds).astype('float64')
    preds = np.log(preds) / temperature
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)

    probas = np.random.multinomial(1, preds, 1)
    return np.argmax(probas)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;最后定义一个文本生成函数：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def write(model, temperature, word_num, begin_sentence):
    gg = begin_sentence[:30] # 初始文本
    print(gg, end='/// ')
    for _ in range(word_num):
        sampled = np.zeros((1, maxlen, len(chars)))
        for t, char in enumerate(gg):
            sampled[0, t, char_indices[char]] = 1.0
    
        preds = model.predict(sampled, verbose=0)[0]
        if temperature is None:  # 不加入temperature
            next_word = chars[np.argmax(preds)]
        else:
            next_index = sample(preds, temperature) # 加入temperature后抽样
            next_word = chars[next_index]
            
        gg += next_word
        gg = gg[1:]
        sys.stdout.write(next_word)
        sys.stdout.flush()&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;初始文本是&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;begin_sentence = whole[50003: 50100]
print(begin_sentence[:30])

# 一块的红布腰带来。“有这个，我就饿不着！”说完，他赶紧把小褂&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;不使用 temperature 生成：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;write(model, None, 450, begin_sentence)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;31&quot;&gt;
&lt;p&gt;一块的红布腰带来。“有这个，我就饿不着！”说完，他赶紧把小褂/// 又扣好。&lt;/p&gt;
&lt;p&gt;“可是，叫二毛子看见，叫官兵看见，不就……”“是呀！”十成爽朗地笑了一声。&lt;/p&gt;
&lt;p&gt;“我这不是赶快系好了扣子吗？二哥，你是好人！官兵要都象你，我们就顺利多了！哼，&lt;br/&gt;有朝一日，我们会叫皇上也得低头！”&lt;/p&gt;
&lt;p&gt;“十成，”二哥掏出所有的几吊钱来，“拿着吧，不准不要！”“好！”十成接过 钱&lt;/p&gt;
&lt;p&gt;去。“我数数！记上这笔账！等把洋人全赶走，我回家种地，打了粮食还给你！”他 一边&lt;/p&gt;
&lt;p&gt;说，一边数钱。“四吊八！”他把钱塞在怀里。“再见啦！”他往东走去。二哥赶 上去，&lt;/p&gt;
&lt;p&gt;“你认识路吗？”&lt;/p&gt;
&lt;p&gt;十成指了指德胜门的城楼：“那不是城门？出了城再说！”&lt;/p&gt;
&lt;p&gt;十成不见了，二哥还在那里立着。这里是比较凉爽的地方，有水，有树，有芦苇， 还&lt;/p&gt;
&lt;p&gt;有座不很高的小土山。二哥可是觉得越来越热。他又坐在石头上。越想，越不对，越 怕；&lt;br/&gt;头上又出了汗。不管怎样，一个旗兵不该支持造反的人！他觉得自己一点也不精明， 作了&lt;br/&gt;极大的错事！假若十成被捉住，供出他来，他怎么办？不杀头，也得削除旗籍，发 到新疆&lt;br/&gt;或云南去！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;temperature = 0.5 生成：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;write(model, 0.5, 450, begin_sentence)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;28&quot;&gt;
&lt;p&gt;一块的红布腰带来。“有这个，我就饿不着！”说完，他赶紧把小褂/// 又扣好。&lt;/p&gt;
&lt;p&gt;“可是，叫二毛子看见，叫官兵看见，不就……”“是呀！”十成爽朗地笑了一声。&lt;/p&gt;
&lt;p&gt;“我这不是赶快系好了扣子吗？二哥，你是好人！官兵要都象你，我们就顺利多了！哼，&lt;br/&gt;有朝一日，我们会叫皇上也得低头！”&lt;/p&gt;
&lt;p&gt;“十成，”二哥掏出所有的几吊钱来，“拿着吧，不准不要！”“好！”牛牧师 牧师左晃牧师那么一下，怎么样呢？？在我，不去打听！”十成立了起，往往说了“启真！&lt;/p&gt;
&lt;p&gt;“不忙？”&lt;/p&gt;
&lt;p&gt;“怎么用不着？谁会白给你们老太太！我们这点？”牛牧师也觉得酒下，并且告诉过老妈子：“ 小弟子，什么急忙①来说，三上就一两大没儿！”&lt;/p&gt;
&lt;p&gt;“那，您好！”父亲口中起这个“良心法儿的，而且有点吃好几份儿 吧 吧&lt;/p&gt;
&lt;p&gt;—。他的身前和一二哥要是的土造。那么一风大的那些话亭。父亲高兴兴&lt;br/&gt;来。“你们，就用点了给我压得你们省吃饭，我还没什么都 点不叫&lt;br/&gt;您呀！”“这就是的气好！没有学问！您看见，我还是老白姥姥！我洗看，我是洋人吗？”&lt;/p&gt;
&lt;p&gt;“那不好，我不懂你们老着儿！”我就回去！要说！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不使用 temperature 的文本比较正统，使用 temperature 后随机性大增，行文跳跃，颇有意识流的风范。&lt;/p&gt;
&lt;p&gt;《正红旗下》是老舍的遗作，没写完就投河自尽了，因而篇幅很短。但即使是这样，使用 one-hot 编码后依然维数很高，若使用更大的语料则很容易内存爆炸。所以下文我们使用word embedding将文本映射为低维词向量。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;embedding-双向gru-birdectional-gru&quot;&gt;Embedding + 双向GRU (birdectional GRU)&lt;/h2&gt;
&lt;p&gt;第二个模型与上一个有3个不同点：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;上面这个例子是字符级别 (character-level) 的语言模型，每个句子都以单个字符为单位，这个例子中我们以词组为单位进行训练，所以首先要用 jieba 分词将句子分成词组。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;用词嵌入 (word embedding) 代替one-hot编码，节省内存空间，同时词嵌入可能比 one-hot 更好地表达语义。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;用双向GRU (birdectional GRU) 代替LSTM，双向模型同时利用了正向序列和反向序列的信息，再将二者结合起来，如下图所示：&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;center&gt;

&lt;/center&gt;

&lt;p&gt;训练的语料选择了推理作家东野圭吾的名作《白夜行》。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import jieba

whole = open('白夜行.txt', encoding='utf-8').read()
all_words = list(jieba.cut(whole, cut_all=False))  # jieba分词
words = sorted(list(set(all_words)))
word_indices = dict((word, words.index(word)) for word in words)

maxlen = 30
sentences = []
next_word = []

for i in range(0, len(all_words) - maxlen):
    sentences.append(all_words[i: i + maxlen])
    next_word.append(all_words[i + maxlen])
print('提取的句子总数:', len(sentences))

x = np.zeros((len(sentences), maxlen), dtype='float32') # Embedding的输入是2维张量（句子数，序列长度）
y = np.zeros((len(sentences)), dtype='float32')
for i, sentence in enumerate(sentences):
    for t, word in enumerate(sentence):
        x[i, t] = word_indices[word]
    y[i] = word_indices[next_word[i]]&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;查看数据的大小：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;print(np.round((sys.getsizeof(x) / 1024 / 1024 / 1024), 2), &quot;GB&quot;) 
print(x.shape, y.shape)

0.03 GB
(235805, 30) (235805,)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;23万行数据 0.03 GB，比 one-hot 编码小多了。&lt;/p&gt;

&lt;p&gt;接下来搭建神经网络，中间用两层双向 GRU，后接全连接层用softmax输出所有词组的概率：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;main_input = layers.Input(shape=(maxlen, ), dtype='float32') 
model_1 = layers.Embedding(len(words), 128, input_length=maxlen)(main_input)
model_1 = layers.Bidirectional(layers.GRU(256, return_sequences=True))(model_1)
model_1 = layers.Bidirectional(layers.GRU(128))(model_1)
output = layers.Dense(len(words), activation='softmax')(model_1)  
model = keras.models.Model(main_input, output)

optimizer = keras.optimizers.RMSprop(lr=3e-3)
model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer)
model.fit(x, y, epochs=100, batch_size=1024, verbose=2)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;定义文本生成函数：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;def write_2(model, temperature, word_num):
    gg = begin_sentence[:30]
    print(''.join(gg), end='/// ')
    for _ in range(word_num):
        sampled = np.zeros((1, maxlen)) 
        for t, char in enumerate(gg):
            sampled[0, t] = word_indices[char]
    
        preds = model.predict(sampled, verbose=0)[0]
        if temperature is None:
            next_word = words[np.argmax(preds)]
        else:
            next_index = sample(preds, temperature)
            next_word = words[next_index]
            
        gg.append(next_word)
        gg = gg[1:]
        sys.stdout.write(next_word)
        sys.stdout.flush()&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;初始文本是：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;begin_sentence = whole[50003: 50100]
print(begin_sentence[:30])
begin_sentence = list(jieba.cut(begin_sentence, cut_all=False))

# 且不全力挥杆，先练习击球。
# 最初还有些生涩，但感觉慢慢回来了。打完二十球左右&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;不使用 temperature 生成：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;write_2(model, None, 300, begin_sentence)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;且不全力挥杆，先练习击球。&lt;/p&gt;
&lt;p&gt;最初还有些生涩，但感觉慢慢回来了。打完二十球左右/// ，他便能重新前往那个方向。&lt;br/&gt;然而，这样的可能性又能让她们之间的内容，这是一种感觉资料的。而当他的身世，也难怪他们找不到最主要的机会。&lt;br/&gt;亮司离开了酒店，但这些对他说：“请问你要去找我了？”&lt;br/&gt;“嗯。”她点头，脸上的表情让她更加扭曲。“我这时顶多，又怎么说，虽然要不管我，都会堂兄调查，才会很开心。”&lt;br/&gt;“可是，你却不能必要。而且他经常怀疑你，就叫你提过。”&lt;br/&gt;“可是，我不认识他的身体了。”&lt;br/&gt;“没有，我不想到这里的意思了。”&lt;br/&gt;“嗯，那我把谢谢你的名字。”&lt;br/&gt;“嗯，”江利子用力点头，“那天你才开门。”&lt;br/&gt;“真奇怪，我不会以为你有什么打算？”&lt;br/&gt;“嗯。”听筒里露出这么沉重的笑容，他嘴角。“呃，那时候已经没什么好了。”&lt;br/&gt;“不用了，我不等他，我就跟你说一声。”&lt;br/&gt;“既然这样，我&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;temperature = 0.5 生成：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;write_2(model, 0.5, 300, begin_sentence)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;且不全力挥杆，先练习击球。&lt;/p&gt;
&lt;p&gt;最初还有些生涩，但感觉慢慢回来了。打完二十球左右/// ，他便能重新发现尸体的同时，他也详细又暗，“只说，你在电话里一定有很多电话了吧？”&lt;/p&gt;
&lt;p&gt;“嗯。”友彦点头。&lt;/p&gt;
&lt;p&gt;“请问……她说了在一起吗？”&lt;br/&gt;“嗯。”&lt;br/&gt;“这样啊。”&lt;br/&gt;“哦。”她又对他说了好的，“我是在想，她似乎在别认识笹垣先生。”&lt;br/&gt;她的问题在意味不得而知。他一脸不安地听着你的话，大概就是这样。”&lt;br/&gt;“嗯……”&lt;br/&gt;“嗯。”&lt;br/&gt;“还有一件事。”雪穗。&lt;br/&gt;“我想，既然有这种感觉，我就会认为我没问题。”&lt;br/&gt;“哦。”雪穗露出苦笑，“不过，我很听她，有一次差不多过了锁的地方，不能透露多少次。”&lt;br/&gt;“哦。”&lt;br/&gt;“心里跳舞？哦，这是她的职业！一成先生，你对唐泽雪穗小姐的直觉。”&lt;br/&gt;“是啊。”绘里回答，“那是个……”&lt;br/&gt;“嗯……我想，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中出现了一些奇怪的句子：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;可是，我不认识他的身体了。&lt;/p&gt;
&lt;p&gt;心里跳舞？哦，这是她的职业！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;embedding-gru-conv1d-反向conv1d&quot;&gt;Embedding + GRU + Conv1D + 反向Conv1D&lt;/h2&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;卷积神经网络一般多用于图像领域，主要由于其独特的局部特征提取功能。但人们发现一维卷积神经网络 (Conv1D) 同样适合序列数据的处理，因为其可以提取长序列中的局部信息，这在特定的 NLP 领域 (如机器翻译，自动问答等) 中非常有用。另外值得一提的是相比于用 RNN 处理序列数据，Conv1D的训练要快得多。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;受上个例子中双向模型的启发，这里我也同时使用了正向和反向序列的信息，最后的模型大致是这样：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;这次的训练语料是《西游记》。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;whole = open('西游记.txt', encoding='utf-8').read() 

maxlen = 30 # 正向序列长度
revlen = 20 # 反向序列长度
sentences = []
reverse_sentences = []
next_chars = []

for i in range(maxlen, len(whole) - revlen):
    sentences.append(whole[i - maxlen : i])
    reverse_sentences.append(whole[i + 1 : i + revlen + 1][::-1])
    next_chars.append(whole[i])
print('提取的正向句子总数:', len(sentences))
print('提取的反向句子总数:', len(reverse_sentences))

chars = sorted(list(set(whole)))
char_indices = dict((char, chars.index(char)) for char in chars)

x = np.zeros((len(sentences), maxlen), dtype='float32')
reverse_x = np.zeros((len(reverse_sentences), revlen), dtype='float32')
y = np.zeros((len(sentences),), dtype='float32')
for i, sentence in enumerate(sentences):
    for t, char in enumerate(sentence):
        x[i, t] = char_indices[char]
    y[i] = char_indices[next_chars[i]]
    
for i, reverse_sentence in enumerate(reverse_sentences):
    for t, char in enumerate(reverse_sentence):
        reverse_x[i, t] = char_indices[char]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;建立神经网络模型：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;normal_input = layers.Input(shape=(maxlen,), dtype='float32', name='normal')
model_1 = layers.Embedding(len(chars), 128, input_length=maxlen)(normal_input)
model_1 = layers.GRU(256, return_sequences=True)(model_1)
model_1 = layers.GRU(128)(model_1)

reverse_input = layers.Input(shape=(revlen,), dtype='float32', name='reverse')
model_2 = layers.Embedding(len(chars,), 128, input_length=revlen)(reverse_input)
model_2 = layers.Conv1D(64, 5, activation='relu')(model_2)
model_2 = layers.MaxPooling1D(2)(model_2)
model_2 = layers.Conv1D(32, 3, activation='relu')(model_2)
model_2 = layers.GlobalMaxPooling1D()(model_2)

normal_input_2 = layers.Input(shape=(maxlen,), dtype='float32', name='normal_2')
model_3 = layers.Embedding(len(chars), 128, input_length=maxlen)(normal_input_2)
model_3 = layers.Conv1D(64, 7, activation='relu')(model_3)
model_3 = layers.MaxPooling1D(2)(model_3)
model_3 = layers.Conv1D(32, 5, activation='relu')(model_3)
model_3 = layers.GlobalMaxPooling1D()(model_3)

combine = layers.concatenate([model_1, model_2, model_3], axis=-1)
output = layers.Dense(len(chars), activation='softmax')(combine)
model = keras.models.Model([normal_input, reverse_input, normal_input_2], output)

optimizer = keras.optimizers.RMSprop(lr=1e-3)
model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer)
model.fit({'normal': x, 'reverse': reverse_x, 'normal_2': x}, y, epochs=200, batch_size=1024, verbose=2)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在预测的过程中需要不断在 list 的尾部删除元素，在头部插入元素，因而使用 collections 模块中的 deque 代替 list 进行高效操作：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from collections import deque

def write_3(model, temperature, word_num):
    gg = begin_sentence[:30]
    reverse_gg = deque(begin_sentence[31:51][::-1])
    print(gg, end='/// ')
    for _ in range(word_num):
        sampled = np.zeros((1, maxlen))
        reverse_sampled = np.zeros((1, revlen))
        for t, char in enumerate(gg):
            sampled[0, t] = char_indices[char]
            
        for t, reverse_char in enumerate(reverse_gg):
            reverse_sampled[0, t] = char_indices[reverse_char]
    
        preds = model.predict({'normal': sampled, 'reverse': reverse_sampled, 'normal_2': sampled}, verbose=0)[0]
        if temperature is None:
            next_word = chars[np.argmax(preds)]
        else:
            next_index = sample(preds, temperature)
            next_word = chars[next_index]
            
        reverse_gg.pop()
        reverse_gg.appendleft(gg[0])
        gg += next_word
        gg = gg[1:]
        sys.stdout.write(next_word)
        sys.stdout.flush()&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;初始文本是：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;begin_sentence = whole[70000: 70100]
print(begin_sentence[:30] + &quot; //&quot; + begin_sentence[30] + &quot;// &quot; + begin_sentence[31:51])

# ，命掌生死簿判官：“急取簿子来，看陛下阳寿天禄该有几何？”崔 //判// 官急转司房，将天下万国国王天禄总簿，先逐&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;不使用 temperature 生成：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;write_3(model, None, 500, begin_sentence)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;，命掌生死簿判官：“急取簿子来，看陛下阳寿天禄该有几何？”崔/// 判官急查魂已，遂送出宫门，把腰躬一躬，就入里面，搀着唐僧道：“孩儿，你既问我：如今取得那个是取经的，别处山背上僧人，比那金箍铁棒，就变作一个老魔头儿女。”沙僧道：“既如此，你两个各怀一口，虽然穿这个锦布直裰，一顿钯筑了一个倒身，倒在那洞里，叫：“小的们！”沙僧道：“哥哥，这个小妖，不是好人。”那呆子一个个把他那一般模样，将他一计，喝声叫道：“那里来了！”那怪笑道：“这泼猴真个是甚么人也！你是那里来的？”那呆子一个个咬牙恨道：“这个猴头！你看那：冷笑冷笑，可以叹写罢。”那呆子不敢问他，却又叫道：“小的们！”那呆子真个好生得道：“你这个老人家，自有道理？”那呆子就教他们安排斋供。长老问：“悟空，你这等，这一场合此。”那僧道：“你这个和尚，你坐在那里，等我替你吊在树下，只听得呼呼叫声叫道：“大哥，不要走！”众妖道：“我和你去。”那和尚与二位罗汉，同入洞中，又听得那魔王也不知。”三藏道：“我是大唐圣僧的徒弟。”叫道：“你是那里来的？”那人抬头看时，只听得呼呼风响，果然不是仙家的人。沙僧见了大惊，不敢出头，又问道：“你是何人？你去罢。”那呆子正自家已得知，急转身来了，沙僧挑担，不敢上沙，不敢高叫&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;temperature = 0.5 生成：&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;write_3(model, 0.5, 500, begin_sentence)&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;，命掌生死簿判官：“急取簿子来，看陛下阳寿天禄该有几何？”崔/// 判官随后查爱，捧着锦袈裟，强似英雄模样。这猴王也不敢久停，却将此情上凡胎，怎么得灾还法来却要去降妖杖！”正是那：金火之声道：“大圣不必不敢，等我替你吊弟子去罢。”那呆子脱了手，教他驮过来，果然容易，只听得水响，急忙跪下。大圣闻得此言，即传旨教：“莫忙！莫动！千万千万散火，已死活于通息。”二人闻言，又急云步而坐。那大圣大惊道：&lt;/p&gt;
&lt;p&gt;“悟空，宝宝宝宝宝贝，没甚宝贝，你来这里去的，就是福足矣。”那妖精把行者带了，暗想道：“那呆子也不晓得，若要妇妇，只怕呀，原是黑了孙长老的人，必定是鬼。就是紫！”行者笑道：“呆子！不知道，你还哭个吃食，我们没奈何，我也难得，他若肯来，我却好抛花，必然就打一个甚么？”行者道：“不济！不是！我且不打你，你看他那里坐了？那呆子倒在地下，问我有些儿成精，我也认得是个甚么虚头？”八戒道：“我晓得，虽是不好的，却不是好人？我去化斋口里去罢。”那呆子们心惊甚么道了，定得住道，只叫道：“婆婆婆子，你看那里有甚么人马，那里肯来，我与你讲话哩。”好猴王，他驾起云头，将身一纵，跳上高峰，道：“这厮休胡说！你在那里化斋，你把我们吊在洞里，把我们按一下，把身子抬来，紧紧绳，”妖王大喜，即&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;
&lt;p&gt;通过三个例子，我们看到模型已经能生成一些有意义的句子，但是一旦把几个句子连起来就让人摸不着头脑了，特别是总感觉情节或对话有断层。这个也说得通，这里所做的本质上就是从统计模型中进行抽样，而整本书中一般有很多比较相似的句子，但这些句子的上下文语境并不相同，模型从这些上下文中随机抽取进而生成文本，后面自然就越走越歪了。&lt;/p&gt;
&lt;p&gt;所以基于统计的自然语言理解与我们人类理解语言的方式大相径庭，这意味着模型本身并不理解这些上下文词句是什么意思。不过也正因为此，有时候确实能产生一些意想不到的表达方式，给人以某种“启迪”，所谓的脑回路清奇大概就是这样吧。当然还有一个原因是显而易见的 —— 训练语料的不足，不过这方面的提升首先还是需要电脑硬件的提升。&lt;/p&gt;



&lt;h2 id=&quot;reference&quot;&gt;Reference：&lt;/h2&gt;
&lt;p&gt;/&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 22:57:00 +0000</pubDate>
<dc:creator>massquantity</dc:creator>
<og:description>AI写诗？？ AI创作小说？？ 近年来人们时常听到这类新闻，听上去很不可思议，那么今天我们来一探究竟，这种功能是如何通过深度学习来实现的。 通常文本生成的基本策略是借助语言模型，这是一种基于概率的模型</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/massquantity/p/9511694.html</dc:identifier>
</item>
<item>
<title>我来悟微服务(3)-需求管理 - 从此启程</title>
<link>http://www.cnblogs.com/fancunwei/p/9521316.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9521316.html</guid>
<description>&lt;p&gt;&lt;strong&gt;无限合并&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近工作上接到一个需求模块：关于账号自动合并的问题。简化来讲，手机1和邮箱1是一个账号，手机1和邮箱2请求过来创建账号时，由于手机号相同，自动合并为一个账号。手机3和邮箱2再过来请求创建账号，由于邮箱相同，自动合并为一个账号。手机3和邮箱4过来请求创建账号时，又因为手机号相同，再次合并为一个账号……假如是个访问量很大并且又这么巧的时候，就类似于无限合并了。实际上可能仅会出现几笔，不会这样无限循环下去。但我是一个容易多想的人。账号合并，又关联着和账号相关的数据的迁移，从我个人的角度来说，这样没有边界防御的需求，我内心是拒绝的，但还没想好更好的办法，暂且如此了。&lt;/p&gt;
&lt;p&gt;这个话题联想到微服务，微服务能解决这种问题么？很遗憾，微服务并不是想象中的那么强大。账号合并本质上可以做成一个微服务，但微服务并不能解决这种业务问题。&lt;/p&gt;
&lt;p&gt;我认识的微服务是为了方便水平扩展，方便使用体验异构技术，方便快速试错，方便部署，能最终实现高可用高并发。你了解再多的微服务知识，也不是用于解决此类业务问题。&lt;/p&gt;
&lt;p&gt;对于此类业务问题，一般方式是&lt;strong&gt;判断需求是否合理&lt;/strong&gt;？不合理的需求可以适当拒绝掉。&lt;/p&gt;
&lt;p&gt;再着&lt;strong&gt;看是谁提的&lt;/strong&gt;？如果是普通客户，尽量用其他更简便容易维护的方式代替。如果是金主或上层领导派发需求，那就只能在总结风险的基础上，一步一步往前看吧。&lt;/p&gt;
&lt;p&gt;第三看&lt;strong&gt;需求是否通用，&lt;/strong&gt;通用化的解决方案一般是更易理解，更适合推广。定制化得需求是耗时耗力的。&lt;/p&gt;
&lt;p&gt;第四&lt;strong&gt;判断影响范围，&lt;/strong&gt;如果是个高风险，又耗时又要牵扯很多旧业务，你敢动么？谨慎谨慎再谨慎。&lt;/p&gt;
&lt;p&gt;需求判断阶段完毕，下面说说规避风险&lt;/p&gt;
&lt;p&gt;第一，&lt;strong&gt;清晰的标注需求影响边界&lt;/strong&gt;，改动后要及时单元测试或人工测试。你改的任何一行代码都有可能引发一个隐藏的碧游鸡。&lt;/p&gt;
&lt;p&gt;第二，&lt;strong&gt;不要盲目动刀，一定要分析需求&lt;/strong&gt;。对需求茫然的情况下，盲目码砖，你会很累的。更有甚者，需求本身只是显示了冰山一角，还有广大的未知冰山底层埋藏。如果不能提前发现，你的时间会越来越短，要做的事反而越来越多。这是一种失控。有时候失控是可预知但必须迎难而上的。有时候又可以轻易靠几句话轻易甩锅的。这本来也是一种修炼。&lt;/p&gt;
&lt;p&gt;第三，&lt;strong&gt;人员分配&lt;/strong&gt;。对合作的项目成员要有必要的了解，擅长的人做擅长的事。&lt;/p&gt;
&lt;p&gt;第四，&lt;strong&gt;会议纪要。&lt;/strong&gt;有时候频繁地会议是少不了的，有营养的思路应该记录下来方便实践。有疑问应及时去讨论，不要想当然。想当然是最浪费时间的事情。&lt;/p&gt;
&lt;p&gt;这些事情和微服务无关。但这些功能最终可以称为一个微服务。这可以理解为微服务开发过程如何识别需求，开发需求的思路。&lt;/p&gt;
&lt;p&gt;微服务来源于生活高于生活。&lt;/p&gt;
&lt;p&gt;首发简书:&lt;a href=&quot;https://www.jianshu.com/p/ab4f11fb4e77&quot;&gt;https://www.jianshu.com/p/ab4f11fb4e77&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 16:35:00 +0000</pubDate>
<dc:creator>从此启程</dc:creator>
<og:description>无限合并 最近工作上接到一个需求模块：关于账号自动合并的问题。简化来讲，手机1和邮箱1是一个账号，手机1和邮箱2请求过来创建账号时，由于手机号相同，自动合并为一个账号。手机3和邮箱2再过来请求创建账号</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9521316.html</dc:identifier>
</item>
<item>
<title>Git - git status - 查看当前仓库状态 - Meng.NET</title>
<link>http://www.cnblogs.com/Meng-NET/p/9521278.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Meng-NET/p/9521278.html</guid>
<description>&lt;p&gt;&lt;strong&gt;索引：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/Meng-NET/p/8963476.html&quot; target=&quot;_blank&quot;&gt;商业开发实战总结--lm.solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参看代码 GitHub：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/liumeng0403/lm.solution/blob/master/documents/DeepIn/Command/git.txt&quot; target=&quot;_blank&quot;&gt;git.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; git status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;二、说明:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1.&quot;status&quot; 部分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　该命令可以查出当前分支文件变更状态,&lt;/p&gt;
&lt;p&gt;　　　可以查出 工作区/暂存区/仓储区 中的状态,&lt;/p&gt;
&lt;p&gt;　　　显示出, 新增/删除/(路径)重命名/已暂存 等文件状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2.语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　git status [&amp;lt;options&amp;gt;…​] [--] [&amp;lt;pathspec&amp;gt;…​]&lt;/p&gt;
&lt;p&gt;　　　通常操作不必关心 status 后面的选项,只需在 bash 中敲入 git status 就足够使用了~&lt;/p&gt;



&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　蒙&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　2018-08-23 00:18 周四&lt;/p&gt;

</description>
<pubDate>Wed, 22 Aug 2018 16:20:00 +0000</pubDate>
<dc:creator>Meng.NET</dc:creator>
<og:description>索引： 商业开发实战总结--lm.solution 参看代码 GitHub： git.txt 一、示例： 二、说明: 1.&quot;status&quot; 部分 该命令可以查出当前分支文件变更状态</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Meng-NET/p/9521278.html</dc:identifier>
</item>
<item>
<title>jmeter压力测试报告 - 杭州铁锤</title>
<link>http://www.cnblogs.com/tiechui2015/p/9521221.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiechui2015/p/9521221.html</guid>
<description>&lt;p&gt;XXX压力测试报告&lt;/p&gt;

&lt;p&gt;时间：2015-08-04                                             测试人员：xxx&lt;/p&gt;

&lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;XXX压力测试报告... 1&lt;/p&gt;
&lt;p&gt;一  测试内容... 2&lt;/p&gt;
&lt;p&gt;二  测试方法... 2&lt;/p&gt;
&lt;p&gt;三  测试目标... 2&lt;/p&gt;
&lt;p&gt;四  测试环境... 2&lt;/p&gt;
&lt;p&gt;五  系统部署... 3&lt;/p&gt;
&lt;p&gt;5.1 物理部署... 3&lt;/p&gt;
&lt;p&gt;5.2 网络访问... 3&lt;/p&gt;
&lt;p&gt;六  性能测试结果与分析... 4&lt;/p&gt;
&lt;p&gt;6.1 jmeter集群压测（5进程-每个进行10线程）... 4&lt;/p&gt;
&lt;p&gt;6.2 jmeter集群压测（10进程-每个进行5线程）... 7&lt;/p&gt;
&lt;p&gt;6.3 jmeter集群压测（10进程-每个进行10线程）... 11&lt;/p&gt;
&lt;p&gt;七  结果汇总分析... 13&lt;/p&gt;


















&lt;h2&gt;一  测试内容&lt;/h2&gt;
&lt;p&gt;本次测试是针对xxx系统进行的压力测试，在交易接口中，只对交易接口进行压力测试，其中涵盖数据验签与签名功能。&lt;/p&gt;
&lt;h2&gt;二  测试方法&lt;/h2&gt;
&lt;p&gt;         本次采用apache的开源测试工具jmeter，采用本地动态拼装请求数据并通过http协议post方式发送支付请求。并采用650张测试银行卡测试，其中大概有30张存在“无足够的存款”和“受限制的卡”情况。&lt;/p&gt;
&lt;h2&gt;三  测试目标&lt;/h2&gt;
&lt;p&gt;1)         获取在单机部署情况下最大TPS值&lt;/p&gt;
&lt;p&gt;2)         是否可以达到原来预期值TPS：50&lt;/p&gt;
&lt;h2&gt;四  测试环境&lt;/h2&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;机器型号&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;126&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;硬件cpu&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;硬件mem&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;客户端&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;server2008虚拟机&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;126&quot;&gt;
&lt;p align=&quot;center&quot;&gt;windows&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;32核&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;32G&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;服务端&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;HP DL580&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;126&quot;&gt;
&lt;p align=&quot;center&quot;&gt;linux&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;64核&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;126G&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;由于客户端与服务端的机器性能优秀，暂不会对压测形成瓶颈，该方面影响可以忽略&lt;/p&gt;
&lt;h2&gt;五  系统部署&lt;/h2&gt;
&lt;h3&gt;5.1 物理部署&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025112623333-1882653031.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;h3&gt;5.2 网络访问&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025112801880-921735039.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;h2&gt;六  性能测试结果与分析&lt;/h2&gt;
&lt;h3&gt;6.1 jmeter集群压测（5进程-每个进行10线程）&lt;/h3&gt;
&lt;p&gt;启5个进程，每个进程启动10个线程，并发为50，项目日志开启info状态&lt;/p&gt;
&lt;h4&gt;6.1.1 聚合报告&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;&lt;strong&gt;#Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;90%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;95%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;99%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;&lt;strong&gt;Min&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Max&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;Error%&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;&lt;strong&gt;KB/sec&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;22805&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;547&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;366&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;512&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;636&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5218&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30003&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.26&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;65.3&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;96.5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;33605&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;519&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;362&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;503&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;618&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5200&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30003&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.21&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;66.5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;98.5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;43505&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;536&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;365&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;508&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;621&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5210&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;34899&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.26&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;65.6&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;97.1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;48205&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;527&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;365&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;507&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;618&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5206&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;34899&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.24&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;65.1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;96.3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;49005&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;535&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;364&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;507&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;616&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5211&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;34899&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.27&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;63.9&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;94.5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;49901&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;532&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;364&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;505&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;614&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5207&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;34899&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.27&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;61.0&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;90.2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;531&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;363&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;504&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;613&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5207&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;34899&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.27%&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;60.9&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;90.1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;6.1.2 每秒的响应分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025112853145-748823964.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.1.3 响应时间分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025112947083-465127686.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.1.4 请求失败与成功分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113008802-125385232.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.1.5 结果分析&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;总笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Jmeter&lt;/strong&gt;&lt;strong&gt;错误笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;170&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;请求前置响应超长笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;服务本地处理超长笔数和404&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;135&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;170&quot;&gt;
&lt;p align=&quot;center&quot;&gt;120&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p align=&quot;center&quot;&gt;15&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;&lt;li&gt;在使用jmeter压测请求被F5转发到apache server代理上，由于交易处理过程中处理时间过长造成长时间无响应，代理返回502 Proxy Error错误。&lt;/li&gt;
&lt;li&gt;其中请求前置响应超长笔数在向前置获取结果返回的耗时超过3分钟，其余耗时均低于5s，前置接收到的晚，初步判定网络堵塞&lt;/li&gt;
&lt;li&gt;本地业务处理的错误原因为签名、验签、获取数据及请求时404等&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;6.2 jmeter集群压测（10进程-每个进行5线程）&lt;/h3&gt;
&lt;p&gt;启10个进程，每个进程启动5个线程，并发为50，项目日志开启info状态&lt;/p&gt;
&lt;h4&gt;6.2.1 聚合报告&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;&lt;strong&gt;#Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;90%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;95%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;99%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;&lt;strong&gt;Min&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Max&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;Error%&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;&lt;strong&gt;KB/sec&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;11010&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;555&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;348&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;495&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;605&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5196&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;148&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30003&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.26&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;68.7&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;101.5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;28910&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;507&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;333&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;473&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;568&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5178&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;55&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30015&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.25&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;76.3&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;121.9&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;36310&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;501&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;332&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;475&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;575&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5176&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;55&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30031&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.24&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;77.1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;114.0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;46310&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;485&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;331&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;466&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;557&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5172&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;55&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30031&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.21&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;78.6&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;116.3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;478&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;326&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;460&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;551&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5166&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;55&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;30031&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.21&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;72.1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;106.7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;6.2.2 每秒的响应分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113058130-232394428.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.2.3 响应时间分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113108192-1801781036.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;6.2.4 请求失败与成功分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113121114-1675057546.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;6.2.5 应用系统状态&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113148739-177213412.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.2.6 结果分析&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;总笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Jmeter&lt;/strong&gt;&lt;strong&gt;错误笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;170&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;请求前置响应超长笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;服务本地处理超长笔数和404&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;105&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;170&quot;&gt;
&lt;p align=&quot;center&quot;&gt;92&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p align=&quot;center&quot;&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;1         在使用jmeter压测请求被F5转发到apache server代理上，由于交易处理过程中处理时间过长造成长时间无响应，代理返回502 Proxy Error错误。&lt;/p&gt;
&lt;p&gt;2         其中请求前置响应超长笔数在向前置获取结果返回的耗时超过3分钟，其余耗时均低于5s，前置接收到的晚，初步判定网络堵塞&lt;/p&gt;
&lt;p&gt;3         本地业务处理的错误原因为签名、验签、获取数据及请求时404等&lt;/p&gt;
&lt;h3&gt;6.3 jmeter集群压测（10进程-每个进行10线程）&lt;/h3&gt;
&lt;p&gt;启10个进程，每个进程启动10个线程，并发为100，项目日志开启info状态&lt;/p&gt;
&lt;h4&gt;6.3.1 聚合报告&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;&lt;strong&gt;#Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;90%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;95%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;99%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;&lt;strong&gt;Min&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Max&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;Error%&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;&lt;strong&gt;KB/sec&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1219&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;896&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1665&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;2692&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5808&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;209&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;38306&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.30&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;68.0&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;100.5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;6.3.2 每秒的响应分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113259786-1486604964.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.3.3 响应时间分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113341395-731803839.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.3.4 请求失败与成功分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113354536-349589550.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.3.5 结果分析&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;总笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Jmeter&lt;/strong&gt;&lt;strong&gt;错误笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;170&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;请求前置响应超长笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;服务本地处理超长笔数和404&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;170&quot;&gt;
&lt;p align=&quot;center&quot;&gt;119&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p align=&quot;center&quot;&gt;31&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;1         在使用jmeter压测请求被F5转发到apache server代理上，由于交易处理过程中处理时间过长造成长时间无响应，代理返回502 Proxy Error错误。&lt;/p&gt;
&lt;p&gt;2         其中请求前置响应超长笔数在向前置获取结果返回的耗时超过3分钟，其余耗时均低于5s，前置接收到的晚，初步判定网络堵塞&lt;/p&gt;
&lt;p&gt;3         本地业务处理的错误原因为签名、验签、获取数据及请求时404等&lt;/p&gt;

&lt;h3&gt;6.4 jmeter集群压测（30进程-每个进行5线程）&lt;/h3&gt;
&lt;p&gt;启30个进程，每个进程启动5个线程，并发为150，项目日志开启info状态&lt;/p&gt;
&lt;h4&gt;6.4.1 聚合报告&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;&lt;strong&gt;#Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;90%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;95%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;99%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;&lt;strong&gt;Min&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Max&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;Error%&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;&lt;strong&gt;KB/sec&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;150000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1473&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;1924&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1733&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1959&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;6156&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;222&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;35107&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.21&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;89.5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;132.2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;6.4.2 每秒的响应分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113614786-690717719.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.4.3 响应时间分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113623677-712104410.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;6.4.4 应用系统状态&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113631724-839471523.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.4.5 客户端系统状态&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113639802-1896783013.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.4.6 结果分析&lt;/h4&gt;
&lt;p&gt;暂未统计&lt;/p&gt;
&lt;h3&gt;6.5 jmeter集群压测（20进程-每个进行5线程）&lt;/h3&gt;
&lt;p&gt;启20个进程，每个进程启动5个线程，并发为100，项目日志开启info状态，超时时间2000ms&lt;/p&gt;
&lt;h4&gt;6.5.1 聚合报告&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;&lt;strong&gt;#Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;90%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;95%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;99%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;&lt;strong&gt;Min&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Max&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;Error%&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;&lt;strong&gt;KB/sec&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;200000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;867&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;722&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1073&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1296&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;5674&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;38&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;10053&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.84&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;92.8&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;138.6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;6.5.2 每秒的响应分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113734802-496336863.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.5.3 响应时间分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113742989-2099344155.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.5.4 请求失败与成功分布图&lt;/h4&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/467082/201510/467082-20151025113750442-1293320754.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;6.5.5 结果分析&lt;/h4&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;总笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Jmeter&lt;/strong&gt;&lt;strong&gt;错误笔数&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;92&quot;&gt;
&lt;p align=&quot;center&quot;&gt;100000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;730&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p align=&quot;center&quot;&gt;98.0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;1         由于本地客户端限定2000毫秒不响应就认为失败，所以失败率偏高&lt;/p&gt;

&lt;h2&gt;七  结果汇总分析&lt;/h2&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;66&quot;&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;&lt;strong&gt;#Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;90%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;&lt;strong&gt;95%Line&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;55&quot;&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;并发&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;&lt;strong&gt;Error%&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;&lt;strong&gt;TPS&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;&lt;strong&gt;KB/sec&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;66&quot;&gt;
&lt;p&gt;50并发&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;531&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;363&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;504&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;613&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;55&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;50&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.27%&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;60.9&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;90.1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;66&quot;&gt;
&lt;p&gt;50并发&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;478&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;326&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;460&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;551&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;55&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;50&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.21&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;72.1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;106.7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;66&quot;&gt;
&lt;p&gt;100并发&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;50000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1219&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;896&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1665&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;2692&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;55&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;100&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.30&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;68.0&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;100.5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;66&quot;&gt;
&lt;p&gt;150并发&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;150000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1473&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;1924&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1733&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1959&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;55&quot;&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.21&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;89.5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;132.2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;66&quot;&gt;
&lt;p&gt;100并发&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;76&quot;&gt;
&lt;p&gt;200000&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;867&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;59&quot;&gt;
&lt;p&gt;722&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1073&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;63&quot;&gt;
&lt;p&gt;1296&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;55&quot;&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;100&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;57&quot;&gt;
&lt;p&gt;0.84&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;47&quot;&gt;
&lt;p&gt;92.8&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;68&quot;&gt;
&lt;p&gt;138.6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;使用jmeter压测时，如果使用1个进程开多个线程进行压测，一个进程很难快速处理多个线程，造成本地处理浪费大量时间用于调度，最终压力上不去。&lt;/p&gt;
&lt;p&gt;当采用集群压测时，启用多个进程调度少量线程，解决本地耗时，TPS明显提升。&lt;/p&gt;
&lt;p&gt;在启动10个进程50线程时效果最佳，符合交易每秒钟处理的交易笔数，当提升并发到100时，交易响应时间明显提升。&lt;/p&gt;

&lt;p&gt;压测过程中出现的错误主要有：&lt;/p&gt;
&lt;p&gt;1、  请求资源404错误&lt;/p&gt;
&lt;p&gt;2、  请求前置网络堵塞，每次均为3分钟&lt;/p&gt;
&lt;p&gt;3、  本地签名、验签、获取数据耗时过长&lt;/p&gt;

&lt;p&gt;最终压测结果TPS：90-100时可保证响应时间不超过2s&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755964/201808/755964-20180822235655026-2114111147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 22 Aug 2018 15:57:00 +0000</pubDate>
<dc:creator>杭州铁锤</dc:creator>
<og:description>XXX压力测试报告 时间：2015-08-04 测试人员：xxx 目录 XXX压力测试报告... 1 一 测试内容... 2 二 测试方法... 2 三 测试目标... 2 四 测试环境... 2 五</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiechui2015/p/9521221.html</dc:identifier>
</item>
<item>
<title>值类型、引用类型和泛型的前世今生 - 张先森！</title>
<link>http://www.cnblogs.com/zhangxianshen/p/9521213.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxianshen/p/9521213.html</guid>
<description>&lt;h2&gt;多语言&lt;/h2&gt;
&lt;p&gt;咱们先不说主题，先说说CLR支持多语言。 .net有个非常强大的特点，那就是跨语言，支持很多语言，比如C#、J#等。先来个图看一看&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    C#      J#          VB          等等等

    👇      👇          👇          👇

C#编译器   J#编译器   VB编译器       编译器

    👇      👇          👇          👇

    ---------------------------------

    |           中间语言                |

    ---------------------------------

                👇  

            编译（运行）

                👇

            机器语言
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看到这个图，每个语言都有自己的编译器，通过第一次编译，编译成中间文件（dll或是exe文件）。在程序运行的时候，再次编译把中间文件编译成机器语言。&lt;/p&gt;
&lt;p&gt;但是，CLR支持这么多语言不会出为题么？换句话说是为什么CLR会支持这么多语言?&lt;/p&gt;
&lt;p&gt;就像一个四川人和一个河南人对话，互相的听不懂，但是，他们两个人都说普通话就能交流了。在CLR中，每种语言就相当于各个地方的人们，相互交流困难，但是有了普通话这个规范（CTS（公共语言类型）和CLS（公共语言规范）），就可以说话了。CTS相当于我们普通话的音节，而CLS相当于普通话的约定的语法。这样子呢，就组成了.net大家庭。在CTS中，就是值类型和引用类型&lt;/p&gt;
&lt;h2&gt;进程 线程 内存空间&lt;/h2&gt;
&lt;p&gt;本来想单独整理一下进程和线程的，后来想和堆栈一起简单的说更好&lt;/p&gt;
&lt;p&gt;在一个应用程序中，会分配一个进程和最大4G的内存空间，这个内存空间会分为4个区，全局数据区、代码区、线程堆栈区、托管堆区。&lt;/p&gt;
&lt;p&gt;（线程是程序运行的最小单位，线程之间是隔离的，在Window下，每个程序都会有主进程，分配的内容最大为4G）&lt;/p&gt;
&lt;p&gt;整个项目都是在这个进程运行的。在这个进程中，可能有很多线程，每一个线程都会在栈下分配一个1M的托管堆栈的空间。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;全局数据区：存放着全局变量、静态数据、常量
代码区：存放所有的程序代码
线程堆栈区：存放为运行而分配的局部变量、参数、返回数据、返回地址
托管堆区：自由存储区


--------------------------------------------------------------------------------
|  ----------------------------------------      --------------------          |
|  |   ----      ---       ---      ----  |      |                  |          |
|  |   |线|      |线|      |线|      |线|  |      |                  |          |
|  |   |程|      |程|      |程|      |程|  |      |                  |          |
|  |   |1 |      |2|       |3|      | 3|  |      |    托  管  堆     |          |
|  |   ----      ---       ---      ----  |      |                  |          |
|  |       （线程数量取决于你的代码）        |      |                  |          |
|  |         线   程   堆   栈             |      |                  |          | 
|  ----------------------------------------      --------------------          |
|                                                                              |
|                                                                              |
|  -------------------------------   -----------------------------------       |
|  |                             |   |                                 |       |
|  |     全  局  数  据  区       |   |          代     码      区       |       |
|  |                             |   |                                 |       |
|  |                             |   |                                 |       |
|  -------------------------------   -----------------------------------       |
--------------------------------------------------------------------------------
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;值类型与引用类型&lt;/h2&gt;
&lt;p&gt;C#中，一般情况下值类型存在它申明的地方，引用类型存在托管堆上。值类型转换引用类型叫装箱，引用类型转换值类型叫拆箱&lt;/p&gt;
&lt;h3&gt;值类型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;对于值类型的实例，CLR在运行时有两种分配方式：
(1) 如果该值类型的实例作为类型中的方法(Method)中的局部变量，则该实例被创建在线程栈上；
(2) 如果该值类型的实例作为类型的成员，则该实例作为引用类型(引用类型在GC堆或者LOH上创建)的实例的一部分，被创建在GC堆上
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;引用类型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;对于引用类型的实例，CLR在运行时也有两种分配方式：
(1) 如果该引用类型的实例的Size&amp;lt;85000Byte，则该实例被创建在GC(Garbage Collection)堆上(当CLR在分配和回收对象时，GC可能会对GC堆进行压缩)；
(2) 如果该引用类型的实例的Size&amp;gt;=85000byte，则该实例被创建在LOH(Large Object Heap)上(LOH不会被压缩)。
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说到了这里，铺垫也Ok了，下面有一个题： 在不考虑多线程的条件下，定义了个结构StructObj，里面有int类型的变量x；又定义了一个类ClassObj，里面也有int类型的变量x。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        ClassObj r1 = new ClassObj();//在堆上分配
        StructObj v1 = new StructObj();//在栈上分配
        r1.x = 5;//根据地址找到引用类型,进行修改
        v1.x = 5;//在栈上修改
        ClassObj r2 = r1;//只复制引用
        StructObj v2 = v1;//在栈上分配空间并复制成员
        v2.x = 6;
        r2.x = 6;

        Console.WriteLine(&quot;v2.x=&quot; + v2.x);
        Console.WriteLine(&quot;r2.x=&quot; + r2.x);
        Console.WriteLine(&quot;v1.x=&quot; + v1.x);
        Console.WriteLine(&quot;r1.x=&quot; + r1.x);

        Console.WriteLine(r1.Equals(r2).ToString());
        Console.WriteLine(v1.Equals(v2).ToString());
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在的打印结果是什么？ 答案是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;v2.x=6
r2.x=6
v1.x=5
r1.x=6
True
False 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;来个图理解下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    线程堆栈                托管堆

        r1-------|              
        v1.x=5   |------R=6(r2重新赋值前这个值为5)
        r2-------|
        v2.x=6
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;画的比较抽象，r1是引用类型，r1的值存在声明他的地方，在栈上存的是托管堆的地址，赋值r1.x=5,v1.x=5 再次实例化了，StructObj被存储在了他声明的地方，又在栈上开辟了一个空间存储x=6，r2实例化只是在复制了引用，再次赋值的时候会覆盖原先的5，那么r1.x和r2.x值就会相等，说的明白点就是r1和r2就是一个东西。&lt;/p&gt;
&lt;p&gt;那么r1就会和r2完全相等（值，地址等等） 比较值类型只会比较他们的值是否相等，所以为False&lt;/p&gt;
&lt;p&gt;要是还是看不懂，这还能怪我咯（有本事你来打我）&lt;/p&gt;
&lt;p&gt;突然想到一个有意思的问题：为什么要分值类型个引用类型？&lt;/p&gt;
&lt;p&gt;早在C#出现之前就已经存在了值类型和引用类型。着么说呢，也应该是一种无奈把。在Window下的应用程序，一个应用程序下假设有四个线程，每一个线程都会分配一个1M的空间，那么4个线程就是4M的空间。先来了一个1.2M的包存进去了，又来了一个1.2的包存进了，现在来了个3M的包发现不足了，这 是他不会开辟新的空间，可能释放了一个1.2包还存不进去。这是就有内存碎片产生了。如果把所以的数据都当值类型用，线程堆栈区很快就会满了而且丢出很多内存碎片拖慢服务器速度。那么我将大的数据存在托管堆上，在线程堆栈上保存一个我在托管堆存放数据的地址，而值类型是一些很小的数据，并且是线程运行的时候才能使用的，所以放在了线程堆栈上。而引用类型里面可能有很多东西，数据比较大，就存在了托管堆上&lt;/p&gt;
&lt;p&gt;现在再来谈装箱和拆箱&lt;/p&gt;
&lt;p&gt;装修是将值类型转换成object，再将包装后的对象存储在堆上的一个过程。而拆箱是从object到值类型的转换，先检查对象，确保他是给定值类型的一个装箱值后。将值复制到新的值类型中，释放当前对象 由此看来，不管是装箱还是拆箱，都需要CPU大量的计算&lt;/p&gt;
&lt;h2&gt;数组、ArrayList、泛型&lt;/h2&gt;
&lt;p&gt;数组被大部分语言支持，其优点在于是连续存储的，所以他的索引速度是非常的快，而且赋值与修改元素也很简单，访问速度较快。缺点是数组是定长的，在创建的时候，就需要知道其大小。而且插入数据和删除很费劲。 相对于数组来说，ArrayList解决了数据的问题，可以很灵活的插入数据和删除。由于ArrayList对数据类型并不严格要求，在添加的时候使用object类型来容纳添加的对象，这里会有装箱拆箱的操作，照成了性能的损失。&lt;/p&gt;
&lt;p&gt;为了解决这种问题，微软推出了泛型集合List，如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List&amp;lt;int&amp;gt; list=new List&amp;lt;int&amp;gt;();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，在定义泛型集合的时候已经指定了类型。&lt;/p&gt;
&lt;p&gt;因为泛型指定了类型，所以在存取的时候值限制于限定的类型内。这样就避免看装箱拆箱所消耗的性能问题，又同时提高了安全性&lt;/p&gt;
&lt;p&gt;然后再说说泛型,在这里需要特别说明的是，泛型不能直接的说是值类型还是引用类型，而是指定类型.&lt;/p&gt;
&lt;p&gt;在工作总，常常会遇到泛型的代码，我在操作的时候不需要在乎你是什么类型，你给我传过来是什么类型我就处理什么类型，或是你需要什么类型我给你什么类型。比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Www&amp;lt;T&amp;gt; where T: ClassObjP
{
    public Www()
    {
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里，T表示任意类型，但是，T只是个符号，不是关键字，写A、B、Z等等等等都可以。ClassObjP表示是约定的类，约定制定类的范围（这类以及这个类的儿子），遵循历史替换原则的类（原谅自己表达能力）&lt;/p&gt;
&lt;p&gt;好了，总结的够多了。现在最后在拓展一下&lt;/p&gt;
&lt;h2&gt;协变 逆变&lt;/h2&gt;
&lt;p&gt;上面刚刚在约束里过了一下，也提了下历史替换原则，而在工作中，我们又很小的可能会遇到一些因为没有遵循里氏替换原则的代码而报错，这里就可能用得到协变逆变&lt;/p&gt;
&lt;p&gt;从使用上来说：协变是子类转父类，只能用在输出参数out；逆变是父类转子类，只能用在输入参数&lt;/p&gt;
&lt;p&gt;在用法上呢，可以使用协变，可以使用逆变，也可以协变和逆变辅助使用&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 15:54:00 +0000</pubDate>
<dc:creator>张先森！</dc:creator>
<og:description>值类型、引用类型和泛型 多语言 咱们先不说主题，先说说CLR支持多语言。 .net有个非常强大的特点，那就是跨语言，支持很多语言，比如C#、J#等。先来个图看一看 看到这个图，每个语言都有自己的编译器</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxianshen/p/9521213.html</dc:identifier>
</item>
<item>
<title>小笔记 - Kusion_Lee</title>
<link>http://www.cnblogs.com/smileL/p/9521203.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smileL/p/9521203.html</guid>
<description>&lt;p&gt;动态包含与静态包含的区别：&lt;br/&gt;*include指令：&amp;lt;%@include file=&quot;&quot; %&amp;gt;，静态包含当前页面和被包含的页面，合并后产生一个servlet源码；&lt;br/&gt;*include标签: &amp;lt;jsp:include page=&quot;&quot;&amp;gt;&amp;lt;/jsp:include&amp;gt;，动态包含当前页面和被包含的页面，分别生产servlet源码和字节码，运行由tomcat进行合并输出；&lt;br/&gt;为页面响应设置中文格式：response.setContentType(&quot;text/html;charset=utf-8&quot;);&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 15:52:00 +0000</pubDate>
<dc:creator>Kusion_Lee</dc:creator>
<og:description>动态包含与静态包含的区别：*include指令：&lt;%@include file=&quot;&quot; %&gt;，静态包含当前页面和被包含的页面，合并后产生一个servlet源码；*incl</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smileL/p/9521203.html</dc:identifier>
</item>
<item>
<title>python--Email提醒 - guguobao</title>
<link>http://www.cnblogs.com/guguobao/p/9521201.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guguobao/p/9521201.html</guid>
<description>&lt;h2 id=&quot;发送邮箱的协议是stmppython内置对smtp支持可以发送纯文本邮件html邮件和带附件邮件python对smtp支持有smtplib和email两个模块email负责构造邮件smtplib负责发送邮件&quot;&gt;发送邮箱的协议是STMP，python内置对SMTP支持，可以发送纯文本邮件，HTML邮件和带附件邮件。python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在使用前，先申请一个163邮箱，开启SMTP功能，采用网易的电子邮件服务器smtp.163.com&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;先构造纯文本邮件&quot;&gt;先构造纯文本邮件&lt;/h2&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from email.mime.text import MIMEText
msg = MIMEText('python爬虫运行异常','plain','utf-8')&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;构造MIMEText对象需要3个参数
&lt;ul&gt;&lt;li&gt;邮件正文&lt;/li&gt;
&lt;li&gt;MIME的subtype，传入'plain'表示纯文本，最终的MIME就是“text/plain”&lt;/li&gt;
&lt;li&gt;设置编码格式，UTF-8编码保证多语言兼容性&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;下面是完整的代码&quot;&gt;下面是完整的代码&lt;/h2&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;#coding:utf-8
from email.header import Header
from email.mime.text import MIMEText
from email.utils import parseaddr, formataddr

import smtplib

def _format_addr(s):
    name, addr = parseaddr(s)
    return formataddr((Header(name, 'utf-8').encode(), addr))
#发件人地址
from_addr = 'xxxxxxxx@163.com'
#邮箱密码
password = 'pass'
#收件人地址
to_addr = 'xxxxxxxx@qq.com'
#163网易邮箱服务器地址
smtp_server = 'smtp.163.com'
#设置邮件信息
msg = MIMEText('Python爬虫运行异常，异常信息为遇到HTTP 403', 'plain', 'utf-8')
msg['From'] = _format_addr('一号爬虫 &amp;lt;%s&amp;gt;' % from_addr)
msg['To'] = _format_addr('管理员 &amp;lt;%s&amp;gt;' % to_addr)
msg['Subject'] = Header('一号爬虫运行状态', 'utf-8').encode()
#发送邮件
server = smtplib.SMTP(smtp_server, 25)
server.login(from_addr, password)
server.sendmail(from_addr, [to_addr], msg.as_string())
server.quit()&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 22 Aug 2018 15:51:00 +0000</pubDate>
<dc:creator>guguobao</dc:creator>
<og:description>发送邮箱的协议是STMP，python内置对SMTP支持，可以发送纯文本邮件，HTML邮件和带附件邮件。python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtp</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guguobao/p/9521201.html</dc:identifier>
</item>
<item>
<title>Linux MySQL 8.0 忘记密码 - itabel</title>
<link>http://www.cnblogs.com/it-abel/p/9521186.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/it-abel/p/9521186.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;不小忘了MySQL的密码，按照书上和网上的内容都没能修改成功，终于在借鉴了多篇文章成功之后找到原因，修改密码成功，特此分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;修改-mysql-密码&quot;&gt;修改 MySQL 密码&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;第一步：关闭 MySQL 进程&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;systemctl stop mysqld
service mysqld stop
/etc/init.d/mysql stop
kill PID
#以选一个方法即可&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;第二步：配置 /etc/my.cnf 跳过权限表认证直接登录&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# 在【mysqld】模块添加：skip-grant-tables   保存退出
[mysqld]
skip-grant-table&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;第三步：重启 MySQL 服务，登录进入&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;systemctl start mysqld
service mysqld start
/etc/init.d/mysql start
#以上选一个方法即可&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;第四步：刷新权限表，使得权限认证重新生效&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;flush privileges&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;注意网上很多文章都没有该步骤这样是不正确的会报错的如下图&quot;&gt;注意：网上很多文章都没有该步骤，这样是不正确的，会报错的，如下图：&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://www.itlyb.com/uploads/markdown/20180822-233637-711.png&quot;/&gt;&lt;br/&gt;正确应该如下图（新版 MySQL 密码需要设置复杂一些至少8位）：&lt;br/&gt;&lt;img src=&quot;http://www.itlyb.com/uploads/markdown/20180822-233409-346.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;最后：不要忘了把 /etc/my.cnf 修改回来，重启&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 22 Aug 2018 15:43:00 +0000</pubDate>
<dc:creator>itabel</dc:creator>
<og:description>不小忘了MySQL的密码，按照书上和网上的内容都没能修改成功，终于在借鉴了多篇文章成功之后找到原因，修改密码成功，特此分享</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/it-abel/p/9521186.html</dc:identifier>
</item>
<item>
<title>MySQL之数据库基本操作 - xiezh</title>
<link>http://www.cnblogs.com/xiezh-it/p/9521134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiezh-it/p/9521134.html</guid>
<description>&lt;h2&gt;&lt;span&gt;一、创建数据库&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MySQL中创建数据库的SQL语法格式为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
&lt;span&gt;CREATE DATABASE 数据库名;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中，数据库名不能与已经存在的数据库同名。下图创建数据库test_db：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1462578/201808/1462578-20180822232548673-303306669.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以通过使用以下语句查看数据库的定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
&lt;span&gt;SHOW CREATE DATABASE 数据库名(\G);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中，“\G”表示格式化输出，可加可不加。如下图所示： &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1462578/201808/1462578-20180822232630223-1942312151.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以使用以下如何查看当前所有存在的数据库：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
&lt;span&gt;SHOW DATABASES;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1462578/201808/1462578-20180822232712754-92178596.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二、删除数据库&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MySQL中删除数据库的SQL语法格式为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
&lt;span&gt;DROP DATABASE 数据库名;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如下图所示，将test_db数据库删除： &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1462578/201808/1462578-20180822232756342-1844079819.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将数据库删除之后，再查看该数据库的定义，则会报错：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1462578/201808/1462578-20180822232811861-1104983916.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;备注：&lt;/strong&gt;&lt;/span&gt;注意在使用删除数据库命令时要谨慎，因为在执行该命令时MySQL不会给出任何提醒确认信息，删除数据库之后，数据库中存储的所有数据表和数据都将一同被删除，并且无法恢复。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 15:30:00 +0000</pubDate>
<dc:creator>xiezh</dc:creator>
<og:description>一、创建数据库 MySQL中创建数据库的SQL语法格式为： 其中，数据库名不能与已经存在的数据库同名。下图创建数据库test_db： 可以通过使用以下语句查看数据库的定义： 其中，“\G”表示格式化输</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiezh-it/p/9521134.html</dc:identifier>
</item>
<item>
<title>知识碎片 - 木言成反</title>
<link>http://www.cnblogs.com/muyanchengfan/p/9521097.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/muyanchengfan/p/9521097.html</guid>
<description>&lt;p&gt;这部分内容没有固定主题，不定期更新，都是些零碎的，我觉得有必要记一笔的知识。希望能对其他人也有所帮助。&lt;/p&gt;

&lt;h2 id=&quot;sklearn.feature_selection-里的-f_regression&quot;&gt;sklearn.feature_selection 里的 F_regression&lt;/h2&gt;
&lt;p&gt;特征选择方法众多，sklearn 的特征选择模块里给出了几种非常简易高效的方法。针对回归问题，sklearn 给出了两种方法，其中一种是 F_regression 引起了我的注意。F_regression 在 sklearn 里只有寥寥几句的介绍，好在源码简短易读。之前搜了搜网上其它对这个函数的解读，要么解释不全，要么干脆是错的，所以我就在这里详细讲讲。&lt;/p&gt;

&lt;p&gt;先放源码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1431650/201808/1431650-20180822225704674-1559724031.png&quot; width=&quot;500&quot; height=&quot;500&quot; alt=&quot;图片名称&quot; align=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;F_regression 在干什么？一句话就能讲清楚：每个特征 X 单独拎出来和 Y 计算相关系数，并排序。特征选择就是基于 X 和 Y 的相关程度。&lt;/p&gt;
&lt;p&gt;当然实际操作还是分了三步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;计算相关系数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转化为 F score；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算 p 值；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后排名是根据 F score，可以选择输出 p 值。&lt;/p&gt;
&lt;p&gt;一步一步讲。相关系数最不用谈，就是 Y 与 X 线性关系的度量。计算完相关系数还不够，这里的相关系数严格来说是样本相关系数，如何从样本推论到总体呢？这就需要做假设检验，对未知参数提出某种假设，利用样本提供的信息对提出的假设进行检验，根据检验结果对提出的假设做出拒绝或接受的判断。参照线性回归的假设检验形式，在此我们提出的假设（零假设）为 X 与 Y 不存在线性关系，即 &lt;span class=&quot;math inline&quot;&gt;\(\beta = 0\)&lt;/span&gt;。提出零假设后，我们需要去计算 p 值，p 值即零假设成立的情况下所得到的样本观察结果或更极端结果出现的概率。如果 p 值足够小，我们就能拒绝零假设，从而认为 X 与 Y 存在线性关系。&lt;/p&gt;
&lt;p&gt;注意到相关系数和 R 平方的关系，两者在简单线性回归，即只有一个变量的情形下是等价的。&lt;/p&gt;
&lt;p&gt;这种方法的缺陷一目了然，就是完全忽略了其它特征的影响，实际用的时候还需谨慎。我一般会参照 p 值，设定一个显著性水平，低于显著性水平的特征全部舍弃。或者舍弃排名最靠后的，而不是取排名靠前的。&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 15:21:00 +0000</pubDate>
<dc:creator>木言成反</dc:creator>
<og:description>这部分内容没有固定主题，不定期更新，都是些零碎的，我觉得有必要记一笔的知识。希望能对其他人也有所帮助。   sklearn.feature_selection 里的 F_regression</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/muyanchengfan/p/9521097.html</dc:identifier>
</item>
</channel>
</rss>