<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Docker搭建 MySQL 主从复制 - 掸尘</title>
<link>http://www.cnblogs.com/liuzhang/p/9299336.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuzhang/p/9299336.html</guid>
<description>&lt;h2&gt;  为什么选 Docker&lt;/h2&gt;
&lt;p&gt;搭建主从复制需要两个以上的MySQL， 使用 Docker 非常方便。如果以前没用过，找个简单的文档看看，熟悉一下命令。&lt;/p&gt;
&lt;h2&gt;  搭建过程&lt;/h2&gt;
&lt;h3&gt;1.下载镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker pull mysql:&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.创建服务器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
docker run --name mysql_master -p &lt;span&gt;3310&lt;/span&gt;:&lt;span&gt;3306&lt;/span&gt; -e MYSQL_ROOT_PASSWORD=&lt;span&gt;123456&lt;/span&gt; -d mysql:&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;21&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过镜像 mysql:5.7.21 启动一个名为 mysql_master 的 MySQL 服务器，端口号是3306，映射的宿主机端口号是3310，root 账号密码是123456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.创建Slave服务器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run --name mysql_slave  -p &lt;span&gt;3311&lt;/span&gt;:&lt;span&gt;3306&lt;/span&gt; -e MYSQL_ROOT_PASSWORD=&lt;span&gt;123456&lt;/span&gt; -d mysql:&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 docker container ls -a  可以看到创建成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
d2298154e6d4        mysql:&lt;/span&gt;&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;21&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docker-entrypoint.s…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;2&lt;/span&gt; hours          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;3311&lt;/span&gt;-&amp;gt;&lt;span&gt;3306&lt;/span&gt;/&lt;span&gt;tcp   mysql_slave
b8d7e74b2d31        mysql:&lt;/span&gt;&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;21&lt;/span&gt;        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docker-entrypoint.s…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up About an hour    &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;3310&lt;/span&gt;-&amp;gt;&lt;span&gt;3306&lt;/span&gt;/tcp   mysql_master
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4.查看IP&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker inspect --format=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{.NetworkSettings.IPAddress}}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; b8d
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;172.17.0.2&lt;/span&gt;&lt;span&gt;
docker inspect &lt;/span&gt;--format=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{{.NetworkSettings.IPAddress}}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; d22
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;172.17.0.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;master IP : 172.17.0.2&lt;/p&gt;
&lt;p&gt;slave   IP : 172.17.0.3 &lt;/p&gt;
&lt;h2&gt;  MySQL 配置&lt;/h2&gt;
&lt;h3&gt;1. Master 配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进入Master服务器&lt;/span&gt;
docker exec -it b8d /bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进的入配置&lt;/span&gt;
cd /etc/&lt;span&gt;mysql
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改配置文件--my.cnf增加下面两行&lt;/span&gt;
server_id=&lt;span&gt;100&lt;/span&gt;&lt;span&gt; 
log&lt;/span&gt;-bin=mysql-&lt;span&gt;bin
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置完成后重启&lt;/span&gt;
&lt;span&gt;service mysql restart
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果容器停止了，要从新启动进入，docker container start b8d
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;再次进入容器&lt;/span&gt;
mysql -uroot -&lt;span&gt;p
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行下面命令进行复制授权&lt;/span&gt;
CREATE USER &lt;span&gt;'&lt;/span&gt;&lt;span&gt;slave&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'&lt;/span&gt;&lt;span&gt;12345678&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON &lt;/span&gt;*.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;slave&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查命令&lt;/span&gt;
&lt;span&gt;show master status;

&lt;/span&gt;+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.&lt;span&gt;000002&lt;/span&gt; |     370 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

&lt;/span&gt;&lt;span&gt;//F&lt;/span&gt;&lt;span&gt;ile Position 两个数据后面配置 Slave 会用到。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. Slave 配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进入Slave 容器&lt;/span&gt;
docker exec -it d22  /bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置mysql，增加下面&lt;/span&gt;
server_id=&lt;span&gt;101&lt;/span&gt;&lt;span&gt;
log&lt;/span&gt;-bin=mysql-&lt;span&gt;bin
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重启进入执行&lt;/span&gt;
change master to master_host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;172.17.0.2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;slave&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;12345678&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_port=&lt;span&gt;3306&lt;/span&gt;, master_log_file=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000002&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, master_log_pos=&lt;span&gt;370&lt;/span&gt;, master_connect_retry=&lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动&lt;/span&gt;
&lt;span&gt;start slave;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查看主从同步状态&lt;/span&gt;
&lt;span&gt;show slave status \G;

&lt;/span&gt;*************************** &lt;span&gt;1&lt;/span&gt;. row ***************************&lt;span&gt;
               Slave_IO_State: Waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; master to send event
                  Master_Host: &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;
                  Master_User: slave
                  Master_Port: &lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
                Connect_Retry: &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
              Master_Log_File: mysql&lt;/span&gt;-bin.&lt;span&gt;000002&lt;/span&gt;&lt;span&gt;
          Read_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;370&lt;/span&gt;&lt;span&gt;
               Relay_Log_File: d2298154e6d4&lt;/span&gt;-relay-bin.&lt;span&gt;000002&lt;/span&gt;&lt;span&gt;
                Relay_Log_Pos: &lt;/span&gt;&lt;span&gt;320&lt;/span&gt;&lt;span&gt;
        Relay_Master_Log_File: mysql&lt;/span&gt;-bin.&lt;span&gt;000002&lt;/span&gt;&lt;span&gt;
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                   Last_Error: 
                 Skip_Counter: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
          Exec_Master_Log_Pos: &lt;/span&gt;&lt;span&gt;370&lt;/span&gt;&lt;span&gt;
              Relay_Log_Space: &lt;/span&gt;&lt;span&gt;534&lt;/span&gt;&lt;span&gt;
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                Last_IO_Error: 
               Last_SQL_Errno: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
                  Master_UUID: 2cf67843&lt;/span&gt;-&lt;span&gt;8583&lt;/span&gt;-11e8-bfa5-&lt;span&gt;0242ac110002
             Master_Info_File: &lt;/span&gt;/var/lib/mysql/master.&lt;span&gt;info&lt;/span&gt;&lt;span&gt;
                    SQL_Delay: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Slave has read all relay log; waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;more&lt;/span&gt;&lt;span&gt; updates
           Master_Retry_Count: &lt;/span&gt;&lt;span&gt;86400&lt;/span&gt;&lt;span&gt;
                  Master_Bind: 
      Last_IO_Error_Timestamp: 
     Last_SQL_Error_Timestamp: 
               Master_SSL_Crl: 
           Master_SSL_Crlpath: 
           Retrieved_Gtid_Set: 
            Executed_Gtid_Set: 
                Auto_Position: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
         Replicate_Rewrite_DB: 
                 Channel_Name: 
           Master_TLS_Version: 
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slave_IO_Running: Yes 和 Slave_SQL_Running: Yes  表明配置成功。 &lt;span&gt;&lt;strong&gt;配置 master_log_file='mysql-bin.000002',  master_log_pos=370, 这两个参数要注意 和 show&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;master status 输出的值保持一致&lt;/strong&gt;&lt;/span&gt;，不然会出现同步错误。 &lt;/p&gt;
</description>
<pubDate>Thu, 12 Jul 2018 07:34:00 +0000</pubDate>
<dc:creator>掸尘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuzhang/p/9299336.html</dc:identifier>
</item>
<item>
<title>【RL-TCPnet网络教程】第3章  初学RL-TCPnet的准备工作及其快速上手 - 席萌0209</title>
<link>http://www.cnblogs.com/armfly/p/9299707.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/armfly/p/9299707.html</guid>
<description>&lt;p&gt;&lt;span&gt;俗话说万事开头难，学习一门新的知识，难的往往不是知识本身，而是如何快速上手，需要什么资料和开发环境。一旦上手后，深入的学习就相对容易些了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本章节就起到这样的作用，主要说明初学RL-TCPnet需要做的准备工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1  初学者重要提示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.2  开发环境说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.3  配套例子重要说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.4  RL-TCPnet参考资料&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.5  RL-TCPnet调试方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.6  总结&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;3.1   初学者重要提示&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、学习本网络教程，大家没有任何网络基础也没有关系，因为本教程以实战为主。更深入的网络协议知识，需要大家专门去学习，特别推荐书籍《TCP/IP详解》。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、网络教程涉及到的实战操作比较多，大家初学一定不要嫌麻烦，其实首次实现电脑端和开发板之间的通信，还是非常兴奋的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、本教程配套的所有例子都使能了DHCP，所以强烈推荐将网线接到路由器或者交换机上面测试，可以自动获取IP地址。如果需要固定IP进行测试，学习第57章即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、本教程配套的大部分例子都是裸机，uCOS-III，RTX和FreeRTOS四个版本。针对这三款操作系统，我们都有教程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）FreeRTOS教程：&lt;a href=&quot;http://bbs.armfly.com/read.php?tid=17658&quot;&gt;http://bbs.armfly.com/read.php?tid=17658&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）RTX教程：&lt;a href=&quot;http://bbs.armfly.com/read.php?tid=14837&quot;&gt;http://bbs.armfly.com/read.php?tid=14837&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）uCOS-III教程：&lt;a href=&quot;http://bbs.armfly.com/read.php?tid=1788&quot;&gt;http://bbs.armfly.com/read.php?tid=1788&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（对于uCOS-III教程，后面还会出完整版）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、教程中仅对裸机和RTX操作系统的例子进行了说明，FreeRTOS和uCOS-III两个版本的例子跟RTX基本是一样的，所以教程中不再赘述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后还是强调一点，搞网络教程，一定要多多实战，实际动手操作，实战才是学好网络教程的最佳途径。另外，初学时不要一上来就研究RL-TCPnet的底层驱动接口，容易影响初学的积极性，搞得后面越来越没有兴趣去研究了。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.2   开发环境说明&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、IDE：MDK4.7X或者MDK5.XX。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、调试器使用JLINK，ULINK或者STLINK均可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、配套开发板是安富莱的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）STM32-V5开发板，MCU是STM32F407IGT6。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）STM32-V6开发板，MCU是STM32F429BIT6。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.3  配套例子重要说明&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、对于教程配套的RTX操作系统例子，请务必使用MDK4.74，原因如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）每个MDK的安装目录里面都会有一个RTX源码，对于MDK4.XX来说，大家使用的哪个MDK版本，务必使用哪个MDK版本下面的RTX，这样使用MDK自带的RTX调试组件时，才能显示正确的调试信息。本教程配套例子的RTX源码是来自MDK4.74，所以务必使用MDK4.74。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）对于MDK5.XX，RTX也在其安装目录里面，但是RTX已经不作为单独版本发布了，它有一个全新的名字叫CMSIS-RTOS RTX。ARM官方在RTX的基础上给RTX又做了一层封装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、裸机，uCOS-III和FreeRTOS三个版本的例子，不限制，只要支持F407和F429即可，所以推荐使用MDK4.7X或者MDK5.XX版本即可。另外特别注意一下，KEIL官方最近一次升级的MDK5.24a不支持MDK4.XX创建的工程转换成MDK5了，详情看此贴：&lt;a href=&quot;http://bbs.armfly.com/read.php?tid=32100&quot;&gt;http://bbs.armfly.com/read.php?tid=32100&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不知道KEIL以后发布的新版本是否也不再支持了。因此，如果喜欢用最新版本的MDK5，需要给MDK5安装MDK4的兼容包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总的来说，强力推荐大家使用MDK4.74，防止不必要的麻烦。大家的电脑中可以安装多个MDK版本的，而且互不影响，只要将其安装在不同的安装目录即可。比如我这里，在C盘中安装了三个版本：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180712153208672-837499078.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MDK4.74的下载地址：&lt;a href=&quot;http://bbs.armfly.com/read.php?tid=2972&quot;&gt;http://bbs.armfly.com/read.php?tid=2972&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.4  RL-TCPnet参考资料&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;学习RL-TCPnet主要有两个可以参考的资料：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）KEIL MDK安装目录里面的rlarm.chm文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）KEIL官网上在线查看。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然，两者的内容是一样的。其实不光RTX操作系统是这样，像FreeRTOS和uCOS现在也是这种形式，一个离线方式的电子手册和一个在线的手册。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;rlarm.chm文件在MDK4.74的安装目录C:\Keil_v474\ARM\Hlp里面，打开后的效果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180712153218049-43574002.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官网的在线手册地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.keil.com/support/man/docs/rlarm/rlarm_tn_tcpip_prot.htm&quot;&gt;http://www.keil.com/support/man/docs/rlarm/rlarm_tn_tcpip_prot.htm&lt;/a&gt; ，打开后的效果（部分截图）：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180712153227689-529526508.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;等RL-TCPnet入门后，主要看这两个手册即可，基本可以解决大部分问题。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.5  RL-TCPnet的调试方法&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;针对RL-TCPnet的调试方法，在本教程的第11章专门进行了讲解。初学时，可以优先看下。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.6  总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本章节就为大家讲解这么多，建议初学者花些时间对RL-TCPnet手册的章节结构了解一下，随着以后的学习最好可以达到熟练查看这个手册的程度。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Jul 2018 07:33:00 +0000</pubDate>
<dc:creator>席萌0209</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/armfly/p/9299707.html</dc:identifier>
</item>
<item>
<title>Nginx与Tomcat实现请求动态数据与请求静态资源的分离 - 左羽</title>
<link>http://www.cnblogs.com/1214804270hacker/p/9299462.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1214804270hacker/p/9299462.html</guid>
<description>&lt;p&gt;　　&lt;span&gt;上篇博客说明了Nginx在应用架构中的作用，以及负载均衡的思路。这篇实践一下其中的访问静态资源与访问动态资源的操作。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;一、认识访问静态资源与访问动态资源的区别&lt;/h2&gt;
&lt;h3&gt;　　静态资源：指存储在硬盘内的数据，固定的数据，不需要计算的数据。&lt;/h3&gt;
&lt;p&gt;　　如：图片、字体、js文件、css文件等等。在用户访问静态资源时，服务器会直接将这些资源返回到用户的计算机内。&lt;/p&gt;

&lt;h3&gt;　　动态资源：指需要服务器根据用户的操作所返回的数据，以及存储在数据库的数据，经过一系列逻辑计算后返回的数据。&lt;/h3&gt;
&lt;p&gt;　　如：请求明天的天气信息数据、请求查看账户余额。&lt;/p&gt;

&lt;h2&gt;二、请求动态数据与请求静态资源的分离的必要性&lt;/h2&gt;
&lt;p&gt;　　Tomcat应用服务器是用来处理Servlet容器和JSP的，虽然它也可以处理HTML等等一系列静态资源，但是效率不如Nginx；而且对Servlet容器和JSP的运算已经有很大压力了，如果不分离会导致大量的性能浪费。说到底，在应用服务方面，要遵循一条原则——一个服务只做一件事。要做动态请求就专做动态请求，要做静态请求就专做静态请求，这样才能提高性能。&lt;/p&gt;

&lt;p&gt;　　我们要做的，就是当用户访问静态资源时，让Nginx将静态资源返回给用户；当用户访问动态资源时，将访问转到Tomcat应用服务器上，Tomcat将数据返回给Nginx，Nginx再返回给用户。&lt;/p&gt;
&lt;h2&gt;三、Nginx配置方法&lt;/h2&gt;
&lt;p&gt;　　在这里，对于Nginx的配置文件内的各项参数说明不多讲解，如需了解Nginx配置文件移步&lt;a href=&quot;http://www.nginx.cn/76.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　不知道配置文件位置的，一条指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;find&lt;/span&gt; / -name nginx.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要善于利用Linux指令，这样就会无法自拔的爱上Linux；&lt;/p&gt;
&lt;p&gt;　　先来一个全部配置：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;# user www www;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;user root root;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; worker_processes &lt;span&gt;2&lt;/span&gt;&lt;span&gt;; #设置值和CPU核心数一致
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; error_log /home/zuoyu/ServerComputer/nginx/logs/&lt;span&gt;nginx_error.log crit; #日志位置和日志级别
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; pid /home/zuoyu/ServerComputer/nginx/&lt;span&gt;nginx.pid;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; worker_rlimit_nofile &lt;span&gt;65535&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;events {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    #使用epoll模型提高性能
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;    use epoll;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;    #单个进程最大连接数
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     worker_connections &lt;span&gt;65535&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;http {
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;    #扩展名与文件类型映射表
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;    include       mime.types;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    #默认类型
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     default_type  application/octet-&lt;span&gt;stream;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt;     log_format  main  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;                       &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;                       &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    client_header_buffer_size 32k;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;     large_client_header_buffers &lt;span&gt;4&lt;/span&gt;&lt;span&gt; 32k;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;    client_max_body_size 8m;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     types_hash_max_size &lt;span&gt;2048&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     types_hash_bucket_size &lt;span&gt;128&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;      
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    sendfile on;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    tcp_nopush on;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     keepalive_timeout &lt;span&gt;60&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;    tcp_nodelay on;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     fastcgi_connect_timeout &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     fastcgi_send_timeout &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     fastcgi_read_timeout &lt;span&gt;300&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    fastcgi_buffer_size 64k;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     fastcgi_buffers &lt;span&gt;4&lt;/span&gt;&lt;span&gt; 64k;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    fastcgi_busy_buffers_size 128k;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    fastcgi_temp_file_write_size 128k;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    # 解压缩传输
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;gzip&lt;/span&gt;&lt;span&gt; on; 
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;    gzip_min_length 1k;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     gzip_buffers &lt;span&gt;4&lt;/span&gt;&lt;span&gt; 16k;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;     gzip_http_version &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     gzip_comp_level &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     gzip_types text/plain application/x-javascript text/css application/&lt;span&gt;xml;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;    gzip_vary on;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    #负载均衡组
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;    #静态服务器组
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;    upstream static.zuoyu.com {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         server localhost:&lt;span&gt;81&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    #动态服务器组
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    upstream dynamic.zuoyu.com {
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         server localhost:&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         # server localhost:&lt;span&gt;8081&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         # server localhost:&lt;span&gt;8082&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         # server localhost:&lt;span&gt;8083&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;    #配置代理参数
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;    proxy_redirect off;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    proxy_set_header HOST $host;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;     proxy_set_header X-Real-&lt;span&gt;IP $remote_addr;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;     proxy_set_header X-Forwarded-&lt;span&gt;For $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;    # client_max_body_size 10m;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    client_body_buffer_size 128k;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     proxy_connect_timeout &lt;span&gt;90&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     proxy_send_timeout &lt;span&gt;90&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;     proxy_read_timeout &lt;span&gt;90&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    proxy_buffer_size 16k;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;     proxy_buffers &lt;span&gt;4&lt;/span&gt;&lt;span&gt; 32k;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    proxy_busy_buffers_size 64k;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;    proxy_temp_file_write_size 64k;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;     
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    #缓存配置
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;     proxy_cache_key &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$host:$server_port$request_uri&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;    # proxy_temp_file_write_size 64k;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;     proxy_temp_path /home/zuoyu/ServerComputer/nginx/&lt;span&gt;proxy_temp_path;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     proxy_cache_path /home/zuoyu/ServerComputer/nginx/proxy_cache_path levels=&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt; keys_zone=cache_one:200m inactive=5d max_size=&lt;span&gt;1g;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-&lt;span&gt;Cookie;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt;     #静态资源主机
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    server {
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         listen &lt;span&gt;81&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        server_name localhost_0;
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        charset utf8;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             root /home/zuoyu/Public/NginxStaticSource/&lt;span&gt;static;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;    # 下面是server虚拟主机的配置
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    server {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         listen &lt;span&gt;80&lt;/span&gt;&lt;span&gt;;#监听端口
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        server_name localhost_1;#域名
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        charset utf8;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt;         location /&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             # root   /usr/share/nginx/&lt;span&gt;html;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dynamic.zuoyu.com;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            index  index.html index.jsp;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt;         location ~ .*\.(jsp|&lt;span&gt;do&lt;/span&gt;|&lt;span&gt;action)$
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            index index.jsp;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;             proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dynamic.zuoyu.com;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;             
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt;     
&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt;         location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico|&lt;span&gt;svg)$
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;            #缓存30天
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            expires 30d;
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;             proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;static.zuoyu.com;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;            proxy_cache cache_one;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;             proxy_cache_valid &lt;span&gt;200&lt;/span&gt; &lt;span&gt;304&lt;/span&gt; &lt;span&gt;302&lt;/span&gt;&lt;span&gt; 5d;
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;            proxy_cache_valid any 5d;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;             proxy_cache_key &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$host:$server_port$request_uri&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             add_header X-Cache &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$upstream_cache_status from $host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt;         location ~ .*\.(ttf|woff|&lt;span&gt;woff2)$
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;            #缓存30天
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;            expires 30d;
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;             proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;static.zuoyu.com;&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;            proxy_cache cache_one;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;             proxy_cache_valid &lt;span&gt;200&lt;/span&gt; &lt;span&gt;304&lt;/span&gt; &lt;span&gt;302&lt;/span&gt;&lt;span&gt; 5d;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;            proxy_cache_valid any 5d;
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;             proxy_cache_key &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$host:$server_port$request_uri&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;             add_header X-Cache &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$upstream_cache_status from $host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; 
&lt;span&gt;149&lt;/span&gt;         location ~ .*\.(js|&lt;span&gt;css)$
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;            #缓存7天
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;            expires 7d;
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;static.zuoyu.com;&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt; &lt;span&gt;            proxy_cache cache_one;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;             proxy_cache_valid &lt;span&gt;200&lt;/span&gt; &lt;span&gt;304&lt;/span&gt; &lt;span&gt;302&lt;/span&gt;&lt;span&gt; 5d;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;            proxy_cache_valid any 5d;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;             proxy_cache_key &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$host:$server_port$request_uri&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;             add_header X-Cache &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$upstream_cache_status from $host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; 
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;        #其他页面反向代理到tomcat容器
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;         location ~ .*&lt;span&gt;$ {
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;            index index.jsp index.html;
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;             proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dynamic.zuoyu.com;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;        access_log off;    
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         error_page   &lt;span&gt;500&lt;/span&gt; &lt;span&gt;502&lt;/span&gt; &lt;span&gt;503&lt;/span&gt; &lt;span&gt;504&lt;/span&gt;  /&lt;span&gt;50x.html;
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; 
&lt;span&gt;169&lt;/span&gt;         location = /&lt;span&gt;50x.html {
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;             root   /usr/share/nginx/&lt;span&gt;html;
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; 
&lt;span&gt;174&lt;/span&gt;     
&lt;span&gt;175&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;         
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在这段配置文件中，不仅仅包含了静动态访问的分离，还包括缓存、资源压缩、负载均衡。在这里只分析静动态资源：&lt;/p&gt;
&lt;h3&gt;　　静态资源配置&lt;/h3&gt;
&lt;p&gt;　　以访问图片为例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico|&lt;span&gt;svg)$
        {
           root &lt;/span&gt;/home/zuoyu/Public/NginxStaticSource/&lt;span&gt;static; 
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当你访问虚拟主机 location:80 时，当访问到以上述文件类型时，会去root /home/zuoyu/Public/NginxStaticSource/static/目录下查找，比如你要访问root /home/zuoyu/Public/NginxStaticSource/static/img/background.png这个图片，那么你只需要location:80/img/background.png即可访问到该文件；&lt;/p&gt;
&lt;p&gt;　　在我的配置中，又建立了一个主机，专门用来配置静态资源路径，这样就避免了换一次静态资源的目录要改好多个地方，只需修改主机路径就可以实现。便可以将上述图片配置修改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico|&lt;span&gt;svg)$
        {
            proxy_pass http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:81;&lt;/span&gt;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样便大大提高了灵活性，而且在负载均衡时更加容易实现。注意：必须将静态资源主机配置放在核心主机的上面才有效。&lt;/p&gt;
&lt;h2&gt;　　动态数据配置&lt;/h2&gt;
&lt;p&gt;　　我们就以访问JSP页面、do请求、action请求为例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
location ~ .*\.(jsp|&lt;span&gt;do&lt;/span&gt;|&lt;span&gt;action)$
        {
            index index.jsp;
            proxy_pass http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8080;&lt;/span&gt;
&lt;span&gt;            
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个配置告诉了Nginx服务器：当有以jsp、do、action为后缀的请求，就将该请求交给localhost:8080;这个主机处理，这个主机的主页是index.jsp，这个就叫反向代理。这里设计到一个概念——代理与反向代理；代理通常需要在客户端配置，将本来要发送的请求转发到代理服务器；而反向代理要配置在服务器上，将本来要发送到本服务器上的请求转发到代理服务器上。&lt;/p&gt;
&lt;p&gt;　　将所有需要Tomcat应用服务器处理的请求都交给Tomcat，剩下的让Nginx处理就好了，如果需要其他服务器的，再配置上就ok了。&lt;/p&gt;

&lt;p&gt;　　如此一来，就实现了动静分离。当用户的浏览器加载页面时，那些css文件、js文件、字体样式、图片等等都会由Nginx服务器直接从本地硬盘取出返回给用户浏览器；而用户名等等信息会由nginx交给Tomcat处理后返回给Nginx，Nginx返回到用户浏览器。&lt;/p&gt;
&lt;h2&gt;　　怕什么真理无穷，进一寸有进一寸的欢喜。&lt;/h2&gt;



</description>
<pubDate>Thu, 12 Jul 2018 06:57:00 +0000</pubDate>
<dc:creator>左羽</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1214804270hacker/p/9299462.html</dc:identifier>
</item>
<item>
<title>在create-react-app创建的项目下允许函数绑定运算符 - -云-</title>
<link>http://www.cnblogs.com/cloud-/p/9299040.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloud-/p/9299040.html</guid>
<description>&lt;h2 id=&quot;前话&quot;&gt;前话&lt;/h2&gt;
&lt;p&gt;React的函数绑定一致是个问题，主要有下面几种方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;事件处理器动态绑定&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class Com extends React.Component {
    render() {
        &amp;lt;input type=&quot;button&quot; value=&quot;点我&quot; onClick={this.method.bind(this)} /&amp;gt;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;构造函数绑定&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class CartItem extends React.Component {
    
    constructor(props) {
        super(props);
        this.method = this.method.bind(this);
    }

    render() {
      &amp;lt;input type=&quot;button&quot; value=&quot;点我&quot; onClick={this.method} /&amp;gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;构造函数 + 箭头函数&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class CartItem extends React.Component {
    
    constructor(props) {
        super(props);
        this.method = (ev) =&amp;gt; {...}
    }

    render() {
       &amp;lt;input type=&quot;button&quot; value=&quot;点我&quot; onClick={this.method} /&amp;gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个是babel支持的，还不是标准&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class CartItem extends React.Component {
      
    method = () =&amp;gt; {...};

    render() {
       &amp;lt;input type=&quot;button&quot; value=&quot;点我&quot; onClick={this.method} /&amp;gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class CartItem extends React.Component {
      
    method = () =&amp;gt; {...};

    render() {
         &amp;lt;input type=&quot;button&quot; value=&quot;点我&quot; onClick={this.method} /&amp;gt;
    }
}

export default class CartItem extends React.Component {
      
    method(){...};

    render() {
         &amp;lt;input type=&quot;button&quot; value=&quot;点我&quot; onClick={::this.method} /&amp;gt;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后一种很帅气， 然并软，我使用就直接报错。 臣不服，不服。&lt;br/&gt;于是寻找方案， &lt;strong&gt;因为是create-react-app创建的项目。&lt;/strong&gt;&lt;br/&gt;我的思考方案如下&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const rewireMobX = require('react-app-rewire-mobx');
const rewireEslint = require('react-app-rewire-eslint');
const {injectBabelPlugin} = require('react-app-rewired');

/* config-overrides.js */
module.exports = {
    webpack: function override(config, env) {
        config = rewireEslint(config, env);
        config = rewireMobX(config, env);
        config = injectBabelPlugin('transform-function-bind',config)


        config.output.publicPath = ''
        return config;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改完毕，启动，哦，可以。 真是不错。&lt;br/&gt;扔掉键盘，甩开鼠标，深深的一口水，想写行代码咋这么难。&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html&quot;&gt;React and ES6 - Part 3, Binding to methods of React class (ES7 included)&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/decorator&quot;&gt;decorator&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md&quot;&gt;create-react-app&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/tuchk4/awesome-create-react-app#how-to-use-custom-babel-presets&quot;&gt;how-to-use-custom-babel-presets&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app/pull/1357&quot;&gt;Adding support for custom babel configuration #1357&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/timarney/react-app-rewired&quot;&gt;react-app-rewired&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/timarney/react-app-rewired#1-injectbabelplugin&quot;&gt;injectbabelplugin&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-stage-0&quot;&gt;babel-preset-stage-0&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-function-bind&quot;&gt;babel-plugin-transform-function-bind&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 12 Jul 2018 06:25:00 +0000</pubDate>
<dc:creator>-云-</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloud-/p/9299040.html</dc:identifier>
</item>
<item>
<title>spring mvc配置文件约束与标签详解 - 大雨如注</title>
<link>http://www.cnblogs.com/loveyoumi/p/9299066.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/loveyoumi/p/9299066.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Spring mvc约束与标签详解&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;约束头：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;

&amp;lt;beans xmlns=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/beans&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

   xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

   xmlns:mvc&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/mvc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

   xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;
&lt;span&gt;
                   http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;

&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;标签详解：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;       Mvc:default-servlet-handler ：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           静态资源过滤标签；该标签负责检测所有可被springDispatcherServlet拦截的请求，如果该请求是一个静态资源，spring将会把该请求交给servlet自行处理；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;       工作原理：&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           该标签的定义，相当于在spring容器中声明了一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler 类的实例化对象，该对象被spring设计在springDispatcherServlet之前对请求进行过滤处理；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;       属性：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;           default-servlet-name ：设置本地服务器servlet的名称； 该属性在用户没有手动修改servlet名称时无须使用，因为DefaultServletHttpRequestHandler 对象已经针对主流的服务器做了相关的名称处理；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Ex:&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
      &amp;lt;mvc:&lt;span&gt;default&lt;/span&gt;-servlet-handler&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;   &lt;span&gt;    Mvc:resources :&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           静态资源过滤标签，该标签可定义静态资源路径，以及静态资源访问映射，资源在客户端缓存时间等；该标签相对于mvc:default-servlet-handler 标签灵活性更强，但mvc:default-servlet-handler更加方便；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;       属性：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;            Location ：设置静态资源的相对路径，’’/” 表示相对于web的根目录，”classpath:” 则相对于classpath路径；&lt;/p&gt;
&lt;p&gt;           Mapping ：设置请求路径的映射，以’’/”开始，表示从项目路径下开始匹配；该映射路径表示：当请求路径和该mapping匹配时，则截取mapping路径后的请求路径，并相对于Location路径下去查找资源；&lt;/p&gt;
&lt;p&gt;           cache-period ：设置静态资源在客户端的缓存时间；单位秒；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;Ex：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;&lt;em&gt;&lt;strong&gt;     有spring.xml配置如下：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      &amp;lt;!--  表示请求以: 项目/resources/** 这种形式的请求，都将查找根目录下的静态资源并返回 à&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  &amp;lt;mvc:resources location=”/” mapping=”/resources&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*”  cache-period=”3600”&amp;gt;   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      &amp;lt;!--  表示请求以：项目/js/** 这种形式的请求 ，都将到根目录下/js/目录下查找资源，并返回 à&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;mvc:resources location=”/js&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*” mapping=”/js/**” &amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;      有请求如下：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;      &lt;a&gt;http://ip:port/project/resources/index.html&lt;/a&gt; ：该请求的resources/index.html与mapping 设置的”/resources/**”匹配，spring将截取”/resources/”之后的路径：index.html，并将index.html路径带入到location设置的”/”根路径下查找；即找到：项目根路径下/index.html文件&lt;/p&gt;
&lt;p&gt;      &lt;a&gt;http://ip:port/project/js/a.js&lt;/a&gt; ：该请求将查找根目录下/js/a.js 文件；&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;  &lt;span&gt;     mvc:view-controller :&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           请求拦截标签；&lt;/p&gt;
&lt;p&gt;           该标签将拦截指定的请求，并把请求转交给指定页面或者controller处理；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;       属性：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           Path ： 指定拦截的请求路径，以“/”开始，表示从项目路径后开始匹配；&lt;/p&gt;
&lt;p&gt;           View-name : 指定处理该请求的页面或者controller，可使用“redirect: “表示请求重定向，不使用则表示请求转发；&lt;/p&gt;
&lt;p&gt;      View-name 工作原理：将view-name设置的值把path匹配的值替换，并生成一个新的请求路径让服务器处理；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;Ex：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;      有sping配置文件如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;mvc:view-controller path=”/toindex”  view-name=”redirect:/resources/index.html”&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重定向&lt;/span&gt;

&amp;lt;mvc:view-controller path=”/toindex2”  view-name=”/resources/index.html”&amp;gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转发&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;      有请求如下：&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      &lt;a&gt;http://ip:port/project/toindex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;      该请求将被替换为一个新的请求路径，重定向给客户端重新发起请求；新请求路径如下：&lt;/p&gt;
&lt;p&gt;      http://ip:port/project/resources/index.html &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;       mvc:interceptor ：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;           请求拦截标签；&lt;/p&gt;
&lt;p&gt;           该请求拦截标签，将拦截给定的请求路径，并且将拦截请求交给用户定义的拦截器类进行处理，该类必须是HandlerInterceptor接口的实现类；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;       子标签：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;           &amp;lt;mvc:mapping path=””&amp;gt; ：拦截指定path路径的请求，以”/”开始，表示从项目根路径下开始匹配；&lt;/p&gt;
&lt;p&gt;           &amp;lt; mvc:exclude-mapping path=””&amp;gt; ：不拦截指定的path请求；&lt;/p&gt;
&lt;p&gt;           &amp;lt;ref  bean=“”/&amp;gt; : 设置指定的拦截器处理类的bean引用，该bean 必须是接口HandlerInterceptor的实现类；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ex：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;      有spirng配置文件如下，配置表示拦截project/a/开始的所有请求，但/a/a.h排除在外：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
   &amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testInterceptor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spring.mvc.demo.MyInterceptor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/bean&amp;gt;

   &amp;lt;mvc:interceptors&amp;gt;

      &amp;lt;mvc:interceptor&amp;gt;

         &amp;lt;!-- 拦截project/a/开始的所有请求 --&amp;gt;

         &amp;lt;mvc:mapping path=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/a/**&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;

         &amp;lt;!-- 不拦截project/a/a.h请求 --&amp;gt;

         &amp;lt;mvc:exclude-mapping path=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/a/a.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;

         &amp;lt;&lt;span&gt;ref&lt;/span&gt; bean=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testInterceptor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;

      &amp;lt;/mvc:interceptor&amp;gt;

   &amp;lt;/mvc:interceptors&amp;gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;      有请求如下：&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      &lt;a&gt;http://ip:port/project/a/bjjjj&lt;/a&gt; ：该请求将被拦截，并交给testInterceptor处理；&lt;/p&gt;
&lt;p&gt;      &lt;a&gt;http://ip:port/project/a/a.h&lt;/a&gt; ：该请求将不会被拦截；&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt; &lt;span&gt;     mvc:annotation-driven :&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;           该标签是spring为用户提供的一个功能注册的简写标签，该标签会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean,这是Spring MVC为@Controller分发请求所必需的，并且提供了数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持,@Valid支持读写XML的支持（JAXB）和读写JSON的支持（默认Jackson）等功能。&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;个人理解（未解读spring源码，仅观察程序运行现象，有所不对，请指教）：该标签当且仅当在使用了请求拦截标签：mvc:resources 、 mvc:default-servlet-handler、mvc:view-controller时，才需要使用mvc:annotation-driven标签，如不使用，将无法找到controller处理；&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Jul 2018 05:39:00 +0000</pubDate>
<dc:creator>大雨如注</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/loveyoumi/p/9299066.html</dc:identifier>
</item>
<item>
<title>数据库和AI的一次火花 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9299042.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9299042.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2.3170731707317&quot;&gt;
&lt;p&gt;本文由&lt;a href=&quot;https://cloud.tencent.com/developer/user/1319861?fromSource=waitui&quot;&gt;宗文&lt;/a&gt; 发表于&lt;a href=&quot;https://cloud.tencent.com/developer/column/4239?fromSource=waitui&quot;&gt;云+社区专栏&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;| 导语 通过历史数据，基于时间序列来预测未来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们生活中很多数据是有时间维度的。比如说天气或者股票价格。对于这种带有时序的数据，有一种基于时间序列的预测模型---Prophet。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/prophet&quot; class=&quot;uri&quot;&gt;https://github.com/facebook/prophet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面是项目的地址，需要的小伙伴可以去上面一看究竟。而我主要做的是通过该模型来预测腾讯云数据库存储量变化的未来趋势。下来就来看看Prophet的强大之处吧。&lt;/p&gt;
&lt;p&gt;前面说到Prophet是基于时间序列的模型，所以说时间是里面最重要的一个维度（如果您需要预测自己的数据，那么必须是pandas固定的时间格式）。现在就开始直接看下结果吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1319861/rhepypchtd.jpg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;纵轴是腾讯云某类型数据库的购买总量，可以看到随着时间的增长，数据库的购买总量还是在不断增长的。而Prophet所要做的就是根据数据的历史表现来估计数据未来的走势。实验中我选取了2018年1月到6月的数据作为测试集。黑点为真实值，蓝色区域为模型预测的估计值，可以看到随着时间的推移，总体估计容量的趋势是增长的，但是随着时间的推移，不确定性区域越来越大（图中蓝色区域），也可以认为是随着时间的推移，不确定性越来越大。下面来看看真实值与模型预测值是否准确：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1319861/yc2lvgx0o9.jpg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图中6月份以后的数值是对模型的测试集，红色区域就是模型未见过的数值与估计值的相对情况。可以明显的看到，该模型估计还是相当准确的呀。可能有很多小伙伴要问了，为啥4月末会出现一个阶段式的跳跃呢？就是我们腾讯云的一个大客户拼多多最近有比较大的手笔。&lt;/p&gt;
&lt;p&gt;当然该模型不仅仅可以估计进几个月，也可以估计更长的时间，但是随着时间的推移，可能就更不准确了。&lt;/p&gt;
&lt;p&gt;重点就是来了！！！&lt;/p&gt;
&lt;p&gt;这东西就是预测一个容量那么简单么？&lt;/p&gt;
&lt;p&gt;当然不是了。。主要分两大方面：&lt;/p&gt;
&lt;p&gt;1.可以为我们自己提供服务：&lt;/p&gt;
&lt;p&gt;（1）.可以为我们提供潜在客户的估计。（比如明显可以看到某个公司近几个月飞速购买数据库服务，但是该公司不是我们的大客户。所以很难通过简单的容量排行榜找到他。但是Prophet可以估计出谁可能在后面变成大客户，这样就可以告诉架构师谁是我们的潜在客户。）&lt;/p&gt;
&lt;p&gt;（2）.还可以通过对我们数据库的总量或者单个客户的数据库总量进行估计，告诉大概什么时候客户需要扩容了，让我们对自己的服务有更好的准备。&lt;/p&gt;
&lt;p&gt;2.我们也可以为我们的客户服务：&lt;/p&gt;
&lt;p&gt;（1）.客户可以通过对自习所选的维度进行分析，相当于一个saas服务。&lt;/p&gt;
&lt;p&gt;（2）.客户还可以对自己所买的CVM相关的用量进行分析，以便选择最合理的配置。&lt;/p&gt;
&lt;p&gt;最后简单说下模型内部结构。&lt;/p&gt;
&lt;p&gt;Prophet是一个累加回归模型（additiveregressionmodel）模型的整体构建如下：&lt;/p&gt;
&lt;p&gt;y(t) = g(t)+s(t)+h(t)+et&lt;/p&gt;
&lt;p&gt;主要有三部分组成：growth(增长趋势)、seasonality（季节趋势）以及holidays（节假日对预测值的影响）。其中g(t)表示增长函数，用来拟合时间序列中预测值的非周期变化。用分段线性或逻辑增长曲线拟合的趋势成分。Prophet会从数据中找出转折点，自动检测趋势变化s(t)用来表示周期性变化，比如每周、每年中的季节等。用傅里叶级数建模的季节成分，以年为单位。用虚拟变量表示的季节成分，以周为单位h(t)表示时间序列中那些潜在的具有非固定周期的节假日对预测值造成的影响。et为噪声项。&lt;/p&gt;
&lt;blockquote readability=&quot;1.15&quot;&gt;
&lt;h2 id=&quot;问答&quot;&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/135862?fromSource=waitui&quot;&gt;云数据库问题？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关阅读&quot;&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1158234?fromSource=waitui&quot;&gt;彭磊：TencentHub的架构实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1158164?fromSource=waitui&quot;&gt;微信公众号迁移Serverless详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1158163?fromSource=waitui&quot;&gt;如何使用StreamSets实现MySQL中变化数据实时写入HBase&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1155229?fromSource=waitui&quot; class=&quot;uri&quot;&gt;https://cloud.tencent.com/developer/article/1155229?fromSource=waitui&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;海量技术实践经验，尽在&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot;&gt;云加社区&lt;/a&gt;！&lt;/p&gt;
</description>
<pubDate>Thu, 12 Jul 2018 05:31:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9299042.html</dc:identifier>
</item>
<item>
<title>微信模板消息推送遇到的坑 - 曦阳x</title>
<link>http://www.cnblogs.com/be-thinking/p/9299038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/be-thinking/p/9299038.html</guid>
<description>&lt;p&gt;        这两天做微信公众号消息推送的时候，遇到了几个问题，在此记录下原因和解决办法，希望能帮助大家。&lt;/p&gt;
&lt;p&gt;        1、{&quot;errcode&quot;:40037,&quot;errmsg&quot;:&quot;invalid template_id hint: [2ZVwjA0418ge29]&quot;}&lt;/p&gt;
&lt;p&gt;            这个错误码微信API文档里没有提到，但是看错误消息，知道是template_id设置不正确，以为是拷贝错了，于是又跑到模板消息里去核对，发现没问题，后面到网上搜，才发现template_id是正式环境的模板消息id，如果要测试，必须要测试公众号添加模板消息，再  用对应的template_id才可以。可是我们的测试公众号还在审核中，还不能添加模板消息，只能用正式环境公众号测，所以把运行环境改成由测试环境改成线上环境来测。本以为这样就行了，结果改了以后发现还不行，一步步debug，发现微信加载的配置信息读取的是测试环境的配置信息，这也会报这个错，真是一波3折。改了后，又报了第2个错。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       2、{&quot;errcode&quot;:40001,&quot;errmsg&quot;:&quot;invalid credential, access_token is invalid or not latest hint: [5bi46a00433401!]&quot;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            这个原因是access_token错误，于是又debug，发现这个token是从redis里取的，而我们的redis是测试环境，所以这个token自然也取不到，于是从线上redis中把值copy过来。一测又不行，还是报这个错。见鬼了！转念一想，好像线上环境的redis是有有效期的，会不会是这个原因？跑到线上重新看了下，果然不一样！还有这么巧的事！只能再copy最新的值了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      3、{&quot;errcode&quot;:40003,&quot;errmsg&quot;:&quot;invalid openid hint: [FqjboA0554ge29]&quot;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            真的是一步一个坑，上面2个问题解决了，这个问题又冒出来了，我用的open_id是客户端同事给的open_id，在我们测试库里也有这个账号，想着应该没问题啊，怎么会报这个错呢，又到网上搜答案，发现原来是这个open_id没绑定我们的公众号，所以接收不到发送的消息，于是焕然大悟，找客户端同事确认后发现确实如此，于是又找客户端要了个绑定了的open_id，再运行测试demo，终于发现返回成功了，欣喜！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      感想：由于以前没做过微信公众号开发，对模板消息的开发流程也不了解，这也是这次踩了这么多坑的原因，好在还比较顺利的解决了，下午可以提测了！另外吐槽下腾讯模板消息开发的几个小问题：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          1、官方文档居然errorCode都不完整，这让大家怎么取找问题？熟悉的人可能还好，不熟悉的的都不知道从何下手&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          2、模板消息库，每个月只能添加3个自定义模板，数量太少，还要审核，腾讯给的理由是防止营销和乱添加导致模板库混乱，但问题是，很多的新产品业务线，需要发送的模板消息模板库里根本就没有！就算有相近的，也不能自己灵活修改和扩展，只能按照指定的模板传参，这样灵活性太差！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Jul 2018 05:30:00 +0000</pubDate>
<dc:creator>曦阳x</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/be-thinking/p/9299038.html</dc:identifier>
</item>
<item>
<title>mysql存储过程之遍历多表记录后插入第三方表中 - 1156740846</title>
<link>http://www.cnblogs.com/LcxSummer/p/9299021.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LcxSummer/p/9299021.html</guid>
<description>&lt;p&gt;自从学过存储过程后，就再也没有碰过存储过程，这是毕业后写的第一个存储过程。&lt;/p&gt;
&lt;p&gt;因为项目里设备的种类比较多，分别存在不同的数据表中，java中对应不同的java bean对象，想要统一管理有点困难。最近正好要开发一个功能模块，就是需要统一对设备进行处理，想着为了以后都能方便的统一处理各种设备，就从现在开始设计一套方案管理起这些项目吧。&lt;/p&gt;
&lt;p&gt;如何统一管理呢？&lt;/p&gt;
&lt;p&gt;如果从项目一开始设计的时候就能考虑到项目会发展成今天这样，当初就应该抽取公共父类，对所有类型的所有公共字段进行统一抽取，这样无论添加多少模块，需要对设备进行操作的时候，都只需要关联统一父类，数据间的关系就清晰多了，开发也会简单很多。&lt;/p&gt;
&lt;p&gt;那么现在抽取呢？还来得及吗？&lt;/p&gt;
&lt;p&gt;应该是来不及了，因为项目已经发展壮大了，已经开发了很多功能，一旦现在抽取，需要修改的地方就太多了，没有那么多时间来完成这项工作。&lt;/p&gt;
&lt;p&gt;那还有别的方法吗？&lt;/p&gt;
&lt;p&gt;我也不晓得人家的项目是如何处理这样的问题的，但是就我思考，可以学习下注册表的思想，电脑中装有很多很多的软件，各个软件也是各部相同，但是每个软件安装的时候都会写一条信息到注册表中，方便电脑对软件的集中管理。是不是感觉这个方案还不错&lt;img src=&quot;https://images2018.cnblogs.com/blog/957773/201807/957773-20180712125604424-2083829766.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目里需要做的就是：1、添加一个注册表对象；2、添加设备的时候，都要把公共的很重要的信息写到注册表中，更新和删除也要同步操作注册表；3、一个很重要的工作，曾经已经添加到项目中的设备信息要怎么办呢？他们都没有注册信息，难不成要放弃对他们的管理？或者是删除重新添加？不！！！只需要写一个存储过程，遍历表里已经存在的设备信息，将其插入注册表中。&lt;/p&gt;
&lt;p&gt;好了，人生第一个存储过程就这样拉开序幕了，下面要亮出我的第一个存储过程了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/957773/201807/957773-20180712130239775-1691064153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写的过程中呢肯定是有遇到各种问题的&lt;/p&gt;
&lt;p&gt;首先，不记得有哪些循环语句了，下面科普一下&lt;/p&gt;
&lt;p&gt;第一种 while 循环&lt;/p&gt;
&lt;p&gt;while循环语法：&lt;/p&gt;
&lt;p&gt;while 条件 DO&lt;/p&gt;
&lt;p&gt;            循环体;&lt;/p&gt;
&lt;p&gt;end while;&lt;/p&gt;
&lt;p&gt;第二种 loop 循环&lt;/p&gt;
&lt;p&gt;loop 循环语法：&lt;/p&gt;
&lt;p&gt;loop_name:loop&lt;/p&gt;
&lt;p&gt;        if 条件 THEN -- 满足条件时离开循环&lt;/p&gt;
&lt;p&gt;                leave loop_name;  -- 和 break 差不多都是结束训话&lt;/p&gt;
&lt;p&gt;        end if；&lt;/p&gt;
&lt;p&gt;end loop;&lt;/p&gt;
&lt;p&gt;第三种 repeat 循环&lt;/p&gt;
&lt;p&gt;repeat 循环语法&lt;/p&gt;
&lt;p&gt;repeat&lt;/p&gt;
&lt;p&gt;    循环体&lt;/p&gt;
&lt;p&gt;until 条件 end repeat;&lt;/p&gt;
&lt;p&gt; 其次，遇到一个问题，循环的时候，最后一条记录总是被执行了两次。&lt;/p&gt;
&lt;p&gt;一开始使用的是repeat循环体，以为是因为还没有判断就执行了，肯定是不对的，应该先判断，再执行，以为换一种循环语句便可以了&lt;/p&gt;
&lt;p&gt;原先是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/957773/201807/957773-20180712130956462-1923911134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后来改成了这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/957773/201807/957773-20180712131103919-13146141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看着没毛病吧，是先判断后做的，但是结果还是不对，仔细研究了一下，发现，当游标走到最后一行的时候，执行insert没错，但是这个时候的标记值依然是正常的，会再进入循环体，这个时候再去fetch下一个游标的时候，就获取不到了，标记值会发生改变，但是插入语句依然执行了，执行后，下一次循环才不符合条件，跳出的循环，因此，应该是游标下移一行后进行判断，比如在fetch语句后面加一句if判断，或者是像下面这样，先移动游标，再判断插入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/957773/201807/957773-20180712131831387-1260091529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后贴上代码吧，方便以后自己复制粘贴，不是有句话叫 ”天下代码一大抄，看你会不会抄“ ，其实开发的日常也就是复制粘贴啦&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;BEGIN&lt;/span&gt;   
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; dsi_id &lt;span&gt;LONG&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; dsi_name &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;300&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; dsi_areaid &lt;span&gt;LONG&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; dsi_orgzid &lt;span&gt;LONG&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; dsi_clazz &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;300&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;declare&lt;/span&gt; no_more_departments &lt;span&gt;integer&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; cursor_employee &lt;span&gt;CURSOR&lt;/span&gt; &lt;span&gt;FOR&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            dsi.id,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            dsi.inputname,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            dsi.deviceArea_id,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            sd.organization_id,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            &quot;DeviceSwitchInfo&quot;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;FROM&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            tip_s_deviceswitchinfo dsi
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; tip_s_systemdeviceinfo sd &lt;span&gt;ON&lt;/span&gt; dsi.Device_id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; sd.id
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            dsi.id,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            dsi.outputname,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            dsi.deviceArea_id,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            sd.organization_id,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            &quot;DeviceSwitchOutPut&quot;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;FROM&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            tip_s_DeviceSwitchOutPut dsi
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; tip_s_systemdeviceinfo sd &lt;span&gt;ON&lt;/span&gt; dsi.Device_id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; sd.id
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            dsi.id,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            dsi.analogname,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            dsi.deviceArea_id,
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            sd.organization_id,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            &quot;AnalogInputInfo&quot;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;FROM&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            tip_s_AnalogInputInfo dsi
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; tip_s_systemdeviceinfo sd &lt;span&gt;ON&lt;/span&gt; dsi.Device_id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; sd.id
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;UNION&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            dsi.id,
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            dsi.devicename,
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            dsi.area_id,
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            sd.organization_id,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            &quot;SmartDeviceInfo&quot;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;FROM&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            tip_smart_deviceinfo dsi
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;LEFT&lt;/span&gt; &lt;span&gt;JOIN&lt;/span&gt; tip_s_systemdeviceinfo sd &lt;span&gt;ON&lt;/span&gt; dsi.deviceid &lt;span&gt;=&lt;/span&gt;&lt;span&gt; sd.id;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;DECLARE&lt;/span&gt; &lt;span&gt;CONTINUE&lt;/span&gt; HANDLER &lt;span&gt;FOR&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt;&lt;span&gt; FOUND 
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;SET&lt;/span&gt; no_more_departments &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;OPEN&lt;/span&gt;&lt;span&gt; cursor_employee;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;FETCH&lt;/span&gt; cursor_employee &lt;span&gt;INTO&lt;/span&gt;&lt;span&gt; dsi_id, dsi_name, dsi_areaid, dsi_orgzid, dsi_clazz;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;WHILE&lt;/span&gt;&lt;span&gt; !no_more_departments DO
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt;&lt;span&gt; tip_m_deviceregister (
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            deviceId, NAME, area_id, orgz_id, deviceClass, active, version
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;VALUES&lt;/span&gt; (dsi_id, dsi_name, dsi_areaid, dsi_orgzid, dsi_clazz, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;FETCH&lt;/span&gt; cursor_employee &lt;span&gt;INTO&lt;/span&gt;&lt;span&gt; dsi_id, dsi_name, dsi_areaid, dsi_orgzid, dsi_clazz;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;END&lt;/span&gt; &lt;span&gt;WHILE&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;CLOSE&lt;/span&gt;&lt;span&gt; cursor_employee;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 12 Jul 2018 05:23:00 +0000</pubDate>
<dc:creator>1156740846</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LcxSummer/p/9299021.html</dc:identifier>
</item>
<item>
<title>centos 安装mysql - 听风寻雨</title>
<link>http://www.cnblogs.com/youaremylife/p/9298997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youaremylife/p/9298997.html</guid>
<description>&lt;p&gt;1.查看是否已经安装了mysql&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712105003304-883000334.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;系统默认装了一个mysql-libs，我们卸载掉&lt;/p&gt;

&lt;p&gt;2.去下载mysql所必须的rpm包&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712131411662-71888389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712131420206-1676539799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：红框里的这个mysql-community-devel 就不装了，貌似用处暂时用不到&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;3.进行rpm软件包安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712133056268-1973032887.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712133105869-93084946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;4.初始化数据库，开启数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712134731416-596618849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5.设置数据库密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712134925482-973811628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;默认的是有密码的，密码既不是空，也不是'root‘&lt;/span&gt;&lt;/p&gt;





&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1436840/201807/1436840-20180712135208632-94029041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;获取临时密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;grep&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;temporary password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /var/log/mysqld.log
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Thu, 12 Jul 2018 05:13:00 +0000</pubDate>
<dc:creator>听风寻雨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youaremylife/p/9298997.html</dc:identifier>
</item>
<item>
<title>基于python脚本，实现Unity全平台的自动打包 - zblade</title>
<link>http://www.cnblogs.com/zblade/p/9298905.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zblade/p/9298905.html</guid>
<description>&lt;p&gt;转载请标明出处：&lt;a href=&quot;http://www.cnblogs.com/zblade/&quot;&gt;http://www.cnblogs.com/zblade/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;0. 概述&lt;/h2&gt;
&lt;p&gt;本文主要针对项目中自动打包过程进行调研，实现用python脚本来打出win/android/ios三个平台下的游戏运行包。&lt;/p&gt;
&lt;h2&gt;1.工具安装&lt;/h2&gt;
&lt;p&gt;首先基本的工具需要安装，Unity, python， 如果需要修改python脚本，则需要安装一下pycharm，对应的链接：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//www.python.org/downloads/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;Download Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用最新版本即可&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//www.jetbrains.com/pycharm/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;pycharm安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选中最新的即可&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//www.cnblogs.com/lenmom/p/8994275.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;pyCharm最新2018激活码(转) - 老董 - 博客园&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选用其中的破解补丁激活的方式，可以破解使用到2099年&lt;/p&gt;
&lt;h2&gt;2.基本流程&lt;/h2&gt;
&lt;h2&gt;1)编写BuildProject相关的c#代码&lt;/h2&gt;
&lt;p&gt;在unity工程的Editor目录下，编写打包所需要的BuildProject.cs代码，基本操作可以简单归纳为：读取打包脚本的参数，根据参数更新相关设置，根据参数切换到对应的打包平台，执行打包操作。&lt;br/&gt;部分参考代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; BuildTest()
    {
        PreBuild();

        BuildPlayer();

        PostBuild();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造之前&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PreBuild()
    {
        UpdateParam();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2)编写python打包脚本&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/user/bin/python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;coding = utf-8&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt;  subprocess
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;  shutil
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt;  os

UNITYPATH &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/Unity/Editor/Unity.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PROJECTPATH &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/WorkProgram/Python/UnityTest/UnityTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
platform &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android,win,ios&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

subprocess.call(UNITYPATH &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; -quit &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; -batchmode &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; -projectPath &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + PROJECTPATH + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; -executeMethod BuildProject.BuildTest &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  +&lt;span&gt; platform)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;3)执行打包脚本&lt;/h2&gt;
&lt;p&gt;在pycharm下可以执行执行该打包脚本即可，如果想设置为定时的打包，在windows下可以设置一个定时计划任务，在每天定时执行一次打包脚本即可&lt;/p&gt;
&lt;h2&gt;3.IOS自动打包&lt;/h2&gt;
&lt;p&gt;在ios平台上打包，需要将Unity的工程导出为XCode工程，然后在XCode里面进行打ipa包的处理。&lt;br/&gt;如果想要执行自动打包，则需要进行一些特殊的操作，分为以下几个部分：&lt;/p&gt;
&lt;h2&gt;1）工具准备&lt;/h2&gt;
&lt;p&gt;在Mac上，首先需要安装一些基本的工具(python/pycharm/XCode默认已经安装)：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//github.com/shaojiankui/ProfilesManager&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;provisioningFile查看工具：ProfilesManager&lt;/a&gt;&lt;br/&gt;查看网上各种操作查看provisioning profiles的操作，这个工具可以实现在XCode里面运行，简易直观的查看&lt;br/&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//github.com/carya/Util&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;自动打包脚本github示例&lt;/a&gt;&lt;br/&gt;这个脚本提供了基本的操作命令，可以在此基础上进一步的编写自己的打包脚本&lt;/p&gt;
&lt;h2&gt;2）python基本脚本&lt;/h2&gt;
&lt;p&gt;参考上面的自动打包脚本，测试和修改一些bug（填坑~），得到一个可以基本运行的自动将xcodeproject导出为ipa的运行脚本，保留如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;22&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;! /usr/bin/python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding:utf8 -*-&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; optparse &lt;span&gt;import&lt;/span&gt;&lt;span&gt; OptionParser
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; subprocess
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;unity path and project path&lt;/span&gt;
UNITYPATH = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Applications/Unity/Unity.app/Contents/MacOS/Unity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PROJECTPATH &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; configuration for iOS build setting&lt;/span&gt;
CONFIGURATION = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Release&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
SDK &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iphoneos&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PROJECT &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
CACHAPATH &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
TARGET &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
SCHEME &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unity-iPhone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;桌面上创建出ipa&lt;/span&gt;
EXPORT_MAIN_DIRECTORY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Desktop/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
EXPORT_OPTIONS_PLIST &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exportOptions.plist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;def&lt;/span&gt;&lt;span&gt; buildArchivePath(tempName):
    process &lt;/span&gt;= subprocess.Popen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, stdout =&lt;span&gt; subprocess.PIPE)
    (stdoutdata, stderrdata) &lt;/span&gt;=&lt;span&gt; process.communicate()
    archiveName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/%s.xcarchive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(tempName)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(&quot;name &quot; + stdoutdata.strip().decode())&lt;/span&gt;
    archivePath = CACHAPATH  +&lt;span&gt; archiveName
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; archivePath


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cleanArchiveFile(archiveFile):
    cleanCmd &lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rm -r %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(archiveFile)
    process &lt;/span&gt;= subprocess.Popen(cleanCmd, shell=&lt;span&gt;True)
    process.wait()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clean archiveFile: %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(archiveFile))


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; buildExportDirectory(scheme):
    dateCmd &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;date &quot;+%Y-%m-%d_%H-%M-%S&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    process &lt;/span&gt;= subprocess.Popen(dateCmd, stdout= subprocess.PIPE, shell=&lt;span&gt; True)
    (stdoutdata, stderrdata) &lt;/span&gt;=&lt;span&gt; process.communicate()
    exportDirectory &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s%s%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %(EXPORT_MAIN_DIRECTORY, scheme, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-test1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export directory: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; exportDirectory)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; exportDirectory

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; exportArchive(scheme, archivePath):
    exportDirectory &lt;/span&gt;=&lt;span&gt; buildExportDirectory(scheme)
    exportCmd &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xcodebuild  -exportArchive -archivePath %s -exportPath %s  -allowProvisioningUpdates -exportOptionsPlist %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(archivePath, exportDirectory, EXPORT_OPTIONS_PLIST)
    process &lt;/span&gt;= subprocess.Popen(exportCmd, shell=&lt;span&gt;True)
    (stdoutdata, stderrdata) &lt;/span&gt;=&lt;span&gt; process.communicate()

    signReturnCode &lt;/span&gt;=&lt;span&gt; process.returncode
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; signReturnCode !=&lt;span&gt; 0:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export %s failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;scheme)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; exportDirectory


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; buildProject(project, target, output):
    archivePath &lt;/span&gt;=&lt;span&gt; buildArchivePath(SCHEME)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;arcivePath: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt; archivePath)
    process &lt;/span&gt;= subprocess.Popen(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;replace_provision_config&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, shell=&lt;span&gt; True)
    process.wait()

    time1 &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;archiveCmd = 'xcodebuild archive -archivePath %s' + archivePath + ' -scheme ' + &quot;Unity-iPhone&quot; + ' -quiet -configuration %s' + SCHEME&lt;/span&gt;
    archiveCmd = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xcodebuild -project %s -scheme %s -configuration %s archive -archivePath %s -destination generic/platform=iOS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(project, SCHEME, CONFIGURATION, archivePath)
    process &lt;/span&gt;= subprocess.Popen(archiveCmd, shell=&lt;span&gt; True)
    process.wait()
    time2&lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;finish archive cmd, used time: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(time2 -&lt;span&gt; time1))
    archiveReturnCode &lt;/span&gt;=&lt;span&gt; process.returncode;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; archiveReturnCode !=&lt;span&gt; 0:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;archive project %s failed &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;project)
        cleanArchiveFile(archivePath)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin export archive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        time3 &lt;/span&gt;=&lt;span&gt; time.time()
        exportDirectory &lt;/span&gt;=&lt;span&gt; exportArchive(SCHEME, archivePath)
        time4 &lt;/span&gt;=&lt;span&gt; time.time()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;finish export archive, used time: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(time4 -&lt;span&gt; time3))
        cleanArchiveFile(archivePath)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; exportDirectory != &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export archive success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; showNotification(title, subtitle):
    os.system(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;osascript -e 'display notification \&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + subtitle + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot; with title \&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + title + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;对xcode工程进行build&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xcbuild():
    output &lt;/span&gt;= os.path.expanduser(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/Desktop/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + TARGET + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.ipa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;comments = options.comments&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(output)
    buildProject(PROJECT, TARGET, output)


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;先执行unity的build.buildplayer，导出xcode工程&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;在windows平台可以用call调用，但是在Mac下，用Popen执行，不然会报文件无法查找的错误&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;在mac平台下，则需要执行popen的操作来执行命令行&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; buildProjectResource():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;先导出mac包&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    build &lt;/span&gt;= UNITYPATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; -quit -batchmode -projectPath &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + PROJECTPATH + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; -executeMethod BuildProject.BuildIOS &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    buildCmd &lt;/span&gt;= build + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mac&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;subprocess.call(buildCmd)&lt;/span&gt;
    time1 =&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;process =  subprocess.Popen(buildCmd, shell = True)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;process.wait()&lt;/span&gt;
    time2 =&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;导出mac所用时间： &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(time2-&lt;span&gt;time1))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;再导出apk包&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;再导出apk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    buildCmd &lt;/span&gt;= build + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    time3 &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;process = subprocess.Popen(buildCmd, shell = True)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;process.wait()&lt;/span&gt;
    time4=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;导出apk所用时间： &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(time4 -&lt;span&gt; time3))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;再导出ios&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;再导出xcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    buildCmd &lt;/span&gt;= build + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ios&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    time5 &lt;/span&gt;=&lt;span&gt; time.time()
    process &lt;/span&gt;= subprocess.Popen(buildCmd, shell =&lt;span&gt; True)
    process.wait()
    time6 &lt;/span&gt;=&lt;span&gt; time.time()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;导出Xcode工程所用时间： &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(time6 -&lt;span&gt; time5))

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    buildProjectResource()
    xcbuild()


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;其中标注为&quot;*****&quot;为你对应的项目的相关路径，可以自行填写。&lt;/p&gt;
&lt;p&gt;对应的exportOptions.plist文件为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-//Apple//DTD PLIST 1.0//EN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.apple.com/DTDs/PropertyList-1.0.dtd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;plist version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;provisioningProfiles&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;com.topjoy.pod1&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;XC com topjoy pod1 &amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;key&amp;gt;method&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;development&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;compileBitcode&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;3）执行打包脚本&lt;/h2&gt;
&lt;p&gt;执行打包脚本，目前会在unity导出xcode工程后中断，需要手动点击导出的xcode工程，然后设置signing中的appID,生成对应的provisioning profiles,然后继续执行脚本，可以得到最终的ipa文件，这个可以集合后面的打包工具，实现XCode中的签证设置，最终实现一键打包操作。&lt;/p&gt;
&lt;h2&gt;4.拓展性&lt;/h2&gt;
&lt;p&gt;目前只是一个简单的打包脚本，后续针对不同平台会有不同的配置，则需要对应的填充和拓展打包脚本以及对应的c#脚本来执行打包。&lt;/p&gt;
&lt;p&gt;有任何疑问，可以留言讨论&lt;/p&gt;
&lt;h2&gt;参考文章：&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=http%3A//liumh.com/2015/11/25/ios-auto-archive-ipa/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;iOS自动打包并发布脚本&lt;/a&gt;&lt;br/&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//blog.csdn.net/yuanmengong886/article/details/78214978&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;Xcode9 xcodebuild 命令行打包遇到的坑与解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//www.jianshu.com/p/3f43370437d2&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;iOS 自动构建命令——xcodebuild&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Jul 2018 04:26:00 +0000</pubDate>
<dc:creator>zblade</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zblade/p/9298905.html</dc:identifier>
</item>
</channel>
</rss>