<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【微服务】使用spring cloud搭建微服务框架，整理学习资料 - 张泰峰</title>
<link>http://www.cnblogs.com/ztfjs/p/9230374.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ztfjs/p/9230374.html</guid>
<description>&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;　　使用spring cloud搭建微服务框架，是我最近最主要的工作之一，一开始我使用bubbo加zookeeper制作了一个基于dubbo的微服务框架，然后被架构师否了，架构师曰：此物过时。随即，我上一套spring cloud，与公司大环境框架一致，也废了不少功夫，现在在这里分享基础结构给各位博友，如有不对的地方，欢迎大家直接评论区怂我。嘿嘿。&lt;/p&gt;
&lt;p&gt; 　　后续的代码已传至我的github，大家可以下载查看。&lt;/p&gt;
&lt;p&gt;　　&lt;a title=&quot;下载文件地址&quot; href=&quot;https://github.com/294678380/cloudDemo&quot; target=&quot;_blank&quot;&gt;下载文件地址&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;微服务&lt;/h2&gt;

&lt;p&gt;　　首先我们要了解什么是微服务，以及微服务的作用，我们才能够顺利的搭建一个微服务架构。&lt;/p&gt;
&lt;p&gt;　　博主先用一句话总结什么是微服务。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;微服务就是对某个应用系统的每个API进行有效的拆分，然后通过某种连接方式，用以提供给其他应用系统调用的API的服务，在调用过程中实现和解决了一系列问题的综合就是微服务架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　顾名思义，微服务得从两个方面去理解，什么是&quot;微&quot;、什么是&quot;服务&quot;。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;微&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　简单的讲就是体积小，随处运行，开发简单。传统的spring mvc框架配置繁杂，项目依赖杂乱，常常令开发和维护头疼不已。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;服务&lt;/strong&gt;　　&lt;/p&gt;
&lt;p&gt;　　所谓服务，一定要区别于系统，服务一个或者一组相对较小且独立的功能单元，是用户可以感知最小功能集。&lt;/p&gt;
&lt;p&gt;　　微服务最早由Martin Fowler与James Lewis于2014年共同提出，微服务架构风格是一种&lt;strong&gt;使用一套小服务来开发单个应用的方式途径&lt;/strong&gt;，每个服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API，这些服务基于业务能力构建，并能够通过自动化部署机制来独立部署，这些服务使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;应用的拆分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;有程序员A,B,C,他们现在都需要开发一套订单管理系统。&lt;/p&gt;
&lt;p&gt;　　程序员A采用单系统架构，业务代码做mvc拆分，前端部分使用php做渲染层。 &lt;/p&gt;
&lt;p&gt;　　程序员B采用多应用架构，将产品、订单、物流、工单、客服等做应用级拆分，然后使用REST API或者tcp直接交互，每个应用都是一个mvc系统，独立开发。&lt;/p&gt;
&lt;p&gt;　　程序员C采用微服务，将产品、订单、物流、工单、客服等做应用级拆分，再使用微服务框架将他们打散拆分成一个个的服务，例如订单列表查询服务、产品列表查询服务、产品详情查询服务等。使用一个个服务组成应用系统然后整合为订单管理系统&lt;/p&gt;
&lt;p&gt;　　毫无疑问，程序员A的架构方式只能够在订单量小，吃了上顿没下顿的公司应用了。&lt;/p&gt;
&lt;p&gt;　　而程序员B的架构类似大部分电商平台前期的架构逻辑，这套架构适应能力不错，但是随着系统的不断扩大，维护变的极为复杂，版本的更替，应用之间的API调用随着各种各样的需求复杂多变。&lt;/p&gt;
&lt;p&gt;　　随着B架构的演变，诞生了程序员C的架构模式，微服务。微服务的理解就是将类似 订单列表查询服务、产品列表查询服务、产品详情查询服务进行细分，微分。使我们的代码能够通过统一的网关进行整合，能够让整个公司的系统开发力量彻底整合起来，并且微服务中的服务治理、熔断、负载均衡等等功能加强了对整个系统的治理能力。&lt;/p&gt;
&lt;p&gt;　　目前应对中大型站点的后台架构，微服务是最适合的一套模式。同时spring boot的出现让微服务的开发变得更简单，理解更容易，例如dubbo的开发方式其实比较简单、易懂，spring cloud更是深度整合spring boot的能力，借用网友的一张对比图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627103235394-1959832285.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图出处：https://blog.csdn.net/zhouyanqingbfq/article/details/79407285&lt;/p&gt;
&lt;p&gt;另外有很多关于微服务的知识理念，博主整理了一些：&lt;/p&gt;
&lt;p&gt;　　https://blog.csdn.net/fly_zhyu/article/details/76408158&lt;/p&gt;
&lt;p&gt;　　https://www.cnblogs.com/wintersun/p/6219259.html&lt;/p&gt;

&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;spring boot&lt;/h2&gt;
&lt;p&gt; 　　Spring Boot不是一门新技术，所以不用紧张。从本质上来说，Spring Boot就是Spring,它做了那些没有它你也会去做的Spring Bean配置。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速运行起来。使用Spring Boot很容易创建一个独立运行（运行jar,内嵌Servlet容器）、准生产级别的基于Spring框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。&lt;/p&gt;
&lt;p&gt;　　这一部分博主不再追述，提供一些资料大家看看就好，能点进这篇博文的人这里默认你会一些的吧。&lt;/p&gt;


&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;spring cloud&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer's own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　spring cloud 提供一些工具迅速构建一些常用模式的分布式系统(例如 配置管理，服务发现，断路器，路由，微代理，控制总线，token，全局锁，分布式sessions，cluster state)，使用Spring Cloud开发人员可以快速站出实现这些模式的服务和应用程序。 他们可以在任何分布式环境中运行良好，包括开发人员自己的笔记本电脑，裸机数据中心和托管平台，如Cloud Foundry。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　来自spring cloud 官网的第一句介绍，spring cloud提供了一系列的工具去构建一套分布式系统，这些工具共同组成了一个微服务架构系统，注册中心、网关、provider、consumer、Rest、分布式锁、分布式session等等功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　spring cloud的学习资料整理：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　http://www.ityouknow.com/springcloud/2016/12/30/springcloud-collect.html     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　https://blog.csdn.net/forezp/article/details/70148833&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;注册中心&lt;/h2&gt;
&lt;p&gt; 　&lt;span&gt;　&lt;span&gt;&lt;strong&gt;eureka注册中心的搭建 博主使用IDEA搭建&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1首先创建一个空的maven项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627110237076-1557787132.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　填入参数：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627113819558-2032997501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627113834776-1229199864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　finish就ok&lt;/p&gt;

&lt;p&gt;　　finish后删除目录下src文件夹&lt;/p&gt;


&lt;p&gt;　　&lt;strong&gt;2.然后在cloud中新建module，右键根目录，选择new》module  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627113952861-459743664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　新建一个spring boot项目，并添加上eureka依赖&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627113356693-215737004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627111145567-1034070922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627122320653-1943449228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意content root的地址，在cloudDemo目录下的erueka&lt;/p&gt;

&lt;p&gt;点击finish，就生成了一个springboot项目，等待maven初始化完毕,此时的项目结构，和eureka的pom文件如下：&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627122409667-1449458915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　启动eureka注册中心的方式很简单，在springboot的启动类上加上注解&lt;/p&gt;
&lt;pre&gt;
@EnableEurekaServer
&lt;/pre&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627122940429-863554513.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后配置我们的spring boot启动：&lt;/p&gt;
&lt;p&gt;　　将resource下面的 application.properties文件改为application.yml文件并添加如下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: &lt;/span&gt;8801&lt;span&gt;

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http:&lt;/span&gt;//${eureka.instance.hostname}:${server.port}/eureka/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627123245108-1466479448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后启动项目访问localhost:8801，看到这个界面，Eureka注册中心就已经启动成功，接下来我们可以编写一个提供者，一个消费者。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627123440795-632349882.png&quot; alt=&quot;&quot; width=&quot;685&quot; height=&quot;358&quot;/&gt;&lt;/p&gt;

&lt;p&gt; spring cloud的消费者也可以是提供者，二者只有逻辑上的区别，它是链式的存在。在spring boot中有两种消费方式：&lt;/p&gt;
&lt;p&gt;　1.rest+ribbon&lt;/p&gt;
&lt;p&gt;　2.Feign&lt;/p&gt;
&lt;p&gt;接下来我们编写消费者&lt;/p&gt;
&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;rest+ribbon消费&lt;/h2&gt;
&lt;p&gt; 　　首先保持Eureka的启动不变，然后在cloudDemo下新建一个module 叫做ribbon，它也是spring boot结构：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627123844011-1957773046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627123934418-1788242032.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627124007059-1720411867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意我们要添加三个依赖，如上图红框依次选择即可。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627124041535-277983560.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一样，要注意content root的目录。&lt;/p&gt;
&lt;p&gt;　　创建完成后，编写springboot的启动类，首先加上 @ComponentScan 注解，然后添加 @EnableDiscoveryClient 注册服务，然后注入RestTemplate对象，&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　@LoadBalanced 表示开启负载均衡&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;　　完整的代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627131801835-603017765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
@EnableDiscoveryClient &lt;/span&gt;//&lt;span&gt;注册服务
@ComponentScan
public &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; RibbonApplication {

    public static void main(String[] args) {

        SpringApplication.run(RibbonApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }&lt;br/&gt;@Bean
    @Autowired
    @LoadBalanced
    RestTemplate restTemplate(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; new RestTemplate();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后我们创建一个测试用的service文件：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627124708252-177009494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627124924830-716376469.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
public &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloService {
    public String sayHello(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;helloWorld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; //&lt;span&gt; 提供一个hello World
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们再编写一个controller，提供一个hello的controller：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627130024958-182102964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; HelloService helloService;
    @GetMapping(&lt;/span&gt;&quot;/hello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHello(String name){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; helloService.sayHello() + &quot; &quot; +&lt;span&gt; name;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 然后我们再配置application.yml ， 一样的 将配置文件改为yml格式，然后输入配置：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;eureka:
  client:
    serviceUrl:
      defaultZone: http:&lt;/span&gt;//localhost:8801/eureka/&lt;span&gt;
server:
  port: &lt;/span&gt;8802&lt;span&gt;
spring:
  application:
    name: ribbon&lt;/span&gt;-provider
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后启动服务，启动后访问 localhost:8802/hello?name=zhangtaifeng ：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627130236919-1492415344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试完成，这个服务我们用他做服务提供者（provider），然后我们再重新建一个module，可以叫做 ribbon-consumer，整体配置一致，我们只需要修改service和controller部分（注意package）：&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627130505782-2144474957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后修改配置文件为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;eureka:
  client:
    serviceUrl:
      defaultZone: http:&lt;/span&gt;//localhost:8801/eureka/&lt;span&gt;
server:
  port: &lt;/span&gt;8803&lt;span&gt;
spring:
  application:
    name: ribbon&lt;/span&gt;-consumer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改了端口和应用名称。&lt;/p&gt;


&lt;p&gt;　然后复制上面的spring boot入口文件代码，复制service和controller文件，依然 注意包名和路径，然后修改HelloService：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627131234883-935888665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们启动应用看看：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627132032097-656871519.png&quot; alt=&quot;&quot; width=&quot;769&quot; height=&quot;370&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RestTemplate成功调用了8802端口上的provider。&lt;/p&gt;
&lt;p&gt;到了这里，相信大家对spring cloud调用服务有了一定的了解，cloud通过rest调用服务进行服务间的通信，每一个controller的方法对外提供对应的服务接口。相比较dubbo的rpc调用有一些不一样的优势，同时它的开发方式更简单，配合zuul网关的使用能够达到更好的效果。&lt;/p&gt;
&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;Feign消费&lt;/h2&gt;
&lt;p&gt; feign消费是通过注解的方式进行的消费模式，它默认打开了负载均衡，还是在cloudDemo下创建一个module，名字叫feign：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627133500503-1638397697.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627133542095-959590662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意引用的包。&lt;/p&gt;
&lt;p&gt;创建完成，首先编写入口文件,主要是加上&lt;/p&gt;
&lt;pre&gt;
@EnableDiscoveryClient
&lt;/pre&gt;
&lt;pre&gt;
@EnableFeignClients
&lt;/pre&gt;
&lt;p&gt;　　这两个注解，用于注册和发现服务。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627133628511-1495757125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们在目录下新建一个service，controller，或者从前面的工程复制，另外需要新建一个rpc文件夹，然后在rpc下新建一个GetHello接口：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627134146872-1950425040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;编写访问rpc的方法，使用feign调用更加简便，添加@FeignClient注解即可，value的意思就是目标服务器，可以直接用yml中配置的application名称，完整代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@FeignClient(value = &quot;ribbon-consumer&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; GetHello {
    @RequestMapping(value &lt;/span&gt;= &quot;/hello?name=feign&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHello();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再改造下service代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627134451198-1646964487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; GetHello getHello; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注入rpc&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHello(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getHello.sayHello(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提供一个hello World&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后还是修改application.yml文件，配置大致相同，修改应用名和端口，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;eureka:
  client:
    serviceUrl:
      defaultZone: http:&lt;/span&gt;//localhost:8801/eureka/&lt;span&gt;
server:
  port: &lt;/span&gt;8804&lt;span&gt;
spring:
  application:
    name: feign&lt;/span&gt;-consumer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们启动这个工程看看有什么效果，注意，这所有的步骤，前面的服务都没有关闭噢：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627134738516-524961106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/893115/201806/893115-20180627134950747-637815066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动后效果如图。&lt;/p&gt;


&lt;h2 id=&quot;w1&quot; class=&quot;wtitle&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;　　代码已传至我的github，大家可以下载查看。&lt;/p&gt;
&lt;p&gt;　　&lt;a title=&quot;下载文件地址&quot; href=&quot;https://github.com/294678380/cloudDemo&quot; target=&quot;_blank&quot;&gt;下载文件地址&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;　　从这里看，spring cloud将我们的几个应用串联起来，各个服务之间互相通过restAPI调用，我觉得Feign要优于ribbon，另外Eureka注册中心也可以换成zookeeper或者consul，我目前使用consul。&lt;/p&gt;
&lt;p&gt;　　spring cloud东西非常多，慢慢看，大家一起进步，谢谢。&lt;/p&gt;
&lt;p&gt;　　有什么问题环境大家评论区交流。&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 06:15:00 +0000</pubDate>
<dc:creator>张泰峰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ztfjs/p/9230374.html</dc:identifier>
</item>
<item>
<title>使用 SonarQube 来分析 NetCore 项目代码问题 - myzony</title>
<link>http://www.cnblogs.com/myzony/p/9233667.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myzony/p/9233667.html</guid>
<description>&lt;h2 id=&quot;介绍&quot;&gt;0.介绍&lt;/h2&gt;
&lt;p&gt;Sonar 是一款开源的代码分析工具，可能有很多人已经用过，本篇文章主要是讲解如何在 Docker 里面安装 Sonar 并且用其来分析 .Net Core 项目。&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Sonar 是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。&lt;/p&gt;
&lt;p&gt;与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;1.安装&lt;/h2&gt;
&lt;p&gt;安装的话，秉承一贯的懒人原则，在本篇文章当中是直接使用的 Sonar 的 Docker 镜像来进行安装配置的。&lt;/p&gt;
&lt;h3 id=&quot;安装-docker&quot;&gt;1.1 安装 Docker&lt;/h3&gt;
&lt;p&gt;安装 Docker-CE 的教程在我的&lt;strong&gt;&lt;a href=&quot;https://www.cnblogs.com/myzony/p/9071210.html&quot;&gt;这篇文章&lt;/a&gt;&lt;/strong&gt;里面有讲到过，这里就不再多加赘述。&lt;/p&gt;
&lt;h3 id=&quot;建立私有网络&quot;&gt;1.2 建立私有网络&lt;/h3&gt;
&lt;p&gt;执行以下命令：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker network create sonar&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将会创建一个 Docker 内部网络，名字为 sonar。&lt;/p&gt;
&lt;h3 id=&quot;启动-postgresql-容器&quot;&gt;1.2 启动 PostgreSql 容器&lt;/h3&gt;
&lt;p&gt;使用以下命令拉取 &lt;strong&gt;PostgreSql&lt;/strong&gt; 的镜像：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker pull postgres&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们启动一个 &lt;strong&gt;PostgreSql&lt;/strong&gt; 容器，名字叫做 sonar-db。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker run -d --name sonar-db --network sonar -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar postgres&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里启动容器的时候指定了容器的网络是 sonar-db ，那么后面在 sonar 容器启动的时候加入这个网络即可，其余两个环境变量是用作 &lt;strong&gt;PostgreSql&lt;/strong&gt; 数据库默认的账号密码。&lt;/p&gt;
&lt;h3 id=&quot;启动-sonar-容器&quot;&gt;1.3 启动 Sonar 容器&lt;/h3&gt;
&lt;p&gt;使用以下命令拉取 Sonar 镜像：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker pull sonarqube&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动 Sonar 容器：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker run -d --name sonar --network sonar -p 9000:9000 -p 9092:9092 -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -e SONARQUBE_JDBC_URL=jdbc:postgresql://sonar-db:5432/sonar sonarqube&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，我们的 Sonar 已经部署完成了，访问你服务器或者本地 IP 的 9000 端口即可看到我们最终的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180627141331801-1760710384.png&quot; alt=&quot;效果图&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意：在这里我们没有针对这两个容器进行数据卷挂载，挂载可以参考下列 YML 文件进行自己的配置，推荐在实际生产环境部署的时候使用 Docker-Compose 来进行部署。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;扩展使用-docker-compose-来运行-sonar&quot;&gt;1.3：扩展：使用 Docker-Compose 来运行 Sonar&lt;/h3&gt;
&lt;p&gt;如果你每次都需要手动输入这么多命令，其实很麻烦的，在 Sonar 官方的 &lt;strong&gt;&lt;a href=&quot;https://github.com/SonarSource/docker-sonarqube/blob/master/recipes.md&quot;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; 上面有一个 docker-compose.yml 文件，你直接通过 Docker-Compose 就可以运行好环境的。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;version: &quot;2&quot;

services:
  sonarqube:
    image: sonarqube
    ports:
      - &quot;9000:9000&quot;
    networks:
      - sonarnet
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins

  db:
    image: postgres
    networks:
      - sonarnet
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - postgresql_data:/var/lib/postgresql/data

networks:
  sonarnet:
    driver: bridge

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  postgresql:
  postgresql_data:&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将其保存到你的 Linux 服务器上，运行以下命令：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker-compose up&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果需要重启的话则运行以下命令即可：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;docker-compose restart sonarqube&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;新建项目&quot;&gt;1.4 新建项目&lt;/h3&gt;
&lt;p&gt;Sonar 镜像安装的默认管理员账号和密码都是 admin，直接输入进入到 Sonar 的项目管理界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180627141330020-673812879.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先输入你的项目名称，生成一个 Token。&lt;/li&gt;
&lt;li&gt;点击生成之后，点击 Continue ，这时候会提示你选择项目类型，并输入一个项目的唯一 Key，这里我还是输入的 TestProject。&lt;/li&gt;
&lt;li&gt;点击 Done 之后右边会生成相关的 Scanner 执行步骤，你可以 Copy 下来。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;分析&quot;&gt;2.分析&lt;/h2&gt;
&lt;p&gt;如果你需要分析项目的话，有两种选择，第一种就是使用工具1，而如果你是拥有 DotNet Core 2.1 环境的话可以使用 Global Tool 来直接安装分析器。&lt;/p&gt;
&lt;h3 id=&quot;安装-dotnet-scanner&quot;&gt;2.1 安装 dotnet scanner&lt;/h3&gt;
&lt;p&gt;参照 &lt;a href=&quot;https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild&quot;&gt;Sonar 官方的文档&lt;/a&gt; ，运行命令行工具，并且键入以下命令：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;dotnet tool install --global dotnet-sonarscanner --version 4.3.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就成功安装好 Sonar Scanner 了。&lt;/p&gt;
&lt;h3 id=&quot;分析项目&quot;&gt;2.2 分析项目&lt;/h3&gt;
&lt;p&gt;跳转到你需要分析的项目的根目录，这里我新建了一个测试用的控制台程序，代码很简单，传入了一个 NULL 对象，并且判断这个变量不等于空。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using System;

namespace TestConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            string c = null;
            if (c != null)
            {
                Console.WriteLine(&quot;不可能执行的代码.&quot;);
            }

            Console.WriteLine(&quot;Hello World!&quot;);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在命令行工具当中分步执行以下命令：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;dotnet sonarscanner begin /k:&quot;TestProject&quot; /d:sonar.host.url=&quot;http://192.168.100.107:9000&quot; /d:sonar.login=&quot;cfe594fd605f2e4821835e43c69da82e489c2f23&quot;
dotnet build
dotnet sonarscanner end /d:sonar.login=&quot;cfe594fd605f2e4821835e43c69da82e489c2f23&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的 /k 指定你的项目，/d 这些参数分别是你 Sonar 的地址与你刚才生成的 Token。&lt;/p&gt;
&lt;p&gt;动图在这里：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180627141321764-548451361.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看结果&quot;&gt;2.3 查看结果&lt;/h3&gt;
&lt;p&gt;现在来到 Sonar 的站点就可以看到我们刚刚分析的结果啦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180627141320436-938920550.png&quot; alt=&quot;1530079707597&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到说我有一个 BUG。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180627141319796-1864234526.png&quot; alt=&quot;1530079727905&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;3.结语&lt;/h2&gt;
&lt;p&gt;后面会分享如何与 Jenkins + Git(Gogs) 来进行集成的。&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 06:15:00 +0000</pubDate>
<dc:creator>myzony</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myzony/p/9233667.html</dc:identifier>
</item>
<item>
<title>Identity Server 4 预备知识 -- OpenID Connect 简介 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/9231219.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/9231219.html</guid>
<description>&lt;p&gt;我之前的文章简单的介绍了OAuth 2.0 (在这里: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9221488.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/9221488.html&lt;/a&gt;), 还不是很全.&lt;/p&gt;
&lt;p&gt;这篇文章我要介绍一下 OpenID Connect.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;OAuth 2.0 不是身份认证(Authentication)协议&lt;/strong&gt;&lt;/span&gt;. 为什么有人会认为OAuth 2.0具有身份认证的功能? 这是因为OAuth2经常作为身份认证(Authentication)协议的一部分来使用. 例如在典型的OAuth2流程里, OAuth2经常会嵌入一些身份认证的事件.&lt;/p&gt;
&lt;p&gt;那么&lt;span&gt;&lt;strong&gt;身份认证(Authentication)&lt;/strong&gt;&lt;/span&gt;是什么?&lt;/p&gt;
&lt;p&gt;我们这里所说的身份认证就是指它可以告诉应用程序当前的用户是谁, 还有这些用户是否正在使用你的应用程序. 它是一种安全架构, 它可以告诉你用户是他们所声明的身份, 通常呢, 是通过提供一套安全凭据(例如用户名和密码)给应用程序来证明这一点.&lt;/p&gt;
&lt;p&gt;而OAuth2则不管用户这些东西, OAuth2的客户端应用只考虑请求token, 得到token, 使用token访问API. 它不关心谁给客户端应用授权了, 也不关心是否有最终用户.\&lt;/p&gt;


&lt;p&gt;引用《OAuth 2.0 in Action》里面的一个比喻来解释, 把&lt;span&gt;&lt;strong&gt;&lt;span&gt;身份认证&lt;/span&gt;看作是软糖&lt;/strong&gt;&lt;/span&gt;, 而&lt;span&gt;&lt;strong&gt;&lt;span&gt;授权&lt;/span&gt;是巧克力&lt;/strong&gt;&lt;/span&gt;. 这两种东西感觉略有相似, 但是本质上却截然不同: &lt;span&gt;&lt;strong&gt;巧克力是一种原料&lt;/strong&gt;&lt;/span&gt;, 而&lt;span&gt;&lt;strong&gt;软糖是一种糖果&lt;/strong&gt;&lt;/span&gt;. 可以使用巧克力作为主要原料做出巧克力口味的糖果, 但是巧克力和软糖绝不是等价的.&lt;/p&gt;
&lt;p&gt;尽管巧克力可以单独作为一种最终产品, 但在这个比喻里巧克力是一种非常有用原料, 它极具多样性, 可以用来做蛋糕, 冰激凌, 雪糕等等.&lt;/p&gt;

&lt;p&gt;在这个比喻里 &lt;strong&gt;OAuth 2.0&lt;/strong&gt; 就是巧克力, 它&lt;strong&gt;是众多web安全架构的一种多用途的基本成分&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;而软糖, 是一种糖果. 有一种特别可口的软糖叫做巧克力软糖. 很显然, 巧克力在这种软糖里是主要成分, 但是它还需要其它原料成分和一些关键的流程把巧克力转化成巧克力软糖.&lt;/p&gt;
&lt;p&gt;制做出的产品是软糖的形式, 它以巧克力为主要成分. 这叫使用巧克力来制作软糖, 所以说巧克力不等价于软糖.&lt;/p&gt;
&lt;p&gt;在这个比喻里, &lt;strong&gt;身份认证&lt;/strong&gt;就更像软糖, 它需要一些关键的组件和流程, 而却要把这些组件和流程通过正确的组合起来并安全的使用, 针对这些组件和流程还是有很多的选项的.&lt;/p&gt;
&lt;p&gt;可以说我们要制作巧克力软糖, 也就是需要一个基于OAuth2的身份认证协议. 而OpenID Connect就是这样的开放标准, 它可以工作于不同的身份供应商之间. &lt;strong&gt;OpenID Connect 基于 OAuth 2.0, 在此之上, 它添加了一些组件来提供身份认证的能力&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;OpenID Connect的官方定义是: &lt;strong&gt;OpenID Connect是建立在OAuth 2.0协议上的一个简单的身份标识层, OpenID Connect 兼容 OAuth 2.0&lt;/strong&gt;. &lt;/p&gt;


&lt;p&gt;想要基于OAuth2构建身份认证协议, 那么就需要把OAuth2里面的那些角色映射到身份认证的事务里面.&lt;/p&gt;
&lt;p&gt;在OAuth2里面, 资源所有者(Resource Owner)和客户端应用(Client)经常在一起工作, 因为客户端应用代表了资源所有者. 而授权服务器(Authorization Server)和被保护的资源(Protected Resource)经常在一起, 因为授权服务器生成token, 而被保护的资源接收token. 所以说在最终用户/客户端应用 与 授权服务器/被保护资源 之前存在一个安全和信任的边界, 而OAuth2就是用来跨越这个边界的协议.&lt;/p&gt;
&lt;p&gt;而在身份认证的事务里, 最终用户使用&lt;span&gt;&lt;strong&gt;身份提供商(Identity Provider, IdP)&lt;/strong&gt;&lt;/span&gt;登录到&lt;span&gt;&lt;strong&gt;依赖方(Relying Party, RP&lt;/strong&gt;&lt;/span&gt;, 可以理解为客户端).&lt;/p&gt;
&lt;p&gt;总结一下前面这段话:&lt;/p&gt;
&lt;p&gt;OAuth2里可以分为两部分: 1.资源所有者/客户端应用, 2.授权服务器/被保护资源.&lt;/p&gt;
&lt;p&gt;身份认证协议里也是两大部分: 1.依赖方, 2.身份提供商.&lt;/p&gt;
&lt;p&gt;所以考虑这样映射:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;OAuth2里的授权服务器/被保护资源 ---- 身份认证协议里的身份提供商进行映射&lt;/li&gt;
&lt;li&gt;OAuth2里面的资源所有者 ---- 身份认证协议里的最终用户&lt;/li&gt;
&lt;li&gt;OAuth2的客户端应用 ---- 身份认证协议里的依赖方(RP).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201806/986268-20180627093527840-1788966484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OAuth2里, 资源所有者的权限会委派给客户端应用, 但这时该权限对应的被保护资源就是他们自己的身份信息. 也就是说他们授权给依赖方(RP), 让其可以知道现在是谁在使用应用, 而这就是身份认证事务本质.&lt;/p&gt;
&lt;p&gt;依赖方现在就可以知道是谁在使用系统并且他们是如何登录进来的. 不过这里还需要用到另外一种token, 叫做ID token, 这种token携带着身份认证事件本身的信息.&lt;/p&gt;
&lt;p&gt;那么为什么不使用OAuth2里的access token把这些事都一次性解决了呢? &lt;/p&gt;
&lt;p&gt;因为首先access token不含有任何关于身份认证的信息; 其次access token的生命期可能会非常的长, 即使用户离开了它仍有可能有效, 它还有可能被用于无最终用户参与的情况; 还有一种情况就是access token可能会被其它的客户端应用借用. 所以, 无论客户端是如何得到的access token, 它都无法从access token里得到最终用户的信息以及最终用户的身份认证状态.&lt;/p&gt;
&lt;p&gt;在OAuth2里, access token不是为客户端准备的, 它对于客户端应该是不透明的, 但是客户端也需要从access token得到一些用户信息. 实际上客户端应用只是access token的展示者, access token真正的目标观众是被保护的资源.&lt;/p&gt;
&lt;p&gt;在OpenID Connect里, 这个第二个叫做ID Token, 它会和access token一同发送给客户端应用.&lt;/p&gt;


&lt;p&gt;OpenID Connect是由OpenID基金会于2014年发布的一个开放标准, 简单的说就是, 它使用OAuth2来进行身份认证. OpenID Connect直接构建于OAuth2.0的基础之上, 与其兼容. 通常OpenID Connect是和OAuth2一同部署来使用的.&lt;/p&gt;

&lt;p&gt;OpenID Connect的整体抽象流程如下图所示: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201806/986268-20180627101906559-326862209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1. 依赖发(RP)发送请求到OpenID提供商(OP, 也就是身份提供商).&lt;/p&gt;
&lt;p&gt;2. OpenID提供商验证最终用户的身份, 并获得了用户委派的授权&lt;/p&gt;
&lt;p&gt;3. OpenID提供商返回响应, 里面带着ID Token, 也通常带着Access Token.&lt;/p&gt;
&lt;p&gt;4. 依赖方现在可以使用Access Token发送请求到用户信息的端点.&lt;/p&gt;
&lt;p&gt;5. 用户信息端点返回用户的声明(claims, 相当于是用户的信息).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OpenID Connect的ID Token 和用户信息端点以后在使用Identity Server 4的时候在进行介绍.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;身份认证&lt;/h2&gt;
&lt;p&gt;OpenID Connect 会负责身份认证这个动作, 也就是把最终用户登录到系统, 或者判断最终用户是否已经登录了. OpenID Connect会通过一种安全的方式从服务器把身份认证的结果返回给客户端, 这样客户端就可以依赖于它了. 也是因为这个原因, 客户端被称为了依赖方(RP). 这个身份认证的结果就是ID Token.&lt;/p&gt;
&lt;p&gt;OpenID Connect身份认证有三个路径(三个流程, flow): &lt;span&gt;&lt;strong&gt;Authorization Code 流程&lt;/strong&gt;&lt;/span&gt;, &lt;span&gt;&lt;strong&gt;Implicit 流程&lt;/strong&gt;&lt;/span&gt;, &lt;span&gt;&lt;strong&gt;Hybrid 流程&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;Authorization Code Flow&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在Authorization Code 流程里, 一个授权码(Authorization Code)会被返回给客户端. 这个授权码可以被直接用来交换ID Token和Access Token. 该流程也可以在客户端使用授权码兑换Access Token之前对其身份认证. 但是该流程要求客户端的身份认证动作在&lt;strong&gt;后台&lt;/strong&gt;使用client id和secret来获得tokens, 这样就不会把tokens暴露给浏览器或其它可访问浏览器的恶意应用了.&lt;/p&gt;
&lt;p&gt;这种流程要求客户端应用可以安全的在它和授权服务器之间维护客户端的secret, 也就是说只适合这样的客户端应用.&lt;/p&gt;
&lt;p&gt;它还适合于长时间的访问(通过refresh token).&lt;/p&gt;
&lt;p&gt;Authorization Code流程的授权码来自于授权端点, 而所有的tokens都来自于Token端点. &lt;/p&gt;
&lt;p&gt;Authorization Code流程的步骤如下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端准备身份认证请求, 请求里包含所需的参数&lt;/li&gt;
&lt;li&gt;客户端发送请求到授权服务器&lt;/li&gt;
&lt;li&gt;授权服务器对最终用户进行身份认证&lt;/li&gt;
&lt;li&gt;授权服务器获得最终用户的同意/授权&lt;/li&gt;
&lt;li&gt;授权服务器把最终用户发送回客户端, 同时带着授权码&lt;/li&gt;
&lt;li&gt;客户端使用授权码向Token端点请求一个响应&lt;/li&gt;
&lt;li&gt;客户端接收到响应, 响应的body里面包含着ID Token 和 Access Token&lt;/li&gt;
&lt;li&gt;客户端验证ID Token, 并获得用户的一些身份信息.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;span&gt;Implicit Flow&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Implicit流程在请求token的时候不需要明确的客户端身份认证, 它使用重定向URI的方式来验证客户端的身份. 因为这一点, refresh token也就无法使用了, 这同样也不适合于长时间有效的access token.&lt;/p&gt;
&lt;p&gt;在Implicit流程里, 所有的tokens都来自于授权端点, 而Token端点并没有用到.&lt;/p&gt;
&lt;p&gt;该流程主要用于浏览器内的应用, Access Token和ID Token一同被直接返回给客户端. 因为这个原因, 这些tokens也会暴露于最终用户和可以访问该浏览器的其它应用了. &lt;/p&gt;
&lt;p&gt;它并不适合于长时间的访问.&lt;/p&gt;
&lt;p&gt;Implicit流程的步骤如下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端准备身份认证请求, 请求里包含所需的参数&lt;/li&gt;
&lt;li&gt;客户端发送请求到授权服务器&lt;/li&gt;
&lt;li&gt;授权服务器对最终用户进行身份认证&lt;/li&gt;
&lt;li&gt;授权服务器获得最终用户的同意/授权&lt;/li&gt;
&lt;li&gt;授权服务器把最终用户发送回客户端, 同时带着ID Token. 如果也请求了Access Token的话, 那么Access Token也会一同返回.&lt;/li&gt;
&lt;li&gt;客户端验证ID Token, 并获得用户的一些身份信息.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;span&gt;Hybrid Flow&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Hybrid流程是前两者的混合, 在该流程里, 有一些tokens和授权码来自于授权端点, 而另外一些tokens则来自于Token端点.&lt;/p&gt;
&lt;p&gt;该流程允许客户端立即使用ID Token, 并且只需要一次往返即可获得授权码.&lt;/p&gt;
&lt;p&gt;这种流程也要求客户端应用可以安全的维护secret.&lt;/p&gt;
&lt;p&gt;它也适合于长时间的访问.&lt;/p&gt;
&lt;p&gt;Hybrid流程的步骤如下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端准备身份认证请求, 请求里包含所需的参数&lt;/li&gt;
&lt;li&gt;客户端发送请求到授权服务器&lt;/li&gt;
&lt;li&gt;授权服务器对最终用户进行身份认证&lt;/li&gt;
&lt;li&gt;授权服务器获得最终用户的同意/授权&lt;/li&gt;
&lt;li&gt;授权服务器把最终用户发送回客户端, 同时带着授权码, 根据响应类型的不同, 也可能还带着一个或者多个其它的参数.&lt;/li&gt;
&lt;li&gt;客户端使用授权码向Token端点请求一个响应&lt;/li&gt;
&lt;li&gt;客户端接收到响应, 响应的body里面包含着ID Token 和 Access Token&lt;/li&gt;
&lt;li&gt;客户端验证ID Token, 并获得用户的一些身份信息.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;三种流程特点的比较:&lt;/h3&gt;
&lt;table class=&quot;full&quot; border=&quot;0&quot; cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt; &lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Authorization Code Flow&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Implicit Flow&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Hybrid Flow&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;所有的tokens都来自于授权端点&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;所有的tokens都来自于Token端点&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Tokens对浏览器隐藏&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;客户端可以被认证&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;可以使用Refresh Token&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;只需一次往返通信&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;大部分通信都是服务器对服务器&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;yes&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;no&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;看情况&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;返回类型值的比较: &lt;/h3&gt;
&lt;table class=&quot;full&quot; border=&quot;0&quot; cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; align=&quot;center&quot;&gt;&lt;colgroup&gt;&lt;col align=&quot;left&quot;/&gt;&lt;col align=&quot;left&quot;/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;&quot;response_type&quot; 的值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Flow&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;&lt;tt&gt;code&lt;/tt&gt; &lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Authorization Code Flow&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;&lt;tt&gt;id_token&lt;/tt&gt; &lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Implicit Flow&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;&lt;tt&gt;id_token token&lt;/tt&gt; &lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Implicit Flow&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;&lt;tt&gt;code id_token&lt;/tt&gt; &lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Hybrid Flow&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;&lt;tt&gt;code token&lt;/tt&gt; &lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Hybrid Flow&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;&lt;tt&gt;code id_token token&lt;/tt&gt; &lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Hybrid Flow&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;本文就简单介绍这些, OAuth 2.0 和 OpenID Connect 其余涉及到的内容会在后续Identity Server 4的系列文章里介绍.&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 06:12:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/9231219.html</dc:identifier>
</item>
<item>
<title>.NET Core Community 第三个千星项目诞生：爬虫 DotnetSpider - 某个人。</title>
<link>http://www.cnblogs.com/forerunner/p/ncc-dotnetspider-with-over-thousand-stars.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/forerunner/p/ncc-dotnetspider-with-over-thousand-stars.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/498413/201806/498413-20180627011300901-273724376.jpg&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5.0470588235294&quot;&gt;
&lt;p&gt;本文所有打赏将全数捐赠于 NCC（NCC 的资金目前由 &lt;a href=&quot;https://github.com/liuhaoyang&quot;&gt;倾竹大人&lt;/a&gt; 负责管理），请注明捐赠于 NCC。捐赠情况将由倾竹大人&lt;a href=&quot;https://github.com/dotnetcore/home/blob/master/Statement-of-Income-and-Expense.md&quot;&gt;在此处公示&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DotnetSpider 至力于打造一个轻量化、高效率、易开发、可管理的一体化爬虫框架。它的核心要素是URL调度、基本的网页内容下载器、基于爬虫实体类的爬虫实现模式、常用数据库的支持、多线程的支持、状态的监控、运行日志、网页端管理。&lt;/p&gt;
&lt;p&gt;DotnetSpider 具有相当高的可定制性，支持包括 MSSQL、MySQL、PostgreSQL、MongoDB 在内的多种数据库，文档（目录？）齐全，样例丰富、通俗易懂，同时还自带了 Web Manager（依赖于作者的另一个项目 Scheduler.NET）&lt;/p&gt;
&lt;p&gt;项目：&lt;a href=&quot;https://github.com/dotnetcore/DotnetSpider&quot; class=&quot;uri&quot;&gt;https://github.com/dotnetcore/DotnetSpider&lt;/a&gt;&lt;br/&gt;Web Manager：&lt;a href=&quot;https://github.com/zlzforever/DotnetSpider.Hub&quot; class=&quot;uri&quot;&gt;https://github.com/zlzforever/DotnetSpider.Hub&lt;/a&gt;&lt;br/&gt;Scheduler.NET：&lt;a href=&quot;https://github.com/zlzforever/Scheduler.NET&quot; class=&quot;uri&quot;&gt;https://github.com/zlzforever/Scheduler.NET&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;授权：GPL-3.0&lt;br/&gt;Wiki：&lt;a href=&quot;https://github.com/dotnetcore/DotnetSpider/wiki&quot; class=&quot;uri&quot;&gt;https://github.com/dotnetcore/DotnetSpider/wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：Zlzforever&lt;br/&gt;GitHub：&lt;a href=&quot;https://github.com/zlzforever&quot; class=&quot;uri&quot;&gt;https://github.com/zlzforever&lt;/a&gt;&lt;br/&gt;QQ群：477731655&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;DotnetSpider 自加入 NCC 起始终坚持不懈的更新、完善，作者帅气、为人风趣幽默；项目日趋成熟、追求完美，于 2018 年 5 月下旬成为 NCC 第三个星数破千的项目，值得祝贺。为此，经 NCC 授权，由 AlexLEWIS 赠送 DotnetSpider 作者 Zlzforever 先生图书一本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/498413/201806/498413-20180627010346795-1949801883.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一本游戏力，祝你家小萝莉健康茁壮成长。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本项目的作者将在 6 月 30 日 NCC 小聚会上做专题演讲《大话网络爬虫》。&lt;/p&gt;
&lt;p&gt;演讲将采用录播方式，在事后为大家奉上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/498413/201806/498413-20180627010520036-1344535291.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/498413/201806/498413-20180627010529449-1449040995.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;如果您有项目想加入我们，欢迎来 &lt;a href=&quot;http://github.com/dotnetcore/home&quot; class=&quot;uri&quot;&gt;http://github.com/dotnetcore/home&lt;/a&gt; 提请：）&lt;/p&gt;
&lt;blockquote readability=&quot;5.0470588235294&quot;&gt;
&lt;p&gt;本文所有打赏将全数捐赠于 NCC（NCC 的资金目前由 &lt;a href=&quot;https://github.com/liuhaoyang&quot;&gt;倾竹大人&lt;/a&gt; 负责管理），请注明捐赠于 NCC。捐赠情况将由倾竹大人&lt;a href=&quot;https://github.com/dotnetcore/home/blob/master/Statement-of-Income-and-Expense.md&quot;&gt;在此处公示&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 27 Jun 2018 05:23:00 +0000</pubDate>
<dc:creator>某个人。</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/forerunner/p/ncc-dotnetspider-with-over-thousand-stars.html</dc:identifier>
</item>
<item>
<title>一个程序员的自白（执行陷阱） - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/9233384.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/9233384.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201806/758472-20180627124521279-712119538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“自我认同”是他近期较大的一个进步，对外界认同的向往以及非事实信息的过滤让他逐渐得到了一些真正意义上的“自我放空与把控”。“放空”确实让他得到了一些情绪上的平复，但短暂的平复过后，迎面而来的却是一堆实实在在且无法规避的“客观”挑战。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;他曾经是一个不折不扣的好“演员”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;“我们每个人都是自己人生的主角”，我想这句话无可非议。包括“自我认同”无非也就是把这个“主角”的意义追加落实而已。他曾经在“自我认同”当中有过一定“自以为是”的风险担忧，但他的这种担忧不无道理，因为积极的“认同”需要一定的认知和自控能力，但“自我认同”又是认知和自控能力提升的有效渠道，感觉有点“明知山有虎，偏向虎山行”之意。对“认知”的需要，是因为他意识到自己的角色戏份全都由他自己所编剧，也就是所谓的自导自演。如果他无法认清自己真正所想，也就无法编剧他真正所演。如果他的认知能力稍弱，一部仗义的电影或一段悲催的故事即可让他那潜在的“英雄主义”或“怜悯同情”扰乱了他自身理性的思绪而深陷其中，把“别人”的剧情演绎在在自己的人生当中，最可怕的就是那些“以假乱真”的戏份而衍生出所谓“道德”的力量控制着自己，一堆堆看似“有道理”的借口由心所生，对真正的“自我执行”宣告挑战。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201806/758472-20180627124602090-870127050.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;他曾经确实是一个“自以为是”的人&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;我发现一个这样普遍存在的“事实”，在人性“自尊心”的影响下，“公共场合”所表达的事实性存在严重的“水分”，而“水分”的严重性还得视不同人而言。从“行为学”维度看，这可能是一种社交行为所需，从“经济学”维度看，这可能是市场需要。但对他而言，可能又是一个潜在的“执行障碍”。在“面子”的驱动下，他时常“识少少扮代表”；在“机会”的诱惑之下，他不曾把别人的故事加以修饰去演绎自己的成功；在“生活”的烦扰之下，他竟然自以为是地给自己制造“弥补”借口去躲避那根本无法弥补的人生欠缺。深陷其中的他已经无法理性判断当前的所言所行是否正确，他只知道这些行为的背后可以让他得到些许短暂的感官刺激，如果这些短暂的感官刺激造成了长远的遗憾，我想这就叫“短视”或“冲动”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201806/758472-20180627124631392-1205382327.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;他曾经是一个活在“眼下”的人&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;他曾经的这些“短视”或“冲动”，可能源于他对“眼下”的局限，就像对于一个“不吃就是世界末日”的吃货来说，眼前只能看到食物能带给他短暂的“愉悦”，但却看不到健硕身形的背后那经久不衰的自信所带来一些列持久的高级享受。他也曾经一度陷入迷茫而极度向往那美好的“田园风光”，甚至持续了一股“退城还乡”的势头。这一系列的非理性思考完全源于他“看得见”的影响，而忽略了那些“看不见”的背后。“看得见”与“看不见”隐藏着一种对立关系，一味对“看得见”的追求而忽略了对“看不见”思考，就算他住进了乡村别墅，一样感受不到与“大城竞争”对立存在的“内心休养”。当然，这些都是他曾经的迷惑和困扰，但并非不复存在，如果一场“说走就走”能弥补他那些“看不见”的缺失，我想我会立刻裸奔“旅游业”。我想人与人之间差别的大小，可能就是对这些“看不见”阴影面积“可视化”的大小。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot; readability=&quot;6&quot;&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201806/758472-20180627124656562-465705749.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;他曾经是一个“勤奋”的人，现在还是......&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 社会需要进步，观念同样需要进步，就像“勤奋”一样，已经慢慢跨出了“褒义”的边界。一个勤奋的人可能会被认为这是一种“执行力”的象征，但事实上，“勤奋”正在慢慢吞噬他的执行力。勤奋的他不舍得让自己有过多的空闲，因为“勤奋”能让他执行力倍增；而且“勤奋”能让他脱颖而出，最重要的“勤奋”能让他倍感踏实。其实，这都是他受传统影响自以为是的“观念”。现实中，“勤奋”给他落下了常见的“颈椎问题”，只可惜他潜意识地把“常见”=“应该”，任凭“勤奋”的主宰直至其对日常的影响才慢慢有所觉悟；“勤奋”让他陷入了“贫穷”，掩盖了他发掘“看不见”的视野，让时间都消耗在同一层面的努力上而陷入“低级勤奋”的旋涡；更致命的是，“勤奋”还在横行霸道。在这样一个“自我价值实现机会”暴涨的年代，可能“浪费”、“偷懒”以及“好玩”才是当代的真正道理所在，或许一直都是。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201806/758472-20180627124749855-1167742975.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样看来，他还需要在“非物理性”事物思考和自身观念重洗与重写的努力上还要更加勤奋了……&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 27 Jun 2018 05:14:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/9233384.html</dc:identifier>
</item>
<item>
<title>深入出不来nodejs源码-V8引擎初探 - 书生小龙</title>
<link>http://www.cnblogs.com/QH-Jimmy/p/9212923.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/QH-Jimmy/p/9212923.html</guid>
<description>&lt;p&gt;　　原本打算是把node源码看得差不多了再去深入V8的，但是这两者基本上没办法分开讲。&lt;/p&gt;
&lt;p&gt;　　与express是基于node的封装不同，node是基于V8的一个应用，源码内容已经渗透到V8层面，因此这章简述一下我目前理解的V8引擎吧。&lt;/p&gt;
&lt;p&gt;　　首先需要理解的是V8是一个JS代码运行平台，可以将JS代码编译执行。&lt;/p&gt;
&lt;p&gt;　　本节就非常浅显的讲一下V8内部一些常见类，以及一个运行JS代码的简单demo。&lt;/p&gt;
&lt;p&gt;　　（由于研究V8引擎原理的人非常多，本人学识浅薄，可以去参考别人的博客）&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;　　1、很多大佬的博客&lt;/p&gt;
&lt;p&gt;　　2、V8引擎API文档：https://v8docs.nodesource.com/&lt;/p&gt;
&lt;p&gt;　　3、github：https://github.com/v8/v8&lt;/p&gt;

&lt;p&gt;　　本节先列举一些核心类，示例代码大部分来源于node中的源码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Isolate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　该类代表一个V8引擎实例，有自己独立的状态，用法如下。&lt;/p&gt;
&lt;p&gt;1、不能使用new关键字来生成一个实例，只能通过类方法Isolate::New(params)来创建。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Isolate* &lt;span&gt;const&lt;/span&gt; isolate = Isolate::New(&lt;span&gt;params&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、该类的方法都是设置V8引擎的一些处理细节。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加error的信息监听器&lt;/span&gt;
isolate-&amp;gt;&lt;span&gt;AddMessageListener(OnMessage);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从名字能看出来 设置未捕捉中断异常的回调函数&lt;/span&gt;
isolate-&amp;gt;&lt;span&gt;SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置Microtask的执行方式(有三种)&lt;/span&gt;
isolate-&amp;gt;&lt;span&gt;SetMicrotasksPolicy(v8::MicrotasksPolicy::kExplicit);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置致命错误的回调函数&lt;/span&gt;
isolate-&amp;gt;&lt;span&gt;SetFatalErrorHandler(OnFatalError);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; WebAssembly代码生成回调函数&lt;/span&gt;
isolate-&amp;gt;SetAllowWasmCodeGenerationCallback(AllowWasmCodeGenerationCallback);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、作为一个参数传入其余的V8工具类中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 单线程运行V8的Isolate&lt;/span&gt;
&lt;span&gt;Locker locker(isolate);
Isolate::Scope isolate_scope(isolate);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Local/Hanlde&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　这个地方我之前一直比较混乱，因为有文章指出：Handle类定义在v8.h中，它是一个模板类，而且有两个派生类Local和Persistent。&lt;/p&gt;
&lt;p&gt;　　出处：https://blog.csdn.net/sunbxonline/article/details/20310897&lt;/p&gt;
&lt;p&gt;　　但是从源码来看，无论是Local&amp;lt;T&amp;gt;还是MaybeLocal&amp;lt;T&amp;gt;，均不继承于任何类&lt;/p&gt;
&lt;p&gt;　　这是因为V8版本不一致，所以我这里只讲当前版本的情况，源码注释如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#if&lt;/span&gt; !defined(V8_IMMINENT_DEPRECATION_WARNINGS)
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Handle is an alias for Local for historical reasons.&lt;/span&gt;
template &amp;lt;&lt;span&gt;class&lt;/span&gt; T&amp;gt;
&lt;span&gt;using&lt;/span&gt; Handle = Local&amp;lt;T&amp;gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这两个类从作用上讲都是handle，但实际上并不继承于同一个父类。&lt;/p&gt;
&lt;p&gt;1、Local/Persistent是V8的两个类，指向底层的原始数据。&lt;/p&gt;
&lt;p&gt;2、所有对象的引用都需要被V8的垃圾回收管理，在管理中可能出现移动对象的情况（参考网上大量关于V8垃圾回收的博客），这会导致对象指针产生错误，所以不能直接使用原始的数据类型，诸如String，而需要使用Local&amp;lt;String&amp;gt;，Local被V8引擎管理，会在对象移动时更新指针指向，并在合适的时候进行回收。&lt;/p&gt;
&lt;p&gt;3、Persistent属于全局对象(可参考Global)，独立于HanldeScope，可使用Reset方法清空。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　所以JS数据类型映射到C++的根类，继承关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/858904/201806/858904-20180627114010546-827089608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　具体的内部实现后面做分析。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HandleScope&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　一个管理handle的容器，在当前作用域开头声明一个HanldeScope，在域结束时会自动清理所有的handle。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
HandleScope handle_scope(isolate);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　嵌套使用时，作用域会自动进行切换。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　执行上下文，有自己独立的函数与对象。与Isolate相似，通过类方法New来生成。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
auto context = Context::New(isolate, nullptr, object_template);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可通过内部Scope类来进行上下文的切换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Context::Scope context_scope(context);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　该类主要负责对JS代码字符串进行编译和执行，核心方法为Compile、Run。&lt;/p&gt;
&lt;p&gt;　　Script::Compile可以编译JS代码字符串，返回一个Local&amp;lt;Script&amp;gt;对象&lt;/p&gt;
&lt;p&gt;　　Script::Run可以执行编译后的JS代码，返回一个Handle&amp;lt;Value&amp;gt;对象&lt;/p&gt;

&lt;p&gt;　　另外，还有FunctionTemplate/ObjectTemplate可以封装C++的对象、函数提供给JS代码调用，示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将C++的GetBinding函数包装提供给JS代码调用
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; NewFunctionTemplate是v8::FunctionTemplate::New()方法的包装&lt;/span&gt;
v8::Local&amp;lt;v8::Function&amp;gt; get_binding_fn =&lt;span&gt;
env&lt;/span&gt;-&amp;gt;NewFunctionTemplate(GetBinding)-&amp;gt;GetFunction(env-&amp;gt;&lt;span&gt;context())
.ToLocalChecked();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　基本上大部分用到的东西就是上面所列举的，GC暂时不讨论，以一个非常简单的网上案例把上面的东西串起来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个Isolate实例&lt;/span&gt;
Isolate::CreateParams &lt;span&gt;params&lt;/span&gt;&lt;span&gt;;
Isolate&lt;/span&gt;* &lt;span&gt;const&lt;/span&gt; isolate = Isolate::New(&lt;span&gt;params&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个HandleScope管理handle&lt;/span&gt;
&lt;span&gt;HandleScope handle_scope(isolate);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个上下文执行环境&lt;/span&gt;
Local&amp;lt;Context&amp;gt; context =&lt;span&gt; NewContext(isolate);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 切换到当前上下文&lt;/span&gt;
&lt;span&gt;Context::Scope context_scope(context);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新建一个Local
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型可以类比JS的源字符串&lt;/span&gt;
Local&amp;lt;String&amp;gt; source = String::New(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'Hello' + ', World!'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译该JS字符串&lt;/span&gt;
Local&amp;lt;Script&amp;gt; script =&lt;span&gt; Script::Compile(source);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行上面返回的编译对象&lt;/span&gt;
Local&amp;lt;Value&amp;gt; result = script-&amp;gt;&lt;span&gt;Run();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个result就是对JS源字符串编译执行后的C++代码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，对V8引擎就有了一个基本的认识，可以帮助我们更好的学习nodejs源码。&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 04:42:00 +0000</pubDate>
<dc:creator>书生小龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/QH-Jimmy/p/9212923.html</dc:identifier>
</item>
<item>
<title>超简单，webpack配置 - 追~梦</title>
<link>http://www.cnblogs.com/dorseych/p/9233131.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dorseych/p/9233131.html</guid>
<description>&lt;p&gt;      有看过我的博客的童鞋可能有看到我最近有在利用闲暇时间做一个前后台均涵盖的音乐播放器项目，但是呢，我是一个小小的前端，对后台的了解可以说只停留在很初级的阶段，当然了音乐播放器的音乐列表是后台轮循出来的，我呢，准备用node，当然了，包括去外地出差了3周，音乐项目目前还未更新，等这些后台的东东都理清了，各个模块就可以继续了。&lt;/p&gt;
&lt;p&gt;      好了废话不多说，咱一起来看看前端自动化构建工具（或者说是一个模块打包机）webpack的基本配置过程吧。&lt;/p&gt;
&lt;p&gt;      首先先来说下webpack是什么，node是什么，npm又是什么，一个个来：&lt;/p&gt;
&lt;p&gt;      1、npm：官方的说法是包管理工具，这些太虚了，虽说它确确实实就是一个提供给程序员方便的安装各种插件各种包的工具，但咱不这样理解，你先想想，我们以前下载软件或者rar等等文件是怎么下载呢？去网上找对吧？然后在对应的官网或一些综合的软件网来下载，很麻烦对吧？既然麻烦，程序员都是懒癌重度患者，绝对会有人想很简单的方式来下载软件，对吧？npm就诞生了，有了npm工具，你下载软件比如QQ啊，微信啊，你一句npm install QQ，就帮你下载安装了这个平台里的QQ软件，install是安装的意思，很简单的一句命令，npm （前缀）+ install（安装）+ (package-name，包的名称)，很方便吧？当然啦,npm就相当于一个软件网（什么太平洋软件网啊啥的），下载的软件是npm这个平台有的就行，不过呢，npm不是给我们下载QQ用的，是给我们开发者下载各种包用的，比如jquery,bootstrap,vue等等。你再也不用去官网啥的下载jquery最新版了，只需一句 npm install jquery就搞定了，彻底解决你的懒癌晚期。当然了为了提升下载安装的速度，还有cnpm（淘宝镜像）和bower(twitter提供，偏前台)，这些就不扯了，想了解的自行百度。&lt;/p&gt;
&lt;p&gt;      2、node：某一天某位大神，把谷歌的V8引擎从浏览器移植出来了，因为他觉得为啥js文件只能通过浏览器渲染呢？它的本质上不就跟java一样是一种面向对象语言么？（当然了还是有不同）只要有jvm就可以各种平台运行，把这个jvm单独拿出来，用于作为js文件的解释器或者渲染（应该不叫渲染，暂时词穷）引擎，而node就是基于此，用原生js语言开发出来的一个环境，它不再是在网页上做简简单单的表单提交或是一些异步处理，行为层处理，它是来操作文件，操作路径，操作通讯了，或者总的来说是操作计算机系统本身了，既然这样其实就和php，java比较接近了，它更需要的是逻辑的处理与业务的实现，搭建什么样的服务器架构等等，当然了它与php这些有线程池的后台语言不同，因为它是基于ECMAScript的，它仅有一个线程，并做异步操作，举个很简单的例子，不知道各位有没有遇到一个坑，就是setInterval();里面的函数执行的时间超过延迟间隔的时间，然后你会发现，setInterval本身它不会管你内部程序是怎样执行的，执行多久，简单说就是它不会等你，反正我隔这么久我就执行下这个函数一次，我管你执行多久，这就是异步，分开的，各干各的，而node的程序执行过程就是这样，充斥着各种各样的异步，可跟C语言不同，从上到下一步步走，没那么简单= = &lt;/p&gt;
&lt;p&gt;     3、webpack：是不是太啰嗦了呢，好了进入正题，webpack，我们平时页面引入js或是css怎么引入呢？可能会有很多很多的&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;和&amp;lt;link /&amp;gt;对吧，这让我们很烦，而且加多了太多各个文件的话会导致产生太多没必要的浏览器请求，降低性能，那怎么样做好呢？合并呗，合成一个或少个文件，但是呢，我们维护的时候又要拆开一个个模块来，这就矛盾了，对吧？好像冥冥之中缺少了某种中间层来帮我们处理这个东西，有用过less和Sass的应该比较清楚，不清楚的看下bootstrap的源码，就是那个bootstrap.css，你会发现神马代码都没有，只有一个个的@import，没有错，这就是合并，但是呢也不影响我们维护，因为我们直接去对应的模块里改，它自动就可以帮我们合成新的总css文件。可以看看下面的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627102606367-2120343428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    而这，就是模块化思维，而这也是webpack或者甚至说现代化编程的核心（ES6,ES7很明显的也是这样），当然了，webpack因为有个loader机制可以把一切文件转换成js文件，所以号称是啥呢，万能打包机= =，举个简单例子，webpack可以让我们引入n多个&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;变成一个，甚至哪些html是对应哪些的js,css，它都可以一一帮我们对应好，我们无需再手动引入。&lt;/p&gt;
&lt;p&gt;    配置啥的很简单很简单。&lt;/p&gt;
&lt;p&gt;    先别看我这些命令，看下面：&lt;/p&gt;
&lt;p&gt;    npm init&lt;/p&gt;
&lt;p&gt;    npm install webpack --save-dev    （--save-dev是保存在开发环境下（dev：development），当然也有-g（global全局下，但是呢，全局的东西就会有牵一发而动全身，咱最好还是一个项目对应一个node-module））&lt;/p&gt;
&lt;p&gt;    npm install webpack-cli --save-dev     (-cli是webpack提供的一个命令行接口，便于对构建过程进行配置和交互)&lt;/p&gt;
&lt;p&gt;    npm run build&lt;/p&gt;
&lt;p&gt;    1、创一个文件夹，随便啥名字，就比如webpack-example吧&lt;/p&gt;
&lt;p&gt;    2、在这个文件夹下打开cmd或者PowerShell（Shift+鼠标右键可以看到打开命令行选项），先做一个项目初始化，npm init，它会问你一些基本信息，因为我们是简单弄个例子，所以一直回车就好了。到时候有警告比如没有项目描述啊，项目作者啊等等不用管它，不影响。这时候你会发现文件夹多了一个package.json文件。这个文件是啥呢，可以理解成一个项目包文件，记录各种信息，比如我们安装了webpack包，细心的你会发现package.json文件devDependencies(开发环境依赖)多了一个webpack及它对应的版本。好了这个先到这。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627105318571-1773721523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627105417698-1927350600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    3、接下来呢就是安装 webpack 跟 webpack-cli了，&lt;/p&gt;
&lt;p&gt;         &lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627105655326-2020992234.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      4、配置下webpack，很简单的一个js配置文件：&lt;/p&gt;
&lt;p&gt;         假设我们现在要把common.js，index.js，module.js合成输出成一个文件。&lt;/p&gt;
&lt;p&gt;         咱先得有这几个文件对吧：（做测试咱就怎么简单怎么来）&lt;/p&gt;
&lt;p&gt;         common.js随便写一句：console.log(&quot;dorsey&quot;);&lt;/p&gt;
&lt;p&gt;         index.js随便写一句：console.log(&quot;my name is dorseyCh!&quot;);&lt;/p&gt;
&lt;p&gt;         module.js随便写一句：console.log(&quot;my name is chenduoxin,my English is dorseyCh!&quot;);&lt;/p&gt;
&lt;p&gt;         看看哈：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627110223948-1333495023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        然后呢新建一个js文件做配置文件，咱叫做webpack.config.js吧。&lt;/p&gt;
&lt;p&gt;       内容呢：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
let path=require('path'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个你可以试试不要了，然后把下面的路径换成你熟悉的什么‘./build/bundle.js’这样的，看看会发生什么？&lt;/span&gt;
module.exports=&lt;span&gt;{
    mode:&lt;/span&gt;'development',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为什么要把模型设置成开发环境，因为不设置你会发现生成的build文件夹下的bundle.js是压缩过的，也就是生成环境下的文件。&lt;/span&gt;
    entry:['./app/common.js','./app/index.js','./app/module.js'],  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;无外乎就是一个输入，看看，是不是相当于我在输入端写入3个文件，&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 然后输出成一个bundle.js，而实际上呢，我们页面引用只需要引输出后的文件即可。&lt;/span&gt;
    output:{                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;
        path:path.resolve(__dirname,'build'), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;路径，其实这个呢就是通过path模块把路径转化为绝对路径，你如果写成上面刚开始说的那个，&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 看似行得通对吧= =，也直观明了，不过呢，得绝对路径，不然程序找不到&lt;/span&gt;
        filename:'bundle.js'    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出的文件名，有则写，无则新建&lt;/span&gt;
&lt;span&gt;    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;       然后呢：&lt;/p&gt;
&lt;p&gt;       在配置文件webpack.config.js里的script属性里加一条：&quot;build&quot;:&quot;webpack&quot;，利用webpack-cli提供好的接口来配置变成这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;name&quot;: &quot;webpack-example&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;version&quot;: &quot;1.0.0&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;description&quot;: &quot;&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;main&quot;: &quot;index.js&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;scripts&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;build&quot;: &quot;webpack&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;author&quot;: &quot;&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;license&quot;: &quot;ISC&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;devDependencies&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;webpack&quot;: &quot;^4.12.1&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack-cli&quot;: &quot;^3.0.8&quot;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       这句话什么意思呢？首先，script这里面是一些命令行缩写，明白我的意思吧？我们是要通过webpack把刚刚的配置文件跑起来，对吧，让它完成我们需要的打包功能，我们这里还好，有时候在PowerShell里面的一些命令很长很长，我们就可以事先在这配置好，然后运行的时候呢，直接运行前面的属性，两个是等效的。&lt;/p&gt;
&lt;p&gt;        那看看效果是啥：&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627112323620-76967406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    项目中是不是自动帮我们生成了一个大厦（输出文件），是的就是一个build/bundle.js，而这个bundle.js跟我们上面3个js是等效的，你信不信？&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627112347599-1941203931.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    5、不信是吧？没关系，咱用个html引一下不就可以了？&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627112618045-1382824941.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         看看输出的结果：&lt;/p&gt;
&lt;p&gt;         是不是蛮神奇的？&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627112711809-166729043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 再看看浏览器的请求：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201806/1043914-20180627113025209-424602219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是就剩一个啦！简单快捷粗暴接地气，对吧？&lt;/p&gt;
&lt;p&gt;好了，简单的配置就到这，先这样；&lt;/p&gt;
&lt;p&gt;  总结的一句话，我们写代码，肯定是要在common.js，index.js，module.js这种里面写的，但是呢，最终的输出或是项目的引入就不是这样的，会汇合，会一对多，多对多，一对一等等的方式进行打包，或各种形式的合并混合打包。以后像less,Sass，webpack这样的肯定越来越多，这种模块化编程，统一化管理，现代化输出肯定是未来会一直持续的方式，也许以后的以后会有更好的方式来替代，但目前为止，我们得说这种模式暂时是最好的，对吧！ &lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 03:33:00 +0000</pubDate>
<dc:creator>追~梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dorseych/p/9233131.html</dc:identifier>
</item>
<item>
<title>FFmpeg命令行工具学习(三)：媒体文件转换工具ffmpeg - 灰色飘零</title>
<link>http://www.cnblogs.com/renhui/p/9223969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renhui/p/9223969.html</guid>
<description>



&lt;p&gt;ffmpeg是一个非常强大的工具，它可以转换任何格式的媒体文件，并且还可以用自己的AudioFilter以及VideoFilter进行处理和编辑。有了它，我们就可以对媒体文件做很多我们想做的事情了。&lt;/p&gt;

&lt;h3&gt;1. 通用参数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;-f fmt ： 指定格式&lt;/li&gt;
&lt;li&gt;-i filename：指定输入文件名&lt;/li&gt;
&lt;li&gt;-y：覆盖已有文件&lt;/li&gt;
&lt;li&gt;-t duration：指定时长&lt;/li&gt;
&lt;li&gt;-fs limit_size：设置文件大小的上限&lt;/li&gt;
&lt;li&gt;-ss time_off： 从指定的时间开始&lt;/li&gt;
&lt;li&gt;-re：代表按照真绿发送，尤其在作为推流工具的时候一定要加上该参数，否则ffpmeg会按照最高速率向流媒体不停的发送数据。&lt;/li&gt;
&lt;li&gt;-map：指定输出文件的流映射关系。例如：“-map 1:0 -map 1:1”要求按照第二个输入的文件的第一个流和第二个流写入输出文件。如果没有设置此项，则ffpmeg采用默认的映射关系。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2. 视频参数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;-b：指定比特率（bit/s），ffmpeg默认采用的是VBR的，若指定的该参数，则使用平均比特率。&lt;/li&gt;
&lt;li&gt;-bitexact：使用标准比特率。&lt;/li&gt;
&lt;li&gt;-vb：指定视频比特率（bit/s）&lt;/li&gt;
&lt;li&gt;-r rate：帧速率（fps）&lt;/li&gt;
&lt;li&gt;-s size：指定分辨率（320x240）&lt;/li&gt;
&lt;li&gt;-aspect aspect：设置视频长宽比（4:3、16:9或1.33333、1.77777）&lt;/li&gt;
&lt;li&gt;-croptop size：设置顶部切除尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-cropleft size：设置左切除尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-cropbottom size：设置地步切除尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-cropright size：设置右切除尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-padtop size：设置顶部补齐尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-padleft size：设置左补齐尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-padbottom size：设置地步补齐尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-padright size：设置右补齐尺寸（in pixels）&lt;/li&gt;
&lt;li&gt;-padcolor color：设置补齐颜色&lt;/li&gt;
&lt;li&gt;-vn：取消视频的输出&lt;/li&gt;
&lt;li&gt;-vcodec codec：强制使用codec编码方式&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3. 音频参数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;-ab：设置比特率（bit/s），对于MP3的格式，想要听到较高品质的声音，建议设置160Kbit/s（单声道80Kbit/s）以上。&lt;/li&gt;
&lt;li&gt;-aq quality：设置音频质量&lt;/li&gt;
&lt;li&gt;-ar ratre：设置音频采样率（Hz）&lt;/li&gt;
&lt;li&gt;-ac channels：设置声道数，1就是单声道，2就是立体声&lt;/li&gt;
&lt;li&gt;-an：取消音频输出&lt;/li&gt;
&lt;li&gt;-acodec codec：强制使用codec编码方式&lt;/li&gt;
&lt;li&gt;-vol volume：设置录制音量大小&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上就是在日常开发中经常用到的音视频参数及通用参数。下面会针对常见的开发场景进行实践和说明。&lt;/p&gt;

&lt;h3&gt;1. 列出ffmpeg支持的所有格式&lt;/h3&gt;
&lt;p&gt;相关命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ffmpeg -formats
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_cd70bcc8-b511-4f37-af28-85607e714eda&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cd70bcc8-b511-4f37-af28-85607e714eda&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cd70bcc8-b511-4f37-af28-85607e714eda&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;File formats:
 D. &lt;/span&gt;=&lt;span&gt; Demuxing supported
 .E &lt;/span&gt;=&lt;span&gt; Muxing supported
 &lt;/span&gt;--&lt;span&gt;
 D  3dostr          3DO STR
  E 3g2             3GP2 (3GPP2 &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt; format)
  E 3gp             3GP (3GPP &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt; format)
 D  4xm             4X Technologies
  E a64             a64 &lt;/span&gt;- video &lt;span&gt;for&lt;/span&gt; Commodore &lt;span&gt;64&lt;/span&gt;&lt;span&gt;
 D  aa              Audible AA format files
 D  aac             raw ADTS AAC (Advanced Audio Coding)
 DE ac3             raw AC&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
 D  acm             Interplay ACM
 D  act             ACT Voice &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt; format
 D  adf             Artworx Data Format
 D  adp             ADP
 D  ads             Sony PS2 ADS
  E adts            ADTS AAC (Advanced Audio Coding)
 DE adx             CRI ADX
 D  aea             MD STUDIO audio
 D  afc             AFC
 DE aiff            Audio IFF
 D  aix             CRI AIX
 DE alaw            PCM A&lt;/span&gt;-&lt;span&gt;law
 D  alias_pix       Alias&lt;/span&gt;/&lt;span&gt;Wavefront PIX image
 DE amr             3GPP AMR
 D  anm             Deluxe Paint Animation
 D  apc             CRYO APC
 D  ape             Monkey&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s Audio&lt;/span&gt;
&lt;span&gt; DE apng            Animated Portable Network Graphics
 D  aqtitle         AQTitle subtitles
 DE asf             ASF (Advanced &lt;/span&gt;/&lt;span&gt; Active Streaming Format)
 D  asf_o           ASF (Advanced &lt;/span&gt;/&lt;span&gt; Active Streaming Format)
  E asf_stream      ASF (Advanced &lt;/span&gt;/&lt;span&gt; Active Streaming Format)
 DE ass             SSA (SubStation Alpha) subtitle
 DE ast             AST (Audio Stream)
 DE au              Sun AU
 D  avfoundation    AVFoundation input device
 DE avi             AVI (Audio Video Interleaved)
  E avm2            SWF (ShockWave Flash) (AVM2)
 D  avr             AVR (Audio Visual Research)
 D  avs             AVS
 D  bethsoftvid     Bethesda Softworks VID
 D  bfi             Brute Force &lt;/span&gt;&amp;amp;&lt;span&gt; Ignorance
 D  bfstm           BFSTM (Binary Cafe Stream)
 D  bin             Binary text
 D  bink            Bink
 DE bit             G.&lt;/span&gt;&lt;span&gt;729&lt;/span&gt; BIT &lt;span&gt;file&lt;/span&gt;&lt;span&gt; format
 D  bmp_pipe        piped bmp sequence
 D  bmv             Discworld II BMV
 D  boa             Black Ops Audio
 D  brender_pix     BRender PIX image
 D  brstm           BRSTM (Binary Revolution Stream)
 D  c93             Interplay C93
 DE caf             Apple CAF (Core Audio Format)
 DE cavsvideo       raw Chinese AVS (Audio Video Standard) video
 D  cdg             CD Graphics
 D  cdxl            Commodore CDXL video
 D  cine            Phantom Cine
 D  concat          Virtual concatenation script
  E crc             CRC testing
  E dash            DASH Muxer
 DE data            raw data
 DE daud            D&lt;/span&gt;-&lt;span&gt;Cinema audio
 D  dcstr           Sega DC STR
 D  dds_pipe        piped dds sequence
 D  dfa             Chronomaster DFA
 DE dirac           raw Dirac
 DE dnxhd           raw DNxHD (SMPTE VC&lt;/span&gt;-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
 D  dpx_pipe        piped dpx sequence
 D  dsf             DSD Stream File (DSF)
 D  dsicin          Delphine Software International CIN
 D  dss             Digital Speech Standard (DSS)
 DE dts             raw DTS
 D  dtshd           raw DTS&lt;/span&gt;-&lt;span&gt;HD
 DE dv              DV (Digital Video)
 D  dvbsub          raw dvbsub
 D  dvbtxt          dvbtxt
  E dvd             MPEG&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt; PS (DVD VOB)
 D  dxa             DXA
 D  ea              Electronic Arts Multimedia
 D  ea_cdata        Electronic Arts cdata
 DE eac3            raw E&lt;/span&gt;-AC-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
 D  epaf            Ensoniq Paris Audio File
 D  exr_pipe        piped exr sequence
 DE f32be           PCM &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;-bit floating-point big-&lt;span&gt;endian
 DE f32le           PCM &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;-bit floating-point little-&lt;span&gt;endian
  E f4v             F4V Adobe Flash Video
 DE f64be           PCM &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;-bit floating-point big-&lt;span&gt;endian
 DE f64le           PCM &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;-bit floating-point little-&lt;span&gt;endian
 DE ffm             FFM (FFserver live feed)
 DE ffmetadata      FFmpeg metadata &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; text
  E fifo            FIFO queue pseudo&lt;/span&gt;-&lt;span&gt;muxer
 D  film_cpk        Sega FILM &lt;/span&gt;/&lt;span&gt; CPK
 DE filmstrip       Adobe Filmstrip
 DE fits            Flexible Image Transport System
 DE flac            raw FLAC
 D  flic            FLI&lt;/span&gt;/FLC/&lt;span&gt;FLX animation
 DE flv             FLV (Flash Video)
  E framecrc        framecrc testing
  E framehash       Per&lt;/span&gt;-&lt;span&gt;frame hash testing
  E framemd5        Per&lt;/span&gt;-&lt;span&gt;frame MD5 testing
 D  frm             Megalux Frame
 D  fsb             FMOD Sample Bank
 DE g722            raw G.&lt;/span&gt;&lt;span&gt;722&lt;/span&gt;&lt;span&gt;
 DE g723_1          raw G.&lt;/span&gt;&lt;span&gt;723.1&lt;/span&gt;&lt;span&gt;
 DE g726            raw big&lt;/span&gt;-endian G.&lt;span&gt;726&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;left-justified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
 DE g726le          raw little&lt;/span&gt;-endian G.&lt;span&gt;726&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;right-justified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
 D  g729            G.&lt;/span&gt;&lt;span&gt;729&lt;/span&gt;&lt;span&gt; raw format demuxer
 D  gdv             Gremlin Digital Video
 D  genh            GENeric Header
 DE gif             GIF Animation
 DE gsm             raw GSM
 DE gxf             GXF (General eXchange Format)
 DE h261            raw H.&lt;/span&gt;&lt;span&gt;261&lt;/span&gt;&lt;span&gt;
 DE h263            raw H.&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;&lt;span&gt;
 DE h264            raw H.&lt;/span&gt;&lt;span&gt;264&lt;/span&gt;&lt;span&gt; video
  E hash            Hash testing
  E hds             HDS Muxer
 DE hevc            raw HEVC video
  E hls             Apple HTTP Live Streaming
 D  hls,applehttp   Apple HTTP Live Streaming
 D  hnm             Cryo HNM v4
 DE ico             Microsoft Windows ICO
 D  idcin           &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt; Cinematic
 D  idf             iCE Draw File
 D  iff             IFF (Interchange File Format)
 DE ilbc            iLBC storage
 DE image2          image2 sequence
 DE image2pipe      piped image2 sequence
 D  ingenient       raw Ingenient MJPEG
 D  ipmovie         Interplay MVE
  E ipod            iPod H.&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; MP4 (MPEG-&lt;span&gt;4&lt;/span&gt; Part &lt;span&gt;14&lt;/span&gt;&lt;span&gt;)
 DE ircam           Berkeley&lt;/span&gt;/IRCAM/&lt;span&gt;CARL Sound Format
  E ismv            ISMV&lt;/span&gt;/&lt;span&gt;ISMA (Smooth Streaming)
 D  iss             Funcom ISS
 D  iv8             IndigoVision &lt;/span&gt;&lt;span&gt;8000&lt;/span&gt;&lt;span&gt; video
 DE ivf             On2 IVF
 D  ivr             IVR (Internet Video Recording)
 D  j2k_pipe        piped j2k sequence
 DE jacosub         JACOsub subtitle format
 D  jpeg_pipe       piped jpeg sequence
 D  jpegls_pipe     piped jpegls sequence
 D  jv              Bitmap Brothers JV
  E latm            LOAS&lt;/span&gt;/&lt;span&gt;LATM
 D  lavfi           Libavfilter virtual input device
 D  live_flv        live RTMP FLV (Flash Video)
 D  lmlm4           raw lmlm4
 D  loas            LOAS AudioSyncStream
 DE lrc             LRC lyrics
 D  lvf             LVF
 D  lxf             VR native stream (LXF)
 DE m4v             raw MPEG&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt; video
  E matroska        Matroska
 D  matroska,webm   Matroska &lt;/span&gt;/&lt;span&gt; WebM
  E md5             MD5 testing
 D  mgsts           Metal Gear Solid: The Twin Snakes
 DE microdvd        MicroDVD subtitle format
 DE mjpeg           raw MJPEG video
 D  mjpeg_2000      raw MJPEG &lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;&lt;span&gt; video
  E mkvtimestamp_v2 extract pts as timecode v2 format, as defined by mkvtoolnix
 DE mlp             raw MLP
 D  mlv             Magic Lantern Video (MLV)
 D  mm              American Laser Games MM
 DE mmf             Yamaha SMAF
  E mov             QuickTime &lt;/span&gt;/&lt;span&gt; MOV
 D  mov,mp4,m4a,3gp,3g2,mj2 QuickTime &lt;/span&gt;/&lt;span&gt; MOV
  E mp2             MP2 (MPEG audio layer &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
 DE mp3             MP3 (MPEG audio layer &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
  E mp4             MP4 (MPEG&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt; Part &lt;span&gt;14&lt;/span&gt;&lt;span&gt;)
 D  mpc             Musepack
 D  mpc8            Musepack SV8
 DE mpeg            MPEG&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt; Systems /&lt;span&gt; MPEG program stream
  E mpeg1video      raw MPEG&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; video
  E mpeg2video      raw MPEG&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt; video
 DE mpegts          MPEG&lt;/span&gt;-TS (MPEG-&lt;span&gt;2&lt;/span&gt;&lt;span&gt; Transport Stream)
 D  mpegtsraw       raw MPEG&lt;/span&gt;-TS (MPEG-&lt;span&gt;2&lt;/span&gt;&lt;span&gt; Transport Stream)
 D  mpegvideo       raw MPEG video
 DE mpjpeg          MIME multipart JPEG
 D  mpl2            MPL2 subtitles
 D  mpsub           MPlayer subtitles
 D  msf             Sony PS3 MSF
 D  msnwctcp        MSN TCP Webcam stream
 D  mtaf            Konami PS2 MTAF
 D  mtv             MTV
 DE mulaw           PCM mu&lt;/span&gt;-&lt;span&gt;law
 D  musx            Eurocom MUSX
 D  &lt;/span&gt;&lt;span&gt;mv&lt;/span&gt;&lt;span&gt;              Silicon Graphics Movie
 D  mvi             Motion Pixels MVI
 DE mxf             MXF (Material eXchange Format)
  E mxf_d10         MXF (Material eXchange Format) D&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt;&lt;span&gt; Mapping
  E mxf_opatom      MXF (Material eXchange Format) Operational Pattern Atom
 D  mxg             MxPEG clip
 D  nc              NC camera feed
 D  nistsphere      NIST SPeech HEader REsources
 D  nsv             Nullsoft Streaming Video
  E &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;            raw &lt;span&gt;null&lt;/span&gt;&lt;span&gt; video
 DE nut             NUT
 D  nuv             NuppelVideo
  E oga             Ogg Audio
 DE ogg             Ogg
  E ogv             Ogg Video
 DE oma             Sony OpenMG audio
  E opus            Ogg Opus
 D  paf             Amazing Studio Packed Animation File
 D  pam_pipe        piped pam sequence
 D  pbm_pipe        piped pbm sequence
 D  pcx_pipe        piped pcx sequence
 D  pgm_pipe        piped pgm sequence
 D  pgmyuv_pipe     piped pgmyuv sequence
 D  pictor_pipe     piped pictor sequence
 D  pjs             PJS (Phoenix Japanimation Society) subtitles
 D  pmp             Playstation Portable PMP
 D  png_pipe        piped png sequence
 D  ppm_pipe        piped ppm sequence
 D  psd_pipe        piped psd sequence
  E psp             PSP MP4 (MPEG&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt; Part &lt;span&gt;14&lt;/span&gt;&lt;span&gt;)
 D  psxstr          Sony Playstation STR
 D  pva             TechnoTrend PVA
 D  pvf             PVF (Portable Voice Format)
 D  qcp             QCP
 D  qdraw_pipe      piped qdraw sequence
 D  r3d             REDCODE R3D
 DE rawvideo        raw video
 D  realtext        RealText subtitle format
 D  redspark        RedSpark
 D  rl2             RL2
 DE &lt;/span&gt;&lt;span&gt;rm&lt;/span&gt;&lt;span&gt;              RealMedia
 DE roq             raw &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt; RoQ
 D  rpl             RPL &lt;/span&gt;/&lt;span&gt; ARMovie
 D  rsd             GameCube RSD
 DE rso             Lego Mindstorms RSO
 DE rtp             RTP output
  E rtp_mpegts      RTP&lt;/span&gt;/&lt;span&gt;mpegts output format
 DE rtsp            RTSP output
 DE s16be           PCM signed &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;-bit big-&lt;span&gt;endian
 DE s16le           PCM signed &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;-bit little-&lt;span&gt;endian
 DE s24be           PCM signed &lt;/span&gt;&lt;span&gt;24&lt;/span&gt;-bit big-&lt;span&gt;endian
 DE s24le           PCM signed &lt;/span&gt;&lt;span&gt;24&lt;/span&gt;-bit little-&lt;span&gt;endian
 DE s32be           PCM signed &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;-bit big-&lt;span&gt;endian
 DE s32le           PCM signed &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;-bit little-&lt;span&gt;endian
 D  s337m           SMPTE 337M
 DE s8              PCM signed &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;bit
 D  sami            SAMI subtitle format
 DE sap             SAP output
 D  sbg             SBaGen binaural beats script
 DE scc             Scenarist Closed Captions
 D  sdp             SDP
 D  sdr2            SDR2
 D  sds             MIDI Sample Dump Standard
 D  sdx             Sample Dump eXchange
  E segment         segment
 D  sgi_pipe        piped sgi sequence
 D  shn             raw Shorten
 D  siff            Beam Software SIFF
  E singlejpeg      JPEG single image
 D  sln             Asterisk raw pcm
 DE smjpeg          Loki SDL MJPEG
 D  smk             Smacker
  E smoothstreaming Smooth Streaming Muxer
 D  smush           LucasArts Smush
 D  sol             Sierra SOL
 DE sox             SoX native
 DE spdif           IEC &lt;/span&gt;&lt;span&gt;61937&lt;/span&gt; (used on S/PDIF -&lt;span&gt; IEC958)
  E spx             Ogg Speex
 DE srt             SubRip subtitle
 D  stl             Spruce subtitle format
  E stream_segment,ssegment streaming segment muxer
 D  subviewer       SubViewer subtitle format
 D  subviewer1      SubViewer v1 subtitle format
 D  sunrast_pipe    piped sunrast sequence
 DE sup             raw HDMV Presentation Graphic Stream subtitles
 D  svag            Konami PS2 SVAG
  E svcd            MPEG&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt; PS (SVCD)
 D  svg_pipe        piped svg sequence
 DE swf             SWF (ShockWave Flash)
 D  tak             raw TAK
 D  tedcaptions     TED Talks captions
  E &lt;/span&gt;&lt;span&gt;tee&lt;/span&gt;             Multiple muxer &lt;span&gt;tee&lt;/span&gt;&lt;span&gt;
 D  thp             THP
 D  tiertexseq      Tiertex Limited SEQ
 D  tiff_pipe       piped tiff sequence
 D  tmv             8088flex TMV
 DE truehd          raw TrueHD
 DE tta             TTA (True Audio)
 D  tty             Tele&lt;/span&gt;-&lt;span&gt;typewriter
 D  txd             Renderware TeXture Dictionary
 DE u16be           PCM unsigned &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;-bit big-&lt;span&gt;endian
 DE u16le           PCM unsigned &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;-bit little-&lt;span&gt;endian
 DE u24be           PCM unsigned &lt;/span&gt;&lt;span&gt;24&lt;/span&gt;-bit big-&lt;span&gt;endian
 DE u24le           PCM unsigned &lt;/span&gt;&lt;span&gt;24&lt;/span&gt;-bit little-&lt;span&gt;endian
 DE u32be           PCM unsigned &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;-bit big-&lt;span&gt;endian
 DE u32le           PCM unsigned &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;-bit little-&lt;span&gt;endian
 DE u8              PCM unsigned &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;-&lt;span&gt;bit
  E uncodedframecrc uncoded framecrc testing
 D  v210            Uncompressed &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;-&lt;span&gt;bit
 D  v210x           Uncompressed &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;-&lt;span&gt;bit
 D  vag             Sony PS2 VAG
 DE vc1             raw VC&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; video
 DE vc1test         VC&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; test bitstream
  E vcd             MPEG&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt; Systems /&lt;span&gt; MPEG program stream (VCD)
 D  vivo            Vivo
 D  vmd             Sierra VMD
  E vob             MPEG&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt; PS (VOB)
 D  vobsub          VobSub subtitle format
 DE voc             Creative Voice
 D  vpk             Sony PS2 VPK
 D  vplayer         VPlayer subtitles
 D  vqf             Nippon Telegraph and Telephone Corporation (NTT) TwinVQ
 DE w64             Sony Wave64
 DE wav             WAV &lt;/span&gt;/&lt;span&gt; WAVE (Waveform Audio)
 D  wc3movie        Wing Commander III movie
  E webm            WebM
  E webm_chunk      WebM Chunk Muxer
 DE webm_dash_manifest WebM DASH Manifest
  E webp            WebP
 D  webp_pipe       piped webp sequence
 DE webvtt          WebVTT subtitle
 D  wsaud           Westwood Studios audio
 D  wsd             Wideband Single&lt;/span&gt;-&lt;span&gt;bit Data (WSD)
 D  wsvqa           Westwood Studios VQA
 DE wtv             Windows Television (WTV)
 DE wv              raw WavPack
 D  wve             Psion &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; audio
 D  xa              Maxis XA
 D  xbin            eXtended BINary text (XBIN)
 D  xmv             Microsoft XMV
 D  xpm_pipe        piped xpm sequence
 D  xvag            Sony PS3 XVAG
 D  xwma            Microsoft xWMA
 D  yop             Psygnosis YOP
 DE yuv4mpegpipe    YUV4MPEG pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;2. 剪切一段媒体文件，可以是音频或者视频文件&lt;/h3&gt;
&lt;p&gt;相关命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i pm.mp4 -ss &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;50.0&lt;/span&gt; -codec copy -t &lt;span&gt;20&lt;/span&gt; output.mp4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令说明：&lt;/p&gt;
&lt;p&gt;表示将文件pm.mp4从第50s开始剪切20s的时间，输出到output.mp4中，其中-ss指定偏移时间（time Offset），-t指定的时长（duration）。&lt;/p&gt;
&lt;p&gt;但是直接这样执行命令，固然我们能截取出来音视频的文件，但是当我们播放的时候，我们会发现虽然ffmepg剪切视频，很方便，但是也有很大缺陷：&lt;/p&gt;
&lt;p&gt;(1). 剪切时间点不精确 &lt;br/&gt;(2). 有时剪切的视频开头有黑屏&lt;/p&gt;
&lt;p&gt;造成这些问题的原因是ffmpeg无法seek到非关键帧上。&lt;/p&gt;
&lt;p&gt;命令层面定位的话就是如果把-ss, -t参数放在-i参数之后，是对输出文件执行的seek操作 &lt;br/&gt;输入文件会逐帧解码，直到-ss设置的时间点为止，这么操作会很慢，虽然时间点是准确的，但是很容易出现黑屏问题。&lt;/p&gt;
&lt;p&gt;所以：我们优化了一下上面的那个命令，让视频的剪切更加精确：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -ss &lt;span&gt;10&lt;/span&gt; -t &lt;span&gt;15&lt;/span&gt; -accurate_seek -i pm.mp4 -codec copy output.mp4 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：accurate_seek必须放在-i参数之前&lt;/p&gt;
&lt;h3&gt;3. 提取一个视频文件中的音频，并保存为文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i pm.mp4 -vn -acodec copy output.m4a
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. 将视频中的音频静音，只保留视频&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i pm.mp4 -an -vcodec copy output.mp4 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5. 从mp4文件中抽取视频流导出为裸H264数据：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i pm.mp4 -an -vcodec copy -bsf:v h264_mp4toannexb output.h264
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证播放的话，可以使用ffplay命令。说明一下上面的命令：&lt;/p&gt;
&lt;p&gt;在指令中，我们舍弃了音频数据（-an），视频数据使用mp4toannexb这个bitstreasm filter来转换为原始的H264数据。注：同一编码也会有不同的封装格式。&lt;/p&gt;
&lt;h3&gt;6. 将一段视频推送到流媒体服务器上：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -re -i pm.mp4 -acodec copy -vcodec copy -f flv rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1/rh/mylive &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7. 将流媒体服务器上的流dump到本地：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ffmpeg -i rtmp://127.0.0.1/rh/mylive -acodec copy -vcodec copy -f flv test.flv
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 27 Jun 2018 03:32:00 +0000</pubDate>
<dc:creator>灰色飘零</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renhui/p/9223969.html</dc:identifier>
</item>
<item>
<title>自己编译Android（小米5）内核并刷入（一键自动编译打包） - KurtNiu</title>
<link>http://www.cnblogs.com/zifeiniu/p/9233123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zifeiniu/p/9233123.html</guid>
<description>&lt;p&gt;之前自己编译过Android系统，刷入手机。编译很简单，但坑比较大，主要是GFW埋的坑。。&lt;/p&gt;
&lt;p&gt;编译android系统太大了，今天记下自己编译及刷入android内核的方法。&lt;/p&gt;
&lt;p&gt;主要是看到第三方内核可以超频，高通820 大核2.1Ghz 可以超频到2.3Ghz。&lt;br/&gt;&lt;a href=&quot;https://forum.xda-developers.com/mi-5s/development/mi5s-floppy-kernel-t3723653&quot; class=&quot;uri&quot;&gt;https://forum.xda-developers.com/mi-5s/development/mi5s-floppy-kernel-t3723653&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天就编译这个第三方内核Floppy Kernel&lt;br/&gt;内核地址：&lt;a href=&quot;https://github.com/JonasCardoso/android_kernel_xiaomi_msm8996&quot; class=&quot;uri&quot;&gt;https://github.com/JonasCardoso/android_kernel_xiaomi_msm8996&lt;/a&gt;&lt;br/&gt;编译Android有两大坑，&lt;br/&gt;第一个是交叉编译需要设置各种环境变量。&lt;br/&gt;第二个是编译出来的内核Image文件如何刷入Android系统。&lt;/p&gt;
&lt;p&gt;Floppy Kernel 代码有个神器的脚本 build.sh 居然可以一键搞定。。&lt;/p&gt;
&lt;p&gt;先说下配置环境，当然先下载内核文件，然后下载交叉编译工具链。&lt;br/&gt;&lt;a href=&quot;https://bitbucket.org/jonascardoso/toolchain_aarch64_travis&quot; class=&quot;uri&quot;&gt;https://bitbucket.org/jonascardoso/toolchain_aarch64_travis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;toolchain_aarch64_travis 文件夹重命名为Toolchain，放到内核文件夹同一层目录。&lt;br/&gt;然后运行source build.sh&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ source build.sh 

Simple Linux Kernel 3.18.31 Build Script (26/06/2018)
FloppyKernel-Nougat-HMP Release 26/06/2018 Build #0
-Clean Menu-
1) Zip Packages      | Already Done!
2) Kernel            | Already Done!
-Main Menu-
3) Device Choice     |  
4) Toolchain Choice  | 
-Build Menu-
5) Build Kernel      | Use 3 first
6) Build Zip Package | Use 5 first
7) Compressed image  | ON
-Special Device Menu-
8) Update Defconfig  | Use 3 first
9) Copy Zip          | Use 6 first
0) Reboot to recovery
-Script Options-
o) View Build Output | ON
g) Git Gui  |  k) GitK  |  s) Git Push  |  l) Git Pull
q) Quit&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到很简单，3 选择设备，4选择编译工具，5编译，6打包，7启动recovery刷入。。&lt;/p&gt;
&lt;p&gt;简单解释下：&lt;br/&gt;3 ，选择设备，其实是选择设备配置文件，arch/arm64/configs 这个文件夹里有设备文件夹。&lt;br/&gt;当然可以直接通过 make menuconfig 用界面裁剪配置内核。。&lt;br/&gt;（自己编译过Linux内核肯定都知道make menuconfig，如果报错，可能需要安装相关库。）&lt;/p&gt;
&lt;p&gt;4，选择编译工具链，也就是选择编译器，编译器有很多种，如下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;-APTESS - Toolchain Choice-

-GCC Linaro-

0) GCC 5.5.0 toolchain from Linaro
1) GCC 6.4.1 toolchain from Linaro
2) GCC 7.2.1 toolchain from Linaro

-GCC UBERTC-

3) GCC 5.3.1 toolchain from UBERTC
4) GCC 6.4.1 toolchain from UBERTC
5) GCC 7.2.1 toolchain from UBERTC
6) GCC 8.0.0 toolchain from UBERTC

-GCC Google-

7) GCC 4.9.0 toolchain from Google

-GCC Sabermod-

8) GCC 4.9.X toolchain from Sabermod
9) GCC 7.0.X toolchain from Sabermod

*) Any other key to Exit
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体有何区别，网上抄来一段。。。。&lt;/p&gt;
&lt;p&gt;近年兴起的第三方GCC GNU工具链有Linaro，Saberod和UberTC。Linaro开源项目的开发者利用GCC工具链优化Android，在测试中，他们编译的版本比目前Google在AOSP(Android Open Source Project)中提供的Android性能提升了20%到30%。例如，在0xBenchmark图形显示测试中，官方版本只有30 fps，而Android Linaro优化版本能达到60fps，而SaberMod在其基础上优化了Linaro的APPs内存展开速度，但UberTC的创建人Chet Kener发现，Linaro库编译的Android界面很流畅但加载Apps很不理想，而SaberMod刚好相反界面卡但加载APPs很快，至此一个结合两者优点的GNU工具链UberTC诞生了。&lt;/p&gt;
&lt;p&gt;我想说的是有的编译不过去，多换几个试试。。&lt;/p&gt;
&lt;p&gt;按直接编译，按6直接打包。然后到zip-creator文件里会多一个zip文件，在用recovery （twrp）刷入即可。。&lt;/p&gt;
&lt;p&gt;当然手机可能会用你编译的内核会无限重启。。。&lt;/p&gt;
&lt;p&gt;自己编译内核能干哪些事情？&lt;/p&gt;
&lt;p&gt;超频&lt;br/&gt;修改内核模块，比如喜欢删温控的我，直接在内核里把thermal删掉了。。&lt;br/&gt;添加驱动，比如添加USB设备驱动等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/111807/201806/111807-20180627113121076-1788222323.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/111807/201806/111807-20180627113139140-256580041.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/111807/201806/111807-20180627113130121-1418246957.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 03:32:00 +0000</pubDate>
<dc:creator>KurtNiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zifeiniu/p/9233123.html</dc:identifier>
</item>
<item>
<title>tinypng upload一键压缩上传工具，告别人肉 - muwoo</title>
<link>http://www.cnblogs.com/tiedaweishao/p/9233110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiedaweishao/p/9233110.html</guid>
<description>&lt;h2 id=&quot;地址&quot;&gt;地址&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/muwoo/tinypng-upload&quot;&gt;tinypng-upload&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有兴趣的可以玩一玩，因为平时经常会用到图片压缩，上传，如果你也觉得很繁琐的话，这个将会解决你的痛点。&lt;/p&gt;
&lt;h2 id=&quot;关于-tinypng-upload&quot;&gt;关于 tinypng-upload&lt;/h2&gt;
&lt;p&gt;这是一个基于 &lt;code&gt;electron&lt;/code&gt;的图片压缩上传工具，压缩过程主要通过调用&lt;code&gt;tinypng&lt;/code&gt;提供的API完成。上传配置参考&lt;code&gt;iView&lt;/code&gt;的文件上传配置。&lt;br/&gt;因为是桌面端，所以很方便我们将图片拖拽到任务托盘进行压缩上传，极大地提升了前端的工作效率，可以让我们更专注于业务开发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/26/1643c32ac76d8755?w=600&amp;amp;h=407&amp;amp;f=gif&amp;amp;s=2915190&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/26/1643c34b34577dae?w=599&amp;amp;h=195&amp;amp;f=gif&amp;amp;s=2085665&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩前后体积对比（图片压缩完成已自动上传到指的CDN）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/26/1643c320094f3d2a?w=1600&amp;amp;h=1408&amp;amp;f=png&amp;amp;s=646932&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;
&lt;h4 id=&quot;下载可执行文件&quot;&gt;1. 下载可执行文件&lt;/h4&gt;
&lt;p&gt;因为暂时没有发布到应用商店，所以需要自己编译出可执行文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;git clone https&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//github.com/muwoo/tinypng-upload.git&lt;/span&gt;
cd tinypng&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;upload
npm i
npm run build&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后会在&lt;code&gt;build&lt;/code&gt;目录下生成对应的可执行文件，运行改文件即可&lt;/p&gt;
&lt;h4 id=&quot;配置tinypng-api-key&quot;&gt;2. 配置tinypng API key&lt;/h4&gt;
&lt;p&gt;因为该项目压缩过程是通过调用 &lt;code&gt;tinypng API&lt;/code&gt;来实现的，所以我们需要去&lt;a href=&quot;https://tinypng.com/&quot;&gt;tinypng&lt;/a&gt;网站上注册一个&lt;code&gt;API key&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/26/1643c3201344b8f8?w=2454&amp;amp;h=714&amp;amp;f=jpeg&amp;amp;s=151591&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后将该值粘贴到我们的配置一栏中：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/6/26/1643c3304eb6e8ec?w=2062&amp;amp;h=1344&amp;amp;f=png&amp;amp;s=744314&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只不过有一点限制，免费的每个月可以压缩 500 张图片。github 上也有人通过循环注册的过程，生成了多个账户&lt;code&gt;API key&lt;/code&gt;达到近似于不限制压缩次数的目的。有兴趣也可以了解一下~&lt;/p&gt;
&lt;h4 id=&quot;配置压缩后图片上传请求&quot;&gt;3. 配置压缩后图片上传请求&lt;/h4&gt;
&lt;p&gt;压缩完成之后，我们希望图片可以直接上传到我们公司的&lt;code&gt;CDN&lt;/code&gt;上，&lt;code&gt;tiny-png upload&lt;/code&gt;上传参考了&lt;code&gt;iView&lt;/code&gt;的图片上传参数和设置：&lt;a href=&quot;https://www.iviewui.com/components/upload&quot;&gt;上传 upload&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;action&lt;/td&gt;
&lt;td&gt;Upload request URL, required.&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;headers&lt;/td&gt;
&lt;td&gt;Upload request header.&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;Extra data with upload request.&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The key in upload request targeting to the file.&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;file&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;with-credentials&lt;/td&gt;
&lt;td&gt;Enable certification info in Cookie or not.&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;灵感来源&quot;&gt;灵感来源&lt;/h2&gt;
&lt;p&gt;之前在掘金上看了一篇关于&lt;code&gt;electron&lt;/code&gt;图片上传的工具&lt;code&gt;PicGo&lt;/code&gt;，很感谢作者提供的文章参考&lt;a href=&quot;https://juejin.im/post/5b22333351882574874d8601&quot;&gt;PicGo的star数破1000的心路历程&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jun 2018 03:29:00 +0000</pubDate>
<dc:creator>muwoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiedaweishao/p/9233110.html</dc:identifier>
</item>
</channel>
</rss>