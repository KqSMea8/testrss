<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>HTML总结 - 落叶虽美只活一世</title>
<link>http://www.cnblogs.com/NolaLi/p/7639142.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NolaLi/p/7639142.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1069409/201710/1069409-20171008231823637-1929508528.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试小结：&lt;/p&gt;
&lt;p&gt;⦁ 表单GET提交的请求参数大小有限制，通常不能超过1KB。&lt;br/&gt;表单元素可以写在form外&lt;br/&gt;html不区分大小写&lt;/p&gt;

&lt;p&gt;表格布局homework实操小结：&lt;/p&gt;
&lt;p&gt;严格按照步骤先拟定几行几例&lt;/p&gt;
&lt;p&gt;若不列大纲，从前至后写，思路会越来越混乱&lt;/p&gt;
&lt;p&gt;拟定横纵布局ideas不同，相应编辑的代码也不同，实现的效果可相同，但编码的难易程度取决于你的ideas&lt;/p&gt;
&lt;p&gt;利用嵌套编码较复杂，取而代之可加行加列，嵌套的合理利用可显示一个人的编码水平&lt;/p&gt;
&lt;p&gt;条条大路通罗马，采用何种布局，考虑的维度，首选项是编码效率&lt;/p&gt;
&lt;p&gt;擅用快捷键、擅用相对大小&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 15:26:00 +0000</pubDate>
<dc:creator>落叶虽美只活一世</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NolaLi/p/7639142.html</dc:identifier>
</item>
<item>
<title>“完美日程表” ——这可能是最懂你的时间管理平台！ - Tony Zhao</title>
<link>http://www.cnblogs.com/ytaozhao/p/7639102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ytaozhao/p/7639102.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/141115/201710/141115-20171008231537418-1372473321.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“完美日程表”是涛舅舅工作室的独家开发的另一套完整产品，入口已经覆盖了&lt;strong&gt;web端&lt;/strong&gt;，&lt;strong&gt;移动wap端&lt;/strong&gt;，&lt;strong&gt;安卓app端&lt;/strong&gt;，并且目前正在进行&lt;strong&gt;微信小程序&lt;/strong&gt;的最后开发测试阶段，很快也会公测上线。&lt;/p&gt;


&lt;p&gt;完美日程表的理念是高效、健康、有序的安排时间和生活，所以我们的对整个平台的设计都是从这几点出发的，只有真正的作过时间规则和时间管理的人才能真正的体会到我们这款产品带来的前所未有的改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下面是来自用户的真实的声音：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/141115/201710/141115-20171008231547074-1813839542.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们的可爱的用户还在知乎上特别推荐了我们的平台：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;知乎原文地址：&lt;/strong&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29282974&quot;&gt;&lt;strong&gt;https://zhuanlan.zhihu.com/p/29282974&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div readability=&quot;15.371962616822&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/141115/201710/141115-20171008231605356-117254433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;完美日程表的官网地址：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;a href=&quot;http://www.wonder4.cn/&quot;&gt;http://www.wonder4.cn&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强烈推荐使用web网页版！强烈推荐使用web网页版！强烈推荐使用web网页版！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重要的说三遍，因为我们大部分的设计理念都体现在web版上，而且前期只作了web版。 后面因为用户对移动版有一定的需求，我们最大限度的延续了web版的设计，尽力适配移动版。&lt;/p&gt;

&lt;p&gt;下面的有两个版本先提供给大家使用：一个是安卓APP，另一个是移动lite版，扫码即可进入。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/141115/201710/141115-20171008231619496-546915313.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/141115/201710/141115-20171008231630074-2047160577.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;/div&gt;
</description>
<pubDate>Sun, 08 Oct 2017 15:14:00 +0000</pubDate>
<dc:creator>Tony Zhao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ytaozhao/p/7639102.html</dc:identifier>
</item>
<item>
<title>JavaWeb（三）JSP之3个指令、6个动作、9个内置对象和4大作用域 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7637399.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7637399.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　前面大概介绍了什么是JSP，今天我给大家介绍一下JSP的三个指令、6个动作以及它的9大内置对象。接下来我们就直接进入正题&lt;/p&gt;

&lt;p&gt;JSP指令（directive）是为&lt;span&gt;JSP引擎而设计的，它们并不直接产生任何可见输出，而只是告诉引擎如何处理JSP页面中的其余部分&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;指令用来&lt;span&gt;申明JSP页面的一些属性&lt;/span&gt;，比如编码方式，文档类型。我们在servlet中也会申明我们使用的编码方式和响应的文档类型的，而JSP就是用指令来申明。上面我们也说到了一条指令，也就是page指令。&lt;/p&gt;
&lt;p&gt;JSP指令格式：&lt;span&gt;&amp;lt;%@ directive {attribute=value}* %&amp;gt;&lt;/span&gt;（&amp;lt;%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%&amp;gt;）&lt;/p&gt;
&lt;p&gt;　　分析：　　&lt;/p&gt;
&lt;p&gt;　　　　directive：指令名称，例如page指令&lt;/p&gt;
&lt;p&gt;　　　　attribute=value：紧跟指令名称后面的就是各种属性，以键值对的形式书写&lt;/p&gt;
&lt;p&gt;　　　　*：代表后面能跟0个或多个属性。&lt;/p&gt;
&lt;h2&gt;1.1、page指令（用来声明JSP页面的属性等）&lt;/h2&gt;
&lt;p&gt;　　&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;　　page指令，后面跟着三个属性，分别是language、contentType、pageEncoding。&lt;/p&gt;
&lt;p&gt;　　这只是其中的几个属性，并没有写全，page指令允许的属性如下表所示：　&lt;/p&gt;
&lt;p&gt;　　　　　　　　属性名称　　　　　　　　取值范围　　　　　　　　　　描述&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　language&lt;/span&gt;　　　　　　　　java　　　　　　解释&lt;span&gt;该JSP文件时采用的语言，一般为java语言，默认为java&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　extends　　　　　　　　任何类的全名　　　编译该JSP文件时继承哪个类，JSP为Servlet，因此当指明继承普通类时需要实现Servlet的init、destroy等方法&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　import　　&lt;/span&gt;　　　　　　　任何包名、类名　　引入&lt;span&gt;该JSP中用到的类、包等，import是唯一可以声明多次的page指令属性&lt;/span&gt;，一个import可以引用uogelei，中间用英文逗号隔开，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　如&amp;lt;%@ page import=&quot;java.util.List,java.util.ArrayList&quot;%&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　session　&lt;/span&gt;　　　　　　　true、false　　　　该&lt;span&gt;JSP内是否内置Session对象，如果为true，则内置Session对象，可直接使用，否则反之，默认为true&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　autoFlush　　　　　　　true，false　　　　是否运行缓存，如果为true，则使用out.println()等方法输出的字符串并不是立刻到达客户端服务器的，而是暂时存到缓存里，缓存满&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　了或者程序执行完毕或者执行out.flush()操作时才到客户端，默认为true。&lt;/p&gt;
&lt;p&gt;　　　　　　　　buffer　　　　　　　　none或者数字KB　　　指定缓存大小，当autoFlush设为true时有效，例如&amp;lt;%@ page buffer=10kb%&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　isThreadSafe　　　　　　true，false　　　　是否线程安全，如果为true，则运行多个线程同时运行该jsp程序，否则只运行一个线程，其余线程等待，默认为false&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　isErrorPage　&lt;/span&gt;　　　　　true，false　　　　　指定&lt;span&gt;该页面是否为错误显示页面，如果为true，则该JSP内置有一个Exception对象exception，可直接使用，否则没有，默认为false&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　errorPage&lt;/span&gt;　　　　　某个JSP页面的相对路径　　指明&lt;span&gt;一个错误页面，如果该JSP程序抛出一个未捕捉的异常，则转到errorPage指定的页面，errorPage指定的页面通常&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　isErrorPage属性为true&lt;/span&gt;，且内置的exception对象为未捕捉的异常&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　contentType&lt;/span&gt;　　　　　有效的文档类型　　　&lt;span&gt;　客户端浏览器根据该属性判断文档类型&lt;/span&gt;，例如 HTML格式为text/html、纯文本格式为text/plain、JPG图像为image/jpeg、GIF图像为image/gif、&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　WORD文档为application/msword，该属性常跟着charset设置编码一起，作用是通知服务器和浏览器都使用同一个码表&lt;/p&gt;
&lt;p&gt;　　　　　　　　info　　　　　　　　　　任意字符串　　　　　　指明JSP的信息，该信息可以通过Servlet.getServletInfo()方法获取到&lt;/p&gt;
&lt;p&gt;　　　　trimDirective Whitespaces　　　　true、false　　　　　是否去掉指令前后的空白字符，默认为false&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　pageEncoding&lt;/span&gt;　　　　UTF-8,ISO-8859-1等　　　　&lt;span&gt;指定一张码表来对该JSP页面进行编码&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.2、include指令&lt;/h2&gt;
&lt;p&gt;　　比较简单，只有一种形式&lt;span&gt; &amp;lt;%@ include file=&quot;relativeURL&quot;%&amp;gt;&lt;/span&gt;　　relativeURL：&lt;span&gt;本应用程序内另一个JSP文件或者HTML文件的路径&lt;/span&gt;，例如，网址内所有页面均有一个统一风格的导航栏和页脚版权，那么就可以使用该指令将其包含进来。&lt;/p&gt;
&lt;p&gt;　　特点：include指令会&lt;span&gt;将包含页面的源代码添加到使用include指令的页面中来，然后编译成class文件&lt;/span&gt;，而等下会讲到的一个JSP行为，&amp;lt;jsp:include page=&quot;relativeURL&quot;&amp;gt;作用跟include指令一样，&lt;/p&gt;
&lt;p&gt;　　　　　　但是不同的是，include行为是运行时单独执行包含页面，然后把执行的结果包含到本页面来，属于先运行后包含。　　&lt;/p&gt;
&lt;p&gt;　　注意：　　&lt;/p&gt;
&lt;p&gt;　　　　静态包含：把其它资源包含到当前页面中。&lt;br/&gt;　　　　　　&amp;lt;%@ include file=&quot;/include/header.jsp&quot; %&amp;gt;&lt;br/&gt;　　　　动态包含：&lt;br/&gt;　　　　　　&amp;lt;jsp:include page=&quot;/include/header.jsp&quot;&amp;gt;&amp;lt;/jsp:include&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　两者的区别：翻译的时间段不同&lt;br/&gt;　　　　　　前者：在翻译时就把两个文件合并&lt;br/&gt;　　　　　　后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。&lt;/p&gt;
&lt;p&gt;　　　　原则：能用静的就不用动的。&lt;/p&gt;
&lt;h2&gt;1.3、taglib指令&lt;/h2&gt;
&lt;p&gt;　　JSP支持标签技术，后面会讲到标签的用法，jstl标签库的使用等，&lt;/p&gt;
&lt;p&gt;　　作用：用来&lt;span&gt;指明JSP页面内使用的JSP标签库，taglib指令有两个属性，uri为类库的地址，prefix为标签的前缀&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;&lt;/p&gt;

&lt;p&gt;前面讲了JSP语法，介绍了JSP页面中的内容有哪些，分别有什么作用，就两个东西，模块数据和元素。其中元素有包括脚本，指令，标签，脚本就是JSP中嵌入java代码，指令作用就是申明页面的属性，&lt;/p&gt;
&lt;p&gt;那标签是干嘛的，&lt;span&gt;标签分为JSP自带内置的标签，和通过taglib指令来使用JSP标签库&lt;/span&gt;，或者自定义标签。现在我们先来讲一些JSP内置的标签。　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JSP内置的标签就被称为JSP行为&lt;/span&gt;(JSP Actions)。只要书写很少的标记代码就能使用JSP提供的丰富功能，JSP行为其实是&lt;span&gt;对常用的JSP功能的抽象与封装，可以取代jsp脚本，让JSP中就少一些嵌入java代码的地方&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;简单的说就是使用标签的形式来表示一段java代码　&lt;/p&gt;
&lt;p&gt;格式：&amp;lt;jsp:elements ｛attribute=&quot;value&quot;｝* /&amp;gt;　　&lt;/p&gt;
&lt;p&gt;　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　jsp：标签的前缀，说明是jsp内置的标签，&lt;/p&gt;
&lt;p&gt;　　　　　elements：行为的名称，&lt;/p&gt;
&lt;p&gt;　　　　　attribute=value：使用键值对来编写属性&lt;/p&gt;
&lt;p&gt;　　　　　*：能指定0个或多个属性对&lt;/p&gt;
&lt;h2&gt;2.1、&amp;lt;jsp:include /&amp;gt;行为（动态包含）&lt;/h2&gt;
&lt;p&gt;　　&amp;lt;jsp:include page=&quot;/include/header.jsp&quot;&amp;gt;&amp;lt;/jsp:include&amp;gt;&lt;/p&gt;
&lt;p&gt;　　include行为用于&lt;span&gt;运行时包含某个文件，如果被包含的文件为JSP程序，则先会执行JSP程序，然后在把执行的结果包含进来&lt;/span&gt;。　&lt;/p&gt;
&lt;p&gt;　　作用是跟include指令一样的，唯一的区别就在于，&lt;span&gt;include指令是将被包含的文件的源码加入到了本JSP程序中，然后在进行编译，属于静态包含，而include行为只是将被包含的文件的运行结果包含进自己。属于动态包含。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008214205871-540005881.png&quot; alt=&quot;&quot; width=&quot;573&quot; height=&quot;339&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;2.2、Java bean行为&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　是一组与Java Bean 相关的行为，包括&lt;span&gt;useBean行为、setProperty行为、getProperty行为&lt;/span&gt;等&lt;/span&gt;　　　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　Java Bean就是普通的Java类，也被称为POJO，只有私有的属性与对应的getter方法和setter方法，注意其中当私有的属性为boolean类型时，习惯上一般把getter方法写成isXxx();而不是getXxx();　　&lt;/p&gt;
&lt;p&gt;　　1）userBean行为&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&amp;lt;jsp:useBean id=&quot;beanObject&quot; class=&quot;className&quot; scope=&quot;Value&quot;&amp;gt;&lt;/span&gt;　　作用：&lt;span&gt;在jsp中定义一个java bean对象&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　分析： 　　&lt;/p&gt;
&lt;p&gt;　　　　　　id：指明Java Bean对象的名称，JSP中可以使用该名称引用该Java Bean对象，相当于给new出来的对象取一个变量名，&lt;/p&gt;
&lt;p&gt;　　　　　　class：Java Bean类的全名&lt;/p&gt;
&lt;p&gt;　　　　　　scope：该java bean对象的作用范围，可以写的就四个，也就是JSP的四大作用域，page、request、session、application&lt;/p&gt;
&lt;p&gt;　　　　　　　　page：只能在当前JSP页面使用，如果不在JSP页面，那么就会失效&lt;/p&gt;
&lt;p&gt;　　　　　　　　request：这个前面学过，A页面请求转发到B页面，那么使用的是同一个request，那么A,B页面都算是request的作用域，也就是通过请求转发的页面都是其作用域&lt;/p&gt;
&lt;p&gt;　　　　　　　　session：该作用域在一个web项目下任何位置应该读访问的到，只要cookie不关闭，并且cookie设置　　的访问路径为&quot;/&quot;，&lt;/p&gt;
&lt;p&gt;　　　　　　　   application：其实就是Servlet中的servletContext，服务器下的所有项目都能访问到。&lt;/p&gt;
&lt;p&gt;　　2）setProperty行为&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&amp;lt;jsp:setProperty name=&quot;beanName&quot; property=&quot;propertyName&quot; value=&quot;&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;对Java Bean对象进行属性的设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　name：java bean对象的名称，也就是在useBean行为中的id&lt;/p&gt;
&lt;p&gt;　　　　　　property：对象中的属性名，&lt;/p&gt;
&lt;p&gt;　　　　　　value：要对其属性进行赋值的值&lt;/p&gt;
&lt;p&gt;　　3）getProperty行为&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&amp;lt;jsp:getProperty name=&quot;beanName&quot; property=&quot;propertyName&quot; /&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　分析：　　　　　　　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;获取JavaBean对象的某个属性值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　name:java bean 对象的名称，也就是在useBean行为中的id&lt;/p&gt;
&lt;p&gt;　　　　　　property：对象的属性名&lt;/p&gt;
&lt;p&gt;　　举例：javabean：User.java、NewFile.jsp&lt;/p&gt;
&lt;p&gt;　　User.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0dcb7084-c7d9-4284-9536-4a1b1a9755ba')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0dcb7084-c7d9-4284-9536-4a1b1a9755ba&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0dcb7084-c7d9-4284-9536-4a1b1a9755ba&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0dcb7084-c7d9-4284-9536-4a1b1a9755ba',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0dcb7084-c7d9-4284-9536-4a1b1a9755ba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package a;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;User&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　NewFile.jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a688f06c-782f-4e04-b68e-01d7d5b995b8')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_a688f06c-782f-4e04-b68e-01d7d5b995b8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a688f06c-782f-4e04-b68e-01d7d5b995b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a688f06c-782f-4e04-b68e-01d7d5b995b8',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a688f06c-782f-4e04-b68e-01d7d5b995b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- 创建一个新的javabean对象user,会先判断在page作用域内是否有叫user对象的javabean，如果有则取它，如果没有则创建新的javabean对象  --&amp;gt;
    &amp;lt;jsp:useBean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a.User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/jsp:useBean&amp;gt;
    &amp;lt;!-- 对javabean对象的username进行赋值 --&amp;gt;
    &amp;lt;jsp:setProperty property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;faker&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;!-- 获取javabean对象的username属性 --&amp;gt;
    &amp;lt;jsp:getProperty property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;NewFile.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　可以查看NewFile.jsp变为servlet后的源代码，看看我们写的javabean行为会被转换为何种语句:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008212031981-1088946525.png&quot; alt=&quot;&quot; width=&quot;853&quot; height=&quot;409&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里出现了一个JSP九大内置对象中的一个，pageContext。现在简单提一句，pageContext就是JSP页面的管理者(上下文)，其中的getAttribute(name，scope)方法是获取指定作用域中的数据的，&lt;/p&gt;
&lt;p&gt;　　如果getAttribute(name)方法的话，默认是对page作用域进行操作，findAttribute(name)依次从page、request、session、application获得内容。&lt;/p&gt;
&lt;p&gt;　　在第一个红框中，就代表中我们的useBean行为，其中进行了一次判断，就是如果在page作用域中找不到user这个对象，那么就创建一个新的，否则就使用找到的这个user对象，&lt;/p&gt;
&lt;p&gt;　　第二个红框中，代表着我们的setProperty行为，先找到user对象，然后在对其属性进行赋值&lt;/p&gt;
&lt;p&gt;　　第三个红框中，代表着我们的getProperty行为，也是先找到user对象，然后在获取其属性的值。&lt;/p&gt;
&lt;p&gt;　　注意：对于javabean行为来说，有一个特点的地方，就是当请求过来的参数对应javabean的属性时，可以为其一次性设置所有的值&lt;/p&gt;
&lt;p&gt;　　　　　　&amp;lt;jsp:setProperty name=&quot;user&quot; property=&quot;*&quot; /&amp;gt; //设置user的所有属性，属性值从request中自动取得，*代表所有属性。&lt;/p&gt;
&lt;h2&gt;2.3、&amp;lt;jsp:forward /&amp;gt;行为&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;实现请求转发功能&lt;/span&gt;，Servlet中通过request.getRequestDispatcher(&quot;someServlet&quot;).forward(request,response);而在JSP中也能够实现相同的功能，只不过用的是&amp;lt;jsp:forward /&amp;gt;行为，实际上forward行为就是对其进行了封装。　　&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
　　　　　　　　&amp;lt;jsp:forward page=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;someServlet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
　　　　　　　　　　　&amp;lt;jsp:param name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;param1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
　　　　　　　　　　　&amp;lt;jsp:param name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;param2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
　　　　　　　　&amp;lt;/jsp:forward&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　分析：&lt;span&gt;page:需要跳转到的页面或者servlet、&amp;lt;jsp:param/&amp;gt;参数行为，带一些参数过去，name、value是以键值对的形式带过去的　&lt;/span&gt;　　　　&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　在NewFile.jsp中&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008215618746-324216886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　在ForwardTestServlet中&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008215649996-80126185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　访问：http://localhost:8080/Web_Jsp/NewFile.jsp&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008215728278-557893767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　浏览器地址栏没有改变，说明是请求转发&lt;/p&gt;
&lt;h2&gt;2.4、&amp;lt;jsp:directive/&amp;gt;行为&lt;/h2&gt;
&lt;p&gt;　　directive行为，就相当于JSP指令，比如&amp;lt;jsp:directive.page/&amp;gt;相当于&amp;lt;%@ page %&amp;gt;指令，等等其它指令是一样的书写格式。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在我们开发中，经常要用到的6个行为是&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;jsp:include &amp;gt; 动态包含&lt;br/&gt;　　　　&amp;lt;jsp:forward&amp;gt; 请求转发&lt;br/&gt;　　　　&amp;lt;jsp:param&amp;gt; 设置请求参数&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;jsp:useBean&amp;gt; 创建一个对象&lt;br/&gt;　　　　&amp;lt;jsp:setProperty&amp;gt; 给指定的对象属性赋值&lt;br/&gt;　　　　&amp;lt;jsp:getProperty&amp;gt; 取出指定对象的属性值&lt;/p&gt;

&lt;p&gt;我们知道&lt;span&gt;JSP中的内容就只有两种，模版数据和元素&lt;/span&gt;，元素就包括了&lt;span&gt;指令，脚本，标签(行为)&lt;/span&gt;，&lt;span&gt;脚本会慢慢被标签全部代替&lt;/span&gt;，也就是说&lt;span&gt;JSP中基本上不会嵌入Java代码&lt;/span&gt;，但是我们也知道JSP会转换为servlet，&lt;/p&gt;
&lt;p&gt;在Servlet中，输出数据时，都需要通过response.getWrite()；但是&lt;span&gt;在JSP中，直接使用out对象进行输出&lt;/span&gt;，为什么呢？这就是因为out为JSP的一个隐藏对象，JSP中内置了9个隐藏对象，使得JSP比Servlet使用起来更简单，更方便。&lt;/p&gt;
&lt;h2&gt;3.1、九大内置对象概述&lt;/h2&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008221554356-961080744.png&quot; alt=&quot;&quot; width=&quot;741&quot; height=&quot;316&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　分析：&lt;/p&gt;
&lt;p&gt;　　　　request:请求对象，　　类型：httpServletRequest&lt;/p&gt;
&lt;p&gt;　　　　response:响应对象　　类型：httpServletResponse&lt;/p&gt;
&lt;p&gt;　　　　session：表示一次会话，在服务器端记录用户状信息的技术&lt;/p&gt;
&lt;p&gt;　　　　application：标识web应用上下文，类型：ServletContext，详情就看Servlet中的ServletContext的使用&lt;/p&gt;
&lt;p&gt;　　　　exception 表示发生异常对象，类型 Throwable，在上面我们介绍page指令中的一个errorPage属性时就有说到他&lt;/p&gt;
&lt;p&gt;　　　　page：page对象代表当前JSP页面，是当前JSP编译后的Servlet类的对象。相当于this。&lt;/p&gt;
&lt;p&gt;　　　　config：标识Servlet配置，类型：ServletConfig，api跟Servlet中的ServletConfig对象是一样的，能获取该servlet的一些配置信息，能够获取ServletContext&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;out&lt;/span&gt;：输出响应体 类型：JspWriter&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;pageContext&lt;/span&gt;：表示 jsp页面上下文（jsp管理者） 类型：PageContext&lt;/p&gt;
&lt;p&gt;　　　　注意：标记了红色的对象就是JSP独有的，其他的都是Servlet中的老东西。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008222153637-272377643.png&quot; alt=&quot;&quot; width=&quot;889&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在这个由jsp转换为servlet的文件中，只能看到8个内置对象，少了exception对象，因为我们在将page指令时，说过一个isErrorPage属性，默认是false，被关闭了，所以其中并没有exception对象。&lt;/p&gt;
&lt;h2&gt;3.2、pageContext（重要）&lt;/h2&gt;
&lt;p&gt;　　这个功能就比较强大了，基本上什么他都有，因为是它是&lt;span&gt;JSP页面的管理者(上下文)&lt;/span&gt;，所以JSP中的内置对象呀，它统统能够获得，下面介绍它的api：&lt;/p&gt;
&lt;p&gt;　　1）获得其它八大内置对象 getXxx()&lt;/p&gt;
&lt;p&gt;　　　　在&lt;span&gt;普通类中可以通过PageContext获取其他JSP隐式对象&lt;/span&gt;。自定义标签时就使用。&lt;/p&gt;
&lt;p&gt;　　　　pageContext.getOut();　　//获得out对象&lt;/p&gt;
&lt;p&gt;　　　　pageContext.getApplication();　　//获得application对象&lt;/p&gt;
&lt;p&gt;　　　　等等....&lt;/p&gt;
&lt;p&gt;　　2）对作用域的属性进行操作(四大作用域)&lt;/p&gt;
&lt;p&gt;　　　　对默认作用域的属性进行操作。page&lt;/p&gt;
&lt;p&gt;　　　　Object getAttribute(String name);　　//获得page作用域数据&lt;/p&gt;
&lt;p&gt;　　　　void setAttribute(String name,Object o);　　//给page作用域设置内容&lt;/p&gt;
&lt;p&gt;　　　　void removeAttribute(String name);　　//给page作用域移除内容&lt;/p&gt;
&lt;p&gt;　　3）对指定作用域的属性进行操作&lt;/p&gt;
&lt;p&gt;　　　　Object getAttribute(String name,int Scope);　　//获得 指定作用域中的数据&lt;/p&gt;
&lt;p&gt;　　　　void setAttribute(String name,Object o，int Scope);　　//给指定作用域设置内容&lt;/p&gt;
&lt;p&gt;　　　　void removeAttribute(String name,int Scope);     // 移除指定作用域的内容（page/request/session/application）&lt;/p&gt;
&lt;p&gt;　　4）提供作用域常量&lt;/p&gt;
&lt;p&gt;　　　　PageContext.PAGE_SCOPE　　page&lt;/p&gt;
&lt;p&gt;　　　　PageContext.REQUEST_SCOPE　　request　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　PageContext.SESSION_SCOPE　　response&lt;/p&gt;
&lt;p&gt;　　　　PageContext.APPLICATION_SCOPE　　application&lt;/p&gt;
&lt;p&gt;　　5）一次获得指定名称内容&lt;/p&gt;
&lt;p&gt;　　　　page中最厉害的方法是：&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　　　　　findAttribute(String name);  //自动从page request session application依次查找，找到了就取值，结束查找。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　实例：&lt;/p&gt;
&lt;p&gt;　　　　在1.jsp中：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008223447840-1244057295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　在2.jsp中&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008223533512-1419077294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6）提供了的简易方法　　&lt;/p&gt;
&lt;p&gt;　　　　pageContext.forward(&quot;2.jsp&quot;);&lt;br/&gt;　　　　pageContext.include(&quot;2.jsp&quot;);&lt;/p&gt;
&lt;h2&gt;3.3、out对象&lt;/h2&gt;
&lt;p&gt;　　类型：JspWriter&lt;/p&gt;
&lt;p&gt;　　jsp 输出底层使用 response.getWriter()；什么意思呢？这里就要讲解一下JSP缓存和Servlet缓存了，输出的过程是这样的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008224847309-1455936154.png&quot; alt=&quot;&quot; width=&quot;710&quot; height=&quot;210&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　JSP页面转换为Servlet后，使用的out对象是JspWriter类型的，所以是会先将要发送的数据存入JSP输出缓存中，然后，等JSP输出缓存满了在自动刷新到servlet输出缓存，&lt;/p&gt;
&lt;p&gt;　　　　等serlvet输出缓存满了，或者程序结束了，就会将其输出到浏览器上。除非手动out.flush()。&lt;/p&gt;
&lt;p&gt;　　验证servlet输出缓存和JSP输出缓存和我们上面所说的是正确：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225010809-201390858.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;139&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225115793-252361641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　　如果按没有jsp缓存和servlet缓存的话，输出的结果应该是aaaabbbbcccc，但是输出的却是bbbbaaaacccc，为什么呢？按照我们上面所说的原理进行分析，out对象是先将其输出到JSP缓存中，所以aaaa加入了jsp缓存，&lt;/p&gt;
&lt;p&gt;　　　　　　而response.getWriter().print(&quot;bbbb&quot;)是直接将bbbb输出到servlet缓存中，然后又使用out对象将cccc输出到jsp缓存，到程序结束，servlet缓存中有bbbb，然后jsp会将缓存中的内容就刷新到servlet缓存中，&lt;/p&gt;
&lt;p&gt;　　　　　　serlvet就是bbbbaaaacccc了，然后到浏览器也就得到我们的输出结果了。如果在12行将注释去掉，那么输出的结果又会是什么呢？答案就是aaaabbbbcccc，过程自行分析。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225212043-40705588.png&quot; alt=&quot;&quot; width=&quot;405&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.4、config对象&lt;/h2&gt;
&lt;p&gt;　　类型：ServletConfig&lt;/p&gt;
&lt;p&gt;　　能够获取servlet的初始化参数，获取servletContext对象，获取servletName。&lt;/p&gt;
&lt;p&gt;　　这个我在servlet中详细的讲解了，可以去查看！&lt;/p&gt;
&lt;h2&gt;3.5、exception异常对象&lt;/h2&gt;
&lt;p&gt;　　包含了异常的信息&lt;/p&gt;
&lt;p&gt;　　使用它，必须&lt;span&gt;结合page指令中的isErrorPage属性和errorPage属性&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　exception.jsp　　抛异常的一个NullPointException，并且跳转到error.jsp错误显示页面　　errorPage属性的意思是如果发生未捕捉到的异常，将会跳转到error.jsp页面&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225444043-1716392215.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　error.jsp　　isErrorPage属性说明该页面是一个错误显示页面，则可以使用exception对象&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225538871-1396341769.png&quot; alt=&quot;&quot; width=&quot;526&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　访问：访问http://localhost:8080/Web_Jsp/exception.jsp&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225652590-2009111945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结：九大内置对象和servlet中对象的关系　　&lt;/p&gt;
&lt;p&gt;　　page就是jsp转换为servletservlet对象本身，也就是this&lt;/p&gt;
&lt;p&gt;　　config -- Servlet中的servletConfig&lt;/p&gt;
&lt;p&gt;　　application -- Servlet中的ServletContext&lt;/p&gt;
&lt;p&gt;　　request　　-- Servlet中的request&lt;/p&gt;
&lt;p&gt;　　response　　-- Servlet中的response&lt;/p&gt;
&lt;p&gt;　　session　　-- Servlet中的session　　　　&lt;/p&gt;
&lt;p&gt;　　out　　--　JspWriter&lt;/p&gt;
&lt;p&gt;　　exception　　-- 异常对象&lt;/p&gt;
&lt;p&gt;　　pageContext　　-- 表示 jsp页面上下文（jsp管理者） 类型：PageContext&lt;/p&gt;
&lt;p&gt;　　其中pageContext是最厉害的，因为它可以得到其他8个内置对象　　&lt;/p&gt;

&lt;p&gt;这四大作用域，其实就是其九大内置对象中的四个，为什么说他们也是JSP的四大作用域呢？&lt;/p&gt;
&lt;p&gt;　　因为这&lt;span&gt;四个对象都能存储数据&lt;/span&gt;，比如request.setAttribute()注意和request.setParameter()区分开来，一个是存储在域中的、一个是请求参数，session.setAttribute()、application其实就是SerlvetContext，自然也有setAttribute()方法。&lt;/p&gt;
&lt;p&gt;　　而page作用域的操作就需要依靠pageContext对象来进行了。在上面我们也有提到JSP的四大作用域。&lt;/p&gt;
&lt;p&gt;1）page作用域&lt;/p&gt;
&lt;p&gt;　　代表变量&lt;span&gt;只能在当前页面上生效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2）request作用域&lt;/p&gt;
&lt;p&gt;　　代表变量能&lt;span&gt;在一次请求中生效，一次请求可能包含一个页面，也可能包含多个页面&lt;/span&gt;，比如页面A请求转发到页面B。&lt;/p&gt;
&lt;p&gt;3）session作用域&lt;/p&gt;
&lt;p&gt;　　代表变量能在&lt;span&gt;一次会话中生效，基本上就是能在web项目下都有效&lt;/span&gt;，session的使用也跟cookie有很大的关系。一般来说，&lt;span&gt;只要浏览器不关闭，cookie就会一直生效，cookie生效，session的使用就不会受到影响&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;4）application作用域&lt;/p&gt;
&lt;p&gt;　　代表变量能&lt;span&gt;一个应用下(多个会话)，在服务器下的多个项目之间都能够使用&lt;/span&gt;。比如baidu、wenku等共享帐号。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;喜欢就点个“推荐”哦！　　&lt;/strong&gt;&lt;/span&gt;　&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 15:07:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7637399.html</dc:identifier>
</item>
<item>
<title>SpringBoot初体验 - 呼呼呼呼呼65</title>
<link>http://www.cnblogs.com/huhu1203/p/7638054.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huhu1203/p/7638054.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.elipse中创建Springboot项目并启动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;具体创建步骤请参考：&lt;a href=&quot;http://blog.csdn.net/clementad/article/details/51334064&quot;&gt;Eclipse中创建新的Spring Boot项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.项目的属性配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a.首先我们在项目的resources目录下application.yml中添加以下内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8080
  #set a prefix on our URLRequestMapping
  #context-path: /boot

str1: hello
str2: world
content: &quot;str1: $&lt;/span&gt;{&lt;span&gt;str1&lt;/span&gt;}&lt;span&gt;, str2:$&lt;/span&gt;{&lt;span&gt;str2&lt;/span&gt;}&lt;span&gt;&quot;
gril: 
  name: Hanmeimei
  age: 21
boy: 
  name: Lilei
  age: 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;谈谈数据绑定&lt;/p&gt;
&lt;p&gt;b.@Value，我们在我们创建的Controller中加入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {
    
    @Value(&lt;/span&gt;&quot;${str1}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String str1;
    @Value(&lt;/span&gt;&quot;${str2}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String str2;
    @Value(&lt;/span&gt;&quot;${content}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String content; 
    
    
    @RequestMapping(value &lt;/span&gt;=&quot;/hello&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say() {
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; str1+&quot; &quot;+str2+&quot; &quot;+&lt;span&gt;content;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008153550215-1943274266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;c.@Component和@ConfigurationProperties的结合使用创建bean&lt;/p&gt;
&lt;p&gt;boy.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把普通pojo实例化到spring容器中，相当于配置文件中的&amp;lt;bean id=&quot;&quot; class=&quot;&quot;/&amp;gt;&lt;/span&gt;
&lt;span&gt;@Component
@ConfigurationProperties(prefix&lt;/span&gt;=&quot;boy&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Boy {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gril.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把普通pojo实例化到spring容器中，相当于配置文件中的&amp;lt;bean id=&quot;&quot; class=&quot;&quot;/&amp;gt;&lt;/span&gt;
&lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现该类的属性与application.yml中的以gril为前缀的数据匹配&lt;/span&gt;
@ConfigurationProperties(prefix=&quot;gril&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Gril {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HelloController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Gril gril;
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Boy boy;
    
    @RequestMapping(value &lt;/span&gt;=&quot;/hello&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say() {
        
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; gril.getName()+&quot; &quot;+&lt;span&gt;boy.getName();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008155244168-645445242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有一个问题，为什么它们都能把我们application.yml我们设置属性怎么就显示到网页上了？&lt;/p&gt;
&lt;p&gt;原因：当你没有声明ViewResolver时，spring会给你注册一个默认的ViewResolver，其是JstlView的实例。&lt;/p&gt;
&lt;p&gt;d.改变ViewResolver&lt;/p&gt;
&lt;p&gt;首先我们在pom.xml中添加依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在resources/templates/中添加huhu.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello SpringBoot!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变HelloController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {

    
    @RequestMapping(value &lt;/span&gt;=&quot;/hello&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say() {
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;huhu&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008162326731-865530566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;细心的你是否发现了我上面用的是@Controller，上面都用的是@RestController，我们来看一下区别吧，官方文档里这样说：@RestController is a stereotype annotation that combines @ResponseBody and @Controller.很显然它包括了@ResponseBody and @Controller，上面我们改变了ViewResolver，当然要用@Controller了，json，xml也是类似的做法。&lt;/p&gt;
&lt;p&gt;你也可以把上面的HelloController.java改成：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloController {&lt;br/&gt;@RequestMapping(value =&quot;/hello&quot;,method=RequestMethod.GET) &lt;br/&gt;public String say() { &lt;br/&gt;return &quot;huhu&quot;; &lt;br/&gt;} &lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008163240449-1601714335.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.SpringBoot杂谈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a.SpringBoot的三种启动&lt;/p&gt;
&lt;p&gt;1.elipse或者idea一键启动&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008164011028-2053028892.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;2.mvn spring-boot:run&lt;/p&gt;
&lt;p&gt;3.mvn install    cd /target   java -jar ***.jar&lt;/p&gt;
&lt;p&gt;既然可以有多种启动方法，我们可不可以启动两个，满足我们线上和线下的开发需求呢？答案是可以：&lt;/p&gt;
&lt;p&gt;b.分环境启动SpringBoot&lt;/p&gt;
&lt;p&gt;先设置我们resources中application.yml，我们复制两个，分别起名为&lt;/p&gt;
&lt;p&gt;application-dev.yml&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8081
  #set a prefix on our URLRequestMapping
  #context-path: /boot

str1: hello
str2: world
content: &quot;str1: ${str1}, str2:${str2}&quot;
gril: 
  name: Hanmeimei
  age: 21
boy: 
  name: Lilei
  age: 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;application-pro.yml&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;55.766305937409&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8080
  #set a prefix on our URLRequestMapping
  #context-path: /boot

str1: hello
str2: world
content: &quot;str1: ${str1}, str2:${str2}&quot;
gril: 
  name: Hanmeimei
  age: 21
boy: 
  name: Lilei
  age: 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改application.yml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  profiles:
    active: dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们分别启动，一个用elipse，一个用第三种方法cmd&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165129293-981478489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165401356-1675296540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165546199-1117661442.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165615574-483220446.png&quot; alt=&quot;&quot; width=&quot;413&quot; height=&quot;334&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有人会说，这无非就是开启了两个不同端口的tomcat么？这能做什么啊？&lt;/p&gt;
&lt;p&gt;对的，我想到了可以用它配合nginx做负载均衡啊，大家可以看看这个：&lt;a href=&quot;http://blog.csdn.net/wlwlwlwl015/article/details/48240867&quot;&gt;Nginx+Tomcat 实现负载均衡（Windows单机测试）&lt;/a&gt;，是不是SpringBoot让一些东西变简单了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 4.Spring操作mysql数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; a.pom.xml引入两个依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b.在application.yml中写入配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  datasource:
    driver-class-name: com.mysql.jdbc.Driver 
    url: jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8&lt;/span&gt;&lt;span&gt;&amp;amp;useSSL&lt;/span&gt;&lt;span&gt;=false
    username: root
    password: taizi1203
    
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c.创建你要在数据库中写的表的Bean&lt;/p&gt;
&lt;p&gt;Dril.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据持久化&lt;/span&gt;
&lt;span&gt;@Entity
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dril {
    
    @Id
    @GeneratedValue
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Dril() {

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;d.启动结果：&lt;/p&gt;
&lt;p&gt;当看到这个，代表你成功了，数据库中已经生成这个表。看到其他，请核对前面的配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008203332012-474151585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;箭头所指的体现了我们在application.yml中的&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008203753184-720666369.png&quot; alt=&quot;&quot;/&gt;，如果是create，每次都会删掉原来的表，update只会更新，其他自己看。&lt;/p&gt;
&lt;p&gt; e.编写Controller和DrilService&lt;/p&gt;
&lt;p&gt;DrilController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DrilController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DrilService drilService;
    
    @RequestMapping(value&lt;/span&gt;=&quot;/dril&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Dril&amp;gt;&lt;span&gt; getDrils(){
        
        List&lt;/span&gt;&amp;lt;Dril&amp;gt; drils =&lt;span&gt;drilService.findAll();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; drils;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DrilService.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是我们要返回的对象，第二个是ID extends Serializable，即我们在生成数据库的时候指定的Id的类型&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; DrilService &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Dril,Integer&amp;gt;&lt;span&gt;{

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f.启动结果&lt;/p&gt;
&lt;p&gt;有FE助手的出现json&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008211035746-834003437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IE结果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008212250074-339099324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;纳闷了，页面返回的数据怎么json了，看了一下IE中的结果，还好没有说错（spring默认注册ViewResolver是JstlView）。其他操作，我就不具体做了。&lt;/p&gt;
&lt;p&gt; JPA好像为我们做了好多事，但是他的方法才有几个，总有点他不能干的的，如我们不通过ID来的操作数据库，这时候我们扩展一下他：&lt;/p&gt;
&lt;p&gt;DrilJPA.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; DrilJPA &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Dril,Integer&amp;gt;&lt;span&gt;{
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过name来查询数据库,findByXxxx不能乱写&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;Dril&amp;gt;&lt;span&gt; findByName(String name);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加Controller：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@RequestMapping(value=&quot;/drils/{name}&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Dril&amp;gt; getDrilName(@PathVariable(&quot;name&quot;&lt;span&gt;)String name){
        
        List&lt;/span&gt;&amp;lt;Dril&amp;gt; drils =&lt;span&gt;drilService.findByName(name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; drils;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008214738153-1001630848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.事务管理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;事务：一系列操作，要么全部成功，要么全部不成功。Spring事务管理，大家参考：&lt;a href=&quot;http://www.mamicode.com/info-detail-1248286.html&quot;&gt;Spring事务管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; DrilService.java&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;15.5&quot;&gt; 
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DrilService {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DrilJPA drilJPA;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addTwo(){
        Dril dril1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;3&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;20&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosan&quot;&lt;span&gt;);
        drilJPA.save(dril1);
        
        Dril dril2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;4&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;24&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosi&quot;&lt;span&gt;);
        drilJPA.save(dril2);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加Controller&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DrilService drilService2;

    @RequestMapping(value&lt;/span&gt;=&quot;/drils/addTwo&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getDrilName(){
        
        drilService2.addTwo();;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  如果运行结果成这样，这是事务管理不想看到的，xiaosi跑路了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008221947340-1175667444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;SpringBoot有个解决办法：&lt;/p&gt;
&lt;p&gt;给Service层方法上添加@Transactional就可以解决。&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Transactional
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addTwo(){
        Dril dril1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;3&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;20&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosan&quot;&lt;span&gt;);
        drilJPA.save(dril1);
        
        Dril dril2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;4&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;24&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosi&quot;&lt;span&gt;);
        drilJPA.save(dril2);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，就分享到这里吧，后面还会更新。&lt;/p&gt;
&lt;p&gt;谢谢大家的阅读，博客不易，请转载注明地址：&lt;a href=&quot;http://www.cnblogs.com/huhu1203/p/7638054.html&quot;&gt;http://www.cnblogs.com/huhu1203/p/7638054.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 14:28:00 +0000</pubDate>
<dc:creator>呼呼呼呼呼65</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huhu1203/p/7638054.html</dc:identifier>
</item>
<item>
<title>一个微服务框架的情节 - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/7617402.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/7617402.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001161707559-1498839344.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;记得14年初下定决心重构系统的那一刻 ，“一切从简”的欲望尤为强烈，只因事情已经被“复杂”堵得水泄不通，其实归根到底还是过往自身的工具化思维局限了问题“最优解”的选择。对于一个“入世未深”的小伙来说，“简单”仅仅是简单。但无论如何，能把“简法”付诸行动，就已经不很简单了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001161821122-691805656.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每当代码打包发布的时候，一个上百兆的部署文件让我深感忧虑。我的担忧并非空穴来风，一次又一次的瓶颈让我验证了这该死的担忧。面对这样一个庞然怪物，就算无数个“通宵”也削减不了我对它的力不从心，“分解”成为了我当时的唯一想法。因为“分解”是我们人类处理复杂的一种常识化手段，它能让我把一条复杂的数学题逐一破解，也能让我把一项艰巨的任务分而治之，更让我看到了人类从“自给自足”到“专业化分工”的魅力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001161933028-788881786.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162105731-207004601.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;无可否认，MVC是互联网时代的“王者荣耀”，但随着移动互联网的发展，我试图寻找另一种更适合多端消费的服务化抽象模式。如果我只是单纯地把沉重的SSH切换到当时较为流行且轻量的SSM，其实并没有太多本质上的区别。我们当时的这种“服务化”分解其实更多地想给“消费者”提供一种轻量化、标准化、抽象化的服务支撑，如果要用专业术语来形容，可能SOA（面向服务架构）更为贴切。但ESB和WS作为当时SOA的主流实现和工具，它们的“沉重”让我望而却之。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162144465-665184274.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162252356-412204610.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有想法对于一个年轻人来说再正常不过，但把能把这想法付诸实现还是需要一定的付出、勇气和机遇。才疏学浅的我在当时并未看到“服务化”的普及，选择一款成熟且契合自己思路的工具也不是一件容易的事，又或许是我内心当时那份热血澎湃的重构欲望在日益膨胀。幸运的是，开放的平台给了我足够开放的心态、空间和信心去打造属于我们的“轮子”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162324044-750169752.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162419512-1829151950.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“简单”是我们设计的首要原则，因为简单赋予了灵活，提高了效率、增强了可控，而且自主研发的约束范围也会远远大于工具的选择，为“简化”创造了无限可能。开源工具的思考边界可能更多地会集中在技术引擎和技术规范二者之间，因为它必须抽象在应用场景之下才能达到一定的通用性，所以开源的考虑会非常周到且功能齐全，但会存在一定的“臃肿”和“个性化”局限，这也是我们“自造轮子”的重要考虑之一，但更重要的还是从本质出发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162453262-538370492.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162548903-534158394.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“服务化”的设计理念会把应用根据“领域边界”分解成一个个独立的“服务进程”。其实，划分后的应用系统跟操作系统还是有几分相似之处，服务好比进程，线程好比服务的业务执行单元。事实上，它们在运行过程中就是这样一种上下层的对应关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162621794-261866955.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程的执行是基于栈帧的“跳进跳出”，而业务的执行是基于“流程”的线性执行。“流程”是业务执行的线性抽象，对“流程”的分解、定义、组织和管控恰恰就是我们对“技术引擎”设计的关键所在。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162646731-1540168297.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162735184-197690543.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对流程的抽象并非想说明我们“轮子”的独特之处，而是尝试对流程本质进行重新理解。因为本质，所以无论SSH还是SSM都能作为该抽象流程的一种实现。但是，我们要做的是尝试重新透过现象看本质，然后基于本质之上一砖一瓦重新打造出我们“服务化”理念的另一种实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162809215-1282834197.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一张白纸的背后可能隐藏着数十道工序的运作，我们“轮子”每砖瓦的堆砌同样少不了对系统从始至终、由里到外的无数次观察和思考。每一次的重构都千差万别，每一次的放弃都异常挣扎，但每一次都更接近于自己的内心。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162829325-1771723757.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了服务交互协议层外（Service Interaction protocal），我们把框架总体划分为框架服务（Framework Service）、基础服务（Base Service）和业务服务（Business Service）三个层次，各层次服务都是由定时器模块组件（Timer）、初始化模块组件（Initor）、销毁模块组件（Destoryer）、业务前置模块组件（ SB_Module）、业务后置模块组件（SA_Module）以及业务实现模块组件（Services）组成。从结构上看，每一层的服务都内嵌于它上一层的服务之中，让各种模块组件形成了一种高约定、标准化、插拔式的切面规则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162904153-1102537906.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从开发框架的切面结构上看，框架的规范化约束已经弱化了传统的三层结构模式，把一切非核心逻辑“边缘模块组件化”，重点关注业务的核心逻辑实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163000700-451582504.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因“欲望”的驱动，“自由”成为人性放飞自我的向往，但无拘无束的“自由”往往会对人性的自我控制形成严峻的考验，否则不会“无规不成圆”。“自由”和“约束”看似一种鱼和熊掌的关系，实际上，“约束”是迈向“自由”必不可少的前提。所以，“约束”可以让我们尽量地减少了配置、封装和依赖，尽量以一种简洁、高效且通俗易懂的工具形态让执行者“自由地”聚焦在问题的本质之上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163030825-783049256.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上的服务定义主要源于我们对技术引擎的流程抽象分析。但业务服务（BUSINESS）本身除了具备核心业务的能力支撑以外，背后还隐藏着一个对核心业务的管理职责（俗称服务信息管理平台）。因此，我们继续把服务按功能性类别分解为“面向服务支撑（SOP）”和“面向服务管理（SMP）”两大类服务类型，无论业务支撑还是信息管理都实现了前后端的分离，把轻量化SOA演绎得淋漓尽致。因为基础服务与业务服务的强关联性，基础服务同样被细分为BASESOP和BASESMP两大类基础服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163050528-1181172002.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务目录命名规范中的xxx为业务服务自定义标识，模块组件命名规范中的XXX为三位纯数字组合，除了唯一性的约束以外，还具备了内部模块组件（除业务实现模块）执行顺序的规范化约束，这一点跟Linux的运行级别中的运行脚本命名规范还是有几分相似之处（KXX.../SXX...）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163113950-32073560.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163150200-1150587721.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从某个角度来看，人性的“懒惰”是社会进步的动力，它激发了人类创造的欲望来释放自己并减少一系列人为的不稳定性。但在那些尚未被工具自动化或智能化所覆盖的领域，适当的提前约束和规范同样是对人为管理的一种自动化体现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163209747-1191906021.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;框架的会话上下文（SessionContext）是线程流程代理及其模块组件解耦的关键所在，它承载着整个线程生命周期的状态信息，如业务会话（抽象）对象、请求报文对象（JSON）、响应报文对象（JSON）、模块组件内部执行上下文以及关系数据库事务控制等数据和信息。而框架服务内更多地集成了流程的一些应用规范化实现，如服务并发控制拦截，数据统一解析、安全拦截验证 、数据统一响应输出以及统一规范化日志记录等基础应用实现。此外，框架还集成了如关系数据库、内存数据库、远程过程调用等规范化的“数据适配器组件”，让业务的核心逻辑更加轻量和清晰地聚焦在业务层面（Service）。最终，应用服务基于标准化的应用规范之上实现了全方位的流程代理及管控。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163233965-444316941.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163323247-446792925.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经济学认为“交换驱动发展”，这是人类从自给自足发展至全球化分工的一个演变“真理”。而互联网的出现更让交换出现了前所未有的低成本、大范围，甚至把数量庞大的“物”也“卷入”了交换的浪潮，把未来的一切想象无限放大。“服务化”应用同样是信息交换驱动发展的一种演变和趋势，一个个具有“独立领域行为”的个体服务在信息交互过程中增加了各种应用行为“涌现”的可能性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163408950-1462759980.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务发现中心（KingWorks-RDC）在服务网络中扮演了信息登记服务的角色，有点类似于DNS服务在互联网中的定位，“模糊”了主机的位置，解耦了服务之间的关联。归根到底，RDC是一个基于服务开发框架（KingWorks-SDF）建设的“动态解析”支撑类信息服务。而微网关（KingWorks-MSG）则是一个内置于服务开发框架的服务请求代理组件，除了具备基于RDC动态代理的实现，还兼顾了“静态解析”的预留，为一些“稳定”的服务应用场景省去了动态的消耗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163440794-1962580734.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务信息的动态解析是基于“服务信息中心”组件的周期更新，此外，RDC还预留了“服务变更”主动推送通知功能，需要此功能的服务只需要通过“推送开关”配置即可实现RDC的服务变更实时推送通知（非强一致性），提高本地服务对敏感信息更新的实时性。另外，对于一些存在多服务区域（多局域网）的应用场景，我们通过对本地服务信息（IP1&amp;amp;PORT1）和外部服务信息（IP2&amp;amp;PORT2）的区分让“混合云”的服务化应用成为可能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163537044-1880712053.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;凡事都有两面性，好坏优缺得失并存，但是善于“扬长补短”的人类注定不会让社会成为一个“零和游戏”。当我面对服务化多节点所导致的高额人工维护成本时，自动化工具将是这场“正值游戏”的重要手段。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163611090-1430535738.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自动化管控服务（KingWorks-OPS）是整个服务化应用的管控平台。底层主要是由一个C/S模式的脚本任务调度引擎支撑，C是一个内嵌于应用服务的任务执行代理（OPS-Agent By Python），提供了定时和实时的执行入口，而S则是一个任务调用管控服务，集中式对所有服务任务进行管理、配置以及调用。基于引擎之上的，就是面向场景的集成，如服务统一配置与管控、数据集中可视化监控、自动化告警处理以及自动化实施等场景的扩展。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163637950-1044434892.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;人的一生其实可以归纳为只是自己与大脑的一场游戏，行动受控于思想，且行为上变化更多是自身的潜在思维与受控思维的一场较量，就像我们应用从传统到服务化的转变无非就是一场“自我驱动”对“随波续流”发起的挑战。改变了思维，改变了技术，当然，也改变了我们团队的协作方式......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163713372-259148474.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; “DEV-TEAM”主要是由1个组长+2~3个组员组成的服务开发小组，基于开发框架的模式我们把小组主要划分为前端小组（Android、iOS、H5）以及服务端小组（设计、开发、测试、实施、维护），各个服务开发小组灵活地游离于各个项目之间，每个项目必须配备一个项目经理，一个项目经理可以同时管控多个项目，就像一个服务开发小组同时服务于多个项目。各个服务小组都有自己擅长的业务领域，随着团队经验的积累以及自我驱动，服务组件的沉淀就是一件水到渠成的事情。当然，这一切的前提都是基于我们统一的服务化思想，集中力量于同一焦点，把效能最大化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163802247-1107938228.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 服务化思想其实并不是什么新鲜事，它早已游离在我们的生活之中，因此会让我们产生一种似曾相识的感觉，这也许就是事物的相通性，而这种相通性的本质可能就是源于我们人性深处的某一种共性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163825044-1604829976.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转眼间，十二一轮回，将近四年的服务化实践经历堪比十二载，但初衷还在，只是简单已不再是单纯的简单，更多地会是一份发自内心从容的简单。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 13:52:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/7617402.html</dc:identifier>
</item>
<item>
<title>mui框架移动开发初体验 - 兔圆子</title>
<link>http://www.cnblogs.com/sin0/p/7638482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sin0/p/7638482.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　博主最近在接触移动APP，学习了几个小技巧，和大家分享一下。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 状态栏设置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;现在打开绝大多数APP，状态栏都是与APP一体，不仅美观，而且与整体协调。&lt;br/&gt;博主是个中度强迫症患者，顶部那个小黑条实在让我不舒服。&lt;/p&gt;
&lt;p&gt;首先，我们在HBuilder上新建一个移动APP项目&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;沉浸式状态栏（状态栏透明）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;一般整个页面是图片时，会使状态栏透明。&lt;/p&gt;
&lt;p&gt;首先，检测当前环境是否支持沉浸式状态栏。检测语句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;'plusready', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否支持沉浸式状态栏&lt;/span&gt;
&lt;span&gt;        alert(plus.navigator.isImmersedStatusbar());
        
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认是不支持的，会弹出false。想让环境支持，需要修改项目下的配置文件&lt;span&gt;manifest.json&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在项目下有个&lt;span&gt;manifest.json&lt;/span&gt;文件，打开后，打开代码视图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008140551934-515072617.png&quot; alt=&quot;&quot; width=&quot;546&quot; height=&quot;312&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在代码视图&lt;span&gt;&quot;plus&quot;&lt;/span&gt;下添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &quot;statusbar&quot;:&lt;span&gt; {
            &lt;/span&gt;&quot;immersed&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        },    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008140930137-2136762176.png&quot; alt=&quot;&quot; width=&quot;308&quot; height=&quot;87&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改完成后，会弹出true，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008141536184-1212548596.png&quot; alt=&quot;&quot; width=&quot;317&quot; height=&quot;563&quot;/&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;终端支持：&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;状态栏全屏&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;状态栏全屏是没有状态栏，不显示电量、信号那一条。&lt;/p&gt;
&lt;p&gt;这个效果是在JS文件中加入语句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;'plusready', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数：true - 全屏;false - 不全屏&lt;/span&gt;
        plus.navigator.setFullscreen(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008142908168-1845518630.png&quot; alt=&quot;&quot; width=&quot;322&quot; height=&quot;572&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.3&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;状态栏背景色&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;修改背景色一般用于页面顶部背景色为纯色的场景，修改成和页面一致的背景色，使页面更和谐。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置系统状态栏背景色&lt;/span&gt;
plus.navigator.setStatusBarBackground('#6495ED');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Android平台不支持此功能，如有大神，请多多指点。&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 毛玻璃效果&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;图片模糊化可以给人朦胧美的效果。点一下以前没提到的图片模糊效果:&lt;/p&gt;
&lt;p&gt;css属性filter：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;filter: blur(16px);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
blur()中的像素是模糊程度。
&lt;/pre&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 简单使用mui快速搭建页面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;前面最困扰我的状态栏问题解决了，页面布局就好办了。用mui模板可以快速搭建出来。&lt;/p&gt;
&lt;p&gt;以XX音乐为例：&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;导入文件&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/mui.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;css/mui.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;css/bofang.css&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;HTML代码&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;下面HTML代码为使用的mui框架部分和上述状态栏相关部分，这块mui是关于区域轮播部分&lt;/p&gt;
&lt;p&gt;顶部img是背景图，外层包裹的div非常有必要，overflow属性要活用，才能有完美的效果。&lt;/p&gt;
&lt;p&gt;因为APP的header部分用的定位，所以页面主体部分要加高度为74px左右的padding-top&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    第一个轮播区域
                 &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;singer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-text-center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;G-DRAGON&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;yinxiao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/player_btn_sq_hlight.png&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/player_btn_mv_normal.png&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/player_btn_dts_on.png&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;datu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/GD.jpg&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;geci&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A Boy - G-DRAGON&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    
                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    第二个轮播区域
                 &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-indicator&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-indicator&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-indicator mui-active&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-indicator&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要css代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;*&lt;/span&gt;{&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;
}&lt;span&gt;
body&lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 100vh&lt;/span&gt;;
}&lt;span&gt;
#background&lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt; right&lt;/span&gt;;
}&lt;span&gt;
#background #backImg&lt;/span&gt;{&lt;span&gt;
    margin-left&lt;/span&gt;:&lt;span&gt; -120px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 99vh&lt;/span&gt;;&lt;span&gt;
    filter&lt;/span&gt;:&lt;span&gt; blur(16px)&lt;/span&gt;;
}&lt;span&gt;
.mui-bar-nav&lt;/span&gt;{&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; rgba(0,0,0,0)&lt;/span&gt;;&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt; 0 0px 0px #ccc&lt;/span&gt;;
}&lt;span&gt;
.mui-bar-nav .mui-title&lt;/span&gt;{&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; white&lt;/span&gt;;&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 20px&lt;/span&gt;;&lt;span&gt;
    font-weight&lt;/span&gt;:&lt;span&gt; normal&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;
}&lt;span&gt;
#continer&lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 100vh&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; -100vh&lt;/span&gt;;&lt;span&gt;
    z-index&lt;/span&gt;:&lt;span&gt; 5&lt;/span&gt;;&lt;span&gt;
    padding-top&lt;/span&gt;:&lt;span&gt; 80px&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; rgba(0,0,0,0.7)&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; white&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后面不一样大小的图片居中对齐这一点还一时没想起来。这里就要用到弹性布局的交叉轴对齐方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#continer .footer1&lt;/span&gt;{&lt;span&gt;
    margin-bottom&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;&lt;span&gt;
    align-items&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
    justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008154140199-1446246067.png&quot; alt=&quot;&quot; width=&quot;342&quot; height=&quot;609&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008154134246-2078451251.png&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;611&quot;/&gt;&lt;/p&gt;

&lt;div readability=&quot;9&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;小q有话说&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　博主写博客也是想提高自己，还请大神指教。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      另外，框架确实好用，但是博主觉得，还是得把原生代码先掌握好。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 08 Oct 2017 12:45:00 +0000</pubDate>
<dc:creator>兔圆子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sin0/p/7638482.html</dc:identifier>
</item>
<item>
<title>最常用前端框架BootStrap——栅格系统 - chuanbao</title>
<link>http://www.cnblogs.com/lgc-17862800193/p/7638038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lgc-17862800193/p/7638038.html</guid>
<description>&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　  Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　  作为一个前端程序员，响应式网站可以说使我们接触最早，也是最多的一类。BootStrap的栅格系统就是为了方便我们设计响应式而生的！！&lt;/span&gt;&lt;span&gt;栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、栅格系统工作原理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;要明白在使用一个框架时，了解其工作原理是很重要的，所以，先带大家看一下其工作原理；&lt;/p&gt;
&lt;p&gt;1、“行（row）”必须包含在 &lt;code&gt;.container&lt;/code&gt; （固定宽度）或 &lt;code&gt;.container-fluid&lt;/code&gt; （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。&lt;/p&gt;
&lt;p&gt;举个栗子；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;、
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;css/bootstrap.css&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            .row div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; solid 1px red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blueviolet&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-4 col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;第一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-8 col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;第二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-4 col-sm-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;第三&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008170242903-285122929.png&quot; alt=&quot;&quot; width=&quot;1113&quot; height=&quot;203&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至于&lt;span&gt;.container-fluid&lt;/span&gt; （100% 宽度），顾名思义，小编就不举例子了；&lt;/p&gt;
&lt;p&gt;2、通过“行（row）”在水平方向创建一组“列（column）”。你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。&lt;/p&gt;
&lt;p&gt;3、类似 &lt;code&gt;.row&lt;/code&gt; 和 &lt;code&gt;.col-xs-4&lt;/code&gt; 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。&lt;/p&gt;
&lt;p&gt;4、通过为“列（column）”设置 &lt;code&gt;padding&lt;/code&gt; 属性，从而创建列与列之间的间隔（gutter）。通过为 &lt;code&gt;.row&lt;/code&gt; 元素设置负值 &lt;code&gt;margin&lt;/code&gt; 从而抵消掉为 &lt;code&gt;.container&lt;/code&gt; 元素设置的 &lt;code&gt;padding&lt;/code&gt;，也就间接为“行（row）”所包含的“列（column）”抵消掉了&lt;code&gt;padding；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5、栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 &lt;code&gt;.col-xs-4&lt;/code&gt; 来创建。如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。&lt;/p&gt;
&lt;p&gt;在上栗中，三个div在同一行中，只不过col-lg中，列数和大于12；如果把div改为col-lg-4；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-4 col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;第一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-4 col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;第二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-4 col-sm-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;第三&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008174444418-2013165688.png&quot; alt=&quot;&quot; width=&quot;935&quot; height=&quot;111&quot;/&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、栅格系统的基本语法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;了解其工作原理，接下来带大家看一下其基本语法；&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;媒体查询&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 在响应式网站的编译中，媒体查询都是最重要的一部分；如果 不进行媒体查询，如何进行响应式？&lt;/p&gt;
&lt;p&gt;在栅格系统中，通常使用以下媒体查询（media query）来创建关键的分界点阈值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/* 超小屏幕（手机，小于 768px） */
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） */
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;/* 小屏幕（平板，大于等于 768px） */
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;@media (min-width: @screen-sm-min) { ... }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/* 中等屏幕（桌面显示器，大于等于 992px） */
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;@media (min-width: @screen-md-min) { ... }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;/* 大屏幕（大桌面显示器，大于等于 1200px） */
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; @media (min-width: @screen-lg-min) { ... }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 我想你们也发现了一个问题，在栅格系统中，屏幕宽度小于768px没有任何媒体查询相关的代码，因为这在 Bootstrap 中是移动设备优先；&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;栅格系数&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在栅格系统中，我们通常通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008172153199-1605653160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-12 col-sm-6 col-md-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-12 .col-sm-6 .col-md-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-md-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-md-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;clearfix visible-xs-block&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008173133653-794983091.gif&quot; alt=&quot;&quot; width=&quot;605&quot; height=&quot;384&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.3&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;列偏移&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 使用 &lt;code&gt;.col-md-offset-*&lt;/code&gt; 类可以将列向右侧偏移。这些类实际是通过使用 &lt;code&gt;*&lt;/code&gt; 选择器为当前元素增加了左侧的边距（margin）。例如，&lt;code&gt;.col-md-offset-4&lt;/code&gt; 类将 &lt;code&gt;.col-md-4&lt;/code&gt; 元素向右侧偏移了4个列（column）的宽度。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;             
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-4 col-md-offset-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-4 .col-md-offset-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-3 col-md-offset-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-3 .col-md-offset-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-3 col-md-offset-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-3 .col-md-offset-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6 col-md-offset-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-6 .col-md-offset-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008195511934-1975293911.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;284&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.4&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;嵌套列&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;为了使用内置的栅格系统将内容再次嵌套，可以通过添加一个新的 &lt;code&gt;.row&lt;/code&gt; 元素和一系列 &lt;code&gt;.col-sm-*&lt;/code&gt; 元素到已经存在的 &lt;code&gt;.col-sm-*&lt;/code&gt; 元素内。被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;             
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                Level 1: .col-sm-9
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-8 col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                    Level 2: .col-xs-8 .col-sm-6
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-4 col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                    Level 2: .col-xs-4 .col-sm-6
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;               &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008200341668-256218825.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.5&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;响应式列重置&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 在使用栅格系统的时候，或许会遇到这种问题：在某些阈值时，某些列可能会出现比别的列高的情况。为了克服这一问题，建议联合使用 &lt;code&gt;.clearfix&lt;/code&gt; 和 响应式工具类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-3&quot; id=&quot;div&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;clearfix visible-xs-block&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6 col-sm-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-xs-6 .col-sm-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008201736778-1546659924.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.6&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;列排序&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 通过使用 &lt;code&gt;.col-md-push-*&lt;/code&gt; 和 &lt;code&gt;.col-md-pull-*&lt;/code&gt; 类就可以很容易的改变列（column）的顺序。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;             
&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-9 col-md-push-3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-9 .col-md-push-3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-3 col-md-pull-9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-3 .col-md-pull-9&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206165/201710/1206165-20171008202218996-1013456984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;div readability=&quot;10&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;编者按&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　栅格系统在我们的前端中非常的实用，难度也不大，BootStrap也很实用，不过除了栅格系统外小编不太建议大家使用其组件和其他css样式。毕竟统一性太明显，不如自己编译的样式。最后，希望各位和小编一起努力，在前端的路上越走越远！！&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 08 Oct 2017 12:30:00 +0000</pubDate>
<dc:creator>chuanbao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lgc-17862800193/p/7638038.html</dc:identifier>
</item>
<item>
<title>OpenCV探索之路（二十六）：如何去除票据上的印章 - Madcola</title>
<link>http://www.cnblogs.com/skyfsm/p/7638301.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyfsm/p/7638301.html</guid>
<description>&lt;p&gt;最近在做票据识别的编码工作时遇到一些问题，就是票据上往往会有一些红色印章把一些重要信息区域给覆盖了，比如一些开发票人员盖印章时比较随意，容易吧一些关键区域给遮蔽了，这让接下来的票据识别很困难，因此，我们必须先对票据图像进行一定的预处理来移除印章干扰，再进行字符识别，这样子识别准确率才有保证。&lt;/p&gt;
&lt;p&gt;我们从简单例子说起，比如我们有以下一张票据，上面盖有红色印章，虽然该印章没有遮挡关键信息，但是我们还是打算将其移除，那该怎么办？首先想到的肯定移除红色像素点的方法，这种方法需要查到红色的颜色范围，然后遍历全图像素点，在范围内的像素点就将它设置为白色。这种方法用起来其实不太好，毕竟这个“红色范围”的设定还是蛮困难的一件事。那现在我说一下我的方法，用几行代码移除红色印章。&lt;/p&gt;
&lt;p&gt;原图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194557012-1266465844.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;灰度化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194610434-1000903718.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二值化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194621371-1255870105.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;做票据识别一般都要将票据转化为二值图像，我们从上面的二值图像可以看出，票据上还是存在大块的印章痕迹，我们此刻的任务就是，将它从票据中移除！&lt;/p&gt;
&lt;p&gt;其实实现的方法非常简单，关键就是&lt;strong&gt;分离颜色通道 + 阈值分割&lt;/strong&gt;。步骤如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对彩色图分离通道，拿到红色通道图&lt;/li&gt;
&lt;li&gt;进行阈值分割&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;先看一下用split函数分离出来的三通道图像&lt;/p&gt;
&lt;p&gt;红色通道&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194645012-708396942.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;绿色通道&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194659512-1916223343.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;蓝色通道&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194710637-2041493956.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面各通道的图像看出，每个通道的图像是略有不同，不同的地方就在于对不同颜色的敏感度不同。看一下红色通道的图，我们发现原图中的红色基本不见了！总结一下就是，原图中颜色越接近红色的地方在红色通道越接近白色。在纯红的地方在红色通道会出现纯白。绿色、蓝色也是同样的道理。&lt;/p&gt;
&lt;p&gt;但是仔细观察一下票据图像中还是有一些印章痕迹，这时再使用一下阈值分割技术就可以移除一些印章痕迹了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194720684-1756152747.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面就是阈值分割后的图，可以看出，该二值图像已经完全看不出有印章的痕迹了，这时我们可以说比较好地移除了印章干扰。&lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &quot;opencv2/imgproc.hpp&quot;
#include &quot;opencv2/highgui.hpp&quot;


using namespace cv;


int main()
{

    Mat src = imread(&quot;100.bmp&quot;);
    //resize(src, src, Size(700, 500));
    Mat gray;
    cvtColor(src, gray, CV_RGB2GRAY);
    if (src.empty())
    {
        printf(&quot;fail to open image!\n&quot;);
        return -1;
    }

    // 全局二值化
    int th = 180; //阈值要根据实际情况调整
    Mat binary;
    threshold(gray, binary, th, 255, CV_THRESH_BINARY);


    vector&amp;lt;Mat&amp;gt; channels;
    split(src, channels);
    Mat red = channels[2];
    Mat blue = channels[0];
    Mat green = channels[1];

    Mat red_binary;
    threshold(red, red_binary, th, 255, CV_THRESH_BINARY);

    imshow(&quot;src&quot;, src);
    imshow(&quot;gray&quot;, gray);
    imshow(&quot;binary&quot;, binary);
    imshow(&quot;red channel&quot;, red);
    imshow(&quot;blue channel&quot;, blue);
    imshow(&quot;green channel&quot;, green);
    imshow(&quot;red+binary&quot;, red_binary);

    waitKey();


    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;来多几张发票看看效果&lt;/p&gt;
&lt;p&gt;移除前&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194734309-1962099544.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194747153-1166735701.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;移除后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194757871-142915446.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;移除前&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194809965-1049459833.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194821918-1663008541.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;移除后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194832668-1117492294.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面这个情形比较经典，因为印章刚好把一些关键区域（金额）给遮挡住了，现在人的肉眼也很难辨别出它的具体数字了，那机器还能正确识别吗？如果不做任何处理，机器也是没办法识别的，但是预处理一下之后，机器就能准确识别出其数字了。&lt;/p&gt;
&lt;p&gt;移除前&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194843715-694214755.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194853528-1826097669.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;移除后&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194909090-2026428798.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，这种分离通道+阈值分割的方法还可以用到其他场合，例如在红绿灯的检测上，也是可以借鉴这种方法的。我在网上找了张红绿灯的照片来测试，也看看效果吧~&lt;/p&gt;
&lt;p&gt;检测红灯&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194922934-943113340.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;检测绿灯&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201710/1093303-20171008194938090-1165383356.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 11:50:00 +0000</pubDate>
<dc:creator>Madcola</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyfsm/p/7638301.html</dc:identifier>
</item>
<item>
<title>[C语言]贪吃蛇_结构数组实现 - Magic激流</title>
<link>http://www.cnblogs.com/magicxyx/p/7638283.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/magicxyx/p/7638283.html</guid>
<description>&lt;p&gt;蛇身本质上就是个结构数组，数组里存储了坐标x、y的值，再通过一个循环把它打印出来，蛇的移动则是不断地刷新重新打印。所以撞墙、咬到自己只是数组x、y值的简单比较。&lt;/p&gt;


&lt;ol&gt;&lt;li&gt;结构数组&lt;/li&gt;
&lt;li&gt;Windows API函数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先来实现静态页面，把地图、初始蛇身、食物搞定。&lt;/p&gt;
&lt;p&gt;这里需要用到Windows API的知识，也就是对控制台上坐标的修改&lt;/p&gt;

&lt;ol readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这段代码来自参考&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt; Pos(&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; x, &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; y)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    COORD pos;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;HANDLE&lt;/strong&gt;&lt;span&gt; hOutput;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    pos.X = x;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    pos.Y = y;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    hOutput = GetStdHandle(STD_OUTPUT_HANDLE);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    SetConsoleCursorPosition(hOutput, pos);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;COORD是Windows API中定义的一种结构，表示在控制台上的坐标&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;struct&lt;/strong&gt;&lt;span&gt; _COORD {  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;SHORT&lt;/strong&gt;&lt;span&gt; X; &lt;span&gt;// horizontal coordinate&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;SHORT&lt;/strong&gt;&lt;span&gt; Y; &lt;span&gt;// vertical coordinate&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;} COORD;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;而代码中第七行则是获得屏幕缓冲区的句柄，第八行是直接修改光标位置的函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;1.地图。&lt;/h2&gt;
&lt;p&gt;有了Pos()函数，打印一个框就不是问题了。假如我们用&quot;-&quot;作为上下边框，把&quot;|&quot;作为左右边框，这看起来没什么不妥，但其实我们已经掉进了坑里，直接上代码及实际效果图吧。&lt;/p&gt;
&lt;ol readability=&quot;31&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;//LONG==60&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;//WIDTH==30&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt; CreateMap()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=0;i&amp;lt;LONG;i++)&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;上下两行&lt;/span&gt;&lt;span&gt; &lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(i,1);   &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;-&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(i,WIDTH-1);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;-&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=2;i&amp;lt;WIDTH-1;i++)&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;左右两列&lt;/span&gt;&lt;span&gt; &lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(0,i);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;|&quot;&lt;span&gt;);   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(LONG-1,i);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;|&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1219242/201710/1219242-20171008194302184-306493023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现了问题吗？这是一条正常的蛇。。。那为什么看起来不正常呢？我们把边框都换成&quot;#&quot;来看看…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1219242/201710/1219242-20171008194302715-1914807228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这就清楚多了啊，要知道我们上下边框可是各有60个&quot;#&quot;的，长60宽30的长方形输出之后竟然成了个正方形。&lt;/p&gt;
&lt;p&gt;原因在这&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1219242/201710/1219242-20171008194303059-1950931214.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;控制台上每个字符的长宽比例（像素点）是不同的，所以才会出现上图这种蛋疼的情况。&lt;/p&gt;
&lt;p&gt;解决方法其实也很简单，我们需要引入一些特殊符号，比如&quot;●&quot;&quot;■&quot;&quot;⊙&quot;等，这些字符的特点是它占据两个普通字符的位置&lt;/p&gt;
&lt;p&gt;所以上下边框就有60/2=30个符号，要让它仍然是个正方形的话，左右也可以设为30（28+2）个符号.&lt;/p&gt;
&lt;p&gt;代码及效果图如下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt; CreateMap()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=0;i&amp;lt;&lt;span&gt;&lt;strong&gt;LONG&lt;/strong&gt;&lt;span&gt;;i+=2)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(i,0);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;■&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(i,WIDTH-1);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;■&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=1;i&amp;lt;WIDTH-1;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(0,i);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;■&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(&lt;span&gt;&lt;strong&gt;LONG&lt;/strong&gt;&lt;span&gt;-2,i);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;■&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1219242/201710/1219242-20171008194303762-1853031998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样看就舒服多了，不过也让复杂度提升了一些，上边框每个符号的坐标分别是（0，0）（2，0）（4，0）…（2*n-2,0）这个在蛇的移动及食物的模块再提。&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;2.初始化一条蛇&lt;/h2&gt;
&lt;p&gt;因为蛇以及食物 本质上都是一个坐标，所以我们可以定义一个新的数据类型Node，每一个Node都是一个存储了两个变量（x、y）的结构体，再通过Node来定义蛇和食物。&lt;/p&gt;
&lt;ol readability=&quot;11&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;struct&lt;/strong&gt;&lt;span&gt; node{  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; x;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; y;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;}Node;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;Node snake[60];&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;好了，我们现在定义了一条叫snake的蛇。为了这条蛇肥胖适中长宽比例一致，我们用&quot;⊙&quot;代表蛇的每一节。刚开始我们令蛇出现在地图中间位置，蛇头在右，共3个节点。所以我们需要求得每个节点的坐标。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;    &lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt; InitializeSnake()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=0;i&amp;lt;3;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;        snake[i].x = (&lt;span&gt;&lt;strong&gt;LONG&lt;/strong&gt;&lt;span&gt;/2-i*2);&lt;span&gt;//(30,15)(28,15)(26,15)&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        snake[i].y = WIDTH/2;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(snake[i].x,snake[i].y);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;        printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;⊙&lt;/span&gt;&lt;span&gt;&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这样我们就在（30,15）（28,15）（26,15）三个坐标处确定了一条蛇。X坐标之间减2是因为&quot;&lt;span&gt;⊙&lt;/span&gt;&quot;在X轴占两个基本值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div&gt;
&lt;table border=&quot;0&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;y\x&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;26&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;27&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;28&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;31&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;⊙&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;⊙&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;⊙&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;3．随机出现食物&lt;/h2&gt;
&lt;p&gt;        先创建一个变量来存储食物的坐标&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Node food; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        得到它的坐标其实就是用随机值对长、宽取余，使值在区间（地图）范围内。&lt;/p&gt;
&lt;ol readability=&quot;23&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt; CreateFood()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    srand((unsigned &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt;)time(0));  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;while&lt;/strong&gt;&lt;span&gt;(1)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;do&lt;/strong&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            food.x = rand()%(&lt;span&gt;&lt;strong&gt;LONG&lt;/strong&gt;&lt;span&gt;-6)+2;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        }&lt;span&gt;&lt;strong&gt;while&lt;/strong&gt;&lt;span&gt;(food.x%2!=0);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        food.y = rand()%(WIDTH-2)+1;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=0;i&amp;lt;3+length;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(food.x==snake[i].x &amp;amp;&amp;amp; food.y==snake[i].y)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                i=-1;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                &lt;span&gt;&lt;strong&gt;break&lt;/strong&gt;&lt;span&gt;;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(i&amp;gt;=0)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            Pos(food.x,food.y);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            printf(&lt;span&gt;&quot;●&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;break&lt;/strong&gt;&lt;span&gt;;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    //AfterEatFood();   &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;X的坐标值求法为rand()%(LONG-6)+2,因为食物&quot;&lt;span&gt;●&lt;/span&gt;&quot;也是两个字符的位置，所以它可能的取值为（2,y）（4,y）…(56,y)上下变宽共30个字符，从0开始，每个+2，所以最后一个为（58，y）&lt;/p&gt;
&lt;p&gt;Rand()%(LONG)的取值范围为0~59而x=1,x=2,x=58,x=59是地图范围,所以得对LONG-6（60-6=54）取余，这样取值范围就是0~54，再加2，就成了2~56.又因为蛇的各节坐标及移动x坐标都是+2，所以食物的x坐标必须是偶数，这可以用一个do(…)while()搞定，先取值，再判断，不行就再取值&lt;/p&gt;
&lt;p&gt;Y的坐标稍微简单些，只要保证坐标值在1~28就行。&lt;/p&gt;
&lt;p&gt;另外求出了坐标之后要判断食物是否与蛇身重合，重合的话重新赋值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;搞完上面的，我们就有了一个基本的（静态）效果了，现在我们要让它动起来&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1219242/201710/1219242-20171008194304403-1562581016.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    注：第86行是设置控制台窗口长、宽的系统函数。&lt;/p&gt;

&lt;h2&gt;4.让蛇动起来&lt;/h2&gt;
&lt;p&gt;     蛇每次移动背后发生的事就是数组里的值改变，再在每个坐标位置打印蛇身。&lt;/p&gt;
&lt;p&gt;    为了让蛇一直动，我们就需要一个循环    &lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;while&lt;/strong&gt;&lt;span&gt;(1)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;获得输入，改变坐标&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在每个坐标处输出&lt;/span&gt;&lt;span&gt; &lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;} &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;首先，我们需要确定方向，而这需要两个变量，一个是输入值（可能是任意值），另一个则是确定方向的变量。&lt;/p&gt;
&lt;p&gt;这里介绍一个函数&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; kbhit(&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;// &lt;/span&gt;&lt;span&gt;检查当前是否有键盘输入，若有则返回一个非&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;值，否则返回&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这是一个非阻塞函数，&lt;span&gt;有键按下时返回非0，但此时按键码仍然在键盘缓冲队列中。所以在确定键盘有响应之后，再用一个char变量将输入从缓冲区中调出来。&lt;/span&gt;&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(kbhit())  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    ch = getch();  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;再对ch做判断，如果是符合情况（不能往后走等）的输入，则开始执行switch改变坐标&lt;/span&gt;&lt;/p&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(ch==&lt;span&gt;'w'&lt;span&gt;&amp;amp;&amp;amp;direction!=&lt;span&gt;'s'&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    direction = ch;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(ch==&lt;span&gt;'s'&lt;span&gt;&amp;amp;&amp;amp;direction!=&lt;span&gt;'w'&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    direction = ch;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(ch==&lt;span&gt;'a'&lt;span&gt;&amp;amp;&amp;amp;direction!=&lt;span&gt;'d'&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    direction = ch;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(ch==&lt;span&gt;'d'&lt;span&gt;&amp;amp;&amp;amp;direction!=&lt;span&gt;'a'&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    direction = ch;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(ch==&lt;span&gt;' '&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;span&gt;; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;这里设置空格是暂停，而为了让蛇一开始就移动，我们把direction设置为d(往右)。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在方向确定了之后，再用一个switch语句进行坐标判断&lt;/p&gt;
&lt;ol readability=&quot;22.5&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;switch&lt;/strong&gt;&lt;span&gt;(direction)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;case&lt;/strong&gt;&lt;span&gt; &lt;span&gt;'w'&lt;span&gt;:  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(snake[0].x==food.x &amp;amp;&amp;amp; snake[0].y-1==food.y)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            length++;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            score+=10;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            snake[2+length].x = snake[2+length-1].x;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            snake[2+length].y = snake[2+length-1].y;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=length+3-2;i&amp;gt;0;i--)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                snake[i].x = snake[i-1].x;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                snake[i].y = snake[i-1].y;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            CreateFood();  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;else&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            Pos(snake[2+length].x,snake[2+length].y);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            printf(&lt;span&gt;&quot; &quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=length+3-1;i&amp;gt;0;i--)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                snake[i].x = snake[i-1].x;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;                snake[i].y = snake[i-1].y;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        snake[0].y -=1;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;break&lt;/strong&gt;&lt;span&gt;;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;case&lt;/strong&gt;&lt;span&gt; &lt;span&gt;'s'&lt;span&gt;:  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。。。&lt;/span&gt;&lt;span&gt; &lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;case&lt;/strong&gt;&lt;span&gt; &lt;span&gt;'a'&lt;span&gt;:  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。。。&lt;/span&gt;&lt;span&gt; &lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;case&lt;/strong&gt;&lt;span&gt; &lt;span&gt;'d'&lt;span&gt;:  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。。。&lt;/span&gt;&lt;span&gt; &lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对蛇头的下一步做判断，如果吃到了食物的话，则先对分数等全局变量进行处理，再把snake[2+length-1]（吃到食物后的倒数第二个变量）的值赋值给snake[2+length](此时新加的尾节)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　　 再从倒数第二节开始，把前一节的坐标值赋给后一节，直到第二节得到了之前蛇头坐标。在食物被吃了之后，再调用随机出现食物函数。&lt;/p&gt;
&lt;p&gt;如果没有吃到食物的话，先到之前最后一节的坐标处，输入空格，算是销毁它再对各节重新赋值。在蛇头后每节都赋值完成之后，根据输入值单独对蛇头赋值，如输入是'w'，则往上，所以蛇头纵坐标减一。&lt;/p&gt;
&lt;p&gt;对其余输入也是同样的道理，在snake数组各值都更新之后，再用一个函数把它打印出来。&lt;/p&gt;
&lt;p&gt;这样移动部分就实现了，现在只需处理一些小模块就行。&lt;/p&gt;

&lt;h2&gt;5.移动后的处理。&lt;/h2&gt;
&lt;p&gt;这一部分相对简单，即对判断蛇是否撞墙、是否咬到自身，再对这种情况做处理，我们用两个函数搞定它&lt;/p&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; ThroughWall()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(snake[0].x==0 || snake[0].x==58 ||  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        snake[0].y==0 || snake[0].y==29)  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            Pos(25,15);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;撞墙&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;游戏结束&lt;/span&gt;&lt;span&gt;&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;span&gt; 1;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;        Pos(0,WIDTH);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        printf(&lt;span&gt;&quot; &quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;} &lt;/span&gt;&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; BiteItself()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(i=3;i&amp;lt;=2+length;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;((snake[0].x==snake[i].x) &amp;amp;&amp;amp; (snake[0].y==snake[i].y))  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;            Pos(25,15);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;            printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;咬到自己&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;游戏结束&lt;/span&gt;&lt;span&gt;&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;            &lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;span&gt; 1;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;        }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当返回值为1时，游戏也就GG了。&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(ThroughWall()==1)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    Pos(25,WIDTH);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    system(&lt;span&gt;&quot;pause&quot;&lt;span&gt;);   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    exit(0);   &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;if&lt;/strong&gt;&lt;span&gt;(BiteItself()==1)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;    Pos(25,WIDTH);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    system(&lt;span&gt;&quot;pause&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    exit(0);   &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最后再加一行Sleep()函数，对刷新时间(每次重新打印的时间间隔)做处理。speed是一个变量，在每次吃到食物后递减。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Sleep(speed);&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;源代码在这：&lt;/strong&gt;&lt;a title=&quot;结构数组实现_贪吃蛇源代码&quot; href=&quot;https://github.com/MagicXyxxx/GluttonousSnake&quot; target=&quot;_blank&quot;&gt;结构数组实现&lt;/a&gt;&lt;/span&gt;&lt;a title=&quot;结构数组实现_贪吃蛇源代码&quot; href=&quot;https://github.com/MagicXyxxx/GluttonousSnake&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;贪吃蛇源码&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;    首先从蛇的结构上来说，结构数组的实现直接无视了&quot;效率&quot;这个词，数组占用大量空间且有容量限制，并不是一种好办法。&lt;/p&gt;
&lt;p&gt;    其次是BUG的问题，在ThroughWall()函数中，在对蛇头坐标进行判断时在蛇头移动到(x,1)位置时，游戏直接结束，且没有任何提示。&lt;/p&gt;
&lt;p&gt;但诡异的是，在判断后加入 Pos(0,WIDTH);printf(&quot; &quot;); 这两行不相干的语句后，这个问题解决了，而我对这两行语句的原有目的则只是想把闪烁不停光标放到地图外面去。&lt;/p&gt;
&lt;p&gt;    还有就是while()循环里代码行太多，特别是switch-case 里各项，蛇身的移动（结构数组个元素坐标值的变换）应该抽象成一个move()函数。&lt;/p&gt;


&lt;p&gt;    这是对我第一份代码（snakeV1.0）的重构，程序结构上有较大变化&lt;/p&gt;
&lt;p&gt;    重构期间研究了&lt;a href=&quot;http://www.cnblogs.com/jacklu/p/5214692.html&quot;&gt;链表实现_贪吃蛇源码&lt;/a&gt;，在结构上采用了里面的部分思想。&lt;/p&gt;

&lt;p&gt;    个人空空如也的github：&lt;a href=&quot;https://github.com/MagicXyxxx&quot;&gt;MagicXyxxx的github&lt;/a&gt;,今后会不定期更新一些乱七八糟的玩意儿，开心就好。&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 11:43:00 +0000</pubDate>
<dc:creator>Magic激流</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/magicxyx/p/7638283.html</dc:identifier>
</item>
<item>
<title>Apache shiro的简单介绍与使用(与spring整合使用） - 高压锅里的小白</title>
<link>http://www.cnblogs.com/xiaobai1226/p/7634575.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaobai1226/p/7634575.html</guid>
<description>&lt;h2&gt;　　apache shiro框架简介&lt;/h2&gt;
&lt;p&gt;　　Apache Shiro是一个强大而灵活的开源安全框架，它能够干净利落地处理身份认证，授权，企业会话管理和加密。现在，使用Apache Shiro的人越来越多，因为它相当简单，相比比Spring Security，Shiro可能没有Spring Security那么多强大的功能，但是在实际工作时可能并不需要那么复杂的东西，所以使用简单的Shiro就足够了。&lt;/p&gt;
&lt;p&gt;　　以下是你可以用 Apache Shiro所做的事情：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171007140443365-1110091146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Shiro的4大核心部分——身份验证，授权，会话管理和加密&lt;/p&gt;
&lt;p&gt; 　　　　Authentication：身份验证，简称“登录”。&lt;/p&gt;
&lt;p&gt; 　　　　Authorization：授权，给用户分配角色或者权限资源&lt;/p&gt;
&lt;p&gt; 　　　　Session Management：用户session管理器，可以让CS程序也使用session来控制权限&lt;/p&gt;
&lt;p&gt; 　　　　Cryptography：把JDK中复杂的密码加密方式进行封装。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;除了以上功能，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;shiro&lt;/span&gt;&lt;span&gt;还提供很多扩展&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Web Support&lt;/span&gt;&lt;span&gt;：主要针对&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;web&lt;/span&gt;&lt;span&gt;应用提供一些常用功能。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Caching&lt;/span&gt;&lt;span&gt;：缓存可以使应用程序运行更有效率。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Concurrency&lt;/span&gt;&lt;span&gt;：多线程相关功能。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Testing&lt;/span&gt;&lt;span&gt;：帮助我们进行测试相关功能&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Run As&lt;/span&gt;&lt;span&gt;：一个允许用户假设为另一个用户身份（如果允许）的功能，有时候在管理脚本很有用。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Remember Me&lt;/span&gt;&lt;span&gt;：记住用户身份，提供类似购物车功能。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;　　shiro框架认证流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171007141209333-929197189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Application Code：应用程序代码，由开发人员负责开发的&lt;/p&gt;
&lt;p&gt;　　Subject：框架提供的接口，是与程序进行交互的对象，可以是人也可以是服务或者其他，通常就理解为用户。所有Subject 实例都必须绑定到一个SecurityManager上。我们与一个 Subject 交互，运行时shiro会自动转化为与 SecurityManager交互的特定 subject的交互。&lt;/p&gt;
&lt;p&gt;　　SecurityManager：框架提供的接口，是 Shiro的核心，代表安全管理器对象。初始化时协调各个模块运行。然而，一旦 SecurityManager协调完毕，SecurityManager 会被单独留下，且我们只需要去操作Subject即可，无需操作SecurityManager 。 但是我们得知道，当我们正与一个 Subject 进行交互时，实质上是 SecurityManager在处理 Subject 安全操作。&lt;/p&gt;
&lt;p&gt;　　Realm：可以开发人员编写，框架也提供一些。Realms在 Shiro中作为应用程序和安全数据之间的“桥梁”或“连接器”。他获取安全数据来判断subject是否能够登录，subject拥有什么权限。他有点类似DAO。在配置realms时，需要至少一个realm。而且Shiro提供了一些常用的 Realms来连接数据源，如LDAP数据源的JndiLdapRealm，JDBC数据源的JdbcRealm，ini文件数据源的IniRealm，properties文件数据源的PropertiesRealm，等等。我们也可以插入自己的 Realm实现来代表自定义的数据源。 像其他组件一样，Realms也是由SecurityManager控制。&lt;/p&gt;
&lt;p&gt;　　更详细的图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171007141753411-114145888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;　　下面就开始shiro与SSM工程的整合使用&lt;/h3&gt;
&lt;p&gt;　　下载地址：http://shiro.apache.org/download.html&lt;/p&gt;
&lt;p&gt;　　下载下来这两个个文件，一个jar包，一个源码文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171007132553161-452617462.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　首先，第一步，将jar包导入到工程中&lt;/p&gt;
&lt;p&gt;　　然后，第二步，在web.xml中配置spring框架提供的用于整合shiro框架的过滤器（一定要放到springmvc或struts框架过滤器的前面，为了保险起见，放到最上面就好了）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置过滤器，用于整合Shiro&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiroFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiroFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第三步，在spring配置文件中配置bean，id为shiroFilter&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置shiro框架的过滤器工厂bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;shiroFilter&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;loginUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/index.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;successUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;unauthorizedUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/noPrivilegeUI.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 指定URL级别拦截策略 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;filterChainDefinitions&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            /script/** = anon
        　　/style/** = anon
        　　/index.jsp* = anon
        　　/noPrivilegeUI.jsp* = anon
        　　/user/login = anon&lt;br/&gt;　　　　　　 /role/findAllRoleList = perms[&quot;角色管理&quot;]
        　　/** = authc
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;　　securityManager&lt;/em&gt;：这个属性是必须的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　loginUrl&lt;/em&gt; ：没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　successUrl&lt;/em&gt; ：登录成功默认跳转页面，可以不配置，不配置则跳转至”/”。如果登陆前点击的一个需要登录的页面，则在登录自动跳转到那个需要登录的页面。不跳转到此。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　unauthorizedUrl&lt;/em&gt; ：没有权限默认跳转的页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171007200255333-305058218.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　anon: 例子/admins/** = anon 没有参数，表示可以匿名使用（需要认证(登录)）。&lt;/p&gt;
&lt;p&gt;　　authc : 例如/admins/user/** = authc 表示需要认证(登录)才能使用，没有参数&lt;/p&gt;
&lt;p&gt;　　roles：例子/admins/user/** = roles[admin], 参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/** = roles[&quot;admin,guest&quot;], 每个参数通过才算通过，相当于hasAllRoles()方法。&lt;/p&gt;
&lt;p&gt;　　perms：例子/admins/user/** = perms[user:add:*], 参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/** = perms[&quot;user:add:*,user:modify:*&quot;]，当有多个参数时必须每个参数都通过才通过，想当于　　isPermitedAll()方法。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　Rest：例子/admins/user/** = rest[user]；根据请求的方法，相当于/admins/user/** = perms[user:method] ；其中method为post，get，delete等。&lt;/p&gt;
&lt;p&gt;　　port：例子/admins/user/** = port[8081]； 当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString&lt;/p&gt;
&lt;p&gt;是你访问的url里的？后面的参数。&lt;/p&gt;
&lt;p&gt;　　authcBasic：例如/admins/user/** = authcBasic； 没有参数表示httpBasic认证&lt;/p&gt;
&lt;p&gt;　　ssl:例子/admins/user/** = ssl；没有参数，表示安全的url请求，协议为https&lt;/p&gt;
&lt;p&gt;　　user:例如/admins/user/** = user； 没有参数表示必须存在用户，当登入操作时不做检查&lt;/p&gt;
&lt;p&gt;　　注：anon，authcBasic，auchc，user是认证过滤器，&lt;/p&gt;
&lt;p&gt;　　　　perms，roles，ssl，rest，port是授权过滤器&lt;/p&gt;

&lt;p&gt;　　第四步：配置安全管理器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置安全管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　第五步：写一个login方法，使用shiro提供的方式进行认证操作&lt;/p&gt;
&lt;p&gt;　　这是我之前的login方法，以这种方法，shiro是不知道登录验证通过了的，一直不通过，所以我们要以shiro提供的认证操作方式进行登录操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 登录
 &lt;/span&gt;&lt;span&gt;*/&lt;br/&gt;&lt;/span&gt;&lt;span&gt;@RequestMapping(&lt;/span&gt;&quot;/login&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(User user, HttpServletRequest request, Model model){&lt;br/&gt;　　HttpSession session &lt;/span&gt;=&lt;span&gt; request.getSession();
　　User newUser &lt;/span&gt;=&lt;span&gt; userService.login(user);&lt;br/&gt;&lt;/span&gt;&lt;span&gt;　　if&lt;/span&gt;(newUser != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){&lt;br/&gt;　　　　session.setAttribute(&lt;/span&gt;&quot;loginUser&quot;&lt;span&gt;,newUser);
　　　　&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;home/home&quot;&lt;span&gt;;&lt;br/&gt;　　}
　　model.addAttribute(&lt;/span&gt;&quot;errorMessage&quot;,&quot;用户名或者密码不正确！&quot;&lt;span&gt;);
　　&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;forward:/index.jsp&quot;&lt;span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　修改后的login方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 *  使用Shiro框架提供的方式进行认证登录
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RequestMapping(&lt;/span&gt;&quot;/login&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(User user, HttpServletRequest request, Model model){
　　HttpSession session &lt;/span&gt;=&lt;span&gt; request.getSession();
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Shiro框架提供的方式进行认证&lt;/span&gt;
   Subject subject = SecurityUtils.getSubject(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得当前登录用户对象，现在状态为 “未认证”
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名密码令牌&lt;/span&gt;
   AuthenticationToken token = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UsernamePasswordToken(user.getLoginName(), MD5Utils.md5(user.getPassword()));
   &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
   　　subject.login(token); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行你自定义的Realm&lt;/span&gt;
   　　User user1 =&lt;span&gt; (User) subject.getPrincipal();
   　　session.setAttribute(&lt;/span&gt;&quot;loginUser&quot;&lt;span&gt;,user1);
   　　&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;home/home&quot;&lt;span&gt;;
   }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(UnknownAccountException e){
    　　e.printStackTrace();
    　　model.addAttribute(&lt;/span&gt;&quot;errorMessage&quot;,&quot;此用户名不存在！&quot;&lt;span&gt;);
   }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(IncorrectCredentialsException e){
    　　e.printStackTrace();
    　　model.addAttribute(&lt;/span&gt;&quot;errorMessage&quot;,&quot;密码不正确！&quot;&lt;span&gt;);
   }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
    　　e.printStackTrace();
   }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;forward:/index.jsp&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　第六步：自定义realm，并注入给安全管理器　&lt;/p&gt;
&lt;p&gt;　　创建一个UserRealm类，继承AuthorizingRealm这个类　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserRealm &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizingRealm{
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserDao userDao;
    &lt;br/&gt;　　 //认证方法
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
        System.out.println(&lt;/span&gt;&quot;realm中的认证方法执行了。。。。&quot;&lt;span&gt;);
        UsernamePasswordToken myToken &lt;/span&gt;=&lt;span&gt; (UsernamePasswordToken) token;
        String loginName &lt;/span&gt;=&lt;span&gt; myToken.getUsername();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据用户名查询数据库中的用户,这个方法是自己写的&lt;/span&gt;
        User user =&lt;span&gt; userDao.findUserByLoginName(loginName);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名不存在&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果能查询到，再由框架比对数据库中查询到的密码和页面提交的密码是否一致&lt;/span&gt;
        AuthenticationInfo info = &lt;span&gt;new&lt;/span&gt; SimpleAuthenticationInfo(user, user.getPassword(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
    }
    &lt;br/&gt;　　 //授权方法
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　将自定义realm注入给安全管理器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置安全管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入realm &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;realm&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;userRealm&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注册自定义realm &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userRealm&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.demo.privilege.service.realm.UserRealm&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　到这里程序就可以正常运行了,登录后进入首页&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171008124715840-1224191629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　但是点击角色管理，会进入没有权限的页面&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171008124811418-1220282567.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这是因为我在spring配置文件中配置了   /role/findAllRoleList = perms[&quot;角色管理&quot;]，而我还没有给当前用户授权，所以当前用户没有权限访问此路径&lt;/p&gt;
&lt;p&gt;　　所以要给该用户授权，在UserRealm类中，编写授权方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;授权方法&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals){
        SimpleAuthorizationInfo info &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
        User user &lt;/span&gt;=&lt;span&gt; (User) principals.getPrimaryPrincipal();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Role role : user.getRoles()){
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Privilege privilege : role.getPrivileges()){
                info.addStringPermission(privilege.getName());
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，就可以正常访问了，这个授权方法是在访问/role/findAllRoleList这个路径时，shiro框架自动调用的&lt;/p&gt;

&lt;p&gt;　　我们之前进行权限控制是在spring配置文件中配置了   /role/findAllRoleList = perms[&quot;角色管理&quot;] ，现在介绍另一种方式，也是我比较喜欢的方式， 使用注解方式进行权限控制&lt;/p&gt;
&lt;h3&gt;　  使用shiro的方法注解方式权限控制&lt;/h3&gt;
&lt;p&gt;　　第一步：在springmvc配置文件中开启shiro注解支持（注意：springmvc框架，放到springmvc配置文件中，struts放到spring配置文件中）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 保证实现了Shiro内部lifecycle函数的bean执行 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;lifecycleBeanPostProcessor&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 开启shiro框架注解支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动代理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;defaultAdvisorAutoProxyCreator&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;&lt;/span&gt;&lt;span&gt; depends-on&lt;/span&gt;&lt;span&gt;=&quot;lifecycleBeanPostProcessor&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; value必须设置为true使用cglib方式为对象创建代理对象，
            默认为false，设为false，就是使用JDK方式为对象创建代理对象，程序会出错 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;proxyTargetClass&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置shiro框架提供的切面类，用于创建代理对象 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　第二步：在Controller的方法上使用shiro注解------ @RequiresPermissions(&quot;&quot;) 执行这个方法必须有相应的权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 查询岗位列表
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequiresPermissions(&lt;/span&gt;&quot;角色列表&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行这个方法必须有角色列表这个权限&lt;/span&gt;
    @RequestMapping(&quot;/findAllRoleList&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String findAllRoleList(Model model){
        List&lt;/span&gt;&amp;lt;Role&amp;gt; roleList =&lt;span&gt; roleService.findAllRoleList();
        model.addAttribute(&lt;/span&gt;&quot;roleList&quot;&lt;span&gt;,roleList);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;role/list&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　@RequiresAuthentication&lt;/p&gt;
&lt;p&gt;　　　　验证用户是否登录，等同于方法subject.isAuthenticated() 结果为true时。&lt;/p&gt;
&lt;p&gt;　　@ RequiresUser&lt;/p&gt;
&lt;p&gt;　　　　验证用户是否被记忆，user有两种含义：&lt;/p&gt;
&lt;p&gt;　　　　一种是成功登录的（subject.isAuthenticated() 结果为true）；&lt;/p&gt;
&lt;p&gt;　　　　另外一种是被记忆的（ subject.isRemembered()结果为true）。&lt;/p&gt;
&lt;p&gt;　　@ RequiresGuest&lt;/p&gt;
&lt;p&gt;　　　　验证是否是一个guest的请求，与@ RequiresUser完全相反。&lt;/p&gt;
&lt;p&gt;        　  换言之，RequiresUser  == ! RequiresGuest 。&lt;/p&gt;
&lt;p&gt;　　　   此时subject.getPrincipal() 结果为null.&lt;/p&gt;
&lt;p&gt;　　@ RequiresRoles&lt;/p&gt;
&lt;p&gt;　　　　例如：@RequiresRoles(&quot;aRoleName&quot;);&lt;/p&gt;
&lt;p&gt;               　　   void someMethod();&lt;/p&gt;
&lt;p&gt;　　　　如果subject中有aRoleName角色才可以访问方法someMethod。如果没有这个权限则会抛出异常&lt;a href=&quot;http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/AuthorizationException.html&quot;&gt;AuthorizationException&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　@RequiresPermissions&lt;/p&gt;
&lt;p&gt;　　　　例如： @RequiresPermissions( {&quot;file:read&quot;, &quot;write:aFile.txt&quot;} )&lt;br/&gt;                 　　 void someMethod();&lt;/p&gt;
&lt;p&gt;　　　　要求subject中必须同时含有file:read和write:aFile.txt的权限才能执行方法someMethod()。否则抛出异常&lt;a href=&quot;http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/AuthorizationException.html&quot;&gt;AuthorizationException&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt; 　　注解方式的权限控制就完成了，但这种方式没有权限时不会自动跳转到没有权限的页面，而是直接把异常抛到页面了，所以我们要配置一个全局的异常处理&lt;/p&gt;
&lt;p&gt;　　第三步：在springmvc配置文件中，进行如下配置，配置全局异常捕获，当shiro框架抛出权限不足异常时，跳转到权限不足提示页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 全局异常处理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;exceptionMappings&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;prop &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.authz.UnauthorizedException&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;redirect:/noPrivilegeUI.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;prop&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　&lt;/h3&gt;
&lt;h3&gt;　　使用shiro提供的页面标签方式权限控制&lt;/h3&gt;
&lt;p&gt;　　最后，说一说shiro提供的页面标签　　&lt;/p&gt;
&lt;p&gt;　　第一步：在jsp页面中引入shiro的标签库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ taglib uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://shiro.apache.org/tags&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shiro&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第二步：使用shiro的标签控制页面元素展示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171008175607871-822854849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这样，一个shiro入门程序就完成了。&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;稍后，会给出源码的地址&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 11:43:00 +0000</pubDate>
<dc:creator>高压锅里的小白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaobai1226/p/7634575.html</dc:identifier>
</item>
</channel>
</rss>