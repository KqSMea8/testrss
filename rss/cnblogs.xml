<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>spring cloud 入门系列六：使用Zuul 实现API网关服务 - JAVA开发老菜鸟</title>
<link>http://www.cnblogs.com/sam-uncle/p/9011400.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sam-uncle/p/9011400.html</guid>
<description>
&lt;p&gt;通过前面几次的分享，我们了解了微服务架构的几个核心设施，通过这些组件我们可以搭建简单的微服务架构系统。比如通过Spring Cloud Eureka搭建高可用的服务注册中心并实现服务的注册和发现；&lt;/p&gt;
&lt;p&gt;通过Spring Cloud Ribbon或Feign进行负载均衡；通过Spring Cloud Hystrix进行服务容错保护以避免故障蔓延。微服务搭建好了之后我们肯定会提供给外部系统一些统一的RESTFul API服务接口进行调用，&lt;/p&gt;
&lt;p&gt;但是当外部系统调用我们的RESTful API的时候，怎么确定它需要的功能具体是哪个服务提供的呢？这个就涉及到一个路由规则和服务实例列表的维护问题。&lt;/p&gt;
&lt;p&gt;这就引入了我们今天的主角--Spring Cloud Zuul，它是基于Netflix Zuul实现的API网关组件。它可以解决两个大问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;就是我们上面提到的路由规则和服务实例的维护问题&lt;/li&gt;
&lt;li&gt;对于一些校验（比如登录校验等）冗余问题。 按照我们的习惯的做法，是在每个服务中都需要加入这些校验，但是这样会导致代码冗余并且维护也比较麻烦，有了Spring Cloud Zuul这个网关服务之后，我们可以将这些共通的校验放到网关里面统一维护。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;好，接下来我们就来看下怎么实现这个网关服务。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、构建网关，配置路由&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这里我们还是需要使用到前面的hello-service和feign-consumer服务。我们之前把feign-consumer作为服务消费者，但是别忘了在eureka体系里面，每个服务既是服务提供者又是服务消费者，所以feign-consumer也是一个服务提供者，并且http://localhost:9001/feign-consumer等接口就是它提供的服务。&lt;/p&gt;
&lt;p&gt;接下来我们构建一个网关服务，代码结构如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508222811624-1161645768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码实现步骤：&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;新建maven工程api-gateway&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;修改POM文件
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.sam&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;api-gateway&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.5.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;javaVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;javaVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用dependencyManagement进行版本管理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Camden.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入zuul依赖 , 它依赖了spring-boot-starter-actuator/spring-boot-starter-hystrix/spring-boot-starter-ribbon&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-zuul&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;新建启动类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @EnableZuulProxy 开启Zuul 的API网关服务功能
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@EnableZuulProxy
@SpringCloudApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GateWayApp {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(GateWayApp.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;新建application.properties
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
server.port=5555&lt;span&gt;
spring.application.name&lt;/span&gt;=api-&lt;span&gt;gateway

#增加路由规则的配置
#通过zuul.routes.&lt;/span&gt;&amp;lt;route&amp;gt;.path和zuul.routes.&amp;lt;route&amp;gt;&lt;span&gt;.url进行配置，&amp;lt;route&amp;gt;为路由的名字，可以任意指定，但是一组path和url的路由名要相同
&lt;/span&gt;&lt;span&gt;#如下面的例子：所有满足/api-a/** 规则的访问都会被路由转发到//localhost:9001的地址
#也就是说，我们访问http://localhost:5555/api-a/hello的时候，API网关服务就会将该请#求路由到 &lt;span&gt;http://localhost&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:9001/hello提供的微服务接口上&lt;/span&gt;
&lt;span&gt;zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.url=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;http://localhost&lt;/span&gt;:9001


zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.url=&lt;span&gt;http://localhost&lt;/span&gt;:9090&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;测试，启动eureka、hello-service、feign-consumer以及本次新加的api-gateway服务，然后访问http://localhost:5555/api-a/feign-consumer&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508224438023-1759131459.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;成功访问到了feign-consumer的服务接口--feign-consonsumer。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上步骤实现了&lt;strong&gt;传统路由&lt;/strong&gt;的配置，这种配置有个大的缺点，就是需要手工在application.properties文件中进行路由规则的配置，当服务很多的时候，维护工作量就会很大。为了减小维护成本，还有另外一种路由--面向服务的路由。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、面向服务的路由&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Zuul和Eureka进行整合，我们可以让路由的path不是映射具体的url，而是具体的某个服务，而服务的url则交给Eureka服务发现机制自动维护,这类路由就是面向服务的路由。具体代码配置如下：&lt;/p&gt;
&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li readability=&quot;-1.5&quot;&gt;修改POM文件，引入Eureka依赖
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入eureka依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-eureka&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;修改application.properties配置文件
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;server.port=5555
spring.application.name=api-gateway

zuul.routes.api-a.path=/api-a/**

#这里用serviceId代替url，用服务名代替ip+端口号
zuul.routes.api-a.&lt;span&gt;serviceId&lt;/span&gt;=hello-service&lt;p&gt;eureka.client.service-url.defaultZone=http://localhost:1111/eureka&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：zuul.routes.api-a.&lt;span&gt;url&lt;/span&gt;=hello-service也能实现功能，但是它不能进行正常的负载均衡和容错保护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;测试,访问http://localhost:5555/api-a/hello
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508230113051-1284832277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; 三、服务路由的默认规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在面向服务的路由中，由于&amp;lt;route&amp;gt;名字是随意起的，那么是不是可以这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;zuul.routes.hello-service.path=/hello-service/**
zuul.routes.hello-service.serviceId=hello-service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;route&amp;gt;名字就是服务名，其实在实际的应用中，我们往往就是这样命名的。如果有这样的规则的话，那Zuul就可以帮我们默认实现这样的功能，进一步省去了配置的麻烦。&lt;/p&gt;
&lt;p&gt;我们来做个实验，将配置文件改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server.port=5555
spring.application.name=api-gateway

eureka.client.service-url.defaultZone=http://localhost:1111/eureka&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后页面访问验证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508231031970-1208438850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508231047718-929529456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问成功。&lt;/p&gt;

&lt;p&gt;但是由于默认情况下，Eureka上的服务都会被Zuul创建默认的映射关系来进行路由，使得我们不想对外开放的服务也被外部访问到，这个时候可以通过配置zuul.ignored-services来进行配置不需要自动创建路由的规则。当zuul.ignored-services=*的时候，所有的服务都不会自动创建路由规则，这个时候需要通过前面的配置进行相关路由配置了。&lt;/p&gt;
&lt;p&gt;================华丽的分割线===================&lt;/p&gt;
&lt;p&gt;前面说了那么多都是围绕一个问题展开的：路由规则和服务实例的维护问题，那么怎么解决第二个问题（校验冗余问题）呢？&lt;/p&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;四、请求过滤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了在API网关中实现对客户端请求的校验，我们可以通过过滤器来实现对请求的拦截和过滤，实现方法比较简单，只需要继承ZuulFilter抽象类并实现其四个方法就行了。&lt;/p&gt;
&lt;p&gt;修改api-gateway：&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;0.5&quot;&gt;新增过滤器类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 继承ZuulFilter，并且实现其4个接口
 *
 * 用来进行请求过滤
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AccessFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ZuulFilter {
    Logger logger &lt;/span&gt;= LoggerFactory.getLogger(AccessFilter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
     * shouldFilter 判断该过滤器是否需要被执行
     * 
     * 这里直接返回true，表示该过滤器对所有请求都会生效。
     * 实际运用中我们可以利用该函数指定过滤器的有效范围
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; shouldFilter() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     * 过滤器的具体逻辑
     * 
     * 这里我们通过ctx.setSendZuulResponse(false)让zuul过来请求，不对其进行路由
     * 然后通过ctx.setResponseStatusCode(401)设置了返回的错误码
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object run() {
        RequestContext context &lt;/span&gt;=&lt;span&gt; RequestContext.getCurrentContext();
        HttpServletRequest request &lt;/span&gt;=&lt;span&gt; context.getRequest();
        Object accessToken &lt;/span&gt;= request.getParameter(&quot;accessToken&quot;&lt;span&gt;);
        
        logger.info(&lt;/span&gt;&quot;send {} request to {}&quot;&lt;span&gt;, request.getMethod(),request.getRequestURL().toString());
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(accessToken == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            context.setSendZuulResponse(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            context.setResponseStatusCode(&lt;/span&gt;401&lt;span&gt;);
        }
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; filterType 返回过滤器类型
     * 他决定了过滤器在请求的哪个生命周期中执行。这里定义为pre，代表会在请求被路由前执行。
     * 
     * pre:请求执行之前filter 
     * route: 处理请求，进行路由 
     * post: 请求处理完成后执行的filter 
     * error:出现错误时执行的filter
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String filterType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;pre&quot;&lt;span&gt;;
    }
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
     * filterOrder 返回过滤器的执行顺序
     * 
     * 当请求在一个阶段有多个过滤器是，需要根据该方法的返回值来一次执行
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; filterOrder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;修改启动类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @EnableZuulProxy 开启Zuul 的API网关服务功能
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@EnableZuulProxy
@SpringCloudApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GateWayApp {

    &lt;/span&gt;&lt;span&gt;&lt;strong&gt;//追加bean的是实现
    @Bean
    public AccessFilter accessFilter() {
        return new AccessFilter();
    }
    
    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(GateWayApp.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;测试
&lt;ol&gt;&lt;li&gt;)访问http://localhost:5555/hello-service/hello，访问失败
&lt;ol&gt;&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508232532086-1960092636.png&quot; alt=&quot;&quot;/&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;)访问http://localhost:5555/hello-service/hello&lt;span&gt;&lt;span&gt;?accessToken=token&lt;span&gt;，正常访问&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508232630363-453480664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改后的代码结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508232231004-146242086.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 五、拓展延伸&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其实路由功能在真正运行时，他的路由映射和请求转发都是由几个不同的过滤器完成的。&lt;/p&gt;
&lt;p&gt;路由映射主要通过pre类型的过滤器完成，他将请求路径与配置的路由规则进行匹配，找到需要转发的目标地址。&lt;/p&gt;
&lt;p&gt;而请求转发的部分则是由route类型的过滤器完成的，对pre类型过滤器获取的路由地址进行转发。&lt;/p&gt;
&lt;p&gt;所以，过滤器可以说是Zuul实现API网关功能最为核心的部件，每一个进入Zuul的HTTP请求都会经过一系列的过滤器处理链得到请求响应并返回给客户端。&lt;/p&gt;

</description>
<pubDate>Tue, 08 May 2018 15:34:00 +0000</pubDate>
<dc:creator>JAVA开发老菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sam-uncle/p/9011400.html</dc:identifier>
</item>
<item>
<title>JeeSite数据分页与翻页 - tosser</title>
<link>http://www.cnblogs.com/tosser/p/9011578.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tosser/p/9011578.html</guid>
<description>&lt;p&gt;　　本文章介绍的是JeeSite开源项目二次开发时的一些笔记，对于没有使用过JeeSite的可以不用往下看了，因为下面的代码是跟JeeSite二次开发相关的代码，不做JeeSite的二次开发，以下代码对您无用，在这里友情提醒，避免浪费您宝贵的时间。&lt;/p&gt;

&lt;p&gt;　　翻页功能在各种项目中都会用到，在JeeSite开源项目中使用翻页也非常的容易，只要在配置文件中进行就可以就可以使用，系统的默认值为30页。&lt;/p&gt;
&lt;p&gt;　　配置文件在src\main\resources\jeesite.properties文件中，配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; page.pageSize=30
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　但是这种配置并不能满足所有的分页要求，也就是说在不同的列表中分页的条数是不同的。如果在配置文件中修改分页条数，那么会影响到整个项目的分页，它是一个全局的配置参数，这样就很不方便了。&lt;/p&gt;

&lt;p&gt;JeeSite手册的分页&lt;/p&gt;
&lt;p&gt;　　在做项目的时候，由于使用JeeSite的默认页数无法满足项目的需求，因为不可能每个列表页都以30条记录作为一页，因此只能看手册。看手册又没有具体理解如何使用，JeeSite手册中最分页的描述如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置分页参数，则分页，如果不设置，则根据条件获取全部&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;user.setPage(page);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行分页查询&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; page.setList(userDao.findPage(user));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　按照手册的方法简单的尝试了一下，但是没有效果，因此就只能查看分页的源码了。&lt;/p&gt;

&lt;p&gt;分页源码&lt;/p&gt;
&lt;p&gt;　　在使用开源项目的时候遇到问题，如果又没有手册，或者手册说明不是特别详细的话，除了在网上找资料外，就只剩下阅读开源项目的源代码了。（注：关于分页这个问题在网上还是有很多人问的，大部分都是说修改配置文件，但是同样无法满足提问人的需要，因为大家需要的是不同的列表中有不同的分页条数。）&lt;/p&gt;
&lt;p&gt;　　在Eclipse下按下Ctrl+Shift+R，输入“page.java”，然后打开该Java文件。看一下Page类的构造方法，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request 传递 repage 参数，来记住页码
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response 用于设置 Cookie，记住页码
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Page(HttpServletRequest request, HttpServletResponse response){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;(request, response, -2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request 传递 repage 参数，来记住页码
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response 用于设置 Cookie，记住页码
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; defaultPageSize 默认分页大小，如果传递 -1 则为不分页，返回所有数据
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Page(HttpServletRequest request, HttpServletResponse response, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; defaultPageSize){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置页码参数（传递repage参数，来记住页码）&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     String no = request.getParameter(&quot;pageNo&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNumeric(no)){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         CookieUtils.setCookie(response, &quot;pageNo&quot;&lt;span&gt;, no);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageNo(Integer.parseInt(no));
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (request.getParameter(&quot;repage&quot;)!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         no = CookieUtils.getCookie(request, &quot;pageNo&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNumeric(no)){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageNo(Integer.parseInt(no));
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置页面大小参数（传递repage参数，来记住页码大小）&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     String size = request.getParameter(&quot;pageSize&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNumeric(size)){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         CookieUtils.setCookie(response, &quot;pageSize&quot;&lt;span&gt;, size);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageSize(Integer.parseInt(size));
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (request.getParameter(&quot;repage&quot;)!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         size = CookieUtils.getCookie(request, &quot;pageSize&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNumeric(size)){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageSize(Integer.parseInt(size));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (defaultPageSize != -2&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pageSize =&lt;span&gt; defaultPageSize;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置页面分页函数&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     String funcName = request.getParameter(&quot;funcName&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(funcName)){
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         CookieUtils.setCookie(response, &quot;funcName&quot;&lt;span&gt;, funcName);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setFuncName(funcName);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (request.getParameter(&quot;repage&quot;)!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         funcName = CookieUtils.getCookie(request, &quot;funcName&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(funcName)){
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setFuncName(funcName);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置排序参数&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     String orderBy = request.getParameter(&quot;orderBy&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(orderBy)){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setOrderBy(orderBy);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageNo 当前页码
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageSize 分页大小
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Page(&lt;span&gt;int&lt;/span&gt; pageNo, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageSize) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;(pageNo, pageSize, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageNo 当前页码
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageSize 分页大小
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; count 数据条数
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Page(&lt;span&gt;int&lt;/span&gt; pageNo, &lt;span&gt;int&lt;/span&gt; pageSize, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; count) {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;(pageNo, pageSize, count, &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;T&amp;gt;&lt;span&gt;());
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageNo 当前页码
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; pageSize 分页大小
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; count 数据条数
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; list 本页数据对象列表
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Page(&lt;span&gt;int&lt;/span&gt; pageNo, &lt;span&gt;int&lt;/span&gt; pageSize, &lt;span&gt;long&lt;/span&gt; count, List&amp;lt;T&amp;gt;&lt;span&gt; list) {
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setCount(count);
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageNo(pageNo);
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.pageSize =&lt;span&gt; pageSize;
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.list =&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从源码中可以看出Page类有很多的构造方法，如果需要自定义每页有多少条记录，那么需要使用的构造方法是第二个构造方法，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request 传递 repage 参数，来记住页码
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response 用于设置 Cookie，记住页码
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; defaultPageSize 默认分页大小，如果传递 -1 则为不分页，返回所有数据
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Page(HttpServletRequest request, HttpServletResponse response, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; defaultPageSize){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置页码参数（传递repage参数，来记住页码）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     String no = request.getParameter(&quot;pageNo&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNumeric(no)){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         CookieUtils.setCookie(response, &quot;pageNo&quot;&lt;span&gt;, no);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageNo(Integer.parseInt(no));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (request.getParameter(&quot;repage&quot;)!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         no = CookieUtils.getCookie(request, &quot;pageNo&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNumeric(no)){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPageNo(Integer.parseInt(no));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个构造方法比系统默认生成代码使用的构造函数多了一个参数——defaultPageSize，这个参数可以用来设置每页的记录数，调用方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Page&amp;lt;Xxx&amp;gt; p = &lt;span&gt;new&lt;/span&gt; Page&amp;lt;Xxx&amp;gt;(request, response, 10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; Page&amp;lt;Xxx&amp;gt; page = xxxService.findPage(p, xxx);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　JeeSite生成的代码中调用的方法如下（JeeSite有一个代码生成的功能，代码生成中对分页的使用如下）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Page&amp;lt;Xxx&amp;gt; page = xxxService.findPage(&lt;span&gt;new&lt;/span&gt; Page&amp;lt;Xxx&amp;gt;(request, response), xxx);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在该源码上下断点，发现这里在实例化Page类时，调用的构造方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt; * 构造方法
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request 传递 repage 参数，来记住页码
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; response 用于设置 Cookie，记住页码
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Page(HttpServletRequest request, HttpServletResponse response){
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;(request, response, -2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在该构造方法中同样调用的是Page.java中第二个构造方法。&lt;/p&gt;

&lt;p&gt;JS翻页&lt;/p&gt;
&lt;p&gt;　　在JeeSite中使用了BootStrap的前端库，使用这个前端库可以很容易的使用“弹出的模态对话框”。使用模态对话框，可能会是一个表单提交一些数据，也可能是其他表单数据列表。使用模态对话框时，如果是数据列表的话，那么也会涉及到列表分页的问题。调用的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&quot;control-group&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&quot;control-label&quot;&amp;gt;个人信息：&amp;lt;/label&amp;gt;
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&quot;controls&quot;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;         &amp;lt;input type=&quot;text&quot; name=&quot;personName&quot; /&amp;gt;
&lt;span&gt; 5&lt;/span&gt;         &amp;lt;form:hidden path=&quot;personId&quot; /&amp;gt;
&lt;span&gt; 6&lt;/span&gt;         &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&quot;help-inline&quot;&amp;gt;&amp;lt;font color=&quot;red&quot;&amp;gt;*&amp;lt;/font&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;&lt;span&gt;a
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             href=&quot;url/Controller...&quot;
&lt;span&gt; 8&lt;/span&gt;             role=&quot;button&quot; &lt;span&gt;class&lt;/span&gt;=&quot;btn&quot; data-target=&quot;#PersonModal&quot;
&lt;span&gt; 9&lt;/span&gt;             data-toggle=&quot;modal&quot;&amp;gt;选择&amp;lt;/a&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;11&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;……
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &amp;lt;div id=&quot;PersonModal&quot; &lt;span&gt;class&lt;/span&gt;=&quot;modal hide fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;
&lt;span&gt;14&lt;/span&gt;     aria-labelledby=&quot;myModalLabel&quot; aria-hidden=&quot;true&quot;&amp;gt;
&lt;span&gt;15&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&quot;modal-header&quot;&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;button type=&quot;button&quot; &lt;span&gt;class&lt;/span&gt;=&quot;close&quot; data-dismiss=&quot;modal&quot;
&lt;span&gt;17&lt;/span&gt;             aria-hidden=&quot;true&quot;&amp;gt;×&amp;lt;/button&amp;gt;
&lt;span&gt;18&lt;/span&gt;         &amp;lt;h3 id=&quot;PersonModalLabel&quot;&amp;gt;选择人员&amp;lt;/h3&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&quot;modal-body&quot; id=&quot;PersonBody&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;21&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&quot;modal-footer&quot;&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&quot;btn&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&amp;gt;取消&amp;lt;/button&amp;gt;
&lt;span&gt;23&lt;/span&gt;         &amp;lt;button &lt;span&gt;class&lt;/span&gt;=&quot;btn btn-primary&quot; id=&quot;selectPerson&quot;&amp;gt;确定&amp;lt;/button&amp;gt;
&lt;span&gt;24&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;25&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当点击上半段代码的“选择”按钮时，通过href指定的URL地址可以将另外一个页面显示到该页面中，然后获取到的数据会在下半段代码的具有属性“modal-body”的div中显示出来。这时，显示的是另外一个页面的内容的，而显示页面的JS代码是无法带过来的。那么，翻页默认调用的JS代码就不能使用了。翻页的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function page(n,s){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     $(&quot;#pageNo&quot;&lt;span&gt;).val(n);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     $(&quot;#pageSize&quot;&lt;span&gt;).val(s);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     $(&quot;#searchForm&quot;&lt;span&gt;).submit();
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段代码是就无法调用了，那么要翻页就需要重新定义了，并且，重新定义后的JS代码要在完成分页的情况下将数据仍然显示到“modal-body”中。但是重新定义一个翻页的JS函数如何让页码列表调用呢？&lt;/p&gt;
&lt;p&gt;　　在Page类中，提供了一个非常实用的方法，它可以指定翻页的JS函数，方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt; * 设置点击页码调用的js函数名称，默认为page，在一页有多个分页对象时使用。
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; funcName 默认为page
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFuncName(String funcName) {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.funcName =&lt;span&gt; funcName;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　有了这个函数就可以完成翻页了，甚至在多个模态对话框中都使用到需要翻页的列表，也可以解决了。调用方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Page&amp;lt;Xxx&amp;gt; p = &lt;span&gt;new&lt;/span&gt; Page&amp;lt;Xxx&amp;gt;(request, response, 10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; p.setFuncName(&quot;ctPage&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; Page&amp;lt;Xxx&amp;gt; page = xxxService.findPage(p, xxx);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，生成的分页页码中在调用翻页函数时，就可以调用自定义的翻页函数ctPage()了。定义的翻页方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function hrPage(n, s) {         
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    $.ajax({  
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         type: &quot;POST&quot;&lt;span&gt;,  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         url:&quot;${ctx}/...&quot;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 具体的地址省略&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        data:{pageNo:n, pageSize:s},
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         async: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        error: function(request) { 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        success: function(data) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             $('#PersonBody'&lt;span&gt;).empty();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             $('#PersonBody'&lt;span&gt;).append(data);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　函数体就是自定义的翻页方法了。&lt;/p&gt;

&lt;p&gt;　　这些都是我在实际使用JeeSite时所遇到的问题的解决方法。有问题欢迎讨论！！&lt;/p&gt;

&lt;p&gt;　　关于JeeSite的另一篇笔记是：&lt;a title=&quot;JeeSite中Excel导入导出&quot; href=&quot;http://www.cnblogs.com/tosser/p/9000288.html&quot; target=&quot;_blank&quot;&gt;JeeSite中Excel导入导出&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 14:54:00 +0000</pubDate>
<dc:creator>tosser</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tosser/p/9011578.html</dc:identifier>
</item>
<item>
<title>VueJs(10)---vue-router（进阶1） - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9005836.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9005836.html</guid>
<description>
&lt;p&gt;       本文是基于官网学习，官网具体学习目录：&lt;a href=&quot;https://router.vuejs.org/zh-cn/&quot; target=&quot;_blank&quot;&gt;vue-router&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;      &lt;span&gt;一、安装&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;          基于vue-cli脚手架安装还是蛮简单的：在文件当前目录下运行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm install vue-router
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     如果在一个模块化工程中使用它，必须要通过 &lt;span&gt;&lt;code&gt;Vue.use()&lt;/code&gt;&lt;/span&gt; 明确地安装路由功能：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; Vue from 'vue'
&lt;span&gt;import&lt;/span&gt; VueRouter from 'vue-router'&lt;span&gt;

Vue.use(VueRouter)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         脚手架安装教程：  &lt;a href=&quot;https://segmentfault.com/a/1190000008049815&quot; target=&quot;_blank&quot;&gt;脚手架安装教程 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;        其他类型安装详见官网：&lt;a href=&quot;https://router.vuejs.org/zh-cn/installation.html&quot; target=&quot;_blank&quot;&gt;安装&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;   二、单页面应用&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;   &lt;span&gt;官网介绍的已经很全面。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue/dist/vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello App!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用 router-link 组件来导航. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通过传入 `to` 属性指定链接. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;router-link&amp;gt; 默认会被渲染成一个 `&amp;lt;a&amp;gt;` 标签 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/foo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Go to Foo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/bar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Go to Bar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 路由出口 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 路由匹配到的组件将渲染在这里 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)&lt;/span&gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. 定义（路由）组件。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以从其他文件 import 进来&lt;/span&gt;
&lt;span&gt;    const Foo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
        template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;foo&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }
    const Bar &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
        template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;bar&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. 定义路由&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过 Vue.extend() 创建的组件构造器，&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 或者，只是一个组件配置对象。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 我们晚点再讨论嵌套路由。&lt;/span&gt;
&lt;span&gt;    const routes &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [{
        path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        component: Foo
    }, {
        path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        component: Bar
    }]

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. 创建 router 实例，然后传 `routes` 配置&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 你还可以传别的配置参数, 不过先这么简单着吧。&lt;/span&gt;
&lt;span&gt;    const router &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
        routes &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; （缩写）相当于 routes: routes&lt;/span&gt;
&lt;span&gt;    })

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4. 创建和挂载根实例。&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记得要通过 router 配置参数注入路由，&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从而让整个应用都有路由功能&lt;/span&gt;
&lt;span&gt;    const app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        router
    }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 现在，应用已经启动了！&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 要注意，当 &amp;lt;router-link&amp;gt; 对应的路由匹配成功，将自动设置 class 属性值 .router-link-active &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    .router-link-active &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;效果&lt;/span&gt;：&lt;/p&gt;

&lt;p&gt;  这个案例，就是不同路径显示不同组件。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;     三、动态路由匹配&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;    我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。比如/user/name、/user/age、/user/haha都要映射到user组件，怎么做呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue/dist/vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/user/foo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/user/bar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/bar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个『路径参数』使用冒号 : 标记。当匹配到一个路由时，&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数值会被设置到 this.$route.params，可以在每个组件内使用。于是，我们可以更新 User 的模板&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出当前用户的 ID&lt;/span&gt;
&lt;span&gt;    const User &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
        template: `&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;User {{ $route.params.id }}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;div&amp;gt;`&lt;/span&gt;
&lt;span&gt;    }
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 动态路径参数 以冒号开头&lt;/span&gt;
     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在呢，像 /user/foo 和 /user/bar 都将映射到相同的路由。&lt;/span&gt;
&lt;span&gt;    const router &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
        routes: [{
            path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            component: User
        }]
    })

    const app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        router
    }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    .router-link-active &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;效果：&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;  你可以在一个路由中设置多段『路径参数』，对应的值都会设置到&lt;span&gt; &lt;code&gt;$route.params&lt;/code&gt;&lt;/span&gt; 中。例如：&lt;/p&gt;
&lt;table align=&quot;left&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt;模式&lt;/th&gt;
&lt;th&gt;匹配路径&lt;/th&gt;
&lt;th&gt;$route.params&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;/user/:username&lt;/td&gt;
&lt;td&gt;/user/evan&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{ username: 'evan' }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;/user/:username/post/:post_id&lt;/td&gt;
&lt;td&gt;/user/evan/post/123&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{ username: 'evan', post_id: 123 }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



&lt;h2&gt;&lt;span&gt;      四、嵌套路由&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;    嵌套路由是个常见的需求，假设用户能够通过路径&lt;span&gt;&lt;code&gt;/home/news&lt;/code&gt;&lt;/span&gt;和&lt;span&gt;&lt;code&gt;/home/message&lt;/code&gt;&lt;/span&gt;访问一些内容，一个路径映射一个组件，访问这两个路径也会分别渲染两个组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201805/1090617-20180508000301153-376135340.png&quot; alt=&quot;&quot; width=&quot;385&quot; height=&quot;388&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 实现嵌套路由有两个要点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;在组件内部使用&lt;span&gt;&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;&lt;/span&gt;标签&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;VueRouter&lt;/code&gt; 的参数中使用 &lt;span&gt;&lt;code&gt;children&lt;/code&gt;&lt;/span&gt; 配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    这里的&lt;span&gt; &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;&lt;/span&gt; 是最顶层的出口，渲染最高级路由匹配到的组件。同样地，一个被渲染组件同样可以包含自己的嵌套&lt;span&gt; &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;&lt;/span&gt;。例如，在 &lt;code&gt;U&lt;span&gt;ser&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 组件&lt;/span&gt;的模板添加一个&lt;span&gt; &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const User = {
  template: `
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;User {{ $route.params.id }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  `
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       要在嵌套的出口中渲染组件，需要在 &lt;code&gt;VueRouter&lt;/code&gt; 的参数中使用 &lt;strong&gt;&lt;span&gt;&lt;code&gt;children&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt; 配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
const router = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
  routes: [
    { path: &lt;/span&gt;'/user/:id'&lt;span&gt;, component: User,
      children: [
        {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当 /user/:id/profile 匹配成功，&lt;/span&gt;
          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; UserProfile 会被渲染在 User 的 &amp;lt;router-view&amp;gt; 中&lt;/span&gt;
          path: 'profile'&lt;span&gt;,
          component: UserProfile
        },
        {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当 /user/:id/posts 匹配成功&lt;/span&gt;
          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; UserPosts 会被渲染在 User 的 &amp;lt;router-view&amp;gt; 中&lt;/span&gt;
          path: 'posts'&lt;span&gt;,
          component: UserPosts
        }
      ]
    }
  ]
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     &lt;span&gt;&lt;strong&gt;要注意，以 &lt;code&gt;/&lt;/code&gt; 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    此时，基于上面的配置，当你访问&lt;span&gt; &lt;code&gt;/user/foo&lt;/code&gt; 时，&lt;code&gt;User&lt;/code&gt;&lt;/span&gt; 的出口是不会渲染任何东西，这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 &lt;span&gt;空的 子路由&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
const router = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
  routes: [
    {
      path: &lt;/span&gt;'/user/:id'&lt;span&gt;, component: User,
      children: [
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当 /user/:id 匹配成功，&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; UserHome 会被渲染在 User 的 &amp;lt;router-view&amp;gt; 中&lt;/span&gt;
        { path: ''&lt;span&gt;, component: UserHome },

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...其他子路由&lt;/span&gt;
&lt;span&gt;      ]
    }
  ]
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;综合小案例&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue/dist/vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/user/foo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/user/foo/profile&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo/profile&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-link &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;=&quot;/user/foo/posts&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo/posts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    const&lt;/span&gt; User &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
        &lt;span&gt;template&lt;/span&gt;: `
      &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;User {{ $route.params.id }}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;h2&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;router-view&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;div&amp;gt; `&lt;/span&gt;
&lt;span&gt;    }
    &lt;span&gt;const&lt;/span&gt; UserHome &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; { &lt;span&gt;template&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;Home&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }     
    &lt;span&gt;const&lt;/span&gt; UserProfile &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {   &lt;span&gt;template&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;Profile&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  }    
    &lt;span&gt;const&lt;/span&gt; UserPosts &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {   &lt;span&gt;template&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;Posts&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  }
       
    const router &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
        &lt;span&gt;routes&lt;/span&gt;: [{
            &lt;span&gt;path&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            component: User,
            &lt;span&gt;children&lt;/span&gt;: [{
                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; /user/:id/匹配到UserHome组件，如果你是/user/:id/home是匹配不到任何组件的，因为children里没有home路径&lt;/span&gt;
&lt;span&gt;&lt;span&gt;                    path&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
                    component: UserHome
                },

                { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; /user/:id/profile匹配到UserProfile组件&lt;/span&gt;
&lt;span&gt;&lt;span&gt;                    path&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    component: UserProfile
                },

                { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; /user/:id/posts匹配到UserPosts组件&lt;/span&gt;
&lt;span&gt;&lt;span&gt;                    path&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;posts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    component: UserPosts
                }
            ]
        }]
    })
    const app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        router
    }).$mount(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;效果：&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;五、编程式路由&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;  &lt;span&gt; 1、&lt;code&gt;router.push&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt;上面几种路由都是直接在页面点击进行跳转，但在我们实际开发过程中，有很多按钮在执行跳转之前，还会执行一系列方法，这时可以使用&lt;strong&gt; &lt;span&gt;this.$router.push(location)&lt;/span&gt; &lt;/strong&gt;来修改 url，完成跳转&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;想要导航到不同的 URL，则使用&lt;span&gt; &lt;code&gt;router.push&lt;/code&gt;&lt;/span&gt; 方法。这个方法会向 &lt;span&gt;histor&lt;/span&gt;y 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 当你点击&lt;span&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; &lt;/span&gt;时，这个方法会在内部调用，所以说，点击&lt;span&gt; &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt;&lt;/span&gt; 等同于调用&lt;span&gt; &lt;code&gt;router.push(...)&lt;/code&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;table cellpadding=&quot;20&quot; align=&quot;left&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;声明式&lt;/th&gt;
&lt;th&gt;编程式&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;router.push(...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串&lt;/span&gt;
router.push('home'&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象&lt;/span&gt;
router.push({ path: 'home'&lt;span&gt; })

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 命名的路由&lt;/span&gt;
router.push({ name: 'user', params: { userId: 123&lt;span&gt; }})

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 带查询参数，变成 /register?plan=private&lt;/span&gt;
router.push({ path: 'register', query: { plan: 'private' }})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/span&gt;：如果提供了&lt;span&gt; &lt;code&gt;path&lt;/code&gt;，&lt;code&gt;params&lt;/code&gt;&lt;/span&gt; 会被忽略，上述例子中的 &lt;span&gt;&lt;code&gt;query&lt;/code&gt;&lt;/span&gt; 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 &lt;span&gt;&lt;code&gt;name&lt;/code&gt;&lt;/span&gt; 或手写完整的带有参数的 &lt;span&gt;&lt;code&gt;path&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
const userId = 123&lt;span&gt;
router.push({ name: &lt;/span&gt;'user', params: { userId }}) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; /user/123&lt;/span&gt;
router.push({ path: `/user/${userId}` }) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; /user/123&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 这里的 params 不生效&lt;/span&gt;
router.push({ path: '/user', params: { userId }}) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -&amp;gt; /user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  同样的规则也适用于 &lt;span&gt;&lt;code&gt;router-link&lt;/code&gt;&lt;/span&gt; 组件的 &lt;code&gt;to&lt;/code&gt; 属性。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;  2.&lt;code&gt;router.replace&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;  跟&lt;span&gt; &lt;code&gt;router.push&lt;/code&gt;&lt;/span&gt; 很像，唯一的不同就是，它不会向 &lt;span&gt;history&lt;/span&gt; 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。（下面会具体说明）&lt;/p&gt;
&lt;table align=&quot;left&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;声明式&lt;/th&gt;
&lt;th&gt;编程式&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;&amp;lt;router-link :to=&quot;...&quot; replace&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;router.replace(...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;


&lt;h4&gt;&lt;span&gt;3、&lt;code&gt;router.go(n)&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似&lt;span&gt; &lt;code&gt;window.history.go(n)&lt;/code&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在浏览器记录中前进一步，等同于 history.forward()&lt;/span&gt;
router.go(1&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 后退一步记录，等同于 history.back()&lt;/span&gt;
router.go(-1&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 前进 3 步记录&lt;/span&gt;
router.go(3&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果 history 记录不够用，那就默默地失败呗&lt;/span&gt;
router.go(-100&lt;span&gt;)
router.go(&lt;/span&gt;100)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;&lt;strong&gt;4、三个比较说明：&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.this.$router.push()：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.this.$router.replace()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      同样是跳转到指定的url，但是这个方法不会向history里面添加新的记录，点击返回，会跳转到上上一个页面。上一个记录是不存在的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.this.$router.go(n)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     相对于当前页面向前或向后跳转多少个页面,类似 &lt;code&gt;window.history.go(n)&lt;/code&gt;。n可为正数可为负数。正数返回上一个页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、在什么情况用push，或者在上面情况用replace，个人理解：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     一般情况下，要做前进后退的浏览记录管理的，基本上都是用&lt;code&gt;router.push()&lt;/code&gt;，但是也是有一些特殊情况需要用到&lt;code&gt;router.replace()&lt;/code&gt;。比如，有一个授权页，用户在按流程操作时，某一步需要授权，是直接跳到授权页，授权页提交授权请求，直到成功授权后，跳到流程中的下一步操作的地址。此处，授权请求的那页面应该用&lt;code&gt;replace&lt;/code&gt;去替换掉自身的访问记录，防止用户跳到下一步流程后按后退键回退到授权页，而导致重复授权，简单来讲就是你跳过来了，就不让你后退又到上一个页面。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;举例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue/dist/vue.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;fooClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;profileClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo/profile&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;postsClick&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/user/foo/posts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;router-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义了三个组件&lt;/span&gt;
&lt;span&gt;    const UserHome &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {   template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;Home&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  }  
    const UserProfile &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {  template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;Profile&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}  
    const UserPosts &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {   template: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div&amp;gt;Posts&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配了三个路由  &lt;/span&gt;
&lt;span&gt;    const router &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VueRouter({
        routes: [{
            path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            component: UserHome,
        }, {
            path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/foo/profile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            component: UserProfile,
        }, {
            path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/foo/posts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            component: UserPosts,
        }]
    })
    const app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        router,
        data: {
            foo: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            profile: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/foo/profile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            posts: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/foo/posts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        methods: {

            fooClick: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$router.push({
                    path: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.foo
                });
            },
            profileClick: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$router.push({
                    path: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.profile
                });
            },
            postsClick: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$router.push({
                    path: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.posts
                });
            }
        }
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;页面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201805/1090617-20180508222828987-536041939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;测试结果&lt;/span&gt;：当使用 &lt;span&gt;this.$router.push&lt;/span&gt;，时，前进一步后退一步都会退到上一次进入的页面，而使用 &lt;span&gt;this.$router.replace&lt;/span&gt;并不不会调到上一个页面。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;想太多，做太少，中间的落差就是烦恼。想没有烦恼，要么别想，要么多做。中尉【19】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 14:36:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9005836.html</dc:identifier>
</item>
<item>
<title>使用 Babylon.js 在 HTML 页面加载 3D 对象 - 张高兴</title>
<link>http://www.cnblogs.com/zhanggaoxing/p/9011458.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanggaoxing/p/9011458.html</guid>
<description>&lt;p&gt;&lt;em&gt;五一 &lt;a href=&quot;https://blogs.windows.com&quot;&gt;Windwos Blogs&lt;/a&gt; 推了一篇博客， Babylon.js v3.2 发布了。因为一直有想要在自己博客上加载 3D 对象的冲动，这两天正好看到了，就动手研究研究。本人之前也并没有接触过 WebGL ，这方面算是知识盲区，需求完成之后感觉非常炫酷，顺手写篇博客记录下来。不得不说 3D 打印和 VR 慢慢的开始走进平时的生活了，技术的成熟与硬件成本的变低，结合内容跨平台共享与各种简单的 js 框架， WebGL 和 WebVR 很可能就是未来 Web 方向的主流技术。期待美好而炫酷的未来ing&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;babylon.js-是什么&quot;&gt;Babylon.js 是什么&lt;/h2&gt;
&lt;p&gt;Babylon.js 是一个 JavaScript 开源框架，可以在浏览器或 Web 应用程序中简单便捷的构建 3D 游戏和 WebGL、WebVR 等 3D 体验。Babylon.js 非常强大，强大到可以去构建商业游戏。毕竟我才花了两天时间去了解它，只用来加载 3D 对象确实是大材小用了，文档和 GitHub 地址在下面。&lt;/p&gt;
&lt;p&gt;Babylon GitHub : &lt;a href=&quot;https://github.com/BabylonJS/Babylon.js&quot; class=&quot;uri&quot;&gt;https://github.com/BabylonJS/Babylon.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Babylon Document : &lt;a href=&quot;https://doc.babylonjs.com/&quot; class=&quot;uri&quot;&gt;https://doc.babylonjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本代码&quot;&gt;基本代码&lt;/h2&gt;
&lt;p&gt;Babylon.js 并不是所有的 3D 对象都支持，支持的类型： &lt;strong&gt;.glTF 、 .obj 、 .stl 、 .babylon&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;这里以 STL 对象为例，首先需要引入两个 js 文件。一个是 Babylon.js ，另一个是 STL Loader， js 文件在 GitHub 中自行搜索下载引入。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;~/js/babylon.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;~/js/babylon.stlFileLoader.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时还需要一个 HTML5 的 canvas 标签作为 Babylon.js 的渲染容器&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;canvas&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;renderCanvas&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width:100%;height:100%;touch-action:none;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;紧接着注册一个 DOM 事件，我们的渲染代码将在事件里完成，以确保执行渲染之前加载整个 DOM 。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'DOMContentLoaded'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// TODO&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;实现步骤&quot;&gt;实现步骤&lt;/h2&gt;
&lt;ol readability=&quot;3.9434628975265&quot;&gt;&lt;li readability=&quot;-2&quot;&gt;
&lt;p&gt;获取渲染容器对象&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; canvas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'renderCanvas'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.4508196721311&quot;&gt;
&lt;p&gt;加载渲染引擎&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.babylonjs.com/api/classes/babylon.engine&quot;&gt;Engine&lt;/a&gt; 类负责低级别的 API 接口。第一个参数为渲染容器对象，第二个参数是开启抗锯齿。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; engine &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Engine&lt;/span&gt;(canvas&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;15.268656716418&quot;&gt;
&lt;p&gt;加载场景&lt;/p&gt;
&lt;p&gt;一个基本场景（&lt;a href=&quot;https://doc.babylonjs.com/api/classes/babylon.scene&quot;&gt;Scene&lt;/a&gt;）里需要包括相机（&lt;a href=&quot;https://doc.babylonjs.com/babylon101/cameras&quot;&gt;Cameras&lt;/a&gt;）、光源（&lt;a href=&quot;https://doc.babylonjs.com/babylon101/lights&quot;&gt;Lights&lt;/a&gt;）、3D 对象。这里相机使用 ArcRotateCamera ，鼠标可以控制旋转和缩放。光源使用 HemisphericLight 半球光，用来模拟现实中的环境光。当然你也可以使用其他相机和光源，文档链接已给出。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 基本的场景对象&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; scene &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Scene&lt;/span&gt;(engine)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 半球光对象，朝向天空&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; light &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HemisphericLight&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'light1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Vector3&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; scene)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 弧度旋转相机，参数含义为：α角度、β角度、半径、目标方向、场景对象。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 下图非常详细的说明了各个参数的真实场景的含义&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; camera &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ArcRotateCamera&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'camera1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Vector3&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; scene)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 相机设置在原点位置&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setTarget&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Vector3&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Zero&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 把相机附在渲染对象上&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;attachControl&lt;/span&gt;(canvas&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 把 STL 对象附加在现有的场景对象上&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 可以从文件夹中选取对象，也可以给出一个 URL&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;SceneLoader&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;../&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Chariot_Red_f.stl&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; scene)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1085877/201805/1085877-20180508222728637-1365067070.jpg&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Arc Rotate Camera 示意图&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;当然，上面的代码可以封装成一个方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;注册渲染循环&lt;/p&gt;
&lt;p&gt;这些代码非常重要，场景是需要循环渲染的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;engine&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;runRenderLoop&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;
&lt;p&gt;实现容器自动缩放&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'resize'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;engine&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resize&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;完整代码与效果图&quot;&gt;完整代码与效果图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1085877/201805/1085877-20180508222756564-457616746.png&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;效果图&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;canvas&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;renderCanvas&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width:100%;height:100%;touch-action:none;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;~/js/babylon.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;~/js/babylon.stlFileLoader.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'DOMContentLoaded'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; canvas &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'renderCanvas'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; engine &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Engine&lt;/span&gt;(canvas&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; scene &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Scene&lt;/span&gt;(engine)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; camera &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ArcRotateCamera&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'camera1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Vector3&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; scene)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setTarget&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Vector3&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Zero&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;camera&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;attachControl&lt;/span&gt;(canvas&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; light &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HemisphericLight&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'light1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Vector3&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; scene)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;BABYLON&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;SceneLoader&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@Model.PreviewModel&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; scene)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;engine&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;runRenderLoop&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'resize'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;engine&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resize&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 08 May 2018 14:29:00 +0000</pubDate>
<dc:creator>张高兴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanggaoxing/p/9011458.html</dc:identifier>
</item>
<item>
<title>RocketMQ源码 — 八、 RocketMQ消息重试 - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/9011446.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/9011446.html</guid>
<description>&lt;p&gt;RocketMQ的消息重试包含了producer发送消息的重试和consumer消息消费的重试。&lt;/p&gt;
&lt;h2 id=&quot;producer发送消息重试&quot;&gt;producer发送消息重试&lt;/h2&gt;
&lt;p&gt;producer在发送消息的时候如果发送失败了，RocketMQ会自动重试。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; SendResult &lt;span class=&quot;fu&quot;&gt;sendDefaultImpl&lt;/span&gt;(
    Message msg,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; CommunicationMode communicationMode,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; SendCallback sendCallback,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; timeout
) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MQClientException, RemotingException, MQBrokerException, InterruptedException {
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;makeSureStateOK&lt;/span&gt;();
    Validators.&lt;span class=&quot;fu&quot;&gt;checkMessage&lt;/span&gt;(msg, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQProducer&lt;/span&gt;);

    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; invokeID = random.&lt;span class=&quot;fu&quot;&gt;nextLong&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; beginTimestampFirst = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; beginTimestampPrev = beginTimestampFirst;
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; endTimestamp = beginTimestampFirst;
    TopicPublishInfo topicPublishInfo = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;tryToFindTopicPublishInfo&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getTopic&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (topicPublishInfo != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; topicPublishInfo.&lt;span class=&quot;fu&quot;&gt;ok&lt;/span&gt;()) {
        MessageQueue mq = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        Exception exception = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        SendResult sendResult = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;co&quot;&gt;// 这是调用的总次数&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; timesTotal = communicationMode == CommunicationMode.&lt;span class=&quot;fu&quot;&gt;SYNC&lt;/span&gt; ? &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQProducer&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getRetryTimesWhenSendFailed&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; times = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        String[] brokersSent = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[timesTotal];
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (; times &amp;lt; timesTotal; times++) {
    &lt;span class=&quot;co&quot;&gt;// 省略部分代码...&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;重试几次？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由上面可以看出发送消息的充实次数区分不同的情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;同步发送：org.apache.rocketmq.client.producer.DefaultMQProducer#retryTimesWhenSendFailed + 1，默认retryTimesWhenSendFailed是2，所以除了正常调用一次外，发送消息如果失败了会重试2次&lt;/li&gt;
&lt;li&gt;异步发送：不会重试（调用总次数等于1）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;什么时候重试？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发生异常的时候，需要注意的是发送的时候并不是catch所有的异常，只有内部异常才会catch住并重试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怎么重试？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每次重试都会重新进行负载均衡（会考虑发送失败的因素），重新选择MessageQueue，这样增大发送消息成功的可能性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隔多久重试？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;立即重试，中间没有单独的间隔时间。&lt;/p&gt;
&lt;h2 id=&quot;consumer消费重试&quot;&gt;consumer消费重试&lt;/h2&gt;
&lt;p&gt;消息处理失败之后，该消息会和其他正常的消息一样被broker处理，之所以能重试是因为consumer会把失败的消息发送回broker，broker对于重试的消息做一些特别的处理，供consumer再次发起消费 。&lt;/p&gt;
&lt;p&gt;消息重试的主要流程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;consumer消费失败，将消息发送回broker&lt;/li&gt;
&lt;li&gt;broker收到重试消息之后置换topic，存储消息&lt;/li&gt;
&lt;li&gt;consumer会拉取该topic对应的retryTopic的消息&lt;/li&gt;
&lt;li&gt;consumer拉取到retryTopic消息之后，置换到原始的topic，把消息交给listener消费&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;consumer发送重试消息给broker&quot;&gt;consumer发送重试消息给broker&lt;/h4&gt;
&lt;p&gt;以非顺序消息为例说明消息消费重试，首先，在消息消费失败后consumer会把消息发送回broker&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.ConsumeRequest#run&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
    &lt;span class=&quot;co&quot;&gt;// 省略部分代码...&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 这个status是listener返回的，用户可以指定status，如果业务逻辑代码消费消息失败后可以返回org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus#RECONSUME_LATER&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 来告诉RocketMQ需要重新消费&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 如果是多个消息，用户还可以指定从哪一个消息开始需要重新消费&lt;/span&gt;
        status = listener.&lt;span class=&quot;fu&quot;&gt;consumeMessage&lt;/span&gt;(Collections.&lt;span class=&quot;fu&quot;&gt;unmodifiableList&lt;/span&gt;(msgs), context);
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable e) {
        log.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;consumeMessage exception: {} Group: {} Msgs: {} MQ: {}&quot;&lt;/span&gt;,
            RemotingHelper.&lt;span class=&quot;fu&quot;&gt;exceptionSimpleDesc&lt;/span&gt;(e),
            ConsumeMessageConcurrentlyService.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;consumerGroup&lt;/span&gt;,
            msgs,
            messageQueue);
        hasException = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    }
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; consumeRT = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;() - beginTimestamp;
    
    &lt;span class=&quot;co&quot;&gt;// 根据不同的status判断是否成功&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == status) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (hasException) {
            returnType = ConsumeReturnType.&lt;span class=&quot;fu&quot;&gt;EXCEPTION&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            returnType = ConsumeReturnType.&lt;span class=&quot;fu&quot;&gt;RETURNNULL&lt;/span&gt;;
        }
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (consumeRT &amp;gt;= defaultMQPushConsumer.&lt;span class=&quot;fu&quot;&gt;getConsumeTimeout&lt;/span&gt;() * &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;) {
        returnType = ConsumeReturnType.&lt;span class=&quot;fu&quot;&gt;TIME_OUT&lt;/span&gt;;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ConsumeConcurrentlyStatus.&lt;span class=&quot;fu&quot;&gt;RECONSUME_LATER&lt;/span&gt; == status) {
        returnType = ConsumeReturnType.&lt;span class=&quot;fu&quot;&gt;FAILED&lt;/span&gt;;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ConsumeConcurrentlyStatus.&lt;span class=&quot;fu&quot;&gt;CONSUME_SUCCESS&lt;/span&gt; == status) {
        returnType = ConsumeReturnType.&lt;span class=&quot;fu&quot;&gt;SUCCESS&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ConsumeMessageConcurrentlyService.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQPushConsumerImpl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hasHook&lt;/span&gt;()) {
        consumeMessageContext.&lt;span class=&quot;fu&quot;&gt;getProps&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(MixAll.&lt;span class=&quot;fu&quot;&gt;CONSUME_CONTEXT_TYPE&lt;/span&gt;, returnType.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;());
    }

    &lt;span class=&quot;co&quot;&gt;// 用户返回null或者抛出未处理的异常，RocketMQ默认会重试&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == status) {
        log.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;consumeMessage return null, Group: {} Msgs: {} MQ: {}&quot;&lt;/span&gt;,
            ConsumeMessageConcurrentlyService.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;consumerGroup&lt;/span&gt;,
            msgs,
            messageQueue);
        status = ConsumeConcurrentlyStatus.&lt;span class=&quot;fu&quot;&gt;RECONSUME_LATER&lt;/span&gt;;
    }
    
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!processQueue.&lt;span class=&quot;fu&quot;&gt;isDropped&lt;/span&gt;()) {
        &lt;span class=&quot;co&quot;&gt;// 上面的结果在这个方法中具体处理&lt;/span&gt;
        ConsumeMessageConcurrentlyService.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;processConsumeResult&lt;/span&gt;(status, context, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;);
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        log.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;processQueue is dropped without process consume result. messageQueue={}, msgs={}&quot;&lt;/span&gt;, messageQueue, msgs);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这个方法区分出不同的消费结果：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus#CONSUME_SUCCESS：消费成功，如果多个消息，用户可以指定从哪一个消息开始重试&lt;/li&gt;
&lt;li&gt;org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus#RECONSUME_LATER：重试所有的消息&lt;/li&gt;
&lt;li&gt;用户返回status为RECONSUME_LATER&lt;/li&gt;
&lt;li&gt;用户返回null&lt;/li&gt;
&lt;li&gt;用户业务逻辑处理抛出异常&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在确定是否需要重试的时候，进一步处理哪些消息需要重试，也就是哪些消息会发送回broker&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;processConsumeResult&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ConsumeConcurrentlyStatus status,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ConsumeConcurrentlyContext context,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ConsumeRequest consumeRequest
) {
    &lt;span class=&quot;co&quot;&gt;// 从哪里开始重试&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// ackIndex默认是int最大值，除非用户自己指定了从哪些消息开始重试&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ackIndex = context.&lt;span class=&quot;fu&quot;&gt;getAckIndex&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;())
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (status) {
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; CONSUME_SUCCESS:
            &lt;span class=&quot;co&quot;&gt;// 即使是CONSUME_SUCCESS，也可能部分消息需要重试&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ackIndex &amp;gt;= consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;()) {
                ackIndex = consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            }
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ok = ackIndex + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; failed = consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() - ok;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getConsumerStatsManager&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;incConsumeOKTPS&lt;/span&gt;(consumerGroup, consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMessageQueue&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getTopic&lt;/span&gt;(), ok);
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getConsumerStatsManager&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;incConsumeFailedTPS&lt;/span&gt;(consumerGroup, consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMessageQueue&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getTopic&lt;/span&gt;(), failed);
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; RECONSUME_LATER:
            &lt;span class=&quot;co&quot;&gt;// 如果status是RECONSUME_LATER的时候会所有消息都会重试所以ackIndex设为-1&lt;/span&gt;
            ackIndex = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getConsumerStatsManager&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;incConsumeFailedTPS&lt;/span&gt;(consumerGroup, consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMessageQueue&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getTopic&lt;/span&gt;(),
                consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQPushConsumer&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getMessageModel&lt;/span&gt;()) {
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; BROADCASTING:
            &lt;span class=&quot;co&quot;&gt;// 广播的消息不会重试&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = ackIndex + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; i &amp;lt; consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;(); i++) {
                MessageExt msg = consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(i);
                log.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;BROADCASTING, the message consume failed, drop it, {}&quot;&lt;/span&gt;, msg.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;());
            }
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; CLUSTERING:
            &lt;span class=&quot;co&quot;&gt;// 集群消费的消息才会重试&lt;/span&gt;
            List&amp;lt;MessageExt&amp;gt; msgBackFailed = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;MessageExt&amp;gt;(consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = ackIndex + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; i &amp;lt; consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;(); i++) {
                MessageExt msg = consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(i);
                &lt;span class=&quot;co&quot;&gt;// 将消息发送回broker&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; result = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;sendMessageBack&lt;/span&gt;(msg, context);
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!result) {
                    msg.&lt;span class=&quot;fu&quot;&gt;setReconsumeTimes&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getReconsumeTimes&lt;/span&gt;() + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
                    msgBackFailed.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(msg);
                }
            }

            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!msgBackFailed.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
                consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;removeAll&lt;/span&gt;(msgBackFailed);
                &lt;span class=&quot;co&quot;&gt;// 如果上面发送失败后后面会重新发送&lt;/span&gt;

                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;submitConsumeRequestLater&lt;/span&gt;(msgBackFailed, consumeRequest.&lt;span class=&quot;fu&quot;&gt;getProcessQueue&lt;/span&gt;(), consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMessageQueue&lt;/span&gt;());
            }
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; offset = consumeRequest.&lt;span class=&quot;fu&quot;&gt;getProcessQueue&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;removeMessage&lt;/span&gt;(consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMsgs&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (offset &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !consumeRequest.&lt;span class=&quot;fu&quot;&gt;getProcessQueue&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;isDropped&lt;/span&gt;()) {
        &lt;span class=&quot;co&quot;&gt;// 更新消费进度&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQPushConsumerImpl&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getOffsetStore&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;updateOffset&lt;/span&gt;(consumeRequest.&lt;span class=&quot;fu&quot;&gt;getMessageQueue&lt;/span&gt;(), offset, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;consumer发送消费失败的消息和普通的producer发送消息的调用路径前面不太一样，其中关键的区别是下面的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl#sendMessageBack&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sendMessageBack&lt;/span&gt;(MessageExt msg, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; delayLevel, &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String brokerName)
    &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemotingException, MQBrokerException, InterruptedException, MQClientException {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        String brokerAddr = (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; != brokerName) ? &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mQClientFactory&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;findBrokerAddressInPublish&lt;/span&gt;(brokerName)
            : RemotingHelper.&lt;span class=&quot;fu&quot;&gt;parseSocketAddressAddr&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getStoreHost&lt;/span&gt;());
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mQClientFactory&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getMQClientAPIImpl&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;consumerSendMessageBack&lt;/span&gt;(brokerAddr, msg,
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQPushConsumer&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getConsumerGroup&lt;/span&gt;(), delayLevel, &lt;span class=&quot;dv&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;getMaxReconsumeTimes&lt;/span&gt;());
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        log.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;sendMessageBack Exception, &quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQPushConsumer&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getConsumerGroup&lt;/span&gt;(), e);
        &lt;span class=&quot;co&quot;&gt;// 如果消费失败的消息发送回broker失败了，会再重试一次，和try里面的方法不一样的地方是这里直接修改topic&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 为重试topic然后和producer发送消息的方法一样发送到broker&lt;/span&gt;
        Message newMsg = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Message&lt;/span&gt;(MixAll.&lt;span class=&quot;fu&quot;&gt;getRetryTopic&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;defaultMQPushConsumer&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getConsumerGroup&lt;/span&gt;()), msg.&lt;span class=&quot;fu&quot;&gt;getBody&lt;/span&gt;());

        String originMsgId = MessageAccessor.&lt;span class=&quot;fu&quot;&gt;getOriginMessageId&lt;/span&gt;(msg);
        MessageAccessor.&lt;span class=&quot;fu&quot;&gt;setOriginMessageId&lt;/span&gt;(newMsg, UtilAll.&lt;span class=&quot;fu&quot;&gt;isBlank&lt;/span&gt;(originMsgId) ? msg.&lt;span class=&quot;fu&quot;&gt;getMsgId&lt;/span&gt;() : originMsgId);

        newMsg.&lt;span class=&quot;fu&quot;&gt;setFlag&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getFlag&lt;/span&gt;());
        MessageAccessor.&lt;span class=&quot;fu&quot;&gt;setProperties&lt;/span&gt;(newMsg, msg.&lt;span class=&quot;fu&quot;&gt;getProperties&lt;/span&gt;());
        MessageAccessor.&lt;span class=&quot;fu&quot;&gt;putProperty&lt;/span&gt;(newMsg, MessageConst.&lt;span class=&quot;fu&quot;&gt;PROPERTY_RETRY_TOPIC&lt;/span&gt;, msg.&lt;span class=&quot;fu&quot;&gt;getTopic&lt;/span&gt;());
        MessageAccessor.&lt;span class=&quot;fu&quot;&gt;setReconsumeTime&lt;/span&gt;(newMsg, String.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getReconsumeTimes&lt;/span&gt;() + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;));
        MessageAccessor.&lt;span class=&quot;fu&quot;&gt;setMaxReconsumeTimes&lt;/span&gt;(newMsg, String.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getMaxReconsumeTimes&lt;/span&gt;()));
        newMsg.&lt;span class=&quot;fu&quot;&gt;setDelayTimeLevel&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; + msg.&lt;span class=&quot;fu&quot;&gt;getReconsumeTimes&lt;/span&gt;());

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mQClientFactory&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getDefaultMQProducer&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;send&lt;/span&gt;(newMsg);
    }
}

&lt;span class=&quot;co&quot;&gt;// org.apache.rocketmq.client.impl.MQClientAPIImpl#consumerSendMessageBack&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;consumerSendMessageBack&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String addr,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; MessageExt msg,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String consumerGroup,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; delayLevel,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; timeoutMillis,
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; maxConsumeRetryTimes
) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemotingException, MQBrokerException, InterruptedException {
    ConsumerSendMsgBackRequestHeader requestHeader = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConsumerSendMsgBackRequestHeader&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// 和普通的发送消息的RequestCode不一样，broker处理的方法也不一样&lt;/span&gt;
    RemotingCommand request = RemotingCommand.&lt;span class=&quot;fu&quot;&gt;createRequestCommand&lt;/span&gt;(RequestCode.&lt;span class=&quot;fu&quot;&gt;CONSUMER_SEND_MSG_BACK&lt;/span&gt;, requestHeader);

    requestHeader.&lt;span class=&quot;fu&quot;&gt;setGroup&lt;/span&gt;(consumerGroup);
    &lt;span class=&quot;co&quot;&gt;// 因为充实的消息被broker拿到后会修改topic，所以这里设置原始的topic&lt;/span&gt;
    requestHeader.&lt;span class=&quot;fu&quot;&gt;setOriginTopic&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getTopic&lt;/span&gt;());
    &lt;span class=&quot;co&quot;&gt;// broker会根据offset查询原始的消息&lt;/span&gt;
    requestHeader.&lt;span class=&quot;fu&quot;&gt;setOffset&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getCommitLogOffset&lt;/span&gt;());
    &lt;span class=&quot;co&quot;&gt;// 设置delayLevel，这个值决定了该消息是否会被延时消费、延时多久，&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 用户可以设置延时等级，默认是0，不延时(但是broker端会有逻辑：如果为0会加3)&lt;/span&gt;
    requestHeader.&lt;span class=&quot;fu&quot;&gt;setDelayLevel&lt;/span&gt;(delayLevel);
    &lt;span class=&quot;co&quot;&gt;// 设置最初的msgId&lt;/span&gt;
    requestHeader.&lt;span class=&quot;fu&quot;&gt;setOriginMsgId&lt;/span&gt;(msg.&lt;span class=&quot;fu&quot;&gt;getMsgId&lt;/span&gt;());
    &lt;span class=&quot;co&quot;&gt;// 设置最多被重试的次数，默认是16&lt;/span&gt;
    requestHeader.&lt;span class=&quot;fu&quot;&gt;setMaxReconsumeTimes&lt;/span&gt;(maxConsumeRetryTimes);

    RemotingCommand response = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remotingClient&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;invokeSync&lt;/span&gt;(MixAll.&lt;span class=&quot;fu&quot;&gt;brokerVIPChannel&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clientConfig&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isVipChannelEnabled&lt;/span&gt;(), addr),
        request, timeoutMillis);
    assert response != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (response.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;()) {
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; ResponseCode.&lt;span class=&quot;fu&quot;&gt;SUCCESS&lt;/span&gt;: {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MQBrokerException&lt;/span&gt;(response.&lt;span class=&quot;fu&quot;&gt;getCode&lt;/span&gt;(), response.&lt;span class=&quot;fu&quot;&gt;getRemark&lt;/span&gt;());
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发送重试的消息的时候有几个关键属性：&lt;/p&gt;
&lt;p&gt;originTopic：因为充实的消息被broker拿到后会修改topic，投递到所以需要保留一个原始的topic&lt;/p&gt;
&lt;p&gt;delayLevel：该消息是否会被延时消费&lt;/p&gt;
&lt;p&gt;maxReconsumeTimes：这个消息最多可以重试（消费）多少次&lt;/p&gt;
&lt;h4 id=&quot;broker接收重试消息&quot;&gt;broker接收重试消息&lt;/h4&gt;
&lt;p&gt;broker处理重试消息的方式和普通消息略有不同&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;检查是否配置了重试的消息队列，队列是否可写&lt;/li&gt;
&lt;li&gt;查询原始消息&lt;/li&gt;
&lt;li&gt;判断是否超过最大重试次数或者delayLevel小于0，消息不会被重试，而是会被投递到死信队列（不会再被消费），topic是%DLQ%+group&lt;/li&gt;
&lt;li&gt;如果delayLevel是0，0表示会被延时10s（如果是默认的延时等级）&lt;/li&gt;
&lt;li&gt;根据原始消息构造新消息保存，差异字段为：&lt;/li&gt;
&lt;li&gt;topic：%RETRY%+group&lt;/li&gt;
&lt;li&gt;reconsumeTimes：原来的reconsumeTimes + 1，也就是说每重试一次就加1&lt;/li&gt;
&lt;li&gt;queueId：使用新的topic的queueId&lt;/li&gt;
&lt;li&gt;新增properties：ORIGIN_MESSAGE_ID，RETRY_TOPIC（如果原来没有的话）&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 代码不再赘述，主要方法是&lt;/span&gt;
org.&lt;span class=&quot;fu&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rocketmq&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;broker&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;processor&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;SendMessageProcessor&lt;/span&gt;#consumerSendMsgBack&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;consumer拉取重试的消息&quot;&gt;consumer拉取重试的消息&lt;/h4&gt;
&lt;p&gt;按照正常的消息消费流程，消息保存在broker之后，consumer就可以拉取消费了，和普通消息不一样的是拉取消息的并不是consumer本来订阅的topic，而是%RETRY%+group。&lt;/p&gt;
&lt;p&gt;这里一直默认一开始retryTopic本身存在，这里说明一下retryTopic的来源，retryTopic创建的时机有以下几个：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;consumer启动后会向broker发送heartbeat数据，如果broker中还没有对应的SubscriptionGroupConfig&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;信息，会创建对应topic的retryTopic：org.apache.rocketmq.broker.processor.ClientManageProcessor#heartBeatbroker&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;broker在接收到consumer发送回来的重试的时候，如果还没有创建retryTopic的topicConfig配置，则会新建：org.apache.rocketmq.broker.processor.AbstractSendMessageProcessor#msgCheck&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;broker在处理consumer发送回来的重试消息的时候会创建retryTopic：org.apache.rocketmq.broker.processor.SendMessageProcessor#consumerSendMsgBack&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;broker创建retryTopic之后，和正常的topic配置一样同步到namesrv，然后consumer就可以从namesrv获取到retryTopic配置了。&lt;/p&gt;
&lt;p&gt;所以consumer会拉取%RETRY%+group对应的消息：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;consumer发送重试消息给broker以后，broker存储在新的retryTopic下，作为一个新的topic，consume会拉取这个新的topic的消息&lt;/li&gt;
&lt;li&gt;consumer拉取到这个retryTopic的消息之后再把topic换成原来的topic：org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService#resetRetryTopic，然后交给consume的listener处理&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;在业务处理出错的时候，常常需要重新处理，这个时候业务可以返回RECONSUME_LATER，RocketMQ就会重新将消息发送回broker，让consumer重试。而且，用户也可以根据实际情况，指定一些配置，比如：重试次数，是否延时消费等。但是需要注意的是如果业务抛出异常后无需重试，一定要catch住所有异常，避免把异常抛给RocketMQ，否则RocketMQ会认为该消息需要重试，当然也不能返回null。&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 14:26:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/9011446.html</dc:identifier>
</item>
<item>
<title>PHP内核之旅-2.SAPI中的Cli - jackson0714</title>
<link>http://www.cnblogs.com/jackson0714/p/php2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jackson0714/p/php2.html</guid>
<description>
&lt;p&gt;PHP 内核之旅系列&lt;/p&gt;
&lt;div class=&quot;contents&quot; readability=&quot;0.54838709677419&quot;&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/jackson0714/p/PHP_1.html&quot;&gt;PHP内核之旅-1.生命周期&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/jackson0714/p/php2.html&quot;&gt;PHP内核之旅-2.SAPI中的Cli&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;1.1 理解SAPI&lt;/h2&gt;
&lt;div class=&quot;note&quot; readability=&quot;20&quot;&gt;
&lt;p&gt;（1）SAPI是PHP框架的接口层。有很多种服务器的SAPI的实现，代码在sapi文件夹下。常见的接口抽象层实现有：cgi，apache2,cli,embed,fpm。&lt;/p&gt;
&lt;p&gt;（2）各个服务器遵循着相同的约定，每个服务器的SAPI实现都有一套自己的实现。由于很多操作都是相同的，所以有一部分使用的是默认方法。&lt;/p&gt;
&lt;p&gt;（3）SAPI类似面向对象中的模板方法模式的应用。 SAPI.c和SAPI.h文件所包含的一些函数就是模板方法模式中的抽象模板， 各个服务器对于sapi_module的定义及相关实现（cli,fpm,apache2）则是一个个具体的模板。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;sapi在源代码中的路径如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/414640/201805/414640-20180507220254461-2012743617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;1.2 调用SAPI实现的接口的示意图&lt;br/&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;上层调用可以是命令行窗口执行php脚本，然后到SAPI接口层，然后具体执行php脚本的是cli（Command Line Interface）接口的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/414640/201805/414640-20180508222202810-1487814072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们就以最简单的SAPI接口Cli来讲SAPI的实现。&lt;/p&gt;

&lt;p&gt;Cli即命令行接口，当在命令行窗口下执行php脚本时，则会调用Cli。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2.1 直接执行脚本文件&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
在命令行窗口执行test.php脚本
&lt;span&gt;$ php test.php&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以传递一些指定的参数，比如&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2.2 -r: 直接执行php代码&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
设置变量$a = 123，然后打印变量$a的值，并回车换行
&lt;span&gt;$ php -r '$a=123; echo $a . &quot;\r\n&quot;;'&lt;/span&gt;
打印结果：123
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;2.3 -v: 打印php的版本号&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;user@wt01084-048:~$ php -v&lt;/span&gt;
PHP 7.2.2-3+ubuntu14.04.1+deb.sury.org+1 (cli) (built: Feb  6 2018 16:35:00) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
    with Zend OPcache v7.2.2-3+ubuntu14.04.1+deb.sury.org+1, Copyright (c) 1999-2018, by Zend Technologies
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; Cli是单进程模式。处理完请求就关闭了。&lt;/p&gt;
&lt;p&gt;生命周期：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/414640/201805/414640-20180508203002620-773136656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;核心代码：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/414640/201805/414640-20180508203146636-1858558386.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;main函数位于文件：\sapi\cli\php_cli.c&lt;/p&gt;
&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;main()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.初始化变量&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    ...
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.定义sapi_module，它是记录SAPI信息的主要结构。
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 结构体类型为_sapi_module_struct，在\main\SAPI.h定义了结构体_sapi_module_struct类型。&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     sapi_module_struct *sapi_module = &amp;amp;&lt;span&gt;cli_sapi_module;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.初始化sapi_module&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     sapi_startup(sapi_module); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;sapi_startup函数位于\main\SAPI.c
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4.模块初始化阶段&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     sapi_module-&amp;gt;startup(sapi_module); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的startup在结构体_sapi_module_struct类型中有定义，
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;而Cli定义的cli_sapi_module的结构体中php_cli_startup指向了startup，所以其实就是调用了php_cli_startup
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;而php_cli_startup直接调用了php_module_startup()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.请求初始化及执行请求&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    do_cli();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.1 根据命令行指定的参数执行相应的操作，如果是查询系统信息之类的请求（-i、-m、-v）,则会跳过请求初始化阶段&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; ($args) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            ...
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.2 请求初始化&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        php_request_startup()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.3 执行脚本&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (behavior) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; PHP_MODE_STANDARD: &lt;span&gt;//&lt;/span&gt;&lt;span&gt;标准执行模式，执行脚本文件&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 php_execute_script(&amp;amp;&lt;span&gt;file_handle);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt; ...&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他执行模式&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.4.请求关闭阶段&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;out&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             php_request_shutdown((&lt;span&gt;void&lt;/span&gt; *) &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6.模块关闭阶段&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    php_module_shutdown();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    sapi_shutdown();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考资料：http://www.php-internals.com/&lt;/p&gt;
&lt;div id=&quot;MySignature&quot; readability=&quot;9.030303030303&quot;&gt;
&lt;p&gt;&lt;br/&gt;作　　者：&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/jackson0714/&quot; target=&quot;_blank&quot;&gt;Jackson0714&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;出　　处：&lt;a href=&quot;http://www.cnblogs.com/jackson0714/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/jackson0714/&lt;/a&gt;&lt;br/&gt;关于作者：专注于微软平台的项目开发。如有问题或建议，请多多赐教！&lt;br/&gt;版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;br/&gt;特此声明：所有评论和私信都会在第一时间回复。也欢迎园子的大大们指正错误，共同进步。或者&lt;a href=&quot;http://msg.cnblogs.com/msg/send/jackson0714&quot;&gt;直接私信&lt;/a&gt;我&lt;br/&gt;声援博主：如果您觉得文章对您有帮助，可以点击文章右下角&lt;strong&gt;&lt;span&gt;【&lt;a id=&quot;post-up&quot; onclick=&quot;votePost(5111347,'Digg')&quot; href=&quot;javascript:void(0);&quot;&gt;推荐&lt;/a&gt;】&lt;/span&gt;&lt;/strong&gt;一下。您的鼓励是作者坚持原创和持续写作的最大动力！&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 08 May 2018 14:20:00 +0000</pubDate>
<dc:creator>jackson0714</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jackson0714/p/php2.html</dc:identifier>
</item>
<item>
<title>测试驱动开发 TDD - 乐途</title>
<link>http://www.cnblogs.com/szlblog/p/9011338.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/szlblog/p/9011338.html</guid>
<description>&lt;h2&gt;&lt;strong&gt;&lt;span&gt;一、详解&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;TDD&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;1.1&lt;span&gt;、&lt;/span&gt;&lt;span&gt;TDD&lt;/span&gt;&lt;span&gt;概念 ：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;Test Drived Develop&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;测试驱动开发是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;敏捷开发中&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的一项核心实践和&lt;/span&gt;&lt;strong&gt;&lt;span&gt;技术&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;也是一种方法论&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;TDD&lt;span&gt;的原理是在开发功能代码之前，编写单元测试用例代码，测试代码决定先编写什么产品代码。&lt;/span&gt;&lt;span&gt;TDD&lt;/span&gt;&lt;span&gt;虽是敏捷方法的核心实践，但不只是适用于&lt;/span&gt;&lt;span&gt;XP&lt;/span&gt;&lt;span&gt;，同样可以适用于其他开发方法和过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;TDD&lt;/strong&gt;&lt;span&gt;的基本思路就是通过&lt;/span&gt;&lt;strong&gt;&lt;span&gt;测试来推动整个开发的进行&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，但测试驱动开发并不只是单纯的测试工作，而是把&lt;/span&gt;&lt;strong&gt;&lt;span&gt;需求分析，设计，质量控制量化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的过成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;TDD&lt;span&gt;的重要目的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;不是仅仅测试软件，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;测试工作保证代码质量&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;只是其中一部分，而且&lt;/span&gt;&lt;strong&gt;&lt;span&gt;是开发过程中帮助客户和程序员去除模棱两可的需求&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;TDD&lt;span&gt;首先考虑使用需求（对象、接口、功能、过程、等）&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.2 &lt;span&gt;测试驱动开发的优缺点&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;  TDD:&lt;span&gt;测试驱动开发的优点：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再任意一个开发节点都可以拿出一个可以使用，含少量的&lt;/span&gt;BUG &lt;span&gt;并具有一定的功能能够发布的产品。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TDD&lt;span&gt;：测试驱动开发的缺点：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;缺点：增加了代码工作量。测试代码几乎是系统代码的两倍或更多，但是同时节省了程序调试的时间以及挑错的时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt; TDD=TFD+Refactoring  &lt;/strong&gt;    &lt;span&gt;第一次测试开发加上重构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      &lt;strong&gt;TDD:Test First Development  &lt;span&gt;首次测试开发&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;1.3&lt;span&gt;、&lt;/span&gt;&lt;span&gt;TDD&lt;/span&gt;&lt;span&gt;原则&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1.&lt;span&gt;独立测试：不同代码的测试应该相互独立，一个类对应一个测试类（对于&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;代码或&lt;/span&gt;&lt;span&gt;C++&lt;/span&gt;&lt;span&gt;全局函数，则一个文件对应一个测试文件），一个函数对应一个测试函数用例也应该各自独立，每个用例不能使用其他用例的结果数据，结果也不能依赖于例执行顺序。一个角色开发过程中包含多种工作，（编写测试代码、编写产品代码、代码重构 等。做不同工作的时候，应专注于当前要做的事情，不考虑其他，比如测试的时候就做测试）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;span&gt;测试列表：代码的功能点很多，不可能是所有的需求都是很明确的，而是陆陆续续的出现新的需求，在进行的任何阶段时想添加功能时，应把相关的功能点 添加到测试列表中，在继续改阶段的工作，以避免疏漏。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;span&gt;测试驱动：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;及利用测试来驱动开发，是&lt;/span&gt;TDD&lt;span&gt;的核心。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;要实现某个功能，要编写某个类或某个函数，应该先编写测试代码，明确这个类、这个函数如何使用，如何测试，然后对其进行设计、编码。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;span&gt;先写断言：编写测试代码时，应该首先编写判断代码功能的断言语句，然后编写必要的辅助语句。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;能应该比较单纯，每个类、每个函数、只做自己的事情，不掺杂然和功能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;span&gt;及时重构：对结构不合理，重复等不好的代码，在测试通过后，应及时进行重构。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;span&gt;小步前进：软件开发是复杂性非常高的工作，小步前进是降低复杂性的好办法。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;1.4&lt;span&gt;、&lt;/span&gt;&lt;span&gt;TDD&lt;/span&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;测试驱动开发：既可以测试框架的性能、也可以测出业务的合理性，也可以测试出代码的问题、虽然开发时间会延后、但是可以提高客户的满意度，上线后系统比较稳定。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;一个软件的产出，需要具有详细的设计：从开始的竞标，到立项到设计，开发，交付任何一个环节都不可缺少。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;举例描述：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;某公司竞标后拿下了这样一个工程，在两座山之间建造一座大桥，产品经理把业务具体分析过后交给了公司的设计师（架构师）设计师根据客户对产品的质量、美观、使用性、进行架构设计：产出物如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;            &lt;span&gt;架构师设计出有几个桥墩沉重力度，桥面宽度高度，形状。。。等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201805/1027558-20180508215623237-621017504.png&quot; alt=&quot;&quot; width=&quot;695&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样整体架构就出现了，高级工程师根据架构师的架构进行小的设计比如说用什么样的材料怎么做桥于桥之间的关联等，（在开发来说就是用什么接口，接口怎么制定，怎么保证安全性）剩下的就交给中级工程师了，等到开发完后进行测试。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;      &lt;span&gt;上面简单的描述是一般产品的产出流程，但是一般的流程去做这样一个特殊的工程显然不够的，比如说怎么知道这个框架是否安全，现在的说服力一般都体现在数字和具体的有说服力的案例上面，但是没有案例的话，就需要我们队框架进行测试了，在这个没有真正做施工之前，框架设计出之后进行的测试，大家就可以理解成&lt;/span&gt;TDD&lt;span&gt;测试了，这时候的&lt;/span&gt;&lt;span&gt;TDD&lt;/span&gt;&lt;span&gt;很显然偏向于架构的设计。再往小点的方面来说比如测试接口的时候，其实也是设计接口，&lt;/span&gt;&lt;strong&gt;TDD&lt;span&gt;偏向于设计，而不是很多人认为的测试。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;利用&lt;/span&gt;TDD &lt;span&gt;测试驱动 举一个例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;业务场景：用户下订单，订单类型&lt;/span&gt;“普通订单、批量订单、个人订单” 判断用户是是否具有下此类订单的权限。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果所根据这个业务让咱们设计一下咱们肯定都没有问题：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库创建脚本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_15d60397-859d-4e20-9151-bf5898cf6c3e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_15d60397-859d-4e20-9151-bf5898cf6c3e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_15d60397-859d-4e20-9151-bf5898cf6c3e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
CREATE TABLE  OederTable --&lt;span&gt;订单表
(
 ID INT PRIMARY KEY IDENTITY (&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;), --&lt;span&gt; ID
 OredrNo varchar(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;),  --&lt;span&gt;订单编号
 OrderTypeNo varchar(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;), --&lt;span&gt;订单类型编号
 CreateBy varchar(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;)--&lt;span&gt;创建人
)

CREATE TABLE  UserRights &lt;/span&gt;--&lt;span&gt;用户权限表
(
 OrderTypeNo varchar(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;),--&lt;span&gt;订单类型编号
 UserID INT  &lt;/span&gt;--&lt;span&gt;用户ID
)


CREATE TABLE  UserTable &lt;/span&gt;--&lt;span&gt;用户表
(
 ID INT PRIMARY KEY IDENTITY (&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;), --&lt;span&gt;ID
 UserName varchar(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;), --&lt;span&gt;用户名
 UserPwd varchar(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;) --&lt;span&gt;用户密码
)

CREATE TABLE  TypeTable &lt;/span&gt;--&lt;span&gt;订单类型表
(
 OrderTypeNo varchar(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;),--&lt;span&gt;订单类型编号
 OrderTypeName varchar(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;)--&lt;span&gt;订单类型名称
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 填充数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201805/1027558-20180508215740528-1533924400.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实现测试业务流程代码具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201805/1027558-20180508215843300-1753269394.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码中映射了四个实体类，一个订单操作类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;订单操作类具体代码如下（代码中并没有具体实现主要以意会为主（&lt;/span&gt;~o~&lt;span&gt;））&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201805/1027558-20180508215903305-654369477.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6db93823-11f0-4111-a9dc-f8be9d844ca3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6db93823-11f0-4111-a9dc-f8be9d844ca3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6db93823-11f0-4111-a9dc-f8be9d844ca3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试代码&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestMethod1()
        {
            OrderOperation OrderOperation &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OrderOperation();
            OederTable Oeder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OederTable();
            Oeder.OredrNo &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            Oeder.OrderTypeNo &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;普通订单权限&lt;/span&gt;
            Oeder.CreateBy = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.验证用户是否存在
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.验证用户是否是否具有下订单的权限
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.保存入库&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***********假设用户表为空时咱们已经通过用户名密码查询过并且存在该用户************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            UserTable user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserTable();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (user != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过UserID查询权限是否有下普通订单的权限    Oeder.OrderTypeNo = &quot;1&quot;; 普通订单权限&lt;/span&gt;
                UserRights Rights = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserRights();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Rights != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加入库&lt;/span&gt;
&lt;span&gt;                    OrderOperation.add(Oeder);
                }
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其实不管用任何办法，只要结果符合描述就行，&lt;/span&gt;HARD Code 也是一个很好的方法，&lt;span&gt;我们现在关注点&lt;/span&gt;&lt;span&gt;应该放在&lt;/span&gt;&lt;span&gt;业务流程的正确性，&lt;/span&gt;&lt;span&gt;数据从哪里来不重要。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果添加成功最好有一个返回值能体业务的正确性，比如添加成功后返回&lt;/span&gt;“OK”&lt;/p&gt;
&lt;p&gt;以上描述有部分来自于互联网：&lt;/p&gt;

</description>
<pubDate>Tue, 08 May 2018 14:02:00 +0000</pubDate>
<dc:creator>乐途</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/szlblog/p/9011338.html</dc:identifier>
</item>
<item>
<title>spirng底层实现原理 - 程序谈人生</title>
<link>http://www.cnblogs.com/shuai-server/p/9011334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shuai-server/p/9011334.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　什么是框架？框架解决的是什么问题？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　编程有一个准则，Don't Repeat Yourself(不要重复你的代码),所以我们会将重复的代码抽取出来，封装到方法中；如果封装的方法过多，将将这些方法封装成工具类；如果工具类形成了规模，就整合成类库。类库更加系统，功能更加齐全。既然别人已经造好了轮子，我们为什么还有闭门造车呢，直接把造好的轮子拿来用就行了。这就有了框架的诞生。　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　框架就是一个半成品组件，将底层的代码，重复的代码封装，暴露接口给用户使用。让用户只关心业务逻辑功能，并不需要关注底层代码的实现，在一定程度上简化了开发，提高软件开发的效率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一：首先了解Spring的架构图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508201607696-446054589.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 图中可以看出，spring的三个核心组件是：core bean，context，下面就每一个组件进行详细的介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二：那么spring到底解决的是什么问题呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　spring解决的是将对象之间的依赖关系交由配置文件统一管理，也就是依赖注入机制，注入关系在IOC容器中管理。IOC又是什么呢？就是bean包装的对象。spring就是通过bean完成对这些对象的管理以及一些额外的功能目的。spring的设计策略和Java中的OOP相似，但是较之复杂的多。首先创建一系列数据结构，然后根据数据结构设计生存环境，让数据结构在生存环境中不停的运动，在运动的过程中与环境或者其他个体完成信息交换。其他的框架用到的都是这样的设计准则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三：各个组件之间如何协同工作？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Bean包装的是Object对象，而Object对象中保存的是数据，然后Context为这些数据提供生存环境。对于Context来说就是发现每个Bean之间的关系，并且建立和维护这种关系。所以说Context就是Bean对象的集合，这个集合就是IOC容器，一旦建立IOC容器，就可以让spring为我们工作了。而Core就是完成这一系列工作（查找bean对象之间的关系，然后建立并进行维护）所需要的工具。简单说就是Util&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四：下面详细介绍各个组件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、Bean组件：bean组件是位于spring的Beans包下面。完成的主要功能是：Bean定义。Bean解析，Bean的创建。我们只需要关注Bean的创建，另外两个spring框架已经自动完成了。Bean的创建是典型的工厂模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508204550062-1891672189.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;Bean的定义的类层次结构图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508205021370-1812736982.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Bean的解析过程十分复杂。由上面的类层次结构图也可以看出，同时每个bean解析也被划分的十分细。bean的解析就是spring配置文件的解析。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508205248171-509751004.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 2.Context组件：主要是提供Bean的运行环境。保证各个对象之间的状态。作为Spring容器的IOC容器，整合了spring的大部分功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　ApplicationContext是Context的顶级父类。要完成的工作：（1）表示一个应用环境 （2）调用BeanFactory创建Bean对象（3）保存对象关系表（4）捕获各种事件  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ApplicationContext的子类主要包括两个方面。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;ConfigurableApplicationContext:表示可以修改Context，在创建Context对象时，用户可以动态的修改或者添加配置文件的信息。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;WebApplicationContext：可以直接访问ServletContext对象，是专门为web准备的Context&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;.&lt;span&gt;Core组件：Core作为spring的核心，一个重要组成部分就是定义了资源的访问方式。巧妙之处就在于：将所有的资源抽象成一个接口的设计模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508211007451-1367908008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 五：spring之IOC容器的实现过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IOC容器中作为管理bean关系的容器，到底是如何工作的呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.创建BeanFactory工厂 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508212929615-1020302675.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.注册感兴趣的事件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.创建Bean实例对象 是在finishBeanFactoryInitiallization中开始的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508213157800-384566140.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508213802680-768116832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4.触发被监听的事件&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 六：spring之AOP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;spring的AOP的实现依赖动态代理技术，首先介绍动态代理，创建代理对象的源码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508214410944-247448928.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;spring中的Aop到底如何实现的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;依赖动态代理，代理的目的是调用目标方法是可以转为调用InvokeHandler中的invoke方法，spring的aop遵循aop联盟，在此基础上有进行了拓展，增加了pointcut和advisor等一些接口使得使用更加灵活。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508215031184-1838919666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;spring中代理模式的使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381135/201805/1381135-20180508215746108-451179668.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　关于spring的底层实现原理就更新到这里。错误的地方请多指正。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 08 May 2018 14:00:00 +0000</pubDate>
<dc:creator>程序谈人生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shuai-server/p/9011334.html</dc:identifier>
</item>
<item>
<title>进程、应用程序域，线程和上下文之间的关系 - 天街小雨&amp;</title>
<link>http://www.cnblogs.com/codersun/p/9011312.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codersun/p/9011312.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在处理多线程程序之前，还是需要复习一些基础知识的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/347600/201305/21092536-35fc43469d1540158c5b36b0a929cb0b.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;进程&quot;&gt;进程&lt;/h2&gt;
&lt;p&gt;简单来说，进程是一个运行的程序，用来描述一组资源（如外部代码库和主线程）和程序运行所必须的内存分配。对于每一个被加载到内存的*.exe，在他的生命周期中操作系统会为之创建一个单独且隔离的进程。&lt;/p&gt;
&lt;p&gt;由于一个进程的失败不会影响其他进程，这种隔离的方式，运行库环境会更加健壮和稳定。&lt;/p&gt;
&lt;h2 id=&quot;应用程序域&quot;&gt;应用程序域&lt;/h2&gt;
&lt;p&gt;在.net 平台下，可执行程序并没有直接加载在windows进程中，而传统的非托管程序是直接承载的。实际上，.net可执行程序承载在进程的一个逻辑分区中，术语叫应用程序域(APPDomain)。可见，一个进程可以包含多个应用程序域，这种对传统的windwos进程进一步分区具有以下几个好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;应用程序域是.net 平台操作系统独立性的关键特性。这种逻辑分区将不同的操作系统表现加载可执行程序的差异抽象化了。&lt;/li&gt;
&lt;li&gt;和进程相比，AppDomian的cpu和内存占用小得多。因此clr加载和卸载程序比起来完成的进程要快得多。&lt;/li&gt;
&lt;li&gt;提供了深度隔离，如果进程中的一个应用程序域失败了，不会影响其他。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当一个程序集同时被多个应用程序域调用时，会出现两种情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一种情况：CLR分别为不同的应用程序域加载此程序集。&lt;/li&gt;
&lt;li&gt;第二种情况：CLR把此程序集加载到所有的应用程序域之外，并实现程序集共享，此情况比较特殊，被称作为Domain Neutral。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在应用程序域之间的数据时相互独立的，当需要在其他AppDomain当中执行当前AppDomain中的程序集代码时，可以使用CrossAppDomainDelegate委托。把CrocessAppDomainDelegate委托绑定方法以后，通过AppDomain的DoCallBack方法即可执行委托。&lt;/p&gt;
&lt;h2 id=&quot;上下文&quot;&gt;上下文&lt;/h2&gt;
&lt;p&gt;应用程序域是进程中承载程序集的路基分区，在应用程序域当中，存在更细粒度的用于承载.Net对象的实体，用于承载.Net实体的东西就叫.Net上下文Context。&lt;br/&gt;所有的.Net对象都存在于上下文当中，每个AppDomain当中至少存在一个默认上下文(context 0)。&lt;/p&gt;
&lt;p&gt;　　&lt;br/&gt;一般不需要指定特定上下文的对象被称为上下文灵活对象(context-agile),建立此对象不需要特定的操作，只需要由CLR自行管理，一般这些对象都会被建立在默认上下文当中。&lt;/p&gt;
&lt;h2 id=&quot;线程&quot;&gt;线程&lt;/h2&gt;
&lt;p&gt;线程存在于进程当中，它在不同的时刻可以运行于多个不同的AppDomain当中。它是进程中的基本执行单元（由此可以理解web服务器的异步不能提高单次访问速度，但是可以提高服务器的吞吐量）&lt;/p&gt;
&lt;p&gt;在进程入口执行的第一个线程被视为这个进程的主线程。在.Net应用程序中，都是以Main()方法作为入口的，当调用此方法时，系统就会自动创建一个主线程。线程主要是由CPU寄存器、调用栈和线程本地存储器(TLS)组成的。CPU寄存器主要记录当前所执行线程的状态，调用栈主要用于维护线程所调用到的内存与数据，TLS主要用于存放线程的状态信息。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;　　进程（Process）、线程（Thread）、应用程序域（AppDomain）、上下文（Context）的关系如图5.0，一个进程内可以包括多个应用程序域，也有包括多个线程，线程也可以穿梭于多个应用程序域当中。但在同一个时刻，线程只会处于一个应用程序域内。线程也能穿梭于多个上下文当中，进行对象的调用。&lt;/p&gt;
&lt;p&gt;虽然进程、应用程序域与上下文在平常的开发中并非经常用到，但深入地了解三者的关系，熟悉其操作方式对合理利用系统的资源，提高系统的效率是非常有意义的。&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 13:56:00 +0000</pubDate>
<dc:creator>天街小雨&amp;amp;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codersun/p/9011312.html</dc:identifier>
</item>
<item>
<title>人脸姿态校正算法 附完整C++示例代码 - cpuimage</title>
<link>http://www.cnblogs.com/cpuimage/p/9011130.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cpuimage/p/9011130.html</guid>
<description>&lt;p&gt;在一些特殊情况下，经常需要依据图像中的人脸，对图片进行倾斜矫正。&lt;/p&gt;

&lt;p&gt;例如拍照角度幅度过大之类的情况，而进行人工矫正确实很叫人头大。&lt;/p&gt;
&lt;p&gt;那是不是可以有一种算法，可以根据人脸的信息对图片进行角度的修复呢？&lt;/p&gt;
&lt;p&gt;答案肯定是确认的。&lt;/p&gt;

&lt;p&gt;再次例如，想要通过人脸的特征对人物的表情和情绪进行精准判断，&lt;/p&gt;
&lt;p&gt;那么这个时候如果能确保人脸没有发现严重倾斜，无疑对准确率判断有一定的帮助。&lt;/p&gt;

&lt;p&gt;那么假如一张图片只有一个人脸，其实很好判断，通过眼睛的位置的坐标，根据两眼的直线角度，&lt;/p&gt;
&lt;p&gt;就可以计算出修正的角度。&lt;/p&gt;
&lt;p&gt;然后旋转图片到对应角度即可。&lt;/p&gt;
&lt;p&gt;但是如果，一张图片存在多张人脸的时候该怎么办？&lt;/p&gt;
&lt;p&gt;有两种方法：&lt;/p&gt;
&lt;p&gt;1.找到最大的那个人脸，以它为基准&lt;/p&gt;
&lt;p&gt;2.找到频次最高的人脸角度，以频次为基准&lt;/p&gt;
&lt;p&gt;当然在大多数情况，方法1是比较合理的。&lt;/p&gt;
&lt;p&gt;这两个种情况就留给各位看官去实现了。&lt;/p&gt;
&lt;p&gt;本人仅仅考虑一张人脸的情况，演示如何实现该功能。&lt;/p&gt;
&lt;p&gt;倾斜角度计算的代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;float&lt;/span&gt; diffEyeX = right_eye_x -&lt;span&gt; left_eye_x;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; diffEyeY = right_eye_y -&lt;span&gt; left_eye_y;

    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; fAngle;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; M_PI = &lt;span&gt;3.1415926535897932384626433832795f&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fabs(diffEyeX) &amp;lt; &lt;span&gt;0.0000001f&lt;/span&gt;&lt;span&gt;)
        fAngle &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;.f;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        fAngle &lt;/span&gt;= atanf(diffEyeY / diffEyeX) * &lt;span&gt;180.0f&lt;/span&gt; / M_PI;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果看不明白，需要好好补一下高中数学基础。&lt;/p&gt;
&lt;p&gt;为了节约时间，直接复用《&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/cpuimage/p/9000203.html&quot;&gt;自动红眼移除算法 附c++完整代码&lt;/a&gt;》的代码。&lt;/p&gt;
&lt;p&gt;增加函数如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; RotateBilinear(unsigned &lt;span&gt;char&lt;/span&gt; *sourceData, &lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt; height, &lt;span&gt;int&lt;/span&gt; Channels, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; RowBytes,
                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *destinationData, &lt;span&gt;int&lt;/span&gt; newWidth, &lt;span&gt;int&lt;/span&gt; newHeight, &lt;span&gt;float&lt;/span&gt; angle, &lt;span&gt;bool&lt;/span&gt; keepSize = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; fillColorR = &lt;span&gt;255&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; fillColorG = &lt;span&gt;255&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; fillColorB = &lt;span&gt;255&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sourceData == NULL || destinationData == NULL) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; oldXradius = (&lt;span&gt;float&lt;/span&gt;) (width - &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; oldYradius = (&lt;span&gt;float&lt;/span&gt;) (height - &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; newXradius = (&lt;span&gt;float&lt;/span&gt;) (newWidth - &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; newYradius = (&lt;span&gt;float&lt;/span&gt;) (newHeight - &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; MPI = &lt;span&gt;3.14159265358979323846&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; angleRad = -angle * MPI / &lt;span&gt;180.0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; angleCos = (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;) cos(angleRad);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; angleSin = (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;) sin(angleRad);

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; srcStride =&lt;span&gt; RowBytes;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; dstOffset = newWidth * Channels - ((Channels == &lt;span&gt;1&lt;/span&gt;) ? newWidth : newWidth *&lt;span&gt; Channels);

    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; fillR =&lt;span&gt; fillColorR;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; fillG =&lt;span&gt; fillColorG;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; fillB =&lt;span&gt; fillColorB;

    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *src = (unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;) sourceData;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *dst = (unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;) destinationData;

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ymax = height - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xmax = width - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Channels == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; cy = -&lt;span&gt;newYradius;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;; y &amp;lt; newHeight; y++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; tx = angleSin * cy +&lt;span&gt; oldXradius;
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ty = angleCos * cy +&lt;span&gt; oldYradius;

            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; cx = -&lt;span&gt;newXradius;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;; x &amp;lt; newWidth; x++, dst++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ox = tx + angleCos *&lt;span&gt; cx;
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; oy = ty - angleSin *&lt;span&gt; cx;

                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ox1 = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) ox;
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oy1 = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) oy;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((ox1 &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (oy1 &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (ox1 &amp;gt;= width) || (oy1 &amp;gt;=&lt;span&gt; height)) {
                    &lt;/span&gt;*dst =&lt;span&gt; fillG;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ox2 = (ox1 == xmax) ? ox1 : ox1 + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oy2 = (oy1 == ymax) ? oy1 : oy1 + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dx1 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((dx1 = ox - (&lt;span&gt;float&lt;/span&gt;) ox1) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        dx1 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dx2 = &lt;span&gt;1.0f&lt;/span&gt; -&lt;span&gt; dx1;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dy1 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((dy1 = oy - (&lt;span&gt;float&lt;/span&gt;) oy1) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        dy1 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dy2 = &lt;span&gt;1.0f&lt;/span&gt; -&lt;span&gt; dy1;

                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p1 = src + oy1 *&lt;span&gt; srcStride;
                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p2 = src + oy2 *&lt;span&gt; srcStride;

                    &lt;/span&gt;*dst = (unsigned &lt;span&gt;char&lt;/span&gt;) (dy2 * (dx2 * p1[ox1] + dx1 * p1[ox2]) +&lt;span&gt;
                                            dy1 &lt;/span&gt;* (dx2 * p2[ox1] + dx1 *&lt;span&gt; p2[ox2]));
                }
                cx&lt;/span&gt;++&lt;span&gt;;
            }
            cy&lt;/span&gt;++&lt;span&gt;;
            dst &lt;/span&gt;+=&lt;span&gt; dstOffset;
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (Channels == &lt;span&gt;3&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; cy = -&lt;span&gt;newYradius;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;; y &amp;lt; newHeight; y++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; tx = angleSin * cy +&lt;span&gt; oldXradius;
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ty = angleCos * cy +&lt;span&gt; oldYradius;

            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; cx = -&lt;span&gt;newXradius;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;; x &amp;lt; newWidth; x++, dst +=&lt;span&gt; Channels) {
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ox = tx + angleCos *&lt;span&gt; cx;
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; oy = ty - angleSin *&lt;span&gt; cx;

                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ox1 = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) ox;
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oy1 = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) oy;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((ox1 &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (oy1 &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (ox1 &amp;gt;= width) || (oy1 &amp;gt;=&lt;span&gt; height)) {
                    dst[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; fillR;
                    dst[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; fillG;
                    dst[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; fillB;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ox2 = (ox1 == xmax) ? ox1 : ox1 + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oy2 = (oy1 == ymax) ? oy1 : oy1 + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dx1 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((dx1 = ox - (&lt;span&gt;float&lt;/span&gt;) ox1) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        dx1 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dx2 = &lt;span&gt;1.0f&lt;/span&gt; -&lt;span&gt; dx1;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dy1 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((dy1 = oy - (&lt;span&gt;float&lt;/span&gt;) oy1) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        dy1 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dy2 = &lt;span&gt;1.0f&lt;/span&gt; -&lt;span&gt; dy1;

                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p1 = src + oy1 *&lt;span&gt; srcStride;
                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p2 =&lt;span&gt; p1;
                    p1 &lt;/span&gt;+= ox1 *&lt;span&gt; Channels;
                    p2 &lt;/span&gt;+= ox2 *&lt;span&gt; Channels;

                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p3 = src + oy2 *&lt;span&gt; srcStride;
                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p4 =&lt;span&gt; p3;
                    p3 &lt;/span&gt;+= ox1 *&lt;span&gt; Channels;
                    p4 &lt;/span&gt;+= ox2 *&lt;span&gt; Channels;

                    dst[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;) (
                            dy2 &lt;/span&gt;* (dx2 * p1[&lt;span&gt;0&lt;/span&gt;] + dx1 * p2[&lt;span&gt;0&lt;/span&gt;]) +&lt;span&gt;
                            dy1 &lt;/span&gt;* (dx2 * p3[&lt;span&gt;0&lt;/span&gt;] + dx1 * p4[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]));

                    dst[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;) (
                            dy2 &lt;/span&gt;* (dx2 * p1[&lt;span&gt;1&lt;/span&gt;] + dx1 * p2[&lt;span&gt;1&lt;/span&gt;]) +&lt;span&gt;
                            dy1 &lt;/span&gt;* (dx2 * p3[&lt;span&gt;1&lt;/span&gt;] + dx1 * p4[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]));

                    dst[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;) (
                            dy2 &lt;/span&gt;* (dx2 * p1[&lt;span&gt;2&lt;/span&gt;] + dx1 * p2[&lt;span&gt;2&lt;/span&gt;]) +&lt;span&gt;
                            dy1 &lt;/span&gt;* (dx2 * p3[&lt;span&gt;2&lt;/span&gt;] + dx1 * p4[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]));
                }
                cx&lt;/span&gt;++&lt;span&gt;;
            }
            cy&lt;/span&gt;++&lt;span&gt;;
            dst &lt;/span&gt;+=&lt;span&gt; dstOffset;
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (Channels == &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; cy = -&lt;span&gt;newYradius;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;; y &amp;lt; newHeight; y++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; tx = angleSin * cy +&lt;span&gt; oldXradius;
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ty = angleCos * cy +&lt;span&gt; oldYradius;

            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; cx = -&lt;span&gt;newXradius;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;; x &amp;lt; newWidth; x++, dst +=&lt;span&gt; Channels) {
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; ox = tx + angleCos *&lt;span&gt; cx;
                &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; oy = ty - angleSin *&lt;span&gt; cx;

                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ox1 = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) ox;
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oy1 = (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) oy;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((ox1 &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (oy1 &amp;lt; &lt;span&gt;0&lt;/span&gt;) || (ox1 &amp;gt;= width) || (oy1 &amp;gt;=&lt;span&gt; height)) {
                    dst[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; fillR;
                    dst[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; fillG;
                    dst[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; fillB;
                    dst[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;255&lt;/span&gt;&lt;span&gt;;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ox2 = (ox1 == xmax) ? ox1 : ox1 + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oy2 = (oy1 == ymax) ? oy1 : oy1 + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dx1 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((dx1 = ox - (&lt;span&gt;float&lt;/span&gt;) ox1) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        dx1 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dx2 = &lt;span&gt;1.0f&lt;/span&gt; -&lt;span&gt; dx1;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dy1 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((dy1 = oy - (&lt;span&gt;float&lt;/span&gt;) oy1) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        dy1 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dy2 = &lt;span&gt;1.0f&lt;/span&gt; -&lt;span&gt; dy1;

                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p1 = src + oy1 *&lt;span&gt; srcStride;
                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p2 =&lt;span&gt; p1;
                    p1 &lt;/span&gt;+= ox1 *&lt;span&gt; Channels;
                    p2 &lt;/span&gt;+= ox2 *&lt;span&gt; Channels;

                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p3 = src + oy2 *&lt;span&gt; srcStride;
                    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *p4 =&lt;span&gt; p3;
                    p3 &lt;/span&gt;+= ox1 *&lt;span&gt; Channels;
                    p4 &lt;/span&gt;+= ox2 *&lt;span&gt; Channels;

                    dst[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;) (
                            dy2 &lt;/span&gt;* (dx2 * p1[&lt;span&gt;0&lt;/span&gt;] + dx1 * p2[&lt;span&gt;0&lt;/span&gt;]) +&lt;span&gt;
                            dy1 &lt;/span&gt;* (dx2 * p3[&lt;span&gt;0&lt;/span&gt;] + dx1 * p4[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]));

                    dst[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;) (
                            dy2 &lt;/span&gt;* (dx2 * p1[&lt;span&gt;1&lt;/span&gt;] + dx1 * p2[&lt;span&gt;1&lt;/span&gt;]) +&lt;span&gt;
                            dy1 &lt;/span&gt;* (dx2 * p3[&lt;span&gt;1&lt;/span&gt;] + dx1 * p4[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]));

                    dst[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = (unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;) (
                            dy2 &lt;/span&gt;* (dx2 * p1[&lt;span&gt;2&lt;/span&gt;] + dx1 * p2[&lt;span&gt;2&lt;/span&gt;]) +&lt;span&gt;
                            dy1 &lt;/span&gt;* (dx2 * p3[&lt;span&gt;2&lt;/span&gt;] + dx1 * p4[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]));
                    dst[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;255&lt;/span&gt;&lt;span&gt;;
                }
                cx&lt;/span&gt;++&lt;span&gt;;
            }
            cy&lt;/span&gt;++&lt;span&gt;;
            dst &lt;/span&gt;+=&lt;span&gt; dstOffset;
        }
    }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; facialPoseCorrection(unsigned &lt;span&gt;char&lt;/span&gt; *inputImage, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt; Channels, &lt;span&gt;int&lt;/span&gt; left_eye_x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; left_eye_y,
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; right_eye_x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; right_eye_y) {
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; diffEyeX = right_eye_x -&lt;span&gt; left_eye_x;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; diffEyeY = right_eye_y -&lt;span&gt; left_eye_y;

    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; fAngle;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; M_PI = &lt;span&gt;3.1415926535897932384626433832795f&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fabs(diffEyeX) &amp;lt; &lt;span&gt;0.0000001f&lt;/span&gt;&lt;span&gt;)
        fAngle &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;.f;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        fAngle &lt;/span&gt;= atanf(diffEyeY / diffEyeX) * &lt;span&gt;180.0f&lt;/span&gt; /&lt;span&gt; M_PI;
    size_t numberOfPixels &lt;/span&gt;= Width * Height * Channels * &lt;span&gt;sizeof&lt;/span&gt;(unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;);
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *outputImage = (unsigned &lt;span&gt;char&lt;/span&gt; *) &lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;(numberOfPixels);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (outputImage !=&lt;span&gt; nullptr) {
        RotateBilinear(inputImage, Width, Height, Channels, Width &lt;/span&gt;*&lt;span&gt; Channels, outputImage, Width, Height, fAngle);
        memcpy(inputImage, outputImage, numberOfPixels);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(outputImage);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上效果图片。&lt;/p&gt;
&lt;p&gt;原图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824862/201805/824862-20180508213133113-1886928775.jpg&quot; alt=&quot;&quot; width=&quot;640&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红眼修复+倾斜矫正:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/824862/201805/824862-20180508213247017-378890287.jpg&quot; alt=&quot;&quot; width=&quot;640&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/MTCNN&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/MTCNN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令行参数:&lt;/p&gt;
&lt;p&gt;mtcnn 模型文件路径 图片路径&lt;/p&gt;
&lt;p&gt;例如: mtcnn ../models ../sample.jpg&lt;/p&gt;

&lt;p&gt;用cmake即可进行编译示例代码，详情见CMakeLists.txt。&lt;/p&gt;

&lt;p&gt;若有其他相关问题或者需求也可以邮件联系俺探讨。&lt;/p&gt;
&lt;p&gt;邮箱地址是: &lt;br/&gt;gaozhihan@vip.qq.com&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 13:42:00 +0000</pubDate>
<dc:creator>cpuimage</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cpuimage/p/9011130.html</dc:identifier>
</item>
</channel>
</rss>