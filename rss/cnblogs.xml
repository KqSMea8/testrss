<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>nuxt.js引入客户端脚本和第三方库出现window/document/ navigator未定义问题 - 逸丶风</title>
<link>http://www.cnblogs.com/yifeng555/p/9955644.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yifeng555/p/9955644.html</guid>
<description>&lt;p&gt;官方文档中已经给出解决方案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1098802/201811/1098802-20181113233610119-867869550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实际操作也比较简单，比如我之前在项目中引入的wangeditor，这个插件里包含了navigator内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1098802/201811/1098802-20181113233747441-343579438.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;解决：现在nuxt.config.js的webpack扩展配置中配置一个vendor用于打包客户端执行的代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1098802/201811/1098802-20181113233959388-141762795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;span class=&quot;hljs-attr&quot;&gt;vendor: [&lt;span class=&quot;hljs-string&quot;&gt;'external_library']里的external_library名字随便写，对配置没有影响&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;我用wangeditor开始直接复制的里边代码是这样的，里边标红的是只能在客户端执行的代码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1098802/201811/1098802-20181113234327509-546384052.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;改造以后是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1098802/201811/1098802-20181113234447682-1158726276.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 13 Nov 2018 15:46:00 +0000</pubDate>
<dc:creator>逸丶风</dc:creator>
<og:description>官方文档中已经给出解决方案： 实际操作也比较简单，比如我之前在项目中引入的wangeditor，这个插件里包含了navigator内容 解决：现在nuxt.config.js的webpack扩展配置中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yifeng555/p/9955644.html</dc:identifier>
</item>
<item>
<title>WebRTC系列(1)-手把手教你实现一个浏览器拍照室Demo - Peer1029</title>
<link>http://www.cnblogs.com/peerless1029/p/9955640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peerless1029/p/9955640.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1.WebRTC开发背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;由于业务需求，需要在项目中实现实时音视频通话功能，之前基于浏览器开发的Web项目要进行音视频通话，需要安装flash插件才能实现或者使用C/S客户端进行通信。随着互联网技术的驱动下，在很多场景下需要进行音视频通信，在生活中我们现在使用电话越来越少，使用微信和视频越来越多。在一些行业也需要进行音视频实时通信，如：在线教育，远程医疗，保险理赔等等。有了WebRTC，可以开发一些好的网页应用，使得音视频通话越来越简单，无需安装任何插件，只需打开网页，就能实现音视频通话，方然也能实现消息收发，文件收发等等，下面，根据自己平时的项目开发与，对WebRTC就行一个简单的理解与概述，最终实现一个简单的拍照室Demo。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.WebRTC历史和概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　WebRTC是“网络实时通信”（Web Real Time Communication）的缩写。它最初是为了解决浏览器上视频通话而提出的，即两个浏览器之间直接进行视频和音频的通信，不经过服务器。后来发展到除了音频和视频，还可以传输文字和其他数据。2010年5月，Google以6820万美元收购VoIP软件开发商Global IP Solutions的GIPS引擎，并改为名为“WebRTC”。WebRTC使用GIPS引擎，实现了基于网页的视频会议，并支持722，PCM，ILBC，ISAC等编码，同时使用谷歌自家的&lt;a href=&quot;https://baike.baidu.com/item/VP8&quot; target=&quot;_blank&quot;&gt;VP8&lt;/a&gt;视频解码器；同时支持RTP/SRTP传输等。Google是WebRTC的主要支持者和开发者，它推动了WebRTC标准的确立。&lt;/p&gt;
&lt;p&gt;　　WebRTC是一门年轻的技术，从2011推出到2017年，一直发展的不温不火。根据一段时间的开发，个人认为主要原因有：各个浏览器的支持兼容程度和在互联网环境下点对点能够连接的成功率。从2017年苹果公司宣布iOS11的Safari浏览器支持WebRTC，一些云通信产品例如腾讯云通信和网易云通信也是基于WebRTC上进行封装二次开发，也间接的说明了WebRTC发展会越来越好。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113213153295-1938379079.png&quot; alt=&quot;&quot; width=&quot;405&quot; height=&quot;302&quot;/&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113213236919-395217146.png&quot; alt=&quot;&quot; width=&quot;769&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.基本概念的了解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　为了简化开发，WebRTC在浏览器中API集成了大量的技术，解决了一些繁重的问题，如捕捉摄像头和麦克风，处理音视频流，传输层等等。&lt;/p&gt;
&lt;p&gt;    　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113214636299-2106035827.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;捕捉摄像头和麦克风&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　建立通信平台第一步要检测用户设备的摄像头和麦克风权限，先检测设备的可用性，然后在获取用户授权并与设备建立连接，最后获取一段数据流。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;音频与视频的编解码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　在互联网要发送一段音视频数据，技术优化了网络数据，数据尺寸也还是很大，所以要对数据在发送端编码，然后在接收端解码。WebRTC内置的几种编解码器包括：H.264,Opcus,iSAC,VP8。作为前端开发的我，最这些编解码技术当然不是很了解。幸运的是，当两个浏览器回话时，会综合两端情况选择最优的编解码器。&lt;/p&gt;
&lt;p&gt;　　主要处理数据丢包，数据包排序以及建立用户之间的连接问题&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;会话管理&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　通常来说就是信令（Signaling），负责在浏览器中建立并管理多个连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;.获取用户媒体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;/strong&gt;　创建一个基于WebRTC的通信平台，首先要通过用户的网络摄像头和麦克风获取实时的视频和音频流，可以通过调用浏览器的getUserMedia API来实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;获取媒体流&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;h1&amp;gt;获取媒体流&amp;lt;/h1&amp;gt;
  &amp;lt;video autoplay&amp;gt;&amp;lt;/video&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
  function hasUserMedia() {
    return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
  }

  if (hasUserMedia()) {
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    navigator.getUserMedia({video: true, audio: false}, function (stream) {
      console.log(stream);
      var video = document.querySelector('video');
      video.src=window.URL.createObjectURL(stream);
    }, function (err) {
      console.log(err);
    });
  } else {
    alert(&quot;Sorry, your browser does not support getUserMedia.&quot;);
  }
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113223409376-1575776524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是否打开使用摄像头权限&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113223403753-610458148.png&quot; alt=&quot;&quot; width=&quot;578&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：打开摄像头后获取到的视频流展示在Video标签中，video标签需要加上autoplay属性视频才可以播放，在调试中可以把getUserMedia方法参数中的audio设置为：false，避免杂音太大，同理，把video设置为false只能听到自己说话而没有画面，可以代替普通电话使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.限制视频流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们可以通过设置参数来控制视频和音频是否使用，除此之外，我们可以传入一个对象做更复杂的限制，如分辨率，视频宽高比等等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
navigator.getUserMedia({video: {
        width: 320,
        /*height:240,*/
        aspectRatio:1.77
      }, audio: false}, function (stream) {
      console.log(stream);
      var video = document.querySelector('video');
      video.src=window.URL.createObjectURL(stream);
    }, function (err) {
      console.log(err);
    });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113225829625-1572589540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以根据自己业务需求来设置固定的宽高或分辨率等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.完成一个拍照室Demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;通过调用摄像头获取到的视频流以及H5的canvas标签我们可以完成一个简易的拍照功能。&lt;/p&gt;
&lt;p&gt;增加一个拍照按钮以及一个canvas,修改后的整个页面代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;获取媒体流&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;h1&amp;gt;获取媒体流&amp;lt;/h1&amp;gt;
  &amp;lt;video id=&quot;video&quot; autoplay&amp;gt;&amp;lt;/video&amp;gt;
  &amp;lt;button type=&quot;button&quot; onclick=&quot;capture()&quot;&amp;gt;点击拍照&amp;lt;/button&amp;gt;
  &amp;lt;canvas id=&quot;canvas&quot; width=&quot;320&quot; height=&quot;240&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
  function hasUserMedia() {
    return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
  }

  if (hasUserMedia()) {
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    navigator.getUserMedia({video: {
        width: 320,
        height:240,
      }, audio: false}, function (stream) {
      console.log(stream);
      var video = document.querySelector('video');
      video.src=window.URL.createObjectURL(stream);
    }, function (err) {
      console.log(err);
    });
  } else {
    alert(&quot;Sorry, your browser does not support getUserMedia.&quot;);
  }

  function capture(){
    console.log('capture...');
    var cxt=document.getElementById('canvas').getContext('2d');
    var video=document.getElementById('video');
    cxt.drawImage(video,0,0);
  }
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113230934749-1801191869.png&quot; alt=&quot;&quot; width=&quot;635&quot; height=&quot;326&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在单击一个点击拍照按钮，可以捕捉视频的某一帧并同时绘制到canvas上，加上canvas功能本来就很强大，后期对照片的旋转，剪裁，滤镜也都是可以实现的。&lt;/p&gt;
&lt;p&gt;延伸：现在很多WebApp上要实时上传证件功能，我们通过这种WebRTC+canvas也是可以实现的，而且是浏览器直接调的硬件拍照，有没有很溜。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.开发中遇到的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在直接用http打开本地服务器页面是调用不了摄像头的，浏览器的限制认为http下是不安全的，但是可以用127.0.0.1或者localhost来代替本机ip。网页部署到服务器时也得使用https协议来返回页面，否则，无法调用摄像头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113231722370-1973016032.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;304&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　以上简单的介绍了WebRTC的发展历史以及一些基本概念，让大家对其有个初步的了解，最后通过调用摄像头完成一个拍照室的Demo。后续文章再详细的写如何通过WebRTC来实现点对点通信，相信WebRTC功能会越来越强大，这只是第一步。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;《Learning WebRTC 中文版》　&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/htmlapi/webrtc.html#toc3&quot; target=&quot;_blank&quot;&gt;《JavaScript 标准参考教程（alpha） 阮一峰》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;https://baike.baidu.com/item/WebRTC/5522744?fr=aladdin&quot; target=&quot;_blank&quot;&gt;WebRTC百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Nov 2018 15:44:00 +0000</pubDate>
<dc:creator>Peer1029</dc:creator>
<og:description>1.WebRTC开发背景 由于业务需求，需要在项目中实现实时音视频通话功能，之前基于浏览器开发的Web项目要进行音视频通话，需要安装flash插件才能实现或者使用C/S客户端进行通信。随着互联网技术的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/peerless1029/p/9955640.html</dc:identifier>
</item>
<item>
<title>孤荷凌寒自学python第六天 列表的嵌套与列表的主要方法 - 孤荷凌寒</title>
<link>http://www.cnblogs.com/lhghroom/p/9955564.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lhghroom/p/9955564.html</guid>
<description>
&lt;p&gt;&lt;span&gt;（完整学习过程屏幕记录视频地址在文末，手写笔记在文末）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（同步的语音笔记朗读：&lt;a href=&quot;https://www.ximalaya.com/keji/19103006/136365944&quot;&gt;https://www.ximalaya.com/keji/19103006/136365944&lt;/a&gt; ）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、列表的嵌套&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;列表的嵌套可以理解为，将多个列表作为上层列表的其中的元素看待。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[[1,2,3],[4,5,6]]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;红色方括号所表示出的这个列表中有两个元素：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第0个元素：[1,2,3]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第1个元素：[4,5,6]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它的两个元素，本身又是列表对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因此称之为嵌套列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实上面举例的嵌套列表，表示了两个维度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;是一个表格一样的两维数据矩阵。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以也可以有更多维度的嵌套列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;书写代码时可以直接将列表进行嵌套：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=[1,2,3]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstB=[4,5,6]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstC=[lstA,lstB]    #此代码，将lstA,lstB这两个列表作为元素放入列表lstC中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstC)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[[1, 2, 3], [4, 5, 6]]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、列表的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Python语言中，对象的方法，在代码书写上与其它语言一致，使用.连接符来表示对象的内部方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对象名.方法名（参数或可选参数）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数或可选参数是指，需要传递给方法的一些初始值，以便方法对这些值进行运算。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是初学编程的朋友，可以这样解释下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个对象，你可以理解为现实生活中的一个企业或单位，那么这个企业或单位有它的名称、从业范围等等信息，这些信息我们称之为：对象的&lt;strong&gt;属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而一个企业或单位也有它的可以执行的操作，比如&lt;strong&gt;&lt;em&gt;加工客户送来的原材料成为指定的零件&lt;/em&gt;&lt;/strong&gt;这个操作过程，把这样的企业或单位可以执行的内部操作，我们称之为对象的&lt;strong&gt;方法&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;理解了对象的方法，那么就能理解方法名后面的参数或可选参数的意思了，以这儿举例的“&lt;strong&gt;&lt;em&gt;加工客户送来的原材料成为指定的零件&lt;/em&gt;&lt;/strong&gt;”这个&lt;strong&gt;方法&lt;/strong&gt;为例，要完成这个方法，客户必须要给这个方法“原材料”，还要给告诉方法“要完成的零件的特征”，“原材料”与“要完成的零件的特征”等就称之为这个方法的“&lt;strong&gt;参数”&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可选参数&lt;/strong&gt;是指，可以告诉方法，也可以不告诉方法的参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行对象的一个方法后，方法&lt;strong&gt;可能会&lt;/strong&gt;返回一个对象，这就好比刚才举的例子，“&lt;strong&gt;&lt;em&gt;加工客户送来的原材料成为指定的零件&lt;/em&gt;&lt;/strong&gt;”这个方法操作完成后，会返回给客户一个加工好的零件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然只是说，执行对象的一个方法后，可能会返回一个对象，但不是每个方法都会有返回对象，有的方法就不会返回任何内容。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、列表对象的常用方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1 append(obj)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;向列表的最后追加一个元素，参数obj是要添加的元素对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2 count(obj)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;统计列表中值为obj对象的元素的总个数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('abcabcbcdcde')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA.count('c'))&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3 extend(otherlist)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将列表otherlist中的所有元素追加到当前列表序列中的元素后面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例 ：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('ab')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstB=list('CD')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA.extend(lstB)   #此代码，将lstB中的两个元素‘C’，‘D’追加到lstA最后&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['a', 'b', 'C', 'D']     #lstA中的元素发生的变化 ，而lstB的内容没有变化 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4 index(obj)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回列表中所有元素中第一个obj对象所在的index值。（序列的index值都从0开始计数）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('大声说：我爱我的祖国')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['大', '声', '说', '：', '我', '爱', '我', '的', '祖', '国']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; intWO=lstA.index('我')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(intWO)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5 insert(index,obj)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在列表指定的第index个元素前插入新元素对象obj（序列的index值都从0开始计数）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('我爱你')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['我', '爱', '你']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA.insert(1,'很')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['我', '很', '爱', '你']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6 pop(index)   pop()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;删除列表中的第index个元素（参数只能传入整数数字，表示列表中的元素的index位置，而不能传入元素对象本身）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果没有指定要删除的第index个元素这个参数，那么，就会删除列表序列中的最后一个元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此方法有返回值，返回被删除的第index个元素对象的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('abcd')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['a', 'b', 'c', 'd']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; strValue=lstA.pop()  #此处执行pop方法没有传入参数，则默认会删除列表的最后一个元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(strValue)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;d&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['a', 'b', 'c']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; strValue=lstA.pop('b')  #此处执行pop方法将元素对象本身作为参数传递进入，则会报错。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Traceback (most recent call last):&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  File &quot;&amp;lt;pyshell#5&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    strValue=lstA.pop('b')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TypeError: 'str' object cannot be interpreted as an integer&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; strValue=lstA.pop(1)   #此处执行pop方法传递了正确的参数，要删除元素的index值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(strValue)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;b&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['a', 'c']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7 remove(obj)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;移除列表中从左边起第一个被找到的obj元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('大声说：我爱我的祖国')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['大', '声', '说', '：', '我', '爱', '我', '的', '祖', '国']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA.remove('我')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['大', '声', '说', '：', '爱', '我', '的', '祖', '国']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8 reverse()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将列表序列中的元素的位置顺序完全颠倒，即进行序列反序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此方法没有返回对象，或者说返回对象是None对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('abcdefg')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['a', 'b', 'c', 'd', 'e', 'f', 'g']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstB=lstA.reverse()  #其实并没有返回值，所以lstB的值其实是None&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstB)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;None&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)   #而lstA本身的元素顺序被颠倒了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['g', 'f', 'e', 'd', 'c', 'b', 'a']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9  sort(func)  sort()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;按函数func指明的算法对列表的元素进行重新排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不指明func函数名，则默认正序排序（正序如：从小到大）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此外还可以按关键字参数方式传入‘key=‘参数和‘reverse=[True/False]’参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键字参数reverse=True时表示按反序排序（反序如：从大到小）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键字参数reverse=False时表示按正序排序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键字参数key指明排序模式，如key=len，表示字符串排序时，按长短排。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=[3,5,7,8,9,2]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA.sort()  #默认正序排序，对于数字类型的列表，则按从小到大顺序来排序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[2, 3, 5, 7, 8, 9]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA.sort(reverse=True)  #指定了关键字参数reverse=False,则反序排序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[9, 8, 7, 5, 3, 2]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstB=['a','abc','bc','abcd']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstB.sort(key=len) #字符串列表排序，指定关键字参数，key=len，表示 按字符串长短排序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstB)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['a', 'bc', 'abc', 'abcd']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上练习都没有为sort方法指定排序算法的函数，因为我目前还没有研究明白这个用法，后面再作具体研究。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10 clear()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;完全清除列表中的所有元素，但列表对象本身还存在，没有被注销。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA=list('孤荷凌寒的QQ号是：578652607')&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;['孤', '荷', '凌', '寒', '的', 'Q', 'Q', '号', '是', '：', '5', '7', '8', '6', '5', '2', '6', '0', '7']&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lstA.clear()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(lstA)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——————————&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天整理的学习笔记完成，最后例行说明下我的自学思路：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据过去多年我自学各种编程语言的经历，认为只有真正体验式，解决实际问题式的学习才会有真正的效果，即让学习实际发生。在2004年的时候我开始在一个乡村小学自学电脑 并学习vb6编程语言，没有学习同伴，也没有高师在上，甚至电脑都是孤岛（乡村那时还没有网络），有的只是一本旧书，在痛苦的自学摸索中，我找到适应自己零基础的学习方法：首先是每读书的一小节就作相应的手写笔记，第二步就是上机测试每一个笔记内容是否实现，其中会发现书中讲的其实有出入或错误，第三步就是在上机测试之后，将笔记改为电子版，形成最终的修订好的正确无误的学习笔记 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过反复尝试错误，在那个没有分享与交流的黑暗时期我摸黑学会了VB6，尔后接触了其它语言，也曾听过付费视频课程，结果发现也许自己学历果然太低，就算是零基础的入门课程，其实也难以跟上进度，讲师的教学多数出现对初学者的实际情况并不了解的情况，况且学习者的个体也存在差异呢？当然更可怕的是收费课程的价格往往是自己难以承受的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是我的所有编程学习都改为了自学，继续自己的三步学习笔记法的学习之路。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然自学的最大问题是会走那么多的弯路，没有导师直接输入式的教学来得直接，好在网络给我们带来无限搜索的机会，大家在网络上的学习日志带给我们共享交流的机会，而QQ群等交流平台、网络社区的成立，我们可以一起自学，互相批评交流，也可以获得更有效，更自主的自学成果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是我以人生已过半的年龄，决定继续我的编程自学之路，开始学习python，只希望与大家共同交流，一个人的独行是可怕的，只有一群人的共同前进才是有希望的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;诚挚期待您的交流分享批评指点！&lt;strong&gt;欢迎联系我加入从零开始的自学联盟。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时代互联网成为了一种基础设施的存在，于是本来在孤独学习之路上的我们变得不再孤独，因为网络就是一个新的客厅，我们时刻都可以进行沙龙活动。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;非常乐意能与大家一起交流自己自学心得和发现，更希望大家能够对我学习过程中的错误给予指点——是的，这样我就能有许多免费的高师了——这也是分享时代，社区时代带来的好福利，我相信大家会的，是吧！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据完全共享的精神，开源互助的理念，我的个人自学录制过程是全部按4K高清视频录制的,从手写笔记到验证手写笔记的上机操作过程全程录制，但因为4K高清文件太大均超过5G以上，所以无法上传至网络，如有需要可联系我QQ578652607对传，乐意分享。上传分享到百度网盘的只是压缩后的720P的视频。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的学习过程录像百度盘地址分享如下：（清晰度：1280x720）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接：https://pan.baidu.com/s/1NdFzv30EUB3N7HNiutB_IQ 密码：lws1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Youku&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://v.youku.com/v_show/id_XMzkxNjk2MzUwOA&quot;&gt;https://v.youku.com/v_show/id_XMzkxNjk2MzUwOA&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;bilibili&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.bilibili.com/video/av35709611/&quot;&gt;https://www.bilibili.com/video/av35709611/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;喜马拉雅整理的语音笔记：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.ximalaya.com/keji/19103006/136365944&quot;&gt;https://www.ximalaya.com/keji/19103006/136365944&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1246771/201811/1246771-20181113231855961-1978424367.jpg&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1246771/201811/1246771-20181113231904863-197030673.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1246771/201811/1246771-20181113232111746-777314430.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 13 Nov 2018 15:27:00 +0000</pubDate>
<dc:creator>孤荷凌寒</dc:creator>
<og:description>孤荷凌寒自学python第六天 列表的嵌套与列表的主要方法 （完整学习过程屏幕记录视频地址在文末，手写笔记在文末） （同步的语音笔记朗读：https://www.ximalaya.com/keji/1</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lhghroom/p/9955564.html</dc:identifier>
</item>
<item>
<title>springmvc（5）拦截器 - MrChengs</title>
<link>http://www.cnblogs.com/Mrchengs/p/9955509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mrchengs/p/9955509.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.什么是拦截器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 是指通过统一的拦截从浏览器发送到服务器的请求来完成相应服务增强&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.拦截器的基本原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过配置过滤器解决乱码问题&lt;/p&gt;
&lt;p&gt;和过滤器非常相似&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.搭建工程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意jar包&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时的工程是完成后创建的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113224401138-1752796994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113224409202-327841184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; web.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 &amp;lt;servlet&amp;gt;
   
    &amp;lt;servlet-name&amp;gt;springmvc&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
        &amp;lt;init-param&amp;gt;
                &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
                &amp;lt;param-value&amp;gt;classpath:springmvc.xml&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
   
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;springmvc&amp;lt;/servlet-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;springmvc.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;context:component-scan base-package=&quot;com.Mrcheng.controller&quot;&amp;gt;&amp;lt;/context:component-scan&amp;gt;

&amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&amp;gt;&amp;lt;/bean&amp;gt;

&amp;lt;mvc:annotation-driven&amp;gt;&amp;lt;/mvc:annotation-driven&amp;gt;

&amp;lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;
        &amp;lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　ControllerTest.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Controller
public class ControllerTest {
        
        @RequestMapping(&quot;/login&quot;)
        public String login(){
                return &quot;view&quot;;
        }

        
        
        @RequestMapping(&quot;/view&quot;)
        public ModelAndView views(String name,String pwd){
                
                ModelAndView mv = new ModelAndView();
                System.out.println(&quot;views方法....&quot;);
                System.out.println(&quot;name：&quot; + name);
                System.out.println(&quot;pwd：&quot; + pwd);
                mv.addObject(&quot;msg&quot;, &quot;views方法中的msg&quot;);
                mv.setViewName(&quot;success&quot;);
                
                return mv;
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index.jsp&lt;/p&gt;
&lt;p&gt;用于向view.jsp做跳转&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
  &amp;lt;body&amp;gt;
    This is my JSP page. &amp;lt;br&amp;gt;
    &amp;lt;a href=&quot;login&quot;&amp;gt;to login&amp;lt;/a&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;view.jsp&lt;/p&gt;
&lt;p&gt;主要做测试的页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;form action=&quot;view&quot; method=&quot;post&quot;&amp;gt;
        user:&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; &amp;gt;&amp;lt;br&amp;gt;
        pwd:&amp;lt;input type=&quot;password&quot; name=&quot;pwd&quot;&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;submit&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;success.jsp&lt;/p&gt;
&lt;p&gt;是view.jsp做跳转成功的页面测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;success&amp;lt;/h1&amp;gt;&lt;span&gt;
msg:${msg}
&lt;/span&gt;&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;test.jsp&lt;/p&gt;
&lt;p&gt;主要做拦截请求的测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
&amp;lt;h4&amp;gt;拦截请求的转移测试&amp;lt;/h4&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Tomcat上运行&lt;/p&gt;

&lt;p&gt;乱码测试：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113225555324-1385740830.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;提交之后看控制台的打印结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113225631224-1170955743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时输入中文的情况下会有乱码的情况出现&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt; 4.对乱码进行拦截和处理（过滤器）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 在web.xml文件中配置filter&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113225839568-816297554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置代码：&lt;/p&gt;
&lt;p&gt; &amp;lt;param-name&amp;gt;&lt;span&gt;encoding&lt;/span&gt;&amp;lt;/param-name&amp;gt;固定值&lt;/p&gt;
&lt;div readability=&quot;39.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 &amp;lt;filter&amp;gt;
      &amp;lt;filter-name&amp;gt;filter&amp;lt;/filter-name&amp;gt;
      &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt;
    &lt;span&gt;&lt;strong&gt; &amp;lt;init-param&amp;gt;
           &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
           &amp;lt;param-value&amp;gt;utf8&amp;lt;/param-value&amp;gt;
     &amp;lt;/init-param&amp;gt;&lt;/strong&gt;&lt;/span&gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
      &amp;lt;filter-name&amp;gt;filter&amp;lt;/filter-name&amp;gt;
      &lt;span&gt;&lt;strong&gt;&amp;lt;url-pattern&amp;gt;*&amp;lt;/url-pattern&amp;gt;&lt;/strong&gt;&lt;/span&gt;
  &amp;lt;/filter-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　此时的测试中文是没有乱码的@！！！&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.拦截器的实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;自定义拦截器：&lt;/p&gt;
&lt;p&gt;MyInterceptor.java&lt;/p&gt;
&lt;p&gt;需要实现接口&lt;span&gt;HandlerInterceptor&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;48.5&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot; readability=&quot;14&quot;&gt;
public class MyInterceptor implements &lt;span&gt;&lt;strong&gt;HandlerInterceptor&lt;/strong&gt;&lt;/span&gt;{
     @Override
     public boolean preHandle(HttpServletRequest request,  HttpServletResponse response, Object handler)
                throws Exception {&lt;p&gt;　　　　　&lt;span&gt;&lt;strong&gt;　request.setCharacterEncoding(&quot;utf-8&quot;);&lt;/strong&gt;&lt;/span&gt;
           System.out.println(&quot;preHandle&quot;);
           return true;
     }
     @Override
     public void postHandle(HttpServletRequest request,  HttpServletResponse response, Object handler,
                ModelAndView modelAndView) throws Exception {
           System.out.println(&quot;postHandle&quot;);
           
     }
     @Override
     public void afterCompletion(HttpServletRequest request,  HttpServletResponse response, Object handler, Exception ex)
                throws Exception {
           System.out.println(&quot;afterCompletion&quot;);
           
     }
}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在springmvc.xml文件中注册：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;!-- 拦截器注册到mvc框架中 --&amp;gt;
&lt;span&gt;&lt;strong&gt;&amp;lt;mvc:interceptors&amp;gt;&lt;/strong&gt;&lt;/span&gt;
     &amp;lt;bean  class=&quot;com.MrChengs.Interceptor.MyInterceptor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;/mvc:interceptors&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113230555164-504195378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;拦截器的拦截规则：&lt;/p&gt;
&lt;p&gt;拦截规则很多&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;!-- 拦截器注册到mvc框架中 --&amp;gt;
&amp;lt;mvc:interceptors&amp;gt;
     &amp;lt;mvc:interceptor&amp;gt;
           &amp;lt;mvc:mapping path=&quot;/view.action&quot;/&amp;gt;
           &amp;lt;bean  class=&quot;com.MrChengs.Interceptor.MyInterceptor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
     &amp;lt;/mvc:interceptor&amp;gt;
     
&amp;lt;/mvc:interceptors&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 6.拦截器的三种方法介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.preHeader  在请求之前被调用&lt;/p&gt;
&lt;p&gt;    是否需要将当前的当前的请求拦截下来&lt;/p&gt;
&lt;p&gt;    为true表示进行拦截&lt;/p&gt;
&lt;p&gt;    为false表示不进行拦截，后面的两个方法不会执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; boolean preHandle(HttpServletRequest request,  HttpServletResponse response,&lt;br/&gt;Object handler)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;request：请求&lt;/p&gt;
&lt;p&gt;response：响应&lt;/p&gt;
&lt;p&gt;handler：拦截请求的目标的对象  此时是ControllerTest的views方法&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;2.postHandler  在请求处理被调用&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public void postHandle(HttpServletRequest request,  HttpServletResponse response,&lt;br/&gt;Object handler,ModelAndView modelAndView)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;modelAndView：可以改变显示的视图，或者修改方法发往的视图&lt;/p&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113230949334-1394911800.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113231016244-1528426595.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113231059855-382424404.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113231105970-836393237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113231132663-2106701624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;3.afterCompletion  在请求结束之后才进行调用&lt;/p&gt;
&lt;p&gt;主要用于关闭一些资源的操作&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;7.多个拦截器的使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;12&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181113231253007-517028044.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;springmvc.xml配置文件&lt;/p&gt;
&lt;p&gt;假设同时拦截所有的请求&lt;/p&gt;
&lt;div readability=&quot;14.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;!-- 拦截器注册到mvc框架中 --&amp;gt;
&amp;lt;mvc:interceptors&amp;gt;
           &amp;lt;bean  class=&quot;com.MrChengs.Interceptor.MyInterceptor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
           &amp;lt;bean  class=&quot;com.MrChengs.Interceptor.MyInterceptor2&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;/mvc:interceptors&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行流程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;preHandle...
preHandle2...
views方法....
name：小明
pwd：xiaoming
postHandle2...
postHandle...
afterCompletion2...
afterCompletion...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然拦截器的接口不止一个，但是我们在操作中使用最多的还是本次实验中的这个接口。&lt;/p&gt;
&lt;p&gt;其余的HandlerInterceptor，WebRequestInterceptor可以在晚上找几篇博文看一下了解即可。&lt;/p&gt;
&lt;/div&gt;






&lt;/div&gt;

&lt;/div&gt;












</description>
<pubDate>Tue, 13 Nov 2018 15:16:00 +0000</pubDate>
<dc:creator>MrChengs</dc:creator>
<og:description>1.什么是拦截器 是指通过统一的拦截从浏览器发送到服务器的请求来完成相应服务增强 2.拦截器的基本原理 可以通过配置过滤器解决乱码问题 和过滤器非常相似 3.搭建工程 注意jar包 此时的工程是完成后</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mrchengs/p/9955509.html</dc:identifier>
</item>
<item>
<title>Excel地址 - maybeTang</title>
<link>http://www.cnblogs.com/mabeyTang/p/9955507.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mabeyTang/p/9955507.html</guid>
<description>&lt;h2 class=&quot;pdsec&quot;&gt;问题描述&lt;/h2&gt;
&lt;div class=&quot;pdcont&quot; readability=&quot;11&quot;&gt;　　&lt;span&gt;Excel单元格的地址表示很有趣，它使用字母来表示列号。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　比如，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　A表示第1列，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　B表示第2列，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　Z表示第26列，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　AA表示第27列，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　AB表示第28列，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　BA表示第53列，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　....&lt;/span&gt;&lt;p&gt;&lt;span&gt;　　当然Excel的最大列号是有限度的，所以转换起来不难。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　如果我们想把这种表示法一般化，可以把很大的数字转换为很长的字母序列呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　本题目即是要求对输入的数字, 输出其对应的Excel地址表示方式。&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;样例输入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;26&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;样例输出&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Z&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;样例输入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2054&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;样例输出&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BZZ&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据规模和约定&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们约定，输入的整数范围[1,2147483647]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　峰值内存消耗（含虚拟机） &amp;lt; 256M&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　CPU消耗 &amp;lt; 1000ms&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pdcont&quot; readability=&quot;18&quot;&gt;
&lt;hr/&gt;&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　看到题目的第一思路：&lt;strong&gt;进制转换问题~~~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　但是按照进制转换思路写了之后，通过率没有100%。&lt;strong&gt;不过思路并没有出错&lt;/strong&gt;，但是与一般的进制转换问题不同的是，我们的进制转换没有 &lt;strong&gt;0&lt;/strong&gt; 位，所以在对&lt;strong&gt;A&lt;/strong&gt;和&lt;strong&gt;Z&lt;/strong&gt;的处理上稍微注意一下，因为如果我们输入的数是&lt;strong&gt;26&lt;/strong&gt;的倍数的话，因为没有&lt;strong&gt;0&lt;/strong&gt;位，比如&lt;strong&gt;26&lt;/strong&gt;的表示为&lt;strong&gt;Z&lt;/strong&gt;，但52的表示为&lt;strong&gt;AZ&lt;/strong&gt;，但是如果我们对&lt;strong&gt;52&lt;/strong&gt;不停&lt;strong&gt;短除26&lt;/strong&gt;，会发现结果为&lt;strong&gt;[2, 0]&lt;/strong&gt;。与下图的字典对照会发现应该为&lt;strong&gt;BZ&lt;/strong&gt;，很明显多了一个&lt;strong&gt;26&lt;/strong&gt;。计算机对数的取模运算是会取到0的，我们的开始的26个字母也是有用0来表示的，因此26我们可以想象成&lt;strong&gt;[ ]Z&lt;/strong&gt;(空格Z)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以进制转换的思想就是：&lt;span&gt;&lt;strong&gt;逢Z减Z&lt;/strong&gt;&lt;/span&gt;。即如果这个数可以被26整除，那么我们减去一个26。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1507690/201811/1507690-20181113230103561-1068075753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如对于&lt;strong&gt;AZCZ&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;表示为&lt;strong&gt;1*26^3 + 26*26^2 + 3*26^1 + 26*26^0&lt;/strong&gt;&lt;sup&gt;&lt;br/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;短除过程为：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1507690/201811/1507690-20181113231125964-738600710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt; 算法如下&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_00aedb95-eaa8-4a9c-9024-6da79ccf35a4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_00aedb95-eaa8-4a9c-9024-6da79ccf35a4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_00aedb95-eaa8-4a9c-9024-6da79ccf35a4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;map&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; typedef map&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;char&lt;/span&gt;&amp;gt;&lt;span&gt; mp;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; typedef map&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;char&lt;/span&gt;&amp;gt;&lt;span&gt;::value_type init;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;mp INITmp()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; {    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为了看起来更符合我们的直观感受，这里还是用了字典 &lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    mp ch;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     ch.insert(init(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;25&lt;/span&gt;;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         ch.insert(init(i+&lt;span&gt;1&lt;/span&gt;, i + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ch;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     mp dic =&lt;span&gt; INITmp();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(cin&amp;gt;&amp;gt;&lt;span&gt;x)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         vector&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt;&lt;span&gt; s;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(x)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             s.push_back(dic[x%&lt;span&gt;26&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里是核心代码，逢Z减Z，其余的地方与进制转换问题无二！ &lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(x%&lt;span&gt;26&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;) x -= &lt;span&gt;26&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             x /= &lt;span&gt;26&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依然是倒序输出 &lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=s.size()-&lt;span&gt;1&lt;/span&gt;;i&amp;gt;=&lt;span&gt;0&lt;/span&gt;;i--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             cout&amp;lt;&amp;lt;&lt;span&gt;s.at(i);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         cout&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; } 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 13 Nov 2018 15:15:00 +0000</pubDate>
<dc:creator>maybeTang</dc:creator>
<og:description>问题描述 Excel单元格的地址表示很有趣，它使用字母来表示列号。 比如， A表示第1列， B表示第2列， Z表示第26列， AA表示第27列， AB表示第28列， BA表示第53列， .... 当然</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mabeyTang/p/9955507.html</dc:identifier>
</item>
<item>
<title>Java集合类根接口：Collection 和 Map - xue无止境</title>
<link>http://www.cnblogs.com/yeya/p/9955499.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeya/p/9955499.html</guid>
<description>&lt;p&gt;在前文中我们了解了几种常见的数据结构，这些数据结构有着各自的应用场景，并且被广泛的应用于编程语言中，其中，Java中的集合类就是基于这些数据结构为基础。&lt;/p&gt;
&lt;p&gt;Java的集合类是一些非常实用的工具类，主要用于存储和装载数据 (包括对象)，因此，Java的集合类也被成为容器。在Java中，所有的集合类都位于java.util包下，这些集合类主要是基于两个根接口派生而来，它们就是 &lt;strong&gt;Collection&lt;/strong&gt;和 &lt;strong&gt;Map&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Collection派生出三个子接口，Set代表不可重复的无序集合、List代表可重复的有序集合、Queue是java提供的队列实现，通过它们不断的扩展出很多的集合类，例如HashMap、ArrayList、LinkedList、Deque等，其分布图如下：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1478697/201811/1478697-20181113231215921-476489727.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为最基本的两个根接口之一，Collection提供了很多的基础方法，供它的子类调用。下面是Collection接口的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface Collection&amp;lt;E&amp;gt; extends Iterable&amp;lt;E&amp;gt; {
    int size();

    boolean isEmpty();

    boolean contains(Object var1);

    Iterator&amp;lt;E&amp;gt; iterator();

    Object[] toArray();

    &amp;lt;T&amp;gt; T[] toArray(T[] var1);

    boolean add(E var1);

    boolean remove(Object var1);

    boolean containsAll(Collection&amp;lt;?&amp;gt; var1);

    boolean addAll(Collection&amp;lt;? extends E&amp;gt; var1);

    boolean removeAll(Collection&amp;lt;?&amp;gt; var1);

    default boolean removeIf(Predicate&amp;lt;? super E&amp;gt; var1) {
        Objects.requireNonNull(var1);
        boolean var2 = false;
        Iterator var3 = this.iterator();

        while(var3.hasNext()) {
            if (var1.test(var3.next())) {
                var3.remove();
                var2 = true;
            }
        }

        return var2;
    }

    boolean retainAll(Collection&amp;lt;?&amp;gt; var1);

    void clear();

    boolean equals(Object var1);

    int hashCode();

    default Spliterator&amp;lt;E&amp;gt; spliterator() {
        return Spliterators.spliterator(this, 0);
    }

    default Stream&amp;lt;E&amp;gt; stream() {
        return StreamSupport.stream(this.spliterator(), false);
    }

    default Stream&amp;lt;E&amp;gt; parallelStream() {
        return StreamSupport.stream(this.spliterator(), true);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从源码可以看出，里面有很多方法是针对集合的基础操作，例如添加，删除，查询。例如：&lt;/p&gt;
&lt;p&gt;还有一些操作整个集合的方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean containsAll(Collection&amp;lt;?&amp;gt; c)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;是否包含指定集合 c 的全部元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean addAll(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加集合 c 中所有的元素到本集合中，如果集合有改变就返回 true&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean removeAll(Collection&amp;lt;?&amp;gt; c)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除本集合中和 c 集合中一致的元素，如果集合有改变就返回 true&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean retainAll(Collection&amp;lt;?&amp;gt; c)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;保留本集合中 c 集合中两者共有的，如果集合有改变就返回 true&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void clear()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除所有元素&lt;/p&gt;
&lt;p&gt;值得说明的是，在jdk1.8之后，Collection 接口还提供了从集合获取连续的或者并行流的方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&amp;lt;E&amp;gt; stream()&lt;/code&gt; 在这个集合上返回一个顺序流 ，单线程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&amp;lt;E&amp;gt; parallelStream()&lt;/code&gt; 在这个集合上返回一个并行的代码流 ，多线程&lt;/p&gt;
&lt;p&gt;Stream相当于高级版本的iterator，可以对集合做比较，分类，甚至是过滤等操作，一般是结合lambda表达式来使用，这样会使代码变得更加简洁 (有人说会更难理解，这个仁者见仁) ，下面举几个简单的例子：&lt;/p&gt;
&lt;p&gt;1、使用顺序流来过滤掉集合中为 “aaa” 的元素并做输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;);
list.stream().filter(e -&amp;gt; !e.contains(&quot;aaa&quot;))
      .forEach(e -&amp;gt; System.out.println(e));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、使用并行流来操作集合：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;);
list.parallelStream().filter(e -&amp;gt; !e.contains(&quot;aaa&quot;))
      .forEach(e -&amp;gt; System.out.println(e));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当使用顺序流去遍历时，每个item读完后再读下一个item。&lt;br/&gt;而使用并行流去遍历时，集合会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出，所以理论上，并行流的效率至少是顺序流的两倍以上。&lt;/p&gt;

&lt;p&gt;Map接口是和Collection同等级的根接口，它表示一个键值对（key-value）的映射，每一个key对应一个value，查找Map中的数据，总是根据key来获取，所以key是不可重复的，它用于标识集合里的每项数据。跟Collection一样，Map接口派生了很多的集合子类，这是Map的体系架构图：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1478697/201811/1478697-20181113231238668-340459991.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Map接口提供了很多集合的初识方法，其底层结构是封装一个名为entry的接口，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface Entry&amp;lt;K, V&amp;gt; {
    K getKey();

    V getValue();

    V setValue(V var1);

    boolean equals(Object var1);

    int hashCode();

    static &amp;lt;K extends Comparable&amp;lt;? super K&amp;gt;, V&amp;gt; Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparingByKey() {
        return (Comparator)((Serializable)((var0x, var1x) -&amp;gt; {
            return ((Comparable)var0x.getKey()).compareTo(var1x.getKey());
        }));
    }

    static &amp;lt;K, V extends Comparable&amp;lt;? super V&amp;gt;&amp;gt; Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparingByValue() {
        return (Comparator)((Serializable)((var0x, var1x) -&amp;gt; {
            return ((Comparable)var0x.getValue()).compareTo(var1x.getValue());
        }));
    }

    static &amp;lt;K, V&amp;gt; Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparingByKey(Comparator&amp;lt;? super K&amp;gt; var0) {
        Objects.requireNonNull(var0);
        return (Comparator)((Serializable)((var1x, var2x) -&amp;gt; {
            return var0.compare(var1x.getKey(), var2x.getKey());
        }));
    }

    static &amp;lt;K, V&amp;gt; Comparator&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt; comparingByValue(Comparator&amp;lt;? super V&amp;gt; var0) {
        Objects.requireNonNull(var0);
        return (Comparator)((Serializable)((var1x, var2x) -&amp;gt; {
            return var0.compare(var1x.getValue(), var2x.getValue());
        }));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从源码中可以看出，entry中封装了一系列设值和比较器，这也是Map实现类的元素操作的基础接口，一个entry就相当于一个封装了键值对的元素，是Map接口里的架构核心。&lt;br/&gt;除此之外，Map中还提供了两个集合来操作自身，这就是 &lt;strong&gt;KeySet&lt;/strong&gt; 和 &lt;strong&gt;Values&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Set&amp;lt;K&amp;gt; keySet();
Collection&amp;lt;V&amp;gt; values();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;KeySet 是一个 Map 中 key 的集合，&lt;strong&gt;以 Set 的形式保存&lt;/strong&gt;，不允许重复，因此键存储的对象需要重写 equals() 和 hashCode() 方法。&lt;br/&gt;Values 是一个 Map 中 value 的集合，&lt;strong&gt;以 Collection 的形式保存&lt;/strong&gt;，可以重复。&lt;/p&gt;
&lt;p&gt;通过这三种视图，Map可以对自身结构以及内部元素做操作，在集合中非常常用，建议读者们可以多看看源码，作深入的了解。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Nov 2018 15:13:00 +0000</pubDate>
<dc:creator>xue无止境</dc:creator>
<og:description>前言 在前文中我们了解了几种常见的数据结构，这些数据结构有着各自的应用场景，并且被广泛的应用于编程语言中，其中，Java中的集合类就是基于这些数据结构为基础。 Java的集合类是一些非常实用的工具类，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeya/p/9955499.html</dc:identifier>
</item>
<item>
<title>python模块导入细节 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9955485.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9955485.html</guid>
<description>&lt;p&gt;官方手册：&lt;a href=&quot;https://docs.python.org/3/tutorial/modules.html&quot; class=&quot;uri&quot;&gt;https://docs.python.org/3/tutorial/modules.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;可执行文件和模块&quot;&gt;可执行文件和模块&lt;/h2&gt;
&lt;p&gt;python源代码文件按照功能可以分为两种类型：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用于执行的可执行程序文件&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;不用与执行，仅用于被其它python源码文件导入的模块文件&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;例如文件a.py和b.py在同一目录下，它们的内容分别是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# b.py
x=&quot;var x in module b&quot;
y=5

# a.py：
import b
import sys
print(b.x)
print(b.y)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;a.py导入其它文件(b.py)后，就可以使用b.py文件中的属性(如变量、函数等)。这里，a.py就是可执行文件，b.py就是模块文件，但模块名为b，而非b.py。&lt;/p&gt;
&lt;p&gt;python提供了一些标准库，是预定义好的模块文件，例如上面的sys模块。&lt;/p&gt;
&lt;p&gt;在此有几个注意点，在后面会详细解释：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;模块b的文件名为b.py，但import导入的时候，使用的名称为b，而非b.py&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;a.py和b.py是在同一个目录下的，如果不在同目录下能否导入？&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;在a.py中访问b.py模块中的属性时，使用的是&lt;code&gt;b.x&lt;/code&gt;、&lt;code&gt;b.y&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;上面都是直接以模块名导入的，python还支持更复杂的包导入方式，例如导入abc/b.py时，使用&lt;code&gt;import abc.b&lt;/code&gt;。下一篇文章会详细解释包的导入方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;python模块搜索路径&quot;&gt;python模块搜索路径&lt;/h2&gt;
&lt;p&gt;在a.py中导入模块b的时候，python会做一系列的模块文件路径搜索操作：b.py在哪里？只有找到它才能读取、运行(装载)该模块。&lt;/p&gt;
&lt;p&gt;在任何一个python程序启动时，都会将模块的搜索路径收集到sys模块的path属性中(&lt;code&gt;sys.path&lt;/code&gt;)。&lt;strong&gt;当python需要搜索模块文件在何处时，首先搜索内置模块，如果不是内置模块，则搜索sys.path中的路径列表，搜索时会从该属性列出的路径中按照从前向后的顺序进行搜索，并且只要找到就立即停止搜索该模块文件&lt;/strong&gt;(也就是说不会后搜索的同名模块覆盖先搜索的同名模块)。&lt;/p&gt;
&lt;p&gt;例如，在a.py文件中输出一下这个属性的内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# a.py：
import sys
print(sys.path)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['G:\\pycode', 'C:\\Program Files (x86)\\Python36-32\\python36.zip', 'C:\\Program Files (x86)\\Python36-32\\DLLs', 'C:\\Program Files (x86)\\Python36-32\\lib', 'C:\\Program Files (x86)\\Python36-32', 'C:\\Users\\malong\\AppData\\Roaming\\Python\\Python36\\site-packages', 'C:\\Program Files (x86)\\Python36-32\\lib\\site-packages']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;python模块的搜索路径包括几个方面，按照如下顺序搜索：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;程序文件(a.py)所在目录，即&lt;code&gt;G:\\pycode&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;环境变量&lt;code&gt;PYTHONPATH&lt;/code&gt;所设置的路径(如果定义了该环境变量，则从左向右的顺序搜索)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;标准库路径&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;.pth文件中定义的路径&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;需要注意，上面sys.path的结果中，除了&lt;code&gt;.zip&lt;/code&gt;是一个文件外，其它的搜索路径全都是目录，也就是从这些目录中搜索模块X的文件X.py是否存在。&lt;/p&gt;

&lt;h3 id=&quot;程序所在目录&quot;&gt;程序所在目录&lt;/h3&gt;
&lt;p&gt;这个目录是最先搜索的，且是python自动搜索的，无需对此进行任何设置。从交互式python程序终输出sys.path的结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sys.path
['', 'C:\\WINDOWS\\system32', 'C:\\Program Files (x86)\\Python36-32\\Lib\\idlelib', 'C:\\Program Files (x86)\\Python36-32\\python36.zip', 'C:\\Program Files (x86)\\Python36-32\\DLLs', 'C:\\Program Files (x86)\\Python36-32\\lib', 'C:\\Program Files (x86)\\Python36-32', 'C:\\Users\\malong\\AppData\\Roaming\\Python\\Python36\\site-packages', 'C:\\Program Files (x86)\\Python36-32\\lib\\site-packages']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中第一个&lt;code&gt;''&lt;/code&gt;表示的就是程序所在目录。&lt;/p&gt;
&lt;p&gt;注意程序所在目录和当前目录是不同的。例如，在/tmp/目录下执行/pycode中的a.py文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd /tmp
python /pycode/a.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中/tmp为当前目录，而/pycode是程序文件a.py所在的目录。如果a.py中导入b.py，那么将首先搜索/pycode，而不是/tmp。&lt;/p&gt;
&lt;h3 id=&quot;环境变量pythonpath&quot;&gt;环境变量PYTHONPATH&lt;/h3&gt;
&lt;p&gt;这个变量中可以自定义一系列的模块搜索路径列表，这样可以跨目录搜索(另一种方式是设置.pth文件)。但默认情况下这个环境变量是未设置的。&lt;/p&gt;
&lt;p&gt;在windows下，设置PYTHONPATH环境变量的方式：&lt;code&gt;命令行中输入：SystemPropertiesAdvanced--&amp;gt;环境变量--&amp;gt;系统环境变量新建&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/733013/201811/733013-20181113104128808-2102764314.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果是多个路径，则使用英文格式的分号分隔。以下是临时设置当前命令行窗口的PYTHONPATH：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;set PYTHONPATH='D:\pypath; d:\pypath1'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在unix下，设置PYTHONPATH环境变量的方式，使用冒号分隔多个路径：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PYTHONPATH=/tmp/pypath1:/tmp/pypath2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要永久生效，则写入配置文件中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;echo 'export PYTHONPATH=/tmp/pypath1:/tmp/pypath2' &amp;gt;/etc/profile.d/pypth.sh
chmod +x /etc/profile.d/pypth.sh
source /etc/profile.d/pypth.sh&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;标准库路径&quot;&gt;标准库路径&lt;/h3&gt;
&lt;p&gt;在Linux下，标准库的路径一般是在/usr/lib/pythonXXX/下(XXX表示python版本号)，此目录下有些分了子目录。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/usr/lib/python3.5/lib-dynload', '/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中/usr/lib/python3.5和其内的几个子目录都是标准库的搜索路径。&lt;/p&gt;
&lt;p&gt;注意其中/usr/lib/python35.zip，它是ZIP文件组件，当定义此文件为搜索路径时，将自动解压缩该文件，并从此文件中搜索模块。&lt;/p&gt;
&lt;p&gt;Windows下根据python安装位置的不同，标准库的路径不同。如果以默认路径方式安装的python，则标准库路径为&lt;code&gt;C:\\Program Files (x86)\\Python36-32&lt;/code&gt;及其分类的子目录。&lt;/p&gt;

&lt;h3 id=&quot;pth文件自定义路径&quot;&gt;.pth文件自定义路径&lt;/h3&gt;
&lt;p&gt;可以将自定义的搜索路径放进一个.pth文件中，每行一个搜索路径。然后将.pth文件放在python安装目录或某个标准库路径内的sitepackages目录下即可。&lt;/p&gt;
&lt;p&gt;这是一种替换PYTHONPATH的友好方式，因为不同操作系统设置环境变量的方式不一样，而以文件的方式记录是所有操作系统都通用的。&lt;/p&gt;
&lt;p&gt;例如，windows下，在python安装目录&lt;code&gt;C:\\Program Files (x86)\\Python36-32&lt;/code&gt;下新增一个mypath.pth文件，内容如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;d:\pypath1
d:\pypath2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再去输出sys.path，将可以看到这两个路径已经放进了搜索列表中。&lt;/p&gt;

&lt;h3 id=&quot;修改搜索路径&quot;&gt;修改搜索路径&lt;/h3&gt;
&lt;p&gt;除了上面环境变量和.pth文件，还可以直接修改sys.path或者site.getsitepackages()的结果。&lt;/p&gt;
&lt;p&gt;例如，在import导入sys模块之后，可以修改sys.path，向这个列表中添加其它搜索路径，这样之后导入其它模块的时候，也会搜索该路径。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import sys
sys.path.append('d:\\pypath3')
print(sys.path)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;sys.path的最后一项将是新添加的路径。&lt;/p&gt;

&lt;h2 id=&quot;导入模块的细节&quot;&gt;导入模块的细节&lt;/h2&gt;

&lt;h3 id=&quot;导入模块时的过程&quot;&gt;导入模块时的过程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;python的import是在程序运行期间执行的，并非像其它很多语言一样是在编译期间执行&lt;/strong&gt;。也就是说，import可以出现在任何地方，只有执行到这个import行时，才会执行导入操作。且在import某个模块之前，无法访问这个模块的属性。&lt;/p&gt;
&lt;p&gt;python在import导入模块时，首先搜索模块的路径，然后编译并执行这个模块文件。虽然概括起来只有两个过程，但实际上很复杂。&lt;/p&gt;
&lt;p&gt;前文已经解释了import的模块搜索过程，所以这里大概介绍import的其它细节。&lt;/p&gt;
&lt;p&gt;以前面的a.py中导入模块文件b.py为例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;import导入模块时，搜索到模块文件b.py后：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;首先在内存中为每个待导入的模块构建module类的实例：模块对象。这个模块对象目前是空对象，这个对象的名称为全局变量b&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意细节：module类的对象，变量b。&lt;/p&gt;
&lt;p&gt;输出下它们就知道：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;print(b)
print(type(b))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;module 'b' from 'g:\\pycode\\b.py'&amp;gt;
&amp;lt;class 'module'&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为b是全局变量，所以当前程序文件a.py中不能重新对全局变量b进行赋值，这会使导入的模块b被丢弃。例如，下面是错误的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
b=3
print(b.x)   # 已经没有模块b了&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外，因为import导入时是将模块对象赋值给模块变量，所以模块变量名不能是python中的一些关键字，比如if、for等，这时会报错。虽然模块文件名可以为list、keys等这样的内置函数名，但这会导致这些内置函数不可用，因为根据变量查找的作用域规则，首先查找全局变量，再查找内置作用域。&lt;strong&gt;也就是说，模块文件的文件名不能是这些关键字、也不应该是这些内置函数名&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  File &quot;g:/pycode/new.py&quot;, line 11
    import if
            ^
SyntaxError: invalid syntax&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.构造空模块实例后，将编译、执行模块文件b.py，并按照一定的规则将一些结果放进这个模块对象中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意细节，编译、执行b.py、将结果保存到模块对象中。&lt;/p&gt;
&lt;p&gt;模块第一次被导入的时候，会进行编译，并生成.pyc字节码文件，然后python执行这个pyc文件。当模块被再次导入时，如果检查到pyc文件的存在，且和源代码文件的上一次修改时间戳mtime完全对应(也就是说，编译后源代码没有进行过修改)，则直接装载这个pyc文件并执行，不会再进行额外的编译过程。当然，如果修改过源代码，将会重新编译得到新的pyc文件。&lt;/p&gt;
&lt;p&gt;注意，并非所有的py文件都会生成编译得到的pyc文件，对于那些只执行一次的程序文件，会将内存中的编译结果在执行完成后直接丢弃(多数时候如此，但仍有例外，比如使用&lt;a href=&quot;https://docs.python.org/3/library/compileall.html#module-compileall&quot;&gt;compileall&lt;/a&gt;模块可以强制编译成pyc文件)，但模块会将内存中的编译结果持久化到pyc文件中。另外，运行字节码pyc文件并不会比直接运行py文件更快，执行它也一样是一行行地解释、执行，唯一快的地方在于导入装载的时候无需重新编译而已。&lt;/p&gt;
&lt;p&gt;执行模块文件(已完成编译)的时候，按照一般的执行流程执行：一行一行地、以代码块为单元执行。一般地，模块文件中只用来声明变量、函数等属性，以便提供给导入它的模块使用，而不应该有其他任何操作性的行为，比如print()操作不应该出现在模块文件中，但这并非强制。&lt;/p&gt;
&lt;p&gt;总之，执行完模块文件后，这个模块文件将有一个自己的全局名称空间，在此模块文件中定义的变量、函数等属性，都会记录在此名称空间中。&lt;/p&gt;
&lt;p&gt;最后，模块的这些属性都会保存到模块对象中。由于这个模块对象赋值给了模块变量b，所以通过变量b可以访问到这个对象中的属性(比如变量、函数等)，也就是模块文件内定义的全局属性。&lt;/p&gt;

&lt;h3 id=&quot;只导入一次&quot;&gt;只导入一次&lt;/h3&gt;
&lt;p&gt;假设a.py中导入了模块b和模块sys，在b.py中也导入了模块sys，但python默认对某个模块只会导入一次，如果a.py中先导入sys，再导入b，那么导入b并执行b.py的时候，会发现sys已经导入了，不会再去导入sys。&lt;/p&gt;
&lt;p&gt;实际上，python执行程序的时候，会将所有已经导入的模块放进sys.module属性中，这是一个dict，可以通过下面的方式查看已导入的模块名：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; list(sys.module.keys())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果某个程序文件中多次使用import(或from)导入同一个模块，虽然不会报错，但实际上还是直接使用内存中已装载好的模块对象。&lt;/p&gt;
&lt;p&gt;例如，b.py中x=3，导入它之后修改该值，然后再次导入，发现b.x并不会发生改变：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
print(b.x)   # 3

b.x=33
print(b.x)  # 33

import b 
print(b.x)  # 33&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是python提供了reload进行多次重复导入的方法，见后文。&lt;/p&gt;

&lt;h3 id=&quot;使用别名&quot;&gt;使用别名&lt;/h3&gt;
&lt;p&gt;import导入时，可以使用&lt;code&gt;as&lt;/code&gt;关键字指定一个别名作为模块对象的变量，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b as bb
bb.x=3
print(bb.x)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时候模块对象将赋值给变量bb，而不是b，b此时不再是模块对象变量，而仅仅只是模块名。使用别名并不会影响性能，因为它仅仅只是一个赋值过程，只不过是从原来的赋值对象变量b变为变量bb而已。&lt;/p&gt;

&lt;h2 id=&quot;from导入部分属性&quot;&gt;from导入部分属性&lt;/h2&gt;
&lt;p&gt;import语句是导入模块中的所有属性，并且访问时需要使用模块变量来引用。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
print(b.x)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了import，还有一个from语句，表示从模块中导入部分指定的属性，且使得可以直接使用这些属性的名称来引用这些属性，而不需要加上模块变量名。例如原来import导入时访问变量x使用&lt;code&gt;b.x&lt;/code&gt;，from导入时只需使用x即可。实际上，from导入更应该称为属性的再次赋值(拷贝)。&lt;/p&gt;
&lt;p&gt;例如，b.py中定义了变量x、y、z，同时定义了函数f()和g()，在a.py中导入这个模块文件，但只导入x变量和f函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# a.py文件内容:
from b import x,f

print(x)
f()

# b.py文件内容：
x=3
y=4
z=5
def f():
    print(&quot;function f in b.py&quot;)

def g():
    print(&quot;function g in b.py&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意上面a.py中引用模块b中属性的方式没有加上&lt;code&gt;b.X&lt;/code&gt;，而是直接使用x和f()来引用。这和import是不一样的。至于from和import导入时的变量名称细节，在下面的内容中会详细解释。&lt;/p&gt;
&lt;p&gt;虽然from语句只导入模块的部分属性，但实际上仍然会完整地执行整个模块文件。&lt;/p&gt;
&lt;p&gt;同样的，from语句也可以指定导入属性的变量别名，例如，将b.py中的属性x赋值给xx，将y赋值给yy：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from b import x as xx,y as yy
print(xx)
print(yy)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;from语句还有一个特殊导入统配符号&lt;code&gt;*&lt;/code&gt;，它表示导入模块中的所有属性。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# a.py文件：
from b import *
print(x,y,z)
f()
g()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;多数时候，不应该使用&lt;code&gt;from *&lt;/code&gt;的方式，因为我们可能会忘记某个模块中有哪些属性拷贝到了当前文件，特别是多个&lt;code&gt;from *&lt;/code&gt;时可能会出现属性覆盖的问题。&lt;/p&gt;

&lt;h2 id=&quot;重载模块imp.reload&quot;&gt;重载模块：imp.reload()&lt;/h2&gt;
&lt;p&gt;无论时import还是from，都只导入一次模块，但使用reload()可以强制重新装载模块。&lt;/p&gt;
&lt;p&gt;reload()是imp模块中的一个函数，所以要使用imp.reload()之前，必须先导入imp。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from imp import reload
reload(b)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;reload()是一个函数，它的参数是一个已经成功被导入过的模块变量(如果使用了别名，则应该使用别名作为reload的参数)，也就是说该模块必须在内存中已经有自己的模块对象。&lt;/p&gt;
&lt;p&gt;reload()会重新执行模块文件，并将执行得到的属性完全覆盖到原有的模块对象中。也就是说，&lt;strong&gt;reload()会重新执行模块文件，但不会在内存中建立新的模块对象，所以原有模块对象中的属性可能会被修改&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，模块文件b.py中x=3，导入b模块，修改其值为33，然后reload这个模块，会发现值重新变回了3。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
print(b.x)  # 3

b.x=33
print(b.x)  # 33

from imp import reload
reload(b)

print(b.x)  # 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有时候reload()很有用，可以让程序无需重启就执行新的代码。例如，在python的交互式模式下导入模块b，然后修改python源码，再reload导入：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import b
&amp;gt;&amp;gt;&amp;gt; b.x
3

# 不要关掉交互式解释器，直接修改源代码中的b=3333

&amp;gt;&amp;gt;&amp;gt; from imp import reload
&amp;gt;&amp;gt;&amp;gt; reload(b)
&amp;lt;module 'b' from 'G:\\pycode\\b.py'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; b.x
3333&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但正因为reload()重载模块会改变原始的值，这可能是很危险的行为，一定要清楚地知道它是在干什么。&lt;/p&gt;

&lt;h2 id=&quot;导入模块时的变量名称细节&quot;&gt;导入模块时的变量名称细节&lt;/h2&gt;

&lt;h3 id=&quot;import导入的变量&quot;&gt;import导入的变量&lt;/h3&gt;
&lt;p&gt;import导入时，模块对象中的属性有自己的名称空间，然后将整个模块对象赋值给模块变量。&lt;/p&gt;
&lt;p&gt;例如，在a.py中导入b：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
print(b.x)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个过程唯一和当前文件a.py作用域有关的就是模块对象变量b，b.py中声明的属性和当前文件无任何关系。无论是访问还是修改，都是直接修改这个模块对象自身作用域中的值。所以，只要模块变量b不出现冲突问题，可以放心地修改模块b中的属性。&lt;/p&gt;
&lt;p&gt;另一方面，因为每个进程都有自己的内存空间，所以&lt;strong&gt;在a.py、c.py中都导入b时，a.py中修改b的属性值不会影响c.py中导入的属性，a.py和c.py中模块对象所保存的属性都是执行b.py后得到的，它们相互独立&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;from导入的变量&quot;&gt;from导入的变量&lt;/h3&gt;
&lt;p&gt;from导入模块时，会先执行完模块文件，然后将指定的部分属性重新赋值给当前程序文件的同名全局变量。&lt;/p&gt;
&lt;p&gt;例如，在模块文件b.py中定义了x、y、z变量和f()、g()函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# b.py：
x=3
y=4
b=5
def f():
    print(&quot;function f in b.py&quot;)

def g():
    print(&quot;function g in b.py&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当在a.py中导入b模块时，如果只导入x、y和f()：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# a.py：
from b import x, y, f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上的行为是&lt;strong&gt;构造模块对象后，将这个模块对象对应的名称空间中的属性x、y和f重新赋值给a.py中的变量x、y和f，然后丢弃整个模块对象以及整个名称空间。换句话说，b不再是一个有效的模块变量(所以和import不一样)，来自b的x,y,z,f和g也都被丢弃&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里有几个细节，需要详细解释清楚，只有理解了才能搞清楚它们是怎么生效的。&lt;/p&gt;
&lt;p&gt;假设现在模块文件b.py的内容为，并且a.py中导入x,y,f属性：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# b.py：
x=3
y=[1,2]
z=5
def f():
    print(&quot;function f in b.py&quot;)

def g():
    print(&quot;function g in b.py&quot;)

# a.py：
from b import x,y,f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先在执行模块文件b.py时，会构造好自己的模块对象，并且模块对象有自己的名称空间(作用域)，模块对象构造完成后，它的名称空间大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/733013/201811/733013-20181113163501113-70675999.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后python会在a.py的全局作用域内创建和导入属性同名的全局变量x，y和f，并且通过赋值的方式将模块的属性赋值给这些全局变量，也就是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;x = b.x
y = b.y
f = b.f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的b只是用来演示，实际上变量b是不存在的。&lt;/p&gt;
&lt;p&gt;赋值完成后，我们和构造的整个模块对象就失去联系了，因为没有变量b去引用这个对象。但需要注意，这个对象并没有被删除，仅仅只是我们无法通过b去找到它。&lt;/p&gt;
&lt;p&gt;所以，现在的示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/733013/201811/733013-20181113163547238-1127133503.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为是赋值的方式传值的，所以在a.py中修改这几个变量的值时，是直接在模块对象作用域内修改的：对于不可变对象，将在此作用域内创建新对象，对于可变对象，将直接修改原始对象的值。&lt;/p&gt;
&lt;p&gt;另一方面，由于模块对象一直保留在内存中，下次继续导入时，将直接使用该模块对象。对于import和from，是直接使用该已存在的模块对象，对于reload，是覆盖此模块对象。&lt;/p&gt;
&lt;p&gt;例如，在a.py中修改不可变对象x和可变对象y，之后import或from时，可变对象的值都会随之改变，因为它们使用的都是原来的模块对象：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from b import x,y

x=33
y[0]=333

from b import x,y
print((x,y))        # 输出(3, [333, 2])

import b
print((b.x,b.y))    # 输出(3, [333, 2])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;from导入时，由于b不再是模块变量，所以无法再使用reload(b)去重载对象。如果想要重载，只能先import，再reload：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from b import x,y
...CODE...

# 想要重载b
import b
from imp import reload
reload(b)&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;查看模块中的属性&quot;&gt;查看模块中的属性&lt;/h2&gt;
&lt;p&gt;内置函数dir可用于列出某模块中定义了哪些属性。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
dir(b)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'f', 'g', 'x', 'y', 'z']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见，模块的属性中除了自己定义的属性外，还有一些内置的属性，比如上面以&lt;code&gt;__&lt;/code&gt;开头和结尾的属性。&lt;/p&gt;
&lt;p&gt;如果dir()不给任何参数，则输出当前环境下定义的名称属性：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import b
&amp;gt;&amp;gt;&amp;gt; x=3
&amp;gt;&amp;gt;&amp;gt; aaa=333
&amp;gt;&amp;gt;&amp;gt; dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'aaa', 'b', 'x']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;每个属性都对应一个对象，例如x对应的是int对象，b对应的是module对象：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; type(x)
&amp;lt;class 'int'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;class 'module'&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;既然是对象，那么它们都会有自己的属性。例如:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; dir(x)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以，也可以直接dir某个模块内的属性：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import b
dir(b.x)
dir(b.__name__)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;dir()不会列出内置的函数和变量，如果想要输出内置的函数和变量，可以去标准模块builtins中查看，因为它们定义在此模块中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import builtins
dir(buildins)&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 13 Nov 2018 15:10:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>python模块导入细节 官方手册：https://docs.python.org/3/tutorial/modules.html 可执行文件和模块 python源代码文件按照功能可以分为两种类型：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9955485.html</dc:identifier>
</item>
<item>
<title>使用Tornado和协程爬取博客园文章 - Harvard_Fly</title>
<link>http://www.cnblogs.com/FG123/p/9934279.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/FG123/p/9934279.html</guid>
<description>&lt;p&gt;&lt;span&gt;Python3.5后 Tornado官方建议使用async和await的方式实现异步程序，尝试了下使用Tornado和协程爬取博客园的文章并使用peewee_async异步写入MySQL数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一. 博客园文章抓取测试：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里我以我自己的一篇文章详情作为测试url，&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/FG123/p/9934244.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/FG123/p/9934244.html&lt;/a&gt; ，主要是抓取文章标题、内容及作者信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201811/739231-20181113181107067-127442217.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201811/739231-20181113181317376-1323310394.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;文章标题、内容、作者用户名可通过上述的详情页url获取，但是作者信息需通过http://www.cnblogs.com/mvc/blog/news.aspx?blogApp=FG123获取，FG123是我这篇文章的作者用户名，下面看使用beautiful soup抓取测试的代码及结果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;detail_article_html = requests.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/FG123/p/9934244.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).content
author_profile_html &lt;/span&gt;= requests.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/mvc/blog/news.aspx?blogApp=FG123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).content
detail_soup &lt;/span&gt;=&lt;span&gt; BeautifulSoup(detail_article_html)
title &lt;/span&gt;= detail_soup.find(id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cb_post_title_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).get_text()
info &lt;/span&gt;= detail_soup.find(id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_post_body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
author_soup &lt;/span&gt;=&lt;span&gt; BeautifulSoup(author_profile_html)
author &lt;/span&gt;= author_soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div &amp;gt; a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
author_name &lt;/span&gt;=&lt;span&gt; author[0].get_text()
blog_age &lt;/span&gt;= author[1&lt;span&gt;].get_text()
fans_num &lt;/span&gt;= author[2&lt;span&gt;].get_text()
follow_num &lt;/span&gt;= author[3&lt;span&gt;].get_text()

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章标题：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(title))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博主昵称：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(author_name))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博主园龄：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(blog_age))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;粉丝数：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(fans_num))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;关注数：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(follow_num))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章内容：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(info))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201811/739231-20181113190951193-628472762.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二. 使用Tornado和协程异步抓取逻辑：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里的抓取逻辑采用&lt;a href=&quot;http://www.tornadoweb.org/en/stable/guide/queues.html&quot; target=&quot;_blank&quot;&gt;tornado官方文档爬虫例子&lt;/a&gt;的逻辑，使用Tornado的Queue实现异步生产者/消费者模式，当Queue满时会切换协程，首先定义协程通过解析url获取相关链接并去除无效的链接：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_068a6a6c-c224-4d53-b4b5-64b4462348dd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_068a6a6c-c224-4d53-b4b5-64b4462348dd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_068a6a6c-c224-4d53-b4b5-64b4462348dd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; async &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_links_from_url(url):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    通过AsyncHTTPClient异步fetch url，
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    通过BeautifulSoup提取解析内容中的所有url
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    :param url:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    :return:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     response =&lt;span&gt; await httpclient.AsyncHTTPClient().fetch(url)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fetched %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; url)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     html = response.body.decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, errors=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     soup =&lt;span&gt; BeautifulSoup(html)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; set([urljoin(url, remove_fragment(a.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; a &lt;span&gt;in&lt;/span&gt; soup.find_all(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, href=&lt;span&gt;True)])
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; remove_fragment(url):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    去除无效的链接
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    :param url: 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    :return: 
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     pure_url, frag =&lt;span&gt; urldefrag(url)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; pure_url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;当前url通过调用协程获取它包含的有效url_list，并将非外链接的url放入tornado的queue中：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_62a854e1-e973-4266-b210-1ef1bdeed92e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_62a854e1-e973-4266-b210-1ef1bdeed92e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_62a854e1-e973-4266-b210-1ef1bdeed92e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; async &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fetch_url(current_url):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        fetching是已爬取过的url集合，
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        通过调用协程get_links_from_url获取current_url所有的url，
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        并将 非外链接 放入到queue中
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :param current_url:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; current_url &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fetching:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fetching %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; current_url)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        fetching.add(current_url)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         urls =&lt;span&gt; await get_links_from_url(current_url)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        fetched.add(current_url)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; new_url &lt;span&gt;in&lt;/span&gt;&lt;span&gt; urls:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 非外链接&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; new_url.startswith(base_url) &lt;span&gt;and&lt;/span&gt; new_url.endswith(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 await q.put(new_url)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用async for的方式取出queue中的url，&lt;/span&gt;&lt;span&gt;并调用协程fetch_url获取它包含的urls，&lt;/span&gt;&lt;span&gt;调用协程get_info_data获取url页面详情数据：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_41673ad7-4cec-4359-b9f1-63762c6a87b9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_41673ad7-4cec-4359-b9f1-63762c6a87b9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_41673ad7-4cec-4359-b9f1-63762c6a87b9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; async &lt;span&gt;def&lt;/span&gt;&lt;span&gt; worker():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        使用async for的方式取出q中的url
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        并调用协程fetch_url获取它包含的urls
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        调用协程get_info_data获取url页面详情数据
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        :return:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         async &lt;span&gt;for&lt;/span&gt; url &lt;span&gt;in&lt;/span&gt;&lt;span&gt; q:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; url &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                await fetch_url(url)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                await get_info_data(url)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Exception: %s %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (e, url))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;finally&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 q.task_done()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;定义&lt;/span&gt;&lt;span&gt;主协程，通过tornado的gen.multi同时初始化concurrency个协程，&lt;/span&gt;&lt;span&gt;并将协程放入到事件循环中等待完成，等到队列全部为空或超时的时候放入与协程&lt;/span&gt;&lt;span&gt;数量相同的None来结束协程的事件循环。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_3bfd12fc-b524-435c-badb-b6a0136b2533&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3bfd12fc-b524-435c-badb-b6a0136b2533&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_3bfd12fc-b524-435c-badb-b6a0136b2533&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; async &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    主协程，通过tornado的gen.multi同时初始化concurrency个协程，
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    并将协程放入到事件循环中等待完成，等到队列全部为空或超时
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    :return:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     q =&lt;span&gt; queues.Queue()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     fetching, fetched =&lt;span&gt; set(), set()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 放入初始url到队列&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    await q.put(base_url)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     workers = gen.multi([worker() &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(concurrency)])
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     await q.join(timeout=timedelta(seconds=300&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;assert&lt;/span&gt; fetching ==&lt;span&gt; fetched
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Done in %d seconds, fetched %s URLs.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         time.time() -&lt;span&gt; start, len(fetched)))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 队列中放入concurrency数量的None 结束相应协程 在worker()中取到None会结束&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(concurrency):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        await q.put(None)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         
&lt;span&gt;24&lt;/span&gt;     await workers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;三. 使用&lt;/span&gt;&lt;span&gt;peewee_async和aiomysql将爬取的数据异步写入MySQL数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;&lt;span&gt;peewee创建并生成model：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_6d1b74dd-8d73-4ee8-8293-311d5fc9b915&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6d1b74dd-8d73-4ee8-8293-311d5fc9b915&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_6d1b74dd-8d73-4ee8-8293-311d5fc9b915&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding:utf-8&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; peewee &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; peewee_async
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; database =&lt;span&gt; peewee_async.MySQLDatabase(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.xx.xx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     port=3306, user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxxxxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; objects =&lt;span&gt; peewee_async.Manager(database)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;database.set_allow_sync(True)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Blogger(Model):
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     article_id = CharField(max_length=50, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     title = CharField(max_length=150, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     content = TextField(null=True, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     author_name = CharField(max_length=50, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博主昵称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     blog_age = CharField(max_length=50, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;园龄&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     fans_num = IntegerField(null=True, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;粉丝数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     follow_num = IntegerField(null=True, verbose_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;关注数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         database =&lt;span&gt; database
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         table_name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blogger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_table():
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    database.create_tables([Blogger])
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     init_table()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;获取博客文章的详情信息，并将信息异步写入MySQL数据库：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;span&gt;&lt;img id=&quot;code_img_closed_16dc2cec-432d-4ed4-a82f-b5e393b599fa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_16dc2cec-432d-4ed4-a82f-b5e393b599fa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;div id=&quot;cnblogs_code_open_16dc2cec-432d-4ed4-a82f-b5e393b599fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; async &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_info_data(url):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    获取详情信息并异步写入MySQL数据库
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    :param url:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    :return:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     response =&lt;span&gt; await httpclient.AsyncHTTPClient().fetch(url)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     html = response.body.decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     soup =&lt;span&gt; BeautifulSoup(html)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     title = soup.find(id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cb_post_title_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).get_text()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     content = soup.find(id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_post_body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     name = url.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     article_id = url.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[-1].split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[0]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     author_url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/mvc/blog/news.aspx?blogApp={}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(name)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     author_response =&lt;span&gt; await httpclient.AsyncHTTPClient().fetch(author_url)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     author_html = author_response.body.decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     author_soup =&lt;span&gt; BeautifulSoup(author_html)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     author = author_soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div &amp;gt; a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     author_name =&lt;span&gt; author[0].get_text()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     blog_age = author[1&lt;span&gt;].get_text()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     fans_num = author[2&lt;span&gt;].get_text()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     follow_num = author[3&lt;span&gt;].get_text()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    await objects.create(
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         Blogger, title=&lt;span&gt;title,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         article_id=&lt;span&gt;article_id,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         content=&lt;span&gt;content,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         author_name=&lt;span&gt;author_name,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         blog_age=&lt;span&gt;blog_age,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         fans_num=&lt;span&gt;fans_num,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         follow_num=&lt;span&gt;follow_num
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;爬取结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/739231/201811/739231-20181113224538528-232340953.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 简单体验了下使用Tornado结合协程的方式爬取博客园，这里我开启了10个协程，已经感觉速度很快了，协程间的切换开销是非常小的，而且一个线程或进程可以拥有多个协程，经过实测相比多线程的爬虫确实要快些。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Nov 2018 14:56:00 +0000</pubDate>
<dc:creator>Harvard_Fly</dc:creator>
<og:description>Python3.5后 Tornado官方建议使用async和await的方式实现异步程序，尝试了下使用Tornado和协程爬取博客园的文章并使用peewee_async异步写入MySQL数据库。 一.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/FG123/p/9934279.html</dc:identifier>
</item>
<item>
<title>JQuery模拟网页中自定义鼠标右键菜单 - 粥里有勺糖</title>
<link>http://www.cnblogs.com/roseAT/p/9955309.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/roseAT/p/9955309.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;题外话&lt;/span&gt;.......最近在开发一个网站项目的时候,需要用到网页自定义右键菜单,在网上看了各路前辈大神的操作,头晕目眩,为了达到目的,突然灵机一动,于是便有了这篇文章.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;先放个效果图(沾沾自喜,大神勿喷):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504886/201811/1504886-20181113202835714-1707919088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;废话不多说,进入正题:&lt;/p&gt;

&lt;p&gt;1.首先 我们要禁用掉原网页中右键菜单&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;JQuery代码&lt;/span&gt;
$(selector).on('contextmenu', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样目标区域的右键菜单就无法使用了&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;demo1:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;IE=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;keywords&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        #demo1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; turquoise&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 500px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;demo1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;此区域(带颜色)被禁用了右键菜单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#demo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contextmenu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {//禁用掉#demo1的右键菜单
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.接下来开始编写我们自己的菜单弹出窗口&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;思路:通过捕获鼠标点击时的事件在屏幕上被触发的位置(x,y),然后把我们自己编写的窗口利用CSS中的&quot;定位&quot;显示在哪里.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;span&gt;2.1:如何获取到鼠标在屏幕上点击的事件?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;  JQuery Event.which属性---&lt;/span&gt;&lt;/span&gt;&lt;span&gt;引用JQuery中文手册中的内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;which&lt;/code&gt;属性用于&lt;strong&gt;返回触发当前事件时按下的键盘按键或鼠标按钮&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于键盘和鼠标事件，该属性用于确定你按下的是哪一个键盘按键或鼠标按钮。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;which&lt;/code&gt;属性对DOM原生的&lt;code&gt;event.keyCode&lt;/code&gt;和&lt;code&gt;event.charCode&lt;/code&gt;进行了标准化。&lt;/p&gt;
&lt;p&gt;适用的事件类型主要有键盘事件：keypress、keydown、keyup，以及鼠标事件：mouseup、mousedown。&lt;/p&gt;
&lt;p&gt;该属性属于jQuery的&lt;code&gt;Event&lt;/code&gt;对象(实例)&lt;/p&gt;
&lt;p&gt;    $(selector).on('mousedown',function(event){&lt;/p&gt;
&lt;p&gt;         var code=event.which;//返回值是一个Number类型&lt;/p&gt;
&lt;p&gt;    })&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;event.which属性值&lt;/th&gt;
&lt;th&gt;对应的鼠标按钮&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;鼠标左键&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;鼠标中键(滚轮键)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;鼠标右键&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; $('#demo1').on('mousedown',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){//紧接上面的实例demo1 在script中插入这段代码即可获取到鼠标点击事件
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; code=&lt;span&gt;event.which;//判断是单机了鼠标哪个键(1,2,3)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             alert('区域被鼠标点击了---'+&lt;span&gt;code);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.2 如何获取事件发生的位置(X,Y)?&lt;/p&gt;
&lt;p&gt;引用一位前辈的:链接: https://www.cnblogs.com/king-ying/p/5936429.html&lt;/p&gt;
&lt;p&gt; event对象中的属性:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; event.offsetX &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于触发事件的对象的 x 坐标&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; event.offsetY &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于触发事件的对象的 y 坐标&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; event.pageX   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于页面左上角的 x 坐标&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; event.pageY   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于页面左上角的 y 坐标&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; event.clientX &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于浏览器窗口可视区域的 x 坐标，其中客户区域不包括窗口自身的控件和滚动条&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; event.clientY &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于浏览器窗口可视区域的 y 坐标，其中客户区域不包括窗口自身的控件和滚动条&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; event.screenX &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取获取鼠标指针位置相对于屏幕的 x 坐标&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; event.screenY &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置或获取鼠标指针位置相对于屏幕的 y 坐标&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;在上面的demo1的 js 代码中 增添 两句&lt;br/&gt;1&lt;/span&gt; $('#demo1').on('mousedown',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; code=&lt;span&gt;event.which;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; x=event.pageX;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对于页面左上角X的坐标&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; y=event.pageY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对于页面左上角Y的坐标&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;             alert('区域被点击了'+code+&quot;位置:&quot;+'('+x+','+y+')'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 为了方便观察 重新做了一个demo2(复制粘贴即可运行):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;IE=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;keywords&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        #demo1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; turquoise&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 500px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        #click-pos&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bisque&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            min-width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;click-pos&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;显示内容
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;demo1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;此区域(带颜色)被禁用了右键菜单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;禁用掉区域的默认右键事件&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#demo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contextmenu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#demo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mousedown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; code&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;event.which;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; x&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;event.pageX;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对于页面左上角X的坐标&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; y&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;event.pageY;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对于页面左上角Y的坐标&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; mouse&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击类型&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(code){
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:mouse&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;左键&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:mouse&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中键(滚轮)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:mouse&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;右键&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#click-pos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击类型:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;mouse&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--位置-X:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-Y:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;y);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示到页面上&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 核心部分差不多就是上面的内容&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.编写自定义菜单&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;达到的显示效果:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1504886/201811/1504886-20181113223531320-1206697656.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; 废话不多上代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;IE=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;description&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;keywords&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;        #demo1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; turquoise&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #fff&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 500px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;        #click-pos &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bisque&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            min-width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 右键菜单遮罩层 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        #layer &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; transparent&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        #mouse-menu &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; fixed&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;            z-index&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;            right&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 130px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            max-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 120px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #f1ecec&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 8px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 0 4px #ddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 菜单的每个选项 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        #mouse-menu li &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            border-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        #mouse-menu li:last-child &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 当鼠标移入时 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        #mouse-menu li:hover &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deepskyblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;click-pos&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    显示内容
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;demo1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;在此区域启用自定义菜单,原菜单已禁用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 最外层为遮罩层,用于绑定点击任意位置关闭菜单事件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 默认隐藏 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;layer&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;display:none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;mouse-menu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选项卡1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选项卡2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选项卡3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选项卡4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选项卡5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选项卡6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;禁用掉区域的默认右键事件&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#demo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contextmenu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#layer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contextmenu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#demo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mousedown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; code &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.which;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.pageX;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对于页面左上角X的坐标&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.pageY;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对于页面左上角Y的坐标&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; mouse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击类型&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (code) {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;: mouse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;左键&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;: mouse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中键(滚轮)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;: mouse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;右键&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#click-pos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击类型:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; mouse &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--位置-X:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-Y:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; y);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;坐标显示到页面上&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是鼠标右键召唤出弹出菜单&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (code &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;                $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#layer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).show();
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变菜单的位置到事件发生的位置&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;                $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#mouse-menu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).css(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, x);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;                $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#mouse-menu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).css(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, y);
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 点击选项卡时触发&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#layer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示当前点击的内容&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ssss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).html();
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#click-pos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).html(text);
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; event.stopPropagation();//阻止事件冒泡&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击遮罩层时隐藏需要的菜单&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#layer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).hide();
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;emmmm以上就是今天的内容(也许有点粗糙.第一次写这么长,有问题欢迎评论或者私信)&lt;/p&gt;

</description>
<pubDate>Tue, 13 Nov 2018 14:38:00 +0000</pubDate>
<dc:creator>粥里有勺糖</dc:creator>
<og:description>题外话.......最近在开发一个网站项目的时候,需要用到网页自定义右键菜单,在网上看了各路前辈大神的操作,头晕目眩,为了达到目的,突然灵机一动,于是便有了这篇文章. 先放个效果图(沾沾自喜,大神勿喷</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/roseAT/p/9955309.html</dc:identifier>
</item>
<item>
<title>jdbc-DAO的实现 - earth腾飞</title>
<link>http://www.cnblogs.com/tfper/p/9955216.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tfper/p/9955216.html</guid>
<description>&lt;h2 id=&quot;什么是-dao&quot;&gt;什么是 DAO&lt;/h2&gt;
&lt;p&gt;DAO(Data Access Object)是一个数据访问接口，夹在业务逻辑与数据库资源中间。&lt;/p&gt;
&lt;p&gt;在核心J2EE模式中是这样介绍DAO模式的：为了建立一个健壮的J2EE应用，应该将所有对数据源的访问操作抽象封装在一个公共API中。用程序设计的语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口在逻辑上对应这个特定的数据存储。DAO中的主要操作:增删改查(CRUD).&lt;/p&gt;
&lt;h2 id=&quot;dao的实现&quot;&gt;DAO的实现&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;实现的步骤一般是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;先建立模型的对象domain&lt;/li&gt;
&lt;li&gt;编写DAO接口&lt;/li&gt;
&lt;li&gt;定义DAO实现类&lt;/li&gt;
&lt;li&gt;生产DAO测试类&lt;/li&gt;
&lt;li&gt;在DAO测试类中测试方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一般的规范&lt;/strong&gt;是分domain包和dao包，dao包中有DAO接口，接口名为IXxxDAO,实现类为XxxDAO,创建实现类对象赋给接口，体现多态。还有一个测试类名为XxxTestDAOTest.如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/11/13/iOjQzt.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DAO接口：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface IStudentDAO {
    /**
     * 保存学生对象
     * @param stu 需要保存的学生
     */
    void save(Student stu);

    /**
     * 删除指定id的学生
     * @param id  需要删除的学生的id
     */
    void delete(int id);

    /**
     * 更改操作
     * @param newStu 更改后的学生对象，根据id更改
     */
    void update(Student newStu);

    /**
     * 根据id查询单个学生对象信息
     * @param id  需要查询学生的id
     * @return  存在该学生返回学生对象  不存在则返回null
     */
    Student get(long id );

    /**
     * 查询所有学生
     * @return  返回一个学生对象的集合
     */
    List&amp;lt;Student&amp;gt; list();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现类：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void save(Student stu) {
        String sql = &quot;INSERT INTO s_student(name,age) VALUES('狗哲',21)&quot;;
        Connection conn = null;
        Statement st = null
        try {
            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
            conn = DriverManager.getConnection(&quot;jdbc:mysql:///demo&quot;,&quot;root&quot;,&quot;admin&quot;);
            st = conn.createStatement();
            st.executeUpdate(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            try{
                if(st != null){
                    st.close();
                }
            }catch (Exception e){
                e.printStackTrace();
            }finally {
                try{
                    if(conn != null){
                        conn.close();
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }
            }
        }
    }
增删改只有sql语句不一样，省略
····
····
public List&amp;lt;Student&amp;gt; list() {
    String sql = &quot;SELECT * FROM s_student&quot;;
    Connection conn = null;
    Statement st = null;
    ResultSet rs = null;
    List&amp;lt;Student&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
    try {
        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
        conn = DriverManager.getConnection(&quot;jdbc:mysql:///demo&quot;,&quot;root&quot;,&quot;admin&quot;);
        st = conn.createStatement();
        rs = st.executeQuery(sql);
        while(rs.next()){
            String name = rs.getString(&quot;name&quot;);
            Integer age = rs.getInt(&quot;age&quot;);
            list.add(new Student(name,age));
        }

    } catch (Exception e) {
        e.printStackTrace();
    }finally {
        try{
            if(st != null){
                st.close();
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(conn != null){
                    conn.close();
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
    return  list;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;dao实现的重构&quot;&gt;DAO实现的重构&lt;/h2&gt;
&lt;p&gt;可以看出代码重复非常之多，尤其是增删改只有sql语句不一样&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、定义一个JdbcUtil类，把加载注册驱动放到静态代码块中，因为没有必要每次都去加载。&lt;/li&gt;
&lt;li&gt;2、把url，classDriverName,username,password ,放在一个资源文件中，用加载资源文件的方式获取这些值，保证了代码的可维护性&lt;/li&gt;
&lt;li&gt;3、异常处理代码也放在工具类中，异常处理及其麻烦，影响代码的美观&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class JdbcUtil {
    private static Properties p = new Properties();
    //加载资源文件
    static{
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        InputStream inStream = loader.getResourceAsStream(&quot;db.properties&quot;);
        try {
            p.load(inStream);
            Class.forName(p.getProperty(&quot;classDriver&quot;));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //获取连接对象
    public static Connection getConn(){
        Connection conn = null;
        try {
             conn = DriverManager.getConnection(p.getProperty(&quot;url&quot;),p.getProperty(&quot;username&quot;), p.getProperty(&quot;password&quot;));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }
    //关闭资源
    public static void close(Connection conn,Statement st,ResultSet rs){
        try{
            if(rs != null){
                rs.close();
            }
        }catch(Exception e){
            e.printStackTrace();
        }finally{
            try{
                if(st != null){
                    st.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally{
                try{
                    if(conn != null){
                        conn.close();
                    }
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 13 Nov 2018 14:26:00 +0000</pubDate>
<dc:creator>earth腾飞</dc:creator>
<og:description>什么是 DAO DAO(Data Access Object)是一个数据访问接口，夹在业务逻辑与数据库资源中间。 在核心J2EE模式中是这样介绍DAO模式的：为了建立一个健壮的J2EE应用，应该将所有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tfper/p/9955216.html</dc:identifier>
</item>
</channel>
</rss>