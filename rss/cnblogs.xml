<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>第一节：框架前期准备篇之Log4Net日志详解 - Yaopengfei</title>
<link>http://www.cnblogs.com/yaopengfei/p/9428206.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaopengfei/p/9428206.html</guid>
<description>&lt;p&gt;&lt;span&gt;一. Log4Net简介&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;25&quot;&gt;
&lt;p&gt;&lt;span&gt;　　Log4net是从Java中的Log4j迁移过来的一个.Net版的开源日志框架，它的功能很强大，可以将日志分为不同的等级，以不同&lt;/span&gt;&lt;span&gt;的格式输出到不同的存储介质中，比如：&lt;/span&gt;&lt;span&gt;数据库、txt文件、内存缓冲区、邮件、控制台、ANSI终端、远程接收端等等，我们这里主要介绍最常用的两种：txt文件和数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（PS：其它的存储介质详见 http://logging.apache.org/log4net/release/config-examples.html）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;Log4net将日志分为五个级别，分别是： FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息），每个级别都对应着一组重载方法进行调用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　官网地址：http://logging.apache.org/log4net/index.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Nuget地址：https://www.nuget.org/packages/log4net/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Nuget安装：Install-Package log4net&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最新版本：2.0.8 （2018-08-09）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　　本节主要围绕两个主要的存储介质：【txt文件】和【SQLServer数据库】展开，涵盖的知识点有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　①. 基本的使用步骤。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　②. 初始化关联配置文件的几种形式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　③. 代码调用详解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　④. 配置文件详解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑤. 简单的封装和在MVC框架中的调用。&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;二. 基本使用步骤&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;我们先以控制台程序为例，简单介绍Log4net存储日志到txt文本文档中，后面在做代码的详解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 新建01-SimpleDemo控制台程序，通过指令 【Install-Package log4net】安装相应程序集。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180808204554316-237816411.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.  在默认配置文件中App.config(B/S程序则为web.config)中进行配置，主要分两块：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　A. 在&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;节点下新增节点下新增(要在其最顶部)：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;configSections&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;section name = &quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot; /&amp;gt;&lt;br/&gt;　　　　&amp;lt;/configSections&amp;gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;　　B. 在&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;根节点下,配置log4net的核心配置代码, 主要节点如下：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;　　　　&amp;lt;log4net&amp;gt; &amp;lt;appender&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;root&amp;gt;&amp;lt;/root&amp;gt; &amp;lt;/log4net&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;详细代码如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6ba8ec05-bb77-4490-9334-0db562e49ba3')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_6ba8ec05-bb77-4490-9334-0db562e49ba3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6ba8ec05-bb77-4490-9334-0db562e49ba3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6ba8ec05-bb77-4490-9334-0db562e49ba3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6ba8ec05-bb77-4490-9334-0db562e49ba3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 1. 添加log4net的节点声明配置代码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;log4net&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2. log4net的核心配置代码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;log4net&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;   
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;把日志信息输出到以日期命名的文件里&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;文件夹的位置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;file &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;D:\MyLog1\&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appendToFile &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;动态生成文件名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;StaticLogFileName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;以日期命名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;DatePattern&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;yyyyMMdd&amp;amp;quot;.log&amp;amp;quot;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rollingStyle &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;Date&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志在日志文件中的布局方式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n出错类：%logger property: [%property{NDC}] - %n错误描述：%message%newline %n&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;使用最小锁定模型（minimal locking model），以允许多个进程可以写入同一个文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lockingModel &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.FileAppender+MinimalLock&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;level &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;ALL&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender-ref&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;log4net&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;supportedRuntime &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;v4.0&quot;&lt;/span&gt;&lt;span&gt; sku&lt;/span&gt;&lt;span&gt;=&quot;.NETFramework,Version=v4.6&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 代码调用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;log4net.Config.XmlConfigurator.Configure();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ILog log = LogManager.GetLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; log.Debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;调试信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 运行结果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809103153360-2115550695.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;截止此处，日志保存成功。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三. 初始化配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　前面提到在默认配置文件中App.config(B/S程序则为web.config)中进行配置，可以通过代码  &lt;span&gt;log4net.Config.XmlConfigurator.Configure(); &lt;span&gt;来初始化配置，或者还可以通过&lt;span&gt; [assembly: log4net.Config.XmlConfigurator()] &lt;/span&gt; 反射的形式进行初始化配置，二者可以达到同样的效果，代表了两种初始化配置文件的形式。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;PS： [assembly: log4net.Config.XmlConfigurator()]  可以加在 当前使用文件的 namespace上作用于当前文件，或者加在在Properties/AssemblyInfo.cs中，则该项目全局都无须在初始化了。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809104554413-1349945021.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809104640467-689931024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;在实际项目中，默认的配置文件里可能包含很多框架的信息，这个时候把 log4net的配置代码再放入进去，就会显得有点杂乱，或者有些“奇葩”的人把默认配置文件改名了，这个时候使用上述默认的两种方式就不好用了，那么这种情况怎么处理呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里重点介绍 通过 log4net.Config.XmlConfigurator.Configure(); 来关联配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;情况一： 使用默认配置文件的情况&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1. 代码配置：log4net.Config.XmlConfigurator.Configure();&lt;/p&gt;
&lt;p&gt;　　2. 反射配置：[assembly: log4net.Config.XmlConfigurator()] &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;情况二：修改默认配置文件的名称为：App1.config &lt;span&gt;(这里只是举例，很少有修改默认配置文件名称的)&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1. 代码配置： 首先将App1.config文件的属性中的“生成操作”改为“&lt;span&gt; &lt;strong&gt;嵌入的资源&lt;/strong&gt;&lt;/span&gt;”，然后通过以下代码进行配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Assembly assembly =&lt;span&gt; Assembly.GetExecutingAssembly();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; xml = assembly.GetManifestResourceStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_01_SimpleDemo.App1.config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; log4net.Config.XmlConfigurator.Configure(xml);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;注：代码中的 _01_SimpleDemo 为命名空间名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;情况三：新建单独xml文件，进行log4net的配置 (推荐采用这种方式，和原配置文件区分开，单独配置方便，处理方式和情况二是一致的)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1. 代码配置：首先将log4net.xml文件的属性中的“生成操作”改为“ &lt;strong&gt;嵌入的资源&lt;/strong&gt;”，然后通过以下代码进行配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Assembly assembly =&lt;span&gt; Assembly.GetExecutingAssembly();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; xml = assembly.GetManifestResourceStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_01_SimpleDemo.log4net.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; log4net.Config.XmlConfigurator.Configure(xml);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;注：代码中的 _01_SimpleDemo 为命名空间名。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;情况四：无论是修改默认配置文件的名称为 或者 新建单独的xml作为配置文件 → 可以通过绝对路径的方式进行处理 【不推荐这种方式】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1. 直接写绝对路径 （注意这种方式【不需要】配置文件属性为 “嵌入的资源”）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; log4net.Config.XmlConfigurator.Configure(&lt;span&gt;new&lt;/span&gt; FileInfo(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\06-我的开发之路\DotNet体系\05-DotNet框架篇\03-Log4net详解\Code\01-SimpleDemo\log4net.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2 通过代码获取绝对路径 （注意这种方式【不需要】配置文件属性的“生成操作”改为 “嵌入的资源”，但需要改为“始终复制”，确保输出到bin文件下）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; assemblyFilePath =&lt;span&gt; Assembly.GetExecutingAssembly().Location;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; assemblyDirPath =&lt;span&gt; Path.GetDirectoryName(assemblyFilePath);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; configFilePath = assemblyDirPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; //log4net.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; log4net.Config.XmlConfigurator.Configure(&lt;span&gt;new&lt;/span&gt; FileInfo(configFilePath));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;PS：B/S程序下通过  log4net.Config.XmlConfigurator.Configure(new FileInfo(Server.MapPath(&quot;~&quot;) + @&quot;/log4net.xml&quot;)); 来配置。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;四. 代码调用详解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Log4net允许多个ILog对象同时存在，通过代码：ILog log = LogManager.GetLogger(&quot;xxx&quot;); 来创建。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　A: 日志级别由高到低分别为：FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息），另外还有 OFF和 ALL 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;几点说明：OFF表示所有信息都不写入，ALL表示所有信息都写入，我们也可以通过：&amp;lt;root&amp;gt;&amp;lt;level value = &quot;WARN&quot; &amp;gt;&amp;lt;/ level &amp;gt;&amp;lt;/root&amp;gt;这样配置，表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;示WARN级别以及高于WARN以上的级别才会被写入日志&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　B: 写入日志的方法有：Debug、Error、Fatal、Info、Warn五个方法，每个方法都有两个重载，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809113643058-207650075.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分享在使用配置文件为log4net.xml的情况下的调用代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   Assembly assembly =&lt;span&gt; Assembly.GetExecutingAssembly();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;var&lt;/span&gt; xml = assembly.GetManifestResourceStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_01_SimpleDemo.log4net.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;  log4net.Config.XmlConfigurator.Configure(xml);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   ILog log = LogManager.GetLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   log.Debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;调试信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   log.Info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;一般信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   log.Warn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;警告&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;try&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;int&lt;/span&gt;.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       log.Error(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;一般错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;   log.Fatal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;致命错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;五. 配置文件详解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Log4net的配置文件主要分为两大部分：分别是 【自定义配置节点】和 【核心代码配置】，自定义配置节点代码固定，如下图，核心代码配置主要位于：&amp;lt;log4net&amp;gt;&amp;lt;/log4net&amp;gt;节点中，里面包括&amp;lt;appender&amp;gt;&amp;lt;/appender&amp;gt;节点配置日日志输出途径 和 &amp;lt;root&amp;gt;&amp;lt;/root&amp;gt;节点，用于设置记录日志的级别和启用哪些输出途径。　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809133946027-1028569818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;几点说明：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.  自定义配置节点  &amp;lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot; /&amp;gt; 代码固定，直接复制即可。&lt;/p&gt;
&lt;p&gt;2.  &amp;lt;root&amp;gt;&amp;lt;/root&amp;gt; 节点主要用来： &lt;strong&gt;配置日志的的输出级别和加载日志的输出途径。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　A：&lt;/strong&gt;&lt;span&gt; level中的value值表示该值及其以上的日志级别才会输出，日志级别包括：&lt;/span&gt;OFF &amp;gt; FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息） &amp;gt; ALL ，比如：&lt;/p&gt;
&lt;pre&gt;
　　　　&amp;lt;level value=&quot;INFO&quot;&amp;gt;&amp;lt;/level&amp;gt; 表示只有INFO及其以上的日志级别才会被保存。
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　PS：OFF表示所有信息都不写入，ALL表示所有信息都写入。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;B：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &amp;lt;appender-ref&amp;gt;&amp;lt;/appender-ref&amp;gt;标签用于加载日志的输出途径代码，&lt;/span&gt;&lt;span&gt;通过ref和appender标签的中name属性相关联，比如：&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
　　　　&amp;lt;appender-ref ref=&quot;RollingFileAppender&quot;&amp;gt;&amp;lt;/appender-ref&amp;gt;&lt;p&gt;&lt;span&gt;3. &amp;lt;appender&amp;gt;&amp;lt;/appender&amp;gt;节点，用来配置日志的输出途径的，本节主要介绍了输出到 txt文本文档中 和 数据库中，txt文本文档在下面的分享的代码中注释已经写的很详细了，主要分享一下数据库表的&lt;br/&gt;　　结构。&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809174345639-1924135211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;详细代码如下：&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一. 添加log4net的自定义配置节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;log4net&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;二. log4net的核心配置代码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;log4net&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;(一) 配置日志的输出途径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1. 输出途径(一) 将日志以回滚文件的形式写到文件中&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.1 文件夹的位置（也可以写相对路径）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;File&quot;&lt;/span&gt;&lt;span&gt;  value&lt;/span&gt;&lt;span&gt;=&quot;D:\MyLog1\&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;相对路径  C/S程序生成在Debug目录下&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;File&quot;  value=&quot;/Logs/&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.2 是否追加到文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;AppendToFile&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.3 使用最小锁定模型（minimal locking model），以允许多个进程可以写入同一个文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lockingModel &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.FileAppender+MinimalLock&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.4 配置Unicode编码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Encoding &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.5 是否只写到一个文件里&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;StaticLogFileName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.6 配置按照何种方式产生多个日志文件 （Date：日期、Size：文件大小、Composite：日期和文件大小的混合方式）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;RollingStyle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Composite&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7 介绍多种日志的的命名和存放在磁盘的形式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.1 在根目录下直接以日期命名txt文件 注意&amp;amp;quot;的位置,去空格 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;DatePattern&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.2 在根目录下按日期产生文件夹，文件名固定 test.log  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;DatePattern&quot; value=&quot;yyyy-MM-dd/&amp;amp;quot;test.log&amp;amp;quot;&quot;  /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.3 在根目录下按日期产生文件夹，这是按日期产生文件夹，并在文件名前也加上日期  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;DatePattern&quot; value=&quot;yyyyMMdd/yyyyMMdd&amp;amp;quot;-test.log&amp;amp;quot;&quot;  /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.4 在根目录下按日期产生文件夹，这再形成下一级固定的文件夹  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;DatePattern&quot; value=&quot;yyyyMMdd/&amp;amp;quot;OrderInfor/test.log&amp;amp;quot;&quot;  /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.8 配置每个日志的大小。【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志，
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;      超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maximumFileSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10MB&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.9 最多产生的日志文件个数，超过则保留最新的n个 将value的值设置-1，则不限文件个数 【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;        与1.8中maximumFileSize文件大小是配合使用的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;MaxSizeRollBackups&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.10 配置文件文件的布局格式，使用PatternLayout，自定义布局&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;记录时间：%date %n线程ID:[%thread] %n日志级别：%-5level %n出错类：%logger property: [%property{NDC}] - %n错误描述：%message%newline %n%newline&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2. 输出途径(二) 记录日志到数据库&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;AdoNetAppender&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.AdoNetAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.1 设置缓冲区大小，只有日志记录超设定值才会一块写入到数据库&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BufferSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.2 引用&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connectionType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.3 数据库连接字符串&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connectionString &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;data source=localhost;initial catalog=LogDB;integrated security=false;persist security info=True;User ID=sa;Password=123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.4 SQL语句插入到指定表&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;commandText &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;INSERT INTO LogInfor ([threadId],[log_level],[log_name],[log_msg],[log_exception],[log_time]) VALUES (@threadId, @log_level, @log_name, @log_msg, @log_exception,@log_time)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.5 数据库字段匹配&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 线程号&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@threadId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%thread&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志级别&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_level&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%level&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志记录类名称&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%logger&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_msg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;5000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%message&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;异常信息  指的是如Infor 方法的第二个参数的值&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_exception&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;2000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.ExceptionLayout&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 日志记录时间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_time&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;DateTime&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.RawTimeStampLayout&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;(二). 配置日志的的输出级别和加载日志的输出途径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1. level中的value值表示该值及其以上的日志级别才会输出&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;OFF &amp;gt; FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息）  &amp;gt; ALL  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;OFF表示所有信息都不写入，ALL表示所有信息都写入&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;level &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;ALL&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2. append-ref标签表示要加载前面的日志输出途径代码  通过ref和appender标签的中name属性相关联&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender-ref&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;AdoNetAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender-ref&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;log4net&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;六. 简单的封装及完整代码分享&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;这里模拟在系统框架中对Log4net进行简单的封装，然后在MVC框架中调用，并分享全部代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　&lt;strong&gt;步骤一：&lt;/strong&gt;新建Ypf.Utils类库，作为工具类库，引入log4net程序集，并将前面用到的log4net.xml 复制进来，改属性为嵌入资源，然后新建LogUtils类（不要起名为LogHelp），对Log4net的方法进行简单的封装，主要包括：初始化代码、ILog实例创建、五类日志级别的封装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809114611103-463451702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; log4net.xml文件代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('aba442b7-1a61-4196-b9c0-4088314b9b5d')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_aba442b7-1a61-4196-b9c0-4088314b9b5d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_aba442b7-1a61-4196-b9c0-4088314b9b5d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('aba442b7-1a61-4196-b9c0-4088314b9b5d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_aba442b7-1a61-4196-b9c0-4088314b9b5d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 一. 添加log4net的自定义配置节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;log4net&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;二. log4net的核心配置代码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;log4net&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;(一) 配置日志的输出途径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1. 输出途径(一) 将日志以回滚文件的形式写到文件中&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.1 文件夹的位置（也可以写相对路径）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;File&quot;&lt;/span&gt;&lt;span&gt;  value&lt;/span&gt;&lt;span&gt;=&quot;D:\MyLog1\&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;相对路径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;File&quot;  value=&quot;Logs/&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.2 是否追加到文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;AppendToFile&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.3 使用最小锁定模型（minimal locking model），以允许多个进程可以写入同一个文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lockingModel &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.FileAppender+MinimalLock&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.4 配置Unicode编码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Encoding &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.5 是否只写到一个文件里&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;StaticLogFileName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.6 配置按照何种方式产生多个日志文件 （Date：日期、Size：文件大小、Composite：日期和文件大小的混合方式）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;RollingStyle&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;Composite&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7 介绍多种日志的的命名和存放在磁盘的形式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.1 在根目录下直接以日期命名txt文件 注意&amp;amp;quot;的位置,去空格 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;DatePattern&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd&amp;amp;quot;.log&amp;amp;quot;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.2 在根目录下按日期产生文件夹，文件名固定 test.log  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;DatePattern&quot; value=&quot;yyyy-MM-dd/&amp;amp;quot;test.log&amp;amp;quot;&quot;  /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.3 在根目录下按日期产生文件夹，这是按日期产生文件夹，并在文件名前也加上日期  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;DatePattern&quot; value=&quot;yyyyMMdd/yyyyMMdd&amp;amp;quot;-test.log&amp;amp;quot;&quot;  /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.7.4 在根目录下按日期产生文件夹，这再形成下一级固定的文件夹  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;param name=&quot;DatePattern&quot; value=&quot;yyyyMMdd/&amp;amp;quot;OrderInfor/test.log&amp;amp;quot;&quot;  /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.8 配置每个日志的大小。【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志，
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;      超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maximumFileSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10MB&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.9 最多产生的日志文件个数，超过则保留最新的n个 将value的值设置-1，则不限文件个数 【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;        与1.8中maximumFileSize文件大小是配合使用的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;MaxSizeRollBackups&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1.10 配置文件文件的布局格式，使用PatternLayout，自定义布局&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;记录时间：%date %n线程ID:[%thread] %n日志级别：%-5level %n出错类：%logger property: [%property{NDC}] - %n错误描述：%message%newline %n%newline&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2. 输出途径(二) 记录日志到数据库&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;AdoNetAppender&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Appender.AdoNetAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.1 设置缓冲区大小，只有日志记录超设定值才会一块写入到数据库&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BufferSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.2 引用&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connectionType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.3 数据库连接字符串&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connectionString &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;data source=localhost;initial catalog=LogDB;integrated security=false;persist security info=True;User ID=sa;Password=123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.4 SQL语句插入到指定表&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;commandText &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;INSERT INTO LogInfor ([threadId],[log_level],[log_name],[log_msg],[log_exception],[log_time]) VALUES (@threadId, @log_level, @log_name, @log_msg, @log_exception,@log_time)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2.5 数据库字段匹配&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 线程号&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@threadId&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%thread&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志级别&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_level&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%level&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志记录类名称&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_name&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%logger&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_msg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;5000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.PatternLayout&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;conversionPattern &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;%message&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;layout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;异常信息  指的是如Infor 方法的第二个参数的值&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_exception&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;2000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.ExceptionLayout&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 日志记录时间&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameterName &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;@log_time&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dbType &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;DateTime&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;layout &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;log4net.Layout.RawTimeStampLayout&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;(二). 配置日志的的输出级别和加载日志的输出途径&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1. level中的value值表示该值及其以上的日志级别才会输出&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;OFF &amp;gt; FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息）  &amp;gt; ALL  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;OFF表示所有信息都不写入，ALL表示所有信息都写入&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;level &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;ALL&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;2. append-ref标签表示要加载前面的日志输出途径代码  通过ref和appender标签的中name属性相关联&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;RollingFileAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender-ref&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appender-ref &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;AdoNetAppender&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appender-ref&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;log4net&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;LogUtils类代码如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9ed2d3ec-b902-481c-83a9-a9bf088f377d')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_9ed2d3ec-b902-481c-83a9-a9bf088f377d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9ed2d3ec-b902-481c-83a9-a9bf088f377d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9ed2d3ec-b902-481c-83a9-a9bf088f377d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9ed2d3ec-b902-481c-83a9-a9bf088f377d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; log4net;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ypf.Utils
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogUtils
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以声明多个日志对象&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ILog log = LogManager.GetLogger(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(LogUtils));
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 01-初始化Log4net的配置
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 初始化Log4net的配置
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; xml文件一定要改为嵌入的资源
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitLog4Net()
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             Assembly assembly =&lt;span&gt; Assembly.GetExecutingAssembly();
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; xml = assembly.GetManifestResourceStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ypf.Utils.log4net.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;            log4net.Config.XmlConfigurator.Configure(xml);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;************************ 五种不同日志级别 ******************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息）&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 01-DEBUG（调试信息）
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Debug(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;            log.Debug(msg);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;exception&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;错误信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Debug(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg, Exception exception)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            log.Debug(msg, exception);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 02-INFO（一般信息）
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Info(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            log.Info(msg);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;exception&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;错误信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Info(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg, Exception exception)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            log.Info(msg, exception);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 03-WARN（警告）
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Warn(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            log.Warn(msg);
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;exception&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;错误信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Warn(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg, Exception exception)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;            log.Warn(msg, exception);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 04-ERROR（一般错误）
&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Error(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            log.Error(msg);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;exception&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;错误信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Error(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg, Exception exception)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            log.Error(msg, exception);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 05-FATAL(致命错误)
&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Fatal(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;            log.Fatal(msg);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;exception&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;错误信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Fatal(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg, Exception exception)
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;            log.Fatal(msg, exception);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt;         
&lt;span&gt;138&lt;/span&gt; 
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　&lt;span&gt;&lt;strong&gt;步骤二：&lt;/strong&gt;新建名Ypf.MVC的MVC5框架，添加对Ypf.Utils类库的引用，在Global.asax全局文件中添加对 对Log4net进行初始化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201808/1031302-20180809115333436-679300298.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　然后就可以愉快的进行调用测试了哦。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('49e2d6a9-9690-43a1-bc64-e0c5706a54f8')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_49e2d6a9-9690-43a1-bc64-e0c5706a54f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_49e2d6a9-9690-43a1-bc64-e0c5706a54f8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('49e2d6a9-9690-43a1-bc64-e0c5706a54f8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_49e2d6a9-9690-43a1-bc64-e0c5706a54f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 测试log4net
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 首先需要再Global中初始化log4net
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FATAL(致命错误) &amp;gt; ERROR（一般错误） &amp;gt; WARN（警告） &amp;gt; INFO（一般信息） &amp;gt; DEBUG（调试信息）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             LogUtils.Debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 LogUtils.Debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ex);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;             LogUtils.Info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 LogUtils.Info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;             LogUtils.Warn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 LogUtils.Warn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;             LogUtils.Error(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 LogUtils.Error(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;             LogUtils.Fatal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 LogUtils.Fatal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;出错了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;



&lt;div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;作       者 : &lt;span&gt;Yaopengfei(姚鹏飞)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;博客地址 : &lt;a href=&quot;http://www.cnblogs.com/yaopengfei/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yaopengfei/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;声     明1 : 本人才疏学浅，用郭德纲的话说“我是一个小学生”，如有错误，欢迎讨论，请勿谩骂^_^。&lt;/li&gt;
&lt;li&gt;声     明2 : 原创博客请在转载时保留原文链接或在文章开头加上本人博客地址，否则保留追究法律责任的权利。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 09 Aug 2018 23:33:00 +0000</pubDate>
<dc:creator>Yaopengfei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaopengfei/p/9428206.html</dc:identifier>
</item>
<item>
<title>Python网络编程（epoll内核监听，多任务多进程） - ParisGabriel</title>
<link>http://www.cnblogs.com/ParisGabriel/p/9452653.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ParisGabriel/p/9452653.html</guid>
<description>&lt;p&gt;OJBK &lt;/p&gt;

&lt;p&gt;接着昨天的说 select模块内的epoll函数还没说  说完epoll和本地套接字套接字基本就没了&lt;/p&gt;
&lt;p&gt;今天主要是多进程   理论性东西比较多  主要是理解&lt;/p&gt;


&lt;div&gt;&lt;img src=&quot;http://img.mp.itc.cn/upload/20160521/393ed93e71bf4d0fbad50ed019b35bcd_th.jpg&quot; alt=&quot;393ed93e71bf4d0fbad50ed019b35bcd_th.jpg&quot;/&gt;&lt;/div&gt;


&lt;p&gt;epoll&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;    使用方法：代码与poll基本一致（Python语言中）&lt;/li&gt;
&lt;li&gt;    将生产的对象改为 epoll = epoll（）&lt;/li&gt;
&lt;li&gt;    将关注事件类别名改为epoll的关注事件类别&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;         epoll基本所有的方法和常量都一致  再原poll的常量名前加个E&lt;/p&gt;
&lt;p&gt;         创建方法改为 epoll（）就可以了  这种情况只在Python中才会这么简单&lt;/p&gt;
&lt;p&gt;         epoll在别的语言实现比python要复杂的多&lt;/p&gt;
&lt;p&gt;    区别：&lt;/p&gt;
&lt;p&gt;          epoll 效率要高于select 和 poll&lt;/p&gt;
&lt;p&gt;          epoll 的触发机制更多  EPOLLET（边缘触发）&lt;/p&gt;
&lt;p&gt;          边缘触发是什么？&lt;/p&gt;
&lt;p&gt;                   这就是epoll和poll的区别所在了 为什么说epoll效率会高呢&lt;/p&gt;
&lt;p&gt;                   因为epoll的触发机制是在内核中直接完成整个功能 那个事件准备就绪我就直接返回这个IO事件&lt;/p&gt;
&lt;p&gt;                   而poll的触发方式是什么呢 是我什么时候有IO准备就绪了我就把整所有的事件都返回&lt;/p&gt;
&lt;p&gt;                  返回到应用层后再次做筛选处理  即使你的计算很快 也是会浪费很多事件去处理&lt;/p&gt;

&lt;p&gt;Linux下文件类型：&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;bcd -lsp&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;         b（快  设备文件）&lt;/p&gt;
&lt;p&gt;         c（字符设备文件）&lt;/p&gt;
&lt;p&gt;         d（目录）&lt;/p&gt;
&lt;p&gt;         -（普通文件）&lt;/p&gt;
&lt;p&gt;         l（链接文件）&lt;/p&gt;
&lt;p&gt;         s（套接字文件）&lt;/p&gt;
&lt;p&gt;         p（管道文件）   &lt;/p&gt;

&lt;p&gt;本地套接字：&lt;/p&gt;

&lt;p&gt;   作用：&lt;/p&gt;
&lt;p&gt;      用于本地文件不同程序间进行数据传输&lt;/p&gt;
&lt;p&gt;   本地套接字传输流程：&lt;/p&gt;
&lt;p&gt;      1.创建本地套接字对象&lt;/p&gt;
&lt;p&gt;          sockfd = socket（AF_UNIX, SOCK_STREAM）&lt;/p&gt;
&lt;p&gt;      2.绑定套接字文件，如果文件不存在则自动创建 存在则报错&lt;/p&gt;
&lt;p&gt;         sockfd.bind（file）&lt;/p&gt;
&lt;p&gt;      3.监听&lt;/p&gt;
&lt;p&gt;         listen&lt;/p&gt;
&lt;p&gt;      4.消息收发&lt;/p&gt;
&lt;p&gt;         recv send&lt;/p&gt;


&lt;p&gt;os.path.exists（file）&lt;/p&gt;
&lt;p&gt;   功能：判断一个文件是否存在&lt;/p&gt;
&lt;p&gt;   参数：文件名&lt;/p&gt;
&lt;p&gt;   返回值：bool&lt;/p&gt;

&lt;p&gt;os.remove（）&lt;/p&gt;
&lt;p&gt;os.unlink（）&lt;/p&gt;
&lt;p&gt;   功能：删除文件&lt;/p&gt;
&lt;p&gt;   阐述：要删除的文件&lt;/p&gt;




&lt;p&gt;网络基础总结：&lt;/p&gt;
&lt;p&gt;   理论：&lt;/p&gt;
&lt;p&gt;     1.&lt;span&gt;OSI&lt;/span&gt;七成模型  tcp/ip模型&lt;/p&gt;
&lt;p&gt;     2.&lt;span&gt;tcp &lt;/span&gt;和 &lt;span&gt;UDP&lt;/span&gt;的区别和特性&lt;/p&gt;
&lt;p&gt;     3.三次握手和四次挥手的过程和每一次的作用&lt;/p&gt;
&lt;p&gt;     4.什么是&lt;span&gt;IO&lt;/span&gt;多路复用&lt;/p&gt;
&lt;p&gt;     5.套接字的种类，套接字类型的区别&lt;/p&gt;
&lt;p&gt;   程序实践;&lt;/p&gt;
&lt;p&gt;     1.tcp套接字传输的基本模型&lt;/p&gt;
&lt;p&gt;     2.udp套接字传输的基本模型&lt;/p&gt;
&lt;p&gt;     3.IO多路复用select、poll&lt;/p&gt;
&lt;p&gt;     4.HTTP协议基本原理的时间&lt;/p&gt;

&lt;p&gt;多任务编程：&lt;/p&gt;
&lt;p&gt;   意义：&lt;/p&gt;
&lt;p&gt;     充分利用计算机资源，同时运行多个任务，&lt;/p&gt;
&lt;p&gt;     提高程序整体的运行效率&lt;/p&gt;
&lt;p&gt;   定义：&lt;/p&gt;
&lt;p&gt;     通过程序利用计算机的多个核心达到同时执行多个任务的目的&lt;/p&gt;
&lt;p&gt;     因此达到提升程序运行效率的目的&lt;/p&gt;
&lt;p&gt;   实施方案：&lt;/p&gt;
&lt;p&gt;     多进程编程&lt;/p&gt;
&lt;p&gt;     多线程编程&lt;/p&gt;
&lt;p&gt;    &lt;span&gt; 并行：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        多个计算机核心在同时处理多个任务，&lt;/p&gt;
&lt;p&gt;这时多个任务之间是并行关系&lt;/p&gt;
&lt;p&gt;    &lt;span&gt; 并发：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        同时运行多个任务，内核在多个任务之间的不断切换，&lt;/p&gt;
&lt;p&gt;达到多个任务都会执行的处理效果&lt;/p&gt;
&lt;p&gt;此时多个任务之间是并发关系&lt;/p&gt;

&lt;p&gt;进程：&lt;/p&gt;
&lt;p&gt;    程序在计算机中的一次执行过程&lt;/p&gt;

&lt;p&gt;程序：&lt;/p&gt;
&lt;p&gt;    是一个可执行文件，是静态的，只占有磁盘&lt;/p&gt;
&lt;p&gt;    不占用计算机运行资源&lt;/p&gt;
&lt;p&gt;进程：&lt;/p&gt;
&lt;p&gt;    是一个动态过程，占有一定的计算机资源&lt;/p&gt;
&lt;p&gt;    有一定的生命周期&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;    同一个程序不同的运行过程是不同的进程，&lt;/p&gt;
&lt;p&gt;    因为分配的资源和生命周期都不同&lt;/p&gt;

&lt;p&gt;进程的创建过程：&lt;/p&gt;
&lt;p&gt;    1.用户启动一个程序，或是调用接口发起进程创建&lt;/p&gt;
&lt;p&gt;    2.操作系统接收用户请求分配计算机资源创建进程&lt;/p&gt;
&lt;p&gt;    3.操作系统将一定状态的进程提供给用户使用&lt;/p&gt;
&lt;p&gt;    4.用户利用操作提供的进程完成任务&lt;/p&gt;
&lt;p&gt;CPU时间片：&lt;/p&gt;
&lt;p&gt;    如果有个进程占有CPU此时我们称为该进程占有CPU的时间片&lt;/p&gt;
&lt;p&gt;    多个进程任务或轮流占有CPU时间片并形成并发效果&lt;/p&gt;

&lt;p&gt;进程信息（process）&lt;/p&gt;
&lt;p&gt;    PCB（进程控制块）：&lt;/p&gt;
&lt;p&gt;         进程创建后 会自动在内存中产生一个空间存放进程信息&lt;/p&gt;
&lt;p&gt;    进程信息：&lt;/p&gt;
&lt;p&gt;        进程ID 进程占有内存的位置  创建时间、创建位置&lt;/p&gt;
&lt;p&gt;查看系统进程信息：&lt;span&gt;ps -aux&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    PID（process ID）：&lt;/p&gt;
&lt;p&gt;      在操作系统中每个进程都有唯一的PID值是由系统分配的&lt;/p&gt;
&lt;p&gt;进程特征：&lt;/p&gt;
&lt;p&gt;    进程是操作系统分配资源的最小单元&lt;/p&gt;
&lt;p&gt;    每个进程拥有自己独立的运行空间（4个G的虚拟内存空间）&lt;/p&gt;
&lt;p&gt;    进程之间相互独立各不影响&lt;/p&gt;
&lt;p&gt;进程的状态：&lt;/p&gt;
&lt;p&gt;    三态：&lt;/p&gt;
&lt;p&gt;    就绪状态：&lt;/p&gt;
&lt;p&gt;         进程具备执行条件，等待系统分配处理器资源进入运行态&lt;/p&gt;
&lt;p&gt;    运行态：&lt;/p&gt;
&lt;p&gt;         进程占有CPU处于运行状态&lt;/p&gt;
&lt;p&gt;    等待态：&lt;/p&gt;
&lt;p&gt;         进程暂时不具备运行条件，需要阻塞等待&lt;/p&gt;

&lt;p&gt;    五态：&lt;/p&gt;
&lt;p&gt;         在三态的基础上增加新建和终止态 &lt;/p&gt;
&lt;p&gt; 新建：&lt;/p&gt;
&lt;p&gt;   创建一个新的程序，获取系统资源的过程&lt;/p&gt;
&lt;p&gt; 终止：&lt;/p&gt;
&lt;p&gt;   进程执行结束，释放资源的过程&lt;/p&gt;

&lt;p&gt;ps -aux   查询结果的 STAT表示进程状态：&lt;/p&gt;
&lt;p&gt;    D  等待态  阻塞  不可中断等待态&lt;/p&gt;
&lt;p&gt;    S  等待态  睡眠  可中断等待态&lt;/p&gt;
&lt;p&gt;    T  等待态  暂停  暂停执行&lt;/p&gt;
&lt;p&gt;    R  运行态（就绪态）&lt;/p&gt;
&lt;p&gt;    Z  僵尸&lt;/p&gt;
&lt;p&gt;      +  前台进程（在终端运行）&lt;/p&gt;
&lt;p&gt;      &amp;lt;  有较高优先级的进程&lt;/p&gt;
&lt;p&gt;      N  较低优先级的进程&lt;/p&gt;
&lt;p&gt;       s  回话组&lt;/p&gt;
&lt;p&gt;       l  有子进程链接&lt;/p&gt;
&lt;p&gt;进程的优先级：&lt;/p&gt;
&lt;p&gt;   &lt;span&gt; top &lt;/span&gt;查看进程运行态优先级&lt;/p&gt;
&lt;p&gt;    取值范围：&lt;span&gt;-20~19&lt;/span&gt;   -20最高&lt;/p&gt;
&lt;p&gt;    nice：&lt;/p&gt;
&lt;p&gt;       以指定的优先级运行一个程序&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;nice &lt;/span&gt;-9 ./hello.py  以9的优先级运行&lt;/p&gt;
&lt;p&gt;       sudo nice --9 ./hello.py 以-9优先级运行&lt;/p&gt;

&lt;p&gt;    首行添加 #! /usr/bin/python3  指定执行器&lt;/p&gt;
&lt;p&gt;      执行：./hello.py&lt;/p&gt;
&lt;p&gt;    修改程序权限添加可执行权限&lt;/p&gt;
&lt;p&gt;         chmod    775     hello.py&lt;/p&gt;

&lt;p&gt;父子进程：&lt;/p&gt;
&lt;p&gt;    在系统中除了初始化进程外每个进程都有一个父进程，可能有0个或多个子进程&lt;/p&gt;
&lt;p&gt;    由此行成进程间的父子关系&lt;/p&gt;
&lt;p&gt;    便于进程管理，父进程发起创建进程请求&lt;/p&gt;
&lt;p&gt;    查看进程树：&lt;span&gt;pstree&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    查看父子进程ID：&lt;span&gt;ps -ajx&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;os.fork&lt;/span&gt; 创建进程&lt;/p&gt;
&lt;p&gt;    pid = os.fork()&lt;/p&gt;
&lt;p&gt;        功能：创建进程&lt;/p&gt;
&lt;p&gt;        返回值：&lt;/p&gt;
&lt;p&gt;    失败：返回一个负数&lt;/p&gt;
&lt;p&gt;    成功：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       在原有进程中返回新有进程PID号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       在新进程中返回0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;子进程会复制父进程内部全部内存空间包括代码段&lt;/p&gt;
&lt;p&gt;子进程会从fork的下一句开始执行&lt;/p&gt;
&lt;p&gt;父进程中fork返回值即为新创创建子进程的PID号&lt;/p&gt;
&lt;p&gt;使用if语句结构使父子进程进行不同代码段的运行&lt;/p&gt;
&lt;p&gt;在子进程中对变量等其他内容的修改， 不会影响父进程中的内容&lt;/p&gt;
&lt;p&gt;子进程虽然复制父进程内容，但是也有自己的特有属性特征&lt;/p&gt;
&lt;p&gt;  如：PID号  PCB  内存区间&lt;/p&gt;

&lt;p&gt;获取进程的PID&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  os.getpid（）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     功能：获取进程的PID号&lt;/p&gt;
&lt;p&gt;     返回值：返回进程的PID号&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;os.getppid（）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     功能：获取父进程的PID&lt;/p&gt;
&lt;p&gt;     返回值：返回父进程的ID号&lt;/p&gt;
&lt;p&gt;进程退出：&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; os.exit（status）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    功能：退出一个进程&lt;/p&gt;
&lt;p&gt;    参数：进程的退出状态  整数&lt;/p&gt;
&lt;p&gt; &lt;span&gt; sys.exit（[status]）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    功能：退出一个进程&lt;/p&gt;
&lt;p&gt;    参数：默认为0&lt;/p&gt;
&lt;p&gt;          如果传入一个整数如同_exit（）&lt;/p&gt;
&lt;p&gt;  传入一个字符串，则在退出时打印该字符串&lt;/p&gt;
&lt;p&gt;    sys.exit（） 可以通过捕获 SystemExit异常退出&lt;/p&gt;




&lt;div readability=&quot;28&quot;&gt;
&lt;p&gt;什么是进程 进程和程序的区别？&lt;/p&gt;
&lt;p&gt;     进程是一种动态描述 是程序运行的一次过程&lt;/p&gt;
&lt;p&gt;     进程是程序在运行过程中的形态 它占有一定的独立内存空间&lt;/p&gt;
&lt;p&gt;     进程占用CPU及系统资源  而程序不会 程序是静态的 它只会占用磁盘空间&lt;/p&gt;

&lt;p&gt;进程的特征和基本概念？&lt;/p&gt;
&lt;p&gt;        进程是计算机内存资源分配的最小资源&lt;/p&gt;
&lt;p&gt;        每个进程在内存中都有各自各自独立的运行空间&lt;/p&gt;
&lt;p&gt;        并且每个进程之间互不影响&lt;/p&gt;

&lt;p&gt;并发并行的区别？&lt;/p&gt;
&lt;p&gt;并行是不同系统核心同时进行进程的运行 两个进程之间的关系叫做并行&lt;/p&gt;
&lt;p&gt;并发是同一个系统核心进行轮流切换进程的过程叫做并发&lt;/p&gt;
&lt;p&gt;并行是有多个进程同时运行 而并发只能同时运行一个进程&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;进程 fork理解？&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;ul&gt;&lt;li&gt;     进程fork是一个创建子进程的os模块函数&lt;/li&gt;
&lt;li&gt;     他能够在只运行一个程序的情况下 创建多个进程并运行&lt;/li&gt;
&lt;li&gt;     创建出来的进程叫做该进程的子进程 并且子进程与父进程是并发运行&lt;/li&gt;
&lt;li&gt;     谁先占有资源谁先运行 没有顺序之分&lt;/li&gt;
&lt;li data-spm-anchor-id=&quot;a2c4e.11153940.blogcont624103.i0.3850298e3Tem8y&quot;&gt;     创建子进程有三个结果创建失败返回负数、成功返回0、正数（代表原有进程ID）&lt;/li&gt;
&lt;li&gt;     如果创建子进程成功 返回值为该子进程的ID 并且在该子进程中返回0&lt;/li&gt;
&lt;li&gt;     其实就是创建成功时返回原进程ID 当子进程独立运行时在子进程内返回0&lt;/li&gt;
&lt;li&gt;     子进程创建成功后悔会在内存中开辟以个新的空间 此空间内的所有代码和参数&lt;/li&gt;
&lt;li&gt;     都会复制父进程的   但是有自己的进程属性  是独立进程  子进程的所有操作不会影响父进程&lt;/li&gt;
&lt;li&gt;     在创建子进程后运行位置是从fork函数return后开始执行的&lt;/li&gt;
&lt;li&gt;     利用if结构就能达到多进程同时运行同程序内的不同代码段&lt;/li&gt;
&lt;li&gt;     这样就能大大提高程序的执行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此可以看出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
pid &lt;/span&gt;=&lt;span&gt; os.fork()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; pid &amp;lt;&lt;span&gt; 0:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; pid ==&lt;span&gt; 0:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(pid)
    time.sleep(&lt;/span&gt;2&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(pid)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
    time.sleep(&lt;/span&gt;5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;原进程&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(pid)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201808/1430617-20180810003446055-1331157421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 09 Aug 2018 16:36:00 +0000</pubDate>
<dc:creator>ParisGabriel</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ParisGabriel/p/9452653.html</dc:identifier>
</item>
<item>
<title>python——python3.6环境搭建 - 翠竹09</title>
<link>http://www.cnblogs.com/cuizhu/p/9452192.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cuizhu/p/9452192.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.python软件资源下载&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1.1 打开python官网地址：https://www.python.org&lt;/p&gt;

&lt;p&gt;　　1.2 根据自己电脑的设置选择下载合适的python3.6.2&lt;/p&gt;

&lt;p&gt;　　1.3 此处选择windows10,64位的&lt;a href=&quot;https://www.python.org/ftp/python/3.6.2/python-3.6.2-amd64.exe&quot;&gt;Windows x86-64 executable installer&lt;/a&gt;，网页上点击&lt;a href=&quot;https://www.python.org/ftp/python/3.6.2/python-3.6.2-amd64.exe&quot;&gt;Windows x86-64 executable installer&lt;/a&gt;进行下载，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809202543902-1172585520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.python3.6.2安装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2.1下载完成后，会得到一个.exe的执行文件，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809202813949-371106261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2.2双击这个.exe文件，进行安装。&lt;/p&gt;
&lt;p&gt;　　　　 2.2.1 需要注意的是，把python3.6添加到路径中的选项，默认是不选的，但我们最好把它勾选上，避免以后我们还要手动的添加。&lt;/p&gt;
&lt;p&gt;　　　　勾选上后，点击Customize installation修改自己的安装路径，当然也可以选择Install Now选择默认的安装路径。这里选择修改安装路径。&lt;/p&gt;
&lt;p&gt;　    　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809205237656-1011242783.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　2.2.2 根据自己需求，选择Optional Features的设置，此处不作修改，直接点击Next下一步。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809204434694-240307202.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.2.3 点击Browse按钮，选择自己的安装路径，此处选择E:\software\python\python362。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809204759282-49108061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.2.4 修改完毕后，双击Install进行安装。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809205939845-2009722844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.2.5 可能安装需要花费几分钟，请耐心等待。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809210126492-1185559664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.2.6 安装完毕后，出现下面界面，&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809210237837-2064530324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2.3 打开命令提示符，直接输入python运行正常。如果出错，可以把电脑重启一下，再次打开命令提示符输入python就可正常运行了。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809223201793-1511726666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;3 如果在2.2.1中没有选中自动添加环境变量选项，还想直接输入python正常运行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;3.1 打开命令提示符，直接输入python运行出错。切换到安装目录，再次输入python，正常运行。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809223655073-141468615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3.2 可以通过手动添加环境变量可以解决这个直接运行报错的问题。&lt;/p&gt;
&lt;p&gt;　　3.2.1 右键“此电脑”--&amp;gt;选择属性--&amp;gt;选择高级系统设置，得到“系统属性”窗口，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809214346936-128588338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.2.2 点击系统属性窗口中的环境变量按钮，得到 “环境变量”窗口，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809215011629-1179122158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.2.3 点击新建按钮，设置自己的变量名和变量值，填写完成后，点击确定按钮。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809215247133-1264958997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.2.4 双击系统变量里的path变量，新建一个环境变量，要求如下图，&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809215700953-1364524063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.2.5 按照“先打开后关闭”的原则，逐次点击“确定”按钮关闭已经打开的窗口。&lt;/p&gt;

&lt;p&gt;　　3.3 再次打开“开始”里的命令提示符，直接输入python就可以正常运行了，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455187/201808/1455187-20180809223201793-1511726666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 16:03:00 +0000</pubDate>
<dc:creator>翠竹09</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cuizhu/p/9452192.html</dc:identifier>
</item>
<item>
<title>Mybatis的SqlSession运行原理 - JJian</title>
<link>http://www.cnblogs.com/jian0110/p/9452592.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jian0110/p/9452592.html</guid>
<description>&lt;h2&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;21.913245546088&quot;&gt;
&lt;p&gt;&lt;span&gt;　　SqlSession是Mybatis最重要的构建之一，可以简单的认为Mybatis一系列的配置目的是生成类似 JDBC生成的Connection对象的SqlSession对象，这样才能与数据库开启“沟通”，通过SqlSession可以实现增删改查（当然现在更加推荐是使用Mapper接口形式），那么它是如何执行实现的，这就是本篇博文所介绍的东西，其中会涉及到简单的源码讲解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　了解SqlSession的运作原理是学习Mybatis插件的必经之路，因为Mybatis的插件会在SqlSession运行过程中“插入”运行，如果没有很好理解的话，Mybatis插件可能会覆盖相应的源码造成严重的问题。鉴于此，本篇博文尽量详细介绍SqlSession运作原理！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;建议：在我之前的博文《&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/jian0110/p/9387941.html&quot;&gt;Mybatis缓存（1）--------系统缓存及简单配置介绍&lt;/a&gt;》中介绍到SqlSession的产生过程，可以先理解后再读此博文可能会更加好理解！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;strong&gt;　注：本篇博文也是我最近真正理解Mybatis才开始编写的，可能有些地方不太准确，如果有错误之处敬请指出，另外创作不易，望转载告之，谢谢！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;参数资料：《深入浅出Mybatis基础原理与实践》（我这里只有电子版PDF，需要的朋友可以联系我）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;

&lt;h2&gt;&lt;span&gt;1、SqlSession简单介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（1）SqlSession简单原理介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　SqlSession提供select/insert/update/delete方法，在旧版本中使用使用SqlSession接口的这些方法，但是&lt;span&gt;新版的Mybatis中就会建议使用Mapper接口的方法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　映射器其实就是一个&lt;span&gt;动态代理对象&lt;/span&gt;，进入到MapperMethod的&lt;span&gt;execute方法就能简单找到SqlSession的删除、更新、查询、选择方法&lt;/span&gt;，从底层实现来说：通过动态代理技术，让接口跑起来，之后采用命令模式，最后还是采用了SqlSession的接口方法（getMapper()方法等到Mapper）执行SQL查询（&lt;span&gt;也就是说Mapper接口方法的实现底层还是采用SqlSession接口方法实现的&lt;/span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　注：以上虽然只是简单的描述，但实际上源码相对复杂，下面将结合源码进行简单的介绍！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（2）SqlSession重要的四个对象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;span&gt;　1）Execute：调度执行StatementHandler、ParmmeterHandler、ResultHandler执行相应的SQL语句；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2）StatementHandler：使用数据库中Statement（PrepareStatement）执行操作，即底层是封装好了的prepareStatement；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　3）ParammeterHandler：处理SQL参数；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　4）ResultHandler：结果集ResultSet封装处理返回。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2、SqlSession四大对象&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;（1）Execute执行器：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;　执行器起到至关重要的作用，它是真正执行Java与数据库交互的东西，参与了整个SQL查询执行过程中。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;1）主要有三种执行器：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;简易执行器&lt;/span&gt;SIMPLE（&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;不配置就是默认执行器&lt;/span&gt;&lt;/span&gt;）&lt;span&gt;、&lt;/span&gt;&lt;span&gt;REUSE&lt;/span&gt;&lt;span&gt;是一种重用预处理语句、&lt;/span&gt;&lt;span&gt;BATCH&lt;/span&gt;&lt;span&gt;批量更新、批量专用处理器&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Clinton Begin
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; ExecutorType {
  SIMPLE, REUSE, BATCH
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;2）执行器作用：&lt;/span&gt;&lt;span&gt;Executor&lt;span&gt;会先调用&lt;/span&gt;&lt;span&gt;StatementHandler&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;prepare()&lt;/span&gt;&lt;span&gt;方法预编译&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;语句，同时设置一些基本的运行参数，然后调用&lt;/span&gt;&lt;span&gt;parameterize()&lt;/span&gt;&lt;span&gt;方法启用&lt;/span&gt;&lt;span&gt;ParemeterHandler&lt;/span&gt;&lt;span&gt;设置参数，完成预编译，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;简单总结起来就是即先预编译&lt;/span&gt;SQL&lt;span&gt;语句，之后设置参数&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;首先，以SimpleExecutor为例，查看源码我们得到如下几点重要知识点：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一：Executor通过Configuration对象中newExecutor()方法中选择相应的执行器生成&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Executor newExecutor(Transaction transaction, ExecutorType executorType) {
    executorType &lt;/span&gt;= executorType == &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; defaultExecutorType : executorType;
    executorType &lt;/span&gt;= executorType == &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; ExecutorType.SIMPLE : executorType;
    Executor executor;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ExecutorType.BATCH ==&lt;span&gt; executorType) {
      executor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; BatchExecutor(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, transaction);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (ExecutorType.REUSE ==&lt;span&gt; executorType) {
      executor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ReuseExecutor(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, transaction);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      executor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; SimpleExecutor(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, transaction);
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cacheEnabled) {
      executor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CachingExecutor(executor);
    }
    executor &lt;/span&gt;=&lt;span&gt; (Executor) interceptorChain.pluginAll(executor);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; executor;
  }&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;（注：&lt;span&gt;&lt;span&gt;&lt;span&gt;最后interceptorChain.pluginAll()中执行层层动态代理，最后在可以在调用真正的Executor前可以修改插件代码，这也就是为什么学会Mybatis的插件必须要知道SqlSession的运行过程）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;strong&gt;第二：在执行器中StatementHandler是根据Configuration构建的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleExecutor(Configuration configuration, Transaction transaction) {
    &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(configuration, transaction);
  }

  @Override
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; doUpdate(MappedStatement ms, Object parameter) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    Statement stmt &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      Configuration configuration &lt;/span&gt;=&lt;span&gt; ms.getConfiguration();
      &lt;span&gt;StatementHandler handler &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= configuration.newStatementHandler(this, ms, parameter, RowBounds.DEFAULT, null, null&lt;/span&gt;&lt;span&gt;&lt;span&gt;);&lt;/span&gt;
      stmt &lt;/span&gt;=&lt;span&gt; prepareStatement(handler, ms.getStatementLog());
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; handler.update(stmt);
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
      closeStatement(stmt);
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三：&lt;/span&gt;&lt;span&gt;Executor会执行StatementHandler的prepare()方法进行预编译----&amp;gt;填入connection对象----&amp;gt;再调用parameterize()方法设置参数----&amp;gt;完成预编译&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; Statement prepareStatement(StatementHandler handler, Log statementLog) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
    Statement stmt;
    Connection connection &lt;/span&gt;=&lt;span&gt; getConnection(statementLog);
    stmt &lt;/span&gt;=&lt;span&gt; handler.&lt;span&gt;prepare&lt;/span&gt;(connection, transaction.getTimeout());
    handler.&lt;span&gt;parameterize&lt;/span&gt;(stmt);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; stmt;
  }&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　&lt;span&gt;总结以上绘制简单思维图如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1352849/201808/1352849-20180809235948087-1669183890.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;h3 class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;（2）StatementHanlder数据库会话器&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　　　　　&lt;/strong&gt;由Executor的prepareStatement方法中parameterize方法引出StatementHandler&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　　　　　&lt;span&gt;StatementHandler的生成是由Configuration方法中newStatementHandler()方法生成的，但是&lt;span&gt;&lt;strong&gt;StatementHandler&lt;/strong&gt;&lt;/span&gt;是RoutingStatementHandler&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject,&lt;br/&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
    StatementHandler statementHandler &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);
    statementHandler &lt;/span&gt;=&lt;span&gt; (StatementHandler) interceptorChain.pluginAll(statementHandler);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; statementHandler;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;-------------------------------------------未完待续，明天继续写------------------------------------------------------&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 09 Aug 2018 16:02:00 +0000</pubDate>
<dc:creator>JJian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jian0110/p/9452592.html</dc:identifier>
</item>
<item>
<title>经典傅里叶算法小集合 附完整c代码 - cpuimage</title>
<link>http://www.cnblogs.com/cpuimage/p/9452536.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cpuimage/p/9452536.html</guid>
<description>&lt;p&gt;还是想要抽点时间，不依赖第三方库，实现一份不差于fftw的算法，&lt;/p&gt;&lt;p&gt;越是学习，看的资料林林总总，越觉得傅里叶变换的应用面很广。&lt;/p&gt;&lt;div readability=&quot;256&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdbool.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;math.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stddef.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;

#ifndef M_PI
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; M_PI 3.14159265358979323846f
&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;

typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; real, imag;
} cmplx;

cmplx cmplx_mul_add(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; cmplx c, &lt;span&gt;const&lt;/span&gt; cmplx a, &lt;span&gt;const&lt;/span&gt;&lt;span&gt; cmplx b) {
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; cmplx ret =&lt;span&gt; {
            (a.real &lt;/span&gt;* b.real) + c.real - (a.imag *&lt;span&gt; b.imag),
            (a.imag &lt;/span&gt;* b.real) + (a.real * b.imag) +&lt;span&gt; c.imag
    };
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; fft_Stockham(cmplx *input, cmplx *output, size_t n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag) {
    size_t half &lt;/span&gt;= n &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    cmplx &lt;/span&gt;*tmp = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), n);
    cmplx &lt;/span&gt;*y = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), n);
    memcpy(y, input, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t r = half, l = &lt;span&gt;1&lt;/span&gt;; r &amp;gt;= &lt;span&gt;1&lt;/span&gt;; r &amp;gt;&amp;gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        cmplx &lt;/span&gt;*tp =&lt;span&gt; y;
        y &lt;/span&gt;=&lt;span&gt; tmp;
        tmp &lt;/span&gt;=&lt;span&gt; tp;
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; factor_w = -flag * M_PI /&lt;span&gt; l;
        cmplx w &lt;/span&gt;=&lt;span&gt; {cosf(factor_w), sinf(factor_w)};
        cmplx wj &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; l; j++&lt;span&gt;) {
            size_t jrs &lt;/span&gt;= j * (r &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t k = jrs, m = jrs &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;; k &amp;lt; jrs + r; k++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; cmplx t = {(wj.real * tmp[k + r].real) - (wj.imag * tmp[k +&lt;span&gt; r].imag),
                                 (wj.imag &lt;/span&gt;* tmp[k + r].real) + (wj.real * tmp[k +&lt;span&gt; r].imag)};
                y[m].real &lt;/span&gt;= tmp[k].real +&lt;span&gt; t.real;
                y[m].imag &lt;/span&gt;= tmp[k].imag +&lt;span&gt; t.imag;
                y[m &lt;/span&gt;+ half].real = tmp[k].real -&lt;span&gt; t.real;
                y[m &lt;/span&gt;+ half].imag = tmp[k].imag -&lt;span&gt; t.imag;
                m&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; t =&lt;span&gt; wj.real;
            wj.real &lt;/span&gt;= (t * w.real) - (wj.imag *&lt;span&gt; w.imag);
            wj.imag &lt;/span&gt;= (wj.imag * w.real) + (t *&lt;span&gt; w.imag);
        }
        l &lt;/span&gt;&amp;lt;&amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    memcpy(output, y, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(tmp);
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(y);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; fft_radix3(cmplx *&lt;span&gt;in&lt;/span&gt;, cmplx *result, size_t n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
        memcpy(result, &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    size_t radix &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
    size_t np &lt;/span&gt;= n /&lt;span&gt; radix;
    cmplx &lt;/span&gt;*res = (cmplx *) &lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
    cmplx &lt;/span&gt;*f0 =&lt;span&gt; res;
    cmplx &lt;/span&gt;*f1 = f0 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f2 = f1 +&lt;span&gt; np;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
            res[i &lt;/span&gt;+ j * np] = &lt;span&gt;in&lt;/span&gt;[radix * i +&lt;span&gt; j];
        }
    }
    fft_radix3(f0, f0, np, flag);
    fft_radix3(f1, f1, np, flag);
    fft_radix3(f2, f2, np, flag);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; wexp0 = -&lt;span&gt;2&lt;/span&gt; * (&lt;span&gt;float&lt;/span&gt;) M_PI * (flag) / (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;) (n);
    cmplx wt &lt;/span&gt;=&lt;span&gt; {cosf(wexp0), sinf(wexp0)};
    cmplx w0 &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; w0r =&lt;span&gt; w0.real;
        w0.real &lt;/span&gt;= (w0r * wt.real) - (w0.imag *&lt;span&gt; wt.imag);
        w0.imag &lt;/span&gt;= (w0.imag * wt.real) + (w0r *&lt;span&gt; wt.imag);
    }
    cmplx w &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
        cmplx wj &lt;/span&gt;=&lt;span&gt; w;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; np; k++&lt;span&gt;) {
            result[k &lt;/span&gt;+ j * np] =&lt;span&gt; cmplx_mul_add(f0[k], cmplx_mul_add(f1[k], f2[k], wj), wj);
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wjr =&lt;span&gt; wj.real;
            wj.real &lt;/span&gt;= (wjr * wt.real) - (wj.imag *&lt;span&gt; wt.imag);
            wj.imag &lt;/span&gt;= (wj.imag * wt.real) + (wjr *&lt;span&gt; wt.imag);
        }
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wr =&lt;span&gt; w.real;
        w.real &lt;/span&gt;= (wr * w0.real) - (w.imag *&lt;span&gt; w0.imag);
        w.imag &lt;/span&gt;= (w.imag * w0.real) + (wr *&lt;span&gt; w0.imag);
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(res);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; fft_radix5(cmplx *x, cmplx *result, size_t n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
        memcpy(result, x, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    size_t radix &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
    size_t np &lt;/span&gt;= n /&lt;span&gt; radix;
    cmplx &lt;/span&gt;*res = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), n);
    cmplx &lt;/span&gt;*f0 =&lt;span&gt; res;
    cmplx &lt;/span&gt;*f1 = f0 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f2 = f1 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f3 = f2 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f4 = f3 +&lt;span&gt; np;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
            res[i &lt;/span&gt;+ j * np] = x[radix * i +&lt;span&gt; j];
        }
    }
    fft_radix5(f0, f0, np, flag);
    fft_radix5(f1, f1, np, flag);
    fft_radix5(f2, f2, np, flag);
    fft_radix5(f3, f3, np, flag);
    fft_radix5(f4, f4, np, flag);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; wexp0 = -&lt;span&gt;2&lt;/span&gt; * (&lt;span&gt;float&lt;/span&gt;) M_PI * (flag) / (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;) (n);
    cmplx wt &lt;/span&gt;=&lt;span&gt; {cosf(wexp0), sinf(wexp0)};
    cmplx w0 &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; w0r =&lt;span&gt; w0.real;
        w0.real &lt;/span&gt;= (w0r * wt.real) - (w0.imag *&lt;span&gt; wt.imag);
        w0.imag &lt;/span&gt;= (w0.imag * wt.real) + (w0r *&lt;span&gt; wt.imag);
    }
    cmplx w &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
        cmplx wj &lt;/span&gt;=&lt;span&gt; w;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; np; k++&lt;span&gt;) {
            result[k &lt;/span&gt;+ j * np] =&lt;span&gt; cmplx_mul_add(f0[k], cmplx_mul_add(f1[k], cmplx_mul_add(f2[k],
                                                                                         cmplx_mul_add(f3[k], f4[k],
                                                                                                       wj), wj), wj),
                                               wj);
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wjr =&lt;span&gt; wj.real;
            wj.real &lt;/span&gt;= (wjr * wt.real) - (wj.imag *&lt;span&gt; wt.imag);
            wj.imag &lt;/span&gt;= (wj.imag * wt.real) + (wjr *&lt;span&gt; wt.imag);
        }
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wr =&lt;span&gt; w.real;
        w.real &lt;/span&gt;= (wr * w0.real) - (w.imag *&lt;span&gt; w0.imag);
        w.imag &lt;/span&gt;= (w.imag * w0.real) + (wr *&lt;span&gt; w0.imag);
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(res);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; fft_radix6(cmplx *input, cmplx *output, size_t n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
        memcpy(output, input, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    size_t radix &lt;/span&gt;= &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
    size_t np &lt;/span&gt;= n /&lt;span&gt; radix;
    cmplx &lt;/span&gt;*res = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), n);
    cmplx &lt;/span&gt;*f0 =&lt;span&gt; res;
    cmplx &lt;/span&gt;*f1 = f0 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f2 = f1 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f3 = f2 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f4 = f3 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f5 = f4 +&lt;span&gt; np;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
            res[i &lt;/span&gt;+ j * np] = input[radix * i +&lt;span&gt; j];
        }
    }
    fft_radix6(f0, f0, np, flag);
    fft_radix6(f1, f1, np, flag);
    fft_radix6(f2, f2, np, flag);
    fft_radix6(f3, f3, np, flag);
    fft_radix6(f4, f4, np, flag);
    fft_radix6(f5, f5, np, flag);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; wexp0 = -&lt;span&gt;2&lt;/span&gt; * (&lt;span&gt;float&lt;/span&gt;) M_PI * (flag) / (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;) (n);
    cmplx wt &lt;/span&gt;=&lt;span&gt; {cosf(wexp0), sinf(wexp0)};
    cmplx w0 &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; w0r =&lt;span&gt; w0.real;
        w0.real &lt;/span&gt;= (w0r * wt.real) - (w0.imag *&lt;span&gt; wt.imag);
        w0.imag &lt;/span&gt;= (w0.imag * wt.real) + (w0r *&lt;span&gt; wt.imag);
    }
    cmplx w &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
        cmplx wj &lt;/span&gt;=&lt;span&gt; w;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; np; k++&lt;span&gt;) {
            output[k &lt;/span&gt;+ j * np] =&lt;span&gt; cmplx_mul_add(f0[k], cmplx_mul_add(f1[k], cmplx_mul_add(f2[k],
                                                                                         cmplx_mul_add(f3[k],
                                                                                                       cmplx_mul_add(
                                                                                                               f4[k],
                                                                                                               f5[k],
                                                                                                               wj), wj),
                                                                                         wj), wj), wj);
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wjr =&lt;span&gt; wj.real;
            wj.real &lt;/span&gt;= (wjr * wt.real) - (wj.imag *&lt;span&gt; wt.imag);
            wj.imag &lt;/span&gt;= (wj.imag * wt.real) + (wjr *&lt;span&gt; wt.imag);
        }
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wr =&lt;span&gt; w.real;
        w.real &lt;/span&gt;= (wr * w0.real) - (w.imag *&lt;span&gt; w0.imag);
        w.imag &lt;/span&gt;= (w.imag * w0.real) + (wr *&lt;span&gt; w0.imag);
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(res);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; fft_radix7(cmplx *x, cmplx *result, size_t n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
        memcpy(result, x, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    size_t radix &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;
    size_t np &lt;/span&gt;= n /&lt;span&gt; radix;
    cmplx &lt;/span&gt;*res = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), n);
    cmplx &lt;/span&gt;*f0 =&lt;span&gt; res;
    cmplx &lt;/span&gt;*f1 = f0 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f2 = f1 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f3 = f2 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f4 = f3 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f5 = f4 +&lt;span&gt; np;
    cmplx &lt;/span&gt;*f6 = f5 +&lt;span&gt; np;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
            res[i &lt;/span&gt;+ j * np] = x[radix * i +&lt;span&gt; j];
        }
    }
    fft_radix7(f0, f0, np, flag);
    fft_radix7(f1, f1, np, flag);
    fft_radix7(f2, f2, np, flag);
    fft_radix7(f3, f3, np, flag);
    fft_radix7(f4, f4, np, flag);
    fft_radix7(f5, f5, np, flag);
    fft_radix7(f6, f6, np, flag);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; wexp0 = -&lt;span&gt;2&lt;/span&gt; * (&lt;span&gt;float&lt;/span&gt;) M_PI * (flag) / (&lt;span&gt;float&lt;/span&gt;&lt;span&gt;) (n);
    cmplx wt &lt;/span&gt;=&lt;span&gt; {cosf(wexp0), sinf(wexp0)};
    cmplx w0 &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; np; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; w0r =&lt;span&gt; w0.real;
        w0.real &lt;/span&gt;= (w0r * wt.real) - (w0.imag *&lt;span&gt; wt.imag);
        w0.imag &lt;/span&gt;= (w0.imag * wt.real) + (w0r *&lt;span&gt; wt.imag);
    }
    cmplx w &lt;/span&gt;= {&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; radix; j++&lt;span&gt;) {
        cmplx wj &lt;/span&gt;=&lt;span&gt; w;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; np; k++&lt;span&gt;) {
            result[k &lt;/span&gt;+ j * np] =&lt;span&gt; cmplx_mul_add(f0[k], cmplx_mul_add(f1[k], cmplx_mul_add(f2[k],
                                                                                         cmplx_mul_add(f3[k],
                                                                                                       cmplx_mul_add(
                                                                                                               f4[k],
                                                                                                               cmplx_mul_add(
                                                                                                                       f5[k],
                                                                                                                       f6[k],
                                                                                                                       wj),
                                                                                                               wj), wj),
                                                                                         wj), wj), wj);
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wjr =&lt;span&gt; wj.real;
            wj.real &lt;/span&gt;= (wjr * wt.real) - (wj.imag *&lt;span&gt; wt.imag);
            wj.imag &lt;/span&gt;= (wj.imag * wt.real) + (wjr *&lt;span&gt; wt.imag);
        }
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wr =&lt;span&gt; w.real;
        w.real &lt;/span&gt;= (wr * w0.real) - (w.imag *&lt;span&gt; w0.imag);
        w.imag &lt;/span&gt;= (w.imag * w0.real) + (wr *&lt;span&gt; w0.imag);
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(res);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; fft_Bluestein(cmplx *input, cmplx *output, size_t n, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag) {
    size_t m &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; ((unsigned &lt;span&gt;int&lt;/span&gt;) (ilogbf((&lt;span&gt;float&lt;/span&gt;) (&lt;span&gt;2&lt;/span&gt; * n - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;))));
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (m &amp;lt; &lt;span&gt;2&lt;/span&gt; * n - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        m &lt;/span&gt;&amp;lt;&amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    cmplx &lt;/span&gt;*y = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(cmplx), &lt;span&gt;3&lt;/span&gt; *&lt;span&gt; m);
    cmplx &lt;/span&gt;*w = y +&lt;span&gt; m;
    cmplx &lt;/span&gt;*ww = w +&lt;span&gt; m;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; a0 = (&lt;span&gt;float&lt;/span&gt;) M_PI /&lt;span&gt; n;
    w[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].real = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (flag == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        y[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].real = input[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].real;
        y[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].imag = -input[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].imag;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wexp = a0 * i *&lt;span&gt; i;
            w[i].real &lt;/span&gt;=&lt;span&gt; cosf(wexp);
            w[i].imag &lt;/span&gt;=&lt;span&gt; sinf(wexp);
            w[m &lt;/span&gt;- i] =&lt;span&gt; w[i];
            y[i].real &lt;/span&gt;= (input[i].real * w[i].real) - (input[i].imag *&lt;span&gt; w[i].imag);
            y[i].imag &lt;/span&gt;= (-input[i].imag * w[i].real) - (input[i].real *&lt;span&gt; w[i].imag);
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        y[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].real = input[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].real;
        y[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].imag = input[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].imag;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; wexp = a0 * i *&lt;span&gt; i;
            w[i].real &lt;/span&gt;=&lt;span&gt; cosf(wexp);
            w[i].imag &lt;/span&gt;=&lt;span&gt; sinf(wexp);
            w[m &lt;/span&gt;- i] =&lt;span&gt; w[i];
            y[i].real &lt;/span&gt;= (input[i].real * w[i].real) + (input[i].imag *&lt;span&gt; w[i].imag);
            y[i].imag &lt;/span&gt;= (input[i].imag * w[i].real) - (input[i].real *&lt;span&gt; w[i].imag);
        }
    }
    fft_Stockham(y, y, m, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    fft_Stockham(w, ww, m, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; m; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; r =&lt;span&gt; y[i].real;
        y[i].real &lt;/span&gt;= (r * ww[i].real) - (y[i].imag *&lt;span&gt; ww[i].imag);
        y[i].imag &lt;/span&gt;= (y[i].imag * ww[i].real) + (r *&lt;span&gt; ww[i].imag);
    }
    fft_Stockham(y, y, m, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; scale = &lt;span&gt;1.0f&lt;/span&gt; /&lt;span&gt; m;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (flag == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;) {
            output[i].real &lt;/span&gt;= ((y[i].real * w[i].real) + (y[i].imag * w[i].imag)) *&lt;span&gt; scale;
            output[i].imag &lt;/span&gt;= -((y[i].imag * w[i].real) - (y[i].real * w[i].imag)) *&lt;span&gt; scale;
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;) {
            output[i].real &lt;/span&gt;= ((y[i].real * w[i].real) + (y[i].imag * w[i].imag)) *&lt;span&gt; scale;
            output[i].imag &lt;/span&gt;= ((y[i].imag * w[i].real) - (y[i].real * w[i].imag)) *&lt;span&gt; scale;
        }
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(y);
}

size_t &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(size_t n) {
    size_t t &lt;/span&gt;= n &amp;amp; (n - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (t == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;3&lt;/span&gt;; i &amp;lt;= &lt;span&gt;7&lt;/span&gt;; i++&lt;span&gt;) {
        size_t n2 &lt;/span&gt;=&lt;span&gt; n;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (n2 % i == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
            n2 &lt;/span&gt;/=&lt;span&gt; i;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n2 == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; n;
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; FFT(cmplx *input, cmplx *&lt;span&gt;output, size_t n) {
    memset(output, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
        memcpy(output, input, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    size_t p &lt;/span&gt;= &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(n);
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (p) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:
            fft_Stockham(input, output, n, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:
            fft_radix3(input, output, n, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;:
            fft_radix5(input, output, n, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;:
            fft_radix6(input, output, n, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;:
            fft_radix7(input, output, n, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            fft_Bluestein(input, output, n, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; IFFT(cmplx *input, cmplx *&lt;span&gt;output, size_t n) {
    memset(output, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
        memcpy(output, input, &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;(cmplx) *&lt;span&gt; n);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    size_t p &lt;/span&gt;= &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(n);
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (p) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:
            fft_Stockham(input, output, n, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:
            fft_radix3(input, output, n, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;:
            fft_radix5(input, output, n, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;:
            fft_radix6(input, output, n, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;:
            fft_radix7(input, output, n, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;: {
            fft_Bluestein(input, output, n, &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; scale = &lt;span&gt;1.0f&lt;/span&gt; /&lt;span&gt; n;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;) {
        output[i].real &lt;/span&gt;= output[i].real *&lt;span&gt; scale;
        output[i].imag &lt;/span&gt;= output[i].imag *&lt;span&gt; scale;
    }
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fast Fourier Transform\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog: http://cpuimage.cnblogs.com/\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A Simple and Efficient FFT Implementation in C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    size_t N &lt;/span&gt;= &lt;span&gt;513&lt;/span&gt;&lt;span&gt;;
    cmplx &lt;/span&gt;*input = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), N);
    cmplx &lt;/span&gt;*output = (cmplx *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cmplx), N);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; ++&lt;span&gt;i) {
        input[i].real &lt;/span&gt;=&lt;span&gt; i;
        input[i].imag &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; ++&lt;span&gt;i) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(%f %f) \t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, input[i].real, input[i].imag);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;100&lt;/span&gt;; i++&lt;span&gt;) {
        FFT(input, output, N);
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    IFFT(output, input, N);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (size_t i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; N; ++&lt;span&gt;i) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(%f %f) \t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, input[i].real, input[i].imag);
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(input);
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(output);
    getchar();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想了好久都没想到取啥名字好，最后还是选择了cpu这个前缀。&lt;/p&gt;</description>
<pubDate>Thu, 09 Aug 2018 15:44:00 +0000</pubDate>
<dc:creator>cpuimage</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cpuimage/p/9452536.html</dc:identifier>
</item>
<item>
<title>Javascript数组的5种迭代方法 - hhhyyy</title>
<link>http://www.cnblogs.com/hh1017/p/9452512.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hh1017/p/9452512.html</guid>
<description>&lt;h2 id=&quot;javascript数组的5种迭代方法&quot;&gt;#Javascript数组的5种迭代方法&lt;/h2&gt;
&lt;p&gt;数组当中定义了5个迭代方法，传入这些方法中的函数会接受三个参数，数组项的值，该项在数组的位置，和数组对象本身，以下是5个迭代方法的作用。&lt;/p&gt;
&lt;h3 id=&quot;every方法&quot;&gt;1、every方法：&lt;/h3&gt;
&lt;p&gt;对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let arr1 = [1,2,3,4,5,6];
let arr2 = [-1,-2,-3,-4,-5,-6];
let every1 = arr1.every((item,index,arr)=&amp;gt;{
    return item&amp;gt;0
})
let every2 = arr2.every((item,index,arr)=&amp;gt;{
    return item&amp;gt;0
})
console.log(every1,every2);//true,false&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;filter方法&quot;&gt;2、filter方法&lt;/h3&gt;
&lt;p&gt;对数组中的每一项运行给定函数，返回该函数返回true的项组成的数字&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let arr1 = [-1,-2,-3,4,5,6];
let arr2 = [1,2,3,-4,-5,-6];
let filter1 = arr1.filter(item=&amp;gt;{
    return item&amp;gt;0
})
let filter2 = arr2.filter((item)=&amp;gt;{
    return item&amp;lt;0
})
console.log(filter1,filter2);//[4,5,6],[-4,-5,-6]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;some方法&quot;&gt;3、some方法&lt;/h3&gt;
&lt;p&gt;对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let arr1 = [1,2,3,4,5,6];
let arr2 = [1,2,3,-4,-5,-6];
let some1= arr1.some(item=&amp;gt;{
    return item&amp;gt;0
})
let some2 = arr2.some((item)=&amp;gt;{
    return item&amp;gt;0
})
console.log(some1,some2);//true,true&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;foreach方法&quot;&gt;4、forEach方法&lt;/h3&gt;
&lt;p&gt;对数组中的每一项运行给定函数，这个方法没有返回值。&lt;br/&gt;&lt;strong&gt;forEach无法遍历对象&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;forEach无法在IE中使用，只是在firefox和chrome中实现了该方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let arr1 = [1,2,3,4,5,6];
let arr2 = [1,2,3,-4,-5,-6];
let forEach1= arr1.forEach(item=&amp;gt;{
    return item++
})
let forEach2 = arr2.forEach((item)=&amp;gt;{
    return item++
})
console.log(forEach1,forEach2);//undefined,undefined&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;map方法&quot;&gt;5、map方法&lt;/h3&gt;
&lt;p&gt;对数组中的每一项运行给定函数，返回每次调用的结果组成的数组。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;let arr1 = [1,2,3,4,5,6];
let arr2 = [-1,-2,-3,-4,-5,-6];
let map1 = arr1.map(item=&amp;gt;{
    return ++item
})
let map2 = arr2.map((item)=&amp;gt;{
    return ++item
})
console.log(map1,map2);//[2, 3, 4, 5, 6, 7] (6) [0, -1, -2, -3, -4, -5];&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;开发过程中用的比较常用到的就是map，forEach方法，他们是比较相似却也有不小的区别。&lt;br/&gt;&lt;strong&gt;主要在于：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;1、map方法是有返回值的，而forEach是没有的。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;2、IE浏览器不支持forEach方法，所以要兼容IE浏览器的尽量不要使用forEach去遍历。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;3、map方法的速度快于forEach。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 15:38:00 +0000</pubDate>
<dc:creator>hhhyyy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hh1017/p/9452512.html</dc:identifier>
</item>
<item>
<title>SSL/TLS概述 - EightZER0</title>
<link>http://www.cnblogs.com/eightzero/p/9452516.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/eightzero/p/9452516.html</guid>
<description>&lt;p&gt;TLS协议分为两层&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;底层(Record Layer)&lt;/li&gt;
&lt;li&gt;上层(ChangeCipherSpec Protocol&amp;lt;20&amp;gt;, Alert Protocol&amp;lt;21&amp;gt;, Handshake Protocol&amp;lt;22&amp;gt;, Application Data Protocol&amp;lt;23&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Record Layer处于TLS协议最底层，为TLS协议提供安全可靠的连接，为高层协议提供数据封装，压缩，加密等基本功能支持，指定了数据类型，SSL版本以及数据长度(Byte)。由于TLS版本众多，客户端和服务端协商ssl版本时，存在一定的兼容性，具体参照&lt;a href=&quot;https://tools.ietf.org/html/rfc5246#appendix-E&quot;&gt;TLS 兼容性问题&lt;/a&gt;。比如当客户端需要兼容ssl老版本服务端时，会把recordLayer的ssl version设置为{03,XX}(即SSL3.0，TLS 1.0，1.1，1.2)中的任意值，通常是客户端支持的最低版本。&lt;br/&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/RecordLayer.png&quot; alt=&quot;RecordLaye&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Handshake Protocol位于Record Layer之上，为Record Layer的负载，类似TCP层为IP层负载。HandShake Protocol层用于传输加密数据前，客户端与服务端的握手协商&lt;br/&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/handshakelayer.png&quot; alt=&quot;handshakelaye&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;协商过程&quot;&gt;协商过程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/15327690442087.jpg&quot; alt=&quot;15327690442087&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;客户端发出请求client-hello&quot;&gt;1. 客户端发出请求（Client Hello）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/Client%20Hello.png&quot; alt=&quot;Client Hello&quot;/&gt;&lt;/p&gt;
&lt;p&gt;客户端向服务端发送的Client Hello报文中包含以下信息：&lt;/p&gt;
&lt;p&gt;(1) Version。支持的协议版本，比如TLS 1.2版&lt;/p&gt;
&lt;p&gt;(2) Random。一个客户端生成的随机数，稍后与服务端产生的随机数生成对话密钥(Master Secret)&lt;/p&gt;
&lt;p&gt;(3) Cipher Suites。支持的加密方法，比如RSA公钥加密&lt;/p&gt;
&lt;p&gt;Cipher Suite格式：认证算法_密钥协商交换算法_加密算法_摘要算法（TLS, ECDHE_RSA, AES_256_GCM, SHA256）&lt;br/&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/cipherSuites.png&quot; alt=&quot;cipherSuites&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(4) Compression Method。支持的压缩方法，null表示不压缩&lt;/p&gt;
&lt;p&gt;(5) Session ID。如果之前连过该服务端，可以复用会话，而无需重新进行TLS握手&lt;/p&gt;
&lt;p&gt;(6) Extension。server_name(请求的服务端域名)，sinature_algorithms等&lt;/p&gt;
&lt;h3 id=&quot;服务端回应&quot;&gt;2. 服务端回应&lt;/h3&gt;
&lt;p&gt;从Server Hello到Server Hello Done，有些服务端是每条单独发送，有的服务端是合并一起发送。&lt;/p&gt;
&lt;h4 id=&quot;server-hello&quot;&gt;2.1 Server Hello&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/ServerHello.png&quot; alt=&quot;ServerHello&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(1) Version。服务端确认使用的SSL版本，比如TLS 1.2版本。如果浏览器与服务器支持的版本不一致，会进行协商双方都兼容的版本，如果没有则关闭连接。&lt;a href=&quot;https://tools.ietf.org/html/rfc5246#appendix-E&quot;&gt;TLS 兼容性问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(2) Random。一个服务端生成的随机数，稍后用于生成对话密钥&lt;/p&gt;
&lt;p&gt;(3) Cipher Suite。服务端从client hello提供的Cipher Suites列表中选取要使用的加密套件&lt;/p&gt;
&lt;p&gt;(4) Compression Method。服务端从client hello提供的Compression Method列表中选取要使用的压缩方法&lt;/p&gt;
&lt;p&gt;(5) Session ID。若服务端允许客户端在以后通信中重用本次会话，则服务端会为本次会话分配Session ID&lt;/p&gt;
&lt;p&gt;(6) Extension。&lt;/p&gt;
&lt;h4 id=&quot;certificate&quot;&gt;2.2 Certificate&lt;/h4&gt;
&lt;p&gt;服务端在收到客户端的Client Hello之后，将服务端的X.509证书发送给客户端，最下层证书在前（用户证书在前，上级证书在后）。发送的证书是二进制格式，并非base64之后的格式。&lt;/p&gt;
&lt;h4 id=&quot;server-key-exchange可选&quot;&gt;2.3 Server key Exchange(可选)&lt;/h4&gt;
&lt;p&gt;DHE_DSS,DHE_RSA,DH_anon,&lt;br/&gt;对于使用DHE/ECDHE非对称密钥协商算法的SSL握手，将发送该类型握手。&lt;br/&gt;RSA算法不会继续该握手流程（DH、ECDH也不会发送server key exchange）&lt;br/&gt;客户端在收到Server Key Exchange后，首先使用服务端证书中的公钥对签名进行RSA解密并校验散列值。如果解密校验通过，则基于ECDH参数中的Pubkey，通过一定算法算出&lt;strong&gt;&lt;em&gt;Pre-Master Secret&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/ServerkeyExchange.png&quot; alt=&quot;ServerkeyExchange&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;certificate-request可选&quot;&gt;2.4 Certificate Request(可选)&lt;/h4&gt;
&lt;p&gt;对于重要的保密数据，服务端还需要对客户端进行验证，服务端可以向客户端发出Certificate Request消息，要求客户端发送证书进行合法性验证&lt;/p&gt;
&lt;h4 id=&quot;server-hello-done&quot;&gt;2.5 Server Hello Done&lt;/h4&gt;
&lt;p&gt;通知客户端Server Hello消息结束&lt;/p&gt;
&lt;h3 id=&quot;客户端回应&quot;&gt;3. 客户端回应&lt;/h3&gt;
&lt;p&gt;客户端收到服务端的Server Hello Done后，首先验证服务端证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。&lt;/p&gt;
&lt;p&gt;（1） 一个随机数。该随机数用服务器公钥加密，防止被窃听。&lt;/p&gt;
&lt;p&gt;（2） 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。&lt;/p&gt;
&lt;p&gt;（3） 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。&lt;/p&gt;
&lt;p&gt;上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称&quot;pre-master key&quot;。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把&quot;会话密钥&quot;。&lt;/p&gt;
&lt;p&gt;至于为什么一定要用三个随机数，来生成&quot;会话密钥&quot;&lt;/p&gt;
&lt;h4 id=&quot;certificate可选&quot;&gt;3.1. Certificate(可选)&lt;/h4&gt;
&lt;p&gt;将客户端证书发送给服务端做合法性校验&lt;/p&gt;
&lt;h4 id=&quot;client-key-exchange&quot;&gt;3.2. Client Key Exchange&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/ClientKeyExchange.png&quot; alt=&quot;ClientKeyExchange&quot;/&gt;&lt;/p&gt;
&lt;p&gt;客户端密钥交换并通过随机数生成Master-Key&lt;/p&gt;
&lt;h4 id=&quot;certificate-verify&quot;&gt;3.3. Certificate Verify&lt;/h4&gt;
&lt;p&gt;客户端发送这个类型报文需要满足两个条件：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;服务端请求了客户端证书&lt;/li&gt;
&lt;li&gt;客户端发送了非0长度的证书&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;change-cipher-spec&quot;&gt;3.4. Change Cipher Spec&lt;/h4&gt;
&lt;p&gt;告知服务端，客户端已经切换到协商好的的加密套件（Cipher Suite），表示随后的信息都将用双方商定的加密方法和密钥发送。&lt;/p&gt;
&lt;h4 id=&quot;encrypted-handshake-message&quot;&gt;3.5 Encrypted Handshake Message&lt;/h4&gt;
&lt;p&gt;客户端使用协商好的对称密钥进行加密的第一个报文，目的一个是告诉服务端整个握手过程收到了什么数据，发送了什么数据，保证中间没人篡改报文，二是确认密钥的正确性，如果这个报文加解密校验成功，那么对称密钥就是正确的&lt;/p&gt;
&lt;h3 id=&quot;服务端最后回应&quot;&gt;4. 服务端最后回应&lt;/h3&gt;
&lt;h4 id=&quot;change-cipher-spec-1&quot;&gt;4.1 Change Cipher Spec&lt;/h4&gt;
&lt;p&gt;编码改变通知，告知客户端，服务端已经切换到选定的加密套件（Cipher Suite），表示随后的信息都将用双方商定的加密方法和密钥发送。&lt;/p&gt;
&lt;h4 id=&quot;encrypted-handshake-message-1&quot;&gt;4.2 Encrypted Handshake Message&lt;/h4&gt;
&lt;p&gt;服务端使用协商好的对称密钥进行加密的第一个报文，目的一个是告诉客户端整个握手过程收到了什么数据，发送了什么数据，保证中间没人篡改报文，二是确认密钥的正确性，如果这个报文加解密校验成功，那么对称密钥就是正确的&lt;/p&gt;
&lt;h3 id=&quot;application-data&quot;&gt;5. Application Data&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://o8z0mw8i6.bkt.clouddn.com/ApplicationData.png&quot; alt=&quot;ApplicationData&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 15:37:00 +0000</pubDate>
<dc:creator>EightZER0</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/eightzero/p/9452516.html</dc:identifier>
</item>
<item>
<title>【WebSocket】---实现定时推送比特币交易信息 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9452404.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9452404.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;实现功能&lt;/strong&gt;&lt;/span&gt;：跟虚拟币交易所一样，时时更新当前比特币的价格，最高价，最低价，买一价等等......&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：（1）本篇博客是在上一遍基础上搭建，上一篇博客地址：&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_1&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/qdhxhz/p/9438954.html&quot;&gt;【WebSocket】---实现游戏公告功能&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;         （2）相关源码会在其它有关websocket案例写完，写在gitHub上，后期会贴上地址。&lt;/p&gt;
&lt;p&gt;先看效果演示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180809231644131-1666939215.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当前的信息就是虚拟币交易所最新BTC的数据信息。&lt;/p&gt;
&lt;p&gt;我们看到每隔1秒都会更新一次最新的比特币当前信息。（截止到我发这篇博客时，比特币当前价格：6473美元左右）&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、案例解析&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;span&gt;1、如何调用虚拟币的接口&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;你想获得BTC最新的价格信息，你首先的有它的相关接口，不然如何获取数据，我是在阿里云上购买的。&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;p&gt; （1）登陆阿里云--&amp;gt;云市场--&amp;gt;股票行情于汇率&lt;/p&gt;
&lt;p&gt; （2）有很多企业都有相关接口有股票也有虚拟币&lt;/p&gt;
&lt;p&gt; （3）我选的一家名字叫：实时加密货币行情+推送&lt;/p&gt;
&lt;p&gt;  网址：https://market.aliyun.com/products/57000002/cmapi029361.html?spm=5176.730005.productlist.d_cmapi029361.xtd4I4&lt;/p&gt;
&lt;p&gt; （4）对于接口都有相关说明，按照它的说明就可以获取json数据。同时也可以在线调试。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、通过定时任务时时向客户端发送消息&lt;/span&gt; &lt;/h3&gt;
&lt;p&gt;因为需要服务端隔一定时间向客户端发送消息，所有服务端用定时任务再好不过了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * //要启动定时任务记得在启动类上添加下面两个注解
 * @ComponentScan(basePackages=&quot;com.jincou.websocket&quot;)
 * @EnableScheduling
 * 功能描述：股票推送,这里只需通过定时任务向客服端发送消息
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CoinSchedule {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; WebSocketService ws;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代表每一秒执行一次任务&lt;/span&gt;
    @Scheduled(fixedRate=1000&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; coinInfo(){
        ws.sendCoinInfo();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;3、WebSocketService类&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;消息模版工具类，用来推送消息用的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 功能描述：简单消息模板，用来推送消息
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WebSocketService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SimpMessagingTemplate template;
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 功能描述：Coin版本，虚拟币信息推送
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sendCoinInfo() {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CoinService.getStockInfo()已经把json数据转为实体对象&lt;/span&gt;
        CoinResult coinResult =&lt;span&gt; CoinService.getStockInfo();
        
  String msgTpl &lt;/span&gt;= &quot;虚拟币名称: %s ;代码: %s; 现价格: %s元 ;买一价: %s ; 买一量: %s ; 买二价: %s ; 卖二量: %s;&quot;&lt;span&gt;;
        CoinResult.Obj  obj&lt;/span&gt;=&lt;span&gt;coinResult.getObj();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; obj) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将 %s 替换成实际值&lt;/span&gt;
            String msg =&lt;span&gt; String.format(msgTpl, obj.getName(), obj.getSecurityCode(), obj.getNow(),
                    obj.getBid1(), obj.getBid1Volume(), obj.getAsk1(), obj.getAsk1Volume());

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面参数是订阅地址，后面参数是消息信息（也就是比特币时时消息）&lt;/span&gt;
            template.convertAndSend(&quot;/topic/coin_info&quot;,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OutMessage(msg));
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;4、CoinService调用接口，并把json格式数据赋值给对象&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个是最关键的一步，主要做的事：去调远程接口获取数据后，将数据封装到自己所写的bean实体中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.jincou.websocket.model.CoinResult;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.jincou.websocket.utils.HttpUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.jincou.websocket.utils.JsonUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.http.HttpResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.http.util.EntityUtils;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 功能描述：接口服务，调用虚拟币行情接口
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CoinService {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CoinResult getStockInfo(){
         String host &lt;/span&gt;= &quot;http://alirm-gbdc.konpn.com&quot;&lt;span&gt;;
            String path &lt;/span&gt;= &quot;/query/gbdc&quot;&lt;span&gt;;
            String method &lt;/span&gt;= &quot;GET&quot;&lt;span&gt;;
            String appcode &lt;/span&gt;= &quot;056ed9cdaa674647b6c04b87fe394fcb&quot;&lt;span&gt;;
            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; headers = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105&lt;/span&gt;
            headers.put(&quot;Authorization&quot;, &quot;APPCODE &quot; +&lt;span&gt; appcode);
            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; querys = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;BTC代表返回比特币相关信息，如果这里传入ETH那就代表返回以太坊信息&lt;/span&gt;
            querys.put(&quot;symbol&quot;, &quot;BTC&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回连接信息，如果里面带有200，说明连接接口成功&lt;/span&gt;
            HttpResponse response =&lt;span&gt; HttpUtils.doGet(host, path, method, headers, querys);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将response的body信息转为字符串&lt;/span&gt;
            String responseText=&lt;span&gt;EntityUtils.toString(response.getEntity());

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上面部分只要根据你购买的api接口说明操作就可以，下面才是你需要处理的
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将json格式的字符串（根据一定规则）赋值给实体对象（JsonUtils是自己的一个工具类）&lt;/span&gt;
            CoinResult coinResult = JsonUtils.objectFromJson(responseText, CoinResult.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

            System.out.println(&lt;/span&gt;&quot;控制台打印虚拟币当前信息=======================================&quot;&lt;span&gt;);
            System.out.println(coinResult.toString());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; coinResult;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;5、json格式如何封装到实体&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这步主要讲，将json格式字符串通过工具类封装到实体对象需要满足的规则：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
CoinResult coinResult = JsonUtils.objectFromJson(responseText, CoinResult.&lt;span&gt;class&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;看这步所需要满足的规则&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（1）先看接口的json格式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
{&quot;Code&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&quot;Msg&quot;:&quot;&quot;,
    &quot;Obj&quot;:{
    &quot;B1&quot;:&lt;/span&gt;&lt;span&gt;271.100&lt;/span&gt;,     &lt;span&gt;--&lt;/span&gt;&lt;span&gt;买一&lt;/span&gt;
    &quot;B1V&quot;:&lt;span&gt;129&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;买一量&lt;/span&gt;
    &quot;B2&quot;:&lt;span&gt;0&lt;/span&gt;,           &lt;span&gt;--&lt;/span&gt;&lt;span&gt;买二&lt;/span&gt;
    &quot;B2V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;B3&quot;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,           &lt;span&gt;--&lt;/span&gt;&lt;span&gt;买三&lt;/span&gt;
    &quot;B3V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;B4&quot;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,           &lt;span&gt;--&lt;/span&gt;&lt;span&gt;买四&lt;/span&gt;
    &quot;B4V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,        
    &quot;B5&quot;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,           &lt;span&gt;--&lt;/span&gt;&lt;span&gt;买五&lt;/span&gt;
    &quot;B5V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;S1&quot;:&lt;/span&gt;&lt;span&gt;271.150&lt;/span&gt;,    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;卖一&lt;/span&gt;
    &quot;S1V&quot;:&lt;span&gt;20&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;卖一量&lt;/span&gt;
    &quot;S2&quot;:&lt;span&gt;0&lt;/span&gt;,          &lt;span&gt;--&lt;/span&gt;&lt;span&gt;卖二&lt;/span&gt;
    &quot;S2V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;S3&quot;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,          &lt;span&gt;--&lt;/span&gt;&lt;span&gt;卖三&lt;/span&gt;
    &quot;S3V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;S4&quot;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,          &lt;span&gt;--&lt;/span&gt;&lt;span&gt;卖四&lt;/span&gt;
    &quot;S4V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;S5&quot;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,          &lt;span&gt;--&lt;/span&gt;&lt;span&gt;卖五&lt;/span&gt;
    &quot;S5V&quot;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &quot;ZT&quot;:&lt;/span&gt;&lt;span&gt;280.85&lt;/span&gt;,       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;涨停价&lt;/span&gt;
    &quot;DT&quot;:&lt;span&gt;259.19&lt;/span&gt;,       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;跌停价&lt;/span&gt;
    &quot;O&quot;:&lt;span&gt;270.39&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;今开&lt;/span&gt;
    &quot;H&quot;:&lt;span&gt;271.69&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;最高&lt;/span&gt;
    &quot;L&quot;:&lt;span&gt;270.14&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;最低&lt;/span&gt;
    &quot;YC&quot;:&lt;span&gt;270.55&lt;/span&gt;,       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;昨收&lt;/span&gt;
    &quot;A&quot;:&lt;span&gt;35513202100.0&lt;/span&gt;, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;交易额&lt;/span&gt;
    &quot;V&quot;:&lt;span&gt;130972&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;交易量&lt;/span&gt;
    &quot;P&quot;:&lt;span&gt;271.14&lt;/span&gt;,        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;当前价&lt;/span&gt;
    &quot;Tick&quot;:&lt;span&gt;1529911046&lt;/span&gt;, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;标准时间戳&lt;/span&gt;
    &quot;N&quot;:&quot;比特币&quot;,       &lt;span&gt;--&lt;/span&gt;&lt;span&gt;品种名&lt;/span&gt;
    &quot;M&quot;:&quot;&quot;,            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;市场&lt;/span&gt;
    &quot;S&quot;:&quot;BTC&quot;,         &lt;span&gt;--&lt;/span&gt;&lt;span&gt;品种代码&lt;/span&gt;
    &quot;C&quot;:&quot;&quot;             &lt;span&gt;--&lt;/span&gt;&lt;span&gt;编号&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（2）在看我的实体对象属性&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.annotation.JsonIgnoreProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.annotation.JsonProperty;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; lombok.Data;

@JsonIgnoreProperties(ignoreUnknown &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
@Data
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CoinResult {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态码，0代表成功&lt;/span&gt;
    @JsonProperty(&quot;Code&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Code;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体数据（注意这里json用{表示，所有代表对象&lt;/span&gt;
    @JsonProperty(&quot;Obj&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Obj obj;

    @Data
    @JsonIgnoreProperties(ignoreUnknown &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Obj {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;虚拟币代码&lt;/span&gt;
        @JsonProperty(&quot;S&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String securityCode;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;虚拟币名称&lt;/span&gt;
        @JsonProperty(&quot;N&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在价格&lt;/span&gt;
        @JsonProperty(&quot;P&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; now;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最高价格&lt;/span&gt;
        @JsonProperty(&quot;H&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; high;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最低价格&lt;/span&gt;
        @JsonProperty(&quot;L&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; low;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;买一价&lt;/span&gt;
        @JsonProperty(&quot;B1&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; bid1;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;买一量&lt;/span&gt;
        @JsonProperty(&quot;B1V&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; bid1Volume;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;卖一价&lt;/span&gt;
        @JsonProperty(&quot;S1&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; ask1;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;卖一量&lt;/span&gt;
        @JsonProperty(&quot;S1V&quot;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; ask1Volume;
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;已成交价，这个接口没有提供，只要记住{}代表是对象，【】代表是结合那就需要集合接受：如下
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;private List&amp;lt;Transaction&amp;gt; transactions;&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结规则：&lt;/p&gt;
&lt;p&gt;（1）json中的名字和实体中属性名一定要一致才能赋值。&lt;/p&gt;
&lt;p&gt;（2）如果只要有一个你名字一致而数据类型不一样，那么就会整体赋值失败返回null。比如这里B1价，它明明是double，如你你用int接收，那么就会返回null。&lt;/p&gt;
&lt;p&gt;（3）json格式中的数据如果是{},那么可以用对象来接收，好比这的&quot;Obj&quot;:{...}，如果是{[],[]},那就需要List&amp;lt;对象&amp;gt;来接收&lt;/p&gt;

&lt;h3&gt;&lt;span&gt; 6、看前端&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 前端没啥好说的只需要订阅：/topic/coin_info 这个地址就可以接收服务端时时发来的消息了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;想太多，做太少，中间的落差就是烦恼。想没有烦恼，要么别想，要么多做。中校【20】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 15:20:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9452404.html</dc:identifier>
</item>
<item>
<title>利用Asp.Net Core的MiddleWare思想处理复杂业务流程 - 码农阿宇</title>
<link>http://www.cnblogs.com/CoderAyu/p/9452444.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CoderAyu/p/9452444.html</guid>
<description>&lt;p&gt;最近利用Asp.Net Core 的MiddleWare思想对公司的古老代码进行重构，在这里把我的设计思路分享出来，希望对大家处理复杂的流程业务能有所帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个流程初始化接口，接口中根据传入的流程类型，需要做一些不同的工作。&lt;/p&gt;
&lt;p&gt;1.有的工作是不管什么类型的流程都要做的（共有），有的工作是某一流程特有的。&lt;/p&gt;
&lt;p&gt;2.各个处理任务基本不存在嵌套关系，所以代码基本是&lt;span&gt;流水账式的&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;3.流程的种类较多，代码中if或者switch判断占了很大的篇幅。&lt;/p&gt;
&lt;p&gt;4.这些处理工作大致可分为三大类，前期准备工作（参数的校验等），处理中的工作（更新数据库，插入数据等），扫尾工作（日志记录，通知等）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Asp.Net Core中的MiddleWare&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意第二条，流水账式的代码，这让我想到《管道模型》，而Asp.Net Core的MiddleWare正是放在这个管道中的。&lt;/p&gt;
&lt;p&gt;看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201808/1293736-20180809231441218-1153291940.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201808/1293736-20180809231441456-57878957.png&quot; alt=&quot;image&quot; width=&quot;541&quot; height=&quot;347&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有middleware1,middleware2,middleware3这三个中间件放在一个中间件的集合（PipeLine，管道）中并有序排列，Request请求1从流向2载流向3，随之产生的Response从底层依此流出。&lt;/p&gt;
&lt;p&gt;这个Request和Resopnse就封装在我们经常看到的Context上下文中，Context传入到中间件1，中间件1处理后再传出Context给中间件2 &amp;gt;&amp;gt;&amp;gt;&amp;gt;   一直这样传出去，直到传到最后一个。&lt;/p&gt;
&lt;p&gt;我们经常在startup的configure中调用的app.use()方法，其实也就是向这个集合中添加一个middleware,Context进入后，必须被该middleware处理。&lt;/p&gt;
&lt;p&gt;不知道我这么说，大家有没有这种管道模型处理任务的概念了？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码解读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不懂？没关系，那我们结合代码看看。&lt;/p&gt;
&lt;p&gt;上面说过，每个MiddleWare会把Context从自己的身体里面过一遍并主动调用下一个中间件。&lt;/p&gt;
&lt;p&gt;所以，中间件是什么？ 是一个传入是Context,传出也是Context的方法吗？不是！&lt;/p&gt;
&lt;p&gt;是一个传入是委托，传出也是委托，而这传入传出的委托的参数是Context,该委托如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    ///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 管道内的委托任务
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;delegate&lt;/span&gt; Task PipeLineDelegate&amp;lt;&lt;span&gt;in&lt;/span&gt; TContext&amp;gt;(TContext context);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以中间件是下面这样的一个Func，它肩负起了调用下一个中间件（委托）的重任：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Func&amp;lt;PipeLineDelegate&amp;lt;TContext&amp;gt;, PipeLineDelegate&amp;lt;TContext&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而管道又是什么呢？  是Func的集合，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
IList&amp;lt;Func&amp;lt;PipeLineDelegate&amp;lt;TContext&amp;gt;, PipeLineDelegate&amp;lt;TContext&amp;gt;&amp;gt;&amp;gt; _components = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Func&amp;lt;PipeLineDelegate&amp;lt;TContext&amp;gt;, PipeLineDelegate&amp;lt;TContext&amp;gt;&amp;gt;&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们再Startup方法里面的Configure方法里面的Use是在做什么呢？其实就是在给上面的管道_components添加一个func,如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; IPipeLineBuilder&amp;lt;TContext&amp;gt; Use(Func&amp;lt;PipeLineDelegate&amp;lt;TContext&amp;gt;, PipeLineDelegate&amp;lt;TContext&amp;gt;&amp;gt;&lt;span&gt; func)
        {
            _components.Add(func);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在今天的Use中呢，我还想对原有的Use进行一次重载，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; IPipeLineBuilder&amp;lt;TContext&amp;gt; Use(Action&amp;lt;TContext&amp;gt; action, &lt;span&gt;int&lt;/span&gt;? index = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            Func&lt;/span&gt;&amp;lt;PipeLineDelegate&amp;lt;TContext&amp;gt;, PipeLineDelegate&amp;lt;TContext&amp;gt;&amp;gt; pipleDelegate = next =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; context =&amp;gt;&lt;span&gt;
                {
                    action.Invoke(context);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; next.Invoke(context);
                };
            };
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (index.HasValue)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (index.Value &amp;gt;&lt;span&gt; _components.Count)
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;插入索引超出目前管道大小&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    _components.Insert(index.Value, pipleDelegate);
                }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                _components.Add(next &lt;/span&gt;=&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; context =&amp;gt;&lt;span&gt;
                    {
                        action.Invoke(context);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; next.Invoke(context);
                    };
                });
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，重载之后，传入的变成了Action&amp;lt;TContext&amp;gt; action，因为我想外部专注于自己要真正处理的业务，而调用下一个middleware的事情封装到方法内部，不用外部来关心了，并且，可以通过传入的index指定插入的中间件的位置，以此来控制业务的执行顺序。&lt;/p&gt;

&lt;p&gt;最后，需要把传入的委托链接起来，这就是管道的Build工作，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; PipeLineDelegate&amp;lt;TContext&amp;gt;&lt;span&gt; Build()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; requestDelegate = (PipeLineDelegate&amp;lt;TContext&amp;gt;)(context =&amp;gt;&lt;span&gt; Task.CompletedTask);

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; func &lt;span&gt;in&lt;/span&gt;&lt;span&gt; _components.Reverse())
                requestDelegate &lt;/span&gt;=&lt;span&gt; func(requestDelegate);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; requestDelegate;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，管道相关的差不多说完了，那我，我如何利用上面的思想来处理我的业务呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;处理业务&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201808/1293736-20180809231441683-520364023.png&quot;&gt;&lt;img title=&quot;项目管理流程&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201808/1293736-20180809231442373-925810434.png&quot; alt=&quot;项目管理流程&quot; width=&quot;800&quot; height=&quot;838&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;处理示意图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;Ø 初始化三条处理管道（根本是New三个List&amp;lt;Task&amp;gt;集合，对应前期准备工作集合，处理中工作的集合，扫尾工作的集合）。&lt;/p&gt;
&lt;p&gt;Ø 向三条管道中注入公共的处理任务。&lt;/p&gt;
&lt;p&gt;Ø 根据传入的流程类型动态加载对应的处理方法Handle()。&lt;/p&gt;
&lt;p&gt;Ø Handle方法向三条管道中注入该类型的流程所对应的特有任务。&lt;/p&gt;
&lt;p&gt;Ø Build三条管道。&lt;/p&gt;
&lt;p&gt;Ø 依此执行准备工作管道=&amp;gt;处理中管道=&amp;gt;处理后管道。&lt;/p&gt;
&lt;p&gt;上面步骤可以概括成下面的代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitApproveFlow(ApproveFlowInitContext context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beforePipeLineBuilder =&lt;span&gt; InitBeforePipeLine();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handlingPipeLineBuilder =&lt;span&gt; InitHandlingPipeLine();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; afterPipeLineBuilder =&lt;span&gt; InitAfterPipeLine();

            RegisterEntityPipeLine(context.flowType, beforePipeLineBuilder, handlingPipeLineBuilder, afterPipeLineBuilder);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beforePipeLine =&lt;span&gt; beforePipeLineBuilder.Build();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handlingPipeLine =&lt;span&gt; handlingPipeLineBuilder.Build();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; afterPipeLine =&lt;span&gt; afterPipeLineBuilder.Build();
            
            beforePipeLine.Invoke(context);
            handlingPipeLine.Invoke(context);
            afterPipeLine.Invoke(context);

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，RegisterEntityPipLine()方法根据flowType动态加载对应的类，所有类继承了一个公共的接口，接口暴露出了Handle方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RegisterEntityPipeLine(&lt;span&gt;string&lt;/span&gt; flowType, IPipeLineBuilder&amp;lt;ApproveFlowInitContext&amp;gt;&lt;span&gt; beforePipeLineBuilder,
            IPipeLineBuilder&lt;/span&gt;&amp;lt;ApproveFlowInitContext&amp;gt;&lt;span&gt; handlingPipeLineBuilder,
            IPipeLineBuilder&lt;/span&gt;&amp;lt;ApproveFlowInitContext&amp;gt;&lt;span&gt; afterPipeLineBuilder)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handleClassName = (&lt;span&gt;&quot;类名的前缀&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + flowType&lt;span&gt;).ToLower();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; type =&lt;span&gt; AppDomain.CurrentDomain.GetAssemblies()
                .Where(a &lt;/span&gt;=&amp;gt; a.FullName.Contains(&lt;span&gt;&quot;程序及名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                .SelectMany(a &lt;/span&gt;=&amp;gt;&lt;span&gt;
                    a.GetTypes().Where(t &lt;/span&gt;=&amp;gt;&lt;span&gt;
                        t.GetInterfaces().Contains(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(类继承的接口名称))
                    )
                ).FirstOrDefault(u &lt;/span&gt;=&amp;gt;&lt;span&gt;
                    u.FullName &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; u.Name.ToLower() ==&lt;span&gt; handleClassName
                );

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (type == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ObjectNotFoundException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;未找到名称为[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + handleClassName + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]的类&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handle =&lt;span&gt; (类继承的接口名称)_serviceProvider.GetService(type);
            handle.Handle(beforePipeLineBuilder, handlingPipeLineBuilder, afterPipeLineBuilder);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Handle方法里面又做了什么呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Handle(IPipeLineBuilder&amp;lt;ApproveFlowInitContext&amp;gt; beforePipeLineBuilder, IPipeLineBuilder&amp;lt;ApproveFlowInitContext&amp;gt; handlingPipeLineBuilder, IPipeLineBuilder&amp;lt;ApproveFlowInitContext&amp;gt;&lt;span&gt; afterPipeLineBuilder)
        {
            HandleBefore(beforePipeLineBuilder);
            Handling(handlingPipeLineBuilder);
            HandleAfter(afterPipeLineBuilder);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别向三个管道中添加 前、中、后 对应的任务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q&amp;amp;A&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q1:如果处理任务依赖于上一个处理任务的处理结果怎么办？&lt;/p&gt;
&lt;p&gt;PipeLineDelegate&amp;lt;TContext&amp;gt; 中的TContext是一个对象，可以向该对象中添加对应的属性，上游任务处理任务并对Context中的属性赋值，供下游的任务使用。&lt;/p&gt;
&lt;p&gt;Q2:如果某一个任务需要在其他任务之前执行怎么办（需要插队）？&lt;/p&gt;
&lt;p&gt;PipeLineBuilder.Use() 中，有Index参数，可以通过该参数，指定插入任务的位置。&lt;/p&gt;
&lt;p&gt;Q3:如果保证管道的通用性（不局限于某一业务）？&lt;/p&gt;
&lt;p&gt;TContext是泛型，可以不同的任务创建一个对应的TContext即可实现不同业务下的PipleLine的复用。&lt;/p&gt;

&lt;p&gt;有什么上面没涉及的问题欢迎大家在下方留言提问，谢谢。&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 15:15:00 +0000</pubDate>
<dc:creator>码农阿宇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CoderAyu/p/9452444.html</dc:identifier>
</item>
<item>
<title>java关键字 volatile的作用及使用说明 - 王若伊_恩赐解脱</title>
<link>http://www.cnblogs.com/jilodream/p/9452391.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jilodream/p/9452391.html</guid>
<description>&lt;p&gt;先来看看这个关键字是什么意思：&lt;br/&gt;volatile  [ˈvɒlətaɪl]&lt;br/&gt;adj. 易变的，不稳定的;&lt;br/&gt;从翻译上来看，volatile表示这个关键字是极易发生改变的。&lt;br/&gt;volatile是java语言中，最轻量级的并发同步机制。这个关键字有如下两个作用：&lt;br/&gt;1、任何对volatile变量的修改，java中的其他线程都可以感知到&lt;br/&gt;2、volatile会禁止指令冲排序优化&lt;br/&gt;　　在详细讲解volatile关键字之前，需要对java的内存模型有所理解，否则很难深入的认识到volatile的作用。java 内存可以像之前讲的那样，划分为堆、栈、方法区等等。但是从结合物理设备的角度来看，内存模型的布局设计如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/704073/201808/704073-20180809225322494-1351188186.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　之所以这样设计内存模型，是因为：相对于cpu的处理速度来说，物理内存的IO操作耗时非常严重。这就造成了cpu线程快速计算结束后，需要浪费大量的时间来等待内存IO的操作。为了减少这种等待，java内存模型引入了工作内存的概念。工作内存主要是利用cpu或内存的寄存器、高速缓存等部分进行数据缓冲，减少cpu线程在内存IO期间的等待。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在java内存模型中，线程任何与数据有关的操作，都与并且只与工作内存相关。当线程需(防盗连接：本文首发自http://www.cnblogs.com/jilodream/ )要操作数据时，虚拟机会首先从主内存中读取数据，然后放置一份拷贝的数据到工作内存中。接着java线程读取工作内存中的拷贝数据，并操作得到一个全新的数据，然将将这个数据放回到工作内存中，覆盖原有的值。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　这样做可以充分利用物理硬件的优势：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　(1)主内存，存储区域大，但是速度不行，适于存储，不适于快速读写&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　(2)工作内存、存储空间小，但是速度快，适于快速读写，不适于存储&lt;/span&gt;&lt;br/&gt;&lt;span&gt;同时还避免了Java线程读写主内存中数据同步问题。因为主内存对于各个Java线程都是可见的。如果java线程并发操作，就会导致主内存中的数据需要进行同步保护，否则就会出现错误的语义。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　但是这样做仍然会有一个问题：工作内存中的数据是拷贝数据。在Java线程操作的过程中，主内存中的数据可能已经发生改变，Java线程相当于是在用过时的值在计算和回写。这个问题就是数据称之为“同步”的含义所在，也是锁要处理的可见性的问题（以后有文章我会专门讲这个问题）。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如何解决这个问题呢？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　只能是通过“锁”的形式来处理。&lt;strong&gt;volatile关键字的作用之一，就是形成这样一个“锁”：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　如果一个变量被定义了volatile，那么每次Java线程在写入这个变量时，都会加入一个“lock addl $Ox0&quot;的操作指令。这样会形成一个“内存屏障”，当cpu将这条指令写入到主内存时，会告诉其他存有这份指令的工作内存加一个标识。表示这个变量已经发生了变化，当前工作内存中存储的拷贝数据已经过时（这个过程被称之为内核CacheInvalidate)。当其他线程需要使用该变量来操作时，系统会因为这个标识判定当前工作内存中的数据已经过时。从而主动刷新主内存中的值到自己下边的工作内存中。由于在整个过程中，系统已经在线程操作数据之前，提前刷新了变量的值，所以线程无法看到已经过时的数据的。因此从表现上来看，可以认为是不存在数据不一致的问题。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　这里需要专门强调下long、double型。对于内存模型中定义的指令来说，操作的数据都是32位的。如果数据是64位，那么就需要两次指令操作。对于虚拟机中64位数据类型：double、long型，就会因为需要两次操作的时间差，导致其他线程拿到的是一种修改的中间值。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　但是volatile的内存屏障专门对这里进行了处理，以保证这种中间值不会出现在其他cpu的工作内存中。同时目前商业的虚拟机已经都对这个问题专门进行了处理：对64位数据的读写也采用原子操作。为的就是防止long double这两个常用类型，由于没有增加volatile关键字，而导致在工作内存中出现奇怪的值。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;volatile的另外一个作用是禁止指令重排序的优化&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cpu线程在执行指令的过程中，为了保证速度更快，指令之间的顺序往往是通过优化重排序以后的顺序。为了保证重排序的指令不会有任何的歧义而仅仅是在速度上有所提升，系统会保证指令优化以后执行的结果是一致的。也就是你所获得的结果与没优化获得到的结果是一样的，不存在差异。但是由于指令顺序发生了变化，所以系统是无法保证这个过程中，其他的线程获取到的数据是能正确代表当前状态的。这里最经典的就是单例模式下，实例初始化的问题。请参见文章：设计模式之单例模式 的第3个方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;由于指令重排，系统会在变量没有初始化结束前，就已经给instance变量(防盗连接：本文首发自http://www.cnblogs.com/jilodream/ )赋予地址。这时候其他线程获取到的变量就是有问题的：instance!=null,但是里边的值却没有初始化完成。这里就需要使用volatile关键字禁止指令重排序：只有在实例初始化完毕后，才赋予变量instance引用。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　另外一个常见的例子是：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　线程B在刷新线程A的处理结果时，可能由于线程A还没有对变量初始化完毕，却提前刷新了变量，导致了线程B所获取到的变量的状态是错误的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;因此在定义多线程可见变量时，前边一定要加volatile关键字，保证该变量不会被因为指令顺序被优化，而导致其他线程获取到的值是无意义的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;关于Java语言的有序性在《深入理解Java虚拟机》中有一句话，总结的非常好：如果在本线程内观察，所有的操作都是有序的。如果在一个其它线程观察本线程，则所有的操作都是无序的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　前边是指，无论虚拟机怎么优化指令，当前线程在执行的语义和结果上都应该是一致的。（“线程内表现为串行的语义&quot;Within-Thread-As-If-Serial-Semantics)。后边是指指令会发生重排，其它线程中获取到的值，不能代表什么。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;其实volatile的这两个作用是互相关联的：&lt;strong&gt;正是由于volatile需要保证变量的可见性，因此不能将系统无序的中间指令结果反映到主内存中，让其它线程拿去使用可见，所以需要禁止掉指令重排序。保证拿到的结果是反映出当前的执行状态的。&lt;/strong&gt;（这里涉及到一个happens-before原则的概念，我会在后边的文章中介绍）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;volatile存在的问题&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　说了volatile的两个作用，volatile也有自身的不足。那就是volatile不能保证原子性：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;举个前文讲过的例子，volatile变量值被修改以后，会直接刷新到主内存中，并且其他线程能感知到。但是其他线程继续使用这个变量进行计算时，却不能保证其一直是最新的值。举个经典例子&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; a=0&lt;span&gt;；
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; add()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     a++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　两个线程t1，t2先后执行add)方法，变量a发生了自增。但是a变量的最终结果可能是1也可能是2。这取决于t2读取变量a的值是在第一个线程刷新a到主内存之前，还是主内存之后。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;a++操作最终在执行时，会执行三条指令:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1、从主内存中读取a值&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、a=a+1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3、写入a的值到主内存中&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　当t1执行完第二步时，假如此时t2也读取了a的值，则：主内存a=0；t1工作内存为a=1；t2工作内存为a=0；接下来t1执行回写a操作，但是t2由于已经读取了a的值在工作内存中，因此t2在执行了a++操作后，仍然会回写a=1到主内存中，这时尽管t1回写后，生成内存屏障，但是t2已经读取完毕，不会在自增阶段再主动刷新。(防盗连接：本文首发自http://www.cnblogs.com/jilodream/ )否则如果需要执行连续的多条指令，每次都要主动刷新变量，一旦发生变化就重头开始，这显然是不可能的。这种情况就需要程序员通过代码自己来保证没有问题。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;这里我们可以发现a变量不会因为volatile关键字，而使得自身的指令在外界看来是原子的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;因此volatile的使用存在如下限制场景：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　1、volatile可以写入，但是写入的值不应该依赖旧值&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　2、在确认某个状态的不变性时，不能将volatile变量作为因子。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　这两点在《java并发编程实战》、《深入理解java虚拟机》中都有提到类似的语义。第一点比较容易理解。第二点比较抽象，这里解释一下：就是说volatile适合于判断是否已经改变了，而不适合判断是否还没改变，因为volatile变量发生改变，则一定发生了变化，volatile没有发生变化，则不能说明一定没有发生变化。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如前文，a如果仍然等于0.此时不能认为：1、add方法没有被调用过2、整体没有被改变过。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 14:59:00 +0000</pubDate>
<dc:creator>王若伊_恩赐解脱</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jilodream/p/9452391.html</dc:identifier>
</item>
</channel>
</rss>