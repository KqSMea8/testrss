<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>RedHat 7.3 更新yum源 - F1renze</title>
<link>http://www.cnblogs.com/F1renze/p/8577195.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/F1renze/p/8577195.html</guid>
<description>&lt;h2 id=&quot;title-redhat-7.3-更新yum源&quot;&gt;title: RedHat 7.3 更新yum源&lt;br/&gt;&lt;/h2&gt;
&lt;p&gt;time: 2018.3.15&lt;/p&gt;
&lt;ul readability=&quot;0.95612431444241&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;查看所有yum包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@bogon ~]# rpm -qa | grep yum
yum-rhn-plugin-2.0.1-6.el7.noarch
yum-3.4.3-150.el7.noarch
yum-utils-1.1.31-40.el7.noarch
PackageKit-yum-1.0.7-6.el7.x86_64
yum-langpacks-0.4.2-7.el7.noarch
yum-metadata-parser-1.1.4-10.el7.x86_64&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;删除原有yum包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@bogon ~]# rpm -e yum-rhn-plugin-2.0.1-6.el7.noarch yum-3.4.3-150.el7.noarch yum-utils-1.1.31-40.el7.noarch PackageKit-yum-1.0.7-6.el7.x86_64 yum-langpacks-0.4.2-7.el7.noarch yum-metadata-parser-1.1.4-10.el7.x86_64 --nodeps&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;进入&lt;a href=&quot;http://mirrors.163.com/&quot;&gt;网易163源镜像地址&lt;/a&gt;寻找所需包：&lt;/li&gt;
&lt;/ul&gt;&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li&gt;点击&lt;code&gt;centos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;code&gt;7/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;code&gt;os/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;code&gt;x86_64/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;code&gt;Packages/&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;ctrl+f 搜索需要的包, 如下：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;yum-plugin-fastestmirror&lt;br/&gt;yum-updateonboot&lt;br/&gt;yum-utils&lt;br/&gt;yum-metadata-parser&lt;br/&gt;yum-3.4.3-150.el7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-42.el7.noarch.rpm

wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-updateonboot-1.1.31-42.el7.noarch.rpm

wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-utils-1.1.31-42.el7.noarch.rpm

wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm

wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-3.4.3-154.el7.centos.noarch.rpm&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;安装软件包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rpm -ivh yum-*
# 报错, 依赖包的版本不符：
rpm &amp;gt;= 0:4.11.3-22 is needed by yum-3.4.3-154.el7.centos.noarch&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;解决方法: 将所依赖的python-urlgrabber和rpm包升级&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;wget http://mirrors.163.com/centos/7/os/x86_64/Packages/rpm-4.11.3-25.el7.x86_64.rpm
wget http://mirrors.163.com/centos/7/os/x86_64/Packages/python-urlgrabber-3.10-8.el7.noarch.rpm
# 安装：
rpm -Uvh rpm-4.11.3-25.el7.x86_64.rpm --nodeps
rpm -Uvh python-urlgrabber-3.10-8.el7.noarch.rpm --nodeps&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新安装软件包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rpm -ivh yum-*&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新yum源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;rm /etc/yum.repos.d/redhat.repo
vim /etc/yum.repos.d/CentOS-Base.repo
# 内容:
#CentOS-Base.repo
#
# The mirror system uses the connecting IP address of the client and the
# update status of each mirror to pick mirrors that are updated to and
# geographically close to the client.  You should use this for CentOS updates
# unless you are manually picking other mirrors.
#
# If the mirrorlist= does not work for you, as a fall back you can try the
# remarked out baseurl= line instead.
#
#
[base]
name=CentOS-$7 - Base - 163.com
#mirrorlist=http://mirrorlist.centos.org/?release=$7&amp;amp;arch=$basearch&amp;amp;repo=os
baseurl=http://mirrors.163.com/centos/7/os/$basearch/
gpgcheck=1
gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7
 
#released updates
[updates]
name=CentOS-$7 - Updates - 163.com
#mirrorlist=http://mirrorlist.centos.org/?release=$7&amp;amp;arch=$basearch&amp;amp;repo=updates
baseurl=http://mirrors.163.com/centos/7/updates/$basearch/
gpgcheck=1
gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7
 
#additional packages that may be useful
[extras]
name=CentOS-$7 - Extras - 163.com
#mirrorlist=http://mirrorlist.centos.org/?release=$7&amp;amp;arch=$basearch&amp;amp;repo=extras
baseurl=http://mirrors.163.com/centos/7/extras/$basearch/
gpgcheck=1
gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7
 
#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-$7 - Plus - 163.com
baseurl=http://mirrors.163.com/centos/7/centosplus/$basearch/
gpgcheck=1
enabled=0
gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://teakki.com/p/57dbc1e740a05a0609bc0e19&quot;&gt;顺便， 设置网络自动启动&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 15:34:00 +0000</pubDate>
<dc:creator>F1renze</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/F1renze/p/8577195.html</dc:identifier>
</item>
<item>
<title>Go实现短url项目 - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/8576946.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/8576946.html</guid>
<description>&lt;p&gt;首先说一下这种业务的应用场景：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;把一个长url转换为一个短url网址&lt;/li&gt;
&lt;li&gt;主要用于微博，二维码，等有字数限制的场景&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;主要实现的功能分析：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;把长url的地址转换为短url地址&lt;/li&gt;
&lt;li&gt;通过短url获取对应的原始长url地址&lt;/li&gt;
&lt;li&gt;相同长url地址是否需要同样的短url地址&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里实现的是一个api服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201803/997599-20180315224257442-1011943675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;toc_1&quot;&gt;数据库设计&lt;/h2&gt;
&lt;p&gt;数据库的设计其实也没有非常复杂，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201803/997599-20180315224054371-193579891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有个设置需要主要就是关于数据库表中id的设计，需要设置为自增的&lt;br/&gt;并且这里有个问题需要提前知道，我们的思路是根据id的值会转换为62进制关于进制转换的代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
// 将十进制转换为62进制   0-9a-zA-&lt;span&gt;Z 六十二进制
func transTo62(id int64)string{
    &lt;/span&gt;// 1 -- &amp;gt; 1
    // 10-- &amp;gt;&lt;span&gt; a
    &lt;/span&gt;// 61-- &amp;gt;&lt;span&gt; Z
    charset :&lt;/span&gt;= &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;span&gt;
    var shortUrl []&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
    for{
        var result &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
        number :&lt;/span&gt;= id % 62&lt;span&gt;
        result &lt;/span&gt;=&lt;span&gt; charset[number]
        var tmp []&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
        tmp &lt;/span&gt;=&lt;span&gt; append(tmp,result)
        shortUrl &lt;/span&gt;=&lt;span&gt; append(tmp,shortUrl...)
        id &lt;/span&gt;= id / 62
        &lt;span&gt;if&lt;/span&gt; id == 0&lt;span&gt;{
            break
        }
    }
    fmt.Println(string(shortUrl))
    return string(shortUrl)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;所以这里需要设置一下数据库id的起始值，可以设置的大一点，这样转换为62进制之后不至于太短&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;代码逻辑&lt;/h2&gt;
&lt;p&gt;项目完整的代码git地址：&lt;a href=&quot;https://github.com/pythonsite/go_simple_code/tree/master/short_url&quot;&gt;https://github.com/pythonsite/go_simple_code/tree/master/short_url&lt;/a&gt;&lt;br/&gt;当然这里的代码还有待后面继续做优化，但是这里通过golang内置的net/http 库实现了一个简单的api功能&lt;/p&gt;
&lt;p&gt;代码的目录结构&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
|&lt;span&gt;____logic
&lt;/span&gt;| |&lt;span&gt;____logic.go
&lt;/span&gt;|&lt;span&gt;____model
&lt;/span&gt;| |&lt;span&gt;____data.go
&lt;/span&gt;|&lt;span&gt;____api
&lt;/span&gt;| |&lt;span&gt;____api.go
&lt;/span&gt;|&lt;span&gt;____client
&lt;/span&gt;| |____client.go
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;logic目录为主要的处理逻辑&lt;br/&gt;model是定义了request和response结构体&lt;br/&gt;api目录为程序的入口程序&lt;br/&gt;client 为测试请求，进行地址的转换&lt;/p&gt;
&lt;p&gt;model 代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package model


type Long2ShortRequest struct {
    OriginUrl string `json:&lt;/span&gt;&quot;origin_url&quot;&lt;span&gt;`
}

type ResponseHeader struct {
    Code &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; `json:&quot;code&quot;&lt;span&gt;`
    Message string `json:&lt;/span&gt;&quot;message&quot;&lt;span&gt;`
}

type Long2ShortResponse struct {
    ResponseHeader
    ShortUrl string `json:&lt;/span&gt;&quot;short_url&quot;&lt;span&gt;`
}

type Short2LongRequest struct {
    ShortUrl string `json:&lt;/span&gt;&quot;short_url&quot;&lt;span&gt;`
}

type Short2LongResponse struct {
    ResponseHeader
    OriginUrl string `json:&lt;/span&gt;&quot;origin_url&quot;&lt;span&gt;`
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;logic的代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package logic

import(
    &lt;/span&gt;&quot;go_dev/11/short_url/model&quot;
    &quot;github.com/jmoiron/sqlx&quot;
    &quot;fmt&quot;
    &quot;crypto/md5&quot;
    &quot;database/sql&quot;&lt;span&gt;
)

var (
    Db &lt;/span&gt;*&lt;span&gt;sqlx.DB
)

type ShortUrl struct {
    Id int64 `db:&lt;/span&gt;&quot;id&quot;&lt;span&gt;`
    ShortUrl string `db:&lt;/span&gt;&quot;short_url&quot;&lt;span&gt;`
    OriginUrl string `db:&lt;/span&gt;&quot;origin_url&quot;&lt;span&gt;`
    HashCode string `db:&lt;/span&gt;&quot;hash_code&quot;&lt;span&gt;`
}

func InitDb(dsn string)(err error) {
    &lt;/span&gt;//&lt;span&gt; 数据库初始化
    Db, err &lt;/span&gt;= sqlx.Open(&quot;mysql&quot;&lt;span&gt;,dsn)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Println(&lt;/span&gt;&quot;connect to mysql failed:&quot;&lt;span&gt;,err)
        return
    }
    return
}

func Long2Short(req &lt;/span&gt;*model.Long2ShortRequest) (response *&lt;span&gt;model.Long2ShortResponse, err error) {
    response &lt;/span&gt;= &amp;amp;&lt;span&gt;model.Long2ShortResponse{}
    urlMd5 :&lt;/span&gt;= fmt.Sprintf(&quot;%x&quot;,md5.Sum([]&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;(req.OriginUrl)))
    var &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; ShortUrl
    err &lt;/span&gt;= Db.Get(&amp;amp;&lt;span&gt;short&lt;/span&gt;,&quot;select id,short_url,origin_url,hash_code from short_url where hash_code=?&quot;&lt;span&gt;,urlMd5)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err ==&lt;span&gt; sql.ErrNoRows{
        err &lt;/span&gt;=&lt;span&gt; nil
        &lt;/span&gt;//&lt;span&gt; 数据库中没有记录，重新生成一个新的短url
        shortUrl,errRet :&lt;/span&gt;=&lt;span&gt; generateShortUrl(req,urlMd5)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; errRet !=&lt;span&gt; nil{
            err &lt;/span&gt;=&lt;span&gt; errRet
            return
        }
        response.ShortUrl &lt;/span&gt;=&lt;span&gt; shortUrl
        return
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        return
    }
    response.ShortUrl &lt;/span&gt;= &lt;span&gt;short&lt;/span&gt;&lt;span&gt;.ShortUrl
    return
}

func generateShortUrl(req &lt;/span&gt;*&lt;span&gt;model.Long2ShortRequest,hashcode string)(shortUrl string,err error){
    result,err :&lt;/span&gt;= Db.Exec(&quot;insert INTO short_url(origin_url,hash_code)VALUES (?,?)&quot;&lt;span&gt;,req.OriginUrl,hashcode)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        return
    }
    &lt;/span&gt;// 0-9a-zA-&lt;span&gt;Z 六十二进制
    insertId,_:&lt;/span&gt;=&lt;span&gt; result.LastInsertId()
    shortUrl &lt;/span&gt;=&lt;span&gt; transTo62(insertId)
    _,err &lt;/span&gt;= Db.Exec(&quot;update short_url set short_url=? where id=?&quot;&lt;span&gt;,shortUrl,insertId)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Println(err)
        return
    }
    return
}

&lt;/span&gt;// 将十进制转换为62进制   0-9a-zA-&lt;span&gt;Z 六十二进制
func transTo62(id int64)string{
    &lt;/span&gt;// 1 -- &amp;gt; 1
    // 10-- &amp;gt;&lt;span&gt; a
    &lt;/span&gt;// 61-- &amp;gt;&lt;span&gt; Z
    charset :&lt;/span&gt;= &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;span&gt;
    var shortUrl []&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
    for{
        var result &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
        number :&lt;/span&gt;= id % 62&lt;span&gt;
        result &lt;/span&gt;=&lt;span&gt; charset[number]
        var tmp []&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;
        tmp &lt;/span&gt;=&lt;span&gt; append(tmp,result)
        shortUrl &lt;/span&gt;=&lt;span&gt; append(tmp,shortUrl...)
        id &lt;/span&gt;= id / 62
        &lt;span&gt;if&lt;/span&gt; id == 0&lt;span&gt;{
            break
        }
    }
    fmt.Println(string(shortUrl))
    return string(shortUrl)
}


func Short2Long(req &lt;/span&gt;*model.Short2LongRequest) (response *&lt;span&gt;model.Short2LongResponse, err error) {
    response &lt;/span&gt;= &amp;amp;&lt;span&gt;model.Short2LongResponse{}
    var &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; ShortUrl
    err &lt;/span&gt;= Db.Get(&amp;amp;&lt;span&gt;short&lt;/span&gt;,&quot;select id,short_url,origin_url,hash_code from short_url where short_url=?&quot;&lt;span&gt;,req.ShortUrl)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err ==&lt;span&gt; sql.ErrNoRows{
        response.Code &lt;/span&gt;= 404&lt;span&gt;
        return
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        response.Code &lt;/span&gt;= 500&lt;span&gt;
        return
    }
    response.OriginUrl &lt;/span&gt;= &lt;span&gt;short&lt;/span&gt;&lt;span&gt;.OriginUrl
    return
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;api的代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;io/ioutil&quot;
    &quot;net/http&quot;
    &quot;fmt&quot;
    &quot;encoding/json&quot;
    &quot;go_dev/11/short_url/logic&quot;
    &quot;go_dev/11/short_url/model&quot;&lt;span&gt;
    _ &lt;/span&gt;&quot;github.com/go-sql-driver/mysql&quot;&lt;span&gt;
)

const (
    ErrSuccess &lt;/span&gt;= 0&lt;span&gt;
    ErrInvalidParameter &lt;/span&gt;= 1001&lt;span&gt;
    ErrServerBusy &lt;/span&gt;= 1002&lt;span&gt;
)

func getMessage(code &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) (msg string){
    switch code {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; ErrSuccess:
        msg &lt;/span&gt;= &quot;success&quot;
    &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ErrInvalidParameter:
        msg &lt;/span&gt;= &quot;invalid parameter&quot;
    &lt;span&gt;case&lt;/span&gt;&lt;span&gt; ErrServerBusy:
        msg &lt;/span&gt;= &quot;server busy&quot;&lt;span&gt;
    default:
        msg &lt;/span&gt;= &quot;unknown error&quot;&lt;span&gt;
    }

    return
}

&lt;/span&gt;//&lt;span&gt; 用于将返回序列化数据，失败的返回
func responseError(w http.ResponseWriter, code &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) {
    var response model.ResponseHeader
    response.Code &lt;/span&gt;=&lt;span&gt; code
    response.Message &lt;/span&gt;=&lt;span&gt; getMessage(code)

    data, err :&lt;/span&gt;=&lt;span&gt; json.Marshal(response)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        w.Write([]&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;(&quot;{\&quot;code\&quot;:500, \&quot;message\&quot;: \&quot;server busy\&quot;}&quot;&lt;span&gt;))
        return
    }

    w.Write(data)
}

&lt;/span&gt;//&lt;span&gt; 用于将返回序列化数据，成功的返回
func responseSuccess(w http.ResponseWriter, data interface{}) {


    dataByte, err :&lt;/span&gt;=&lt;span&gt; json.Marshal(data)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        w.Write([]&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;(&quot;{\&quot;code\&quot;:500, \&quot;message\&quot;: \&quot;server busy\&quot;}&quot;&lt;span&gt;))
        return
    }

    w.Write(dataByte)
}

&lt;/span&gt;//&lt;span&gt; 长地址到短地址
func Long2Short(w http.ResponseWriter, r &lt;/span&gt;*&lt;span&gt;http.Request) {
    &lt;/span&gt;//&lt;span&gt; 这里需要说明的是发来的数据是通过post发过来一个json格式的数据
    data, err :&lt;/span&gt;=&lt;span&gt; ioutil.ReadAll(r.Body)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        fmt.Println(&lt;/span&gt;&quot;read all failded, &quot;&lt;span&gt;, err)
        responseError(w, &lt;/span&gt;1001&lt;span&gt;)
        return
    }

    var req model.Long2ShortRequest
    &lt;/span&gt;//&lt;span&gt; 将反序列化的数据保存在结构体中
    err &lt;/span&gt;= json.Unmarshal(data, &amp;amp;&lt;span&gt;req)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        fmt.Println(&lt;/span&gt;&quot;Unmarshal failded, &quot;&lt;span&gt;, err)
        responseError(w, &lt;/span&gt;1002&lt;span&gt;)
        return
    }

    resp, err :&lt;/span&gt;= logic.Long2Short(&amp;amp;&lt;span&gt;req)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        fmt.Println(&lt;/span&gt;&quot;Long2Short failded, &quot;&lt;span&gt;, err)
        responseError(w, &lt;/span&gt;1003&lt;span&gt;)
        return
    }

    responseSuccess(w, resp)
}

&lt;/span&gt;//&lt;span&gt; 短地址到长地址
func Short2Long(w http.ResponseWriter, r &lt;/span&gt;*&lt;span&gt;http.Request) {
    &lt;/span&gt;//&lt;span&gt; 这里需要说明的是发来的数据是通过post发过来一个json格式的数据
    data, err :&lt;/span&gt;=&lt;span&gt; ioutil.ReadAll(r.Body)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        fmt.Println(&lt;/span&gt;&quot;read all failded, &quot;&lt;span&gt;, err)
        responseError(w, &lt;/span&gt;1001&lt;span&gt;)
        return
    }

    var req model.Short2LongRequest
    &lt;/span&gt;//&lt;span&gt; 将反序列化的数据保存在结构体中
    err &lt;/span&gt;= json.Unmarshal(data, &amp;amp;&lt;span&gt;req)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        fmt.Println(&lt;/span&gt;&quot;Unmarshal failded, &quot;&lt;span&gt;, err)
        responseError(w, &lt;/span&gt;1002&lt;span&gt;)
        return
    }

    resp, err :&lt;/span&gt;= logic.Short2Long(&amp;amp;&lt;span&gt;req)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        fmt.Println(&lt;/span&gt;&quot;Long2Short failded, &quot;&lt;span&gt;, err)
        responseError(w, &lt;/span&gt;1003&lt;span&gt;)
        return
    }
    responseSuccess(w, resp)
}

func main(){
    err :&lt;/span&gt;= logic.InitDb(&quot;root:123456@tcp(192.168.50.145:3306)/short_url?parseTime=true&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Printf(&lt;/span&gt;&quot;init db failed,err:%v\n&quot;&lt;span&gt;,err)
        return
    }
    http.HandleFunc(&lt;/span&gt;&quot;/trans/long2short&quot;&lt;span&gt;, Long2Short)
    http.HandleFunc(&lt;/span&gt;&quot;/trans/short2long&quot;&lt;span&gt;, Short2Long)
    http.ListenAndServe(&lt;/span&gt;&quot;:18888&quot;&lt;span&gt;, nil)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;这次通过这个小代码对go也有了一个初步的认识和使用，同时也通过net/http 包实现了api的功能，也对其基本使用有了大致了解&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 14:47:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/8576946.html</dc:identifier>
</item>
<item>
<title>Spring Boot Actutaur + Telegraf + InFluxDB + Grafana 构建监控平台之应用数据分析 - appleYang</title>
<link>http://www.cnblogs.com/zhikou/p/8576891.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhikou/p/8576891.html</guid>
<description>&lt;h2&gt;&lt;span class=&quot;mw-headline&quot;&gt;本节将引入完美的granafa仪表板，&lt;span id=&quot;Monitoring_Zimbra_Collaboration_-_InfluxDB.2C_Telegraf_and_Grafana&quot; class=&quot;mw-headline&quot;&gt;在上节的基础上，&lt;span id=&quot;Monitoring_Zimbra_Collaboration_-_InfluxDB.2C_Telegraf_and_Grafana&quot; class=&quot;mw-headline&quot;&gt;并提出自己的一些监控数据的总结和看法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;mw-headline&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315093157564-1996763056.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;你可以有一个类似于这个的Dashboard，会引入&lt;span id=&quot;Monitoring_Zimbra_Collaboration_-_InfluxDB.2C_Telegraf_and_Grafana&quot; class=&quot;mw-headline&quot;&gt;监控Zimbra协作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;mw-headline&quot;&gt;　　本节环境采用的是centos7系统，配置跟上节介绍的一样，但是Telegraf是企业级监控加入很多可靠的监控插件，非常有用的一些参数，随之也给自&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mw-headline&quot;&gt;己&lt;span class=&quot;mw-headline&quot;&gt;的监控数据分析带来了复杂度。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Telegraf：它负责收集我们通过配置文件传递的所有数据，Telegraf收集我们配置的输出结果，例如CPU / RAM / LOAD或Nginx，MariaDB等服务。&lt;/li&gt;
&lt;li&gt;InfluxDB：这是Telegraf发送所有这些信息的地方，InfluxDB专门设计用于高效存储大量信息，此外，可以定义信息保留期以防万一出现性能问题&lt;/li&gt;
&lt;li&gt;Grafana：它是仪表板，负责显示InfluxDB存储在数据库中的所有信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span id=&quot;Importing_Dashboard_in_Grafana&quot; class=&quot;mw-headline&quot;&gt;在Grafana中导入仪表板&lt;span class=&quot;mw-headline&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　你可以从这里下载：&lt;a class=&quot;external free&quot; href=&quot;https://grafana.com/dashboards/2846/&quot; rel=&quot;nofollow&quot;&gt;https://grafana.com/dashboards/2846/&lt;/a&gt;        导入它们的步骤如下，转到我们的仪表板，然后按导入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315095545182-1894837941.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　输入Zimbra仪表板的ID：2846，我们将自动显示以下内容，选择我们的数据源并将其提供给导入&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315095624561-472960448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　几分钟后，我们可以开始看到一个生动的仪表板，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315100220192-524423951.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;数据分析&lt;/h2&gt;
&lt;p&gt;　　Grafana将系统和应用程序的的数据展示出来,就要开始分析数据的意图。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; 应用程序数据：SpringBoot Actutaur中的metrics收集到的数据指标，通过jolokia拉取数据到telegrafa上代理转给输入到时间序列数据库中（我尝试过直接将指标存入influxdb中，但未找到解决方案，有知道的伙伴可以给我留言）　　　　&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; 　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315135737224-1080154770.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　补充：jolokia是一个JMX-HTTP桥梁，可替代JSR-160连接器。它是一种基于代理的方法，支持许多平台。&lt;/p&gt;
&lt;p&gt;　　 除了基本的JMX操作外，它还通过独特的功能（如批量请求和细粒度的安全策略）增强了JMX远程处理能力，应用程序的监控直接扩展到jvm。&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315140841633-312143253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　特别注意：代理模式只能在需要时使用。代理servlet自身比代理模式更强大，因为它消除了增加整体复杂性和性能的附加层。此外，在代理模式下，某些功能（如合并MBeanServers）也不可用。&lt;/p&gt;
&lt;p&gt;在telegrafa中，开启对应的数据，jolokia采用拉取数据，所以都会在[inputs.jolokia]更改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;   [[inputs.jolokia.metrics]]
     name = &quot;类加载次数&quot;&lt;span&gt;
     mbean  = &quot;java.lang:type=ClassLoading&quot;&lt;span&gt;
     attribute = &quot;LoadedClassCount,UnloadedClassCount,TotalLoadedClassCount&quot;&lt;span&gt;
   [[inputs.jolokia.metrics]]
        name = &quot;metrics数据&quot;&lt;span&gt;
        mbean=&quot;org.springframework.boot:type=Endpoint,name=metricsEndpoint&quot;&lt;span&gt;
        attribute = &quot;Data&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　grafana中在数据库中查到的就会有对应由jolokia拉去的数据做下拉列表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315144557458-1559619537.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;系统信息：包括处理器数量processors、运行时间uptime和instance.uptime、系统平均负载systemload.average。&lt;/li&gt;
&lt;li&gt;mem.*：内存概要信息，包括分配给应用的总内存数量以及当前空闲的内存数量。这些信息来自java.lang.Runtime。&lt;/li&gt;
&lt;li&gt;heap.*：堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。&lt;/li&gt;
&lt;li&gt;nonheap.*：非堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getNonHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。&lt;/li&gt;
&lt;li&gt;threads.*：线程使用情况，包括线程数、守护线程数（daemon）、线程峰值（peak）等，这些数据均来自java.lang.management.ThreadMXBean。&lt;/li&gt;
&lt;li&gt;classes.*：应用加载和卸载的类统计。这些数据均来自java.lang.management.ClassLoadingMXBean。&lt;/li&gt;
&lt;li&gt;gc.*：垃圾收集器的详细信息，包括垃圾回收次数gc.ps_scavenge.count、垃圾回收消耗时间gc.ps_scavenge.time、标记-清除算法的次数gc.ps_marksweep.count、标记-清除算法的消耗时间gc.ps_marksweep.time。这些数据均来自java.lang.management.GarbageCollectorMXBean。&lt;/li&gt;
&lt;li&gt;httpsessions.*：Tomcat容器的会话使用情况。包括最大会话数httpsessions.max和活跃会话数httpsessions.active。该度量指标信息仅在引入了嵌入式Tomcat作为应用容器的时候才会提供。&lt;/li&gt;
&lt;li&gt;gauge.*：HTTP请求的性能指标之一，它主要用来反映一个绝对数值。比如上面示例中的&lt;strong&gt;gauge.response.hello: 5，它表示上一次hello请求的延迟时间为5毫秒。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;counter.*：HTTP请求的性能指标之一，它主要作为计数器来使用，记录了增加量和减少量。如上示例中&lt;strong&gt;counter.status.200.hello: 11，它代表了hello请求返回200状态的次数为11。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;double asterisks（&lt;code class=&quot;literal&quot;&gt;star-star&lt;/code&gt;）来自与Spring MVC匹配的请求&lt;code class=&quot;literal&quot;&gt;/**&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;（通常是静态资源）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;/trace：该端点用来返回基本的HTTP跟踪信息&lt;/li&gt;
&lt;li&gt;/dump：该端点用来暴露程序运行中的线程信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180315160157683-527277354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在应用层面只能监控到接口的200，response，400的状态，时间响应上，需要的信息量还不足。可以在telegraf.conf中开启net监控网络等，使用正确的插件帮助我们实现监控需求。&lt;/p&gt;
&lt;p&gt;　　以上都是我个人在实践中的总结和资料整理，如有疑问可以给我留言，我会及时回复您的。&lt;/p&gt;

</description>
<pubDate>Thu, 15 Mar 2018 14:40:00 +0000</pubDate>
<dc:creator>appleYang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhikou/p/8576891.html</dc:identifier>
</item>
<item>
<title>WPF自学入门（七）WPF 初识Binding - 黄昏前黎明后</title>
<link>http://www.cnblogs.com/fly-bird/p/8576748.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fly-bird/p/8576748.html</guid>
<description>&lt;p&gt;       今天记录一下Binding的基础和具体的使用方法，说起这个Binding，在WPF中，Binding是很重要的特征，在传统的Windows软件来看，大多数都是UI驱动程序的模式，也可以说事件驱动程序，这个程序模式在工作过几年的程序员中是根深蒂固的，WPF作为Winform的升级，它把UI驱动程序彻底改变了，核心回到了数据驱动程序的模式上面，这样，程序就回到了算法和数据。数据，才是真正需要重点处理的！&lt;/p&gt;
&lt;p&gt;        Binding在数据驱动程序模式中起着至关重要的作用，它最为重要的一个特点就是通讯，连接着前台与后台。首先看一下Binding最简单的使用方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、元素之间的绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221321853-815498956.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    这里有3个控件,Slider,TextBox,Label，其中TextBox和Label都作为目标，Slider都作为数据源，把Slider中的值交由两个控件体现，移动滑块，TextBox会自动显示Value的值，也就是FontSize的值。因为两个绑定都设置了双向绑定，所以可以在文本框中输入值，然后丢失焦点，也能反馈回去。&lt;/p&gt;
&lt;p&gt;看一下XAML中的绑定语句，这里用的ElementName就是制定要绑定的对象的名字，Path就是要绑定的依赖项属性，mode就是绑定方式，这里需要说明的是mode有五种方式：&lt;/p&gt;
&lt;p&gt;(1)OneWay 单向绑定&lt;/p&gt;
&lt;p&gt;(2)TwoWay 双向绑定&lt;/p&gt;
&lt;p&gt;(3)OneTime，最初根据源属性值设置目标属性，以后就忽略所有改变，就是说，只进行初始化。&lt;/p&gt;
&lt;p&gt;(4)OneWayToSource，这和OneWay相反&lt;/p&gt;
&lt;p&gt;(5)Default，这是默认形式，它根据目标属性自动设置。&lt;/p&gt;
&lt;p&gt;      如果把TextBox中的值修改成其他的，滑条位置没有改变，字体大小也没有改变，这是什么回事呢？当TextBox失去焦点的时候，就会发生相应的改变了。这是因为这个绑定中的默认更新机制，更新机制Binding.UpdateSourceTrigger，这个属性有4个枚举值&lt;/p&gt;
&lt;p&gt;（1）PropertyChange，当值改变的时候，就更新。&lt;/p&gt;
&lt;p&gt;（2）LostFocus，当时去焦点的时候更新.&lt;/p&gt;
&lt;p&gt;（3）Explicit，当调用BingingExpression.UpdateSource()方法的使用更新，其他情况不会更新。&lt;/p&gt;
&lt;p&gt;（4）Default，默认形式&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：以上这四种更新机制的设定，只会影响源数据，而不会影响目标数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221332118-1699150909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二：元素自身的绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     除了可以绑定别的元素，也可以绑定自身的其他属性，例如Slider自身的Opacity属性和自身的Value属性绑定，当滑块向左移动的时候，会逐渐隐藏起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221357716-899189811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三：后台数据与元素之间的绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     前面说了元素之间的绑定和元素自身的绑定，最后重点来了后台数据和前台元素的绑定，这种绑定方式很好地体现了数据驱动程序的运行模式。&lt;/p&gt;
&lt;p&gt;     首先新建Person类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221417300-2068208561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    页面后台代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221426585-952291307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221434620-1750228792.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;       数据的绑定的方式已经写完了。Binding是一条高速公路，那么为了提高数据传递的合法性和有效性，我们要在这条高速公路中建立起一系列的关卡，有的用来转换数据，有的用来校验数据，下面就说一下Binding对数据的校验和转换。&lt;/p&gt;
&lt;p&gt;(一)Binding的数据校验&lt;/p&gt;
&lt;p&gt;     Binding的数据校验工作是派生自ValidationRule类，并且对Validate方法进行重写的自定义类！看一下实例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221443857-1572395500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      先设计一个检验类，它继承ValidationRule类并且重写Validate方法。使用这个类的时候是创建Binding的时候设置校验的。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221454785-1308192878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好了，看一下结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221502583-318968080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      因为设置了值传过去的值不能是超过0~100之间，所以当超过了就显示红色边框。在Binding中，默认是会认为数据源是肯定正确的，所以如果将TextBox作为数据源，而Slider作为目标，数据源输入错误是没有显示的，那么怎么解决这个问题呢，设置VdataValidationRule.ValidatesOnTargetUpdated = true;&lt;/p&gt;

&lt;p&gt;( 二)Binding的数据转换&lt;/p&gt;
&lt;p&gt;       Binding还有另外一种机制称为数据转换，当Source端指定的Path属性值和Target端指定的目标属性不一致的时候，我们可以添加数据转换器（Convert）。上面我们提到的问题实际上就是double和stirng类型相互转换的问题，因为处理起来比较简单，所以WPF类库就自己帮我们做了，但有些数据类型转换就不是WPF能帮我们做的了，当遇到这些情况，我们只能自己动手写Converter，方法是创建一个类并让这个类实现IValueConverter接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221512148-1656706911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;        这个就是日期转换类，它有两个方法：&lt;/p&gt;
&lt;p&gt;       1.当值从绑定源传播给绑定目标时，调用方法Convert&lt;/p&gt;
&lt;p&gt;       2.当值从绑定目标传播给绑定源时，调用此方法ConvertBack，方法ConvertBack的实现必须是方法Convert的反向实现。&lt;/p&gt;
&lt;p&gt;        这两个方法分别在里面写入怎么转换，转换成什么类型就是返回类型。&lt;/p&gt;
&lt;p&gt;下面就是使用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221523674-1181694798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;好了，把这个绑定的Converter属性设置成我们设计的转换类的实例就可以了。看一下程序的界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180315221531413-1963773383.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 15 Mar 2018 14:17:00 +0000</pubDate>
<dc:creator>黄昏前黎明后</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fly-bird/p/8576748.html</dc:identifier>
</item>
<item>
<title>SIMD---MMX代码优化 - lgxZJ</title>
<link>http://www.cnblogs.com/lgxZJ/p/8576698.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lgxZJ/p/8576698.html</guid>
<description>&lt;p&gt;单指令多数据流，即SIMD（Single Instruction， Multiple Data）指一类能够在单个指令周期内同时处理多个数据元素的指令集，利用的是&lt;strong&gt;数据级并行&lt;/strong&gt;来提高运行效率，典型的代表由Intel的MMX和SSE指令系列。这类指令的使用环境是对多个数据进行同一种处理，因此典型的应用场景就是多媒体领域，特别是在其中的编解码流程中。&lt;/p&gt;
&lt;h2 id=&quot;simd优缺点&quot;&gt;1. SIMD优缺点&lt;/h2&gt;
&lt;h3 id=&quot;优点&quot;&gt;1.1 优点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;效率高&lt;/strong&gt;：单指令多数据流意味着只需要一个指令周期就能同时对多个数据进行批处理，虽然该类指令本身的指令周期可能会较一般的指令长，但是整体考虑肯定是提高了处理效率。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;缺点&quot;&gt;1.2 缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;适用场景有限：并不是所有的情况都能使用SIMD，有些情况下就算能使用，也需要对原有算法进行不小的改动。&lt;/li&gt;
&lt;li&gt;增大功耗和芯片面积：因为多数据流，cpu需要更大的寄存器来存储这些数据。&lt;/li&gt;
&lt;li&gt;人为编写：目前编译器对SIMD的翻译有限，使用时需要开发者人为编写。&lt;/li&gt;
&lt;li&gt;固定的数据元素个数：例如MMX指令，只能对1个64位、2个32位、4个16位、8个8位数据进行批量处理，其他位长的数据元素需要特殊处理。比如对6个8位元素进行处理，需要额外填充剩余的2个字节。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;mmx指令简介&quot;&gt;2. MMX指令简介&lt;/h2&gt;
&lt;p&gt;MMX指令有8个64位寄存器（MM0~MM7），但MMX实际上并没有硬件支持的新寄存器，它使用浮点寄存器来模拟MMX指令寄存器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/03/14/5aa9430523114.gif&quot; alt=&quot;mmx-pic&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当使用MMX指令的时候，一个叫做FP（Floating Point） Tag 的Word（2字节）被用来映射浮点寄存器到MMX寄存器。这样浮点寄存器就成了MMX寄存器的容器，用来执行计算。从浮点指令切换到MMX指令实在处理器内部完成的，不需要人为的操作；相反，从MMX切换到浮点指令时，需要手动调用&lt;strong&gt;emms&lt;/strong&gt;或者**__mm_empty()**Intrinsics。&lt;/p&gt;
&lt;p&gt;MMX指令与x86指令类似可以分为几类，具体使用及介绍可以参考Oracle的&lt;a href=&quot;https://docs.oracle.com/cd/E18752_01/html/817-5477/eojdc.html&quot;&gt;手册&lt;/a&gt;，这里不再重复介绍：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据传输指令&lt;/li&gt;
&lt;li&gt;转换指令&lt;/li&gt;
&lt;li&gt;算数指令&lt;/li&gt;
&lt;li&gt;比较指令&lt;/li&gt;
&lt;li&gt;逻辑运算指令&lt;/li&gt;
&lt;li&gt;位移指令&lt;/li&gt;
&lt;li&gt;状态管理指令&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;intrinsics-or-asm&quot;&gt;3. Intrinsics or Asm&lt;/h2&gt;
&lt;p&gt;我们可以用通常的汇编嵌入方式在C/C++代码中调用mmx指令，但是这样一来C/C++开发者可能不是很习惯，尤其是它们没有接触过汇编语言的情况下；Intel提供了另一种方式来供开发者选择----Compiler Intrinsics。&lt;/p&gt;
&lt;p&gt;Compiler Intrinsics是内建在编译器里的函数，Intrinsics通常会以汇编代码的形式被内联到代码中且具有较高的执行效率，因为编译器知道intrinsics的表现，相比内嵌汇编代码编译器能做更多的&lt;strong&gt;优化&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同时，Intrinsics的使用方式是&lt;strong&gt;停留在宿主语言层&lt;/strong&gt;的，所以C语言（通常情况下）相比汇编语言拥有的所有优点，Intrinsics都有（比如我可以对Intrinsics数据类型做类型单位的递增递减）。&lt;/p&gt;
&lt;h2 id=&quot;效率比较&quot;&gt;4. 效率比较&lt;/h2&gt;
&lt;p&gt;我们这里分别简单测试C++、Intrinsics（使用MMX）、Asm（使用MMX）三种形式代码的执行效率，示例中我们分别对内存中的100 000 000个字节进行&lt;code&gt;加&lt;/code&gt;算数运算：&lt;/p&gt;
&lt;h3 id=&quot;c代码&quot;&gt;4.1 C++代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;void calculateUsingCpp(char* data, unsigned size)
{
    assert(size % 8 == 0);

    unsigned step = 10;
    for (unsigned i = 0; i &amp;lt; size; ++i)
    {
        *data++ += step;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;intrinsics代码&quot;&gt;4.2 Intrinsics代码&lt;/h3&gt;
&lt;p&gt;Intrinsics代码中，我们每次执行mmx Intrinsics时都打包8个字节的数据并执行加操作，执行完mmx指令后我们需要调用**_mm_empty()** Intrinsics来取消mmx指令对浮点寄存器的别名映射：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void calculateUsingIntrinsics(char* data, unsigned size)
{
    assert(size % 8 == 0);

    __m64 step = _mm_set_pi8(10, 10, 10, 10, 10, 10, 10, 10);
    __m64* dst = reinterpret_cast&amp;lt;__m64*&amp;gt;(data);
    for (unsigned i = 0; i &amp;lt; size; i += 8)
    {
        auto sum = _mm_adds_pi8(step, *dst);
        *dst++ = sum;
    }

    _mm_empty();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;asm代码&quot;&gt;4.3 Asm代码&lt;/h3&gt;
&lt;p&gt;Intel汇编语法在嵌入到高级语言代码中时可以&lt;strong&gt;直接使用上下文中的变量&lt;/strong&gt;，这一点非常方便：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void calculateUsingAsm(char* data, unsigned size)
{
    assert(size % 8 == 0);

    unsigned loopCount = size / 8;
    __int64 value = 0x0a0a0a0a0a0a0a0a;
    __asm 
    {
            push eax
            push ecx

            mov eax, data
            mov ecx, loopCount
            movq mm1, value

        startLoop:
            movq mm0, [eax]
            paddb  mm0, mm1
            movq [eax], mm0

            add eax, 8
            dec ecx
            jnz startLoop

            emms
            pop ecx
            pop eax
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;运行结果对比&quot;&gt;5. 运行结果对比&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/03/15/5aaa7abfed312.png&quot; alt=&quot;result-pic&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出运行时间比是 &lt;strong&gt;8 : 1.5 : 1&lt;/strong&gt;左右，完整代码见&lt;a href=&quot;https://github.com/lgxZJ/Miscellaneous/blob/master/SIMD/mmx.cpp&quot;&gt;链接&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 14:07:00 +0000</pubDate>
<dc:creator>lgxZJ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lgxZJ/p/8576698.html</dc:identifier>
</item>
<item>
<title>读书笔记-浅析Java运行时数据区 - 人不学习枉少年</title>
<link>http://www.cnblogs.com/homejim/p/8576539.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/homejim/p/8576539.html</guid>
<description>&lt;p&gt;作为一个 Java 为主语言的程序员，我偶尔也需要 用 C/C++ 写程序，在使用时让我很烦恼的一件事情就是需要对 new 出来的对象进行 delete/free 操作，我老是担心忘了这件事情，从而导致内存泄漏或溢出。所以，使用Java让我感觉很爽。但理解 Java 的内存区域是很有必要的。对于 Java 的内存，我们大多数的时候都只是在说堆内存（Heap）和栈内存（Stack），但 Java 内存区域的划分实际上更细，了解它可以让我们进一步的去了解这门语言。&lt;/p&gt;

&lt;p&gt;以下为 Java 运行时数据区的图。&lt;/p&gt;
&lt;p&gt;盗图一张，如有侵权，请联系我删除，谢谢！&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1185738/201803/1185738-20180315214101269-1398143156.png&quot; alt=&quot;内存&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;程序计数器&quot;&gt;程序计数器&lt;/h2&gt;
&lt;p&gt;程序计数器可以看做是当前线程所执行字节码的行号指示器。字节码就是 「.class」 文件中一堆16进制的字节。字节码解释器通过更改程序计数器的值来选取下一条需要执行的字节码指令，分支、循环异常处理等也需要依赖此进行。其是线程独立的，每个线程都有一个。&lt;/p&gt;
&lt;p&gt;如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法，这个计数器值则为空（Undefined）。&lt;/p&gt;
&lt;h2 id=&quot;java虚拟机栈&quot;&gt;Java虚拟机栈&lt;/h2&gt;
&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame[1]）用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。也就是说，当退出相应作用域之后，栈中的内存空间就释放掉了。其中，与我们关系最大的当属于局部变量表。&lt;/p&gt;
&lt;h3 id=&quot;局部变量表&quot;&gt;局部变量表&lt;/h3&gt;
&lt;p&gt;局部变量表是我们平时接触的最多的，很多时候我们会把它与虚拟机栈等同起来，但其实它只是一大部分而已。&lt;/p&gt;
&lt;h4 id=&quot;局部变量表存放的内容&quot;&gt;局部变量表存放的内容&lt;/h4&gt;
&lt;p&gt;局部变量表中存放了编译期可知的八种基本数据类型、对象引用（它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址）&lt;/p&gt;
&lt;h4 id=&quot;局部变量表的大小&quot;&gt;局部变量表的大小&lt;/h4&gt;
&lt;p&gt;局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小&lt;/p&gt;
&lt;h4 id=&quot;局部变量表相关异常&quot;&gt;局部变量表相关异常&lt;/h4&gt;
&lt;p&gt;如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;h2 id=&quot;本地方法栈&quot;&gt;本地方法栈&lt;/h2&gt;
&lt;p&gt;本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则为虚&lt;br/&gt;拟机使用到的Native方法服务。&lt;/p&gt;
&lt;h2 id=&quot;java堆&quot;&gt;Java堆&lt;/h2&gt;
&lt;h3 id=&quot;简介-1&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;Java堆（Java Heap）是 Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就&lt;br/&gt;是存放对象实例，几乎所有的对象实例都在这里分配内存。&lt;/p&gt;
&lt;p&gt;Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”&lt;/p&gt;
&lt;h3 id=&quot;大小&quot;&gt;大小&lt;/h3&gt;
&lt;p&gt;Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。&lt;br/&gt;在虚拟机实现时，Java 堆既可以实现成固定大小的，也可以是可扩展的。当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 OutOfMemoryError 异常。&lt;/p&gt;
&lt;h2 id=&quot;方法区&quot;&gt;方法区&lt;/h2&gt;
&lt;h3 id=&quot;简介-2&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据。 虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与 Java 堆区分开来。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;特点&lt;/h3&gt;
&lt;p&gt;Java 虚拟机规范对方法区的限制非常宽松，除了和 Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。 相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。 这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说，这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是必要的。&lt;/p&gt;
&lt;h3 id=&quot;运行时常量池&quot;&gt;运行时常量池&lt;/h3&gt;
&lt;p&gt;运行时常量池（Runtime Constant Pool）是方法区的一部分。 Class 文件中除了有类的版本、 字段、 方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。Java虚拟机对Class文件每一部分（自然也包括常量池）的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、 装载和执行，但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。&lt;/p&gt;
&lt;p&gt;不过，一般来说，除了保存 Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中[1]。运行时常量池相对于 Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量一定只有编译期才能产生，也就是并非预置入 Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是 String 类的 intern() 方法。既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 13:42:00 +0000</pubDate>
<dc:creator>人不学习枉少年</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/homejim/p/8576539.html</dc:identifier>
</item>
<item>
<title>Python + request + unittest实现接口测试框架 - Andrea-Pirlo</title>
<link>http://www.cnblogs.com/ailiailan/p/8535293.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ailiailan/p/8535293.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、为什么要写代码实现接口自动化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;大家知道很多接口测试工具可以实现对接口的测试，如postman、jmeter、fiddler等等，而且使用方便，那么为什么还要写代码实现接口自动化呢？工具虽然方便，但也不足之处：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试数据不可控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接口测试本质是对数据的测试，调用接口，输入一些数据，随后，接口返回一些数据。验证接口返回数据的正确性。在用工具运行测试用例之前不得不手动向数据库中插入测试数据。这样我们的接口测试是不是就没有那么“自动化了”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无法测试加密接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是接口测试工具的一大硬伤，如我们前面开发的接口用工具测试完全没有问题，但遇到需要对接口参 数进行加密/解密的接口，例如 md5、base64、AES 等常见加密方式。本书第十一章会对加密接口进行介绍。 又或者接口的参数需要使用时间戳，也是工具很难模拟的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展能力不足&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们在享受工具所带来的便利的同时，往往也会受制于工具所带来的局限。例如，我想将测试结果生 成 HMTL 格式测试报告，我想将测试报告发送到指定邮箱。我想对接口测试做定时任务。我想对接口测试做持续集成。这些需求都是工具难以实现的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、接口自动化测试设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接口测试调用过程可以用下图概括，增加了测试数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201803/907091-20180309184252836-952821120.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一般的&lt;strong&gt;接口工具&lt;/strong&gt;测试过程：&lt;/p&gt;
&lt;p&gt;1、接口工具调用被测系统的接口（传参 username=&quot;zhangsan&quot;）。&lt;/p&gt;
&lt;p&gt;2、系统接口根据传参（username=&quot;zhangsan&quot;）向&lt;strong&gt;正式数据库&lt;/strong&gt;中查询数据。&lt;/p&gt;
&lt;p&gt;3、将查询结果组装成一定格式的数据，并返回给被调用者。&lt;/p&gt;
&lt;p&gt;4、人工或通过工具的断言功能检查接口测试的正确性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口自动化测试项目&lt;/strong&gt;，为了使接口测试对数据变得可控，测试过程如下：&lt;/p&gt;
&lt;p&gt;1、接口测试项目先向&lt;strong&gt;测试数据库&lt;/strong&gt;中插入测试数据（zhangsan 的个人信息）。&lt;/p&gt;
&lt;p&gt;2、调用被测系统接口（传参 username=&quot;zhangsan&quot;）。&lt;/p&gt;
&lt;p&gt;3、系统接口根据传参（username=&quot;zhangsan&quot;）向测试数据库中进行查询并得到 zhangsan 个人信息。&lt;/p&gt;
&lt;p&gt;4、将查询结果组装成一定格式的数据，并返回给被调用者。&lt;/p&gt;
&lt;p&gt;5、通过单元测试框架断言接口返回的数据（zhangsan 的个人信息），并生成测试报告。&lt;/p&gt;
&lt;p&gt;为了使正式数据库的数据不被污染，建议使用独立的&lt;strong&gt;测试数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、requests库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Requests 使用的是 urllib3，因此继承了它的所有特性。Requests 支持 &lt;strong&gt;HTTP 连接保持和连接池&lt;/strong&gt;，支持&lt;strong&gt;使用cookie保持会话&lt;/strong&gt;，支持&lt;strong&gt;文件上传&lt;/strong&gt;，支持&lt;strong&gt;自动确定响应内容的编码。&lt;/strong&gt;对request库的更详细的介绍可以看我之前接口测试基础的博客：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://www.cnblogs.com/ailiailan/p/7388784.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://www.cnblogs.com/ailiailan/p/7412945.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、接口测试代码示例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面以之前用&lt;strong&gt;python+django&lt;/strong&gt;开发的用户签到系统为背景，展示接口测试的代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么开发接口？开发的接口主要给谁来用？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前端和后端分离是近年来 Web 应用开发的一个发展趋势。这种模式将带来以下优势：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、后端可以不用必须精通前端技术（HTML/JavaScript/CSS），只专注于数据的处理，对外提供 API 接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、前端的专业性越来越高，通过 API 接口获取数据，从而专注于页面的设计。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、前后端分离增加接口的应用范围，开发的接口可以应用到 Web 页面上，也可以应用到移动 APP 上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这种开发模式下，接口测试工作就会变得尤为重要了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;开发实现的接口代码示例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加发布会接口实现&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_event(request):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     eid = request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;)                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发布会id&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     name = request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;)               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发布会标题&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     limit = request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;)             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 限制人数&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     status = request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;)           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 状态&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     address = request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;)         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 地址&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     start_time = request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发布会时间&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; eid ==&lt;span&gt;''&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; name == &lt;span&gt;''&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; limit == &lt;span&gt;''&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; address == &lt;span&gt;''&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; start_time == &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10021,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parameter error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     result = Event.objects.filter(id=&lt;span&gt;eid)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10022,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;event id already exists&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     result = Event.objects.filter(name=&lt;span&gt;name)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10023,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;event name already exists&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; status == &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         status = 1
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         Event.objects.create(id=eid,name=name,limit=limit,address=address,status=int(status),start_time=&lt;span&gt;start_time)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ValidationError:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         error = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time format error. It must be in YYYY-MM-DD HH:MM:SS format.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10024,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:error})
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:200,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;add event success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过POST请求接收发布会参数：发布会id、标题、人数、状态、地址和时间等参数。&lt;/p&gt;
&lt;p&gt;首先，判断eid、name、limit、address、start_time等字段均不能为空，否则JsonResponse()返回相应的状态码和提示。JsonResponse()是一个非常有用的方法，它可以直接将字典转化成Json格式返回到客户端。&lt;/p&gt;
&lt;p&gt;接下来，判断发布会id是否存在，以及发布会名称（name）是否存在；如果存在将返回相应的状态码和 提示信息。&lt;/p&gt;
&lt;p&gt;再接下来，判断发布会状态是否为空，如果为空，将状态设置为1（True）。&lt;/p&gt;
&lt;p&gt;最后，将数据插入到 Event 表，在插入的过程中如果日期格式错误，将抛出 ValidationError 异常，接收 该异常并返回相应的状态和提示，否则，插入成功，返回状态码200和“add event success”的提示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发布会查询接口实现&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_event_list(request):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     eid = request.GET.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;)      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发布会id&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     name = request.GET.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发布会名称&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; eid == &lt;span&gt;''&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; name == &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10021,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parameter error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; eid != &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         event =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             result = Event.objects.get(id=&lt;span&gt;eid)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ObjectDoesNotExist:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10022, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;query result is empty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result.id
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result.name
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result.limit
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result.status
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result.address
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; result.start_time
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:200, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:event})
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; name != &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         datas =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         results = Event.objects.filter(name__contains=&lt;span&gt;name)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; results:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; r &lt;span&gt;in&lt;/span&gt;&lt;span&gt; results:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 event =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; r.id
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; r.name
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; r.limit
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; r.status
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; r.address
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 event[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; r.start_time
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                datas.append(event)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:200, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:datas})
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; JsonResponse({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:10022, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;query result is empty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过GET请求接收发布会id和name 参数。两个参数都是可选的。首先，判断当两个参数同时为空，接口返回状态码10021，参数错误。&lt;/p&gt;
&lt;p&gt;如果发布会id不为空，优先通过id查询，因为id的唯一性，所以，查询结果只会有一条，将查询结果 以 key:value 对的方式存放到定义的event字典中，并将数据字典作为整个返回字典中data对应的值返回。&lt;/p&gt;
&lt;p&gt;name查询为模糊查询，查询数据可能会有多条，返回的数据稍显复杂；首先将查询的每一条数据放到一 个字典event中，再把每一个字典再放到数组datas中，最后再将整个数组做为返回字典中data对应的值返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口测试代码示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查询发布会接口测试代码&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://127.0.0.1:8000/api/get_event_list/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; r = requests.get(url, params={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(result)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;assert&lt;/span&gt; result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == 200
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;assert&lt;/span&gt; result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;assert&lt;/span&gt; result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xx 产品发布会&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;assert&lt;/span&gt; result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;北京林匹克公园水立方&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;assert&lt;/span&gt; result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2016-10-15T18:00:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为“发布会查询接口”是GET类型，所以，通过requests库的get()方法调用，第一个参数为调用接口的URL地址，params设置接口的参数，参数以字典形式组织。&lt;/p&gt;
&lt;p&gt;json()方法可以将接口返回的json格式的数据转化为字典。&lt;/p&gt;
&lt;p&gt;接下来就是通过 assert 语句对接字典中的数据进行断言。分别断言status、message 和data的相关数据等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用unittest单元测试框架开发接口测试用例&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;em&gt;&lt;em&gt;&lt;span&gt; 1 #发布会查询接口测试代码 &lt;br/&gt;2 import unittest&lt;br/&gt;3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GetEventListTest(unittest.TestCase):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         self.base_url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://127.0.0.1:8000/api/get_event_list/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_get_event_list_eid_null(self):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; eid 参数为空 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         r = requests.get(self.base_url, params={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10021&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;parameter error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_get_event_list_eid_error(self):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; eid=901 查询结果为空 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         r = requests.get(self.base_url, params={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:901&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10022&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;query result is empty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_get_event_list_eid_success(self):
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 根据 eid 查询结果成功 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         r = requests.get(self.base_url, params={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 200&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mx6发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京国家会议中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_get_event_list_nam_result_null(self):
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 关键字‘abc’查询 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         r = requests.get(self.base_url, params={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10022&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;query result is empty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_get_event_list_name_find(self):
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 关键字‘发布会’模糊查询 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         r = requests.get(self.base_url, params={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 200&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mx6发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         self.assertEqual(result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京国家会议中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;br/&gt;48&lt;br/&gt;49if __name__ == '__main__':&lt;br/&gt;&lt;/em&gt;&lt;/em&gt;50      unittest.main()&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;  &lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;unittest单元测试框架可以帮助&lt;strong&gt;组织和运行接口测试用例。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、接口自动化测试框架实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于接口自动化测试，unittest 已经帮我们做了大部分工作，接下来只需要&lt;strong&gt;集成数据库操作&lt;/strong&gt;，以及&lt;strong&gt;HTMLTestRunner测试报告生成&lt;/strong&gt;扩展即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;框架结构如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201803/907091-20180312161750332-810055375.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pyrequests 框架：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;db_fixture/： 初始化接口测试数据。&lt;/p&gt;
&lt;p&gt;interface/： 用于编写接口自动化测试用例。&lt;/p&gt;
&lt;p&gt;report/： 生成接口自动化测试报告。&lt;/p&gt;
&lt;p&gt;db_config.ini ： 数据库配置文件。&lt;/p&gt;
&lt;p&gt;HTMLTestRunner.py unittest 单元测试框架扩展，生成 HTML 格式的测试报告。&lt;/p&gt;
&lt;p&gt;run_tests.py ： 执行所有接口测试用例。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.1、数据库配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先，需要修改被测系统将数据库指向测试数据库。以 MySQL数据库为例，针对&lt;strong&gt;django&lt;/strong&gt;项目而言，修改.../guest/settings.py 文件。可以在系统测试环境单独创建一个测试库。&lt;strong&gt;这样做的目的是让接口测试的数据不会清空或污染到功能测试库的数据。&lt;/strong&gt;其他框架开发的项目与django项目类似，这个工作一般由开发同学完成，我们测试同学更多关注的是测试框架的代码。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.2、框架代码实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.1&lt;/strong&gt;、首先，创&lt;strong&gt;建数据库配置文件.../db_config.ini&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201803/907091-20180312163922835-584737893.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.2&lt;/strong&gt;、接下来，&lt;strong&gt;简单封装数据库操作，数据库表数据的插入和清除&lt;/strong&gt;，.../db_fixture/&lt;strong&gt;mysql_db.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql.cursors
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; configparser as cparser
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ======== Reading db_config.ini setting ===========&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; base_dir = str(os.path.dirname(os.path.dirname(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; base_dir = base_dir.replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; file_path = base_dir + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/db_config.ini&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; cf =&lt;span&gt; cparser.ConfigParser()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;cf.read(file_path)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; host = cf.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysqlconf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; port = cf.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysqlconf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; db   = cf.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysqlconf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;db_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; user = cf.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysqlconf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; password = cf.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysqlconf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ======== MySql base operating ===================&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DB:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Connect to the database&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             self.connection = pymysql.connect(host=&lt;span&gt;host,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                                               port=&lt;span&gt;int(port),
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                                               user=&lt;span&gt;user,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                                               password=&lt;span&gt;password,
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                                               db=&lt;span&gt;db,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                                               charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8mb4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                                               cursorclass=&lt;span&gt;pymysql.cursors.DictCursor)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; pymysql.err.OperationalError as e:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mysql Error %d: %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (e.args[0], e.args[1&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; clear table data&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; clear(self, table_name):
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; real_sql = &quot;truncate table &quot; + table_name + &quot;;&quot;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         real_sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + table_name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        with self.connection.cursor() as cursor:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             cursor.execute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SET FOREIGN_KEY_CHECKS=0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            cursor.execute(real_sql)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        self.connection.commit()
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; insert sql statement&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; insert(self, table_name, table_data):
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; table_data:
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             table_data[key] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+str(table_data[key])+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         key   = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(table_data.keys())
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         value = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.join(table_data.values())
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         real_sql = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;INSERT INTO &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + table_name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + key + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) VALUES (&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + value + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(real_sql)&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        with self.connection.cursor() as cursor:
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            cursor.execute(real_sql)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        self.connection.commit()
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; close database&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; close(self):
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        self.connection.close()
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; init data&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_data(self, datas):
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; table, data &lt;span&gt;in&lt;/span&gt;&lt;span&gt; datas.items():
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            self.clear(table)
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; d &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                self.insert(table, d)
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        self.close()
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt;     db =&lt;span&gt; DB()
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     table_name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_event&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;     data = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;红米&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`limit`&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京会展中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2016-08-20 00:25:42&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;     table_name2 = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign_guest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt;     data2 = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;realname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;phone&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:12312341234,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alen@mail.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;event_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; 
&lt;span&gt;81&lt;/span&gt; &lt;span&gt;    db.clear(table_name)
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;    db.insert(table_name, data)
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;     db.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先，读取 db_config.ini 配置文件。 创建 DB 类，__init__()方法初始化，通过 pymysql.connect()连接数据库。&lt;/p&gt;
&lt;p&gt;因为这里只用到数据库表的清除和插入，所以只创建 clear()和 insert()两个方法。其中，insert()方法对数 据的插入做了简单的格式转化，可将字典转化成 SQL 插入语句，这样格式转化了方便了数据库表数据的创建。&lt;/p&gt;
&lt;p&gt;最后，通过 close()方法用于关闭数据库连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.3&lt;/strong&gt;、接下来接下来&lt;strong&gt;创建测试数据&lt;/strong&gt;，.../db_fixture/&lt;strong&gt;test_data.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; sys.path.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../db_fixture&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt; mysql_db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DB
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ImportError:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt; .mysql_db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DB
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; create data&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; datas =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign_event&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;红米Pro发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`limit`&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京会展中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-08-20 14:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;可参加人数为0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`limit`&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京会展中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-08-20 14:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;当前状态为0关闭&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`limit`&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京会展中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-08-20 14:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:4,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;发布会已结束&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`limit`&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京会展中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2001-08-20 14:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:5,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小米5发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;`limit`&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;北京国家会议中心&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-08-20 14:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    ],
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign_guest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;realname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;phone&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:13511001100,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alen@mail.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;event_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;realname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;has sign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;phone&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:13511001101,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign@mail.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;event_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;realname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;phone&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:13511001102,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tom@mail.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;event_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:5&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    ],
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Inster table datas&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; init_data():
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    DB().init_data(datas)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     init_data()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;init_data()函数用于读取 datas 字典中的数据，调用 DB 类中的 clear()方法清除数据库，然后，调用 insert() 方法插入表数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.4&lt;/strong&gt;、编写&lt;strong&gt;接口测试用例&lt;/strong&gt;。创建添加发布会接口测试文件.../interface/&lt;strong&gt;add_event_test.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os, sys
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; parentdir = os.path.dirname(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;sys.path.insert(0, parentdir)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; db_fixture &lt;span&gt;import&lt;/span&gt;&lt;span&gt; test_data
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AddEventTest(unittest.TestCase):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 添加发布会 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; setUp(self):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         self.base_url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://127.0.0.1:8000/api/add_event/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; tearDown(self):
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(self.result)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_add_event_all_null(self):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 所有参数为空 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         payload = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;''&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         r = requests.post(self.base_url, data=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         self.result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10021&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;parameter error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_add_event_eid_exist(self):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; id已经存在 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         payload = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一加4发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳宝体&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         r = requests.post(self.base_url, data=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         self.result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10022&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;event id already exists&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_add_event_name_exist(self):
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 名称已经存在 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         payload = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:11,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;红米Pro发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳宝体&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         r = requests.post(self.base_url,data=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         self.result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10023&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;event name already exists&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_add_event_data_type_error(self):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 日期格式错误 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         payload = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:11,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一加4手机发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳宝体&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         r = requests.post(self.base_url,data=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         self.result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 10024&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         self.assertIn(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time format error.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_add_event_success(self):
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;&lt;span&gt; 添加成功 &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         payload = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:11,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一加4手机发布会&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;limit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2000,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳宝体&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;start_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-05-10 12:00:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         r = requests.post(self.base_url,data=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         self.result =&lt;span&gt; r.json()
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], 200&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         self.assertEqual(self.result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;add event success&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     test_data.init_data() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化接口测试数据&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;     unittest.main()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在测试接口之前，调用test_data.py文件中的init_data()方法初始化数据库中的测试数据。&lt;/p&gt;
&lt;p&gt;创建AddEventTest测试类继承 unittest.TestCase 类，通过创建测试用例，调用相关接口，并验证接口返回 的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.5&lt;/strong&gt;、创建&lt;strong&gt;run_tests.py&lt;/strong&gt;文件&lt;/p&gt;
&lt;p&gt;当开发的接口达到一定数量后，就需要考虑&lt;strong&gt;分文件分目录&lt;/strong&gt;的来&lt;strong&gt;划分&lt;/strong&gt;接口测试用例，如何批量的执行不同文件目录下的用例呢？unittest单元测试框架提供的&lt;strong&gt;discover()&lt;/strong&gt;方法可以帮助我们做到这一点。并使用 HTMLTestRunner 扩展生成 HTML 格式的测试报告。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time, sys
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; sys.path.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./interface&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; sys.path.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./db_fixture&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; HTMLTestRunner &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HTMLTestRunner
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; unittest
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; db_fixture &lt;span&gt;import&lt;/span&gt;&lt;span&gt; test_data
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 指定测试用例为当前文件夹下的 interface 目录&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; test_dir = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;./interface&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; discover = unittest.defaultTestLoader.discover(test_dir, pattern=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*_test.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     test_data.init_data() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化接口测试数据&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     now = time.strftime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m-%d %H_%M_%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     filename = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;./report/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + now + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_result.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     fp = open(filename, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     runner = HTMLTestRunner(stream=&lt;span&gt;fp,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                             title=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Guest Manage System Interface Test Report&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                             description=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Implementation Example with: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    runner.run(discover)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     fp.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先，通过调用test_data.py文件中的init_data()函数来初始化接口测试数据。&lt;/p&gt;
&lt;p&gt;使用unittest框架所提供的discover()方法，查找 interface/ 目录下，所有匹配*_test.py 的测试文件（*星 号匹配任意字符）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTMLTestRunner 为unittest单元测试框架的扩展，利用它所提供的HTMLTestRunner()类来替换unittest单元测试框架的TextTestRunner()类，从而生成HTML格式的测试报告。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遗憾的是HTMLTestRunner并不支持Python3.x，大家可以在网上找到适用于Python3.x的HTMLTestRunner.py文件，使用在自己的接口自动化工程中。&lt;/p&gt;
&lt;p&gt;通过 time 的 strftime()方法获取当前时间，并且转化成一定的时间格式。作为测试报告的名称。这样做目的是是为了避免因为生成的报告的名称重名而造成报告的覆盖。最终，将测试报告存放于report/目录下面。如下图，一张完整的接口自动化测试报告。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201803/907091-20180315211923515-520124405.png&quot; alt=&quot;&quot; width=&quot;1036&quot; height=&quot;513&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 15 Mar 2018 13:23:00 +0000</pubDate>
<dc:creator>Andrea-Pirlo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ailiailan/p/8535293.html</dc:identifier>
</item>
<item>
<title>一年iOS工作经验，如何一举拿下百度、美团、快手等Offer面经（附面试题） - iOS是泽镜啊</title>
<link>http://www.cnblogs.com/ioszejingg/p/8576362.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ioszejingg/p/8576362.html</guid>
<description>&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;先简单说说我最近的面试经历吧。面试的公司很多，大部分最后都能得到令人满意的结果，我将这些体会记录下来，面了这么多公司，如果不留下什么，那岂不是太浪费了。对于我来说，这也是一次自我检查，在这次面试中总结经验，认清自己，同时希望这些对即将换工作或者打算看看其他机会的你有一些帮助。&lt;/p&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;其实做为一个开发者，有一个学习的氛围跟一个交流圈子特别重要这是一个我的iOS交流群：638302184，不管你是小白还是大牛欢迎入驻，大家一起交流学习&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下的部分有具体的面试经历，也有自己的一些总结面试必备技能和自己的一些感想。&lt;/p&gt;

&lt;p&gt;为何离开小米?&lt;/p&gt;
&lt;p&gt;离开小米的主要原因是：我的职业规划与小米给我的规划不相符，还有就是流程化的东西太繁琐，自己有一些不适应，所以选择离开了小米。非常感谢我周总（直接领导）和冰冰（师傅），在小米的这一年中给予我非常多的帮助，在我跟领导沟通要离开的想法时，领导开诚布公的跟我聊了很多，最终我还是下定决定要离开小米，领导建议我先去面试一些公司，等找到合适的再走，裸辞的话心态上都会有一些问题，这样的领导真是没话说了，在小米很多领导都是不放人的，很多都把员工的下一家拖黄了才放人。在这一年获得的成绩：&lt;/p&gt;
&lt;p&gt;1、二等奖转正绩效是A&lt;/p&gt;
&lt;p&gt;2、年终绩效 A+，获得明日之星&lt;/p&gt;
&lt;p&gt;准备&lt;/p&gt;
&lt;p&gt;其实我很早就开始准备了，准确来说也不算准备，只是一直在总结iOS相关方面的知识，因为在华为虽然工作有时候比较多，但是还是有大把时间可以自己学习一些感兴趣的方向。从过完年回来，我就有计划的复习和总结了一些知识。&lt;/p&gt;
&lt;p&gt;  看过的书籍，这里并不是泛泛的读一遍，而是详细理解了大多数内容，通俗一点就是可以用自己的话将相应的知识解读出      来 。《Android开发艺术探索》（这本书真心不错，我反复读了4、5遍）、《iOS群英传》（比较接近开发使用，因为做过一些应用开发，读起来还是比较简单的，读了2遍）、《剑指offer》（感觉面试中碰到的算法，70%都能找到相应的题目，保证所有的题都可以手写出来就行）。4个月精读了以上书籍，还有其他的都是简单了解，这里就不列举了，读完这些书，应该可以让你上一个层次吧（妈妈再也不用担心我面试啦…）。&lt;/p&gt;
&lt;p&gt;刷题，主要是LeetCode（大概刷了300道题左右，每天3-6道，坚持下来，需要多复习，因为很多题过一段时间会忘记），还有看过一些牛课网。&lt;/p&gt;
&lt;p&gt;看别人的面试经验，主要在网上，这里我列举两个比较好的。&lt;/p&gt;
&lt;p&gt;             1、  iOS客户端面试题集锦&lt;/p&gt;
&lt;p&gt;              2、  iOS阿里面试题锦集&lt;/p&gt;
&lt;p&gt;投递简历&lt;/p&gt;
&lt;p&gt;一份好的简历是非常有必要的，需要突出你的重点和闪光点，具体怎么写简历可以参考&lt;/p&gt;
&lt;p&gt;CodeKK说简历&lt;/p&gt;
&lt;p&gt;有了一份好简历，接下来就是投递简历，一般是：拉钩+BOSS直聘+内推，从我这次面试机会来看，三者比例是2:2:1，也可能我工作经验还不到一年，内推滴滴、阿里和腾讯直接就把我的简历刷掉了，但是内推也是具体到某个部门，如果被刷掉也不要灰心，现在大公司基本上各个部门都有自己的hr，可以在拉头和BOSS上多投递一些，万一其他部门看中你呢？&lt;/p&gt;
&lt;p&gt;面试经历&lt;/p&gt;
&lt;p&gt;这里我仅仅记录一些问过的题目（能记住的），答案我就不写出来，基本上都可以在网上找到相应的答案。&lt;/p&gt;

&lt;p&gt;一面&lt;/p&gt;
&lt;p&gt;1、iOS一些优化方案&lt;/p&gt;
&lt;p&gt;2、最常用的版本控制工具是什么，能大概讲讲原理么&lt;/p&gt;
&lt;p&gt;3、UNIX常用命令&lt;/p&gt;
&lt;p&gt;4、c语言在iOS开发中的重要性&lt;/p&gt;
&lt;p&gt;5、源代码管理工具的作用&lt;/p&gt;

&lt;p&gt;二面&lt;/p&gt;
&lt;p&gt;二面面试官是Eva？反正应该不是做iOS的，iOS的相关知识问的也不多，大多是项目上的东西。&lt;/p&gt;
&lt;p&gt;atomic的多线程安全&lt;/p&gt;
&lt;p&gt;聊项目，都具体做了什么。&lt;/p&gt;
&lt;p&gt;nonatomic在自己管理内存的环境&lt;/p&gt;

&lt;p&gt;三面&lt;/p&gt;
&lt;p&gt;应该是Eva吧，主要了解一些个人的情况，以及一些项目，最后问了期望的薪资，然后当场就给了offer。&lt;/p&gt;
&lt;p&gt;毕竟1年多没有面试了，第一场面试还是给我了很大的自信，也知道现在自己大概能要多少工资是合适的，所以大佬们准备跳槽的时候，最好先面几家小公司，这些还是一个很不错的公司，整体的办公环境挺好的，现在也处于盈利状态，在教育类的app中也排的上名次。&lt;/p&gt;
&lt;p&gt;快手&lt;/p&gt;
&lt;p&gt;快手就在五道口地铁站出口不远地方，能看到很显眼的LOGO，看上去很霸气的样子，但是当我进入到快手前台的时候，连一个标示符都没有， 一度以为自己走进了假快手，好吧，我是来面试，这些都不重要，接下来接待的人员把我领进了一个小屋里，等待面试的开始。&lt;/p&gt;
&lt;p&gt;一面&lt;/p&gt;
&lt;p&gt;面试官是一个很fashion的人，是从小米核心部门过来的，是iOS小组的领导。&lt;/p&gt;
&lt;p&gt;问了关于数据库的一些问题，SQLite的相关操作，没办法，我在华为唯一一个做的和iOS相关的项目，但是不太擅长数据库。&lt;/p&gt;
&lt;p&gt;网络相关的问题，网络的五层模型，又问了TCP和TIP，还有iOS相关的长连接，这里问的比较深。&lt;/p&gt;
&lt;p&gt;开始iOS相关的知识，视觉控制器的生命周期（view的生命周期）内存告急的处理（手动释放不可见视图的内存和成员变量）&lt;/p&gt;
&lt;p&gt;第一面这就算过关了等待二面。&lt;/p&gt;

&lt;p&gt;二面&lt;/p&gt;
&lt;p&gt;问了项目相关的问题，这部分根据自己的项目经验，由于大家的经验都不同，这里我就不详细说了。&lt;/p&gt;
&lt;p&gt;设定一个场景，怎么去实现相应的功能，因为快手这个部门想做社交，因此这里是问我是如何实现微信的联系人页面（包括与服务端有什么样的交互）&lt;/p&gt;
&lt;p&gt;最后也是一个算法，写出所有数组的子序列&lt;/p&gt;

&lt;p&gt;二面面试官是这个组的Eva，跟我讲了现在这个组的发展情况和快手现在的情况，由于快手成长很快，所以不能仅仅依靠一个APP，还需要在其他方面进行一些尝试，而这个组的任务就是在一些方面做一些尝试，大概就是这个样子。&lt;/p&gt;

&lt;p&gt;二面也顺利通过，接下来就是HR面了，这时候正好是12点，他们要去吃饭，不过快手是提供午餐和晚餐的，第一个面试官带给我一份饭，还不错，后来HR跟我说，现在只是过渡时期，后面午餐和晚餐会改成自助餐的形式。&lt;/p&gt;

&lt;p&gt;三面&lt;/p&gt;
&lt;p&gt;HR上来很亲切，问了我一些面试的情况，难不难之类的，然后又聊了聊我大学和研究生情况，我只想说我“too simple , too naive “，大概了解我后，只跟我聊我的不足，以此来压低我期望的薪水。说了一下薪资期望，加了微信，让我回去等待，说发offer大概是2周时间，因为需要走各种审批流程，让我不要着急。&lt;/p&gt;
&lt;p&gt;快手是一个很年轻的公司，技术还是需要一定的积累，希望不要像小咖秀一样昙花一现。&lt;/p&gt;

&lt;p&gt;美团外卖&lt;/p&gt;
&lt;p&gt;一面&lt;/p&gt;
&lt;p&gt;1、简历上写的项目问了一遍，然后开始问知识点。&lt;/p&gt;
&lt;p&gt;2、volley的源代码，在图片缓存部分讨论了挺长时间，http中缓存机制，&lt;/p&gt;
&lt;p&gt;3、视觉控制器的生命周期&lt;/p&gt;
&lt;p&gt;4、数据库&lt;/p&gt;
&lt;p&gt;5、多线程（NSTread、NSOPeration、GCDA+block）&lt;/p&gt;
&lt;p&gt;6、http协议get post的区别&lt;/p&gt;
&lt;p&gt;7、手机适配一些方案&lt;/p&gt;
&lt;p&gt;8、真机调试、项目上线注意事项&lt;/p&gt;
&lt;p&gt;9、静态方法是否能被重写&lt;/p&gt;

&lt;p&gt;这些大概聊了1个半小时，开始的时候还有些紧张，慢慢聊开了，就好多了，面试官的语速有点快，老是需要面试官重复一遍，我也不经意间语速也变快了，不过能看出来面试官还是很厉害的。&lt;/p&gt;

&lt;p&gt;二面&lt;/p&gt;
&lt;p&gt;2次握手和3次挥手的原因，以及为什么需要这样做。&lt;/p&gt;
&lt;p&gt;1、id和nill代表什么（nill和NULL的区别）&lt;/p&gt;
&lt;p&gt;2、向一个nill对象发送消息会发生什么？&lt;/p&gt;
&lt;p&gt;3、进程与线程区别&lt;/p&gt;
&lt;p&gt;5、写一个NSString类的实现&lt;/p&gt;
&lt;p&gt;6、http中的同步和异步&lt;/p&gt;

&lt;p&gt;聊了一些项目上做的东西,问了问职业规划&lt;/p&gt;
&lt;p&gt;由于二面面试官不是做iOS，本来面试我的人临时开会去了，所以这一轮面试没怎么问iOS相关知识，不过二面面试官一直是微笑，所以这一轮很轻松，更像是一起讨论问题。&lt;/p&gt;
&lt;p&gt;面试完已经是下午4:30了，由于面试当天是星期五，而周五美团的会议比较多，所以等了会，二面面试官说三面面试官在开会，面试另约时间，我还是说这次一次面试完吧，这一等就等了2个半小时，期间hr跟我说三面面试官是个大牛。&lt;/p&gt;

&lt;p&gt;三面&lt;/p&gt;
&lt;p&gt;我认为iOS做的优秀的几个地方，然后又根据我说的问了问比较深入问题。&lt;/p&gt;
&lt;p&gt;1、iOS是如何进行资源管理的。&lt;/p&gt;
&lt;p&gt;2、Python比较重要的几个特性&lt;/p&gt;
&lt;p&gt;3、网络五层结构，每一层协议，由于我网络不是很好，还问了一些其他的问题（例如MAC地址和ip地址的区别等）。&lt;/p&gt;
&lt;p&gt;为什么离开原来公司，以及职业规划，然后因为面试完大概就晚上8点了，就先让我回去，下周让HR跟我联系，我想这是应该通过面试了吧。&lt;/p&gt;
&lt;p&gt;美团技术还是很厉害的，从面试官的水平就可以看出来，尤其是外卖核心部门，办公环境是不错，但是感觉就是有点乱，不知道是不是因为今天面试的人很多，基本上一直有很多人来回走动，有一些嘈杂。&lt;/p&gt;

&lt;p&gt;百度&lt;/p&gt;
&lt;p&gt;梦寐以求的百度终于找我来面试了，之前不管是内推还是网络上投递都被拒绝了，原因是我工作不到一年，没办法谁让马云爸爸太厉害，我投递的是杭州的天猫，是做虚拟现实的小组（刚听到这个名字感觉和自己不太相符），这是我到面试完后，才知道的，面试官也跟我说iOS上的需求可能不会很多，更多的是AR技术在iOS上的应用，包含OpenGL等技术。&lt;/p&gt;

&lt;p&gt;一面&lt;/p&gt;
&lt;p&gt;询问了我博客上写的一些东西，从项目立意谈起，到设计，再到详细的技术实现，可谓是面面俱到，由于自己写的博客还是比较熟悉，回答的还不错。&lt;/p&gt;
&lt;p&gt;1、GLSurfaceView的相关知识，OpenGL，Shader，绘制流程。&lt;/p&gt;
&lt;p&gt;2、询问当前做的项目，以及到具体的实现和优化。&lt;/p&gt;
&lt;p&gt;3、多进程间的通讯，Binder机制。&lt;/p&gt;
&lt;p&gt;4、询问看过哪些框架源码，EventBus，Volley讲了一下。&lt;/p&gt;

&lt;p&gt;大概聊了一个小时左右，聊得还可以，基本上都回答上了，中间给了我很多建议，不懂的地方，也会仔细跟我讲解一番，其实有一半的时间都是跟我聊产品，为什么这个产品好，怎样做才能迎合市场，然后怎么设计整个产品等，感觉跟我现在水平不是一个层次的，果然，第二天就给我发了一封邮件，说我现在暂时不太合适投递的岗位。&lt;/p&gt;

&lt;p&gt;面试结果&lt;/p&gt;
&lt;p&gt;除了阿里淘宝外，其他的公司基本都拿到offer，这段时间把华为这边的工作都交接完，休息几天，如果有空的话回家停几天。&lt;/p&gt;

&lt;p&gt;最后总结&lt;/p&gt;
&lt;p&gt;自己对于互联网有一些小小的见解：随着资本的冷却，整个互联网市场也逐渐的冷静下来。iOS应用开发从一开始能说几个四大组件的名词，能随便写个监听事件，就能拿到高达上万的月薪的时代了。归根到底并不是工作难找了，而是iOS应用开发工程师这个职位已经趋于正常，再也不是没什么技术也能拿高工资的香饽饽。当然这个也不是绝对的，对于中高级的开发人员来说，市场还是比较缺少的，尤其是知名企业对于招聘员工来说，不仅要求有过硬的技术，还要求有高素质，好的教育背景等等。总的来说，高工资可以给你，但是前提条件是你要足够优秀，或者说让面试官觉得你很优秀。&lt;/p&gt;

&lt;p&gt;其实面试过程就是一个把你自己推销给别人的过程，对于我们（毕业不久的同学，因为我毕业不到一年）来说就是要让面试官感觉你技术好，有培养价值。感慨有点多了，还是来点干货吧，大概列举一下每一轮面试的大概范围和深度，但是也不是绝对的，还是要看具体情况。&lt;/p&gt;

&lt;p&gt;笔试&lt;/p&gt;
&lt;p&gt;对于社招的同学来说，基本上不需要笔试，但是也有公司是需要的，例如 今日头条和网易都有笔试。笔试都是比较基础的一些知识，Python、iOS等方面的，一般不会有网络，计算机等方面的笔试，一般情况下大家都能答出来。&lt;/p&gt;

&lt;p&gt;一、二面&lt;/p&gt;
&lt;p&gt;近一段时间的面试经历来说，一、二面的问题没有什么很大的区别（公司基本上都有3面技术面，但是也有例外，我在美团就是2面技术面。），基本上都是一线开发人员。主要考察你是否有牢固的基础知识和是否在平常开发中能熟练使用。&lt;/p&gt;

&lt;p&gt;是否能讲解清楚你所做的项目，以及使用到的相关知识。&lt;/p&gt;
&lt;p&gt;1、iOS基础知识&lt;/p&gt;
&lt;p&gt;2、Python基础知识，大概是多线程，线程安全，集合类，JVM，类相关知识等。&lt;/p&gt;
&lt;p&gt;3、iOS一些源码的阅读&lt;/p&gt;
&lt;p&gt;4、优秀的第三方框架源码阅读&lt;/p&gt;

&lt;p&gt;三、四面&lt;/p&gt;
&lt;p&gt;一般公司都是三轮技术面，但是也有四轮技术面的，不过不多。很多公司基本上每一轮面试官都会记录他所询问的问题，以便给下一轮面试官作参考，还有就是避免对同一个知识点多次询问。所以到了这轮面试，基本上不会再询问比较基础的知识。&lt;/p&gt;

&lt;p&gt;会从两个方面考察，&lt;/p&gt;
&lt;p&gt;1、广度：比较新的技术（多线程，插件化等），http协议，数据库，iOS（一般不会询问之前面试官问过的问题）。&lt;/p&gt;
&lt;p&gt;2、深度：一般会通过1或2个问题来考察，例如：项目中的贡献，所做的优化。设计能力，基本上不多，这个要看面试的岗位，因为我这里面试的只是高级开发，并不是架构。&lt;/p&gt;

&lt;p&gt;工作中的亮点和突出。&lt;/p&gt;
&lt;p&gt;HR面&lt;/p&gt;
&lt;p&gt;基本上到了这轮，你就算通过面试了。hr会询问一些你的经历，最主要的还是和你商定薪资待遇。在这轮，大家应该要对自己的薪资水平有一个大体的了解，一般都是在原来的工资基础上增长20%~30%的样子，当然，如果你在面试过程中表现非常优秀，也可以不受这个限制。当然如果公司诚心要你，就算你要的工资过高，hr也会委婉的告诉你，不会直接把你pass。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;有一句话叫做三人行必有我师，其实做为一个开发者，有一个学习的氛围跟一个交流圈子特别重要这是一个我的iOS交流群：638302184，不管你是小白还是大牛欢迎入驻，大家一起交流学习，话糙理不糙，互相学习，共同进步，一起加油吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;文章来源于网络，如有侵权，请联系小编删除。&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 13:15:00 +0000</pubDate>
<dc:creator>iOS是泽镜啊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ioszejingg/p/8576362.html</dc:identifier>
</item>
<item>
<title>如何深浅拷贝数组 - BluesQian</title>
<link>http://www.cnblogs.com/QianBoy/p/8576318.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/QianBoy/p/8576318.html</guid>
<description>&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-1&quot;&gt;浅拷贝数组&lt;/h2&gt;
&lt;p&gt;首先第一个复制数组我们都想到的是定义一个数组直接相等就可以了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr1 = [1,2,3&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 =&lt;span&gt; arr1;
  arr1[&lt;/span&gt;0] = 2&lt;span&gt;;
  console.log(arr1[&lt;/span&gt;0]);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出现这个的原因就是因为，数组是用堆去保存的，所以这个算是浅拷贝，相等的时候只是把存放的地址拷贝过去了，两个指向了同一个地址，所以在改变其中一个的值，其他的也跟着改变了。 &lt;strong&gt;所以如何深拷贝一个数组呢？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-2&quot;&gt;深拷贝数组&lt;/h2&gt;
&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-3&quot;&gt;1.使用数组遍历赋值&lt;/h3&gt;
&lt;h4 class=&quot;heading&quot; data-id=&quot;heading-4&quot;&gt;原理&lt;/h4&gt;
&lt;p&gt;这个是最原始的办法，就是把每个值取出来到另一个数组中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr1 = [1,2,3&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 =&lt;span&gt; [];
  arr1.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value,index){
    arr2[index] &lt;/span&gt;=&lt;span&gt; value;
  }) 
  console.log(arr2);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个时候改变arr1[0]  = 3;那么输出arr2[0]还是等于1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 返回新数组方法&lt;/h3&gt;
&lt;p&gt;2.1 使用slice方法&lt;/p&gt;
&lt;p&gt;数组的slice方法是截取数组的意思，在之前的数组总结中也有提过。 slice(0)指的是从0开始到末尾截取数组，然后返回一个新的数组，这样就不会影响到原来的数组了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr1 = [1,2,3&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 = arr1.slice(0&lt;span&gt;);
  console.log(arr2); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;heading&quot; data-id=&quot;heading-7&quot;&gt;2.2使用数组map方法&lt;/h4&gt;
&lt;p&gt;使用map方法遍历数组然后返回新的数组，里面的值不变&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr1 = [2,3,4&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 = arr1.map(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;  
  })
  console.log(arr2);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[2,3,4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;heading&quot; data-id=&quot;heading-8&quot;&gt;2.3使用concat方法&lt;/h4&gt;
&lt;p&gt;连接数组，如果连接的是一个空，那么也是返回了新的本身的数组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr1 = [3,4,5&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 =&lt;span&gt; arr1.concat();
  console.log(arr2);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[3,4,5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-10&quot;&gt;3.for-in连原型链也一并复制的方法&lt;/h3&gt;
&lt;p&gt;这种办法，不仅复制的值，还会把属性也进行拷贝。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; arr = [1,2,3,4,5&lt;span&gt;];
arr.prototype &lt;/span&gt;= 5&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; a &lt;span&gt;in&lt;/span&gt;&lt;span&gt; arr){
  arr2[a] &lt;/span&gt;=&lt;span&gt; arr[a];
}
console.log(arr2); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [1,2,3,4,5]&lt;/span&gt;
console.log(arr2.prototype); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;之前的方法中新数组的prototype都是undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-11&quot;&gt;4.多维数组的复制&lt;/h3&gt;
&lt;h4 class=&quot;heading&quot; data-id=&quot;heading-12&quot;&gt;原理&lt;/h4&gt;
&lt;p&gt;多维数组转化为字符串会成为一维数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr = [[1,2],3,4,[5,6&lt;span&gt;]];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr1 = arr.toString().split(&quot;,&quot;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 = arr.join().split(&quot;,&quot;&lt;span&gt;)
  console.log(arr1) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4,5,6]&lt;/span&gt;
  console.log(arr2) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4,5,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是怎么可以保持那种二维数组的状态呢？需要下面的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; arr = [[1,2],3,4,[5,6&lt;span&gt;]];
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr3 =&lt;span&gt; JSON.parse(JSON.stringify(arr));  
  console.log(arr3) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [[1,2],3,4,[5,6]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过上面的例子和分析，可以看出来，简单数组的拷贝可以通过slice方法和concat方法来实现，对于多维数组的实现，必须通过JSON.parse(JSON.stringify(obj))方法来实现。&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 13:09:00 +0000</pubDate>
<dc:creator>BluesQian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/QianBoy/p/8576318.html</dc:identifier>
</item>
<item>
<title>UWP：使用Composition实现类似安卓的水波纹Ripple效果 - 叫我蓝火火</title>
<link>http://www.cnblogs.com/blue-fire/p/8575968.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blue-fire/p/8575968.html</guid>
<description>&lt;p&gt;先放效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1179189/201803/1179189-20180315195438769-604309864.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，建立一个RippleHelper.cs文件，然后建立以下附加属性：&lt;/p&gt;
&lt;p&gt;IsFillEnable：是否扩大到整个控件&lt;/p&gt;
&lt;p&gt;RippleDuration：持续时间&lt;/p&gt;
&lt;p&gt;RippleRadius：不扩大到整个控件时的最大半径&lt;/p&gt;
&lt;p&gt;RippleColor：波纹的颜色&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; GetIsFillEnable(DependencyObject obj)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;)obj.GetValue(IsFillEnableProperty);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetIsFillEnable(DependencyObject obj, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; value)
        {
            obj.SetValue(IsFillEnableProperty, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty IsFillEnableProperty =&lt;span&gt;
            DependencyProperty.RegisterAttached(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsFillEnable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;bool&lt;/span&gt;), &lt;span&gt;typeof&lt;/span&gt;(RippleHelper), &lt;span&gt;new&lt;/span&gt; PropertyMetadata(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TimeSpan GetRippleDuration(UIElement obj)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (TimeSpan)obj.GetValue(RippleDurationProperty);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetRippleDuration(UIElement obj, TimeSpan value)
        {
            obj.SetValue(RippleDurationProperty, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty RippleDurationProperty =&lt;span&gt;
            DependencyProperty.RegisterAttached(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RippleDuration&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;typeof&lt;/span&gt;(TimeSpan), &lt;span&gt;typeof&lt;/span&gt;(RippleHelper), &lt;span&gt;new&lt;/span&gt; PropertyMetadata(TimeSpan.FromMilliseconds(&lt;span&gt;330&lt;/span&gt;&lt;span&gt;)));

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetRippleRadius(UIElement obj)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)obj.GetValue(RippleRadiusProperty);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetRippleRadius(UIElement obj, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; value)
        {
            obj.SetValue(RippleRadiusProperty, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty RippleRadiusProperty =&lt;span&gt;
            DependencyProperty.RegisterAttached(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RippleRadius&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;), &lt;span&gt;typeof&lt;/span&gt;(RippleHelper), &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PropertyMetadata(100d));

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Color GetRippleColor(UIElement obj)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (Color)obj.GetValue(RippleColorProperty);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetRippleColor(UIElement obj, Color value)
        {
            obj.SetValue(RippleColorProperty, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty RippleColorProperty =&lt;span&gt;
            DependencyProperty.RegisterAttached(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RippleColor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;typeof&lt;/span&gt;(Color), &lt;span&gt;typeof&lt;/span&gt;(RippleHelper), &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PropertyMetadata(Colors.White));
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来再写一个附加属性和一个enum&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; RippleHelperState GetRippleHelperState(UIElement obj)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (RippleHelperState)obj.GetValue(RippleHelperStateProperty);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetRippleHelperState(UIElement obj, RippleHelperState value)
        {
            obj.SetValue(RippleHelperStateProperty, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty RippleHelperStateProperty =&lt;span&gt;
            DependencyProperty.RegisterAttached(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RippleHelperState&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;typeof&lt;/span&gt;(RippleHelperState), &lt;span&gt;typeof&lt;/span&gt;(RippleHelper), &lt;span&gt;new&lt;/span&gt; PropertyMetadata(RippleHelperState.None, (s, e) =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e.NewValue != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e.OldValue !=&lt;span&gt; e.NewValue)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; value =&lt;span&gt; (RippleHelperState)e.NewValue;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oldvalue =&lt;span&gt; (RippleHelperState)e.OldValue;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (s &lt;span&gt;is&lt;/span&gt;&lt;span&gt; UIElement ele)
                    {
                        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (value)
                        {
                            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; RippleHelperState.Pressed:
                                {
                                    ele.RemoveHandler(UIElement.PointerReleasedEvent, pointerEventHandler);
                                    ele.AddHandler(UIElement.PointerPressedEvent, pointerEventHandler, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                                }
                                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

                            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; RippleHelperState.Released:
                                {
                                    ele.RemoveHandler(UIElement.PointerPressedEvent, pointerEventHandler);
                                    ele.AddHandler(UIElement.PointerReleasedEvent, pointerEventHandler, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                                }
                                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

                            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; RippleHelperState.None:
                                {
                                    ele.RemoveHandler(UIElement.PointerPressedEvent, pointerEventHandler);
                                    ele.RemoveHandler(UIElement.PointerReleasedEvent, pointerEventHandler);
                                    ElementCompositionPreview.SetElementChildVisual(ele, &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                                }
                                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }
            }));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在命名空间里建立enum&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; RippleHelperState
    {
        Pressed, Released, None
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后编写两个鼠标事件，对应RippleHelperState的Pressed和Released两个状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Ele_PointerPressed(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, PointerRoutedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sender &lt;span&gt;is&lt;/span&gt;&lt;span&gt; UIElement ele)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; position =&lt;span&gt; e.GetCurrentPoint(ele).Position.ToVector2();
                StartRippleAnimation(ele, position);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Ele_PointerReleased(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, PointerRoutedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sender &lt;span&gt;is&lt;/span&gt;&lt;span&gt; UIElement ele)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; position =&lt;span&gt; e.GetCurrentPoint(ele).Position.ToVector2();
                StartRippleAnimation(ele, position);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StartRippleAnimation(UIElement ele, Vector2 position)
        {
            StartRippleAnimation(ele, position, GetRippleColor(ele), GetIsFillEnable(ele), GetRippleDuration(ele), GetRippleRadius(ele));
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; StartRippleAnimation(UIElement ele, Vector2 position, Color color, &lt;span&gt;bool&lt;/span&gt; isFillEnable, TimeSpan duration, &lt;span&gt;double&lt;/span&gt; radius = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hostVisual =&lt;span&gt; ElementCompositionPreview.GetElementVisual(ele);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cVisual = ElementCompositionPreview.GetElementChildVisual(ele) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ContainerVisual;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cVisual == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                cVisual &lt;/span&gt;=&lt;span&gt; compositor.CreateContainerVisual();
                SizeBind.ClearParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostVisual&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                SizeBind.SetReferenceParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostVisual&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, hostVisual);
                cVisual.StartAnimation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SizeBind);
                cVisual.Clip &lt;/span&gt;=&lt;span&gt; compositor.CreateInsetClip();
                ElementCompositionPreview.SetElementChildVisual(ele, cVisual);
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sVisual =&lt;span&gt; CreateSpriteVisual(ele, color);
            cVisual.Children.InsertAtTop(sVisual);
            sVisual.Offset &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vector3(position.X, position.Y, 0f);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isFillEnable)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nWidth = Math.Max(Math.Max(position.X, ele.RenderSize.Width - position.X), Math.Max(position.Y, ele.RenderSize.Height -&lt;span&gt; position.Y));
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; r = Math.Sqrt(nWidth * nWidth * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; finalScale = (&lt;span&gt;float&lt;/span&gt;)r /&lt;span&gt; 45f;
                PropSet.InsertScalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ScaleValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, finalScale);
                ScaleAnimation.Duration &lt;/span&gt;= TimeSpan.FromMilliseconds(&lt;span&gt;400&lt;/span&gt;&lt;span&gt;);
                OpacityAnimation.Duration &lt;/span&gt;= TimeSpan.FromMilliseconds(&lt;span&gt;430&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (radius ==&lt;span&gt; 100d)
                {
                    PropSet.InsertScalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ScaleValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 2f);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    PropSet.InsertScalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ScaleValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, (&lt;span&gt;float&lt;/span&gt;)GetRippleRadius(ele) /&lt;span&gt; 45f);
                }
            }

            ScaleAnimation.Duration &lt;/span&gt;=&lt;span&gt; duration;
            OpacityAnimation.Duration &lt;/span&gt;=&lt;span&gt; duration;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; batch =&lt;span&gt; compositor.GetCommitBatch(CompositionBatchTypes.Animation);
            batch.Completed &lt;/span&gt;+= (s1, e1) =&amp;gt;&lt;span&gt;
            {
                OnRippleComplated(ele);
                cVisual.Children.Remove(sVisual);
            };
            sVisual.StartAnimationGroup(RippleAnimationGroup);
        }&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 动画完成的事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;event&lt;/span&gt;&lt;span&gt; EventHandler RippleComplated;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnRippleComplated(UIElement ele)
        {
            RippleComplated&lt;/span&gt;?&lt;span&gt;.Invoke(ele, EventArgs.Empty);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后在类的开头编写Composition的动画和资源：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; PointerEventHandler pointerEventHandler = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PointerEventHandler(Ele_PointerReleased);
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Compositor compositor =&amp;gt;&lt;span&gt; Window.Current.Compositor;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ExpressionAnimation _SizeBind;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionEasingFunction _EaseOut;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ScalarKeyFrameAnimation _OpacityAnimation;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Vector3KeyFrameAnimation _ScaleAnimation;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionAnimationGroup _RippleAnimationGroup;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionPropertySet _PropSet;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionBrush _Mask;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ExpressionAnimation SizeBind
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_SizeBind == &lt;span&gt;null&lt;/span&gt;) _SizeBind = compositor.CreateExpressionAnimation(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hostVisual.Size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _SizeBind;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionEasingFunction EaseOut
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_EaseOut == &lt;span&gt;null&lt;/span&gt;) _EaseOut = compositor.CreateCubicBezierEasingFunction(&lt;span&gt;new&lt;/span&gt; Vector2(0f, 0f), &lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;0.9f&lt;/span&gt;&lt;span&gt;, 1f));
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _EaseOut;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ScalarKeyFrameAnimation OpacityAnimation
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_OpacityAnimation == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    _OpacityAnimation &lt;/span&gt;=&lt;span&gt; compositor.CreateScalarKeyFrameAnimation();
                    _OpacityAnimation.InsertKeyFrame(0f, 1f, EaseOut);
                    _OpacityAnimation.InsertKeyFrame(1f, 0f, EaseOut);
                    _OpacityAnimation.Duration &lt;/span&gt;= TimeSpan.FromMilliseconds(&lt;span&gt;350&lt;/span&gt;&lt;span&gt;);
                    _OpacityAnimation.Target &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opacity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _OpacityAnimation;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Vector3KeyFrameAnimation ScaleAnimation
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_ScaleAnimation == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    _ScaleAnimation &lt;/span&gt;=&lt;span&gt; compositor.CreateVector3KeyFrameAnimation();
                    _ScaleAnimation.InsertKeyFrame(0f, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vector3(0f, 0f, 1f), EaseOut);
                    _ScaleAnimation.InsertExpressionKeyFrame(&lt;/span&gt;&lt;span&gt;0.8f&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Vector3(propSet.ScaleValue,propSet.ScaleValue,1f)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, EaseOut);
                    _ScaleAnimation.InsertExpressionKeyFrame(1f, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Vector3(propSet.ScaleValue,propSet.ScaleValue,1f)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, EaseOut);
                    _ScaleAnimation.SetReferenceParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;propSet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, PropSet);
                    _ScaleAnimation.Duration &lt;/span&gt;= TimeSpan.FromMilliseconds(&lt;span&gt;320&lt;/span&gt;&lt;span&gt;);
                    _ScaleAnimation.Target &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Scale&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _ScaleAnimation;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionAnimationGroup RippleAnimationGroup
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_RippleAnimationGroup == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    _RippleAnimationGroup &lt;/span&gt;=&lt;span&gt; compositor.CreateAnimationGroup();
                    _RippleAnimationGroup.Add(OpacityAnimation);
                    _RippleAnimationGroup.Add(ScaleAnimation);
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _RippleAnimationGroup;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionPropertySet PropSet
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_PropSet == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    _PropSet &lt;/span&gt;=&lt;span&gt; compositor.CreatePropertySet();
                    PropSet.InsertScalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ScaleValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 2f);
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _PropSet;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CompositionBrush Mask
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_Mask == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; surface = LoadedImageSurface.StartLoadFromUri(&lt;span&gt;new&lt;/span&gt; Uri(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ms-appx:///MaterialLibs/Assets/RippleMask.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Windows.Foundation.Size(100d, 100d));
                    _Mask &lt;/span&gt;=&lt;span&gt; compositor.CreateSurfaceBrush(surface);
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _Mask;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 最后在Mask读取的Uri的对应位置放上如下的图片文件：&lt;/p&gt;
&lt;p&gt;【&lt;img src=&quot;https://images2018.cnblogs.com/blog/1179189/201803/1179189-20180315205545958-1151059728.png&quot; alt=&quot;&quot;/&gt;】&lt;/p&gt;
&lt;p&gt;完整代码已经开源在Github：&lt;a href=&quot;https://github.com/cnbluefire/MaterialLibs&quot; target=&quot;_blank&quot;&gt;https://github.com/cnbluefire/MaterialLibs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;受个人技术所限，没有想到怎么做到圆角或者不规则图形，所以目前只支持直角矩形控件&lt;/p&gt;
</description>
<pubDate>Thu, 15 Mar 2018 13:02:00 +0000</pubDate>
<dc:creator>叫我蓝火火</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blue-fire/p/8575968.html</dc:identifier>
</item>
</channel>
</rss>