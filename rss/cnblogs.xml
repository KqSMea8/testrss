<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring AMQP + Rabbit 配置多数据源消息队列 - HarrisonHao</title>
<link>http://www.cnblogs.com/HarrisonHao/p/7884925.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/HarrisonHao/p/7884925.html</guid>
<description>&lt;p&gt;一般在稍微大一点的项目中，需要配置多个数据库数据源，最简单的方式是用 Spring 来实现，只需要继承 AbstractRoutingDataSource 类，实现 determineCurrentLookupKey 方法，再配合使用 ThreadLocal 就可以实现。&lt;/p&gt;
&lt;p&gt;但是如何实现 MQ 的多数据源呢？假设有部署在不同服务器上的两个消息队列，或者是同一服务器，不同 vhost 的消息队列，在一个项目中，我如何自由地选择从哪个队列收发消息呢？下面说说用 Spring AMQP + Rabbit 的实现过程及踩过的坑。&lt;/p&gt;
&lt;p&gt;最开始的单数据源的实现很简单，网上有好多博文可以参考，官网也有介绍。主要就是创建一个 xml 的配置文件，添加各种必要的配置，声明 connection-factory、rabbitListenerContainerFactory、rabbitTemplate、queue、exchange、binding 等等。然后用 RabbitTemplate 来发消息，用 @RabbitListener 注解来监听，用 queue 指定队列来收消息，这里就不赘述了。主要说一下，在现有的基础上实现多数据源的收发。&lt;/p&gt;
&lt;p&gt;先说配置方面，为了对比，下面先给出单数据源配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:rabbit&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.host}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.port}&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.username}&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.password}&quot;&lt;/span&gt;&lt;span&gt; 
　　　　　　　requested-heartbeat&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt; virtual-host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.vhost}&quot;&lt;/span&gt;&lt;span&gt; channel-cache-size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;
          class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;concurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxConcurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:admin &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitAdmin&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; queue declare &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; exclusive&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;queue.test&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; bind queue to exchange &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;exchange&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;queue.test&quot;&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;=&quot;rkey.test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitTemplate&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt; retry-template&lt;/span&gt;&lt;span&gt;=&quot;retryTemplate&quot;&lt;/span&gt;&lt;span&gt; reply-timeout&lt;/span&gt;&lt;span&gt;=&quot;60000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;retryTemplate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.retry.support.RetryTemplate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;backOffPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.retry.backoff.ExponentialBackOffPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;initialInterval&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;multiplier&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10.0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxInterval&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了实现双数据源，查阅了很多资料，最初实现的配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:rabbit&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.host}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.port}&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.username}&quot;&lt;/span&gt;&lt;span&gt;
            password&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.password}&quot;&lt;/span&gt;&lt;span&gt; requested-heartbeat&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt; virtual-host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.vhost}&quot;&lt;/span&gt;&lt;span&gt; channel-cache-size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加了一个连接工厂，参数从 properties 文件中取 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.host1}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.port1}&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.username1}&quot;&lt;/span&gt;&lt;span&gt; 
　　　　　　　password&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.password1}&quot;&lt;/span&gt;&lt;span&gt; requested-heartbeat&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt; virtual-host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.vhost1}&quot;&lt;/span&gt;&lt;span&gt; channel-cache-size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加 SimpleRoutingConnectionFactory 配置，将两个 Connection factory 配置好&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.connection.SimpleRoutingConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;targetConnectionFactories&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt; value-ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt; value-ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:admin &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitAdmin&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 由于增加了一个连接工厂，ContainerFactory 的连接工厂改为新增的 ConnectionFactory  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;
          class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;property name=&quot;connectionFactory&quot; ref=&quot;rabbitConnectionFactory&quot;/&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;concurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxConcurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; queue declare，增加一个消息队列 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; exclusive&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;queue.test&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; exclusive&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;queue.test1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; bind queue to exchange &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;exchange&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;queue.test&quot;&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;=&quot;rkey.test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;queue.test1&quot;&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;=&quot;rkey.test1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; connection-factory 改为新增的 ConnectionFactory &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitTemplate&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; retry-template&lt;/span&gt;&lt;span&gt;=&quot;retryTemplate&quot;&lt;/span&gt;&lt;span&gt; reply-timeout&lt;/span&gt;&lt;span&gt;=&quot;60000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;retryTemplate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.retry.support.RetryTemplate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;backOffPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.retry.backoff.ExponentialBackOffPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;initialInterval&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;multiplier&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10.0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxInterval&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改动都写在注释里了，主要就是增加了一个连接工厂的配置，其他配置做了一些相应的适配。&lt;/p&gt;
&lt;p&gt;发消息的时候，需要指定连接工厂，也就是说，你要往哪个消息服务器发：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSendMsg() {
        SimpleResourceHolder.bind(rabbitTemplate.getConnectionFactory(), &lt;/span&gt;&quot;rabbitConnectionFactory&quot;&lt;span&gt;);
        rabbitTemplate.convertAndSend(&lt;/span&gt;&quot;exchange&quot;, &quot;rkey.test&quot;, &quot;test&quot;&lt;span&gt;);
        SimpleResourceHolder.unbind(rabbitTemplate.getConnectionFactory());

        SimpleResourceHolder.bind(rabbitTemplate.getConnectionFactory(), &lt;/span&gt;&quot;rabbitConnectionFactory1&quot;&lt;span&gt;);
        rabbitTemplate.convertAndSend(&lt;/span&gt;&quot;exchange&quot;, &quot;rkey.test1&quot;, &quot;test1&quot;&lt;span&gt;);
        SimpleResourceHolder.unbind(rabbitTemplate.getConnectionFactory());
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在发消息之前调用 SimpleResourceHolder.bind 绑定要使用的工厂，发完之后，调用 unbind 解除绑定。将上述代码封装为两个工具类，更好。&lt;/p&gt;
&lt;p&gt;然后，有一个大坑在前面。。。如何收消息？&lt;/p&gt;
&lt;p&gt;发消息要绑定连接工厂，指明往哪个消息服务器上发，收的时候，同样得指定要从哪个消息服务器上收。最开始没想到这点，以为只要指定队列名称就可以，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    @RabbitListener(queues = &quot;queue.test&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; receiveMsg(Message message) {
        String msg &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(message.getBody());
        System.out.println(msg);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然并卵，报了异常：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
java.lang.IllegalStateException: Cannot determine target ConnectionFactory &lt;span&gt;for&lt;/span&gt; lookup key [&lt;span&gt;null&lt;/span&gt;&lt;span&gt;]
    at org.springframework.amqp.rabbit.connection.AbstractRoutingConnectionFactory.determineTargetConnectionFactory(AbstractRoutingConnectionFactory.java:&lt;/span&gt;116) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at org.springframework.amqp.rabbit.connection.AbstractRoutingConnectionFactory.createConnection(AbstractRoutingConnectionFactory.java:&lt;/span&gt;94) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils$&lt;/span&gt;1.createConnection(ConnectionFactoryUtils.java:80) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.doGetTransactionalResourceHolder(ConnectionFactoryUtils.java:&lt;/span&gt;130) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.getTransactionalResourceHolder(ConnectionFactoryUtils.java:&lt;/span&gt;67) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at org.springframework.amqp.rabbit.listener.BlockingQueueConsumer.start(BlockingQueueConsumer.java:&lt;/span&gt;456) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:&lt;/span&gt;1158) ~[spring-rabbit-1.5.1&lt;span&gt;.RELEASE.jar:na]
    at java.lang.Thread.run(Thread.java:&lt;/span&gt;745) [na:1.8.0_45]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个问题不好解决，查了很多资料都没用，比如这种方式：&lt;a href=&quot;https://stackoverflow.com/questions/42784471/spring-amqp-mix-simpleroutingconnectionfactory-with-rabbitlistener&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/42784471/spring-amqp-mix-simpleroutingconnectionfactory-with-rabbitlistener&lt;/a&gt;  。&lt;/p&gt;
&lt;p&gt;无奈之下，只能试着看看 Spring 的 AMQP 怎么实现，看看有没有解决的办法，最开始想的是继承 Spring 的某个类来实现。然而，看来看去，很是头大，没有结果。&lt;/p&gt;
&lt;p&gt;最后无意间点到了 @RabbitListener 这个注解中，发现了有一个属性，瞬间感觉很兴奋，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1069601/201711/1069601-20171123145433008-1555789360.jpg&quot; alt=&quot;&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看了下注释，这里可以指定一个 containerFactory，感觉可以试试。首先只有一个 containerFactory，那就加一个吧。为了看的比较清晰，我把第一次添加的注释去掉了，于是配置成了这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:rabbit&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.host}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.port}&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.username}&quot;&lt;/span&gt;&lt;span&gt;
            password&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.password}&quot;&lt;/span&gt;&lt;span&gt; requested-heartbeat&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt; virtual-host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.vhost}&quot;&lt;/span&gt;&lt;span&gt; channel-cache-size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:connection-factory &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt; host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.host1}&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.port1}&quot;&lt;/span&gt;&lt;span&gt; username&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.username1}&quot;&lt;/span&gt;&lt;span&gt; 
　　　　　　　password&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.password1}&quot;&lt;/span&gt;&lt;span&gt; requested-heartbeat&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt; virtual-host&lt;/span&gt;&lt;span&gt;=&quot;${rabbit.vhost1}&quot;&lt;/span&gt;&lt;span&gt; channel-cache-size&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.connection.SimpleRoutingConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;targetConnectionFactories&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt; value-ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt; value-ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:admin &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitAdmin&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加一个 rabbitAdmin&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:admin &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitAdmin1&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 把原有的 ContainerFactory 的连接工厂改为 rabbitConnectionFactory&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;
          class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;concurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxConcurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加一个 ContainerFactory， 连接工厂为 rabbitConnectionFactory1&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitListenerContainerFactory1&quot;&lt;/span&gt;&lt;span&gt;
          class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;rabbitConnectionFactory1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;concurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;16&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxConcurrentConsumers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; exclusive&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;queue.test&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:queue &lt;/span&gt;&lt;span&gt;durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; exclusive&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;queue.test1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;exchange&quot;&lt;/span&gt;&lt;span&gt; auto-delete&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; durable&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;queue.test&quot;&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;=&quot;rkey.test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:binding &lt;/span&gt;&lt;span&gt;queue&lt;/span&gt;&lt;span&gt;=&quot;queue.test1&quot;&lt;/span&gt;&lt;span&gt; key&lt;/span&gt;&lt;span&gt;=&quot;rkey.test1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rabbit:direct-exchange&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rabbit:template &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;rabbitTemplate&quot;&lt;/span&gt;&lt;span&gt; connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; retry-template&lt;/span&gt;&lt;span&gt;=&quot;retryTemplate&quot;&lt;/span&gt;&lt;span&gt; reply-timeout&lt;/span&gt;&lt;span&gt;=&quot;60000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;retryTemplate&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.retry.support.RetryTemplate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;backOffPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.retry.backoff.ExponentialBackOffPolicy&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;initialInterval&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;multiplier&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10.0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxInterval&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;收消息的时候指定 container factory 即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    @RabbitListener(queues = &quot;queue.test&quot;, containerFactory = &quot;rabbitListenerContainerFactory&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; receiveMsg(Message message) {
        String msg &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(message.getBody());
        System.out.println(msg);&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试通过！&lt;/p&gt;
&lt;p&gt;以上配置、解决办法是尝试过多次以后得出的，所以还是要有耐心，多尝试。&lt;/p&gt;
&lt;p&gt;由于在网上没有找到解决办法，只有自己摸索着解决，如果大家有其他解决方案，欢迎留言讨论！&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 07:11:00 +0000</pubDate>
<dc:creator>HarrisonHao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/HarrisonHao/p/7884925.html</dc:identifier>
</item>
<item>
<title>react native一键分享功能实现&amp;原理和注意点（支持微信、qq、新浪微博等） - 王磊的博客</title>
<link>http://www.cnblogs.com/vipstone/p/7884997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipstone/p/7884997.html</guid>
<description>&lt;h2&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;目前使用一键分享比较主流的两个SDK：ShareSDK、友盟；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;又因为友盟功能比较多且比较全，比如说友盟统计、友盟推送等，所以本文重点介绍的是友盟分享功能在rn上的应用以及要注意的点。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;react native绑定SDK两种方案（一个原理）：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　1.自己去要绑定的SDK官网下载SDK包，按照SDK安装指南分别在android/iOS上按步骤配置，然后在RN注册Package和Module实现RN和原生之间的通讯；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.使用别人已经写过的Package和Module+SDK本身的配置，直接拿到rn项目中用；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总结：可以看出来第二种其实是比较偷懒的方式，但是可以实现功能，而且Package和Module的书写几乎一样都是大同小异的代码（除了Module暴露调用方法的顺序不同之外），所以如果市面上已经有相应的绑定大可直接拿来使用。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;一键分享实现方案&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们本文要使用的友盟分享库是：&lt;a href=&quot;https://github.com/songxiaoliang/react-native-share&quot; target=&quot;_blank&quot;&gt;react-native-share&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GitHub地址：&lt;a href=&quot;https://github.com/songxiaoliang/react-native-share&quot; target=&quot;_blank&quot;&gt;https://github.com/songxiaoliang/react-native-share&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置详见上面GitHub里README部分，这里不在重复，本文重点要说的是注意事项。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;注意事项（Android部分）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;除了上文GitHub里面的10个步骤之后，接下来的配置也是必不可少的.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.需要在app目录build.gradle文件dependencies里面添加如下配置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;div readability=&quot;31&quot;&gt;
&lt;p&gt;dependencies {&lt;/p&gt;
&lt;p&gt;    ...&lt;/p&gt;
&lt;p&gt;　　//友盟分享&lt;/p&gt;
&lt;p&gt;　　compile files('libs/weiboSDKCore_3.1.4.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/wechat-sdk-android-with-mta-1.1.6.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/umeng_social_tool.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/umeng_social_net.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/umeng_social_api.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/SocialSDK_WeiXin_Full.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/SocialSDK_Sina_Full.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/SocialSDK_facebook.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/SocialSDK_QQ_Full.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/SocialSDK_alipay.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/open_sdk_r5781.jar')&lt;/p&gt;
&lt;p&gt;　　compile files('libs/libapshare.jar')&lt;/p&gt;
&lt;p&gt;　　compile 'com.android.support:multidex:'&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.需要注意修改apshare、module、wxapi、WBShareActivity.java里面的包名改成自己项目的包名；&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.MainActivity.java需要添加引用：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.umeng.analytics.MobclickAgent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.content.Intent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; android.os.Bundle;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; com.umeng.socialize.UMShareAPI;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.MainApplication.java需要添加引用：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; com.xxx.module.SharePackage;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;xxx为你的包名&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.umeng.socialize.Config;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.umeng.socialize.PlatformConfig;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; com.umeng.socialize.UMShareAPI;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.以上配置完毕，运行依然报错“com.android.dex.DexIndexOverflowException: method ID not in [0, 0xffff]: 65935”&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解决方案：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;①.在项目的build.gradle文件的dependencies 节中添加分包设置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dependencies { 
   ... 
   compile 'com.android.support:multidex:' 
   ... 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;②.通过在defaultConfig节中设置multiDexEnabled标签为true，开启multi-dexing支持.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;defaultConfig { 
    ... 
    multiDexEnabled true 
    ... 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 Nov 2017 07:08:00 +0000</pubDate>
<dc:creator>王磊的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vipstone/p/7884997.html</dc:identifier>
</item>
<item>
<title>JavaScript学习笔记（八）——变量的作用域与解构赋值 - 苦瓜第一印象</title>
<link>http://www.cnblogs.com/whucs2012/p/7884802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/whucs2012/p/7884802.html</guid>
<description>&lt;p&gt;&lt;span&gt;在学习廖雪峰前辈的JavaScript教程中，遇到了一些需要注意的点，因此作为学习笔记列出来，提醒自己注意！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果大家有需要，欢迎访问前辈的博客&lt;a title=&quot;廖雪峰的官方网站&quot; href=&quot;https://www.liaoxuefeng.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.liaoxuefeng.com/&lt;/span&gt;&lt;/a&gt;学习。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;在JavaScript中，用var申明的变量实际上是有作用域的。&lt;/p&gt;
&lt;p&gt;如果一个变量在函数体内部申明，则该变量的作用域范围是整个函数体，在函数体外部，不能被引用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 1&lt;span&gt;;
    x &lt;/span&gt;= x + 1&lt;span&gt;;
}

x &lt;/span&gt;= x + 2; &lt;span&gt;// ReferenceError! 无法在函数体外引用变量x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。&lt;/p&gt;
&lt;p&gt;也就说，两个函数内部的同名变量相互独立，互不影响：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 1&lt;span&gt;;
    x &lt;/span&gt;= x + 1&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; bar() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 'A'&lt;span&gt;;
    x &lt;/span&gt;= x + 'B'&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由于JavaScript的函数可以嵌套，所以，内部的函数可以访问外部函数定义的变量，反过来就不行：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; bar() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = x + 1;&lt;span&gt; // bar可以访问foo的变量x!&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; z = y + 1; &lt;span&gt;// ReferenceError! foo不可以访问bar的变量y!&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;另外一种情况，如果内部函数和外部函数的变量名重名，则内部函数的变量将“屏蔽”外部函数的变量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这说明了JavaScript的函数在查找变量时，从自身函数定义开始，从“内”向“外”查找：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; bar() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 'A'&lt;span&gt;;
        console.log(&lt;/span&gt;'x in bar() = ' + x); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'A'&lt;/span&gt;
&lt;span&gt;    }
    console.log(&lt;/span&gt;'x in foo() = ' + x); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;    bar();
}

foo();

&lt;/span&gt;&lt;span&gt;//显示结果如下：&lt;/span&gt;
x &lt;span&gt;in&lt;/span&gt; foo() = 1&lt;span&gt;
x &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; bar() = A
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;变量提升&lt;/h4&gt;
&lt;p&gt; &lt;span&gt;JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 'Hello, ' +&lt;span&gt; y;
    console.log(x);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = 'Bob'&lt;span&gt;;
}

foo();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;虽然是strict模式，但语句 var x = 'Hello, ' + y;并不报错，因为变量y在后面申明了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是console.log显示Hello，undefined，说明变量y的值为undefined。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上述foo()函数，JavaScript引擎看到的代码相当于：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提升变量y的申明，此时y为undefined&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; x = 'Hello, ' +&lt;span&gt; y;
    console.log(x);
    y &lt;/span&gt;= 'Bob'&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为JavaScript这一特性，我们在函数内部定义变量时，最后严格遵守“&lt;span&gt;在函数内部首先申明所有变量&lt;/span&gt;”这一规则。最常见的做法是用一个var申明函数内部所用到的所有变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;
        x &lt;/span&gt;= 1, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; x初始化为1&lt;/span&gt;
        y = x + 1, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; y初始化为2&lt;/span&gt;
        z, i; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z和i为undefined&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其他语句:&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (i=0; i&amp;lt;100; i++&lt;span&gt;) {
        ...
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;全局作用域&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;不在任何函数内部定义的变量就具有全局作用域&lt;/span&gt;。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; course = 'Learn JavaScript'&lt;span&gt;;
alert(course); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'Learn JavaScript'&lt;/span&gt;
alert(window.course); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'Learn JavaScript'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;因此，直接访问全局变量course和访问window.course是完全一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在前面我们了解到，函数定义有两种方式，以变量方式var foo=function( ) {  }定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    alert(&lt;/span&gt;'foo'&lt;span&gt;);
}

foo(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接调用foo()&lt;/span&gt;
window.foo(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过window.foo()调用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;同时，我们也知道，每次直接调用的alert( )函数实际上也是window的一个变量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这说明JavaScript实际上只有一个全局作用域。任何变量（函数也可以视为变量），如果没有在当前函数的作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报错&lt;span&gt;ReferenceError。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;命名空间&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;因为全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突&lt;/span&gt;，并且很难被发现。&lt;/p&gt;
&lt;p&gt;减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 唯一的全局变量MYAPP:&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; MYAPP =&lt;span&gt; {};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其他变量:&lt;/span&gt;
MYAPP.name = 'myapp'&lt;span&gt;;
MYAPP.version &lt;/span&gt;= 1.0&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其他函数:&lt;/span&gt;
MYAPP.foo = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'foo'&lt;span&gt;;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;把自己的代码全部放入唯一的命名空间MYAPP中，会大大减少全局变量冲突的可能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们熟知的许多JavaScript库都是采用这种方式：jQuery，YUI，underscore等等。&lt;/p&gt;
&lt;h4&gt;局部作用域&lt;/h4&gt;
&lt;p&gt;由于JavaScript的变量作用域实际上是函数内部，我们&lt;span&gt;在for循环等语句块中是无法定义具体的有局部作用域的变量&lt;/span&gt;的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;100; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;    }
    i &lt;/span&gt;+= 100; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 仍然可以引用变量i&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;为了解决块级作用域，ES6引入了新的关键字let，用let代替var可以申明一个块级作用域的变量：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sum = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let i=0; i&amp;lt;100; i++&lt;span&gt;) {
        sum &lt;/span&gt;+=&lt;span&gt; i;
    }
     i &lt;/span&gt;+= 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SyntaxError&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;常量&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的话，我们通常采用全部大写的变量来表示“这是一个常量，不要修改它的值”：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; PI = 3.14;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;ES6标准引入了新的关键字const来定义常量&lt;/span&gt;，conset与let都具有块级作用域：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;span&gt;const&lt;/span&gt; PI &lt;/span&gt;= 3.14&lt;span&gt;;
PI &lt;/span&gt;= 3; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 某些浏览器不报错，但是无效果！&lt;/span&gt;
PI; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;解构赋值&lt;/h4&gt;
&lt;p&gt;&lt;span&gt; 从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过一下的代码示例，来展示一下，解构赋值的优越性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;①采用&lt;span&gt;传统的赋值方式&lt;/span&gt;，把一个数组的元素分别赋值给几个变量：&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; array = ['hello', 'JavaScript', 'ES6'&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = array[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = array[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; z = array[2&lt;span&gt;];

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;②采用&lt;span&gt;ES6中新增的解构赋值方式&lt;/span&gt;，直接对多个变量同时赋值：&lt;/span&gt;
'use strict'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果浏览器支持解构赋值就不会报错:&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; [x, y, z] = ['hello', 'JavaScript', 'ES6'];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：对数组元素进行解构赋值时，多个变量要用[ ]括起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，需要注意嵌套层次和位置要保持一致：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
let [x, [y, z]] = ['hello', ['JavaScript', 'ES6'&lt;span&gt;]];
x; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'hello'&lt;/span&gt;
y; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'JavaScript'&lt;/span&gt;
z; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'ES6'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解构赋值还可以忽略某些元素：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let [, , z] = ['hello', 'JavaScript', 'ES6']; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 忽略前两个元素，只对z赋值第三个元素&lt;/span&gt;
z; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'ES6'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; person =&lt;span&gt; {
    name: &lt;/span&gt;'小明'&lt;span&gt;,
    age: &lt;/span&gt;20&lt;span&gt;,
    gender: &lt;/span&gt;'male'&lt;span&gt;,
    passport: &lt;/span&gt;'G-12345678'&lt;span&gt;,
    school: &lt;/span&gt;'No.4 middle school'&lt;span&gt;
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; {name, age, passport} = person;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;// name, age, passport分别被赋值为对应属性:&lt;/span&gt;&lt;br/&gt;console.log('name = ' + name + ', age = ' + age + ', passport = ' + passport);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;name = 小明, age = 20, passport = G-12345678&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;对一个&lt;span&gt;对象进行解构赋值&lt;/span&gt;时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person =&lt;span&gt; {
    name: &lt;/span&gt;'小明'&lt;span&gt;,
    age: &lt;/span&gt;20&lt;span&gt;,
    gender: &lt;/span&gt;'male'&lt;span&gt;,
    passport: &lt;/span&gt;'G-12345678'&lt;span&gt;,
    school: &lt;/span&gt;'No.4 middle school'&lt;span&gt;,
    address: {
        city: &lt;/span&gt;'Beijing'&lt;span&gt;,
        street: &lt;/span&gt;'No.1 Road'&lt;span&gt;,
        zipcode: &lt;/span&gt;'100001'&lt;span&gt;
    }
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; {name, address: {city, &lt;span&gt;zip&lt;/span&gt;}} =&lt;span&gt; person;
name; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; '小明'&lt;/span&gt;
city; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'Beijing'&lt;/span&gt;
&lt;span&gt;zip; // undefined, 因为属性名是zipcode而不是zip
// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:
&lt;/span&gt;&lt;span&gt;address; // Uncaught ReferenceError: address is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为&lt;code&gt;undefined&lt;/code&gt;，这和引用一个不存在的属性获得&lt;code&gt;undefined&lt;/code&gt;是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person =&lt;span&gt; {
    name: &lt;/span&gt;'小明'&lt;span&gt;,
    age: &lt;/span&gt;20&lt;span&gt;,
    gender: &lt;/span&gt;'male'&lt;span&gt;,
    passport: &lt;/span&gt;'G-12345678'&lt;span&gt;,
    school: &lt;/span&gt;'No.4 middle school'&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;// 把passport属性赋值给变量id:
let {name, passport:id} =&lt;/span&gt;&lt;span&gt;&lt;span&gt; person;&lt;/span&gt;
name; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; '小明'&lt;/span&gt;
id; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'G-12345678'&lt;/span&gt;&lt;span&gt;
// 注意: passport不是变量，而是为了让变量id获得passport属性:
passport; // Uncaught ReferenceError: passport is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解构赋值还可以使用默认值，这样就避免了不存在的属性返回 &lt;span class=&quot;cnblogs_code&quot;&gt;undefined&lt;/span&gt; 的问题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; person =&lt;span&gt; {
    name: &lt;/span&gt;'小明'&lt;span&gt;,
    age: &lt;/span&gt;20&lt;span&gt;,
    gender: &lt;/span&gt;'male'&lt;span&gt;,
    passport: &lt;/span&gt;'G-12345678'&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果person对象没有single属性，默认赋值为true:&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; {name, single=&lt;span&gt;true&lt;/span&gt;} =&lt;span&gt; person;
name; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; '小明'&lt;/span&gt;
single; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// 声明变量:
var x, y;
// 解构赋值:
{x, y} = { name: '小明', x: 100, y: 200};
// 语法错误: Uncaught SyntaxError: Unexpected token =&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是因为JavaScript引擎把&lt;code&gt;{&lt;/code&gt;开头的语句当作了块处理，于是&lt;code&gt;=&lt;/code&gt;不再合法。解决方法是用小括号括起来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
({x, y} = { name: '小明', x: 100, y: 200});
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;使用场景&lt;/h4&gt;
&lt;p&gt;解构赋值在很多时候可以大大简化代码。例如，交换两个变量&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;的值，可以这么写，不再需要临时变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; x=1, y=2&lt;span&gt;;
[x, y] &lt;/span&gt;= [y, x]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速获取当前页面的域名和路径：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; {hostname:domain, pathname:path} = location;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中&lt;/span&gt;。例如，下面的函数可以快速创建一个&lt;code&gt;Date&lt;/code&gt;对象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; buildDate({year, month, day, hour=0, minute=0, second=0&lt;span&gt;}) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' +&lt;span&gt; second);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它的方便之处在于传入的对象只需要&lt;code&gt;year&lt;/code&gt;、&lt;code&gt;month&lt;/code&gt;和&lt;code&gt;day&lt;/code&gt;这三个属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
buildDate({ year: 2017, month: 1, day: 1&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sun Jan 01 2017 00:00:00 GMT+0800 (CST)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以传入&lt;code&gt;hour&lt;/code&gt;、&lt;code&gt;minute&lt;/code&gt;和&lt;code&gt;second&lt;/code&gt;属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
buildDate({ year: 2017, month: 1, day: 1, hour: 20, minute: 15&lt;span&gt; });
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sun Jan 01 2017 20:15:00 GMT+0800 (CST)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 06:39:00 +0000</pubDate>
<dc:creator>苦瓜第一印象</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/whucs2012/p/7884802.html</dc:identifier>
</item>
<item>
<title>keras  修仙笔记一 - 北冥大帝</title>
<link>http://www.cnblogs.com/minsons/p/7884629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/minsons/p/7884629.html</guid>
<description>&lt;p&gt;对于牛逼的程序员，人家都喜欢叫他大神；因为大神很牛逼，人家需要一个小时完成的技术问题，他就20分钟就搞定。Keras框架是一个高度集成的框架，学好它，就犹如掌握一个法宝，可以呼风唤雨。所以学keras 犹如在修仙，呵呵。请原谅我无厘头的逻辑。&lt;/p&gt;
&lt;p&gt;Kera是一个高度集成化的框架，面向高层的抽象，他是python语言写的，同时也可以运行在tensorflow或者cntk之上（即后台运行可以是tensorflow或者cntk），他可以快速的构建你的机器学习模型，但也因为高度封装的原因，也会失去一些改写的灵活性。&lt;/p&gt;
&lt;p&gt;首先来看看导入的类，可以有哪些：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;import tensorflow as tf&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; keras &lt;span&gt;import&lt;/span&gt;&lt;span&gt; layers
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.layers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.layers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Model
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.preprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; image
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; layer_utils
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.utils.data_utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; get_file
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.applications.imagenet_utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; preprocess_input
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pydot
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; IPython.display &lt;span&gt;import&lt;/span&gt;&lt;span&gt; SVG
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.utils.vis_utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; model_to_dot
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; keras.utils &lt;span&gt;import&lt;/span&gt;&lt;span&gt; plot_model
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; kt_utils &lt;span&gt;import&lt;/span&gt; *

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; keras.backend as K
K.set_image_data_format(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;channels_last&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; matplotlib.pyplot &lt;span&gt;import&lt;/span&gt;&lt;span&gt; imshow

&lt;/span&gt;%matplotlib inline
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尤其是&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;from keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;from keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这样的函数，顺手捏来就可以使用了。就像一些积木似的，可以用来快速成型。&lt;/p&gt;
&lt;p&gt;现在有一个例子：&lt;/p&gt;
&lt;p&gt;就是有人组织一场party，到场参加的必须是带着笑容了，因为门口有摄像头，通过摄像头会识别来的人是否是带着笑容的，如果是，则自动开门放行，如果不是则不会开门。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1171146/201711/1171146-20171123135807899-1659317158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一步：参数的初始化（模拟数据）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; mean_pred(y_true, y_pred):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; K.mean(y_pred)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; load_dataset():
    train_dataset &lt;/span&gt;= h5py.File(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;datasets/train_happy.h5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; h5py 是一种数据存储格式&lt;/span&gt;
    train_set_x_orig = np.array(train_dataset[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train_set_x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][:]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; your train set features&lt;/span&gt;
    train_set_y_orig = np.array(train_dataset[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train_set_y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][:]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; your train set labels&lt;/span&gt;
&lt;span&gt;
    test_dataset &lt;/span&gt;= h5py.File(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;datasets/test_happy.h5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    test_set_x_orig &lt;/span&gt;= np.array(test_dataset[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_set_x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][:]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; your test set features&lt;/span&gt;
    test_set_y_orig = np.array(test_dataset[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test_set_y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][:]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; your test set labels&lt;/span&gt;
&lt;span&gt;
    classes &lt;/span&gt;= np.array(test_dataset[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list_classes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;][:]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; the list of classes&lt;/span&gt;
&lt;span&gt;    
    train_set_y_orig &lt;/span&gt;= train_set_y_orig.reshape((1&lt;span&gt;, train_set_y_orig.shape[0]))
    test_set_y_orig &lt;/span&gt;= test_set_y_orig.reshape((1&lt;span&gt;, test_set_y_orig.shape[0]))
    
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;小测：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes =&lt;span&gt; load_dataset()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Normalize image vectors&lt;/span&gt;
X_train = X_train_orig/255&lt;span&gt;.
X_test &lt;/span&gt;= X_test_orig/255&lt;span&gt;.

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Reshape&lt;/span&gt;
Y_train =&lt;span&gt; Y_train_orig.T
Y_test &lt;/span&gt;=&lt;span&gt; Y_test_orig.T

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;number of training examples = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(X_train.shape[0]))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;number of test examples = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(X_test.shape[0]))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X_train shape: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(X_train.shape))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y_train shape: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(Y_train.shape))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X_test shape: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(X_test.shape))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y_test shape: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(Y_test.shape))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图片是（64，64,3）&lt;/p&gt;
&lt;p&gt;训练集 600张&lt;/p&gt;
&lt;p&gt;测试集 150张&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步：用keras建立模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;根据keras的快速原型：这些方法都是在导入keras时候导入的
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; model(input_shape):
   X_input &lt;/span&gt;= Input(input_shape) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 底层是tensorflow ，其实是创建placeholder存放变量&lt;/span&gt;
   X=ZeroPadding2D((3,3))(X_input) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 建立padding画布，主要适配不同图片尺寸或者避免边缘特征磨损的情况&lt;/span&gt;
   X=Conv2D(32，(7,7)),strides=(1,1),name=’conv0’)(x)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#32 是过滤核的数量；（7,7）是过滤核的宽度和高度，strides是卷积的部长，name是对其进行命名&lt;/span&gt;
   X = BatchNormalization(axis = 3, name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bn0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)(X) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;规范化，控制过拟合&lt;/span&gt;
   X=Activation(‘relu’)(x) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;激活函数&lt;/span&gt;
   X=MaxPooling2D((2,2),name=’max_pool’)(x) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;池化&lt;/span&gt;
&lt;span&gt;
   X &lt;/span&gt;= Flatten()(X) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;全连接，多维转为一维 &lt;/span&gt;
   X=Dense(1,activation=’sigmoid’,name=’fc’)(x) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;激活函数，和全连接&lt;/span&gt;
   model=Model(input=X_input,outputs=X,name=&lt;span&gt;’HappyModel’)

&lt;/span&gt;&lt;span&gt;   return&lt;/span&gt; model
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面给出的模型中，我们可以看到都一直都用X作为变量，其实这个无所谓了，因为底层已经根据给出的别名X，Z1，A1，Z2，A2等已经赋值并缓存起来了。而这些方法都是前面导入的函数：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;from keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们组装一个模型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; HappyModel(input_shape):
  X_input &lt;/span&gt;= Input(shape=&lt;span&gt;input_shape)
  X &lt;/span&gt;= ZeroPadding2D(padding=(1,1&lt;span&gt;))(X_input)
  X&lt;/span&gt;=Conv2D(8,kernel_size=(3,3),strides=(1,1&lt;span&gt;))(x)
  X&lt;/span&gt;=BatchNormalization(axis=3&lt;span&gt;)(x)
  X&lt;/span&gt;=&lt;span&gt;Activation(‘relu’)(X)
  X&lt;/span&gt;=MaxPooling2D(pool_size=(2,2),strides=(2,2),padding=&lt;span&gt;’valid’)(x)

&lt;/span&gt;&lt;span&gt; #&lt;/span&gt;&lt;span&gt;FC&lt;/span&gt;
  X=&lt;span&gt;Flatten()(X)
  Y&lt;/span&gt;=Dense(1,activation=&lt;span&gt;’sigmoid’)(x)
  Model &lt;/span&gt;= Model(inputs=X_input,outputs=Y,name=&lt;span&gt;’HappyModel’)

  Return model&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三步：训练模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在下面训练模型的过程可分为&lt;/p&gt;
&lt;p&gt;1）  创建模型 （如上代码）&lt;/p&gt;
&lt;p&gt;2）  编译模型，使用到函数 model.compile(optimizer=”..”,loss=”..’’,metrics=[“accuracy”])&lt;/p&gt;
&lt;p&gt;3）  训练模型，通过调用model.fit(x=…,y=…,epochs=…,batch_size=…)&lt;/p&gt;
&lt;p&gt;        Batch_size:批次数，就是每次有多少个样例参与训练，每次训练迭代epochs次&lt;/p&gt;
&lt;p&gt;        Batch_Size 太小，算法在 200 epoches 内不收敛。&lt;/p&gt;
&lt;p&gt;        •随着 Batch_Size 增大，处理相同数据量的速度越快。&lt;/p&gt;
&lt;p&gt;       •随着 Batch_Size 增大，达到相同精度所需要的 epoch 数量越来越多。&lt;/p&gt;
&lt;p&gt;       •由于上述两种因素的矛盾， Batch_Size 增大到某个时候，达到时间上的最优。&lt;/p&gt;
&lt;p&gt;         由于最终收敛精度会陷入不同的局部极值，因此 Batch_Size 增大到某些时候，达到最终收敛精度上的最优。如果内存不足，需要把batch_size 设置小一点&lt;/p&gt;
&lt;p&gt;4）  测试模型的数据通过调用 model.evaluate(x=…,y=…)&lt;/p&gt;
&lt;p&gt;具体的使用可以参考中文keras手册：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://keras-cn.readthedocs.io/en/latest/layers/core_layer/&quot;&gt;http://keras-cn.readthedocs.io/en/latest/layers/core_layer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）  创建模型：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
happyModel = HappyModel((64, 64, 3))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2）  编译模型：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; keras

happyModel.compile(optimizer&lt;/span&gt;=keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0), loss=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;binary_crossentropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, metrics=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  # 优化器中Adam&lt;/p&gt;
&lt;p&gt;  # lr：大或等于0的浮点数，学习率&lt;/p&gt;
&lt;p&gt; #beta_1/beta_2：浮点数， 0&amp;lt;beta&amp;lt;1，通常很接近1&lt;/p&gt;
&lt;p&gt; # epsilon：大或等于0的小浮点数，防止除0错误&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）  训练模型：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
happyModel.fit(x=X_train, y=Y_train, batch_size=16, epochs=20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4）  测试模型：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
preds = happyModel.evaluate(x=X_test, y=&lt;span&gt;Y_test)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;## END CODE HERE ###&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Loss = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(preds[0]))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Test Accuracy = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(preds[1]))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;happyModel.summary()&lt;/strong&gt;&lt;/span&gt; :会详细打印出训练的过程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四步：实际运用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;预测结果：model.predict(x) 就会打印出匹配的结果 是true 还是flase&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
mg_path = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;images/my_image.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;## END CODE HERE ###&lt;/span&gt;
img = image.load_img(img_path, target_size=(64, 64&lt;span&gt;))
imshow(img)

x &lt;/span&gt;=&lt;span&gt; image.img_to_array(img)
x &lt;/span&gt;= np.expand_dims(x, axis=&lt;span&gt;0)
x &lt;/span&gt;=&lt;span&gt; preprocess_input(x)
result &lt;/span&gt;= happyModel.predict(x) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;##预测结果&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(result)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：keras训练主要有4大步骤&lt;br/&gt;Create-&amp;gt;Compile-&amp;gt;Fit/Train-&amp;gt;Evaluate/Test.&lt;br/&gt;创建-编译-训练-测试&lt;br/&gt;具体的keras函数可以查看：http://keras-cn.readthedocs.io/en/latest/other&lt;/p&gt;
&lt;p&gt;参考：基础原理http://www.jianshu.com/p/64172378a178&lt;/p&gt;
</description>
<pubDate>Thu, 23 Nov 2017 06:08:00 +0000</pubDate>
<dc:creator>北冥大帝</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/minsons/p/7884629.html</dc:identifier>
</item>
<item>
<title>利用Angular实现多团队模块化SPA开发框架 - 幻天芒</title>
<link>http://www.cnblogs.com/humin/p/7884536.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/humin/p/7884536.html</guid>
<description>&lt;p&gt;当一个公司有多个开发团队时，我们可能会遇到这样一些问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;技术选项杂乱，大家各玩各&lt;/li&gt;
&lt;li&gt;业务重复度高，各种通用api，登录注销，权限管理都需要重复实现（甚至一个团队都需要重复实现）&lt;/li&gt;
&lt;li&gt;业务壁垒，业务之间的互通变得比较麻烦&lt;/li&gt;
&lt;li&gt;部署方式复杂，多个域名（或IP地址）访问，给用户造成较大的记忆难度&lt;/li&gt;
&lt;li&gt;多套系统，风格难以统一&lt;/li&gt;
&lt;li&gt;等等...&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当然，解决方式有不少。以下就来讲解下我们这边的一种解决方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angualr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Angular&lt;/code&gt;（注：非AngularJS） 是流行的前端 &lt;code&gt;MVVM&lt;/code&gt; 框架之一，配合 &lt;code&gt;TypeScript&lt;/code&gt;，非常适合用来做后台管理系统。由于我们曾今的一套 &lt;code&gt;Angularjs&lt;/code&gt; 开发框架，我们继续选择 &lt;code&gt;Angular&lt;/code&gt; 来进行实现，并尽可能的兼容 &lt;code&gt;AngularJS&lt;/code&gt; 的模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SPA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选 &lt;code&gt;SPA&lt;/code&gt; 还是多页？多余 &lt;code&gt;Mvvm&lt;/code&gt; 来说，多页并不是标配。而且多页开发中，我们势必会关注更多的内容，包括通用header，footer，而不仅仅是页面的核心内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模块化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么要模块化呢？当有多个团队开发时（或者项目较大时），我们希望各个团队开发出来的东西都是 &lt;code&gt;模块&lt;/code&gt;（不仅限于JS模块），这样可以让我们独立发布、更新、删除模块，也能让我们的关注点集中在特定模块下，提高开发效率和可维护性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们需要有一个运行平台（Website站点），允许在里面运行指定的模块。这样就可以实现单一入口，也容易实现通用逻辑，模块共享机制等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;兼容 AngularJS 模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在考虑将框架切换到 &lt;code&gt;Angular&lt;/code&gt; 时，我们无可避免的会遇到如何兼容当前已有模块的问题。大致可选的方案如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;参考 &lt;code&gt;AngualrJS -&amp;gt; Angular&lt;/code&gt; 官方升级指南，一步步将模块切换为 &lt;code&gt;Angular&lt;/code&gt; 的实现。（工作量大，需要开发团队调整很多东西）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iframe嵌入&lt;/code&gt;，会有一定的体验差异，但对开发团队来说，基本无缝升级，也不需要做什么改动。（无疑，我们选择了这套方案）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;模块打包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们需要将单个的模块打包为资源包，进行更新。这样才能做到模块独立发布，及时生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS冲突&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在大型 &lt;code&gt;SPA&lt;/code&gt; 中，CSS冲突是很大的一个问题。我们期望通过技术手段，能够根据当前使用的模块，加载和卸载CSS。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨页面共享数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于涉及到iframe兼容旧有模块，我们无可避免，需要考虑跨窗口的页面共享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公共模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个团队的模块较多时，就会有一些公共的东西被抽取出来，这个过程，框架是无法知道的，所以这个时候，我们就需要考虑支持公共模块。（模块之间也有依赖关系）&lt;/p&gt;

&lt;p&gt;基于以上的一些思考，我们首先需要实现一个基础的平台网站，这个没什么难度，直接用 &lt;code&gt;Angular&lt;/code&gt; 实现即可。有了这一套东西，我们的登录注销，基本的菜单权限管理，也就实现了。&lt;/p&gt;
&lt;p&gt;在这个基础之上，我们也能实现公共服务、公共组件了（封装一系列常用的玩意）。&lt;/p&gt;
&lt;h2 id=&quot;如何模块化如何打包&quot;&gt;如何模块化？如何打包？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意：此模块并非Angular本身的模块。&lt;/strong&gt; 我们通过约定，在 &lt;code&gt;modules/&lt;/code&gt; 下的每一个目录都是一个业务模块。一个业务模块一般会包含，静态资源、CSS以及JS。根据这个思路，我们的打包策略就是：遍历 &lt;code&gt;modules/&lt;/code&gt; 的所有目录，对每一个目录进行单独打包（webpack多entry打包+CSS抽取），另外使用 &lt;code&gt;gulp&lt;/code&gt; 来处理相关的静态资源（在我看来，gulp才是构建工具，webpack是打包工具，所以混合使用，物尽其用）。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;code&gt;webpack&lt;/code&gt; 会把所有相关依赖打包在一起，A、B 模块都依赖了 &lt;code&gt;@angular/core&lt;/code&gt; 识别会重复打包，而且框架中，也已经打包了 &lt;code&gt;@angular&lt;/code&gt; 相关组件。这个时候，常规的打包配置就不太合适了。那该如何做呢？&lt;/p&gt;
&lt;p&gt;考虑到 &lt;code&gt;Angular&lt;/code&gt; 也提供了 &lt;code&gt;CDN&lt;/code&gt; 版本，所以我们将 &lt;code&gt;Angular&lt;/code&gt; 的组件通过文件合并，作为全局全量访问，如 &lt;code&gt;ng.core&lt;/code&gt;、&lt;code&gt;ng.common&lt;/code&gt; 等。&lt;/p&gt;
&lt;p&gt;既然这样，那我们打包的时候，就可以利用 &lt;code&gt;webpack&lt;/code&gt; 的 &lt;code&gt;externals&lt;/code&gt; 功能，把相关依赖替换为全局变量。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;externals&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'rxjs'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Rx'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/common'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.common'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/compiler'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.compiler'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/core'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.core'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/http'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.http'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/platform-browser'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.platformBrowser'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/platform-browser-dynamic'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.platformBrowserDynamic'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/router'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.router'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/forms'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.forms'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;'@angular/animations'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ng.animations'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样处理之后，我们打包后的文件，也就不会有 &lt;code&gt;Angular&lt;/code&gt; 框架代码了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：这个对引入资源的方式也有一定要求，就不能直接引入内层资源了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何动态加载模块&quot;&gt;如何动态加载模块&lt;/h2&gt;
&lt;p&gt;打包完成之后，这个时候就要考虑平台如何加载这些模块了（发布过程就不说了，放到指定位置即可）。&lt;/p&gt;
&lt;p&gt;什么时候决定加载模块呢？其实是访问特定路由的时候，所以我们的顶级路由，会使用Promise方法来实现，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; loadModule &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (moduleName) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ModuleLoaderService&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(moduleName)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; dynamicRoutes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;modules&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(item &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;dynamicRoutes&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;canActivate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [AuthGuard]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;canActivateChild&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [AuthGuard]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loadChildren&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;loadModule&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;module&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; appRoutes&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Routes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; LoginComponent
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'logout'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; LogoutComponent
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; LayoutComponent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;canActivate&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [AuthGuard]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; HomeComponent &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    ...&lt;span class=&quot;at&quot;&gt;dynamicRoutes&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'**'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; NotFoundComponent &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们把每个模块，按照 &lt;code&gt;umd&lt;/code&gt; 的格式进行打包。然后再需要使用该模块的时候，使用动态构建 &lt;code&gt;script&lt;/code&gt; 来运行脚本。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(moduleName&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; isDepModule &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Promise&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;any&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; module &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; window[&lt;span class=&quot;st&quot;&gt;'xxx'&lt;/span&gt;][moduleName]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (module) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(module)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Promise&lt;/span&gt;((resolve&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; reject) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;root&lt;span class=&quot;sc&quot;&gt;}${&lt;/span&gt;moduleName&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/app.js?rnd=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_loadCss&lt;/span&gt;(moduleName)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(path)
      .&lt;span class=&quot;at&quot;&gt;toPromise&lt;/span&gt;()
      .&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(res &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; code &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_DomEval&lt;/span&gt;(code)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; window[&lt;span class=&quot;st&quot;&gt;'xxx'&lt;/span&gt;][moduleName]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
      .&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(mod &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        window[&lt;span class=&quot;st&quot;&gt;'xxx'&lt;/span&gt;][moduleName] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mod&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; AppModule &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;mod&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// route change will call useModuleStyles function.&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// this.useModuleStyles(moduleName, isDepModule);&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(AppModule)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
      .&lt;span class=&quot;at&quot;&gt;catch&lt;/span&gt;(err &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Load module failed: '&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; err)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(EmptyModule)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 取自jQuery&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;_DomEval&lt;/span&gt;(code&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; doc&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  doc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; doc &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; document&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; script &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;doc&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'script'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;script&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;doc&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;head&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(script).&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(script)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CSS的动态加载相对比较简单，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;_loadCss&lt;/span&gt;(moduleName&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string)&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; cssPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;root&lt;span class=&quot;sc&quot;&gt;}${&lt;/span&gt;moduleName&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/app.css?rnd=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; link &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'link'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;link&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'rel'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'stylesheet'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;link&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'href'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; cssPath)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;link&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'class'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`xxx-module-style &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;moduleName&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'head'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(link)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了能够在模块切换时卸载，还需要提供一个方法，供路由切换时使用：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;useModuleStyles&lt;/span&gt;(moduleName&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string)&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; xxxModuleStyles &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [].&lt;span class=&quot;va&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.xxx-module-style'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; moduleDeps &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_getModuleAndDeps&lt;/span&gt;(moduleName)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;moduleDeps&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(moduleName)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;xxxModuleStyles&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(link &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; disabled &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;moduleDeps&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;--&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;link&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;className&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;indexOf&lt;/span&gt;(moduleDeps[i]) &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        disabled &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;moduleDeps&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splice&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;link&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; disabled&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;公共模块依赖&quot;&gt;公共模块依赖&lt;/h2&gt;
&lt;p&gt;为了处理模块依赖，我们可以借鉴 AMD规范 以及使用 &lt;code&gt;requirejs&lt;/code&gt; 作为加载器。当前在我的实现里，是自定义了一套加载器，后期应该会切换到 AMD 规范上去。&lt;/p&gt;
&lt;h2 id=&quot;如何兼容-angularjs-模块&quot;&gt;如何兼容 &lt;code&gt;AngularJS&lt;/code&gt; 模块？&lt;/h2&gt;
&lt;p&gt;为了兼容 &lt;code&gt;AngularJS&lt;/code&gt; 的模块，我们引入了 iframe， iframe会先加载一套曾今的 &lt;code&gt;AngularJS&lt;/code&gt; 宿主，然后再这个宿主中，运行 &lt;code&gt;AngularJS&lt;/code&gt; 模块。为了实现通信，我们需要两套平台程序中，都引入一个基于 &lt;code&gt;postMessage&lt;/code&gt; 实现的跨窗口通信库（因为默认跨域，所以用postMessage实现），有了它之后，我们就可以很方便的两边通信了。&lt;/p&gt;
&lt;h2 id=&quot;aot编译&quot;&gt;AOT编译&lt;/h2&gt;
&lt;p&gt;按照 &lt;code&gt;Angular&lt;/code&gt; 官方的 &lt;code&gt;Aot&lt;/code&gt; 编译流程即可。&lt;/p&gt;
&lt;h2 id=&quot;多tab页&quot;&gt;多Tab页&lt;/h2&gt;
&lt;p&gt;在后台系统中，多Tab页是比较常用了。但是多Tab页，在单页中使用，会有一定的性能风险，这个依据实际的情况，进行使用。实现多Tab页的核心就是如何动态加载组件以及如何获取到要加载的组件。&lt;/p&gt;
&lt;p&gt;多Tab页面，实际就是一个 &lt;code&gt;Tabset&lt;/code&gt; 组件，只是在 &lt;code&gt;tab-item&lt;/code&gt; 的实现稍显特别一些，相关动态加载的源码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;@&lt;span class=&quot;at&quot;&gt;ViewChild&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'dynamicComponentContainer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ViewContainerRef &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) dynamicComponentContainer&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ViewContainerRef&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; elementRef&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ElementRef&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; renderer&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Renderer2&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; tabset&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; TabsetComponent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; resolver&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ComponentFactoryResolver&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; parentContexts&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ChildrenOutletContexts
) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;destroy&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; el &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;elementRef&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;nativeElement&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HTMLElement&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// tslint:disable-next-line:no-unused-expression&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parentNode&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(el))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;loadComponent&lt;/span&gt;(component&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; any) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; context &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentContexts&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(PRIMARY_OUTLET)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; injector &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ReflectiveInjector&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromResolvedProviders&lt;/span&gt;([]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;dynamicComponentContainer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;injector&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; resolver &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;context&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolver&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; factory &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;resolver&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolveComponentFactory&lt;/span&gt;(component)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;//   let componentIns = factory.create(injector);&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;//   this.dynamicComponentContainer.insert(componentIns.hostView);&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;dynamicComponentContainer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createComponent&lt;/span&gt;(factory)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：要考虑组件卸载方法，如 destroy()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了获取到当前要渲染的组件，我们可以借用路由来抓取：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;router&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;events&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(evt &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (evt &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; NavigationEnd) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; pageComponent&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; pageName&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; nextRoute &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;route&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      pageName &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;path&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      pageComponent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;nextRoute&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;catch&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      pageName &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'$$notfound'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      pageComponent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; NotFoundComponent&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; idx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;pageList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;pageList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(x &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; pageName)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;pageList&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`页面&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;idx&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; pageComponent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; pageName&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;closable&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;selectedPage&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pageName&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上就是大概的实现思路以及部分相关的细节。其他细节就需要根据实际的情况，进行酌情处理。&lt;/p&gt;
&lt;p&gt;该思路并不仅限于 &lt;code&gt;Angular&lt;/code&gt; 框架，使用 &lt;code&gt;Vue、React&lt;/code&gt; 也可以做到类似的效果。同时，这套东西也比较适合中小企业的后台平台（不一定非要多团队，一个团队按模块开发也是不错的）。&lt;/p&gt;
&lt;p&gt;如需要了解更多细节，可以参考：&lt;a href=&quot;https://github.com/hstarorg/ngx-modular-platform&quot;&gt;ngx-modular-platform&lt;/a&gt;，能给个 &lt;code&gt;star&lt;/code&gt; 就更好了。&lt;/p&gt;
&lt;p&gt;在此抛砖引玉，希望能集思广益，提炼出更好的方案。欢迎讨论和 &lt;code&gt;提Issue&lt;/code&gt;, &lt;code&gt;发PR&lt;/code&gt;。&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 05:48:00 +0000</pubDate>
<dc:creator>幻天芒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/humin/p/7884536.html</dc:identifier>
</item>
<item>
<title>基础技能树-25 方法 - 李永京</title>
<link>http://www.cnblogs.com/lyj/p/foundation_25_method.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyj/p/foundation_25_method.html</guid>
<description>&lt;p&gt;本节内容&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lyj/p/foundation_serie.html&quot;&gt;基础技能树 系列文章导航&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;方法与函数的差异&lt;/li&gt;
&lt;li&gt;方法调用方式，如何传递receiver、self、this&lt;/li&gt;
&lt;li&gt;方法可被内联吗[付费阅读]&lt;/li&gt;
&lt;li&gt;匿名字段方法，是继承调用？还是语法糖？[付费阅读]&lt;/li&gt;
&lt;li&gt;匿名字段方法调用&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;方法与函数的差异&quot;&gt;方法与函数的差异&lt;/h2&gt;
&lt;p&gt;方法与函数的差异很简单，首先，他们都代表了一定的代码，通常情况下，函数并没有状态一说，它像一个工厂，把原材料输入进去，结果生成一个产品，执行完了就结束了。函数更多的是一种行为上的集合，可以理解为材料加工，代工行业。方法，首先有个对象实例的存在，对象实例实际上是个体、特征的一个集合，方法是围绕这个特征，要么用数据来驱动行为，比如你饿了需要找吃的，饿了代表抽象的数据；要么用行为改变数据。方法肯定是跟当前实例的状态捆绑在一起的，所以方法是具备状态的。方法的调用是有顺序的。方法要么是显示实例数据，要么是修改实例数据，它围绕着是这个实例。我们设计方法的时候，首先确定实例，比如设计方法叫吃饭，实例叫张三，命名不是叫张三吃饭，肯定设计为叫张三.吃饭，因为吃饭是和张三捆在一起的。方法有前缀的，有上下文的，有引用的。&lt;/p&gt;
&lt;p&gt;函数通常我们认为最好是没有特征的，没有上下文状态的，执行完了就没了。因为我们知道函数的状态是存在栈桢上，同一个函数被两个线程调用，他们的状态是分离的，完全不一样的，各自持有。&lt;/p&gt;
&lt;p&gt;实例有一个方法，同时线程1、线程2执行这个方法的时候，除了栈桢上的数据以外，还会影响实例的状态。很显然对象或者方法在并发情况下存在数据竞争的问题，因为我们不能保证线程1和线程2同时调用方法的时候对实例内部的数据做出什么样的修改。&lt;/p&gt;
&lt;p&gt;所以当我们去做高并发算法时候，尽可能避免使用面向对象这种范例，因为这会涉及到状态的共享。像一些高并发算法，函数语言通常会两个函数，各自准备所有参数，线程1、线程2都复制一份，各自改变，执行完了结果进行合并，两个线程执行时绝对不共享同一个对象，所以面向对象对于高并发编程时候存在一些麻烦，通常会加锁，加锁会造成把并发变成了串行。在OOP编程领域当一个对象被复制了以后它就变成两个独立的实例了，OOP所有的方法围绕着单个实例进行。&lt;/p&gt;
&lt;h2 id=&quot;方法调用方式如何传递receiverselfthis&quot;&gt;方法调用方式，如何传递receiver、self、this&lt;/h2&gt;
&lt;p&gt;方法调用时候会隐性的传递当前实例的指针，不同的语言不同的做法，这东西究竟怎么传递的，很普通函数调用有什么区别？因为我们调用方法时候并没有传递这样的东西，在汇编层面究竟怎么传递的？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt; test.go&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; N &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (n *N) Inc() {
    *n++
}

&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; main() {
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; n N = &lt;span class=&quot;dv&quot;&gt;0x100&lt;/span&gt;
    n.Inc()
    &lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(n)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单的代码，创建了一个类型N，给这个类型N定义了一个Inc方法，在main函数中创建一个实例，调用了Inc方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;go&lt;/span&gt; build -gcflags &lt;span class=&quot;st&quot;&gt;&quot;-N -l&quot;&lt;/span&gt; -o test test.go &lt;span class=&quot;co&quot;&gt;#编译&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;gdb&lt;/span&gt; test
$ &lt;span class=&quot;kw&quot;&gt;l&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;l&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;b&lt;/span&gt; 11
$ &lt;span class=&quot;kw&quot;&gt;b&lt;/span&gt; 6
$ &lt;span class=&quot;kw&quot;&gt;r&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;l&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;p/x&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;amp;n&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#$1 = 0xc42003bf68 拿到n的信息f68&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;disassembly-flavor&lt;/span&gt; intel
$ &lt;span class=&quot;kw&quot;&gt;disass&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Dump&lt;/span&gt; of assembler code for function main.main:
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509f0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;0&amp;gt;&lt;/span&gt;: mov    rcx,QWORD PTR fs:0xfffffffffffffff8
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509f9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;9&amp;gt;&lt;/span&gt;: cmp    rsp,QWORD PTR [rcx+0x10]
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509fd&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;13&amp;gt;&lt;/span&gt;:    jbe    0x450a4b &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.main+&lt;span class=&quot;kw&quot;&gt;91&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509ff&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;15&amp;gt;&lt;/span&gt;:    sub    rsp,0x18 &lt;span class=&quot;co&quot;&gt;#main函数分配栈桢空间(三个8)&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a03&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;19&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp+0x10],rbp
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a08&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;24&amp;gt;&lt;/span&gt;:    lea    rbp,[rsp+0x10]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a0d&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;29&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp+0x8],0x100 &lt;span class=&quot;co&quot;&gt;#把n存入rsp+0x8，本地变量&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a16&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;38&amp;gt;&lt;/span&gt;:    lea    rax,[rsp+0x8] &lt;span class=&quot;co&quot;&gt;#把n的地址放到rax中&lt;/span&gt;
=&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;0x0000000000450a1b&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;43&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp],rax &lt;span class=&quot;co&quot;&gt;#rsp空间就是存放n的地址，其实就是编译器隐式的把this参数放在第一个参数位置&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a1f&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;47&amp;gt;&lt;/span&gt;:    call   0x4509b0 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.(*N)&lt;span class=&quot;kw&quot;&gt;.Inc&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a24&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;52&amp;gt;&lt;/span&gt;:    call   0x423890 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printlock&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a29&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;57&amp;gt;&lt;/span&gt;:    mov    rax,QWORD PTR [rsp+0x8]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a2e&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;62&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp],rax
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a32&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;66&amp;gt;&lt;/span&gt;:    call   0x424070 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printint&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a37&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;71&amp;gt;&lt;/span&gt;:    call   0x423b40 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printnl&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a3c&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;76&amp;gt;&lt;/span&gt;:    call   0x423920 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printunlock&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a41&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;81&amp;gt;&lt;/span&gt;:    mov    rbp,QWORD PTR [rsp+0x10]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a46&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;86&amp;gt;&lt;/span&gt;:    add    rsp,0x18
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a4a&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;90&amp;gt;&lt;/span&gt;:    ret
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a4b&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;91&amp;gt;&lt;/span&gt;:    call   0x448790 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.morestack_noctxt&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a50&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;96&amp;gt;&lt;/span&gt;:    jmp    0x4509f0 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.main&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;End&lt;/span&gt; of assembler dump.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#执行到inc方法内部&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;disassembly-flavor&lt;/span&gt; intel &lt;span class=&quot;co&quot;&gt;#设置intel样式&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;disass&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Dump&lt;/span&gt; of assembler code for function main.(*N)&lt;span class=&quot;kw&quot;&gt;.Inc&lt;/span&gt;:
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509b0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;0&amp;gt;&lt;/span&gt;: sub    rsp,0x10 &lt;span class=&quot;co&quot;&gt;#inc方法分配栈桢空间&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509b4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;4&amp;gt;&lt;/span&gt;: mov    QWORD PTR [rsp+0x8],rbp
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509b9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;9&amp;gt;&lt;/span&gt;: lea    rbp,[rsp+0x8]
=&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;0x00000000004509be&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;14&amp;gt;&lt;/span&gt;:    mov    rax,QWORD PTR [rsp+0x18] &lt;span class=&quot;co&quot;&gt;#把N的指针放到rax中&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509c3&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;19&amp;gt;&lt;/span&gt;:    test   BYTE PTR [rax],al
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509c5&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;21&amp;gt;&lt;/span&gt;:    mov    rax,QWORD PTR [rax]
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509c8&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;24&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp],rax
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509cc&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;28&amp;gt;&lt;/span&gt;:    mov    rcx,QWORD PTR [rsp+0x18]
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509d1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;33&amp;gt;&lt;/span&gt;:    test   BYTE PTR [rcx],al
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509d3&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;35&amp;gt;&lt;/span&gt;:    inc    rax &lt;span class=&quot;co&quot;&gt;#调用方法n++&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509d6&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;38&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rcx],rax
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509d9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;41&amp;gt;&lt;/span&gt;:    mov    rbp,QWORD PTR [rsp+0x8]
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509de&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;46&amp;gt;&lt;/span&gt;:    add    rsp,0x10
   &lt;span class=&quot;kw&quot;&gt;0x00000000004509e2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;50&amp;gt;&lt;/span&gt;:    ret
&lt;span class=&quot;kw&quot;&gt;End&lt;/span&gt; of assembler dump.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很显然，我们可以看到我们调用&lt;code&gt;n.Inc()&lt;/code&gt;的时候，虽然我们没有在参数里面传递receiver、self、this引用，但是编译器实际上替我们完成了这样的操作，编译器会隐式的帮我们传递这样的参数。这就是在书上经常看到的当你调用一个方法的时候，编译器会隐式的帮你传递对象实例的引用。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt; test1.go&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; N &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (n *N) Inc() {
    *n++
}

&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (n *N) Add(x &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) {
    *n += N(x)
}

&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; main() {
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; n N = &lt;span class=&quot;dv&quot;&gt;0x100&lt;/span&gt;
    n.Inc()
    n.Add(&lt;span class=&quot;dv&quot;&gt;0x200&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(n)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加一个参数，这时候编译器理论上需要传2个参数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;go&lt;/span&gt; build -gcflags &lt;span class=&quot;st&quot;&gt;&quot;-N -l&quot;&lt;/span&gt; -o test test1.go &lt;span class=&quot;co&quot;&gt;#编译&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;gdb&lt;/span&gt; test
$ &lt;span class=&quot;kw&quot;&gt;l&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;l&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;b&lt;/span&gt; 16
$ &lt;span class=&quot;kw&quot;&gt;r&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;disassembly-flavor&lt;/span&gt; intel
$ &lt;span class=&quot;kw&quot;&gt;disass&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Dump&lt;/span&gt; of assembler code for function main.main:
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a30&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;0&amp;gt;&lt;/span&gt;: mov    rcx,QWORD PTR fs:0xfffffffffffffff8
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a39&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;9&amp;gt;&lt;/span&gt;: cmp    rsp,QWORD PTR [rcx+0x10]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a3d&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;13&amp;gt;&lt;/span&gt;:    jbe    0x450aa2 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.main+&lt;span class=&quot;kw&quot;&gt;114&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a3f&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;15&amp;gt;&lt;/span&gt;:    sub    rsp,0x20  &lt;span class=&quot;co&quot;&gt;#main函数分配栈桢空间(4个8)&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a43&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;19&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp+0x18],rbp
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a48&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;24&amp;gt;&lt;/span&gt;:    lea    rbp,[rsp+0x18]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a4d&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;29&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp+0x10],0x100 &lt;span class=&quot;co&quot;&gt;#把n存入rsp+0x10&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a56&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;38&amp;gt;&lt;/span&gt;:    lea    rax,[rsp+0x10]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a5b&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;43&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp],rax
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a5f&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;47&amp;gt;&lt;/span&gt;:    call   0x4509b0 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.(*N)&lt;span class=&quot;kw&quot;&gt;.Inc&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a64&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;52&amp;gt;&lt;/span&gt;:    lea    rax,[rsp+0x10] &lt;span class=&quot;co&quot;&gt;#把n的地址放到rax中&lt;/span&gt;
=&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;0x0000000000450a69&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;57&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp],rax &lt;span class=&quot;co&quot;&gt;#rsp空间就是存放n的地址，其实就是编译器隐式的把this参数放在这个位置&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a6d&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;61&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp+0x8],0x200 &lt;span class=&quot;co&quot;&gt;#把200存入rsp+0x8&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a76&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;70&amp;gt;&lt;/span&gt;:    call   0x4509f0 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.(*N)&lt;span class=&quot;kw&quot;&gt;.Add&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a7b&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;75&amp;gt;&lt;/span&gt;:    call   0x423890 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printlock&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a80&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;80&amp;gt;&lt;/span&gt;:    mov    rax,QWORD PTR [rsp+0x10]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a85&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;85&amp;gt;&lt;/span&gt;:    mov    QWORD PTR [rsp],rax
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a89&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;89&amp;gt;&lt;/span&gt;:    call   0x424070 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printint&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a8e&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;94&amp;gt;&lt;/span&gt;:    call   0x423b40 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printnl&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a93&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;99&amp;gt;&lt;/span&gt;:    call   0x423920 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.printunlock&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a98&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;104&amp;gt;&lt;/span&gt;:   mov    rbp,QWORD PTR [rsp+0x18]
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450a9d&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;109&amp;gt;&lt;/span&gt;:   add    rsp,0x20
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450aa1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;113&amp;gt;&lt;/span&gt;:   ret
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450aa2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;114&amp;gt;&lt;/span&gt;:   call   0x448790 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;runtime.morestack_noctxt&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;0x0000000000450aa7&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;kw&quot;&gt;119&amp;gt;&lt;/span&gt;:   jmp    0x450a30 &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;main.main&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;End&lt;/span&gt; of assembler dump.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很显然，当我们调用&lt;code&gt;n.Add(0x200)&lt;/code&gt;的时候，实际上是有两个参数，第一个参数是对象的引用，可能是个复制品也可能是个指针。接下来会把后面的参数依次往后补上。这就告诉我们隐式传递怎么实现的。有没有注意到这种调用跟普通的函数没有什么区别，换句话说，可以还原成&lt;code&gt;Add(n, 0x200)&lt;/code&gt;。所以在汇编中，没有方法这么一说，方法是出现在你的语言层面。很显然调用方法时，除了显式参数以外，还需要隐式传递实例的指针。&lt;/p&gt;
&lt;h2 id=&quot;方法可被内联吗付费阅读&quot;&gt;方法可被内联吗[付费阅读]&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;go&lt;/span&gt; build -gcflags &lt;span class=&quot;st&quot;&gt;&quot;-m&quot;&lt;/span&gt; -o test test1.go&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;# command-line-arguments
./test.1.go:5:6: can inline (*N).Inc
./test.1.go:9:6: can inline (*N).Add
./test.1.go:13:6: can inline main
./test.1.go:15:7: inlining call to (*N).Inc
./test.1.go:16:7: inlining call to (*N).Add
./test.1.go:5:10: (*N).Inc n does not escape
./test.1.go:9:19: (*N).Add n does not escape
./test.1.go:15:7: main n does not escape
./test.1.go:16:7: main n does not escape&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到方法也是可以内联的，这个内联以后会是什么样子的？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;go&lt;/span&gt; tool objdump -s &lt;span class=&quot;st&quot;&gt;&quot;main\.main&quot;&lt;/span&gt; test&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;TEXT main.main(SB) /root/lyj/test.1.go
  test.1.go:13      0x4509b0        64488b0c25f8ffffff  MOVQ FS:0xfffffff8, CX
  test.1.go:13      0x4509b9        483b6110        CMPQ 0x10(CX), SP
  test.1.go:13      0x4509bd        763e            JBE 0x4509fd
  test.1.go:13      0x4509bf        4883ec18        SUBQ $0x18, SP
  test.1.go:13      0x4509c3        48896c2410      MOVQ BP, 0x10(SP)
  test.1.go:13      0x4509c8        488d6c2410      LEAQ 0x10(SP), BP
  test.1.go:10      0x4509cd        48c744240801030000  MOVQ $0x301, 0x8(SP)
  test.1.go:17      0x4509d6        e8b52efdff      CALL runtime.printlock(SB)
  test.1.go:17      0x4509db        488b442408      MOVQ 0x8(SP), AX
  test.1.go:17      0x4509e0        48890424        MOVQ AX, 0(SP)
  test.1.go:17      0x4509e4        e88736fdff      CALL runtime.printint(SB)
  test.1.go:17      0x4509e9        e85231fdff      CALL runtime.printnl(SB)
  test.1.go:17      0x4509ee        e82d2ffdff      CALL runtime.printunlock(SB)
  test.1.go:18      0x4509f3        488b6c2410      MOVQ 0x10(SP), BP
  test.1.go:18      0x4509f8        4883c418        ADDQ $0x18, SP
  test.1.go:18      0x4509fc        c3          RET
  test.1.go:13      0x4509fd        e88e7dffff      CALL runtime.morestack_noctxt(SB)
  test.1.go:13      0x450a02        ebac            JMP main.main(SB)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;直接把计算结果算出来&lt;code&gt;MOVQ $0x301, 0x8(SP)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;方法调用变成了很普通的函数内联。所以方法是站在语言层面的东西，在汇编层面上不存在方法一说。区别在于方法是一种特殊的函数，编译器必须帮你插入对象实例的引用，这个传参过程是由编译器帮你完成。&lt;/p&gt;
&lt;p&gt;所以方法并没有你想象的那么复杂，方法可以看成一种很特殊的函数语法糖。&lt;/p&gt;
&lt;h2 id=&quot;匿名字段方法是继承调用还是语法糖付费阅读&quot;&gt;匿名字段方法，是继承调用？还是语法糖？[付费阅读]&lt;/h2&gt;
&lt;h2 id=&quot;匿名字段方法调用&quot;&gt;匿名字段方法调用&lt;/h2&gt;
&lt;p&gt;很普通调用没有什么区别，因为一旦语法糖被还原了以后就变成了普通的调用。&lt;/p&gt;
</description>
<pubDate>Thu, 23 Nov 2017 05:34:00 +0000</pubDate>
<dc:creator>李永京</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyj/p/foundation_25_method.html</dc:identifier>
</item>
<item>
<title>Linux系列教程（二十三）——Linux的服务管理 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/7828392.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/7828392.html</guid>
<description>&lt;p&gt;　　前面我们讲解&lt;a id=&quot;post_title_link_7788902&quot; href=&quot;http://www.cnblogs.com/ysocean/p/7788902.html&quot;&gt;Linux软件包管理之源码包、脚本安装包&lt;/a&gt;时，我们介绍了rpm包和源码包由于安装位置的不同，会对服务的启动造成影响，具体是什么，本篇博客我们来详细介绍。&lt;/p&gt;
&lt;h3&gt;1、Linux服务管理总览&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114212717171-1916649613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以看到Linux的服务分为 RPM包安装的服务以及源码包安装的服务，而RPM包服务又分为独立服务和基于 xinetd 服务。本篇博客就分别介绍着三种服务的启动和如何自启动。&lt;/p&gt;

&lt;h3&gt;2、启动和自启动&lt;/h3&gt;
&lt;p&gt;　　①、启动：启动某个服务就是在当前系统让服务运行，并提供功能。&lt;/p&gt;
&lt;p&gt;　　②、自启动：自启动某个服务，就是在系统开机或重启动之后，随着系统启动而自动启动的服务。&lt;/p&gt;

&lt;h3&gt;3、RPM包和源码包服务启动差别根本原因&lt;/h3&gt;
&lt;p&gt;　　其实不管是RPM包，还是源码包，只不过是初始安装方式不一样而已，如果已经在Linux系统上安装完成之后，那么启动服务都是可以通过如下方式启动：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/绝对路径/启动脚本名 start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　之所以RPM包还有诸如 service 服务名 start 等启动方式是由于其安装位置差异造成的。&lt;/p&gt;
&lt;p&gt;　　①、源码包：&lt;/p&gt;
&lt;p&gt;　　安装路径一般是 /usr/local。查看源码包的启动方式可以进入到源码包的安装目录，查看安装说明文档 INSTALL&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114214124187-188334344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里我们可以查看INSTALL 文件，查看安装说明：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114214153452-1976627383.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　也就是源码包 httpd 的启动方式是：/usr/local/src/bin/apachectl start&lt;/p&gt;

&lt;p&gt;　　②、RPM包&lt;/p&gt;
&lt;p&gt;　　默认安装位置如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114214515156-472947744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　比如 RPM 包安装的httpd服务启动方式有两种：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
①、/etc/rc.d/init.d/httpd start
②、service httpd start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第二种命令是第一种命令的简化形式。这是红帽专有命令。service 会去 rpm 包默认的安装位置去找可执行文件，所以service类似的启动服务管理命令只能管理rpm安装包。如果更改了rpm包的默认安装位置，可能造成通过service启动服务失败。&lt;/p&gt;
&lt;p&gt;　　下面我们分别对启动和自启动RPM包以及源码包服务进行讲解。&lt;/p&gt;

&lt;h3&gt;4、独立服务&lt;/h3&gt;
&lt;p&gt;　　独立服务属于RPM包服务，启动方法如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114214745890-2133486727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　第一种方法是启动服务的万能方法，而通过service启动服务是红帽专有命令。start 表示启动服务，stop 表示停止服务，status表示查看指定服务是否启动，restart 是重启指定服务。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;独立服务自启动：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114214928827-724392619.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114215704609-581109969.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　第二种方法：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220119359-1707327469.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　修改/etc/rc.local或者/etc/rc.d/rc.local 都可以&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220054156-784379937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　第三种方法是图形配置界面：&lt;/p&gt;
&lt;p&gt;　　输入ntsysv 命令，弹出如下界面进行配置就好了。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220433187-897880702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;5、xinetd 服务&lt;/h3&gt;
&lt;p&gt;　　这个服务也是属于 RPM包，现在Linux系统中基于 xinetd 服务越来越少了，启动服务我们只需要修改 /etc/xinetd.d/服务名   这个文件的 disable = no 即可&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220638640-95553285.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　自启动也可以通过 chkconfig 服务名 on 来设置。还可以通过 ntsysv 配置。&lt;/p&gt;

&lt;h3&gt;6、源码包服务&lt;/h3&gt;
&lt;p&gt;　　启动：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220819077-361537174.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　自启动：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220840859-1483212909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　让源码包服务能被服务管理命令识别：即能通过 service 来启动&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220920921-834557058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220943015-2018846630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171114220950437-907655665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;7、总结&lt;/h3&gt;
&lt;p&gt; 　　RPM 包和源码包启动服务的万能方法都可以通过 绝对路径/启动脚本 start 。而对于 RPM 包还可以通过 service 包名 start 来启动，源码包则需要经过配置才可以。造成启动方法的根本原因就是安装位置不同，RPM 包是有默认的安装位置的，而源码包则是需要手动指定安装位置。&lt;/p&gt;

</description>
<pubDate>Thu, 23 Nov 2017 05:33:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/7828392.html</dc:identifier>
</item>
<item>
<title>利用VGG19实现火灾分类(附tensorflow代码及训练集) - 行动派Xdpie</title>
<link>http://www.cnblogs.com/vipyoumay/p/7884472.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipyoumay/p/7884472.html</guid>
<description>&lt;blockquote readability=&quot;1&quot;&gt;
&lt;p&gt;源码地址 &lt;a href=&quot;https://github.com/stephen-v/tensorflow_vgg_classify&quot; class=&quot;uri&quot;&gt;https://github.com/stephen-v/tensorflow_vgg_classify&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2 id=&quot;vgg模型结构&quot;&gt;1.1. VGG模型结构&lt;/h2&gt;
&lt;p&gt;VGG网络是牛津大学Visual Geometry Group团队研发搭建，该项目的主要目的是证明增加网络深度能够在一定程度上提高网络的精度。VGG有5种模型，A-E，其中的E模型VGG19是参加ILSVRC 2014挑战赛使用的模型，并获得了ILSVRC定位第一名，和分类第二名的成绩。整个过程证明，通过把网络深度增加到16-19层确实能够提高网络性能。VGG网络跟之前学习的LeNet网络和AlexNet网络有很多相似之处，以下搭建的VGG19模型也像上一次搭建的AlexNet一样，分成了5个大的卷积层，和3个大的全链层，不同的是，VGG的5个卷积层层数相应增加了；同时，为了减少网络训练参数的数量，整个卷积网络均使用3X3大小的卷积。&lt;/p&gt;
&lt;p&gt;首先来看看原论文中VGG网络的5种模型结构。A-E模型均是由5个stage和3个全链层和一个softmax分类层组成，其中每个stege有一个max-pooling层和多个卷积层。每层的卷积核个数从首阶段的64个开始，每个阶段增长一倍，直到达到512个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;：是最基本的模型，8个卷基层，3个全连接层，一共11层。&lt;br/&gt;&lt;strong&gt;A-LRN&lt;/strong&gt;：忽略&lt;br/&gt;&lt;strong&gt;B&lt;/strong&gt;：在A的基础上，在stage1和stage2基础上分别增加了1层3X3卷积层，一共13层。&lt;br/&gt;&lt;strong&gt;C&lt;/strong&gt;：在B的基础上，在stage3，stage4和stage5基础上分别增加了一层1X1的卷积层，一共16层。&lt;br/&gt;&lt;strong&gt;D&lt;/strong&gt;：在B的基础上，在stage3，stage4和stage5基础上分别增加了一层3X3的卷积层，一共16层。&lt;br/&gt;&lt;strong&gt;E&lt;/strong&gt;：在D的基础上，在stage3，stage4和stage5基础上分别增加了一层3X3的卷积层，一共19层。&lt;/p&gt;
&lt;p&gt;模型D是就是经常说的VGG16网络，模型E则为VGG19网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-10-30-16-00-23.png&quot; alt=&quot;2017-10-30-16-00-23&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然VGG网络使用的均是3X3的卷积filter，极大的减小了参数个数，但和AlexNet比较起来，参数个数还是相当的多，以模型D为例，每一层的参数个数如下表所示，总参数个数为1.3亿左右，庞大的参数增加了训练的时间，下一章单搭建的VGG19模型仅在CPU上进行训练，单单一个epoch就要训练8小时以上！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-10-31-09-49-44.png&quot; alt=&quot;2017-10-31-09-49-44&quot;/&gt;&lt;/p&gt;
&lt;p&gt;尽管VGG19有那么多的参数，但是在训练过程中，作者发现VGG需要很少的迭代次数就开始收敛了，这是因为：&lt;br/&gt;1、深度和小的filter尺寸起到了隐式的规则化作用&lt;br/&gt;2、一些层的pre-initialisation&lt;br/&gt;怎么做pre-initialisation呢？作者先训练最浅的网络A，然后把A的前4个卷积层和最后全链层的权值当作其他网络的初始值，未赋值的中间层通过随机初始化进行训练。这样避免了不好的权值初始值对于网络训练的影响，从而加快了收敛。&lt;/p&gt;
&lt;p&gt;为什么在整个VGG网络中都用的是3X3大小的filter呢，VGG团队给出了下面的解释：&lt;br/&gt;1、3 * 3是最小的能够捕获上下左右和中心概念的尺寸。&lt;/p&gt;
&lt;p&gt;2、两个3 * 3的卷基层的有限感受野是5X5；三个3X3的感受野是7X7，可以替代大的filter尺寸。（感受野表示网络内部的不同位置的神经元对原图像的感受范围大小，神经元感受野的值越大表示其能接触到的原始图像范围就越大，也意味着他可能蕴含更为全局、语义层次更高的特征；而值越小则表示其所包含的特征越趋向于局部和细节。）&lt;/p&gt;
&lt;p&gt;3、多个3 * 3的卷基层比一个大尺寸filter卷基层有更多的非线性，使得判决函数更加具有判决性。&lt;/p&gt;
&lt;p&gt;4、多个3 * 3的卷积层比一个大尺寸的filter有更少的参数，假设卷基层的输入和输出的特征图大小相同为C，那么三个3 * 3的卷积层参数个数为&lt;span class=&quot;math inline&quot;&gt;\(3(3^2C^2)=27C^2\)&lt;/span&gt;；一个7 * 7的卷积层参数为&lt;span class=&quot;math inline&quot;&gt;\(49C^2\)&lt;/span&gt;，整整比3 * 3的多了81%。&lt;/p&gt;

&lt;h2 id=&quot;vgg19架构&quot;&gt;1.2. VGG19架构&lt;/h2&gt;
&lt;p&gt;首先来看看论文中描述的VGG19的网络结构图，输入是一张224X224大小的RGB图片，在输入图片之前，仍然要对图片的每一个像素进行RGB数据的转换和提取。然后使用3X3大小的卷积核进行卷积，作者在论文中描述了使用3X3filter的意图：&lt;br/&gt;“we use filters with a very small receptive field: 3 × 3 (which is the smallest size to capture the notion of left/right, up/down, center).”&lt;br/&gt;即上面提到的“3X3是最小的能够捕获上下左右和中心概念的尺寸”。接着图片依次经过5个Stage和3层全连层的处理，一直到softmax输出分类。卷积核深度从64一直增长到512，更好的提取了图片的特征向量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-10-30-12-34-33.png&quot; alt=&quot;2017-10-30-12-34-33&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stage1&lt;/strong&gt;：&lt;br/&gt;包含两个卷积层，一个池化层，每个卷积层和池化层的信息如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3 * 3&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;1 * 1&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Stage2&lt;/strong&gt;：&lt;br/&gt;包含两个卷积层，一个池化层，每个卷积层和池化层的信息如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3 * 3&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;1 * 1&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Stage3&lt;/strong&gt;：&lt;br/&gt;包含四个卷积层，一个池化层，每个卷积层和池化层的信息如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3 * 3&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;1 * 1&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Stage4&lt;/strong&gt;：&lt;br/&gt;包含四个卷积层，一个池化层，每个卷积层和池化层的信息如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3 * 3&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;1 * 1&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Stage5&lt;/strong&gt;：&lt;br/&gt;包含四个卷积层，一个池化层，每个卷积层和池化层的信息如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3 * 3&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;1 * 1&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;池化层&lt;/strong&gt;&lt;br/&gt;整个网络包含5个池化层，分别位于每一个Stage的后面，每个池化层的尺寸均一样，如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;2 * 2&lt;/td&gt;
&lt;td&gt;2 * 2&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;对于其他的隐藏层，作者在论文中做了如下阐述：&lt;br/&gt;“All hidden layers are equipped with the rectification (ReLU (Krizhevsky et al., 2012)) non-linearity.We note that none of our networks (except for one) contain Local Response Normalisation(LRN) normalisation (Krizhevsky et al., 2012): as will be shown in Sect. 4, such normalisation does not improve the performance on the ILSVRC dataset, but leads to increased memory consumption and computation time. ”&lt;/p&gt;
&lt;p&gt;整个网络不包含LRN，因为LRN会占用内存和增加计算时间。接着经过3个全链层的处理，由Softmax输出1000个类别的分类结果。&lt;/p&gt;


&lt;p&gt;VGG团队早已用Tensorflow搭建好了VGG16和VGG19网络，在使用他们的网络前，你需要下载已经训练好的参数文件vgg19.npy，下载地址为：&lt;a href=&quot;https://mega.nz/#!xZ8glS6J!MAnE91ND_WyfZ_8mvkuSa2YcA7q-1ehfSm-Q1fxOvvs&quot; class=&quot;uri&quot;&gt;https://mega.nz/#!xZ8glS6J!MAnE91ND_WyfZ_8mvkuSa2YcA7q-1ehfSm-Q1fxOvvs&lt;/a&gt; 。原版的VGG16/19模型代码在 &lt;a href=&quot;https://github.com/machrisaa/tensorflow-vgg&quot; class=&quot;uri&quot;&gt;https://github.com/machrisaa/tensorflow-vgg&lt;/a&gt; （该模型中提到的weights文件已不可用）， 我们根据该模型代码对VGG19网络做了一些微调以适应自己的训练需求，同时也像上一篇的AlexNet一样，增加了精调训练代码，后面会有介绍。&lt;/p&gt;
&lt;p&gt;使用Tensorflow来搭建一个完整的VGG19网络，包含我修改过的整整用了160行代码，如下附上一部分代码，该网络也是VGG团队已经训练好了的，你可以拿来直接进行图片识别和分类，但是如果你有其他的图片识别需求，你需要用自己的训练集来训练一次以获得想要的结果，并存储好自己的权重文件。&lt;/p&gt;
&lt;p&gt;我们在原版的基础上做了一些改动，增加了入参&lt;span&gt;num_class&lt;/span&gt;，该参数代表分类个数，如果你有100个种类的图片需要训练，这个值必须设置成100，以此类推。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;88&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Vgg19(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;co&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    A trainable version VGG19.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, bgr_image, num_class, vgg19_npy_path&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, trainable&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, dropout&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; vgg19_npy_path &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.data_dict &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.load(vgg19_npy_path, encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'latin1'&lt;/span&gt;).item()
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.data_dict &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.BGR_IMAGE &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; bgr_image
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.NUM_CLASS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; num_class
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.var_dict &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {}
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.trainable &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; trainable
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.dropout &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; dropout

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.build()

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; build(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, train_mode&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;):

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv1_1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.BGR_IMAGE, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv1_1&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv1_2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv1_1, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv1_2&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.max_pool(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv1_2, &lt;span class=&quot;st&quot;&gt;'pool1'&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv2_1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool1, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv2_1&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv2_2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv2_1, &lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv2_2&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.max_pool(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv2_2, &lt;span class=&quot;st&quot;&gt;'pool2'&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool2, &lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv3_1&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_1, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv3_2&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_2, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv3_3&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_3, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv3_4&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.max_pool(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv3_4, &lt;span class=&quot;st&quot;&gt;'pool3'&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool3, &lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv4_1&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_1, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv4_2&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_2, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv4_3&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_3, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv4_4&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.max_pool(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv4_4, &lt;span class=&quot;st&quot;&gt;'pool4'&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool4, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv5_1&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_1, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv5_2&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_2, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv5_3&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_3, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;conv5_4&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.max_pool(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.conv5_4, &lt;span class=&quot;st&quot;&gt;'pool5'&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc6 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pool5, &lt;span class=&quot;dv&quot;&gt;25088&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;fc6&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.nn.relu(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc6)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; train_mode &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.cond(train_mode, &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt;: tf.nn.dropout(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.dropout), &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6)
        &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; train_mode:
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.nn.dropout(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.dropout)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc7 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu6, &lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;fc7&quot;&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.nn.relu(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc7)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; train_mode &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.cond(train_mode, &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt;: tf.nn.dropout(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.dropout), &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7)
        &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; train_mode:
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.nn.dropout(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.dropout)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc8 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc_layer(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.relu7, &lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.NUM_CLASS, &lt;span class=&quot;st&quot;&gt;&quot;fc8&quot;&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.prob &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.nn.softmax(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.fc8, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;prob&quot;&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.data_dict &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用Tenforflow来搭建网络确实代码量比较大，网上有使用Keras来搭建的，并且可以不用训练，直接用于图片识别，代码量少，使用简单方便，感兴趣的同学可以去 &lt;a href=&quot;https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3#file-vgg-16_keras-py-L24&quot; class=&quot;uri&quot;&gt;https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3#file-vgg-16_keras-py-L24&lt;/a&gt; 看看，由于Keras已经发布了新版本，这个github上的代码存在一些问题，需要做一些修改，附上我自己修改好的代码，仅有70多行就可以进行使用了。之前看了两天Keras的官方document，在使用fit方法训练的时候，入参就有epoch的设置，感觉不需要用到for循环，同时，不需要自定义Optimizer和acuuracy，只需指定名字就可以了，简直方便快捷，但是对于如何把每一个epoch得到的accuracy和loss用类似tensorboard视图的方式显示出来我就不太清楚了，如有知道的同学，请不吝赐教。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;102&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; keras.models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Sequential
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; keras.layers.core &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Flatten, Dense, Dropout
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; keras.layers.convolutional &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Conv2D, MaxPooling2D, ZeroPadding2D


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; VGG_16(weights_path&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;):
    model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Sequential()
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), input_shape&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(MaxPooling2D((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))

    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(MaxPooling2D((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))

    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;256&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(MaxPooling2D((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))

    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(MaxPooling2D((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))

    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(ZeroPadding2D((&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))
    model.add(Conv2D(&lt;span class=&quot;dv&quot;&gt;512&lt;/span&gt;, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(MaxPooling2D((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), strides&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)))

    model.add(Flatten())
    model.add(Dense(&lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;, activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(Dropout(&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;))
    model.add(Dense(&lt;span class=&quot;dv&quot;&gt;4096&lt;/span&gt;, activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;))
    model.add(Dropout(&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;))
    model.add(Dense(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, activation&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'softmax'&lt;/span&gt;))

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; weights_path:
        model.load_weights(weights_path)

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; model


&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    im &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; cv2.resize(cv2.imread(&lt;span class=&quot;st&quot;&gt;'cat.jpg'&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;)).astype(np.float32)
    im[:,:,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;103.939&lt;/span&gt;
    im[:,:,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;116.779&lt;/span&gt;
    im[:,:,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;123.68&lt;/span&gt;
    im &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; im.transpose((&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
    im &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.expand_dims(im, axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)

    &lt;span class=&quot;co&quot;&gt;# Test pretrained model&lt;/span&gt;
    model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; VGG_16(&lt;span class=&quot;st&quot;&gt;'vgg16_weights.h5'&lt;/span&gt;)
    sgd &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; SGD(lr&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;, decay&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;1e-6&lt;/span&gt;, momentum&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.9&lt;/span&gt;, nesterov&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
    model.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(optimizer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;sgd, loss&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'categorical_crossentropy'&lt;/span&gt;)
    out &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; model.predict(im)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (np.argmax(out))
    &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然使用训练好的网络和网络权值可以直接进行分类识别应用，但是本着学习研究的精神，我们需要知道如何训练数据以及测试和验证网络模型。&lt;/p&gt;
&lt;p&gt;目前，我们有项识别火灾的任务（该项目的数据集来自一位挪威教授，他的github地址为：&lt;a href=&quot;https://github.com/UIA-CAIR/Fire-Detection-Image-Dataset&quot; class=&quot;uri&quot;&gt;https://github.com/UIA-CAIR/Fire-Detection-Image-Dataset&lt;/a&gt; ，他使用的是改进过的VGG16网络），需要使用VGG19进行训练，而通常模型训练需要的正样本和负样本数量要相等，并且数据集越多越好，但在本次训练中，所有图片均是作者从网络抓取而来，且训练集中的fire的图片和non-fire图片是不相等的，分别为223张和445张（原图没有那么多，我们自己增加了一些火灾图片），测试集中的fire图片和non-fire的图片则相等，均为50张。&lt;/p&gt;
&lt;p&gt;对于如何获取batch数据，在之前的AlexNet中使用的是数据迭代器，在本次训练中我们使用Tensorflow的队列来自动获取每个batch的数据,使用队列可以把图片及对应的标签准确的取出来，同时还自动打乱顺序，非常好使用。由于使用了&lt;code&gt;tf.train.slice_input_producer&lt;/code&gt;建立了文件队列，因此一定要记住，在训练图片的时候需要运行&lt;code&gt;tf.train.start_queue_runners(sess=sess)&lt;/code&gt;这样数据才会真正的填充进队列，否则程序将会挂起。&lt;br/&gt;程序代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tensorflow &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; tf

VGG_MEAN &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.constant([&lt;span class=&quot;fl&quot;&gt;123.68&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;116.779&lt;/span&gt;, &lt;span class=&quot;fl&quot;&gt;103.939&lt;/span&gt;], dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;tf.float32)



&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ImageDataGenerator(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, images, labels, batch_size, num_classes):
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.filenames &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; images
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.labels &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; labels
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.batch_size &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; batch_size
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.num_class &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; num_classes
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.image_batch, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.label_batch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.image_decode()


    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; image_decode(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;co&quot;&gt;# 建立文件队列，把图片和对应的实际标签放入队列中&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;#注：在没有运行tf.train.start_queue_runners(sess=sess)之前，数据实际上是没有放入队列中的&lt;/span&gt;
        file_queue &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.train.slice_input_producer([&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.filenames, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.labels])

        &lt;span class=&quot;co&quot;&gt;# 把图片数据转化为三维BGR矩阵&lt;/span&gt;
        image_content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.read_file(file_queue[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])
        image_data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.image.decode_jpeg(image_content, channels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
        image &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.image.resize_images(image_data, [&lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;])
        img_centered &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.subtract(image, VGG_MEAN)
        img_bgr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; img_centered[:, :, ::&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]

        labels &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.one_hot(file_queue[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.num_class, dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;tf.uint8)

        &lt;span class=&quot;co&quot;&gt;# 分batch从文件队列中读取数据&lt;/span&gt;
        image_batch, label_batch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.train.shuffle_batch([img_bgr, labels],
                                                          batch_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.batch_size,
                                                          capacity&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;,
                                                          min_after_dequeue&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; image_batch, label_batch&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在精调中，代码和之前的AlexNet差不多，只是去掉了自定义的数据迭代器。整个VGG19网络一共训练100个epochs，每个epoch有100个迭代，同时使用交叉熵和梯度下降算法精调VGG19网络的最后三个全链层fc6，fc7，fc8。衡量网络性能的精确度（Precision）、召回率（Recall）及F1值我们没有使用，简单使用了准确率这一指标。值得注意的是，在训练获取数据之前，一定要运行&lt;code&gt;tf.train.start_queue_runners(sess=sess)&lt;/code&gt;，这样才能保证数据真实的填充入文件队列。通过使用Tensorflow的队列存取数据，整个精调代码比AlexNet要精简一些，部分代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;
&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; tf.Session() &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; sess:
    sess.run(tf.global_variables_initializer())

    &lt;span class=&quot;co&quot;&gt;# 运行队列&lt;/span&gt;
    tf.train.start_queue_runners(sess&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;sess)

    &lt;span class=&quot;co&quot;&gt;# 把模型图加入TensorBoard&lt;/span&gt;
    writer.add_graph(sess.graph)

    &lt;span class=&quot;co&quot;&gt;# 总共训练100代&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; epoch &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(num_epochs):
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;{} Epoch number: {} start&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(datetime.now(), epoch &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
        &lt;span class=&quot;co&quot;&gt;# 开始训练每一代&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; step &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(num_iter):
            img_batch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(training.image_batch)
            label_batch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(training.label_batch)
            sess.run(train_op, feed_dict&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{x: img_batch, y: label_batch})&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在测试网络性能的时候，以前采用的准确率（Accuracy）是不太准备的，首先看准确率计算公式（如下），这个指标有很大的缺陷，在正负样本不平衡的情况下，比如，负样本量很大，即使大部分正样本预测正确，所占的比例也是比较少的。所以，在统计学中常常使用精确率（Precision）、召回率（Recall）和两者的调和平均F1值来衡量一个网络的性能。&lt;/p&gt;
&lt;p&gt;准确率（Accuracy）的计算公式为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[Accuracy=\frac{TP + TN}{TP + TN + FP +FN}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;br/&gt;&lt;em&gt;True Positive(真正, TP)：将正类预测为正类数.&lt;/em&gt;&lt;br/&gt;&lt;em&gt;True Negative(真负 , TN)：将负类预测为负类数.&lt;/em&gt;&lt;br/&gt;&lt;em&gt;False Positive(假正, FP)：将负类预测为正类数 →→ 误报 (Type I error).&lt;/em&gt;&lt;br/&gt;&lt;em&gt;False Negative(假负 , FN)：将正类预测为负类数 →→ 漏报 (Type II error).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;精确率（Precision）的计算公式为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[Precision=\frac{TP}{TP + FP}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;召回率（Recall）的计算公式为：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[Recall=\frac{TP}{TP + FN}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;两者的调和平均F1：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[F1=\frac{2TP}{2TP + FP +FN}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;精确率（Precision）是针对预测结果而言的，它表示的是预测为正的样本中有多少是对的。有两种值，一种就是把正类预测为正类(TP)，另一种就是把负类预测为正类(FP)。精确率又叫查准率。&lt;br/&gt;召回率（Recall）是针对原来的样本而言，它表示的是样本中的正例有多少被预测正确了。也有两种值，一种是把原来的正类预测成正类(TP)，另一种就是把原来的正类预测为负类(FN)。召回率又称查全率。&lt;br/&gt;F1为精确率和召回率的调和平均，当两者值较高时，F1值也较高。&lt;/p&gt;
&lt;p&gt;测试网络精确度代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;{} Start testing&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(datetime.now()))

tp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tn &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fn &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(num_iter):
        img_batch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(testing.image_batch)
        label_batch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(testing.label_batch)
        softmax_prediction &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(score, feed_dict&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{x: img_batch, y: label_batch})
        prediction_label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(tf.argmax(softmax_prediction, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
        actual_label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; sess.run(tf.argmax(label_batch, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))

        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(prediction_label)):
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; prediction_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; actual_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
                tp &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; prediction_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; actual_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
                tn &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; prediction_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; actual_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
                fp &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; prediction_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; actual_label[i] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
                fn &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;

    precision &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tp &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; (tp &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; fp)
    recall &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tp &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; (tp &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; fn)
    f1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; tp) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; tp &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; fp &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; fn)  &lt;span class=&quot;co&quot;&gt;# f1为精确率precision和召回率recall的调和平均&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;{} Testing Precision = {:.4f}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(datetime.now(), precision))
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;{} Testing Recall = {:.4f}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(datetime.now(), recall))
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;{} Testing F1 = {:.4f}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(datetime.now(), f1))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过一天的训练和测试，网络精确度（Precision）为60%左右，召回率（Recall）为95%，F1值为72.6%。由于图片较少，因此性能指标不是很理想，后续我们接着改进。&lt;br/&gt;下面开始验证网络。首先在网络上任选几张图片，然后编写代码如下，&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;
class_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'not fire'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'fire'&lt;/span&gt;]


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_image(path_image, num_class):
    img_string &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.read_file(path_image)
    img_decoded &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.image.decode_png(img_string, channels&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
    img_resized &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.image.resize_images(img_decoded, [&lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;])
    img_resized &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.reshape(img_resized, shape&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])
    model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Vgg19(bgr_image&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;img_resized, num_class&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;num_class, vgg19_npy_path&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'./vgg19.npy'&lt;/span&gt;)
    score &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; model.fc8
    prediction &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.argmax(score, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
    saver &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.train.Saver()
    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; tf.Session() &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; sess:
        sess.run(tf.global_variables_initializer())
        saver.restore(sess, &lt;span class=&quot;st&quot;&gt;&quot;./tmp/checkpoints/model_epoch50.ckpt&quot;&lt;/span&gt;)
        plt.imshow(img_decoded.&lt;span class=&quot;bu&quot;&gt;eval&lt;/span&gt;())
        plt.title(&lt;span class=&quot;st&quot;&gt;&quot;Class:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; class_name[sess.run(prediction)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]])
        plt.show()


test_image(&lt;span class=&quot;st&quot;&gt;'./validate/11.jpg'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于大多数真正的火灾图片，该网络还是能够识别出来，但是一些夕阳图片或者暖色的灯光就不容易识别。以下是一些识别图片结果：&lt;br/&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-50-55.png&quot; alt=&quot;2017-11-23-09-50-55&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-51-45.png&quot; alt=&quot;2017-11-23-09-51-45&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-52-29.png&quot; alt=&quot;2017-11-23-09-52-29&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-54-41.png&quot; alt=&quot;2017-11-23-09-54-41&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-56-39.png&quot; alt=&quot;2017-11-23-09-56-39&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-58-28.png&quot; alt=&quot;2017-11-23-09-58-28&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-09-59-03.png&quot; alt=&quot;2017-11-23-09-59-03&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.xdpie.com/2017-11-23-10-02-12.png&quot; alt=&quot;2017-11-23-10-02-12&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
</description>
<pubDate>Thu, 23 Nov 2017 05:33:00 +0000</pubDate>
<dc:creator>行动派Xdpie</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vipyoumay/p/7884472.html</dc:identifier>
</item>
<item>
<title>翻译连载 | 附录 A：Transducing（上）－《JavaScript轻量级函数式编程》 |《你不知道的JS》姊妹篇 - iKcamp</title>
<link>http://www.cnblogs.com/ikcamp/p/7884261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ikcamp/p/7884261.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;关于译者：这是一个流淌着沪江血液的纯粹工程：认真，是 HTML 最坚实的梁柱；分享，是 CSS 里最闪耀的一瞥；总结，是 JavaScript 中最严谨的逻辑。经过捶打磨练，成就了本书的中文版。本书包含了函数式编程之精髓，希望可以帮助大家在学习函数式编程的道路上走的更顺畅。比心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;2.8767123287671&quot;&gt;
&lt;p&gt;译者团队（排名不分先后）：&lt;a href=&quot;https://github.com/aximario&quot;&gt;阿希&lt;/a&gt;、&lt;a href=&quot;https://github.com/blueken&quot;&gt;blueken&lt;/a&gt;、&lt;a href=&quot;https://github.com/brucecham&quot;&gt;brucecham&lt;/a&gt;、&lt;a href=&quot;https://github.com/cfanlife&quot;&gt;cfanlife&lt;/a&gt;、&lt;a href=&quot;https://github.com/dail&quot;&gt;dail&lt;/a&gt;、&lt;a href=&quot;https://github.com/kyoko-df&quot;&gt;kyoko-df&lt;/a&gt;、&lt;a href=&quot;https://github.com/l3ve&quot;&gt;l3ve&lt;/a&gt;、&lt;a href=&quot;https://github.com/lilins&quot;&gt;lilins&lt;/a&gt;、&lt;a href=&quot;https://github.com/LittlePineapple&quot;&gt;LittlePineapple&lt;/a&gt;、&lt;a href=&quot;https://github.com/MatildaJin&quot;&gt;MatildaJin&lt;/a&gt;、&lt;a href=&quot;https://github.com/miaodongqing&quot;&gt;冬青&lt;/a&gt;、&lt;a href=&quot;https://github.com/pobusama&quot;&gt;pobusama&lt;/a&gt;、&lt;a href=&quot;https://github.com/sunshine940326&quot;&gt;Cherry&lt;/a&gt;、&lt;a href=&quot;https://github.com/torrac12&quot;&gt;萝卜&lt;/a&gt;、&lt;a href=&quot;https://github.com/vavd317&quot;&gt;vavd317&lt;/a&gt;、&lt;a href=&quot;https://github.com/vivaxy&quot;&gt;vivaxy&lt;/a&gt;、&lt;a href=&quot;https://github.com/yanyixin&quot;&gt;萌萌&lt;/a&gt;、&lt;a href=&quot;https://github.com/zhouyao&quot;&gt;zhouyao&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;Transducing 是我们这本书要讲到的更为高级的技术。它继承了第 8 章数组操作的许多思想。&lt;/p&gt;
&lt;p&gt;我不会把 Transducing 严格的称为“轻量级函数式编程”，它更像是一个顶级的技巧。我把这个技术留到附录来讲意味着你现在很可能并不需要关心它，当你确保你已经非常熟悉整本书的主要内容，你可以再回头看看这一章节。&lt;/p&gt;
&lt;p&gt;说实话，即使我已经教过 transducing 很多次了，在写这一章的时候，我仍然需要花很多脑力去理清楚这个技术。所以，如果你看这一章看的很疑惑也没必要感到沮丧。把这一章加个书签，等你觉得你差不多能理解时再回头看看。&lt;/p&gt;
&lt;p&gt;Transducing 就是通过减少来转换。&lt;/p&gt;
&lt;p&gt;我知道这听起来很令人费解。但是让我们来看看它有多强大。实际上，我认为这是你掌握了轻量级函数式编程后可以做的最好的例证之一。&lt;/p&gt;
&lt;p&gt;和这本书的其他部分一样，我的方法是先解释&lt;strong&gt;为什么&lt;/strong&gt;使用这个技术，然后&lt;strong&gt;如何&lt;/strong&gt;使用，最后归结为简单的这个技术到底是什么样的。这通常会有多学很多东西，但是我觉得用这种方式你会更深入的理解它。&lt;/p&gt;
&lt;h2 id=&quot;首先为什么&quot;&gt;首先，为什么&lt;/h2&gt;
&lt;p&gt;让我们从扩展我们在第 3 章中介绍的例子开始，测试单词是否足够短和/或足够长：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isLongEnough&lt;/span&gt;(str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isShortEnough&lt;/span&gt;(str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在第 3 章中，我们使用这些断言函数来测试一个单词。然后在第 8 章中，我们学习了如何使用像 &lt;code&gt;filter(..)&lt;/code&gt; 这样的数组操作来重复这些测试。例如:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; words &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&quot;You&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;have&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;written&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;something&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;very&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;interesting&quot;&lt;/span&gt; ]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

words
.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isLongEnough )
.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isShortEnough )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// [&quot;written&quot;,&quot;something&quot;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子可能并不明显，但是这种分开操作相同数组的方式具有一些不理想的地方。当我们处理一个值比较少的数组时一切都还好。但是如果数组中有很多值，每个 &lt;code&gt;filter(..)&lt;/code&gt; 分别处理数组的每个值会比我们预期的慢一点。&lt;/p&gt;
&lt;p&gt;当我们的数组是异步/懒惰（也称为 observables）的，随着时间的推移响应事件处理（见第 10 章），会出现类似的性能问题。在这种情况下，一次事件只有一个值，因此使用两个单独的 &lt;code&gt;filter(..)&lt;/code&gt; 函数处理这些值并不是什么大不了的事情。&lt;/p&gt;
&lt;p&gt;但是，不太明显的是每个 &lt;code&gt;filter(..)&lt;/code&gt; 方法都会产生一个单独的 observable 值。从一个 observable 值中抽出一个值的开销真的可以加起来（译者注：详情请看第 10 章的“积极的 vs 惰性的”这一节）。这是真实存在的，因为在这些情况下，处理数千或数百万的值并不罕见; 所以，即使是这么小的成本也会很快累加起来。&lt;/p&gt;
&lt;p&gt;另一个缺点是可读性，特别是当我们需要对多个数组（或 observable）重复相同的操作时。例如:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;zip&lt;/span&gt;(
    &lt;span class=&quot;va&quot;&gt;list1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isLongEnough ).&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isShortEnough )&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;list2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isLongEnough ).&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isShortEnough )&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;list3&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isLongEnough ).&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isShortEnough )
)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显得很重复，对不对？&lt;/p&gt;
&lt;p&gt;如果我们可以将 &lt;code&gt;isLongEnough(..)&lt;/code&gt; 断言与 &lt;code&gt;isShortEnough(..)&lt;/code&gt; 断言组合在一起是不是会更好一点呢（可读性和性能）？你可以手动执行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isCorrectLength&lt;/span&gt;(str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isLongEnough&lt;/span&gt;( str ) &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isShortEnough&lt;/span&gt;( str )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但这不是函数式编程的方式！&lt;/p&gt;
&lt;p&gt;在第 8 章中，我们讨论了融合 —— 组合相邻映射函数。回忆一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;words
.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;(
    &lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;( removeInvalidChars&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; upper&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; elide )
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不幸的是，组合相邻断言函数并不像组合相邻映射函数那样容易。为什么呢？想想断言函数长什么“样子” —— 一种描述输入和输出的学术方式。它接收一个单一的参数，返回一个 true 或 false。&lt;/p&gt;
&lt;p&gt;如果你试着用 &lt;code&gt;isshortenough(islongenough(str))&lt;/code&gt;，这是行不通的。因为 &lt;code&gt;islongenough(..)&lt;/code&gt; 会返回 true 或者 false ，而不是返回 &lt;code&gt;isshortenough(..)&lt;/code&gt; 所要的字符串类型的值。这可真倒霉。&lt;/p&gt;
&lt;p&gt;试图组合两个相邻的 reducer 函数同样是行不通的。reducer 函数接收两个值作为输入，并返回单个组合值。reducer 函数的单一返回值也不能作为参数传到另一个需要两个输入的 reducer 函数中。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;reduce(..)&lt;/code&gt; 辅助函数可以接收一个可选的 &lt;code&gt;initialValue&lt;/code&gt; 输入。有时可以省略，但有时候它又必须被传入。这就让组合更复杂了，因为一个 &lt;code&gt;reduce(..)&lt;/code&gt; 可能需要一个 &lt;code&gt;initialValue&lt;/code&gt;，而另一个 &lt;code&gt;reduce(..)&lt;/code&gt; 可能需要另一个 &lt;code&gt;initialValue&lt;/code&gt;。所以我们怎么可能只用某种组合的 reducer 来实现 &lt;code&gt;reduce(..)&lt;/code&gt; 呢。&lt;/p&gt;
&lt;p&gt;考虑像这样的链：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;words
.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;( strUppercase )
.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isLongEnough )
.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;( isShortEnough )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( strConcat&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// &quot;WRITTENSOMETHING&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你能想出一个组合能够包含 &lt;code&gt;map(strUppercase)&lt;/code&gt;， &lt;code&gt;filter(isLongEnough)&lt;/code&gt;，&lt;code&gt;filter(isShortEnough)&lt;/code&gt;， &lt;code&gt;reduce(strConcat)&lt;/code&gt; 所有这些操作吗？每种操作的行为是不同的，所以不能直接组合在一起。我们需要把它们修改下让它们组合在一起。&lt;/p&gt;
&lt;p&gt;希望这些例子说明了为什么简单的组合不能胜任这项任务。我们需要一个更强大的技术，而 transducing 就是这个技术。&lt;/p&gt;
&lt;h2 id=&quot;如何下一步&quot;&gt;如何，下一步&lt;/h2&gt;
&lt;p&gt;让我们谈谈我们该如何得到一个能组合映射，断言和/或 reducers 的框架。&lt;/p&gt;
&lt;p&gt;别太紧张：你不必经历编程过程中所有的探索步骤。一旦你理解了 transducing 能解决的问题，你就可以直接使用函数式编程库中的 &lt;code&gt;transduce(..)&lt;/code&gt; 工具继续你应用程序的剩余部分！&lt;/p&gt;
&lt;p&gt;让我们开始探索吧。&lt;/p&gt;
&lt;h3 id=&quot;把-mapfilter-表示为-reduce&quot;&gt;把 Map/Filter 表示为 Reduce&lt;/h3&gt;
&lt;p&gt;我们要做的第一件事情就是将我们的 &lt;code&gt;filter(..)&lt;/code&gt; 和 &lt;code&gt;map(..)&lt;/code&gt;调用变为 &lt;code&gt;reduce(..)&lt;/code&gt; 调用。回想一下我们在第 8 章是怎么做的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;strUppercase&lt;/span&gt;(str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toUpperCase&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;strConcat&lt;/span&gt;(str1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str2) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; str1 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; str2&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;strUppercaseReducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;( &lt;span class=&quot;at&quot;&gt;strUppercase&lt;/span&gt;( str ) )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isLongEnoughReducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;isLongEnough&lt;/span&gt;( str )) &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;( str )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isShortEnoughReducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;isShortEnough&lt;/span&gt;( str )) &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;( str )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

words
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( strUppercaseReducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [] )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( isLongEnoughReducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [] )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( isShortEnough&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [] )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( strConcat&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// &quot;WRITTENSOMETHING&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个不错的改进。我们现在有四个相邻的 &lt;code&gt;reduce(..)&lt;/code&gt; 调用，而不是三种不同方法的混合。然而，我们仍然不能 &lt;code&gt;compose(..)&lt;/code&gt; 这四个 reducer，因为它们接受两个参数而不是一个参数。&lt;/p&gt;
&lt;p&gt;在 8 章，我们偷了点懒使用了数组的 &lt;code&gt;push&lt;/code&gt; 方法而不是 &lt;code&gt;concat(..)&lt;/code&gt; 方法返回一个新数组，导致有副作用。现在让我们更正式一点：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;strUppercaseReducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [&lt;span class=&quot;at&quot;&gt;strUppercase&lt;/span&gt;( str )] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isLongEnoughReducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;isLongEnough&lt;/span&gt;( str )) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [str] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isShortEnoughReducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;isShortEnough&lt;/span&gt;( str )) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [str] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在后面我们会来头看看这里是否需要 &lt;code&gt;concat(..)&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;参数化-reducers&quot;&gt;参数化 Reducers&lt;/h3&gt;
&lt;p&gt;除了使用不同的断言函数之外，两个 filter reducers 几乎相同。让我们把这些 reducers 参数化得到一个可以定义任何 filter-reducer 的工具函数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;(predicateFn) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;predicateFn&lt;/span&gt;( val )) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [val] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isLongEnoughReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;( isLongEnough )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isShortEnoughReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;( isShortEnough )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，我们把 &lt;code&gt;mapperFn(..)&lt;/code&gt; 也参数化来生成 map-reducer 函数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapReducer&lt;/span&gt;(mapperFn) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [&lt;span class=&quot;at&quot;&gt;mapperFn&lt;/span&gt;( val )] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; strToUppercaseReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapReducer&lt;/span&gt;( strUppercase )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的调用链看起来是一样的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;words
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( strUppercaseReducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [] )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( isLongEnoughReducer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [] )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( isShortEnough&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [] )
.&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;( strConcat&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;提取共用组合逻辑&quot;&gt;提取共用组合逻辑&lt;/h3&gt;
&lt;p&gt;仔细观察上面的 &lt;code&gt;mapReducer(..)&lt;/code&gt; 和 &lt;code&gt;filterReducer(..)&lt;/code&gt; 函数。你发现共享功能了吗？&lt;/p&gt;
&lt;p&gt;这部分：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( .. )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 或者&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们为这个通用逻辑定义一个辅助函数。但是我们叫它什么呢？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;WHATSITCALLED&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [val] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;WHATSITCALLED(..)&lt;/code&gt; 函数做了些什么呢，它接收两个参数（一个数组和另一个值），将值 concat 到数组的末尾返回一个新的数组。所以这个 &lt;code&gt;WHATSITCALLED(..)&lt;/code&gt; 名字不合适，我们可以叫它 &lt;code&gt;listCombination(..)&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;listCombination&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;( [val] )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们现在用 &lt;code&gt;listCombination(..)&lt;/code&gt; 来重新定义我们的 reducer 辅助函数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapReducer&lt;/span&gt;(mapperFn) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;listCombination&lt;/span&gt;( list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapperFn&lt;/span&gt;( val ) )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;(predicateFn) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;predicateFn&lt;/span&gt;( val )) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;listCombination&lt;/span&gt;( list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; val )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的调用链看起来还是一样的（这里就不重复写了）。&lt;/p&gt;
&lt;h3 id=&quot;参数化组合&quot;&gt;参数化组合&lt;/h3&gt;
&lt;p&gt;我们的 &lt;code&gt;listCombination(..)&lt;/code&gt; 小工具只是组合两个值的一种方式。让我们将它的用途参数化，以使我们的 reducers 更加通用：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapReducer&lt;/span&gt;(mapperFn&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;combinationFn) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;combinationFn&lt;/span&gt;( list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapperFn&lt;/span&gt;( val ) )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;(predicateFn&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;combinationFn) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;predicateFn&lt;/span&gt;( val )) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;combinationFn&lt;/span&gt;( list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; val )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用这种形式的辅助函数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; strToUppercaseReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapReducer&lt;/span&gt;( strUppercase&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; listCombination )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isLongEnoughReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;( isLongEnough&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; listCombination )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isShortEnoughReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;( isShortEnough&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; listCombination )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将这些实用函数定义为接收两个参数而不是一个参数不太方便组合，因此我们使用我们的 &lt;code&gt;curry(..)&lt;/code&gt; （柯里化）方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; curriedMapReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;curry&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapReducer&lt;/span&gt;(mapperFn&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;combinationFn)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;combinationFn&lt;/span&gt;( list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mapperFn&lt;/span&gt;( val ) )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; curriedFilterReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;curry&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;filterReducer&lt;/span&gt;(predicateFn&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;combinationFn)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;val)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;predicateFn&lt;/span&gt;( val )) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;combinationFn&lt;/span&gt;( list&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; val )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; strToUppercaseReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;curriedMapReducer&lt;/span&gt;( strUppercase )( listCombination )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isLongEnoughReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;curriedFilterReducer&lt;/span&gt;( isLongEnough )( listCombination )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isShortEnoughReducer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;curriedFilterReducer&lt;/span&gt;( isShortEnough )( listCombination )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这看起来有点冗长而且可能不是很有用。&lt;/p&gt;
&lt;p&gt;但这实际上是我们进行下一步推导的必要条件。请记住，我们的最终目标是能够 &lt;code&gt;compose(..)&lt;/code&gt; 这些 reducers。我们快要完成了。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　附录 A：Transducing（下）－－－－ 四天后更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 【上一章】&lt;a href=&quot;https://juejin.im/post/5a0cf1f8f265da432717c657&quot;&gt;翻译连载 | 第 11 章：融会贯通 －《JavaScript轻量级函数式编程》 |《你不知道的JS》姊妹篇&lt;/a&gt; **&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/8/31/076d086e1d56bd0fb1f51c2abd0b8c08&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;iKcamp原创新书《移动Web前端高效开发实战》已在亚马逊、京东、当当开售。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7.4267100977199&quot;&gt;
&lt;p&gt;iKcamp官网：&lt;a href=&quot;https://www.ikcamp.com&quot; class=&quot;uri&quot;&gt;https://www.ikcamp.com&lt;/a&gt;&lt;br/&gt;访问官网更快阅读全部免费分享课程：&lt;br/&gt;《iKcamp出品｜全网最新｜微信小程序｜基于最新版1.0开发者工具之初中级培训教程分享》&lt;br/&gt;《iKcamp出品｜基于Koa2搭建Node.js实战项目教程》&lt;br/&gt;包含：文章、视频、源代码&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 23 Nov 2017 04:29:00 +0000</pubDate>
<dc:creator>iKcamp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ikcamp/p/7884261.html</dc:identifier>
</item>
<item>
<title>canvas图表(3) - 饼图 - Jeff.Zhong</title>
<link>http://www.cnblogs.com/edwardloveyou/p/7884050.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edwardloveyou/p/7884050.html</guid>
<description>&lt;p&gt;原文地址：&lt;a href=&quot;http://jeffzhong.space/2017/11/23/chartpie/&quot;&gt;canvas图表(3) - 饼图&lt;/a&gt;&lt;br/&gt;这几天把canvas图表都优化了下，动画效果更加出色了，可以说很逼近echart了。刚刚写完的饼图，非常好的实现了既定的功能，交互的动画效果也是很棒的。&lt;/p&gt;
&lt;p&gt;效果请看：&lt;em&gt;&lt;a href=&quot;http://jeffzhong.space/sites/demo/dist/chartpie.html&quot;&gt;饼图https://edwardzhong.github.io/sites/demo/dist/chartpie.html&lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;img src=&quot;http://oncse3u6r.bkt.clouddn.com/chartpie.jpg&quot; alt=&quot;it&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;功能点包括：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;组织数据&lt;/li&gt;
&lt;li&gt;绘制&lt;br/&gt;&lt;strong&gt;3. 数据动画的实现；&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;4. 鼠标事件的处理。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;使用方式&quot;&gt;使用方式&lt;/h2&gt;
&lt;p&gt;饼图的数据方面要简单很多，因为不用多个分组的数据。把所有的数据相加得出总数，然后每个数据分别求出百分比，有了百分比再相乘360度的弧度得出每个数据在圆盘中对应的要显示的角度。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; con&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'container'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; pie&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Pie&lt;/span&gt;(con)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;pie&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1600&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'网站用户访问来源'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;toolTip&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'访问来源'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;435&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'直接访问'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;310&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'邮件营销'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'联盟广告'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'视频广告'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1548&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'搜索引擎'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;代码结构&quot;&gt;代码结构&lt;/h2&gt;
&lt;p&gt;因为为了同时实现新增动画和更新动画，这次的代码结构经过了重构和优化，跟之前的有比较大的区别。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Line &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Chart&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(container)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(container)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 初始化&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(opt)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 绑定事件&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;bindEvent&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 显示信息&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;showInfo&lt;/span&gt;(pos&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;arr)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 清除内容再绘制&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;clearGrid&lt;/span&gt;(index)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 执行数据动画&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 执行&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 组织数据&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;initData&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 绘制&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;组织数据&quot;&gt;组织数据&lt;/h2&gt;
&lt;p&gt;这次把组织数据的功能单独拎了出来，这样方便重用和修改。然后还要给动画对象增加是否创建的属性create和上次最后更新的度数last，为什么呢？因为我们要同时实现创建和更新图形的动画效果。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;initData&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; that&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            total&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;||!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;}&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 赋予没有颜色的项&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; hsl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;180+20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(i&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla('&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;hsl&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;',70%,60%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'unnamed'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:!!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;paddingTop&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;+40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;)&lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            total&lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i])&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//创建&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:!!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;/total&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;)/&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;ang&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;/total&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//更新                &lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;/total&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;)/&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;ang&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;/total&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;绘制&quot;&gt;绘制&lt;/h2&gt;
&lt;p&gt;饼图的绘制功能很简单，因为不用坐标系，只需要绘制标题和标签列表。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla(0,0%,30%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla(0,0%,20%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textBaseLine&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'middle'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'24px arial'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'center'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'bold 40px arial'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;70&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;legend&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 画分类标签&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;roundRect&lt;/span&gt;(ctx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;globalAlpha&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.3&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fill&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;+20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;-5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;执行绘制饼图动画&quot;&gt;执行绘制饼图动画&lt;/h2&gt;
&lt;p&gt;动画区分了创建和更新，这样用户很容易就能看出数据的比例关系变化，也就更加的直观。创建就是从0弧度到指定的弧度，只有数值的增加；而更新动画就要区分增加和减少的情况，因为当用户点击某个标签的时候，会隐藏显示某个分类的数据，于是需要重新计算每个分类的比例，那么相应的分类百分比就会增加或减少。我们根据当前最新要达到的比例ang和已经执行完的当前比例last的进行对比，相应执行增加和减少比例，动画原理就是这样。&lt;/p&gt;
&lt;p&gt;canvas绘制圆形context.arc(x,y,r,sAngle,eAngle,counterclockwise);只要我们指定开始角度和结束角度就会画出披萨饼一样的效果，所有的披萨饼加起来就是一个圆。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    animate(){
        var that=this,
            ctx=that.ctx,
            canvas=that.canvas,
            item,startAng,ang,
            isStop=true;

        (function run(){
            isStop=true;
            ctx.save();
            ctx.translate(that.W/2,that.H/2);
            ctx.fillStyle='#fff';
            ctx.beginPath();
            ctx.arc(0,0,that.H/3+30,0,Math.PI*2,false);
            ctx.fill();
            for(var i=0,l=that.animateArr.length;i&amp;lt;l;i++){
                item=that.animateArr[i];
                if(item.hide)continue;
                startAng=-Math.PI/2;
                that.animateArr.forEach((obj,j)=&amp;gt;{
                    if(j&amp;lt;i&amp;amp;&amp;amp;!obj.hide){startAng+=obj.cur;}
                });

                ctx.fillStyle=item.color;
                if(item.create){//创建动画
                    if(item.cur&amp;gt;=item.ang){
                        item.cur=item.last=item.ang;
                    } else {
                        item.cur+=0.05;
                        isStop=false;
                    }
                } else {//更新动画
                    if(item.last&amp;gt;item.ang){
                        ang=item.cur-0.05;
                        if(ang&amp;lt;item.ang){
                            item.cur=item.last=item.ang;
                        }
                    } else {
                        ang=item.cur+0.05;
                        if(ang&amp;gt;item.ang){
                            item.cur=item.last=item.ang;
                        }
                    }
                    if(item.cur!=item.ang){
                        item.cur=ang;
                        isStop=false;
                    }
                }

                ctx.beginPath();
                ctx.moveTo(0,0);
                ctx.arc(0,0,that.H/3,startAng,startAng+item.cur,false);
                ctx.closePath();
                ctx.fill();
            }
            ctx.restore();
            if(isStop) {
                that.clearGrid();
                return;
            }
            requestAnimationFrame(run);
        }());
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;交互处理&quot;&gt;交互处理&lt;/h2&gt;
&lt;p&gt;执行完动画后，我这里再执行了一遍清除绘制，这个也是鼠标触摸标签和饼图时的对应动画方法，会绘制每个分类的名称描述，更方便用户查看。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    clearGrid(index){
        var that=this,
            ctx=that.ctx,
            canvas=that.canvas,
            item,startAng=-Math.PI/2,
            len=that.animateArr.filter(item=&amp;gt;!item.hide).length,
            j=0,angle=0,
            r=that.H/3;
        ctx.clearRect(0,0,that.W,that.H);
        that.draw();
        ctx.save();
        ctx.translate(that.W/2,that.H/2);

        for(var i=0,l=that.animateArr.length;i&amp;lt;l;i++){
            item=that.animateArr[i];
            if(item.hide)continue;
            ctx.strokeStyle=item.color;
            ctx.fillStyle=item.color;
            angle=j&amp;gt;=len-1?Math.PI*2-Math.PI/2:startAng+item.ang;
            ctx.beginPath();
            ctx.moveTo(0,0);
            if(index===i){
                ctx.save();
                // ctx.shadowColor='hsla(0,0%,50%,1)';
                ctx.shadowColor=item.color;
                ctx.shadowBlur=5;
                ctx.arc(0,0,r+20,startAng,angle,false);
                ctx.closePath();
                ctx.fill();
                ctx.stroke();
                ctx.restore();
            } else {
                ctx.arc(0,0,r,startAng,angle,false);
                ctx.closePath();
                ctx.fill();
            }
            //画分类描述
            var tr=r+40,tw=0,
                tAng=startAng+item.ang/2,
                x=tr*Math.cos(tAng),
                y=tr*Math.sin(tAng);

            ctx.lineWidth=2;
            ctx.lineCap='round';
            ctx.beginPath();
            ctx.moveTo(0,0);
            ctx.lineTo(x,y);
            if(tAng&amp;gt;=-Math.PI/2&amp;amp;&amp;amp;tAng&amp;lt;=Math.PI/2){
                ctx.lineTo(x+30,y);
                ctx.fillText(item.name,x+40,y+10);
            } else {
                tw=ctx.measureText(item.name).width;//计算字符长度
                ctx.lineTo(x-30,y);
                ctx.fillText(item.name,x-40-tw,y+10);
            }
            
            ctx.stroke();
            startAng+=item.ang;
            j++;
        }
        ctx.restore();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;事件处理&quot;&gt;事件处理&lt;/h2&gt;
&lt;p&gt;mousemove的时候，触摸标签和触摸饼图都是基本相同的效果，选中的分类扩大半径，同时增加阴影，以达到凸出来的动画效果，具体实现请看上面的clearGrid方法。判断是否点中都是使用isPointInPath这个api，之前已经介绍过，不再细讲。&lt;/p&gt;
&lt;p&gt;mousedown某个击标签就会显示隐藏对应分类，每次触发就会看到饼图的比例变化的动画效果，这个和之前的柱状图和折线图的功能一致。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;bindEvent&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; that&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            canvas&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mousemove'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isLegend&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getBoundingClientRect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientY&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 标签&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;legend&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;roundRect&lt;/span&gt;(ctx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 因为缩小了一倍，所以坐标要*2&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPointInPath&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'pointer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearGrid&lt;/span&gt;(i)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                    isLegend&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(isLegend) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 图表&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; startAng&lt;span class=&quot;op&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PI&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;l&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;l&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;)&lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;moveTo&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;arc&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;startAng&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;startAng&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ang&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;closePath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                startAng&lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ang&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPointInPath&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'pointer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearGrid&lt;/span&gt;(i)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;showInfo&lt;/span&gt;(pos&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toolTip&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;[&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;' ('&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'%)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearGrid&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mousedown'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getBoundingClientRect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientY&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;legend&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;roundRect&lt;/span&gt;(ctx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 因为缩小了一倍，所以坐标要*2&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPointInPath&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;所有图表代码请看&lt;em&gt;&lt;a href=&quot;https://github.com/edwardzhong/html5Canvas/blob/master/chart/chart.js&quot;&gt;chart.js&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 23 Nov 2017 03:41:00 +0000</pubDate>
<dc:creator>Jeff.Zhong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edwardloveyou/p/7884050.html</dc:identifier>
</item>
</channel>
</rss>