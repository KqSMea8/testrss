<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>PyTorch官方中文文档：torch.Tensor - aibbtcom</title>
<link>http://www.cnblogs.com/aibbt/p/8540356.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aibbt/p/8540356.html</guid>
<description>&lt;p&gt;&lt;code&gt;torch.Tensor&lt;/code&gt;是一种包含单一数据类型元素的多维矩阵。&lt;/p&gt;
&lt;p&gt;Torch定义了七种CPU tensor类型和八种GPU tensor类型：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Data tyoe&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;CPU tensor&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;GPU tensor&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;32-bit floating point&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.FloatTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.FloatTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;64-bit floating point&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.DoubleTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.DoubleTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;16-bit floating point&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;N/A&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.HalfTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;8-bit integer (unsigned)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.ByteTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.ByteTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;8-bit integer (signed)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.CharTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.CharTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;16-bit integer (signed)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.ShortTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.ShortTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;32-bit integer (signed)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.IntTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.IntTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;64-bit integer (signed)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.LongTensor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;torch.cuda.LongTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;torch.Tensor&lt;/code&gt;是默认的tensor类型（&lt;code&gt;torch.FlaotTensor&lt;/code&gt;）的简称。&lt;/p&gt;
&lt;p&gt;一个张量tensor可以从Python的&lt;code&gt;list&lt;/code&gt;或序列构建：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; torch.FloatTensor([[1, 2, 3], [4, 5, 6]])
1 2 3
4 5 6
[torch.FloatTensor of size 2x3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一个空张量tensor可以通过规定其大小来构建：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; torch.IntTensor(2, 4).zero_()
0 0 0 0
0 0 0 0
[torch.IntTensor of size 2x4]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以用python的索引和切片来获取和修改一个张量tensor中的内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.FloatTensor([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(x[1][2])
6.0
&amp;gt;&amp;gt;&amp;gt; x[0][1] = 8
&amp;gt;&amp;gt;&amp;gt; print(x)
 1 8 3
 4 5 6
[torch.FloatTensor of size 2x3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;每一个张量tensor都有一个相应的&lt;code&gt;torch.Storage&lt;/code&gt;用来保存其数据。类tensor提供了一个存储的多维的、横向视图，并且定义了在数值运算。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;！注意：&lt;/strong&gt;&lt;br/&gt;会改变tensor的函数操作会用一个下划线后缀来标示。比如，&lt;code&gt;torch.FloatTensor.abs_()&lt;/code&gt;会在原地计算绝对值，并返回改变后的tensor，而&lt;code&gt;tensor.FloatTensor.abs()&lt;/code&gt;将会在一个新的tensor中计算结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;class torch.Tensor
class torch.Tensor(*sizes)
class torch.Tensor(size)
class torch.Tensor(sequence)
class torch.Tensor(ndarray)
class torch.Tensor(tensor)
class torch.Tensor(storage)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据可选择的大小和数据新建一个tensor。&lt;br/&gt;如果没有提供参数，将会返回一个空的零维张量。如果提供了&lt;code&gt;numpy.ndarray&lt;/code&gt;,&lt;code&gt;torch.Tensor&lt;/code&gt;或&lt;code&gt;torch.Storage&lt;/code&gt;，将会返回一个有同样参数的tensor.如果提供了python序列，将会从序列的副本创建一个tensor。&lt;/p&gt;
&lt;h4 id=&quot;abs-tensor&quot;&gt;abs() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.abs()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;abs_-tensor&quot;&gt;abs_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;abs()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;acos-tensor&quot;&gt;acos() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.acos()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;acos_-tensor&quot;&gt;acos_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;acos()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addvalue&quot;&gt;add(&lt;em&gt;value&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.add()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;add_value&quot;&gt;add_(&lt;em&gt;value&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addbmmbeta1-mat-alpha1-batch1-batch2-tensor&quot;&gt;addbmm(&lt;em&gt;beta=1, mat, alpha=1, batch1, batch2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.addbmm()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;addbmm_beta1-mat-alpha1-batch1-batch2-tensor&quot;&gt;addbmm_(&lt;em&gt;beta=1, mat, alpha=1, batch1, batch2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;addbmm()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addcdivvalue1-tensor1-tensor2-tensor&quot;&gt;addcdiv(&lt;em&gt;value=1, tensor1, tensor2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.addcdiv()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;addcdiv_value1-tensor1-tensor2-tensor&quot;&gt;addcdiv_(&lt;em&gt;value=1, tensor1, tensor2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;addcdiv()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addcmulvalue1-tensor1-tensor2-tensor&quot;&gt;addcmul(&lt;em&gt;value=1, tensor1, tensor2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.addcmul()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;addcmul_value1-tensor1-tensor2-tensor&quot;&gt;addcmul_(&lt;em&gt;value=1, tensor1, tensor2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;addcmul()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addmmbeta1-mat-alpha1-mat1-mat2-tensor&quot;&gt;addmm(&lt;em&gt;beta=1, mat, alpha=1, mat1, mat2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.addmm()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;addmm_beta1-mat-alpha1-mat1-mat2-tensor&quot;&gt;addmm_(&lt;em&gt;beta=1, mat, alpha=1, mat1, mat2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;addmm()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addmvbeta1-tensor-alpha1-mat-vec-tensor&quot;&gt;addmv(&lt;em&gt;beta=1, tensor, alpha=1, mat, vec&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.addmv()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;addmv_beta1-tensor-alpha1-mat-vec-tensor&quot;&gt;addmv_(&lt;em&gt;beta=1, tensor, alpha=1, mat, vec&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;addmv()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;addrbeta1-alpha1-vec1-vec2-tensor&quot;&gt;addr(&lt;em&gt;beta=1, alpha=1, vec1, vec2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.addr()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;addr_beta1-alpha1-vec1-vec2-tensor&quot;&gt;addr_(&lt;em&gt;beta=1, alpha=1, vec1, vec2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;addr()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;apply_callable-tensor&quot;&gt;apply_(&lt;em&gt;callable&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将函数&lt;code&gt;callable&lt;/code&gt;作用于tensor中每一个元素，并将每个元素用&lt;code&gt;callable&lt;/code&gt;函数返回值替代。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;！注意：&lt;/strong&gt;&lt;br/&gt;该函数只能在CPU tensor中使用，并且不应该用在有较高性能要求的代码块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;asin-tensor&quot;&gt;asin() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.asin()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;asin_-tensor&quot;&gt;asin_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;asin()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;atan-tensor&quot;&gt;atan() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.atan()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;atan2-tensor&quot;&gt;atan2() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.atan2()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;atan2_-tensor&quot;&gt;atan2_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;atan2()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;atan_-tensor&quot;&gt;atan_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;atan()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;baddbmmbeta1-alpha1-batch1-batch2-tensor&quot;&gt;baddbmm(&lt;em&gt;beta=1, alpha=1, batch1, batch2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.baddbmm()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;baddbmm_beta1-alpha1-batch1-batch2-tensor&quot;&gt;baddbmm_(&lt;em&gt;beta=1, alpha=1, batch1, batch2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;baddbmm()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;bernoulli-tensor&quot;&gt;bernoulli() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.bernoulli()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;bernoulli_-tensor&quot;&gt;bernoulli_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;bernoulli()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;bmmbatch2-tensor&quot;&gt;bmm(&lt;em&gt;batch2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.bmm()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;byte-tensor&quot;&gt;byte() → Tensor&lt;/h4&gt;
&lt;p&gt;将tensor改为byte类型&lt;/p&gt;
&lt;h4 id=&quot;bmmmedian0-sigma1-generatornone-tensor&quot;&gt;bmm(&lt;em&gt;median=0, sigma=1, *, generator=None&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将tensor中元素用柯西分布得到的数值填充：&lt;br/&gt;$$&lt;br/&gt;P(x)={\frac1 \pi} {\frac \sigma {(x-median)^2 + \sigma^2}}&lt;br/&gt;$$&lt;/p&gt;
&lt;h4 id=&quot;ceil-tensor&quot;&gt;ceil() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.ceil()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;ceil_-tensor&quot;&gt;ceil_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ceil()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;char&quot;&gt;char()&lt;/h4&gt;
&lt;p&gt;将tensor元素改为char类型&lt;/p&gt;
&lt;h4 id=&quot;chunkn_chunks-dim0-tensor&quot;&gt;chunk(&lt;em&gt;n_chunks, dim=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将tensor分割为tensor元组.&lt;br/&gt;请查看&lt;code&gt;torch.chunk()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;clampmin-max-tensor&quot;&gt;clamp(&lt;em&gt;min, max&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.clamp()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;clamp_min-max-tensor&quot;&gt;clamp_(&lt;em&gt;min, max&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;clamp()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;clone-tensor&quot;&gt;clone() → Tensor&lt;/h4&gt;
&lt;p&gt;返回与原tensor有相同大小和数据类型的tensor&lt;/p&gt;
&lt;h4 id=&quot;contiguous-tensor&quot;&gt;contiguous() → Tensor&lt;/h4&gt;
&lt;p&gt;返回一个内存连续的有相同数据的tensor，如果原tensor内存连续则返回原tensor&lt;/p&gt;
&lt;h4 id=&quot;copy_src-asyncfalse-tensor&quot;&gt;copy_(&lt;em&gt;src, async=False&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将&lt;code&gt;src&lt;/code&gt;中的元素复制到tensor中并返回这个tensor。&lt;br/&gt;两个tensor应该有相同数目的元素，可以是不同的数据类型或存储在不同的设备上。&lt;br/&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;src&lt;/strong&gt; (&lt;em&gt;Tensor&lt;/em&gt;)-复制的源tensor&lt;br/&gt;- &lt;strong&gt;async&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;)-如果为True并且复制是在CPU和GPU之间进行的，则复制后的拷贝可能会与源信息异步，对于其他类型的复制操作则该参数不会发生作用。&lt;/p&gt;
&lt;h4 id=&quot;cos-tensor&quot;&gt;cos() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.cos()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;cos_-tensor&quot;&gt;cos_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;cos()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;cosh-tensor&quot;&gt;cosh() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.cosh()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;cosh_-tensor&quot;&gt;cosh_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;cosh()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;cpu-tensor&quot;&gt;cpu() → Tensor&lt;/h4&gt;
&lt;p&gt;如果在CPU上没有该tensor，则会返回一个CPU的副本&lt;/p&gt;
&lt;h4 id=&quot;crossother-dim-1-tensor&quot;&gt;cross(&lt;em&gt;other, dim=-1&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.cross()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;cudadevicenone-asyncfalse&quot;&gt;cuda(device=None, async=False)&lt;/h4&gt;
&lt;p&gt;返回此对象在CPU内存中的一个副本&lt;br/&gt;如果对象已近存在与CUDA存储中并且在正确的设备上，则不会进行复制并返回原始对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;device&lt;/strong&gt;(&lt;em&gt;int&lt;/em&gt;)-目的GPU的id，默认为当前的设备。&lt;br/&gt;- &lt;strong&gt;async&lt;/strong&gt;(&lt;em&gt;bool&lt;/em&gt;)-如果为True并且资源在固定内存中，则复制的副本将会与原始数据异步。否则，该参数没有意义。&lt;/p&gt;
&lt;h4 id=&quot;cumproddim-tensor&quot;&gt;cumprod(&lt;em&gt;dim&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.cumprod()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;cumsumdim-tensor&quot;&gt;cumsum(&lt;em&gt;dim&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.cumsum()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;data_ptr-int&quot;&gt;data_ptr() → int&lt;/h4&gt;
&lt;p&gt;返回tensor第一个元素的地址&lt;/p&gt;
&lt;h4 id=&quot;diagdiagonal0-tensor&quot;&gt;diag(&lt;em&gt;diagonal=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.diag()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;dim-int&quot;&gt;dim() → int&lt;/h4&gt;
&lt;p&gt;返回tensor的维数&lt;/p&gt;
&lt;h4 id=&quot;distother-p2-tensor&quot;&gt;dist(&lt;em&gt;other, p=2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.dist()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;divvalue&quot;&gt;div(&lt;em&gt;value&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.div()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;div_value&quot;&gt;div_(&lt;em&gt;value&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;div()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;dottensor2-float&quot;&gt;dot(&lt;em&gt;tensor2&lt;/em&gt;) → float&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.dot()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;double&quot;&gt;double()&lt;/h4&gt;
&lt;p&gt;将该tensor投射为double类型&lt;/p&gt;
&lt;h4 id=&quot;eigeigenvectorsfalse-tensor-tensor&quot;&gt;eig(&lt;em&gt;eigenvectors=False&lt;/em&gt;) -&amp;gt; (&lt;em&gt;Tensor, Tensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.eig()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;element_size-int&quot;&gt;element_size() → int&lt;/h4&gt;
&lt;p&gt;返回单个元素的字节大小。&lt;br/&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; torch.FloatTensor().element_size()
4
&amp;gt;&amp;gt;&amp;gt; torch.ByteTensor().element_size()
1
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;eqother-tensor&quot;&gt;eq(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.eq()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;eq_other-tensor&quot;&gt;eq_(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;eq()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;equalother-bool&quot;&gt;equal(&lt;em&gt;other&lt;/em&gt;) → bool&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.equal()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;exp-tensor&quot;&gt;exp() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.exp()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;exp_-tensor&quot;&gt;exp_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;exp()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;expandsizes&quot;&gt;expand(*sizes)&lt;/h4&gt;
&lt;p&gt;返回tensor的一个新视图，单个维度扩大为更大的尺寸。&lt;br/&gt;tensor也可以扩大为更高维，新增加的维度将附在前面。&lt;br/&gt;扩大tensor不需要分配新内存，只是仅仅新建一个tensor的视图，其中通过将&lt;code&gt;stride&lt;/code&gt;设为0，一维将会扩展位更高维。任何一个一维的在不分配新内存情况下可扩展为任意的数值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;sizes&lt;/strong&gt;(&lt;em&gt;torch.Size or int...&lt;/em&gt;)-需要扩展的大小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([[1], [2], [3]])
&amp;gt;&amp;gt;&amp;gt; x.size()
torch.Size([3, 1])
&amp;gt;&amp;gt;&amp;gt; x.expand(3, 4)
 1 1
 1 1
 2 2 2 2
 3 3 3 3
 [torch.FloatTensor of size 3x4]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;expand_astensor&quot;&gt;expand_as(&lt;em&gt;tensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将tensor扩展为参数tensor的大小。&lt;br/&gt;该操作等效与：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;self.expand(tensor.size())
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;exponential_lambd1-generatornone-to-tensor&quot;&gt;exponential_(&lt;em&gt;lambd=1, *, generator=None&lt;/em&gt;) $to$ Tensor&lt;/h4&gt;
&lt;p&gt;将该tensor用指数分布得到的元素填充：&lt;br/&gt;$$&lt;br/&gt;P(x)= \lambda e^{- \lambda x}&lt;br/&gt;$$&lt;/p&gt;
&lt;h4 id=&quot;fill_value-tensor&quot;&gt;fill_(&lt;em&gt;value&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将该tensor用指定的数值填充&lt;/p&gt;
&lt;h4 id=&quot;float&quot;&gt;float()&lt;/h4&gt;
&lt;p&gt;将tensor投射为float类型&lt;/p&gt;
&lt;h4 id=&quot;floor-tensor&quot;&gt;floor() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.floor()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;floor_-tensor&quot;&gt;floor_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;floor()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;fmoddivisor-tensor&quot;&gt;fmod(&lt;em&gt;divisor&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.fmod()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;fmod_divisor-tensor&quot;&gt;fmod_(&lt;em&gt;divisor&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;fmod()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;frac-tensor&quot;&gt;frac() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.frac()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;frac_-tensor&quot;&gt;frac_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;frac()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;gatherdim-index-tensor&quot;&gt;gather(&lt;em&gt;dim, index&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.gather()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;geother-tensor&quot;&gt;ge(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.ge()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;ge_other-tensor&quot;&gt;ge_(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ge()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;gelsa-tensor&quot;&gt;gels(&lt;em&gt;A&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.gels()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;geometric_p-generatornone-tensor&quot;&gt;geometric_(&lt;em&gt;p, *, generator=None&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将该tensor用几何分布得到的元素填充：&lt;br/&gt;$$&lt;br/&gt;P(X=k)= (1-p)^{k-1}p&lt;br/&gt;$$&lt;/p&gt;
&lt;h4 id=&quot;geqrf-tensor-tensor&quot;&gt;geqrf() -&amp;gt; (&lt;em&gt;Tensor, Tensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.geqrf()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;gervec2-tensor&quot;&gt;ger(&lt;em&gt;vec2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.ger()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;gesva-tensor-tensor&quot;&gt;gesv(&lt;em&gt;A&lt;/em&gt;) → Tensor, Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.gesv()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;gtother-tensor&quot;&gt;gt(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.gt()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;gt_other-tensor&quot;&gt;gt_(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;gt()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;half&quot;&gt;half()&lt;/h4&gt;
&lt;p&gt;将tensor投射为半精度浮点类型&lt;/p&gt;
&lt;h4 id=&quot;histcbins100-min0-max0-tensor&quot;&gt;histc(&lt;em&gt;bins=100, min=0, max=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.histc()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;indexm-tensor&quot;&gt;index(&lt;em&gt;m&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;用一个二进制的掩码或沿着一个给定的维度从tensor中选取元素。&lt;code&gt;tensor.index(m)&lt;/code&gt;与&lt;code&gt;tensor[m]&lt;/code&gt;完全相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;m&lt;/strong&gt;(&lt;em&gt;int or Byte Tensor or slice&lt;/em&gt;)-用来选取元素的维度或掩码&lt;/p&gt;
&lt;h4 id=&quot;index_add_dim-index-tensor-tensor&quot;&gt;index_add_(&lt;em&gt;dim, index, tensor&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;按参数index中的索引数确定的顺序，将参数tensor中的元素加到原来的tensor中。参数tensor的尺寸必须严格地与原tensor匹配，否则会发生错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;dim&lt;/strong&gt;(&lt;em&gt;int&lt;/em&gt;)-索引index所指向的维度&lt;br/&gt;- &lt;strong&gt;index&lt;/strong&gt;(&lt;em&gt;LongTensor&lt;/em&gt;)-需要从tensor中选取的指数&lt;br/&gt;- &lt;strong&gt;tensor&lt;/strong&gt;(&lt;em&gt;Tensor&lt;/em&gt;)-含有相加元素的tensor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
&amp;gt;&amp;gt;&amp;gt; t = torch.Tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
&amp;gt;&amp;gt;&amp;gt; index = torch.LongTensor([0, 2, 1])
&amp;gt;&amp;gt;&amp;gt; x.index_add_(0, index, t)
&amp;gt;&amp;gt;&amp;gt; x
  2 3 4
  8 9 10
  5 6 7
[torch.FloatTensor of size 3x3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;index_copy_dim-index-tensor-tensor&quot;&gt;index_copy_(&lt;em&gt;dim, index, tensor&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;按参数index中的索引数确定的顺序，将参数tensor中的元素复制到原来的tensor中。参数tensor的尺寸必须严格地与原tensor匹配，否则会发生错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;dim&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-索引index所指向的维度&lt;br/&gt;- &lt;strong&gt;index&lt;/strong&gt; (&lt;em&gt;LongTensor&lt;/em&gt;)-需要从tensor中选取的指数&lt;br/&gt;- &lt;strong&gt;tensor&lt;/strong&gt; (&lt;em&gt;Tensor&lt;/em&gt;)-含有被复制元素的tensor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor(3， 3)
&amp;gt;&amp;gt;&amp;gt; t = torch.Tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
&amp;gt;&amp;gt;&amp;gt; index = torch.LongTensor([0, 2, 1])
&amp;gt;&amp;gt;&amp;gt; x.index_copy_(0, index, t)
&amp;gt;&amp;gt;&amp;gt; x
  1 2 3
  7 8 9
  4 5 6
[torch.FloatTensor of size 3x3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;index_fill_dim-index-val-tensor&quot;&gt;index_fill_(&lt;em&gt;dim, index, val&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;按参数index中的索引数确定的顺序，将原tensor用参数&lt;code&gt;val&lt;/code&gt;值填充。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;dim&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-索引index所指向的维度&lt;br/&gt;- &lt;strong&gt;index&lt;/strong&gt; (&lt;em&gt;LongTensor&lt;/em&gt;)-索引&lt;br/&gt;- &lt;strong&gt;val&lt;/strong&gt; (&lt;em&gt;Tensor&lt;/em&gt;)-填充的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
&amp;gt;&amp;gt;&amp;gt; index = torch.LongTensor([0, 2])
&amp;gt;&amp;gt;&amp;gt; x.index_fill_(0, index, -1)
&amp;gt;&amp;gt;&amp;gt; x
  -1 2 -1
  -1 5 -1
  -1 8 -1
[torch.FloatTensor of size 3x3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;index_selectdim-index-tensor&quot;&gt;index_select(&lt;em&gt;dim, index&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.index_select()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;int&quot;&gt;int()&lt;/h4&gt;
&lt;p&gt;将该tensor投射为int类型&lt;/p&gt;
&lt;h4 id=&quot;inverse-tensor&quot;&gt;inverse() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.inverse()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;is_contiguous-bool&quot;&gt;is_contiguous() → bool&lt;/h4&gt;
&lt;p&gt;如果该tensor在内存中是连续的则返回True。&lt;/p&gt;
&lt;h4 id=&quot;is_cuda&quot;&gt;is_cuda&lt;/h4&gt;
&lt;h4 id=&quot;is_pinned&quot;&gt;is_pinned()&lt;/h4&gt;
&lt;p&gt;如果该tensor在固定内内存中则返回True&lt;/p&gt;
&lt;h4 id=&quot;is_set_totensor-bool&quot;&gt;is_set_to(&lt;em&gt;tensor&lt;/em&gt;) → bool&lt;/h4&gt;
&lt;p&gt;如果此对象引用与Torch C API相同的&lt;code&gt;THTensor&lt;/code&gt;对象作为给定的张量，则返回True。&lt;/p&gt;
&lt;h4 id=&quot;is_signed&quot;&gt;is_signed()&lt;/h4&gt;
&lt;h4 id=&quot;kthvaluek-dimnone-tensor-longtensor&quot;&gt;kthvalue(&lt;em&gt;k, dim=None&lt;/em&gt;) -&amp;gt; (&lt;em&gt;Tensor, LongTensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.kthvalue()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;leother-tensor&quot;&gt;le(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.le()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;le_other-tensor&quot;&gt;le_(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;le()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;lerpstart-end-weight&quot;&gt;lerp(&lt;em&gt;start, end, weight&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.lerp()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;lerp_start-end-weight-tensor&quot;&gt;lerp_(&lt;em&gt;start, end, weight&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lerp()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;log-tensor&quot;&gt;log() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.log()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;loglp-tensor&quot;&gt;loglp() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.loglp()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;loglp_-tensor&quot;&gt;loglp_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;loglp()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;log_-tensor&quot;&gt;log_()→ Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;log()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;log_normal_mwan1-std2-gegneratornone&quot;&gt;log_normal_(&lt;em&gt;mwan=1, std=2, &lt;/em&gt;, gegnerator=None*)&lt;/h4&gt;
&lt;p&gt;将该tensor用均值为$\mu$,标准差为$\sigma$的对数正态分布得到的元素填充。要注意&lt;code&gt;mean&lt;/code&gt;和&lt;code&gt;stdv&lt;/code&gt;是基本正态分布的均值和标准差，不是返回的分布：&lt;br/&gt;$$&lt;br/&gt;P(X)= \frac {1} {x \sigma \sqrt {2 \pi}}e^{- \frac {(lnx- \mu)^2} {2 \sigma^2}}&lt;br/&gt;$$&lt;/p&gt;
&lt;h4 id=&quot;long&quot;&gt;long()&lt;/h4&gt;
&lt;p&gt;将tensor投射为long类型&lt;/p&gt;
&lt;h4 id=&quot;ltother-tensor&quot;&gt;lt(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.lt()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;lt_other-tensor&quot;&gt;lt_(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lt()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;map_tensor-callable&quot;&gt;map_(&lt;em&gt;tensor, callable&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将&lt;code&gt;callable&lt;/code&gt;作用于本tensor和参数tensor中的每一个元素，并将结果存放在本tensor中。&lt;code&gt;callable&lt;/code&gt;应该有下列标志：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;pyhton&quot;&gt;def callable(a, b) -&amp;gt; number
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;masked_copy_mask-source&quot;&gt;masked_copy_(&lt;em&gt;mask, source&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将&lt;code&gt;mask&lt;/code&gt;中值为1元素对应的&lt;code&gt;source&lt;/code&gt;中位置的元素复制到本tensor中。&lt;code&gt;mask&lt;/code&gt;应该有和本tensor相同数目的元素。&lt;code&gt;source&lt;/code&gt;中元素的个数最少为&lt;code&gt;mask&lt;/code&gt;中值为1的元素的个数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;mask&lt;/strong&gt; (&lt;em&gt;ByteTensor&lt;/em&gt;)-二进制掩码&lt;br/&gt;- &lt;strong&gt;source&lt;/strong&gt; (&lt;em&gt;Tensor&lt;/em&gt;)-复制的源tensor&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;mask&lt;/code&gt;作用于&lt;code&gt;self&lt;/code&gt;自身的tensor，而不是参数中的&lt;code&gt;source&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;masked_fill_mask-value&quot;&gt;masked_fill_(&lt;em&gt;mask, value&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;mask&lt;/code&gt;值为1的位置处用&lt;code&gt;value&lt;/code&gt;填充。&lt;code&gt;mask&lt;/code&gt;的元素个数需和本tensor相同，但尺寸可以不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;mask&lt;/strong&gt; (&lt;em&gt;ByteTensor&lt;/em&gt;)-二进制掩码&lt;br/&gt;- &lt;strong&gt;value&lt;/strong&gt; (&lt;em&gt;Tensor&lt;/em&gt;)-用来填充的值&lt;/p&gt;
&lt;h4 id=&quot;masked_selectmask-tensor&quot;&gt;masked_select(&lt;em&gt;mask&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.masked_select()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;maxdimnone-float-ortensor-tensor&quot;&gt;max(&lt;em&gt;dim=None&lt;/em&gt;) -&amp;gt; &lt;em&gt;float or(Tensor, Tensor)&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.max()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;meandimnone-float-ortensor-tensor&quot;&gt;mean(&lt;em&gt;dim=None&lt;/em&gt;) -&amp;gt; &lt;em&gt;float or(Tensor, Tensor)&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.mean()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;mediandim-1-valuenone-indicesnone-tensor-longtensor&quot;&gt;median(&lt;em&gt;dim=-1, value=None, indices=None&lt;/em&gt;) -&amp;gt; &lt;em&gt;(Tensor, LongTensor)&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.median()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;mindimnone-float-ortensor-tensor&quot;&gt;min(&lt;em&gt;dim=None&lt;/em&gt;) -&amp;gt; &lt;em&gt;float or(Tensor, Tensor)&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.min()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;mmmat2-tensor&quot;&gt;mm(&lt;em&gt;mat2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.mm()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;modedim-1-valuenone-indicesnone-tensor-longtensor&quot;&gt;mode(&lt;em&gt;dim=-1, value=None, indices=None&lt;/em&gt;) -&amp;gt; &lt;em&gt;(Tensor, LongTensor)&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.mode()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;mulvalue-tensor&quot;&gt;mul(&lt;em&gt;value&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.mul()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;mul_value&quot;&gt;mul_(&lt;em&gt;value&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mul()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;multinomialnum_samples-replacementfalse-generatornone-tensor&quot;&gt;multinomial(&lt;em&gt;num_samples, replacement=False, &lt;/em&gt;, generator=None*) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.multinomial()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;mvvec-tensor&quot;&gt;mv(&lt;em&gt;vec&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.mv()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;narrowdimension-start-length-te&quot;&gt;narrow(&lt;em&gt;dimension, start, length&lt;/em&gt;) → Te&lt;/h4&gt;
&lt;p&gt;返回一个本tensor经过缩小后的tensor。维度&lt;code&gt;dim&lt;/code&gt;缩小范围是&lt;code&gt;start&lt;/code&gt;到&lt;code&gt;start+length&lt;/code&gt;。原tensor与返回的tensor共享相同的底层内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;dimension&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-需要缩小的维度&lt;br/&gt;- &lt;strong&gt;start&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-起始维度&lt;br/&gt;- &lt;strong&gt;length&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
&amp;gt;&amp;gt;&amp;gt; x.narrow(0, 0, 2)
 1  2  3
 4  5  6
[torch.FloatTensor of size 2x3]
&amp;gt;&amp;gt;&amp;gt; x.narrow(1, 1, 2)
 2  3
 5  6
 8  9
[torch.FloatTensor of size 3x2]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;ndimension-int&quot;&gt;ndimension() → int&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;dim()&lt;/code&gt;的另一种表示。&lt;/p&gt;
&lt;h4 id=&quot;neother-tensor&quot;&gt;ne(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.ne()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;ne_other-tensor&quot;&gt;ne_(&lt;em&gt;other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ne()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;neg-tensor&quot;&gt;neg() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.neg()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;neg_-tensor&quot;&gt;neg_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;neg()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;nelement-int&quot;&gt;nelement() → int&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;numel()&lt;/code&gt;的另一种表示&lt;/p&gt;
&lt;h4 id=&quot;newargs-kwargs&quot;&gt;new(&lt;em&gt;&lt;em&gt;args, &lt;/em&gt;*kwargs&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;构建一个有相同数据类型的tensor&lt;/p&gt;
&lt;h4 id=&quot;nonezero-longtensor&quot;&gt;nonezero() → LongTensor&lt;/h4&gt;
&lt;p&gt;请查看`torch.nonezero()&lt;/p&gt;
&lt;h4 id=&quot;normp2-float&quot;&gt;norm(&lt;em&gt;p=2&lt;/em&gt;) → float&lt;/h4&gt;
&lt;p&gt;请查看`torch.norm()&lt;/p&gt;
&lt;h4 id=&quot;normal_mean0-std1-gengeratornone&quot;&gt;normal_(&lt;em&gt;mean=0, std=1, &lt;/em&gt;, gengerator=None*)&lt;/h4&gt;
&lt;p&gt;将tensor用均值为&lt;code&gt;mean&lt;/code&gt;和标准差为&lt;code&gt;std&lt;/code&gt;的正态分布填充。&lt;/p&gt;
&lt;h4 id=&quot;numel-int&quot;&gt;numel() → int&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;numel()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;numpy-ndarray&quot;&gt;numpy() → ndarray&lt;/h4&gt;
&lt;p&gt;将该tensor以NumPy的形式返回&lt;code&gt;ndarray&lt;/code&gt;，两者共享相同的底层内存。原tensor改变后会相应的在&lt;code&gt;ndarray&lt;/code&gt;有反映，反之也一样。&lt;/p&gt;
&lt;h4 id=&quot;orgqrinput2-tensor&quot;&gt;orgqr(&lt;em&gt;input2&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.orgqr()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;ormqrinput2-input3-lefttrue-transposefalse-tensor&quot;&gt;ormqr(&lt;em&gt;input2, input3, left=True, transpose=False&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.ormqr()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;permutedims&quot;&gt;permute(&lt;em&gt;dims&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将tensor的维度换位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;*dims&lt;/strong&gt; (&lt;em&gt;int..&lt;/em&gt;)-换位顺序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.randn(2, 3, 5)
&amp;gt;&amp;gt;&amp;gt; x.size()
torch.Size([2, 3, 5])
&amp;gt;&amp;gt;&amp;gt; x.permute(2, 0, 1).size()
torch.Size([5, 2, 3])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;pin_memory&quot;&gt;pin_memory()&lt;/h4&gt;
&lt;p&gt;如果原来没有在固定内存中，则将tensor复制到固定内存中。&lt;/p&gt;
&lt;h4 id=&quot;potrfuppertrue-tensor&quot;&gt;potrf(&lt;em&gt;upper=True&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.potrf()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;potriuppertrue-tensor&quot;&gt;potri(&lt;em&gt;upper=True&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.potri()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;potrsinput2-uppertrue-tensor&quot;&gt;potrs(&lt;em&gt;input2, upper=True&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.potrs()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;powexponent&quot;&gt;pow(&lt;em&gt;exponent&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.pow()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;pow_&quot;&gt;pow_()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pow()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;prod-float&quot;&gt;prod()) → float&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.prod()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;pstrfuppertrue-tol-1-tensor-inttensor&quot;&gt;pstrf(&lt;em&gt;upper=True, tol=-1&lt;/em&gt;) -&amp;gt; (&lt;em&gt;Tensor, IntTensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.pstrf()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;qr-tensor-inttensor&quot;&gt;qr()-&amp;gt; (&lt;em&gt;Tensor, IntTensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.qr()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;random_from0-tonone-generatornone&quot;&gt;random_(&lt;em&gt;from=0, to=None, *, generator=None&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将tensor用从在[from, to-1]上的正态分布或离散正态分布取样值进行填充。如果没有明确说明，则填充值仅由本tensor的数据类型限定。&lt;/p&gt;
&lt;h4 id=&quot;reciprocal-tensor&quot;&gt;reciprocal() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.reciprocal()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;reciprocal_-tensor&quot;&gt;reciprocal_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;reciprocal()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;remainderdivisor-tensor&quot;&gt;remainder(&lt;em&gt;divisor&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.remainder()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;remainder_divisor-tensor&quot;&gt;remainder_(&lt;em&gt;divisor&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;remainder()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;renormp-dim-maxnorm-tensor&quot;&gt;renorm(&lt;em&gt;p, dim, maxnorm&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.renorm()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;renorm_p-dim-maxnorm-tensor&quot;&gt;renorm_(&lt;em&gt;p, dim, maxnorm&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;renorm()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;repeatsizes&quot;&gt;repeat(&lt;em&gt;*sizes&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;沿着指定的维度重复tensor。&lt;br/&gt;不同于&lt;code&gt;expand()&lt;/code&gt;，本函数复制的是tensor中的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;*sizes&lt;/strong&gt; (&lt;em&gt;torch.Size ot int...&lt;/em&gt;)-沿着每一维重复的次数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; x.repeat(4, 2)
 1  2  3  1  2  3
 1  2  3  1  2  3
 1  2  3  1  2  3
 1  2  3  1  2  3
[torch.FloatTensor of size 4x6]
&amp;gt;&amp;gt;&amp;gt; x.repeat(4, 2, 1).size()
torch.Size([4, 2, 3])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;resize_sizes&quot;&gt;resize_(&lt;em&gt;*sizes&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将tensor的大小调整为指定的大小。如果元素个数比当前的内存大小大，就将底层存储大小调整为与新元素数目一致的大小。如果元素个数比当前内存小，则底层存储不会被改变。原来tensor中被保存下来的元素将保持不变，但新内存将不会被初始化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;*sizes&lt;/strong&gt; (&lt;em&gt;torch.Size or int...&lt;/em&gt;)-需要调整的大小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([[1, 2], [3, 4], [5, 6]])
&amp;gt;&amp;gt;&amp;gt; x.resize_(2, 2)
&amp;gt;&amp;gt;&amp;gt; x
 1  2
 3  4
[torch.FloatTensor of size 2x2]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;resize_as_tensor&quot;&gt;resize_as_(&lt;em&gt;tensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将本tensor的大小调整为与参数中的tensor相同的大小。等效于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;self.resize_(tensor.size())
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;round-tensor&quot;&gt;round() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.round()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;round_-tensor&quot;&gt;round_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;round()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;rsqrt-tensor&quot;&gt;rsqrt() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.rsqrt()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;rsqrt_-tensor&quot;&gt;rsqrt_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;rsqrt()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;scatter_input-dim-index-src-tensor&quot;&gt;scatter_(&lt;em&gt;input, dim, index, src&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将&lt;code&gt;src&lt;/code&gt;中的所有值按照&lt;code&gt;index&lt;/code&gt;确定的索引写入本tensor中。其中索引是根据给定的dimension，dim按照&lt;code&gt;gather()&lt;/code&gt;描述的规则来确定。&lt;/p&gt;
&lt;p&gt;注意，index的值必须是在_0_到_(self.size(dim)-1)_之间，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;input&lt;/strong&gt; (&lt;em&gt;Tensor&lt;/em&gt;)-源tensor&lt;br/&gt;- &lt;strong&gt;dim&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-索引的轴向&lt;br/&gt;- &lt;strong&gt;index&lt;/strong&gt; (&lt;em&gt;LongTensor&lt;/em&gt;)-散射元素的索引指数&lt;br/&gt;- &lt;strong&gt;src&lt;/strong&gt; (&lt;em&gt;Tensor or float&lt;/em&gt;)-散射的源元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.rand(2, 5)
&amp;gt;&amp;gt;&amp;gt; x

 0.4319  0.6500  0.4080  0.8760  0.2355
 0.2609  0.4711  0.8486  0.8573  0.1029
[torch.FloatTensor of size 2x5]

&amp;gt;&amp;gt;&amp;gt; torch.zeros(3, 5).scatter_(0, torch.LongTensor([[0, 1, 2, 0, 0], [2, 0, 0, 1, 2]]), x)

 0.4319  0.4711  0.8486  0.8760  0.2355
 0.0000  0.6500  0.0000  0.8573  0.0000
 0.2609  0.0000  0.4080  0.0000  0.1029
[torch.FloatTensor of size 3x5]

&amp;gt;&amp;gt;&amp;gt; z = torch.zeros(2, 4).scatter_(1, torch.LongTensor([[2], [3]]), 1.23)
&amp;gt;&amp;gt;&amp;gt; z

 0.0000  0.0000  1.2300  0.0000
 0.0000  0.0000  0.0000  1.2300
[torch.FloatTensor of size 2x4]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;selectdim-index-tensor-or-number&quot;&gt;select(&lt;em&gt;dim, index&lt;/em&gt;) → Tensor or number&lt;/h4&gt;
&lt;p&gt;按照index中选定的维度将tensor切片。如果tensor是一维的，则返回一个数字。否则，返回给定维度已经被移除的tensor。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;dim&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-切片的维度&lt;br/&gt;- &lt;strong&gt;index&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-用来选取的索引&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;strong&gt;!注意：&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;select()&lt;/code&gt;等效于切片。例如，&lt;code&gt;tensor.select(0, index)&lt;/code&gt;等效于&lt;code&gt;tensor[index]&lt;/code&gt;，&lt;code&gt;tensor.select(2, index)&lt;/code&gt;等效于&lt;code&gt;tensor[:, :, index]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;setsourcenone-storage_offset0-sizenone-stridenone&quot;&gt;set(&lt;em&gt;source=None, storage_offset=0, size=None, stride=None&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;设置底层内存，大小和步长。如果&lt;code&gt;tensor&lt;/code&gt;是一个tensor，则将会与本tensor共享底层内存并且有相同的大小和步长。改变一个tensor中的元素将会反映在另一个tensor。&lt;br/&gt;如果&lt;code&gt;source&lt;/code&gt;是一个&lt;code&gt;Storage&lt;/code&gt;，则将设置底层内存，偏移量，大小和步长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;source&lt;/strong&gt; (&lt;em&gt;Tensor or Storage&lt;/em&gt;)-用到的tensor或内存&lt;br/&gt;- &lt;strong&gt;storage_offset&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-内存的偏移量&lt;br/&gt;- &lt;strong&gt;size&lt;/strong&gt; (&lt;em&gt;torch.Size&lt;/em&gt;)-需要的大小，默认为源tensor的大小。&lt;br/&gt;- &lt;strong&gt;stride&lt;/strong&gt;(&lt;em&gt;tuple&lt;/em&gt;)-需要的步长，默认为C连续的步长。&lt;/p&gt;
&lt;h4 id=&quot;share_memory_&quot;&gt;share_memory_()&lt;/h4&gt;
&lt;p&gt;将底层内存移到共享内存中。&lt;br/&gt;如果底层内存已经在共享内存中是将不进行任何操作。在共享内存中的tensor不能调整大小。&lt;/p&gt;
&lt;h4 id=&quot;short&quot;&gt;short()&lt;/h4&gt;
&lt;p&gt;将tensor投射为short类型。&lt;/p&gt;
&lt;h4 id=&quot;sigmoid-tensor&quot;&gt;sigmoid() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.sigmoid()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigmoid_-tensor&quot;&gt;sigmoid_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sidmoid()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;sign-tensor&quot;&gt;sign() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.sign()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;sign_-tensor&quot;&gt;sign_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sign()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;sin-tensor&quot;&gt;sin() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.sin()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;sin_-tensor&quot;&gt;sin_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sin()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;sinh-tensor&quot;&gt;sinh() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.sinh()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;sinh_-tensor&quot;&gt;sinh_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sinh()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;size-torchsize&quot;&gt;size() → torch.Size&lt;/h4&gt;
&lt;p&gt;返回tensor的大小。返回的值是&lt;code&gt;tuple&lt;/code&gt;的子类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; torch.Tensor(3, 4, 5).size()
torch.Size([3, 4, 5])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;sortdimnone-descendingfalse-tensor-longtensor&quot;&gt;sort(&lt;em&gt;dim=None, descending=False&lt;/em&gt;) -&amp;gt; (&lt;em&gt;Tensor, LongTensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torhc.sort()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;splitsplit_size-dim0&quot;&gt;split(&lt;em&gt;split_size, dim=0&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将tensor分割成tensor数组。&lt;br/&gt;请查看&lt;code&gt;torhc.split()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;sqrt-tensor&quot;&gt;sqrt() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.sqrt()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;sqrt_-tensor&quot;&gt;sqrt_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sqrt()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;squeezedimnone-tensor&quot;&gt;squeeze(&lt;em&gt;dim=None&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.squeeze()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;squeeze_dimnone-tensor&quot;&gt;squeeze_(&lt;em&gt;dim=None&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;squeeze()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;std-float&quot;&gt;std() → float&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.std()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;storage-torchstorage&quot;&gt;storage() → torch.Storage&lt;/h4&gt;
&lt;p&gt;返回底层内存。&lt;/p&gt;
&lt;h4 id=&quot;storage_offset-int&quot;&gt;storage_offset() → int&lt;/h4&gt;
&lt;p&gt;以储存元素的个数的形式返回tensor在地城内存中的偏移量。&lt;br/&gt;例：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.Tensor([1, 2, 3, 4, 5])
&amp;gt;&amp;gt;&amp;gt; x.storage_offset()
0
&amp;gt;&amp;gt;&amp;gt; x[3:].storage_offset()
3
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;classmethod-storage_type&quot;&gt;&lt;em&gt;classmethod()&lt;/em&gt; storage_type()&lt;/h4&gt;
&lt;h4 id=&quot;stride-tensor&quot;&gt;stride() → Tensor&lt;/h4&gt;
&lt;p&gt;返回tesnor的步长。&lt;/p&gt;
&lt;h4 id=&quot;subvalue-other-tensor&quot;&gt;sub(&lt;em&gt;value, other&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;从tensor中抽取一个标量或tensor。如果&lt;code&gt;value&lt;/code&gt;和&lt;code&gt;other&lt;/code&gt;都是给定的，则在使用之前&lt;code&gt;other&lt;/code&gt;的每一个元素都会被&lt;code&gt;value&lt;/code&gt;缩放。&lt;/p&gt;
&lt;h4 id=&quot;sub_x-tensor&quot;&gt;sub_(&lt;em&gt;x&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sub()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;sumdimnone-tensor&quot;&gt;sum(&lt;em&gt;dim=None&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.sum()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;svdsometrue-tensor-tensor-tensor&quot;&gt;svd(&lt;em&gt;some=True&lt;/em&gt;) -&amp;gt; (Tensor, Tensor, Tensor)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.svd()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;symeig_eigenvectorsfalse-uppertrue-tensor-tensor&quot;&gt;symeig(_eigenvectors=False, upper=True) -&amp;gt; (Tensor, Tensor)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.symeig()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;t-tensor&quot;&gt;t() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.t()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;t-tensor_1&quot;&gt;t() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;t()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;tan-tensor&quot;&gt;tan() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.tan()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;tan_-tensor&quot;&gt;tan_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;tan()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;tanh-tensor&quot;&gt;tanh() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.tanh()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;tanh_-tensor&quot;&gt;tanh_() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;tanh()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;tolist&quot;&gt;tolist()&lt;/h4&gt;
&lt;p&gt;返回一个tensor的嵌套列表表示。&lt;/p&gt;
&lt;h4 id=&quot;topkk-dimnone-largesttrue-sortedtrue-tensor-longtensor&quot;&gt;topk(&lt;em&gt;k, dim=None, largest=True, sorted=True&lt;/em&gt;) -&amp;gt; (Tensor, LongTensor)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.topk()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;trace-float&quot;&gt;trace() → float&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.trace()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;transposedim0-dim1-tensor&quot;&gt;transpose(&lt;em&gt;dim0, dim1&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.transpose()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;transposedim0-dim1-tensor_1&quot;&gt;transpose(&lt;em&gt;dim0, dim1&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;transpose()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;trilk0-tensor&quot;&gt;tril(&lt;em&gt;k=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.tril()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;tril_k0-tensor&quot;&gt;tril_(&lt;em&gt;k=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;tril()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;triuk0-tensor&quot;&gt;triu(&lt;em&gt;k=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.triu()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;triuk0-tensor_1&quot;&gt;triu(&lt;em&gt;k=0&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;triu()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;trtrsa-uppertrue-transposefalse-unitriangularfalse-tensor-tensor&quot;&gt;trtrs(&lt;em&gt;A, upper=True, transpose=False, unitriangular=False&lt;/em&gt;) -&amp;gt; (Tensor, Tensor)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.trtrs()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;trunc-tensor&quot;&gt;trunc() → Tensor&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.trunc()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;trunc-tensor_1&quot;&gt;trunc() → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;trunc()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;typenew_typenone-asyncfalse&quot;&gt;type(&lt;em&gt;new_type=None, async=False&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将对象投为指定的类型。&lt;br/&gt;如果已经是正确的类型，则不会进行复制并返回原对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;new_type&lt;/strong&gt; (&lt;em&gt;type or string&lt;/em&gt;)-需要的类型&lt;br/&gt;- &lt;strong&gt;async&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;)-如果为True，并且源地址在固定内存中，目的地址在GPU或者相反，则会相对于源主异步执行复制。否则，该参数不发挥作用。&lt;/p&gt;
&lt;h4 id=&quot;type_astesnor&quot;&gt;type_as(&lt;em&gt;tesnor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;将tensor投射为参数给定tensor类型并返回。&lt;br/&gt;如果tensor已经是正确的类型则不会执行操作。等效于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;self.type(tensor.type())
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;tensor&lt;/strong&gt; (Tensor):有所需要类型的tensor&lt;/p&gt;
&lt;h4 id=&quot;unfolddim-size-step-tensor&quot;&gt;unfold(&lt;em&gt;dim, size, step&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;返回一个tensor，其中含有在&lt;code&gt;dim&lt;/code&gt;维tianchong度上所有大小为&lt;code&gt;size&lt;/code&gt;的分片。两个分片之间的步长为&lt;code&gt;step&lt;/code&gt;。&lt;br/&gt;如果_sizedim_是dim维度的原始大小，则在返回tensor中的维度dim大小是_(sizedim-size)/step+1_&lt;br/&gt;维度大小的附加维度将附加在返回的tensor中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br/&gt;- &lt;strong&gt;dim&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-需要展开的维度&lt;br/&gt;- &lt;strong&gt;size&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-每一个分片需要展开的大小&lt;br/&gt;- &lt;strong&gt;step&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;)-相邻分片之间的步长&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.arange(1, 8)
&amp;gt;&amp;gt;&amp;gt; x

 1
 2
 3
 4
 5
 6
 7
[torch.FloatTensor of size 7]

&amp;gt;&amp;gt;&amp;gt; x.unfold(0, 2, 1)

 1  2
 2  3
 3  4
 4  5
 5  6
 6  7
[torch.FloatTensor of size 6x2]

&amp;gt;&amp;gt;&amp;gt; x.unfold(0, 2, 2)

 1  2
 3  4
 5  6
[torch.FloatTensor of size 3x2]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;uniform_from0-to1-tensor&quot;&gt;uniform_(&lt;em&gt;from=0, to=1&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;将tensor用从均匀分布中抽样得到的值填充。&lt;/p&gt;
&lt;h4 id=&quot;unsqueezedim&quot;&gt;unsqueeze(&lt;em&gt;dim&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.unsqueeze()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;unsqueeze_dim-tensor&quot;&gt;unsqueeze_(&lt;em&gt;dim&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;unsqueeze()&lt;/code&gt;的in-place运算形式&lt;/p&gt;
&lt;h4 id=&quot;var&quot;&gt;var()&lt;/h4&gt;
&lt;p&gt;请查看&lt;code&gt;torch.var()&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;viewargs-tensor&quot;&gt;view(&lt;em&gt;*args&lt;/em&gt;) → Tensor&lt;/h4&gt;
&lt;p&gt;返回一个有相同数据但大小不同的tensor。&lt;br/&gt;返回的tensor必须有与原tensor相同的数据和相同数目的元素，但可以有不同的大小。一个tensor必须是连续的&lt;code&gt;contiguous()&lt;/code&gt;才能被查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x = torch.randn(4, 4)
&amp;gt;&amp;gt;&amp;gt; x.size()
torch.Size([4, 4])
&amp;gt;&amp;gt;&amp;gt; y = x.view(16)
&amp;gt;&amp;gt;&amp;gt; y.size()
torch.Size([16])
&amp;gt;&amp;gt;&amp;gt; z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
&amp;gt;&amp;gt;&amp;gt; z.size()
torch.Size([2, 8])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;view_astensor&quot;&gt;view_as(&lt;em&gt;tensor&lt;/em&gt;)&lt;/h4&gt;
&lt;p&gt;返回被视作与给定的tensor相同大小的原tensor。&lt;br/&gt;等效于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python&quot;&gt;self.view(tensor.size())
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;zero_&quot;&gt;zero_()&lt;/h4&gt;
&lt;p&gt;用0填充该tensor。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aibbt.com/&quot;&gt;艾伯特&lt;/a&gt;(http://www.aibbt.com/)国内第一家人工智能门户&lt;/p&gt;
</description>
<pubDate>Sat, 10 Mar 2018 07:56:00 +0000</pubDate>
<dc:creator>aibbtcom</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aibbt/p/8540356.html</dc:identifier>
</item>
<item>
<title>Metrics.net + influxdb + grafana 构建WebAPI的自动化监控和预警 - 王子爱公主</title>
<link>http://www.cnblogs.com/LoveOfPrince/p/8538621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LoveOfPrince/p/8538621.html</guid>
<description>&lt;p&gt;&lt;span&gt;这次主要分享通过Metrics.net + influxdb + grafana 构建WebAPI的自动化监控和预警方案。&lt;/span&gt;&lt;span&gt;通过执行耗时，定位哪些接口拖累了服务的性能；通过请求频次，设置适当的限流和熔断机制，拦截非法或不合理的请求，保障服务的可用性。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;官网：&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://portal.influxdata.com/downloads&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;https://www.influxdata.com/&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;按照官方的说法，&lt;/span&gt;&lt;span&gt;InfluxDB是一个开源分布式时序、事件和指标数据库。使用 Go 语言编写，无需外部依赖。其设计目标是实现分布式和水平伸缩扩展。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;下载地址：&lt;/span&gt;&lt;a href=&quot;https://portal.influxdata.com/downloads&quot; target=&quot;_blank&quot;&gt;https://portal.influxdata.com/downloads&lt;/a&gt;，解压后的目录如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310111441310-411852315.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 打开配置文件，设置数据存储路径&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[data]
  # The directory &lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt; the TSM storage engine stores TSM files.
  #dir &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/influxdb/data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  dir &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:/Users/001wa/Desktop/software/influxdb-1.2.2-1/data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

  # The directory &lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt; the TSM storage engine stores WAL files.
  #wal&lt;/span&gt;-dir = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/influxdb/wal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  wal&lt;/span&gt;-dir = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:/Users/001wa/Desktop/software/influxdb-1.2.2-1/data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;开启管理界面&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[admin]
  # Determines whether the admin service &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; enabled.
  enabled &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;

  # The &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; bind address used by the admin service.
  bind&lt;/span&gt;-address = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:8083&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;cmd到当前目录，使用配置文件&lt;span lang=&quot;EN-US&quot;&gt;influxdb.c&lt;/span&gt;onf启动服务后&lt;/span&gt;&lt;span&gt;，可以查看管理页面&lt;/span&gt;&lt;a href=&quot;http://127.0.0.1:8083/&quot;&gt;http://127.0.0.1:8083/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310112444733-112155620.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;至此，服务启动成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建数据库并改变默认策略，并创建具有管理员权限的账户&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
CREATE DATABASE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;db_metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
CREATE RETENTION POLICY &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rp_metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ON &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;db_metrics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; DURATION 10w REPLICATION &lt;span&gt;1&lt;/span&gt; DEFAULT&lt;p&gt;CREATE USER &quot;admin&quot; WITH PASSWORD 'admin' WITH ALL PRIVILEGES
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;现有多个Metrics及其扩展的版本：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/etishor/Metrics.NET&quot; target=&quot;_blank&quot;&gt;https://github.com/etishor/Metrics.NET&lt;/a&gt; 该版本的作者据说去天堂了，期望天堂里没有程序员这个职业。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/davidB/metrics-influxdb&quot; target=&quot;_blank&quot;&gt;https://github.com/davidB/metrics-influxdb&lt;/a&gt; 这个扩展支持的Influxdb版本太低，高版本会报异常，无奈放弃。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/Recognos/Metrics.NET&quot; target=&quot;_blank&quot;&gt;https://github.com/Recognos/Metrics.NET&lt;/a&gt;这个版本每个时间周期都会向数据源推数据，如果这段时间内没有数据则默认用上个周期的数据，并且数据会累计，导致重复，不便于统计和展示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/Recognos/Metrics.NET.InfluxDB&quot; target=&quot;_blank&quot;&gt;https://github.com/Recognos/Metrics.NET.InfluxDB&lt;/a&gt;这个版本的扩展不错。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;最终选择后面两个，并对源码做了一点扩展和二次开发&lt;/span&gt;&lt;span&gt;，基础SDK主要封装Metrics的基础操作和修复上述重复、累计问题，并注册全局的环境、主机的自定义Tags。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
            Metric.Config.WithReporting(report =&amp;gt;&lt;span&gt; report
                .WithInfluxDbMyHttp(host, port, database, userName, password, &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, TimeSpan.FromSeconds(intervalSeconds), &lt;span&gt;null&lt;/span&gt;, configFunc =&amp;gt;&lt;span&gt; configFunc
                .WithConverter(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; DefaultConverter().WithGlobalTags($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;env={environment},host={Dns.GetHostName()}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                .WithFormatter(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; DefaultFormatter().WithLowercase(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;))
                .WithWriter(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; InfluxdbHttpWriter(configFunc, batchSize))));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;之后在基础sdk上扩展一个用于统计webapi&lt;/span&gt;&lt;span&gt;接口耗时和频次&lt;/span&gt;&lt;span&gt;的sdk。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; WebAPI接口过滤器
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; 
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 记录接口耗时、频次，记录到Metrics
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MetricsFilterAttribute : ActionFilterAttribute
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;主要采用Histogram，并自定义Tags便于Grafana的筛选&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;if&lt;/span&gt; (stopWatch != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    stopWatch.Stop();

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tags = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;method={actionExecutedContext.Request.Method.ToString()}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; metricsName =&lt;span&gt; FormatMetricsName(actionExecutedContext.ActionContext.ActionDescriptor);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;build and update histogram&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; histogram =&lt;span&gt; GetOrAddHistogram(metricsName, tags);
                    histogram.Update(stopWatch.ElapsedMilliseconds);
                }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;WebAPI引用后，要注册全局的过滤器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            config.Filters.Add(&lt;span&gt;new&lt;/span&gt; MetricsFilterAttribute());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;Grafana是一个非常好看的监控界面，从这里下载：&lt;a href=&quot;https://grafana.com/grafana/download&quot;&gt;https://grafana.com/grafana/download&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310134206482-220375855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;启动服务，打开登陆页面&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000&lt;/a&gt;，使用默认账号登陆。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里主要关注数据源的配置和图表的画法，不再详述用户分组权限的管理和自动化预警，想了解更多可以参考官方文档：&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://docs.grafana.org/guides/getting_started/&quot;&gt;http://docs.grafana.org/guides/getting_started/&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;首先添加数据源，设置数据源的类型、地址、数据库、通信方式等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310134917656-933556487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;之后，自定义模板，将自定义的Tags作为筛选项，并设置数据源、筛选条件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310140131554-571892862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;最终的效果为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310140238890-1102857447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;接下来，自定义图表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310140421232-227620674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置标题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310140506278-1886986787.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;选择自己的数据库和查询字段，比如采用Histrogram直方图记录单位时间内的执行次数和耗时分布&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310144510239-20984568.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为耗时和访问次数属于不同的维度，这里要设置两个Y坐标&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310144557722-110295713.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 显示一些聚合数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310144731929-1960753980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置我们要展示图形格式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310150452241-1547047002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最终效果为&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/516867/201803/516867-20180310150703490-642823446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;为了保证单个接口或服务的可用性，通常针对单个用户账户、单个调用方ip在某个时间段内的访问频次进行限制，拦截恶意的请求，保障服务的可用性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以在&lt;span lang=&quot;EN-US&quot;&gt;Grafana中设置预警阈值，直接调用接口，对用户或&lt;span lang=&quot;EN-US&quot;&gt;ip进行访问拦截等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这篇是线上服务的可用性保障方案的其中一篇，其它的内容会后续补充：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;1.对Web、H5、App相关页面进行埋点，统计用户访问的PV、UV、停留时间、转化率等。&lt;/p&gt;

&lt;p&gt;2.VSAnalyseTool本地调试分析接口的耗时、内存、CPU的使用情况，直接定位问题、优化代码。&lt;br/&gt;　　&lt;a href=&quot;http://www.cnblogs.com/LoveOfPrince/p/6323116.html&quot; target=&quot;_blank&quot;&gt;接口性能分析与优化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.SoapUI对接口进行并行压力测试，针对性改善接口性能。&lt;/p&gt;

&lt;p&gt;4.Metrics.net + influxdb + grafana对API进行埋点。&lt;/p&gt;

&lt;p&gt;5.完善日志系统，记录请求和响应及耗时，标识一次完整的请求，便于查找和定位问题。&lt;/p&gt;

&lt;p&gt;6.对EntityFramework进行轻度包装，支持AsNoTracking、自动nolock、记录SQL执行耗时、读写分离等。&lt;/p&gt;

&lt;p&gt;7.zabbix监控服务器的内存、线程、CPU Average、CPU Load、IO等，设置阈值、及时预警，保障线上的可用性。&lt;/p&gt;

&lt;p&gt;8. WinDbg分析线上服务异常时的内存转储文件，排查大对象、高频回收、线程耗时、死锁等问题。&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://www.cnblogs.com/LoveOfPrince/p/6991054.html&quot; target=&quot;_blank&quot;&gt;高CPU、数据库无法读写的真凶&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;a href=&quot;http://www.cnblogs.com/LoveOfPrince/p/6653341.html&quot; target=&quot;_blank&quot;&gt;Windbg DUMP分析（原创汇总）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://www.cnblogs.com/LoveOfPrince/p/6032523.html&quot; target=&quot;_blank&quot;&gt;记一次内存泄漏DUMP分析&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 07:41:00 +0000</pubDate>
<dc:creator>王子爱公主</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LoveOfPrince/p/8538621.html</dc:identifier>
</item>
<item>
<title>如何解决 touchstart 事件与 click 事件的冲突 - </title>
<link>http://www.cnblogs.com/wangjae/p/8540238.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjae/p/8540238.html</guid>
<description>&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-0&quot;&gt;一 · 业务场景的描述&lt;/h2&gt;
&lt;hr/&gt;

&lt;p&gt;在对已完成的PC站点进行移动端适配时，我们想要站点在移动设备上有更快的响应速度，以带给用户更好的体验，此时，我们应该使用移动设备专用的事件系统，例如，使用 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件代替 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件。&lt;/p&gt;
&lt;p&gt;为什么这样效果会更好呢？根据Google开发者文档中的描述：&lt;/p&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;移动设备上的浏览器将会在 &lt;span&gt;&lt;code&gt;click&lt;/code&gt; &lt;/span&gt;事件触发时延迟 300ms ，以确保这是一个“单击”事件而非“双击”事件。&lt;/p&gt;
&lt;div readability=&quot;16&quot;&gt;
&lt;p&gt;而对于 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件而言，则会在用户手指触碰屏幕的一瞬间触发所绑定的事件。所以，使用 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 替换 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件的意义在于，帮助用户在每次点击时节省 &lt;strong&gt;300ms&lt;/strong&gt; 的时间。在页面频繁需要点击，或者点击发生在动画中，对动画流畅度有较高要求的情境下，使用这种技术是非常必要的。&lt;/p&gt;
&lt;p&gt;但是，让我们回到我们的初始场景，在 PC端站点适配移动端时 我们不能简单的进行 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt;和 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件的替换，因为PC并不能识别 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件。&lt;/p&gt;

&lt;div readability=&quot;26.5&quot;&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-1&quot;&gt;二 · 产生冲突的原因&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;当然，我们可以给某个元素同时绑定 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件，但这将会导致本篇文章解决的问题 -- 这两个事件在移动设备上会发生冲突。&lt;/p&gt;
&lt;div readability=&quot;35&quot;&gt;
&lt;p&gt;由于移动设备能够同时识别 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件，因此当用户点击目标元素时，绑定在目标元素上的 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件与 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件（约300ms后）会依次被触发，也就是说，&lt;strong&gt;我们所绑定的回调函数会被执行两次！&lt;/strong&gt;。这显然不是我们想要的结果。&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-2&quot;&gt;三 · 解决方案&lt;/h2&gt;
&lt;hr/&gt;

&lt;p&gt;针对这样的情境，有以下两种解决方案：&lt;/p&gt;
&lt;/div&gt;
&lt;h3 class=&quot;heading&quot; data-id=&quot;heading-3&quot;&gt;（一）使用 preventDefault&lt;/h3&gt;
&lt;p&gt;第一种解决方案是使用事件对象中的 &lt;span&gt;&lt;code&gt;preventDefault&lt;/code&gt;&lt;/span&gt; 方法,&lt;span&gt;&lt;code&gt;preventDefault&lt;/code&gt;&lt;/span&gt; 方法的作用在于：阻止元素默认事件行为的发生，但有意思的是，当我们在目标元素同时绑定 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件时，在 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件回调函数中使用该方法，可以阻止后续 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件的发生。&lt;/p&gt;
&lt;p&gt;这从道理上是讲不通的，毕竟，我们添加的 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件并不是元素的“默认事件”，但它确实奏效了，或者说，被浏览器实现了，因此我们可以使用该方法解决移动设备上 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件与 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件的冲突问题，具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const Button = document.getElementById(&quot;targetButton&quot;)

Button.addEventListener(&quot;touchstart&quot;, e =&amp;gt; {
    e.preventDefault()
    console.log(&quot;touchstart event!&quot;)
})

Button.addEventListener(&quot;click&quot;, e =&amp;gt; {
    e.preventDefault()
    console.log(&quot;click event!&quot;)
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你在浏览器上模拟移动设备后点击目标元素，只会在控制台看到&lt;span&gt; &lt;code&gt;touchstart event!&lt;/code&gt;&lt;/span&gt; 字段，很显然，&lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件被成功阻止了。&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt; 使用该方法的优点在于简单粗暴，直接有效，能够很好的实现我们的目标，但缺点在于， &lt;span&gt;&lt;code&gt;preventDefault&lt;/code&gt;&lt;/span&gt; 方法为阻止 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件的方式是浏览器实现上的，而不是 &lt;span&gt;&lt;code&gt;preventDefault&lt;/code&gt;&lt;/span&gt; 原理上的，这会带来一些不确定性，虽然我暂时尚未发现该方法失效的具体场景。&lt;/p&gt;
（二）基于功能检测绑定事件&lt;/div&gt;
&lt;p&gt;我们可以通过判断浏览器是否支持 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 事件来封装元素的点击事件，这样客户端会根据当前环境判定元素应该绑定的事件类型，代码如下：&lt;/p&gt;
&lt;div readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const Button = document.getElementById(&quot;targetButton&quot;)

const clickEvent = (function() {
  if ('ontouchstart' in document.documentElement === true)
    return 'touchstart';
  else
    return 'click';
})();

Button.addEventListener(clickEvent, e =&amp;gt; {
  console.log(&quot;things happened!&quot;)
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;该方法的优点在于，我们通过增加一次判断，为元素减少了一个不必要的事件绑定，从而避免了 &lt;span&gt;&lt;code&gt;touchstart&lt;/code&gt;&lt;/span&gt; 与 &lt;span&gt;&lt;code&gt;click&lt;/code&gt;&lt;/span&gt; 事件的冲突问题。这种方法避免了我们书写两次同样的代码，并且相较于第一种方法更加符合逻辑，因此是我所推荐的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sat, 10 Mar 2018 07:36:00 +0000</pubDate>
<dc:creator>&amp;lt;_/&amp;gt;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjae/p/8540238.html</dc:identifier>
</item>
<item>
<title>spring（一） - 白夜丶</title>
<link>http://www.cnblogs.com/baiye195/p/8538631.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baiye195/p/8538631.html</guid>
<description>&lt;p&gt;&lt;span&gt;spring——Ioc&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　IOC也称为控制与反转(Inversion&lt;/span&gt; of Control，英文缩写为IoC)，是spinrg两大核心&lt;span&gt;基础+重点&lt;/span&gt;知识之一。他具有一下优点：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　1.方便解耦，简化开发：通过spring提供的ioc容器，我们可以将对象之间的依赖关系交给spring进行控制，避免编码所造成的程序的过度耦合，用户不必不在为单例模式、类、属性、文件解析等这些底层的需求编码，可以专注上层的应用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　2.声明事物的支持：可以通过声明的方式灵活的进行事物管理，提高开发效率和质量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3.方便程序测试：测试不再是昂贵的操作，可以通过非容器依赖的编程方式进行&lt;span&gt;几乎所有&lt;/span&gt;的测试工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　4.集成各种优秀的框架&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;Ioc的理解：Ioc并非新的技术而是一种编程思想。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;1.谁控制谁&lt;/span&gt;：在传统编程中，我们通过&lt;span&gt;对象内部new出对象，是程序主动&lt;span&gt;依赖&lt;/span&gt;对象&lt;/span&gt;，这样造成了程序的&lt;span&gt;过度耦合&lt;/span&gt;，不利于维护；Ioc提供了一个容器为我们创建对象的机制。理所当然的理解为：&lt;span&gt;ioc容器为我们创建对象，ioc控制对象的创建：ioc控制了外部资源的获取。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　2.反转，什么被反转了？：&lt;span&gt;传统编程中，开发者是通过对象内部new出对象，对象的创建是主动，这是一种正转（假如对象是老大，开发者就是小弟。小弟为老大服务（new））。Ioc控制对象创建后，是被Ioc控制，对象创建是被动（对象是不是老大，Ioc说了算，&lt;span&gt;Ioc有外部资源为对象注入&lt;/span&gt;，对象就是老大，否则对象就不是老大）。因此，&lt;span&gt;&lt;span&gt;控制反转是一种&lt;/span&gt;编程思想&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　DI(依赖与注入):组件与组件直接的关系，是容器运行时候决定的（动态的），依赖注入的目的是为了提升组件的&lt;span&gt;重用的频率&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　1.不需要关系组件的的具体资源来源，能更专注于业务开发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　2.系统(程序)更灵活，平台更易于扩展。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　DI——的深入浅出：&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　&lt;span&gt;　1.谁依赖谁？：程序依赖Ioc容器&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　2.谁注入谁？：Ioc容器对程序的注入，注入什么？为程序注入对象或者注入外部资源。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;结论：IOC与DI（即：控制反转与依赖注入）是一种相对性的编程思想，是紧密相连的，是同种技术不同角度的思考。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　IOC代码实战：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　1.IOC所需要的包：&lt;span&gt;4+1&lt;/span&gt;（四个spring包+commons的依赖包）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310142508152-1364327771.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2.我们需要创建一份xml文件，文件的标准命名：applicationContext.xml放在src目录下即可；&lt;/p&gt;
&lt;p&gt;　　3.创建一个User实体类，成员变量分别是：name，age；提供一个无参的构造方法+有参的构造方法，别忘了还有set/get方法。&lt;/p&gt;
&lt;p&gt;　　准备就绪：&lt;/p&gt;
&lt;p&gt;　　①&lt;span&gt;无参构造方法&lt;/span&gt;，实例化对象：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310144357295-1181158555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310144410572-556167206.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310144432734-176963249.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　解释：控制台上打印了对象的地址，说明对象成功被IOC容器创建。从xml文件看，只是简单的配了一个javaBean（外部资源），id：javaBean的&lt;span&gt;唯一标识&lt;/span&gt;，class：User这个类的&lt;span&gt;全限类名&lt;/span&gt;。IOC是通过&lt;span&gt;无参构造方法创建对象&lt;/span&gt;的，如果没有无参的构造方法则产生异常，无法成功创建对象；IocTest测试类：首先要获取xml的文件路径，通过获取容器中的javaBean即可以获取一个已经被创建的对象。&lt;/p&gt;
&lt;p&gt;　　②有参的构造方法，实例化对象：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310145502430-55085342.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310150401723-1516047707.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　解释：在无参的xml中添加两个元素&amp;lt;constructor-age /&amp;gt;,name属性的值&lt;span&gt;必须&lt;/span&gt;是User这个类里面的&lt;span&gt;相对匹配有参构造方法&lt;/span&gt;的&lt;span&gt;参数名称&lt;/span&gt;，value属性是给参数赋值。&lt;/p&gt;
&lt;p&gt;　　③set/get方式，实例化对象：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310150419872-70681332.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310150431496-828659788.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　解释：更改两个元素&amp;lt;property&amp;gt;,name属性的值必须是User类的&lt;span&gt;存在成员变量的名称&lt;span&gt;,同理value属性是给成员变量赋值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;DI代码实战&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1.准备一个实力类（Car），成员变量name，address。提供set/get方法，并且通过IOC创建Car对象并且给成员变量赋值。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310151801293-2139798521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　①依赖注入，一步到位：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在User 类添加Car类型的成员变量，并且为该变量提供set/get方法。在xml文件中添加元素&amp;lt;property&amp;gt; name属性引用 car的javaBean.(按图顺序)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310152119519-1308139973.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310152255021-1946078826.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1286663/201803/1286663-20180310152629948-1021440433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　没有最终的成功，也没有致命的失败，最可贵的是继续前进的勇气。&lt;/span&gt;&lt;/p&gt;






&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 07:29:00 +0000</pubDate>
<dc:creator>白夜丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baiye195/p/8538631.html</dc:identifier>
</item>
<item>
<title>前端代码相关规范 - -渔人码头-</title>
<link>http://www.cnblogs.com/imwtr/p/8539129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imwtr/p/8539129.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If plugin has trouble finding Node.js, replace this string with path&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; to your `node` bin&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &quot;node-path&quot; : &quot;:/usr/local/bin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Full list of supported options and acceptable values can be found here:&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; https://github.com/csscomb/csscomb.js/blob/master/doc/options.md&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &quot;config&quot;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Whether to add a semicolon after the last value/mixin.&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;         &quot;always-semicolon&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set indent for code inside blocks, including media queries and nested rules.&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;         &quot;block-indent&quot;: &quot;    &quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unify case of hexadecimal colors.&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &quot;color-case&quot;: &quot;lower&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Whether to expand hexadecimal colors or use shorthands.&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         &quot;color-shorthand&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unify case of element selectors.&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         &quot;element-case&quot;: &quot;lower&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add/remove line break at EOF.&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &quot;eof-newline&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add/remove leading zero in dimensions.&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;         &quot;leading-zero&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unify quotes style.&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         &quot;quotes&quot;: &quot;double&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Remove all rulesets that contain nothing but spaces.&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &quot;remove-empty-rulesets&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space after `:` in declarations.&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &quot;space-after-colon&quot;: &quot; &quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space after combinator (for example, in selectors like `p &amp;gt; a`).&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;         &quot;space-after-combinator&quot;: &quot; &quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space after `{`.&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;         &quot;space-after-opening-brace&quot;: &quot;\n&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space after selector delimiter.&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;         &quot;space-after-selector-delimiter&quot;: &quot;\n&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space before `}`.&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;         &quot;space-before-closing-brace&quot;: &quot;\n&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space before `:` in declarations.&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         &quot;space-before-colon&quot;: &quot;&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space before combinator (for example, in selectors like `p &amp;gt; a`).&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         &quot;space-before-combinator&quot;: &quot; &quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space before `{`.&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &quot;space-before-opening-brace&quot;: &quot; &quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space before selector delimiter.&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &quot;space-before-selector-delimiter&quot;: &quot;&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set space between declarations (i.e. `color: tomato`).&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;         &quot;space-between-declarations&quot;: &quot;\n&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Whether to trim trailing spaces.&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &quot;strip-spaces&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Whether to remove units in zero-valued dimensions.&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &quot;unitless-zero&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Whether to align prefixes in properties and values.&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;         &quot;vendor-prefix-align&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sort properties in particular order.&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &quot;sort-order&quot;&lt;span&gt;: [
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;                 &quot;font&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                 &quot;font-family&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                 &quot;font-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 &quot;font-weight&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &quot;font-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                 &quot;font-variant&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                 &quot;font-size-adjust&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;                 &quot;font-stretch&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                 &quot;font-effect&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 &quot;font-emphasize&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 &quot;font-emphasize-position&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                 &quot;font-emphasize-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                 &quot;font-smooth&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                 &quot;line-height&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                 &quot;position&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 &quot;z-index&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 &quot;top&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &quot;right&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                 &quot;bottom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                 &quot;left&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                 &quot;display&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 &quot;visibility&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                 &quot;float&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &quot;clear&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 &quot;overflow&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 &quot;overflow-x&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 &quot;overflow-y&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 &quot;-ms-overflow-x&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 &quot;-ms-overflow-y&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &quot;clip&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                 &quot;zoom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &quot;flex-direction&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 &quot;flex-order&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &quot;flex-pack&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                 &quot;flex-align&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                 &quot;-webkit-box-sizing&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                 &quot;-moz-box-sizing&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                 &quot;box-sizing&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                 &quot;width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 &quot;min-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 &quot;max-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 &quot;height&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 &quot;min-height&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                 &quot;max-height&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                 &quot;margin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;                 &quot;margin-top&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                 &quot;margin-right&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;                 &quot;margin-bottom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 &quot;margin-left&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                 &quot;padding&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;                 &quot;padding-top&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;                 &quot;padding-right&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 &quot;padding-bottom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                 &quot;padding-left&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;                 &quot;table-layout&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                 &quot;empty-cells&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;                 &quot;caption-side&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 &quot;border-spacing&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 &quot;border-collapse&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                 &quot;list-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 &quot;list-style-position&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                 &quot;list-style-type&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                 &quot;list-style-image&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                 &quot;content&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                 &quot;quotes&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                 &quot;counter-reset&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                 &quot;counter-increment&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                 &quot;resize&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 &quot;cursor&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                 &quot;-webkit-user-select&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                 &quot;-moz-user-select&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                 &quot;-ms-user-select&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                 &quot;user-select&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &quot;nav-index&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;                 &quot;nav-up&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                 &quot;nav-right&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                 &quot;nav-down&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                 &quot;nav-left&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                 &quot;-webkit-transition&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                 &quot;-moz-transition&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 &quot;-ms-transition&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;                 &quot;-o-transition&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                 &quot;transition&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                 &quot;-webkit-transition-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;                 &quot;-moz-transition-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;                 &quot;-ms-transition-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                 &quot;-o-transition-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 &quot;transition-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                 &quot;-webkit-transition-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;                 &quot;-moz-transition-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;                 &quot;-ms-transition-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                 &quot;-o-transition-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                 &quot;transition-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;                 &quot;-webkit-transition-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                 &quot;-moz-transition-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;                 &quot;-ms-transition-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;                 &quot;-o-transition-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;                 &quot;transition-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;                 &quot;-webkit-transition-property&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;                 &quot;-moz-transition-property&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;                 &quot;-ms-transition-property&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;                 &quot;-o-transition-property&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;                 &quot;transition-property&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;                 &quot;-webkit-transform&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;                 &quot;-moz-transform&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;                 &quot;-ms-transform&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;                 &quot;-o-transform&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                 &quot;transform&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;                 &quot;-webkit-transform-origin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                 &quot;-moz-transform-origin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;                 &quot;-ms-transform-origin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;                 &quot;-o-transform-origin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                 &quot;transform-origin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;                 &quot;-webkit-animation&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;                 &quot;-moz-animation&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;                 &quot;-ms-animation&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;                 &quot;-o-animation&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;                 &quot;animation&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                 &quot;-webkit-animation-name&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;                 &quot;-moz-animation-name&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;                 &quot;-ms-animation-name&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;                 &quot;-o-animation-name&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;                 &quot;animation-name&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;                 &quot;-webkit-animation-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;                 &quot;-moz-animation-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;                 &quot;-ms-animation-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;                 &quot;-o-animation-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;                 &quot;animation-duration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;                 &quot;-webkit-animation-play-state&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;                 &quot;-moz-animation-play-state&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;                 &quot;-ms-animation-play-state&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;                 &quot;-o-animation-play-state&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;                 &quot;animation-play-state&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;                 &quot;-webkit-animation-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;                 &quot;-moz-animation-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;                 &quot;-ms-animation-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;                 &quot;-o-animation-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;                 &quot;animation-timing-function&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;                 &quot;-webkit-animation-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;                 &quot;-moz-animation-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;                 &quot;-ms-animation-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;                 &quot;-o-animation-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;                 &quot;animation-delay&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;                 &quot;-webkit-animation-iteration-count&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;                 &quot;-moz-animation-iteration-count&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;                 &quot;-ms-animation-iteration-count&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;                 &quot;-o-animation-iteration-count&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;                 &quot;animation-iteration-count&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;                 &quot;-webkit-animation-direction&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;                 &quot;-moz-animation-direction&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;                 &quot;-ms-animation-direction&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;                 &quot;-o-animation-direction&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;                 &quot;animation-direction&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;                 &quot;text-align&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;                 &quot;-webkit-text-align-last&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;                 &quot;-moz-text-align-last&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;                 &quot;-ms-text-align-last&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;                 &quot;text-align-last&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;                 &quot;vertical-align&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;                 &quot;white-space&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;                 &quot;text-decoration&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;                 &quot;text-emphasis&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt;                 &quot;text-emphasis-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;                 &quot;text-emphasis-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;                 &quot;text-emphasis-position&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;                 &quot;text-indent&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;                 &quot;-ms-text-justify&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;                 &quot;text-justify&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;                 &quot;letter-spacing&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;                 &quot;word-spacing&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;                 &quot;-ms-writing-mode&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;                 &quot;text-outline&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt;                 &quot;text-transform&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;                 &quot;text-wrap&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;                 &quot;text-overflow&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;                 &quot;-ms-text-overflow&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;                 &quot;text-overflow-ellipsis&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;                 &quot;text-overflow-mode&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;                 &quot;-ms-word-wrap&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;                 &quot;word-wrap&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;                 &quot;word-break&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;                 &quot;-ms-word-break&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;                 &quot;-moz-tab-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;                 &quot;-o-tab-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;                 &quot;tab-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;                 &quot;-webkit-hyphens&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;                 &quot;-moz-hyphens&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;                 &quot;hyphens&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;                 &quot;pointer-events&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;                 &quot;opacity&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;                 &quot;filter:progid:DXImageTransform.Microsoft.Alpha(Opacity&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;                 &quot;-ms-filter:\\'progid:DXImageTransform.Microsoft.Alpha&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;                 &quot;-ms-interpolation-mode&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;                 &quot;color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;                 &quot;border&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;                 &quot;border-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;                 &quot;border-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;                 &quot;border-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;                 &quot;border-top&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;                 &quot;border-top-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;                 &quot;border-top-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;                 &quot;border-top-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;                 &quot;border-right&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt;                 &quot;border-right-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;                 &quot;border-right-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;                 &quot;border-right-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt;                 &quot;border-bottom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt;                 &quot;border-bottom-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt;                 &quot;border-bottom-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;                 &quot;border-bottom-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt;                 &quot;border-left&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;                 &quot;border-left-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;                 &quot;border-left-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt;                 &quot;border-left-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;                 &quot;-webkit-border-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt;                 &quot;-moz-border-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;                 &quot;border-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt;                 &quot;-webkit-border-top-left-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt;                 &quot;-moz-border-radius-topleft&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt;                 &quot;border-top-left-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt;                 &quot;-webkit-border-top-right-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt;                 &quot;-moz-border-radius-topright&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;                 &quot;border-top-right-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt;                 &quot;-webkit-border-bottom-right-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;                 &quot;-moz-border-radius-bottomright&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;                 &quot;border-bottom-right-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt;                 &quot;-webkit-border-bottom-left-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;                 &quot;-moz-border-radius-bottomleft&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt;                 &quot;border-bottom-left-radius&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt;                 &quot;-webkit-border-image&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;                 &quot;-moz-border-image&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;285&lt;/span&gt;                 &quot;-o-border-image&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;                 &quot;border-image&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt;                 &quot;-webkit-border-image-source&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;                 &quot;-moz-border-image-source&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt;                 &quot;-o-border-image-source&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt;                 &quot;border-image-source&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt;                 &quot;-webkit-border-image-slice&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt;                 &quot;-moz-border-image-slice&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;                 &quot;-o-border-image-slice&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;                 &quot;border-image-slice&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt;                 &quot;-webkit-border-image-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt;                 &quot;-moz-border-image-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt;                 &quot;-o-border-image-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt;                 &quot;border-image-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt;                 &quot;-webkit-border-image-outset&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;                 &quot;-moz-border-image-outset&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt;                 &quot;-o-border-image-outset&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt;                 &quot;border-image-outset&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;                 &quot;-webkit-border-image-repeat&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt;                 &quot;-moz-border-image-repeat&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;305&lt;/span&gt;                 &quot;-o-border-image-repeat&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt;                 &quot;border-image-repeat&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt;                 &quot;outline&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt;                 &quot;outline-width&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt;                 &quot;outline-style&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt;                 &quot;outline-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;                 &quot;outline-offset&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt;                 &quot;background&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt;                 &quot;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt;                 &quot;background-color&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt;                 &quot;background-image&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt;                 &quot;background-repeat&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt;                 &quot;background-attachment&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;318&lt;/span&gt;                 &quot;background-position&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt;                 &quot;background-position-x&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt;                 &quot;-ms-background-position-x&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt;                 &quot;background-position-y&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;322&lt;/span&gt;                 &quot;-ms-background-position-y&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt;                 &quot;-webkit-background-clip&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt;                 &quot;-moz-background-clip&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt;                 &quot;background-clip&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;326&lt;/span&gt;                 &quot;background-origin&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt;                 &quot;-webkit-background-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;328&lt;/span&gt;                 &quot;-moz-background-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt;                 &quot;-o-background-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt;                 &quot;background-size&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt;                 &quot;box-decoration-break&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt;                 &quot;-webkit-box-shadow&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;                 &quot;-moz-box-shadow&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt;                 &quot;box-shadow&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt;                 &quot;filter:progid:DXImageTransform.Microsoft.gradient&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt;                 &quot;-ms-filter:\\'progid:DXImageTransform.Microsoft.gradient&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt;                 &quot;text-shadow&quot;
&lt;span&gt;338&lt;/span&gt; &lt;span&gt;        ]
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt; }
&lt;/pre&gt;</description>
<pubDate>Sat, 10 Mar 2018 06:37:00 +0000</pubDate>
<dc:creator>-渔人码头-</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imwtr/p/8539129.html</dc:identifier>
</item>
<item>
<title>CSS布局方案 - BluesQian</title>
<link>http://www.cnblogs.com/QianBoy/p/8539077.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/QianBoy/p/8539077.html</guid>
<description>&lt;h3 id=&quot;articleHeader0&quot; data-id=&quot;heading-0&quot;&gt;&lt;strong&gt;居中布局&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 data-id=&quot;heading-1&quot;&gt;水平居中&lt;/h4&gt;
&lt;p&gt;1）使用inline-block+text-align&lt;/p&gt;
&lt;p&gt;原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中。&lt;/p&gt;
&lt;p&gt;用法：对子框设置display:inline-block，对父框设置text-align:center。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;child&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DEMO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.child&lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; inline-block&lt;/span&gt;;
}&lt;span&gt;
.parent&lt;/span&gt;{&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/755438/201803/755438-20180310140926756-1492879935.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;缺点:child里的文字也会水平居中，可以在.child添加text-align:left;还原&lt;/p&gt;
&lt;p&gt;2）使用absolute+transform&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;child&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DEMO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.child&lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;
}&lt;span&gt;
.parent&lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;
    left&lt;/span&gt;:&lt;span&gt; 50%&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt; translateX(-50%)&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3）使用flex+justify-content&lt;/p&gt;
&lt;p&gt;原理：通过CSS3中的布局利器flex中的justify-content属性来达到水平居中。&lt;/p&gt;
&lt;p&gt;用法：先将父框设置为display:flex，再设置justify-content:center。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;child&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DEMO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.parent&lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;&lt;span&gt;
    justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;缺点:低版本浏览器(ie6 ie7 ie8)不支持&lt;/p&gt;
&lt;p&gt;4）使用flex+margin&lt;/p&gt;
&lt;p&gt;原理：通过CSS3中的布局利器flex将子框转换为flex item，再设置子框居中以达到居中。&lt;/p&gt;
&lt;p&gt;用法：先将父框设置为display:flex，再设置子框margin:0 auto。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;parent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;child&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DEMO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.parent&lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;
}&lt;span&gt;
.child&lt;/span&gt;{&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0 auto&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 data-id=&quot;heading-2&quot;&gt;垂直居中&lt;/h4&gt;
&lt;p&gt;1）使用absolute+transform&lt;/p&gt;
&lt;p&gt;用法：先将父框设置为position:relative，再设置子框position:absolute，top:50%，transform:translateY(-50%)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.parent &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt;relative&lt;/span&gt;;
}&lt;span&gt;
.child &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt;50%&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt;translateY(-50%)&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2）使用flex+align-items&lt;/p&gt;
&lt;p&gt;原理：通过设置CSS3中的布局利器flex中的属性align-times，使子框垂直居中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.parent &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt;flex&lt;/span&gt;;&lt;span&gt;
    align-items&lt;/span&gt;:&lt;span&gt;center&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 data-id=&quot;heading-3&quot;&gt;水平垂直居中&lt;/h4&gt;
&lt;p&gt;1）使用absolute+transform&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.parent &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt;relative&lt;/span&gt;;
}&lt;span&gt;
.child &lt;/span&gt;{&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;&lt;span&gt;
    left&lt;/span&gt;:&lt;span&gt;50%&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt;50%&lt;/span&gt;;&lt;span&gt;
    transform&lt;/span&gt;:&lt;span&gt;tranplate(-50%,-50%)&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2）使用flex+justify-content+align-items&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.parent &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt;flex&lt;/span&gt;;&lt;span&gt;
    justify-content&lt;/span&gt;:&lt;span&gt;center&lt;/span&gt;;&lt;span&gt;
    align-items&lt;/span&gt;:&lt;span&gt;center&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;articleHeader1&quot; data-id=&quot;heading-4&quot;&gt; &lt;/h3&gt;

</description>
<pubDate>Sat, 10 Mar 2018 06:25:00 +0000</pubDate>
<dc:creator>BluesQian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/QianBoy/p/8539077.html</dc:identifier>
</item>
<item>
<title>Java 8 Date-Time API 详解 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8539007.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8539007.html</guid>
<description>&lt;p&gt;从Java版本1.0开始就支持日期和时间，主要通过&lt;code&gt;java.util.Date&lt;/code&gt;类。 但是，&lt;code&gt;Date&lt;/code&gt;类设计不佳。 例如，&lt;code&gt;Date&lt;/code&gt;中的月份从1开始，但从日期却从0开始。在JDK 1.1中使用它的许多方法已经废弃，同时&lt;code&gt;java.util.Calendar&lt;/code&gt;被引入来接管&lt;code&gt;Date&lt;/code&gt;中的一些功能。 这两个是处理日期和时间的主要类，直到JDK 1.7，尽管他们被认为是不足够并且不容易处理，导致许多人诉诸第三方替代品，例如Joda Time（&lt;a href=&quot;http://%5Bjoda.org%5D(http://joda.org)&quot; class=&quot;uri&quot;&gt;http://[joda.org](http://joda.org)&lt;/a&gt;）。 JDK 1.8中的新日期和时间API解决了旧API中的许多问题，并且与Joda Time API类似。&lt;/p&gt;
&lt;p&gt;这里介绍JDK 1.8中的日期 - 时间的API。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4366140-813267d99536ea23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;JDK 8&quot;/&gt;&lt;/p&gt;

&lt;p&gt;新的日期和时间API使得使用日期和时间非常容易。&lt;code&gt;java.time&lt;/code&gt;包中包含API中的核心类。 另外，还有其他四个包，其成员使用较少：&lt;code&gt;java.time.chrono&lt;/code&gt;，&lt;code&gt;java.time.format&lt;/code&gt;，&lt;code&gt;java.time.temporal&lt;/code&gt;和&lt;code&gt;java.time.zone&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;java.time&lt;/code&gt;包中，&lt;code&gt;Instant&lt;/code&gt;类表示时间线上的一个点，通常用于对时间进行操作。 &lt;code&gt;LocalDate&lt;/code&gt;类为没有时间和时区部分的日期建模，例如，用于表示生日。&lt;/p&gt;
&lt;p&gt;如果你需要日期和时间，那么&lt;code&gt;LocalDateTime&lt;/code&gt;就是为你准备的。 例如，订单发货日期可能需要一个日期以外的时间来使订单更容易跟踪。 如果你需要一段时间但不关心日期，那么可以使用&lt;code&gt;LocalTime&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果时区很重要，日期和时间API提供&lt;code&gt;ZonedDateTime&lt;/code&gt;类。 顾名思义，这个类表示带有时区日期时间。 例如，你可以使用此类来计算位于不同时区的两个机场之间的飞行时间。&lt;/p&gt;
&lt;p&gt;然后有两个类来测量时间总计，即&lt;code&gt;Duration&lt;/code&gt;类和&lt;code&gt;Period&lt;/code&gt;类。 &lt;strong&gt;这两个类是相似的，除了&lt;code&gt;Duration&lt;/code&gt;是基于时间，但而&lt;code&gt;Period&lt;/code&gt;是基于日期的&lt;/strong&gt;。 &lt;code&gt;Duration&lt;/code&gt;提供了纳秒精度的时间量。 例如，可以模拟飞行时间，因为它通常以小时数和分钟数表示。 另一方面，如果只关心天数，月数或年数，例如计算一个人的年龄，则&lt;code&gt;Period&lt;/code&gt;更为适用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java.time&lt;/code&gt;包也带有两个枚举&lt;code&gt;DayOfWeek&lt;/code&gt;和&lt;code&gt;Month&lt;/code&gt;。 &lt;code&gt;DayOfWeek&lt;/code&gt;表示从一周的一天，从周一开始到周日。 &lt;code&gt;Month&lt;/code&gt;枚举代表这一年的十二个月，从1月到12月。&lt;/p&gt;
&lt;p&gt;处理日期和时间通常涉及解析和格式。 日期和时间API通过在所有主要类中提供&lt;code&gt;parse&lt;/code&gt;和&lt;code&gt;format&lt;/code&gt;方法来解决这两个问题。 另外，&lt;code&gt;java.time.format&lt;/code&gt;包含一个用于格式化日期和时间的&lt;code&gt;DateTimeFormatter&lt;/code&gt;类。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;Instant&lt;/code&gt;实例表示时间线上的一个点。 参考点是标准的Java纪元(epoch)，即1970-01-01T00：00：00Z（1970年1月1日00:00 GMT）。 &lt;code&gt;Instant类的&lt;/code&gt;EPOCH&lt;code&gt;属性返回表示Java纪元的&lt;/code&gt;Instant`实例。 在纪元之后的时间是正值，而在此之前的时间即是负值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Instant&lt;/code&gt;的静态&lt;code&gt;now&lt;/code&gt;方法返回一个表示当前时间的&lt;code&gt;Instant&lt;/code&gt;对象：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Instant now = Instant.now();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getEpochSecond&lt;/code&gt;方法返回自纪元以来经过的秒数。 &lt;code&gt;getNano&lt;/code&gt;方法返回自上一秒开始以来的纳秒数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Instant&lt;/code&gt;类的一个常用用途是用来操作时间，如以下代码所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.Duration;

import java.time.Instant;

public class InstantDemo1 {

    public static void main(String[] args) {

        Instant start = Instant.now();

        // do something here

        Instant end = Instant.now();

        System.out.println(Duration.between(start, end).toMillis());

    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上面代码所示，&lt;code&gt;Duration&lt;/code&gt;类用于返回两个&lt;code&gt;Instant&lt;/code&gt;之间时间数量的差异。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt;类只包括日期没有时间的部分。 它也没有时区。 下表显示了&lt;code&gt;LocalDate&lt;/code&gt;中一些重要的方法。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;16&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;now&lt;/td&gt;
&lt;td&gt;静态方法，返回今天的日期&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;of&lt;/td&gt;
&lt;td&gt; 从指定年份，月份和日期创建LocalDate的静态方法&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt; getDayOfMonth, getMonthValue, getYear&lt;/td&gt;
&lt;td&gt; 以int形式返回此LocalDate的日，月或年&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;getMonth&lt;/td&gt;
&lt;td&gt; 以Month枚举常量返回此LocalDate的月份&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusDays, minusDays&lt;/td&gt;
&lt;td&gt; 给LocalDate添加或减去指定的天数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;plusWeeks, minusWeeks&lt;/td&gt;
&lt;td&gt; 给LocalDate添加或减去指定的星期数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;plusMonths, minusMonths&lt;/td&gt;
&lt;td&gt; 给LocalDate添加或减去指定的月份数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusYears, minusYears&lt;/td&gt;
&lt;td&gt; 给LocalDate添加或减去指定的年数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; isLeapYear&lt;/td&gt;
&lt;td&gt; 检查LocalDate指定的年份是否为闰年&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; isAfter, isBefore&lt;/td&gt;
&lt;td&gt; 检查此LocalDate是在给定日期之后还是之前&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; lengthOfMonth&lt;/td&gt;
&lt;td&gt; 返回此LocalDate中月份的天数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withDayOfMonth&lt;/td&gt;
&lt;td&gt; 返回此LocalDate的拷贝，将月份中的某天设置为给定值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withMonth&lt;/td&gt;
&lt;td&gt; 返回此LocalDate的拷贝，其月份设置为给定值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withYear&lt;/td&gt;
&lt;td&gt; 返回此LocalDate的拷贝，并将年份设置为给定值&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt;提供了各种创建日期的方法。 例如，要创建代表今天日期的&lt;code&gt;LocalDate&lt;/code&gt;，使用静态&lt;code&gt;now&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDate today = LocalDate.now();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要创建代表特定年，月和日的&lt;code&gt;LocalDate&lt;/code&gt;，使用&lt;code&gt;of&lt;/code&gt;方法，该方法也是静态的。 例如，以下代码创建了一个代表2018年3月7日的&lt;code&gt;LocalDate&lt;/code&gt;实例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDate date = LocalDate.of(2018, 3, 7);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有一个接受&lt;code&gt;java.time.Month&lt;/code&gt;枚举的常量作为第二个参数的&lt;code&gt;of&lt;/code&gt;方法。 例如，下面是使用第二种方法重载构造相同日期的代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDate date = LocalDate.of(2018, Month.MARCH, 7);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有获取&lt;code&gt;LocalDate&lt;/code&gt;的日，月或年的方法，例如&lt;code&gt;getDayOfMonth&lt;/code&gt;，&lt;code&gt;getMonth&lt;/code&gt;，&lt;code&gt;getMonthValue&lt;/code&gt;和&lt;code&gt;getYear&lt;/code&gt;。 他们都没有任何参数，并返回一个int或&lt;code&gt;Month&lt;/code&gt;的枚举常量。 另外，还有一个&lt;code&gt;get&lt;/code&gt;方法，它接受一个&lt;code&gt;TemporalField&lt;/code&gt;并返回这个&lt;code&gt;LocalDate&lt;/code&gt;的一部分。 例如，传递&lt;code&gt;ChronoField.YEAR以&lt;/code&gt;获取&lt;code&gt;LocalDate&lt;/code&gt;的年份部分。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int year = localDate.get(ChronoField.YEAR);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ChronoField&lt;/code&gt;是一个实现&lt;code&gt;TemporalField&lt;/code&gt;接口的枚举，因此可以传递一个&lt;code&gt;ChronoField&lt;/code&gt;常量来获取。 &lt;code&gt;TemporalField&lt;/code&gt;和&lt;code&gt;ChronoField&lt;/code&gt;都是&lt;code&gt;java.time.temporal&lt;/code&gt;包的一部分。 但是，并非&lt;code&gt;ChronoField&lt;/code&gt;中的所有常量都可以&lt;code&gt;get&lt;/code&gt;获取，因为并非所有常量都受支持。 例如，传递&lt;code&gt;ChronoField.SECOND_OF_DAY&lt;/code&gt;以引发异常。 因此，取而代之，最好使用&lt;code&gt;getMonth&lt;/code&gt;，&lt;code&gt;getYear&lt;/code&gt;或类似方法来获取&lt;code&gt;LocalDate&lt;/code&gt;的组件。&lt;/p&gt;
&lt;p&gt;此外，还有拷贝&lt;code&gt;LocalDate&lt;/code&gt;的方法，例如&lt;code&gt;plusDays&lt;/code&gt;，&lt;code&gt;plusYears&lt;/code&gt;，&lt;code&gt;minusMonths&lt;/code&gt;等等。 例如，要获取表示明天的&lt;code&gt;LocalDate&lt;/code&gt;，可以创建一个代表今天的&lt;code&gt;LocalDat&lt;/code&gt;e，然后调用其&lt;code&gt;plusDays&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDate tomorrow = LocalDate.now().plusDays(1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要获取昨天表示的&lt;code&gt;LocalDate&lt;/code&gt;，可以使用&lt;code&gt;minusDays&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDate yesterday = LocalDate.now().minusDays(1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外，还有&lt;code&gt;plus&lt;/code&gt;和&lt;code&gt;minus&lt;/code&gt;方法以更通用的方式获得&lt;code&gt;LocalDate&lt;/code&gt;的拷贝。 两者都接受一个int参数和一个&lt;code&gt;TemporalUnit&lt;/code&gt;参数。 这些方法的签名如下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public LocalDate plus(long amountToAdd,

        java.time.temporal.TemporalUnit unit)

public LocalDate minus(long amountToSubtract,

        java.time.temporal.TemporalUnit unit)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如，获得一个从今天开始前20年的&lt;code&gt;LocalDate&lt;/code&gt;，可以使用这段代码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDate pastDate = LocalDate.now().minus(2, ChronoUnit.DECADES);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;是一个实现&lt;code&gt;TemporalUnit&lt;/code&gt;的枚举，因此可以将&lt;code&gt;ChronoUnit&lt;/code&gt;常量传递给&lt;code&gt;plus&lt;/code&gt;和&lt;code&gt;minus&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt;是不可变的，因此无法更改。 任何返回&lt;code&gt;LocalDate&lt;/code&gt;的方法都返回&lt;code&gt;LocalDate&lt;/code&gt;的新实例。&lt;/p&gt;
&lt;p&gt;以下是使用&lt;code&gt;LocalDate&lt;/code&gt;的例子。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.LocalDate;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;

public class LocalDateDemo1 {

    public static void main(String[] args) {
        LocalDate today = LocalDate.now();
         LocalDate tomorrow = today.plusDays(1);
         LocalDate oneDecadeAgo = today.minus(1, ChronoUnit.DECADES);

         System.out.println(&quot;Day of month: &quot; + today.getDayOfMonth());
         System.out.println(&quot;Today is &quot; + today);
         System.out.println(&quot;Tomorrow is &quot; + tomorrow);
         System.out.println(&quot;A decade ago was &quot; + oneDecadeAgo);
         System.out.println(&quot;Year : &quot; + today.get(ChronoField.YEAR));
         System.out.println(&quot;Day of year:&quot; + today.getDayOfYear());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;Period&lt;/code&gt;类基于日期的时间数量构建，例如五天，一周或三年。 下面列出了一些重要的方法。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;18&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; between&lt;/td&gt;
&lt;td&gt; 在两个LocalDates之间创建一个Period示例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt; ofDays, ofWeeks, ofMonths, ofYears&lt;/td&gt;
&lt;td&gt; 创建代表给定天数/周/月/年的Period实例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; of&lt;/td&gt;
&lt;td&gt; 根据给定的年数，月数和天数创建一个Period实例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt; getDays, getMonths, getYears&lt;/td&gt;
&lt;td&gt; 以int形式返回此Period的天数/月/年&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;isNegative&lt;/td&gt;
&lt;td&gt; 如果此Period的三个部分中的任何一个为负数，则返回true。 否则返回false&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; isZero&lt;/td&gt;
&lt;td&gt; 如果此Period的所有三个部分均为零，则返回true。 否则，返回false&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;plusDays, minusDays&lt;/td&gt;
&lt;td&gt; 在此Period上添加或减去给定的天数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt; plusMonths, minusMonths&lt;/td&gt;
&lt;td&gt; 在此Period上增加或减去给定的月数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusYears, minusYears&lt;/td&gt;
&lt;td&gt; 在此Period增加或减去给定的年数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withDays&lt;/td&gt;
&lt;td&gt; 以指定的天数返回此Period的拷贝&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withMonths&lt;/td&gt;
&lt;td&gt; 以指定的月数返回此Period的拷贝&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withYears&lt;/td&gt;
&lt;td&gt; 以指定的年数返回此Period的拷贝&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;创建一个&lt;code&gt;Period&lt;/code&gt;很简单，这要感谢&lt;code&gt;between&lt;/code&gt;,&lt;code&gt;of&lt;/code&gt;,&lt;code&gt;ofDays&lt;/code&gt; / &lt;code&gt;ofWeeks&lt;/code&gt; / &lt;code&gt;ofMonths&lt;/code&gt; / &lt;code&gt;ofYears&lt;/code&gt;等静态工厂方法。 例如，以下是如何创建代表两周的&lt;code&gt;Period&lt;/code&gt;实例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Period twoWeeks = Period.ofWeeks(2);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要创建代表一年两个月三天的&lt;code&gt;Period&lt;/code&gt;实例，请使用&lt;code&gt;of&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Period p = Period.of(1, 2, 3);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要获取某个期间的年/月/日组件，调用其&lt;code&gt;getYears&lt;/code&gt; / &lt;code&gt;getMonths&lt;/code&gt; / &lt;code&gt;getDays&lt;/code&gt;方法。 例如，以下代码中的&lt;code&gt;howManyDays&lt;/code&gt;变量的值是14。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Period twoWeeks = Period.ofWeeks(2);

int howManyDays = twoWeeks.getDays();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，可以使用&lt;code&gt;plusXXX&lt;/code&gt;或&lt;code&gt;minusXXX&lt;/code&gt;方法以及&lt;code&gt;withXXX&lt;/code&gt;方法来创建&lt;code&gt;Period&lt;/code&gt;的拷贝。 &lt;code&gt;Period&lt;/code&gt;是不可变的，所以这些方法返回新的&lt;code&gt;Period&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;例如，下面的代码显示了一个计算个人年龄的年龄计算器。 它从两个&lt;code&gt;LocalDate&lt;/code&gt;创建一个&lt;code&gt;Period&lt;/code&gt;并调用它的&lt;code&gt;getDays&lt;/code&gt;，&lt;code&gt;getMonths&lt;/code&gt;和&lt;code&gt;getYears&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.LocalDate;
import java.time.Period;

public class PeriodDemo1 {
    public static void main(String[] args) {
        LocalDate dateA = LocalDate.of(1978, 8, 26);
        LocalDate dateB = LocalDate.of(1988, 9, 28);
        Period period = Period.between(dateA, dateB);
        System.out.printf(&quot;Between %s and %s&quot;
                + &quot; there are %d years, %d months&quot;
                + &quot; and %d days%n&quot;, dateA, dateB,
                period.getYears(),
                period.getMonths(),
                period.getDays());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行&lt;code&gt;PeriodDemo1&lt;/code&gt;类打印下面字符串。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Between 1978-08-26 and 1988-09-28 there are 10 years, 1 months and 2 days&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;LocalDateTime&lt;/code&gt;类是一个没有时区的日期时间的构建。 下表显示了&lt;code&gt;LocalDateTime&lt;/code&gt;中一些重要的方法。 这些方法类似于&lt;code&gt;LocalDate&lt;/code&gt;的方法，以及用于修改时间部分的一些其他方法，例如在&lt;code&gt;LocalDate&lt;/code&gt;中不可用的&lt;code&gt;plusHours&lt;/code&gt;，&lt;code&gt;plusMinutes&lt;/code&gt;和&lt;code&gt;plusSeconds&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;24.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;now&lt;/td&gt;
&lt;td&gt; 返回当前日期和时间的静态方法。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;of&lt;/td&gt;
&lt;td&gt; 从指定年份，月份，日期，小时，分钟，秒和毫秒创建LocalDateTime的静态方法。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;9&quot;&gt;&lt;td&gt; getYear, getMonthValue, getDayOfMonth, getHour, getMinute, getSecond&lt;/td&gt;
&lt;td&gt; 以int形式返回此LocalDateTime的年，月，日，小时，分钟或秒部分。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusDays, minusDays&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的天数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusWeeks, minusWeeks&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的周数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt; plusMonths, minusMonths&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的月数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;plusYears, minusYears&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的年数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusHours, minusHours&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的小时数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;5&quot;&gt;&lt;td&gt; plusMinutes, minusMinutes&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的分钟数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt; plusSeconds, minusSeconds&lt;/td&gt;
&lt;td&gt; 给当前LocalDateTime添加或减去指定的秒数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; IsAfter, isBefore&lt;/td&gt;
&lt;td&gt; 检查此LocalDateTime是否在指定的日期时间之后或之前&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withDayOfMonth&lt;/td&gt;
&lt;td&gt; 返回此LocalDateTime的拷贝，并将月份中的某天设置为指定值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withMonth, withYear&lt;/td&gt;
&lt;td&gt; 返回此LocalDateTime的拷贝，其月或年设置为指定值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt; withHour, withMinute, withSecond&lt;/td&gt;
&lt;td&gt; 返回此LocalDateTime的拷贝，其小时/分钟/秒设置为指定值&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;LocalDateTime&lt;/code&gt;提供了各种静态方法来创建日期时间。 该方法现在带有三个重载方法返回当前的日期时间。 无参的方法是最容易使用的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDateTime now = LocalDateTime.now();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要创建具有特定日期和时间的&lt;code&gt;LocalDateTime&lt;/code&gt;，请使用&lt;code&gt;of&lt;/code&gt;方法。 此方法有多个重载，并允许传递日期时间或&lt;code&gt;LocalDate&lt;/code&gt;和&lt;code&gt;LocalTime&lt;/code&gt;的单个部分。 以下是一些方法的签名。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static LocalDateTime of(int year, int month, int dayOfMonth,
        int hour, int minute)

public static LocalDateTime of(int year, int month, int dayOfMonth,
        int hour, int minute)

public static LocalDateTime of(int year, Month month,
        int dayOfMonth, int hour, int minute)

public static LocalDateTime of(int year, Month month,
        int dayOfMonth, int hour, int minute)

public static LocalDateTime of(LocalDate date, LocalTime time)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如，下面的代码段创建一个&lt;code&gt;LocalDateTime&lt;/code&gt;，代表2015年12月31日早上八点。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDateTime endOfYear = LocalDateTime.of(2015, 12, 31, 8, 0);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以使用&lt;code&gt;plusXXX&lt;/code&gt;或&lt;code&gt;minusXXX&lt;/code&gt;方法创建&lt;code&gt;LocalDateTime&lt;/code&gt;的拷贝。 例如，此代码创建一个&lt;code&gt;LocalDateTime&lt;/code&gt;，它表示明天的同一时间。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;LocalDateTime now = LocalDateTime.now();

LocalDateTime sameTimeTomorrow = now.plusHours(24);&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;互联网数字分配机构（IANA）维护一个可从此网页下载的时区数据库：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[http://www.iana.org/time-zones](http://www.iana.org/time-zones)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但为了便于查看，可以访问此Wikipedia页面：&lt;br/&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java日期和时间API也适用于时区。 抽象类&lt;code&gt;ZoneId&lt;/code&gt;（在&lt;code&gt;java.time&lt;/code&gt;包中）表示一个区域标识符。 它有一个名为&lt;code&gt;getAvailableZoneIds&lt;/code&gt;的静态方法，它返回所有区域标识符。 下面展示了如何使用这种方法打印所有时区的排序列表。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

public class TimeZoneDemo1 {
    public static void main(String[] args) {
        Set&amp;lt;String&amp;gt; allZoneIds = ZoneId.getAvailableZoneIds();
        List&amp;lt;String&amp;gt; zoneList = new ArrayList&amp;lt;&amp;gt;(allZoneIds);
        Collections.sort(zoneList);      
        for (String zoneId : zoneList) {
            System.out.println(zoneId);
        }
        // alternatively, you can use this line of code to
        // print a sorted list of zone ids
        // ZoneId.getAvailableZoneIds().stream().sorted().
        //        forEach(System.out::println);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getAvailableZoneIds&lt;/code&gt;返回字符串的&lt;code&gt;Set&lt;/code&gt;集合。 可以使用&lt;code&gt;Collections.sort()&lt;/code&gt;或更优雅地通过调用它的&lt;code&gt;stream&lt;/code&gt;方法对&lt;code&gt;Set&lt;/code&gt;进行排序。 可以编写此代码对区域标识符进行排序。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ZoneId.getAvailableZoneIds().stream().sorted()
        .forEach(System.out::println);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getAvailableZoneIds&lt;/code&gt;返回586个区域标识符的&lt;code&gt;Set&lt;/code&gt;集合。 以下是上述代码中的一部分区域标识符。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Africa/Cairo
Africa/Johannesburg
America/Chicago
America/Los_Angeles
America/Mexico_City
America/New_York
America/Toronto
Antarctica/South_Pole
Asia/Hong_Kong
Asia/Shanghai
Asia/Tokyo
Australia/Melbourne
Australia/Sydney
Canada/Atlantic
Europe/Amsterdam
Europe/London
Europe/Paris
US/Central
US/Eastern
US/Pacific&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;ZonedDateTime&lt;/code&gt;类以一个时区为日期时间的构建。例如，以下是一个时区的日期时间:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2015-12-31T10:59:59+01:00 Europe/Paris&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ZonedDateTime&lt;/code&gt;始终是不可变的，时间分量的存储精度为纳秒。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZonedDateTIme&lt;/code&gt;中一些重要方法的使用与&lt;code&gt;LocalDateTime&lt;/code&gt;类似，只是多了一个时区的概念。可自行查阅API。&lt;/p&gt;
&lt;p&gt;像&lt;code&gt;LocalDateTime&lt;/code&gt;一样，&lt;code&gt;ZonedDateTime&lt;/code&gt;类现在提供静态&lt;code&gt;now&lt;/code&gt;和&lt;code&gt;of&lt;/code&gt;方法，并构造一个&lt;code&gt;ZonedDateTime&lt;/code&gt;实例。 &lt;code&gt;now&lt;/code&gt;方法创建一个&lt;code&gt;ZonedDateTime&lt;/code&gt;代表执行的日期和时间。 无参&lt;code&gt;now&lt;/code&gt;方法会使用计算机的默认时区创建&lt;code&gt;ZonedDateTime&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ZonedDateTime now = ZonedDateTime.now();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;now&lt;/code&gt;的另一个重载方法允许传递区域标识符：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ZonedDateTime parisTime =
        ZonedDateTime.now(ZoneId.of(&quot;Europe/Paris&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;of&lt;/code&gt;方法也有好几个重载的方法。在所有情况下，都需要传递区域标识符。 第一个重载方法允许传递时区日期时间的每个部分，从年份到纳秒。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static ZonedDateTime of(int year, int month, int dayOfMonth,
        int hour, int minute, int second, int nanosecond,
        ZoneId zone)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;of&lt;/code&gt;方法的第二个重载方法需要&lt;code&gt;LocalDate&lt;/code&gt;，&lt;code&gt;LocalTime&lt;/code&gt;和&lt;code&gt;ZoneId&lt;/code&gt;参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static ZonedDateTime of(LocalDate date, LocalTime time,
        ZoneId zone)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;of&lt;/code&gt;方法的最后一个重载方法需要&lt;code&gt;LocalDateTime&lt;/code&gt;和&lt;code&gt;ZoneId&lt;/code&gt;参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static ZonedDateTime of(LocalDateTime datetime, ZoneId zone)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;像&lt;code&gt;LocalDate&lt;/code&gt;和&lt;code&gt;LocalDateTime&lt;/code&gt;一样，&lt;code&gt;ZonedDateTime&lt;/code&gt;提供了使用&lt;code&gt;plusXXX&lt;/code&gt;，&lt;code&gt;minusXXX&lt;/code&gt;和&lt;code&gt;withXXX&lt;/code&gt;方法创建实例拷贝的方法。&lt;/p&gt;
&lt;p&gt;例如，下面代码行创建一个带默认时区的&lt;code&gt;ZonedDateTime&lt;/code&gt;，并调用它的&lt;code&gt;minusDays&lt;/code&gt;方法以在三天前创建相同的&lt;code&gt;ZonedDateTime&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ZonedDateTime now = ZonedDateTime.now();
ZonedDateTime threeDaysEarlier = now.minusDays(3);&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;Duration&lt;/code&gt;类是基于时间的持续时间的构建。 它与&lt;code&gt;Period&lt;/code&gt;类似，不同之处在于&lt;code&gt;Duration&lt;/code&gt;的时间分量为纳秒精度，并考虑了&lt;code&gt;ZonedDateTime&lt;/code&gt;实例之间的时区。 下表显示了&lt;code&gt;Duration&lt;/code&gt;中重要的方法。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;18.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;between&lt;/td&gt;
&lt;td&gt; 在两个时差的对象之间创建一个Duration实例，例如在两个LocalDateTime或两个ZonedDateTime之间。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;11&quot;&gt;&lt;td&gt; ofYears, ofMonths, ofWeeks, ofDays, ofHours, ofMinutes, ofSeconds, ofNano&lt;/td&gt;
&lt;td&gt; 创建给定年数/月/周/天/小时/分钟/秒/纳秒的Duration实例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; of&lt;/td&gt;
&lt;td&gt; 根据指定数量的时间单位创建Duration实例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt; toDays, toHours, toMinutes&lt;/td&gt;
&lt;td&gt; 以int形式返回此Duration的天数/小时/分钟数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; isNegative&lt;/td&gt;
&lt;td&gt; 如果此Duration为负，则返回true。 否则返回false。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; isZero&lt;/td&gt;
&lt;td&gt; 如果此Duration长度为零，则返回true。 否则，返回false&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusDays, minusDays&lt;/td&gt;
&lt;td&gt; 在此Duration内添加或减去指定的天数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt; plusMonths, minusMonths&lt;/td&gt;
&lt;td&gt; 在此Duration内添加或减去指定的月数。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt; plusYears, minusYears&lt;/td&gt;
&lt;td&gt; 在Duration内添加或减去指定的年数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt; withSeconds&lt;/td&gt;
&lt;td&gt; 以指定的秒数返回此Duration的拷贝。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以通过调用静态方法&lt;code&gt;between&lt;/code&gt;或&lt;code&gt;of&lt;/code&gt;来创建&lt;code&gt;Duration&lt;/code&gt;。 下面的代码会在2015年1月26日11:10至2015年1月26日12:40之间创建两个&lt;code&gt;LocalDateTime&lt;/code&gt;的&lt;code&gt;Duration&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.Duration;
import java.time.LocalDateTime;

public class DurationDemo1 {
    public static void main(String[] args) {
        LocalDateTime dateTimeA = LocalDateTime
                .of(2015, 1, 26, 8, 10, 0, 0);
        LocalDateTime dateTimeB = LocalDateTime
                .of(2015, 1, 26, 11, 40, 0, 0);
        Duration duration = Duration.between(
                dateTimeA, dateTimeB);

        System.out.printf(&quot;There are %d hours and %d minutes.%n&quot;,
                duration.toHours(),
                duration.toMinutes() % 60);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行&lt;code&gt;DurationDemo1&lt;/code&gt;类的结果是这样的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;There are 3 hours and 30 minutes.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面的代码在两个&lt;code&gt;ZoneDateTime&lt;/code&gt;之间创建一个&lt;code&gt;Duration&lt;/code&gt;，具有相同的日期和时间，但时区不同。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.Duration;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class DurationDemo2 {
    public static void main(String[] args) {
        ZonedDateTime zdt1 = ZonedDateTime.of(
                LocalDateTime.of(2015, Month.JANUARY, 1,
                        8, 0),
                ZoneId.of(&quot;America/Denver&quot;));
        ZonedDateTime zdt2 = ZonedDateTime.of(
                LocalDateTime.of(2015, Month.JANUARY, 1,
                        8, 0),
                ZoneId.of(&quot;America/Toronto&quot;));

        Duration duration = Duration.between(zdt1, zdt2);
        System.out.printf(&quot;There are %d hours and %d minutes.%n&quot;,
                duration.toHours(),
                duration.toMinutes() % 60);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行&lt;code&gt;DurationDemo2&lt;/code&gt;类在控制台上打印如下结果。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;There are -2 hours and 0 minutes.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是预料之中的，因为时区&lt;code&gt;America/Denver&lt;/code&gt;和&lt;code&gt;America/Toronto&lt;/code&gt;之间有两个小时的差异。&lt;/p&gt;
&lt;p&gt;作为一个更复杂的例子，下面的代码显示了一个公交车旅行时间计算器。 它有一个方法&lt;code&gt;calculateTravelTime&lt;/code&gt;，它需要一个离开的&lt;code&gt;ZonedDateTime&lt;/code&gt;实例和一个到达的&lt;code&gt;ZonedDateTime&lt;/code&gt;实例。 该代码调用&lt;code&gt;calculateTravelTime&lt;/code&gt;方法两次。 这两次公交车都在丹佛早上8点从科罗拉多州丹佛出发，并于多伦多时间第二天早上8点抵达多伦多。 公交车首次于2014年3月8日启程，第二次于2014年3月18日启程。&lt;/p&gt;
&lt;p&gt;两种情况下的旅行时间是多少?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.Duration;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class TravelTimeCalculator {
    public Duration calculateTravelTime(
            ZonedDateTime departure, ZonedDateTime arrival) {
        return Duration.between(departure, arrival);
    }

    public static void main(String[] args) {
        TravelTimeCalculator calculator =
                new TravelTimeCalculator();
        ZonedDateTime departure1 = ZonedDateTime.of(
                LocalDateTime.of(2014, Month.MARCH, 8,
                        8, 0),
                ZoneId.of(&quot;America/Denver&quot;));
        ZonedDateTime arrival1 = ZonedDateTime.of(
                LocalDateTime.of(2014, Month.MARCH, 9,
                        8, 0),
                ZoneId.of(&quot;America/Toronto&quot;));
        Duration travelTime1 = calculator
                .calculateTravelTime(departure1, arrival1);
        System.out.println(&quot;Travel time 1: &quot;
                + travelTime1.toHours() + &quot; hours&quot;);

        ZonedDateTime departure2 = ZonedDateTime.of(
                LocalDateTime.of(2014, Month.MARCH, 18,
                        8, 0),
                ZoneId.of(&quot;America/Denver&quot;));
        ZonedDateTime arrival2 = ZonedDateTime.of(
                LocalDateTime.of(2014, Month.MARCH, 19,
                        8, 0),
                ZoneId.of(&quot;America/Toronto&quot;));
        Duration travelTime2 = calculator
                .calculateTravelTime(departure2, arrival2);
        System.out.println(&quot;Travel time 2: &quot;
                + travelTime2.toHours() + &quot; hours&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Travel time 1: 21 hours

Travel time 2: 22 hours&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么有这个区别？ 因为2014年的夏令时从3月9日星期日凌晨2点开始。 因此，在2014年3月8日至2014年3月9日之间“失去”了一小时。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;可以使用&lt;code&gt;java.time.format.DateTimeFormatter&lt;/code&gt;格式化本地或时区日期时间。&lt;code&gt;LocalDate&lt;/code&gt;，&lt;code&gt;LocalDateTime&lt;/code&gt;，&lt;code&gt;LocalTime&lt;/code&gt;和&lt;code&gt;ZoneDateTime&lt;/code&gt;类提供具有以下签名的格式方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public java.lang.String format(java.time.format.DateTimeFormatter
        formatter)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很明显，要格式化日期或时间，必须首先创建&lt;code&gt;DateTimeFormatter&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;下面的代码使用两个格式化实例格式化当前日期。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;

public class DateTimeFormatterDemo1 {
    public static void main(String[] args) {
        DateTimeFormatter formatter1 = DateTimeFormatter
                .ofLocalizedDateTime(FormatStyle.MEDIUM);
        LocalDateTime example = LocalDateTime.of(
                2000, 3, 19, 10, 56, 59);
        System.out.println(&quot;Format 1: &quot; + example
                .format(formatter1));       

        DateTimeFormatter formatter2 = DateTimeFormatter
                .ofPattern(&quot;MMMM dd, yyyy HH:mm:ss&quot;);
        System.out.println(&quot;Format 2: &quot; +
                example.format(formatter2));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下：（第一个结果取决于你的区域设置）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Format 1: 19-Mar-2000 10:56:59 AM

Format 2: March 19, 2000 10:56:59&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;在Java Date和Time API的许多类中有两种&lt;code&gt;parse&lt;/code&gt;方法。第一个需要格式化实例，第二个则不需要。后一个方法会根据默认模式解析日期时间。要使用自己的格式化模式，请使用&lt;code&gt;DateTimeFormatter&lt;/code&gt;。如果传递的字符串不能被解析，那么解析方法将抛出一个&lt;code&gt;DateTimeParseException&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Scanner;

public class AgeCalculator {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-M-d&quot;);
    public Period calculateAge(LocalDate birthday) {
        LocalDate today = LocalDate.now();
        return Period.between(birthday, today);
    }

    public LocalDate getBirthday() {
        Scanner scanner = new Scanner(System.in);
        LocalDate birthday;
        while (true) {
            System.out.println(&quot;Please enter your birthday &quot;
                    + &quot;in yyyy-MM-dd format (e.g. 1980-9-28): &quot;);
            String input = scanner.nextLine();
            try {
                birthday = LocalDate.parse(input, formatter);
                return birthday;
            } catch(DateTimeParseException e) {
                System.out.println(&quot;Error! Please try again&quot;);
            }
        }
    }

    public static void main(String[] args) {
        AgeCalculator ageCalculator = new AgeCalculator();
        LocalDate birthday = ageCalculator.getBirthday();
        Period age = ageCalculator.calculateAge(birthday);
        System.out.printf(&quot;Today you are %d years, %d months&quot;
                + &quot; and %d days old%n&quot;,
                age.getYears(), age.getMonths(), age.getDays());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AgeCalculator&lt;/code&gt;类有两个方法，&lt;code&gt;getBirthday&lt;/code&gt;和&lt;code&gt;calculateAge&lt;/code&gt;。 &lt;code&gt;getBirthday&lt;/code&gt;方法使用&lt;code&gt;Scanner&lt;/code&gt;类来读取用户输入，并使用&lt;code&gt;DateTimeFormatter&lt;/code&gt;类将输入解析到&lt;code&gt;LocalDate&lt;/code&gt;中。 &lt;code&gt;getBirthday&lt;/code&gt;方法一直请求一个日期，直到用户输入正确格式的日期，在这种情况下，方法返回。 &lt;code&gt;calculateAge&lt;/code&gt;方法需要一个生日，并在生日和今天的日期之间创建一个&lt;code&gt;Period&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;如果运行这个例子，会在控制台上看到这个。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Please enter your birthday in yyyy-MM-dd format (e.g. 1980-9-28):&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果以正确的格式输入日期，则程序将打印计算的年龄，如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Today you are 79 years, 0 months and 15 days old&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;Java 8带来了全新的Date-Time API来替代以&lt;code&gt;java.util.Date&lt;/code&gt;类为中心的旧的API。 通过本篇文章，学习如何使用新API中的核心类，如&lt;code&gt;Instant&lt;/code&gt;，&lt;code&gt;LocalDate&lt;/code&gt;，&lt;code&gt;LocalDateTime&lt;/code&gt;，&lt;code&gt;ZonedDateTime&lt;/code&gt;，&lt;code&gt;Period&lt;/code&gt;和&lt;code&gt;Duration&lt;/code&gt;，以及学习如何格式化和解析日期时间。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Mar 2018 06:03:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8539007.html</dc:identifier>
</item>
<item>
<title>DirectSound---音效使用 - lgxZJ</title>
<link>http://www.cnblogs.com/lgxZJ/p/8538983.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lgxZJ/p/8538983.html</guid>
<description>&lt;p&gt;DirectSound以DMO（DirectX Nedua Objects）的方式提供了对原始音频数据的处理，开发者能够通过VC6.0里的&lt;code&gt;Audio Effect DMO Wizard&lt;/code&gt;来开发自定义的DMO。实际上这个DMO开发向导已经不在Visual Studio里面提供了，并且已经被MFT（Media Foundation Transforms）替代了，但这个不是我们今天的重点。&lt;/p&gt;
&lt;p&gt;除此之外，DirectSound提供了以下标准DMO音效（原谅鄙人对音效这块不是很了解，因此没有翻译这些术语）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Chorus&lt;/li&gt;
&lt;li&gt;Compression&lt;/li&gt;
&lt;li&gt;Distortion&lt;/li&gt;
&lt;li&gt;Echo&lt;/li&gt;
&lt;li&gt;Environmental Reverberation&lt;/li&gt;
&lt;li&gt;Flange&lt;/li&gt;
&lt;li&gt;Gargle&lt;/li&gt;
&lt;li&gt;Parametric Equalizer&lt;/li&gt;
&lt;li&gt;Waves Reverberation&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;音效使用逻辑&quot;&gt;1. 音效使用逻辑&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/03/10/5aa361baf116b.png&quot; alt=&quot;logic-pic&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有标准音效都按照一致的方式来使用，首先先调用&lt;code&gt;DirectSoundCreate8()&lt;/code&gt;获取设备对象接口并设置协作级别：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (DirectSoundCreate8(&amp;amp;DSDEVID_DefaultPlayback, &amp;amp;m_directSound8, NULL) != DS_OK) {
    throw std::exception(&quot;Error: maybe no default audio device in your system&quot;);
}

if (m_directSound8-&amp;gt;SetCooperativeLevel(windowHandle, DSSCL_PRIORITY) != DS_OK) {
    throw std::exception(&quot;set cooperative level on default audio device failed!&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;容纳后通过设备对象接口获取播放声音的次缓冲区接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (soundBuffer-&amp;gt;QueryInterface(IID_IDirectSoundBuffer8, (LPVOID*)&amp;amp;m_soundBufferInterface) != S_OK)
    throw std::exception(&quot;IDirectSoundBuffer8 interface not supported!&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着通过次缓冲区接口的&lt;code&gt;GetObjectInPath()&lt;/code&gt;函数获取想要的音效接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;IUnknown* interfacePtr;
if (m_soundBufferInterface-&amp;gt;GetObjectInPath( guid, guidIndex, interfaceGuidMaps[guid], (LPVOID*)&amp;amp;interfacePtr ) != DS_OK)
    throw std::exception( &quot;GetObjectInPath error&quot; );&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，调用&lt;code&gt;SetFX()&lt;/code&gt;函数， 传入类型为&lt;strong&gt;DSEFFECTDESC&lt;/strong&gt;的音效参数一个或多个音效参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;DSEFFECTDESC effectDescriptions = { 0 };
effectDescriptions.dwSize = sizeof(effectDescriptions);
effectDescriptions.dwFlags = DSFX_LOCSOFTWARE;
effectDescriptions.guidDSFXClass = effectGuid;

...

auto callResult = m_soundBufferInterface-&amp;gt;SetFX(m_effects.size(), m_effects.data(), resultCodes.data());
if (callResult != DS_OK) {
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;chorus音效简介&quot;&gt;2. Chorus音效简介&lt;/h2&gt;
&lt;p&gt;Chorus音效即合声，标准音效参数由以下几个参数构成：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Wet/Dry 比例：Wet代指被音效处理过的音频信号；Dry代指原始的音频信号。&lt;/li&gt;
&lt;li&gt;Depth： 延迟时间被低频振荡器调整的百分比。&lt;/li&gt;
&lt;li&gt;Feedback： 输出音频信号&lt;strong&gt;反馈&lt;/strong&gt;到音效输入的百分比。&lt;/li&gt;
&lt;li&gt;Fraquency： 低频振荡器的&lt;strong&gt;频率&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Waveform： 低频振荡器的&lt;strong&gt;波形形状&lt;/strong&gt;：三角、正弦。&lt;/li&gt;
&lt;li&gt;Delay： 音效的延迟播放时间。&lt;/li&gt;
&lt;li&gt;Phase： 左右低频振荡器的&lt;strong&gt;相位差&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;chorus音效展示&quot;&gt;3. Chorus音效展示&lt;/h2&gt;
&lt;p&gt;Demo中我只实现了Chorus音效的应用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/03/10/5aa361bb5ed7b.png&quot; alt=&quot;result-pic&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家可以编译完整&lt;a href=&quot;https://github.com/lgxZJ/Miscellaneous/tree/master/Audio/DirectSoundPlay&quot;&gt;代码&lt;/a&gt;来体验一下。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Mar 2018 05:59:00 +0000</pubDate>
<dc:creator>lgxZJ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lgxZJ/p/8538983.html</dc:identifier>
</item>
<item>
<title>[前端]如何写一个水平导航栏？（浮动、inline-block+消除间距） - fengzw</title>
<link>http://www.cnblogs.com/fengziwei/p/8538964.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fengziwei/p/8538964.html</guid>
<description>&lt;p&gt;在看W3school时，看到一个很好的例子，如何制作一个水平的导航栏？没有任何要求，只需要达到下面的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234089/201803/1234089-20180310133246597-742849325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我认为这个例子包含了很多css布局需要了解的知识，因此单独写一下。&lt;/p&gt;

&lt;p&gt;W3school上面的方法是这样的——全部设置浮动：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
ul
&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
list-style-type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
li
&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
a
&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#dddddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#home&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Home&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#news&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;News&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#contact&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Contact&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#about&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;About&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个涉及到浮动的知识，这里不详述了。但是，还有没有其他方法呢？我想到另外一种方法，不用ul，直接把a设置为inline-block不就行了吗（原本的inline显然不行，因为不能设置长度，会导致大小不一）？&lt;/p&gt;
&lt;p&gt;于是，我把代码改成了下面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
a
&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;inline-block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;#dddddd&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#home&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Home&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#news&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;News&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#contact&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Contact&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#about&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;About&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，得出来的结果不如人意：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234089/201803/1234089-20180310133952870-150078367.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;中间的间隙并不是我想要的（虽然实际开发中这些间隙也许会使布局更加美观），但这些间隙是因何而来？我上网查了一下，发现原来inline-block之间出现间隙的原因是标签之间的空格：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#news&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;像这里两行之间就会被视作一个空格了，我们&lt;span&gt;&lt;strong&gt;只需要消除HTML标签之间的空格&lt;/strong&gt;&lt;/span&gt;就可以解决这个问题了。&lt;/p&gt;
&lt;p&gt;这个网址很好地概括了消除inline-block元素间间距的方法：&lt;/p&gt;
&lt;p&gt;http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/&lt;/p&gt;
&lt;p&gt;其中，我认为第一种方法是最好的：&lt;/p&gt;
&lt;p&gt;像这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#home&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
Home&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#news&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
News&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#contact&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
Contact&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#about&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
About&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#home&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Home&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a
&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#news&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;News&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a
&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#contact&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Contact&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a
&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#about&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;About&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再或者使用注释：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#home&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Home&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#news&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;News&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#contact&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Contact&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#about&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;About&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样，我们就有两种方法写水平导航条了。当然方法还有很多，这篇博客最主要还是用来提及消除inline-block元素间间距的方法。&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 05:53:00 +0000</pubDate>
<dc:creator>fengzw</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fengziwei/p/8538964.html</dc:identifier>
</item>
<item>
<title>如何在Java应用中提交Spark任务？ - xingoo</title>
<link>http://www.cnblogs.com/xing901022/p/8538713.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xing901022/p/8538713.html</guid>
<description>&lt;blockquote readability=&quot;6.8458149779736&quot;&gt;
&lt;p&gt;最近看到有几个Github友关注了Streaming的监控工程——&lt;a href=&quot;https://github.com/xinghalo/Teddy&quot;&gt;Teddy&lt;/a&gt;，所以思来想去还是优化下代码，不能让别人看笑话啊。于是就想改一下之前觉得最丑陋的一个地方——任务提交。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博客内容基于Spark2.2版本~在阅读文章并想实际操作前，请确保你有：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一台配置好Spark和yarn的服务器&lt;/li&gt;
&lt;li&gt;支持正常&lt;code&gt;spark-submit --master yarn xxxx&lt;/code&gt;的任务提交&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;老版本&quot;&gt;老版本&lt;/h2&gt;
&lt;p&gt;老版本任务提交是基于 ** 启动本地进程，执行脚本&lt;code&gt;spark-submit xxx&lt;/code&gt; ** 的方式做的。其中一个关键的问题就是获得提交Spark任务的Application-id，因为这个id是跟任务状态的跟踪有关系的。如果你的资源管理框架用的是yarn，应该知道每个运行的任务都有一个applicaiton_id，这个id的生成规则是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;appplication_时间戳_数字&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;老版本的spark通过修改SparkConf参数&lt;code&gt;spark.app.id&lt;/code&gt;就可以手动指定id，新版本的代码是直接读取的taskBackend中的applicationId()方法，这个方法具体的实现是根据实现类来定的。在yarn中，是通过Yarn的&lt;a href=&quot;https://github.com/apache/spark/blob/e1dd03e42c2131b167b1e80c761291e88bfdf03f/resource-managers/yarn/src/main/scala/org/apache/spark/scheduler/cluster/YarnClusterSchedulerBackend.scala&quot;&gt;YarnClusterSchedulerBackend&lt;/a&gt;实现的，具体的实现逻辑可以参考对应的链接。&lt;/p&gt;
&lt;p&gt;感兴趣的同学可以看一下，生成applicaiton_id的逻辑在hadoop-yarn工程的&lt;a href=&quot;https://github.com/apache/hadoop/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java#L235:9&quot;&gt;ContainerId&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;总结一句话就是，想要自定义id，甭想了！！！！&lt;/p&gt;
&lt;p&gt;于是当时脑袋瓜不灵光的我，就想到那就等应用创建好了之后，直接写到数据库里面呗。怎么写呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;我事先生成一个自定义的id，当做参数传递到spark应用里面；&lt;/li&gt;
&lt;li&gt;等spark初始化后，就可以通过sparkContext取得对应的application_id以及url&lt;/li&gt;
&lt;li&gt;然后再driver连接数据库，插入一条关联关系&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1520663216361&amp;amp;di=faaed026704410c07a4aaa0d0c4e2476&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fn1.cmsfile.pg0.cn%2Fgroup1%2FM00%2F4C%2FDA%2FCgqg11jPNv-AOu9IAABG3wSHAGk838.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;新版本&quot;&gt;新版本&lt;/h2&gt;
&lt;p&gt;还是归结于互联网时代的信息大爆炸，我看到群友的聊天，知道了SparkLauncer这个东西，调查后发现他可以基于Java代码自动提交Spark任务。SparkLauncher支持两种模式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;new SparkLauncher().launch() 直接启动一个Process，效果跟以前一样&lt;/li&gt;
&lt;li&gt;new SparkLauncher().startApplicaiton(监听器) 返回一个SparkAppHandler，并（可选）传入一个监听器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当然是更倾向于第二种啦，因为好处很多：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;自带输出重定向（Output，Error都有，支持写到文件里面），超级爽的功能&lt;/li&gt;
&lt;li&gt;可以自定义监听器，当信息或者状态变更时，都能进行操作（对我没啥用）&lt;/li&gt;
&lt;li&gt;返回的SparkAppHandler支持 暂停、停止、断连、获得AppId、获得State等多种功能，我就想要这个！！！！&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1520663539399&amp;amp;di=3d169e319fe276ba90f10ea752693b91&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170105%2F44f3e927cee34c2e8617cc8c80900405_th.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一步一步代码展示&quot;&gt;一步一步，代码展示&lt;/h2&gt;
&lt;p&gt;首先创建一个最基本的Spark程序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import org.apache.spark.sql.SparkSession;
import java.util.ArrayList;
import java.util.List;

public class HelloWorld {
    public static void main(String[] args) throws InterruptedException {
        SparkSession spark = SparkSession
                .builder()
                //.master(&quot;yarn&quot;)
                //.appName(&quot;hello-wrold&quot;)
                //.config(&quot;spark.some.config.option&quot;, &quot;some-value&quot;)
                .getOrCreate();

        List&amp;lt;Person&amp;gt; persons = new ArrayList&amp;lt;&amp;gt;();

        persons.add(new Person(&quot;zhangsan&quot;, 22, &quot;male&quot;));
        persons.add(new Person(&quot;lisi&quot;, 25, &quot;male&quot;));
        persons.add(new Person(&quot;wangwu&quot;, 23, &quot;female&quot;));


        spark.createDataFrame(persons, Person.class).show(false);

        spark.close();

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后创建SparkLauncher类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import org.apache.spark.launcher.SparkAppHandle;
import org.apache.spark.launcher.SparkLauncher;

import java.io.IOException;

public class Launcher {
    public static void main(String[] args) throws IOException {
        SparkAppHandle handler = new SparkLauncher()
                .setAppName(&quot;hello-world&quot;)
                .setSparkHome(args[0])
                .setMaster(args[1])
                .setConf(&quot;spark.driver.memory&quot;, &quot;2g&quot;)
                .setConf(&quot;spark.executor.memory&quot;, &quot;1g&quot;)
                .setConf(&quot;spark.executor.cores&quot;, &quot;3&quot;)
                .setAppResource(&quot;/home/xinghailong/launcher/launcher_test.jar&quot;)
                .setMainClass(&quot;HelloWorld&quot;)
                .addAppArgs(&quot;I come from Launcher&quot;)
                .setDeployMode(&quot;cluster&quot;)
                .startApplication(new SparkAppHandle.Listener(){
                    @Override
                    public void stateChanged(SparkAppHandle handle) {
                        System.out.println(&quot;**********  state  changed  **********&quot;);
                    }

                    @Override
                    public void infoChanged(SparkAppHandle handle) {
                        System.out.println(&quot;**********  info  changed  **********&quot;);
                    }
                });


        while(!&quot;FINISHED&quot;.equalsIgnoreCase(handler.getState().toString()) &amp;amp;&amp;amp; !&quot;FAILED&quot;.equalsIgnoreCase(handler.getState().toString())){
            System.out.println(&quot;id    &quot;+handler.getAppId());
            System.out.println(&quot;state &quot;+handler.getState());

            try {
                Thread.sleep(10000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后打包工程，打包过程可以参考之前的博客：&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/xing901022/p/7891867.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/xing901022/p/7891867.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打包完成后上传到部署Spark的服务器上。由于SparkLauncher所在的类引用了SparkLauncher，所以还需要把这个jar也上传到服务器上。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[xinghailong@hnode10 launcher]$ ls
launcher_test.jar  spark-launcher_2.11-2.2.0.jar
[xinghailong@hnode10 launcher]$ pwd
/home/xinghailong/launcher&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于SparkLauncher需要指定SPARK_HOME，因此如果你的机器可以执行spark-submit，那么就看一下spark-submit里面，SPARK_HOME是在哪&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[xinghailong@hnode10 launcher]$ which spark2-submit
/var/lib/hadoop-hdfs/bin/spark2-submit&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后几行就能看到：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export SPARK2_HOME=/var/lib/hadoop-hdfs/app/spark

# disable randomized hash for string in Python 3.3+
export PYTHONHASHSEED=0

exec &quot;${SPARK2_HOME}&quot;/bin/spark-class org.apache.spark.deploy.SparkSubmit &quot;$@&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;综上，我们需要的是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一个自定义的Jar，里面包含spark应用和SparkLauncher类&lt;/li&gt;
&lt;li&gt;一个SparkLauncher的jar，spark-launcher_2.11-2.2.0.jar 版本根据你自己的来就行&lt;/li&gt;
&lt;li&gt;一个当前目录的路径&lt;/li&gt;
&lt;li&gt;一个SARK_HOME环境变量指定的目录&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;然后执行命令启动测试：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;java -Djava.ext.dirs=/home/xinghailong/launcher -cp launcher_test.jar Launcher /var/lib/hadoop-hdfs/app/spark yarn&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;-Djava.ext.dirs&lt;/code&gt; 设置当前目录为java类加载的目录&lt;/li&gt;
&lt;li&gt;传入两个参数，一个是SPARK_HOME；一个是启动模式&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;观察删除发现成功启动运行了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;id    null
state UNKNOWN
Mar 10, 2018 12:00:52 PM org.apache.spark.launcher.OutputRedirector redirect
INFO: 18/03/10 12:00:52 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
**********  state  changed  **********
...省略一大堆拷贝jar的日志
**********  info  changed  **********
**********  state  changed  **********
Mar 10, 2018 12:00:55 PM org.apache.spark.launcher.OutputRedirector redirect
INFO: 18/03/10 12:00:55 INFO yarn.Client: Application report for application_1518263195995_37615 (state: ACCEPTED)
... 省略一堆重定向的日志
application_1518263195995_37615 (state: ACCEPTED)
id    application_1518263195995_37615
state SUBMITTED
Mar 10, 2018 12:01:00 PM org.apache.spark.launcher.OutputRedirector redirect
INFO: 18/03/10 12:01:00 INFO yarn.Client: Application report for application_1518263195995_37615 (state: RUNNING)
**********  state  changed  **********
... 省略一堆重定向的日志
INFO:    user: hdfs
**********  state  changed  **********
Mar 10, 2018 12:01:08 PM org.apache.spark.launcher.OutputRedirector redirect
INFO: 18/03/10 12:01:08 INFO util.ShutdownHookManager: Shutdown hook called
Mar 10, 2018 12:01:08 PM org.apache.spark.launcher.OutputRedirector redirect
INFO: 18/03/10 12:01:08 INFO util.ShutdownHookManager: Deleting directory /tmp/spark-f07e0213-61fa-4710-90f5-2fd2030e0701&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这样就实现了基于Java应用提交Spark任务，并获得其Appliation_id和状态进行定位跟踪的需求了。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Mar 2018 04:12:00 +0000</pubDate>
<dc:creator>xingoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xing901022/p/8538713.html</dc:identifier>
</item>
</channel>
</rss>