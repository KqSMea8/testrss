<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>replicated mode vs global mode - 每天5分钟玩转 Docker 容器技术（105） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8028712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8028712.html</guid>
<description>&lt;p&gt;&lt;span&gt;Swarm 可以在 service 创建或运行过程中灵活地通过&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;--replicas&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;调整容器副本的数量，内部调度器则会根据当前集群的资源使用状况在不同 node 上启停容器，这就是 service 默认的&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;replicated&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;mode。在此模式下，node 上运行的副本数有多有少，一般情况下，资源更丰富的 node 运行的副本数更多，反之亦然。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;除了&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;replicated&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;mode，service 还提供了一个&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;global&lt;/span&gt;&lt;/code&gt;mode，其作用是强制在每个 node 上都运行一个且最多一个副本。&lt;/p&gt;
&lt;p&gt;此模式特别适合需要运行 daemon 的集群环境。比如要收集所有容器的日志，就可以&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;global&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;mode 创建 service，在所有 node 上都运行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;gliderlabs/logspout&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;容器，即使之后有新的 node 加入，swarm 也会自动在新 node 上启动一个&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;gliderlabs/logspout&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;副本。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;docker service create \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       --mode global \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       --name logspout \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       gliderlabs/logspout&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;542.png&quot; src=&quot;https://i.imgsafe.org/f9/f9bc44160b.png&quot; alt=&quot;542.png&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;可以通过&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker service inspect&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;查看 service 的 mode。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; title=&quot;543.png&quot; src=&quot;https://i.imgsafe.org/f9/f9bc4386d9.png&quot; alt=&quot;543.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里是&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Global&lt;/span&gt;&lt;/code&gt;，如果创建 service 时不指定，默认是&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Replicated&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;无论采用 global mode 还是 replicated mode，副本运行在哪些节点都是由 Swarm 决定的，作为用户我们有没有可能精细控制 service 的运行位置呢？&lt;/p&gt;
&lt;p&gt;下一节我们来解答这个问题。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 22:43:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8028712.html</dc:identifier>
</item>
<item>
<title>HTTP协议之URL - kingszelda</title>
<link>http://www.cnblogs.com/kingszelda/p/8030622.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kingszelda/p/8030622.html</guid>
<description>&lt;h2&gt;1.什么是URL&lt;/h2&gt;
&lt;p&gt;  URL的全称是Uniform Resoure Locator，统一资源定位器。URL是浏览器寻找信息时所需的资源位置。当一个人将浏览器指向一个URL，浏览器就会在幕后发送适当的协议报文来获取人们所期望的资源。说到URL就不得不说下URI与URN这总是伴随出现的概念。&lt;/p&gt;
&lt;p&gt;  URI的全称是Uniform Resource Identifier，统一资源标识符。&lt;/p&gt;
&lt;p&gt;  URN的全称是uniform resource name，统一资源命名。&lt;/p&gt;
&lt;p&gt;  显然，URI是一个更加抽象的概念，定义了资源的唯一性标识，而URL与URN是他的两种实现。前者根据具体位置定位资源，后者根据名称定位资源。而HTTP协议处理的基本上都是URL。&lt;/p&gt;
&lt;p&gt;  URL的出现整合了互联网资源的获取方式，使得资源的获取方式都变得明朗起来。&lt;/p&gt;
&lt;h2&gt;2.URL语法&lt;/h2&gt;
&lt;p&gt;URL语法可以归纳到下面的通用格式上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scheme&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;://&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;:&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;?&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;#&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;frag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;scheme：方案名，常见的是http/https/ftp/mail等协议。方案名是大小写无关的，即http://www.baidu.com与HTTP://www.baidu.com是等价的。&lt;/li&gt;
&lt;li&gt;user：用户名，在http协议中比较少见，默认值是匿名用户&quot;anonymous&quot;&lt;/li&gt;
&lt;li&gt;password：密码，与上面的user性质相同。在ftp协议中是比较常见的，比如ftp://user:password@ftphost/download。如果不指定密码，不同的浏览器实现会发送不同的默认密码。&lt;/li&gt;
&lt;li&gt;host：主机，资源的具体承载机器。一般使用域名或者IP来表示，使用IP的可以直接定位到具体机器，而使用域名的需要经过DNS解析后获得IP。&lt;/li&gt;
&lt;li&gt;port：端口，机器上的具体应用。在一台机器上一个端口对应一个应用，有了host+port就定位到资源的具体应用上了。http协议的默认端口是80，https的默认端口是443。&lt;/li&gt;
&lt;li&gt;path：路径，资源的分级目录。类似于文件系统的路径，可以使用多个/进行层级分割，每层都可以跟参数。&lt;/li&gt;
&lt;li&gt;params：路径对应的参数，不常用但合法。比如：http://www.baidu.com/china;type=a/beijing;degree=b&lt;/li&gt;
&lt;li&gt;query：查询字符串，与后端程序交互的关键，以？开始。比如：http://www.baidu.com?item=a&amp;amp;color=b&lt;/li&gt;
&lt;li&gt;frag：片段，也叫锚点。前面部分可以定位到具体某个资源文件，片段用来标识具体哪一个部分。而片段是不会发送给服务器的，服务器返回整个对象，浏览器根据片段来展示不同效果。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;3.URL字符集&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;URL是可移植的，所以为保障安全传输，要选用较小的、通用的字符集。&lt;/li&gt;
&lt;li&gt;URL要有可读性，所以不可见，不可打印的字符也不能使用在URL中。&lt;/li&gt;
&lt;li&gt;URL要有完整性，能包含各种复杂的含义，所以通过转义机制将不安全的字符编码转移为安全的字符编码。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  介于上述原因，URL的设计者采用了US-ASCII编码，同时引入了转移序列的概念。具体的转译方法就是，将不安全的字符使用一个百分号%，后面跟着两个表示字符ASCII码的十六位进制数。比如空格对应ASCII码为32，所以转义后为%20。&lt;/p&gt;
&lt;p&gt;  而对于中文字符，则进行这样不同的处理。由于2个十六位进制数是一个字节的长度，所以就是将不安全字符对应的二进制按照字节划分，每个字节前跟了一个%。比如“你好”的十六进制数是e4bda0e5a5bd，经UrlEncode后就是%e4%bd%a0%e5%a5%bd。&lt;/p&gt;


</description>
<pubDate>Tue, 12 Dec 2017 17:35:00 +0000</pubDate>
<dc:creator>kingszelda</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kingszelda/p/8030622.html</dc:identifier>
</item>
<item>
<title>Go基础之--数组和切片 - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/8030562.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/8030562.html</guid>
<description>&lt;h2 id=&quot;toc_1&quot;&gt;数组&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数组的定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组是具有&lt;span&gt;固定长度&lt;/span&gt;并拥有零个或者多个&lt;span&gt;相同数据类型&lt;/span&gt;元素的序列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义一个数组的方法：&lt;/strong&gt;&lt;br/&gt;var 变量名[len] type&lt;/p&gt;
&lt;p&gt;例子：&lt;br/&gt;var a[5] int //3个整数的数组&lt;br/&gt;var a[5]string //3个字符串的数组&lt;/p&gt;
&lt;p&gt;像上面这种定义方法，我们是指定了数组的长度,但是还有如下定义方法：&lt;br/&gt;var a=[...]int{1,2,3}&lt;br/&gt;如果把数组的长度替换为...，那么数组的长度由初始化数组的元素个数决定&lt;/p&gt;
&lt;p&gt;数组中的每个元素是通过索引来访问，&lt;span&gt;索引是从0开始&lt;/span&gt;&lt;br/&gt;例如 数组var a[5]int 获取第一个元素就是a[0],&lt;br/&gt;获取数组的长度是通过len(a)&lt;/p&gt;
&lt;p&gt;这里需要知道：&lt;span&gt;数组的长度也是数组类型的一部分&lt;/span&gt;，所以要知道[3]int和[4]int是不同的数组类型&lt;/p&gt;
&lt;p&gt;&lt;span&gt;默认情况下一个新数组中的元素初始值为元素类型的零值&lt;/span&gt;&lt;br/&gt;如一个证书类型的数组，默认值就是0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化数组：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一下几种方法：&lt;br/&gt;var a = [5] int{1,2,3,4,5}&lt;br/&gt;var a = [5] int{1,2,3}&lt;br/&gt;var a = [...]int{1,2,3,4}&lt;br/&gt;var a = [5]string{1:&quot;go&quot;,3:&quot;python&quot;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于数组的类型：&lt;/strong&gt;&lt;br/&gt;值类型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组的遍历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组的遍历方法：&lt;br/&gt;var a = [3]int{1, 2, 3}&lt;br/&gt;for i, v := range a {&lt;br/&gt;fmt.Printf(&quot;%d %d\n&quot;, i, v)&lt;br/&gt;}&lt;br/&gt;当然如果不需要索引也可以：&lt;br/&gt;var a = [3]int{1, 2, 3}&lt;br/&gt;for _, v := range a {&lt;br/&gt;fmt.Printf(&quot;%d\n&quot;, v)&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二维数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;var a[3][2]&lt;/p&gt;
&lt;p&gt;其实二维数组可以通过excel表格理解，就是几行几列的问题，像上面的这个例子就是一个3行2列的二维数组。&lt;br/&gt;关于二维数组的遍历,创建一个二维数组并循环赋值，然后循环打印内容&lt;br/&gt;var c [3][2]int&lt;br/&gt;for i := 0; i &amp;lt; 3; i++ {&lt;br/&gt;for j := 0; j &amp;lt; 2; j++ {&lt;br/&gt;c[i][j] = rand.Intn(10)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;for i := 0; i &amp;lt; 3; i++ {&lt;br/&gt;for j := 0; j &amp;lt; 2; j++ {&lt;br/&gt;fmt.Printf(&quot;%d &quot;, c[i][j])&lt;br/&gt;}&lt;br/&gt;fmt.Println()&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于数组的比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果两个数组的元素类型相同是可以相互比较的&lt;/span&gt;，例如数组a:= [2]int{1,2}和数组b:=[2]int{3,4}&lt;br/&gt;因为同样都是int类型，所以可以通过==来比较两个数组，看两边的元素是否完全相同，使用!= 比较看两边的元素是否不同&lt;/p&gt;
&lt;p&gt;通过下面的例子演示更加清晰：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
a := [2]&lt;span&gt;int&lt;/span&gt;{1, 2&lt;span&gt;}
b :&lt;/span&gt;= [...]&lt;span&gt;int&lt;/span&gt;{1, 2&lt;span&gt;}
c :&lt;/span&gt;= [2]&lt;span&gt;int&lt;/span&gt;{3, 2&lt;span&gt;}
d :&lt;/span&gt;= [3]&lt;span&gt;int&lt;/span&gt;{1, 2&lt;span&gt;}
fmt.Println(a &lt;/span&gt;== b, a == c, b ==&lt;span&gt; c)
fmt.Println(a &lt;/span&gt;== d)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的例子中第一个打印的结果是true,false,false，而当添加第二个打印的时候，就无法编译过去，因为两者是不能比较的&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;切片slice&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;slice 表示一个拥有&lt;span&gt;相同类型元素&lt;/span&gt;的可变长的序列&lt;/p&gt;
&lt;p&gt;定义一个slice其实和定义一个数组非常类似&lt;br/&gt;var 变量名[]type&lt;br/&gt;var b = []int&lt;/p&gt;
&lt;p&gt;&lt;span&gt;和数组对比slice似乎就是一个没有长度的数组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;slice的初始化&lt;/strong&gt;&lt;br/&gt;var a[5] int //这是定义一个数组&lt;br/&gt;var b[]int = a[0,2]&lt;br/&gt;var b[]int = a[0:5]&lt;br/&gt;var b[]int = a[:]&lt;br/&gt;var b[]int = a[:3]&lt;/p&gt;
&lt;p&gt;var b[] int = []int{1,2,3,4}&lt;/p&gt;
&lt;p&gt;同样遍历切片和数组是一模一样的&lt;/p&gt;
&lt;p&gt;通过把数组和slice对比我们其实可以发现，两者其实非常类似，当然两者也确实有着紧密的关系&lt;/p&gt;
&lt;p&gt;&lt;span&gt;slice的底层实现就是一个数组，通常我们会叫做slice的底层数组。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;slice具有三个属性：指针，长度和容量&lt;/span&gt;，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/997599/201712/997599-20171213003857488-898012635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指针指向数组的第一个可以从slice中访问的元素，这个元素不一定是数组的第一个元素&lt;/span&gt;&lt;br/&gt;&lt;span&gt;长度是指slice中元素的个数，不能超过slice的容量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;容量的大小是从slice的起始元素到底层数组的最后一个元素的个数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;通过len和cap可以获取slice的长度和容量&lt;/span&gt;&lt;br/&gt;通过下面例子理解：&lt;br/&gt;var s = [5]int{1, 2, 3, 4, 5}&lt;br/&gt;var b = s[2:3]&lt;br/&gt;var c = s[0:4]&lt;br/&gt;现在问b的长度以及容量，c的长度以及容量&lt;br/&gt;对比上面的定义其实很好明白&lt;br/&gt;s 就好比slice的底层数组&lt;br/&gt;而对于b这个slice来说他是从数组的第三个元素开始切片，切片的时候是左闭右开原则&lt;br/&gt;所以b的长度是1&lt;br/&gt;对于b的容量根据定义我们知道是从数组的第三个元素到数组的最后&lt;br/&gt;所以b的容量是3&lt;/p&gt;
&lt;p&gt;这样我们也可以很容易得到c的长度是3，容量是5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;slice创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内置函数&lt;span&gt;make&lt;/span&gt;可以创建一个具有&lt;span&gt;指定元素类型、长度和容量&lt;/span&gt;的slice,其中容量参数可以省略，这样默认slice的长度和容量就相等了&lt;/p&gt;
&lt;p&gt;make([]type,len,cap)&lt;br/&gt;make([]type,len)&lt;/p&gt;
&lt;p&gt;现在说说关于：&lt;br/&gt;make([]type,len)&lt;br/&gt;make([]type,len,cap)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实make创建了一个无名数组并返回了它的一个slice;这个数组仅可以通过slice来访问。&lt;/span&gt;&lt;br/&gt;第一个：make([]type,len)返回的slice引用了整个数组。&lt;br/&gt;第二个：make([]type,len,cap)slice只引用了数组的前len个元素，但是它的容量是数组的长度&lt;br/&gt;通过下图理解切片的创建过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/997599/201712/997599-20171213003921316-722215788.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于copy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该函数主要是切片（slice）的拷贝，不支持数组&lt;/span&gt;&lt;br/&gt;&lt;span&gt;将第二个slice里的元素拷贝到第一个slice里。如果加入的两个数组切片不一样大，就会按其中较小的那个数组切片的元素个数进行复制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过下面例子便于理解：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
s1 := []&lt;span&gt;int&lt;/span&gt;{1, 2, 3, 7, 8&lt;span&gt;}
s2 :&lt;/span&gt;= []&lt;span&gt;int&lt;/span&gt;{4, 5, 6&lt;span&gt;}
copy(s2, s1)
fmt.Printf(&lt;/span&gt;&quot;%#v\n&quot;, s2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样打印s2的结果就是：[]int{1, 2, 3}&lt;br/&gt;将代码更改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
s1 := []&lt;span&gt;int&lt;/span&gt;{1, 2, 3, 7, 8&lt;span&gt;}
s2 :&lt;/span&gt;= []&lt;span&gt;int&lt;/span&gt;{4, 5, 6&lt;span&gt;}
copy(s1, s2)
fmt.Printf(&lt;/span&gt;&quot;%#v\n&quot;, s1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样打印s1的结果为：[]int{4, 5, 6, 7, 8}&lt;br/&gt;这次拷贝就是把s2中的前三个元素拷贝到s1中的前三个，把s1中的前三个进行了覆盖&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于append&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内置的函数append可以把元素追加到slice的后面&lt;/p&gt;
&lt;p&gt;通过下面例子理解，把“hello go”每个字符循环添加到一个slice中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var runnes []rune
for _, v :&lt;/span&gt;= range &quot;hello,go&quot;&lt;span&gt; {
    runnes &lt;/span&gt;=&lt;span&gt; append(runnes, v)
}
fmt.Printf(&lt;/span&gt;&quot;%q\n&quot;, runnes)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子2直接在一个已经有元素的slice追加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
s1 := []&lt;span&gt;int&lt;/span&gt;{1, 2, 3&lt;span&gt;}
s1 &lt;/span&gt;= append(s1, 4, 5&lt;span&gt;)
fmt.Printf(&lt;/span&gt;&quot;%#v\n&quot;, s1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想要把另外一个slice也直接append到现在的slice中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
s1 := []&lt;span&gt;int&lt;/span&gt;{1, 2, 3&lt;span&gt;}
s2 :&lt;/span&gt;= []&lt;span&gt;int&lt;/span&gt;{4, 5&lt;span&gt;}
s1 &lt;/span&gt;=&lt;span&gt; append(s1, s2...)
fmt.Printf(&lt;/span&gt;&quot;%#v\n&quot;, s1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里在s2后面通过...其实就是把s2中的元素给展开然后在append进s1中&lt;/p&gt;
&lt;p&gt;其实append函数对于理解slice的工作原理是非常重要的，下面是一个为[]int数组slice定义的一个方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
func appendInt(x []&lt;span&gt;int&lt;/span&gt;, y &lt;span&gt;int&lt;/span&gt;) []&lt;span&gt;int&lt;/span&gt;&lt;span&gt; {
    var z []&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;
    zlen :&lt;/span&gt;= len(x) + 1
    &lt;span&gt;if&lt;/span&gt; zlen &amp;lt;=&lt;span&gt; cap(x) {
        &lt;/span&gt;//&lt;span&gt;slice仍有增长空间扩展slice内容
        z &lt;/span&gt;=&lt;span&gt; x[:zlen]
    } else {
        &lt;/span&gt;//&lt;span&gt;slice 已经没有空间，为他分配一个新的底层数组
        &lt;/span&gt;//&lt;span&gt;当然实际go底层扩展的时候的策略可能复杂的多，这里是通过扩展一倍为例子
        zcap :&lt;/span&gt;=&lt;span&gt; zlen
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; zcap &amp;lt; 2*&lt;span&gt;len(x) {
            zcap &lt;/span&gt;= 2 *&lt;span&gt; len(x)
        }
        z &lt;/span&gt;= make([]&lt;span&gt;int&lt;/span&gt;&lt;span&gt;, zlen, zcap)
        copy(z, x)
    }
    z[len(x)] &lt;/span&gt;=&lt;span&gt; y
    return z   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的这个方法可以看出：&lt;br/&gt;&lt;span&gt;每次appendInt的时候都会检查slice是否有足够的容量来存储数组中的新元素，如果slice容量足够，那么他会定义一个新的slice,注意这里仍然引用原始的底层数组，然后将新元素y复制到新的位置，并返回新的slice,这样我们传入的参数切片x和函数返回值切片z其实用的是相同的底层数组。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果slice的容量不够容纳增长的元素，appendInt函数必须创建一个拥有足够容量的新的底层数组来存储新的元素，然后将元素从切片x复制到这个数组，再将新元素y追加到数组后面。这样返回的切片z将和传入的参数切片z引用不同的底层数组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于切片的比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;和数组不同的是，切片是无法比较的，因此不能通过==来比较两个切片是否拥有相同的元素&lt;/span&gt;&lt;br/&gt;&lt;span&gt;slice唯一允许的比较操作是和nill比较，切片的零值是nill&lt;/span&gt;&lt;br/&gt;&lt;span&gt;这里需要注意的是：值为nill的slice的长度和容量都是零，但是这不是决定的，因为存在非nill的slice的长度和容量是零所以想要检查一个slice是否为还是要使用len(s) == 0 而不是s == nill&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面是整理的练习切片使用的例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何修改一个字符串？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;fmt&quot;&lt;span&gt;
)

func changeString(str1 string) {
    var runnes &lt;/span&gt;=&lt;span&gt; []rune(str1)
    runnes[&lt;/span&gt;0] = 'h'&lt;span&gt;
    res :&lt;/span&gt;=&lt;span&gt; string(runnes)
    fmt.Println(res)
}

func main() {
    changeString(&lt;/span&gt;&quot;Hello,Go&quot;&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里是把开头的大写的h换成了小写&lt;/p&gt;
&lt;p&gt;再看一个例子：&lt;br/&gt;实现字符串的反转&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func reverseStr(str1 string) {
    var runes &lt;/span&gt;=&lt;span&gt; []rune(str1)
    var res string
    for i :&lt;/span&gt;= len(runes) - 1; i &amp;gt;= 0; i--&lt;span&gt; {
        res &lt;/span&gt;+=&lt;span&gt; string(runes[i])
    }
    fmt.Println(res)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这个方法就可以实现对字符串的反转，当然方法不止一种，下面也是一种方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func reverseStr2(str1 string) {
    var runes &lt;/span&gt;=&lt;span&gt; []rune(str1)
    for i, j :&lt;/span&gt;= 0, len(runes)-1; i &amp;lt; j; i, j = i+1, j-1&lt;span&gt; {
        runes[i], runes[j] &lt;/span&gt;=&lt;span&gt; runes[j], runes[i]
    }
    res :&lt;/span&gt;=&lt;span&gt; string(runes)
    fmt.Println(res)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的方法中我一直在用到rune，这个东西是什么东西呢？接着看&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GO当中的：string rune,byte&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Go当中的字符换string 底层是用byte数组存的，并且是不可改变的&lt;br/&gt;当我们通过for key, value := range str这种方式循环一个字符串的时候，其实返回的每个value类型就是rune&lt;br/&gt;而我们知道在go中双引号引起来的是字符串string，在go中表示字符串有两种方式：&lt;br/&gt;一种是byte，代表utf-8字符串的单个字节的值；另外一个是rune,代表单个unicode字符串&lt;br/&gt;关于rune官网中一段解释：&lt;br/&gt;rune is an alias for int32 and is equivalent to int32 in all ways. It is&lt;br/&gt;used, by convention, to distinguish character values from integer values.&lt;/p&gt;
&lt;p&gt;我们通过下面的代码例子来理解一下：&lt;/p&gt;
&lt;p&gt;var a = &quot;我爱你go&quot;&lt;br/&gt;fmt.Println(len(a))&lt;/p&gt;
&lt;p&gt;上面已经说了，字符串的底层是byte字节数组，所以我们通过len来计算长度的时候，其实就是获取的该数组的长度，而一个中文字符是占3个字节，所以上面的结果是11&lt;br/&gt;可能很多人第一眼看的时候，尤其初学者可能会觉得长度应该是5，其实，如果想要转换成4只需要通过虾米那方式就可以：&lt;/p&gt;
&lt;p&gt;var a = &quot;我爱你go&quot;&lt;br/&gt;fmt.Println(len([]rune(a)))&lt;/p&gt;
&lt;h2 id=&quot;toc_3&quot;&gt;时间和日期类型&lt;/h2&gt;
&lt;p&gt;当前时间：now:= time.Now()&lt;/p&gt;
&lt;p&gt;time.Now().Day()&lt;/p&gt;
&lt;p&gt;time.Now().Minute()&lt;/p&gt;
&lt;p&gt;time.Now().Month()&lt;/p&gt;
&lt;p&gt;time.Now().Year()&lt;/p&gt;
&lt;p&gt;time.Duration用来表示纳秒&lt;/p&gt;
&lt;p&gt;一些常用的时间常量&lt;/p&gt;
&lt;p&gt;const (&lt;br/&gt;Nanosecond Duration = 1&lt;br/&gt;Microsecond =1000 * Nanosecond&lt;br/&gt;Millisecond =1000 * Microsecond&lt;br/&gt;Second =1000 * Millisecond&lt;br/&gt;Minute =60 * Second&lt;br/&gt;Hour =60 * Minute&lt;br/&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：如果想要格式化时间的时候，要特别特别注意，只能通过如下方式格式化：&lt;/span&gt;&lt;br/&gt;fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))&lt;br/&gt;Format里面的时间是固定的，因为是go第一个程序的诞生时间，也不知道go的开发者怎么想的，估计是想让所有学习go的人记住这个伟大的时刻吧&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 16:47:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/8030562.html</dc:identifier>
</item>
<item>
<title>javascript设计模式——单例模式 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8029196.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8029196.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　单例模式是指保证一个类仅有一个实例，并提供一个访问它的全局访问点。 单例模式是一种常用的模式，有一些对象往往只需要一个，比如线程池、全局缓存、浏览器中的window对象等。在javaScript开发中，单例模式的用途同样非常广泛。试想一下，单击登录按钮时，页面中会出现一个登录浮窗，而这个登录浮窗是唯一的，无论单击多少次登录按钮，这个浮窗都只会被创建一次，那么这个登录浮窗就适合用单例模式来创建&lt;/p&gt;

&lt;h3&gt;标准单例&lt;/h3&gt;
&lt;p&gt;　　要实现一个标准的单例模式并不复杂，无非是用一个变量来标志当前是否已经为某个类创建过对象，如果是，则在下一次获取该类的实例时，直接返回之前创建的对象。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Singleton =&lt;span&gt; function( name ){ 
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name; 
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.instance = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
};
Singleton.prototype.getName &lt;/span&gt;=&lt;span&gt; function(){ 
  alert ( &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name );
};
Singleton.getInstance &lt;/span&gt;=&lt;span&gt; function( name ){ 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( !&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.instance ){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Singleton( name );
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.instance;
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = Singleton.getInstance( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sven1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ); 
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b = Singleton.getInstance( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sven2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
alert ( a &lt;/span&gt;=== b );    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Singleton =&lt;span&gt; function( name ){ 
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
};
Singleton.prototype.getName &lt;/span&gt;=&lt;span&gt; function(){ 
  alert ( &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name );
};
Singleton.getInstance &lt;/span&gt;=&lt;span&gt; (
  function(){ 
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function( name ){
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( !&lt;span&gt;instance ){
        instance &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Singleton( name );
      }
    })();
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; instance;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过Singleton.getInstance来获取Singleton类的唯一对象，这种方式相对简单，但有一个问题，就是增加了这个类的“不透明性”，Singleton类的使用者必须知道这是一个单例类，跟以往通过new XXX的方式来获取对象不同，这里偏要使用Singleton.getInstance来获取对象&lt;/p&gt;
&lt;p&gt;　　虽然已经完成了一个单例模式的编写，但这段单例模式代码的实际意义并不大&lt;/p&gt;

&lt;h3&gt;透明单例&lt;/h3&gt;
&lt;p&gt;　　现在的目标是实现一个“透明”的单例类，用户从这个类中创建对象时，可以像使用其他任何普通类一样。在下面的例子中，将使用CreateDiv单例类，它的作用是负责在页面中创建唯一的div节点，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; CreateDiv =&lt;span&gt; (function () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; instance;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; CreateDiv =&lt;span&gt; function (html) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (instance) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance;
      }
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.html =&lt;span&gt; html;
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.init();
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; instance = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    };
    CreateDiv.prototype.init &lt;/span&gt;=&lt;span&gt; function () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
      div.innerHTML &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.html;
      document.body.appendChild(div);
    };
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CreateDiv;
  })();

  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt; CreateDiv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sven1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; CreateDiv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sven2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  alert(a &lt;/span&gt;=== b);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然现在完成了一个透明的单例类的编写，但它同样有一些缺点。为了把instance封装起来，使用了自执行的匿名函数和闭包，并且让这个匿名函数返回真正的Singleton构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服&lt;/p&gt;
&lt;p&gt;　　上面的代码中，CreateDiv构造函数实际上负责了两件事情。第一是创建对象和执行初始化init方法，第二是保证只有一个对象。这是一种不好的做法，至少这个构造函数看起来很奇怪。假设某天需要利用这个类，在页面中创建千千万万的div，即要让这个类从单例类变成一个普通的可产生多个实例的类，那必须得改写CreateDiv构造函数，把控制创建唯一对象的那一段去掉，这种修改会带来不必要的烦恼&lt;/p&gt;

&lt;h3&gt;代理实现单例&lt;/h3&gt;
&lt;p&gt;　　现在通过引入代理类的方式，来解决上面提到的问题。依然使用上面的代码，首先在CreateDiv构造函数中，把负责管理单例的代码移除出去，使它成为一个普通的创建div的类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;var&lt;/span&gt; CreateDiv =&lt;span&gt; function (html) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.html =&lt;span&gt; html;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.init();
  };
  CreateDiv.prototype.init &lt;/span&gt;=&lt;span&gt; function () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    div.innerHTML &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.html;
    document.body.appendChild(div);
  };
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入代理类proxySingletonCreateDiv&lt;/span&gt;
  &lt;span&gt;var&lt;/span&gt; ProxySingletonCreateDiv =&lt;span&gt; (function () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; instance;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function (html) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;instance) {
        instance &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CreateDiv(html);
      }
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance;
    }
  })();
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt; ProxySingletonCreateDiv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sven1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; ProxySingletonCreateDiv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sven2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  alert(a &lt;/span&gt;=== b);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过引入代理类的方式，同样完成了一个单例模式的编写，跟之前不同的是，现在把负责管理单例的逻辑移到了代理类proxySingletonCreateDiv中。这样一来，CreateDiv就变成了一个普通的类，它跟proxySingletonCreateDiv组合起来可以达到单例模式的效果&lt;/p&gt;

&lt;h3&gt;惰性单例&lt;/h3&gt;
&lt;p&gt;　　惰性单例指的是在需要的时候才创建对象实例。惰性单例是单例模式的重点，这种技术在实际开发中非常有用&lt;/p&gt;
&lt;p&gt;　　下面继续以登录框的例子来说明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/button&amp;gt;
&amp;lt;script&amp;gt;
    &lt;span&gt;var&lt;/span&gt; loginLayer =&lt;span&gt; (function () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
      div.innerHTML &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是登录浮窗&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
      div.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
      document.body.appendChild(div);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; div;
    })();
    document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).onclick =&lt;span&gt; function () {
      loginLayer.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    };
&lt;/span&gt;&amp;lt;/script&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这种方式有一个问题，如果根本不需要进行登录操作，登录浮窗一开始就被创建好，很有可能将白白浪费一些 DOM 节点&lt;/p&gt;
&lt;p&gt;　　现在改写一下代码，使用户点击登录按钮的时候才开始创建该浮窗&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/button&amp;gt;
&amp;lt;script&amp;gt;
    &lt;span&gt;var&lt;/span&gt; createLoginLayer =&lt;span&gt; function () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
      div.innerHTML &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是登录浮窗&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
      div.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
      document.body.appendChild(div);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; div;
    };
    document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).onclick =&lt;span&gt; function () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loginLayer =&lt;span&gt; createLoginLayer();
      loginLayer.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    };
&lt;/span&gt;&amp;lt;/script&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然现在达到了惰性的目的，但失去了单例的效果。每次点击登录按钮时，都会创建一个新的登录浮窗div&lt;/p&gt;
&lt;p&gt;　　可以用一个变量来判断是否已经创建过登录浮窗，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; createLoginLayer =&lt;span&gt; (function(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; div;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function(){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( !&lt;span&gt;div ){
                div &lt;/span&gt;= document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
                div.innerHTML &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是登录浮窗&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                div.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                document.body.appendChild( div );
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; div;
        }
    })();
    document.getElementById( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).onclick =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loginLayer =&lt;span&gt; createLoginLayer();
        loginLayer.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码仍然存在如下问题：&lt;/p&gt;
&lt;p&gt;　　1、违反单一职责原则的，创建对象和管理单例的逻辑都放在 createLoginLayer对象内部&lt;/p&gt;
&lt;p&gt;　　2、如果下次需要创建页面中唯一的iframe，或者script标签，用来跨域请求数据，就必须得如法炮制，把createLoginLayer函数几乎照抄一遍&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; createIframe=&lt;span&gt; (function(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; iframe;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function(){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( !&lt;span&gt;iframe){
                iframe&lt;/span&gt;= document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
                iframe.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                document.body.appendChild( iframe);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; iframe;
        }
    })();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;通用惰性单例&lt;/h3&gt;
&lt;p&gt;　　现在需要把不变的部分隔离出来，先不考虑创建一个div和创建一个iframe有多少差异，管理单例的逻辑其实是完全可以抽象出来的，这个逻辑始终是一样的：用一个变量来标志是否创建过对象，如果是，则在下次直接返回这个已经创建好的对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
var&lt;span&gt; obj;
if ( !&lt;span&gt;obj ){ 
  obj =&lt;span&gt; xxx;
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后，把如何管理单例的逻辑从原来的代码中抽离出来，这些逻辑被封装在getSingle函数内部，创建对象的方法fn被当成参数动态传入getSingle函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; getSingle =&lt;span&gt; function( fn ){ 
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; result;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; result || ( result = fn .apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments ) );
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来将用于创建登录浮窗的方法用参数fn的形式传入getSingle，不仅可以传入createLoginLayer，还能传入createScript、createIframe、createXhr等。之后再让getSingle返回一个新的函数，并且用一个变量result来保存fn的计算结果。result变量因为身在闭包中，它永远不会被销毁。在将来的请求中，如果result已经被赋值，那么它将返回这个值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; createLoginLayer =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        div.innerHTML &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;我是登录浮窗&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        div.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        document.body.appendChild( div );
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; div;
    };
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; createSingleLoginLayer =&lt;span&gt; getSingle( createLoginLayer );
    document.getElementById( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).onclick =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loginLayer =&lt;span&gt; createSingleLoginLayer();
        loginLayer.style.display &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面再试试创建唯一的iframe用于动态加载第三方页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; createSingleIframe =&lt;span&gt; getSingle(function () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe = document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
      document.body.appendChild(iframe);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; iframe;
    });
    document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loginBtn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).onclick =&lt;span&gt; function () {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loginLayer =&lt;span&gt; createSingleIframe();
      loginLayer.src &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.hao123.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    };&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的例子中，创建实例对象的职责和管理单例的职责分别放置在两个方法里，这两个方法可以独立变化而互不影响，当它们连接在一起的时候，就完成了创建唯一实例对象的功能&lt;/p&gt;
&lt;p&gt;　　这种单例模式的用途远不止创建对象，比如通常渲染完页面中的一个列表之后，接下来要给这个列表绑定click事件，如果是通过ajax动态往列表里追加数据，在使用事件代理的前提下，click事件实际上只需要在第一次渲染列表的时候被绑定一次，但不想判断当前是否是第一次渲染列表，如果借助于jQuery，通常选择给节点绑定one事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; bindEvent =&lt;span&gt; function(){
        $( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).one( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(){
            alert ( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        });
    };
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; render =&lt;span&gt; function(){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始渲染列表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        bindEvent();
    };
    render();
    render();
    render();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果利用getSingle函数，也能达到一样的效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; getSingle =&lt;span&gt; function (fn) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; result;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function () {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; result || (result = fn.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments));
        }
    };
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bindEvent =&lt;span&gt; getSingle(function(){
        document.getElementById( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).onclick =&lt;span&gt; function(){
            alert ( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    });
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; render =&lt;span&gt; function(){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始渲染列表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        bindEvent();
    };
    render();
    render();
    render();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，render函数和bindEvent函数都分别执行了3次，但div实际上只被绑定了一个事件&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 16:39:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8029196.html</dc:identifier>
</item>
<item>
<title>浅析网站的基本构成和主要类型 - 战争热诚</title>
<link>http://www.cnblogs.com/wj-1314/p/8022237.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wj-1314/p/8022237.html</guid>
<description>&lt;p&gt;       互联网已经渗透到了人们的日常生活中，想要学习制作网页的人也逐渐多起来：但是，要学习制作网页，最好首先了解一下与网页相关的基础知识。下面讲一下网站构成的三要素和网站的主要类型，一方面为自己理解网站做准备，一方面也是帮助大家理解网站的构成。&lt;/p&gt;
&lt;h2&gt;一：网站构成三要素（网页，服务器或空间，域名）&lt;/h2&gt;

&lt;h3&gt;1.域名（俗称网址）：域名类型很多种，目前主要使用的有COM,CN.NET.COM.CN；域名样式如：xxxxxxx.com。&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;   &lt;/span&gt; 域名是由一串用点分割的名字组成的internet上某台计算机或者计算机组的名称，用于在数据传输时标识计算机的电子方位（有时候也称为地理位置），目前域名已经成为互联网的品牌，网上商标保护必须的产品之一。&lt;br/&gt;&lt;span&gt;&lt;span&gt;一些常用的域名的区别&lt;/span&gt;：&lt;/span&gt;&lt;br/&gt;.com一般用于商业性的机构或公司&lt;br/&gt;.net一般用于从事Internet相关的网络服务的机构或公司&lt;br/&gt;.org一般用于非盈利的组织、团体。&lt;br/&gt;.cn域名是由我国管理的顶级国家域名（ccTLD），属于顶级域名。该域名只有企业才能注册，个人不能注册，需提供组织代码证和联系人身份证。&lt;br/&gt;.gov.cn政府域名，专门用于我国政府机关等部门，要求提供组织机构代码证,且必须为机关法人。联系人身份证及域名注册表。&lt;/p&gt;
&lt;h3&gt;2.&lt;span&gt;网页内容：即我们访问网站所看见的页面、包含动画、图片、文字、视频等等信息和不同的特效。&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;    &lt;span&gt;网页（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;web page）是一个文件，存放在世界某个角落的某台计算机中，而该计算机必须是与互联网相连的。网页经网址（URL）来识别与存取。当我们输入网址后，经过一段复杂而又快速的程序，网页会被传送到你的计算机中，然后在经过浏览器解释网页的内容，再展示在你的面前。网页是万维网中的一页，通常是HTML格式（扩展名为.html）网页要经过浏览器来进行阅读&lt;/span&gt;&lt;span&gt;， 网页里可以有文字、图像、声音及视频信 息等。网页可以看成是一个单一体，是网 站的一个元素。 平常我们所听说的“新浪”、“搜狐”、 “网易”等，即是俗称的“网站”。而当 我们访问这些网站的时候，最直接访问的 就是“网页”了。这许许多多的网页则组 成了整个站点，也就是网站&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.&lt;span&gt;虚拟主机（服务器或空间）：即存放网页文件的机器。&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;   这里的服务器是指用于存储网页内容的计算机。&lt;/span&gt;&lt;span&gt;它是用户提出请求时，查找相对应的网页文件并通过&lt;/span&gt;&lt;span&gt;HTTP&lt;/span&gt;&lt;span&gt;协议传送给客户端的网页浏览器。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;那么什么样的计算机才可以作为服务器呢？&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;作为web服务器的计算机要具备以下三方面基本特征：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     -1，必须是与互联网连接的，因为只有与互联网连接才能为用户提供相应的服务。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    -2，必须具备与网站相适应的存储能力。有些网站需要大量的存储空间，所怀对服务器的容量也有相应的要求&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    -3，必须具备良好的性能。因为服务器的性能与访问速度等挂钩。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;       另外，并不是每个网站都需要配置一台服务器，于是网站空间随之产生，网站空间是指存放内容的空间。网站空间也称虚拟主机空间，通常企业做的网站都不会自己架构服务器，而是选择以虚拟主机空间作为放置空间的网站空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二，网站的主要类型（静态网站，动态网站）&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;1&lt;span&gt;，静态网站&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;     静态网站是指全部由&lt;/span&gt;HTML&lt;span&gt;代码格式页面组成的网站，所有的内容包含在网页文件中。网页上也可以出现各种视觉动态效果，如&lt;/span&gt;&lt;span&gt;GIF&lt;/span&gt;&lt;span&gt;动画，&lt;/span&gt;&lt;span&gt;FALASH&lt;/span&gt;&lt;span&gt;动画，滚动字幕等。客户端与服务器端不发生交互 访问者只能被动地浏览网站建设者提供的网页内容。 其特点： 网页内容不会发生变化，除非网页设计者修改了网页的内 容。不能实现和浏览网页的用户之间的交互。信息流向是 单向的。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;静态网站的特征：&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;  -1&lt;span&gt;，每个静态网页都有一个固定的网址，文件名均以&lt;/span&gt;&lt;span&gt;htm&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;shtml&lt;/span&gt;&lt;span&gt;等为后缀；&lt;/span&gt;&lt;br/&gt;  -2&lt;span&gt;，静态网页一经发布到服务器上，无论是否被访问，都是一个独立存在的文件；&lt;/span&gt;&lt;br/&gt;  -3&lt;span&gt;，静态网页的内容相对稳定，不含特殊代码，因此容易被搜索引擎检索，&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;更加适合&lt;/span&gt;&lt;span&gt;SEO&lt;/span&gt;&lt;span&gt;搜索引擎优化。&lt;/span&gt;&lt;br/&gt;  -4&lt;span&gt;，静态网站没有数据库的支持，在网站制作和维护方面的工作量大；&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;静态网站主要用到一下三个技术：&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;   ——HTML&lt;span&gt;标记语言&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;定义：超文本标记语言，即&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;，是用于描述网页文档的一种标记语言。&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;结构：主要包含头部（&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;），主体（&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;）两大部分。其中头部用于描述浏览器所需的&lt;/span&gt;&lt;span&gt;????&lt;/span&gt; &lt;span&gt;信息；主体用于包含所要说明的具体内容。&lt;/span&gt;&lt;br/&gt;  ——CSS&lt;span&gt;样式表&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;级联样式表，简称&lt;/span&gt;&lt;span&gt;“CSS”&lt;/span&gt;&lt;span&gt;，通常又称为&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;风格样式表&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;，他是用来进行网页风格设计的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;  ——JavaScript&lt;span&gt;脚本语言&lt;/span&gt;&lt;br/&gt;             Javascript&lt;span&gt;是一种能让你的网页更加生动活泼的程式语言，也是目前网页中设计中最容易学又最方便的语言。你可以利用&lt;/span&gt;&lt;span&gt;javaScript&lt;/span&gt;&lt;span&gt;轻易的做出亲切的欢迎讯息，票咯昂的数字钟，有广告特效的跑马灯以及简易的选举，还可以选择显示浏览器停留的时间。让这些特殊效果提高网页的可观性。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;2&lt;span&gt;，动态网站&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;  动态网站并不是具有动画功能的网站，而是指通过数据库进行架构的网站。动态网站除了要设计网页外，还要通过数据库和编程序来使网站具有更多自动的和高级的功能。客户端与服务器端要发生交互 动态网页是指浏览器可以和服务器数据库进行实时数 据交流的交互网页，而不是加上了动画等效果的动感网页。 动态网页技术的网站可以实现更多的功能，如用户注册、 用户登录、搜索查询、用户管理、订单管理等。信息流向 是双向的。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;动态网站的功能特点：&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;   -1,&lt;span&gt;动态网站可以实现交互功能，如用户注册，信息发布，产品展示，订单管理等等&lt;/span&gt;&lt;br/&gt;  -2&lt;span&gt;，动态网页并不是独立存放在于服务器的网页内容，而是浏览器发出请求时才反馈网页；&lt;/span&gt;&lt;br/&gt;  -3&lt;span&gt;，动态网页中包含有服务器端脚本，所以网页文件名常以&lt;/span&gt;&lt;span&gt;asp&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;jsp&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;php&lt;/span&gt;&lt;span&gt;等为后缀。所以不能以页面文件的后缀作为判断网站的动态和静态的唯一标准。&lt;/span&gt;&lt;br/&gt;  -4&lt;span&gt;，动态网页由于需要数据库处理，所以动态网站的访问速度大大减速；&lt;/span&gt;&lt;br/&gt;  -5&lt;span&gt;，动态网页由于存在特殊代码，所以相对比较静态网页，其对搜索引擎的友好程度相对要弱一点&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt; &lt;span&gt;动态网站所用到的技术（&lt;/span&gt;&lt;span&gt;与静态网站相比较多出两门技术）&lt;/span&gt; &lt;/h4&gt;
&lt;p&gt;——&lt;span&gt;服务器端脚本语言&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;——&lt;span&gt;数据库&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;三，网站建设的步骤&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;   网站的建设分为如下9部分：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;——1，申请域名（即域名备案）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    那么什么是域名备案呢，针对有网站的域名，没有网站的域名不需要备案 ；还指到国家信息产业部提交网站的相关信息&lt;span&gt;&lt;span&gt;。网站备案是指国家规定经营性网站和非经营性网站都必须备案才能开通；备案一般需要22个工作日。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——2，申请空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——3，定位网站&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——4，分析网站功能和需求（即网站策划）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——5，网站风格设计&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——6，网站代码制作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——7，测试网站&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——8，FTP上传网站&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——9，网站维护&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 16:08:00 +0000</pubDate>
<dc:creator>战争热诚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wj-1314/p/8022237.html</dc:identifier>
</item>
<item>
<title>Springboot读取配置文件及自定义配置文件 - Java从入门到跑路</title>
<link>http://www.cnblogs.com/kellyJAVA/p/8030395.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kellyJAVA/p/8030395.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;1.创建maven工程，在pom文件中添加依赖&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code _mce_tagged_br&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &amp;lt;parent&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;/parent&amp;gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;   &amp;lt;dependencies&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;dependency&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;lt;/dependency&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;!-- 单元测试使用 --&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;dependency&amp;gt;
&lt;span&gt;14&lt;/span&gt;         &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;lt;/dependency&amp;gt;
&lt;span&gt;17&lt;/span&gt;   
&lt;span&gt;18&lt;/span&gt;     &amp;lt;dependency&amp;gt;
&lt;span&gt;19&lt;/span&gt;       &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
&lt;span&gt;20&lt;/span&gt;       &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
&lt;span&gt;21&lt;/span&gt;       &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/dependency&amp;gt;
&lt;span&gt;23&lt;/span&gt;    
&lt;span&gt;24&lt;/span&gt;   &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.创建项目启动类 StartApplication.java&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.EnableAutoConfiguration;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; @EnableAutoConfiguration &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动加载配置信息&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; @ComponentScan(&quot;com.kelly&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使包路径下带有注解的类可以使用@Autowired自动注入&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StartApplication {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         SpringApplication.run(StartApplication.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.编辑配置文件application.properties及自定义配置文件define.properties&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#访问的根路径
server.context&lt;/span&gt;-path=/&lt;span&gt;springboot
#端口号
server.port&lt;/span&gt;=8081&lt;span&gt;
#session失效时间
server.session&lt;/span&gt;-timeout=30&lt;span&gt;
#编码
server.tomcat.uri&lt;/span&gt;-encoding=utf-8&lt;span&gt;

test.name&lt;/span&gt;=&lt;span&gt;kelly
test.password&lt;/span&gt;=admin123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　define.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
defineTest.pname=&lt;span&gt;test
defineTest.password&lt;/span&gt;=test123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.读取application.properties配置文件中的属性值&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　FirstController.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FirstController {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     @Value(&quot;${test.name}&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     @Value(&quot;${test.password}&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     @RequestMapping(&quot;/&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    String home()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Hello Springboot!&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     @RequestMapping(&quot;/hello&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    String hello()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;name: &quot; + name + &quot;, &quot; + &quot;password: &quot; +&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.打开浏览器，输入 http://localhost:8081/springboot/hello 即可看到结果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1296244/201712/1296244-20171212233008051-315710207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.使用java bean的方式读取自定义配置文件 define.properties&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　DefineEntity.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.entity;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.ConfigurationProperties;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.PropertySource;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; @ConfigurationProperties(prefix=&quot;defineTest&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; @PropertySource(&quot;classpath:define.properties&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefineEntity {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pname;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPname() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pname;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPname(String pname) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pname =&lt;span&gt; pname;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     
&lt;span&gt;32&lt;/span&gt;     
&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　SecondController.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.kelly.entity.DefineEntity;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SecondController {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    DefineEntity defineEntity;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     @RequestMapping(&quot;/define&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    String define()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;test.name:&quot; + defineEntity.getPname() + &quot;, test.password:&quot; +&lt;span&gt; defineEntity.getPassword();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7.打开浏览器，访问 http://localhost:8081/springboot/define，可以看到输出结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1296244/201712/1296244-20171212233748738-1254920842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;补充：我的项目的目录结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1296244/201712/1296244-20171212234506894-1400331742.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;如果遇到问题也可以留言，我如果看到的话，不管会不会都会给与回复的，我们可以共同讨论，一起学习进步。&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 15:48:00 +0000</pubDate>
<dc:creator>Java从入门到跑路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kellyJAVA/p/8030395.html</dc:identifier>
</item>
<item>
<title>QT之UDP通信 - 菜头大大</title>
<link>http://www.cnblogs.com/wurenzhong/p/8030220.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wurenzhong/p/8030220.html</guid>
<description>&lt;p&gt;&lt;span&gt;前言：前一篇讲了TCP通信，这篇来看看UDP通信。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里说明一下，UDP通信中分为三种通信分别为单播、组播和广播，下面将一一为大家介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样的我们都需要在工程文件中添加network&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
QT       += core gui network
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;进行UDP通信需要用到的头文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
#include &amp;lt;QUdpSocket&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里我们把UDP通信分为两个部分写，一个是发送端，另一个是接收端，而发送端中又分为单播、组播和广播三种形式，下面我们先来看看写发送端的代码程序的步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;发送端Udpsend的代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、单播&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   （1）创建套接字  &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
QUdpSocket mSocket;&lt;br/&gt;mSocket = &lt;span&gt;new&lt;/span&gt; QUdpSocket();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     （2）发送数据到指定的地址和端口号 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&quot;192.168.137.1&quot;),6677);&lt;br/&gt;参数：ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8 要发送的消息&lt;br/&gt;QHostAddress(&quot;192.168.137.1&quot;)   接收端的ip地址&lt;br/&gt;6677  端口号，要和接收端的一致
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;2、组播，组播和单播的步骤是一样的，只有ip地址处有区别&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
组播ip地址范围：&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;-&lt;span&gt;239.255&lt;/span&gt;.&lt;span&gt;255.255&lt;/span&gt;&lt;span&gt;
例子：mSocket&lt;/span&gt;-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),&lt;span&gt;6677&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3、广播，广播也只有ip地址和单播有区别&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
广播地址ip：QHostAddress::Broadcast&lt;br/&gt;例子：mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress::Broadcast,6677);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好了，单播、组播和广播的区别应该都了解了，那么我们就来看发送端（udpsend.cpp）的具体代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;udpsend.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_udpsend.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;  UdpSend:: UdpSend(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    QMainWindow(parent),
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui:: UdpSend)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化创建QUdpSocket对象&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     mSocket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QUdpSocket();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;  UdpSend::~&lt;span&gt; UdpSend()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UdpSend::on_sendBt_clicked()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单播
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; qint64 len = mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&quot;192.168.137.1&quot;),6677);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组播ip地址范围：224.0.0.0-239.255.255.255
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;qint64 len = mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&quot;224.0.0.100&quot;),6677);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;广播&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     qint64 len = mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress::Broadcast,&lt;span&gt;6677&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;发送端的界面文件我做的很简单，我只做了发送消息框：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206191/201712/1206191-20171212225652051-1774127911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;看完发送端的代码，我们继续来看接收端的代码（Udprecv）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接收端不管是单播、或者组播还是广播代码都是一样的，下面是写接收端代码的步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、创建套接字&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;QUdpSocket mSocket;
mSocket &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; QUdpSocket();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、绑定地址和端口号&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mSocket-&amp;gt;bind(QHostAddress::AnyIPv4,&lt;span&gt;6677&lt;/span&gt;&lt;span&gt;);
参数：AnyIPv4  IPv4
     &lt;/span&gt;&lt;span&gt;6677&lt;/span&gt;  端口号，要和发送端的一致
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、等待数据的到来，利用readyRread()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
connect(mSocket,SIGNAL(readyRead()),&lt;span&gt;this&lt;/span&gt;,SLOT(read_data()));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、读数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
readDatagram(&lt;span&gt;char&lt;/span&gt; * data, qint64 maxSize, QHostAddress * address = &lt;span&gt;0&lt;/span&gt;, quint16 * port = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
 参数：
      data：数据
      maxSize：数据的大小
      address：QHostAddress类型的地址
      port：端口号

例子：
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; UdpRecv::read_data()
{
    QByteArray array;
    QHostAddress address;
    quint16 port;
    array.resize(mSocket&lt;/span&gt;-&amp;gt;bytesAvailable());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据可读数据来设置空间大小&lt;/span&gt;
    mSocket-&amp;gt;readDatagram(array.data(),array.size(),&amp;amp;address,&amp;amp;port); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取数据&lt;/span&gt;
    ui-&amp;gt;listWidget-&amp;gt;addItem(array);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示数据
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送反馈数据&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果是组播的话还涉及到加入组播和退出组播&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;加入到组播组  joinMulticastGroup
            例子：mSocket&lt;/span&gt;-&amp;gt;joinMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));&lt;br/&gt;退出组播组    leaveMulticastGroup
            例子： mSocket&lt;/span&gt;-&amp;gt;leaveMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;来看看接收端（Udprecv.cpp）具体实现的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;udprecv.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_udprecv.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; UdpRecv::UdpRecv(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    QMainWindow(parent),
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui::UdpRecv)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建对象 初始化&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     mSocket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QUdpSocket();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     mSocket-&amp;gt;bind(QHostAddress::AnyIPv4,&lt;span&gt;6677&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联读数据信号readyread&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     connect(mSocket,SIGNAL(readyRead()),&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,SLOT(read_data()));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; UdpRecv::~&lt;span&gt;UdpRecv()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UdpRecv::read_data()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    QByteArray array;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    QHostAddress address;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    quint16 port;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     array.resize(mSocket-&amp;gt;bytesAvailable());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据可读数据来设置空间大小&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     mSocket-&amp;gt;readDatagram(array.data(),array.size(),&amp;amp;address,&amp;amp;port); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取数据&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     ui-&amp;gt;listWidget-&amp;gt;addItem(array);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示数据
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送反馈数据&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; UdpRecv::on_checkBox_clicked(&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         mSocket-&amp;gt;joinMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         mSocket-&amp;gt;leaveMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接收端的界面文件我只加了显示接收到的信息和选择是否加入组播的选择按钮&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206191/201712/1206191-20171212225849301-862439662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这是发送端和接收分开来写的，此外我也实现了一下发送端和接收端写到同一个文件中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;头文件qudpapp.h中的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_cc3cc22e-883b-4ec7-85a4-8a4610e490de&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cc3cc22e-883b-4ec7-85a4-8a4610e490de&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cc3cc22e-883b-4ec7-85a4-8a4610e490de&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#ifndef QUDPAPP_H
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; QUDPAPP_H
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;QWidget&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;QUdpSocket&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ui {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QUdpApp;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; QUdpApp : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QWidget
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    Q_OBJECT
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;explicit&lt;/span&gt; QUdpApp(QWidget *parent = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     ~&lt;span&gt;QUdpApp();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; slots:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendSigRb_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单播旋转轴&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendMulRb_clicked();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组播选择&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendBroadRb_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;广播选择&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendBt_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送按钮
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;===========================================&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_recvCb_clicked(&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择接收&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_recvJoinMulBt_clicked();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_recvLeaveMulBt_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendMesEdit_cursorPositionChanged();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测消息框是否有数据&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; read_data();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     Ui::QUdpApp *&lt;span&gt;ui;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     QUdpSocket *&lt;span&gt;mSocket;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    QHostAddress sendaddrees;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    QString sendPort;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; QUDPAPP_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;源文件qudpapp.cpp中的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;&lt;img id=&quot;code_img_closed_971453f1-444a-4ac5-83dc-8126c9c5e6be&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_971453f1-444a-4ac5-83dc-8126c9c5e6be&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_971453f1-444a-4ac5-83dc-8126c9c5e6be&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qudpapp.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_qudpapp.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; #include &amp;lt;QMessageBox&amp;gt;
&lt;span&gt;  4&lt;/span&gt; QUdpApp::QUdpApp(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    QWidget(parent),
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui::QUdpApp)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     mSocket = &lt;span&gt;new&lt;/span&gt; QUdpSocket();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建套接字&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     ui-&amp;gt;sendBt-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; QUdpApp::~&lt;span&gt;QUdpApp()
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================发送端====================
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单播选择&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendSigRb_clicked()
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendPortEdit-&amp;gt;text().isEmpty() || ui-&amp;gt;sendSigAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入单播ip和端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ui-&amp;gt;sendSigRb-&amp;gt;setChecked(false);&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     sendaddrees.setAddress( ui-&amp;gt;sendSigAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     sendPort  = ui-&amp;gt;sendPortEdit-&amp;gt;&lt;span&gt;text();
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组播选择&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendMulRb_clicked()
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendPortEdit-&amp;gt;text().isEmpty() || ui-&amp;gt;sendMulAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入组播ip和端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ui-&amp;gt;sendSigRb-&amp;gt;setChecked(false);&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;    sendaddrees.setAddress( ui-&amp;gt;sendMulAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;    sendPort  = ui-&amp;gt;sendPortEdit-&amp;gt;&lt;span&gt;text();
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;广播选择&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendBroadRb_clicked()
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendPortEdit-&amp;gt;text().isEmpty() || ui-&amp;gt;sendBroadAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入广播ip和端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ui-&amp;gt;sendSigRb-&amp;gt;setChecked(false);&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;     sendaddrees.setAddress( ui-&amp;gt;sendBroadAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     sendPort  = ui-&amp;gt;sendPortEdit-&amp;gt;&lt;span&gt;text();
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送按钮&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendBt_clicked()
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     mSocket-&amp;gt;writeDatagram(ui-&amp;gt;sendMesEdit-&amp;gt;&lt;span&gt;toPlainText().toUtf8(),sendaddrees,sendPort.toInt());
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测发送消息对话框中是否有消息&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendMesEdit_cursorPositionChanged()
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendMesEdit-&amp;gt;&lt;span&gt;toPlainText().isEmpty())
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         ui-&amp;gt;sendBt-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         ui-&amp;gt;sendBt-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================发送端====================
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================接收端=====================
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择接收&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QUdpApp::on_recvCb_clicked(&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;recvPortEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         ui-&amp;gt;recvCb-&amp;gt;setChecked(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         mSocket-&amp;gt;bind(QHostAddress::AnyIPv4,ui-&amp;gt;recvPortEdit-&amp;gt;&lt;span&gt;text().toInt());
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         connect(mSocket,SIGNAL(readyRead()),&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,SLOT(read_data()));
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         ui-&amp;gt;recvPortEdit-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         mSocket-&amp;gt;&lt;span&gt;close();
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         ui-&amp;gt;recvPortEdit-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_recvJoinMulBt_clicked()
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;recvMulAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入组播ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(mSocket-&amp;gt;joinMulticastGroup(QHostAddress(ui-&amp;gt;recvMulAddrEdit-&amp;gt;text()))) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         ui-&amp;gt;recvMulAddr-&amp;gt;addItem(ui-&amp;gt;recvMulAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加入组播失败,请修改ip后继续加入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_recvLeaveMulBt_clicked()
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;     mSocket-&amp;gt;leaveMulticastGroup(QHostAddress(ui-&amp;gt;recvMulAddr-&amp;gt;currentIndex()));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播地址列表当前的组播&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;     ui-&amp;gt;recvMulAddr-&amp;gt;removeItem(ui-&amp;gt;recvMulAddr-&amp;gt;currentIndex()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除组播地址列表中当前的组播地址&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::read_data()
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;    QByteArray array;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     array.resize(mSocket-&amp;gt;bytesAvailable()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将接收数据的array设置成为要接收数据的大小&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;    QHostAddress recvaddress;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;    quint16 port;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;     mSocket-&amp;gt;readDatagram(array.data(),array.size(),&amp;amp;recvaddress,&amp;amp;port); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取数据&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;     ui-&amp;gt;recvList-&amp;gt;&lt;span&gt;addItem(array);
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================接收端=====================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;界面文件qudpapp.ui&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ab37509b-6855-41a2-adbb-584435aac270&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ab37509b-6855-41a2-adbb-584435aac270&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ab37509b-6855-41a2-adbb-584435aac270&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt;  2&lt;/span&gt; &amp;lt;ui version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  3&lt;/span&gt;  &amp;lt;&lt;span&gt;class&lt;/span&gt;&amp;gt;QUdpApp&amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;  4&lt;/span&gt;  &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QUdpApp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  5&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  6&lt;/span&gt;    &amp;lt;rect&amp;gt;
&lt;span&gt;  7&lt;/span&gt;     &amp;lt;x&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;  8&lt;/span&gt;     &amp;lt;y&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;  9&lt;/span&gt;     &amp;lt;width&amp;gt;&lt;span&gt;637&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 10&lt;/span&gt;     &amp;lt;height&amp;gt;&lt;span&gt;561&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 11&lt;/span&gt;    &amp;lt;/rect&amp;gt;
&lt;span&gt; 12&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 13&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 14&lt;/span&gt;    &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Expanding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 15&lt;/span&gt;     &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt; 16&lt;/span&gt;     &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt; 17&lt;/span&gt;    &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt; 18&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 19&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;windowTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 20&lt;/span&gt;    &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;QUdpApp&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 21&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 22&lt;/span&gt;   &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layoutWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 23&lt;/span&gt;    &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 24&lt;/span&gt;     &amp;lt;rect&amp;gt;
&lt;span&gt; 25&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;9&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 26&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;9&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 27&lt;/span&gt;      &amp;lt;width&amp;gt;&lt;span&gt;394&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 28&lt;/span&gt;      &amp;lt;height&amp;gt;&lt;span&gt;463&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 29&lt;/span&gt;     &amp;lt;/rect&amp;gt;
&lt;span&gt; 30&lt;/span&gt;    &amp;lt;/property&amp;gt;
&lt;span&gt; 31&lt;/span&gt;    &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 32&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 33&lt;/span&gt;      &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 34&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt; 35&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QGroupBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;groupBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 36&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 37&lt;/span&gt;          &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 38&lt;/span&gt;           &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt; 39&lt;/span&gt;           &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt; 40&lt;/span&gt;          &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt; 41&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt; 42&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 43&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;发送端&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 44&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt; 45&lt;/span&gt;         &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 46&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 47&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 48&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 49&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;leftMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 50&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 51&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 52&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;topMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 53&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 54&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 55&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rightMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 56&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 57&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 58&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bottomMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 59&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 60&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 61&lt;/span&gt;          &amp;lt;item&amp;gt;
&lt;span&gt; 62&lt;/span&gt;           &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 63&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt; 64&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 65&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 66&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 67&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt; 68&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt; 69&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 70&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 71&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;端 口 号&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 72&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt; 73&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt; 74&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt; 75&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt; 76&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendPortEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 77&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 78&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 79&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt; 80&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt; 81&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt; 82&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt; 83&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 84&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入端口号&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 85&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt; 86&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt; 87&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt; 88&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt; 89&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt; 90&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt; 91&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 92&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 93&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 94&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt; 95&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt; 96&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRadioButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendSigRb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 97&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 98&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;单播&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 99&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;100&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;101&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;102&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;103&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendSigAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;104&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;105&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;106&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;107&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;108&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;109&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;110&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;111&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入接收方地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;112&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;113&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;114&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;115&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;116&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;117&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;118&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;119&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;120&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;121&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt;122&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;123&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRadioButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendMulRb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;124&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;125&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;组播&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;126&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;127&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;128&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;129&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;130&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendMulAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;131&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;132&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;133&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;134&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;135&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;136&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;137&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;138&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入组播地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;139&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;140&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;141&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;142&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;143&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;144&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;145&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;146&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;147&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;148&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt;149&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;150&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRadioButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendBroadRb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;151&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;152&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;广播&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;153&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;154&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;155&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;156&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;157&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendBroadAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;158&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;159&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;160&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;161&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;162&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;163&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;164&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;165&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入广播地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;166&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;167&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;168&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;169&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;170&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;171&lt;/span&gt;           &amp;lt;/layout&amp;gt;
&lt;span&gt;172&lt;/span&gt;          &amp;lt;/item&amp;gt;
&lt;span&gt;173&lt;/span&gt;         &amp;lt;/layout&amp;gt;
&lt;span&gt;174&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;175&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;176&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;177&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QGroupBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;groupBox_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;178&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;179&lt;/span&gt;          &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;180&lt;/span&gt;           &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;181&lt;/span&gt;           &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;182&lt;/span&gt;          &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;183&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;184&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;185&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;接收端&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;186&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;187&lt;/span&gt;         &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;188&lt;/span&gt;          &amp;lt;item&amp;gt;
&lt;span&gt;189&lt;/span&gt;           &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;190&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;191&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;192&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;193&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCheckBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvCb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;194&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;195&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;接收&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;196&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;197&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;198&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;199&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;200&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvPortEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;201&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;202&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入端口号&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;203&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;204&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;205&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;206&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;207&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;208&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;209&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;210&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;211&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;212&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt;213&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;214&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvMulAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;215&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;216&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;输入要加入的组播地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;217&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;218&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;219&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;220&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;221&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvJoinMulBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;222&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maximumSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;223&lt;/span&gt;                 &amp;lt;size&amp;gt;
&lt;span&gt;224&lt;/span&gt;                  &amp;lt;width&amp;gt;&lt;span&gt;40&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;225&lt;/span&gt;                  &amp;lt;height&amp;gt;&lt;span&gt;16777215&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;226&lt;/span&gt;                 &amp;lt;/size&amp;gt;
&lt;span&gt;227&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;228&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;229&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;加入&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;230&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;231&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;232&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;233&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;234&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;235&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;236&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;237&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;238&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvMulAddr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;239&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;240&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;241&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvLeaveMulBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;242&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maximumSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;243&lt;/span&gt;                 &amp;lt;size&amp;gt;
&lt;span&gt;244&lt;/span&gt;                  &amp;lt;width&amp;gt;&lt;span&gt;40&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;245&lt;/span&gt;                  &amp;lt;height&amp;gt;&lt;span&gt;16777215&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;246&lt;/span&gt;                 &amp;lt;/size&amp;gt;
&lt;span&gt;247&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;248&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;249&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;退出&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;250&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;251&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;252&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;253&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;254&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;255&lt;/span&gt;           &amp;lt;/layout&amp;gt;
&lt;span&gt;256&lt;/span&gt;          &amp;lt;/item&amp;gt;
&lt;span&gt;257&lt;/span&gt;         &amp;lt;/layout&amp;gt;
&lt;span&gt;258&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;259&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;260&lt;/span&gt;      &amp;lt;/layout&amp;gt;
&lt;span&gt;261&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;262&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;263&lt;/span&gt;      &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;264&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;265&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QListWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;266&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;267&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;268&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QTextEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendMesEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;269&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maximumSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;270&lt;/span&gt;          &amp;lt;size&amp;gt;
&lt;span&gt;271&lt;/span&gt;           &amp;lt;width&amp;gt;&lt;span&gt;16777215&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;272&lt;/span&gt;           &amp;lt;height&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;273&lt;/span&gt;          &amp;lt;/size&amp;gt;
&lt;span&gt;274&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;275&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;276&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;277&lt;/span&gt;      &amp;lt;/layout&amp;gt;
&lt;span&gt;278&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;279&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;280&lt;/span&gt;      &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;281&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;282&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clearRecvListBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;283&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;284&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;清除接收区&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;285&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;286&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;287&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;288&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;289&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clearsendEditBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;290&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;291&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;清除发送区&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;292&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;293&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;294&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;295&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;296&lt;/span&gt;        &amp;lt;spacer name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalSpacer_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;297&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orientation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;298&lt;/span&gt;          &amp;lt;&lt;span&gt;enum&lt;/span&gt;&amp;gt;Qt::Horizontal&amp;lt;/&lt;span&gt;enum&lt;/span&gt;&amp;gt;
&lt;span&gt;299&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;300&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizeHint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stdset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;301&lt;/span&gt;          &amp;lt;size&amp;gt;
&lt;span&gt;302&lt;/span&gt;           &amp;lt;width&amp;gt;&lt;span&gt;40&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;303&lt;/span&gt;           &amp;lt;height&amp;gt;&lt;span&gt;20&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;304&lt;/span&gt;          &amp;lt;/size&amp;gt;
&lt;span&gt;305&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;306&lt;/span&gt;        &amp;lt;/spacer&amp;gt;
&lt;span&gt;307&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;308&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;309&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;310&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;311&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;发送&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;312&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;313&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;314&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;315&lt;/span&gt;      &amp;lt;/layout&amp;gt;
&lt;span&gt;316&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;317&lt;/span&gt;    &amp;lt;/layout&amp;gt;
&lt;span&gt;318&lt;/span&gt;   &amp;lt;/widget&amp;gt;
&lt;span&gt;319&lt;/span&gt;  &amp;lt;/widget&amp;gt;
&lt;span&gt;320&lt;/span&gt;  &amp;lt;layoutdefault spacing=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;321&lt;/span&gt;  &amp;lt;resources/&amp;gt;
&lt;span&gt;322&lt;/span&gt;  &amp;lt;connections&amp;gt;
&lt;span&gt;323&lt;/span&gt;   &amp;lt;connection&amp;gt;
&lt;span&gt;324&lt;/span&gt;    &amp;lt;sender&amp;gt;clearRecvListBt&amp;lt;/sender&amp;gt;
&lt;span&gt;325&lt;/span&gt;    &amp;lt;signal&amp;gt;clicked()&amp;lt;/signal&amp;gt;
&lt;span&gt;326&lt;/span&gt;    &amp;lt;receiver&amp;gt;recvList&amp;lt;/receiver&amp;gt;
&lt;span&gt;327&lt;/span&gt;    &amp;lt;slot&amp;gt;clear()&amp;lt;/slot&amp;gt;
&lt;span&gt;328&lt;/span&gt;    &amp;lt;hints&amp;gt;
&lt;span&gt;329&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sourcelabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;330&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;47&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;331&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;448&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;332&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;333&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;destinationlabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;334&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;70&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;335&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;227&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;336&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;337&lt;/span&gt;    &amp;lt;/hints&amp;gt;
&lt;span&gt;338&lt;/span&gt;   &amp;lt;/connection&amp;gt;
&lt;span&gt;339&lt;/span&gt;   &amp;lt;connection&amp;gt;
&lt;span&gt;340&lt;/span&gt;    &amp;lt;sender&amp;gt;clearsendEditBt&amp;lt;/sender&amp;gt;
&lt;span&gt;341&lt;/span&gt;    &amp;lt;signal&amp;gt;clicked()&amp;lt;/signal&amp;gt;
&lt;span&gt;342&lt;/span&gt;    &amp;lt;receiver&amp;gt;sendMesEdit&amp;lt;/receiver&amp;gt;
&lt;span&gt;343&lt;/span&gt;    &amp;lt;slot&amp;gt;clear()&amp;lt;/slot&amp;gt;
&lt;span&gt;344&lt;/span&gt;    &amp;lt;hints&amp;gt;
&lt;span&gt;345&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sourcelabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;346&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;134&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;347&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;455&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;348&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;349&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;destinationlabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;350&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;145&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;351&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;410&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;352&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;353&lt;/span&gt;    &amp;lt;/hints&amp;gt;
&lt;span&gt;354&lt;/span&gt;   &amp;lt;/connection&amp;gt;
&lt;span&gt;355&lt;/span&gt;  &amp;lt;/connections&amp;gt;
&lt;span&gt;356&lt;/span&gt; &amp;lt;/ui&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;界面文件图示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206191/201712/1206191-20171212230357863-547470968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 15:06:00 +0000</pubDate>
<dc:creator>菜头大大</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wurenzhong/p/8030220.html</dc:identifier>
</item>
<item>
<title>Scala入门系列（七）：面向对象之继承 - 小丑进场</title>
<link>http://www.cnblogs.com/LiCheng-/p/8030090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiCheng-/p/8030090.html</guid>
<description>&lt;div id=&quot;wmd-preview-section-25285&quot; readability=&quot;7&quot;&gt;
&lt;h2&gt;extends&lt;/h2&gt;
&lt;p&gt;与Java一样，也是使用extends关键字，使用继承可以有效复用代码&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25506&quot; readability=&quot;12.5&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;/span&gt; = name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; score = &lt;span&gt;&quot;A&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getScore&lt;/span&gt;&lt;/span&gt; = score&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;53432&lt;/span&gt;aef&lt;/p&gt;

&lt;p&gt;scala&amp;gt; s.getName&lt;/p&gt;
&lt;p&gt;res27: &lt;span&gt;String&lt;/span&gt; = leo&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;子类可以覆盖父类的field和method；但如果父类用final修饰，则该类是无法被继承的，如果field和method用final修饰，则field和method是无法被覆盖的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25307&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;override &amp;amp; super&lt;/h2&gt;
&lt;p&gt;跟Java一样，在Scala中，如果子类要覆盖一个父类中的非抽象方法，则必须要使用override关键字。&lt;/p&gt;
&lt;p&gt;但再覆盖之后，如果我们需要在子类中调用父类被覆盖的方法该怎么办呢？那就可以使用super关键字，显式地指定要调用的父类方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25248&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;/span&gt; = name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; score = &lt;span&gt;&quot;A&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getScore&lt;/span&gt;&lt;/span&gt; = score&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;&quot;Hi, I'm&quot;&lt;/span&gt; + &lt;span&gt;super&lt;/span&gt;.getName&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;在Scala中，子类可以覆盖父类的val field，而且子类的val field还可以覆盖父类val field的getter方法；只要在子类中使用override关键字。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25529&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;Person&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;age&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; age: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;30&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试覆盖了父类的getter方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; s.age&lt;/p&gt;
&lt;p&gt;res28: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;30&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25330&quot; readability=&quot;9&quot;&gt;
&lt;h2&gt;isInstanceOf &amp;amp; asInstanceOf&lt;/h2&gt;
&lt;p&gt;使用isInstanceOf 和 asInstanceOf可以安全的做到父类与子类对象之间类型的转化。 &lt;br/&gt;首先，需要使用isInstanceOf判断对象是否是指定类的对象，如果是的话，则可以使用asInstanceOf将对象转换为指定类型。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25611&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; p: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;var&lt;/span&gt; s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt; (p.isInstanceOf[&lt;span&gt;Student&lt;/span&gt;]) s = p.asInstanceOf[&lt;span&gt;Student&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;scala&amp;gt; s&lt;/p&gt;
&lt;p&gt;res31: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;7&lt;/span&gt;ebfe01a&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果对象时null，则isInstanceOf返回false，asInstanceOf返回null&lt;/li&gt;
&lt;li&gt;如果没有用isInstanceOf先判断就直接asInstanceOf转换，则可能抛出异常&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25352&quot; readability=&quot;8&quot;&gt;
&lt;h2&gt;getCalss &amp;amp; classOf&lt;/h2&gt;
&lt;p&gt;isInstanceOf 只能判断出对象是否是指定类以及其子类的对象，而不能精确判断出，对象就是指定类的对象。 &lt;br/&gt;使用getCalss 和 classOf 就可以精确判断。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25633&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; p: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; p.getClass == classOf[&lt;span&gt;Person&lt;/span&gt;]&lt;/p&gt;
&lt;p&gt;res32: &lt;span&gt;Boolean&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; p.getClass == classOf[&lt;span&gt;Student&lt;/span&gt;]&lt;/p&gt;
&lt;p&gt;res33: &lt;span&gt;Boolean&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25374&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;protected关键字&lt;/h2&gt;
&lt;p&gt;跟Java一样，Scala中同样可以使用protected关键字来修饰field和method，这样在子类中就不需要super关键字，直接就可以访问。&lt;/p&gt;
&lt;p&gt;还可以使用protected[this]，则只能在当前子类对象中访问父类的field和method，无法在其他子类对象中访问，跟private[this]一样。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25655&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;protected&lt;/span&gt;[&lt;span&gt;this&lt;/span&gt;] &lt;span&gt;var&lt;/span&gt; hobby: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;game&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHelllo&lt;/span&gt;&lt;/span&gt; = println(&lt;span&gt;&quot;hello, &quot;&lt;/span&gt; + name)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;makeFriends&lt;/span&gt;&lt;/span&gt;(s: &lt;span&gt;Student&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;println(&lt;span&gt;&quot;my hobby is &quot;&lt;/span&gt; + hobby + &lt;span&gt;&quot;,your hobby is &quot;&lt;/span&gt; + s.hobby)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;// 因为父类中使用了protected[this]，所以这里s.hobby访问出错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;console&amp;gt;:&lt;span&gt;19&lt;/span&gt;: error: value hobby is not a member of &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;println(&lt;span&gt;&quot;my hobby is &quot;&lt;/span&gt; + hobby + &lt;span&gt;&quot;,your hobby is &quot;&lt;/span&gt; + s.hobby)&lt;/p&gt;
&lt;p&gt;^&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25396&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;调用父类的constructor&lt;/h2&gt;
&lt;p&gt;在Scala中，每个类可以有一个主constructor和任意多个辅constructor，而每个辅助constructor的第一行都必须是调用其他辅助constructor或者是主constructor，&lt;strong&gt;因此子类的辅助constructor是一定不可能直接调用父类的constructor的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;只能在子类的主constructor中调用父类的constructor，采用以下语法：&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25677&quot; readability=&quot;24&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;val name: &lt;span&gt;String&lt;/span&gt;, val age: &lt;span&gt;Int&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;/* 注意，如果是父类接收的参数，比如name和age，子类中接收时，就不要用任何val或者var来修饰，否则会被认为是子类覆盖父类的field。*/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;, age: &lt;span&gt;Int&lt;/span&gt;, var score: &lt;span&gt;Double&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;name, age&lt;/span&gt;)&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;/span&gt;(name: &lt;span&gt;String&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;this&lt;/span&gt;(name, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;/span&gt;(age: &lt;span&gt;Int&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;this&lt;/span&gt;(&lt;span&gt;&quot;sparks&quot;&lt;/span&gt;, age, &lt;span&gt;0&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;&quot;sparks&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;4&lt;/span&gt;c3fcbe7&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;7852&lt;/span&gt;ab30&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25418&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;匿名内部类&lt;/h2&gt;
&lt;p&gt;在Scala中，匿名内部类是非常强大且常见的，Spark源码中也大量使用了这种匿名内部类。&lt;/p&gt;
&lt;p&gt;定义一个类的没有名字的子类，并直接创建其对象，然后将该对象的引用赋予一个变量，之后甚至可以将该对象传递给其他函数。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25699&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;protected val name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;&quot;hello, I'm &quot;&lt;/span&gt; + name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 定义匿名内部类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; p = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;&quot;leo&quot;&lt;/span&gt;){&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;&quot;Hi, I'm &quot;&lt;/span&gt; + name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 定义使用匿名内部类的函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;greeting&lt;/span&gt;&lt;/span&gt;(p: &lt;span&gt;Person&lt;/span&gt;{&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;}){&lt;/p&gt;
&lt;p&gt;println(p.sayHello)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; greeting(p)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hi&lt;/span&gt;, &lt;span&gt;I&lt;/span&gt;&lt;span&gt;'m&lt;/span&gt; leo&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25440&quot; readability=&quot;10&quot;&gt;
&lt;h2&gt;抽象类&lt;/h2&gt;
&lt;p&gt;跟Java相似，一个类中如果有一个抽象方法，那么类就必须用abstract来声明类，此时抽象类不可以实例化。&lt;/p&gt;
&lt;p&gt;在子类覆盖抽象类的抽象方法时，不需要使用override 关键字&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25261&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;val name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;name&lt;/span&gt;)&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;Unit&lt;/span&gt; = println(&lt;span&gt;&quot;Hello, &quot;&lt;/span&gt; + name)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;如果在抽象类中定义了field，但没有给出初始值，则此field为抽象field&lt;/p&gt;
&lt;p&gt;抽象field意味着：scala会根据自己的规则，为var或val类型的field生成对应的getter和setter方法，但是父类中是没有该field的，子类必须覆盖field，不需要使用override关键字。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25262&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 子类必须要覆盖抽象field&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;{&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 12 Dec 2017 14:36:00 +0000</pubDate>
<dc:creator>小丑进场</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiCheng-/p/8030090.html</dc:identifier>
</item>
<item>
<title>Spring之bean二生命周期 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/8030038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/8030038.html</guid>
<description>&lt;p&gt;上一博客主要学习了下bean的配置、注入、自定义属性编辑器，今天来熟悉bean的生命周期。在开发中生命周期是一个很常见的名词，基本每种编程语言都能找到与它关联的。关于bean的生命周期我在网上也找了好多，基本都差不多。这里我主要是想通过代码来验证，毕竟学的知识都是一样的，都是学的Java，最重要的是动手练习，这样印象更深。下面是它生命周期的描述，我们通过demo来进行验证。下图是它执行的顺序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201712/733213-20171212222111004-2126963628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201712/733213-20171212221723972-533210600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一、创建LiftCycle类实现BeanFactoryAware,BeanNameAware,InitializingBean,DisposableBean,ApplicationContextAware5个接口方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_3a2be721-347d-42bb-bd51-e822b73020a5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a2be721-347d-42bb-bd51-e822b73020a5&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a2be721-347d-42bb-bd51-e822b73020a5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanFactoryAware;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanNameAware;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.DisposableBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.InitializingBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContextAware;


&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LifeCycle  &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; BeanFactoryAware,BeanNameAware,InitializingBean,DisposableBean,ApplicationContextAware{
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        System.out.println(&lt;/span&gt;&quot;getName name=&quot;+&lt;span&gt;name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
         System.out.println(&lt;/span&gt;&quot;setName name=&quot;+&lt;span&gt;name);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; afterPropertiesSet() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
         System.out.println(&quot;InitializingBean.afterPropertiesSet()&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setBeanName(String arg0) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanNameAware.setBeanName&quot;&lt;span&gt;);

    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setBeanFactory(BeanFactory arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanFactoryAware.setBeanFactory&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; destroy() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;DisposableBean.destroy&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; myInit() {
        System.out.println(&lt;/span&gt;&quot;【init-method】调用&amp;lt;bean&amp;gt;的init-method属性指定的初始化方法&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; myDestory() {
        System.out.println(&lt;/span&gt;&quot;【destroy-method】调用&amp;lt;bean&amp;gt;的destroy-method属性指定的初始化方法&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setApplicationContext(ApplicationContext arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
         System.out.println(&quot;ApplicationContextAware.setApplicationContext&quot;&lt;span&gt;);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;二、注册InstantiationAwareBeanPostProcessor接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_dbda5d4d-f366-461d-b758-b5957a1b006e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dbda5d4d-f366-461d-b758-b5957a1b006e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dbda5d4d-f366-461d-b758-b5957a1b006e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.beans.PropertyDescriptor;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.PropertyValues;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyInstantiationAwareBeanPostProcessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; InstantiationAwareBeanPostProcessor{

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessAfterInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessAfterInitialization&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessBeforeInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessBeforeInitialization&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; postProcessAfterInstantiation(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessBeforeInstantiation(Class&amp;lt;?&amp;gt; beanClass, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean,
            String beanName) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessPropertyValues&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pvs;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;三、注册BeanPostProcessor接口&lt;/p&gt;
&lt;p&gt;其实InstantiationAwareBeanPostProcessor继承BeanPostProcessor，所以在上面我也实现了BeanPostProcessor接口的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4b495167-1d38-485e-b2fd-7e1f55ef3d19&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4b495167-1d38-485e-b2fd-7e1f55ef3d19&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4b495167-1d38-485e-b2fd-7e1f55ef3d19&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.BeanPostProcessor;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyBeanPostProcessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;  BeanPostProcessor {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessAfterInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanPostProcessor.postProcessAfterInitialization  &quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessBeforeInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanPostProcessor.postProcessBeforeInitialization&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;四、注册BeanFactoryPostProcessor接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3710de32-1710-4562-8b7d-258f804ad53d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3710de32-1710-4562-8b7d-258f804ad53d&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3710de32-1710-4562-8b7d-258f804ad53d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.BeanFactoryPostProcessor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyBeanFactoryPostProcessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;  BeanFactoryPostProcessor {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; postProcessBeanFactory(ConfigurableListableBeanFactory arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanFactoryPostProcessor.postProcessBeanFactory&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;五、在上下文中配置&lt;/p&gt;
&lt;p&gt;这里还是在上一个博客demo的基础上进行修改，为了有其他干扰，我先把service去掉了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dd4832b0-49f6-4f83-bc1a-428b1c3d0516&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dd4832b0-49f6-4f83-bc1a-428b1c3d0516&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dd4832b0-49f6-4f83-bc1a-428b1c3d0516&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;&lt;/span&gt;
&amp;lt;bean id=&quot;beanPostProcessor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.MyBeanPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;instantiationAwareBeanPostProcessor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.MyInstantiationAwareBeanPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;beanFactoryPostProcessor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.MyBeanFactoryPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;lifeCycle&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.LifeCycle&quot; init-method=&quot;myInit&quot; destroy-method=&quot;myDestory&quot;&amp;gt;
&amp;lt;property name=&quot;name&quot; value=&quot;cuiyw1&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;六、在main中使用bean&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_3b823262-10f1-42a9-bb8a-7204587bc742&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3b823262-10f1-42a9-bb8a-7204587bc742&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3b823262-10f1-42a9-bb8a-7204587bc742&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.SpringAop;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.IService.IService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service.LifeCycle;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; App 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args )
    {
        ApplicationContext context&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span&gt;new&lt;/span&gt; String[]{&quot;ApplicationContext.xml&quot;&lt;span&gt;});
        BeanFactory factory&lt;/span&gt;=&lt;span&gt;context;
        LifeCycle lifeCycle&lt;/span&gt;=factory.getBean(&quot;lifeCycle&quot;,LifeCycle.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        lifeCycle.setName(&lt;/span&gt;&quot;cuiyw2&quot;&lt;span&gt;);
         System.out.println(&lt;/span&gt;&quot;lifeCycle.name=&quot;+&lt;span&gt;lifeCycle.getName());
        ((ClassPathXmlApplicationContext)factory).registerShutdownHook();

     
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;service=(IService)factory.getBean(&quot;ServiceA&quot;);
        service.service(&quot;Cuiyw ServiceA&quot;); 
        service=(IService)factory.getBean(&quot;ServiceImpl&quot;);
        service.service(&quot;Cuiyw ServiceImpl&quot;); &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;七、输入打印结果&lt;/p&gt;
&lt;p&gt;可以发现输出的顺序和上面图的顺序基本一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201712/733213-20171212221356519-684387556.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 14:27:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/8030038.html</dc:identifier>
</item>
<item>
<title>C# 通过反射初探ORM框架的实现原理 - cccc_hi</title>
<link>http://www.cnblogs.com/liyuhui-Z/p/8026505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liyuhui-Z/p/8026505.html</guid>
<description>&lt;h2&gt;背景：&lt;/h2&gt;
&lt;p&gt;　　以前学的Java进行开发，多用到Mybatis，Hiberante等ORM框架，最近需要上手一个C#的项目，由于不是特别难，也不想再去学习C#的ORM框架，所以就想着用反射简单的实现一下ORM框架的内容，简单的增删改查，没有用到多表之间的联系。&lt;/p&gt;
&lt;h2&gt;反射：&lt;/h2&gt;
&lt;p&gt;　　Java和C#中的反射大体相同，主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。我的理解就是可以程序运行时动态的获取对象的属性和方法，并且可以进行与之相关的调用。&lt;/p&gt;
&lt;h2&gt;首先看一下C#中反射实现方式：&lt;/h2&gt;
&lt;h3&gt;　　获取Type对象，反射操作都需要通过Type对象来进行。&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     通过全限定名来获取  Type tp = Type.GetType(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TJCommon.Dao.Deriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;     通过类来获取   Type tp = &lt;span&gt;typeof&lt;/span&gt;(Int)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　获取到Type对象后我们可以通过其构造方法来创建对象&lt;/h3&gt;
&lt;h4&gt;　　　　调用无参构造&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取类的初始化构造信息&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;         ConstructorInfo ct =&lt;span&gt; tp.GetConstructor(System.Type.EmptyTypes);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用不带参数的构造器&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         T newObj = (T)ct.Invoke(&lt;span&gt;null&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　调用有参构造&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义参数类型数组&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         Type[] tps = &lt;span&gt;new&lt;/span&gt; Type[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         tps[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         tps[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取类的初始化参数信息&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         ConstructorInfo ct2 =&lt;span&gt; tp.GetConstructor(tps);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义参数数组&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;object&lt;/span&gt;[] obj = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         obj[&lt;span&gt;0&lt;/span&gt;] = (&lt;span&gt;object&lt;/span&gt;)&lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         obj[&lt;span&gt;1&lt;/span&gt;] = (&lt;span&gt;object&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Param Example&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用带参数的构造器&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         ExampleClass Ex2 = (ExampleClass)ct2.Invoke(obj);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　　　获得所有公共字段&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         
&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取到所有公共字段&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         FieldInfo[] arr =&lt;span&gt; t.GetFields();     
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给指定的字段赋值   需要传递进来一个对象  newObj&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;         f.SetValue(newObj, r[name]);    
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt; 　　　这里就介绍这几个方法，通过反射可以获得类中的所有信息，并且可以进行调用，还可以打破封装（不安全） &lt;/h4&gt;
&lt;h2&gt;练习&lt;/h2&gt;
&lt;h4&gt;　　下面就是通过反射将从数据库中获取到的结果集自动封装到Bean中。无需手动封装&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; T dataToObj(String str)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;             String strSql =&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             DataSet ds =&lt;span&gt; SqlCompose.ExecuteSqlQuery(strSql);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;             Type t = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             DataRow r = ds.Tables[&lt;span&gt;0&lt;/span&gt;].Rows[&lt;span&gt;0&lt;/span&gt;];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到一行&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             FieldInfo[] arr = t.GetFields();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回所有公共字段(public)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             ConstructorInfo ct =&lt;span&gt; t.GetConstructor(System.Type.EmptyTypes);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             T newObj = (T)ct.Invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (r != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (FieldInfo f &lt;span&gt;in&lt;/span&gt; arr)&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有字段&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; name =&lt;span&gt; f.Name;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     Type type2 =&lt;span&gt; f.FieldType;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (r[name].GetType() != &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DBNull))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         &lt;span&gt;string&lt;/span&gt; typeName =&lt;span&gt; f.FieldType.Name;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        f.SetValue(newObj, r[name]);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 newObj = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            ds.Tables.Clear();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newObj;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　封装到List&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt; dataToList(String str)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             List&amp;lt;T&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;             String strSql =&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             DataSet ds =&lt;span&gt; SqlCompose.ExecuteSqlQuery(strSql);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;             Type t = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             FieldInfo[] arr = t.GetFields();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回所有公共字段(public)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             ConstructorInfo ct =&lt;span&gt; t.GetConstructor(System.Type.EmptyTypes);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (DataRow dr &lt;span&gt;in&lt;/span&gt; ds.Tables[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Rows)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 T newObj = (T)ct.Invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (FieldInfo f &lt;span&gt;in&lt;/span&gt; arr)&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有字段&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; name =&lt;span&gt; f.Name;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     Type type2 =&lt;span&gt; f.FieldType;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; typeName =&lt;span&gt; f.FieldType.Name;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (dr[name].GetType() != &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DBNull))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                        f.SetValue(newObj, dr[name]);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                list.Add(newObj);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            ds.Tables.Clear();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　拼接字符串进行insert操作&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; inserByBean(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tableName, T target)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         StringBuilder sql = &lt;span&gt;new&lt;/span&gt; StringBuilder(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拼接的sql&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+tableName+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         Type t =&lt;span&gt; target.GetType();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         PropertyInfo[] ps =&lt;span&gt; t.GetProperties();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ps.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;object&lt;/span&gt; obj = ps[i].GetValue(target, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; name =&lt;span&gt; ps[i].Name;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i != ps.Length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     sql.Append(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     sql.Append(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) values(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ps.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;object&lt;/span&gt; obj = ps[i].GetValue(target, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i != ps.Length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) || ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DateTime))
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) || ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DateTime))
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;string&lt;/span&gt; resultSql =&lt;span&gt; sql.ToString();
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        SqlCompose.ExecuteSqlNonQuery(resultSql);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 12 Dec 2017 12:56:00 +0000</pubDate>
<dc:creator>cccc_hi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liyuhui-Z/p/8026505.html</dc:identifier>
</item>
</channel>
</rss>