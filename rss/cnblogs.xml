<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>运行第一个 Service - 每天5分钟玩转 Docker 容器技术（96） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7874609.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7874609.html</guid>
<description>&lt;p&gt;&lt;span&gt;上一节我们创建好了 Swarm 集群， 现在&lt;/span&gt;&lt;span&gt;部署一个运行 httpd 镜像的 service，执行如下命令：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;docker service create --name web_server httpd&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;部署 service 的命令形式与运行容器的&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker run&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;很相似，&lt;code&gt;&lt;span&gt;--name&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;为 service 命名，&lt;code&gt;&lt;span&gt;httpd&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;为镜像的名字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182338743-1729248505.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker service ls&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;span&gt;可以查看当前 swarm 中的 service。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182438508-1898850417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;REPLICAS&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;显示当前副本信息，&lt;code&gt;&lt;span&gt;0/1&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;的意思是 web_server 这个 service 期望的容器副本数量为 1，目前已经启动的副本数量为 0。也就是当前 service 还没有部署完成。命令&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker service ps&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;可以查看 service 每个副本的状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182512383-1570933629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到 service 唯一的副本被分派到 swarm-worker1，当前的状态是&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Preparing&lt;/span&gt;&lt;/code&gt;，还没达到期望的状态&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Running&lt;/span&gt;&lt;/code&gt;，我们不仅要问，这个副本在 Preparing 什么呢？&lt;/p&gt;
&lt;p&gt;其实答案很简单，swarm-worker1 是在 pull 镜像，下载完成后，副本就会处于&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Running&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;状态了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182553305-464709849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;service 的运行副本数也正常了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182537993-2080112945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果觉得不放心，还可以到 swarm-worker1 去确认 httpd 容器已经运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182637227-1144898698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前 web_server 在 swarm 中的分布如图所示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201711/775365-20171121182657586-976053608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前为止 Service 与普通的容器还没有太大的不同，下一节我们就要学习容器编排引擎的强大功能了，首先从应用伸缩 Scale Up/Down 开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 21 Nov 2017 23:08:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7874609.html</dc:identifier>
</item>
<item>
<title>Java Web基础入门 - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/java-web-springboot.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/java-web-springboot.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1510489587800&amp;amp;di=367ad9e5c4515afa93b501d8db399296&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fa2.att.hudong.com%2F43%2F87%2F20300543669437145007874802107.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.mp.itc.cn/upload/20161209/39e6aef0d951457ba627d5d64c6142b5_th.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;语言都是相通的，只要搞清楚概念后就可以编写代码了。而概念是需要学习成本的。&lt;/p&gt;

&lt;p&gt;不用看《编程思想》,基础语法看 &lt;a href=&quot;http://www.runoob.com/java/java-basic-syntax.html&quot; class=&quot;uri&quot;&gt;http://www.runoob.com/java/java-basic-syntax.html&lt;/a&gt; 就可以了，入门后想干啥干啥，如果感兴趣，如果有时间。&lt;/p&gt;

&lt;p&gt;这里讲的web是指提供API(Application Programming Interface)的能力。那么什么是API?&lt;/p&gt;
&lt;p&gt;API是指server端和client端进行资源交互的通道。Client可以通过API来获取和修改server端的资源(Resource). 实际上，API差不多就是URL的代称，现阶段，推荐采用RESTfull API.&lt;/p&gt;
&lt;h2 id=&quot;restfull-api&quot;&gt;RESTfull API&lt;/h2&gt;
&lt;p&gt;API表现方式就是URL(Uniform Resoure Locator)。RESTfull API是一个概念，规定了应该以什么样的结构去构建API，即应该如何拼接URL。先来看看URL是什么样子的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ryan-Miao/MyDraw/master/API/url.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;资源（Resources）&lt;/strong&gt;&lt;br/&gt;path中的&lt;code&gt;groups&lt;/code&gt;和&lt;code&gt;users&lt;/code&gt;都是资源的名称，通过参数来确定资源的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为/操作(Method)&lt;/strong&gt;&lt;br/&gt;我们通过约定的&lt;code&gt;Http Method&lt;/code&gt;来表示对Resource的操作。&lt;/p&gt;
&lt;p&gt;常用的HTTP动词有下面五个（括号里是对应的SQL命令）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;GET（SELECT）：从服务器取出资源（一项或多项）。
POST（CREATE）：在服务器新建一个资源。
PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
DELETE（DELETE）：从服务器删除资源。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有两个不常用的HTTP动词。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;HEAD：获取资源的元数据。
OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;GET /zoos：列出所有动物园
POST /zoos：新建一个动物园
GET /zoos/ID：获取某个指定动物园的信息
PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
DELETE /zoos/ID：删除某个动物园
GET /zoos/ID/animals：列出某个指定动物园的所有动物
DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当path的组成仍旧无法准确定位资源的时候，可以通过queryParam来进一步缩小范围。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;?limit=10：指定返回记录的数量
?offset=10：指定返回记录的开始位置。
?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。
?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。
?animal_type_id=1：指定筛选条件&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;更多关于构建RESTfull API的信息，参阅https://codeplanet.io/principles-good-restful-api-design/&lt;/p&gt;
&lt;h2 id=&quot;contenttype&quot;&gt;ContentType&lt;/h2&gt;
&lt;p&gt;现在的接口都是基于JSON传输的，什么是JSON(JavaScript Object Notation)?&lt;/p&gt;
&lt;p&gt;一个基于JSON的API的response应该包含以下header&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Content-Type:application/json; charset=utf-8&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;nodejs-web&quot;&gt;NodeJS Web&lt;/h2&gt;
&lt;p&gt;安装&lt;a href=&quot;http://www.cnblogs.com/woshimrf/p/nodejs-enrionment-install.html&quot;&gt;NodeJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后，创建app.js, &lt;code&gt;npm install express --save&lt;/code&gt;, &lt;code&gt;node app.js&lt;/code&gt;， 访问&lt;code&gt;localhost:3000/&lt;/code&gt;，&lt;code&gt;localhost:3000/json&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 这句的意思就是引入 `express` 模块，并将它赋予 `express` 这个变量等待使用。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; express &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'express'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 调用 express 实例，它是一个函数，不带参数调用时，会返回一个 express 实例，将这个变量赋予 app 变量。&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;express&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。这里我们调用了它的 #send 方法，向浏览器输出一个字符串。&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Hello World'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; rs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;rs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Ryan&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;send&lt;/span&gt;(rs)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app is listening at port 3000'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;java-web&quot;&gt;Java Web&lt;/h2&gt;
&lt;h2 id=&quot;demo-source&quot;&gt;demo source&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle&quot; class=&quot;uri&quot;&gt;https://github.com/Ryan-Miao/springboot-demo-gradle&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动和调试&quot;&gt;启动和调试&lt;/h3&gt;
&lt;p&gt;最简单的是启动就是运行main方法，还可以命令行启动&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gradlew bootRun&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;debug，最简单的就是以debug启动main方法。当然也可以远程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gradlew bootRun --debug-jvm&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/commandline-debug.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，在IDEA中，点击Edit configurations&lt;br/&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/edit-configurations.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择remote&lt;br/&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/remote.png?raw=true&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/debug.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，点击debug&lt;br/&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/debug-start.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果想支持热加载，则需要添加&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;compile(&quot;org.springframework.boot:spring-boot-devtools&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在IDEA里修改Java class后需要，重新build当前class才能生效。快捷键 &lt;code&gt;ctrl+shif+F9&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置文件&quot;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;spring boot默认配置了很多东西，但有时候我们想要修改默认值，比如不想用8080作为端口，因为端口被占用了。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;resources&lt;/code&gt;下，新建&lt;code&gt;application.properties&lt;/code&gt;, 然后在里面输入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server.port=8081&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，重启项目，发现端口已经生效。&lt;/p&gt;
&lt;p&gt;再配置一些common的自定义，比如日志。项目肯定要记录日志的，&lt;code&gt;System.out.println&lt;/code&gt;远远达不到日志的要求。springboot默认采用&lt;code&gt;Logback&lt;/code&gt;作为日志处理工具。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring.output.ansi.enabled=ALWAYS
logging.file=logs/demo.log
logging.level.root=INFO&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着，开发和生产环境的配置必然不同的，比如数据库的地址不同，那么可以分配置文件来区分环境。&lt;/p&gt;
&lt;p&gt;在resources下新建&lt;code&gt;application-dev.properties&lt;/code&gt;, &lt;code&gt;application-prod.properties&lt;/code&gt;. spring默认通过后缀不同来识别不同的环境，不加后缀的是base配置。那么如何生效呢？&lt;/p&gt;
&lt;p&gt;只要在base的配置文件中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring.profiles.active=dev&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比如，我们在dev环境中设置loglevel为debug&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;logging.level.root=debug&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样，springboot会优先读取base文件，然后读取dev，当dev有相同的配置项时，dev会覆盖base。&lt;/p&gt;
&lt;p&gt;这样，本地开发和生产环境隔离，部署也方便。事实上，springboot接收参数的优先级为&lt;code&gt;resources下的配置文件&lt;/code&gt;&amp;lt;&lt;code&gt;命令行参数&lt;/code&gt;. 通常，我们部署项目的脚本会使用命令行参数来覆盖配置文件，这样就可以动态指定配置文件了。&lt;/p&gt;
&lt;h3 id=&quot;接收参数响应json&quot;&gt;接收参数，响应JSON&lt;/h3&gt;
&lt;p&gt;新建一个controller, com.test.demo.controller.ParamController&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.test.demo.controller;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.slf4j.Logger;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.LoggerFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.GetMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestParam;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RestController;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.ArrayList;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.HashMap;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan on 2017/11/16/0016.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/param&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ParamController {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(ParamController.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hotels/{htid}/rooms&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Long&amp;gt; &lt;span class=&quot;fu&quot;&gt;getRooms&lt;/span&gt;(
            &lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; String htid,
            &lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt; String langId,
            &lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;limit&quot;&lt;/span&gt;, required = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;, defaultValue = &lt;span class=&quot;st&quot;&gt;&quot;10&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; limit,
            &lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;offset&quot;&lt;/span&gt;, required = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;, defaultValue = &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; offset
    ){
        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; params = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        params.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hotelId&quot;&lt;/span&gt;, htid);
        params.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;langId&quot;&lt;/span&gt;, langId);
        params.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;limit&quot;&lt;/span&gt;, limit);
        params.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;offset&quot;&lt;/span&gt;, offset);

        LOGGER.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;The params is {}&quot;&lt;/span&gt;, params);

        List&amp;lt;Long&amp;gt; roomIds = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
        roomIds.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(1L);
        roomIds.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(2L);
        roomIds.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(3L);

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; roomIds;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;LOG: 采用Sl4J接口&lt;/li&gt;
&lt;li&gt;参数： &lt;code&gt;@PathVariable&lt;/code&gt; 可以接收url路径中的参数&lt;/li&gt;
&lt;li&gt;参数： &lt;code&gt;@RequestParam&lt;/code&gt; 可以接收&lt;code&gt;?&lt;/code&gt;后的query参数&lt;/li&gt;
&lt;li&gt;响应： &lt;code&gt;@RestController&lt;/code&gt; == &lt;code&gt;@Controller+@ResponseBody&lt;/code&gt;, 其实，&lt;code&gt;@ResponseBody&lt;/code&gt;注解表明这个方法会返回json，会将Java类转换成JSON字符串，默认转换器为Jackason&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;参数为json&quot;&gt;参数为JSON&lt;/h4&gt;
&lt;p&gt;新建class com.test.demo.entity.Room&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Room {
    private Integer roomId;
    private String roomName;
    private String comment;

    public Integer getRoomId() {
        return roomId;
    }

    public void setRoomId(Integer roomId) {
        this.roomId = roomId;
    }

    public String getRoomName() {
        return roomName;
    }

    public void setRoomName(String roomName) {
        this.roomName = roomName;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;假设，我们需要保存一个Room信息，先来get一个&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hotels/{htid}/rooms/{roomId}&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Room &lt;span class=&quot;fu&quot;&gt;getRoomById&lt;/span&gt;(
        &lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; String htid,
        &lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; Integer roomId
){

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (htid.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;6606&quot;&lt;/span&gt;)){
        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Room room = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Room&lt;/span&gt;();
        room.&lt;span class=&quot;fu&quot;&gt;setComment&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;None&quot;&lt;/span&gt;);
        room.&lt;span class=&quot;fu&quot;&gt;setRoomId&lt;/span&gt;(roomId);
        room.&lt;span class=&quot;fu&quot;&gt;setRoomName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;豪华双人间&quot;&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; room;
    }

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后保存一个&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@PostMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hotels/{htid}/rooms&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;fu&quot;&gt;addRoom&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestBody&lt;/span&gt; Room room){
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Random random = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Random();
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id = random.&lt;span class=&quot;fu&quot;&gt;nextInt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
    room.&lt;span class=&quot;fu&quot;&gt;setRoomId&lt;/span&gt;(id);

    LOGGER.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Add a room: {}&quot;&lt;/span&gt;, room);

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/save-room.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;接收数组参数&quot;&gt;接收数组参数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hotels/{htid}/rooms/ids&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getRoomsWithIds&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt; List&amp;lt;Integer&amp;gt; ids){
    String s = ids.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;();
    LOGGER.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(s);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; s;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器访问 &lt;a href=&quot;http://localhost:8081/param//hotels/6606/rooms/ids?ids=1,2,3&quot; class=&quot;uri&quot;&gt;http://localhost:8081/param//hotels/6606/rooms/ids?ids=1,2,3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;参数校验&quot;&gt;参数校验&lt;/h3&gt;
&lt;p&gt;我们除了一个个的if去判断参数，还可以使用注解&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Room {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer roomId;
    &lt;span class=&quot;fu&quot;&gt;@NotEmpty&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Size&lt;/span&gt;(min = &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, max = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, message = &lt;span class=&quot;st&quot;&gt;&quot;The size of room name should between 3 and 20&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String roomName;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要在参数前添加&lt;code&gt;javax.validation.Valid&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@PostMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hotels/{htid}/rooms&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;fu&quot;&gt;addRoom&lt;/span&gt;(
           &lt;span class=&quot;fu&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@RequestBody&lt;/span&gt; Room room,
            &lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(name = &lt;span class=&quot;st&quot;&gt;&quot;transactionId&quot;&lt;/span&gt;) String transactionId
    ){&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Ryan-Miao/springboot-demo-gradle/blob/master/doc/valid.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;静态文件&quot;&gt;静态文件&lt;/h3&gt;
&lt;p&gt;在springboot中，static content默认寻找规则是&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;By default Spring Boot will serve static content from a directory called &lt;code&gt;/static&lt;/code&gt; (or &lt;code&gt;/public&lt;/code&gt; or &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/META-INF/resources&lt;/code&gt;) in the classpath or from the root of the ServletContext.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;resources&lt;/code&gt;下新建文件夹 &lt;code&gt;static&lt;/code&gt;,&lt;br/&gt;src\main\resources\static\content.html&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello static content&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/js/test.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Static Content&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Static content is the files that render directly, the file is the whole content. The different between template is that
the template page will be resolved by server and then render out.
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器访问： &lt;a href=&quot;http://localhost:8081/content.html&quot; class=&quot;uri&quot;&gt;http://localhost:8081/content.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同理，放在static下的文件都可以通过如此映射访问。&lt;/p&gt;
&lt;h3 id=&quot;模板文件&quot;&gt;模板文件&lt;/h3&gt;
&lt;p&gt;模板文件是指通过服务端生成的文件。比如Jsp，会经过servlet编译后，最终生成一个html页面。Springboot默认支持以下几种模板：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;FreeMarker&lt;br/&gt;Groovy&lt;br/&gt;Thymeleaf&lt;br/&gt;Mustache&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JSP在jar文件中的表现有问题，除非部署为war。&lt;/p&gt;
&lt;p&gt;官方推荐的模板为&lt;code&gt;Thymeleaf&lt;/code&gt;， 在depenency中添加依赖：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;compile(&quot;org.springframework.boot:spring-boot-starter-thymeleaf&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rebuild.&lt;/p&gt;
&lt;p&gt;SpringBoot默认模板文件读取位置为：&lt;code&gt;src\main\resources\templates&lt;/code&gt;. 新建 &lt;code&gt;src\main\resources\templates\home.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns:th=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Template content&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; th:text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${msg} + ' The current user is:' + ${user.name}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;Welcome!&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板文件只能通过服务端路由渲染，也就是说不能像刚开始静态文件那样直接路由过去。&lt;/p&gt;
&lt;p&gt;创建一个controller， &lt;code&gt;com.test.demo.controller.HomeController&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.test.demo.controller;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Controller;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.ui.Model;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.HashMap;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by Ryan on 2017/11/18/0018.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HomeController {

    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/home&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;(Model model, String name){
        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        user.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;, name);

        model.&lt;span class=&quot;fu&quot;&gt;addAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;, user);
        model.&lt;span class=&quot;fu&quot;&gt;addAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;msg&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;home&quot;&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个和之前的API的接口有一点不同，首先是没有&lt;code&gt;@ResponseBody&lt;/code&gt;注解，然后是方法的返回值是一个String，这个String不是value，而是指模板文件的位置，相对于&lt;code&gt;templates&lt;/code&gt;的位置。&lt;/p&gt;
&lt;p&gt;浏览器访问：&lt;a href=&quot;http://localhost:8081/home?name=Ryan123&quot; class=&quot;uri&quot;&gt;http://localhost:8081/home?name=Ryan123&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;方法参数的&lt;code&gt;Model&lt;/code&gt;是模板文件的变量来源，模板文件从这个对象里读取变量，将这个类放到参数里，Spring会自动注入这个类，绑定到模板文件。这里，放入两个变量。&lt;/p&gt;
&lt;p&gt;在模板端，就可以读取这个变量了。&lt;/p&gt;
&lt;p&gt;为什么要这么做？既然有了静态文件，为什么还要模板文件？&lt;/p&gt;
&lt;p&gt;首先，这是早期web开发的做法，之前是没有web 前端这个兵种的，页面从静态页面变成动态页面，代表就是jsp，php等。模板文件的有个好处是，服务端可以控制页面，比如从session中拿到用户信息，放入页面。这个在静态页面是做不到的。&lt;/p&gt;
&lt;p&gt;然而，现在前后端的分离实践，使得模板文件的作用越来越小。目前主要用于基础数据传递，其他数据则通过客户端的异步请求获得。&lt;/p&gt;
&lt;p&gt;当然，随着页面构建复杂，异步请求太多，首屏渲染时间越来越长，严重影响了用户体验，比如淘宝双11的宣传页。这时候，服务端渲染的有时又体现出来了，静态页面直接出数据，不需要多次的ajax请求。&lt;/p&gt;
&lt;h3 id=&quot;跨域&quot;&gt;跨域&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Cross-origin resource sharing (CORS) is a W3C specification implemented by most browsers that allows you to specify in a flexible way what kind of cross domain requests are authorized, instead of using some less secure and less powerful approaches like IFRAME or JSONP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CORS是浏览器的一种安全保护，隔离不同域名之间的可见度。比如，不允许把本域名下cookie发送给另一个域名，否则cookie被钓鱼后，黑客就可以模拟本人登陆了。更多细节参考&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&quot;&gt;MDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么浏览器要拒绝cors?&lt;br/&gt;摘自&lt;a href=&quot;http://www.cnblogs.com/woshimrf/p/java-web-springboot.html&quot;&gt;博客园&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;cors执行过程摘自&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;自由的维基百科&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，本地模拟跨域请求。&lt;/p&gt;
&lt;p&gt;我们当前demo的域名为&lt;code&gt;localhost:8081&lt;/code&gt;，现在新增一个本地域名, 在HOSTS文件中新增：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1   corshost&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，访问http://corshost:8081，即本demo。&lt;/p&gt;
&lt;p&gt;新增src\main\resources\static\cors.html&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Test Cors&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8081/hello&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(data)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(data)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问之前创建的hello接口，可以看到访问失败，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Failed to load http://localhost:8081/hello: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://corshost:8081' is therefore not allowed access.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是浏览器正常的行为。&lt;/p&gt;
&lt;p&gt;但，由于前后端分离，甚至分开部署，域名肯定不会是同一个了，那么就需要支持跨域。Springboot支持跨域，解决方案如下：&lt;/p&gt;
&lt;p&gt;在需要跨域的method上，添加一个&lt;code&gt;@CrossOrigin&lt;/code&gt;注解即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@CrossOrigin(origins = {&quot;http://corshost:8081&quot;})
@ResponseBody
@GetMapping(&quot;/hello&quot;)
public String hello(){
    return &quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果是全局配置允许跨域，新建&lt;code&gt;com.test.demo.config.CorsConfiguration&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package com.test.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

/**
 * Created by Ryan on 2017/11/18/0018.
 */
@Configuration
public class CorsConfiguration {

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurerAdapter() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping(&quot;/api/**&quot;)
                        .allowedOrigins(&quot;http://domain2.com&quot;)
                        .allowedMethods(&quot;PUT&quot;, &quot;DELETE&quot;)
                        .allowedHeaders(&quot;header1&quot;, &quot;header2&quot;, &quot;header3&quot;)
                        .exposedHeaders(&quot;header1&quot;, &quot;header2&quot;)
                        .allowCredentials(false).maxAge(3600);
            }
        };
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;
&lt;h3 id=&quot;引入mysql&quot;&gt;引入MySQL&lt;/h3&gt;
&lt;h3 id=&quot;jdbctemplate&quot;&gt;JDBCTemplate&lt;/h3&gt;
&lt;h3 id=&quot;分层架构&quot;&gt;分层架构&lt;/h3&gt;
&lt;h3 id=&quot;di&quot;&gt;DI&lt;/h3&gt;
&lt;h3 id=&quot;面向接口编程&quot;&gt;面向接口编程&lt;/h3&gt;
&lt;h3 id=&quot;编写测试&quot;&gt;编写测试&lt;/h3&gt;
&lt;h3 id=&quot;集成ci&quot;&gt;集成CI&lt;/h3&gt;
&lt;h3 id=&quot;登陆拦截&quot;&gt;登陆拦截&lt;/h3&gt;
&lt;h3 id=&quot;oauth2.0&quot;&gt;OAuth2.0&lt;/h3&gt;
&lt;h3 id=&quot;事物&quot;&gt;事物&lt;/h3&gt;
&lt;h3 id=&quot;jpa&quot;&gt;JPA&lt;/h3&gt;
&lt;h3 id=&quot;缓存&quot;&gt;缓存&lt;/h3&gt;

</description>
<pubDate>Tue, 21 Nov 2017 19:33:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/java-web-springboot.html</dc:identifier>
</item>
<item>
<title>【玩转树莓派】使用 sinopia 搭建私有 npm 服务器 - iOS122</title>
<link>http://www.cnblogs.com/ios122/p/7877018.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ios122/p/7877018.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1081577-2f963087511e61a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;效果展示&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用 sinopia 的好处是，node系的工程师，内部协作时，使用自有 npm 包，会非常方便；另外，sinopia，会缓存已经下载过的包，可以在相当程度上，加速 npm install 相关命令的执行。&lt;/p&gt;
&lt;p&gt;工作中，确实有需要用到 sinopia 来作为私有 npm 服务器的场景。原来一直在自己电脑上开启 sinopia。这样做最大的问题是，sinopia 后台一直开着，会越来越耗费资源，电脑最后会变得很卡。偶尔，还会因为忘记开启或关闭 sinopia，带来各种不便利。&lt;/p&gt;
&lt;p&gt;今天我试着直接在树莓派上搭建一个 sinopia 服务。最终实现的效果较为完整，基本满足需要了。包含用户权限管理，外网使用自定义域名访问，sinopia服务开机自启等特性。&lt;/p&gt;
&lt;p&gt;注意：以下 shell 命令，默认在树莓派的shell中执行，而不是在本机电脑上。&lt;/p&gt;
&lt;h2 id=&quot;安装最新长期支持版-node-环境&quot;&gt;安装最新长期支持版 node 环境&lt;/h2&gt;
&lt;p&gt;树莓派自带的 node 环境是 v4.8.2,有必要升级下。&lt;/p&gt;
&lt;h3 id=&quot;安装-nvm&quot;&gt;安装 nvm&lt;/h3&gt;
&lt;p&gt;建议安装 nvm，以方便管理多个版本的 node 环境。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 安装 nvm
wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash

# 重启shell

# 验证 nvm 安装
command -v nvm&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用-nvm-安装最新长期支持版-node-环境&quot;&gt;使用 nvm 安装最新长期支持版 node 环境&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 安装 Node
nvm install --lts

#验证安装  --&amp;gt; v8.9.1
node -v&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;安装和配置-sinopia&quot;&gt;安装和配置 sinopia&lt;/h2&gt;
&lt;h3 id=&quot;安装-sinopia&quot;&gt;安装 sinopia&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 安装
npm install -g sinopia

# 验证是否安装成功 --&amp;gt; 这一步会输出自动生成的配置文件路径等信息。
sinopia&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;解决端口-4873-占用问题&quot;&gt;解决端口 4873 占用问题&lt;/h3&gt;
&lt;p&gt;sinopia 启动时，默认使用 4873端口，可能会遇到端口冲突问题。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 安装 lsof 命令
sudo apt-get update
sudo apt-get install lsof

# 查看端口占用进程 PID
lsof -i :4873

# 杀死占用 4873 端口的进程。4649，要换为实际的 PID。
kill -9 4649&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;注册一个默认账户&quot;&gt;注册一个默认账户&lt;/h3&gt;
&lt;p&gt;为了提高安全性，我们稍后会禁用 sinopia 的用户注册功能，所以先注册一个默认的 sinopia 账户。需要在当前 shell 中执行 &lt;em&gt;sinopia&lt;/em&gt; 命令开启服务之后，再重新打开一个 shell 执行：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;npm set registry http://localhost:4873/
npm adduser --registry http://localhost:4873/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用户名，密码，邮箱等，要记牢，适当设置的复杂点。&lt;/p&gt;
&lt;p&gt;### 升级安装 vim&lt;/p&gt;
&lt;p&gt;感觉树莓派自带的 vim 不太好使了，我也顺便升级了下。&lt;/p&gt;
&lt;p&gt;```&lt;br/&gt;# 安装 vim&lt;br/&gt;sudo apt-get update&lt;br/&gt;sudo apt-get install vim&lt;/p&gt;
&lt;p&gt;# 配置支持vim中鼠标右键复制&lt;br/&gt;vim ~/.vimrc&lt;br/&gt;```&lt;/p&gt;
&lt;p&gt;在 .vimrc 此文件中增加如下一行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shell set mouse=v&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置-sinopia&quot;&gt;配置 sinopia&lt;/h3&gt;
&lt;p&gt;配置文件路径可以在执行 &lt;em&gt;sinopia&lt;/em&gt; 命令时，从其输出中查看，一般应是 &lt;em&gt;/home/pi/.config/sinopia/config.yaml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;基于我的使用使用经验和文档说明，主要配置了以下内容:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;max_users: -1&lt;/em&gt; :禁用注册。&lt;/li&gt;
&lt;li&gt;*npmjs: url: &lt;a class=&quot;uri&quot;&gt;https://registry.npm.taobao.org*&lt;/a&gt; ： 设置 npm 镜像为淘宝源，一来可以加速 npm 公共包的安装，二来借助淘宝源的只读特性，避免误操作发布私有 npm 包到外网上。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;access: $authenticated&lt;/em&gt;：禁止匿名用户访问。配置后，未登录用户看不到 sinopia 上私有包的任何信息。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;max_body_size: '200mb'&lt;/em&gt;：这样设置，会提高安装超级 npm 包的成功率，比如 react-native 。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;完整配置内容如下。如果你不是在树莓派上配置，请把 &lt;em&gt;/home/pi&lt;/em&gt; 替换为自己真实的用户路径名。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# This is the default config file. It allows all users to do anything,&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# so don't use it on production systems.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# Look here for more config file examples:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# https://github.com/rlidwka/sinopia/tree/master/conf&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# path to a directory with all packages&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;storage:&lt;/span&gt; /home/pi/.local/share/sinopia/storage

&lt;span class=&quot;fu&quot;&gt;auth:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;htpasswd:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;file:&lt;/span&gt; ./htpasswd
    &lt;span class=&quot;co&quot;&gt;# Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# You can set this to -1 to disable registration.&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;max_users:&lt;/span&gt; -1

&lt;span class=&quot;co&quot;&gt;# a list of other known repositories we can talk to&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;uplinks:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;npmjs:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;url:&lt;/span&gt; https://registry.npm.taobao.org

&lt;span class=&quot;fu&quot;&gt;packages:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;'@*/*':&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# scoped packages&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;access:&lt;/span&gt; $authenticated
    &lt;span class=&quot;fu&quot;&gt;publish:&lt;/span&gt; $authenticated

  &lt;span class=&quot;fu&quot;&gt;'*':&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# allow all users (including non-authenticated users) to read and&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# publish all packages&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# you can specify usernames/groupnames (depending on your auth plugin)&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;access:&lt;/span&gt; $authenticated

    &lt;span class=&quot;co&quot;&gt;# allow all known users to publish packages&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# (anyone can register by default, remember?)&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;publish:&lt;/span&gt; $authenticated

    &lt;span class=&quot;co&quot;&gt;# if package is not available locally, proxy requests to 'npmjs' registry&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;proxy:&lt;/span&gt; npmjs

&lt;span class=&quot;co&quot;&gt;# log settings&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;logs:&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;type:&lt;/span&gt; stdout&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;format:&lt;/span&gt; pretty&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;level:&lt;/span&gt; http&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;#- {type: file, path: sinopia.log, level: info}&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;max_body_size:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'200mb'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以在本地编辑器中修改好配置，然后直接复制到树莓派上：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 打开配置文件
vim /home/pi/.config/sinopia/config.yaml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用粘贴命令。直接粘贴，格式会错乱。&lt;/p&gt;
&lt;pre class=&quot;vim&quot;&gt;
&lt;code&gt;:set paste
i
# 右键粘贴即可。&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置frpc-远程访问&quot;&gt;配置frpc 远程访问&lt;/h2&gt;
&lt;p&gt;关于 frp 的配置问题，详见：&lt;a href=&quot;http://www.cnblogs.com/ios122/p/7869040.html&quot;&gt;【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制&lt;/a&gt;。此处只贴出 frpc 的关键配置变更：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode ini&quot;&gt;
&lt;code class=&quot;sourceCode ini&quot;&gt;&lt;span class=&quot;kw&quot;&gt;[web-sinopia]&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;type &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; http&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;local_port &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4873&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;subdomain &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; sinopia&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用-systemd-实现-sinopia-服务开机自启&quot;&gt;使用 Systemd 实现 sinopia 服务开机自启&lt;/h2&gt;
&lt;p&gt;树莓派，默认是带有 Systemd 的，直接使用即可：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;sudo vim /usr/lib/systemd/system/sinopia.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;sinopia.service 具体内容如下，其中/home/pi/.config/sinopia/config.yaml 要替换为自己的 config.yaml 地址:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode ini&quot;&gt;
&lt;code class=&quot;sourceCode ini&quot;&gt;&lt;span class=&quot;kw&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;DescrIPtion&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;sinopia&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;network.target&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/home/pi/.nvm/versions/node/v8&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;.9.1&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/bin/sinopia /home/pi/.config/sinopia/config.yaml&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/bin/kill $MAINPID&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;-failure&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;42s&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;multi-user.target&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动 sinopia 并设置开机启动：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;systemctl enable sinopia
systemctl start sinopia
systemctl status sinopia&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 禁用服务
systemctl disable sinopia

# 重新启动服务
systemctl restart sinopia&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;在另一台电脑上使用-sinopia-私有-npm-服务器功能&quot;&gt;在另一台电脑上使用 sinopia 私有 npm 服务器功能&lt;/h2&gt;
&lt;p&gt;假定，最终的 sinopia 服务器的外网地址是： *&lt;a class=&quot;uri&quot;&gt;http://sinopia.example.com*&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;真正想使用，需要在终端中配置下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;npm set registry http://sinopia.example.com
npm adduser --registry http://sinopia.example.com
npm login&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置完毕后，你可以试着发布一个私有 npm 包：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;# 在某个文件夹初始化一个新的 npm 包
npm init

# 发布到私有 sinopia 服务器：
npm publish&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发布成功后，在浏览器中登录 *&lt;a class=&quot;uri&quot;&gt;http://sinopia.example.com*，刷新页面，应该就能看到自己刚发布的那个包了&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注意，其他用户在使用私有库上的包时，也应该先登录，否则会报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;unregistered users are not allowed to access package&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
</description>
<pubDate>Tue, 21 Nov 2017 18:12:00 +0000</pubDate>
<dc:creator>iOS122</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ios122/p/7877018.html</dc:identifier>
</item>
<item>
<title>http2.4简单配置 - Forest丶</title>
<link>http://www.cnblogs.com/Forestes/p/7877016.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Forestes/p/7877016.html</guid>
<description>&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;上一篇博文说到了&lt;/span&gt;http&lt;span&gt;的发展以及&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;完整请求响应的工作流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、开篇：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;从最简单的静态服务器开始。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;之前说过，&lt;/span&gt;http&lt;span&gt;是应用层协议，必定会在用户空间体现出具体的应用程序。常见的&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;服务器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;httpd&lt;span&gt;（&lt;/span&gt;&lt;span&gt;apache&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;nginx&lt;/p&gt;
&lt;p&gt;　　　lighttpd&lt;/p&gt;
&lt;p&gt;　　以上皆是静态服务器，除此之外还有一些能够处理动态网页的应用程序服务器：&lt;/p&gt;
&lt;p&gt;　　　IIS&lt;/p&gt;
&lt;p&gt;　　　tomcat&lt;span&gt;，&lt;/span&gt;&lt;span&gt;jetty&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;jboss&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;自然，这里所讲述的仅仅是盛名已久的&lt;/span&gt;apache&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;蛮荒时代之时在&lt;/span&gt;NCSA&lt;span&gt;（美国计算机安全协会）号召聚集众多工程师开发了一款能够提供完整服务的&lt;/span&gt;&lt;span&gt;web&lt;/span&gt;&lt;span&gt;软件，后来项目完成之后，众工程师去往各大&lt;/span&gt;&lt;span&gt;IT&lt;/span&gt;&lt;span&gt;公司。但是，由于对此项目还是怀有情怀，于是自发发起维护其项目，&lt;/span&gt;&lt;strong&gt;不断&lt;/strong&gt;且无偿的为其&lt;strong&gt;更新补丁&lt;/strong&gt;&lt;span&gt;，所以此服务也被称为&lt;/span&gt;a patchy server&lt;span&gt;，简称&lt;/span&gt;&lt;span&gt;apache&lt;/span&gt;&lt;span&gt;，其意为&lt;/span&gt;&lt;strong&gt;充满补丁的服务器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;同时，也就是期间的无意之举，造就了&lt;/span&gt;apache&lt;span&gt;的诞生。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;在此事后两年，&lt;/span&gt;apache&lt;span&gt;上线且迅速得取缔的旧版本，并且占据了约百分之五十的份额，形成自然垄断，既然是天赐良机，为何不把握机会，所以&lt;/span&gt;&lt;span&gt;apache&lt;/span&gt;&lt;span&gt;基金会成立。现今，在美国&lt;/span&gt;&lt;span&gt;apache&lt;/span&gt;&lt;span&gt;有三种含义，一层为阿帕奇族，二层为阿帕奇武装直升机，三层为阿帕奇软件基金会。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二、特性：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　http&lt;span&gt;的特性：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　高度模块化特性：&lt;/span&gt;core+modules&lt;/p&gt;

&lt;p&gt;　　DSO&lt;span&gt;（&lt;/span&gt;&lt;span&gt;Dynamic Shared Object&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;多路处理模块（&lt;/span&gt;MPM&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;prefork&lt;span&gt;：多进程模型，每个进程响应一个请求。一个主进程，负责生成&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;个子进程，子进程为工作进程，每个子进程处理一个用户请求，如果没有用户请求，也会生成空闲进程，随时等待请求到达，最大不会超过&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;个。主进程只负责&lt;strong&gt;接受请求&lt;/strong&gt;，随后将请求交给&lt;strong&gt;子进程&lt;/strong&gt;，由子进程处理请求，最后再由主进程响应客户端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;worker&lt;span&gt;：多进程多线程，一个进程生成多个线程，一个线程响应一个请求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;/span&gt;event&lt;span&gt;：事件驱动模型，一个进程生成多个线程，一个线程响应多个请求，最多能够响应（n*m）个请求。在&lt;/span&gt;&lt;span&gt;worker&lt;/span&gt;&lt;span&gt;模型下添加了一个事件驱动机制，让其能够同时响应多个请求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　虚拟主机&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　负载均衡&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　路径别名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　用户认证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　basic认证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　digest认证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　支持第三方模块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　http2.4配置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　默认工作目录在/etc/http下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　主配置文件/etc/http/conf/http.conf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　包括配置文件/etc/http/conf.d/*.conf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　日志记录文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　/var/log/http&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　access_log 访问日志&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　error_log　错误日志&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　模块目录：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　/etc/httpd/conf.modules.d/*.conf &lt;/span&gt;&lt;/p&gt;


&lt;p&gt; 　　　站点文档目录：&lt;/p&gt;
&lt;p&gt;　　　　/var/www/html&lt;/p&gt;

&lt;p&gt;　　主配置文件/etc/http/conf/http.conf配置&lt;/p&gt;
&lt;p&gt;　　（1）修改监听地址&lt;/p&gt;
&lt;p&gt;　　　　Listen  【ip】:PORT&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf/httpd.conf
    Listen 80
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（2）持久连接&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf/httpd.conf   #或者/etc/httpd.d/*.conf
    KeepAlive on|off                 #开启长连接之后，每个资源请求接受后不会断开tcp连接，而是继续请求资源，直至访问控制极限或者客户端主动断开连接。注：可通过telnet验证、测试是否开启telnet&lt;br/&gt;　　MaxKeepAliveRequests 100         #数量控制，当请求资源到达100个之后，服务器端会自动断开tcp连接，重新进行tcp连接&lt;br/&gt;　　KeepAliveTimeout 15              #时间控制，当用户请求资源后15s之后无动作，服务器自动断开tcp连接
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（3）MPM&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf.modules.d/00-mpm.conf    #注：在apache2.2上有单独的主配置文件/usr/sbin/httpd能够在其中修改需要的MPM模块，但仅限于rpm包安装的，因为apache2.2并不支持编译多个MPM模块
&lt;/pre&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
    LoadModule mpm_prefork_module modules/mod_mpm_prefork.so      #需要什么何种工作模型只需要去掉#号，&lt;br/&gt;　　#LoadModule mpm_worker_module modules/mod_mpm_worker.so&lt;br/&gt;　　#LoadModule mpm_event_module modules/mod_mpm_event.so
&lt;/pre&gt;
&lt;p&gt;　~]# httpd -l              #查看静态编译的模块&lt;br/&gt;　　Compiled in modules:&lt;br/&gt;　　core.c&lt;br/&gt;　　mod_so.c&lt;br/&gt;　　http_core.c&lt;/p&gt;
&lt;p&gt;　~]# httpd -M     #查看所有编译的模块，包含静态模块&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf.d/prefork.conf      #prefork简单配置，apache2.4使用高度模块化的配置方式，所有的需要的MPM模型的配置文件，需手动建立。不同的工作模式，只需要激活不同的配置文件即可
    &amp;lt;IfModule mpm_prefork_module&amp;gt;
    StartServers 8             #初始启动的进程数
    MinSpareServers 5          #最小空闲进程数
    MaxSpareServers 20  　　　　#最大空闲进程数
    ServerLimit 256            #最大进程数
    MaxClients  256     　　　　#最大并发请求数
    MaxRequstsPerChild  4000   #单个进程最大响应请求次数&lt;br/&gt;&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf.d/worker.conf
&amp;lt;IfModule mpm_worker_module&amp;gt;
StartServers 2         #初始启动的进程数
MaxClients 300         #线程接受的最大请求数
MinSpareThreads 25     #最小线程数
MaxSpareThreads 100    #最大线程数
ThreadsPerChild 25     #每个进程能产生的线程数
MaxRequestPerChild  0  #每个线程响应的最大请求次数  0表示不做限制&lt;br/&gt;&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf.d/event.conf       #event和worker的工作模式十分的相似，前者是在后者的基础上进行的改进，加入了事件通知机制。
&amp;lt;IfModule mpm_event_module&amp;gt;
StartServers 2         #初始启动的进程数
MaxClients 300         #线程接受的最大请求数
MinSpareThreads 25     #最小线程数
MaxSpareThreads 100    #最大线程数
ThreadsPerChild 25     #每个进程能产生的线程数
MaxRequestPerChild  0  #每个线程响应的最大请求次数  0表示不做限制
&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（4）DSO&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf.modules.d/00-base.conf        #动态加载模块十分简单，只需手动编辑文件，取消或加上#注释即可。当然，之后得重启或重读配置文件
   #LoadModule rewrite_module modules/mod_rewrite.so&lt;br/&gt;~]# systemctl reload httpd.service    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（5）定义server文档页面路径　&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 ~]# vim /etc/httpd/conf/httpd.conf     #指向的路径是URL路径的起始位置，比如要访问test/index.html，则URL路径为www.xxyy.com/test/index.html
   DocumentRoot &quot;/var/www/html&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（6）站点访问控制&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf/httpd.conf 
    &amp;lt;Directory &quot;/var/www/html&quot;&amp;gt;                #以下仅仅只是在目录下的访问控制，还有基于Location的控制，形似此方式
      &amp;lt;RequireAll&amp;gt;
        #Require all granted                    #允许所有用户访问
        #Require all denied                     #拒绝所有用户访问
        Require ip 127.0.0.1                    #允许某ip访问
        Require not ip 192.168.0.0              #拒绝某ip访问
      &amp;lt;RequireAll
    &amp;lt;/Directory&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（7）主页特性选项&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Directory &quot;/var/www/html&quot;&amp;gt;
Options
  Indexes              #索引，将所有超链接显现出来，一般做下载站点时使用 
  FollowSymlinks       #允许跟随符号连接访问非目录下的文件
  SymLinksfOwnerMatch  #允许跟踪符号链接，但必须相同属主属组
  ExecCGI              #允许运行CGI脚本
  MultViews            #内容协商机制，根据客户端语言打开不同的语言的页面
AllowOverride None     #是否允许子目录单独设置访问控制，在每个目录下生成一个.htaccess文件，在里面定义其访问权限。当用户访问时单独通过.htaccess来访问控制&lt;br/&gt;DirectoryIndex index.html index.html.var    #设定默认页面&lt;br/&gt;&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;IfModule dir_moudle&amp;gt;&lt;br/&gt;DirectoryIndex index.html&lt;br/&gt;&amp;lt;/IfModule&amp;gt;         #设定默认页面
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（8）日志设定&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf/httpd.conf 
    Errorlog  &quot;logs/error_log&quot;        #错误日志存放位置
    LogLevel   warn                   #大于或等于该级别才会记录
         debug，info，notice，warn，error，crit，alert，emerg    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（9）路径别名&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf/httpd.conf 
  &amp;lt;IfModule alias_module&amp;gt;
        Alias /bbs “/bbs/bbc”       #能够将所有访问bbs目录下的所有用户，重定向到bbs/bbc目录下
    &amp;lt;IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（10）设置字符集&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf/httpd.conf
    AddDefaultCharset UTF-8     #设置默认字符集
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（11）安全域认证&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Directory “”&amp;gt;
  Options None
  AllowOverride None
  AuthType Basic   #认证方式
  AuthName “”      #安全域名
  AuthUserFile “/PATH/TO/HTTP_USER_PASSWD_FILE”      #认证文件存放路径，可以使用htpasswd创建认证文件，第一次使用-c，-m选项能够手动建立文件和md5加密方式，第二次无需使用-c选项。
  Require user username1 ...       #Require valid-user   允许表单上所有的用户访问 
&lt;/pre&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;/Directory&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（12）虚拟主机&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
~]# vim /etc/httpd/conf.d/vhost.conf 
    &amp;lt;Directory &quot;/vhosts&quot;&amp;gt;                  #在apache2.4上，需要自己添加上该目录的选项，否则用户会出现访问权限不足
        Require all granted
    &amp;lt;/Directory&amp;gt;
&amp;lt;VirtualHost 192.168.139.100&amp;gt;             #虚拟主机监听的套接字，需要注意的是，一般使用虚拟主机建议注释掉中心主机的DocumentRoot
    ServerName www.xxyy.com               #主机名，此处是随意，若不是需要基于主机名间通信，此处随意。
    DocumentRoot &quot;/vhosts/web1/htdocs&quot;    #虚拟主机URL的起始目录
&amp;lt;Directory &quot;/vhosts/web1/htdocs”&amp;gt;         #apache2.4上必须明确规定权限，默认权限是拒绝访问的
    AllowOverride None
     &amp;lt;RequireAny&amp;gt;
      Require all granted
     &amp;lt;/RequireAny&amp;gt;
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（13）内置staus&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;Location /server-status&amp;gt;   #仅仅是基于Location管理，任意主机都可以使用status页面，能清楚的观察到httpd的运行状态。但是这页面十分危险，通常都只会设定本机能够访问。
        SetHandler server-status
        Require ip 192.168.139.1
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;&lt;/div&gt;




</description>
<pubDate>Tue, 21 Nov 2017 18:09:00 +0000</pubDate>
<dc:creator>Forest丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Forestes/p/7877016.html</dc:identifier>
</item>
<item>
<title>Mysql的学习笔记(一)--检验数据库是否安装成功以及一些入门的简单的dos命令 - 胖子胡八一</title>
<link>http://www.cnblogs.com/zongjin/p/7875977.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zongjin/p/7875977.html</guid>
<description>&lt;h2&gt;&lt;span&gt;一：如何检验数据库是否安装成功:&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1:以管理员的身份打开命令提示符，具体如何用管理员的身份打开请参考下面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://jingyan.baidu.com/article/e73e26c0f87c2424adb6a7f1.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2:打开之后在mysql的bin目录下面输入: mysqld --install&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输出的信息为Install/Remove of the Service Denied&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121231902118-2087776450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为我已经安装成功了所以显示的是这个。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3:之后输入:net start mysql&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121230627602-2090607867.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;表示安装成功。全程用管理员身份打开.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;http://blog.csdn.net/qq_19891827/article/details/53995079&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1:创建数据库:先进入Mysql的安装目录，我的是C:\Program Files\MySQL\MySQL Server 5.7\bin&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121232202555-1836965731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2:然后数据mysql -u root -p进入Mysql中，因为只有进入之后才可以操作Mysql数据库，注意：进入了数据库中之后所有的命令的结尾都必须带分号结束.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121232501961-1771015622.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3:创建数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121232738883-1469397404.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4:查看都创建了那些数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121232940336-1460563798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5:输入use teacher命令进入teacher数据库创建表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121233309446-946910885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6:输入create table tb_stu1 (&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  `id` int(11) NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  `name` varchar(30) DEFAULT NULL,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  `sex` varchar(2) DEFAULT NULL,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  `birthday` date DEFAULT NULL,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121233519711-919865977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7:输入show tables;命令查看teacher数据库中都有那些表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121233647180-2098767816.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8:使用INSERT INTO tb_stu1(id,name,sex,birthday) VALUES ( 1,'小明', '男', '2015-11-02');语句来插入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121233815290-293611272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9:使用select *from tb_stu1;来查询数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1233265/201711/1233265-20171121233929711-1236835236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尊重原创请查看下面的博客:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://blog.csdn.net/longampp520/article/details/71516985&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 21 Nov 2017 15:42:00 +0000</pubDate>
<dc:creator>胖子胡八一</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zongjin/p/7875977.html</dc:identifier>
</item>
<item>
<title>springboot整合shiro - javaobject</title>
<link>http://www.cnblogs.com/a8457013/p/7875866.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/a8457013/p/7875866.html</guid>
<description>&lt;p&gt;请大家在看本文之前，先了解如下知识点： &lt;br/&gt;1、Shiro 是什么？怎么用？ &lt;br/&gt;2、Cas 是什么？怎么用？ &lt;br/&gt;3、最好有Spring基础&lt;/p&gt;
&lt;p&gt;可以先看看这两篇文章，按照这2篇文章的内容做一遍： &lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/catoop/article/details/50520958&quot;&gt;Spring Boot Shiro 权限管理&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/catoop/article/details/50530364&quot;&gt;CAS单点登录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先看一下下面这张图： &lt;br/&gt;第一个流程是单纯使用Shiro的流程。 &lt;br/&gt;第二个流程是单纯使用Cas的流程。 &lt;br/&gt;第三个图是Shiro集成Cas后的流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/842651/201711/842651-20171121230900118-490671519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;PS：流程图急急忙忙画的，整体上应该没有什么问题，具体细节问题还请大家留言指正。&lt;/p&gt;
&lt;p&gt;如果你只是打算用到你的Spring Boot项目中，那么看着如下配置完成便可。 &lt;br/&gt;如果你想进一步了解其中的细节，还是建议大家单独配置Shiro、单独配置Cas，看看官方相关文档。 &lt;br/&gt;Shiro在1.2版本开始提供了对cas的集成，按下面添加依赖到pom.xml中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!--Apache Shiro所需的jar包 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.shiro&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;shiro-spring&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;  
            &amp;lt;groupId&amp;gt;org.apache.shiro&amp;lt;/groupId&amp;gt;  
            &amp;lt;artifactId&amp;gt;shiro-ehcache&amp;lt;/artifactId&amp;gt;  
            &amp;lt;version&amp;gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&amp;lt;/version&amp;gt;  
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.shiro&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;shiro-cas&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shiro-cas 依赖 shiro-web，shiro-web 依赖 shiro-core，所以添加shiro-cas后shiro-web.jar和shiro-core.jar会自动被引用。 &lt;br/&gt;cas被shiro集成后，其原理就是shiro将casFilter加入到shiroFilter的filterChain中。&lt;/p&gt;
&lt;p&gt;在SpringBoot工程中创建ShiroCasConfiguration.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package org.springboot.sample.config;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.servlet.Filter;

import org.apache.shiro.cache.ehcache.EhCacheManager;
import org.apache.shiro.cas.CasFilter;
import org.apache.shiro.cas.CasSubjectFactory;
import org.apache.shiro.spring.LifecycleBeanPostProcessor;
import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springboot.sample.dao.IScoreDao;
import org.springboot.sample.security.MyShiroCasRealm;
import org.springboot.sample.service.StudentService;
import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.filter.DelegatingFilterProxy;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* * Shiro集成Cas配置 * * @author 单红宇(365384722) * @myblog &lt;/span&gt;&lt;span&gt;http://blog.csdn.net/catoop/&lt;/span&gt;&lt;span&gt; * @create 2016年1月17日 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShiroCasConfiguration {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final Logger logger = LoggerFactory.getLogger(ShiroCasConfiguration.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; CasServerUrlPrefix&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String casServerUrlPrefix = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://localhost:8443/cas&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cas登录页面地址&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String casLoginUrl = casServerUrlPrefix + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cas登出页面地址&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String casLogoutUrl = casServerUrlPrefix + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/logout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前工程对外提供的服务地址&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String shiroServerUrlPrefix = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:9090/myspringboot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; casFilter UrlPattern&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String casFilterUrlPattern = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/shiro-cas&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录地址&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String loginUrl = casLoginUrl + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?service=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + shiroServerUrlPrefix +&lt;span&gt; casFilterUrlPattern;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; EhCacheManager getEhCacheManager() {  
        EhCacheManager em &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EhCacheManager();  
        em.setCacheManagerConfigFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;classpath:ehcache-shiro.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; em;  
    }  

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* * 注册DelegatingFilterProxy（Shiro） * * @param dispatcherServlet * @return * @author SHANHY * @create 2016年1月13日 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; FilterRegistrationBean filterRegistrationBean() {
        FilterRegistrationBean filterRegistration &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FilterRegistrationBean();
        filterRegistration.setFilter(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; DelegatingFilterProxy(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shiroFilter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 &lt;/span&gt;
        filterRegistration.addInitParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;targetFilterLifecycle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        filterRegistration.setEnabled(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        filterRegistration.addUrlPatterns(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; filterRegistration;
    }

    @Bean(name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lifecycleBeanPostProcessor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor();
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {
        DefaultAdvisorAutoProxyCreator daap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator();
        daap.setProxyTargetClass(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; daap;
    }

    @Bean(name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;securityManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager getDefaultWebSecurityManager(MyShiroCasRealm myShiroCasRealm) {
        DefaultWebSecurityManager dwsm &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
        dwsm.setRealm(myShiroCasRealm);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;!-- 用户授权/认证信息Cache, 采用EhCache 缓存 --&amp;gt; &lt;/span&gt;
&lt;span&gt;        dwsm.setCacheManager(getEhCacheManager());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定 SubjectFactory&lt;/span&gt;
        dwsm.setSubjectFactory(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CasSubjectFactory());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dwsm;
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) {
        AuthorizationAttributeSourceAdvisor aasa &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
        aasa.setSecurityManager(securityManager);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; aasa;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* * 加载shiroFilter权限控制规则（从数据库读取然后配置） * * @author SHANHY * @create 2016年1月14日 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; loadShiroFilterChain(ShiroFilterFactoryBean shiroFilterFactoryBean, StudentService stuService, IScoreDao scoreDao){
        &lt;/span&gt;&lt;span&gt;/////////////////////&lt;/span&gt;&lt;span&gt;// 下面这些规则配置最好配置到配置文件中 &lt;/span&gt;&lt;span&gt;/////////////////////&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();

        filterChainDefinitionMap.put(casFilterUrlPattern, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;casFilter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; shiro集成cas后，首先添加该规则

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; authc：该过滤器下的页面必须验证后才能访问，它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter&lt;/span&gt;
        filterChainDefinitionMap.put(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;authc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里为了测试，只限制/user，实际开发中请修改为具体拦截的请求规则
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; anon：它对应的过滤器里面是空的,什么都没做&lt;/span&gt;
        logger.info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;##################从数据库读取权限规则，加载到shiroFilter中##################&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/user/edit/**&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;authc,perms[user:edit]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里为了测试，固定写死的值，也可以从数据库或其他配置中读取&lt;/span&gt;
&lt;span&gt;
        filterChainDefinitionMap.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        filterChainDefinitionMap.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;anon 可以理解为不拦截&lt;/span&gt;
&lt;span&gt;
        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* * CAS过滤器 * * @return * @author SHANHY * @create 2016年1月17日 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean(name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;casFilter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CasFilter getCasFilter() {
        CasFilter casFilter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CasFilter();
        casFilter.setName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;casFilter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        casFilter.setEnabled(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录失败后跳转的URL，也就是 Shiro 执行 CasRealm 的 doGetAuthenticationInfo 方法向CasServer验证tiket&lt;/span&gt;
        casFilter.setFailureUrl(loginUrl);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 我们选择认证失败后再打开登录页面&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; casFilter;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* * ShiroFilter&amp;lt;br/&amp;gt; * 注意这里参数中的 StudentService 和 IScoreDao 只是一个例子，因为我们在这里可以用这样的方式获取到相关访问数据库的对象， * 然后读取数据库相关配置，配置到 shiroFilterFactoryBean 的访问规则中。实际项目中，请使用自己的Service来处理业务逻辑。 * * @param myShiroCasRealm * @param stuService * @param scoreDao * @return * @author SHANHY * @create 2016年1月14日 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean(name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shiroFilter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager securityManager, CasFilter casFilter, StudentService stuService, IScoreDao scoreDao) {
        ShiroFilterFactoryBean shiroFilterFactoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 必须设置 SecurityManager &lt;/span&gt;
&lt;span&gt;        shiroFilterFactoryBean.setSecurityManager(securityManager);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面&lt;/span&gt;
&lt;span&gt;        shiroFilterFactoryBean.setLoginUrl(loginUrl);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录成功后要跳转的连接&lt;/span&gt;
        shiroFilterFactoryBean.setSuccessUrl(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        shiroFilterFactoryBean.setUnauthorizedUrl(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/403&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加casFilter到shiroFilter中&lt;/span&gt;
        Map&amp;lt;String, Filter&amp;gt; filters = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        filters.put(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;casFilter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, casFilter);
        shiroFilterFactoryBean.setFilters(filters);

        loadShiroFilterChain(shiroFilterFactoryBean, stuService, scoreDao);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; shiroFilterFactoryBean;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建权限认证的 MyShiroCasRealm.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package org.springboot.sample.security;

import java.util.List;

import javax.annotation.PostConstruct;

import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.cas.CasRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springboot.sample.config.ShiroCasConfiguration;
import org.springboot.sample.dao.IUserDao;
import org.springboot.sample.entity.Role;
import org.springboot.sample.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myShiroCasRealm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
@Transactional
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyShiroCasRealm extends CasRealm{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final Logger logger = LoggerFactory.getLogger(MyShiroCasRealm.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IUserDao userDao; 

    @PostConstruct
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initProperty(){
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; setDefaultRoles(&quot;ROLE_USER&quot;);&lt;/span&gt;
&lt;span&gt;        setCasServerUrlPrefix(ShiroCasConfiguration.casServerUrlPrefix);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户端回调地址&lt;/span&gt;
        setCasService(ShiroCasConfiguration.shiroServerUrlPrefix +&lt;span&gt; ShiroCasConfiguration.casFilterUrlPattern);
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* * 权限认证，为当前登录的Subject授予角色和权限 * @see 经测试：本例中该方法的调用时机为需授权资源被访问时 * @see 经测试：并且每次访问需授权资源时都会执行该方法中的逻辑，这表明本例中默认并未启用AuthorizationCache * @see 经测试：如果连续访问同一个URL（比如刷新），该方法不会被重复调用，Shiro有一个时间间隔（也就是cache时间，在ehcache-shiro.xml中配置），超过这个时间间隔再刷新页面，该方法会被执行 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        logger.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;##################执行Shiro权限认证##################&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前登录输入的用户名，等价于(String) principalCollection.fromRealm(getName()).iterator().next();&lt;/span&gt;
        String loginName =&lt;span&gt; (String)super.getAvailablePrincipal(principalCollection); 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到数据库查是否有此对象&lt;/span&gt;
        User user=userDao.findByName(loginName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实际项目中，这里可以根据实际情况做缓存，如果不做，Shiro自己也是有时间间隔机制，2分钟内不会重复执行该方法&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(user!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;权限信息对象info,用来存放查出的用户的所有的角色（role）及权限（permission）&lt;/span&gt;
            SimpleAuthorizationInfo info=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户的角色集合&lt;/span&gt;
&lt;span&gt;            info.setRoles(user.getRolesName());
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户的角色对应的所有权限，如果只使用角色定义访问权限，下面的四行可以不要&lt;/span&gt;
            List&amp;lt;Role&amp;gt; roleList=&lt;span&gt;user.getRoleList();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Role role : roleList) {
                info.addStringPermissions(role.getPermissionsName());
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 或者按下面这样添加
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个角色,不是配置意义上的添加,而是证明该用户拥有admin角色 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; simpleAuthorInfo.addRole(&quot;admin&quot;); 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加权限 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; simpleAuthorInfo.addStringPermission(&quot;admin:manage&quot;); 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; logger.info(&quot;已为用户[mike]赋予了[admin]角色和[admin:manage]权限&quot;);&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回null的话，就会导致任何用户访问被拦截的请求时，都会自动跳转到unauthorizedUrl指定的地址&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Controller中添加一个方法，用于将登录URL简单化，提供一个重定向功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  @RequestMapping(value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String loginForm(Model model){
        model.addAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return &quot;login&quot;;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redirect:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ShiroCasConfiguration.loginUrl;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文主要是介绍如何在Spring Boot中集成Shiro+Cas，并非一个从零创建工程到整体完成的介绍。 &lt;br/&gt;上面贴出了2个主要的Java类，整个工程的其他所有代码没有任何与Shiro和Cas耦合的地方。如果需要jsp页面、Controller、实体类、连接数据库测试数据等代码，可以先参考文章：&lt;a href=&quot;http://blog.csdn.net/catoop/article/details/50520958&quot;&gt;http://blog.csdn.net/catoop/article/details/50520958&lt;/a&gt;（建议先看这篇文章再看本文）&lt;/p&gt;
</description>
<pubDate>Tue, 21 Nov 2017 15:13:00 +0000</pubDate>
<dc:creator>javaobject</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/a8457013/p/7875866.html</dc:identifier>
</item>
<item>
<title>JAVA提高十三：Hashtable&amp;Properties深入分析 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/7875606.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/7875606.html</guid>
<description>&lt;p&gt;&lt;span&gt;最近因为一些琐碎的事情，导致一直没时间写博客，正好今天需求开发完的早，所以趁早写下本文，本文主要学习的是Hashtable的分析，因为上面一篇文章研究的是HashMap,而Hashtable和HashMap之间存在相似处，是面试中经常会问到的一个问题，因此进行下分析；而之所以加上Properties,是因为Hashtable 在实际生活中我们用的并不多，但是它的子类Properties 使用的频率相对还是不低的，因此也一起介绍下。好了，言归正传，接下来开始分析。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、Hashtable 的定义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们翻看下源码中对Hashtable的定义如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Hashtable&amp;lt;K,V&amp;gt;
    &lt;span&gt;extends&lt;/span&gt; Dictionary&amp;lt;K,V&amp;gt;
    &lt;span&gt;implements&lt;/span&gt; Map&amp;lt;K,V&amp;gt;, Cloneable, java.io.Serializable {
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;从中可以看出HashTable继承Dictionary类，实现Map接口。其中Dictionary类是任何可将键映射到相应值的类（如 Hashtable）的抽象父类。每个键和每个值都是一个对象。在任何一个 Dictionary 对象中，每个键至多与一个值相关联。Map是&quot;key-value键值对&quot;接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HashTable采用&quot;拉链法&quot;实现哈希表，它定义了几个重要的参数：table、count、threshold、loadFactor、modCount。table：为一个Entry[]数组类型，Entry代表了“拉链”的节点，每一个Entry代表了一个键值对，哈希表的&quot;key-value键值对&quot;都是存储在Entry数组中的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;count：HashTable的大小，注意这个大小并不是HashTable的容器大小，而是他所包含Entry键值对的数量。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;threshold：Hashtable的阈值，用于判断是否需要调整Hashtable的容量。threshold的值=&quot;容量*加载因子&quot;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;loadFactor：加载因子。 modCount：用来实现“fail-fast”机制的（也就是快速失败）。所谓快速失败就是在并发集合中，其进行迭代操作时，若有其他线程对其进行结构性的修改，这时迭代器会立马感知到，并且立即抛出ConcurrentModificationException异常，而不是等到迭代完成之后才告诉你。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hashtable 和Map 之间关系图：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171121215109555-113818859.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hashtable继承于Dictionary类，实现了Map接口。Map是&quot;key-value键值对&quot;接口，Dictionary是声明了操作&quot;键值对&quot;函数接口的抽象类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、构造方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认构造函数。&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Hashtable() 

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定“容量大小”的构造函数&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; Hashtable(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; initialCapacity) 

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定“容量大小”和“加载因子”的构造函数&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; Hashtable(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor) 

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 包含“子Map”的构造函数&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; Hashtable(Map&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt; t)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上述构造方法中，最核心的其实就是第三个，因为无论是无参构造还是初始化容量构造最后都是调用的第三个，因此有必要看下第三个方法的源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Hashtable(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor) 
{
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证初始容量&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;lt; 0&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal Capacity: &quot;+&lt;span&gt;
                                               initialCapacity);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证加载因子&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (loadFactor &amp;lt;= 0 ||&lt;span&gt; Float.isNaN(loadFactor))
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal Load: &quot;+&lt;span&gt;loadFactor);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (initialCapacity==0&lt;span&gt;)
            initialCapacity &lt;/span&gt;= 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loadFactor =&lt;span&gt; loadFactor;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化table，获得大小为initialCapacity的table数组&lt;/span&gt;
    table = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Entry[initialCapacity];
        &lt;/span&gt;&lt;span&gt;////&lt;/span&gt;&lt;span&gt;计算阀值&lt;/span&gt;
    threshold = (&lt;span&gt;int&lt;/span&gt;)(initialCapacity *&lt;span&gt; loadFactor);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Hashtable 方法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt;                clear()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; Object              clone()
             &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;             contains(Object value)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;             containsKey(Object key)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;             containsValue(Object value)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; Enumeration&amp;lt;V&amp;gt;&lt;span&gt;      elements()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; Set&amp;lt;Entry&amp;lt;K, V&amp;gt;&amp;gt;&lt;span&gt;    entrySet()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;             equals(Object object)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; V                   get(Object key)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;                 hashCode()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;             isEmpty()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; Set&amp;lt;K&amp;gt;&lt;span&gt;              keySet()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; Enumeration&amp;lt;K&amp;gt;&lt;span&gt;      keys()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; V                   put(K key, V value)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;                putAll(Map&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt;&lt;span&gt; map)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; V                   remove(Object key)
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;                 size()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; String              toString()
&lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; Collection&amp;lt;V&amp;gt;       values()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、主要方法分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HashTable的API对外提供了许多方法，这些方法能够很好帮助我们操作HashTable【如上所示】，但是这里主要介绍的是两个最根本的方法：put、get。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们先看put方法：将指定 &lt;code&gt;key&lt;/code&gt; 映射到此哈希表中的指定 &lt;code&gt;value&lt;/code&gt;。注意这里键key和值value都不可为空。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 确保value不为null&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (value == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
        }

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * 确保key在table[]是不重复的
         * 处理过程：
         * 1、计算key的hash值，确认在table[]中的索引位置
         * 2、迭代index索引位置，如果该位置处的链表中存在一个一样的key，则替换其value，返回旧值
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Entry tab[] &lt;/span&gt;=&lt;span&gt; table;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash = hash(key);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算key的hash值&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; index = (hash &amp;amp; 0x7FFFFFFF) % tab.length;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代，寻找该key，替换&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = tab[index] ; e != &lt;span&gt;null&lt;/span&gt; ; e =&lt;span&gt; e.next) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((e.hash == hash) &amp;amp;&amp;amp;&lt;span&gt; e.key.equals(key)) {
                V old &lt;/span&gt;=&lt;span&gt; e.value;
                e.value &lt;/span&gt;=&lt;span&gt; value;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; old;
            }
        }

        modCount&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (count &amp;gt;= threshold) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果容器中的元素数量已经达到阀值，则进行扩容操作&lt;/span&gt;
&lt;span&gt;            rehash();
            tab &lt;/span&gt;=&lt;span&gt; table;
            hash &lt;/span&gt;=&lt;span&gt; hash(key);
            index &lt;/span&gt;= (hash &amp;amp; 0x7FFFFFFF) %&lt;span&gt; tab.length;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在索引位置处插入一个新的节点&lt;/span&gt;
        Entry&amp;lt;K,V&amp;gt; e =&lt;span&gt; tab[index];
        tab[index] &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Entry&amp;lt;&amp;gt;&lt;span&gt;(hash, key, value, e);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;容器中元素+1&lt;/span&gt;
        count++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;put方法的整个处理流程是：计算key的hash值，根据hash值获得key在table数组中的索引位置，然后迭代该key处的Entry链表，若该链表中存在一个这个的key对象，那么就直接替换其value值即可，否则在将改key-value节点插入该index索引位置处。如下：假设我们现在Hashtable的容量为5，已经存在了(5,5)，(13,13)，(16,16)，(17,17)，(21,21)这 5 个键值对，目前他们在Hashtable中的位置如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171121221018618-184864714.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在，我们插入一个新的键值对，put(16,22)，假设key=16的索引为1.但现在索引1的位置有两个Entry了，所以程序会对链表进行迭代。迭代的过程中，发现其中有一个Entry的key和我们要插入的键值对的key相同，所以现在会做的工作就是将newValue=22替换oldValue=16，然后返回oldValue=16.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171121221129461-379637768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后我们现在再插入一个，put(33,33)，key=33的索引为3，并且在链表中也不存在key=33的Entry，所以将该节点插入链表的第一个位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171121221205086-628123709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在HashTabled的put方法中有两个地方需要注意：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;1、HashTable的扩容操作，在put方法中，如果需要向table[]中添加Entry元素，会首先进行容量校验，如果容量已经达到了阀值，HashTable就会进行扩容处理rehash()，如下:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rehash() {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; table.length;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;元素&lt;/span&gt;
        Entry&amp;lt;K,V&amp;gt;[] oldMap =&lt;span&gt; table;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新容量=旧容量 * 2 + 1&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; newCapacity = (oldCapacity &amp;lt;&amp;lt; 1) + 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (oldCapacity ==&lt;span&gt; MAX_ARRAY_SIZE)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            newCapacity &lt;/span&gt;=&lt;span&gt; MAX_ARRAY_SIZE;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个size = newCapacity 的HashTable&lt;/span&gt;
        Entry&amp;lt;K,V&amp;gt;[] newMap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Entry[];

        modCount&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新计算阀值&lt;/span&gt;
        threshold = (&lt;span&gt;int&lt;/span&gt;)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + 1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新计算hashSeed&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; rehash =&lt;span&gt; initHashSeedAsNeeded(newCapacity);

        table &lt;/span&gt;=&lt;span&gt; newMap;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将原来的元素拷贝到新的HashTable中&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = oldCapacity ; i-- &amp;gt; 0&lt;span&gt; ;) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; old = oldMap[i] ; old != &lt;span&gt;null&lt;/span&gt;&lt;span&gt; ; ) {
                Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; e =&lt;span&gt; old;
                old &lt;/span&gt;=&lt;span&gt; old.next;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (rehash) {
                    e.hash &lt;/span&gt;=&lt;span&gt; hash(e.key);
                }
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = (e.hash &amp;amp; 0x7FFFFFFF) %&lt;span&gt; newCapacity;
                e.next &lt;/span&gt;=&lt;span&gt; newMap[index];
                newMap[index] &lt;/span&gt;=&lt;span&gt; e;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在这个rehash()方法中我们可以看到容量扩大两倍+1，同时需要将原来HashTable中的元素一一复制到新的HashTable中，这个过程是比较消耗时间的，同时还需要重新计算hashSeed的，毕竟容量已经变了。这里对阀值啰嗦一下：比如初始值11、加载因子默认0.75，那么这个时候阀值threshold=8，当容器中的元素达到8时，HashTable进行一次扩容操作，容量 = 8 * 2 + 1 =17，而阀值threshold=17*0.75 = 13，当容器元素再一次达到阀值时，HashTable还会进行扩容操作，一次类推。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 2、在计算索引位置index时，HashTable进行了一个与运算过程（hash &amp;amp; 0x7FFFFFFF），为什么需要做一步操作，这么做有什么好处？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是因为在计算hash值得时候可能是负数因此采用了和0X7FFFFFFF相与的操作保证为正数，这个涉及到计算机的二进制数存放正数负数是如何存放的一个逻辑基础知识，正数很容易，负数的存放是采用负数的绝对值取反得到反码然后+1 得到补码然后进行的存放，因此和0X7FFFFFFF相与可保证只改变符号位而不改变其它位。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;相关基础知识可以参考：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;负数的二进制表示方法：http://www.360doc.com/content/12/0801/17/6828497_227700914.shtml&lt;/p&gt;
&lt;p&gt;Java 8 种数据类型：http://blog.csdn.net/never_cxb/article/details/47204485&lt;/p&gt;
&lt;p&gt;Java位运算符及二进制常识：http://blog.csdn.net/coffeelifelau/article/details/52433653&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;get方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;相比较于 put 方法，get 方法则简单很多。其过程就是首先通过 hash()方法求得 key 的哈希值，然后根据 hash 值得到 index 索引（上述两步所用的算法与 put 方法都相同）。然后迭代链表，返回匹配的 key 的对应的 value；找不到则返回 null。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; V get(Object key) {
        Entry tab[] &lt;/span&gt;=&lt;span&gt; table;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash =&lt;span&gt; hash(key);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = (hash &amp;amp; 0x7FFFFFFF) %&lt;span&gt; tab.length;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e = tab[index] ; e != &lt;span&gt;null&lt;/span&gt; ; e =&lt;span&gt; e.next) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((e.hash == hash) &amp;amp;&amp;amp;&lt;span&gt; e.key.equals(key)) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.value;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; Hashtable 遍历方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、使用keys()&lt;/span&gt;
Enumeration&amp;lt;String&amp;gt; en1 =&lt;span&gt; table.keys();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(en1.hasMoreElements()) {
    en1.nextElement();
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、使用elements()&lt;/span&gt;
Enumeration&amp;lt;String&amp;gt; en2 =&lt;span&gt; table.elements();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(en2.hasMoreElements()) {
    en2.nextElement();
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、使用keySet()&lt;/span&gt;
Iterator&amp;lt;String&amp;gt; it1 =&lt;span&gt; table.keySet().iterator();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(it1.hasNext()) {
    it1.next();
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、使用entrySet()&lt;/span&gt;
Iterator&amp;lt;Entry&amp;lt;String, String&amp;gt;&amp;gt; it2 =&lt;span&gt; table.entrySet().iterator();
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(it2.hasNext()) {
    it2.next();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、HashTable与HashMap的区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而如果没有正确的同步的话，多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3.另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4.由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HashMap不能保证随着时间的推移Map中的元素次序是不变的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们能否让HashMap同步？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HashMap可以通过下面的语句进行同步：Map m = Collections.synchronizeMap(hashMap);&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;结论:&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;Hashtable和HashMap有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用Java 5或以上的话，请使用ConcurrentHashMap。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 五、Properties分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;java.util
类 Properties
java.lang.Object
  java.util.Dictionary&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt;
      java.util.Hashtable&lt;/span&gt;&amp;lt;Object,Object&amp;gt;&lt;span&gt;
          java.util.Properties&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到它是Hashtable的一个子类，是一个使用比父类使用更多的类，Properties类表示了一个持久的属性集，它是在一个文件中存储键值对儿的，其中键值对儿以等号分隔。Properties可保存在流中或从流中加载。属性列表中的每个键及其所对应的值都是字符串。Properties类是线程安全的：多个线程可以共享单个Properties对象而无需进行外部同步。一组属性示例： &lt;/span&gt;&lt;br/&gt;&lt;span&gt;foo=bar &lt;/span&gt;&lt;br/&gt;&lt;span&gt;fu=baz&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个属性列表可包含另一个属性列表作为它的“默认值”；如果未能在原有的属性列表中搜索到属性键，则搜索第二个属性列表。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果在“不安全”的 Properties 对象（即包含非 String 的键或值）上调用 store 或 save 方法，则该调用将失败。类似地，如果在“不安全”的 Properties 对象（即包含非 String 的键）上调用 propertyNames 或 list 方法，则该调用将失败。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了输入/输出流使用 ISO 8859-1 字符编码外，load(InputStream) / store(OutputStream, String)方法与 load(Reader)/store(Writer, String)对的工作方式完全相同。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;loadFromXML(InputStream)和 storeToXML(OutputStream, String, String)方法按简单的 XML 格式加载和存储属性。默认使用 UTF-8 字符编码，但如果需要，可以指定某种特定的编码。XML 属性文档具有以下 DOCTYPE 声明：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;一下列出了Properties的方法摘要，有关每个方法的详细使用情况，请参看API：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;http://www.apihome.cn/api/java/Properties.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171121224247118-68509478.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;示例练习一：如何装载属性文件并列出它当前的一组键和值。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;思路：传递属性文件的输入流InputStream给load()方法，会将改属性文件中的每个键值对儿添加到Properties实例中；然后条用list()列出所有属性或者使用getProperty()获取单独的属性。（注意 list() 方法的输出中键-值对的顺序与它们在输入文件中的顺序不一样。 Properties 类在一个散列表（hashtable，事实上是一个 Hashtable 子类）中储存一组键-值对，所以不能保证顺序。 ）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileNotFoundException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PropertiesTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Properties properties &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            properties.load(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FileInputStream(&quot;test.properties&quot;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载属性文件&lt;/span&gt;
            properties.list(System.out);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将属性文件中的键值对儿打印到控制台&lt;/span&gt;
            properties.getProperty(&quot;foo&quot;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (FileNotFoundException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;示例练习二：如何装载XML版本的属性文件并列出它当前的一组键和值。（只有装载方法有差异，其余完全相同load(),loadFromXML()）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileNotFoundException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PropertiesTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Properties properties &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            properties.loadFromXML(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FileInputStream(&quot;test.xml&quot;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载属性文件&lt;/span&gt;
            properties.list(System.out);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将属性文件中的键值对儿打印到控制台&lt;/span&gt;
            properties.getProperty(&quot;foo&quot;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (FileNotFoundException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
            e.printStackTrace();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;示例练习三：如何将文件保存到属性文件中？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StoreXML {
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String args[]) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
    Properties prop &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
    prop.setProperty(&lt;/span&gt;&quot;one-two&quot;, &quot;buckle my shoe&quot;&lt;span&gt;);
    prop.setProperty(&lt;/span&gt;&quot;three-four&quot;, &quot;shut the door&quot;&lt;span&gt;);
    prop.setProperty(&lt;/span&gt;&quot;five-six&quot;, &quot;pick up sticks&quot;&lt;span&gt;);
    prop.setProperty(&lt;/span&gt;&quot;seven-eight&quot;, &quot;lay them straight&quot;&lt;span&gt;);
    prop.setProperty(&lt;/span&gt;&quot;nine-ten&quot;, &quot;a big, fat hen&quot;&lt;span&gt;);
    prop.storeToXML(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FileOutputStream(&quot;test.xml&quot;), &quot;saveXML&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将键值对儿保存到XML文件中&lt;/span&gt;
prop.store(&lt;span&gt;new&lt;/span&gt; FileOutputStream(&quot;test.properties&quot;), &quot;saveProperties&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将键值对儿保存到普通的属性文件中&lt;/span&gt;
&lt;span&gt;    fos.close();
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;将键值对儿保存到XML文件中的输出结果如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Rhyme&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;seven-eight&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lay them straight&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;five-six&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pick up sticks&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;nine-ten&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;a big, fat hen&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;three-four&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shut the door&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;one-two&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;buckle my shoe&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;将键值对儿保存到普通的属性文件中输出结果如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;one-two=buckle my shoe
three-four=shut the door
five-six=pick up sticks
seven-eight=lay them straight
nine-ten=a big, fat hen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：从一个XML文件中装载一组属性，其DTD文件如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; DTD for properties &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT properties ( comment?, entry* ) &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties version CDATA #FIXED &quot;1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT comment (#PCDATA) &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT entry (#PCDATA) &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST entry key CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在外围 &lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; 标签中包装的是一个 &lt;code&gt;&amp;lt;comment&amp;gt;&lt;/code&gt; 标签，后面是任意数量的 &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;标签。对每一个 &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt; 标签，有一个键属性，输入的内容就是它的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意点：路径问题，如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileNotFoundException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileReader;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 使用Properties读取配置文件
 * 资源配置文件:
 * 使用相对与绝对路径读取
 * load(InputStream inStream) 
   load(Reader reader) 
   loadFromXML(InputStream in) 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo03 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException 
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; FileNotFoundException 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; FileNotFoundException, IOException {
        Properties pro&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取 绝对路径
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;pro.load(new FileReader(&quot;e:/others/db.properties&quot;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取 相对路径&lt;/span&gt;
        pro.load(&lt;span&gt;new&lt;/span&gt; FileReader(&quot;src/com/bjsxt/others/pro/db.properties&quot;&lt;span&gt;));
        System.out.println(pro.getProperty(&lt;/span&gt;&quot;user&quot;, &quot;bjsxt&quot;&lt;span&gt;));
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 使用类相对路径读取配置文件
 *  bin  
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo04 {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        Properties pro &lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类相对路径的 / bin 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;pro.load(Demo04.class.getResourceAsStream(&quot;/com/bjsxt/others/pro/db.properties&quot;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;&quot; bin &lt;/span&gt;
        pro.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;com/bjsxt/others/pro/db.properties&quot;&lt;span&gt;));
        System.out.println(pro.getProperty(&lt;/span&gt;&quot;user&quot;, &quot;bjsxt&quot;&lt;span&gt;));
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 关于类路径需要注意一下；举个例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171121225109868-996850756.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

 &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 使用配置文件读取调用者的类
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; jiqinlin
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReflectTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用绝对路径，否则无法读取config.properties
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;InputStream inStream=new FileInputStream(&quot;F:\\android\\test\\src\\com\\ljq\\test\\resource\\config.properties&quot;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ReflectTest.class.getClassLoader().getResourceAsStream(String path): 默认则是从ClassPath根下获取，path不能以’/'开头，最终是由ClassLoader获取资源。 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;InputStream inStream = ReflectTest.class.getClassLoader().getResourceAsStream(&quot;com/ljq/test/resource/config.properties&quot;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ReflectTest.class.getResourceAsStream(String path)： path不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;InputStream inStream = ReflectTest.class.getResourceAsStream(&quot;/com/ljq/test/resource/config.properties&quot;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;config.properties配置文件所在目录是ReflectTest类所在子目录，才可以；否则报空指针异常&lt;/span&gt;
         InputStream inStream = ReflectTest.&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;resource/config.properties&quot;&lt;span&gt;); 
        
        Properties props&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
        props.load(inStream);
        inStream.close();
        
        String className&lt;/span&gt;=props.getProperty(&quot;className&quot;&lt;span&gt;);
        Collection collection&lt;/span&gt;=&lt;span&gt;(Collection)Class.forName(className).newInstance();
        collection.add(&lt;/span&gt;&quot;123&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;size=&quot;+collection.size()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;size=1&lt;/span&gt;
&lt;span&gt;     }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;config.properties配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
className=java.util.HashSet
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getResourceAsStream用法大致有以下几种：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
第一：要加载的文件和.class文件在同一目录下，例如：com.ljq.test目录下有类ReflectTest.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,同时有资源文件config.properties 

那么，应该有如下代码： 
ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;config.properties&quot;&lt;span&gt;); 

第二：在ReflectTest.class目录的子目录下，例如：com.ljq.test下有类ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,同时在com.ljq.test.resource目录下有资源文件config.properties

那么，应该有如下代码： 
ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;resource/config.properties&quot;&lt;span&gt;); 

第三：不在ReflectTest.class目录下，也不在子目录下，例如：com.ljq.test下有类ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ,同时在com.ljq.resource目录下有资源文件config.properties

那么，应该有如下代码： 
ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;/com/ljq/resource/config.properties&quot;&lt;span&gt;); 

总结一下，可能只是两种写法 

第一：前面有 “&lt;/span&gt;/” ，“/”代表了工程的根目录，例如工程名叫做test，“/&lt;span&gt;”代表了test
ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;/com/ljq/resource/config.properties&quot;&lt;span&gt;); 

第二：前面没有 “&lt;/span&gt;/&lt;span&gt;” ，代表当前类的目录 
ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;config.properties&quot;&lt;span&gt;); 
ReflectTest.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;.getResourceAsStream(&quot;resource/config.properties&quot;&lt;span&gt;); 

最后，总结 
getResourceAsStream读取的文件路径只局限在工程的源文件夹中，包括在工程src根目录下，以及类包里面任何位置，但是如果配置文件路径是在除了源文件夹之外的其他文件夹中时，该方法是用不了的。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Properties获取数据乱码解决&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.原因&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Properties调用load(InputStream)时，读取文件时使用的默认编码为ISO-8859-1；当我们将中文放入到properties文件中，通过getProperty(key)获取值时，取到得数据是ISO-8859-1格式的，但是ISO-8859-1是不能识别中文的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.解决方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;通过getProperty()获取的数据data既然是ISO-8859-1编码的，就通过data.getByte(“iso-8859-1”)获取获取，使用new String(data.getByte(“iso-8859-1”),”UTF-8”)进行转换。当然properties文件的编码类型需要和new String(Byte[],charset)中的第二个参数的编码类型相同。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;http://wiki.jikexueyuan.com/project/java-collection&lt;/p&gt;
&lt;p&gt;http://blog.csdn.net/chenssy/article/details/22896871&lt;/p&gt;
&lt;p&gt;http://www.cnblogs.com/linjiqin&lt;/p&gt;
</description>
<pubDate>Tue, 21 Nov 2017 14:59:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/7875606.html</dc:identifier>
</item>
<item>
<title>Celery 源码解析六：Events 的实现 - 行者酱油君</title>
<link>http://www.cnblogs.com/makor/p/event-implement-in-celery.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makor/p/event-implement-in-celery.html</guid>
<description>&lt;p&gt;在 Celery 中，除了远程控制之外，还有一个元素可以让我们对分布式中的任务的状态有所掌控，而且从实际意义上来说，这个元素对 Celery 更为重要，这就是在本文中将要说到的 Event。&lt;/p&gt;
&lt;p&gt;在 Celery 中，注册了很多的 Event，这些 Event 将会在 Task/Worker 的状态发生变化的时候被发出，然后被绑定的 Event 消费者（Receiver）所接受，绑定的 Event 消费者可以是一连串的回调函数，相信细心的同学在前面的源码解析过程中也有发现一些关于 event 的蛛丝马迹，但是，我都是忽略了先，下面就正式得给大家介绍 Event。&lt;/p&gt;
&lt;h3 id=&quot;toc_0&quot;&gt;Event 有什么用&lt;/h3&gt;
&lt;p&gt;前面说了，Celery 在 Task/Worker 的状态发生变化的时候就会发出 Event，所以，一个很明显的应用就是监控 Event 的状态，例如 Celery 大家所熟知的基于 WebUI 的管理工具 flower 就用到了 Event，但是，这也是一个比较明显的应用，除此之外，我们还可以利用 Event 来给 Task 做快照，甚至实时对 Task 的状态转变做出响应，例如任务失败之后触发报警，任务成功之后执行被依赖的任务等等，总结一下，其实就是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对 Task 的状态做快照&lt;/li&gt;
&lt;li&gt;对 Task 的状态做实时处理&lt;/li&gt;
&lt;li&gt;监控 Celery（Worker/Task） 的执行状态&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;toc_1&quot;&gt;Event 的实现&lt;/h3&gt;
&lt;p&gt;了解完 Event 的功能之后，我们这里直接跳过了 Event 的使用实例，因为这个可以不用实例，而是我们根据前面的介绍，然后我们就明白了需要了解一下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Event 是如何产生的&lt;/li&gt;
&lt;li&gt;Event 的传递机制是如何实现的&lt;/li&gt;
&lt;li&gt;Event 的处理机制如何&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我也将遵循这几个问题的顺序对 Celery 的实现进行一个总结。&lt;/p&gt;
&lt;h4 id=&quot;toc_2&quot;&gt;Event 是如何产生的&lt;/h4&gt;
&lt;p&gt;现在我们已经知道了 Event 是 Task/Worker 产生的，所以出处必然在这些实现中，这就毫无难度了。不妨，我们就从最简单的地方出发，看看 Worker 的 Event 是如何产生的，据我所知，现在 Worker 拥有的 Event 有三个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;worker-online&lt;/li&gt;
&lt;li&gt;worker-heartbeat&lt;/li&gt;
&lt;li&gt;worker-offline&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于 &lt;code&gt;worker-online&lt;/code&gt; 那么应该就是在 Worker 的启动过程中，所以我们还是回到第一篇文章中的介绍，看看里面有什么可以参考的。如果你回去看了的话，肯定会发现 &lt;strong&gt;Consumer&lt;/strong&gt; 这个 &lt;strong&gt;Blueprint&lt;/strong&gt; 里面有一个叫做 &lt;strong&gt;Event&lt;/strong&gt; 的 &lt;strong&gt;Bootstep&lt;/strong&gt;，这里很可疑，不妨去看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223347008-1205195801.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;well，这里看上去没啥有意思的，但是，看 &lt;strong&gt;Line 26&lt;/strong&gt; 我们可以肯定的一点是 Event 是否可用还会取决于我们是否允许 gossip，这个是啥我们还不知道，但是无妨，先继续看下去，这里还有一个东西值得我们关注，那就是 &lt;code&gt;event_dispatcher&lt;/code&gt;，但是这里还没啥可看的，毕竟是 &lt;code&gt;None&lt;/code&gt; 嘛。&lt;/p&gt;
&lt;p&gt;我们只是看到了冰山一角，继续看看 &lt;code&gt;start&lt;/code&gt; 又在干嘛：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223346883-546220169.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里第一句上来就是 &lt;code&gt;close&lt;/code&gt;，有点蒙蔽啊，啥都不知道你就先上来 &lt;code&gt;close&lt;/code&gt; 了，是不是很被动，没关系，我告诉你这里是干啥的，这里就是清除 &lt;code&gt;Celery&lt;/code&gt; 之前的 &lt;code&gt;event_dispatcher&lt;/code&gt;，然后将之前的 &lt;code&gt;event_dispatcher&lt;/code&gt; 返回回来，返回来干啥？在 &lt;strong&gt;Line 47&lt;/strong&gt; 会根据之前的配置设置新的 &lt;code&gt;event_dispatcher&lt;/code&gt; 啊，至于你先知道 &lt;code&gt;event_dispatcher&lt;/code&gt; 是啥，看 &lt;strong&gt;Line 36&lt;/strong&gt; 就知道啦，可以看到这就是一个 &lt;strong&gt;Dispatcher&lt;/strong&gt; 的对象，所以我们需要关注一下这个对象了。&lt;/p&gt;
&lt;p&gt;但是由于 &lt;strong&gt;Dispatcher&lt;/strong&gt; 这个类太复杂，我就不一一摊开讲了，不妨看看我们需要面对的几个方法，第一个是 &lt;code&gt;extend_buffer&lt;/code&gt;，看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223346836-1092174378.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里的 &lt;code&gt;_outbound_buffer&lt;/code&gt; 是一个 &lt;code&gt;deque&lt;/code&gt;，所以我们可以知道其实就是将旧的 event 继承过来，替别人背一下锅。继续看看 &lt;code&gt;flush&lt;/code&gt; 在干些啥：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223346868-333311217.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;哟，这个稍微复杂点了，但是无妨，还是要看看，&lt;strong&gt;Line 204&lt;/strong&gt; 这里只是简单得将 &lt;code&gt;deque&lt;/code&gt; 转换为 &lt;code&gt;list&lt;/code&gt;，然后 &lt;strong&gt;Line 207 、208&lt;/strong&gt; 这里有点意思啦，这里就是发送 Event 了！！！难道我们已经完成任务了？已经发现了如何产生消息了？但是，马上我们在后面又发现了还有一个 groups 的东西，这里发送消息又不一样？不管了，先来看看 &lt;code&gt;_publish&lt;/code&gt; 干啥：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223347040-1194005641.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;看一下 &lt;code&gt;_publish&lt;/code&gt; 的代码，感觉没了意思，又是使用 AMQP，Celery 这是讲 MQ 贯彻到底啊！那似乎没办法了，这里就算完了，但是，我们的事情却还没完，因为这里都是针对的旧的任务，我们希望看到的 &lt;code&gt;worker-online&lt;/code&gt; 还没看到呢，但是 Bootstep 的工作却是完成了，似乎这里线索就断了。&lt;/p&gt;
&lt;p&gt;但是，同样细心的同学可能会记得，我们之前曾经说过一个叫做 &lt;strong&gt;Heart&lt;/strong&gt; 的 &lt;strong&gt;Bootstep&lt;/strong&gt;，它的职责是干啥来着？如果忘记了，不妨回到第一篇回顾一下，记得的话，我们进代码看看，哈哈哈&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223346961-2082080328.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;nice，你会发现，这个 &lt;strong&gt;Bootstep&lt;/strong&gt; 是依赖于 &lt;strong&gt;Events&lt;/strong&gt; 的，同时在 &lt;strong&gt;Line 29&lt;/strong&gt; 中给你会发现就用到了我们刚刚初始化的 &lt;code&gt;event_dispatcher&lt;/code&gt;，然后就调用 &lt;code&gt;start&lt;/code&gt; 了，所以不妨一起看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223347258-1325022158.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;嘿嘿，看到没，这里就是 &lt;code&gt;worker-online&lt;/code&gt; 的发生地了，而且我们还顺便捕捉到了 &lt;code&gt;worker-heartbeat&lt;/code&gt; 这个 &lt;strong&gt;Event&lt;/strong&gt;，so lucky，但是有个地方我们不明的，那就是这个 &lt;code&gt;_send&lt;/code&gt; 干了什么，如果不出意料的话，应该是调用的 &lt;code&gt;dispatcher._publish&lt;/code&gt;，走，看看去：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223347243-494630732.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;好，并没有按照我的套路来，调用的居然是 &lt;code&gt;event_dispatcher&lt;/code&gt; 的 &lt;code&gt;send&lt;/code&gt;，那么它和 &lt;code&gt;_publish&lt;/code&gt; 有什么区别呢？不妨一起看一看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223347727-625392613.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里和 &lt;code&gt;_publish&lt;/code&gt; 的唯一不一样的地方就是做了缓存处理，就是在 &lt;strong&gt;Line 185&lt;/strong&gt; 这里，如果需要缓存，那么缓存一波，在 &lt;strong&gt;Line 192&lt;/strong&gt; 这里如果缓存满了，那么就发送呗。有一点值得注意的就是在 &lt;strong&gt;Line 198&lt;/strong&gt;，这里调用的是 &lt;code&gt;publish&lt;/code&gt; 而不是 &lt;code&gt;_publish&lt;/code&gt;，搞那么多事，那么这里有有什么不一样？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223347899-71034424.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;好呗，从这里看似乎除了对 &lt;code&gt;clock&lt;/code&gt; 进行一个操作之外，没有其他特殊之处，那么这个 &lt;code&gt;clock&lt;/code&gt; 又是什么，起到什么作用呢？略微查找就知道了，这又是 Kombu 的东西，然后看解释就知道了这是一个 Counter，可以用来给 Consumer 判定是否接受这个 Event 用的，所以我们可以先 pass。所以，总得来说，我们可以发现，这里已经对 Event 的产生有了一定了解了，这里可以产生的一个比较明显的问题点就是：&lt;strong&gt;Celery 中 Event 的 send、publish 和 _publish&lt;/strong&gt; 的区别是啥？&lt;/p&gt;
&lt;h4 id=&quot;toc_3&quot;&gt;消息的传递机制&lt;/h4&gt;
&lt;p&gt;在跟踪 Event 的产生的过程中我们已经顺便将 Event 的发送给看了，其实还是 Kombu 的 AMQP 在作用，然后通过 Connection 发送到对应的 MQ 中，再后面就被 Consumer 接收，全链路就是这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Event&amp;lt;Producer&amp;gt; ------&amp;gt; MQ ---------&amp;gt; Event&amp;lt;Consumer&amp;gt;(Receiver)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前半部分我们已经清楚了，但是后半部分还不清楚，所以我们的重点就是看看后半部分具体是怎么做的。但是后半部分要从何处入手这是个问题，我这里省去了查找的过程，直接说一下入口吧，位置就在 &lt;code&gt;celery/bin/events.py&lt;/code&gt;，对于任一一种 Events，我们需要关注的是 &lt;code&gt;run_evtop&lt;/code&gt; 这个函数，所以先来看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223348118-49854373.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里很简短，继续跟下去看看咯：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223348524-127211682.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里有点意思了，但是还是可以比较简单得看到 &lt;strong&gt;Line 529&lt;/strong&gt; 是关键所在：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223348633-1258422340.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;看到这里我们就该偷笑了，看到 &lt;code&gt;while 1&lt;/code&gt; 就意味差不多到最后了，哈哈，&lt;strong&gt;Line 508&lt;/strong&gt; 使用的是 &lt;code&gt;read&lt;/code&gt; 的 Connection，然后 &lt;strong&gt;Line 512&lt;/strong&gt; 创建了一个 &lt;strong&gt;Receiver&lt;/strong&gt;，在 &lt;strong&gt;Line 515&lt;/strong&gt; 进行 &lt;code&gt;capture&lt;/code&gt;，所以我们可以断定，我们想找的就在这两句里面了，直接看 &lt;strong&gt;Line 515&lt;/strong&gt; 吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223348602-1557868798.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;这里有点意思的就是又是遇到 Kombu 的锅：&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;class kombu.mixins.ConsumerMixin[source]&lt;br/&gt;Convenience mixin for implementing consumer programs.&lt;/p&gt;
&lt;p&gt;It can be used outside of threads, with threads, or greenthreads (eventlet/gevent) too.&lt;/p&gt;
&lt;p&gt;The basic class would need a connection attribute which must be a Connection instance, and define a get_consumers() method that returns a list of kombu.Consumer instances to use. Supporting multiple consumers is important so that multiple channels can be used for different QoS requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里其实是有多个 EventReceiver 绑定了这个 Connection，然后 &lt;code&gt;ConsumerMixin&lt;/code&gt; 帮助协调这些 Receiver，每个 Receiver 都可以收到这些 Event，但是能不能处理就看他们的 &lt;code&gt;routing_key&lt;/code&gt; 设置得好不好了。&lt;/p&gt;
&lt;h4 id=&quot;toc_4&quot;&gt;Event 的处理机制&lt;/h4&gt;
&lt;p&gt;看完 Event 的接收机制我们知道了 Event 是以 AMQP 的形式接收的，那么毫无以为，处理逻辑应该在回调机制上回调的，所以关键还是在于 &lt;strong&gt;Line 512&lt;/strong&gt; 中的 &lt;code&gt;handlers&lt;/code&gt;，我们来看着：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/469840/201711/469840-20171121223348555-38369714.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;Receiver&lt;/strong&gt; 中的 &lt;code&gt;process&lt;/code&gt; 我们发现了他是这么用 &lt;code&gt;handlers&lt;/code&gt; 的，那么没问题，&lt;code&gt;state.event&lt;/code&gt; 才是最后的关键，state 中间做了两层的封装，到最后就成了 &lt;code&gt;_create_dispatcher&lt;/code&gt;，但是同样得，这个函数也是比较复杂，所以我这里对他进行精简一下，概括起来是这样的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先找 &lt;code&gt;group&lt;/code&gt; 的 handler，有的话就用这个了，否则看下面；这个默认是没东西的，所以可以先pass&lt;/li&gt;
&lt;li&gt;如果是 &lt;code&gt;worker&lt;/code&gt; 的 Event，就执行 worker 对应的处理&lt;/li&gt;
&lt;li&gt;如果是 &lt;code&gt;task&lt;/code&gt; 的 Event，就执行 task 的对应处理&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;OK，这差不多就是 Event 的内容啦，关于 Event，后面有更精彩的应用会说到，不知道用 Celery 的同学平时对这个特性有没有使用的场景？&lt;/p&gt;
</description>
<pubDate>Tue, 21 Nov 2017 14:34:00 +0000</pubDate>
<dc:creator>行者酱油君</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/makor/p/event-implement-in-celery.html</dc:identifier>
</item>
<item>
<title>如何完全根据官方下载包搭建hibernate框架 - 宇的季节</title>
<link>http://www.cnblogs.com/chenkeyu/p/7874998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenkeyu/p/7874998.html</guid>
<description>&lt;p&gt;　　好久没有用s2sh的框架了，最近业务需要又要拾起来。在搭框架时，发现之前都是复制配置文件，对具体的细节却很懵懂，所以要从新来一遍，也是一次新的学习。&lt;/p&gt;
&lt;p&gt;　　我使用的版本是hibernate-release-4.3.11.Final，因为需要使用基于&lt;span&gt;xml&lt;/span&gt;的配置，这一版本关于&lt;span&gt;xml&lt;/span&gt;的文档还是很友好的，最新的&lt;span&gt;5.x&lt;/span&gt;主要针对注解，与业务有所出入。&lt;/p&gt;
&lt;p&gt;　　下面开始搭建：&lt;/p&gt;
&lt;p&gt;　　百度云：&lt;a href=&quot;http://pan.baidu.com/s/1kVimYlp&quot; target=&quot;_blank&quot;&gt;jar包链接&lt;/a&gt;  密码：h7o8&lt;/p&gt;
&lt;h2&gt;关于文件结构&lt;/h2&gt;
&lt;p&gt;　　搭建Hibernate的压缩文件解压后就是下面的结构：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121195207383-757290091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;jdbc和log4j包&lt;/strong&gt;&lt;/span&gt;是我后加的，其他是就是hibernate的，下面说下他这几个文件夹的大致用途&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;documentation&lt;/span&gt;文件夹：存放了Hibernate的使用文档和框架API等，下面会用到。&lt;/p&gt;
&lt;p&gt;　　lib文件夹：存放的是hibernate所需要的jar包。&lt;/p&gt;
&lt;p&gt;　　project文件夹：存放的是一些小项目实例，里面的etc会用到。&lt;/p&gt;
&lt;h2&gt;关于jar包&lt;/h2&gt;
&lt;p&gt;　　搭建Hibernate，首先就是jar包，而Hibernate的jar包就在lib/required文件夹里，下面是这些jar包的作用&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121194227961-735092913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　有了这些jar包，Hibernate的功能就全了，但是Hibernate是操作数据库的，所以我们还需要提供我们要使用的数据库的对应的驱动。如mysql的驱动包。&lt;/p&gt;
&lt;p&gt;　　在开发过程中，我们必然还需要记录捕捉项目的运行情况，所以还需要log4j的支持，进官网下载即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121194719727-176444744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下载完的文件里有很多jar包，用哪个呢，官网的下面说的很清楚。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121194838008-426333349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里，jar包就准备完成了，&lt;/p&gt;
&lt;h2&gt; 创建项目&lt;/h2&gt;
&lt;h3&gt;　　创建一个项目。&lt;/h3&gt;
&lt;p&gt;　　一、file-new-javaProject 填写项目名即可，因为主要说明Hibernate的使用，不需要web，所以直接用JavaProject，如果使用web也是一样的道理。&lt;/p&gt;
&lt;h3&gt;　　导入jar包&lt;/h3&gt;
&lt;p&gt;　　一、创建一个文件夹，将上面Hibernate的required文件夹的jar包、jdbc的jar包、log4j的jar包都copy进来&lt;/p&gt;
&lt;p&gt;　　二、全选，鼠标右键-buildPath-add to build path&lt;/p&gt;
&lt;h3&gt;　　创建一个数据表&lt;/h3&gt;
&lt;p&gt;　　创建一个数据库，并添加一个表，下面是一个示例。也可以自己随意创建。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3495e4ec-197b-40cf-b086-2a1bb7c801e7')&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_3495e4ec-197b-40cf-b086-2a1bb7c801e7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3495e4ec-197b-40cf-b086-2a1bb7c801e7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3495e4ec-197b-40cf-b086-2a1bb7c801e7',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3495e4ec-197b-40cf-b086-2a1bb7c801e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `u_id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(11&lt;span&gt;) NOT NULL AUTO_INCREMENT,
  `u_email` varchar(&lt;/span&gt;60&lt;span&gt;) DEFAULT NULL,
  `u_name` varchar(&lt;/span&gt;100&lt;span&gt;) DEFAULT NULL,
  `u_username` varchar(&lt;/span&gt;100&lt;span&gt;) DEFAULT NULL,
  `u_password` varchar(&lt;/span&gt;70&lt;span&gt;) DEFAULT NULL,
  `u_age` varchar(&lt;/span&gt;255&lt;span&gt;) DEFAULT NULL,
  `u_detail` varchar(&lt;/span&gt;255&lt;span&gt;) DEFAULT NULL,
  `u_avatar` varchar(&lt;/span&gt;255&lt;span&gt;) DEFAULT NULL,
  `is_admin` varchar(&lt;/span&gt;5&lt;span&gt;) DEFAULT NULL,
  `createtime` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `updatetime` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`u_id`)
) ENGINE&lt;/span&gt;=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　创建一个表对应的实体类&lt;/h3&gt;
&lt;p&gt;　　先建一个com.xx.domain的包，将实体类放入包中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e414559d-dd67-40f1-ae6b-c7a1be8a4da3')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_e414559d-dd67-40f1-ae6b-c7a1be8a4da3&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e414559d-dd67-40f1-ae6b-c7a1be8a4da3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e414559d-dd67-40f1-ae6b-c7a1be8a4da3',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e414559d-dd67-40f1-ae6b-c7a1be8a4da3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cky.domain;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.Timestamp;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer uId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uEmail;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uUsername;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uPassword;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uAge;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uDetail;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String uAvatar;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String isAdmin;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Timestamp createtime;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Timestamp updatetime;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getuId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuId(Integer uId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uId =&lt;span&gt; uId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuEmail() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uEmail;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuEmail(String uEmail) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uEmail =&lt;span&gt; uEmail;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuName(String uName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uName =&lt;span&gt; uName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uUsername;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuUsername(String uUsername) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uUsername =&lt;span&gt; uUsername;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uPassword;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuPassword(String uPassword) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uPassword =&lt;span&gt; uPassword;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uAge;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuAge(String uAge) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uAge =&lt;span&gt; uAge;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuDetail() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uDetail;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuDetail(String uDetail) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uDetail =&lt;span&gt; uDetail;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getuAvatar() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uAvatar;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setuAvatar(String uAvatar) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uAvatar =&lt;span&gt; uAvatar;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getIsAdmin() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; isAdmin;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setIsAdmin(String isAdmin) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.isAdmin =&lt;span&gt; isAdmin;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Timestamp getCreatetime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; createtime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCreatetime(Timestamp createtime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.createtime =&lt;span&gt; createtime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Timestamp getUpdatetime() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; updatetime;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUpdatetime(Timestamp updatetime) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.updatetime =&lt;span&gt; updatetime;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object o) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; == o) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt; || getClass() != o.getClass()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        User user &lt;/span&gt;=&lt;span&gt; (User) o;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uId != user.uId) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uEmail != &lt;span&gt;null&lt;/span&gt; ? !uEmail.equals(user.uEmail) : user.uEmail != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uName != &lt;span&gt;null&lt;/span&gt; ? !uName.equals(user.uName) : user.uName != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uUsername != &lt;span&gt;null&lt;/span&gt; ? !uUsername.equals(user.uUsername) : user.uUsername != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uPassword != &lt;span&gt;null&lt;/span&gt; ? !uPassword.equals(user.uPassword) : user.uPassword != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uAge != &lt;span&gt;null&lt;/span&gt; ? !uAge.equals(user.uAge) : user.uAge != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uDetail != &lt;span&gt;null&lt;/span&gt; ? !uDetail.equals(user.uDetail) : user.uDetail != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (uAvatar != &lt;span&gt;null&lt;/span&gt; ? !uAvatar.equals(user.uAvatar) : user.uAvatar != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isAdmin != &lt;span&gt;null&lt;/span&gt; ? !isAdmin.equals(user.isAdmin) : user.isAdmin != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (createtime != &lt;span&gt;null&lt;/span&gt; ? !createtime.equals(user.createtime) : user.createtime != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (updatetime != &lt;span&gt;null&lt;/span&gt; ? !updatetime.equals(user.updatetime) : user.updatetime != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User{&quot; +
                &quot;uId=&quot; + uId +
                &quot;, uEmail='&quot; + uEmail + '\'' +
                &quot;, uName='&quot; + uName + '\'' +
                &quot;, uUsername='&quot; + uUsername + '\'' +
                &quot;, uPassword='&quot; + uPassword + '\'' +
                &quot;, uAge='&quot; + uAge + '\'' +
                &quot;, uDetail='&quot; + uDetail + '\'' +
                &quot;, uAvatar='&quot; + uAvatar + '\'' +
                &quot;, isAdmin='&quot; + isAdmin + '\'' +
                &quot;, createtime=&quot; + createtime +
                &quot;, updatetime=&quot; + updatetime +
                &quot;}\n&quot;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
        Integer result &lt;/span&gt;=&lt;span&gt; uId;
        result &lt;/span&gt;= 31 * result + (uEmail != &lt;span&gt;null&lt;/span&gt; ? uEmail.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (uName != &lt;span&gt;null&lt;/span&gt; ? uName.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (uUsername != &lt;span&gt;null&lt;/span&gt; ? uUsername.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (uPassword != &lt;span&gt;null&lt;/span&gt; ? uPassword.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (uAge != &lt;span&gt;null&lt;/span&gt; ? uAge.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (uDetail != &lt;span&gt;null&lt;/span&gt; ? uDetail.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (uAvatar != &lt;span&gt;null&lt;/span&gt; ? uAvatar.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (isAdmin != &lt;span&gt;null&lt;/span&gt; ? isAdmin.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (createtime != &lt;span&gt;null&lt;/span&gt; ? createtime.hashCode() : 0&lt;span&gt;);
        result &lt;/span&gt;= 31 * result + (updatetime != &lt;span&gt;null&lt;/span&gt; ? updatetime.hashCode() : 0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;在创建实体类时，属性最好使用包装类，例如：Integer，因为与基本类型(int)相比，包装类多了一种null状态。可以表示不存在，而基本类型带有默认值（如int默认&lt;span&gt;0&lt;/span&gt;），这时就会有歧义,不知道是值为0还是不存在。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;　　创建Hibernate配置文件&lt;/h3&gt;
&lt;p&gt;　　在项目鼠标右键-new-SourceFolder，创建一个资源文件。&lt;/p&gt;
&lt;p&gt;　　（资源文件是为了方便我们阅读而设计的，当程序编译后，所有的资源文件会进行合并最后全部放到classes文件中，所以我们可以通过classpath进行获取）&lt;/p&gt;
&lt;p&gt;　　创建hibernate.cfg.xml文件（&lt;strong&gt;&lt;span&gt;这个文件名是hibernate默认文件名，当程序启动时，hibernate会自动在classpath中寻找名为hibernate.cfg.xml的文件，如果不是这个名字，就需要后期手动指定，会比较麻烦&lt;/span&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;　　下面我们需要为文件添加约束，那么约束在哪里呢？&lt;/p&gt;
&lt;p&gt;　　其实hibernate早已经为我们准备好了，打开hibernate核心包下的org.hibernate,最下面会有dtd文件&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121203304915-960819069.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121203412758-1565072888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　双击打开hibernate-configuration-3.0.dtd文件（&lt;span&gt;3.0向下兼容，4.0不向下兼容，所以要选择3.0的文件&lt;/span&gt;），会发现，上面注释里说明了约束头怎么写：&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121203542196-1782964643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;复制到配置文件中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121203619649-609683923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时我们写一个&amp;lt;然后alt+？，会有提示标签，什么？你没有？那可以看看&lt;a href=&quot;http://www.cnblogs.com/chenkeyu/p/7875367.html&quot; target=&quot;_blank&quot;&gt;另一篇博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　配置文件的基本结构如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 先配置SessionFactory标签，一个数据库对应一个SessionFactory标签 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 必须的配置的参数5个，4大参数，数据库方言  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
        #hibernate.connection.driver_class com.mysql.jdbc.Driver
        #hibernate.connection.url jdbc:mysql:///test
        #hibernate.connection.username gavin
        #hibernate.connection.password 
        数据库方言
        #hibernate.dialect org.hibernate.dialect.MySQLDialect
         &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.driver_class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql:///blog&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;root&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.connection.password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;123456&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.dialect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQLDialect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 可选配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 显示sql语句 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.show_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 格式化sql语句 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.format_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 生成数据库的表结构 
        (hbm2dd全称hibernate mapping to db define language auto create)
        update 没表会自动创建，有表添加数据。
            如果开发中间需要添加字段，可以在实体类添加属性。update会自动在数据库添加字段，并且不改变原来数据库值
        validate 校验实体属性和数据库是否一致
        &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hibernate.hbm2ddl.auto&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;update&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 映射配置文件，可以在map配置文件右键copy qualified name&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapping &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/cky/domain/User.hbm.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面配置的属性都可以在hibernate-release-4.3.11.Final\project\etc\hibernate.properties文件中找到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1003414/201711/1003414-20171121211452790-1318741122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;　　创建mapping映射文件&lt;/h2&gt;
&lt;p&gt;关于mapping映射文件的一些默认的规则。&lt;/p&gt;
&lt;p&gt;　　1、&lt;strong&gt;&lt;span&gt;Hibernate的mapping映射文件默认需要和实体类在同一文件夹中&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　2、&lt;strong&gt;&lt;span&gt;mapping映射文件默认命名规则：实体类名.hbm.xml。hbm（全称：hibernate mapping）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;User.hbm.xml文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('89dc41a0-144a-4ab0-876f-f1d45f7ca7cf')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_89dc41a0-144a-4ab0-876f-f1d45f7ca7cf&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_89dc41a0-144a-4ab0-876f-f1d45f7ca7cf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('89dc41a0-144a-4ab0-876f-f1d45f7ca7cf',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_89dc41a0-144a-4ab0-876f-f1d45f7ca7cf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC 
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.cky.domain.User&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置id
    name实体类属性，column表字段，如果一样，column可以省略。
 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uId&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 主键生成策略 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;native&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uEmail&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uName&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uUsername&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uPassword&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uAge&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_age&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uDetail&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_detail&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uAvatar&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;u_avatar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;isAdmin&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;is_admin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;createtime&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;createtime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;updatetime&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;updatetime&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;User实体类文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f0c427e0-56a2-4d36-a455-83e02f1d5835')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_f0c427e0-56a2-4d36-a455-83e02f1d5835&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f0c427e0-56a2-4d36-a455-83e02f1d5835&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f0c427e0-56a2-4d36-a455-83e02f1d5835',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f0c427e0-56a2-4d36-a455-83e02f1d5835&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.cky.domain;

import java.sql.Timestamp;

public class User {
    private Integer uId;
    private String uEmail;
    private String uName;
    private String uUsername;
    private String uPassword;
    private String uAge;
    private String uDetail;
    private String uAvatar;
    private String isAdmin;
    private Timestamp createtime;
    private Timestamp updatetime;

    public Integer getuId() {
        return uId;
    }

    public void setuId(Integer uId) {
        this.uId = uId;
    }

    public String getuEmail() {
        return uEmail;
    }

    public void setuEmail(String uEmail) {
        this.uEmail = uEmail;
    }

    public String getuName() {
        return uName;
    }

    public void setuName(String uName) {
        this.uName = uName;
    }

    public String getuUsername() {
        return uUsername;
    }

    public void setuUsername(String uUsername) {
        this.uUsername = uUsername;
    }

    public String getuPassword() {
        return uPassword;
    }

    public void setuPassword(String uPassword) {
        this.uPassword = uPassword;
    }

    public String getuAge() {
        return uAge;
    }

    public void setuAge(String uAge) {
        this.uAge = uAge;
    }

    public String getuDetail() {
        return uDetail;
    }

    public void setuDetail(String uDetail) {
        this.uDetail = uDetail;
    }

    public String getuAvatar() {
        return uAvatar;
    }

    public void setuAvatar(String uAvatar) {
        this.uAvatar = uAvatar;
    }

    public String getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(String isAdmin) {
        this.isAdmin = isAdmin;
    }

    public Timestamp getCreatetime() {
        return createtime;
    }

    public void setCreatetime(Timestamp createtime) {
        this.createtime = createtime;
    }

    public Timestamp getUpdatetime() {
        return updatetime;
    }

    public void setUpdatetime(Timestamp updatetime) {
        this.updatetime = updatetime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        User user = (User) o;

        if (uId != user.uId) return false;
        if (uEmail != null ? !uEmail.equals(user.uEmail) : user.uEmail != null) return false;
        if (uName != null ? !uName.equals(user.uName) : user.uName != null) return false;
        if (uUsername != null ? !uUsername.equals(user.uUsername) : user.uUsername != null) return false;
        if (uPassword != null ? !uPassword.equals(user.uPassword) : user.uPassword != null) return false;
        if (uAge != null ? !uAge.equals(user.uAge) : user.uAge != null) return false;
        if (uDetail != null ? !uDetail.equals(user.uDetail) : user.uDetail != null) return false;
        if (uAvatar != null ? !uAvatar.equals(user.uAvatar) : user.uAvatar != null) return false;
        if (isAdmin != null ? !isAdmin.equals(user.isAdmin) : user.isAdmin != null) return false;
        if (createtime != null ? !createtime.equals(user.createtime) : user.createtime != null) return false;
        if (updatetime != null ? !updatetime.equals(user.updatetime) : user.updatetime != null) return false;

        return true;
    }

    @Override
    public String toString() {
        return &quot;User{&quot; +
                &quot;uId=&quot; + uId +
                &quot;, uEmail='&quot; + uEmail + '\'' +
                &quot;, uName='&quot; + uName + '\'' +
                &quot;, uUsername='&quot; + uUsername + '\'' +
                &quot;, uPassword='&quot; + uPassword + '\'' +
                &quot;, uAge='&quot; + uAge + '\'' +
                &quot;, uDetail='&quot; + uDetail + '\'' +
                &quot;, uAvatar='&quot; + uAvatar + '\'' +
                &quot;, isAdmin='&quot; + isAdmin + '\'' +
                &quot;, createtime=&quot; + createtime +
                &quot;, updatetime=&quot; + updatetime +
                &quot;}\n&quot;;
    }

    @Override
    public int hashCode() {
        Integer result = uId;
        result = 31 * result + (uEmail != null ? uEmail.hashCode() : 0);
        result = 31 * result + (uName != null ? uName.hashCode() : 0);
        result = 31 * result + (uUsername != null ? uUsername.hashCode() : 0);
        result = 31 * result + (uPassword != null ? uPassword.hashCode() : 0);
        result = 31 * result + (uAge != null ? uAge.hashCode() : 0);
        result = 31 * result + (uDetail != null ? uDetail.hashCode() : 0);
        result = 31 * result + (uAvatar != null ? uAvatar.hashCode() : 0);
        result = 31 * result + (isAdmin != null ? isAdmin.hashCode() : 0);
        result = 31 * result + (createtime != null ? createtime.hashCode() : 0);
        result = 31 * result + (updatetime != null ? updatetime.hashCode() : 0);
        return result;
    }

    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;　　添加测试&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.cky.Demo;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.junit.Test;

import com.cky.domain.User;
import com.cky.utils.HibernateUtils;

public class DemoTest {
    @Test
    public void testSave() {
        //1.加载配置文件
        Configuration cfg=new Configuration();
        //默认加载src目录下的hibernate.cfg.xml的配置文件
        cfg.configure();
        //2.创建sessionFactory
        SessionFactory sessionFactory = cfg.buildSessionFactory();
        //3.创建session
        Session session = sessionFactory.openSession();
        //4.开启事务
        Transaction tr = session.beginTransaction();
        //5.编写更新代码
        User user=new User();
        user.setuName(&quot;小红&quot;);
        user.setuPassword(&quot;123456&quot;);
        session.save(user);
        
        //6.提交事务
        tr.commit();
        //7.释放资源
        session.close();
        sessionFactory.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 21 Nov 2017 13:23:00 +0000</pubDate>
<dc:creator>宇的季节</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenkeyu/p/7874998.html</dc:identifier>
</item>
<item>
<title>eclipse中hibernate和mybatis中xml配置文件的没有标签提醒解决方法 - 宇的季节</title>
<link>http://www.cnblogs.com/chenkeyu/p/7875367.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenkeyu/p/7875367.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Hibernate Mapping DTD.

&amp;lt;!DOCTYPE hibernate-mapping PUBLIC 
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;

An instance of this XML document may contain mappings for an arbitrary 
number of classes. The class mappings may contain associations to classes
mapped in the same document or in another document. No class may be 
mapped more than once. Each document may also contain definitions of an
arbitrary number of queries, and import declarations of arbitrary classes. 

&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    The document root.
 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT hibernate-mapping (
    meta*,
    identifier-generator*,
    typedef*,
    filter-def*,
    import*,
    (class|subclass|joined-subclass|union-subclass)*,
    resultset*,
    (query|sql-query)*,
    filter-def*,
    fetch-profile*,
    database-object*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping default-cascade CDATA &quot;none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping default-access CDATA &quot;property&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping default-lazy (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping auto-import (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST hibernate-mapping package CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    &amp;lt;meta.../&amp;gt; is used to assign meta-level attributes to a class
    or property.  Is currently used by codegenerator as a placeholder for
    values that is not directly related to OR mappings.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT meta (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST meta attribute CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST meta inherit (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    &amp;lt;identifier-generator.../&amp;gt; allows customized short-naming of IdentifierGenerator implementations.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT identifier-generator EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST identifier-generator name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST identifier-generator class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    &amp;lt;typedef.../&amp;gt; allows defining a customized type mapping for a Hibernate type. May
    contain parameters for parameterizable types.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT typedef (param*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST typedef class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST typedef name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    IMPORT element definition; an explicit query language &quot;import&quot;
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT import EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST import class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST import rename CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: unqualified class name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    Root entity mapping.  Poorly named as entities do not have to be represented by 
    classes at all.  Mapped entities may be represented via different methodologies 
    (POJO, Map, Dom4j).
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT class (
     meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    tuplizer*,
    (id|composite-id),
    discriminator?,
    natural-id?,
    (version|timestamp)?,
    (property|many-to-one|one-to-one|component|dynamic-component|properties|any|map|set|list|bag|idbag|array|primitive-array)*,
    ((join*,subclass*)|joined-subclass*|union-subclass*),
    loader?,sql-insert?,sql-update?,sql-delete?,
    filter*,
    fetch-profile*,
    resultset*,
    (query|sql-query)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; this is the class name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class proxy CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no proxy interface &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class lazy (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: unqualified classname &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class discriminator-value CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: unqualified class name | none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class abstract (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class polymorphism (implicit|explicit) &quot;implicit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class dynamic-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class dynamic-insert (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class select-before-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class optimistic-lock (none|version|dirty|all) &quot;version&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class rowid CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST class node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    TUPLIZER element; defines tuplizer to use for a component/entity for a given entity-mode
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT tuplizer EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST tuplizer entity-mode (pojo|dom4j|dynamic-map) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; entity mode for which tuplizer is in effect &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST tuplizer class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; the tuplizer class to use &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    FILTER-DEF element; top-level filter definition.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT filter-def (#PCDATA|filter-param)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST filter-def name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The filter name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST filter-def condition CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    FILTER-PARAM element; qualifies parameters found within a FILTER-DEF
    condition.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT filter-param EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST filter-param name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The parameter name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST filter-param type CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The parameter type &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    FILTER element; used to apply a filter.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT filter (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST filter name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST filter condition CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT fetch-profile (fetch*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST fetch-profile name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    The &amp;lt;fetch&amp;gt; element defines a single path to which the fetch
    refers, as well as the style of fetch to apply.  The 'root' of the
    path is different depending upon the context in which the
    containing &amp;lt;fetch-profile/&amp;gt; occurs; within a &amp;lt;class/&amp;gt; element,
    the entity-name of the containing class mapping is assumed...
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT fetch EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST fetch entity CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Implied as long as the containing fetch profile is contained in a class mapping &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST fetch association CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST fetch style (join|select) &quot;join&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A join allows some properties of a class to be persisted to a second table &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT join ( 
    subselect?,
    comment?,
    key,
    (property|many-to-one|component|dynamic-component|any)*,
    sql-insert?,sql-update?,sql-delete?
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join table CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join fetch (join|select) &quot;join&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join inverse (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST join optional (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A natural-id element allows declaration of the unique business key &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT natural-id ( (property|many-to-one|component|dynamic-component|any)* )&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST natural-id mutable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares the id type, column and generation algorithm for an entity class.
If a name attribut is given, the id is exposed to the application through the 
named property of the class. If not, the id is only exposed to the application 
via Session.getIdentifier() &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT id (meta*,column*,type?,generator?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST id unsaved-value CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; any|none|null|undefined|0|-1|... &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A composite key may be modelled by a java class with a property for each 
key column. The class must implement java.io.Serializable and reimplement equals() 
and hashCode(). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT composite-id ( meta*, (key-property|key-many-to-one)+, generator? )&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-id class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-id mapped (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-id name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-id node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-id access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-id unsaved-value (undefined|any|none) &quot;undefined&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Polymorphic data requires a column holding a class discriminator value. This
value is not directly exposed to the application. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT discriminator ((column|formula)?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: &quot;class&quot;|none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator type CDATA &quot;string&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator not-null (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator force (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST discriminator insert (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Versioned data requires a column holding a version number. This is exposed to the
application through a property of the Java class. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT version (meta*,column*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version type CDATA &quot;integer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version unsaved-value (null|negative|undefined) &quot;undefined&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version generated (never|always) &quot;never&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST version insert (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT timestamp (meta*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp unsaved-value (null|undefined) &quot;null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp source (vm|db) &quot;vm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST timestamp generated (never|always) &quot;never&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    Subclass declarations are nested beneath the root class declaration to achieve
    polymorphic persistence with the table-per-hierarchy mapping strategy.

    See the note on the class element regarding &amp;lt;pojo/&amp;gt; vs. @name usage...
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT subclass (
     meta*,
    tuplizer*,
    synchronize*,
    (property|many-to-one|one-to-one|component|dynamic-component|any|map|set|list|bag|idbag|array|primitive-array)*,
    join*, 
    subclass*,
    loader?,sql-insert?,sql-update?,sql-delete?,
    fetch-profile*,
    resultset*,
    (query|sql-query)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass proxy CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no proxy interface &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass discriminator-value CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: unqualified class name | none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass dynamic-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass dynamic-insert (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass select-before-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass extends CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: empty when a toplevel, otherwise the nearest class definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass lazy (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass abstract (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST subclass node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    Joined subclasses are used for the normalized table-per-subclass mapping strategy

    See the note on the class element regarding &amp;lt;pojo/&amp;gt; vs. @name usage...
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT joined-subclass (
    meta*,
    subselect?,
    synchronize*,
    comment?,
    tuplizer*,
    key,
    (property|many-to-one|one-to-one|component|dynamic-component|properties|any|map|set|list|bag|idbag|array|primitive-array)*, 
    joined-subclass*,
    loader?,sql-insert?,sql-update?,sql-delete?,
    fetch-profile*,
    resultset*,
    (query|sql-query)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass proxy CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no proxy interface &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: unqualified class name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass dynamic-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass dynamic-insert (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass select-before-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass extends CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none when toplevel, otherwise the nearest class definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass lazy (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass abstract (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST joined-subclass node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    Union subclasses are used for the table-per-concrete-class mapping strategy

    See the note on the class element regarding &amp;lt;pojo/&amp;gt; vs. @name usage...
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT union-subclass (
     meta*,
    subselect?,
    synchronize*,
    comment?,
    tuplizer*,
    (property|many-to-one|one-to-one|component|dynamic-component|properties|any|map|set|list|bag|idbag|array|primitive-array)*,
    union-subclass*,
    loader?,sql-insert?,sql-update?,sql-delete?,
    fetch-profile*,
    resultset*,
    (query|sql-query)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass proxy CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no proxy interface &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: unqualified class name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass dynamic-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass dynamic-insert (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass select-before-update (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass extends CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none when toplevel, otherwise the nearest class definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass lazy (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass abstract (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST union-subclass node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Property of an entity class or component, component-element, composite-id, etc. 
JavaBeans style properties are mapped to table columns. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT property (meta*,(column|formula)*,type?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property precision CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property scale CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property not-null (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property unique-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property index CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; include the columns spanned by this property in an index &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property update (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property insert (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property lazy (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST property generated (never|insert|always) &quot;never&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares the type of the containing property (overrides an eventually existing type
attribute of the property). May contain param elements to customize a ParametrizableType. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT type (param*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST type name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares an association between two entities (Or from a component, component element,
etc. to an entity). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT many-to-one (meta*,(column|formula)*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one not-null (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one unique-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one index CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one fetch (join|select) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one update (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one insert (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one property-ref CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one lazy (false|proxy|no-proxy) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one not-found (exception|ignore) &quot;exception&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-one embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares a one-to-one association between two entities (Or from a component, 
component element, etc. to an entity). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT one-to-one (meta*,formula*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one fetch (join|select) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one constrained (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one property-ref CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one lazy (false|proxy|no-proxy) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-one embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A property embedded in a composite identifier or map index (always not-null). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT key-property (meta*,column*,type?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-property name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-property access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-property type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-property column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-property length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-property node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A many-to-one association embedded in a composite identifier or map index 
(always not-null, never cascade). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT key-many-to-one (meta*,column*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one lazy (false|proxy) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key-many-to-one on-delete (cascade|noaction) &quot;noaction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; An &quot;any&quot; association is a polymorphic association to any table with
the given identifier type. The first listed column is a VARCHAR column 
holding the name of the class (for that row). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT any (meta*,meta-value*,column,column+)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any id-type CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any meta-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;- default: Hibernate.STRING &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any insert (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any update (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any index CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; include the columns spanned by this association in an index &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any lazy (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST any node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT meta-value EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST meta-value value CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST meta-value class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A component is a user-defined class, persisted along with its containing entity
to the table of the entity class. JavaBeans style properties of the component are
mapped to columns of the table of the containing entity. A null component reference
is mapped to null values in all columns and vice versa. Components do not support
shared reference semantics. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT component (
    meta*,
    tuplizer*,
    parent?,
    (property|many-to-one|one-to-one|component|dynamic-component|any|map|set|list|bag|array|primitive-array)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component update (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component insert (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component lazy (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST component node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A dynamic-component maps columns of the database entity to a java.util.Map 
at the Java level &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT dynamic-component (
    (property|many-to-one|one-to-one|component|dynamic-component|any|map|set|list|bag|array|primitive-array)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component update (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component insert (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dynamic-component node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; properties declares that the contained properties form an alternate key. The name
attribute allows an alternate key to be used as the target of a property-ref. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT properties (
    (property|many-to-one|component|dynamic-component)*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties insert (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties update (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST properties node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The parent element maps a property of the component class as a pointer back to
the owning entity. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT parent EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST parent name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Collection declarations nested inside a class declaration indicate a foreign key 
relationship from the collection table to the enclosing class. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT map (
    meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    key, 
    (map-key|composite-map-key|map-key-many-to-many|index|composite-index|index-many-to-many|index-many-to-any), 
    (element|one-to-many|many-to-many|composite-element|many-to-any),
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?,
    filter*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map lazy (true|false|extra) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map inverse (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map sort CDATA &quot;unsorted&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; unsorted|natural|&quot;comparator class&quot;, default: unsorted &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map order-by CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                        
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT set (
    meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    key, 
    (element|one-to-many|many-to-many|composite-element|many-to-any),
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?,
    filter*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set lazy (true|false|extra) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set sort CDATA &quot;unsorted&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; unsorted|natural|&quot;comparator class&quot; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set inverse (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set order-by CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                        
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST set embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT bag (
    meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    key, 
    (element|one-to-many|many-to-many|composite-element|many-to-any),
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?,
    filter*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag lazy (true|false|extra) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag inverse (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag order-by CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST bag embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT idbag (
    meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    collection-id,
    key, 
    (element|many-to-many|composite-element|many-to-any),
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?,
    filter*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag lazy (true|false|extra) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag order-by CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST idbag embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT list (
    meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    key, 
    (index|list-index), 
    (element|one-to-many|many-to-many|composite-element|many-to-any),
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?,
    filter*
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list lazy (true|false|extra) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list inverse (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT array (
    meta*,
    subselect?,
    cache?,
    synchronize*,
    comment?,
    key, 
    (index|list-index), 
    (element|one-to-many|many-to-many|composite-element|many-to-any),
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array inverse (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array element-class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array cascade CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST array embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT primitive-array (
    meta*, 
    subselect?,
    cache?, 
    synchronize*,
    comment?,
    key, 
    (index|list-index), 
    element,
    loader?,sql-insert?,sql-update?,sql-delete?,sql-delete-all?
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array table CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array schema CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array catalog CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array subselect CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array mutable (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array batch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array fetch (join|select|subselect) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array persister CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                                                
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array collection-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: none &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array optimistic-lock (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; only supported for properties of a class (not component) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST primitive-array embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares the element type of a collection of basic type &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT element ( (column|formula)*, type? )&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element precision CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element scale CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element not-null (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST element unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; One to many association. This tag declares the entity-class
element type of a collection and specifies a one-to-many relational model &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT one-to-many EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-many class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-many not-found (exception|ignore) &quot;exception&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-many node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-many embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST one-to-many entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; No column declaration attributes required in this case. The primary
    key column of the associated class is already mapped elsewhere.&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Many to many association. This tag declares the entity-class
element type of a collection and specifies a many-to-many relational model &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT many-to-many (meta*,(column|formula)*,filter*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many embed-xml (true|false) &quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many not-found (exception|ignore) &quot;exception&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many outer-join (true|false|auto) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many fetch (join|select) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many lazy (false|proxy) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many unique (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many where CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many order-by CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-many property-ref CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A composite element allows a collection to hold instances of an arbitrary 
class, without the requirement of joining to an entity table. Composite elements
have component semantics - no shared references and ad hoc null value semantics. 
Composite elements may not hold nested collections. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT composite-element ( 
    (meta*),
    parent?,
    tuplizer*,
    (property|many-to-one|any|nested-composite-element)* 
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-element class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-element node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT nested-composite-element ( 
    parent?,
    tuplizer*,
    (property|many-to-one|any|nested-composite-element)* 
)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST nested-composite-element class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST nested-composite-element name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST nested-composite-element access CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST nested-composite-element node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares the column name of a foreign key. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT key (column*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key property-ref CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key on-delete (cascade|noaction) &quot;noaction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key not-null (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key update (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST key unique (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Declares the type and column mapping for a collection index (array or
list index, or key of a map). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT list-index (column?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list-index column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST list-index base CDATA &quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT map-key ((column|formula)*,type?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key node CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT index (column*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; required for maps &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Many to many association mapped to the key of a map. ie. a map keyed
on entities. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT map-key-many-to-many ((column|formula)*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key-many-to-many class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key-many-to-many entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key-many-to-many column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key-many-to-many formula CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST map-key-many-to-many foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT index-many-to-many (column*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index-many-to-many class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index-many-to-many entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index-many-to-many column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index-many-to-many foreign-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Composite index of a map ie. a map keyed on components. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT composite-map-key ( (key-property|key-many-to-one)+ )&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-map-key class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT composite-index ( (key-property|key-many-to-one)+ )&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST composite-index class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; A &quot;many to any&quot; defines a polymorphic association to any table 
with the given identifier type. The first listed column is a VARCHAR column 
holding the name of the class (for that row). &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT many-to-any (meta-value*,column, column+)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-any id-type CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST many-to-any meta-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;- default: Hibernate.CLASS &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT index-many-to-any (column, column+)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index-many-to-any id-type CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST index-many-to-any meta-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;- default: Hibernate.CLASS &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT collection-id (meta*, column*, generator)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST collection-id column CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST collection-id type CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST collection-id length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Generators generate unique identifiers. The class attribute specifies a Java 
class implementing an id generation algorithm. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT generator (param*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST generator class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT param (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST param name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The column element is an alternative to column attributes and required for 
mapping associations to classes with composite ids. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT column (comment?)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column length CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: 255 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column precision CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column scale CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column not-null (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: false (except for id properties) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column unique (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: false (except for id properties) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column unique-key CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no unique key &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column sql-type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; override default column type for hibernate type &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column index CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column check CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no check constraint &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column default CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: no default value &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column read CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: column name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST column write CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                      &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: parameter placeholder ('?') &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The formula and subselect elements allow us to map derived properties and 
entities. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT formula (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT subselect (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The cache element enables caching of an entity class. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT cache EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST cache usage (read-only|read-write|nonstrict-read-write|transactional) #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST cache region CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; default: class or collection role name &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST cache include (all|non-lazy) &quot;all&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The comment element allows definition of a database table or column comment. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT comment (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The loader element allows specification of a named query to be used for fetching
an entity or collection &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT loader EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST loader query-ref CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The query element declares a named Hibernate query string &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT query (#PCDATA|query-param)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query flush-mode (auto|never|always) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query cacheable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query cache-region CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query fetch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query timeout CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query cache-mode (get|ignore|normal|put|refresh) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query read-only (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query comment CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The sql-query element declares a named SQL query string &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT sql-query (#PCDATA|return-scalar|return|return-join|load-collection|synchronize|query-param)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query resultset-ref CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query flush-mode (auto|never|always) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query cacheable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query cache-region CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query fetch-size CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query timeout CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query cache-mode (get|ignore|normal|put|refresh) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query read-only (true|false) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query comment CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-query callable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The query-param element is used only by tools that generate
finder methods for named queries &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT query-param EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query-param name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST query-param type CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; The resultset element declares a named resultset mapping definition for SQL queries &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT resultset (return-scalar|return|return-join|load-collection)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST resultset name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    Defines a return component for a sql-query.  Alias refers to the alias
    used in the actual sql query; lock-mode specifies the locking to be applied
    when the query is executed.  The class, collection, and role attributes are mutually exclusive;
    class refers to the class name of a &quot;root entity&quot; in the object result; collection refers
    to a collection of a given class and is used to define custom sql to load that owned collection
    and takes the form &quot;ClassName.propertyName&quot;; role refers to the property path for an eager fetch
    and takes the form &quot;owningAlias.propertyName&quot;
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT return (return-discriminator?,return-property)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return alias CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return entity-name CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return class CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return lock-mode (none|read|upgrade|upgrade-nowait|upgrade-skiplocked|write) &quot;read&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT return-property (return-column*)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-property name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-property column CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT return-column EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-column name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT return-discriminator EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-discriminator column CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT return-join (return-property)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-join alias CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-join property CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-join lock-mode (none|read|upgrade|upgrade-nowait|upgrade-skiplocked|write) &quot;read&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT load-collection (return-property)*&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST load-collection alias CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST load-collection role CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST load-collection lock-mode (none|read|upgrade|upgrade-nowait|upgrade-skiplocked|write) &quot;read&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT return-scalar EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-scalar column CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST return-scalar type CDATA #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT synchronize EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST synchronize table CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; custom sql operations &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT sql-insert (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-insert callable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-insert check (none|rowcount|param) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT sql-update (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-update callable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-update check (none|rowcount|param) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT sql-delete (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-delete callable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-delete check (none|rowcount|param) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT sql-delete-all (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-delete-all callable (true|false) &quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST sql-delete-all check (none|rowcount|param) #IMPLIED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    Element for defining &quot;auxiliary&quot; database objects.  Must be one of two forms:

    #1 :
        &amp;lt;database-object&amp;gt;
            &amp;lt;definition class=&quot;CustomClassExtendingAuxiliaryObject&quot;/&amp;gt;
        &amp;lt;/database-object&amp;gt;

    #2 :
        &amp;lt;database-object&amp;gt;
            &amp;lt;create&amp;gt;CREATE OR REPLACE ....&amp;lt;/create&amp;gt;
            &amp;lt;drop&amp;gt;DROP ....&amp;lt;/drop&amp;gt;
        &amp;lt;/database-object&amp;gt;
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT database-object ( (definition|(create,drop)), dialect-scope* )&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT definition EMPTY&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST definition class CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT create (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT drop (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
    dialect-scope element allows scoping auxiliary-objects to a particular
    Hibernate dialect implementation.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ELEMENT dialect-scope (#PCDATA)&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;ATTLIST dialect-scope name CDATA #REQUIRED&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 21 Nov 2017 13:09:00 +0000</pubDate>
<dc:creator>宇的季节</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenkeyu/p/7875367.html</dc:identifier>
</item>
</channel>
</rss>