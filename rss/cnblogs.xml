<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>2017秋季阅读计划 - Dmego</title>
<link>http://www.cnblogs.com/dmego/p/7659162.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dmego/p/7659162.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;这学期的课程基本上已经都是专业课了，步入大三，作为软件工程专业的学生，课堂上的专业知识的学习非常重要，同时我们也必须在课下也有自己的自觉性。本学期，就《软件需求分析》课程要求，制定了自己的阅读计划——精读一本关于软件需求与分析方面的书籍，经过查阅资料，我选择阅读电子工业出版社出版的徐峰编写的《有效需求分析》。并制定了详细的阅读计划。&lt;/p&gt;
&lt;h2 id=&quot;内容简介&quot;&gt;内容简介&lt;/h2&gt;
&lt;p&gt;本书是围绕着“我们要做什么，应该如何思考？”为主线展开的。用故事、案例，让大家从中感悟到需求分析的有效思维，并且使用一系列的“任务指引卡”模型帮助大家快速记忆。本书首先借助生活中的隐喻故事帮助读者建立“问题级需求”思考意识；接着通过一个需求变更处理实例阐释如何在日常需求工作中落实“业务驱动、用户导向的需求思想”；然后引出“组织应用类软件系统需求全景图”，帮助理解需求分析的四条主线：价值需求、功能需求、数据需求和非功能需求。&lt;/p&gt;
&lt;h2 id=&quot;作者简介&quot;&gt;作者简介&lt;/h2&gt;
&lt;p&gt;徐锋,资深需求咨询师，致力于IT系统、互联网及消费电子产品的用户研究，需求分析与产品策划的研究，擅长从生活、实战中抽取可复制、可落地的工作方法。在过去的十几年时间里，为诸多大型金融机构、政府组织、通讯运营商、互联网公司、消费电子厂商、行业软件开发商提供过卓有成效的咨询与培训服务。著有《软件需求*实践》等畅销书籍，多次受邀成为中国软件技术大会、中国软件工程大会、MPD等大会的演讲嘉宾。&lt;/p&gt;
&lt;h2 id=&quot;阅读计划&quot;&gt;阅读计划&lt;/h2&gt;
&lt;p&gt;依据本书的分层体系，将阅读计划也作同样的分层递进；第一部分是引导篇，主要介绍的是需求的全景图，计划读完此篇发表一篇阅读笔记；第二部分是价值需求篇，主要介绍三步完成价值续需求的分析，计划读完此篇发表一篇阅读笔记；第三部分是详细需求篇，这是本书重点篇幅，依据包含的三条主线，计划在这个篇幅下面发表三篇阅读笔记；第四部分是补充篇，介绍的是规则与约束相关的内容，计划读完这篇发表一篇阅读笔记。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;有效需求分析阅读笔记一&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;需求分析全景图&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2017-10-14&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;有效需求分析阅读笔记二&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;价值需求主线&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2017-10-28&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;有效需求分析阅读笔记三&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;功能主线&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2017-11-3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;有效需求分析阅读笔记四&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;数据主线&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2017-11-38&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;有效需求分析阅读笔记五&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;质量主线&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2017-12-16&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;有效需求分析阅读笔记六&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;规则与约束&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2017-12-30&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Thu, 12 Oct 2017 18:59:00 +0000</pubDate>
<dc:creator>Dmego</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dmego/p/7659162.html</dc:identifier>
</item>
<item>
<title>PE格式第四讲,数据目录表之导入表,以及IAT表 - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/7659132.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/7659132.html</guid>
<description>&lt;h3&gt;一丶IAT(地址表)&lt;/h3&gt;
&lt;p&gt;首先我们思考一个问题,程序加载的时候会调用API,比如我们以前写的标准PE&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013000510746-1209995602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么他到底是怎么去调用的?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013000558387-110586551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;他会Call 下边的Jmp位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013000624918-2098399909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而Jmp位置则是对一个全局变量取内容.&lt;/p&gt;
&lt;p&gt;看下全局变量内容是什么.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013000852043-7732055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们跟过去看下  75 98 FD AE&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013000945059-2059809432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出,这个位置保存了一张表格,这张表格保存的是MessageBoxA的函数地址.&lt;/p&gt;
&lt;p&gt;那么我们想一下,在程序还没加载之前.这张表格是否存在,内容是否是这个.&lt;/p&gt;
&lt;p&gt;利用虚拟地址,转文件地址,定位 虚拟地址502008&lt;/p&gt;
&lt;p&gt;利用快捷方式转化&lt;/p&gt;
&lt;p&gt;FA = VA - 节区表首地址  + pointerToRawData的大小&lt;/p&gt;
&lt;p&gt;节区表在内存中查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013001238918-796356324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;得出节区表的首地址为502000  因为我们的虚拟地址大于502000,所以他属于是.rdata区.&lt;/p&gt;
&lt;p&gt;看下PE格式,文件中.radata的字段.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013001346934-1850117354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;得出400&lt;/p&gt;
&lt;p&gt;公式:&lt;/p&gt;
&lt;p&gt;FA = VA - 节区表首地址  + pointerToRawData的大小&lt;/p&gt;
&lt;p&gt; = 502008 - 502000 + 400&lt;/p&gt;
&lt;p&gt; = 8 + 400&lt;/p&gt;
&lt;p&gt;= 408 (文件偏移处)&lt;/p&gt;
&lt;p&gt;看下文件偏移处&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013001904480-237188064.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出,205C是一个RVA偏移,转为FA跟随则是&lt;/p&gt;
&lt;p&gt;FA = 5c + 400 = 45c位置&lt;/p&gt;
&lt;p&gt;45C位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013013242340-802919165.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正好是MsgBosA的字符串&lt;/p&gt;
&lt;p&gt;这个IAT表格会跟你的函数个数,会预留很多个&lt;/p&gt;
&lt;p&gt;加载到内存的时候,则会写入到这里.&lt;/p&gt;
&lt;p&gt;我们改成FFFFF试试.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013002254012-2054048533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现还是可以正常运行的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013002337715-247305428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而这个表格的存储方式则是&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

IAT  [iat1......0   iat2........0]

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中是以0结尾的.&lt;/p&gt;
&lt;h2&gt;二丶导入表&lt;/h2&gt;
&lt;p&gt;了解什么是导入表&lt;/p&gt;
&lt;p&gt;上面我们说过,程序调用API,那么导入表就是保存这些API的信息&lt;/p&gt;
&lt;p&gt;首先我们猜测一下&lt;/p&gt;
&lt;p&gt;1.应该有函数名,因为根据函数名才可以在DLL中使用(当然也可以是序号,但是不兼容)&lt;/p&gt;
&lt;p&gt;2.猜测应该有DLL名称,要根据这个DLL才可以加载这个函数名&lt;/p&gt;
&lt;p&gt;3.猜测应该会有存放IAT表格的RVA地址, 加载DLL了,根据函数名获得了函数地址,程序启动之后就会往IAT表格中填写地址了.&lt;/p&gt;
&lt;p&gt;等等.&lt;/p&gt;
&lt;p&gt;看下结构体:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            &lt;/span&gt;
        DWORD   OriginalFirstThunk;  //指向上面的IAT,是一个结构数组,里面保存了导入函数的信息(例如Msg的实际地址)       
&lt;span&gt;    };　　　　　　　　　　　　　　　　　　　//最后会以全0的结构为结束,其中每一项是一个结构,一项8个字节,是指向&lt;br/&gt;　　　　　　　　　　　　　　　　　　　　　　　//IMAGE_THUNK_DATA 看下面详解&lt;br/&gt;　　　　　　　　　　　　　　　　　　　　　　　　&lt;br/&gt;DWORD   TimeDateStamp;           //时间,一般不用      &lt;/span&gt;
&lt;span&gt;
    DWORD   ForwarderChain;           //链表前一个结构,一般不用            &lt;/span&gt;
&lt;span&gt;    DWORD   Name;　　　　　　　　　　　　//上面说的DLL名称的RVA偏移通过偏移可以找到DLL名称
    DWORD   FirstThunk;               // IAT 的RVA偏移.和originalFirstThunk不同&lt;/span&gt;
} IMAGE_IMPORT_DESCRIPTOR;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013010031184-1649576140.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照第一个偏移结构体来算,那么&lt;/p&gt;
&lt;p&gt;双字最高位为0,表示导入符号是一个数值,是一个RVA数值(比如我们的Msg可以利用符号导入)&lt;/p&gt;
&lt;p&gt;双字最高位为1,那么表示导入的符号是一个名称(比如Msg的名字)&lt;/p&gt;
&lt;p&gt;我们查看下user32.dll,里面的导出函数是Msg,我们看下它的序号是什么.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013010632293-75811027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;名字则直接是MessageBoxA了&lt;/p&gt;
&lt;p&gt;可以使用&lt;/p&gt;
&lt;p&gt;IAT结构数组结构表格&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; _IMAGE_THUNK_DATA32 {
    union {
        PBYTE  ForwarderString;
        PDWORD Function;
        DWORD Ordinal;
        PIMAGE_IMPORT_BY_NAME  AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 表示IAT是按照什么加载的,序号加载,还是名称加载.&lt;/p&gt;
&lt;h2&gt;三丶定位导入表&lt;/h2&gt;
&lt;p&gt; 在数据目录中,记录的是导入表的RVA偏移&lt;/p&gt;
&lt;p&gt;那么我们通过公式计算一下在文件中的偏移&lt;/p&gt;
&lt;p&gt;这里使用标准PE&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013011002590-66993073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在数据目录中找到偏移为  2010  RVA = 2010 位置&lt;/p&gt;
&lt;p&gt;现在找模块地址&lt;/p&gt;
&lt;p&gt;模块地址在 选项头(或者叫做扩展头)的成员ImageBase中存储着 ,现在是00401000&lt;/p&gt;
&lt;p&gt;那么现在要找节表&lt;/p&gt;
&lt;p&gt;节表中记录了虚拟地址的RVA  也就是虚拟地址和模块首地址的RVA,我们则可以快速定位是哪个节表了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013011127574-167307879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个显然不是,1000的RVA,距离1000的位置,那么虚拟地址就是00401000  我们的虚拟地址是 00402010&lt;/p&gt;
&lt;p&gt;那么看下下边的节表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013011453152-1645183263.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;402000位置,显然这个就是了&lt;/p&gt;
&lt;p&gt;那么根据快速转换公式得到&lt;/p&gt;
&lt;p&gt;VA = 402010&lt;/p&gt;
&lt;p&gt;FA = 402010 - 402000 + pointertoRawData(不截图了,是400)&lt;/p&gt;
&lt;p&gt;FA = 410 &lt;/p&gt;
&lt;p&gt;那么410位置就是导入表了.我们查看位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013011656590-1037001121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照上面的结构体,我们可以知道DLL 的RVA地址,那么现在是&lt;/p&gt;
&lt;p&gt;206A  计算得出 FA = 6A + 400 = 46A,那么我们看看46A的位置是不是DLL名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013011841340-1671873941.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;,一句IAT的RVA偏移地址,得出IAT表格位置&lt;/p&gt;
&lt;p&gt;现在是2008&lt;/p&gt;
&lt;p&gt;FA = 8+400 = 408&lt;/p&gt;
&lt;p&gt;那么408的位置就是IAT表格了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013012045918-399361503.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出,表格中前四个字节还记录了一个RVA偏移&lt;/p&gt;
&lt;p&gt;那么这个偏移代表的就是函数名字的位置&lt;/p&gt;
&lt;p&gt;FA = 5C+400 = 45C&lt;/p&gt;
&lt;p&gt;那么45C的位置记录就是函数名称了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201710/1197364-20171013012248309-2095298871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意黄色方框的两个字节,这个字节就是上面说的 高低双字代表的意义&lt;/p&gt;
&lt;p&gt;如果高字为1,那么这个API地址则是函数名导入&lt;/p&gt;
&lt;p&gt;如果高字为0,那么就是序号导入&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 17:35:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/7659132.html</dc:identifier>
</item>
<item>
<title>课下作业1-利用计算机计算组合数 - 萌萌程序猿</title>
<link>http://www.cnblogs.com/ggrm/p/7659093.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ggrm/p/7659093.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.程序设计思想&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第一种用公式的方法求组合数，利用递归方法，求出阶乘，求出组合数的大小。&lt;/p&gt;
&lt;p&gt;第二种是用递推的方法，递推的方法是由前往后递推，利用杨辉三角形找出规律，利用二元数组求出组合数的大小。&lt;/p&gt;
&lt;p&gt;第三种是用递归函数的方法，由后往前调用递归公式，利用给出组合数公式，初始化值，求出组合数的大小&lt;/p&gt;
&lt;p&gt;2.程序流程图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1189197/201710/1189197-20171012231823746-933924460.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1189197/201710/1189197-20171013003201590-1628317331.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1189197/201710/1189197-20171013004842793-2107903868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;3.程序源代码&lt;/p&gt;
&lt;p&gt;第一种方法：&lt;/p&gt;
&lt;p&gt;//信1605-1 寇肖萌 20163446&lt;br/&gt;import java.util.Scanner;&lt;br/&gt;import java.lang.Math.*;&lt;br/&gt;import java.math.BigInteger;&lt;br/&gt;public class ZuheNumber{&lt;br/&gt;//组合数公式&lt;br/&gt;public static BigInteger jiecheng(int n)&lt;br/&gt;{&lt;/p&gt;&lt;p&gt;if(n&amp;lt;0)&lt;br/&gt;{&lt;br/&gt;System.out.println(&quot;输入有误&quot;);&lt;br/&gt;}&lt;br/&gt;if(n==1||n==0)&lt;br/&gt;{&lt;br/&gt;return BigInteger.valueOf(1);&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;return BigInteger.valueOf(n).multiply(jiecheng((n-1)));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;public static long calculateN(int n) {&lt;br/&gt;if(n==1 || n==0){&lt;br/&gt;return 1;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;return n*calculateN(n-1);&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;public static void main(String args[])&lt;br/&gt;{&lt;br/&gt;System.out.print(&quot;请输入组合数的n和k：&quot;);&lt;br/&gt;Scanner scanner1=new Scanner(System.in);//组合数的下标&lt;br/&gt;int n=scanner1.nextInt();&lt;br/&gt;Scanner scanner2=new Scanner(System.in);//组合数的上标&lt;br/&gt;int k=scanner2.nextInt();&lt;br/&gt;BigInteger x,y,z,d,result;&lt;br/&gt;x=jiecheng(n);&lt;br/&gt;y=jiecheng(k);&lt;br/&gt;z=jiecheng(n-k);&lt;br/&gt;d=y.multiply(z);//计算k!*(n-k)!的结果&lt;br/&gt;result=x.divide(d);//计算n!\(k!*(n-k)!)的结果&lt;br/&gt;System.out.println(&quot;组合数的结果是:&quot;+result);//输出运算结果&lt;/p&gt;
&lt;p&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt; 第二种方法：&lt;/p&gt;
&lt;p&gt;//信1605-1 寇肖萌 20163446&lt;br/&gt;import java.util.Scanner;&lt;br/&gt;import java.lang.Math.*;&lt;br/&gt;public class ZuheNumber1 {&lt;br/&gt;public static int n;&lt;br/&gt;public static int k;&lt;br/&gt;public static int c[][]=new int[100][100];&lt;br/&gt;ZuheNumber a=new ZuheNumber();&lt;br/&gt;public static void main(String args[])&lt;br/&gt;{&lt;/p&gt;&lt;p&gt;System.out.print(&quot;请输入组合数的n和k：&quot;);&lt;br/&gt;Scanner scanner1=new Scanner(System.in);//组合数的下标&lt;br/&gt;int n=scanner1.nextInt();&lt;br/&gt;Scanner scanner2=new Scanner(System.in);//组合数的上标&lt;br/&gt;int k=scanner2.nextInt();&lt;br/&gt;c[0][0]=1;//初始化&lt;br/&gt;c[1][0]=1;//初始化&lt;br/&gt;c[1][1]=1;//初始化&lt;br/&gt;for(int i=2;i&amp;lt;=n;i++)&lt;br/&gt;{&lt;br/&gt;c[i][0]=1;&lt;br/&gt;c[i][i]=1;//初始化每行 杨辉三角的两边的值&lt;br/&gt;for(int j=1;j&amp;lt;=i;j++)&lt;br/&gt;{&lt;br/&gt;c[i][j]=c[i-1][j-1]+c[i-1][j];&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;System.out.println(&quot;组合数的结果是:&quot;+c[n][k]);&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt; 第三种方法：&lt;/p&gt;
&lt;p&gt;//信1605-1 寇肖萌 20163446&lt;/p&gt;
&lt;p&gt;import java.util.Scanner;&lt;br/&gt;public class ZuheNumber2 {&lt;br/&gt;public static int n;&lt;br/&gt;public static int k;&lt;br/&gt;public static int c[][]=new int[100][100];&lt;br/&gt;public static void main(String args[])&lt;br/&gt;{&lt;br/&gt;System.out.print(&quot;请输入组合数的n和k：&quot;);&lt;br/&gt;Scanner scanner1=new Scanner(System.in);//组合数的下标&lt;br/&gt;int n=scanner1.nextInt();&lt;br/&gt;Scanner scanner2=new Scanner(System.in);//组合数的上标&lt;br/&gt;int k=scanner2.nextInt();&lt;br/&gt;c[0][0]=1;//初始化&lt;br/&gt;c[1][0]=1;//初始化&lt;br/&gt;c[1][1]=1;//初始化&lt;br/&gt;System.out.println(&quot;组合数的结果是:&quot;+digui(n,k));&lt;br/&gt;}&lt;br/&gt;public static int digui(int n0,int k0)&lt;br/&gt;{&lt;br/&gt;if((k0==n0)||(k0==0))&lt;br/&gt;{&lt;br/&gt;return 1;&lt;br/&gt;}&lt;br/&gt;c[n0][k0]=digui(n0-1,k0)+digui(n0-1,k0-1);&lt;br/&gt;return c[n0][k0];&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;4.程序结果截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1189197/201710/1189197-20171012223852121-36359984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1189197/201710/1189197-20171012223957355-1306047444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1189197/201710/1189197-20171012224012918-2020903303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 16:50:00 +0000</pubDate>
<dc:creator>萌萌程序猿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ggrm/p/7659093.html</dc:identifier>
</item>
<item>
<title>ASP.NET没有魔法——ASP.NET MVC 与数据库大集合 - 7m鱼</title>
<link>http://www.cnblogs.com/selimsong/p/7658984.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/selimsong/p/7658984.html</guid>
<description>[unable to retrieve full-text content]ASP.NET没有魔法——ASP.NET与数据库 ASP.NET没有魔法——ASP.NET MVC 与数据库之MySQL ASP.NET没有魔法——ASP.NET MVC 与数据库之ORM ASP.NET没有魔法——ASP.NET MVC 与数据库之MySQL&amp;EF ASP.NET没有魔法——ASP</description>
<pubDate>Thu, 12 Oct 2017 15:52:00 +0000</pubDate>
<dc:creator>7m鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/selimsong/p/7658984.html</dc:identifier>
</item>
<item>
<title>Python学习手册 ：Python 学习笔记第一天 - MaximumVision</title>
<link>http://www.cnblogs.com/Maximumvision/p/7658977.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Maximumvision/p/7658977.html</guid>
<description>&lt;p&gt;获取当前目录路径：&lt;/p&gt;
&lt;p&gt;import os&lt;/p&gt;
&lt;p&gt;os.getcwd()&lt;/p&gt;

&lt;p&gt;在输入python程序时，尽量让不是嵌套结构的语句处于最左侧，要不然系统或许会出现“SyntaxError”错误&lt;/p&gt;

&lt;p&gt;获取系统平台名称：&lt;/p&gt;
&lt;p&gt;import sys&lt;br/&gt;print(sys.platform)&lt;/p&gt;

&lt;p&gt;流重定向：将python输出数据定向其他文件中：python ***.py &amp;gt; test.txt&lt;/p&gt;

&lt;p&gt;避免在windows平台下程序一闪而过的情况，在代码最后加上：input()&lt;/p&gt;

&lt;p&gt;python3.x要模拟python2.x中的input(对字符串求值)，使用eval(input())&lt;/p&gt;

&lt;p&gt;如果想要python在同一次回话中再次运行文件（不停止和重启会话），需要调用imp标准库模块中的reload函数（2.x为内置，3.x不是内置）&lt;/p&gt;
&lt;p&gt;from imp import reload&lt;/p&gt;
&lt;p&gt;reload(***)&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 15:48:00 +0000</pubDate>
<dc:creator>MaximumVision</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Maximumvision/p/7658977.html</dc:identifier>
</item>
<item>
<title>我从.net转别的语言的遭遇，现在貌似又要回头（一） - 精密～顽石</title>
<link>http://www.cnblogs.com/zlfucku/p/7658961.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zlfucku/p/7658961.html</guid>
<description>&lt;p&gt;         从2016年开始，作为公司最后的一个.net部门，被迫转向了php。&lt;/p&gt;
&lt;p&gt;         php里面装得一手什么逼呢？&lt;/p&gt;
&lt;p&gt;          首先，你要来几本入门的书，linux，mysql，php基础语法，nginx或apache。哥那时候刚有小孩不久。有小孩不久是什么概念？小宝宝半夜哭呀，没有什么睡眠，每天公司上手项目，自己还回家看书，很勤奋的好不。可是依然，被比自己年轻几岁的，拥有3-5年的php经验的小伙子领导说慢、鄙视，看不起你们这些.net。社会就是这么的残酷，不管你家里发生了什么大事，你在工作上不能怠慢。可这真真是一个很难的时期好吗？我当时的压力很大，面临学习新东西，家里还不能好好睡觉，接近崩溃。&lt;/p&gt;
&lt;p&gt;          其次，php的逼在于，一堆牛人开发了很多免费的东西必须跑在linux上，且发展有一定岁月了。其实php有什么？和我当时弄的asp，没啥差别。差别在于牛人的想法就是老子就不想在windows上跑这些代码，写的工具只支持linux，或者在windows上跑不出那效果，如redis之流。&lt;/p&gt;
&lt;p&gt;          后面，你可能要上手一些php框架了，什么Laravel, yii之类，这些在刻意模仿着面向对象语言的做法。看到这些框架，然后php本身是个脚本语言，有点勉为其难。特别你如果看下yii，你会发现和.net mvc 惊人的相似。然后php的那些人还说，你们不要老用.net的思想来思考问题，尼玛你们用的这个思想和.net有毛差别？我只能压住心中的怒火，我刚生小孩不久，要养家，不能任性。&lt;/p&gt;
&lt;p&gt;         php最大的逼，在于linux，很多吃饱了撑的c/c++程序员，写了很多巨屌的东西。php只是他们的一个应用层，我就是这么理解的。&lt;/p&gt;
&lt;p&gt;         国内最大php应用，微博，其余我就不知道了，中小型公司，php 貌似他妈的比.net还多，用.net的公司，妈的比php还少，好可悲呀。&lt;/p&gt;
&lt;p&gt;         finally，我还是没忍住，在小领导日夜反复说我慢的情况下，我终于爆发了一句，你行你上。然后没过多久，公司每年了例行淘汰中，就淘汰了我，虽然我在这家公司是比他要老的员工。但是人家就是5年php ,来公司就吃香的很，公司毫不留情的把我给赶走了。想想，很心酸，这家公司起家靠的就是.net，这么多年，赚钱打下江山的也是.net，如今全部切成别的，我这种不是来很多年的员工，被无情赶走。资本家是不管你什么技术的，对于他有利的技术就行。.net，呵呵。&lt;/p&gt;
&lt;p&gt;        因为临近过年了，这时候把我开了，找工作不好找。各公司都管自己的年会去了，无心招人，但是我有小孩，我还要为生计，怎么办？还搞.net？又好像很久没开过宇宙无敌ide vs 了。找php?好像经验又不是那么足。你这时候要养家，要保证有一定收入，但是你初级，社会上公司又可能不会给那么多，好他妈尴尬呀。.net就这死样，市场用的公司不多，即使用的，给的价也不高。但是你这时候去找php，估计更低。怎么办呢？&lt;/p&gt;
&lt;p&gt;        鬼使神差，一个外包的hr找了我，看到我简历上有个js，就叫我去面试了，前端。&lt;/p&gt;
&lt;p&gt;       还他妈面试官打瞌睡，就让我过了。&lt;/p&gt;
&lt;p&gt;       这下开启了我的全职前端生涯。前端现在怎么这么火呢？我原来很看不起前端的，这他妈也叫编程？也叫写代码？不过外包给的工资就是他妈的猛，一下是我做 .net的翻倍。我都怀疑了人生好几天。我在纠结什么？我原来死死的抓着.net不放干什么？&lt;/p&gt;
&lt;p&gt;       前端的逼，在于这几年前端的各大框架迅猛发展，React,Angular,Vue，github 近些年，最多的开源项目就是js。再借着手机端大家比较统一的支持html5 +css3，使得前端需求旺盛。es5语法糖，nodejs，可以结合docker，搞病毒复制般的n个服务器，简直是百花齐放。前端的东西，如果没用那三大框架，组件化的话，会很多重复代码。且css,js,html无法完美做成组件。前端弄了一阵子觉得好像真没太大意思，一天到晚就是和点浏览器打交道，f12一下，定下位，写点css。后端的是Java，屌得很一个，跟他们配合，只感受到Java那群人内心的优越感，酱油感。&lt;/p&gt;
&lt;p&gt;      完了今晚看样子写不完了，未完待续。。。。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 15:40:00 +0000</pubDate>
<dc:creator>精密～顽石</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zlfucku/p/7658961.html</dc:identifier>
</item>
<item>
<title>Nginx平滑升级源码分析 - magicsoar</title>
<link>http://www.cnblogs.com/magicsoar/p/7658939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/magicsoar/p/7658939.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、平滑升级步骤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、重命名之前的sbin/nginx文件，将新的nginx文件放到sbin/目录下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#mv ./sbin/nginx ./sbin/nginx.old&lt;/p&gt;
&lt;p&gt;#cp ~/nginx ./sbin/&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、向正在运行的nginx发送USR2信号启动新的nginx，这个时候新老nginx都会接收请求，看那一个进程能抢到锁，抢到锁的worker进程可以accpet新请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#kill -USR2  `cat nginx.pid`&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、观察新的nginx运行无误后，向旧nginx发信号 停止旧nginx的运行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#kill -QUIT `cat nginx.pid.oldbin`&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1，nginx启动时 设置信号监听函数，监听信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;src/core/nginx.c  &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010185935465-1582523946.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;218&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;368行 ngx_init_signals函数 设置要监听的信号，和信号的处理函数&lt;/p&gt;

&lt;p&gt;src/core/nginx.c  &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010185907449-533394531.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;198&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;291-293行 信号为sig-&amp;gt;signo,对应的处理函数为sig-&amp;gt;handler&lt;/p&gt;

&lt;p&gt;sig的定义如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010190153277-889385732.png&quot; alt=&quot;NewImage&quot; width=&quot;500&quot; height=&quot;600&quot; border=&quot;0&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QUIT和USR2的信号处理函数都为 ngx_signal_handler&lt;/p&gt;
&lt;p&gt;对应的流程图为&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010190346590-1540744687.png&quot; alt=&quot;NewImage&quot; width=&quot;348&quot; height=&quot;550&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、master进程通过sigsuspend挂起在信号监听处&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010190641371-1052523550.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;493&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3，向master进程id发送USR2信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ngx_signal_handler处理USR2信号&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010191332387-594590228.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;372行  设置了ngx_change_binary=1&lt;/p&gt;

&lt;p&gt;master进程接收到信号，从挂起状态恢复，继续执行&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010191602559-2062196315.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;200&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;277行 ngx_exec_new_binary通过fork启动新的nginx bin文件&lt;/p&gt;

&lt;p&gt;src/core/nginx.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010192522777-1043111436.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;244&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;589行 ngx_set_evviroment 设置新nginx bin的环境变量&lt;/p&gt;
&lt;p&gt;640行 ngx_rename_file 通过rename函数将nginx.pid文件重命名为nginx.pid.oldbin&lt;/p&gt;
&lt;p&gt;651行 ngx_execute 启动新的bin文件&lt;/p&gt;
&lt;p&gt;由于nginx老master进程fork出的新nginxmaster进程，他们可以监听同一个端口，所以新nginx和老nginx可以同时监听端口，具体谁执行看哪一个worker子进程抢到了锁，可以accpet新连接 &lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010192148215-284053548.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;92&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010192126684-1456412195.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;282&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;

&lt;p&gt;对应的流程图如下&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012173633043-1993480516.png&quot; alt=&quot;NewImage&quot; width=&quot;252&quot; height=&quot;900&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、向老的nginx进程发送QUIT信号，从容关闭&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;master进程收到QUIT信号后，将ngx_quit置为1&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010193708137-915046564.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;161&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;master进程接收到信号，从挂起状态恢复，继续执行&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010200153934-1801943486.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;330&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;209行 ngx_signal_worket_processes 向worker进程发送 NGX_SHUTDOWN_SIGNAL(QUIT)信号&lt;/p&gt;
&lt;p&gt;215行 ngx_close_socket 主进程关闭监听的socket&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011112706730-506820672.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;206&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;504行 通过kill函数向所有worker进程发送信号&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、worker进程收到NGX_SHUTDOWN_SIGNAL(QUIT)信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011114039465-1665637566.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;237&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;360行 worker进程将ngx_quit置为1&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011130803918-1006922178.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;311&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;worker进程收到信号后从epoll_wait中唤醒从ngx_process_events_and_timers函数中恢复，&lt;/p&gt;
&lt;p&gt;710-714行 发现ngx_quit=1后将ngx_quit恢复为0，ngx_exiting置为1，&lt;/p&gt;
&lt;p&gt;713行 通过ngx_close_listening_sockets关闭处理的socket&lt;/p&gt;
&lt;p&gt;609行 下一次循环发现ngx_exiting=1后，处理队列中的已有事件和超时事件，发现没有要处理的事件了，就通过ngx_worker_process_exit退出worker进程&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011192705012-1422619325.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;430&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1024行 调用各个模块的exit_process方法&lt;/p&gt;
&lt;p&gt;1067行 销毁内存池&lt;/p&gt;
&lt;p&gt;对应的流程图如下&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012172044887-48408022.png&quot; alt=&quot;NewImage&quot; width=&quot;362&quot; height=&quot;600&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;6、子进程退出后，作为父进程的master进程会收到SIGCHLD信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011193446746-89080528.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;259&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;387行 父进程收到SIGCHLD后将ngx_reap置为1，&lt;/p&gt;
&lt;p&gt;437行 发现信号是SIGCHLD后执行ngx_process_get_status函数判断worker子进程是正常退出，还是异常退出&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011193541199-589697227.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;350&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;494-499行 如果发现worker子进程如果是正常退出的，会将exited置为1&lt;/p&gt;

&lt;p&gt;master进程接收到信号，从挂起状态恢复，继续执行&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012160858777-572627924.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;186&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;176行 发现ngx_reap=1后，ngx_reap_children函数判断是否需要重启worker进程&lt;/p&gt;
&lt;p&gt;如果worker是因为收到了quit信号正常退出的，所有worker进程退出时，live=0&lt;/p&gt;
&lt;p&gt;183行 live=0 并且收到了ngx_quit信号  通过ngx_master_process_exit关闭master进程&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012161233918-149682252.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;300&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;619 如果worker至今才是因为意外退出的，并且可以重启，则调用ngx_spawn_process重新启动一个worker子进程&lt;/p&gt;
&lt;p&gt;642 如果有worker进程还在运行则live=1 如果全部的worker子进程都已经退出则live=0&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012161607012-1646781270.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;120&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;656行 ngx_delete_pidfile 删除pid文件&lt;/p&gt;
&lt;p&gt;666行 ngx_close_listening_sockets 关闭监听端口&lt;/p&gt;
&lt;p&gt;685行 销毁内存池&lt;/p&gt;
&lt;p&gt;686行 退出&lt;/p&gt;
&lt;p&gt;对应的流程图如下&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012173545277-1100261090.png&quot; alt=&quot;NewImage&quot; width=&quot;236&quot; height=&quot;1000&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;






&lt;p&gt;PS:推荐一个好朋友的微信公众号，一个每天都在思考或者在思考路上的公众号运营少女~&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012174839730-1002116022.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;326&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 15:33:00 +0000</pubDate>
<dc:creator>magicsoar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/magicsoar/p/7658939.html</dc:identifier>
</item>
<item>
<title>程序员 各种PDF格式电子书--免费网盘资源 - 孤独是1态度</title>
<link>http://www.cnblogs.com/gudu1/p/7658909.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gudu1/p/7658909.html</guid>
<description>&lt;p&gt; &lt;span&gt;&lt;strong&gt;《设计模式之禅(完整高清版)》&lt;/strong&gt;&lt;/span&gt; 链接：http://pan.baidu.com/s/1bo7noMb 密码：5kve&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;span&gt;《重构_改善既有代码的设计》&lt;/span&gt; &lt;/strong&gt;链接：http://pan.baidu.com/s/1miBoWDa 密码：vlbj&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《微服务架构与实践(王磊著)完整版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1kVehbD1 密码：plpz&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《网络爬虫入门到精通》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1i5w1UVb 密码：megy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《图解HTTP》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1dF91xyp 密码：qzhy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《架构探险 从零开始写javaweb框架》&lt;/strong&gt; 链接：https://pan.baidu.com/s/1hsPAiIo 密码：4cnr&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《数据结构与算法 Java版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1nuAWJCP 密码：pvsg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《[JAVA解惑]（美）布洛赫》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mhQ7G6W 密码：h7os&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《[Java语言程序设计-进阶篇(原书第8版)]》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jHLSfMQ 密码：1pvl&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《[深入理解Java虚拟机：JVM高级特性与最佳实践]》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pLqQaJh 密码：8cml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Apache服务器配置与使用工作笔记》&lt;/strong&gt;链接：http://pan.baidu.com/s/1cLIFGa 密码：rc98&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Effective Java 中文第二版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jIgkWx4 密码：zemh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Head First Java 中文高清版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c2KYGKS 密码：6byq&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Head First Servlet JSP(清晰中文版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mi9TcnA 密码：q7lx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《JAVA 8实战》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c1BUXVU 密码：bhic&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java NIO 中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eS1XFOm 密码：trhc&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java RESTful Web Service实战 [韩陆著]》&lt;/strong&gt;链接：http://pan.baidu.com/s/1sl7aXIX 密码：bihj&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java TCP IP Socket编程(原书第2版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1hsqyuZM 密码：1erx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java+JVM》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jIvebps 密码：d54e&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java8函数式编程》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRPyi6Q 密码：zk04&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java编程思想(第4版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1bpIsNCV 密码：u7s6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java程序性能优化  让你的Java程序更快、更稳定》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c75CfG 密码：1fd9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java程序员面试宝典(第2版)(欧立奇,刘洋,段韬)  PDF 扫描版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRLuxpw 密码：vu8n&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术 卷Ⅰ 基础知识(第8版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mi9TcpE 密码：54w0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术 卷Ⅱ 高级特性(第8版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8okmwi 密码：9xsv&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《java基础概念》&lt;/strong&gt;链接：http://pan.baidu.com/s/1i5ahoFF 密码：wzgh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《java基础教程(强烈推荐)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1hrVzDEO 密码：5qow&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Jsp、Tomcat、Sqlserver部分笔记》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRJszwm 密码：59nt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《TCPIP详解卷1》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eS8dyRg 密码：q94v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《TCPIP详解卷2》&lt;/strong&gt;链接：http://pan.baidu.com/s/1gfMU2jh 密码：elsi&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《TCPIP详解卷3》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pLTzHof 密码：5v3v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《UML精粹》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qYVz7yc 密码：x30z&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java常用算法手册 第三版本》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pLp4miJ 密码：j6gk&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术 卷II 高级特性(原书第9版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eSgtcGi 密码：15nh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术(卷I)基础知识(原书第9版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8HW458 密码：3r7k&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java虚拟机并发编程》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRKE0oU 密码：omys&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《阿里双11系统管控调度架构与实践+》&lt;/strong&gt;链接：http://pan.baidu.com/s/1i4NWdZB 密码：zsq1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《疯狂Java讲义(第3版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qYNsdIW 密码：im3y&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《数据结构与算法 Java版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o7Vn1iy 密码：o6nu&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《图解HTTP 完整彩色版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1kVh4Fyf 密码：bz21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《图解数据结构-使用Java》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dE5hxG9 密码：w7ww&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《编程之美-完整版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eS0BPD4 密码：wwvb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《从Paxos到Zookeeper  分布式一致性原理与实践（书签版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8QdUT8 密码：lu41&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《大话数据结构》&lt;/strong&gt;链接：http://pan.baidu.com/s/1miiOFCO 密码：ofsl&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《大型网站系统与JAVA中间件实践（高清版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8mi0K6 密码：r9k5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《计算机程序设计艺术（第二卷）高清中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1hs29DOC 密码：wdg1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《计算机程序设计艺术（第三卷）高清中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dEQMfbr 密码：rl6s&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《计算机程序设计艺术（第一卷）高清中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1nv2z1hf 密码：jsa2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《面向对象设计UML实践》&lt;/strong&gt;链接：http://pan.baidu.com/s/1miMKqH6 密码：whsx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入分析Java  Web技术修订版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c1URLaK 密码：mdkn&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入理解JAVA内存模型》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o7JIkrw 密码：hyq6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入理解Java虚拟机：JVM高级特性与最佳实践（最新第二版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qXAQ8pQ 密码：fy7d&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《实战Java高并发程序设计》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dFm0Gt7 密码：w899&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《淘宝技术这十年，完整最终确认版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eSo0Aiu 密码：tbsd&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring实战(第4版)》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1o8FUBSQ 密码：kh21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;《Spring源码深度解析》&lt;/strong&gt;&lt;/strong&gt; 链接：http://pan.baidu.com/s/1sljuyT3 密码：n860&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;《精通Spring4.X企业应用开发实战》&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;链接：http://pan.baidu.com/s/1geZ53Qr 密码：zmb3&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《精通Spring(清晰书签版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1boBrcVd 密码：9b08&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《亿级流量网站架构核心技术-跟开涛学搭建高可用高并发系统》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRQJYJC 密码：1bqf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《SPRING 实战（第3版）》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1skAO7zZ 密码：i87j&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java EE设计模式：Spring企业级开发最佳实践》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8sTUFg 密码：dx8s&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《spring揭秘(完整)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mhI0ugS 密码：1noy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《SPRING技术内幕：深入解析SPRING架构与设计原理》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mhRTEHU 密码：qf8a&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《SpringBoot揭秘：快速构建微服务体系》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mi65lFE 密码：ueut&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《从零开始学Spring Boot》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qYC2IPe 密码：ntg4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入实践Spring Boot.陈韶健》&lt;/strong&gt;链接：http://pan.baidu.com/s/1skGoivj 密码：xz2m&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring.Boot.in.Action.2015.12》&lt;/strong&gt;链接：http://pan.baidu.com/s/1skIqeeD 密码：kn63&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《spring-boot-reference-guide-zh》&lt;/strong&gt;链接：http://pan.baidu.com/s/1boMMtBL 密码：981n&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring Boot实战 ,丁雪丰 (译者) 》&lt;/strong&gt;链接：http://pan.baidu.com/s/1nvgKI2P 密码：pykt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring Boot Cookbook》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jI5nv3w 密码：xw7q&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Learning+Spring+Boot+-+Greg+L.+Turnquist》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8LunnO 密码：px7v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《JavaEE开发的颠覆者 Spring Boot实战  完整版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jIR8aO2 密码：ndnm&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java 7并发编程实战手册》&lt;/strong&gt;链接：https://pan.baidu.com/s/1mibxf7a 密码：7461&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《JAVA并发编程  核心方法与框架 ,高洪岩著》&lt;/strong&gt;链接：https://pan.baidu.com/s/1kVcfkBP 密码：2i95&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Java并发编程：设计原则与模式（第二版）》&lt;/strong&gt;链接：https://pan.baidu.com/s/1qYBgKVi 密码：6s7o&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《JAVA并发编程实践》&lt;/strong&gt;链接：https://pan.baidu.com/s/1jIvKa5C 密码：bb22&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Java并发编程实战（中文版）》&lt;/strong&gt;链接：https://pan.baidu.com/s/1mikQAQs 密码：afiq&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Java并发编程学习笔记》&lt;/strong&gt;链接：https://pan.baidu.com/s/1dE63q0L 密码：p8uj&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Java多线程编程核心技术_完整版》&lt;/strong&gt;链接：https://pan.baidu.com/s/1c1YpDmg 密码：fell&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Java多线程编程深入详解》&lt;/strong&gt;链接：https://pan.baidu.com/s/1eR5fpxK 密码：vkf3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《java线程》&lt;/strong&gt;链接：https://pan.baidu.com/s/1gfnI6Q3 密码：d150&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Java虚拟机并发编程》&lt;/strong&gt;链接：https://pan.baidu.com/s/1pL6zhUz 密码：t0l4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《七周七并发模型》&lt;/strong&gt;链接：https://pan.baidu.com/s/1i53n9qt 密码：r4bo&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;《Mybatis_3中文用户指南》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1c19niZQ 密码：pauo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《深入浅出MyBatis技术原理与实战》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1hsDzd9U 密码：o89w&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《精通 Hibernate：Java 对象持久化技术详解(第2版)》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1pLqQbbH 密码：09ok&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;《Pro Git 中文版本》&lt;/strong&gt;链接：http://pan.baidu.com/s/1bpjMWvP 密码：hzej&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Git版本控制管理（第2版）》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1jIEGTN4 密码：8yid&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《完全学会GIT GITHUB GIT SERVER的24堂课》&lt;/strong&gt;链接：http://pan.baidu.com/s/1nv5NpHn 密码：t2fz&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;《[Python参考手册(第4版)].（美）比兹利.扫描版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1cJGQRW 密码：h9oh&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《[Python基础教程(第2版)].人民邮电出版社.扫描版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c2GUULM 密码：nejt&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Head First Python（中文版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dFbBvJN 密码：hwu3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《OReilly.Web.Scraping.with.Python.2015.6》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1jHNogXw 密码：7134&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python Cookbook（第3版）中文版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1jIzNGEU 密码：19lh&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python 学习笔记 第二版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1i5P8kQT 密码：v2qu&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《python标准库中文版PDF(带章节书签)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pKCU37H 密码：xh0q&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python高级编程》&lt;/strong&gt;链接：http://pan.baidu.com/s/1bphfezX 密码：dd6i&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python核心编程(第二版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eR3d3ay 密码：oovq&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《python核心编程（第二版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1gfncBWv 密码：4s5g&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python学习手册(第4版) 中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1gfOWr79 密码：hjdr&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python学习手册(第4版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8OIdom 密码：s7et&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python源码剖析》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dFERb5v 密码：gpuv&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Python源码剖析（完整版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1kVikKQF 密码：rtqk&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《深入 Python 3 中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c13NziC 密码：w9v2&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;《啊哈！算法》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1jI5nvE2 密码：nprg&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《数据结构与算法分析_Java语言描述(第2版)》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1mhJMmm8 密码：9lzo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《算法导论(原书第3版) 中文完整版 高清扫描版》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1kVj6E7l 密码：y8fd&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《算法概论》&lt;/strong&gt;链接：http://pan.baidu.com/s/1boMMtOF 密码：v4ds&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《算法基础.打开算法之门》&lt;/strong&gt;链接：http://pan.baidu.com/s/1cfLrem 密码：t4tz&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《算法与数据结构-实用算法基础教程》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c2uAoUW 密码：fk13&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《数据结构与算法分析：C语言描述_原书第2版_高清版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1slkGy3j 密码：8zvy&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;《[MySQL技术内幕：SQL编程].姜承尧.扫描版[电子书》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1nvOKbfN 密码：zudh&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Effective MySQL之SQL语句最优化》&lt;/strong&gt;链接：http://pan.baidu.com/s/1i5gSUCP 密码：ofid&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《MYSQL 5.5从零开始学》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1miwvRT2 密码：axbj&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《MySQL从入门到精通》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1pLsRTKf 密码：c1dg&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《MySQL性能调优与架构设计》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1hrX11OS 密码：x00z&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Sql Cookbook中文版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1pKKwfEF 密码：no7s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《SQL HACKS：100个业界最尖端的技巧和工具》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1cJGQTo 密码：tw7l&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《SQL必知必会》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1dFleMB3 密码：5so8&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《sql两日速成》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1i5QohMl 密码：fzv4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《SQL注入攻击与防御 原书第2版》链接：http://pan.baidu.com/s/1pLic8Td 密码：cn4d&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《深入浅出MySQL数据库开发优化与管理维护》&lt;/strong&gt;链接：http://pan.baidu.com/s/1bpnQKpT 密码：6l4c&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《数据库查询优化器的艺术：原理解析与SQL性能优化》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1bWrS9C 密码：yuv1&lt;/p&gt;



&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;后续还会有更多更新。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 15:27:00 +0000</pubDate>
<dc:creator>孤独是1态度</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gudu1/p/7658909.html</dc:identifier>
</item>
<item>
<title>坑中速记整理! 使用 kotlin 写第一个 ReactNative Android 模块 - iOS122</title>
<link>http://www.cnblogs.com/ios122/p/7658806.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ios122/p/7658806.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/801860/201710/801860-20171012225951387-737789880.png&quot; alt=&quot;preview&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Kotlin 和 Swift, 两大新宠! 借 ReactNative 熟悉下 kotlin 的用法,不料掉坑里面了.昨晚花了大半夜,趁这会儿思路清晰,把涉及到的一些关键信息,迅速整理下.&lt;/p&gt;
&lt;h2 id=&quot;最佳的使用-kotlin-快速开始写android模块的方式&quot;&gt;最佳的使用 Kotlin 快速开始写Android模块的方式&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;react-native init AwesomeProject&lt;/em&gt; 生成的 android 目录,是一个标准的 Android Studio 工程,详见: &lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot; class=&quot;uri&quot;&gt;http://facebook.github.io/react-native/docs/getting-started.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接在 Android Studio 中打开 AwesomeProject/android 目录.&lt;/li&gt;
&lt;li&gt;参考文章 &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-android.html&quot; class=&quot;uri&quot;&gt;http://facebook.github.io/react-native/docs/native-modules-android.html&lt;/a&gt;,先用 java 实现&lt;/li&gt;
&lt;li&gt;顶部菜单 --&amp;gt; code --&amp;gt; Convert Java File to Kotlin File ,自动转换为 kotlin .&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;awesomeproject&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;AnExampleReactPackage&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;fu&quot;&gt;widget&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Toast&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;facebook&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;react&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bridge&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ReactApplicationContext&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;facebook&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;react&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bridge&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ReactContextBaseJavaModule&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;facebook&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;react&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bridge&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ReactMethod&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; java.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HashMap&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by yanfeng on 2017/10/12.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ToastModule&lt;/span&gt;(reactContext: ReactApplicationContext) : &lt;span class=&quot;fu&quot;&gt;ReactContextBaseJavaModule&lt;/span&gt;(reactContext) {

    &lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;(): String {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ToastExample&quot;&lt;/span&gt;
    }

    &lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;getConstants&lt;/span&gt;(): Map&amp;lt;String, Any&amp;gt;? {
        &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; constants = HashMap&amp;lt;String, Any&amp;gt;()
        constants.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(DURATION_SHORT_KEY, Toast.&lt;span class=&quot;fu&quot;&gt;LENGTH_SHORT&lt;/span&gt;)
        constants.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(DURATION_LONG_KEY, Toast.&lt;span class=&quot;fu&quot;&gt;LENGTH_LONG&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; constants
    }

    @ReactMethod
    fun &lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt;(message: String, duration: &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) {
        Toast.&lt;span class=&quot;fu&quot;&gt;makeText&lt;/span&gt;(reactApplicationContext, message, duration).&lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt;()
    }

    companion &lt;span class=&quot;kw&quot;&gt;object&lt;/span&gt; {

        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; DURATION_SHORT_KEY = &lt;span class=&quot;st&quot;&gt;&quot;SHORT&quot;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; DURATION_LONG_KEY = &lt;span class=&quot;st&quot;&gt;&quot;LONG&quot;&lt;/span&gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;一些坑中的经验&quot;&gt;一些坑中的经验&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;如果 ReactNative 初始化慢,可以改用淘宝源,后面的 &lt;em&gt;--verbose&lt;/em&gt; 参数,主要用来辨别是否卡住.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;npm install -g nrm
nrm use taobao
npm install -g react-native-cli --verbose
react-native init AwesomeProject --verboses&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;11.527230590962&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;RN 与已有项目集成的原理是,把已有的 Android 项目复制到 android 文件夹,然后改下配置.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;如果没有已有的运行良好的项目,不要尝试用 Android Studio 直接新建项目,因为 Android Studio 的默认 SDK 版本(25.3.1) 和 ReactNative 的SDK版本(23.0.1) 不一致,所以在根据 RN 文档,改配置,会遇到各种问题.如果非要模拟,建议直接基于 AwesomeProject/android 这个项目改.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.2703862660944&quot;&gt;
&lt;p&gt;改淘宝源,可以加快速度,但是每次安装还是需要 20~40 分钟(取决于网络环境等).如果本地再起一个 sinopia ,这样第二次初始化 RN 时,只需要 3 ~ 5 分钟.详见: &lt;a href=&quot;https://github.com/rlidwka/sinopia&quot; class=&quot;uri&quot;&gt;https://github.com/rlidwka/sinopia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;如果遇到 &lt;em&gt;All com.android.support libraries must use the exact same version specification&lt;/em&gt; 一类的错误,又必须解决的话,可以尝试查看依赖关系,看到底是哪里在冲突:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;命令是:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;./gradlew -q dependencies app:dependencies --configuration compile&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可能的输出:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+--- com.android.support.constraint:constraint-layout:1.0.0-beta2
|    \--- com.android.support.constraint:constraint-layout-solver:1.0.0-beta2
\--- com.facebook.react:react-native:+ -&amp;gt; 0.20.1
     +--- com.google.code.findbugs:jsr305:3.0.0
     +--- com.facebook.stetho:stetho-okhttp:1.2.0
     |    +--- com.google.code.findbugs:jsr305:2.0.1 -&amp;gt; 3.0.0
     |    +--- com.facebook.stetho:stetho:1.2.0
     |    |    +--- com.google.code.findbugs:jsr305:2.0.1 -&amp;gt; 3.0.0
     |    |    \--- commons-cli:commons-cli:1.2
     |    \--- com.squareup.okhttp:okhttp:2.2.0 -&amp;gt; 2.5.0
     |         \--- com.squareup.okio:okio:1.6.0
     +--- com.squareup.okhttp:okhttp-ws:2.5.0
     |    \--- com.squareup.okhttp:okhttp:2.5.0 (*)
     +--- com.facebook.fresco:fresco:0.8.1
     |    +--- com.facebook.fresco:imagepipeline:0.8.1
     |    |    +--- com.nineoldandroids:library:2.4.0
     |    |    +--- com.facebook.fresco:fbcore:0.8.1
     |    |    +--- com.android.support:support-v4:21.0.3 -&amp;gt; 23.0.1
     |    |    |    \--- com.android.support:support-annotations:23.0.1
     |    |    \--- com.parse.bolts:bolts-android:1.1.4
     |    +--- com.facebook.fresco:fbcore:0.8.1
     |    \--- com.facebook.fresco:drawee:0.8.1
     |         +--- com.facebook.fresco:fbcore:0.8.1
     |         \--- com.android.support:support-v4:21.0.3 -&amp;gt; 23.0.1 (*)
     +--- org.webkit:android-jsc:r174650
     +--- com.fasterxml.jackson.core:jackson-core:2.2.3
     +--- com.squareup.okhttp:okhttp:2.5.0 (*)
     +--- com.facebook.fresco:imagepipeline-okhttp:0.8.1
     |    +--- com.squareup.okhttp:okhttp:2.3.0 -&amp;gt; 2.5.0 (*)
     |    +--- com.facebook.fresco:imagepipeline:0.8.1 (*)
     |    \--- com.facebook.fresco:fbcore:0.8.1
     +--- com.squareup.okio:okio:1.6.0
     +--- com.android.support:recyclerview-v7:23.0.1
     |    +--- com.android.support:support-v4:23.0.1 (*)
     |    \--- com.android.support:support-annotations:23.0.1
     +--- com.facebook.stetho:stetho:1.2.0 (*)
     \--- com.android.support:appcompat-v7:23.0.1
          \--- com.android.support:support-v4:23.0.1 (*)

(*) - dependencies omitted (listed previously)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;kotlin,会自动引入库; java,点击提示不存在的类,然后使用 &lt;em&gt;Alt + 回车&lt;/em&gt; 也可以快速引入.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;RN 的文档可能是错的.如果提示方法名总是不对,可以尝试下手动输入,看下提示,可能真的变了.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;执行 &lt;em&gt;react-native run-android&lt;/em&gt; 可能比在 Android Studio 中运行方便;但是第二次执行原生 Android 代码时, Android Studio Run Build 的速度非常快,是更好的选择.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果是真机,可能需要:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;adb reverse tcp:8081 tcp:8081&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;遇到诡异的问题时,可以尝试先: &lt;em&gt;clean build&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;源码参考&quot;&gt;源码参考:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ios122/kotlin-module-sample-for-reactnative&quot; class=&quot;uri&quot;&gt;https://github.com/ios122/kotlin-module-sample-for-reactnative&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;
</description>
<pubDate>Thu, 12 Oct 2017 15:02:00 +0000</pubDate>
<dc:creator>iOS122</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ios122/p/7658806.html</dc:identifier>
</item>
<item>
<title>【DDD】业务建模实践 —— 人关注人 - 倒骑的驴</title>
<link>http://www.cnblogs.com/daoqidelv/p/7657785.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daoqidelv/p/7657785.html</guid>
<description>
&lt;p&gt;　　社区业务领域中，存在‘人关注人’的场景，在这个场景中，关系较为复杂，且均表现在‘人’同一个业务实体上，因此，这个case的建模过程值得思考。本文将就‘人关注人’这个业务case的领域建模进行探讨，欢迎拍砖。&lt;/p&gt;

&lt;p&gt;　　在做‘帖子’模块的建模过程中，遇到了‘查询帖子阅读者是否关注了帖子作者’的case，基于这个case，尝试对‘关注’这个业务领域进行建模。&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-业务建模&quot;&gt;业务建模&lt;/h2&gt;
&lt;p&gt;　　就‘人关注人’来讲，可以将人按照角色分为：关注者（FollowingUser，使用进行时标识行为主动发起者）、被关注者（FollowedUser，使用过去式标识行为被动接受者），FollowingUser可以‘关注’（follows）被关注者，FollowedUser可以‘被关注’（followed）；FollowingUser持有一个‘被关注者‘集合（followedUsers），FollowedUser持有一个’关注者‘集合（followingUsers）。因此可以梳理出如下实体：FollowingUser、FollowedUser，且他们都应当是‘用户’（UserInfo）实体的子类。&lt;/p&gt;
&lt;p&gt;　　常见的需求中，人与人之间的关系可能有如下几种：单粉（FollowingUser follows FollowedUser）、互粉（FollowingUser follows FollowedUser, FollowedUser follows FollowingUser ）、没有关系（不存在关注关系），通常需要判定制定的User和另外一个User之间的关注关系，所以，我们期望FollowingUser 能够判定自己是否关注过给定的User， 这个行为我们把他称为：hasFollowed（UserInfo）；对应的，在FollowedUser 也需要判定自己是否被某个User关注，这个行为我们表示为：hasBeenFollowed（UserInfo）。&lt;/p&gt;
&lt;p&gt;　　我们来考虑一个比较特殊的场景：帖子详情查询场景，需要判定‘帖子当前阅读者是否关注了帖子作者’。在这个场景中，我们尝试把‘帖子阅读者’（PostReader）当做一个FollowingUser ，PostReader继承FollowingUser ；将‘帖子作者’（PostAuthor）当着一个FollowedUser ，PostAuthor继承FollowedUser 。&lt;/p&gt;
&lt;p&gt;　　为了完成判定PostReader和PostAuthor的关注关系，我们将PostAuthor作为一个User传入FollowingUser的hasFollowed（UserInfo）中，但是会发现无法识别出互粉的情况，因为，在这个场景中，我们并不认为PostAuthor是一个FollowingUser，它并不持有’被关注者‘集合（followedUsers），所以无法判定出PostAuthor是否关注过PostReader。&lt;/p&gt;
&lt;p&gt;　　那么我们是不是可以为PostAuthor加上FollowingUser这样一个角色呢？ 重新梳理一遍，发现其实PostAuthor和PostReader也是我们给UserInfo的一对角色，一个用户在’帖子详情查询‘场景，不可能同时拥有PostAuthor和FollowingUser的角色。PostAuthor并不需要知道自己关注了那些人，因此为PostAuthor加上FollowingUser的角色并不合适。&lt;/p&gt;
&lt;p&gt;　　那么是不是可以撇开PostAuthor角色，再单独引入一个FollowingUser呢？按照这个思路，每个FollowingUser都可以将对方作为判定对象使用自己的hasFollowed（UserInfo）完成判定，这样我们为FollowingUser增加了一个行为：判定一个关注者和自己的关系，这个行为我们记为：getFollowRelation(FollowingUser)。&lt;/p&gt;
&lt;p&gt;　　先不论合理性，先尝试去实现之后再做评估。&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-业务模型&quot;&gt;业务模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/849051/201710/849051-20171012193116840-823747298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-示例代码&quot;&gt;示例代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8121f38c-02da-47a3-9142-c01ba9f56d5c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8121f38c-02da-47a3-9142-c01ba9f56d5c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8121f38c-02da-47a3-9142-c01ba9f56d5c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8121f38c-02da-47a3-9142-c01ba9f56d5c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8121f38c-02da-47a3-9142-c01ba9f56d5c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId;
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判定给定用户是否是自己
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; UserInfo 给定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true —— 是本人
     *         false —— 不是本人
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMyself(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo.getUserId() == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
 
    ......
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53af0cb8-d5cd-4c40-a195-0a1ccd899182')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_53af0cb8-d5cd-4c40-a195-0a1ccd899182&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53af0cb8-d5cd-4c40-a195-0a1ccd899182&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('53af0cb8-d5cd-4c40-a195-0a1ccd899182',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53af0cb8-d5cd-4c40-a195-0a1ccd899182&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FollowingUser &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UserInfo {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 我关注的用户 集
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Set&amp;lt;FollowedUser&amp;gt; followedUsers = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;FollowedUser&amp;gt;&lt;span&gt;();
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FollowingUser(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(userId);
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者
     * 如果此人已经关注过指定的用户，则不再重复关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUserId 被关注者userId
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; follow(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; followedUserId) {
        FollowedUser followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FollowedUser(followedUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.follow(followedUser);
    }
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; follow(FollowedUser followedUser) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followedUser)) {
            followedUser.followed(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.add(followedUser);
        }
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人是否关注过指定的User
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
     * 1：自己
     * 2：单粉
     * 4:未关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hasFollowed(UserInfo userInfo) {
        String followState &lt;/span&gt;=&lt;span&gt;  FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(userInfo)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(userInfo)) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人与指定的FollowingUser的关注关系，和hasFollowed不一样的地方在于，该方法可以识别出‘互粉’
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
     * 1：自己
     * 2：单粉
     * 3：互粉
     * 4:未关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFollowRelation(FollowingUser followingUser) {
        String followState &lt;/span&gt;=&lt;span&gt;  FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followingUser)) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(FollowRelationConst.FOLLOW_SIGN_2.equals(followingUser.hasFollowed(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;))) {
                    followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_3;
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略 getter/ setter方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowingUser.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b949893f-2659-4564-93ff-161353c73e0c')&quot;&gt;&lt;img id=&quot;code_img_closed_b949893f-2659-4564-93ff-161353c73e0c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowdUser.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fd9f4382-848b-4c1a-bd17-b06384ec0e7c')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_fd9f4382-848b-4c1a-bd17-b06384ec0e7c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd9f4382-848b-4c1a-bd17-b06384ec0e7c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fd9f4382-848b-4c1a-bd17-b06384ec0e7c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd9f4382-848b-4c1a-bd17-b06384ec0e7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PostReader &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowingUser {
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostReader.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('94f32675-4228-4b0e-9cb0-4255fcf045b9')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_94f32675-4228-4b0e-9cb0-4255fcf045b9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94f32675-4228-4b0e-9cb0-4255fcf045b9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('94f32675-4228-4b0e-9cb0-4255fcf045b9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94f32675-4228-4b0e-9cb0-4255fcf045b9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PostAuthor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowedUser {
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostAuthor.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　编写应用服务层代码，尝试判定PostReader和PostAuthor之间的关注关系，这是否发现现有的模型无法支持，我们需要新建一个临时的FollowingUser传递给PostReader.getFollowRelation()方法，这里看起来非常别扭，一个关注者（postReader这时是一个FollowingUser）怎么会去和另外一个关注者判定相互之间的关注关系呢？不符合业务场景；我们理不清FollowingUser和PostAuthor之间有什么区别，实际上，他们是标识同一个人，但是却被两个实体所表征，这会造成混乱。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('88b0b198-b8c0-43dc-9f92-7e1fd7a94b84')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_88b0b198-b8c0-43dc-9f92-7e1fd7a94b84&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_88b0b198-b8c0-43dc-9f92-7e1fd7a94b84&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('88b0b198-b8c0-43dc-9f92-7e1fd7a94b84',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_88b0b198-b8c0-43dc-9f92-7e1fd7a94b84&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; BaseOutBean queryPostDetails(BaseInBean&amp;lt;QueryPostDetailsInBean&amp;gt; baseInBean) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ......
        postReader.follow(followRepository.queryFollowedUser(post.getPostAuthorUserId(), postReader.getUserId()));
        FollowingUser followingUser &lt;/span&gt;= followRepository.queryFollowingUser(post.getPostAuthorUserId(), postReader.getUserId()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;临时的followingUser让人困惑&lt;/span&gt;
        String followSign = postReader.getFollowRelation(followingUser); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个关注者判定自己和一个关注者之间的关注关系，这个在业务上讲不清楚的，很是别扭。&lt;/span&gt;
&lt;span&gt;        ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostsServiceImpl.java&lt;/span&gt;&lt;/div&gt;


&lt;h2&gt; 业务建模&lt;/h2&gt;
&lt;p&gt;　　鉴于第一次建模尝试中遇到的困扰，分析下来发现：PostAuthor这个人在‘互粉’的场景下持有了双重角色：FollowingUser和FollowedUser，因此导致模型的实现并不符合业务上的理解，哪个诡异的followingUser和postAuthor本身的关系让人不能一下子识别出来。&lt;/p&gt;
&lt;p&gt;　　既然PostAuthor在‘互粉’场景下即是FollowedUser又是FollowingUser，而FollowedUser和FollowingUser都是UserInfo，也就意味者UserInfo是可以将FollowedUser和FollowingUser的行为包含进去的，因此，我们退一步，在‘人关注人’的场景下，不去区分FollowedUser和FollowingUser，统一称之为UserInfo，并将之前的行为全部赋予UserInfo，这样得到的模型和业务场景完全一致，易于理解。&lt;/p&gt;
&lt;p&gt;　　因此，FollowedUser就没有存在的必要了，那么FollowingUser还要不要呢？ 我们先保留，因为它在后面的‘人关注话题’场景中会有用武之地。&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-业务模型.1&quot;&gt;业务模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/849051/201710/849051-20171012194030590-2036715161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bc2f337f-cf78-45f7-a32d-1417e69f4d49')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc2f337f-cf78-45f7-a32d-1417e69f4d49&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc2f337f-cf78-45f7-a32d-1417e69f4d49&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bc2f337f-cf78-45f7-a32d-1417e69f4d49',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc2f337f-cf78-45f7-a32d-1417e69f4d49&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId;
  
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判定给定用户是否是自己
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; UserInfo 给定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true —— 是本人
     *         false —— 不是本人
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMyself(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo.getUserId() == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 被关注者 被 关注者 追随
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followingUserId 关注者userId
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; followed(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; followingUserId) {
        UserInfo followingUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followingUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followed(followingUser);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;NOTE：这里不再调用 followingUser.follow(followedUserId)。避免循环依赖。&lt;/span&gt;
&lt;span&gt;    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 被关注者 被 关注者 追随
     * 如果已经指定的FollowingUser， 则不必再关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; FollowingUser 关注者
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; followed(UserInfo followingUser) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;followingUsers.contains(followingUser)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followingUsers.add(followingUser);
        };     
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者
     * 如果此人已经关注过指定的用户，则不再重复关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUserId 被关注者userId
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; follow(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; followedUserId) {
        UserInfo followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followedUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.follow(followedUser);
    }
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; follow(UserInfo followedUser) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followedUser)) {
            followedUser.followed(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.add(followedUser);
        }
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人是否关注过指定的User
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; boolean
     *  true —— 已经关注了指定的user
     *  false —— 还未关注指定的user，如果指定用户是自己，则也返回false
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasFollowed(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(userInfo)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(userInfo)) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人与指定的FollowingUser的关注关系，和hasFollowed不一样的地方在于，该方法可以识别出‘互粉’
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
     * 1：自己
     * 2：单粉
     * 3：互粉
     * 4:未关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFollowRelation(UserInfo followingUser) {
        String followState &lt;/span&gt;=&lt;span&gt;  FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followingUser)) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;NOTE:这里不能调用followingUser.getFollowRelation(this)，否则进入死循环&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(followingUser.hasFollowed(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)) {
                    followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_3;
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
  
    ......
  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9594199f-686f-4094-ac21-c7cbee4c1e0a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9594199f-686f-4094-ac21-c7cbee4c1e0a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9594199f-686f-4094-ac21-c7cbee4c1e0a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9594199f-686f-4094-ac21-c7cbee4c1e0a',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9594199f-686f-4094-ac21-c7cbee4c1e0a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 粉丝，关注者，具有‘关注者’角色的用户
 * ‘关注者’可以关注话题等，人关注人的逻辑放到了UserInfo中处理。
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; LENGFUPING610
 * @CreateDate 2017年9月6日
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FollowingUser &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UserInfo {
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FollowingUser(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(userId);
    }  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowingUser.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2678269b-64cd-427b-8025-d7674fb8e8c5')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_2678269b-64cd-427b-8025-d7674fb8e8c5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2678269b-64cd-427b-8025-d7674fb8e8c5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2678269b-64cd-427b-8025-d7674fb8e8c5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2678269b-64cd-427b-8025-d7674fb8e8c5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; LENGFUPING610
 * @CreateDate 2017年8月29日
 * 帖子读者
 * 读者通常也是追随者，通常会去关注作者，或者关注话题
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PostReader &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowingUser {
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostReader.java&lt;/span&gt;&lt;/div&gt;


&lt;h2&gt;业务建模&lt;/h2&gt;
&lt;p&gt;　　上述两次建模过程没有考虑‘关注’场景的复杂业务规则，现在我们重头梳理下‘关注’场景的业务规则。从需求上看，需要满足如下业务规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;一个人不能关注自己&lt;/li&gt;
&lt;li&gt;不能重复关注同一个人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　为了第一条业务规则，我们模型中的follow行为需要调用UserInfo的isMyself判定是否本人，如果是本人则抛出异常。&lt;/p&gt;
&lt;p&gt;　　对于第二条业务规则，为了判定出FollowingUser是否已经关注过FollowedUser，理论上我们需要将FollowingUser关注过的FollowedUser都从存储中查询出来，装入到followedUsers，但是如果一个人关注了成千上万个，那么这种做法在性能上是不可取的。退一步我们可以只查询这次判定的两个人之间的关系，这样将结果集限定在1或者o个。同时我们需要在follow(UserInfo followedUser)方法中将此次关注的FollowedUser返回给调用方，这样调用方判定返回值是否为空，从而决定是否做存储操作。FollowedUser的followed行为和FollowingUser.follow()行为类似，不再赘述。&lt;/p&gt;
&lt;h2&gt;业务模型&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　同‘Round-II’中的业务模型&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;示例代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e055cbe1-fb08-432e-acba-30c73a6b7a97')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e055cbe1-fb08-432e-acba-30c73a6b7a97&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e055cbe1-fb08-432e-acba-30c73a6b7a97&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e055cbe1-fb08-432e-acba-30c73a6b7a97',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e055cbe1-fb08-432e-acba-30c73a6b7a97&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
    ......
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者
     * 如果此人已经关注过指定的用户，则不再重复关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUser
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; followedUser 被关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserInfo follow(UserInfo followedUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followedUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followedUser)) {
            followedUser.followed(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.add(followedUser);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followedUser;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 被关注者 被 关注者 追随
     * 如果已经指定的FollowingUser， 则不必再关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; FollowingUser 关注者
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; FollowingUser 关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserInfo followed(UserInfo followingUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(followingUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;followingUsers.contains(followingUser)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followingUsers.add(followingUser);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followingUser;
        };     
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;　　经过上述三次建模迭代，我们得到了较完善的业务模型，但是不能沾沾自喜，当后续开发进入到‘关注’业务领域中的‘人关注人’和‘取消关注’的场景下时，发现上面的模型捉襟见肘了。&lt;/p&gt;


&lt;h2&gt;业务建模&lt;/h2&gt;
&lt;p&gt;　　考虑‘人关注人’的case&lt;span&gt;，我们需要将模型存入到存储介质中，这里的存储介质使用的oracle，在数据模型中，‘人关注人’的关注场景需要包含如下信息项：关注者用户id（following_user_id）、被关注者用户id（followed_user_id）以及可能的其他信息项。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;现有业务模型中，在“关注”场景下，following_user_id是followingUser的userId，对于followed_user_id也能从followingUser.follow(UserInfo followedUser)的返回结果中获取（见上节描述）。那么再考虑一个更深层次的业务需求：“取消关注之后再次关注”，这里涉及到‘取消关注’这个场景的数据建模，对于‘取消关注’可以有两种做法：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;取消关注即将该条关注关系硬删除；&lt;/li&gt;
&lt;li&gt;取消关注不做硬删除，只是给改天关注关系打上删除标记，但是记录还被保留；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　&lt;span&gt;对于与上述两种‘取消关注’，“取消关注之后再次关注”可以有如下几种做法：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;方案一、硬删除的情况下，再次关注直接插入一条新的关注关系；&lt;/li&gt;
&lt;li&gt;方案二、软删除的情况下，插入一条新的关注关系，同时保留旧的被标记为‘软删除’的关注关系；&lt;/li&gt;
&lt;li&gt;方案三、软删除的情况下，修改旧的被标记为‘软删除’的关注关系为正常的关注关系；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;现在我们来评估下三种方案的利弊：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;方案1、优点在于：简洁明了，且符合业务模型，在业务模型中我们可以将‘关注关系’作为一个值对象建模；缺点在于：历史的关注关系会丢失，因为做了硬删除。&lt;/li&gt;
&lt;li&gt;方案2、优点在于业务模型层处理简单；缺点在于：数据模型需要考虑软删除标记的影响，比如在删除标记上建立索引时需要做过滤；&lt;/li&gt;
&lt;li&gt;方案3、优点在于数据模型层较简单；缺点在于：业务模型需要区分出“第一次关注”和‘取消关注后再次关注’两种场景，同时数据模型丢失了关注的历史信息。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;我们再回过来看下，方案1、3丢失掉的关注的历史信息在方案2中被记录到了“关注关系”数据模型中，那么方案2合理吗？ 其实不合理的，一个数据模型承担了两种角色：”关注关系“和”关注历史“。所以我们可以将”关注关系“和”关注历史“分开进行数据建模，那么方案1的缺点就没有了。最终我们得到的最优数据模型为：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
     “关注关系” —— t_follow_relation(following_user_id, followed_user_id, create_time, last_update_time)
&lt;/pre&gt;
&lt;pre readability=&quot;8&quot;&gt;
     “关注历史” —— t_follow_history(following_user_id, followed_user_id, action, create_time, last_update_time)&lt;p&gt;　 回过头来我们再来看看业务模型，上面的业务模型，并没有将“关注关系”单独建模，而是表征在了UserInfo的两个set集合中；实际上，仅仅是表征‘人关注人’的话，业务模型是可以契合上面的最优数据模型的。再往前想一步假如“关注关系”中含有了其他属性呢？比如：关注渠道等，这时候就没法使用UserInfo的两个set属性来表征了。所以我们决定还是对
&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
“关注关系”（UserFollowRelation）单独建模，让UserInfo持有UserFollowRelation的集合。
&lt;/pre&gt;
&lt;h2&gt;业务模型&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/849051/201710/849051-20171012200814152-946540421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;示例代码&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('187635cf-025f-4c62-b1f4-0d3717dc52c9')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_187635cf-025f-4c62-b1f4-0d3717dc52c9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_187635cf-025f-4c62-b1f4-0d3717dc52c9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('187635cf-025f-4c62-b1f4-0d3717dc52c9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_187635cf-025f-4c62-b1f4-0d3717dc52c9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 关注关系基类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; DAOQIDELV
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FollowRelation {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用户ID
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; followingUserId;

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 省略setter/getter&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowRelation.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ed3a6044-06ca-43d4-b36c-6fb16c7306ec')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ed3a6044-06ca-43d4-b36c-6fb16c7306ec&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed3a6044-06ca-43d4-b36c-6fb16c7306ec&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ed3a6044-06ca-43d4-b36c-6fb16c7306ec',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed3a6044-06ca-43d4-b36c-6fb16c7306ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FollowFactory &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Factory {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; UserFollowRelation getUserFollowRelationInstance(UserInfo followingUser, UserInfo followedUser) {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingUser == &lt;span&gt;null&lt;/span&gt; || followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUser.getUserId() ==&lt;span&gt; followingUser.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserFollowRelation(followingUser.getUserId(), followedUser.getUserId());
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowFactory.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53e7d54f-9198-46b4-b913-2363480d9634')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_53e7d54f-9198-46b4-b913-2363480d9634&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53e7d54f-9198-46b4-b913-2363480d9634&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('53e7d54f-9198-46b4-b913-2363480d9634',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53e7d54f-9198-46b4-b913-2363480d9634&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserFollowRelation &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowRelation {
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用户ID
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; followingUserId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注用户ID
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; followedUserId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 是否有效：1-有效，0-无效
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String enabled;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 来源
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String source;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注类型，0：系统默认:1：自主关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String followType;

    

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; prime = 31&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result = 1&lt;span&gt;;
        result &lt;/span&gt;= prime * result + (&lt;span&gt;int&lt;/span&gt;) (followedUserId ^ (followedUserId &amp;gt;&amp;gt;&amp;gt; 32&lt;span&gt;));
        result &lt;/span&gt;= prime * result + (&lt;span&gt;int&lt;/span&gt;) (followingUserId ^ (followingUserId &amp;gt;&amp;gt;&amp;gt; 32&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object obj) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; obj)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (getClass() !=&lt;span&gt; obj.getClass())
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        UserFollowRelation other &lt;/span&gt;=&lt;span&gt; (UserFollowRelation) obj;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUserId !=&lt;span&gt; other.followedUserId)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingUserId !=&lt;span&gt; other.followingUserId)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略setter/getter方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserFollowRelation.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('60ad9aff-2272-4034-88c8-ae8a4dcecb09')&quot; readability=&quot;43.5&quot;&gt;&lt;img id=&quot;code_img_closed_60ad9aff-2272-4034-88c8-ae8a4dcecb09&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_60ad9aff-2272-4034-88c8-ae8a4dcecb09&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('60ad9aff-2272-4034-88c8-ae8a4dcecb09',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_60ad9aff-2272-4034-88c8-ae8a4dcecb09&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * user关注关系集合，关注侧和被关注侧维护的相同的、唯一的关系对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Map&amp;lt;UserFollowRelation, UserFollowRelation&amp;gt; userFollowRelationMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;UserFollowRelation, UserFollowRelation&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判定给定用户是否是自己
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; UserInfo
     *            给定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true —— 是本人 false —— 不是本人
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMyself(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (userInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (userInfo.getUserId() == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者 如果此人已经关注过指定的用户，则不再重复关注
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUserId
     *            被关注者userId
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; followedUser 被关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; UserFollowRelation follow(&lt;span&gt;long&lt;/span&gt; followedUserId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {
        UserInfo followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followedUserId);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.follow(followedUser);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者 如果此人已经关注过指定的用户，则不再重复关注,单向
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUser
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; followedUser 被关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserFollowRelation follow(UserInfo followedUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followedUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }

        UserFollowRelation followingRelationKeyOrInitial &lt;/span&gt;= FollowFactory.getUserFollowRelationInstance(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
                followedUser);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 A关注B&lt;/span&gt;
        UserFollowRelation followingSide = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.get(followingRelationKeyOrInitial);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 B被A关注了&lt;/span&gt;
        UserFollowRelation followedSide =&lt;span&gt; followedUser.userFollowRelationMap.get(followingRelationKeyOrInitial);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关注侧和被关注侧,只需要做一次判断即可(关系的原子性)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (followingSide == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            followingSide &lt;/span&gt;=&lt;span&gt; followingRelationKeyOrInitial;
            followingSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            followingSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);
            followingSide.setalreadyPersistentStatus(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followingRelationKeyOrInitial, followingSide);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同一份关系&lt;/span&gt;
            followedSide =&lt;span&gt; followingSide;
            followedUser.userFollowRelationMap.put(followingRelationKeyOrInitial, followedSide);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (followingSide != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果有记录并且关注状态为未关注，则更改为关注&lt;/span&gt;
            followingSide.setFollowType(followingSide.getFollowType() != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followingSide.setSource(followingSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getSource()
                    : FollowRelationConst.SOURCE_COMMUNITY);
            followingSide.setalreadyPersistentStatus(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followingRelationKeyOrInitial, followingSide);

            followedSide.setFollowType(followedSide.getFollowType() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followedSide.setSource(
                    followedSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getSource() : FollowRelationConst.SOURCE_COMMUNITY);
            followedSide.setalreadyPersistentStatus(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            followedUser.userFollowRelationMap.put(followingRelationKeyOrInitial, followedSide);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1025);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followingSide;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; followed(&lt;span&gt;long&lt;/span&gt; followingUserId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {
        UserInfo followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followingUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followed(followedUser);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; followed(UserInfo followingUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }

        UserFollowRelation followedRelationKeyOrInitial &lt;/span&gt;=&lt;span&gt; FollowFactory.getUserFollowRelationInstance(followingUser,
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 B被A关注&lt;/span&gt;
        UserFollowRelation followedSide =&lt;span&gt; followingUser.userFollowRelationMap.get(followedRelationKeyOrInitial);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 A关注B&lt;/span&gt;
        UserFollowRelation followingSide = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.get(followedRelationKeyOrInitial);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedSide == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            followedSide &lt;/span&gt;=&lt;span&gt; followedRelationKeyOrInitial;
            followedSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            followedSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followedRelationKeyOrInitial, followedSide);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同一份关系&lt;/span&gt;
            followingSide =&lt;span&gt; followedSide;
            followingUser.userFollowRelationMap.put(followedRelationKeyOrInitial, followingSide);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (followedSide != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果有记录并且关注状态为未关注，则更改为关注&lt;/span&gt;
            followedSide.setFollowType(followedSide.getFollowType() != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followedSide.setSource(
                    followedSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getSource() : FollowRelationConst.SOURCE_COMMUNITY);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followedRelationKeyOrInitial, followedSide);

            followingSide.setFollowType(followingSide.getFollowType() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followingSide.setSource(followingSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getSource()
                    : FollowRelationConst.SOURCE_COMMUNITY);
            followingUser.userFollowRelationMap.put(followedRelationKeyOrInitial, followingSide);
        }

    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 取消关注 返回 非null，则需改变数据库enable状态
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUser
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserFollowRelation cancelFollow(UserInfo followedUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followedUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }

        UserFollowRelation cancelRelationKey &lt;/span&gt;= FollowFactory.getUserFollowRelationInstance(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, followedUser);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.关注端取消&lt;/span&gt;
        UserFollowRelation followingSide = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.get(cancelRelationKey);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingSide == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1023);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.被关注端取消&lt;/span&gt;
        UserFollowRelation followedSide =&lt;span&gt; followedUser.userFollowRelationMap.get(cancelRelationKey);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不为空,且已经关注，且状态有效&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (followingSide != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            followingSide.setEnabled(FollowRelationConst.FOLLOW_ENABLED_0);
            followingSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 社区场景&lt;/span&gt;
&lt;span&gt;            followingSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followingSide, followingSide);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不为空,且已经关注，且状态有效&lt;/span&gt;
&lt;span&gt;            followedSide.setEnabled(FollowRelationConst.FOLLOW_ENABLED_0);
            followedSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 社区场景&lt;/span&gt;
&lt;span&gt;            followedSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            followedUser.userFollowRelationMap.put(followedSide, followedSide);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1024);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followingSide;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人是否关注过指定的User,单向关系
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo
     *            指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; boolean true —— 已经关注了指定的user false —— 还未关注指定的user，如果指定用户是自己，则也返回false
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasFollowed(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(userInfo)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            UserFollowRelation FollowingRelation &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap
                    .get(FollowFactory.getUserFollowRelationInstance(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, userInfo));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (FollowingRelation != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人与指定的FollowingUser的关注关系，和hasFollowed不一样的地方在于，该方法可以识别出‘互粉’，双向关系
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo
     *            指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String 1：自己 2：单粉 3：互粉 4:未关注
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFollowRelation(UserInfo followingUser) {
        String followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; AFollowB = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hasFollowed(followingUser);
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; BFollowA = followingUser.hasFollowed(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (AFollowB == &lt;span&gt;true&lt;/span&gt; &amp;amp;&amp;amp; BFollowA == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A关注 B,B也关注A&lt;/span&gt;
                followState =&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_3;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (AFollowB == &lt;span&gt;true&lt;/span&gt; || BFollowA == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ignore setter/getter&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　UserFollowRelation是一个值对象。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;NOTE：&lt;/strong&gt;UserInfo持有UserFollowRelation的表现形式为一个Map，且map的key和value均为同一个UserFollowRelation对象，这样做的目的是为了方便在hasFollowed等场景下，快速地根据（followingUserId和followedUserId）查找到一个UserFollowRelation，如果使用Set也可以实现，但是需要遍历整个Set，性能上有损耗。&lt;/p&gt;

&lt;p&gt;　　从上述建模过程中可以发现，我们最开始从‘查询关注关系’入手建模，得到的简易模型无法满足后续‘人关注人’、‘取消关注’两个场景，导致推翻重来。故，最好从模型的最复杂场景开始建模，而不是最简单场景。&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 14:59:00 +0000</pubDate>
<dc:creator>倒骑的驴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daoqidelv/p/7657785.html</dc:identifier>
</item>
</channel>
</rss>