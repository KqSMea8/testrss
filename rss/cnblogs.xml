<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>c语言数字图像处理（八）：噪声模型及均值滤波器 - GoleBeetle</title>
<link>http://www.cnblogs.com/GoldBeetle/p/9880362.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GoldBeetle/p/9880362.html</guid>
<description>&lt;h2&gt;图像退化/复原过程模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030221950238-1520686594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;高斯噪声&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;PDF（概率密度函数）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030222103687-2089532584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生成高斯随机数序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法可参考&amp;lt;http://www.doc.ic.ac.uk/~wl/papers/07/csur07dt.pdf&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; gaussrand()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; V1, V2, S;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; phase = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; X;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(phase == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; U1 = (&lt;span&gt;double&lt;/span&gt;)rand() /&lt;span&gt; RAND_MAX;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; U2 = (&lt;span&gt;double&lt;/span&gt;)rand() /&lt;span&gt; RAND_MAX;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;             V1 = &lt;span&gt;2&lt;/span&gt; * U1 - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             V2 = &lt;span&gt;2&lt;/span&gt; * U2 - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             S = V1 * V1 + V2 *&lt;span&gt; V2;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             } &lt;span&gt;while&lt;/span&gt;(S &amp;gt;= &lt;span&gt;1&lt;/span&gt; || S == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         X = V1 * sqrt(-&lt;span&gt;2&lt;/span&gt; * log(S) /&lt;span&gt; S);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         X = V2 * sqrt(-&lt;span&gt;2&lt;/span&gt; * log(S) /&lt;span&gt; S);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     phase = &lt;span&gt;1&lt;/span&gt; -&lt;span&gt; phase;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; X * &lt;span&gt;50&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;生成高斯噪声图及直方图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030223149723-929811103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面给一幅图添加高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; add_gaussian_noise(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    srand(time(NULL));
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             out_array[i][j] = in_array[i][j] + (&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)gaussrand();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;原图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030223320122-1299687415.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030223349119-1959139929.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;椒盐噪声&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225357070-886720778.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加椒盐噪声（胡椒噪声和盐粒噪声概率分别为5%)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; add_salt_pepper_noise(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    srand(time(NULL));
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; noise_p;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             noise_p = rand() % &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (noise_p == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; temp = rand() % &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (temp)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                     out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 out_array[i][j] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225604532-6935466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;均值滤波器&lt;/h2&gt;
&lt;h3&gt;算术均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225709352-1270587338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; is_in_array(&lt;span&gt;short&lt;/span&gt; x, &lt;span&gt;short&lt;/span&gt; y, &lt;span&gt;short&lt;/span&gt; height, &lt;span&gt;short&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (x &amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x &amp;lt; width &amp;amp;&amp;amp; y &amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt;&lt;span&gt; height)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * element
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * v0  v1  v2
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * v3  v4  v5
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * v6  v7  v8
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Arithmetic Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 out_array[i][j] +=&lt;span&gt; value[k];
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             out_array[i][j] /= ARRAY_SIZE*&lt;span&gt;ARRAY_SIZE;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;处理高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225856717-1551344922.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;处理椒盐噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225935707-1473044259.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结论：算术平均滤波对于高斯噪声和椒盐噪声都有一定的效果，但是同时会平滑图像&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;几何均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231013185-399950712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Geometric Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; product = &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 product *=&lt;span&gt; value[k];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             product = pow(product, &lt;span&gt;1.0&lt;/span&gt; / &lt;span&gt;9.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             out_array[i][j] = (&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)product;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几何均值滤波器与算术均值滤波器相比，丢失的图像细节更少&lt;/p&gt;
&lt;h3&gt;谐波均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231336830-991646977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Harmonic Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 sum += &lt;span&gt;1.0&lt;/span&gt; /&lt;span&gt; value[k];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             out_array[i][j] = (&lt;span&gt;short&lt;/span&gt;)(&lt;span&gt;9.0&lt;/span&gt; /&lt;span&gt; sum);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;处理高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231431714-1041938807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;处理椒盐噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231845395-131116029.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对盐粒噪声效果较好，不适用于胡椒噪声，善于处理高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;逆谐波均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232344575-1147228269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q为滤波器的阶数，Q为正时，消除胡椒噪声，Q为负时消除盐粒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q=0为算术均值滤波器，Q=-1谐波均值滤波器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Contra-Harmonic Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; Q = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; num = &lt;span&gt;0.0&lt;/span&gt;, den = &lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 num += pow(value[k], Q+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 den +=&lt;span&gt; pow(value[k], Q);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             out_array[i][j] = (&lt;span&gt;short&lt;/span&gt;)(num /&lt;span&gt; den);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Q = 2 消除胡椒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232754984-289998330.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q = -2消除盐粒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232842977-1768946483.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q = -2消除盐粒噪声后的图像使用Q = 2消除胡椒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232954784-368093284.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再来一次&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030233031297-133397177.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;再来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030233054185-1396689091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时椒盐噪声已经基本消除&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 15:33:00 +0000</pubDate>
<dc:creator>GoleBeetle</dc:creator>
<og:description>图像退化/复原过程模型 高斯噪声 PDF（概率密度函数） 生成高斯随机数序列 算法可参考&lt;http://www.doc.ic.ac.uk/~wl/papers/07/csur07dt.pdf&amp;g</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GoldBeetle/p/9880362.html</dc:identifier>
</item>
<item>
<title>翻墙--vpn配置 - 邹柯</title>
<link>http://www.cnblogs.com/zouke1220/p/9877696.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zouke1220/p/9877696.html</guid>
<description>[unable to retrieve full-text content]优惠码填2018 可以右击复制软件连接到linux下用wget下载 (3)开启端接口443和5555,并重启防火墙 方法1:推荐使用 登录腾讯云服务器： 进入证书管理页面:https://console.cloud.tencent.com/ssl 方法2：此方法比较麻烦，不推荐使用 生成csr文件 </description>
<pubDate>Tue, 30 Oct 2018 15:31:00 +0000</pubDate>
<dc:creator>邹柯</dc:creator>
<og:description>图像退化/复原过程模型 高斯噪声 PDF（概率密度函数） 生成高斯随机数序列 算法可参考&lt;http://www.doc.ic.ac.uk/~wl/papers/07/csur07dt.pdf&amp;g</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GoldBeetle/p/9880362.html</dc:identifier>
</item>
<item>
<title>图片上传返回上传链接 - 轩钰儿</title>
<link>http://www.cnblogs.com/xuanyuer/p/9880355.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuanyuer/p/9880355.html</guid>
<description>&lt;pre readability=&quot;22&quot;&gt;
&lt;span&gt;@Value&lt;/span&gt;((&lt;span&gt;&quot;#{prop.uploadHost}&quot;&lt;/span&gt;))&lt;br/&gt;&lt;span&gt;private &lt;/span&gt;String &lt;span&gt;uploadHost&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(value = &lt;span&gt;&quot;/insertImgUrl&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public &lt;/span&gt;ResultData insertImgUrl(HttpServletRequest request, HttpServletResponse response)&lt;br/&gt;{&lt;br/&gt;response.setContentType(&lt;span&gt;&quot;application/json&quot;&lt;/span&gt;);&lt;br/&gt;String rootPath = request.getSession().getServletContext().getRealPath(&lt;span&gt;&quot;/&quot;&lt;/span&gt;);&lt;br/&gt;MultipartHttpServletRequest Murequest =(MultipartHttpServletRequest)request;&lt;br/&gt;Map&amp;lt;String, MultipartFile&amp;gt; files = Murequest.getFileMap();&lt;span&gt;//得到文件map对象&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    // 实例化一个jersey&lt;br/&gt;&lt;/span&gt; Client client = &lt;span&gt;new &lt;/span&gt;Client();&lt;p&gt;&lt;span&gt;for&lt;/span&gt;(MultipartFile pic: files.values()){&lt;br/&gt;String originalFilename = pic.getOriginalFilename();  &lt;span&gt;//原来的文件名&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        //String uploadInfo = Upload.upload(client, pic, request, response, uploadHost, ueditor);&lt;br/&gt;&lt;/span&gt; String[] txt1 = originalFilename.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;.&quot;&lt;/span&gt;);&lt;br/&gt;String txt = txt1[txt1.&lt;span&gt;length &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;if &lt;/span&gt;(StringUtils.&lt;span&gt;isBlank&lt;/span&gt;(originalFilename)) {&lt;br/&gt;&lt;span&gt;continue&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;File tempFile = &lt;span&gt;new &lt;/span&gt;File(&lt;span&gt;ueditor&lt;/span&gt;, originalFilename);&lt;br/&gt;Long ss = System.&lt;span&gt;currentTimeMillis&lt;/span&gt;();&lt;br/&gt;File newfile = &lt;span&gt;new &lt;/span&gt;File(tempFile.getParent() + File.&lt;span&gt;separator &lt;/span&gt;+ ss + &lt;span&gt;&quot;.&quot; &lt;/span&gt;+ txt);&lt;br/&gt;tempFile.renameTo(newfile);&lt;br/&gt;&lt;span&gt;if &lt;/span&gt;(tempFile.exists()) {&lt;br/&gt;&lt;span&gt;//newfile = new File(tempFile.getParent() + File.separator + ss+&quot;.&quot;+txt);&lt;br/&gt;&lt;/span&gt; tempFile.renameTo(newfile);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;if &lt;/span&gt;(!newfile.exists()) {&lt;br/&gt;newfile.getParentFile().mkdirs();&lt;br/&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;newfile.createNewFile();&lt;br/&gt;pic.transferTo(newfile);&lt;br/&gt;&lt;span&gt;//ImageUtil imageUtil = new ImageUtil();&lt;br/&gt;&lt;/span&gt; Integer isUpload=&lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;SftpUtil sftpUtil=&lt;span&gt;new &lt;/span&gt;SftpUtil();&lt;br/&gt;isUpload=sftpUtil.LunboUpload(ss + &lt;span&gt;&quot;.&quot; &lt;/span&gt;+ txt, ss);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(isUpload==&lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;return &lt;/span&gt;ResultData.&lt;span&gt;returnResultData&lt;/span&gt;(ResultData.&lt;span&gt;DATA_FALSE&lt;/span&gt;,&lt;span&gt;&quot;上传失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;} &lt;span&gt;catch &lt;/span&gt;(Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;String uploadInfo=&lt;span&gt;uploadHost&lt;/span&gt;+ss+&lt;span&gt;&quot;.&quot;&lt;/span&gt;+txt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;&quot;&quot;&lt;/span&gt;.equals(uploadInfo))&lt;br/&gt;{&lt;br/&gt;&lt;span&gt;return &lt;/span&gt;ResultData.&lt;span&gt;returnResultData&lt;/span&gt;(ResultData.&lt;span&gt;RESULT_SUCCESS&lt;/span&gt;,&lt;span&gt;&quot;ok&quot;&lt;/span&gt;,uploadInfo);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;else&lt;br/&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;return &lt;/span&gt;ResultData.&lt;span&gt;returnResultData&lt;/span&gt;(ResultData.&lt;span&gt;DATA_FALSE&lt;/span&gt;,&lt;span&gt;&quot;false&quot;&lt;/span&gt;,&lt;span&gt;&quot;上传失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;return &lt;/span&gt;ResultData.&lt;span&gt;returnResultData&lt;/span&gt;(ResultData.&lt;span&gt;DATA_FALSE&lt;/span&gt;,&lt;span&gt;&quot;false&quot;&lt;/span&gt;,&lt;span&gt;&quot;上传失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;public  synchronized &lt;/span&gt;Integer  LunboUpload(String fileName,Long s)&lt;br/&gt;{&lt;br/&gt;ChannelSftp sftp=&lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;try &lt;/span&gt;{&lt;br/&gt;SftpUtil sf = &lt;span&gt;new &lt;/span&gt;SftpUtil();&lt;br/&gt;String host = &lt;span&gt;&lt;strong&gt;ip&lt;/strong&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;int &lt;/span&gt;port = &lt;span&gt;22&lt;/span&gt;;&lt;br/&gt;String username = &lt;span&gt;root&lt;/span&gt;;&lt;br/&gt;String password = &lt;span&gt;Password&lt;/span&gt;;&lt;br/&gt;//String directory = &lt;span&gt;&quot;/data/sftp/mysftp/lunbo/&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//String uploadFile = &quot;/home/ftp/img/&quot;+fileName;&lt;br/&gt;&lt;/span&gt; String uploadFile = &lt;span&gt;&quot;G:/ceshi/image/&quot;&lt;/span&gt;+fileName;&lt;br/&gt;sftp=sf.connect(host, port, username, password);&lt;br/&gt;sf.upload(directory, uploadFile, sftp);&lt;br/&gt;sftp.getSession().disconnect();&lt;br/&gt;sftp.quit();&lt;br/&gt;sftp.disconnect();&lt;span&gt;//关闭&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    //sf.download(directory, downloadFile, saveFile, sftp);&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    //sf.delete(directory, deleteFile, sftp);&lt;br/&gt;&lt;/span&gt; &lt;span&gt;   &lt;/span&gt;&lt;span&gt;return &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;} &lt;span&gt;catch &lt;/span&gt;(Exception e) {&lt;br/&gt;&lt;span&gt;//sftp.getSession().disconnect();&lt;br/&gt;&lt;/span&gt; sftp.quit();&lt;br/&gt;sftp.disconnect();&lt;span&gt;//关闭&lt;br/&gt;&lt;/span&gt; &lt;span&gt;return &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre&gt;
要注意图片服务器使用ftp传输，同时要注意关闭ftp链接，保证最终的图片正常传输，
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;multipartResolver&quot; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultEncoding&quot; &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 30 Oct 2018 15:31:00 +0000</pubDate>
<dc:creator>轩钰儿</dc:creator>
<og:description>@Value((&quot;#{prop.uploadHost}&quot;))private String uploadHost;@RequestMapping(value = &quot;/ins</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuanyuer/p/9880355.html</dc:identifier>
</item>
<item>
<title>菜鸟小玩flux-------------【凤、独影】 - 凤，独影</title>
<link>http://www.cnblogs.com/huyice/p/9880349.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huyice/p/9880349.html</guid>
<description>&lt;p&gt;1，首先安装react大环境（脚手架）：cnpm install create-react-app -g    //淘宝镜像安装&lt;/p&gt;
&lt;p&gt;2，创建项目名称：create-react-app + myflux；//flux ：本人自己定义的项目名称，可随意更改，本文以myflux为例&lt;/p&gt;
&lt;p&gt;　　成功后如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030222343152-403688127.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后cd myflux 到创建的文件夹中安装flux&lt;/p&gt;
&lt;p&gt;　　命令：cnpm install flux --save-dev&lt;/p&gt;
&lt;p&gt;3，安装完成后，将myflux文件夹拖到VSCODE工作区&lt;/p&gt;
&lt;p&gt;　　1&amp;gt;打开src文件夹 此时会有index.css 、app.js 、index.js等等文件夹 ；初步练习将用不着的文件全部删除只保留&lt;/p&gt;
&lt;p&gt;　　index.js和app.js 如右图：&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030223332078-1038810040.png&quot; alt=&quot;&quot; width=&quot;235&quot; height=&quot;317&quot;/&gt;&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;　　2&amp;gt;把index.js和app.js中没用的东西全部删除只保留基本东西&lt;/p&gt;
&lt;p&gt;如图：app.js   &lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030223751008-522779886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图： index.js&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030223905294-289521269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;　　3&amp;gt;在cmd命令行myflux文件夹下 启动项目   命令：npm run start&lt;/p&gt;
&lt;p&gt;　　启动成功后如图：&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030224201832-75887135.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;　　浏览器会自动弹出窗口，也可以打开谷歌浏览器在地址栏输入：localhost：3000，此时因为没写东西，所以打开浏览器显示的也是个白板。如图：&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030224513552-1984284961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt; 　　4&amp;gt;下面在app.js文件上编辑一点东西，让其在浏览器上显示：&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030224858671-2111630879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030225119573-2146077415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上内容为初步使用flux&lt;/p&gt;
&lt;p&gt;---------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt; 4，浅谈flux。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1518700/201810/1518700-20181030225529894-2099992895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　1&amp;gt;解释Flux由4部分组成：&lt;/p&gt;
&lt;p&gt;　　　　(1)、View：视图层；&lt;/p&gt;
&lt;p&gt;　　　　(2)、Action(动作)：View视图发出的消息(比如点击事件)；&lt;/p&gt;
&lt;p&gt;　　　　(3)、Dispatcher( 派发器 ) ：用来接收Action动作、执行回调函数；&lt;/p&gt;
&lt;p&gt;　　　　(4)、Store(数据层)：用来存放应用的状态，一旦发生改动，就提醒View更新页面；&lt;/p&gt;
&lt;p&gt;　　2&amp;gt;flux流程：&lt;/p&gt;
&lt;p&gt; 　　　  （1）、用户访问View&lt;/p&gt;
&lt;p&gt;　　　　（2）、View发送用户的Action&lt;/p&gt;
&lt;p&gt;　　　　（3）、Dispatcher收到Action,要求Store进行相对应的更新&lt;/p&gt;
&lt;p&gt;　　　　（4）、Store更新后，发出一个“onchange”事件&lt;/p&gt;
&lt;p&gt;　　　　（5）、view接受到“onchange”事件后，更新页面&lt;/p&gt;
&lt;p&gt; 　　3&amp;gt;通俗例子：&lt;/p&gt;
&lt;p&gt;　　用户首先操作view视图，发出指示或者说是动作，将动作传递给action，action接收到动作，传递给dispatcher，dispatcher传递给store，最后store更新数据至视图层 更新页面，图片最左侧的action可理解为浏览器刚开启时的信息，传递给dispatcher将页面渲染出来，没有实际作用，可忽略。&lt;/p&gt;
&lt;p&gt;　　举个例子：&lt;/p&gt;
&lt;p&gt;　　比方说view是超市老板，用户前来买东西，首先要问老板有没有货，老板说有货就吩咐服务员（action）去拿货，服务员去找仓库管理员（dispatcher）去仓库（store）取货，取完货后仓库的库存信息会及时的更新到老板（view）那里这个循环。&lt;/p&gt;
&lt;p&gt;　　这个例子有点不恰当的地方是dispatcher不是管理store的，还有就是数据更新到view时候渲染到页面&lt;/p&gt;
&lt;p&gt;5、下面放个用flux简单编写的增删项目的百度云盘地址：&lt;/p&gt;
&lt;p&gt;　　其中包含菜鸟版和公司的标准的用代码 仅供参考&lt;/p&gt;
&lt;p&gt;链接：https://pan.baidu.com/s/15fxJ-fP4ALG9rpM1C1MfRA&lt;br/&gt;提取码：aqlq&lt;/p&gt;
&lt;p&gt; 6、不喜勿喷，谢谢。&lt;/p&gt;

</description>
<pubDate>Tue, 30 Oct 2018 15:29:00 +0000</pubDate>
<dc:creator>凤，独影</dc:creator>
<og:description>1，首先安装react大环境（脚手架）：cnpm install create-react-app -g //淘宝镜像安装 2，创建项目名称：create-react-app + myflux；//f</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huyice/p/9880349.html</dc:identifier>
</item>
<item>
<title>基于Docker搭建Jumpserver堡垒机操作实践 - idaxia</title>
<link>http://www.cnblogs.com/tangqingsong/p/9880248.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tangqingsong/p/9880248.html</guid>
<description>&lt;h2 id=&quot;一背景&quot;&gt;一、背景&lt;/h2&gt;
&lt;p&gt;笔者最近想起此前公司使用过的堡垒机系统，觉得用的很方便，而现在的公司并没有搭建此类系统，想着以后说不定可以用上；而且最近也有点时间，因此来了搭建堡垒机系统的兴趣，在搭建过程中参考了比较多的文档，其中最详细的还是官方文档，地址如下所示：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://docs.jumpserver.org/zh/docs/&quot;&gt;Jumpserver 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;二操作概要&quot;&gt;二、操作概要&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;1. 系统运行
2. 配置入门
3. 测试验证&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三系统运行&quot;&gt;三、系统运行&lt;/h2&gt;
&lt;p&gt;在官方文档中安装堡垒机有很多种方法，这让笔者有些纠结，另外而且在不同系统中安装方法也不一致，不过正在徘徊不定时，发现一种通用的安装方法，便是采用docker进行安装，因此本文中笔者将以docker安装为例&lt;/p&gt;
&lt;h3 id=&quot;下载镜像&quot;&gt;3.1 下载镜像&lt;/h3&gt;
&lt;p&gt;在docker官方镜像库当中并没有收录jumpserver，因此下载镜像命令如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker pull registry.jumpserver.org/public/jumpserver:1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下载过程可能比较慢，笔者大约花费了14分钟才将其下载完成，下载完成后结果如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.0.0: Pulling from public/jumpserver
af4b0a2388c6: Pull complete
aa66a3d10fd2: Pull complete
1d4c6a27f2ac: Pull complete
2490267572de: Pull complete
b00f1599768d: Pull complete
398fc903cdc3: Pull complete
f8490bbfc09a: Pull complete
86d238b365f5: Pull complete
2cd3b1ef59b2: Pull complete
4a21434eeb73: Pull complete
ae8cf3e909e0: Pull complete
7c440776471a: Pull complete
0a5e895f91af: Pull complete
b86672241685: Pull complete
af16a4945f95: Pull complete
0374e723cd6c: Pull complete
e18b86849df9: Pull complete
648aa832cb74: Pull complete
b52364a5c704: Pull complete
Digest: sha256:0f26e439c492ac52cbc1926aa950a59730607c947c79557ab3da51bfc2c7b5d4
Status: Downloaded newer image for registry.jumpserver.org/public/jumpserver:1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行镜像&quot;&gt;3.2 运行镜像&lt;/h3&gt;
&lt;p&gt;下载之后笔者需要将下载下来的容器运行起来，为了防止80端口被宿主机其他进程所占用，因此将容器端口映射到宿主机的8011上，运行命令如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker run --name jms_server -d -p 8011:80 -p 2222:2222 registry.jumpserver.org/public/jumpserver:1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在参数当中因为有加入后台运行参数&lt;code&gt;-d&lt;/code&gt;，容器运行之后终端不会进入容器bash中，而且当命令执行成功之后，docker将会返回容器ID，如果返回信息则可能出现了异常错误，正常返回结果如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;4709a7d85af28bf05a63fb3e42541a41c30edda6668fd54a446cfab006c35b9e&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行检查&quot;&gt;3.3 运行检查&lt;/h3&gt;
&lt;p&gt;容器运行之后，笔者需要对其进行检测确保运行成功，检查方式有两个，首先观察容器是否正常运行，然后是检查堡垒机是否能被浏览器所访问&lt;/p&gt;
&lt;p&gt;首先通过如下命令可以查看当前正在运行的容器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker ps&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果容器正常运行将会出现刚在笔者所运行的堡垒机容器ID，正常返回结果参考如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CONTAINER ID        IMAGE                                             COMMAND               CREATED             STATUS              PORTS                                                   NAMES
4709a7d85af2        registry.jumpserver.org/public/jumpserver:1.0.0   &quot;/opt/start_jms.sh&quot;   8 minutes ago       Up 8 minutes        443/tcp, 0.0.0.0:2222-&amp;gt;2222/tcp, 0.0.0.0:8011-&amp;gt;80/tcp   jms_server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在返回结果当中可以看到之前docker返回的容器ID正处于运行状态，便可以确定容器运行正常，接着笔者还需要通过浏览器来检测是否运行成功，使用浏览器打开如下地址&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://127.0.0.1:8011/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当浏览器出现如下界面时，则基本代表成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四配置入门&quot;&gt;四、配置入门&lt;/h2&gt;
&lt;p&gt;在确定系统正常运行之后，接下来就可以对系统进行一些配置，堡垒机配置比较简单，下面的配置是将是使用堡垒机最为基础的一些配置，配置主要是添加一些资产进行管理，这便需要添加管理用户、系统普通用户、账户授权等操作。&lt;/p&gt;
&lt;h3 id=&quot;登录系统&quot;&gt;4.1 登录系统&lt;/h3&gt;
&lt;p&gt;在前面的检验运行的截图当中可以看到需要登录，而账号和密码笔者并没有在官方文档中所看到，笔者随手一尝试，发现用户名和密码分别是&lt;code&gt;admin&lt;/code&gt;与&lt;code&gt;admin&lt;/code&gt;，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;登录成功之后，进入系统看到的界面如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/3.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;管理用户&quot;&gt;4.2 管理用户&lt;/h3&gt;
&lt;p&gt;接下来笔者需要添加一些资产，添加资产的前提条件是有一个管理用户，这个管理用户是资产的最高权限账户，堡垒机之后会使用此账户来登录并管理资产，和获取一些统计信息，笔者在&lt;code&gt;资产管理&lt;/code&gt;-&amp;gt;&lt;code&gt;管理用户&lt;/code&gt;列表中点击&lt;code&gt;创建系统用户&lt;/code&gt;按钮，便来到了创建管理用户的页面，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/5.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在表单中可以看见必须填写用户名，和认证所用的密码或私钥，按照真实情况去填写，比如笔者的资产最高权限账户是&lt;code&gt;song&lt;/code&gt;，密码&lt;code&gt;123456Ab&lt;/code&gt;,那么就如实填写上去。&lt;/p&gt;
&lt;h3 id=&quot;资产管理&quot;&gt;4.3 资产管理&lt;/h3&gt;
&lt;p&gt;在添加管理用户之后，便可以添加资产了，添加资产也非常的简单，在资产列表点击&lt;code&gt;创建资产&lt;/code&gt;按钮，便来到了添加资产的页面，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/7.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加资产需要填写，资产的IP地址，以及ssh的端口号，以及选择资产的操作系统类型，并且选择用哪一个管理用户&lt;/p&gt;
&lt;h3 id=&quot;系统用户&quot;&gt;4.4 系统用户&lt;/h3&gt;
&lt;p&gt;在资产管理下还有一个系统用户管理，这个系统用户的使用场景是，有时候需要在很多个目标资产中创建一个普通账户，这时候肯定是十分麻烦；此时便可以通过堡垒机上的系统用户管理来创建一个系统用户；然后下发到目标资产中，这样一来就不需要去目标主机一个个登录然后去创建，因此非常方便，添加系统用户如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/6.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建系统用户需输入需要创建的账号，以及选择认证的方式，默认为秘钥方式，也可以将选择框选中去掉，通过密码来认证。&lt;/p&gt;
&lt;h2 id=&quot;五测试验证&quot;&gt;五、测试验证&lt;/h2&gt;
&lt;p&gt;在前面的配置步骤操作完毕后，便可以进行一些常规功能验证，以此来加深对jumpserver系统的了解，这些功能测试点有 资产连接测试、用户授权、Web终端、在线会话、命令记录等功能。&lt;/p&gt;
&lt;h3 id=&quot;连接测试&quot;&gt;5.1 连接测试&lt;/h3&gt;
&lt;p&gt;连接测试的目的是检查资产是否可以被堡垒机所访问，可以在资产列表点击资产名称，便可以进入资产详情页面，右侧有两个按钮，点击&lt;code&gt;刷新&lt;/code&gt;按钮，正确配置的参考效果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/8.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果能看到左侧的硬件信息发生了变更，就代表此前配置的管理用户没有问题，否则会弹出错误提示框；&lt;/p&gt;
&lt;h3 id=&quot;用户授权&quot;&gt;5.2 用户授权&lt;/h3&gt;
&lt;p&gt;当配置资产后，如果想在堡垒机中直接连接终端就还需要给用户授权，授权分为两个步骤，第一步是给web终端账户授权，在&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;终端管理&lt;/code&gt;,如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/9.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二步则是给用户自己本身授权，在&lt;code&gt;授权管理&lt;/code&gt;-&amp;gt;&lt;code&gt;资产权限&lt;/code&gt;-&amp;gt;&lt;code&gt;创建权限规则&lt;/code&gt;中做好相应配置，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/10.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;web终端&quot;&gt;5.3 web终端&lt;/h3&gt;
&lt;p&gt;当给用户授权之后，用户便可以&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;Web终端&lt;/code&gt;中与系统进行交互，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/11.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;在线会话&quot;&gt;5.4 在线会话&lt;/h3&gt;
&lt;p&gt;有些时候想看谁在操作服务器，可以很轻松的通过在线会话功能来查看当前有哪些用户在操作终端，在&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;在线会话&lt;/code&gt;列表中进行查看，如下图所示&lt;br/&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/12.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;命令记录&quot;&gt;5.5 命令记录&lt;/h3&gt;
&lt;p&gt;笔者觉得堡垒机最大的作用之一便是审计，如果想知道某个用户在系统中执行了那些命令，可以很方便的在&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;命令记录&lt;/code&gt;中进行查看，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/13.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;六-图书推荐&quot;&gt;六、 图书推荐&lt;/h2&gt;
&lt;p&gt;如果对笔者的实战文章较为感兴趣，可以关注笔者新书《PHP Web安全开发实战》，现已在各大平台上架销售，封面如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss2/19.png?1&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作者：汤青松&lt;/p&gt;
&lt;p&gt;微信：songboy8888&lt;/p&gt;
&lt;p&gt;日期：2018-10-30&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 15:00:00 +0000</pubDate>
<dc:creator>idaxia</dc:creator>
<og:description>一、背景 笔者最近想起此前公司使用过的堡垒机系统，觉得用的很方便，而现在的公司并没有搭建此类系统，想着以后说不定可以用上；而且最近也有点时间，因此来了搭建堡垒机系统的兴趣，在搭建过程中参考了比较多的文</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tangqingsong/p/9880248.html</dc:identifier>
</item>
<item>
<title>State模式（状态设计模式） - ---dgw博客</title>
<link>http://www.cnblogs.com/dgwblog/p/9880151.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dgwblog/p/9880151.html</guid>
<description>&lt;h4 id=&quot;state&quot;&gt;State？？？&lt;/h4&gt;
&lt;p&gt;State模式中，我们用类来表示状态。以类来表示状态后，我们就能通过切换类来方便地改变对象的状态。当需要增加新的状态时，如何修改代码这个问题也会很明确。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;直接用状态代替硬编码&lt;br/&gt;&lt;strong&gt;依赖于状态的处理&lt;/strong&gt;，来执行具体的操作&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;理清职责&quot;&gt;理清职责&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1160484/201810/1160484-20181030224122587-1486689058.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实现功能：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;·有一个金库
·金库与警报中心相连
·金库里有警铃和正常通话用的电话·金库里有时钟，监视着现在的时间
·白天的时间范围是9：00~16：59，晚上的时间范围是17：00~23：59和0：00~8：59
·金库只能在白天使用
·白天使用金库的话，会在警报中心留下记录
·晚上使用金库的话，会向警报中心发送紧急事态通知
·任何时候都可以使用警铃
·使用警铃的话，会向警报中心发送紧急事态通知
·任何时候都可以使用电话（但晚上只有留言电话）
·白天使用电话的话，会呼叫警报中心
·晚上用电话的话，会呼叫警报中心的留言电话
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;名字=======》》》》》说明&lt;br/&gt;State ||表示金库状态的接口&lt;br/&gt;DayState ||表示“白天”状态的类。它实现了State接口&lt;br/&gt;NightState ||表示“晚上”状态的类。它实现了State接口&lt;br/&gt;Context ||表示管理金库状态，并与警报中心联系的接口&lt;br/&gt;SafeFrame ||实现了Context接口。在它内部持有按钮和画面显示等UI信息&lt;br/&gt;Main || 测试程序行为的类&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用与不使用状态模式对比&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;不使用&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;使用金库时被调用的方法（）{
if（白天）{
向警报中心报告使用记录
]elseif（晚上）{
向警报中心报告紧急事态
警铃响起时被调用的方法（）{
向警报中心报告紧急事态
正常通话时被调用的方法（）{
if（白天）{
呼叫警报中心
}elseif（晚上）{
呼叫警报中心的留言电话
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;表示百天的状态的类{
使用金库时被调用的方法（）{
向警报中心报告使用记录
警铃响起时被调用的方法（）{
向警报中心报告紧急事态
正常通话时被调用的方法（）{
呼叫警报中心
表示晚上的状态的类{
使用金库时被调用的方法（）{
向警报中心报告紧急事态
警铃响起时被调用的方法（）{
向警报中心报告紧急事态
正常通话时被调用的方法（）{
呼叫警报中心的留言电话

- 相关设计模式

◆Singleton模式（第5章）Singleton 模式常常会出现在ConcreteState角色中。在示例程序中，我们就使用了Singleton模式。这是因为在表示状态的类中并没有定义任何实例字段（即表示实例的状态的字段）。
◆Flyweight模式（第20章）在表示状态的类中并没有定义任何实例字段。因此，有时我们可以使用Flyweight模式在多个Context 角色之间共享ConcreteState角色。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;uml&quot;&gt;UML&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1160484/201810/1160484-20181030224137718-1574074703.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;时序图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1160484/201810/1160484-20181030224141274-1741054210.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;DayState \NightState State&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;
public interface State {

    //设置时间
    void doclock(Context context, int hour);

    // 使用金库
    void doUse(Context context);

    // 按下警铃
    void doAlarm(Context context);

    // 正常通话
    void dophone(Context context);

}

public class NightState implements State {

    private NightState() {
    }

    private static NightState singleton = new NightState();

    public static State getInstance() {
        return (State) singleton;
    }

    @Override
    public void doclock(Context context, int hour) {
        if (hour &amp;gt;= 9 &amp;amp;&amp;amp; hour &amp;lt; 17) {
            context.changeState(DayState.getInstance());
        }
    }

    @Override
    public void doUse(Context context) {
        context.recordLog(&quot;使用金库[晚上]&quot;);
    }

    @Override
    public void doAlarm(Context context) {
        context.callSecurityCenter(&quot;按下警铃[晚上]&quot;);
    }

    @Override
    public void dophone(Context context) {
        context.recordLog(&quot;正常通话[晚上]&quot;);
    }

    @Override
    public String toString() {
        return &quot;DayState{晚上}&quot;;
    }

}

public class DayState implements State {

    /**
     * 这里使用单例模式，因为每次改变一次状态都会生成一次实例，非常浪费内存与时间
     */
    private DayState() {
    }

    private static DayState singleton = new DayState();


    public static State getInstance() {
        return singleton;
    }

    @Override
    public void doclock(Context context, int hour) {
        if (hour &amp;lt; 9 || hour &amp;gt;= 17) {
            context.changeState(NightState.getInstance());
        }

    }

    @Override
    public void doUse(Context context) {
        context.recordLog(&quot;使用金库[白天]&quot;);
    }

    @Override
    public void doAlarm(Context context) {
        context.callSecurityCenter(&quot;按下警铃[白天]&quot;);
    }

    @Override
    public void dophone(Context context) {
        context.recordLog(&quot;正常通话[白天]&quot;);
    }

    @Override
    public String toString() {
        return &quot;DayState{白天}&quot;;
    }
}


&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Context 、SateFrame 、MainT&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;···&lt;/p&gt;
&lt;p&gt;public class MainT {&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static void main(String[] args) {
    SateFrame frame = new SateFrame(&quot;Safe Smaple&quot;);

    // 24个小时制
    while (true){
        for (int i = 0; i &amp;lt; 24; i++) {
            frame.setClock(i);
            try {
                Thread.sleep(1000);
            }catch (InterruptedException e){
                e.printStackTrace();
            }

        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public interface Context {&lt;br/&gt;//设置时间&lt;br/&gt;void setClock(int hour);&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 改变状态
void changeState(State state);

// 联系警报中心
void callSecurityCenter(String msg);

// 在警报中心留下记录
void recordLog(String msg);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public class SateFrame extends Frame implements ActionListener,Context {&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 显示时间
private TextField textClock=new TextField(60);
// 显示警报中心的记录
private TextArea textScreen=new TextArea(10,60);
private Button buttonUse=new Button(&quot;使用金库&quot;);
private Button buttonALarm=new Button(&quot;按下警铃&quot;);
private Button buttonPhone=new Button(&quot;正常通话&quot;);
private Button buttonExit=new Button(&quot;退出&quot;);


// 初始状态为白天
private State state=DayState.getInstance();

public SateFrame(String title) throws HeadlessException {
    super(title);
    setBackground(Color.lightGray);
    setLayout(new BorderLayout());

    add(textClock,BorderLayout.NORTH);
    textClock.setEditable(false);

    add(textScreen,BorderLayout.CENTER);
    textScreen.setEditable(false);

    Panel panel = new Panel();
    panel.add(buttonUse);
    panel.add(buttonALarm);
    panel.add(buttonPhone);
    panel.add(buttonExit);

    add(panel,BorderLayout.SOUTH);
    pack();
    show();
    buttonUse.addActionListener(this);
    buttonALarm.addActionListener(this);
    buttonPhone.addActionListener(this);
    buttonExit.addActionListener(this);
}

/**
 * 可以看出这里的操作就简化很多了:
 * 基本只有业务逻辑代码：
 * 判断状态相关的代码可以直接由相关的状态代码实现，
 * 即为由类的状态代替了if else代码
 */

@Override
public void actionPerformed(ActionEvent e) {
    if(e.getSource()==buttonUse){
        state.doUse(this);
    }else if(e.getSource()==buttonALarm){
        state.doAlarm(this);
    }else if(e.getSource()==buttonPhone){
        state.dophone(this);
    }else if(e.getSource()==buttonExit){
        System.exit(0);
    }else{
        System.out.println(&quot;?&quot;);
    }
}

@Override
public void setClock(int hour) {
    String clockstring=&quot;现在时间是:&quot;;
    if(hour&amp;lt;10){
        clockstring+=&quot;0&quot;+hour+&quot;:00&quot;;
    }else{
        clockstring+=hour+&quot;:00&quot;;
    }
    System.out.println(clockstring);
    textClock.setText(clockstring);
    state.doclock(this,hour);
}

@Override
public void changeState(State state) {
    System.out.println(&quot;从&quot;+this.state+&quot;状态变为了&quot;+state+&quot;状态。&quot;);
    this.state=state;
}

@Override
public void callSecurityCenter(String msg) {
    textScreen.append(&quot;调用---&quot;+msg+&quot;\n&quot;);
}

@Override
public void recordLog(String msg) {
    textScreen.append(&quot;记录---&quot;+msg+&quot;\n&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;···&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:42:00 +0000</pubDate>
<dc:creator>---dgw博客</dc:creator>
<og:description>State？？？ State模式中，我们用类来表示状态。以类来表示状态后，我们就能通过切换类来方便地改变对象的状态。当需要增加新的状态时，如何修改代码这个问题也会很明确。 直接用状态代替硬编码 依赖于</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dgwblog/p/9880151.html</dc:identifier>
</item>
<item>
<title>sublime - PackageDev自定义语法高亮规则 - JeromeLong</title>
<link>http://www.cnblogs.com/JeromeLong/p/9880000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JeromeLong/p/9880000.html</guid>
<description>&lt;p&gt;这几天为sublime-syntax的语法简直伤透了脑筋，网上能找到的教程都非常浅显，而官方英文文档的一时半会看不懂，中文文档翻译又实在糟心，纠结到最后还是下决心将英文文档整个看了一遍，并翻译成了我能看懂的文字。就以此作为我的第一篇正式博客吧！&lt;/p&gt;
&lt;h3 id=&quot;使用步骤&quot;&gt;使用步骤&lt;/h3&gt;
&lt;h4 id=&quot;安装packagedev插件&quot;&gt;1.安装PackageDev插件&lt;/h4&gt;
&lt;h4 id=&quot;新建语法文件&quot;&gt;2.新建语法文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Tools | Packages | Package Development | New Syntax Definition&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;定义语法高亮规则&quot;&gt;3.定义语法高亮规则&lt;/h4&gt;
&lt;p&gt;见后文。&lt;/p&gt;
&lt;h4 id=&quot;保存文件&quot;&gt;4.保存文件&lt;/h4&gt;
&lt;p&gt;保存完点击 &lt;code&gt;Tools | Build System | Convert to&lt;/code&gt; 编译。&lt;br/&gt;(感觉好像可以不用这一步，直接保存在user文件夹下就行，因为新版本已支持.sublime-syntax后缀文件。当然我也没试过，只是猜想。)&lt;/p&gt;
&lt;h4 id=&quot;修改语法文件&quot;&gt;5.修改语法文件&lt;/h4&gt;
&lt;p&gt;修改并保存可直接产生效果，不用等状态栏100%。但最终要等100%才能退出sublime，以后会自动加载。&lt;/p&gt;
&lt;h3 id=&quot;语法规则&quot;&gt;语法规则&lt;/h3&gt;

&lt;pre&gt;
&lt;code&gt;name                -&amp;gt;  语法名称。可选，如果不写，将从文件名派生
file_extensions     -&amp;gt;  此语法应使用的文件扩展名
first_line_match    -&amp;gt;  没有可识别的扩展名时，将对文件第一行进行匹配识别
scope               -&amp;gt;  分配给文件中所有文本的默认scope
hidden              -&amp;gt;  隐藏的语法定义，不会显示在菜单中，但仍可以通过插件分配&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;contexts&quot;&gt;Contexts&lt;/h4&gt;
&lt;p&gt;Contexts中通常有多种匹配文本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+alt+shift+p -&amp;gt; 查看当前文本所使用的scope&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当内容能匹配多个context时，使用最左边的一个；当多种context在同一位置生效时，使用先定义的一个。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;push        -&amp;gt;  使用push入栈，将文本匹配切换到另一种context中，
            =&amp;gt;  剩下的将不再使用当前context，直到使用pop从栈中弹出
meta_scope  -&amp;gt;  为当前栈context的所有文本分配scope
pop         -&amp;gt;  从栈中弹出，继续使用之前的scope
main        -&amp;gt;  每个语法必须定义一个main context, 它应用于文本最开始的位置.&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;meta&quot;&gt;Meta&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;meta_scope              -&amp;gt;  为当前栈context的所有文本分配scope, 包括触发push和pop的文本
meta_content_scope      -&amp;gt;  同上,但是不应用于触发push和pop的文本
meta_include_prototype  -&amp;gt;  false, 阻止当前文本自动应用prototype匹配.
clear_scopes            -&amp;gt;  移除当前栈中应用的scope，可以是整数或true. 
                        =&amp;gt;  应用于meta_scope和meta_content_scope之前. 
                        =&amp;gt;  通常仅在将一种语法嵌入另一种语法时使用。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;meta 必须列在任何match或include之前。&lt;/p&gt;
&lt;h4 id=&quot;match&quot;&gt;Match&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;match               -&amp;gt;  用正则表达式来匹配文本。一次只针对一行文本匹配
                    =&amp;gt;  可以不使用'',但当正则中有# : - { [ 或 &amp;gt; 时必须用引号
scope               -&amp;gt;  分配给匹配文本的着色类型
captures            -&amp;gt;  group数字对scope的映射，将匹配的内容按gruop分别着色
push                -&amp;gt;  推入堆栈的context，可以是context名及其列表，或者内联的匿名context
pop                 -&amp;gt;  弹出堆栈中的当前context。此键唯一可接受的值是true
set                 -&amp;gt;  类似push，但先退出当前context，然后将给定的context推送到栈中
embed               -&amp;gt;  此键接受context名，类似push，但当escape时弹出所有嵌套的context。
                    =&amp;gt;  是将一种语法嵌入另一种语法的理想工具
    escape              -&amp;gt;  与embed配套使用，用于退出嵌入的context
                        =&amp;gt;  此内的所有反向引用与match中的group关联
    embed_scope         -&amp;gt;  为escape前match的所有文本分配scope
    escape_capture      -&amp;gt;  escape中group数字对scope的映射，0表示所有匹配文本&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;push, pop, set 和 embed互斥。&lt;/p&gt;
&lt;h4 id=&quot;include&quot;&gt;Include&lt;/h4&gt;
&lt;p&gt;用于将一个context的内容包含在另一个context中。&lt;/p&gt;
&lt;p&gt;例如注释，可以使用include将其包含在内，而不用将它的内容复制到每个context中。&lt;/p&gt;
&lt;p&gt;include的内容会被插入到当前位置，仍然可以通过调整插入位置来指定先后顺序。&lt;/p&gt;
&lt;p&gt;include的内容中定义的meta语句会被忽略。&lt;/p&gt;
&lt;h4 id=&quot;prototype&quot;&gt;prototype&lt;/h4&gt;
&lt;p&gt;对于诸如注释之类的元素，经常会用include来使它们在每个context中自动插入，但每次都写include太过繁琐。&lt;/p&gt;
&lt;p&gt;可以使用prototype来完成此操作，它自动将内容插入到每个context的顶部，除非在context顶部用&lt;code&gt;meta_include_prototype: false&lt;/code&gt;用标明。&lt;/p&gt;
&lt;h4 id=&quot;including-other-files&quot;&gt;Including Other Files&lt;/h4&gt;
&lt;p&gt;Sublime Syntax 支持一个语法嵌套另一个语法。&lt;br/&gt;例如HTML嵌套Javascript。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;main:
  - match: &amp;lt;script&amp;gt;
    push: Packages/JavaScript/JavaScript.sublime-syntax
    with_prototype:
      - match: (?=&amp;lt;/script&amp;gt;)
        pop: true

with_prototype      -&amp;gt;   类似prototype, 将匹配应用于上面引入的所有context中。 
                    =&amp;gt;   但是它会忽略meta_include_prototype设置。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处&lt;code&gt;(?=&amp;lt;/script&amp;gt;)&lt;/code&gt;，当匹配到上面的内容后跟&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;时将JS从栈中弹出，并按原HTML规则匹配&lt;/p&gt;
&lt;p&gt;虽然.sublime-syntax 和.tmLanguage语法都支持，但是在此不能混用。&lt;/p&gt;
&lt;p&gt;例2：HTML模板语言的实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scope: text.jinja
contexts:
  main:
    - match: &quot;&quot;
      push: &quot;Packages/HTML/HTML.sublime-syntax&quot;
      with_prototype:
        - match: &quot;{{&quot;
          push: expr

  expr:
    - match: &quot;}}&quot;
      pop: true
    - match: \b(if|else)\b
      scope: keyword.control&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与HTML中嵌入JavaScript不同的是，模板语言倾向于从内到外操作：默认使用HTML，只有某些特殊语句转义为模板语言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match: &quot;&quot;&lt;/code&gt; 默认匹配所有的文本，通过with_prototype语句，当遇到 &lt;code&gt;{{ ... }}&lt;/code&gt; 时使用新的匹配.&lt;/p&gt;
&lt;h4 id=&quot;variables&quot;&gt;Variables&lt;/h4&gt;
&lt;p&gt;几个正则表达式中有部分完全相同的情况并不少见，为避免重复，可以使用变量代替。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
contexts:
  main:
    - match: '\b{{ident}}\b'
      scope: keyword.control&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;变量必须在.sublime-syntax文件顶层定义，并通过&lt;code&gt;{{varname}}&lt;/code&gt;在正则表达式中引用。&lt;/p&gt;
&lt;p&gt;Variables may themselves include other variables. Note that any text that doesn't match {{[A-Za-z0-9_]+}} won't be considered as a variable, so regexes can still include literal {{ characers, for example.&lt;/p&gt;
&lt;h3 id=&quot;实例&quot;&gt;实例&lt;/h3&gt;
&lt;h4 id=&quot;嵌套循环匹配&quot;&gt;嵌套循环匹配&lt;/h4&gt;
&lt;p&gt;例：括号自动匹配, 高亮显示单独的闭括号&lt;code&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;contexts:
  main:
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.illegal.stray-bracket-end

  brackets:
    - match: \)
      pop: true
    - include: main&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;高级栈的使用&quot;&gt;高级栈的使用&lt;/h4&gt;
&lt;p&gt;例：匹配typedef的两种定义&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;typedef int coordinate_t;

typedef struct
{
    int x;
    int y;
} point_t;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;匹配代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;main:
  - match: \btypedef\b
    scope: keyword.control.c
    set: [typedef_after_typename, typename]

typename:
  - match: \bstruct\b
    set:
      - match: &quot;{&quot;
        set:
          - match: &quot;}&quot;
            pop: true
  - match: \b[A-Za-z_][A-Za-z_0-9]*\b
    pop: true

typedef_after_typename:
  - match: \b[A-Za-z_][A-Za-z_0-9]*\b
    scope: entity.name.type
    pop: true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;main中使用匹配将两个context推入堆栈，最右边的处于栈的最顶层，先匹配，当最右边弹出后，才开始匹配左边的。&lt;/p&gt;
&lt;p&gt;为了简洁起见，typename中使用了context的匿名写法。&lt;/p&gt;
&lt;h4 id=&quot;对正则表达式中group的引用&quot;&gt;对正则表达式中group的引用&lt;/h4&gt;
&lt;p&gt;例：PHP与 Heredocs语法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;contexts:
  main:
    - match: &amp;lt;&amp;lt;&amp;lt;([A-Za-z][A-Za-z0-9_]*)
      push: heredoc

  heredoc:
    - meta_scope: string.unquoted.heredoc
    - match: ^\1;
        pop: true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处使用了 &lt;code&gt;\1&lt;/code&gt; 符号代指之前匹配的group&lt;/p&gt;
&lt;h4 id=&quot;语法测试&quot;&gt;语法测试&lt;/h4&gt;
&lt;p&gt;可以定义一个语法测试文本来自动检测，而不需要手动通过&lt;code&gt;show_scope_name&lt;/code&gt;命令检测&lt;br/&gt;具体见官方文档。&lt;/p&gt;
&lt;h4 id=&quot;关于scope的语法容日后再行研究&quot;&gt;关于scope的语法容日后再行研究&lt;/h4&gt;
&lt;h3 id=&quot;引用&quot;&gt;引用:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sublimetext.info/en/latest/reference/syntaxdefs.html&quot;&gt;非官方文档（推荐）&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.sublimetext.com/docs/3/syntax.html&quot;&gt;官方文档&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://cache.baiducontent.com/c?m=9d78d513d9d441a84fece4355e498971192583743da7c71508c3923893735b30506695ac26520704a5d27d1716af3f4bea812172361420c6da9fdf5dddcac86e69ca3035000b873205d368b8cb3732c050d51facb81897adf04584afa29298040d910c526d8180cd0d4a52dd6e80033194b1983844024faded4133a208363e9f5241a14788a1793241d2bcca5d3cd42aa77610e7f573ef6006f253fa10416202e20da609223b2da50a62e8444a45d5bb03bc752e0674fc0ea4b9b6e7b755da81bb7085fbd6ee64c926b58ffdf90618360da4&amp;amp;p=8b2a971389df04ff57e69f646151&amp;amp;newp=8f71d116d9c15df613bd9b75065092695d0fc20e3ddcc44324b9d71fd325001c1b69e7bf24251a02d4c17a6005a44259eff43078341766dada9fca458ae7c43476c3&amp;amp;user=baidu&amp;amp;fm=sc&amp;amp;query=%25YAML+1.2+---+%23+See+http://www.sublimetext.com/docs/3/syntax.html&amp;amp;qid=8b1443cf000725e3&amp;amp;p1=13&quot;&gt;中文版百度快照&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:32:00 +0000</pubDate>
<dc:creator>JeromeLong</dc:creator>
<og:description>sublime - PackageDev自定义语法高亮规则</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JeromeLong/p/9880000.html</dc:identifier>
</item>
<item>
<title>AtCoder Tenka1 Programmer Beginner Contest 解题报告 - henry_y</title>
<link>http://www.cnblogs.com/henry-1202/p/9879994.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henry-1202/p/9879994.html</guid>
<description>&lt;p&gt;赛时写了ABC，D实在没啥思路，然后C又难调...然后就从写完AB时的32名掉到了150+名&lt;/p&gt;
&lt;p&gt;T_T&lt;/p&gt;
&lt;p&gt;码力不够，思维不行，我还是AFO吧&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tenka1-2018-beginner.contest.atcoder.jp/&quot; target=&quot;_blank&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A - Measure&lt;/h2&gt;
&lt;p&gt;sb模拟，奇数串倒着输出偶数串正着输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d56c8b3a-4fbe-4869-b1e9-5f29efc610d0')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_d56c8b3a-4fbe-4869-b1e9-5f29efc610d0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d56c8b3a-4fbe-4869-b1e9-5f29efc610d0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d56c8b3a-4fbe-4869-b1e9-5f29efc610d0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d56c8b3a-4fbe-4869-b1e9-5f29efc610d0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {
    
    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010

&lt;span&gt;char&lt;/span&gt;&lt;span&gt; s[ N ] ;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    scanf( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , s + &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len = strlen( s+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( len == &lt;span&gt;2&lt;/span&gt; ) puts( s + &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = len ; i ; i --&lt;span&gt; ) putchar( s[ i ] ) ;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;B - Exchange&lt;/h2&gt;
&lt;p&gt;还是模拟...按着题意的要求来就好，奇数一种情况偶数一种情况&lt;/p&gt;
&lt;p&gt;然后一边$+\frac{1}{2}$，一边$-\frac{1}{2}$就好&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('271a67be-57bf-464e-9ce9-98561f1e1530')&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_271a67be-57bf-464e-9ce9-98561f1e1530&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_271a67be-57bf-464e-9ce9-98561f1e1530&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('271a67be-57bf-464e-9ce9-98561f1e1530',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_271a67be-57bf-464e-9ce9-98561f1e1530&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {
    
    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010
&lt;span&gt;int&lt;/span&gt; a[ &lt;span&gt;3&lt;/span&gt;&lt;span&gt; ] , k ;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    in2( a[ &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; ] , a[ &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ] ) ; in1( k ) ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt;= k ; i ++&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( a[ i % &lt;span&gt;2&lt;/span&gt; ] % &lt;span&gt;2&lt;/span&gt; ) a[ i % &lt;span&gt;2&lt;/span&gt; ] --&lt;span&gt; ;
        a[ ( i &lt;/span&gt;% &lt;span&gt;2&lt;/span&gt; ) ^ &lt;span&gt;1&lt;/span&gt; ] += a[ i % &lt;span&gt;2&lt;/span&gt; ] / &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ;
        a[ i &lt;/span&gt;% &lt;span&gt;2&lt;/span&gt; ] -= a[ i % &lt;span&gt;2&lt;/span&gt; ] / &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ;
    }
    &lt;/span&gt;&lt;span&gt;out&lt;/span&gt;( a[ &lt;span&gt;1&lt;/span&gt; ] ) , putchar(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;) , outn( a[ &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ] ) ; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;C - Align&lt;/h2&gt;
&lt;p&gt;很恶心的分类讨论&lt;/p&gt;
&lt;p&gt;首先要知道一个结论，最中间的数一定是最大或者最小的，然后我们可以在旁边依次填入最大/次大/最小/次小的数&lt;/p&gt;
&lt;p&gt;对串的奇偶分开讨论（取mid的不同）&lt;/p&gt;
&lt;p&gt;然后对于中间填最大还是填最小也要分开讨论&lt;/p&gt;
&lt;p&gt;然后综合几种情况取个最优就行&lt;/p&gt;
&lt;p&gt;写的有点长，实际上应该不用这么多代码的QAQ&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('236f2e0e-5549-4756-a96f-68cf846a5419')&quot; readability=&quot;49&quot;&gt;&lt;img id=&quot;code_img_closed_236f2e0e-5549-4756-a96f-68cf846a5419&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_236f2e0e-5549-4756-a96f-68cf846a5419&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('236f2e0e-5549-4756-a96f-68cf846a5419',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_236f2e0e-5549-4756-a96f-68cf846a5419&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {
    
    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n ;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; b[ N ] ;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; a[ N ] ;
ll ans &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    in1( n ) ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++&lt;span&gt; ) in1( a[ i ] ) ;
    sort( a&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt; , a+n+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; l = &lt;span&gt;1&lt;/span&gt; , r = n , mid = ( l + r ) &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ; 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( n % &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ) {
        b[ mid ] &lt;/span&gt;= a[ r --&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ mid + mid - i ] = a[ l ++&lt;span&gt; ] ;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ mid + mid - i ] = a[ r --&lt;span&gt; ] ;
        }
        ll sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) sum += abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
        ll t &lt;/span&gt;=&lt;span&gt; sum ;
        l &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;  , r =&lt;span&gt; n ;
        b[ mid ] &lt;/span&gt;= a[ l ++&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ mid + mid - i ] = a[ l ++&lt;span&gt; ] ;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ mid + mid - i ] = a[ r --&lt;span&gt; ] ;
        }
        sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) sum += abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
        printf( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; , max( t , sum ) ) ;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    }
    b[ mid ] &lt;/span&gt;= a[ r --&lt;span&gt; ] ;
    b[ mid &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt; ] = a[ l ++&lt;span&gt; ] ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ r --&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ l ++&lt;span&gt; ] ;
    }
    ll sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , t = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++&lt;span&gt; ) {
        sum &lt;/span&gt;+= abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
    }
    t &lt;/span&gt;=&lt;span&gt; sum ;
    l &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; , r =&lt;span&gt; n ;
    b[ mid &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt; ] = a[ r --&lt;span&gt; ] ;
    b[ mid ] &lt;/span&gt;= a[ l ++&lt;span&gt; ] ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ r --&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ l ++&lt;span&gt; ] ;
    }
    sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++&lt;span&gt; ) {
        sum &lt;/span&gt;+= abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
    }
    printf( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; , max( sum , t ) ) ; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;D - Crossing&lt;/h2&gt;
&lt;p&gt;写这题之前一定要先读懂题意&lt;/p&gt;
&lt;p&gt;我比赛时一直读错题意，到结束时脑子里想的还是错误的题意....然后就炸了&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;令k为所选子集的数量。&lt;/p&gt;
&lt;p&gt;任何两个子集的交集大小为1，并且为1,2，...，N中的任何一个元素也使用了两次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于选出来的子集的限制就是这样的&lt;/p&gt;
&lt;p&gt;我们不妨把这些子集抽象成点，交集抽象成边，于是$1-n$这些元素就是边的种类&lt;/p&gt;
&lt;p&gt;那么不难看出整个图有$\frac{k(k-1)}{2}$条边，并且边的数目要等于n&lt;/p&gt;
&lt;p&gt;于是可以枚举出来这个k先，qzz大佬好像推了一个式子$O(1)$求出了这个k，不过我数学比较菜就直接枚举了T_T&lt;/p&gt;
&lt;p&gt;然后如果这个k枚举不出来就说明无解（一个比较玄学的地方，我从1枚举到n来判会WA掉第一个点，其他都没问题，然后从1枚举到500就没问题，不知道是怎么回事）&lt;/p&gt;
&lt;p&gt;然后来连边&lt;/p&gt;
&lt;p&gt;因为每个元素要沟通两个子集&lt;/p&gt;
&lt;p&gt;所以类似于完全图那样连边就好&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt; k ; i ++&lt;span&gt; ) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt; ; j &amp;lt; k ; j ++&lt;span&gt; ) {
        x &lt;/span&gt;++&lt;span&gt; ;
        s[ i ].push_back( x ) ;
        s[ j ].push_back( x ) ;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就没了&lt;/p&gt;
&lt;p&gt;所以说这题的主要难度在于读懂题意T_T&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5f6a078a-f64b-4091-af25-f76b5706c369')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_5f6a078a-f64b-4091-af25-f76b5706c369&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5f6a078a-f64b-4091-af25-f76b5706c369&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5f6a078a-f64b-4091-af25-f76b5706c369',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5f6a078a-f64b-4091-af25-f76b5706c369&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; out_(a) printf( &quot; %d&quot; , a )
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {

    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n , k ;

vector&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;s[N]; 

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    in1( n ) ;
    k &lt;/span&gt;= -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt; &lt;span&gt;500&lt;/span&gt; ; i ++&lt;span&gt; ) 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( i * ( i - &lt;span&gt;1&lt;/span&gt; ) / &lt;span&gt;2&lt;/span&gt; == n ) { k = i ; &lt;span&gt;break&lt;/span&gt;&lt;span&gt; ; }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( k == -&lt;span&gt;1&lt;/span&gt; ) { &lt;span&gt;return&lt;/span&gt; puts(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt; k ; i ++&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt; ; j &amp;lt; k ; j ++&lt;span&gt; ) {
            x &lt;/span&gt;++&lt;span&gt; ;
            s[ i ].push_back( x ) ;
            s[ j ].push_back( x ) ;
        }
    }
    puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); outn(k);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt; k ; i ++&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;out&lt;/span&gt;((&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)s[i].size());
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; s[ i ].size();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt; ; j &amp;lt; len ; j ++&lt;span&gt; ) {
            out_(s[i][j]);
        }
        putchar(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;还是太菜，还是要继续努力啊QAQ&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:16:00 +0000</pubDate>
<dc:creator>henry_y</dc:creator>
<og:description>赛时写了ABC，D实在没啥思路，然后C又难调...然后就从写完AB时的32名掉到了150+名 T_T 码力不够，思维不行，我还是AFO吧 比赛链接 A - Measure sb模拟，奇数串倒着输出偶数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/henry-1202/p/9879994.html</dc:identifier>
</item>
<item>
<title>连载《一个程序猿的生命周期》-《发展篇》- 24.你所掌握的技术，创造的价值会越来越低 - 一个程序猿的生命周期</title>
<link>http://www.cnblogs.com/blog470130547/p/9879969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blog470130547/p/9879969.html</guid>
<description>&lt;p&gt;&lt;span&gt;      最近HBATJ缩减（或停止）社会招聘的消息刷爆了IT圈，让一些计划进入大厂的iter悔恨没有早日进去，就像一座围城，外面的人想进去，里面的人想出来。尽管大厂进行了辟谣，但是应该尊重事实，因为我一个多月前参加阿里巴巴云栖大会，已经获知内部人士的消息，hc已经冻结。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;24&quot;&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220515448-806011219.png&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;180&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220705631-202610432.png&quot; alt=&quot;&quot; width=&quot;341&quot; height=&quot;180&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;     最近马化腾深夜在知乎上问：未来十年哪些基础科学突破会影响互联网科技产业？产业互联网和消费互联网融合创新，会带来哪些改变？如下图：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220857781-1881484435.png&quot; alt=&quot;&quot; width=&quot;470&quot; height=&quot;280&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;     春江水暖鸭先知，面对未来可能出现的寒冬，大老们也在焦虑。现在社会运行成本比较高，并且在没有可预见未来的情况下，招聘一个人的成本与创造的价值并非成正比。例如一个互联网创业公司，不断的在圆梦，如果上市了，给你超预期的薪水也值得，否则没有任何意义。再例如，像我们这样的传统制造业，还能够紧跟时代步伐的公司，招聘一个软件开发的应届生就要10K的月薪，老板也不是傻子，一定会考虑投入产出比。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      去上海参加工博会的时候，顺便见见群友。此兄搞了几年开发，碰到机遇后就出来单干了，在缺少人员的情况下，找了博客园里小有名气的博主到生产现场负责项目实施，此兄描述：小有名气的博主蒙圈了，根本不知道从哪开始实施......。时代在发生变化，用DOS时代理解PC机时代是不行的、用PC机时代理解互联网时代是不行的、用互联网时代理解物联网时代或智能时代是不行的......以此类推。以现在应用技术的发展情况，足以解决现在的领域问题，关键是如何结合落后领域的业务而产生新的价值，降低成本提高效率。就技术讨论技术 ，重复造轮子，而又没有任何创新可言，从改变社会的角度考虑，其实不具备意义。除做事外，只是学习，另当别论了。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;      现在很少做纯技术性的工作，仍然具有危机感。第一、自己并非不可取代。第二、做一些应用级的开发，已经失去了工作或人生的意义。有自己的软件框架，开源了一段时间，后来闭源了。在中国的整体环境下，开源的生态并不理想。因为有太多人不想付出就获得源代码，这和公司的整体意识有关系，一个技术人员也无权决定是否能够付出成本。单靠技术变现会越来越困难，因为一般性技术门槛越来越低，必须结合和解决现实中的业务场景问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      国内的互联网公司的大发展得益于开源世界的免费红利，但是最近一系列的事件，让HBATJ大厂也感到了危机。一是国际贸易战中以芯片制裁中兴通讯，前三季度亏损72.6亿元；二是Android系统的欧盟地区的手机和平板电脑每台要支付最高40美元的授权费；三是2019 年 1 月以后发布的 Oracle Java SE 8 公开更新，需要获取商用许可证。这些大厂门，哪个公司离的开这些产品呢！就像中国人口红利消失，房产、股市、P2P等，韭菜割了一茬又一茬，割的比长的还快，同样面临变革的问题。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;      你现在掌握的技术，创造的价值越来越低，说白了是没有创新的核心产品。市场催你要活着，公司催你要业务功能、项目催你要项目进度、家里催你要生活......。公司和个人同样面临着危机，理想与情怀也只能面对现实。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;      2016年12月30号写下的文字：&lt;/span&gt;&lt;br/&gt;&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220939129-1128964864.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;260&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div readability=&quot;6.241134751773&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个程序猿的生命周期 微信平台&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;口   号：职业交流，职业规划；面对现实，用心去交流、感悟。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;公众号：iterlifetime&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;strong&gt;百木-ITer职业交流奋斗 群：141588103&lt;/strong&gt;   &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二维码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/691334/201606/691334-20160618075950167-974887453.jpg&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:12:00 +0000</pubDate>
<dc:creator>一个程序猿的生命周期</dc:creator>
<og:description>最近HBATJ缩减（或停止）社会招聘的消息刷爆了IT圈，让一些计划进入大厂的iter悔恨没有早日进去，就像一座围城，外面的人想进去，里面的人想出来。尽管大厂进行了辟谣，但是应该尊重事实，因为我一个多月</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blog470130547/p/9879969.html</dc:identifier>
</item>
<item>
<title>这可能是最简单的Page Object库 - 虫师</title>
<link>http://www.cnblogs.com/fnng/p/9879882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fnng/p/9879882.html</guid>
<description>&lt;p&gt;做过web自动化测试的同学，对Page object设计模式应该不陌生。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/311516/201810/311516-20181030215701455-21147713.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page object库应该根据以下目标开发：&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Page object应该易于使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清晰的结构&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;只写测试，而不是基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在可能的情况下防止样板代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要自己管理浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在运行时选择浏览器，而不是在类级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要直接接触selenium。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这只是一种设计模式，只要遵循它有思想，不借助第三方库，我们一样可以实现这种设计模式。&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;baidu_page.py&lt;/code&gt; 文件，实现page层封装。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;
class BasePage:
    &quot;&quot;&quot;
   基础Page
   &quot;&quot;&quot;
   def __init__(self, driver):
        self.driver = driver

    def get(self, url):
        self.driver.get(url)

    def id_(self, id_):
        return self.driver.find_element_by_id(id_)

    def xpath(self, xpath):
        return self.driver.find_element_by_xpath(xpath)


class BaiduPage(BasePage):
    &quot;&quot;&quot;
   百度首页Page
   &quot;&quot;&quot;

   @property
   def search_box(self):
        return self.id_(&quot;kw&quot;)

    @property
   def search_button(self):
        return self.xpath(&quot;//*[@id='su']&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们本质上要将元素的定位和元素的操作分开，page层用来定义元素的定位。&lt;/p&gt;
&lt;p&gt;接下来创建，&lt;code&gt;test_baidu.py&lt;/code&gt;文件，用来实现自动化测试。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from selenium import webdriver
from baidu_page import BaiduPage

dr = webdriver.Chrome()
page = BaiduPage(dr)
page.get(&quot;https://www.baidu.com&quot;)
page.search_box.send_keys(&quot;page object&quot;)
page.search_button.click()

dr.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里你将看不到元素的定位，分层的好处就是，当元素的定位发生改变时，只需要维护好page层即可，对于测试用例来说不需要关心元素怎么定位，只要专心设计好用例即可。&lt;/p&gt;
&lt;p&gt;可是，Page层的编写并不太简便，本质上它的作用只是定义一些元素的定位。那我告诉你，只需要4行代码也可以实现上面baidu_page.py的功能，你会不会太简单了？&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from page_objects import PageObject, PageElement

class BaiduPage(PageObject):
    search_box = PageElement(css='#kw')
    search_button = PageElement(id_='su')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是的，就这么简单，专注于元素的定位的编写，几乎没有多月的东西。而且还可以添加超时时间哦！&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from page_objects import PageObject, PageElement

class BaiduPage(PageObject):
    search_box = PageElement(css='#kw', time_out=2)
    search_button = PageElement(id_='su', time_out=10)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样再也不用写恶心的显式等待了，是不是很爽！？&lt;/p&gt;
&lt;p&gt;定位一组元素也是非常简单的说。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from page_objects import PageElements

class BaiduPage(PageObject):
    ……
    # 百度搜索结果
   search_result = PageElements(xpath=&quot;//div/h3/a&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;啥？ 项目地址？ 别急！别急！&lt;/p&gt;
&lt;p&gt;GitHub地址：&lt;br/&gt;https://github.com/defnngj/selenium_page_objects&lt;/p&gt;
&lt;p&gt;原项目已经不再维护，我阅读了原项目代码，虽然只有100多行，但设计非常精妙。可惜缺少元素的等待，这将有助于定位元素的稳定性，所以，在原有项目的基础上增加的该功能。&lt;/p&gt;
&lt;p&gt;下载安装:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ python setup.py install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过pip命令安装:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ pip install -i https://testpypi.python.org/pypi selenium-page-objects&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 30 Oct 2018 13:59:00 +0000</pubDate>
<dc:creator>虫师</dc:creator>
<og:description>这可能是最简单的Page Object库</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fnng/p/9879882.html</dc:identifier>
</item>
</channel>
</rss>