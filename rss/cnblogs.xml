<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>用一个简单的例子比较SVM，MARS以及BRUTO（R语言） - szcf715</title>
<link>http://www.cnblogs.com/szcf715/p/8495624.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/szcf715/p/8495624.html</guid>
<description>&lt;h2 id=&quot;背景重述&quot;&gt;背景重述&lt;/h2&gt;
&lt;p&gt;本文是&lt;a href=&quot;https://esl.hohoweiya.xyz/12-Support-Vector-Machines-and-Flexible-Discriminants/12.3-Support-Vector-Machines-and-Kernels/index.html&quot;&gt;ESL: 12.3 支持向量机和核&lt;/a&gt;中表12.2的重现过程。具体问题如下：&lt;br/&gt;在两个类别中产生100个观测值。第一类有4个标准正态独立特征&lt;span class=&quot;math inline&quot;&gt;\(X_1,X_2,X_3,X_4\)&lt;/span&gt;。第二类也有四个标准正态独立特征，但是条件为&lt;span class=&quot;math inline&quot;&gt;\(9\le \sum X_j^2\le 16\)&lt;/span&gt;。这是个相对简单的问题。同时考虑第二个更难的问题，用6个标准高斯噪声特征作为增广特征。&lt;/p&gt;
&lt;h2 id=&quot;生成数据&quot;&gt;生成数据&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;
&lt;code class=&quot;sourceCode r&quot;&gt;## #####################################
## generate dataset
## 
## `No Noise Features`: num_noise = 0
## `Six Noise Features`: num_noise = 6
## #####################################
genXY &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(&lt;span class=&quot;dt&quot;&gt;n =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;num_noise =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
{
  ## class 1
  m1 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;matrix&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(n*(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;+num_noise)), &lt;span class=&quot;dt&quot;&gt;ncol =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;num_noise)
  ## class 2
  m2 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;matrix&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;nrow =&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;ncol =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;num_noise)
  for (i in &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:n) {
    while (&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;) {
      m2[i, ] =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;num_noise)
      tmp =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(m2[i, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
      if(tmp &amp;gt;=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &amp;amp;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tmp &amp;lt;=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;)
        break
    }
  }
  X =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rbind&lt;/span&gt;(m1, m2)
  Y =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rep&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;each =&lt;/span&gt; n)
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;X =&lt;/span&gt; X, &lt;span class=&quot;dt&quot;&gt;Y =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as.factor&lt;/span&gt;(Y)))
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;模型训练&quot;&gt;模型训练&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;SVM直接调用&lt;code&gt;e1071&lt;/code&gt;包中的&lt;code&gt;svm&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;BRUTO和MARS都是调用&lt;code&gt;mda&lt;/code&gt;包，且由于两者都是用于回归，所以转换为分类时，是比较拟合值与类别标签的距离，划分到越靠近的那一类&lt;/li&gt;
&lt;li&gt;原书中提到实验中MARS不限定阶数，但实际编程时，设置阶数为10&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;交叉验证选择合适的c&quot;&gt;交叉验证选择合适的&lt;span class=&quot;math inline&quot;&gt;\(C\)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;我分两步进行选择：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;粗选：在较大范围内寻找最优的&lt;span class=&quot;math inline&quot;&gt;\(C\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;细分：在上一步选取的最优值附近进行细分&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;注意避免最优值取在边界值。以SVM/poly5为例进行说明，其他类似&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;
&lt;code class=&quot;sourceCode r&quot;&gt;## SVM/poly5
&lt;span class=&quot;kw&quot;&gt;set.seed&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;)
poly5 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;tune.svm&lt;/span&gt;(Y~., &lt;span class=&quot;dt&quot;&gt;data =&lt;/span&gt; dat, &lt;span class=&quot;dt&quot;&gt;kernel =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;polynomial&quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;degree =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;cost =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^(-&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(poly5)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/953584/201803/953584-20180303011103584-611008185.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时选取的最优&lt;span class=&quot;math inline&quot;&gt;\(C\)&lt;/span&gt;为32，进一步细化&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;
&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;set.seed&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1234&lt;/span&gt;)
poly5 =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;tune.svm&lt;/span&gt;(Y~., &lt;span class=&quot;dt&quot;&gt;data =&lt;/span&gt; dat, &lt;span class=&quot;dt&quot;&gt;kernel =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;polynomial&quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;degree =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;cost =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;by =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))
&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(poly5)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/953584/201803/953584-20180303011110522-1123072270.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以&lt;span class=&quot;math inline&quot;&gt;\(C\)&lt;/span&gt;取28。&lt;/p&gt;
&lt;p&gt;类似地，得到其它方法的最优&lt;span class=&quot;math inline&quot;&gt;\(C\)&lt;/span&gt;，比如某次实验结果如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SV Classifier&lt;/td&gt;
&lt;td&gt;2.6&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;SVM/poly 2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;SVM/poly 5&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;SVM/poly 10&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;当然，实际中我们并不需要重新设置参数来训练模型，因为&lt;code&gt;tune.svm()&lt;/code&gt;的返回结果就包含了最优模型，直接调用，比如&lt;code&gt;poly5$best.model&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;计算测试误差&quot;&gt;计算测试误差&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode r&quot;&gt;
&lt;code class=&quot;sourceCode r&quot;&gt;predict.mars2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(model, newdata)
{
  pred =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;predict&lt;/span&gt;(model, newdata)
  &lt;span class=&quot;kw&quot;&gt;ifelse&lt;/span&gt;(pred &amp;lt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;1.5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
}

calcErr &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(model, &lt;span class=&quot;dt&quot;&gt;n =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;nrep =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;num_noise =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;method =&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;SVM&quot;&lt;/span&gt;)
{
  err =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sapply&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:nrep, function(i){
    dat =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;genXY&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;num_noise =&lt;/span&gt; num_noise)
    datX =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;dat[, -&lt;span class=&quot;kw&quot;&gt;ncol&lt;/span&gt;(dat)]
    datY =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;dat[, &lt;span class=&quot;kw&quot;&gt;ncol&lt;/span&gt;(dat)]
    if (method ==&lt;span class=&quot;st&quot;&gt; &quot;SVM&quot;&lt;/span&gt;)
      pred =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;predict&lt;/span&gt;(model, &lt;span class=&quot;dt&quot;&gt;newdata =&lt;/span&gt; datX)
    else if (method ==&lt;span class=&quot;st&quot;&gt; &quot;MARS&quot;&lt;/span&gt;)
      pred =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;predict.mars2&lt;/span&gt;(model, &lt;span class=&quot;dt&quot;&gt;newdata =&lt;/span&gt; datX)
    else if (method ==&lt;span class=&quot;st&quot;&gt; &quot;BRUTO&quot;&lt;/span&gt;)
      pred =&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;predict.mars2&lt;/span&gt;(model, &lt;span class=&quot;dt&quot;&gt;newdata =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as.matrix&lt;/span&gt;(datX))
    &lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(pred !=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;datY)/(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;*n) &lt;span class=&quot;co&quot;&gt;# Attention!! The total number of observations is 2n, not n&lt;/span&gt;
  })
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;TestErr =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(err),
              &lt;span class=&quot;dt&quot;&gt;SE =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(err)))
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;值得说明的是，对于BRUTO和MARS，因为程序是将其视为回归模型处理的，需要进一步转换为类别标签。因为程序中类别用1和2编号，所以判断拟合值是否大于1.5，大于则划为第二类，否则第一类。&lt;/p&gt;
&lt;h2 id=&quot;结果&quot;&gt;结果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/953584/201803/953584-20180303011128927-531786370.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将之与表12.2进行比较，可以看出各个方法的误差率及标准差的相对大小都比较一致。&lt;/p&gt;
&lt;h2 id=&quot;贝叶斯误差率&quot;&gt;贝叶斯误差率&lt;/h2&gt;
&lt;p&gt;对于类别1，&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \sum X_j^2\sim \chi^2(4) \]&lt;/span&gt;&lt;br/&gt;对于类别2，&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \sum X_j^2\sim \frac{\chi^2(4)I(9\le\chi^2(4)\le 16)}{\int_9^{16} f(t)dt} \]&lt;/span&gt;&lt;br/&gt;其中&lt;span class=&quot;math inline&quot;&gt;\(f(t)\)&lt;/span&gt;是&lt;span class=&quot;math inline&quot;&gt;\(\chi^2(4)\)&lt;/span&gt;的密度函数。&lt;/p&gt;
&lt;p&gt;于是贝叶斯误差率为&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{1}{2}\int_{9}^{16}f(t)dt\approx 0.029 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;完整代码可以参见&lt;a href=&quot;https://github.com/szcf-weiya/ESL-CN/blob/master/docs/notes/SVM/skin-of-the-orange.R&quot;&gt;skin-of-the-orange.R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文永久链接：&lt;a href=&quot;https://esl.hohoweiya.xyz/notes/SVM/skin-of-the-orange/index.html&quot;&gt;模拟：Tab. 12.2&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 17:14:00 +0000</pubDate>
<dc:creator>szcf715</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/szcf715/p/8495624.html</dc:identifier>
</item>
<item>
<title>小公司大企业 - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/8495547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/8495547.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180303000333000-825336491.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;“自身与企业的关系”&lt;/strong&gt;是我工作至今一直在寻找答案的过程，在一个&lt;strong&gt;“人-企业-社会”&lt;/strong&gt;的组织架构中，这应该是每一个人无可规避的问题，最重要的是这个答案的背后往往就是个人世界观、人生观以及价值观的综合体现。许多问题并没有“静（jue）态（dui）”答案，又或许答案是“动（bian）态（hua）”的，因为它会随着自身观念的变化而变化。七年职业生涯下来，我并没有很系统性地跟自己谈论这个问题，而刚好在年前“自我救赎”的那段时间，收到了这么一封信件，从而更加触发当下的我对这个问题的一个具体化答案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180303000539478-863791373.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在我早期的观念中，个人和企业是两个都有自身思想的独立个体。个人思想，这不必过多解释，而企业思想更多是指其基于自身的文化底蕴在社会和市场上的定位和发展等思想的综合。而两个个体之间合作的最根本前提就是有共同的价值利益（交换），这是市场规律。我十分感恩这一封来得“刚刚好”的信件，给了“自我救赎”后信心指数级的增长。就因为自身成长信心的更加坚定，才有了我以下的回复：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180303000612190-1751587508.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从以上“邀文”可以看出，可能是我目前对事物理解的“高度”吸引了这位前辈，这恰恰是我目前努力的方向，所以他的“邀约”给了我更加坚定前行的信心。我们目前的这个高度更多是一种综合性能力，但对于技术领域的真正的根基理解，我深知自身并没有达到这位前辈对技术性的要求，而我们目前的这个优点恰恰就是我技术领域的缺点而触发的。为什么一本《深入理解计算机系统》可以让我看个两年都还没看完，是因为我觉得我的高度还未能够掌控我需要学习的知识，如果我需要在计算领域深入发展，我需要从更高的层次去看清技术这门学问到底在市场和社会上是一个什么样的角色存在，才能反过来思考自己的发展方向以及确保自己有足够的高度去理解和更好地学习一件事情。而我现在正处于往高度方向跑的路上，但暂时还没有到达一个点可以让我在技术领域上有所定位，所以才有了我以上的回复。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;“ 平台 ”的选择&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;如果跟阿里这只大象相比，我目前所在的公司只能说是一只蚂蚁，而且还是一只“混沌”的蚂蚁。但人的一生，无论在大企业还是小公司的发展，终究会回归到“我是谁，我从哪里来，又从哪里去”这个属于我们人类本质的问题上去。有的人在大平台上迷失了，有的人在小平台上找到了自己，所以平台不是我最终的目标，更多是我一同前行的“伙伴”。而每个伙伴的选择，最终还是取决于结合自身当前的“高度”，也就是各自对“我是谁，我从哪里来”的理解。在我与公司共行七年的路上，我也经常迷茫，同样也有过无数次离职换工作的念头，但幸运的是我并没有被自身困惑的痛苦所产生的幻觉所影响，而是更本质的先自我发掘，自我突破，然后再做出真正适合自己的选择。更幸运地是我和公司竟然越发能相互从彼此之间发现自我，改变自我，实现自我。我相信这也是目前阿里也无法给到我的价值，因为阿里这个“成熟”的大平台不会给我一个和企业从零开始的机会，而看到这个珍贵的机会可以让我人生高度和影响力的提升不可估量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180303000734881-6742623.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;结束语&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 高度的追求就是一个对事物抽象的过程，而这个抽象过程就像爬金字塔的过程，越抽象，越发现万物的共性，从而让我打破了“镜头前聚焦和镜头后视野”能力的束缚。所以，从我目前的高度看，对事物本质的了解、追求和提升，平台不是重点，重点在于自我认知和思考，因为再大的问题也都会被自上而下地层层分解成“基础本质问题”去解决。换个角度看，这次跟阿里的合作“泡汤”，不代表日后就没有合作的机会。在市场化和资本猛烈发展的今天，“个体之间”合作机会的形式会越发令人难以想象。最最最重要的是，在这万物相连的年代，千万别让贫（xi）穷（que）限制了自己的想象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180303000824311-965060861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 16:14:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/8495547.html</dc:identifier>
</item>
<item>
<title>xBIM WeXplorer  设置模型颜色 - 在 水 一 方</title>
<link>http://www.cnblogs.com/w2011/p/8490421.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w2011/p/8490421.html</guid>
<description>&lt;h3&gt;   目录&lt;/h3&gt;
&lt;h5&gt;    基础&lt;/h5&gt;
&lt;h5&gt;     高级应用&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（一）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（二）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（三）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;       本次我们探讨模型颜色操作，正如您已经注意到的模型在默认情况下具有合理的图形表示形式。这是从 IFC 模型, 它应该在所有的工具看起来相同, 它应该看起来像在您或您的用户的创作环境。但是，有时能够对这种表示进行修改以向用户报告某种结果 (分类, 错误报告, 冲突检测等) 非常重要。&lt;/p&gt;
&lt;p&gt;      我们将使用在HTML 元素的onclick 属性中定义的Javascript函数使用难看的代码，&lt;span&gt;&lt;span&gt;这是不推荐的做法，但为了清晰和简单起见，&lt;/span&gt;&lt;span&gt;鼓励您遵循&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;http://www.w3.org/wiki/The_principles_of_unobtrusive_JavaScript&quot;&gt;&lt;span&gt;&lt;span&gt;这些&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;准则来 &lt;/span&gt;&lt;span&gt;编写可持续和清晰的Web应用程序。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;     首先有必要定义自己的风格，有简单的函数 &lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://docs.xbim.net/XbimWebUI/xViewer.html#defineStyle&quot;&gt;defineStyle&lt;/a&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;来做到这一点。&lt;/span&gt;&lt;span&gt;您最多可以定义224种样式。&lt;/span&gt;&lt;span&gt;我们将在以下代码中为每种产品类型定义新颜色：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;Recolour()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;span&gt;按类型&lt;/span&gt;&lt;/span&gt;&lt;span&gt;重新着色&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.resetStyles();&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;重置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Recolour() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;viewer) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; index &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; xProductType) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; xProductType[i];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; colour &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;, Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;, Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span&gt;];
            viewer.defineStyle(index, colour);
            viewer.setStyle(index, type);
            index&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
        }
    };
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      您可以根据需要扩展此示例。&lt;/span&gt;&lt;span&gt;只需定义0 - 224种颜色样式，并将其设置为产品或产品类型的覆盖样式。&lt;/span&gt;&lt;span&gt;如果您想将样式重置为其默认使用的&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;http://docs.xbim.net/XbimWebUI/xViewer.html#resetStyles&quot;&gt;&lt;span&gt;&lt;span&gt;resetStyles（）&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;函数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     还有一个视觉特征，&lt;span&gt;那就是突出显示。&lt;/span&gt;&lt;span&gt;你可以把它看作是一个选择，但这样做并不是太好。&lt;span&gt;它将所有最终的选择逻辑留给你。&lt;/span&gt;&lt;span&gt;这只是一种视觉表现。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;cmbSelection&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;noAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;select&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选择&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.resetStates()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;重置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initHighlighting() {
        viewer.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pick&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (args) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cmb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cmbSelection&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; option &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cmb.value;
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (option) {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    viewer.setState(xState.HIGHLIGHTED, [args.id]);
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hide&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                    viewer.setState(xState.HIDDEN, [args.id]);
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        });
    };
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      这种方法的好处在于突出显示与其他视觉外观是分开的。&lt;/span&gt;&lt;span&gt;您不能同时突出显示和隐藏产品，但这是有道理的。&lt;/span&gt;&lt;span&gt;重要的是您可以显示分析结果并同时进行选择。&lt;/span&gt;&lt;span&gt;如果你放弃选择，你仍然有一个有效的结果表示。&lt;/span&gt;&lt;span&gt;您通常可以&lt;/span&gt;&lt;span&gt;以任何方式&lt;/span&gt;&lt;span&gt;组合&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;样式&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;和&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;状态&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;整体的HTML 代码 如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;styles/xviewer-styles.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;scripts/xbim-viewer.debug.bundle.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;xviewer-control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;Recolour()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;span&gt;按类型&lt;/span&gt;&lt;/span&gt;&lt;span&gt;重新着色&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.resetStyles();&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;重置样式&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Recolour() {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;viewer) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; index &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; xProductType) {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; xProductType[i];
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; colour &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;, Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;, Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;255&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span&gt;];
                            viewer.defineStyle(index, colour);
                            viewer.setStyle(index, type);
                            index&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
                        }
                    };
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;xviewer-control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                 选择操作:
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;cmbSelection&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;noAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;无&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;select&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选择&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;hide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;隐藏&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&quot;if (viewer) viewer.resetStates()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;重置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initHighlighting() {
                        viewer.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pick&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (args) {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; cmb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cmbSelection&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; option &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; cmb.value;
                            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (option) {
                                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                                    viewer.setState(xState.HIGHLIGHTED, [args.id]);
                                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hide&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                                    viewer.setState(xState.HIDDEN, [args.id]);
                                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                            }
                        });
                    };
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;canvas &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;viewer&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
           您选择产品的编号: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;productId&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;model&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;errors&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; check &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; xViewer.check();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; viewer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; pickedId &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (check.noErrors) {
                    viewer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; xViewer(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;viewer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                    viewer.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loaded&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        initHighlighting();
                        viewer.start();
                    });

                    viewer.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (arg) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; container &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;errors&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (container) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相关的错误&lt;/span&gt;
&lt;span&gt;                            container.innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;pre style='color:red;'&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; arg.message &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/pre&amp;gt; &amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; container.innerHTML;
                        }
                    });

                    viewer.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pick&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (args) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; id &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; args.id;
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; span &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (span) {
                            span.innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; id &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; id : &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }

                    });
                    viewer.load(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data/SampleHouse.wexbim&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; msg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;errors&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; check.errors) {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; check.errors[i];
                        msg.innerHTML &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;pre style='color: red;'&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/pre&amp;gt; &amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    }
                }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 02 Mar 2018 15:52:00 +0000</pubDate>
<dc:creator>在 水 一 方</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w2011/p/8490421.html</dc:identifier>
</item>
<item>
<title>Java开发环境的配置 - 皓月苍狼</title>
<link>http://www.cnblogs.com/haoyuecanglang/p/8495517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haoyuecanglang/p/8495517.html</guid>
<description>&lt;p&gt;1.下载JDK(JDK&amp;gt;JRE&amp;gt;JVM);&lt;/p&gt;
&lt;p&gt;2.安装JDK;&lt;/p&gt;
&lt;p&gt;3.配置环境变量。&lt;/p&gt;
&lt;p&gt;JAVA_HOME:配置JDK安装路径；&lt;/p&gt;
&lt;p&gt;PATH:配置JDK命令文件的位置(javac.exe,java.exe)&lt;/p&gt;
&lt;p&gt;CLASSPATH:配置类库文件的位置(lib)&lt;/p&gt;
&lt;p&gt;A.path,classpath（环境变量的配置）&lt;/p&gt;
&lt;p&gt;1.主要是为了检索文件方便，如果执行某个文件，不用到文件所在目录执行，那么操作系统会在PATH路径中检索，windows操作系统特有的。&lt;/p&gt;
&lt;p&gt;2.ClassPath为类路径，是JAVA运行时查找类文件的路径,java的环境变量。&lt;/p&gt;
&lt;p&gt;B.命令执行javac编译和java运行。&lt;/p&gt;
&lt;p&gt;我的电脑(右键)--属性，高级系统设置--环境变量。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 15:51:00 +0000</pubDate>
<dc:creator>皓月苍狼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haoyuecanglang/p/8495517.html</dc:identifier>
</item>
<item>
<title>network programming-简单的TCP客户服务器编程 - 林木子</title>
<link>http://www.cnblogs.com/BlueBlue-Sky/p/8495505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BlueBlue-Sky/p/8495505.html</guid>
<description>&lt;p&gt;简单的TCP程序客户端流程：创建套接字（套接字用IP地址：端口号）表示）socket()-&amp;gt;请求连接connect()-&amp;gt;交换数据 send()/recv()-&amp;gt;关闭连接 closesocket()&lt;/p&gt;
&lt;p&gt;简单的TCP程序服务端流程：创建套接字socket()-&amp;gt;绑定相应的端口bind()-&amp;gt;监听端口listen()-&amp;gt;接受连接accept()-&amp;gt;交换数据recv()/send()-&amp;gt;关闭连接 closesocket()&lt;/p&gt;
&lt;p&gt;第一个网络程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TcpServer.cpp&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1147847/201803/1147847-20180302233910210-549661452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;TcpClient.cpp&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1147847/201803/1147847-20180302233928029-928183022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在其基础上，更进一步，实现一个基于简单TCP的用户注册程序，实现下列&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;客户端发送用户注册信息（用户名、密码和其他资料）到服务器端； 服务器端首先检查用户注册数据是否符合格式。如不符合则返回“非法访问”提示； 如符合检查用户文件中是否存在相同用户名，如不存在，则将用户注册信息存放到用户文件中，返回“用户注册成功”提示 如用户文件中存在相同用户名，则返回“用户名已被注册”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要的实现函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;//将用户键入的数据放到User结构体中&lt;br/&gt;User Input_Info(const char* message);&lt;/p&gt;
&lt;p&gt;//判断用户键入的全部数据的是否符合格式&lt;br/&gt;int Is_Valid_Format(const User user);&lt;/p&gt;
&lt;p&gt;//分别判断用户名、密码、手机号码是否符合格式&lt;br/&gt;int Is_Valid_Format_Of_Name(const char* name);&lt;br/&gt;int Is_Valid_Format_Of_Password(const char* pass);&lt;br/&gt;int Is_Valid_Format_Of_PhoneNumber(const char* phone);&lt;/p&gt;
&lt;p&gt;//主要的验证函数&lt;br/&gt;void Main_Process_Info(const User user,const SOCKET sNewConnection);&lt;/p&gt;
&lt;p&gt;//判断该用户名是否已经被注册（也就是说该用户名有没有存在于用户文件中）&lt;br/&gt;int Is_Name_Exist(const char* name);&lt;/p&gt;
&lt;p&gt;//将新的用户信息写入到文件中&lt;br/&gt;int Write_Info_To_Txt(const User user);&lt;/p&gt;
&lt;p&gt;/****每个函数的具体代码***/&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;User Input_Info(const char* message)&lt;br/&gt;{&lt;br/&gt;User user;&lt;br/&gt;char userName[20] = {0},&lt;br/&gt;password[20] = { 0 }, phoneNumber[20] = {0};&lt;br/&gt;// user = { '\0', '\0', '\0' };&lt;br/&gt;//user.userName = {0};&lt;/p&gt;
&lt;p&gt;sscanf(message, &quot;%s\t%s\t%s&quot;, user.userName,&lt;br/&gt;user.password, user.phoneNumber);&lt;/p&gt;&lt;p&gt;/*printf(&quot;%s\t%s\t%s&quot;, user.userName,&lt;br/&gt;user.password, user.phoneNumber);*/&lt;br/&gt;/* sscanf(message, &quot;%s\t%s\t%s&quot;, userName,&lt;br/&gt;password, phoneNumber);&lt;br/&gt;printf(&quot;%s\t%s\t%s&quot;, userName,&lt;br/&gt;password, phoneNumber);*/&lt;br/&gt;return user;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;int Is_Valid_Format(const User user)&lt;br/&gt;{&lt;br/&gt;int flag = 0;&lt;br/&gt;if (Is_Valid_Format_Of_Name(user.userName)&amp;amp;&amp;amp;&lt;br/&gt;Is_Valid_Format_Of_Password(user.password)&amp;amp;&amp;amp;&lt;br/&gt;Is_Valid_Format_Of_PhoneNumber(user.phoneNumber))&lt;br/&gt;{&lt;br/&gt;return 1;&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;return 0;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;int Is_Valid_Format_Of_Name(const char* name)&lt;br/&gt;{&lt;br/&gt;if (strlen(name) &amp;gt;= 6 &amp;amp;&amp;amp; strlen(name) &amp;lt;= 12)&lt;br/&gt;return 1;&lt;br/&gt;else&lt;br/&gt;return 0;&lt;/p&gt;
&lt;p&gt;}&lt;br/&gt;int Is_Valid_Format_Of_Password(const char* pass)&lt;br/&gt;{&lt;br/&gt;if (strlen(pass) &amp;gt;= 8 &amp;amp;&amp;amp; strlen(pass) &amp;lt;= 24)&lt;br/&gt;return 1;&lt;br/&gt;else&lt;br/&gt;return 0;&lt;br/&gt;}&lt;br/&gt;int Is_Valid_Format_Of_PhoneNumber(const char* phone)&lt;br/&gt;{&lt;br/&gt;if (strlen(phone)==11)//先判断长度是不是11位，接着判断是不是全部是数字&lt;br/&gt;{&lt;br/&gt;for (int i = 0; i &amp;lt; 11; i++)&lt;br/&gt;{&lt;br/&gt;if (phone[i] &amp;gt;= '0'&amp;amp;&amp;amp;phone[i] &amp;lt;= '9')&lt;br/&gt;{&lt;br/&gt;continue;&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;break;&lt;br/&gt;return 0;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;br/&gt;return 1;&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;return 0;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;int Is_Name_Exist(const char* name)&lt;br/&gt;{&lt;br/&gt;//打开用户文件，将该用户名和文件中的用户名一个个比较，&lt;br/&gt;//看看是否已经有相同的用户名存在了&lt;br/&gt;char* file_name = &quot;user.txt&quot;;&lt;br/&gt;if (access(file_name, 0))&lt;br/&gt;{&lt;br/&gt;//printf(&quot;D://user.txt doesn't exist!&quot;);&lt;br/&gt;//printf(&quot;then create!&quot;);&lt;br/&gt;char* file_name = &quot;user.txt&quot;;&lt;br/&gt;FILE *fp = fopen(file_name, &quot;at+&quot;);&lt;br/&gt;}&lt;br/&gt;//将文件中的记录一条条的都出来&lt;br/&gt;//假定每一条记录承载每一个用户的全部信息&lt;br/&gt;//第一条字符串是用户的name&lt;br/&gt;char buf[MAX_SIZE];/*缓冲区*/&lt;br/&gt;FILE* fp=NULL;&lt;br/&gt;if ((fp=fopen(&quot;user.txt&quot;,&quot;r&quot;))==NULL)//该文件和.cpp文件放在同一个父目录下&lt;br/&gt;{&lt;br/&gt;printf(&quot;Failed to read!&quot;);&lt;br/&gt;exit(1);&lt;br/&gt;}&lt;br/&gt;while (fgets(buf,MAX_SIZE,fp)!=NULL)&lt;br/&gt;{&lt;br/&gt;//char* temp_name;//会出现停止工作的情况&lt;br/&gt;char temp_name[256] = { '\0' };&lt;br/&gt;char temp_pass[512] = { '\0' };&lt;br/&gt;char temp_phone[256] = { '\0' };&lt;br/&gt;sscanf(buf, &quot;%s\t%s\t%s&quot;, temp_name,temp_pass,temp_phone);&lt;br/&gt;if (strcmp(temp_name,name)==0)//该用户名已被注册，该用户名在文件中存在&lt;br/&gt;{&lt;br/&gt;return 1;&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;continue;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;return 0;//该用户名未被注册，该用户名不在用户文件中存在&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;void Main_Process_Info(const User user,const SOCKET sNewConnection)&lt;br/&gt;{&lt;br/&gt;char msg[256] = {'\0'};&lt;br/&gt;if (Is_Valid_Format(user))//如果用户注册数据符合格式&lt;br/&gt;{&lt;br/&gt;if (!Is_Name_Exist(user.userName))&lt;br/&gt;{&lt;br/&gt;//将该用户的注册信息写入用户文件中&lt;br/&gt;if (Write_Info_To_Txt(user))&lt;br/&gt;{&lt;br/&gt;strcpy(msg, &quot;用户注册成功！\n&quot;);&lt;br/&gt;send(sNewConnection,msg,sizeof(msg),0);&lt;br/&gt;printf(&quot;用户注册成功！\n&quot;);&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;strcpy(msg, &quot;用户注册失败！（未能将新用户信息成功写入用户文件中）\n&quot;);&lt;br/&gt;send(sNewConnection, msg, sizeof(msg), 0);&lt;br/&gt;printf(&quot;用户注册失败！（未能将新用户信息成功写入用户文件中）\n&quot;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;strcpy(msg, &quot;该用户名已经被注册了！\n&quot;);&lt;br/&gt;send(sNewConnection, msg, sizeof(msg), 0);&lt;br/&gt;printf(&quot;该用户名已经被注册了！\n&quot;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;strcpy(msg, &quot;非法访问！\n&quot;);&lt;br/&gt;send(sNewConnection, msg, sizeof(msg), 0);&lt;br/&gt;printf(&quot;非法访问！\n&quot;);&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;int Write_Info_To_Txt(const User user)&lt;br/&gt;{&lt;br/&gt;FILE* fp;&lt;br/&gt;char* filename = &quot;user.txt&quot;;&lt;br/&gt;if ((fp=fopen(filename,&quot;a&quot;))==NULL)&lt;br/&gt;{&lt;br/&gt;printf(&quot;\n 不能打开该用户文件！\n&quot;);&lt;br/&gt;return 0;&lt;br/&gt;}&lt;br/&gt;fprintf(fp,&quot;%s\t%s\t%s\n&quot;,user.userName,user.password,user.phoneNumber);&lt;br/&gt;printf(&quot;%s\t%s\t%s\n&quot;, user.userName, user.password, user.phoneNumber);&lt;br/&gt;fclose(fp);&lt;br/&gt;return 1;&lt;br/&gt;}&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;运行结果截屏如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;客户端：&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1147847/201803/1147847-20180302234218206-7894766.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;服务端：&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1147847/201803/1147847-20180302234157037-1617004881.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;用户信息文件：&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1147847/201803/1147847-20180302234230529-1896814404.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 15:47:00 +0000</pubDate>
<dc:creator>林木子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BlueBlue-Sky/p/8495505.html</dc:identifier>
</item>
<item>
<title>2018/3/2晚11点30分写的程序(C++) - 荒野之狼</title>
<link>http://www.cnblogs.com/huangyezhilang/p/8495497.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangyezhilang/p/8495497.html</guid>
<description>&lt;p&gt;程序目标：输入一个字符串，竖向输出该字符串。使用string和动态分配内存机制。代码如下：&lt;/p&gt;
&lt;p&gt;#include&amp;lt;iostream&amp;gt;&lt;br/&gt;#include &quot;stdafx.h&quot;&lt;br/&gt;#include&amp;lt;cstring&amp;gt;&lt;br/&gt;int main()&lt;br/&gt;{&lt;br/&gt;using namespace std;&lt;br/&gt;string s= cin.getline;&lt;br/&gt;char * a = new char[sizeof(s)];&lt;br/&gt;for (int m = 0;m &amp;lt; sizeof(s);m++)&lt;br/&gt;a[m] = s[m];&lt;br/&gt;for (int n = 0;n &amp;lt; sizeof(s);n++)&lt;br/&gt;cout &amp;lt;&amp;lt; a[n] &amp;lt;&amp;lt; endl;&lt;br/&gt;delete[] a;&lt;br/&gt;cin.get();&lt;br/&gt;cin.get();&lt;br/&gt;return 0;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;编译器：Visual Studio 2015 &lt;/p&gt;
&lt;p&gt;显示编译错误，但是不知道怎么修改。先记录在这。希望大神不吝赐教。&lt;/p&gt;
&lt;p&gt;错误信息：&lt;/p&gt;
&lt;p&gt;严重性 代码 说明 项目 文件 行 禁止显示状态&lt;br/&gt;错误 C2146 语法错误: 缺少“;”(在标识符“s”的前面) MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2065 “cin”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2228 “.getline”的左边必须有类/结构/联合 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 10&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 11&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 12&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 13&lt;br/&gt;错误 C2065 “s”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 14&lt;br/&gt;错误 C2065 “cout”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 15&lt;br/&gt;错误 C2065 “endl”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 15&lt;br/&gt;错误 C2065 “cin”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 17&lt;br/&gt;错误 C2228 “.get”的左边必须有类/结构/联合 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 17&lt;br/&gt;错误 C2065 “cin”: 未声明的标识符 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 18&lt;br/&gt;错误 C2228 “.get”的左边必须有类/结构/联合 MyProject_001 c:\users\administrator\documents\visual studio 2015\projects\myproject_01\myproject_001\myproject_001\myproject_001.cpp 18&lt;/p&gt;
&lt;p&gt;####希望用一个错误来开始我的博客园之旅，只有不停的纠错，才能提高####&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 15:43:00 +0000</pubDate>
<dc:creator>荒野之狼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangyezhilang/p/8495497.html</dc:identifier>
</item>
<item>
<title>nodejs的基础概念 - 萌新啊萌新是我</title>
<link>http://www.cnblogs.com/lilinzhiyu/p/8494264.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lilinzhiyu/p/8494264.html</guid>
<description>&lt;hr/&gt;

&lt;p&gt;类似于控制台，可以输入命令，并接受系统的响应。&lt;/p&gt;
&lt;p&gt;REPL 的功能：&lt;/p&gt;
&lt;p&gt;　　1.读取：读取用户输入，解析输入的 js 数据结构，并存储在内存中。&lt;/p&gt;
&lt;p&gt;　　2.执行：执行输入的数据结构。&lt;/p&gt;
&lt;p&gt;　　3.打印：输出结果。&lt;/p&gt;
&lt;p&gt;　　4.循环：可以循环1、2、3操作指导ctrl+c两次退出。&lt;/p&gt;
&lt;p&gt;开启 Node 终端：node 即可开启。&lt;/p&gt;
&lt;p&gt;运算符：+、-、*、/，还支持括号改变优先级。&lt;/p&gt;
&lt;p&gt;变量定义：使用var来定义变量。常用的输出 API：console.log()。&lt;/p&gt;
&lt;p&gt;多行表达式：这里指的是循环，与在 js 中做的循环是一致的。每输出一行回车就可以，node 会自动检测是否为连续多行表达式。&lt;/p&gt;
&lt;p&gt;下划线_变量：可以使用下划线变量来获取上一个表达式的运算结果。&lt;/p&gt;
&lt;p&gt;REPL 命令：&lt;/p&gt;
&lt;p&gt;　　Ctrl+c 退出当前终端。&lt;/p&gt;
&lt;p&gt;　　Ctrl+c 连续两次，退出Node REPL&lt;/p&gt;
&lt;p&gt;　　Ctrl+d 退出 Node REPL&lt;/p&gt;
&lt;p&gt;　　向上/向下键-查看输入的历史命令。&lt;/p&gt;
&lt;p&gt;　　tab 键 列出当前命令&lt;/p&gt;
&lt;p&gt;　　.help 列出使用命令&lt;/p&gt;
&lt;p&gt;　　.break 退出多行表达式&lt;/p&gt;
&lt;p&gt;　　.clear 退出多行表达式&lt;/p&gt;
&lt;p&gt;　　.save filename 保存当前的 Node REPL 会话到指定文件。&lt;/p&gt;
&lt;p&gt;　　.load filename 载入当前 Node REPL 会话的文件内容。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Node.js异步编程的直接体现就是回调。&lt;/p&gt;
&lt;p&gt;异步编程依托于回调来实现，但是不能说使用回调就是异步化。&lt;/p&gt;
&lt;p&gt;回调函数在完成任务后就会调用，Node使用了大量的回调函数，Node所有的API都支持回调函数。&lt;/p&gt;
&lt;p&gt;注：阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们需要写在回调函数内。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Node.js是单进程单线程应用，但是通过事件和回调支持并发， 所以性能很高。&lt;/p&gt;
&lt;p&gt;Node.js的每一个API都是异步的（这里个人认为表达的意思应该是每一个API都是支持回调。参考第三部分），并作为一个独立线程运行，使用异步函数调用，并处理并发。&lt;/p&gt;
&lt;p&gt;Node.js基本上所有的事件机制都是用设计模式中的观察者模式实现的。&lt;/p&gt;
&lt;p&gt;Node.js单线程类似进入一个while(true)的事件循环，直到没有事件,观察者退出，每个异步事件都生成一个事件观察者。如果有事件发生就调用该回调函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302204524798-1818393710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Node.js中内置多个事件，可以引入events模块，并通过实例化EventEmitter类来绑定和监听事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302204220728-808668573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在Node中：执行异步操作的函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302203801253-567083253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Node.js 所有的异步I/O操作在完成时都会发送一个事件到事件队列。&lt;/p&gt;
&lt;p&gt;Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件，一个fs.readStream对象会在文件被打开的时候发出一个事件。所有产生的事件的对象都是events.EventEmitter的实例。&lt;/p&gt;
&lt;p&gt;EventEmitter类&lt;/p&gt;
&lt;p&gt;events模块只提供了一个对象，events.EventEmitter。EventEmitter的核心就是事件触发与事件监听器功能的封装。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引入 events 模块&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; events = require('events'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建 eventEmitter 对象&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; eventEmitter = &lt;span&gt;new&lt;/span&gt; events.EventEmitter();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EventEmitter对象如果再实例化时发生错误，就会触发error事件。当添加新的监听器时，newListener事件会触发，当监听器被移除时，removeListener事件被触发。&lt;/p&gt;
&lt;p&gt;简例说明EventEmitter用法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;event.js文件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; EventEmitter = require('events'&lt;span&gt;).EventEmitter;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; event = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EventEmitter();
event.on(&lt;/span&gt;'some_evnet', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    console.log(&lt;/span&gt;'some_event 事件触发'&lt;span&gt;);    
});
setTimeOut(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    event.emit(&lt;/span&gt;'some_event'&lt;span&gt;);
}, &lt;/span&gt;1000);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302205726049-754425321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;EventEmitter的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的含义，对于每个事件EventEmitter支持若干个事件监听器。&lt;/p&gt;
&lt;p&gt;当事件触发时，注册到这个事件的监听器被依次调用，事件参数作为回调函数参数传递。&lt;/p&gt;
&lt;p&gt;简例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;event.js文件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; events = require('events'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; emitter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; events.EventEmitter();
emitter.on(&lt;/span&gt;'someEvent',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(arg1, arg2) {
    console.log(&lt;/span&gt;'listener1'&lt;span&gt;,arg1,arg2);
});
emitter.on(&lt;/span&gt;'someEvent',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(arg1, arg2) {
   console.log(&lt;/span&gt;'listener2'&lt;span&gt;,arg1,arg2); 
})
emitter.emit(&lt;/span&gt;'someEvent', 'arg1参数', 'arg2参数');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302210620864-200214674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在上述例子中，emitter为事件注册了两个监听器，然后触发了事件。这是最简单的EventEmitter的用法。&lt;/p&gt;
&lt;p&gt;EventEmitter提供了多个属性，如on用于事件绑定，emit用于触发一个事件。&lt;/p&gt;
&lt;p&gt;具体的&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-event.html&quot; target=&quot;_blank&quot;&gt;API&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;error事件&lt;/h3&gt;
&lt;p&gt;EventEmitter定义了一个特殊的事件error，它包含了错误的语义，我们在遇到异常时，通常会触发error事件。&lt;/p&gt;
&lt;p&gt;当error被触发时，EventEmitter规定如果没有响应的监听器，Node.js会把它当做异常，退出程序并输出错误信息。&lt;/p&gt;
&lt;p&gt;我们一般要为会触发error事件的对象设置监听器，避免出现错误后整个程序崩溃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302212134915-1536133053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于EventEmitter，&lt;/p&gt;
&lt;p&gt;我们大多时候只会在对象中继承它，包括fs、net、http在内的。只要是支持事件响应的核心模块都是EventEmitter的子类。原因有二：&lt;/p&gt;
&lt;p&gt;1.具有某个实体功能的对象实现事件符合语义，事件的监听和发生应该是一个对象的方法。&lt;/p&gt;
&lt;p&gt;2.js的对象机制是基于原型的，支持部分多继承，继承EventEmitter不会打乱对象原有的继承关系。&lt;/p&gt;
&lt;p&gt;注：补充：实践队列中出现一个未绑定事件会触发error事件，若未绑定error事件则程序抛出异常结束。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;js只有字符串数据类型，没有二进制数据类型。但是在处理流时，必须使用二进制数据，因此在Node.js中定义了Buffer类，该类用来创建一个专门存放二进制数据的缓存区。&lt;/p&gt;
&lt;h3&gt;Buffer与字符编码&lt;/h3&gt;
&lt;p&gt; Buffer实例一般用于表示编码字符的序列，比如UTF-8、UCS2、Base64、或者十六进制编码的数据，通过使用显式的字符编码，就可以在Buffer实例与普通的JavaScript字符串之间进行相互转换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
const buf = Buffer.from('runoob','ascii'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出72756e6f6f62&lt;/span&gt;
console.log(buf.toString('hex'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出cnVub29i&lt;/span&gt;
console.log(buf.toString('base64'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Node.js目前支持的字符编码包括：&lt;/p&gt;
&lt;p&gt;　　ascII　　仅支持7位ASCII数据。如果设置去掉高位的话，这种编码是非常快。&lt;/p&gt;
&lt;p&gt;　　utf8　　多字节编码的Unicode字符，许多网页和其他文档格式都使用UTF-8。&lt;/p&gt;
&lt;p&gt;　　utf16le　　2或4个字节，小字节编码的Unicode字符。支持代理对(U+100000至U+10FFF)。&lt;/p&gt;
&lt;p&gt;　　usc2　　utf16le的别名。&lt;/p&gt;
&lt;p&gt;　　base64　　Base64编码。&lt;/p&gt;
&lt;p&gt;　　latin1　　一种把Buffer编码成一字节编码的字符串的方式。&lt;/p&gt;
&lt;p&gt;　　binary　　Latin1的别名。&lt;/p&gt;
&lt;p&gt;　　hex　　将两个字节编码为两个十六进制字节。&lt;/p&gt;
&lt;h3&gt;创建Buffer类&lt;/h3&gt;
&lt;p&gt;Buffer提供了以下API创建Buffer类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302215307060-54121046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个长度为10、且用0填充的buffer&lt;/span&gt;
const buf1 = buffer.alloc(10&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个长度为10、且用0x1填充的buffer。&lt;/span&gt;
const buf2 = Buffer.alloc(10,1&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个长度为10、且未初始化的Buffer。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;这个方法比调用Buffer.alloc()更快。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;但返回的Buffer实例可能包含旧数据。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;因此需要使用fill()或write()重写。&lt;/span&gt;
const buf3 = Buffer.allocUnsafe(10&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个包含[0x1, 0x2, 0x3]的Buffer&lt;/span&gt;
const buf4 = Buffer.from([1,2,3&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。&lt;/span&gt;
const buf5 = Buffer.from('tést'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。&lt;/span&gt;
const buf6 = Buffer.from('tést', 'latin1');
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;写入缓冲区&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;写入Node缓冲区的语法如下所示：&lt;/p&gt;
&lt;p&gt;buf.write(string[, offset[, length]][,encoding])&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302220124225-1423341608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;根据encoding的字符编码写入string到buf中的offset位置。length参数是写入的字节数。如果buf没有足够的空间保存整个字符串，则只会写入string的一部分，只部分解码的字符不会被写入。&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;返回实际写入的大小。如果buffer空间不足，则只会写入部分字符串。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302220603297-98208885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;从缓存区读取数据&lt;/h3&gt;
&lt;p&gt;语法读取Node缓冲区数据的语法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
buf.toString([encoding[, start[,end]]])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302221227514-532726877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
buf = Buffer.alloc(26&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; 26; i++&lt;span&gt;) {
    buf[i] &lt;/span&gt;= i + 97&lt;span&gt;;
}

console.log(buf.toString(&lt;/span&gt;'ascii'));        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出：abcdefghijklmnopqrstuvwxyz&lt;/span&gt;
console.log(buf.toString('ascii', 0, 5));    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出: abcde&lt;/span&gt;
console.log(buf.toString('utf8', 0 ,5));    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出：abcde&lt;/span&gt;
console.log(buf.toString(undefined, 0, 5)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用 'utf8' 编码, 并输出: abcde&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302221758141-1743726569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;将Buffer转换为JSON对象&lt;/h3&gt;
&lt;p&gt;语法：将Node Buffer转换为JSON对象的函数语法格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
buf.toJSON()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当字符串化为一个Buffer实例时，JSON.stringify()会隐式地调用该toJson();&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302222133128-474749655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5&lt;span&gt;]);
const json &lt;/span&gt;=&lt;span&gt; JSON.stringify(buf);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}&lt;/span&gt;
&lt;span&gt;console.log(json);

const copy &lt;/span&gt;= JSON.parse(json, (key, value) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; value &amp;amp;&amp;amp; value.type === 'Buffer' ?&lt;span&gt;
    Buffer.from(value.data) :
    value;
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出: &amp;lt;Buffer 01 02 03 04 05&amp;gt;&lt;/span&gt;
console.log(copy);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302222306616-813254844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;缓冲区合并&lt;/h3&gt;
&lt;p&gt; 语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Buffer.concat(list[, totalLength])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223028977-206090415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; buffer1 = Buffer.from(('菜鸟教程'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer2 = Buffer.from(('www.runoob.com'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer3 =&lt;span&gt; Buffer.concat([buffer1,buffer2]);
console.log(&lt;/span&gt;&quot;buffer3 内容: &quot; + buffer3.toString());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223102931-1438788044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;缓冲区比较&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
buf.compare(otherBuffer);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223159931-1209654768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; buffer1 = Buffer.from('ABC'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer2 = Buffer.from('ABCD'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; buffer1.compare(buffer2);

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(result &amp;lt; 0&lt;span&gt;) {
   console.log(buffer1 &lt;/span&gt;+ &quot; 在 &quot; + buffer2 + &quot;之前&quot;&lt;span&gt;);
}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(result == 0&lt;span&gt;){
   console.log(buffer1 &lt;/span&gt;+ &quot; 与 &quot; + buffer2 + &quot;相同&quot;&lt;span&gt;);
}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
   console.log(buffer1 &lt;/span&gt;+ &quot; 在 &quot; + buffer2 + &quot;之后&quot;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;typ&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;lit&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223333041-232284911.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223859666-434478920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223915759-161903395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254811/201803/1254811-20180302223928764-1216016896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 14:40:00 +0000</pubDate>
<dc:creator>萌新啊萌新是我</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lilinzhiyu/p/8494264.html</dc:identifier>
</item>
<item>
<title>集成 solr6.5.1到 tomcat7（8） 中 （解决java.lang.NoSuchMethodError问题） - 思维焦点</title>
<link>http://www.cnblogs.com/xiezhidong/p/6906662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiezhidong/p/6906662.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣下载solr安装包&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣安装solr&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣solr应用部署到tomcat下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣配置web.xml&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;♣在&lt;/strong&gt;tomcat7&lt;/span&gt;启动&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;♣改为在tomcat8启动&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;♣在自带的Jetty里启动&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;♣建立第一个Core&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 安装环境：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526130833747-1794896415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1.下载.&lt;/strong&gt;  SOLR下载地址:&lt;a href=&quot;http://archive.apache.org/dist/lucene/solr/&quot; target=&quot;_blank&quot;&gt;http://archive.apache.org/dist/lucene/solr/&lt;/a&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   官网：&lt;a href=&quot;http://lucene.apache.org/solr/&quot; target=&quot;_blank&quot;&gt;http://lucene.apache.org/solr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526132257404-1632402839.png&quot; alt=&quot;&quot; width=&quot;728&quot; height=&quot;407&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 2.安装solr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2.1&lt;/strong&gt;  建立solrHome文件夹，路径随意，我的路径是&lt;span&gt;E:/javaEdit/solrHome&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2.2&lt;/strong&gt;  在solrHome中新建文件夹solrCore：&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;2.3&lt;/strong&gt;  从solr-6.5.1/server/solr下的把下面&lt;span&gt;三个文件&lt;/span&gt;copy到solrHome中，如下图:&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526015619904-399759326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526015758497-594263833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt; 2.4&lt;/strong&gt;将solr-6.5.1\server\solr\configsets\basic_configs下的conf文件夹copy到solrCore中，如下图&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526020502591-234269840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.solr应用部署到tomcat下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3.1&lt;/strong&gt;  在Tomcat文件夹webapps下，建立一个目录：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526001939247-1489044342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt; &lt;/strong&gt;拷贝Solr下面的server\solr-webapp\webapp里的所有文件到新建的目录下： &lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526002250888-2135854252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;3.2&lt;/strong&gt;添加需要的扩展依赖包&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3.2.1&lt;/strong&gt;从\solr-6.5.1\server\lib\ext下将所有的jar包复制到tomcat的webapps下的solr项目的lib目录中&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526020951919-457276455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;3.2.2&lt;/strong&gt;复制\solr-6.5.1\solr-6.5.1\server\lib下的metrics-先关的jar包到webapps下的solr项目中&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526021105529-806508083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;3.3添加log4j的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt;从\solr-6.5.1\server\resources下将log4j配置文件复制到tomcat的webapps下的classes文件夹中，classes文件夹没有则新建一个&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526021325591-1469072049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526021503997-1888864636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;4.配置web.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   配置web.xml指定solrHome的位置&lt;/p&gt;
&lt;p&gt;   打开apache-tomcat-7.0.70\webapps\solr\WEB-INF\web.xml&lt;/p&gt;
&lt;p&gt;   增加如下节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;env-entry&amp;gt;
       &amp;lt;env-entry-name&amp;gt;solr/home&amp;lt;/env-entry-name&amp;gt;
       &amp;lt;env-entry-value&amp;gt;E:/javaEdit/solrHome&amp;lt;/env-entry-value&amp;gt;
       &amp;lt;env-entry-type&amp;gt;java.lang.String&amp;lt;/env-entry-type&amp;gt;
    &amp;lt;/env-entry&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526004449950-1846619040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;5.启动tomcat7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   浏览器中输入： http://localhost/solr/index.html&lt;/p&gt;
&lt;p&gt;   若出现403的错误，修改solr项目中的web.xml，将169行左右的security-constraint代码注释掉&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526022139091-1532251998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526022148747-1439093354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    若出现错误：java.lang.NoSuchMethodError: javax.servlet.ServletInputStream.isFinished()Z&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526124211216-1754345727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;  是tomcat7的lib下的servlet-api.jar下没有该方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;由于solr5.5.0及其以上版本部署在tomcat7下的时候，会报&lt;/p&gt;

&lt;p&gt;    Java.lang.NoSuchMethodError: javax.servlet.ServletInputStream.isFinished()Z的错误，&lt;span&gt;&lt;strong&gt;&lt;span&gt;这个是serverlet3.1才有的方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;    最终搭配：solr5.5及其以上+tomcat8&lt;/p&gt;
&lt;p&gt;                  solr5.4及其以下+tomcat7&lt;/p&gt;
&lt;p&gt;    所以，只能&lt;span&gt;换tomcat8或者降solr版本到5.5以下了&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527004044919-1279317252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;改为在tomcat8下测试&lt;/strong&gt;&lt;/span&gt;，注意换tomcat的时候要在环境变量里的CATALINA_BASE和CATALINA_HOME&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526130508591-1927706813.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;/span&gt; 重启tomcat，浏览器中输入： http://localhost/solr/index.html ，可以看到solr界面，说明solr已经配置成功：&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170526123752185-1074867843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 6.&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;建立第一个Core&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;   &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;进入solr管理页面，点击左侧的core admin，然后点击add core，在name 和instanceDir下都输入solrCore，点击add core即可 &lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527120952544-574433731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 进入到solrHome/solrCore目录，此时会发现多了一个data文件夹和一个properties文件，如图&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527121001169-909833961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   solr界面, 在左侧即可看见刚刚建立的core &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/1036228/201705/1036228-20170527121009529-1616500678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Fri, 02 Mar 2018 14:36:00 +0000</pubDate>
<dc:creator>思维焦点</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiezhidong/p/6906662.html</dc:identifier>
</item>
<item>
<title>Java基础系列--集合之ArrayList - 唯一浩哥</title>
<link>http://www.cnblogs.com/V1haoge/p/8494618.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/V1haoge/p/8494618.html</guid>
<description>&lt;p&gt; 原创作品，可以转载，但是请标注出处地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Java基础系列--集合之ArrayList&quot; href=&quot;http://www.cnblogs.com/V1haoge/p/8494618.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/V1haoge/p/8494618.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一、概述&lt;/p&gt;
&lt;p&gt;　　ArrayList是Java集合体系中最常使用，也是最简单的集合类，是以数组实现的线性表。&lt;/p&gt;
&lt;p&gt;　　数组在内存中是以一段连续的内存来进行存放的，同样，ArrayList也是如此，初始化时可以指定初始容量，也可以以默认容量（10）创建底层数组，由于ArrayList属于可变长列表，采用可变数组实现，数组本身是不变的，一旦定义就无法变长，可变数组使用创建新数组拷贝旧数据的方式间接实现可变长，习惯称为扩容。&lt;/p&gt;
&lt;p&gt;　　ArrayList底层数组的扩容算法依据的是一个扩容算法来计算新的数组长度，扩容的条件是当前底层数组不足以容纳新的元素。&lt;/p&gt;
&lt;p&gt;二、继承结构 &lt;/p&gt;
&lt;p&gt;　　ArrayList的类结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302132419069-1720473261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三、底层实现&lt;/p&gt;
&lt;p&gt;3.1 底层结构&lt;/p&gt;
&lt;p&gt;　　如前所述，ArrayList底层采用的是数组结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Object[] elementData;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　elementData就是定义在ArrayList底层的数组，而数组就是一连串连续的内存，其逻辑结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302134147548-901544498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图表示初始容量为10的ArrayList的底层数组，默认的初始容量为10，而列表长度用size来定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个表示的是列表中元素的数量，与数组的长度不同，size默认为0，表示列表为空。&lt;/p&gt;
&lt;p&gt;3.2 添加元素&lt;/p&gt;
&lt;p&gt;　　初始化的ArrayList的底层数组是没有元素的，即数组的各位均为null。使用add方法我们可以为列表添加元素，ArrayList中的添加单个元素有两种方式，一种是直接添加，另一种是定位添加。还有添加一组元素的两种方法，一种是定组直接添加，一种是定位定组添加&lt;/p&gt;
&lt;p&gt;3.2.1 直接添加&lt;/p&gt;
&lt;p&gt;　　所谓直接添加就是将新元素添加到列表末尾，其实现逻辑如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         ensureCapacityInternal(size + 1);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount!!&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         elementData[size++] =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的逻辑很简单，首先进行列表容量检测（容后详述），然后直接将新元素放置到底层数组中即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302141105518-1628936795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中显示添加新元素到列表中，添加之后size的值会增加，这个size即指向数组最新空位的下标，有代表数组中元素的个数。&lt;/p&gt;
&lt;p&gt;3.2.2 定位添加&lt;/p&gt;
&lt;p&gt;　　所谓定位添加，就是我们将新元素，添加到列表指定下标处。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; add(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index, E element) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        rangeCheckForAdd(index);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         ensureCapacityInternal(size + 1);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount!!&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         System.arraycopy(elementData, index, elementData, index + 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                          size -&lt;span&gt; index);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         elementData[index] =&lt;span&gt; element;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         size++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，校验通过后进行列表容量检测（容后详述），然后将指定下标处开始到结尾的所以元素整体后移以为，下标处空出来后填充新添加的元素。这个添加操作涉及到一部分元素的整体移动，较为耗时，具体视实际移动的元素数量而定。&lt;/p&gt;
&lt;p&gt;　　实例：原始列表中由e1-e5共5个元素，现在执行add(2,e6)，表示在下标2处添加元素e6，执行步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302151817218-1636111289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：add(int,E)方法底层数组元素的后移操作采用的是System.arraycopy()方法实现的，不仅此处，后面还会多次使用这个方法来实现数组元素的拷贝。&lt;/p&gt;
&lt;p&gt;3.2.3 定组直接添加&lt;/p&gt;
&lt;p&gt;　　定组直接添加方法为：addAll(Collection&amp;lt;? extends E&amp;gt;)，直接将给定的集合中的元素依次添加到当前列表的后面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; addAll(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         Object[] a =&lt;span&gt; c.toArray();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numNew =&lt;span&gt; a.length;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         ensureCapacityInternal(size + numNew);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         System.arraycopy(a, 0&lt;span&gt;, elementData, size, numNew);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         size +=&lt;span&gt; numNew;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; numNew != 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行集合转化，将其转化为数组，获取其长度（元素个数），进行列表容量检测（容后详述），将转化好的数组元素复制到当前列表的底层数组后面，计算size。&lt;/p&gt;
&lt;p&gt;　　明显类似于直接添加，只是添加的数量不同而已，做个简单的图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302164415617-369555113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　只是这里讲给定的集合简化为数组形式，其实在源码中我们也能发现，在第2行对集合进行了数组转化，便于操作。元素的添加还是使用数组拷贝的形式实现。&lt;/p&gt;
&lt;p&gt;3.2.4 定位定组添加&lt;/p&gt;
&lt;p&gt; 　　定位定组添加类似于定位添加，同样只是添加的元素个数不同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; addAll(&lt;span&gt;int&lt;/span&gt; index, Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        rangeCheckForAdd(index);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         Object[] a =&lt;span&gt; c.toArray();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numNew =&lt;span&gt; a.length;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         ensureCapacityInternal(size + numNew);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size -&lt;span&gt; index;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (numMoved &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             System.arraycopy(elementData, index, elementData, index +&lt;span&gt; numNew,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                             numMoved);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         System.arraycopy(a, 0&lt;span&gt;, elementData, index, numNew);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         size +=&lt;span&gt; numNew;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; numNew != 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，然后将集合转化为数组，获取其中元素个数numNew，再进行列表容量检测，获取需要后移的元素的个数，使用数组复制的方式将这些元素后移，再将转化的数组元素复制迁移到空出的空位处。计算size。&lt;/p&gt;
&lt;p&gt;　　参照下方实例，原始列表有两个元素：e1、e2，现在给定集合包含3个元素，e3、e4、e5，现在执行add(1,Collection&amp;lt;? extends E&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302165426069-1797128005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　也就是将给定集合的元素嵌入到当前列表中。&lt;/p&gt;
&lt;p&gt; 3.3 获取元素&lt;/p&gt;
&lt;p&gt;　　获取指定下标处的元素，复杂度O(1)，只要获取数组执行下标处的元素就可以。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; E get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        rangeCheck(index);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; elementData(index);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，然后获取返回数组执行下标的元素。&lt;/p&gt;
&lt;p&gt;3.4 修改元素&lt;/p&gt;
&lt;p&gt;　　修改元素需要提供修改下标和新值，直接用新值替换旧值即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; E set(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index, E element) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        rangeCheck(index);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;         E oldValue =&lt;span&gt; elementData(index);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         elementData[index] =&lt;span&gt; element;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，然后保存指定下标的旧值，替换为新值，将旧值返回。&lt;/p&gt;
&lt;p&gt;3.5 删除元素&lt;/p&gt;
&lt;p&gt;　　删除元素的操作挺多的，针对不同的情况：&lt;/p&gt;
&lt;p&gt;3.5.1 定位删除&lt;/p&gt;
&lt;p&gt;　　定位删除，即删除指定下标的元素，需要提供删除的元素的下标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; E remove(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        rangeCheck(index);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         E oldValue =&lt;span&gt; elementData(index);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size - index - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (numMoved &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             System.arraycopy(elementData, index+1&lt;span&gt;, elementData, index,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                             numMoved);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         elementData[--size] = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let gc do its work　　&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先进行index参数校验，modCount自增1，保存指定下标处的旧值，然后将指定下标的下一个元素到结尾的元素整体前移一位，后面元素覆盖前面元素，指定下标处的旧值被删除，然后将原来的末尾元素置空，size自减1，最后将旧值返回。&lt;/p&gt;
&lt;p&gt;　　同样数组元素的移动采用数组复制的方式实现。&lt;/p&gt;
&lt;p&gt;　　实例：原始列表拥有5个元素，e1-e5，现移除下标2处的元素：remove(2)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302151453492-2143059901.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 3.5.2 定元素删除&lt;/p&gt;
&lt;p&gt;　　指定要删除的元素的值，在列表中查询该值，删除查询到的第一个。即该方法只会删除符合条件的首个元素（即使列表中存在多个符合条件的元素）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; remove(Object o) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; index = 0; index &amp;lt; size; index++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (elementData[index] == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                    fastRemove(index);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; index = 0; index &amp;lt; size; index++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(elementData[index])) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                    fastRemove(index);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; fastRemove(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size - index - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (numMoved &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             System.arraycopy(elementData, index+1&lt;span&gt;, elementData, index,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                             numMoved);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         elementData[--size] = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let gc do its work&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　指定元素进行删除的情况，较为复杂，需要针对元素的情况进行分析，如果指定元素为null，则删除第一个null元素，若指定元素非null，则查询首个符合条件的元素进行删除。&lt;/p&gt;
&lt;p&gt;　　欲删除元素，必须先找到要删除元素的下标，这个过程由循环实现（第3行和第9行），找到下标之后，调用内部方法fastRemove(int)，进行指定下标元素的删除，即定位删除，然后返回true，表示删除成功。&lt;/p&gt;
&lt;p&gt;　　还有一种情况那就是指定的元素在列表中查询不到，这是直接返回false即可。&lt;/p&gt;
&lt;p&gt;　　这种删除底层使用的仍然是定位删除。不在画图举例了。&lt;/p&gt;
&lt;p&gt; 3.5.3 定组删除&lt;/p&gt;
&lt;p&gt;　　所谓定组删除，就是删除当前列表中所以与给定集合中元素相同的元素，该操作需要制定一个欲要删除的元素的集合（Collection）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; removeAll(Collection&amp;lt;?&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; batchRemove(c, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; batchRemove(Collection&amp;lt;?&amp;gt; c, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; complement) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Object[] elementData = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.elementData;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; r = 0, w = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; modified = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (; r &amp;lt; size; r++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (c.contains(elementData[r]) ==&lt;span&gt; complement)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     elementData[w++] =&lt;span&gt; elementData[r];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Preserve behavioral compatibility with AbstractCollection,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; even if c.contains() throws.&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (r !=&lt;span&gt; size) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                System.arraycopy(elementData, r,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                                 elementData, w,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                                  size -&lt;span&gt; r);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 w += size -&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (w !=&lt;span&gt; size) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = w; i &amp;lt; size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     elementData[i] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 modCount += size -&lt;span&gt; w;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 size =&lt;span&gt; w;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 modified = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; modified;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　定组删除的complement传值为false，用于第11行比较，表示如果给定集合中不包含当前列表的当前下标的元素的情况下，执行内部语句块，将这个元素保留下来（亦即若包含该元素则不保留该元素，最后查遗补漏时，会将其消失【finally块逻辑】）&lt;/p&gt;
&lt;p&gt;实例：当前列表是包含5个元素e1-e5，给定集合元素包括e2,e3,e5三个元素，则定位删除的图示为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302161246108-30146776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从第二步开始循环，每次循环结束，r就会自增1，而w表示的是下一个保留元素的下标或者保留元素的个数。循环在第七步r自增到5，不满足循环条件时结束，最后r=5，w=2，亦即共删除3个元素，modCount需要自增（r-w=5-2=3）次。&lt;/p&gt;
&lt;p&gt;　　最后finally中执行第二个if块，将多余的元素位置置null，再计算modCount和size。&lt;/p&gt;
&lt;p&gt;3.5.4 定组保留删除&lt;/p&gt;
&lt;p&gt;　　定组保留删除逻辑与定组删除正好相反，需要将给定集合中包含的当前列表的元素保留下来，将不包含的删除。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; retainAll(Collection&amp;lt;?&amp;gt;&lt;span&gt; c) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; batchRemove(c, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　实例，同上，图示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/592104/201803/592104-20180302162939842-1837988788.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　执行过程同上。&lt;/p&gt;
&lt;p&gt;3.5.5 范围删除&lt;/p&gt;
&lt;p&gt;　　ArrayList中还有一个范围删除方法：removeRange(int,int)，根据给定的两个下标，删除下标范围之内的所有元素。该方法是protected修饰的，那么很明显，这个方法并不是面向ArrayList使用者的，而是面向JDK实现者的，这里只做简单介绍。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; removeRange(&lt;span&gt;int&lt;/span&gt; fromIndex, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; toIndex) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; numMoved = size -&lt;span&gt; toIndex;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        System.arraycopy(elementData, toIndex, elementData, fromIndex,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                         numMoved);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let gc do its work&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newSize = size - (toIndex-&lt;span&gt;fromIndex);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (size !=&lt;span&gt; newSize)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             elementData[--size] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　很简单，将toIndex到结尾的元素复制到fromIndex，空出的位置全部置空即可。&lt;/p&gt;
&lt;p&gt;3.6 查找元素&lt;/p&gt;
&lt;p&gt;　　查找元素包括3个方法：&lt;/p&gt;
&lt;p&gt;　　　　contains(Object)　　检查当前列表是否包含某个元素&lt;/p&gt;
&lt;p&gt;　　　　indexOf(Object)　　检查给定元素在当前列表中首次出现的下标&lt;/p&gt;
&lt;p&gt;　　　　lastIndexOf(Object)　　检查给定元素在当前列表中最后出现的下标&lt;/p&gt;
&lt;p&gt;3.6.1 包含方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; contains(Object o) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; indexOf(o) &amp;gt;= 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好家伙，自己啥也不干，就靠后面了...&lt;/p&gt;
&lt;p&gt;3.6.2 前序查找&lt;/p&gt;
&lt;p&gt;　　前序查找就是从头开始查找元素，返回首次出现的下标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; indexOf(Object o) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (elementData[i]==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(elementData[i]))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　源码显示，需要分两种情况考虑，如果给定元素为null，则查找首个null元素的下标并返回，如果给定元素非null，则查找首次出现的下标并返回，如果列表中不包含该元素，则返回-1。&lt;/p&gt;
&lt;p&gt;3.6.3 后序查找&lt;/p&gt;
&lt;p&gt; 　　后序查找就是前序查找的反向查找方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; lastIndexOf(Object o) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = size-1; i &amp;gt;= 0; i--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (elementData[i]==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = size-1; i &amp;gt;= 0; i--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(elementData[i]))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　参考前后查找的源码不难发现，模式一致，只是查找的方向不同而已。&lt;/p&gt;
&lt;p&gt;3.7 列表扩容&lt;/p&gt;
&lt;p&gt;　　列表的扩容是底层自动进行的，对列表的使用者是完全透明的，因此其方法都是私有的。扩容的条件与算法并不复杂：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ensureCapacityInternal(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         modCount++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow-conscious code&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (minCapacity - elementData.length &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            grow(minCapacity);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; grow(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow-conscious code&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; elementData.length;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newCapacity - minCapacity &amp;lt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             newCapacity =&lt;span&gt; minCapacity;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             newCapacity =&lt;span&gt; hugeCapacity(minCapacity);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; minCapacity is usually close to size, so this is a win:&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         elementData =&lt;span&gt; Arrays.copyOf(elementData, newCapacity);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; hugeCapacity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (minCapacity &amp;lt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OutOfMemoryError();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (minCapacity &amp;gt; MAX_ARRAY_SIZE) ?
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            Integer.MAX_VALUE :
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            MAX_ARRAY_SIZE;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　扩容条件：拿给定的容量（长度值）minCapacity与当前列表的底层数组的容量elementData.length进行比较，如果前者大，则说明容量不足，需要扩容，调用grow(minCapacity)进行扩容。&lt;/p&gt;
&lt;p&gt;　　扩容算法：扩容时存在三种情况，第一种就是普通的自动扩容，按照oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1&lt;span data-mce-=&quot;&quot;&gt;)算法进行扩容，上式计算得出的即为新的数组容量，一般针对的是单个元素添加的情况，即直接添加和定位添加的情况，这种情况下，每次只添加一个元素，不会出现第14行成功的可能，但是如果是定组直接添加和定位定组添加的时候，由于添加的集合元素数量未知，一旦给定的minCapacity比计算得出的新容量要大，说明计算得出的容量不足以容纳所有的元素，这是直接使用minCapacity作为新容量进行扩容。即优先使用算法计算的容量进行扩容，一旦计算容量还不足以容纳新元素，则使用给定的容量进行扩容。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　还有一种特殊情况，当本次扩容时，计算得到的容量，或者给定的容量大于MAX_ARRAY_SIZE（=Integer.MAX_VALUE - 8）的情况下，需要调用hugeCapacity(minCapacity)方法进行人为限制容量超限，将容量限制在整形的最大值之内。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　最后进行数组扩容，创建新数组，拷贝数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;3.8 迭代器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　列表的迭代必不可少，而且这里还会用到一个出现很久的变量modCount，此前我们对它一无所知。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　modCount记录的是列表结构发生变化的次数，所谓结构变化包括：新增元素，删除元素，清空元素，扩容等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　ArrayList的迭代器有两种，ListIterator和Iterator。二者虽然都是迭代器，但是还是有些不同的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;（待续）&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 13:44:00 +0000</pubDate>
<dc:creator>唯一浩哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/V1haoge/p/8494618.html</dc:identifier>
</item>
<item>
<title>Docker容器技术 - 酷酷的二连长</title>
<link>http://www.cnblogs.com/lyq863987322/p/8494969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyq863987322/p/8494969.html</guid>
<description>&lt;h2&gt;什么是容器&lt;/h2&gt;
&lt;p&gt;Linux容器是与系统其他部分隔离开的一系列进程，从另一个系统镜像运行，并由该镜像提供支持进程所需的全部文件。&lt;/p&gt;
&lt;p&gt;容器镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://www.redhat.com/zh/topics/containers/whats-a-linux-container&quot; target=&quot;_blank&quot;&gt;https://www.redhat.com/zh/topics/containers/whats-a-linux-container&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;容器就是虚拟化吗？&lt;/h3&gt;
&lt;p&gt;虚拟化使得许多操作系统可同时在单个系统上运行。&lt;/p&gt;
&lt;p&gt;容器只能共享操作系统内核,将应用进程与系统其他部分,隔离开。&lt;/p&gt;
&lt;h2&gt;容器和虚拟化的区别&lt;/h2&gt;
&lt;p&gt;linux容器技术，容器虚拟化和kvm虚拟化的区别&lt;/p&gt;
&lt;p&gt;kvm虚拟化：需要硬件的支持，需要模拟硬件，可以运行不同的操作系统，启动时间分钟级(开机启动流程)&lt;/p&gt;
&lt;p&gt;容器虚拟化：不需要硬件的支持。不需要模拟硬件，共用宿主机的内核，启动时间秒级(没有开机启动流程)&lt;/p&gt;
&lt;p&gt;容器总结：&lt;/p&gt;
&lt;p&gt;（1）与宿主机使用同一个内核，性能损耗小；&lt;/p&gt;
&lt;p&gt;（2）不需要指令级模拟；&lt;/p&gt;
&lt;p&gt;（3）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；&lt;/p&gt;
&lt;p&gt;（4）避免了准虚拟化和系统调用替换中的复杂性；&lt;/p&gt;
&lt;p&gt;（5）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302170949527-1632146782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;chroot技术，新建一个子系统&lt;/h2&gt;
&lt;p&gt;chroot，即 change root directory (更改 root 目录)。在 linux 系统中，系统默认的目录结构都是以 `/`，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为 `/` 位置。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-cn-chroot/&quot; target=&quot;_blank&quot;&gt;https://www.ibm.com/developerworks/cn/linux/l-cn-chroot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用chroot监狱限制SSH用户访问指定目录和使用指定命令：&lt;a href=&quot;https://linux.cn/article-8313-1.html&quot; target=&quot;_blank&quot;&gt;https://linux.cn/article-8313-1.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;lxc部署&lt;/h2&gt;
&lt;p&gt;Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。&lt;/p&gt;
&lt;h3&gt;安装lxc&lt;/h3&gt;
&lt;p&gt;需要使用epel源&lt;/p&gt;
&lt;p&gt;#安装epel源&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
yum install epel-release -y
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;#编译epel源配置文件&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
vi  /etc/yum.repos.d/&lt;span&gt;epel.repo
[epel]
name&lt;/span&gt;=Extra Packages &lt;span&gt;for&lt;/span&gt; Enterprise Linux &lt;span&gt;7&lt;/span&gt; -&lt;span&gt; $basearch
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch&lt;/span&gt;&lt;span&gt;
#mirrorlist&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.fedoraproject.org/metalink?repo=epel-7&amp;amp;arch=$basearch&lt;/span&gt;&lt;span&gt;
failovermethod&lt;/span&gt;=&lt;span&gt;priority
enabled&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgcheck&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=file:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7&lt;/span&gt;
&lt;span&gt;
[epel&lt;/span&gt;-&lt;span&gt;debuginfo]
name&lt;/span&gt;=Extra Packages &lt;span&gt;for&lt;/span&gt; Enterprise Linux &lt;span&gt;7&lt;/span&gt; - $basearch -&lt;span&gt; Debug
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch/debug&lt;/span&gt;&lt;span&gt;
#mirrorlist&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;amp;arch=$basearch&lt;/span&gt;&lt;span&gt;
failovermethod&lt;/span&gt;=&lt;span&gt;priority
enabled&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=file:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7&lt;/span&gt;&lt;span&gt;
gpgcheck&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

[epel&lt;/span&gt;-&lt;span&gt;source]
name&lt;/span&gt;=Extra Packages &lt;span&gt;for&lt;/span&gt; Enterprise Linux &lt;span&gt;7&lt;/span&gt; - $basearch -&lt;span&gt; Source
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMS&lt;/span&gt;&lt;span&gt;
#mirrorlist&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;amp;arch=$basearch&lt;/span&gt;&lt;span&gt;
failovermethod&lt;/span&gt;=&lt;span&gt;priority
enabled&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=file:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7&lt;/span&gt;&lt;span&gt;
gpgcheck&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;##安装lxc&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
yum install lxc-* -&lt;span&gt;y
yum install libcgroup&lt;/span&gt;* -&lt;span&gt;y
yum install bridge&lt;/span&gt;-utils.x86_64 -y
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;交接网卡&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@controller ~]# cat /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;eth0 
TYPE&lt;/span&gt;=&lt;span&gt;Ethernet
BOOTPROTO&lt;/span&gt;=&lt;span&gt;none
NAME&lt;/span&gt;=&lt;span&gt;eth0
DEVICE&lt;/span&gt;=&lt;span&gt;eth0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
BRIDGE&lt;/span&gt;=&lt;span&gt;br0

[root@controller &lt;/span&gt;~]# cat /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;br0 
TYPE&lt;/span&gt;=&lt;span&gt;Bridge
BOOTPROTO&lt;/span&gt;=&lt;span&gt;static&lt;/span&gt;&lt;span&gt;
NAME&lt;/span&gt;=&lt;span&gt;br0
DEVICE&lt;/span&gt;=&lt;span&gt;br0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
IPADDR&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;&lt;span&gt;
NETMASK&lt;/span&gt;=&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;
GATEWAY&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;&lt;span&gt;
DNS1&lt;/span&gt;=&lt;span&gt;223.5&lt;/span&gt;.&lt;span&gt;5.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改lxc默认配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vi /etc/lxc/&lt;span&gt;default&lt;/span&gt;&lt;span&gt;.conf
修改第2行为：lxc.network.link &lt;/span&gt;= br0
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动cgroup服务&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;systemctl enable cgconfig.service
systemctl start cgconfig.service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建lxc容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;方法1:
lxc&lt;/span&gt;-create -t download -n centos7 -- --server mirrors.tuna.tsinghua.edu.cn/lxc-images -d centos -r &lt;span&gt;7&lt;/span&gt; -&lt;span&gt;a amd64
方法2：
lxc&lt;/span&gt;-create -t centos -n test
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;为容器指定ip和网关&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vi /&lt;span&gt;var&lt;/span&gt;/lib/lxc/centos7/&lt;span&gt;config
lxc.network.name &lt;/span&gt;=&lt;span&gt; eth0
lxc.network.ipv4 &lt;/span&gt;= &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.111&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;&lt;span&gt;
lxc.network.ipv4.gateway &lt;/span&gt;= &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
lxc-start -n centos7
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;lxc实操&lt;/h3&gt;
&lt;p&gt;#查看虚拟机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker opt]# lxc-&lt;span&gt;ls   
centos7  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改子系统root密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker opt]# chroot /&lt;span&gt;var&lt;/span&gt;/lib/lxc/centos7/&lt;span&gt;rootfs passwd    
Changing password &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; user root. 
New password: 
BAD PASSWORD: The password &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; shorter than &lt;span&gt;8&lt;/span&gt;&lt;span&gt; characters
Retype &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; password: 
passwd: all authentication tokens updated successfully.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动子系统&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker opt]# lxc-start -&lt;span&gt;n centos7   
systemd &lt;/span&gt;&lt;span&gt;219&lt;/span&gt; running &lt;span&gt;in&lt;/span&gt; system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +&lt;span&gt;IDN)
Detected virtualization lxc.
Detected architecture x86&lt;/span&gt;-&lt;span&gt;64&lt;/span&gt;&lt;span&gt;.

Welcome to CentOS Linux &lt;/span&gt;&lt;span&gt;7&lt;/span&gt; (Core)!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检测&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@docker ~]# lxc-&lt;span&gt;checkconfig     
Kernel configuration not found at &lt;/span&gt;/proc/&lt;span&gt;config.gz; searching...
Kernel configuration found at &lt;/span&gt;/boot/config-&lt;span&gt;3.10&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;327&lt;/span&gt;&lt;span&gt;.el7.x86_64
&lt;/span&gt;--- Namespaces ---&lt;span&gt;
Namespaces: enabled
Utsname &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
Ipc &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
Pid &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
User &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
newuidmap &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; not installed
newgidmap &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; not installed
Network &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;: enabled
Multiple &lt;/span&gt;/dev/&lt;span&gt;pts instances: enabled

&lt;/span&gt;--- Control groups ---&lt;span&gt;
Cgroup: enabled
Cgroup clone_children flag: enabled
Cgroup device: enabled
Cgroup sched: enabled
Cgroup cpu account: enabled
Cgroup memory controller: enabled
Cgroup cpuset: enabled

&lt;/span&gt;--- Misc ---&lt;span&gt;
Veth pair device: enabled
Macvlan: enabled
Vlan: enabled
Bridges: enabled
Advanced netfilter: enabled
CONFIG_NF_NAT_IPV4: enabled
CONFIG_NF_NAT_IPV6: enabled
CONFIG_IP_NF_TARGET_MASQUERADE: enabled
CONFIG_IP6_NF_TARGET_MASQUERADE: enabled
CONFIG_NETFILTER_XT_TARGET_CHECKSUM: enabled

&lt;/span&gt;--- Checkpoint/Restore ---&lt;span&gt;
checkpoint restore: enabled
CONFIG_FHANDLE: enabled
CONFIG_EVENTFD: enabled
CONFIG_EPOLL: enabled
CONFIG_UNIX_DIAG: enabled
CONFIG_INET_DIAG: enabled
CONFIG_PACKET_DIAG: enabled
CONFIG_NETLINK_DIAG: enabled
File capabilities: enabled

Note : Before booting a &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; kernel, you can check its configuration
usage : CONFIG&lt;/span&gt;=/path/to/config /usr/bin/lxc-checkconfig
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Docker是通过内核虚拟化技术（namespaces及cgroups cpu、内存、磁盘io等）来提供容器的资源隔离与安全保障等。由于Docker通过操作系统层的虚拟化实现隔离，所以Docker容器在运行时，不需要类似虚拟机（VM）额外的操作系统开销，提高资源利用率。&lt;/p&gt;
&lt;p&gt;docker的主要目标是&quot;Build,Ship and Run any App,Angwhere&quot;,构建，运输，处处运行&lt;/p&gt;
&lt;p&gt;构建：做一个docker镜像&lt;/p&gt;
&lt;p&gt;运输：docker pull&lt;/p&gt;
&lt;p&gt;运行：启动一个容器&lt;/p&gt;
&lt;p&gt;每一个容器，他都有自己的文件系统rootfs.&lt;/p&gt;
&lt;p&gt;kvm解决了硬件和操作系统之间的依赖&lt;/p&gt;
&lt;p&gt;docker解决了软件和操作系统环境之间的依赖，能够让独立服务或应用程序在不同的环境中，得到相同的运行结果。&lt;/p&gt;
&lt;p&gt;docker容器是一种轻量级、可移植、自包含的软件打包技术，使应用程序可以在几乎任何地方以相同的方式运行。开发人员在自己笔记本上创建并测试好的容器，无需任何修改就能够在生产系统的虚拟机、物理服务器或公有云主机上运行。&lt;/p&gt;
&lt;h2&gt;Docker的部署&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
wget -O /etc/yum.repos.d/docker-ce.repo https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;
&lt;span&gt;
sed &lt;/span&gt;-i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s#download.docker.com#mirrors.ustc.edu.cn/docker-ce#g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/yum.repos.d/docker-&lt;span&gt;ce.repo

yum install docker&lt;/span&gt;-ce -y
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;docker的主要组成部分&lt;/h3&gt;
&lt;p&gt;docker是传统的CS架构分为docker client和docker server,向mysql一样&lt;/p&gt;
&lt;p&gt;命令：docker version&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@controller ~&lt;span&gt;]# docker version 
Client:
 Version:    &lt;/span&gt;&lt;span&gt;17.12&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;ce
 API version:    &lt;/span&gt;&lt;span&gt;1.35&lt;/span&gt;&lt;span&gt;
 Go version:    go1.&lt;/span&gt;&lt;span&gt;9.2&lt;/span&gt;&lt;span&gt;
 Git commit:    c97c6d6
 Built:    Wed Dec &lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; &lt;span&gt;2017&lt;/span&gt;&lt;span&gt;
 OS&lt;/span&gt;/Arch:    linux/&lt;span&gt;amd64

Server:
 Engine:
  Version:    &lt;/span&gt;&lt;span&gt;17.12&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;ce
  API version:    &lt;/span&gt;&lt;span&gt;1.35&lt;/span&gt; (minimum version &lt;span&gt;1.12&lt;/span&gt;&lt;span&gt;)
  Go version:    go1.&lt;/span&gt;&lt;span&gt;9.2&lt;/span&gt;&lt;span&gt;
  Git commit:    c97c6d6
  Built:    Wed Dec &lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;46&lt;/span&gt; &lt;span&gt;2017&lt;/span&gt;&lt;span&gt;
  OS&lt;/span&gt;/Arch:    linux/&lt;span&gt;amd64
  Experimental:    &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;设置docker远程执行&lt;/h3&gt;
&lt;p&gt;systemd详解：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html&quot; target=&quot;_blank&quot;&gt;http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;在linux-node1设置&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /usr/lib/systemd/system/&lt;span&gt;docker.service
ExecStart&lt;/span&gt;=/usr/bin/dockerd -H unix:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;var/run/docker.sock -H tcp://10.0.0.11:2375&lt;/span&gt;
&lt;br/&gt;systemctl daemon-&lt;span&gt;reload
systemctl restart docker.service
&lt;br/&gt;ps &lt;/span&gt;-ef检查
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;在linux-node2设置&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
wget -O /etc/yum.repos.d/docker-ce.repo https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;
&lt;span&gt;
sed &lt;/span&gt;-i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s#download.docker.com#mirrors.ustc.edu.cn/docker-ce#g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/yum.repos.d/docker-&lt;span&gt;ce.repo

yum install docker&lt;/span&gt;-ce -&lt;span&gt;y

docker &lt;/span&gt;-H &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt; info 　　　　&lt;span&gt;---  远程执行 info 展示docker的信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker主要组件有：镜像、容器、仓库&lt;/p&gt;
&lt;h4&gt;启动第一个容器&lt;/h4&gt;
&lt;p&gt;命令：docker run -d -p 80:80 nginx&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; nginx
Unable to find image &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nginx:latest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; locally
latest: Pulling &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; library/&lt;span&gt;nginx
e7bb522d92ff: Pull complete 
6edc05228666: Pull complete 
cd866a17e81f: Pull complete 
Digest: sha256:285b49d42c703fdf257d1e2422765c4ba9d3e37768d6ea83d7fe2043dad6e63d
Status: Downloaded newer image &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; nginx:latest
e1cb110a537622e4a5c885161bca69478adc5d218e6eb4e0307c7fe0c1350012
&lt;span&gt;#run： 创建并运行一个容器，
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;#-d：放在后台
#-p：端口映射
#80:80：前面是宿主机的，后面是容器的
#nginx：镜像的名字&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;docker的镜像管理&lt;/h2&gt;
&lt;h3&gt;搜索镜像&lt;/h3&gt;
&lt;p&gt;命令：docker search&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker search centos
NAME&lt;span&gt;（镜像名）&lt;/span&gt;     DESCRIPTION&lt;span&gt;（说明）&lt;/span&gt;             STARS&lt;span&gt;（送心数）&lt;/span&gt;  OFFICIAL&lt;span&gt;（是否是官方的）&lt;/span&gt;    AUTOMATED&lt;span&gt;（是否自动）&lt;/span&gt;
centos             The official build of CentOS.   &lt;/span&gt;&lt;span&gt;3992&lt;/span&gt;               [OK]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;获取镜像&lt;/h3&gt;
&lt;p&gt;命令：docker pull&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker pull centos   &lt;span&gt; ---&lt;/span&gt;&lt;span&gt;&lt;span&gt; 拉取一个镜像centos（不指定版本默认为最新版，只写名字默认在官方拉取）&lt;/span&gt;
Using &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; tag: latest
latest: Pulling &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; library/&lt;span&gt;centos
af4b0a2388c6: Pull complete 
Digest: sha256:2671f7a3eea36ce43609e9fe7435ade83094291055f1c96d9d1d1d7c0b986a5d
Status: Downloaded newer image &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; centos:latest
[root@docker&lt;/span&gt;-node1 ~&lt;span&gt;]# docker images 
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos              latest              ff426288ea90        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; weeks ago         207MB
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; weeks ago         108MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拉取非官网的镜像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191022981-394457539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191107875-321530900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191122762-1878215836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302191153498-1632356332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker pull index.tenxcloud.com/tenxcloud/httpd:&lt;span&gt;2.4&lt;/span&gt;
&lt;span&gt;2.4&lt;/span&gt;: Pulling &lt;span&gt;from&lt;/span&gt; tenxcloud/&lt;span&gt;httpd
8b87079b7a06: Downloading  &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;.53MB/&lt;span&gt;51&lt;/span&gt;&lt;span&gt;.36MB
a3ed95caeb02: Download complete 
0c30bf087cf7: Download complete 
79f2be53847c: Downloading  &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;.14MB/&lt;span&gt;11&lt;/span&gt;&lt;span&gt;.7MB
7063c4b35837: Download complete 
5c27df81ae71: Download complete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;镜像加速&lt;/h3&gt;
&lt;p&gt;镜像加速器：阿里云加速器，daocloud加速器，中科大加速器，Docker 中国官方镜像加速：https://registry.docker-cn.com&lt;/p&gt;
&lt;p&gt;镜像加速配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vi /etc/docker/&lt;span&gt;daemon.json
{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;registry-mirrors&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://registry.docker-cn.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第三方docker镜像仓库，使用方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker pull index.tenxcloud.com/tenxcloud/httpd:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;镜像操作&lt;/h3&gt;
&lt;h4&gt;查看镜像 &lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker images
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;删除镜像&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker rmi  &lt;span&gt;例子：docker image rm centos:latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker ~&lt;span&gt;]# docker image rm centos:latest &lt;span&gt;（名字：版本）&lt;/span&gt;
Untagged: centos:latest
Untagged: centos@sha256:2671f7a3eea36ce43609e9fe7435ade83094291055f1c96d9d1d1d7c0b986a5d
Deleted: sha256:ff426288ea903fcf8d91aca97460c613348f7a27195606b45f19ae91776ca23d
Deleted: sha256:e15afa4858b655f8a5da4c4a41e05b908229f6fab8543434db79207478511ff7
[root@docker &lt;/span&gt;~&lt;span&gt;]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; weeks ago         108MB
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;导出镜像&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker save  &lt;span&gt;例子：docker image save centos &amp;gt; docker-centos7.4.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker ~]# docker image save centos &amp;gt; docker-centos7.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz
[root@docker &lt;/span&gt;~]# ls docker-centos7.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz
docker&lt;/span&gt;-centos7.&lt;span&gt;4&lt;/span&gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;导入镜像&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker load  &lt;span&gt;例子：docker image load -i docker-centos7.4.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker ~]# docker image load -i docker-centos7.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz 
e15afa4858b6: Loading layer  &lt;/span&gt;&lt;span&gt;215&lt;/span&gt;.8MB/&lt;span&gt;215&lt;/span&gt;&lt;span&gt;.8MB
Loaded image: centos:latest
[root@docker &lt;/span&gt;~&lt;span&gt;]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos              latest              ff426288ea90        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; weeks ago         207MB
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; weeks ago         108MB
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;查看镜像详细信息&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6c9cf415-b929-45c7-a505-f7a88bea194c')&quot; readability=&quot;64.5&quot;&gt;&lt;img id=&quot;code_img_closed_6c9cf415-b929-45c7-a505-f7a88bea194c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6c9cf415-b929-45c7-a505-f7a88bea194c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6c9cf415-b929-45c7-a505-f7a88bea194c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6c9cf415-b929-45c7-a505-f7a88bea194c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;124&quot;&gt;
&lt;pre&gt;
[root@docker ~&lt;span&gt;]# docker image inspect centos
[
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:ff426288ea903fcf8d91aca97460c613348f7a27195606b45f19ae91776ca23d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RepoTags&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;centos:latest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RepoDigests&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Comment&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Created&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-08T19:58:27.63047329Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dd31c81a4b47b90a14cf6d1c7389465060e390f12a0b71189d181a0458d8443f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ContainerConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dd31c81a4b47&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Domainname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStderr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StdinOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cmd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#(nop) &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CMD [\&quot;/bin/bash\&quot;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ArgsEscaped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:5a28642a68c5af8083107fca9ffbc025179211209961eae9b1f40f928331fa90&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Volumes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WorkingDir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Entrypoint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnBuild&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build-date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20180107&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GPLv2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS Base Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            }
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DockerVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;17.06.2-ce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Domainname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStderr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StdinOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cmd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ArgsEscaped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:5a28642a68c5af8083107fca9ffbc025179211209961eae9b1f40f928331fa90&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Volumes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WorkingDir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Entrypoint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnBuild&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build-date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20180107&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GPLv2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS Base Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vendor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CentOS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            }
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Architecture&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;amd64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Os&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;207191530&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VirtualSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;207191530&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GraphDriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docker-8:2-667845-6de21ff18b07a4a121111b78d105af3ae3d1eccf0d5bcf3dff957e3640a79dac&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10737418240&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;devicemapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RootFS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Layers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:e15afa4858b655f8a5da4c4a41e05b908229f6fab8543434db79207478511ff7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ]
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastTagTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0001-01-01T00:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
    }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看镜像详细信息&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;Docker的容器管理&lt;/h2&gt;
&lt;h3&gt;启动一个容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看启动的容器（两种方法）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;3&lt;/span&gt; hours          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;-&amp;gt;&lt;span&gt;80&lt;/span&gt;/&lt;span&gt;tcp   inspiring_euler

[root@docker&lt;/span&gt;-node1 ~&lt;span&gt;]# docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;3&lt;/span&gt; hours          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;-&amp;gt;&lt;span&gt;80&lt;/span&gt;/tcp   inspiring_euler
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;显示所有状态的容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker ps -&lt;span&gt;a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS                NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Up &lt;span&gt;3&lt;/span&gt; hours               &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;-&amp;gt;&lt;span&gt;80&lt;/span&gt;/&lt;span&gt;tcp   inspiring_euler
e1cb110a5376        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Exited (&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;3&lt;/span&gt; hours ago                        thirsty_brattain
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只显示容器id&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker ps -a -&lt;span&gt;q
7cef098bebc7
75516b38df19&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;查看容器ip&lt;/h3&gt;
&lt;p&gt;docker container inspect id或name&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9f0b1d14-03e1-4c3b-83ce-b125ab322b2e')&quot; readability=&quot;109&quot;&gt;&lt;img id=&quot;code_img_closed_9f0b1d14-03e1-4c3b-83ce-b125ab322b2e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9f0b1d14-03e1-4c3b-83ce-b125ab322b2e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9f0b1d14-03e1-4c3b-83ce-b125ab322b2e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9f0b1d14-03e1-4c3b-83ce-b125ab322b2e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;213&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker container inspect 75516b38df19
[
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Created&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-31T12:12:06.387035752Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Args&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;daemon off;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Running&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Paused&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Restarting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OOMKilled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dead&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;19388&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExitCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StartedAt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-31T12:12:06.710448922Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FinishedAt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0001-01-01T00:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sha256:3f8a4339aadda5897b744682f5f774dc69991a81af8d715d37a616bb4c99edf5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ResolvConfPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/resolv.conf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostnamePath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostsPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/hosts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogPath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/docker/containers/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3/75516b38df194d00fbb2d5ce51316f621f76a1037a0fdf1d578d14498a68d8a3-json.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/inspiring_euler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestartCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;devicemapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Platform&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MountLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ProcessLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppArmorProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExecIDs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Binds&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ContainerIDFile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json-file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {}
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetworkMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PortBindings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80/tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                    {
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostIp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                ]
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestartPolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MaximumRetryCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AutoRemove&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VolumeDriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;VolumesFrom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CapAdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CapDrop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DnsOptions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DnsSearch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtraHosts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GroupAdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IpcMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shareable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cgroup&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Links&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OomScoreAdj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PidMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Privileged&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PublishAllPorts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReadonlyRootfs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecurityOpt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTSMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UsernsMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ShmSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;67108864&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Runtime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;runc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsoleSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Isolation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuShares&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Memory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NanoCpus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CgroupParent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioWeight&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioWeightDevice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceReadBps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceWriteBps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceReadIOps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlkioDeviceWriteIOps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuPeriod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuQuota&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuRealtimePeriod&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuRealtimeRuntime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpusetCpus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpusetMems&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Devices&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceCgroupRules&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DiskQuota&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KernelMemory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MemoryReservation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MemorySwap&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MemorySwappiness&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OomKillDisable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PidsLimit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ulimits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CpuPercent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IOMaximumIOps&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IOMaximumBandwidth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GraphDriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;docker-8:2-667845-d7559a9d1629b837315264d5191776a3583b745cbb270be66f15126659ea266d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10737418240&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;devicemapper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mounts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;75516b38df19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Domainname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStdout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AttachStderr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExposedPorts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80/tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {}
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenStdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StdinOnce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Env&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NGINX_VERSION=1.13.8-1~stretch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NJS_VERSION=1.13.8.0.1.15-1~stretch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cmd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;daemon off;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ArgsEscaped&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Volumes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WorkingDir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Entrypoint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OnBuild&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Labels&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maintainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NGINX Docker Maintainers &amp;lt;docker-maint@nginx.com&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StopSignal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SIGTERM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetworkSettings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bridge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SandboxID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;33eb47f2321af718ee6a7564f8ae8c9841719051efebb2dfdb8a206d19e83004&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HairpinMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LinkLocalIPv6Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LinkLocalIPv6PrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ports&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80/tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                    {
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostIp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HostPort&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                ]
            },
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SandboxKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/run/docker/netns/33eb47f2321a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecondaryIPAddresses&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecondaryIPv6Addresses&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EndpointID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a4a179b29fb9cda0c6332579460dddc5fbc6e7f29dd5608ae9f5742701d4202e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6PrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPPrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPv6Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MacAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;02:42:ac:11:00:02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Networks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bridge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPAMConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Links&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Aliases&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetworkID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12e101b4dd9dd0078bab6ed9ce9aaf2d7cca2e00e4a66b5629f088732d6698d0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EndpointID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a4a179b29fb9cda0c6332579460dddc5fbc6e7f29dd5608ae9f5742701d4202e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;172.17.0.2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPPrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IPv6Gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GlobalIPv6PrefixLen&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MacAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;02:42:ac:11:00:02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DriverOpts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
                }
            }
        }
    }
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查看容器&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;停止容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;docker container stop id或name
docker container &lt;/span&gt;&lt;span&gt;kill&lt;/span&gt; id或name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~&lt;span&gt;]# docker container stop 75516b38df19
75516b38df19
[root@docker&lt;/span&gt;-node1 ~]# docker container &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[root@docker&lt;/span&gt;-node1 ~]# docker &lt;span&gt;ps&lt;/span&gt; -&lt;span&gt;a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
75516b38df19        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Exited (&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;10&lt;/span&gt;&lt;span&gt; seconds ago                       inspiring_euler
e1cb110a5376        nginx               &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nginx -g 'daemon of…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;3&lt;/span&gt; hours ago         Exited (&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;3&lt;/span&gt; hours ago                          thirsty_brattain
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：docker容器内的第一个进程必须一直处于前台运行的状态，否则这个容器，就会处于退出状态！&lt;/p&gt;
&lt;h3&gt;删除已关闭的容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker container &lt;span&gt;rm&lt;/span&gt;&lt;span&gt; e1cb110a5376
e1cb110a5376&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;批量删除：&lt;/p&gt;
&lt;p&gt;docker rm -f `docker ps -a -q`    -- 强制删除全部，包括启动中的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker &lt;span&gt;rm&lt;/span&gt; `docker &lt;span&gt;ps&lt;/span&gt; -a -&lt;span&gt;q`    &lt;span&gt;#只删除关闭状态的&lt;/span&gt;
7cef098bebc7
75516b38df19&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;交互式进入容器，分配终端&lt;/h3&gt;
&lt;p&gt;docker run -it nginx:latest /bin/bash&lt;/p&gt;
&lt;p&gt;-i -t：--interactive --tty（直接进入容器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker run -it nginx:latest /bin/&lt;span&gt;bash
root@7cef098bebc7:&lt;/span&gt;/# &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
bin   dev  home  lib64    mnt  proc  run     srv  tmp  var
boot  etc  lib     media    opt  root  sbin  sys  usr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;进入容器的方法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 opt]# docker run -it --&lt;span&gt;name erlianzhang centos:latest 
[root@b07f6aad08cd &lt;/span&gt;/]#
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;进入到存活的容器中&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker ~&lt;span&gt;]# docker attach erlianzhang 
[root@b07f6aad08cd &lt;/span&gt;/]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exec方式必须指定起始命令 --- 推荐使用exec&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker ~]# docker exec -it erlianzhang /bin/&lt;span&gt;bash
[root@abcadd1250cb &lt;/span&gt;/]# &lt;span&gt;ps&lt;/span&gt; -&lt;span&gt;ef
UID         PID   PPID  C STIME TTY          TIME CMD
root          &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;14&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /bin/&lt;span&gt;bash
root         &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt; pts/&lt;span&gt;1&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /bin/&lt;span&gt;bash
root         &lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;13&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt; pts/&lt;span&gt;1&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; &lt;span&gt;ps&lt;/span&gt; -ef
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：进入容器中第一个命令一定要让容器夯住，否则会变成退出状态&lt;/p&gt;
&lt;p&gt;暂时退出容器：ctrl+p，ctrl+q&lt;/p&gt;
&lt;p&gt;回到容器：docker attach id或name&lt;/p&gt;
&lt;h2&gt;docker容器的网络访问&lt;/h2&gt;
&lt;p&gt;指定映射&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    -&lt;span&gt;p hostPort:containerPort
    &lt;/span&gt;-&lt;span&gt;p ip:hostPort:containerPort 
    &lt;/span&gt;-&lt;span&gt;p ip::containerPort
    &lt;/span&gt;-&lt;span&gt;p hostPort:containerPort:udp
    &lt;/span&gt;-p &lt;span&gt;81&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; –p &lt;span&gt;443&lt;/span&gt;:&lt;span&gt;443&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随机映射&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
docker run -P
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操&lt;/p&gt;
&lt;p&gt;docker run -d -p 888:80 nginx:latest&lt;/p&gt;
&lt;p&gt;docker run -d -p 10.0.0.11:80:80 nginx:latest&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 opt]# docker run -d -p &lt;span&gt;888&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; nginx:latest 
1b177e8c6357ed08ddabb745b902a4e577e8c25e154a4b891dfa900b108dd4bd
[root@docker&lt;/span&gt;-node1 opt]# netstat -&lt;span&gt;lntup
Active Internet connections (only servers)
Proto Recv&lt;/span&gt;-Q Send-Q Local Address           Foreign Address         State       PID/&lt;span&gt;Program name    
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1406&lt;/span&gt;/&lt;span&gt;sshd           
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;2375&lt;/span&gt;          &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;19206&lt;/span&gt;/&lt;span&gt;dockerd       
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;22&lt;/span&gt;                   :::*                    LISTEN      &lt;span&gt;1406&lt;/span&gt;/&lt;span&gt;sshd           
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;888&lt;/span&gt;                  :::*                    LISTEN      &lt;span&gt;21455&lt;/span&gt;/docker-proxy  
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;docker的数据卷管理&lt;/h2&gt;
&lt;p&gt;数据卷(文件或目录)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
    -v /&lt;span&gt;data
    &lt;/span&gt;-v src:dst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据卷容器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
    --volumes-from
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实操：挂载数据卷在容器宿主机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 opt]# docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; -v /data:/usr/share/nginx/&lt;span&gt;html nginx:latest
884b2c093c5c59897bd55b0dcec36c882abdc99134f8fffed4cb5decda17327d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建数据卷&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker-node1 data]# docker volume &lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
DRIVER              VOLUME NAME
local               qingge&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;手动将容器保存为镜像（制作镜像）&lt;/h2&gt;
&lt;p&gt;命令：docker commit&lt;/p&gt;
&lt;h3&gt;特权容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run --privileged  -ti -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container=docker&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  -v /sys/fs/cgroup:/sys/fs/cgroup  centos:latest  /usr/sbin/init
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;保存为镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# docker commit ebfdf46f9f12 centos6-&lt;span&gt;ssh&lt;/span&gt;&lt;span&gt;
sha256:b917ca49263af6d4435dc3c144c214af29c56dad7256e4de7978ffd9a7e24f39
[root@docker&lt;/span&gt;-node1 ~&lt;span&gt;]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
centos6&lt;/span&gt;-&lt;span&gt;ssh&lt;/span&gt;         latest              b917ca49263a        &lt;span&gt;5&lt;/span&gt;&lt;span&gt; seconds ago       315MB
httpd               &lt;/span&gt;&lt;span&gt;2.4&lt;/span&gt;                 2e202f453940        &lt;span&gt;5&lt;/span&gt;&lt;span&gt; days ago          179MB
centos              latest              ff426288ea90        &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; weeks ago         207MB
nginx               latest              3f8a4339aadd        &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; weeks ago         108MB
centos              &lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;                 6704d778b3ba        &lt;span&gt;2&lt;/span&gt; months ago        195MB
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;dockerfile自动构建docker镜像&lt;/h2&gt;
&lt;p&gt;dockerfile主要组成部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    基础镜像信息       FROM：centos:&lt;span&gt;6.8&lt;/span&gt;&lt;span&gt;
    制作镜像操作指令   RUN &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; openssh-server -&lt;span&gt;y
    容器启动时执行指令 CMD [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dockerfile常用指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    FROM        &lt;span&gt;这个镜像的妈妈是谁？  （指定基础镜像）&lt;/span&gt;
    MAINTAINER &lt;span&gt; 告诉别人，谁负责养它？（指定维护者信息，可以没有）&lt;/span&gt;
    RUN         &lt;span&gt;你想让它干啥         （在命令前面加上RUN即可）&lt;/span&gt;
    ADD         &lt;span&gt;给它点创业资金       （COPY文件，会自动解压）&lt;/span&gt;
    WORKDIR     &lt;span&gt;我是cd,今天刚化了妆  （设置当前工作目录）&lt;/span&gt;
    VOLUME      &lt;span&gt;给它一个存放行李的地方（设置卷，挂载主机目录）&lt;/span&gt;
    EXPOSE      &lt;span&gt;它要打开的门是啥     （指定对外的端口）&lt;/span&gt;
    CMD         &lt;span&gt;奔跑吧，兄弟！       （指定容器启动后的要干的事情）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dockerfile其他指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    COPY             &lt;span&gt;复制文件&lt;/span&gt;
    ENV             &lt;span&gt; 环境变量&lt;/span&gt;
    ENTRYPOINT       &lt;span&gt;容器启动后执行的命令&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;此处在CMD处执行的是一个脚本，脚本内容大致是开启ssh服务并让ssh服务夯住，参数是-D，开启httpd服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# &lt;span&gt;cat&lt;/span&gt; /opt/base/&lt;span&gt;Dockerfile 
FROM centos:&lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;&lt;span&gt;
RUN &lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;wget&lt;/span&gt; &lt;span&gt;unzip&lt;/span&gt; php* httpd openssh-server -&lt;span&gt;y
RUN cd &lt;/span&gt;/var/www/html/ &amp;amp;&amp;amp; &lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;static.kodcloud.com/update/download/kodexplorer4.25.zip &amp;amp;&amp;amp; unzip kodexplorer4.25.zip &lt;/span&gt;
RUN &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root:123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;|&lt;span&gt;chpasswd
RUN &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ServerName 127.0.0.1:80&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;gt;&amp;gt;/etc/httpd/conf/&lt;span&gt;httpd.conf
RUN &lt;/span&gt;/etc/init.d/&lt;span&gt;sshd start
RUN &lt;/span&gt;&lt;span&gt;chmod&lt;/span&gt; -Rf &lt;span&gt;777&lt;/span&gt; /var/www/html/&lt;span&gt;
RUN &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s#Options Indexes FollowSymLinks#Options FollowSymLinks#g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/httpd/conf/httpd.conf -&lt;span&gt;i
COPY init.&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt; /init.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
EXPOSE &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;/&lt;span&gt;tcp
EXPOSE &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;/&lt;span&gt;tcp
CMD [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/init.sh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
[root@docker&lt;/span&gt;-node1 ~]# ll /opt/base/&lt;span&gt;
total &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;528&lt;/span&gt; Feb  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;06&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;&lt;span&gt; Dockerfile
&lt;/span&gt;-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;82&lt;/span&gt; Feb  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt; init.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
[root@docker&lt;/span&gt;-node1 ~]# docker image build -t centos6-yun .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker image build -t centos6-yun /opt/base/Dockerfile&lt;/p&gt;
&lt;p&gt;docker image build -t 指定一个自动构建的镜像标签 Dockerfile文件路径&lt;/p&gt;
&lt;p&gt;参考其他的dockerfile&lt;/p&gt;
&lt;p&gt;官方dockerfile或者时速云镜像广场&lt;/p&gt;
&lt;h2&gt;容器间的互联&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    docker run -d -p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; nginx
    docker run &lt;/span&gt;-it --link quirky_brown:web01 qstack/centos-&lt;span&gt;ssh&lt;/span&gt; /bin/&lt;span&gt;bash
    &lt;/span&gt;&lt;span&gt;ping&lt;/span&gt; web01
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用docker运行zabbix-server&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
docker run --name mysql-server -&lt;span&gt;t \
      &lt;/span&gt;-e MYSQL_DATABASE=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_USER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_ROOT_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-d mysql:&lt;span&gt;5.7&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;--character-set-server=utf8 --collation-server=&lt;span&gt;utf8_bin

docker run &lt;/span&gt;--name zabbix-java-gateway -&lt;span&gt;t \
      &lt;/span&gt;-d zabbix/zabbix-java-&lt;span&gt;gateway:latest

docker run &lt;/span&gt;--name zabbix-server-mysql -&lt;span&gt;t \
      &lt;/span&gt;-e DB_SERVER_HOST=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql-server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_DATABASE=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_USER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_ROOT_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e ZBX_JAVAGATEWAY=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix-java-gateway&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;--link mysql-&lt;span&gt;server:mysql \
      &lt;/span&gt;--link zabbix-java-gateway:zabbix-java-&lt;span&gt;gateway \
      &lt;/span&gt;-p &lt;span&gt;10051&lt;/span&gt;:&lt;span&gt;10051&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-d zabbix/zabbix-server-&lt;span&gt;mysql:latest

docker run &lt;/span&gt;--name zabbix-web-nginx-mysql -&lt;span&gt;t \
      &lt;/span&gt;-e DB_SERVER_HOST=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql-server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_DATABASE=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_USER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zabbix_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-e MYSQL_ROOT_PASSWORD=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root_pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;--link mysql-&lt;span&gt;server:mysql \
      &lt;/span&gt;--link zabbix-server-mysql:zabbix-&lt;span&gt;server \
      &lt;/span&gt;-p &lt;span&gt;80&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;&lt;span&gt; \
      &lt;/span&gt;-d zabbix/zabbix-web-nginx-mysql:latest
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;普通的registry&lt;/h2&gt;
&lt;h3&gt;启动registry容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker run -d -p &lt;span&gt;5000&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; --restart=always --name registry -v /opt/myregistry:/var/lib/registry  registry
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改配置文件&lt;/h3&gt;
&lt;p&gt;/etc/docker/daemon.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;registry-mirrors&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://registry.docker-cn.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insecure-registries&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.0.0.11:5000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&quot;insecure-registries&quot;: [&quot;10.0.0.11:5000&quot;]   &lt;span&gt;---- 将https转换成http&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;重启docker服务&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
systemctl restart docker.service
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;为镜像打标签&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker tag centos6-yun:latest &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-yun:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;push推送镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-yun:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;带basic认证的registry&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; /opt/registry-var/auth/ -&lt;span&gt;p
htpasswd  &lt;/span&gt;-Bbn oldboy &lt;span&gt;123456&lt;/span&gt;  &amp;gt;&amp;gt; /opt/registry-var/auth/&lt;span&gt;htpasswd
docker run &lt;/span&gt;-d -p &lt;span&gt;5000&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; -v /opt/registry-var/auth/:/auth/ -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH=htpasswd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;实操&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; httpd-tools.x86_64 -&lt;span&gt;y

[root@docker&lt;/span&gt;-node1 ~]# &lt;span&gt;mkdir&lt;/span&gt; /opt/registry-var/auth/ -&lt;span&gt;p
ASSWD_PATH&lt;/span&gt;=/auth/htpasswd registry&lt;br/&gt;[root@docker-node1 ~]# htpasswd  -Bbn erlianzhang &lt;span&gt;123456&lt;/span&gt; d&amp;gt;&amp;gt; /opt/registry-var/auth/&lt;span&gt;htpassw 
[root@docker&lt;/span&gt;-node1 ~]# docker run -d -p &lt;span&gt;5000&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt; -v /opt/registry-var/auth/:/auth/ -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH=htpasswd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/&lt;span&gt;htpasswd registry
589820e671fa51114bf9ccf143375bce7351a80f7035e571f4e8524a1096edbb
[root@docker&lt;/span&gt;-node1 ~]# docker &lt;span&gt;ps&lt;/span&gt;&lt;span&gt; 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
589820e671fa        registry            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/entrypoint.sh /etc…&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;11&lt;/span&gt; seconds ago      Up &lt;span&gt;11&lt;/span&gt; seconds       &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;-&amp;gt;&lt;span&gt;5000&lt;/span&gt;/&lt;span&gt;tcp   confident_visvesvaraya
[root@docker&lt;/span&gt;-node1 ~]# docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-yun:latest   &lt;span&gt;---&lt;/span&gt;&lt;span&gt;&lt;span&gt; 不验证就不能上传&lt;/span&gt;
The push refers to repository [&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-&lt;span&gt;yun]
f8508dc392c8: Preparing 
f85b7909a4bc: Preparing 
8b2d1868cde8: Preparing 
ad87982f4b1b: Preparing 
ac521dbe8cd3: Preparing 
3d169f2d5cff: Waiting 
6bad9d62f12a: Waiting 
f28db075daf0: Waiting 
e00c9229b481: Waiting 
no basic auth credentials
[root@docker&lt;/span&gt;-node1 ~]# docker &lt;span&gt;login&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;    &lt;span&gt;---&lt;/span&gt;&lt;span&gt;&lt;span&gt; 验证一下&lt;/span&gt;
Username: erlianzhang
Password: 
Login Succeeded
[root@docker&lt;/span&gt;-node1 ~]# docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-&lt;span&gt;yun:latest  &lt;span&gt; --- 再次上传就可以了&lt;/span&gt;
The push refers to repository [&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;5000&lt;/span&gt;/erlianzhang/centos6-&lt;span&gt;yun]
f8508dc392c8: Pushed 
f85b7909a4bc: Pushed 
8b2d1868cde8: Pushed 
ad87982f4b1b: Pushed 
ac521dbe8cd3: Pushed 
3d169f2d5cff: Pushed 
6bad9d62f12a: Pushed 
f28db075daf0: Pushed 
e00c9229b481: Pushed 
latest: digest: sha256:46e0409381ef7c5922bc5c37b5888015ab415c0e7248e463323db361318e93bf size: &lt;/span&gt;&lt;span&gt;2205&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;验证&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# &lt;span&gt;cat&lt;/span&gt; .docker/&lt;span&gt;config.json 
{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;auths&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.0.0.11:5000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;auth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b2xkYm95OjEyMzQ1Ng==&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HttpHeaders&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Docker-Client/17.12.0-ce (linux)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;docker-compose简介&lt;/h2&gt;
&lt;p&gt;一句话：docker-compose是用来做docker的多容器控制&lt;/p&gt;
&lt;h3&gt;docker-compose 是什么&lt;/h3&gt;
&lt;p&gt;docker-compose是一个用来把docker自动化的东西。&lt;/p&gt;
&lt;p&gt;有了docker-compose你可以把所有繁复的docker操作全都一条命令，自动化的完成。&lt;/p&gt;
&lt;p&gt;详细指令参考：&lt;a href=&quot;https://www.jianshu.com/p/2217cfed29d7&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/2217cfed29d7&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装python环境&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y python2-pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;详细指令：&lt;a href=&quot;http://www.jianshu.com/p/2217cfed29d7&quot; target=&quot;_blank&quot;&gt;http://www.jianshu.com/p/2217cfed29d7&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;配置pip加速&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker-node1 ~]# &lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; .pip
[root@docker&lt;/span&gt;-node1 ~]# vim ~/.pip/&lt;span&gt;pip.conf
[global]
index&lt;/span&gt;-url = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/pypi/simple/&lt;/span&gt;
&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt;]
trusted&lt;/span&gt;-host=&lt;span&gt;mirrors.aliyun.com&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip &lt;span&gt;install&lt;/span&gt; docker-compose
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;配置文件&lt;/h2&gt;
&lt;p&gt;该配置文件是部署wordpress博客网站的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd my_wordpress/
&lt;span&gt;vi&lt;/span&gt; docker-compose.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
version: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

services:
   db:
     image: mysql:&lt;/span&gt;&lt;span&gt;5.7&lt;/span&gt;&lt;span&gt;
     volumes:
       &lt;/span&gt;- /data/db_data:/var/lib/&lt;span&gt;mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       &lt;/span&gt;-&lt;span&gt; db
     image: wordpress:latest
     volumes:
       &lt;/span&gt;- /data/web_data:/var/www/&lt;span&gt;html
     ports: 
       &lt;/span&gt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8000:80&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;启动服务&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#启动
docker&lt;/span&gt;-&lt;span&gt;compose up
#后台启动
docker&lt;/span&gt;-compose up -d
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;灰度重启容器，防止因为更新业务全部关闭容器&lt;/p&gt;
&lt;h2&gt;安装haproxy&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; haproxy -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;p&gt;vi /etc/haproxy/haproxy.cfg&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;global
    log         &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt; local2
    &lt;/span&gt;&lt;span&gt;chroot&lt;/span&gt;      /var/lib/&lt;span&gt;haproxy
    pidfile     &lt;/span&gt;/var/run/&lt;span&gt;haproxy.pid
    maxconn     &lt;/span&gt;&lt;span&gt;4000&lt;/span&gt;&lt;span&gt;
    user        haproxy
    group       haproxy
    daemon
    stats socket &lt;/span&gt;/var/lib/haproxy/&lt;span&gt;stats level admin
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http&lt;/span&gt;-server-&lt;span&gt;close
    option forwardfor       except &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
    option                  redispatch
    retries                 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    timeout http&lt;/span&gt;-&lt;span&gt;request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http&lt;/span&gt;-keep-&lt;span&gt;alive 10s
    timeout check           10s
    maxconn                 &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
listen stats
    mode http
    bind &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;8888&lt;/span&gt;&lt;span&gt;
    stats enable
    stats uri     &lt;/span&gt;/haproxy-&lt;span&gt;status 
    stats auth    admin:&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;
frontend frontend_www_example_com
    bind &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;8000&lt;/span&gt;&lt;span&gt;
    mode http
    option httplog
    log global
    default_backend backend_www_example_com
backend backend_www_example_com
    option forwardfor header X&lt;/span&gt;-REAL-&lt;span&gt;IP
    option httpchk HEAD &lt;/span&gt;/ HTTP/&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
    balance roundrobin
    server web&lt;/span&gt;-node1  &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;32768&lt;/span&gt; check inter &lt;span&gt;2000&lt;/span&gt; rise &lt;span&gt;30&lt;/span&gt; fall &lt;span&gt;15&lt;/span&gt;&lt;span&gt;
    server web&lt;/span&gt;-node2  &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.11&lt;/span&gt;:&lt;span&gt;32769&lt;/span&gt; check inter &lt;span&gt;2000&lt;/span&gt; rise &lt;span&gt;30&lt;/span&gt; fall &lt;span&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动服务&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
systemctl start haproxy
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;安装socat&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; socat.x86_64 -&lt;span&gt;y
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;disable server backend_www_example_com/web-node3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;|socat stdio /var/lib/haproxy/&lt;span&gt;stats
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enable server backend_www_example_com/web-node3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;|socat stdio /var/lib/haproxy/stats
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用测试页测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
    &amp;lt;&lt;span&gt;head&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;PHP测试&amp;lt;/title&amp;gt;
    &amp;lt;/&lt;span&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;?php  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;Hello World &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; ?&amp;gt;
        &amp;lt;?php  &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问的服务器地址是:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;fontcolor=red&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$_SERVER[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SERVER_ADDR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/font&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问的服务器域名是:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;fontcolor=red&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$_SERVER[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SERVER_NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/font&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;?&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302202024055-1443649308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;不为容器配置任何网络功能，没有网络 --net=none&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Container&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;与另一个运行中的容器共享Network Namespace，--net=container:containerID&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;与主机共享Network Namespace，--net=host&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;16%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Bridge&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Docker设计的NAT网络模型&lt;strong&gt;（默认类型）&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt;默认docker网络隔离基于网络命名空间，在物理机上创建docker容器时会为每一个docker容器分配网络命名空间，并且把容器IP桥接到物理机的虚拟网桥上。&lt;/p&gt;
&lt;h2&gt;不为容器配置网络功能 &lt;/h2&gt;
&lt;p&gt;此模式下创建容器是不会为容器配置任何网络参数的，如：容器网卡、IP、通信路由等，全部需要自己去配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# docker run  -it --network none busybox:latest  /bin/&lt;span&gt;sh&lt;/span&gt; 
/&lt;span&gt; # ip a
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; qdisc noqueue 
    link&lt;/span&gt;/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;
    inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;与其他容器共享网络配置(Container）&lt;/h2&gt;
&lt;p&gt;此模式和host模式很类似，只是此模式创建容器共享的是其他容器的IP和端口而不是物理机，此模式容器自身是不会配置网络和端口，创建此模式容器进去后，你会发现里边的IP是你所指定的那个容器IP并且端口也是共享的，而且其它还是互相隔离的，如进程等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# docker run  -it --network container:mywordpress_db_1  busybox:latest  /bin/&lt;span&gt;sh&lt;/span&gt; 
/&lt;span&gt; # ip a
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; qdisc noqueue 
    link&lt;/span&gt;/loopback &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; brd &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;
    inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt; scope host lo
       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;: eth0@if106: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&amp;gt; mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt; qdisc noqueue 
    link&lt;/span&gt;/ether &lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:ac:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;03&lt;/span&gt;&lt;span&gt; brd ff:ff:ff:ff:ff:ff
    inet &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;0.3&lt;/span&gt;/&lt;span&gt;16&lt;/span&gt; brd &lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;255.255&lt;/span&gt;&lt;span&gt; scope global eth0
       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;使用宿主机网络&lt;/h2&gt;
&lt;p&gt;此模式创建的容器没有自己独立的网络命名空间，是和物理机共享一个Network Namespace，并且共享物理机的所有端口与IP，并且这个模式认为是不安全的。、&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# docker run  -it --network host  busybox:latest  /bin/&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看网络列表&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker01 ~&lt;span&gt;]# docker network list 
NETWORK ID          NAME                  DRIVER              SCOPE
b15e8a720d3b        bridge                bridge              local
345d65b4c2a0        host                  host                local
bc5e2a32bb55        mywordpress_default   bridge              local
ebf76eea91bb        none                  &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;                local
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;用PIPEWORK为docker容器配置独立IP&lt;/h2&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;http://blog.csdn.net/design321/article/details/48264825&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/design321/article/details/48264825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方网站：&lt;a href=&quot;https://github.com/jpetazzo/pipework&quot; target=&quot;_blank&quot;&gt;https://github.com/jpetazzo/pipework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;宿主环境：centos7.2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、安装pipework&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/jpetazzo/pipework/archive/master.zip&lt;/span&gt;
&lt;span&gt;unzip&lt;/span&gt; master.&lt;span&gt;zip&lt;/span&gt;
&lt;span&gt;cp&lt;/span&gt; pipework-master/pipework  /usr/local/bin/
&lt;span&gt;chmod&lt;/span&gt; +x /usr/local/bin/pipework
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、配置网桥连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装桥接工具&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; bridge-utils.x86_64 -y
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;修改网卡配置，实现桥接&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;# 修改eth0配置，让br0实现桥接&lt;/span&gt;
[root@docker01 &lt;/span&gt;~]# &lt;span&gt;cat&lt;/span&gt; /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;eth0
TYPE&lt;/span&gt;=&lt;span&gt;Ethernet
BOOTPROTO&lt;/span&gt;=&lt;span&gt;static
NAME&lt;/span&gt;=&lt;span&gt;eth0
DEVICE&lt;/span&gt;=&lt;span&gt;eth0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
BRIDGE&lt;/span&gt;=&lt;span&gt;br0

[root@docker01 &lt;/span&gt;~]# &lt;span&gt;cat&lt;/span&gt; /etc/sysconfig/network-scripts/ifcfg-&lt;span&gt;br0
TYPE&lt;/span&gt;=&lt;span&gt;Bridge
BOOTPROTO&lt;/span&gt;=&lt;span&gt;static
NAME&lt;/span&gt;=&lt;span&gt;br0
DEVICE&lt;/span&gt;=&lt;span&gt;br0
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
IPADDR&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;&lt;span&gt;
NETMASK&lt;/span&gt;=&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.0&lt;/span&gt;&lt;span&gt;
GATEWAY&lt;/span&gt;=&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;&lt;span&gt;
DNS1&lt;/span&gt;=&lt;span&gt;223.5&lt;/span&gt;.&lt;span&gt;5.5&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
# 重启网络&lt;/span&gt;
[root@docker01 &lt;/span&gt;~]# /etc/init.d/network restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、运行一个容器镜像测试：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pipework br0 $(docker run -d -it -p &lt;span&gt;6880&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; --name  httpd_pw httpd) &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在其他主机上测试端口及连通性&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# curl &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;span&gt;
[root@docker01 &lt;/span&gt;~]# &lt;span&gt;ping&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt; -c &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
PING &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt; (&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;) &lt;span&gt;56&lt;/span&gt;(&lt;span&gt;84&lt;/span&gt;&lt;span&gt;) bytes of data.
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; bytes from &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.220&lt;/span&gt;: icmp_seq=&lt;span&gt;1&lt;/span&gt; ttl=&lt;span&gt;64&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;=&lt;span&gt;0.043&lt;/span&gt; ms
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、再运行一个容器，设置网路类型为none&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pipework br0 $(docker run -d -it --net=none --name test httpd:&lt;span&gt;2.4&lt;/span&gt;) &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.221&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;进行访问测试&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 ~]# curl &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.221&lt;/span&gt;
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;strong&gt;、重启容器后需要再次指定：&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pipework br0 testduliip  &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.113&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.1&lt;/span&gt;&lt;span&gt;
pipework br0 testduliip01  &lt;/span&gt;&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.112&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;@&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;146.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Docker跨主机通信之macvlan&lt;/h2&gt;
&lt;h3&gt;创建macvlan网络&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker network create --driver macvlan --subnet &lt;span&gt;10.1&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt; --gateway &lt;span&gt;10.1&lt;/span&gt;.&lt;span&gt;0.254&lt;/span&gt; -o parent=eth0 macvlan_1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;设置eth0的网卡为混杂模式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ip link set eth0 promisc on
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;创建使用macvlan网络的容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -it --network macvlan_1 --ip=&lt;span&gt;10.1&lt;/span&gt;.&lt;span&gt;0.210&lt;/span&gt; busybox:latest /bin/&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基于macvlan网络，还存有overlay网络&lt;/p&gt;
&lt;p&gt;Dcoker跨主机通信之overlay 参考文档：&lt;a href=&quot;http://www.cnblogs.com/CloudMan6/p/7270551.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/CloudMan6/p/7270551.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302205803829-1874030209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;Harbor 是一个企业级的 Docker Registry，可以实现 images 的私有存储和日志统计权限控制等功能，并支持创建多项目(Harbor 提出的概念)，基于官方 Registry V2 实现。 通过地址：&lt;a href=&quot;https://github.com/vmware/harbor/releases&quot; target=&quot;_blank&quot;&gt;https://github.com/vmware/harbor/releases&lt;/a&gt; 可以下载最新的版本。  官方提供了两种版本：在线版和离线版。&lt;/p&gt;
&lt;h2&gt;安装步骤&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;容器管理&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 harbor]# pwd
/opt/harbor
[root@docker01 harbor]# docker-compose stop
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第一步：安装docker和docker-compose&lt;/h3&gt;
&lt;p&gt;下载harbor-offline-installer-v1.3.0.tgz&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd /opt &amp;amp;&amp;amp; https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.3.0.tgz
tar xf harbor-offline-installer-v1.3.0.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第二步：修改主机及web界面密码&lt;/h3&gt;
&lt;p&gt;修改harbor.cfg配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@docker01 harbor]# vim harbor.cfg 
    ···
    &lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt; = &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;&lt;span&gt;
    harbor_admin_password &lt;/span&gt;=&lt;span&gt; 123456
    ···&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第三步：执行install.sh&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@docker01 harbor]# ./&lt;span&gt;install&lt;/span&gt;.&lt;span&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;第四步：web登陆测试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302204959846-613224933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201803/1234532-20180302204448705-678832972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 镜像推送到仓库的指定项目&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@docker02 ~]# docker  tag centos:&lt;span&gt;6.8&lt;/span&gt;  &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
[root@docker02 &lt;/span&gt;~&lt;span&gt;]#  
[root@docker02 &lt;/span&gt;~&lt;span&gt;]# docker images 
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
busybox                     latest              5b0d59026729        &lt;/span&gt;&lt;span&gt;8&lt;/span&gt; days ago          &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.15MB
&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;   &lt;span&gt;1.0&lt;/span&gt;                 6704d778b3ba        &lt;span&gt;2&lt;/span&gt;&lt;span&gt; months ago        195MB
centos                      &lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;                 6704d778b3ba        &lt;span&gt;2&lt;/span&gt;&lt;span&gt; months ago        195MB
[root@docker02 &lt;/span&gt;~]# docker &lt;span&gt;login&lt;/span&gt; &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;&lt;span&gt;
Username: admin
Password: 
Login Succeeded&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;推送镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@docker02 ~]# docker push &lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;&lt;span&gt; 
The push refers to repository [&lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.100&lt;/span&gt;/clsn/centos6.&lt;span&gt;8&lt;/span&gt;&lt;span&gt;]
e00c9229b481: Pushing  &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;.53MB/&lt;span&gt;194&lt;/span&gt;.5MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 转载注明出处，写这篇很累！！！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 12:55:00 +0000</pubDate>
<dc:creator>酷酷的二连长</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyq863987322/p/8494969.html</dc:identifier>
</item>
</channel>
</rss>