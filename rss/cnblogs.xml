<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python3.6及以上pip安装pymssql错误的解决办法 - 帆帆Evan</title>
<link>http://www.cnblogs.com/Evan-fanfan/p/9377903.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Evan-fanfan/p/9377903.html</guid>
<description>&lt;p&gt;只有由于Python3.6装不上 pymssql，所以一直用Python3.5的版本。&lt;/p&gt;
&lt;p&gt;报错界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030143/201807/1030143-20180727152727183-1269495659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在有了新的解决方法：&lt;/p&gt;
&lt;p&gt;原帖如下： &lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/connect/python/pymssql/step-1-configure-development-environment-for-pymssql-python-development&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/sql/connect/python/pymssql/step-1-configure-development-environment-for-pymssql-python-development&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来翻译一下具体步骤： &lt;br/&gt;1.安装python和pip(这一步不需要做) &lt;br/&gt;2.从下面的网址下载合适版本的pymssql模块 &lt;/p&gt;
&lt;p&gt; https://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql&lt;/p&gt;
&lt;p&gt;我的Python是64位的所以下载的是&lt;/p&gt;
&lt;p&gt;3.打开cmd &lt;br/&gt;4.&lt;/p&gt;
&lt;p&gt;1）在cmd中进入你下载的pymssql模块文件夹。&lt;/p&gt;
&lt;p&gt;cd C:\Users\xcey1\Downloads&lt;/p&gt;
&lt;p&gt;2）然后再用pip安装&lt;/p&gt;
&lt;p&gt;pip install pymssql-2.1.4.dev5-cp37-cp37m-win_amd64.whl&lt;/p&gt;
&lt;p&gt;我的安装过程如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030143/201807/1030143-20180727153447949-1555552506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 至此Pymssql已经安装成功！&lt;/p&gt;
</description>
<pubDate>Fri, 27 Jul 2018 07:36:00 +0000</pubDate>
<dc:creator>帆帆Evan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Evan-fanfan/p/9377903.html</dc:identifier>
</item>
<item>
<title>javascript基本类型和引用类型 - 大众美男典范</title>
<link>http://www.cnblogs.com/best-xiaoqiang/p/9377746.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/best-xiaoqiang/p/9377746.html</guid>
<description>&lt;h2&gt;javascript赋值&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;赋值就是把某一个值赋给变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;我凭什么要把值赋给变量？&lt;/h3&gt;
&lt;p&gt;变量相当于名字。&lt;/p&gt;
&lt;p&gt;拿我举例，如果我没有名字，当别人叫我帮忙的时候，就只能说：&lt;/p&gt;
&lt;p&gt;“那个个头不高、颜值爆表、头发很硬、坐在角落的小哥哥，过来帮我一下呗！”&lt;/p&gt;
&lt;p&gt;而有名字的情况是：&lt;/p&gt;
&lt;p&gt;“小强快来！”&lt;/p&gt;
&lt;p&gt;可见变量赋值的意义在于便于使唤。&lt;/p&gt;
&lt;h3&gt;基本类型的赋值&lt;/h3&gt;
&lt;p&gt;基本类型的赋值，好比在每个盒子里放东西。&lt;/p&gt;
&lt;h4&gt;直接赋值&lt;/h4&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var a = '手机'
console.log(a)  // '手机'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相当于，给一个盒子起名为a，并放进去一个字符串‘手机’。&lt;/p&gt;
&lt;h4&gt;将变量赋值给变量&lt;/h4&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var a = '苹果'
var b = a
a = ''
console.log(a)  // '' 
console.log(b)  // '苹果' 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当&lt;code&gt;var b = a&lt;/code&gt;时，相当于：&lt;/p&gt;
&lt;p&gt;给一个盒子起名为b，并偷看一下盒子a里面放的什么，然后自己里面放同样的东西。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/ee77d5218f47a7fa7f0b9e2adb0b0eb961f71cc5/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643630623131663030306362323f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ee77d5218f47a7fa7f0b9e2adb0b0eb961f71cc5/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643630623131663030306362323f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/26/164d60b11f000cb2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;a = ''&lt;/code&gt;时，相当于：&lt;/p&gt;
&lt;p&gt;盒子a里面原来的东西不要了，改放一个&lt;code&gt;''&lt;/code&gt;进去。&lt;/p&gt;
&lt;p&gt;但是，这并不会影响盒子b中的值。&lt;/p&gt;
&lt;p&gt;因为，在盒子a里面发生变化的时候，盒子b并不关心。&lt;/p&gt;
&lt;p&gt;只有将变量a赋值给变量b，即&lt;code&gt;b = a&lt;/code&gt;时，&lt;/p&gt;
&lt;p&gt;b才会出现偷看行为，进而使自身的值和a的值一样。&lt;/p&gt;
&lt;p&gt;可见，赋值就是复制，特点是赋值过后互不影响。&lt;/p&gt;
&lt;p&gt;好比我把感冒复制给朋友，我吃完药好了，并不能代表他也好了。&lt;/p&gt;
&lt;h3&gt;引用类型的赋值&lt;/h3&gt;
&lt;p&gt;引用类型的赋值，看上去是共享，实际还是复制。&lt;/p&gt;
&lt;h4&gt;栈和堆&lt;/h4&gt;
&lt;p&gt;首先，基本类型采用栈存储，一个萝卜一个坑。&lt;/p&gt;
&lt;p&gt;前面也说到，基本类型的赋值，就像在每个盒子里放东西，比如，&lt;/p&gt;
&lt;p&gt;我在a盒子里放个香蕉、&lt;/p&gt;
&lt;p&gt;我在b盒子里放个手机、&lt;/p&gt;
&lt;p&gt;我在c盒子里放个老鼠、&lt;/p&gt;
&lt;p&gt;我在d盒子里放个房子...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/22ea0b21789b8f28f84b6642c5f4b93f523732be/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643631323766303265633935343f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/22ea0b21789b8f28f84b6642c5f4b93f523732be/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643631323766303265633935343f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/26/164d6127f02ec954?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题出现了，&lt;/p&gt;
&lt;p&gt;之前，我们在盒子里放一些很傻很天真的东西，基本没问题，&lt;/p&gt;
&lt;p&gt;但是，盒子里可以放房子吗？&lt;/p&gt;
&lt;p&gt;这时候，我们进一步认识一下我们的盒子（栈存储）有什么特点？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;盒子按顺序排列&lt;/li&gt;
&lt;li&gt;每个盒子只能存放一件物品&lt;/li&gt;
&lt;li&gt;每个盒子都不是很大&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;显然，我们的盒子不足以装下房子。&lt;/p&gt;
&lt;p&gt;而且常识告诉你：&lt;/p&gt;
&lt;p&gt;房子里倒是能堆很多的盒子，因此房子就是堆存储。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/24f2c2b54c72ff1b0f36639ba2c577722a7b48ac/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643631373766633939373336363f696d616765736c696d&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/24f2c2b54c72ff1b0f36639ba2c577722a7b48ac/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643631373766633939373336363f696d616765736c696d&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/26/164d6177fc997366?imageslim&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;堆存储就像找了一片空地，然后在上面尽情放盒子（&lt;em&gt;请不要想到《我的世界》&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;特点就是存的多、存的乱。&lt;/p&gt;
&lt;p&gt;理解堆和栈的区别，也可以参照公交车，&lt;/p&gt;
&lt;p&gt;每个座位，&lt;/p&gt;
&lt;p&gt;有序、只能坐一人、大小有限...&lt;/p&gt;
&lt;p&gt;好比栈；&lt;/p&gt;
&lt;p&gt;其它地方，&lt;/p&gt;
&lt;p&gt;能挤下一堆人，很乱...&lt;/p&gt;
&lt;p&gt;好比堆。&lt;/p&gt;
&lt;p&gt;对象采用的就是堆存储。&lt;/p&gt;
&lt;h4&gt;什么是引用类型&lt;/h4&gt;
&lt;p&gt;我们知道，javascript引用类型包括对象。&lt;/p&gt;
&lt;p&gt;先随便来一个对象:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var a = {}  // 堆存储，相当于建了个房子，名为a
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再随便来一个数字:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var b = 10  // 栈存储，相当于选了个盒子，名为b
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再随便来一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;b = a
console.log(b)  // {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;太随便就容易出问题：&lt;/p&gt;
&lt;p&gt;原本b是一个正经盒子，a是一个正经房子，&lt;/p&gt;
&lt;p&gt;执行&lt;code&gt;b = a&lt;/code&gt;之后，b变成了&lt;code&gt;{}&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;根据上面说的基本类型的赋值，这是不是在说&lt;/p&gt;
&lt;p&gt;盒子b虽然之前只是一个小盒子、&lt;/p&gt;
&lt;p&gt;但是偷看了一眼房子a之后、&lt;/p&gt;
&lt;p&gt;自己发奋图强变成像房子a一样大的盒子、&lt;/p&gt;
&lt;p&gt;并复制了房子a里面的东西？&lt;/p&gt;
&lt;p&gt;不是的。&lt;/p&gt;
&lt;p&gt;盒子b并没有为了复制房子a里面的东西而变大，&lt;/p&gt;
&lt;p&gt;实际上，a其实从头到尾都只是一个盒子、而不是房子，仅管我们看到是a被赋值了一个堆存储的对象。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;因为引用类型只暴露一个地址给我们，&lt;/p&gt;
&lt;p&gt;操作引用类型的数据时（比如赋值），我们也只是在操作这个地址、引用、指针...爱叫啥叫啥。&lt;/p&gt;
&lt;p&gt;这就好比，你送女朋友戒指，可以直接放到她手里，这是基本类型；&lt;/p&gt;
&lt;p&gt;你送女朋友法拉利，并非把法拉利直接放到她手里，而是把车钥匙放到她手里，这就是引用类型；&lt;/p&gt;
&lt;p&gt;你送女朋友房子，并非把房子直接交给她（&lt;em&gt;除非你们是蜗牛&lt;/em&gt;），而是把房钥匙交给她，这也是引用类型。&lt;/p&gt;
&lt;p&gt;从赋值上来进一步认识引用类型：&lt;/p&gt;
&lt;h4&gt;直接赋值&lt;/h4&gt;
&lt;p&gt;开始说过，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量相当于名字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个事实是，&lt;/p&gt;
&lt;p&gt;我们只能给盒子起名字，不能给房子起名字，但是我们能拿到房子的钥匙。&lt;/p&gt;
&lt;p&gt;这就是为什么说，a其实从头到尾都只是一个盒子。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var b = 10&lt;/code&gt;相当于取一个盒子叫b，然后里面放啥啥啥，这没有问题；&lt;/p&gt;
&lt;p&gt;由于我们不能给房子起名字，&lt;/p&gt;
&lt;p&gt;所以&lt;code&gt;var a = {}&lt;/code&gt;肯定不是说：取了一个房子叫a，然后里面放啥啥啥。&lt;/p&gt;
&lt;p&gt;其实，和&lt;code&gt;var b = 10&lt;/code&gt;的解释一模一样，&lt;code&gt;var a = {}&lt;/code&gt;也相当于&lt;/p&gt;
&lt;p&gt;取了一个盒子叫a，然后里面放啥啥啥。&lt;/p&gt;
&lt;p&gt;只不过是，b盒子里面放很傻很天真的东西，&lt;/p&gt;
&lt;p&gt;a盒子里面放很傻很天真的钥匙，这把钥匙对应一个大房子。&lt;/p&gt;
&lt;p&gt;引用类型的直接赋值就是把钥匙放到对应盒子里。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/c07757b2241444cb9c77886af8f77b42014a3953/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643635376330303030653031343f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c07757b2241444cb9c77886af8f77b42014a3953/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643635376330303030653031343f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/26/164d657c0000e014?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;为什么只给盒子起名字？&lt;/h5&gt;
&lt;p&gt;代码中，会出现很频繁的变量赋值行为，&lt;/p&gt;
&lt;p&gt;为了保证运行速度，这些行为被优先安排在一批有序的盒子中，偷看、复制、再偷看...&lt;/p&gt;
&lt;p&gt;可以说，我们大部分时间在玩盒子。&lt;/p&gt;
&lt;p&gt;可想而知，如果换成玩房子的话，要费多大的力气。&lt;/p&gt;
&lt;p&gt;但是呢，房子在我们的程序中也有着不可或缺的作用，&lt;/p&gt;
&lt;p&gt;这时候它就暴露出一个可以找到它的钥匙，相当于它的联系方式，&lt;/p&gt;
&lt;p&gt;然后放进相应的盒子里，并说：&lt;/p&gt;
&lt;p&gt;当你需要我的时候，我会在你身边。&lt;/p&gt;
&lt;p&gt;正是因为这样，我们既便于使唤房子，又便于操作房子里的东西。&lt;/p&gt;
&lt;h4&gt;将变量赋值给变量&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;var obj = {name: '小强'}
var obj2 = obj
console.log(obj2)   // {name: '小强'}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先，&lt;code&gt;var obj = {name: '小强'}&lt;/code&gt;是引用类型的直接赋值，&lt;/p&gt;
&lt;p&gt;相当于找到一个盒子名obj，把&lt;code&gt;{name: '小强'}&lt;/code&gt;这个房子的钥匙放进盒子obj里面。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;obj2 = obj&lt;/code&gt;可以说和基本类型的变量赋值给变量一样，&lt;/p&gt;
&lt;p&gt;盒子obj2偷看一眼盒子obj中放的东西，复制一下，自己里面放同样的东西。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/9d9a11f39a57de8f6486b5391a3dac6be81e7d5e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643636396439643061396363383f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/9d9a11f39a57de8f6486b5391a3dac6be81e7d5e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643636396439643061396363383f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/26/164d669d9d0a9cc8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;喜出望外的是，竟然是一把对应某个房间的钥匙！&lt;/p&gt;
&lt;p&gt;这时，obj2就和obj一样，都能访问这把钥匙对应的房间了。&lt;/p&gt;
&lt;p&gt;所以引用对象的赋值都是操作钥匙。&lt;/p&gt;
&lt;h4&gt;引用类型赋值面试题&lt;/h4&gt;
&lt;p&gt;例一、&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var a = {n: 1}
var b = a
a.x = a = {n: 2}
console.log(a.x)    // undefined
console.log(b.x)    // {n: 2}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;逐句翻译吧：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;var a = {n: 1}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;取一个盒子名a，建一个房子，钥匙放到盒子a里面；&lt;/p&gt;
&lt;p&gt;房子里有个盒子n，放着1。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/ab3f1c5f400ce2e8a4bfa6de4bb52b2a5320dd51/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131303137313364633562373f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ab3f1c5f400ce2e8a4bfa6de4bb52b2a5320dd51/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131303137313364633562373f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164da101713dc5b7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;code&gt;var b = a&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;取一个盒子名b，盒子b偷看一下盒子a，哇哦，一把钥匙，&lt;/p&gt;
&lt;p&gt;盒子b里面也有了这把钥匙，也能去访问这个房间了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/ac0df14f30c6bbabda9896a69b781416b230e77f/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131303662353231356566663f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ac0df14f30c6bbabda9896a69b781416b230e77f/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131303662353231356566663f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164da106b5215eff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;&lt;code&gt;a.x = a = {n: 2}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;变量赋值是从右向左的&lt;/li&gt;
&lt;li&gt;对象用.赋值的时候，就是操作对象的某个属性，如果没有该属性就添加一个&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们通过盒子a中的钥匙，来到了这把钥匙对应的房间，&lt;/p&gt;
&lt;p&gt;然后，我们在这个房间取一个盒子名x，并企图在里面放东西。&lt;/p&gt;
&lt;p&gt;执行到&lt;code&gt;a.x = a&lt;/code&gt;的时候，我们还以为：&lt;/p&gt;
&lt;p&gt;是把盒子a里面的钥匙，放进我们所处房间的盒子X里面吗？&lt;/p&gt;
&lt;p&gt;差点就是了，但是后面又有&lt;code&gt;=&lt;/code&gt;赋值。&lt;/p&gt;
&lt;p&gt;根据变量赋值从右向左，&lt;/p&gt;
&lt;p&gt;我们暂时先不在这个房间里的盒子x放东西，而是优先执行&lt;code&gt;a = {n: 2}&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;这条语句显然是引用类型的直接赋值，&lt;/p&gt;
&lt;p&gt;即建了一个是&lt;code&gt;{n: 2}&lt;/code&gt;这种样子的房子，然后把钥匙放到盒子a里面。&lt;/p&gt;
&lt;p&gt;在栈和堆里面我们提到过：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;每个盒子只能存放一件物品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，盒子a首先会抛掉之前的钥匙，然后存下这把新的钥匙。&lt;/p&gt;
&lt;p&gt;刚才我们拿着盒子a之前的钥匙，进到对应的房间，企图在房间的盒子x里放东西；&lt;/p&gt;
&lt;p&gt;然后，发现后面还有赋值行为，所以优先执行后面的赋值行为。&lt;/p&gt;
&lt;p&gt;但是，当时我们只是暂停，而不是放弃。&lt;/p&gt;
&lt;p&gt;换句话说，是不忘初心，有始有终。&lt;/p&gt;
&lt;p&gt;当初我们进的哪个房子，想在哪个盒子放东西，&lt;/p&gt;
&lt;p&gt;现在我们就回到哪个房子，然后给哪个盒子放东西，&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;a.x = a&lt;/code&gt;可以看出，我们在盒子x里放的是盒子a的钥匙，&lt;/p&gt;
&lt;p&gt;在这个例子中，盒子a中现在的钥匙就是能打开&lt;code&gt;{n: 2}&lt;/code&gt;这间房子的钥匙。&lt;/p&gt;
&lt;p&gt;虽然说，&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;变量赋值是从右向左的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，代码执行是从左向右的。&lt;/p&gt;
&lt;p&gt;无论后面发生了多大变化，&lt;code&gt;a.x&lt;/code&gt;都是最先执行的，它的作用就是：&lt;/p&gt;
&lt;p&gt;通过钥匙来到一个房间，取盒子x，然后等着在里面放东西。&lt;/p&gt;
&lt;p&gt;后面的代码，只能影响这个盒子里放什么东西。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/a064305b345f99f4d5b6a6f73f838e0942ec0f7b/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131313735393764323234353f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a064305b345f99f4d5b6a6f73f838e0942ec0f7b/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131313735393764323234353f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164da117597d2245?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;于是，时过境迁：&lt;/p&gt;
&lt;p&gt;盒子a里，抛弃旧房子钥匙，放进了一把新房子钥匙，等价于&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = {n: 2}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;盒子b里，还是旧房子的钥匙。&lt;/p&gt;
&lt;p&gt;同时，因为在盒子a换钥匙之前，我们通过盒子a拿到旧钥匙来到旧房子，&lt;/p&gt;
&lt;p&gt;并将盒子a换钥匙之后的新钥匙，放进了旧房子的盒子x里面，那盒子b等价于&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;b = {
    n: 1,
    x: {n: 2}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以将这个例子稍加处理：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var xiaoMing = {moneyBox: 1}
var xiaoQiang = xiaoMing
xiaoMing.keyBox = xiaoMing = {moneyBox: 200}
console.log(xiaoMing.keyBox)    // undefined
console.log(xiaoQiang.keyBox)    // {moneyBox: 200}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再逐句翻译：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;var xiaoMing = {moneyBox: 1}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;小明有一把房钥匙，这个房子里有个钱柜，里面放着1元钱。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;code&gt;var xiaoQiang = xiaoMing&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;小强偷偷复制了一把小明的房钥匙，从此他也可以进出小明的房子。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;&lt;code&gt;xiaoMing.keyBox = xiaoMing = {moneyBox: 200}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;小明在此房子里做了一个钥匙柜，这个钥匙柜能自动生成一把小明口袋里的钥匙（&lt;code&gt;xiaoMing.keyBox = xiaoMing&lt;/code&gt;的作用，可能有点超现实），&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/74b361fe7e0e69f610052e6382b548992fc1a9b4/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131363233616635373534353f696d616765736c696d&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/74b361fe7e0e69f610052e6382b548992fc1a9b4/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131363233616635373534353f696d616765736c696d&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164da1623af57545?imageslim&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是小明想，我口袋里的钥匙现在就是这个房子的钥匙，放在我的钥匙柜里也没什么意义，&lt;/p&gt;
&lt;p&gt;不如这样吧，我再买一套房子，把口袋里的钥匙替换成新房子的钥匙，那这个钥匙柜里不就存下新房子的钥匙了吗。&lt;/p&gt;
&lt;p&gt;于是，小明果断又买了一套房子，这个房子里也有个钱柜，里面放200元钱。&lt;/p&gt;
&lt;p&gt;小明正准备回旧房子呢，突然想起来，自己口袋里的钥匙已经替换成新房子的钥匙了，&lt;/p&gt;
&lt;p&gt;现在他只能进新房子，而进不去旧房子了，郁闷...&lt;/p&gt;
&lt;p&gt;再说小强，&lt;/p&gt;
&lt;p&gt;小强当初复制的是小明旧房子的钥匙，所以小强依然能来到这个旧房子，&lt;/p&gt;
&lt;p&gt;进来后发现，多了一个钥匙柜，并且里面放着一把钥匙，&lt;/p&gt;
&lt;p&gt;没错，这就是小明新房子的钥匙。&lt;/p&gt;
&lt;p&gt;所以现在的局势很明朗了：&lt;/p&gt;
&lt;p&gt;小明只有新房子的钥匙，只能进新房子（&lt;em&gt;而且他应该觉得旧房子已经没人能进去了&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;而小强有小明旧房子的钥匙，&lt;/p&gt;
&lt;p&gt;同时这个房间里还有小明的新房子的钥匙，所以小强也能进小明的新房子。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/21b7071f5d98774d298e65790f0eb1efa302e80e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131656630666333366264663f696d616765736c696d&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/21b7071f5d98774d298e65790f0eb1efa302e80e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32372f313634646131656630666333366264663f696d616765736c696d&quot; alt=&quot;&quot; data-canonical-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164da1ef0fc36bdf?imageslim&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用代码表示，就相当于&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;xiaoMing = {moneyBox: 200}
xiaoQiang = {
    moneyBox: 1,
    keyBox: {moneyBox: 200}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/best-xiaoqiang/note-sm/blob/master/README.md&quot;&gt;点击查看此文章的最新版本和全部内容&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 27 Jul 2018 07:19:00 +0000</pubDate>
<dc:creator>大众美男典范</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/best-xiaoqiang/p/9377746.html</dc:identifier>
</item>
<item>
<title>[Abp 源码分析]八、缓存管理 - myzony</title>
<link>http://www.cnblogs.com/myzony/p/9377492.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myzony/p/9377492.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;0.简介&lt;/h2&gt;
&lt;p&gt;缓存在一个业务系统中十分重要，常用的场景就是用来储存调用频率较高的数据。Abp 也提供了一套缓存机制供用户使用，在使用 Abp 框架的时候可以通过注入 &lt;code&gt;ICacheManager&lt;/code&gt; 来新建/设置缓存。&lt;/p&gt;
&lt;p&gt;同时 Abp 框架也提供了 Redis 版本的 &lt;code&gt;ICacheManager&lt;/code&gt; 实现，你也可以很方便的将现有的内存缓存替换为 Redis 缓存。&lt;/p&gt;
&lt;h3 id=&quot;典型使用方法&quot;&gt;0.1 典型使用方法&lt;/h3&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class TestAppService : ApplicationService
{
    private readonly ICacheManager _cacheMgr;
    private readonly IRepository&amp;lt;TestEntity&amp;gt; _rep;

    // 注入缓存管理器与测试实体的仓储
    public TestAppService(ICacheManager cacheMgr, IRepository&amp;lt;TestEntity&amp;gt; rep)
    {
        _cacheMgr = cacheMgr;
        _rep = rep;
    }

    public void TestMethod()
    {
        // 获取/创建一个新的缓存
        var cache = _cacheMgr.GetCache(&quot;缓存1&quot;);
        // 转换为强类型的缓存
        var typedCache = cache.AsTyped&amp;lt;int, string&amp;gt;();

        // 获取缓存的数据，如果存在则直接返回。
        // 如果不存在则执行工厂方法，将其值存放到
        // 缓存项当中，最后返回缓存项数据。
        var cacheValue = typedCache.Get(10, id =&amp;gt; _rep.Get(id).Name);

        Console.WriteLine(cacheValue);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;启动流程&quot;&gt;1.启动流程&lt;/h2&gt;
&lt;p&gt;同其他的基础设施一样，缓存管理器 &lt;code&gt;ICacheManager&lt;/code&gt; 在 Abp 框架启动的时候就自动被注入到了 Ioc 容器当中，因为他的基类 &lt;code&gt;CacheManagerBase&lt;/code&gt; 继承了 &lt;code&gt;ISingletonDependency&lt;/code&gt; 接口。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public abstract class CacheManagerBase : ICacheManager, ISingletonDependency
{
    // ... 其他代码
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其次就是他的 &lt;code&gt;ICachingConfiguration&lt;/code&gt; 缓存配置是在 &lt;code&gt;AbpCoreInstaller&lt;/code&gt; 注入到 Ioc 容器，并且同其他基础设施的配置一起被集成到了 &lt;code&gt;IAbpStartupConfiguration&lt;/code&gt; 。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    internal class AbpCoreInstaller : IWindsorInstaller
    {
        public void Install(IWindsorContainer container, IConfigurationStore store)
        {
            container.Register(
                // 其他被注入的基础设施配置
                
                Component.For&amp;lt;ICachingConfiguration, CachingConfiguration&amp;gt;().ImplementedBy&amp;lt;CachingConfiguration&amp;gt;().LifestyleSingleton()
                
                // 其他被注入的基础设施配置
                );
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可以在其他模块的 &lt;code&gt;PreInitialize()&lt;/code&gt; 方法里面可以直接通过 &lt;code&gt;Configuration.Caching&lt;/code&gt; 来配置缓存过期时间等功能。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public override void PreInitialize()
{
    Configuration.Caching.ConfigureAll(z=&amp;gt;z.DefaultSlidingExpireTime = TimeSpan.FromHours(1));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;代码分析&quot;&gt;2. 代码分析&lt;/h2&gt;
&lt;p&gt;缓存这块可能是 Abp 框架实现当中最简单的一部分了，代码量不多，但是设计思路还是值得借鉴的。&lt;/p&gt;
&lt;h3 id=&quot;缓存管理器&quot;&gt;2.1 缓存管理器&lt;/h3&gt;
&lt;h4 id=&quot;基本定义&quot;&gt;2.1.1 基本定义&lt;/h4&gt;
&lt;p&gt;缓存管理器即 &lt;code&gt;ICacheManager&lt;/code&gt; ，通常它用于管理所有缓存，他的接口定义十分简单，就两个方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public interface ICacheManager : IDisposable
{
    // 获得所有缓存
    IReadOnlyList&amp;lt;ICache&amp;gt; GetAllCaches();
    
    // 根据缓存名称获取缓存
    [NotNull] ICache GetCache([NotNull] string name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;获取创建缓存&quot;&gt;2.1.2 获取/创建缓存&lt;/h4&gt;
&lt;p&gt;Abp 实现了一个抽象基类 &lt;code&gt;CacheBase&lt;/code&gt; 实现了本接口，在 &lt;code&gt;CacheBase&lt;/code&gt; 内部维护了一个 &lt;code&gt;ConcurrentDictionary&amp;lt;string,ICache&amp;gt;&lt;/code&gt; 字典，这个字典里面就是存放的所有缓存。&lt;/p&gt;
&lt;p&gt;同时在他的 &lt;code&gt;GetCache(string name)&lt;/code&gt; 内部呢，通过传入的缓存名字来从字典获取已经存在的缓存，如果不存在呢，执行其工厂方法来创建一个新的缓存。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public virtual ICache GetCache(string name)
{
    Check.NotNull(name, nameof(name));

    // 从字典根据名称取得缓存，不存在则使用工厂方法
    return Caches.GetOrAdd(name, (cacheName) =&amp;gt;
    {
        // 得到创建成功的缓存
        var cache = CreateCacheImplementation(cacheName);

        // 遍历缓存配置集合，查看当前名字的缓存是否存在配置项
        var configurators = Configuration.Configurators.Where(c =&amp;gt; c.CacheName == null || c.CacheName == cacheName);

        // 遍历这些配置项执行配置操作，更改缓存的过期时间等参数
        foreach (var configurator in configurators)
        {
            configurator.InitAction?.Invoke(cache);
        }

        // 返回配置完成的缓存
        return cache;
    });
}

// 真正创建缓存的方法
protected abstract ICache CreateCacheImplementation(string name);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的 &lt;code&gt;CreateCacheImplementation()&lt;/code&gt;由具体的缓存管理器实现的缓存创建方法，因为 Redis 与 MemoryCache 的实现各不一样，所以这里定义了一个抽象方法。&lt;/p&gt;
&lt;h4 id=&quot;缓存管理器销毁&quot;&gt;2.1.3 缓存管理器销毁&lt;/h4&gt;
&lt;p&gt;当缓存管理器被销毁的时候，首先是遍历字典内存储的所有缓存，并通过 &lt;code&gt;IIocManager.Release()&lt;/code&gt; 方法来释放这些缓存，之后则是调用字典的 &lt;code&gt;Clear()&lt;/code&gt; 方法清空字典。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public virtual void Dispose()
{
    DisposeCaches();
    // 清空字典
    Caches.Clear();
}

// 遍历字典，释放对象
protected virtual void DisposeCaches()
{
    foreach (var cache in Caches)
    {
        IocManager.Release(cache.Value);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;内存缓存管理器&quot;&gt;2.1.4 内存缓存管理器&lt;/h4&gt;
&lt;p&gt;Abp 对于缓存管理器的默认实现是 &lt;code&gt;AbpMemoryCacheManager&lt;/code&gt; ，其实没多复杂，就是实现了基类的 &lt;code&gt;CreateCacheImplementation()&lt;/code&gt; 返回特定的 &lt;code&gt;ICache&lt;/code&gt; 。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class AbpMemoryCacheManager : CacheManagerBase
{
    // ... 忽略了的代码

    protected override ICache CreateCacheImplementation(string name)
    {
        // 就 new 一个新的内存缓存而已，内存缓存的实现请看后面的
        // 这里是因为 AbpMemory 没有注入到 IOC 容器，所以需要手动 new
        return new AbpMemoryCache(name)
        {
            Logger = Logger
        };
    }

    // 重写了基类的缓存释放方法
    protected override void DisposeCaches()
    {
        foreach (var cache in Caches.Values)
        {
            cache.Dispose();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;redis-缓存管理器&quot;&gt;2.1.5 Redis 缓存管理器&lt;/h4&gt;
&lt;p&gt;如果要使用 Redis 缓存管理器，根据模块的加载顺序，你需要在启动模块的 &lt;code&gt;PreInitialize()&lt;/code&gt; 调用 Abp.Redis 库提供的集成方法即可。&lt;/p&gt;
&lt;p&gt;这里先来看看他的实现：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class AbpRedisCacheManager : CacheManagerBase
{
    public AbpRedisCacheManager(IIocManager iocManager, ICachingConfiguration configuration)
        : base(iocManager, configuration)
    {
        // 注册 Redis 缓存
        IocManager.RegisterIfNot&amp;lt;AbpRedisCache&amp;gt;(DependencyLifeStyle.Transient);
    }

    protected override ICache CreateCacheImplementation(string name)
    {
        // 解析已经注入的 Redis 缓存
        // 这里可以看到解析的时候如何传入构造参数
        return IocManager.Resolve&amp;lt;AbpRedisCache&amp;gt;(new { name });
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一样的，非常简单，没什么可以说的。&lt;/p&gt;
&lt;h3 id=&quot;缓存&quot;&gt;2.2 缓存&lt;/h3&gt;
&lt;p&gt;我们从缓存管理器当中拿到具体的缓存之后才能够进行真正的缓存操作，这里需要明确的一个概念是缓存是一个缓存项的集合，缓存项里面的值才是我们真正缓存的结果。&lt;/p&gt;
&lt;p&gt;就如同一个用户表，他拥有多条用户数据，那么我们要针对这个用户表做缓存，就会创建一个缓存名称叫做 &quot;用户表&quot; 的缓存，在需要获得用户数据的时候，我们拿去数据就直接从这个 &quot;用户表&quot; 缓存当中取得具体的缓存项，也就是具体的用户数据。&lt;/p&gt;
&lt;p&gt;其实每个缓存项也是几个 &lt;strong&gt;键值对&lt;/strong&gt; ，键就是缓存的键，以上面的 &quot;用户表缓存&quot; 为例子，那么他缓存项的键就是 &lt;code&gt;int&lt;/code&gt; 型的 Id ，他的值呢就是一个用户实体。&lt;/p&gt;
&lt;h4 id=&quot;基本定义-1&quot;&gt;2.2.1 基本定义&lt;/h4&gt;
&lt;p&gt;所有缓存的定义都在 &lt;code&gt;ICache&lt;/code&gt; 当中，每个缓存都拥有增删查改这些基本操作，并且还拥有过期时间与名称等属性。&lt;/p&gt;
&lt;p&gt;同样，缓存也有一个抽象基类的实现，名字叫做 &lt;code&gt;CacheBase&lt;/code&gt; 。与缓存管理器的抽象基类一样，&lt;code&gt;CacheBase&lt;/code&gt; 内部仅实现了 &lt;code&gt;Get&lt;/code&gt; 方法的基本逻辑，其他的都是抽象方法，需要由具体的类型进行实现。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public interface ICache : IDisposable
{
    // 缓存名称
    string Name { get; }
    
    // 相对过期时间
    TimeSpan DefaultSlidingExpireTime { get; set; }

    // 绝对过期时间
    TimeSpan? DefaultAbsoluteExpireTime { get; set; }

    // 根据缓存项 Key 获取到缓存的数据,不存在则执行工厂方法
    object Get(string key, Func&amp;lt;string, object&amp;gt; factory);

    // Get 的异步实现
    Task&amp;lt;object&amp;gt; GetAsync(string key, Func&amp;lt;string, Task&amp;lt;object&amp;gt;&amp;gt; factory);

    // 根据缓存项 Key 获取到缓存的数据，没有则返回默认值，一般为 null
    object GetOrDefault(string key);

    // GetOrDefault 的异步实现
    Task&amp;lt;object&amp;gt; GetOrDefaultAsync(string key);

    // 设置缓存项值和过期时间等参数
    void Set(string key, object value, TimeSpan? slidingExpireTime = null, TimeSpan? absoluteExpireTime = null);

    // Set 的异步实现
    Task SetAsync(string key, object value, TimeSpan? slidingExpireTime = null, TimeSpan? absoluteExpireTime = null);

    // 移除指定缓存名称的缓存项
    void Remove(string key);

    // Remove 的异步实现
    Task RemoveAsync(string key);

    // 清空缓存内所有缓存项
    void Clear();

    // Clear 的异步实现
    Task ClearAsync();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;内存缓存的实现&quot;&gt;2.2.2 内存缓存的实现&lt;/h4&gt;
&lt;p&gt;这里我们以 Abp 的默认 MemoryCache 实现为例子来看看里面是什么构造：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201807/1203160-20180727144438425-1707860454.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class AbpMemoryCache : CacheBase
{
    private MemoryCache _memoryCache;
    
    // 初始化 MemoryCahce
    public AbpMemoryCache(string name)
        : base(name)
    {
        _memoryCache = new MemoryCache(new OptionsWrapper&amp;lt;MemoryCacheOptions&amp;gt;(new MemoryCacheOptions()));
    }

    // 从 MemoryCahce 取得缓存
    public override object GetOrDefault(string key)
    {
        return _memoryCache.Get(key);
    }

    // 设置缓存
    public override void Set(string key, object value, TimeSpan? slidingExpireTime = null, TimeSpan? absoluteExpireTime = null)
    {
        // 值为空的时候抛出异常
        if (value == null)
        {
            throw new AbpException(&quot;Can not insert null values to the cache!&quot;);
        }

        if (absoluteExpireTime != null)
        {
            _memoryCache.Set(key, value, DateTimeOffset.Now.Add(absoluteExpireTime.Value));
        }
        else if (slidingExpireTime != null)
        {
            _memoryCache.Set(key, value, slidingExpireTime.Value);
        }
        else if (DefaultAbsoluteExpireTime != null)
        {
            _memoryCache.Set(key, value, DateTimeOffset.Now.Add(DefaultAbsoluteExpireTime.Value));
        }
        else
        {
            _memoryCache.Set(key, value, DefaultSlidingExpireTime);
        }
    }

    // 删除缓存
    public override void Remove(string key)
    {
        _memoryCache.Remove(key);
    }

    // 清空缓存
    public override void Clear()
    {
        _memoryCache.Dispose();
        _memoryCache = new MemoryCache(new OptionsWrapper&amp;lt;MemoryCacheOptions&amp;gt;(new MemoryCacheOptions()));
    }

    public override void Dispose()
    {
        _memoryCache.Dispose();
        base.Dispose();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到在 &lt;code&gt;AbpMemoryCache&lt;/code&gt; 内部就是将 &lt;code&gt;MemoryCahce&lt;/code&gt; 进行了一个二次包装而已。&lt;/p&gt;
&lt;p&gt;其实可以看到这些缓存超期时间之类的参数 Abp 自己并没有用到，而是将其传递给具体的缓存实现来进行管理。&lt;/p&gt;
&lt;h4 id=&quot;redis-缓存的实现&quot;&gt;2.2.3 Redis 缓存的实现&lt;/h4&gt;
&lt;p&gt;Abp.Redis 库使用的是 &lt;code&gt;StackExchange.Redis&lt;/code&gt; 库来实现对 Redis 的通讯的，其实现为 &lt;code&gt;AbpRedisCache&lt;/code&gt; ，里面也没什么好说的，如同内存缓存一样，实现那些抽象方法就可以了。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class AbpRedisCache : CacheBase
{
    private readonly IDatabase _database;
    private readonly IRedisCacheSerializer _serializer;

    public AbpRedisCache(
        string name, 
        IAbpRedisCacheDatabaseProvider redisCacheDatabaseProvider, 
        IRedisCacheSerializer redisCacheSerializer)
        : base(name)
    {
        _database = redisCacheDatabaseProvider.GetDatabase();
        _serializer = redisCacheSerializer;
    }

    // 获取缓存
    public override object GetOrDefault(string key)
    {
        var objbyte = _database.StringGet(GetLocalizedKey(key));
        return objbyte.HasValue ? Deserialize(objbyte) : null;
    }

    public override void Set(string key, object value, TimeSpan? slidingExpireTime = null, TimeSpan? absoluteExpireTime = null)
    {
        if (value == null)
        {
            throw new AbpException(&quot;Can not insert null values to the cache!&quot;);
        }

        //TODO: 这里是一个解决实体序列化的方法.
        //TODO: 通常实体不应该存储在缓存当中，目前 Abp.Zero 包是这样来进行处理的，这个问题将会在未来被修正.
        var type = value.GetType();
        if (EntityHelper.IsEntity(type) &amp;amp;&amp;amp; type.GetAssembly().FullName.Contains(&quot;EntityFrameworkDynamicProxies&quot;))
        {
            type = type.GetTypeInfo().BaseType;
        }

        _database.StringSet(
            GetLocalizedKey(key),
            Serialize(value, type),
            absoluteExpireTime ?? slidingExpireTime ?? DefaultAbsoluteExpireTime ?? DefaultSlidingExpireTime
            );
    }

    // 移除缓存
    public override void Remove(string key)
    {
        _database.KeyDelete(GetLocalizedKey(key));
    }

    // 清空缓存
    public override void Clear()
    {
        _database.KeyDeleteWithPrefix(GetLocalizedKey(&quot;*&quot;));
    }

    // 序列化对象
    protected virtual string Serialize(object value, Type type)
    {
        return _serializer.Serialize(value, type);
    }

    // 反序列化对象
    protected virtual object Deserialize(RedisValue objbyte)
    {
        return _serializer.Deserialize(objbyte);
    }

    // 获得缓存的 Key
    protected virtual string GetLocalizedKey(string key)
    {
        return &quot;n:&quot; + Name + &quot;,c:&quot; + key;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;缓存配置&quot;&gt;2.3 缓存配置&lt;/h3&gt;
&lt;p&gt;缓存配置的作用就是可以为每个缓存配置不同的过期时间，我们最开始说过 Abp 是通过 &lt;code&gt;ICachingConfiguration&lt;/code&gt; 来配置缓存的，在这个接口里面呢定义了这样几个东西。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public interface ICachingConfiguration
{
    // 配置项集合
    IReadOnlyList&amp;lt;ICacheConfigurator&amp;gt; Configurators { get; }

    // 配置所有缓存
    void ConfigureAll(Action&amp;lt;ICache&amp;gt; initAction);

    // 配置指定名称的缓存
    void Configure(string cacheName, Action&amp;lt;ICache&amp;gt; initAction);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Emmmm，可以看到他有个 &lt;code&gt;Configurators&lt;/code&gt; 属性存了一大堆 &lt;code&gt;ICacheConfigurator&lt;/code&gt; ，这个玩意儿呢就是对应到具体缓存的配置项了。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public interface ICacheConfigurator
{
    // 关联的缓存名称
    string CacheName { get; }

    // 缓存初始化的时候执行的配置操作
    Action&amp;lt;ICache&amp;gt; InitAction { get; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这玩意儿的实现也没什么好看的，跟接口差不多，这下我们知道了缓存的配置呢就是存放在 &lt;code&gt;Configurators&lt;/code&gt; 里面的。&lt;/p&gt;
&lt;p&gt;然后呢，就在我们最开始的地方，缓存管理器创建缓存的时候不是根据名字去遍历这个 &lt;code&gt;Configurators&lt;/code&gt; 集合么，在那里面就直接通过这个 &lt;code&gt;ICacheConfigurator&lt;/code&gt; 的 &lt;code&gt;Action&amp;lt;ICache&amp;gt;&lt;/code&gt; 来配置缓存的超期时间。&lt;/p&gt;
&lt;p&gt;至于 &lt;code&gt;Configure()&lt;/code&gt; 和 &lt;code&gt;ConfigureAll()&lt;/code&gt; 方法嘛，前者就是根据你传入的缓存名称初始化一个 &lt;code&gt;CacheConfigurator&lt;/code&gt; ，然后扔到那个列表里面去。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private readonly List&amp;lt;ICacheConfigurator&amp;gt; _configurators;

public void Configure(string cacheName, Action&amp;lt;ICache&amp;gt; initAction)
{
    _configurators.Add(new CacheConfigurator(cacheName, initAction));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后者的话则是添加了一个没有名字的 &lt;code&gt;CacheConfigurator&lt;/code&gt; ，正因为没有名字，所以他的 cacheName 肯定 null，也就是在缓存管理器创建缓存的时候如果该缓存没有对应的配置，那么就会使用这个名字为空的 &lt;code&gt;CacheConfigurator&lt;/code&gt; 了。&lt;/p&gt;
&lt;h3 id=&quot;强类型缓存&quot;&gt;2.4 强类型缓存&lt;/h3&gt;
&lt;p&gt;在最开始的使用方法里面可以看到我们通过 &lt;code&gt;AsType&amp;lt;TKey,TValue&amp;gt;()&lt;/code&gt; 方法将 &lt;code&gt;ICache&lt;/code&gt; 对象转换为 &lt;code&gt;ITypedCache&lt;/code&gt; ，这样我们就无需再将缓存项手动进行强制类型转换。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注：虽然这里是指定了泛型操作，但是呢，在其内部实现还是进行的强制类型转换，也是会发生装/拆箱操作的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201807/1203160-20180727144455783-100526671.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Abp 自己则通过 &lt;code&gt;TypedCacheWrapper&amp;lt;TKey, TValue&amp;gt;&lt;/code&gt; 来将原有的 &lt;code&gt;ICache&lt;/code&gt; 缓存包装为 &lt;code&gt;ITypedCache&amp;lt;TKey, TValue&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;看看这个扩展方法的定义，他是放在 &lt;code&gt;CacheExtensions&lt;/code&gt; 里面的：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static ITypedCache&amp;lt;TKey, TValue&amp;gt; AsTyped&amp;lt;TKey, TValue&amp;gt;(this ICache cache)
{
    return new TypedCacheWrapper&amp;lt;TKey, TValue&amp;gt;(cache);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Emmm，这里是 new 了一个 &lt;code&gt;TypedCacheWrapper&lt;/code&gt; 来处理的，从方法定义可以看出来 &lt;code&gt;TypedCacheWrapper&lt;/code&gt; 是 ITypedCache 的一个默认实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ITypedCache&amp;lt;TKey,TValue&amp;gt;&lt;/code&gt; 拥有 &lt;code&gt;ICache&lt;/code&gt; 的所有方法签名，所以使用 &lt;code&gt;ITypedCache&amp;lt;TKey,TValue&amp;gt;&lt;/code&gt; 与使用 &lt;code&gt;ICache&lt;/code&gt; 的方式是一样的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypedCacheWrapper&lt;/code&gt; 的各种方法其实就是调用的传入的 &lt;code&gt;ICache&lt;/code&gt; 对象的方法，只不过在返回值得时候他自己进行了强制类型转换而已，比如说，看看他的 Get 方法。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class TypedCacheWrapper&amp;lt;TKey, TValue&amp;gt; : ITypedCache&amp;lt;TKey, TValue&amp;gt;
{
    // 返回的是内部 ICache 的名称
    public string Name
    {
        get { return InternalCache.Name; }
    }

    public TimeSpan DefaultSlidingExpireTime
    {
        get { return InternalCache.DefaultSlidingExpireTime; }
        set { InternalCache.DefaultSlidingExpireTime = value; }
    }
    public TimeSpan? DefaultAbsoluteExpireTime
    {
        get { return InternalCache.DefaultAbsoluteExpireTime; }
        set { InternalCache.DefaultAbsoluteExpireTime = value; }
    }

    // 调用 AsTyped() 方法时候传入的 ICache 对象
    public ICache InternalCache { get; private set; }

    public TypedCacheWrapper(ICache internalCache)
    {
        InternalCache = internalCache;
    }

    // 调用的是一个 ICache 的扩展方法
    public TValue Get(TKey key, Func&amp;lt;TKey, TValue&amp;gt; factory)
    {
        return InternalCache.Get(key, factory);
    }
    
    // ..... 忽略了其他方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看 &lt;code&gt;InternalCache.Get(key, factory);&lt;/code&gt; 这个扩展方法的定义吧：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static TValue Get&amp;lt;TKey, TValue&amp;gt;(this ICache cache, TKey key, Func&amp;lt;TKey, TValue&amp;gt; factory)
{
    // 本质上就是调用的 ICache 的 Get 方法，返回的时候进行了强制类型转换而已
    return (TValue)cache.Get(key.ToString(), (k) =&amp;gt; (object)factory(key));
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 27 Jul 2018 06:45:00 +0000</pubDate>
<dc:creator>myzony</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myzony/p/9377492.html</dc:identifier>
</item>
<item>
<title>Java设计模式学习记录-组合模式 - 纪莫</title>
<link>http://www.cnblogs.com/jimoer/p/9310810.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimoer/p/9310810.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;今天要介绍的设计模式是组合模式，组合模式也是结构型设计模式的一种，它主要体现了整体与部分的诶关系，其典型的应用就是树形结构。组合是一组对象，其中的对象可能包含一个其他对象，也可能包含一组其他对象。&lt;/p&gt;
&lt;h2&gt;组合模式&lt;/h2&gt;
&lt;p&gt;组合模式定义为：&lt;strong&gt;将对象组合成树形结构以表示“整体-部分”的层次结构&lt;/strong&gt;。组合模式是单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;p&gt;在使用组合模式的使用要注意以下两点：&lt;/p&gt;
&lt;p&gt;组合中既要能包含个体，也要能包含其他组合。&lt;/p&gt;
&lt;p&gt;要抽象出对象和组合的公共特性。&lt;/p&gt;
&lt;h3&gt;举例说明&lt;/h3&gt;
&lt;p&gt;介绍了一些基本内容，可能会还是不清楚组合模式到底是什么样的一个模式，还是老样子，举🌰说明。&lt;/p&gt;
&lt;p&gt;在我们的家用PC电脑上的文件结构就是一个很好的例子，例如在我的电脑上有如下图所示的文件目录结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772743/201807/772743-20180726211212162-1612809314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从root文件夹到具体的文件，一层一层的这种结构就是典型的树形结构，root是硬盘中的某个文件夹，可以理解为&lt;strong&gt;根节点&lt;/strong&gt;，这个文件下下面有两个文件夹和一个文件，image-folder文件夹这种有分支的可以理解为&lt;strong&gt;分支节点&lt;/strong&gt;，文件则理解为&lt;strong&gt;叶子节点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了要实现这种结构，这三种节点，我们一般的思路是，创建三个根节点、分支节点、叶子节点这三个类，但是我们发现根节点的特性其实和分支节点一样，可以理解为一类，所以我们只需要创建两个类就可以。&lt;/p&gt;
&lt;p&gt;定义分支节点（包含根节点）的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 定义分支节点（根节点）
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IBranch {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得分支节点信息
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInfo();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 增加分支节点（文件夹下还可能会有文件夹）
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; branch
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addBranch(IBranch branch);

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 增加叶子节点
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; leaf
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addLeaf(ILeaf leaf);

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得子集
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArrayList getChildren();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的实现如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 分支节点（文件夹）
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Folder &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IBranch{

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 节点名称
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 子集
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; ArrayList children =&lt;span&gt; Lists.newArrayList();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 带参数的构造方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Folder(String name){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得分支节点信息
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInfo() {

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;名称:&quot; +&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 增加分支节点（文件夹下还可能会有文件夹）
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; branch
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addBranch(IBranch branch) {

        children.add(branch);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 增加叶子节点
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; leaf
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addLeaf(ILeaf leaf) {
        children.add(leaf);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得子集
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArrayList getChildren() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; children;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义叶子节点的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 定义叶子节点
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ILeaf {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得叶子节点的信息
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInfo();

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为叶子节点，不会有子集所以只需要一个获得描述信息的方法即可，具体的实现如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 叶子节点（文件）
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; File &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ILeaf {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; File(String name){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得叶子节点的信息
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInfo() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;名称：&quot;+&lt;span&gt;name;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;节点类已经定义完成了，所以现在可以开始组装数据了，然后将最终的数据打印出来看看是不是这个结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义根节点&lt;/span&gt;
        IBranch root = &lt;span&gt;new&lt;/span&gt; Folder(&quot;root&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义二级节点的文件夹&lt;/span&gt;
        IBranch imageFolder = &lt;span&gt;new&lt;/span&gt; Folder(&quot;image-folder&quot;&lt;span&gt;);
        IBranch documentFolder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Folder(&quot;document-folder&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义二级节点的文件&lt;/span&gt;
        ILeaf systemFile = &lt;span&gt;new&lt;/span&gt; File(&quot;system-file.bat&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义三级节点的文件夹&lt;/span&gt;
        IBranch pngFolder = &lt;span&gt;new&lt;/span&gt; Folder(&quot;png-folder&quot;&lt;span&gt;);
        IBranch gifFolder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Folder(&quot;gif-folder&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义三级节点的文件&lt;/span&gt;
        ILeaf testHtml = &lt;span&gt;new&lt;/span&gt; File(&quot;test.html&quot;&lt;span&gt;);
        ILeaf testJS &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;test.js&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义四级节点的文件，两个png文件&lt;/span&gt;
        ILeaf test1png = &lt;span&gt;new&lt;/span&gt; File(&quot;test1.png&quot;&lt;span&gt;);
        ILeaf test2png &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;test2.png&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义四级节点的文件3个gif文件&lt;/span&gt;
        ILeaf my1gif = &lt;span&gt;new&lt;/span&gt; File(&quot;my1.gif&quot;&lt;span&gt;);
        ILeaf my2gif &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;my2.gif&quot;&lt;span&gt;);
        ILeaf my3gif &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;my3.gif&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充一级文件夹&lt;/span&gt;
&lt;span&gt;        root.addBranch(imageFolder);
        root.addBranch(documentFolder);
        root.addLeaf(systemFile);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充二级图片文件夹&lt;/span&gt;
&lt;span&gt;        imageFolder.addBranch(pngFolder);
        imageFolder.addBranch(gifFolder);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充二级文档文件夹&lt;/span&gt;
&lt;span&gt;        documentFolder.addLeaf(testHtml);
        documentFolder.addLeaf(testJS);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充三级png图片文件夹&lt;/span&gt;
&lt;span&gt;        pngFolder.addLeaf(test1png);
        pngFolder.addLeaf(test2png);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充三级gif图片文件夹&lt;/span&gt;
&lt;span&gt;        gifFolder.addLeaf(my1gif);
        gifFolder.addLeaf(my2gif);
        gifFolder.addLeaf(my3gif);

        System.out.println(root.getInfo());

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印出来&lt;/span&gt;
&lt;span&gt;        getChildrenInfo(root.getChildren());

    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 递归遍历文件
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arrayList
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getChildrenInfo(ArrayList arrayList){

        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; length =&lt;span&gt; arrayList.size();

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; m = 0;m&amp;lt;length;m++&lt;span&gt;){
            Object item &lt;/span&gt;=&lt;span&gt; arrayList.get(m);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是叶子节点就直接打印出来名称&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(item &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ILeaf){
                System.out.println(((ILeaf) item).getInfo());
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是分支节点就先打印分支节点的名称，再递归遍历子节点&lt;/span&gt;
&lt;span&gt;                System.out.println(((IBranch)item).getInfo());
                getChildrenInfo(((IBranch)item).getChildren());
            }

        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终的打印结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;名称:root
名称:image&lt;/span&gt;-&lt;span&gt;folder
名称:png&lt;/span&gt;-&lt;span&gt;folder
名称：test1.png
名称：test2.png
名称:gif&lt;/span&gt;-&lt;span&gt;folder
名称：my1.gif
名称：my2.gif
名称：my3.gif
名称:document&lt;/span&gt;-&lt;span&gt;folder
名称：test.html
名称：test.js
名称：system&lt;/span&gt;-file.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这个结果确实是我们想要的，但是仔细看看其实还是有可以优化的地方，Folder和File都有包含名字的构造方法，以及getInfo()方法，那么是不是可以抽取出来？那就改变一下吧。&lt;/p&gt;
&lt;p&gt;新增节点公共抽象类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 节点公共抽象类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Node {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 带参数的构造方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Node(String name){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得节点信息
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getInfo(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;名称：&quot;+&lt;span&gt;name;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改造后的File类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 叶子节点（文件）
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; File &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Node {
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 调用父类的构造方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; File(String name) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(name);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改造后的Folder类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 分支节点（文件夹）
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Folder &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Node{

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 子集
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; ArrayList children =&lt;span&gt; Lists.newArrayList();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 带参数的构造方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Folder(String name){
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(name);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 新增节点，有可能是文件也有可能是文件夹
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; node
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; add(Node node){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.children.add(node);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获得子集
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArrayList getChildren() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; children;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改造后的使用方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义根节点&lt;/span&gt;
        Folder root = &lt;span&gt;new&lt;/span&gt; Folder(&quot;root&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义二级节点的文件夹&lt;/span&gt;
        Folder imageFolder = &lt;span&gt;new&lt;/span&gt; Folder(&quot;image-folder&quot;&lt;span&gt;);
        Folder documentFolder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Folder(&quot;document-folder&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义二级节点的文件&lt;/span&gt;
        File systemFile = &lt;span&gt;new&lt;/span&gt; File(&quot;system-file.bat&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义三级节点的文件夹&lt;/span&gt;
        Folder pngFolder = &lt;span&gt;new&lt;/span&gt; Folder(&quot;png-folder&quot;&lt;span&gt;);
        Folder gifFolder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Folder(&quot;gif-folder&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义三级节点的文件&lt;/span&gt;
        File testHtml = &lt;span&gt;new&lt;/span&gt; File(&quot;test.html&quot;&lt;span&gt;);
        File testJS &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;test.js&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义四级节点的文件，两个png文件&lt;/span&gt;
        File test1png = &lt;span&gt;new&lt;/span&gt; File(&quot;test1.png&quot;&lt;span&gt;);
        File test2png &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;test2.png&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义四级节点的文件3个gif文件&lt;/span&gt;
        File my1gif = &lt;span&gt;new&lt;/span&gt; File(&quot;my1.gif&quot;&lt;span&gt;);
        File my2gif &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;my2.gif&quot;&lt;span&gt;);
        File my3gif &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; File(&quot;my3.gif&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充一级文件夹&lt;/span&gt;
&lt;span&gt;        root.add(imageFolder);
        root.add(documentFolder);
        root.add(systemFile);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充二级图片文件夹&lt;/span&gt;
&lt;span&gt;        imageFolder.add(pngFolder);
        imageFolder.add(gifFolder);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充二级文档文件夹&lt;/span&gt;
&lt;span&gt;        documentFolder.add(testHtml);
        documentFolder.add(testJS);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充三级png图片文件夹&lt;/span&gt;
&lt;span&gt;        pngFolder.add(test1png);
        pngFolder.add(test2png);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充三级gif图片文件夹&lt;/span&gt;
&lt;span&gt;        gifFolder.add(my1gif);
        gifFolder.add(my2gif);
        gifFolder.add(my3gif);

        System.out.println(root.getInfo());

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印出来&lt;/span&gt;
&lt;span&gt;        getChildrenInfo(root.getChildren());

    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 递归遍历文件
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arrayList
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getChildrenInfo(ArrayList arrayList){

        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; length =&lt;span&gt; arrayList.size();

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; m = 0;m&amp;lt;length;m++&lt;span&gt;){
            Object item &lt;/span&gt;=&lt;span&gt; arrayList.get(m);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是叶子节点就直接打印出来名称&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(item &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; File){
                System.out.println(((File) item).getInfo());
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是分支节点就先打印分支节点的名称，再递归遍历子节点&lt;/span&gt;
&lt;span&gt;                System.out.println(((Folder)item).getInfo());
                getChildrenInfo(((Folder)item).getChildren());
            }

        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样实现起来的各个节点的代码变的更简洁了，但是组装数据的的代码是没变的。因为放数据要么自己造要么从某个地方查询出来，这么个步骤是不能简化的。&lt;/p&gt;
&lt;h3&gt;分析&lt;/h3&gt;
&lt;p&gt;现在我们的这个实现过程就是使用的了组合模式，下面我们来分析一下组合模式都有哪些部分组成。先来看一下根据上面这个例子画出来的类图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772743/201807/772743-20180727140404211-1936369696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组合模式主要有这么几个角色：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抽象构件角色&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（Node类）这是一个抽象角色，它给参加组合的对象规定一个接口或抽象类，给出组合中对象的默认行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;叶子构件角色&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（File类）代表参加组合的叶子节点对象，没有子集，并且要定义出参加组合的原始对象行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;树枝构件角色&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（Folder类）代表参加组合的含义子对象的对象，并且也要给出参加组合的原始对象行为以及遍历子集的行为。&lt;/p&gt;
&lt;h3&gt;组合模式的两种形式&lt;/h3&gt;
&lt;h4&gt;透明方式&lt;/h4&gt;
&lt;p&gt;透明方式来实现组合模式是指，按照上面举得例子来说，File和Folder的方法和和属性都一样，就是说File也包含children属性和getChildren方法两者在类上没有什么区别，只不过File的children为null，getChildren()获得的也永远是空。这样叶子节点对象和树枝节点对象的区别在抽象层次上就消失了，客户端可以同等对待所有对象。&lt;/p&gt;
&lt;p&gt;这种方式的缺点是不够安全，因为叶子节点和树枝节点在本质上是有区别的，叶子节点的getChildren()方法和children的存在没有意义，虽然在编译时不会出错，但是如果在运行时之前没有做过处理是很容易抛出异常的。&lt;/p&gt;
&lt;h4&gt;安全方式（非透明）&lt;/h4&gt;
&lt;p&gt;安全方式实现的组合模式，就是上面的例子介绍的那样，这种实现方式把叶子和树枝彻底的区分开来处理，并做到互不干扰，树枝有单独自己处理子类的方法，保证运行期不会出错。&lt;/p&gt;
&lt;p&gt;一般在如下情况下应当考虑使用组合模式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;需要描述对象的部分和整体的等级结构。&lt;/li&gt;
&lt;li&gt;需要客户端忽略掉个体构件和组合构件的区别，客户端平等对待所以构件。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其实在我们日常的业务当中有很多场景其实都是可以使用组合模式的，例如，某公司的人员组织结构，从CEO到小职员，一级一级的人员关系就可以使用组合模式，还有就是在网上商城购物时，选择地址，从省道区再到县也是可以使用组合模式的。&lt;/p&gt;









&lt;p&gt;想了解更多的设计模式请查看&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/jimoer/p/9163426.html&quot;&gt;Java设计模式学习记录-GoF设计模式概述&lt;/a&gt;。&lt;/p&gt;

</description>
<pubDate>Fri, 27 Jul 2018 06:32:00 +0000</pubDate>
<dc:creator>纪莫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimoer/p/9310810.html</dc:identifier>
</item>
<item>
<title>九浅一深ThreadLocal - FuzhePan</title>
<link>http://www.cnblogs.com/FuzhePan/p/9377395.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/FuzhePan/p/9377395.html</guid>
<description>&lt;p&gt;ThreadLocal是线程的本地存储，存储在其内的值只能被当前线程访问到，其他线程获取不到，可以存储任意对象。&lt;br/&gt;经常用来存储当前线程的一些上下文信息，这样不用通过参数一层层的向下传递。比如在计算分库分表时，上层根据业务规则计算出这次要操作的数据库和表编号，存储到ThreadLocal中，下层可以通过ThreadLocal直接获取到。&lt;br/&gt;如果当前线程创建了子线程，某些数据想让子线程也获取到，可以使用InheritableThreadLocal，用法和ThreadLocal类似。&lt;br/&gt;具体使用代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ThreadLocal&amp;lt;String&amp;gt; threadLocal = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; InheritableThreadLocal inheritableThreadLocal = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InheritableThreadLocal();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        threadLocal.set(&lt;/span&gt;&quot;threadlocal value&quot;&lt;span&gt;);
        System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get threadlocal value : &quot; +&lt;span&gt; threadLocal.get());
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(()-&amp;gt;&lt;span&gt;{
            System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get threadlocal value : &quot; +&lt;span&gt; threadLocal.get());
        },&lt;/span&gt;&quot;child&quot;&lt;span&gt;).start();

        inheritableThreadLocal.set(&lt;/span&gt;&quot;inheritable threadlocal value&quot;&lt;span&gt;);
        System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get inheritable threadlocal value:&quot; +&lt;span&gt; inheritableThreadLocal.get());
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(()-&amp;gt;&lt;span&gt;{
            System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get inheritable threadlocal value : &quot; +&lt;span&gt; inheritableThreadLocal.get());
        },&lt;/span&gt;&quot;child&quot;&lt;span&gt;).start();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;main thread get threadlocal value : threadlocal value
main thread get inheritable threadlocal value:inheritable threadlocal value
child thread get threadlocal value : &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;
child thread get inheritable threadlocal value : inheritable threadlocal value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到存储到ThreadLocal中的对象只能被当前线程访问到，存储到InheritableThreadLocal中的对象可以被当前线程以及子线程访问到。&lt;/p&gt;

&lt;p&gt;先不看TheadLocal的源码，思考下如果让我们实现类似功能该怎么做。&lt;br/&gt;首先，数据只能被当前线程访问到，最合适存储的地方肯定是Thread的一个字段，每个线程都是Thread的一个实例，都可以通过Thread.currentThread()获取到，进而可以获取到当前线程的本地存储。其他线程通过Thread.currentThread()获取到的是各自的Thread实例，所以不同线程存储的数据做到了相互隔离。&lt;br/&gt;然后看下应该用什么样的数据结构。要存储数据有可能不只一条，而且有存有取是一个map结构，于是有了一个初步实现，伪代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Thread{
    Map threadLocalMap &lt;/span&gt;=&lt;span&gt; nulll;
}
ThreadLocal{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; set(val){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Thread.currentThread().threadLocalMap == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            Thread.currentThread().threadLocalMap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashMap();
        }
        Thread.currentThread().threadLocalMap.put(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,val);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object get(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Thread.currentThread().threadLocalMap.get(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用this中作为key，这样一个threadLocal代表一条数据，多个线程可能持有同一个this，但通过this拿到的值是存储在各种threadLocalMap中的值。&lt;br/&gt;下面看下ThreadLocal的源码，发现思路类似。Thread中有一个map结构的ThreadLocalMap，调用ThreadLocal.set(val)方法时，实际是以this为key，val为value存储到该map中。&lt;br/&gt;具体实现上有很多不同之处，Thread.threadLocalMap访问权限是当前包，也就是对于使用方只能通过ThreadLocal暴露的方法进行操作，可以防止其他线程拿到Thread对象后对threadLcoalMap访问，引起安全性问题。&lt;br/&gt;&lt;strong&gt;然后注意到java没有使用HashMap而是自己实现了一个ThreadLocalMap，这是出于什么原因呢？&lt;/strong&gt;&lt;br/&gt;根据ThreadLocalMap的代码，它依然是一个Hash表，但是在解决hash冲突时，不同于HashMap采用的链地址法，而是采用线行探查法。两种解决Hash冲突方法的示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/505826/201807/505826-20180727142632621-2144192356.jpg&quot; alt=&quot;&quot; width=&quot;352&quot; height=&quot;264&quot;/&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/505826/201807/505826-20180727142729471-800200169.jpg&quot; alt=&quot;&quot; width=&quot;493&quot; height=&quot;217&quot;/&gt;&lt;br/&gt;                     链地址法                                                                                        线行探查法&lt;br/&gt;&lt;strong&gt;链地址法&lt;/strong&gt;：计算key的hash值并取模，存储到对应的坑位，如果发现该坑位已经被占用，则创建一个链表节点，挂在该坑位的最后，查找时，根据key的hash值计算找到对应坑位，然后遍历坑位下的链表，知道找到key相同的节点。&lt;br/&gt;&lt;strong&gt;线行探查法&lt;/strong&gt;：计算完key的哈希值并取模后，如果发现Hash表（数组）中对应的坑位已经存在了数据，则找该坑位的下一个坑，直到找到没有数据的坑位，进行存储。&lt;br/&gt;除这两种，还有再哈希法、公共溢出区法等，在此不做详细论述。&lt;br/&gt;链表法适用于经常进行插入和删除的情况，插入和删除时只需要把对应坑位的链表节点插入和删除即可，不会影响到其他坑位的数据。缺点是容易浪费空间，如果hash表有0~9十个链表，我们有十条数据但都hash冲突比较多，有可能只有第一个链表有十个数据，其他链表都是空的。而且，散列比较均匀，每个链表有一个数据，除了存储该数据，还需要存储头结点&lt;br/&gt;线行探查法的有点是没有空间的浪费，只需要存储数据。缺点是不适合经常删除，如果删除一个结点，该结点之后的数据都需要重新计算要入到哪个坑位。或者可以假删除，等有下个元素的时候再进行替换。&lt;br/&gt;ThreadLocal使用场景是不会频繁插入，基本不会有删除操作，所以更适合线行探查法。&lt;br/&gt;使用线行探查法，要尽量保证hash值取模后能尽量均匀的三列在每个坑位上，提高插入和查找的效率。&lt;br/&gt;&lt;strong&gt;ThreadLocalMap在计算hash值的时候采用了0x61c88647,可以保证散列的非常均匀，基本没有hash冲突&lt;/strong&gt;。计算this，即ThreadLocal对象的hash值时，返回的是0x61c88647或0x61c88647的倍数。0x61c88647是根据斐波那契散列法得到的一个值，对应着32位有符号整数中的2654435769，用它对2的幂进行取模可以保证散列的非常均匀。&lt;br/&gt;&lt;strong&gt;源码中ThreadLocalMap的每个Entry都是弱引用，这是为什么呢？&lt;/strong&gt;&lt;br/&gt;这个也是重新实现map，而没有使用HashMap的原因之一。ThreadLocalMap是存储在Thread对象里的，线程不结束，这个map就会永远存在不会被GC，如果一个线程之前存储了很多数据到ThrealLocal中，现在已经不用了，但没有删除，如果强引用，这些数据就不会被GC。设置成弱引用，当ThreadLocal对象已经不被引用时，不会因为被ThreadLocalMap而引用，导致无法回收内存。&lt;/p&gt;

&lt;p&gt;InheritableThreadLocal使用模板方法模式，继承自ThreadLocal。&lt;br/&gt;和ThreadLocal相比，InheritableThreadLocal只有一点差别：数据存在在Thread对象的inheritableThreadLocal字段，而不是ThreadLocal字段。所以只覆盖了ThreadLcoal的getMap方法和createMap方法，分别用于获取map和给Thread.inheritableThreadLocal赋值。&lt;br/&gt;在创建一个线程的时候，在线程的init方法中可以看到如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (inheritThreadLocals &amp;amp;&amp;amp; parent.inheritableThreadLocals != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.inheritableThreadLocals =ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;inheritThreadLocals是init方法的参数，默认为true。只要父线程的inheritableThreadLocals字段不为空，在创建子线程的时候就会把这些数据复制给子线程。&lt;br/&gt;ThreadLocal.createInheritedMap方法是一个工厂方法，这个方法用于创建一个map对象，并把参数传递进来的map复制到新map中，需要注意的是这个复制是浅复制，map中存的是原对象的引用。示例代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; InheritableThreadLocal&amp;lt;User&amp;gt; inheritableThreadLocal = &lt;span&gt;new&lt;/span&gt; InheritableThreadLocal&amp;lt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 更新对象属性示例
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user.name &lt;/span&gt;= &quot;lanlingwang&quot;&lt;span&gt;;
        inheritableThreadLocal.set(user);
        Thread thread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(()-&amp;gt;&lt;span&gt;{
            System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get user.name : &quot; +&lt;span&gt; inheritableThreadLocal.get().name);
        },&lt;/span&gt;&quot;child1&quot;&lt;span&gt;);

        inheritableThreadLocal.get().name &lt;/span&gt;= &quot;ake&quot;&lt;span&gt;;

        thread.start();
        System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get user.name : &quot; +&lt;span&gt; inheritableThreadLocal.get().name);

        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 更新对象示例
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Thread thread2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(()-&amp;gt;&lt;span&gt;{
            System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get user.name : &quot; +&lt;span&gt; inheritableThreadLocal.get().name);
        },&lt;/span&gt;&quot;child2&quot;&lt;span&gt;);

        User user2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user2.name &lt;/span&gt;= &quot;nakelulu&quot;&lt;span&gt;;
        inheritableThreadLocal.set(user2);

        thread2.start();
        System.out.println(Thread.currentThread().getName() &lt;/span&gt;+ &quot; thread get user.name : &quot; +&lt;span&gt; inheritableThreadLocal.get().name);
    }
}
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String name ;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果ThreadLocal中存储了一个User对象，其中一个线程拿到这个对象后更改了name字段，这个更改对其他线程是可见的。如果某个线程重新往ThreadLocal中set了一个新对象，只是set到当前线程而已，不会修改其他线程的数据，因为各个线程的ThreadLocalMap是独立的，只是在创建线程的时候浅复制了一份而已。&lt;/p&gt;
</description>
<pubDate>Fri, 27 Jul 2018 06:31:00 +0000</pubDate>
<dc:creator>FuzhePan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/FuzhePan/p/9377395.html</dc:identifier>
</item>
<item>
<title>spring boot metrics信息推送开发 - zygfengyuwuzu</title>
<link>http://www.cnblogs.com/zhyg/p/9377406.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhyg/p/9377406.html</guid>
<description>
&lt;p&gt;　　上一篇文章是关于 “&lt;a href=&quot;https://www.cnblogs.com/zhyg/p/9354952.html&quot; target=&quot;_blank&quot;&gt;spring boot +RabbitMQ +InfluxDB+Grafara监控实践&lt;/a&gt;” 主要讲spring boot应用新能监控信息的收集方案实践&lt;/p&gt;
&lt;p&gt;　　实践是hystrix信息推送的mq而metrics信息需要扫描，文章的最后也有相应的思考metrics信息能不能是应用本身也推送到mq那？&lt;/p&gt;
&lt;p&gt;　　本篇文章就实践关于metrics信息的推送实现&lt;/p&gt;

&lt;p&gt;　　有了上面的思考之后我就回过头来去看hystrix是怎么实现推送的。经过一番跟踪之后找到了具体干活的task代码&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/560839/201807/560839-20180727135957217-2141371972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　有了这个代码就可以参考具体怎样实现metrics信息的推送了&lt;/p&gt;
&lt;p&gt;　　但是还有一个问题就是metrics信息虽然暴露了url接口但是应用内我怎么获取那？？？&lt;/p&gt;
&lt;p&gt;　　这里又引发了我们一探究竟的兴趣！。。。。。。继续看源码！！！！！！！！！！！&lt;/p&gt;
&lt;p&gt;　　从spring boot启动展示的日志中我们可以发现线索，具体/metrics路径具体执行的是哪里&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Mapped &quot;{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()这里我们发现了端倪&lt;/p&gt;
&lt;p&gt;　　好的 我们就去这个包去找相关线索&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/560839/201807/560839-20180727140856914-554217953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　好的我们找到了这个包往下看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/560839/201807/560839-20180727141246730-2040118942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　终于找到他了这里我们就可以用定时器进行轮训调用了。基础准备已经ok，好了不多说了直接上写好的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_8d9aa370-def3-4878-8979-d5d049d330fa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8d9aa370-def3-4878-8979-d5d049d330fa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8d9aa370-def3-4878-8979-d5d049d330fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.zjs.mic.metrics.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.PostConstruct;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.ServiceInstance;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.actuator.HasFeatures;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.serviceregistry.Registration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.context.config.annotation.RefreshScope;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.stream.annotation.EnableBinding;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.stream.annotation.Output;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.stream.config.BindingProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.stream.config.BindingServiceProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.messaging.MessageChannel;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.scheduling.annotation.EnableScheduling;


@RefreshScope
@Configuration
@ConditionalOnClass({EnableBinding.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; })
@ConditionalOnProperty(value &lt;/span&gt;= &quot;metrics.stream.queue.enabled&quot;, matchIfMissing = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
@EnableConfigurationProperties
@EnableScheduling
@EnableBinding(MetricsStreamClient.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MetricsStreamAutoConfiguration {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BindingServiceProperties bindings;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MetricsStreamProperties properties;

    @Autowired
    @Output(MetricsStreamClient.OUTPUT)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MessageChannel outboundChannel;

    @Autowired(required &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Registration registration;
    
    
    @Autowired
    MetricsMvcEndpoint mme;
    

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HasFeatures metricsStreamQueueFeature() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HasFeatures.namedFeature(&quot;Metrics Stream (Queue)&quot;&lt;span&gt;,
                MetricsStreamAutoConfiguration.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }

    @PostConstruct
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init() {
        BindingProperties outputBinding &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bindings.getBindings()
                .get(MetricsStreamClient.OUTPUT);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (outputBinding == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bindings.getBindings().put(MetricsStreamClient.OUTPUT,
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BindingProperties());
        }
        BindingProperties output &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bindings.getBindings()
                .get(MetricsStreamClient.OUTPUT);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (output.getDestination() == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            output.setDestination(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.properties.getDestination());
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (output.getContentType() == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            output.setContentType(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.properties.getContentType());
        }
    }
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MetricsStreamTask metricsStreamTask(SimpleDiscoveryClient simpleDiscoveryClient) {
        ServiceInstance serviceInstance &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.registration;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (serviceInstance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            serviceInstance &lt;/span&gt;=&lt;span&gt; simpleDiscoveryClient.getLocalServiceInstance();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MetricsStreamTask(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.outboundChannel, serviceInstance,
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.properties,&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mme);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_537ab133-012c-4905-a812-3f1bbcc63549&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_537ab133-012c-4905-a812-3f1bbcc63549&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_537ab133-012c-4905-a812-3f1bbcc63549&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.zjs.mic.metrics.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(&lt;/span&gt;&quot;metrics.stream.queue&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MetricsStreamProperties {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; prefixMetricName = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; sendId = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String destination = &quot;springCloudMetricsStream&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String contentType = &quot;application/json&quot;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String pathTail = &quot;mem.*|heap.*|threads.*|gc.*|nonheap.*|classes.*&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; sendRate = 1000&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; gatherRate = 1000&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size = 1000&lt;span&gt;;


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPathTail() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pathTail;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPathTail(String pathTail) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pathTail =&lt;span&gt; pathTail;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEnabled() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; enabled;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setEnabled(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; enabled) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.enabled =&lt;span&gt; enabled;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isPrefixMetricName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; prefixMetricName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPrefixMetricName(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; prefixMetricName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.prefixMetricName =&lt;span&gt; prefixMetricName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isSendId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sendId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSendId(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; sendId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sendId =&lt;span&gt; sendId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getDestination() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; destination;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDestination(String destination) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.destination =&lt;span&gt; destination;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getContentType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; contentType;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setContentType(String contentType) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.contentType =&lt;span&gt; contentType;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getSendRate() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sendRate;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSendRate(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; sendRate) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sendRate =&lt;span&gt; sendRate;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getGatherRate() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; gatherRate;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setGatherRate(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; gatherRate) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.gatherRate =&lt;span&gt; gatherRate;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getSize() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; size;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSize(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; size) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size =&lt;span&gt; size;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_df57a1d4-6efe-47d7-866a-b722ffa5c903&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_df57a1d4-6efe-47d7-866a-b722ffa5c903&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_df57a1d4-6efe-47d7-866a-b722ffa5c903&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.zjs.mic.metrics.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.StringWriter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.LinkedBlockingQueue;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.ServiceInstance;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.messaging.MessageChannel;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.messaging.MessageHeaders;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.messaging.support.MessageBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.scheduling.annotation.EnableScheduling;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.scheduling.annotation.Scheduled;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.Assert;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.core.JsonFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.fasterxml.jackson.core.JsonGenerator;


@EnableScheduling
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MetricsStreamTask {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger log = LoggerFactory.getLogger(MetricsStreamTask.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MessageChannel outboundChannel;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ServiceInstance registration;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MetricsStreamProperties properties;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MetricsMvcEndpoint mme;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Visible for testing&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; LinkedBlockingQueue&amp;lt;String&amp;gt;&lt;span&gt; jsonMetrics;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; JsonFactory jsonFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonFactory();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MetricsStreamTask(MessageChannel outboundChannel,
                             ServiceInstance registration, MetricsStreamProperties properties, MetricsMvcEndpoint mme) {
        Assert.notNull(outboundChannel, &lt;/span&gt;&quot;outboundChannel may not be null&quot;&lt;span&gt;);
        Assert.notNull(registration, &lt;/span&gt;&quot;registration may not be null&quot;&lt;span&gt;);
        Assert.notNull(properties, &lt;/span&gt;&quot;properties may not be null&quot;&lt;span&gt;);
        Assert.notNull(mme, &lt;/span&gt;&quot;properties may not be null&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.outboundChannel =&lt;span&gt; outboundChannel;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.registration =&lt;span&gt; registration;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.properties =&lt;span&gt; properties;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.jsonMetrics = &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;&amp;gt;&lt;span&gt;(properties.getSize());
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mme=&lt;span&gt;mme;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: use integration to split this up?&lt;/span&gt;
    @Scheduled(fixedRateString = &quot;${metrics.stream.queue.sendRate:1000}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sendMetrics() {

        log.info(&lt;/span&gt;&quot;推送metrics信息&quot;&lt;span&gt;);
        
        ArrayList&lt;/span&gt;&amp;lt;String&amp;gt; metrics = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.jsonMetrics.drainTo(metrics);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;metrics.isEmpty()) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (log.isTraceEnabled()) {
                log.trace(&lt;/span&gt;&quot;sending stream Metrics metrics size: &quot; +&lt;span&gt; metrics.size());
            }
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String json : metrics) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: batch all metrics to one message&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: remove the explicit content type when s-c-stream can handle
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; that for us&lt;/span&gt;
                    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.outboundChannel.send(MessageBuilder.withPayload(json)
                            .setHeader(MessageHeaders.CONTENT_TYPE,
                                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.properties.getContentType())
                            .build());
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (log.isTraceEnabled()) {
                        log.trace(&lt;/span&gt;&quot;failed sending stream Metrics metrics: &quot; +&lt;span&gt; ex.getMessage());
                    }
                }
            }
        }
    }

    
    
    @Scheduled(fixedRateString &lt;/span&gt;= &quot;${metrics.stream.queue.gatherRate:1000}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; gatherMetrics() {
        log.info(&lt;/span&gt;&quot;开始获取metrics信息&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            
            StringWriter jsonString &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringWriter();
            JsonGenerator json &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.jsonFactory.createGenerator(jsonString);
            json.writeStartObject();
            json.writeObjectField(&lt;/span&gt;&quot;instanceId&quot;,registration.getServiceId() + &quot;:&quot; + registration.getHost() + &quot;:&quot;
                    +&lt;span&gt; registration.getPort());
            json.writeObjectField(&lt;/span&gt;&quot;type&quot;, &quot;metrics&quot;&lt;span&gt;);
            json.writeObjectField(&lt;/span&gt;&quot;currentTime&quot;&lt;span&gt;,System.currentTimeMillis());
            @SuppressWarnings(&lt;/span&gt;&quot;unchecked&quot;&lt;span&gt;)
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; map = (Map&amp;lt;String, Object&amp;gt;) mme.value(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.properties.getPathTail());
            
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String str : map.keySet()) {
                json.writeObjectField(str, map.get(str));
            }
            
            json.writeEndObject();
            json.close();
            
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; output to stream&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.jsonMetrics.add(jsonString.getBuffer().toString());
            
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
            log.error(&lt;/span&gt;&quot;Error adding metrics metrics to queue&quot;&lt;span&gt;, ex);
        }
    }

    

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_5b03e25b-5a61-4136-a825-3542353473d4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b03e25b-5a61-4136-a825-3542353473d4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b03e25b-5a61-4136-a825-3542353473d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.zjs.mic.metrics.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.stream.annotation.Output;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.messaging.MessageChannel;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; MetricsStreamClient {
    String OUTPUT &lt;/span&gt;= &quot;metricsStreamOutput&quot;&lt;span&gt;;

    @Output(OUTPUT)
    MessageChannel metricsStreamOutput();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.zjs.mic.metrics.stream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.ElementType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Retention;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.RetentionPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.annotation.Target;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Import;

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Import(MetricsStreamAutoConfiguration.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@EnableConfigurationProperties({MetricsStreamProperties.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; EnableMetricsStream {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　已经将上面的代码包装成注解打好包 在入口类加@EnableMetricsStream 注解就能生效&lt;/p&gt;
&lt;p&gt;　　　　剩下的就是我们去mq接收信息传递到响应数据库中进行处理就行了&lt;/p&gt;
&lt;p&gt;　　从而我们在“&lt;a href=&quot;https://www.cnblogs.com/zhyg/p/9354952.html&quot; target=&quot;_blank&quot;&gt;spring boot +RabbitMQ +InfluxDB+Grafara监控实践&lt;/a&gt;” 这篇文章中的图就变成下面这样了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/560839/201807/560839-20180727142924652-1975394475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　好实践部分就到这里&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;总结思考&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;&lt;span&gt;监控信息hystrix和metrics到底是拉取好还是主动推送好！一下简单分析：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　　拉取，对于被监控的应用来说值引用少量的包节省了推送信息的线程，基本没有什么开发量，对于一些严格权限控制的springboot应用，就需要额外开接口或者拉取进行权限验证很不方便&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　　推送，应用主动推送应用相关的包和注解占用对应的线程资源，应用可以进行严格的权限控制不用对接口做例外不需要扫描程序开发。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　我的结论是两者并存，不知道大家有没有什么其他想法可以说来听听！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Fri, 27 Jul 2018 06:31:00 +0000</pubDate>
<dc:creator>zygfengyuwuzu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhyg/p/9377406.html</dc:identifier>
</item>
<item>
<title>Carbon中文使用手册 - 寞小陌</title>
<link>http://www.cnblogs.com/x-x-j/p/9377338.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/x-x-j/p/9377338.html</guid>
<description>&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Carbon &lt;/em&gt;继承了PHP的 &lt;em&gt;Datetime &lt;/em&gt;类和&lt;em&gt;JsonSerialiable&lt;/em&gt;。所以 &lt;em&gt;Carbon &lt;/em&gt;中没有涉及到的，但在 &lt;em&gt;Datetime &lt;/em&gt;和&lt;em&gt;JsonSerializable&lt;/em&gt;中已经实现的方法都是可以使用的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Carbon &lt;span&gt;extends&lt;/span&gt; DateTime &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; JsonSerializable
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;code here&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Carbon 类声明在 Carbon 命名空间下，可以通过引入命名空间的方式来代替每次输入完整的类名。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;?&lt;span&gt;php 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;use&lt;/span&gt; Carbon\Carbon;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要特别留意是否使用了正确的时区，比如的所有差异比较都使用或者系统设定的时区&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;$dtToronto&lt;/span&gt; = Carbon::create(2012, 1, 1, 0, 0, 0, 'America/Toronto'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;$dtVancouver&lt;/span&gt; = Carbon::create(2012, 1, 1, 0, 0, 0, 'America/Vancouver'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dtVancouver&lt;/span&gt;-&amp;gt;diffInHours(&lt;span&gt;$dtToronto&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上进行的时间比较是在提供的 &lt;em&gt;Carbon&lt;/em&gt; 实例所在的时区下完成的。例如作者所在的时区为 东京时间减13 小时，因此在下午一点后。&lt;em&gt;Carbon::now(‘Asia/Tokyo’)-&amp;gt;isToday()&lt;/em&gt; 将会返回 false ，如果在调用 &lt;em&gt;now()&lt;/em&gt; 时设置时区为东京时区，接下来的操作都使用东京时区是说不过去的。所以在与 &lt;em&gt;now() &lt;/em&gt;创建的实例进行比较时，默认是在当前时区下完成的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Instantiation&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;有几种不同的方法可以创建一个新的&lt;em&gt;Carbon&lt;/em&gt;实例。首先是构造函数。它覆盖父构造函数，您最好阅读&lt;em&gt;PHP&lt;/em&gt;手册中的第一个参数，并了解它所接受的日期/时间字符串格式。您可能会发现自己很少使用构造函数，而是依赖于显式静态方法来提高可读性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;$carbon&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等同于 Carbon::now()&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;$carbon&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('first day of January 2008', 'America/Vancouver'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$carbon&lt;/span&gt;);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'Carbon\Carbon'&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;$carbon&lt;/span&gt; = Carbon::now(-5);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1表示英国伦敦，2表示法国巴黎&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您将在上面注意到，&lt;em&gt;timezone(2nd)&lt;/em&gt;参数是作为字符串和整数而不是&lt;em&gt;\DateTimeZone&lt;/em&gt;实例传递的。所有&lt;em&gt;DateTimeZone&lt;/em&gt;参数都已被增强，因此您可以将一个DateTimeZone实例、字符串或整型偏移量传递给&lt;em&gt;GMT&lt;/em&gt;，并为您创建时区。在下一个示例中再次显示了这一点，该示例还介绍了&lt;em&gt;now()&lt;/em&gt;函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$nowInLondonTz&lt;/span&gt; = Carbon::now(&lt;span&gt;new&lt;/span&gt; \DateTimeZone('Europe/London'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 或者以字符串形式只传时区&lt;/span&gt;
&lt;span&gt;$nowInLondonTz&lt;/span&gt; = Carbon::now('Europe/London'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 或者在DST期间创建一个时区为+1到GMT的日期，然后传递一个整数&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now(1)-&amp;gt;tzName;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Europe/London&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果您真的喜欢您的动态方法调用，并且对使用构造函数时所需的额外的行或难看的括号感到失望，那么您将喜欢&lt;em&gt;parse&lt;/em&gt;方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; (&lt;span&gt;new&lt;/span&gt; Carbon('first day of December 2008'))-&amp;gt;addWeeks(2);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2008-12-15 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('first day of December 2008')-&amp;gt;addWeeks(2);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2008-12-15 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;:&lt;/em&gt;&lt;em&gt;在&lt;/em&gt;&lt;em&gt;PHP 5.4&lt;/em&gt; &lt;em&gt;之前&lt;/em&gt;&lt;em&gt;(new MyClass())-&amp;gt;method()&lt;/em&gt;&lt;em&gt; &lt;/em&gt;&lt;em&gt;会报语法错误&lt;/em&gt;&lt;em&gt;,&lt;/em&gt; &lt;em&gt;如果你使用&lt;/em&gt;&lt;em&gt;PHP 5.3,&lt;/em&gt; &lt;em&gt;你需要创建一个变量然后再调用方法：&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$date&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('first day of December 2008'&lt;span&gt;); 

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;addWeeks(2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;传递给&lt;em&gt;Carbon:::parse&lt;/em&gt;或&lt;em&gt;new Carbon&lt;/em&gt;的字符串可以表示相对时间(&lt;em&gt;next sunday, tomorrow, first day of next month, last year&lt;/em&gt;)或绝对时间(&lt;em&gt;first day of December 2008, 2017-01-06&lt;/em&gt;)。您可以用&lt;em&gt;Carbon::hasRelativeKeywords()&lt;/em&gt;测试一个字符串是否会产生一个相对或绝对日期。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$string&lt;/span&gt; = 'first day of next month'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;strtotime&lt;/span&gt;(&lt;span&gt;$string&lt;/span&gt;) === &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;'&lt;span&gt;$string&lt;/span&gt;' is not a valid date/time string.&quot;&lt;span&gt;;
} &lt;/span&gt;&lt;span&gt;elseif&lt;/span&gt; (Carbon::hasRelativeKeywords(&lt;span&gt;$string&lt;/span&gt;&lt;span&gt;)) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;'&lt;span&gt;$string&lt;/span&gt;' is a relative valid date/time string, it will returns different dates depending on the current date.&quot;&lt;span&gt;;
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;'&lt;span&gt;$string&lt;/span&gt;' is an absolute date/time string, it will always returns the same date.&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了配合&lt;em&gt;now()&lt;/em&gt;，还存在一些静态的实例化助手来创建广为人知的实例。这里唯一需要注意的是，&lt;em&gt;today()&lt;/em&gt;&lt;em&gt;、&lt;/em&gt;&lt;em&gt;tomorrow()&lt;/em&gt;和&lt;em&gt;yesterday()&lt;/em&gt;除了按照预期的行为，都接受一个时区参数，每个参数的时间值都设置为00:00:00。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$now&lt;/span&gt; = Carbon::&lt;span&gt;now();
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$now&lt;/span&gt;;                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-26 16:25:49&lt;/span&gt;
&lt;span&gt;$today&lt;/span&gt; = Carbon::&lt;span&gt;today();
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$today&lt;/span&gt;;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-26 00:00:00&lt;/span&gt;
&lt;span&gt;$tomorrow&lt;/span&gt; = Carbon::tomorrow('Europe/London'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$tomorrow&lt;/span&gt;;                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-27 00:00:00&lt;/span&gt;
&lt;span&gt;$yesterday&lt;/span&gt; = Carbon::&lt;span&gt;yesterday();
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$yesterday&lt;/span&gt;;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-25 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下一组静态助手是createXXX() 函数。大多数静态create函数允许您提供许多个或少量的参数，并为所有其他参数提供默认值。通常默认值是当前日期、时间或时区。更高的值将适当地包装，但无效的值将抛出一个&lt;em&gt;InvalidArgumentException&lt;/em&gt;，并附带一条信息。错误消息从&lt;em&gt;DateTime:::getLastErrors()&lt;/em&gt;调用中获取。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
Carbon::createFromDate(&lt;span&gt;$year&lt;/span&gt;, &lt;span&gt;$month&lt;/span&gt;, &lt;span&gt;$day&lt;/span&gt;, &lt;span&gt;$tz&lt;/span&gt;&lt;span&gt;);
Carbon&lt;/span&gt;::createFromTime(&lt;span&gt;$hour&lt;/span&gt;, &lt;span&gt;$minute&lt;/span&gt;, &lt;span&gt;$second&lt;/span&gt;, &lt;span&gt;$tz&lt;/span&gt;&lt;span&gt;);
Carbon&lt;/span&gt;::createFromTimeString(&quot;&lt;span&gt;$hour&lt;/span&gt;:&lt;span&gt;$minute&lt;/span&gt;:&lt;span&gt;$second&lt;/span&gt;&quot;, &lt;span&gt;$tz&lt;/span&gt;&lt;span&gt;);
Carbon&lt;/span&gt;::create(&lt;span&gt;$year&lt;/span&gt;, &lt;span&gt;$month&lt;/span&gt;, &lt;span&gt;$day&lt;/span&gt;, &lt;span&gt;$hour&lt;/span&gt;, &lt;span&gt;$minute&lt;/span&gt;, &lt;span&gt;$second&lt;/span&gt;, &lt;span&gt;$tz&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;createFromDate()&lt;/em&gt; 的默认值是当前时间. &lt;em&gt;createFromTime()&lt;/em&gt; 默认值是今天. &lt;em&gt;create()&lt;/em&gt;如果不传参数也是当前时间. 与前面一样，$tz默认设置为当前时区，否则可以是&lt;em&gt;DateTimeZone&lt;/em&gt;实例，也可以是字符串时区值。默认值(模拟底层PHP库)的唯一特殊情况发生在指定了小时值但没有分钟或秒时，它们将默认为0。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;createFromTime()&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt; will default the date to today&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;。小编经实战代码打印出来发现&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;createFromTime()&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt; &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;的默认值也是当前时间，不是今天（时分秒并不是&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;00:00:00&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;）。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$xmasThisYear&lt;/span&gt; = Carbon::createFromDate(&lt;span&gt;null&lt;/span&gt;, 12, 25);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Year默认值是今年&lt;/span&gt;
&lt;span&gt;$Y2K&lt;/span&gt; = Carbon::create(2000, 1, 1, 0, 0, 0); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等价于Carbon::createMidnightDate(2000, 1, 1)&lt;/span&gt;
&lt;span&gt;$alsoY2K&lt;/span&gt; = Carbon::create(1999, 12, 31, 24&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$noonLondonTz&lt;/span&gt; = Carbon::createFromTime(12, 0, 0, 'Europe/London'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$teaTime&lt;/span&gt; = Carbon::createFromTimeString('17:00:00', 'Europe/London'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A two digit minute could not be found&lt;/span&gt;
&lt;span&gt;try&lt;/span&gt; { Carbon::create(1975, 5, 21, 22, -2, 0); } &lt;span&gt;catch&lt;/span&gt;(\InvalidArgumentException &lt;span&gt;$x&lt;/span&gt;) { &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$x&lt;/span&gt;-&amp;gt;getMessage()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建异常发生在使用负值上，而不是在溢出上，要获取溢出上的异常，请使用&lt;em&gt;createSafe&lt;/em&gt;()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2000, 1, 35, 13, 0, 0);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2000-02-04 13:00:00
//(1月有31天，4天自动加上去转换成了2月4号)&lt;/span&gt;

&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
    Carbon&lt;/span&gt;::createSafe(2000, 1, 35, 13, 0, 0&lt;span&gt;);
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (\Carbon\Exceptions\InvalidDateException &lt;span&gt;$exp&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$exp&lt;/span&gt;-&amp;gt;&lt;span&gt;getMessage();
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 会报错:day : 35 is not a valid value.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE1&lt;/em&gt;&lt;/strong&gt;:2018-02-29会产生一个异常，而2020-02-29不会产生异常，因为2020年是闰年。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE2&lt;/em&gt;&lt;/strong&gt;:&lt;em&gt;Carbon::createSafe(2014,3,30,1,30,0,'Europe/London');&lt;/em&gt;从PHP 5.4开始也会产生一个异常，因为在夏令时跳过一个小时，但是在PHP 5.4之前，它只会创建这个无效的日期。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Carbon::createFromFormat(&lt;span&gt;$format&lt;/span&gt;, &lt;span&gt;$time&lt;/span&gt;, &lt;span&gt;$tz&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;createFromFormat()&lt;/em&gt;是最基本的php函数&lt;em&gt;DateTime:::createFromFormat&lt;/em&gt;的包装器。不同的是，$tz参数可以是&lt;em&gt;DateTimeZone&lt;/em&gt;实例或字符串时区值。此外，如果格式有错误，这个函数将调用&lt;em&gt;DateTime::getLastErrors()&lt;/em&gt;方法，然后抛出一个&lt;em&gt;InvalidArgumentException&lt;/em&gt;，错误作为消息。如果您查看上面的&lt;em&gt;createXX()&lt;/em&gt;函数的源代码，它们都会调用&lt;em&gt;createFromFor&lt;/em&gt;mat()。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromFormat('Y-m-d H', '1975-05-21 22')-&amp;gt;toDateTimeString(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1975-05-21 22:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后三个create函数用于使用unix时间戳。第一个将创建一个与给定的时间戳相等的Carbon实例，并将设置时区或默认为当前时区。第二个&lt;em&gt;createFromTimestampUTC()&lt;/em&gt;是不同的，因为时区将保持UTC(GMT)。第二种方法与&lt;em&gt;Carbon: createFromFormat('@'.$timestamp)&lt;/em&gt;的作用相同，但我只是让它更明确了一点。第三个是&lt;em&gt;createFromTimestampMs()&lt;/em&gt;，它接受以毫秒而不是秒为单位的时间戳。也允许使用负时间戳。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTimestamp(-1)-&amp;gt;toDateTimeString();                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1969-12-31 18:59:59&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTimestamp(-1, 'Europe/London')-&amp;gt;toDateTimeString();                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1970-01-01 00:59:59&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTimestampUTC(-1)-&amp;gt;toDateTimeString();                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1969-12-31 23:59:59&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTimestampMs(1)-&amp;gt;format('Y-m-d\TH:i:s.uP T');                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1969-12-31T19:00:00.001000-05:00 EST&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTimestampMs(1, 'Europe/London')-&amp;gt;format('Y-m-d\TH:i:s.uP T');       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1970-01-01T01:00:00.001000+01:00 BST&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以copy()在现有Carbon实例上创建。如预期的那样，日期、时间和时区值都被复制到新实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::&lt;span&gt;now();
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInYears(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYear());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1
// $dt 实例没有改变，任然是Carbon:now()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以在现有的Carbon实例上使用nowWithSameTz()来在相同的时区中获取一个新的实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$meeting&lt;/span&gt; = Carbon::createFromTime(19, 15, 00, 'Africa/Johannesburg'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 19:15 in Johannesburg&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; 'Meeting starts at '.&lt;span&gt;$meeting&lt;/span&gt;-&amp;gt;format('H:i').' in Johannesburg.';                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Meeting starts at 19:15 in Johannesburg.
// now in Johannesburg&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &quot;It's &quot;.&lt;span&gt;$meeting&lt;/span&gt;-&amp;gt;nowWithSameTz()-&amp;gt;format('H:i').' right now in Johannesburg.';    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; It's 09:37 right now in Johannesburg.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，如果您发现自己从另一个库继承了\DateTime实例，不要害怕!您可以通过友好的&lt;em&gt;instance&lt;/em&gt;()方法创建一个Carbon实例。或者使用更灵活的方法&lt;em&gt;make&lt;/em&gt;()，它可以从&lt;em&gt;DateTime&lt;/em&gt;、&lt;em&gt;Carbon&lt;/em&gt;或&lt;em&gt;string&lt;/em&gt;返回一个新的Carbon实例，否则它只返回null。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; \DateTime('first day of January 2008'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;== instance from another API&lt;/span&gt;
&lt;span&gt;$carbon&lt;/span&gt; = Carbon::instance(&lt;span&gt;$dt&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$carbon&lt;/span&gt;);                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'Carbon\Carbon'&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$carbon&lt;/span&gt;-&amp;gt;toDateTimeString();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2008-01-01 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于微秒的简要说明。PHP &lt;em&gt;DateTime&lt;/em&gt;对象允许您设置一个微秒值，但是忽略它的所有日期数学。现在，1.12.0的Carbon在实例化或复制操作过程中支持微秒，并在默认情况下使用&lt;em&gt;format()&lt;/em&gt;方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::parse('1975-05-21 22:23:00.123456'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;micro;                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 123456&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;micro;                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 123456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在PHP 7.1之前 DateTime微秒未添加到“now”实例，并且之后不能更改，这意味着:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$date&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; DateTime('now'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('u'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; display current microtime in PHP &amp;gt;= 7.1 (expect a bug in PHP 7.1.3 only)
// display 000000 before PHP 7.1&lt;/span&gt;

&lt;span&gt;$date&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; DateTime('2001-01-01T00:00:00.123456Z'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('u'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; display 123456 in all PHP versions&lt;/span&gt;

&lt;span&gt;$date&lt;/span&gt;-&amp;gt;modify('00:00:00.987654'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('u'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; display 987654 in PHP &amp;gt;= 7.1
// display 123456 before PHP 7.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了解决这个限制，我们在PHP &amp;lt; 7.1中调用了microseconds，但是这个特性在需要时可以被禁用(PHP &amp;gt;= 7.1):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Carbon::useMicrosecondsFallback(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(Carbon::isMicrosecondsFallbackEnabled()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;micro; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 in PHP &amp;lt; 7.1, microtime in PHP &amp;gt;= 7.1&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::useMicrosecondsFallback(&lt;span&gt;true&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default value&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::isMicrosecondsFallbackEnabled()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;micro; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; microtime in all PHP version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是否需要遍历一些日期以找到最早或最近的日期?不知道如何设置初始最大值/最小值?现在有两个助手可以帮助你做出简单的决定:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::maxValue();                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; '9999-12-31 23:59:59'&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::minValue();                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; '0001-01-01 00:00:00'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最小和最大值主要取决于系统(32位或64位)。&lt;/p&gt;
&lt;p&gt;使用32位OS系统或32位版本的PHP(您可以在PHP中使用PHP_INT_SIZE == 4来检查它)，最小值是0-unix-timestamp(1970-01-01 00:00:00)，最大值是常量PHP_INT_MAX给出的时间戳。&lt;/p&gt;
&lt;p&gt;使用64位OS系统和64位PHP版本，最小值为01-01 00:00，最大值为9999-12-31 23:59:59。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Localization&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;不幸的是，基类DateTime没有任何本地化支持。为了开始本地化支持，还添加了一个formatLocalized($format)方法。实现使用当前实例时间戳对strftime进行调用。如果您首先使用PHP函数setlocale()设置当前的语言环境，那么返回的字符串将被格式化为正确的语言环境。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$newLocale&lt;/span&gt; = &lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, 'German'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$newLocale&lt;/span&gt; === &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; '&quot;German&quot; locale is not installed on your machine, it may have a different name a different name on your machine or you may need to install it.'&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;formatLocalized('%A %d %B %Y');          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Mittwoch 21 Mai 1975&lt;/span&gt;
&lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, 'English'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;formatLocalized('%A %d %B %Y');          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Wednesday 21 May 1975&lt;/span&gt;
&lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, ''); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; reset locale&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;diffForHumans()也被定位。您可以通过使用静态Carbon::setLocale()函数来设置Carbon locale()，并使用Carbon::getLocale()获取当前的设置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Carbon::&lt;span&gt;setLocale&lt;/span&gt;('de'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::getLocale();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; de&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;addYear()-&amp;gt;diffForHumans();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; in 1 Jahr&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::&lt;span&gt;setLocale&lt;/span&gt;('en'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::getLocale();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; en&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者，您可以将一些代码与给定的语言环境隔离:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
Carbon::executeWithLocale('de', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$newLocale&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; You can optionally get $newLocale as the first argument of the closure
    // It will be set to the new locale or false if the locale was not found.&lt;/span&gt;

    &lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;addYear()-&amp;gt;&lt;span&gt;diffForHumans();
}); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; in 1 Jahr

// outside the function the locale did not change&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::getLocale();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; en

// or same using a return statement&lt;/span&gt;
&lt;span&gt;$french&lt;/span&gt; = Carbon::executeWithLocale('fr', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Carbon::now()-&amp;gt;addYear()-&amp;gt;&lt;span&gt;diffForHumans();
});
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$french&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; dans 1 an&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有些语言需要打印utf8编码(主要以. utf8结尾的语言环境包)。在本例中，您可以使用静态方法Carbon::setUtf8()对对utf8字符集的formatlocalized()调用的结果进行编码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, 'Spanish'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2016, 01, 06, 00, 00, 00&lt;span&gt;);
Carbon&lt;/span&gt;::setUtf8(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;formatLocalized('%A %d %B %Y');          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; mi�rcoles 06 enero 2016&lt;/span&gt;
Carbon::setUtf8(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;formatLocalized('%A %d %B %Y');          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; miércoles 06 enero 2016&lt;/span&gt;
Carbon::setUtf8(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, '');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Linux上&lt;/p&gt;
&lt;p&gt;如果您在翻译方面有问题，请检查系统中安装的地区(本地和生产)。&lt;/p&gt;
&lt;p&gt;区域设置-列出已启用的区域设置。&lt;/p&gt;
&lt;p&gt;sudo locale-gen fr_FR。UTF-8安装一个新的语言环境。&lt;/p&gt;
&lt;p&gt;sudo dpkg-reconfigure locale来发布所有启用的locale。&lt;/p&gt;
&lt;p&gt;并重启系统。&lt;/p&gt;
&lt;p&gt;您可以通过以下方式自定义现有语言:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
Carbon::&lt;span&gt;setLocale&lt;/span&gt;('en'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$translator&lt;/span&gt; = Carbon::&lt;span&gt;getTranslator();
&lt;/span&gt;&lt;span&gt;$translator&lt;/span&gt;-&amp;gt;setMessages('en', &lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;'day' =&amp;gt; ':count boring day|:count boring days',&lt;span&gt;
));

&lt;/span&gt;&lt;span&gt;$date1&lt;/span&gt; = Carbon::create(2018, 1, 1, 0, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$date2&lt;/span&gt; = Carbon::create(2018, 1, 4, 4, 0, 0&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffForHumans(&lt;span&gt;$date2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, 2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 boring days 4 hours&lt;/span&gt;

&lt;span&gt;$translator&lt;/span&gt;-&amp;gt;resetMessages('en'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; reset language customizations for en language&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意，您还可以使用另一个转换器Carbon::setTranslator($custom)，只要给定的转换器继承了Symfony\Component\Translation\TranslatorInterface。 因此，对格式本地化、getter(如localeMonth、localedayayofweek和短变体)的语言环境支持是由安装在操作系统中的语言环境驱动的。对于其他翻译，由于碳社区的支持，它在内部得到了支持。您可以使用以下方法检查支持的内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;array_slice&lt;/span&gt;(Carbon::getAvailableLocales(), 0, 3)).'...';      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; af, ar, ar_Shakl...

// Support diff syntax (before, after, from now, ago)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasDiffSyntax('en'));                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasDiffSyntax('zh_TW'));                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)
// Support 1-day diff words (just now, yesterday, tomorrow)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasDiffOneDayWords('en'));                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasDiffOneDayWords('zh_TW'));                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)
// Support 2-days diff words (before yesterday, after tomorrow)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasDiffTwoDayWords('en'));                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasDiffTwoDayWords('zh_TW'));                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)
// Support short units (1y = 1 year, 1mo = 1 month, etc.)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasShortUnits('en'));                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasShortUnits('zh_TW'));                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)
// Support period syntax (X times, every X, from X, to X)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasPeriodSyntax('en'));                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::localeHasPeriodSyntax('zh_TW'));                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是最后一个碳版本支持的73个地区的概述:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1200209/201807/1200209-20180727144324656-368158978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200209/201807/1200209-20180727144352642-1195433989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1200209/201807/1200209-20180727144409901-2104980442.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意，如果您使用Laravel 5.5+，语言环境将根据当前的最后一个App:setLocale execution自动设置。所以扩散人类将是透明的。您可能仍然需要在某些中间件中运行setlocale以使formatlocalizedworking正确。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Testing Aids&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;测试方法允许您在创建“现在”实例时设置要返回的Carbon实例(real或mock)。所提供的实例将在以下条件下具体返回:&lt;/p&gt;
&lt;p&gt;对static now()方法的调用，例如:Carbon::now()&lt;/p&gt;
&lt;p&gt;当一个空(或空字符串)被传递给构造函数或parse()时，ex.new Carbon(空)&lt;/p&gt;
&lt;p&gt;当字符串“now”传递给构造函数或parse()时，ex. new Carbon('now')&lt;/p&gt;
&lt;p&gt;给定的实例也将作为diff方法的默认相对时间。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$knownDate&lt;/span&gt; = Carbon::create(2001, 5, 21, 12);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create testing date&lt;/span&gt;
Carbon::setTestNow(&lt;span&gt;$knownDate&lt;/span&gt;);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; set the mock (of course this could be a real mock object)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::getTestNow();                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-21 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now();                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-21 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon();                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-21 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse();                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-21 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon('now');                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-21 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('now');                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-21 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2001, 4, 21, 12)-&amp;gt;diffForHumans(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 month ago&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::hasTestNow());                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
Carbon::setTestNow();                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; clear the mock&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::hasTestNow());                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now();                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-05 03:37:12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个更有意义的完整例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SeasonalProduct
{
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;$price&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$price&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;price = &lt;span&gt;$price&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getPrice() {
        &lt;/span&gt;&lt;span&gt;$multiplier&lt;/span&gt; = 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Carbon::now()-&amp;gt;month == 12&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$multiplier&lt;/span&gt; = 2&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;price * &lt;span&gt;$multiplier&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;$product&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; SeasonalProduct(100&lt;span&gt;);
Carbon&lt;/span&gt;::setTestNow(Carbon::parse('first day of March 2000'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$product&lt;/span&gt;-&amp;gt;getPrice();                                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 100&lt;/span&gt;
Carbon::setTestNow(Carbon::parse('first day of December 2000'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$product&lt;/span&gt;-&amp;gt;getPrice();                                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 200&lt;/span&gt;
Carbon::setTestNow(Carbon::parse('first day of May 2000'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$product&lt;/span&gt;-&amp;gt;getPrice();                                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 100&lt;/span&gt;
Carbon::setTestNow();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据给定的“now”实例，还可以对相关短语进行嘲笑。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$knownDate&lt;/span&gt; = Carbon::create(2001, 5, 21, 12);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create testing date&lt;/span&gt;
Carbon::setTestNow(&lt;span&gt;$knownDate&lt;/span&gt;);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; set the mock&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon('tomorrow');                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-22 00:00:00  ... notice the time !&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon('yesterday');                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-20 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon('next wednesday');                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-23 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon('last friday');                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-18 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Carbon('this thursday');                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-05-24 00:00:00&lt;/span&gt;
Carbon::setTestNow();                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; always clear it !&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;被认为是相对修饰语的单词列表如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;+&lt;/li&gt;
&lt;li&gt;-&lt;/li&gt;
&lt;li&gt;ago&lt;/li&gt;
&lt;li&gt;first&lt;/li&gt;
&lt;li&gt;next&lt;/li&gt;
&lt;li&gt;last&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;today&lt;/li&gt;
&lt;li&gt;tomorrow&lt;/li&gt;
&lt;li&gt;yesterday&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;请注意，与next()、previous()和modify()方法类似，这些相对修饰符中的一些将把时间设置为00:00。&lt;/p&gt;
&lt;p&gt;Carbon: parse($time， $tz)和new Carbon($time， $tz)都可以将时区作为第二个参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2012-9-5 23:26:11.223', 'Europe/Paris')-&amp;gt;timezone-&amp;gt;getName(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Europe/Paris&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getter方法是通过PHP的__get()方法实现的。这使您能够像访问属性而不是函数调用那样访问值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::parse('2012-10-5 23:26:11.123789'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这些getter方法都将返回int类型&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;year);                                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(2012)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;month);                                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(10)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;day);                                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(5)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;hour);                                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(23)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;minute);                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(26)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;second);                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(11)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;micro);                                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(123789)
// dayOfWeek 返回一个数值 0 (sunday) 到 6 (saturday)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeek);                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(5)
// dayOfWeekIso 返回一个数值 1 (monday) 到 7 (sunday)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeekIso);                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(5)&lt;/span&gt;
&lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, 'German'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;englishDayOfWeek);                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(6) &quot;Friday&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;shortEnglishDayOfWeek);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(3) &quot;Fri&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;localeDayOfWeek);                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(7) &quot;Freitag&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;shortLocaleDayOfWeek);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(2) &quot;Fr&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;englishMonth);                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(7) &quot;October&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;shortEnglishMonth);                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(3) &quot;Oct&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;localeMonth);                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(7) &quot;Oktober&quot;&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;shortLocaleMonth);                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; string(3) &quot;Okt&quot;&lt;/span&gt;
&lt;span&gt;setlocale&lt;/span&gt;(LC_TIME, ''&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfYear);                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(278)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;weekNumberInMonth);    
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; weekNumberInMonth consider weeks from monday to sunday, so the week 1 will
// contain 1 day if the month start with a sunday, and up to 7 if it starts with a monday&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;weekOfMonth);                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(1)
// weekOfMonth will returns 1 for the 7 first days of the month, then 2 from the 8th to
// the 14th, 3 from the 15th to the 21st, 4 from 22nd to 28th and 5 above&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;weekOfYear);                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(40)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;daysInMonth);                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(31)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;timestamp);                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(1349493971)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromDate(1975, 5, 21)-&amp;gt;age);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(43) calculated vs now in the same tz&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;quarter);                                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(4)

// Returns an int of seconds difference from UTC (+/- sign included)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromTimestampUTC(0)-&amp;gt;offset);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(0)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromTimestamp(0)-&amp;gt;offset);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(-18000)

// Returns an int of hours difference from UTC (+/- sign included)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromTimestamp(0)-&amp;gt;offsetHours);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(-5)

// Indicates if day light savings time is on&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromDate(2012, 1, 1)-&amp;gt;dst);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromDate(2012, 9, 1)-&amp;gt;dst);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)

// Indicates if the instance is in the same timezone as the local timezone&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::now()-&amp;gt;local);                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::now('America/Vancouver')-&amp;gt;local);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)

// Indicates if the instance is in the UTC timezone&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::now()-&amp;gt;utc);                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::now('Europe/London')-&amp;gt;utc);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createFromTimestampUTC(0)-&amp;gt;utc);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)

// Gets the DateTimeZone instance&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;get_class&lt;/span&gt;(Carbon::now()-&amp;gt;timezone);                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DateTimeZone&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;get_class&lt;/span&gt;(Carbon::now()-&amp;gt;tz);                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DateTimeZone

// Gets the DateTimeZone instance name, shortcut for -&amp;gt;timezone-&amp;gt;getName()&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;timezoneName;                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; America/Toronto&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;tzName;                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; America/Toronto&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面的setter是通过PHP的__set()方法实现的。值得注意的是，除了显式地设置时区之外，任何设置程序都不会更改实例的时区。具体地说，设置时间戳不会将相应的时区设置为UTC。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::&lt;span&gt;now();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;year = 1975&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;month = 13;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;强制 year++ 然后 month = 1&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;month = 5&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;day = 21&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;hour = 22&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;minute = 32&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;second = 5&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;timestamp = 169957925;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这不会改变时区

// 通过DateTimeZone实例或字符串设置时区&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;timezone = &lt;span&gt;new&lt;/span&gt; DateTimeZone('Europe/London'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;timezone = 'Europe/London'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;tz = 'Europe/London';
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Fluent Setters&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于setter没有可选参数，但是函数定义中有足够的多样性，因此无论如何都不需要它们。值得注意的是，除了显式地设置时区之外，任何设置程序都不会更改实例的时区。具体地说，设置时间戳不会将相应的时区设置为UTC。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::&lt;span&gt;now();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;year(1975)-&amp;gt;month(5)-&amp;gt;day(21)-&amp;gt;hour(22)-&amp;gt;minute(32)-&amp;gt;second(5)-&amp;gt;&lt;span&gt;toDateTimeString();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;setDate(1975, 5, 21)-&amp;gt;setTime(22, 32, 5)-&amp;gt;&lt;span&gt;toDateTimeString();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;setDate(1975, 5, 21)-&amp;gt;setTimeFromTimeString('22:32:05')-&amp;gt;&lt;span&gt;toDateTimeString();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;setDateTime(1975, 5, 21, 22, 32, 5)-&amp;gt;&lt;span&gt;toDateTimeString();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;timestamp(169957925)-&amp;gt;timezone('Europe/London'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;tz('America/Toronto')-&amp;gt;setTimezone('America/Vancouver');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以将日期和时间与其他DateTime/Carbon对象分开设置:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$source1&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('2010-05-16 22:40:10'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('2001-01-01 01:01:01'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;setTimeFrom(&lt;span&gt;$source1&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-01-01 22:40:10&lt;/span&gt;

&lt;span&gt;$source2&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; DateTime('2013-09-01 09:22:56'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;setDateFrom(&lt;span&gt;$source2&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2013-09-01 22:40:10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现了PHP函数__isset()。这是在一些外部系统(例如Twig)在使用属性之前验证属性的存在时完成的。这是使用isset()或empty()方法完成的。在PHP站点:__isset()、isset()、empty()上，您可以阅读更多关于这些内容的信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;isset&lt;/span&gt;(Carbon::now()-&amp;gt;iDoNotExist));       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;isset&lt;/span&gt;(Carbon::now()-&amp;gt;hour));              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;empty&lt;/span&gt;(Carbon::now()-&amp;gt;iDoNotExist));       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;empty&lt;/span&gt;(Carbon::now()-&amp;gt;year));              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;String Formatting&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所有可用的toXXXString()方法都依赖于基类方法DateTime: format()。您将注意到__toString()方法的定义，它允许在字符串上下文中使用时将一个Carbon实例打印为一个漂亮的日期时间字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(1975, 12, 25, 14, 15, 16&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toDateTimeString() == &lt;span&gt;$dt&lt;/span&gt;);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true) =&amp;gt; uses __toString()&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toDateString();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1975-12-25&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toFormattedDateString();                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Dec 25, 1975&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toTimeString();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 14:15:16&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toDateTimeString();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1975-12-25 14:15:16&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toDayDateTimeString();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Thu, Dec 25, 1975 2:15 PM

// ... of course format() is still available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;format('l jS \\of F Y h:i:s A');         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Thursday 25th of December 1975 02:15:16 PM

// The reverse hasFormat method allows you to test if a string looks like a given format&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;hasFormat('Thursday 25th December 1975 02:15:16 PM', 'l jS F Y h:i:s A')); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以设置默认的__toString()格式(默认为Y-m-d H:i:s)，这是在发生类型杂耍时使用的格式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Carbon::setToStringFormat('jS \o\f F, Y g:i:s a'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;;                                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 25th of December, 1975 2:15:16 pm&lt;/span&gt;
Carbon::&lt;span&gt;resetToStringFormat();
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;;                                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1975-12-25 14:15:16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:对于本地化支持，请参阅本地化部分。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Common Formats&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面是DateTime类中提供的公共格式的包装器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::createFromFormat('Y-m-d H:i:s.u', '2019-02-01 03:45:27.612584'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; $dt-&amp;gt;toAtomString() is the same as $dt-&amp;gt;format(DateTime::ATOM);&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toAtomString();        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-02-01T03:45:27-05:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toCookieString();      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Friday, 01-Feb-2019 03:45:27 EST&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toIso8601String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-02-01T03:45:27-05:00
// Be aware we chose to use the full-extended format of the ISO 8601 norm
// Natively, DateTime::ISO8601 format is not compatible with ISO-8601 as it
// is explained here in the PHP documentation:
// https://php.net/manual/class.datetime.php#datetime.constants.iso8601
// We consider it as a PHP mistake and chose not to provide method for this
// format, but you still can use it this way:&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;format(DateTime::ISO8601); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-02-01T03:45:27-0500&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toIso8601ZuluString(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-02-01T08:45:27Z&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc822String();      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fri, 01 Feb 19 03:45:27 -0500&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc850String();      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Friday, 01-Feb-19 03:45:27 EST&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc1036String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fri, 01 Feb 19 03:45:27 -0500&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc1123String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fri, 01 Feb 2019 03:45:27 -0500&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc2822String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fri, 01 Feb 2019 03:45:27 -0500&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc3339String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-02-01T03:45:27-05:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRfc7231String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fri, 01 Feb 2019 08:45:27 GMT&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toRssString();         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fri, 01 Feb 2019 03:45:27 -0500&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toW3cString();         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-02-01T03:45:27-05:00&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;toArray());
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
array(12) {
  [&quot;year&quot;]=&amp;gt;
  int(2019)
  [&quot;month&quot;]=&amp;gt;
  int(2)
  [&quot;day&quot;]=&amp;gt;
  int(1)
  [&quot;dayOfWeek&quot;]=&amp;gt;
  int(5)
  [&quot;dayOfYear&quot;]=&amp;gt;
  int(31)
  [&quot;hour&quot;]=&amp;gt;
  int(3)
  [&quot;minute&quot;]=&amp;gt;
  int(45)
  [&quot;second&quot;]=&amp;gt;
  int(27)
  [&quot;micro&quot;]=&amp;gt;
  int(612584)
  [&quot;timestamp&quot;]=&amp;gt;
  int(1549010727)
  [&quot;formatted&quot;]=&amp;gt;
  string(19) &quot;2019-02-01 03:45:27&quot;
  [&quot;timezone&quot;]=&amp;gt;
  object(DateTimeZone)#118 (2) {
    [&quot;timezone_type&quot;]=&amp;gt;
    int(3)
    [&quot;timezone&quot;]=&amp;gt;
    string(15) &quot;America/Toronto&quot;
  }
}
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过以下函数提供了简单的比较。请记住，比较是在UTC时区进行的，所以事情并不总是像看上去的那样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;tzName;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; America/Toronto&lt;/span&gt;
&lt;span&gt;$first&lt;/span&gt; = Carbon::create(2012, 9, 5, 23, 26, 11&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$second&lt;/span&gt; = Carbon::create(2012, 9, 5, 20, 26, 11, 'America/Vancouver'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$first&lt;/span&gt;-&amp;gt;toDateTimeString();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-09-05 23:26:11&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$first&lt;/span&gt;-&amp;gt;tzName;                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; America/Toronto&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$second&lt;/span&gt;-&amp;gt;toDateTimeString();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-09-05 20:26:11&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$second&lt;/span&gt;-&amp;gt;tzName;                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; America/Vancouver&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;eq(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;ne(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;gt(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;gte(&lt;span&gt;$second&lt;/span&gt;));                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lt(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lte(&lt;span&gt;$second&lt;/span&gt;));                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;$first&lt;/span&gt;-&amp;gt;setDateTime(2012, 1, 1, 0, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$second&lt;/span&gt;-&amp;gt;setDateTime(2012, 1, 1, 0, 0, 0);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Remember tz is 'America/Vancouver'&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;eq(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;ne(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;gt(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;gte(&lt;span&gt;$second&lt;/span&gt;));                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lt(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lte(&lt;span&gt;$second&lt;/span&gt;));                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)

// All have verbose aliases and PHP equivalent code:&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;eq(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;equalTo(&lt;span&gt;$second&lt;/span&gt;));                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt; == &lt;span&gt;$second&lt;/span&gt;);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;ne(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;notEqualTo(&lt;span&gt;$second&lt;/span&gt;));             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt; != &lt;span&gt;$second&lt;/span&gt;);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;gt(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;greaterThan(&lt;span&gt;$second&lt;/span&gt;));            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt; &amp;gt; &lt;span&gt;$second&lt;/span&gt;);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;gte(&lt;span&gt;$second&lt;/span&gt;));                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;greaterThanOrEqualTo(&lt;span&gt;$second&lt;/span&gt;));   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt; &amp;gt;= &lt;span&gt;$second&lt;/span&gt;);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lt(&lt;span&gt;$second&lt;/span&gt;));                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lessThan(&lt;span&gt;$second&lt;/span&gt;));               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt; &amp;lt; &lt;span&gt;$second&lt;/span&gt;);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lte(&lt;span&gt;$second&lt;/span&gt;));                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt;-&amp;gt;lessThanOrEqualTo(&lt;span&gt;$second&lt;/span&gt;));      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$first&lt;/span&gt; &amp;lt;= &lt;span&gt;$second&lt;/span&gt;);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些方法使用PHP $date1 == $date2提供的自然比较，因此在PHP 7.1之前，所有方法都将忽略milli/micro-seconds，然后从7.1开始考虑它们。&lt;/p&gt;
&lt;p&gt;要确定当前实例是否在其他两个实例之间，可以使用恰当命名的between()方法。第三个参数表示是否应该进行相等的比较。默认值是true，它决定了它的中间值还是等于边界。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$first&lt;/span&gt; = Carbon::create(2012, 9, 5, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$second&lt;/span&gt; = Carbon::create(2012, 9, 5, 5&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(Carbon::create(2012, 9, 5, 3)-&amp;gt;between(&lt;span&gt;$first&lt;/span&gt;, &lt;span&gt;$second&lt;/span&gt;));          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::create(2012, 9, 5, 5)-&amp;gt;between(&lt;span&gt;$first&lt;/span&gt;, &lt;span&gt;$second&lt;/span&gt;));          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::create(2012, 9, 5, 5)-&amp;gt;between(&lt;span&gt;$first&lt;/span&gt;, &lt;span&gt;$second&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;));   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哇!你忘记了min()和max()了吗?不。这也被适当命名的min()和max()方法或minimum()和maximum()别名所覆盖。与往常一样，如果指定为null，则默认参数现在为。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt1&lt;/span&gt; = Carbon::createMidnightDate(2012, 1, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt2&lt;/span&gt; = Carbon::createMidnightDate(2014, 1, 30&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;&lt;span&gt;min&lt;/span&gt;(&lt;span&gt;$dt2&lt;/span&gt;);                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-01 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;minimum(&lt;span&gt;$dt2&lt;/span&gt;);                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-01 00:00:00&lt;/span&gt;

&lt;span&gt;$dt1&lt;/span&gt; = Carbon::createMidnightDate(2012, 1, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt2&lt;/span&gt; = Carbon::createMidnightDate(2014, 1, 30&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;&lt;span&gt;max&lt;/span&gt;(&lt;span&gt;$dt2&lt;/span&gt;);                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-01-30 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;maximum(&lt;span&gt;$dt2&lt;/span&gt;);                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-01-30 00:00:00

// now is the default param&lt;/span&gt;
&lt;span&gt;$dt1&lt;/span&gt; = Carbon::createMidnightDate(2000, 1, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;&lt;span&gt;max&lt;/span&gt;();                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-05 03:37:12&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;maximum();                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-05 03:37:12&lt;/span&gt;

&lt;span&gt;$dt1&lt;/span&gt; = Carbon::createMidnightDate(2010, 4, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt2&lt;/span&gt; = Carbon::createMidnightDate(2010, 3, 28&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt3&lt;/span&gt; = Carbon::createMidnightDate(2010, 4, 16&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; returns the closest of two date (no matter before or after)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;closest(&lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;$dt3&lt;/span&gt;);                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-03-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt2&lt;/span&gt;-&amp;gt;closest(&lt;span&gt;$dt1&lt;/span&gt;, &lt;span&gt;$dt3&lt;/span&gt;);                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-04-01 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt3&lt;/span&gt;-&amp;gt;closest(&lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;$dt1&lt;/span&gt;);                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-04-01 00:00:00

// returns the farthest of two date (no matter before or after)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt1&lt;/span&gt;-&amp;gt;farthest(&lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;$dt3&lt;/span&gt;);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-04-16 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt2&lt;/span&gt;-&amp;gt;farthest(&lt;span&gt;$dt1&lt;/span&gt;, &lt;span&gt;$dt3&lt;/span&gt;);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-04-16 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt3&lt;/span&gt;-&amp;gt;farthest(&lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;$dt1&lt;/span&gt;);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-03-28 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了处理最常用的情况，这里有一些简单的帮助函数，希望它们的名称能很明显地反映出来。对于以某种方式与now() (ex.istoday()))进行比较的方法，now()是在与实例相同的时区创建的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::&lt;span&gt;now();
&lt;/span&gt;&lt;span&gt;$dt2&lt;/span&gt; = Carbon::createFromDate(1987, 4, 23&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameAs('w', &lt;span&gt;$dt2&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; w is the date of the week, so this will return true if $dt and $dt2
// the same day of week (both monday or both sunday, etc.)
// you can use any format and combine as much as you want.&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isFuture();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isPast();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameYear(&lt;span&gt;$dt2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentYear();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isNextYear();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isLastYear();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isLongYear(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; see https://en.wikipedia.org/wiki/ISO_8601#Week_dates&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isLeapYear();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameQuarter(&lt;span&gt;$dt2&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; same quarter (3 months) no matter the year of the given date&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameQuarter(&lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; same quarter of the same year of the given date&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;
    Alternatively, you can run Carbon::compareYearWithMonth() to compare both quarter and year by default,
    In this case you can use $dt-&amp;gt;isSameQuarter($dt2, false) to compare ignoring the year
    Run Carbon::compareYearWithMonth(false) to reset to the default behavior
    Run Carbon::shouldCompareYearWithMonth() to get the current setting
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentQuarter();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isNextQuarter(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; date is in the next quarter&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isLastQuarter(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; in previous quarter&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameMonth(&lt;span&gt;$dt2&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; same month no matter the year of the given date&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameMonth(&lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; same month of the same year of the given date&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;
    As for isSameQuarter, you can run Carbon::compareYearWithMonth() to compare both month and year by default,
    In this case you can use $dt-&amp;gt;isSameMonth($dt2, false) to compare ignoring the year
    Run Carbon::compareYearWithMonth(false) to reset to the default behavior
    Run Carbon::shouldCompareYearWithMonth() to get the current setting
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentMonth();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isNextMonth();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isLastMonth();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isWeekday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isWeekend();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isMonday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isTuesday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isWednesday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isThursday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isFriday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isSaturday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isSunday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isDayOfWeek(Carbon::SATURDAY); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; is a saturday&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isLastOfMonth(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; is the last day of the month&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameDay(&lt;span&gt;$dt2&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Same day of same month of same year&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentDay();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isYesterday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isToday();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isTomorrow();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isNextWeek();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isLastWeek();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameHour(&lt;span&gt;$dt2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentHour();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameMinute(&lt;span&gt;$dt2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentMinute();
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isSameSecond(&lt;span&gt;$dt2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;isCurrentSecond();

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isStartOfDay(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; check if hour is 00:00:00&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isMidnight(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; check if hour is 00:00:00 (isStartOfDay alias)&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isEndOfDay(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; check if hour is 23:59:59&lt;/span&gt;
&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;isMidday(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; check if hour is 12:00:00 (or other midday hour set with Carbon::setMidDayAt())&lt;/span&gt;
&lt;span&gt;$born&lt;/span&gt; = Carbon::createFromDate(1987, 4, 23&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$noCake&lt;/span&gt; = Carbon::createFromDate(2014, 9, 26&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$yesCake&lt;/span&gt; = Carbon::createFromDate(2014, 4, 23&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$overTheHill&lt;/span&gt; = Carbon::now()-&amp;gt;subYears(50&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$born&lt;/span&gt;-&amp;gt;isBirthday(&lt;span&gt;$noCake&lt;/span&gt;));              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$born&lt;/span&gt;-&amp;gt;isBirthday(&lt;span&gt;$yesCake&lt;/span&gt;));             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$overTheHill&lt;/span&gt;-&amp;gt;isBirthday());              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true) -&amp;gt; default compare it to today!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Addition and Subtraction&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;默认的DateTime提供了几种不同的方法来方便地添加和减少时间。有modify()、add()和sub()。modify()使用一个魔术date/time格式字符串“last day of next month”，它解析并应用修改，而add()和sub()则期望一个不那么明显的日期间隔实例(例如新的\日期间隔('P6YT5M')将意味着6年5分钟)。希望使用这些流畅的函数将会更加清晰，并且在几个星期内没有看到您的代码后更容易阅读。当然，我不会让您选择，因为基类函数仍然可用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 0&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;toDateTimeString();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addCenturies(5);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2512-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addCentury();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2612-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subCentury();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2512-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subCenturies(5);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addYears(5);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addYear();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subYear();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subYears(5);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addQuarters(2);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-07-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addQuarter();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-10-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subQuarter();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-07-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subQuarters(2);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addMonths(60);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-01-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addMonth();                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-03-03 00:00:00 equivalent of $dt-&amp;gt;month($dt-&amp;gt;month + 1); so it wraps&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subMonth();                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-02-03 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subMonths(60);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addDays(29);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-03-03 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addDay();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-03-04 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subDay();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-03-03 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subDays(29);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addWeekdays(4);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-09 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addWeekday();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-10 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subWeekday();                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-09 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subWeekdays(4);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addWeeks(3);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-24 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addWeek();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-03-02 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subWeek();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-24 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subWeeks(3);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addHours(24);                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-04 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addHour();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-04 01:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subHour();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-04 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subHours(24);                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addMinutes(61);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 01:01:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addMinute();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 01:02:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subMinute();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 01:01:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subMinutes(61);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addSeconds(61);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:01:01&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addSecond();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:01:02&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subSecond();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:01:01&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;subSeconds(61);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-03 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了好玩，您还可以将负值传递给addXXX()，实际上这就是subXXX()实现的方式。 附注:如果你忘记并使用addDay(5) 或subYear(3)，我支持你; 默认情况下，Carbon依赖于底层父类PHP DateTime行为。因此，增加或减少月份可能会溢出，例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2017, 1, 31, 0&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-03-03 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonths(2);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-12-01 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了防止溢出Carbon:usemonthverflow (false)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
Carbon::useMonthsOverflow(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2017, 1, 31&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-02-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonths(2);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-11-30 00:00:00

// Call the method with true to allow overflow again&lt;/span&gt;
Carbon::resetMonthsOverflow(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; same as Carbon::useMonthsOverflow(true);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法Carbon:::shouldOverflowMonths()允许您知道当前是否启用了溢出。您也可以使用-&amp;gt;addMonthsNoOverflow， -&amp;gt;subMonthsNoOverflow， -&amp;gt;addMonthsWithOverflow， -&amp;gt; submonth withoverflow(或单数方法，不含s至“month”)，显式add/sub，无论当前模式如何，都可以添加或不添加溢出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
Carbon::useMonthsOverflow(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2017, 1, 31&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonthWithOverflow();          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-03-03 00:00:00
// plural addMonthsWithOverflow() method is also available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonthsWithOverflow(2);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-12-01 00:00:00
// singular subMonthWithOverflow() method is also available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonthNoOverflow();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-02-28 00:00:00
// plural addMonthsNoOverflow() method is also available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonthsNoOverflow(2);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-11-30 00:00:00
// singular subMonthNoOverflow() method is also available&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-02-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonths(2);                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-11-30 00:00:00&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::useMonthsOverflow(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2017, 1, 31&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonthWithOverflow();          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-03-03 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonthsWithOverflow(2);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-12-01 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonthNoOverflow();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-02-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonthsNoOverflow(2);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-11-30 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2017-03-03 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonths(2);                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2016-12-01 00:00:00&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::resetMonthsOverflow();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从1.23.0版本开始，在以下年份也可以使用溢出控制:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
Carbon::useYearsOverflow(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2020, 2, 29&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(Carbon::shouldOverflowYears());           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYearWithOverflow();           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-03-01 00:00:00
// plural addYearsWithOverflow() method is also available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYearsWithOverflow(2);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-03-01 00:00:00
// singular subYearWithOverflow() method is also available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYearNoOverflow();             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-02-28 00:00:00
// plural addYearsNoOverflow() method is also available&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYearsNoOverflow(2);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-28 00:00:00
// singular subYearNoOverflow() method is also available&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYear();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-02-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYears(2);                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-28 00:00:00&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::useYearsOverflow(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2020, 2, 29&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(Carbon::shouldOverflowYears());           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYearWithOverflow();           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-03-01 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYearsWithOverflow(2);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-03-01 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYearNoOverflow();             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-02-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYearsNoOverflow(2);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-28 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addYear();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-03-01 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYears(2);                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-03-01 00:00:00&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::resetYearsOverflow();
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Difference&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于Carbon继承了DateTime，它继承了它的方法，如diff()，它将第二个date对象作为参数，并返回一个DateInterval实例。&lt;/p&gt;
&lt;p&gt;我们还提供了diffAsCarbonInterval()，类似于diff()，但返回一个CarbonInterval实例。检查CarbonInterval 章节了解更多信息。每个单元的Carbon添加了diff方法，如diffInYears()、diffInMonths()等。diffAsCarbonInterval()和diffIn*()方法都可以使用两个可选参数:date to compare with(如果缺失，now是默认值)，以及一个绝对布尔选项(默认为true)，无论哪个日期大于另一个，该方法都返回一个绝对值。如果设置为false，则在调用方法的实例大于比较日期(第一个参数或now)时返回负值。注意，diff()原型是不同的:它的第一个参数(date)是强制性的，第二个参数(绝对选项)默认为false。&lt;/p&gt;
&lt;p&gt;这些函数总是返回在指定的时间内表示的总差异。这与基类diff()函数不同，该函数的时间间隔为122秒，通过DateInterval实例返回2分零2秒。diffInMinutes()函数只返回2，而diffInSeconds()将返回122。所有的值都被截断而不是四舍五入。下面的每个函数都有一个默认的第一个参数，该参数是要比较的Carbon实例，如果您想使用now()，则为null。第二个参数也是可选的，如果您希望返回值是绝对值，或者如果传递的日期小于当前实例，则返回值可能具有-(负)符号的相对值。这将默认为true，返回绝对值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now('America/Vancouver')-&amp;gt;diffInSeconds(Carbon::now('Europe/London')); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;

&lt;span&gt;$dtOttawa&lt;/span&gt; = Carbon::createMidnightDate(2000, 1, 1, 'America/Toronto'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dtVancouver&lt;/span&gt; = Carbon::createMidnightDate(2000, 1, 1, 'America/Vancouver'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dtOttawa&lt;/span&gt;-&amp;gt;diffInHours(&lt;span&gt;$dtVancouver&lt;/span&gt;);                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dtVancouver&lt;/span&gt;-&amp;gt;diffInHours(&lt;span&gt;$dtOttawa&lt;/span&gt;);                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dtOttawa&lt;/span&gt;-&amp;gt;diffInHours(&lt;span&gt;$dtVancouver&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dtVancouver&lt;/span&gt;-&amp;gt;diffInHours(&lt;span&gt;$dtOttawa&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -3&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2012, 1, 31&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInDays(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth());                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInDays(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonth(), &lt;span&gt;false&lt;/span&gt;);                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -31&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2012, 4, 30&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInDays(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth());                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInDays(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addWeek());                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::createMidnightDate(2012, 1, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInMinutes(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addSeconds(59));                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInMinutes(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addSeconds(60));                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInMinutes(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addSeconds(119));                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInMinutes(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addSeconds(120));                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;addSeconds(120)-&amp;gt;secondsSinceMidnight();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 120&lt;/span&gt;

&lt;span&gt;$interval&lt;/span&gt; = &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffAsCarbonInterval(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subYears(3), &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; (&lt;span&gt;$interval&lt;/span&gt;-&amp;gt;invert ? 'minus ' : 'plus ') . &lt;span&gt;$interval&lt;/span&gt;-&amp;gt;years;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; minus 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于夏令时(DST)的重要注意，默认情况下，PHP DateTime不考虑DST，这意味着，像2014年3月30日这样只有23小时的一天在伦敦将被计算为24小时。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$date&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; DateTime('2014-03-30 00:00:00', &lt;span&gt;new&lt;/span&gt; DateTimeZone('Europe/London')); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DST off&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;modify('+25 hours')-&amp;gt;format('H:i');                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 01:00 (DST on, 24 hours only have been actually added)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Carbon也遵循这种行为，增加/减少/降低秒/分钟/小时。但是我们提供了使用时间戳进行实时工作的方法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$date&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('2014-03-30 00:00:00', 'Europe/London');    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DST off&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;addRealHours(25)-&amp;gt;format('H:i');             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 02:00 (DST on)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInRealHours('2014-03-30 00:00:00');               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInHours('2014-03-30 00:00:00');                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInRealMinutes('2014-03-30 00:00:00');             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1500&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInMinutes('2014-03-30 00:00:00');                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1560&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInRealSeconds('2014-03-30 00:00:00');             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 90000&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInSeconds('2014-03-30 00:00:00');                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 93600&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;subRealHours(25)-&amp;gt;format('H:i');             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 00:00 (DST off)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的方法可以使用addRealMinutes()、subRealMinutes()、addRealSeconds()、subRealSeconds()和所有它们的唯一快捷方式:addRealHour()、subRealHour()、addrealmin()、subRealMinute()、addRealSecond()、subRealSecond()。&lt;/p&gt;
&lt;p&gt;还有特殊的过滤器函数diffindaysfilter()、diffinhoursfilter()和difffilter()，以帮助您按天数、小时或自定义间隔过滤差异。例如，计算两个实例之间的周末天数:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2014, 1, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dt2&lt;/span&gt; = Carbon::create(2014, 12, 31&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$daysForExtraCoding&lt;/span&gt; = &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffInDaysFiltered(&lt;span&gt;function&lt;/span&gt;(Carbon &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;&lt;span&gt;isWeekend();
}&lt;/span&gt;, &lt;span&gt;$dt2&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$daysForExtraCoding&lt;/span&gt;;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 104&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2014, 1, 1)-&amp;gt;&lt;span&gt;endOfDay();
&lt;/span&gt;&lt;span&gt;$dt2&lt;/span&gt; = &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;&lt;span&gt;startOfDay();
&lt;/span&gt;&lt;span&gt;$littleHandRotations&lt;/span&gt; = &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffFiltered(CarbonInterval::minute(), &lt;span&gt;function&lt;/span&gt;(Carbon &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;minute === 0&lt;span&gt;;
}&lt;/span&gt;, &lt;span&gt;$dt2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true as last parameter returns absolute value&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$littleHandRotations&lt;/span&gt;;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;

&lt;span&gt;$date&lt;/span&gt; = Carbon::now()-&amp;gt;addSeconds(3666&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInSeconds();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3666&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInMinutes();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInHours();                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;diffInDays();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;

&lt;span&gt;$date&lt;/span&gt; = Carbon::create(2016, 1, 5, 22, 40, 32&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;secondsSinceMidnight();                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 81632&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;secondsUntilEndOfDay();                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4767&lt;/span&gt;

&lt;span&gt;$date1&lt;/span&gt; = Carbon::createMidnightDate(2016, 1, 5&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$date2&lt;/span&gt; = Carbon::createMidnightDate(2017, 3, 15&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffInDays(&lt;span&gt;$date2&lt;/span&gt;);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 435&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffInWeekdays(&lt;span&gt;$date2&lt;/span&gt;);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 311&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffInWeekendDays(&lt;span&gt;$date2&lt;/span&gt;);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 124&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffInWeeks(&lt;span&gt;$date2&lt;/span&gt;);                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffInMonths(&lt;span&gt;$date2&lt;/span&gt;);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date1&lt;/span&gt;-&amp;gt;diffInYears(&lt;span&gt;$date2&lt;/span&gt;);                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的diffIn*滤波方法都采用1个可调用滤波器作为必要参数，一个date对象作为可选的第二个参数，如果缺失，使用now。您也可以将true作为第三个参数传递，以获得绝对值。&lt;/p&gt;
&lt;p&gt;对于周/周末的高级处理，使用以下工具:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', Carbon::getDays());                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday&lt;/span&gt;

&lt;span&gt;$saturday&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('first saturday of 2019'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$sunday&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('first sunday of 2019'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$monday&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Carbon('first monday of 2019'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', Carbon::getWeekendDays());                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6, 0&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$saturday&lt;/span&gt;-&amp;gt;isWeekend());                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$sunday&lt;/span&gt;-&amp;gt;isWeekend());                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$monday&lt;/span&gt;-&amp;gt;isWeekend());                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::setWeekendDays(&lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
    Carbon&lt;/span&gt;::SUNDAY,&lt;span&gt;
    Carbon&lt;/span&gt;::MONDAY,&lt;span&gt;
));                                                          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义设置“周末”&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', Carbon::getWeekendDays());           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0, 1&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$saturday&lt;/span&gt;-&amp;gt;isWeekend());                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false),周六返回false&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$sunday&lt;/span&gt;-&amp;gt;isWeekend());                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$monday&lt;/span&gt;-&amp;gt;isWeekend());                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)，周一返回true&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::setWeekendDays(&lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
    Carbon&lt;/span&gt;::SATURDAY,&lt;span&gt;
    Carbon&lt;/span&gt;::SUNDAY,&lt;span&gt;
));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; weekend days and start/end of week or not linked&lt;/span&gt;
Carbon::setWeekStartsAt(Carbon::&lt;span&gt;FRIDAY);
Carbon&lt;/span&gt;::setWeekEndsAt(Carbon::WEDNESDAY); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; and it does not need neither to precede the start&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(Carbon::getWeekStartsAt() === Carbon::FRIDAY);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::getWeekEndsAt() === Carbon::WEDNESDAY);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$saturday&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;startOfWeek()-&amp;gt;toRfc850String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Friday, 06-Jul-18 00:00:00 EDT&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$saturday&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;endOfWeek()-&amp;gt;toRfc850String();       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Wednesday, 11-Jul-18 23:59:59 EDT&lt;/span&gt;
&lt;span&gt;
Carbon&lt;/span&gt;::setWeekStartsAt(Carbon::&lt;span&gt;MONDAY);
Carbon&lt;/span&gt;::setWeekEndsAt(Carbon::&lt;span&gt;SUNDAY);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$saturday&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;startOfWeek()-&amp;gt;toRfc850String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Monday, 02-Jul-18 00:00:00 EDT&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$saturday&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;endOfWeek()-&amp;gt;toRfc850String();       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sunday, 08-Jul-18 23:59:59 EDT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Difference for Humans&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对人类来说，一个月前比30天前更容易阅读。这是在大多数日期库中常见的函数，所以我也想在这里添加它。函数的唯一参数是另一个要对其进行diff的Carbon实例，当然，如果没有指定，它默认为now()。&lt;/p&gt;
&lt;p&gt;此方法将在相对于实例的差值和传入实例的差值之后添加短语。有4个可能性:&lt;/p&gt;
&lt;p&gt;当将过去的值与现在的默认值进行比较时:&lt;/p&gt;
&lt;p&gt;1小时前&lt;/p&gt;
&lt;p&gt;5个月前&lt;/p&gt;
&lt;p&gt;当将未来的值与现在的默认值进行比较时:&lt;/p&gt;
&lt;p&gt;从现在开始的1小时&lt;/p&gt;
&lt;p&gt;从现在开始的5个月&lt;/p&gt;
&lt;p&gt;当比较一个过去的值与另一个值时:&lt;/p&gt;
&lt;p&gt;前1小时&lt;/p&gt;
&lt;p&gt;5个月前&lt;/p&gt;
&lt;p&gt;当比较未来的价值与另一个价值时:&lt;/p&gt;
&lt;p&gt;1小时后&lt;/p&gt;
&lt;p&gt;5个月后&lt;/p&gt;
&lt;p&gt;您还可以将true作为第二个参数传递，以便从现在开始删除修饰符，等等:diffforhuman ($other, true)。&lt;/p&gt;
&lt;p&gt;如果在所使用的语言环境:diffforhuman ($other, false, true)中可用，您可以将true作为第三个参数传递给它，以使用简短语法。&lt;/p&gt;
&lt;p&gt;您可以将1和6之间的数字作为第4个参数传递给diffforhuman ($other, false, false, 4)。&lt;/p&gt;
&lt;p&gt;$other实例可以是DateTime、Carbon实例或任何实现DateTimeInterface的对象，如果传递了一个字符串，它将被解析为获取一个Carbon实例，如果传递了null，那么将使用Carbon: now()。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The most typical usage is for comments
// The instance is the date the comment was created and its being compared to default now()&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;subDays(5)-&amp;gt;diffForHumans();               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5 days ago&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;diffForHumans(Carbon::now()-&amp;gt;subYear());   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year after&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::createFromDate(2011, 8, 1&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffForHumans(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;addMonth());                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 month before&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;diffForHumans(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;copy&lt;/span&gt;()-&amp;gt;subMonth());                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 month after&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;addSeconds(5)-&amp;gt;diffForHumans();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5 seconds from now&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;subDays(24)-&amp;gt;diffForHumans();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 weeks ago（21-27都返回这个，一个周的单位是7天，小于7直接舍去）&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::now()-&amp;gt;subDays(24)-&amp;gt;diffForHumans(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 weeks（21-27都返回这个，一个周的单位是7天，小于7直接舍去）&lt;/span&gt;


&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2019-08-03')-&amp;gt;diffForHumans('2019-08-13');           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 week before(时间间隔7-13天都是返回这个，一个周的单位是7天，小于7直接舍去）&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2000-01-01 00:50:32')-&amp;gt;diffForHumans('@946684800');  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5 hours after(同理，都是舍去的)&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::create(2018, 2, 26, 4, 29, 43)-&amp;gt;diffForHumans(Carbon::create(2016, 6, 21, 0, 0, 0), &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, 6); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year 8 months 5 days 4 hours 29 minutes 43 seconds after&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以在调用diffforhuman()之前使用Carbon::setLocale('fr')更改字符串的locale。有关更多细节，请参见本地化部分。&lt;/p&gt;
&lt;p&gt;可以通过以下方式启用/禁用diffforhuman()选项:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Carbon::enableHumanDiffOption(Carbon::&lt;span&gt;NO_ZERO_DIFF);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;((bool) (Carbon::getHumanDiffOptions() &amp;amp; Carbon::NO_ZERO_DIFF)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
Carbon::disableHumanDiffOption(Carbon::&lt;span&gt;NO_ZERO_DIFF);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;((bool) (Carbon::getHumanDiffOptions() &amp;amp; Carbon::NO_ZERO_DIFF)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可用的选项是:&lt;/p&gt;
&lt;p&gt;Carbon::NO_ZERO_DIFF(默认启用):将空diff变为1秒&lt;/p&gt;
&lt;p&gt;Carbon::JUST_NOW在默认情况下是禁用的):从现在开始变为“刚才”&lt;/p&gt;
&lt;p&gt;Carbon:ONE_DAY_WORDS(默认禁用):将“从现在/之前1天”变为“昨天/明天”&lt;/p&gt;
&lt;p&gt;Carbon::TWO_DAY_WORDS(默认禁用):将“从现在/之前2天”变为“昨天/之后”&lt;/p&gt;
&lt;p&gt;Carbon::JUST_NOW，Carbon::ONE_DAY_WORDS和Carbon::TWO_DAY_WORDS现在只能使用en和fr语言，其他语言将会恢复到以前的行为，直到添加缺失的翻译。&lt;/p&gt;
&lt;p&gt;使用管道操作符一次启用/禁用多个选项，例如:Carbon::ONE_DAY_WORDS | Carbon::TWO_DAY_WORDS&lt;/p&gt;
&lt;p&gt;您还可以使用setHumanDiffOptions($options)禁用所有选项，然后只激活作为参数传递的选项。&lt;/p&gt;
&lt;p&gt;这些方法组对当前实例进行了有益的修改。他们中的大多数方法的名字都是不言自明的……或者至少应该是这样。您还会注意到startOfXXX()、next()和previous()方法将时间设置为00:00,endOfXXX()方法将时间设置为23:59:59。&lt;/p&gt;
&lt;p&gt;唯一稍有不同的是average()函数。它将实例移动到其本身和提供的碳参数之间的中间日期。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;258&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 15, 32, 45&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfMinute();                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 15:32:00&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 15, 32, 45&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfMinute();                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 15:32:59&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 15, 32, 45&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfHour();                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 15:00:00&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 15, 32, 45&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfHour();                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 15:59:59&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 15, 32, 45&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::getMidDayAt();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12获取正午时间&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;midDay();                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 12:00:00&lt;/span&gt;
Carbon::setMidDayAt(13);                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置正午时间为13点&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::getMidDayAt();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;midDay();                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 13:00:00&lt;/span&gt;
Carbon::setMidDayAt(12&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfDay();                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 00:00:00&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfDay();                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 23:59:59&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfMonth();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-01 00:00:00&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfMonth();                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-31 23:59:59&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfYear();                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-01 00:00:00&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfYear();                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-12-31 23:59:59&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfDecade();                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-01-01 00:00:00 十年（“年代？”）的开始1990，2000，2010，2010&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfDecade();                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2019-12-31 23:59:59&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfCentury();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2001-01-01 00:00:00 世纪的开始？为什么不是2000-01-01 00:00:00？？？可能老外就是这个定义的吧……&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfCentury();                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2100-12-31 23:59:59 世纪的结束？为什么不是2099-12-31 23:59:59？？？&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;startOfWeek();                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-30 00:00:00&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeek == Carbon::MONDAY);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true) : ISO8601 week starts on Monday ISO8601标准每周的开始是周一，老外好像认为每周的开始是周日……&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;endOfWeek();                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-05 23:59:59&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeek == Carbon::SUNDAY);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true) : ISO8601 week ends on Sunday&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;next&lt;/span&gt;(Carbon::WEDNESDAY);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-02-01 00:00:00 传了参数表示“下一个周三”，不传表示“明天”&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeek == Carbon::WEDNESDAY);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 1, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;next&lt;/span&gt;();                                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-08 00:00:00&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 31, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;previous(Carbon::WEDNESDAY);             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-01-25 00:00:00 传了参数表示“上一个周三”，不传表示“昨天”&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeek == Carbon::WEDNESDAY);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 1, 1, 12, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;previous();                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2011-12-25 00:00:00&lt;/span&gt;

&lt;span&gt;$start&lt;/span&gt; = Carbon::create(2014, 1, 1, 0, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$end&lt;/span&gt; = Carbon::create(2014, 1, 30, 0, 0, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$start&lt;/span&gt;-&amp;gt;average(&lt;span&gt;$end&lt;/span&gt;);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-01-15 12:00:00 (1+30)/2 = 15 int运算&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;firstOfMonth();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-05-01 00:00:00 这个月的第一天&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;firstOfMonth(Carbon::MONDAY);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-05-05 00:00:00 这个月的第一个周一&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;lastOfMonth();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-05-31 00:00:00 这个月的最后一天&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;lastOfMonth(Carbon::TUESDAY);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-05-27 00:00:00 这个月的最后一个周二&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;nthOfMonth(2, Carbon::SATURDAY);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-05-10 00:00:00 这个月的第“2”个“周六”，2和周六是参数&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;firstOfQuarter();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-04-01 00:00:00 这个季度的第一天（5月是第二个季度，所以是4月1号）&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;firstOfQuarter(Carbon::MONDAY);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-04-07 00:00:00 这个季度的第一个周一&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;lastOfQuarter();                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-06-30 00:00:00 这个季度的最后一天&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;lastOfQuarter(Carbon::TUESDAY);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-06-24 00:00:00 这个季度的最后一个周二&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;nthOfQuarter(2, Carbon::SATURDAY);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-04-12 00:00:00 这个季度的第“2”个“周六”，2和周六是参数&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;startOfQuarter();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-04-01 00:00:00 这个季度的开始&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;endOfQuarter();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-06-30 23:59:59 这个季度的结束&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;firstOfYear();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-01-01 00:00:00 同上……&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;firstOfYear(Carbon::MONDAY);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-01-06 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;lastOfYear();                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-12-31 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;lastOfYear(Carbon::TUESDAY);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-12-30 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2014, 5, 30, 0, 0, 0)-&amp;gt;nthOfYear(2, Carbon::SATURDAY);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2014-01-11 00:00:00&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; Carbon::create(2018, 2, 23, 0, 0, 0)-&amp;gt;nextWeekday();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-26 00:00:00 下周一&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2018, 2, 23, 0, 0, 0)-&amp;gt;previousWeekday();                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-22 00:00:00 这周的上一个工作日&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2018, 2, 21, 0, 0, 0)-&amp;gt;nextWeekendDay();                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-24 00:00:00 即将要过的周末的第一天（即这星期的周六，如果今天是周六，则结果是周日）&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::create(2018, 2, 21, 0, 0, 0)-&amp;gt;previousWeekendDay();                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-02-18 00:00:00 刚过完的周末的最后一个（即上一周的周日，如果今天是周日，则结果是周六）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的常数是在Carbon中定义的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; These getters specifically return integers, ie intval()&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::SUNDAY);                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(0)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::MONDAY);                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(1)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::TUESDAY);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(2)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::WEDNESDAY);                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(3)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::THURSDAY);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(4)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::FRIDAY);                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(5)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::SATURDAY);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(6)&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(Carbon::YEARS_PER_CENTURY);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(100)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::YEARS_PER_DECADE);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(10)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::MONTHS_PER_YEAR);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(12)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::WEEKS_PER_YEAR);                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(52)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::DAYS_PER_WEEK);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(7)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::HOURS_PER_DAY);                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(24)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::MINUTES_PER_HOUR);                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(60)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::SECONDS_PER_MINUTE);              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int(60)&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = Carbon::createFromDate(2012, 10, 6&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;dayOfWeek === Carbon::&lt;span&gt;SATURDAY) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; 'Place bets on Ottawa Senators Winning!'&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;Serialization&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Carbon实例能被序列化的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 12, 25, 20, 30, 00, 'Europe/Moscow'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;serialize&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;);                                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; O:13:&quot;Carbon\Carbon&quot;:3:{s:4:&quot;date&quot;;s:26:&quot;2012-12-25 20:30:00.000000&quot;;s:13:&quot;timezone_type&quot;;i:3;s:8:&quot;timezone&quot;;s:13:&quot;Europe/Moscow&quot;;}
// 等同于:&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;serialize&lt;/span&gt;();                                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; O:13:&quot;Carbon\Carbon&quot;:3:{s:4:&quot;date&quot;;s:26:&quot;2012-12-25 20:30:00.000000&quot;;s:13:&quot;timezone_type&quot;;i:3;s:8:&quot;timezone&quot;;s:13:&quot;Europe/Moscow&quot;;}&lt;/span&gt;

&lt;span&gt;$dt&lt;/span&gt; = 'O:13:&quot;Carbon\Carbon&quot;:3:{s:4:&quot;date&quot;;s:26:&quot;2012-12-25 20:30:00.000000&quot;;s:13:&quot;timezone_type&quot;;i:3;s:8:&quot;timezone&quot;;s:13:&quot;Europe/Moscow&quot;;}'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;unserialize&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;)-&amp;gt;format('Y-m-d\TH:i:s.uP T');               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-12-25T20:30:00.000000+04:00 MSK
// 等同于:&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::fromSerialized(&lt;span&gt;$dt&lt;/span&gt;)-&amp;gt;format('Y-m-d\TH:i:s.uP T');    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-12-25T20:30:00.000000+04:00 MSK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Carbon实例可以从JSON编码和解码(这些特性只能从PHP 5.4+中获得，参见下面关于PHP 5.3的注释)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 12, 25, 20, 30, 00, 'Europe/Moscow'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; json_encode(&lt;span&gt;$dt&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {&quot;date&quot;:&quot;2012-12-25 20:30:00.000000&quot;,&quot;timezone_type&quot;:3,&quot;timezone&quot;:&quot;Europe\/Moscow&quot;}&lt;/span&gt;

&lt;span&gt;$json&lt;/span&gt; = '{&quot;date&quot;:&quot;2012-12-25 20:30:00.000000&quot;,&quot;timezone_type&quot;:3,&quot;timezone&quot;:&quot;Europe\/Moscow&quot;}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$dt&lt;/span&gt; = Carbon::__set_state(json_decode(&lt;span&gt;$json&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$dt&lt;/span&gt;-&amp;gt;format('Y-m-d\TH:i:s.uP T'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2012-12-25T20:30:00.000000+04:00 MSK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以使用serializeUsing()自定义序列化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 12, 25, 20, 30, 00, 'Europe/Moscow'&lt;span&gt;);
Carbon&lt;/span&gt;::serializeUsing(&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;&lt;span&gt;getTimestamp();
});
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; json_encode(&lt;span&gt;$dt&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
1356453000
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Call serializeUsing with null to reset the serializer:&lt;/span&gt;
Carbon::serializeUsing(&lt;span&gt;null&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jsonSerialize()方法返回中间通过“json_encode”将其转换为字符串，它还允许您使用PHP 5.3兼容性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dt&lt;/span&gt; = Carbon::create(2012, 12, 25, 20, 30, 00, 'Europe/Moscow'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; json_encode(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;jsonSerialize());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {&quot;date&quot;:&quot;2012-12-25 20:30:00.000000&quot;,&quot;timezone_type&quot;:3,&quot;timezone&quot;:&quot;Europe\/Moscow&quot;}
// This is equivalent to the first json_encode example but works with PHP 5.3.

// And it can be used separately:&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$dt&lt;/span&gt;-&amp;gt;&lt;span&gt;jsonSerialize());
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; array(3) {&lt;/span&gt;
[&quot;date&quot;]=&amp;gt;
  &lt;span&gt;string&lt;/span&gt;(26) &quot;2012-12-25 20:30:00.000000&quot;&lt;span&gt;
[&lt;/span&gt;&quot;timezone_type&quot;]=&amp;gt;&lt;span&gt;
  int(&lt;/span&gt;3&lt;span&gt;)
  [&lt;/span&gt;&quot;timezone&quot;]=&amp;gt;
  &lt;span&gt;string&lt;/span&gt;(13) &quot;Europe/Moscow&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果您习惯于使用Laravel和对象(如响应或集合)，您可能熟悉这个宏概念。Carbon macro()的工作方式与Laravel宏特性相同，它将方法名作为第一个参数，闭包作为第二个参数。这使得闭包操作可以作为一个具有给定名称的方法在所有Carbon实例(也可以作为Carbon static方法)上使用。&lt;/p&gt;
&lt;p&gt;在PHP 5.4中，$this可用于闭包中引用当前实例。对于PHP 5.3的兼容性，我们还向闭包添加了一个“$self”属性。例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
Carbon::macro('diffFromYear', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$year&lt;/span&gt;, &lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个块是为了在独立的Carbon上与PHP版本&amp;lt; 5.4和Laravel兼容&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;兼容性块的结束。&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;diffForHumans(Carbon::create(&lt;span&gt;$year&lt;/span&gt;, 1, 1, 0, 0, 0), &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, 3&lt;span&gt;);
});
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2020-01-12 12:00:00')-&amp;gt;diffFromYear(2019);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year 1 week 4 days after&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;兼容性块允许您确保宏的完全兼容性。一个关于Illuminate\Support\Carbon (Laravel包装类)的宏将不会被定义，正如上面在PHP 5.3 $this中提到的，这个不会被定义。要使宏在任何地方都能工作，只需粘贴这个if语句测试如果它是定义的，而不是$self然后复制它，然后在函数体中使用$self。&lt;/p&gt;
&lt;p&gt;不管您是否省略了一些可选参数，只要$self有这个名称，并且是最后一个参数:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
Carbon::macro('diffFromYear', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$year&lt;/span&gt;, &lt;span&gt;$absolute&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;$short&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;$parts&lt;/span&gt; = 1, &lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;diffForHumans(Carbon::create(&lt;span&gt;$year&lt;/span&gt;, 1, 1, 0, 0, 0), &lt;span&gt;$absolute&lt;/span&gt;, &lt;span&gt;$short&lt;/span&gt;, &lt;span&gt;$parts&lt;/span&gt;&lt;span&gt;);
});

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2020-01-12 12:00:00')-&amp;gt;diffFromYear(2019);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year after&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2020-01-12 12:00:00')-&amp;gt;diffFromYear(2019, &lt;span&gt;true&lt;/span&gt;);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2020-01-12 12:00:00')-&amp;gt;diffFromYear(2019, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1yr&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2020-01-12 12:00:00')-&amp;gt;diffFromYear(2019, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, 5);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1yr 1w 4d 12h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以将宏分组到类中，并与mixin()一起应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Class&lt;/span&gt;&lt;span&gt; BeerDayCarbonMixin
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; nextBeerDay()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;modify('next wednesday'&lt;span&gt;);
        };
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; previousBeerDay()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;modify('previous wednesday'&lt;span&gt;);
        };
    }
}

Carbon&lt;/span&gt;::mixin(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeerDayCarbonMixin());

&lt;/span&gt;&lt;span&gt;$date&lt;/span&gt; = Carbon::parse('First saturday of December 2018'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;previousBeerDay();                                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-11-28 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;nextBeerDay();                                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-12-05 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以用hasMacro()检查是否可用宏(包括mixin)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::hasMacro('previousBeerDay'));                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::hasMacro('diffFromYear'));                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::hasMacro('dontKnowWhat'));                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你猜怎么着?在CarbonInterval和CarbonPeriod类上也可以使用所有的宏方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
CarbonInterval::macro('twice', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;times(2&lt;span&gt;);
});
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; CarbonInterval::day()-&amp;gt;twice()-&amp;gt;forHumans();                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 days&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::hours(2)-&amp;gt;minutes(15)-&amp;gt;twice()-&amp;gt;forHumans(&lt;span&gt;true&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4h 30m&lt;/span&gt;
&lt;span&gt;
CarbonPeriod&lt;/span&gt;::macro('countWeekdays', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;filter('isWeekday')-&amp;gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;();
});
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; CarbonPeriod::create('2017-11-01', '2017-11-30')-&amp;gt;countWeekdays();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonPeriod::create('2017-12-01', '2017-12-31')-&amp;gt;countWeekdays();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是社区提出的一些有用的宏:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
Carbon::macro('isHoliday', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;in_array&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;-&amp;gt;format('d/m'),&lt;span&gt; [
        &lt;/span&gt;'25/12', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Christmas&lt;/span&gt;
        '01/01', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; New Year
        // ...&lt;/span&gt;
&lt;span&gt;    ]);
});
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createMidnightDate(2012, 12, 25)-&amp;gt;isHoliday());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createMidnightDate(2017, 6, 25)-&amp;gt;isHoliday());   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(Carbon::createMidnightDate(2021, 1, 1)-&amp;gt;isHoliday());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Credit:kylekatarnls(# 116)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;检查cmixin/业务日以获得更完整的业务日处理程序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Class&lt;/span&gt;&lt;span&gt; CurrentDaysCarbonMixin
{
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Get the all dates of week
     *
     * @return array
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getCurrentWeekDays()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;$startOfWeek&lt;/span&gt; = (&lt;span&gt;$self&lt;/span&gt; ?: &lt;span&gt;static&lt;/span&gt;::now())-&amp;gt;startOfWeek()-&amp;gt;&lt;span&gt;subDay();
            &lt;/span&gt;&lt;span&gt;$weekDays&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;static&lt;/span&gt;::DAYS_PER_WEEK; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$weekDays&lt;/span&gt;[] = &lt;span&gt;$startOfWeek&lt;/span&gt;-&amp;gt;addDay()-&amp;gt;startOfDay()-&amp;gt;&lt;span&gt;copy&lt;/span&gt;&lt;span&gt;();
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$weekDays&lt;/span&gt;&lt;span&gt;;
        };
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Get the all dates of month
     *
     * @return array
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getCurrentMonthDays()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;$startOfMonth&lt;/span&gt; = (&lt;span&gt;$self&lt;/span&gt; ?: &lt;span&gt;static&lt;/span&gt;::now())-&amp;gt;startOfMonth()-&amp;gt;&lt;span&gt;subDay();
            &lt;/span&gt;&lt;span&gt;$endOfMonth&lt;/span&gt; = (&lt;span&gt;$self&lt;/span&gt; ?: &lt;span&gt;static&lt;/span&gt;::now())-&amp;gt;endOfMonth()-&amp;gt;format('d'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;$monthDays&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$endOfMonth&lt;/span&gt;; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;$monthDays&lt;/span&gt;[] = &lt;span&gt;$startOfMonth&lt;/span&gt;-&amp;gt;addDay()-&amp;gt;startOfDay()-&amp;gt;&lt;span&gt;copy&lt;/span&gt;&lt;span&gt;();
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$monthDays&lt;/span&gt;&lt;span&gt;;
        };
    }
}

Carbon&lt;/span&gt;::mixin(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CurrentDaysCarbonMixin());

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; dumpDateList(&lt;span&gt;$dates&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$dates&lt;/span&gt;), 0, 100).'...'&lt;span&gt;;
}

dumpDateList(Carbon&lt;/span&gt;::getCurrentWeekDays());                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-02 00:00:00, 2018-07-03 00:00:00, 2018-07-04 00:00:00, 2018-07-05 00:00:00, 2018-07-06 00:00...&lt;/span&gt;
dumpDateList(Carbon::getCurrentMonthDays());                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-01 00:00:00, 2018-07-02 00:00:00, 2018-07-03 00:00:00, 2018-07-04 00:00:00, 2018-07-05 00:00...&lt;/span&gt;
dumpDateList(Carbon::now()-&amp;gt;subMonth()-&amp;gt;getCurrentWeekDays());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-06-04 00:00:00, 2018-06-05 00:00:00, 2018-06-06 00:00:00, 2018-06-07 00:00:00, 2018-06-08 00:00...&lt;/span&gt;
dumpDateList(Carbon::now()-&amp;gt;subMonth()-&amp;gt;getCurrentMonthDays());   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-06-01 00:00:00, 2018-06-02 00:00:00, 2018-06-03 00:00:00, 2018-06-04 00:00:00, 2018-06-05 00:00...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Credit: &lt;/em&gt;&lt;a href=&quot;https://github.com/meteguerlek&quot;&gt;&lt;em&gt;meteguerlek&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (&lt;/em&gt;&lt;a href=&quot;https://github.com/briannesbitt/Carbon/pull/1191&quot;&gt;&lt;em&gt;#1191&lt;/em&gt;&lt;/a&gt;&lt;em&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Carbon::macro('toAtomStringWithNoTimezone', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
        &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;format('Y-m-d\TH:i:s'&lt;span&gt;);
});
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::parse('2021-06-16 20:08:34')-&amp;gt;toAtomStringWithNoTimezone(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2021-06-16T20:08:34&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;em&gt;Credit: afrojuju1 (#1063).&lt;/em&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
Carbon::macro('easterDate', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$year&lt;/span&gt;&lt;span&gt;) {    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Carbon::createMidnightDate(&lt;span&gt;$year&lt;/span&gt;, 3, 21)-&amp;gt;addDays(&lt;span&gt;easter_days&lt;/span&gt;(&lt;span&gt;$year&lt;/span&gt;&lt;span&gt;));
});
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::easterDate(2015)-&amp;gt;format('d/m'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 05/04&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; Carbon::easterDate(2016)-&amp;gt;format('d/m'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 27/03&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; Carbon::easterDate(2017)-&amp;gt;format('d/m'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 16/04&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; Carbon::easterDate(2018)-&amp;gt;format('d/m'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 01/04&lt;/span&gt;
    &lt;span&gt;echo&lt;/span&gt; Carbon::easterDate(2019)-&amp;gt;format('d/m'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 21/04&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Credit: &lt;/em&gt;&lt;a href=&quot;https://github.com/andreisena&quot;&gt;&lt;em&gt;andreisena&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, &lt;/em&gt;&lt;a href=&quot;https://github.com/36864&quot;&gt;&lt;em&gt;36864&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (&lt;/em&gt;&lt;a href=&quot;https://github.com/briannesbitt/Carbon/pull/1052&quot;&gt;&lt;em&gt;#1052&lt;/em&gt;&lt;/a&gt;&lt;em&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;查看cmixin/工作日以获得更完整的假日处理程序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
Carbon::macro('range', &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$startDate&lt;/span&gt;, &lt;span&gt;$endDate&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DatePeriod(&lt;span&gt;$startDate&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; DateInterval('P1D'), &lt;span&gt;$endDate&lt;/span&gt;&lt;span&gt;);
});
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (Carbon::&lt;span&gt;range&lt;/span&gt;(Carbon::createMidnightDate(2019, 3, 28), Carbon::createMidnightDate(2019, 4, 3)) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&lt;span&gt;$date&lt;/span&gt;\n&quot;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
2019-03-28 00:00:00
2019-03-29 00:00:00
2019-03-30 00:00:00
2019-03-31 00:00:00
2019-04-01 00:00:00
2019-04-02 00:00:00
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Credit: &lt;/em&gt;&lt;a href=&quot;https://github.com/reinink&quot;&gt;&lt;em&gt;reinink&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (&lt;/em&gt;&lt;a href=&quot;https://github.com/briannesbitt/Carbon/pull/132&quot;&gt;&lt;em&gt;#132&lt;/em&gt;&lt;/a&gt;&lt;em&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserTimezoneCarbonMixin
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;$userTimeZone&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Set user timezone, will be used before format function to apply current user timezone
     *
     * @param $timezone
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; setUserTimezone()
    {
        &lt;/span&gt;&lt;span&gt;$mixin&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$timezone&lt;/span&gt;) &lt;span&gt;use&lt;/span&gt; (&lt;span&gt;$mixin&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$mixin&lt;/span&gt;-&amp;gt;userTimeZone = &lt;span&gt;$timezone&lt;/span&gt;&lt;span&gt;;
        };
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Returns date formatted according to given format.
     *
     * @param string $format
     *
     * @return string
     *
     * @link http://php.net/manual/en/datetime.format.php
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; tzFormat()
    {
        &lt;/span&gt;&lt;span&gt;$mixin&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$format&lt;/span&gt;, &lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;use&lt;/span&gt; (&lt;span&gt;$mixin&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; compatibility chunk&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$self&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;isset&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;&lt;span&gt;)) {
                &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;is_null&lt;/span&gt;(&lt;span&gt;$mixin&lt;/span&gt;-&amp;gt;&lt;span&gt;userTimeZone)) {
                &lt;/span&gt;&lt;span&gt;$self&lt;/span&gt;-&amp;gt;timezone(&lt;span&gt;$mixin&lt;/span&gt;-&amp;gt;&lt;span&gt;userTimeZone);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$self&lt;/span&gt;-&amp;gt;format(&lt;span&gt;$format&lt;/span&gt;&lt;span&gt;);
        };
    }
}

Carbon&lt;/span&gt;::mixin(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserTimezoneCarbonMixin());

Carbon&lt;/span&gt;::setUserTimezone('Europe/Berlin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTime(12, 0, 0, 'UTC')-&amp;gt;tzFormat('H:i'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 14:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTime(15, 0, 0, 'UTC')-&amp;gt;tzFormat('H:i'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 17:00&lt;/span&gt;
Carbon::setUserTimezone('America/Toronto'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTime(12, 0, 0, 'UTC')-&amp;gt;tzFormat('H:i'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 08:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; Carbon::createFromTime(15, 0, 0, 'UTC')-&amp;gt;tzFormat('H:i'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Credit: &lt;/em&gt;&lt;a href=&quot;https://github.com/thiagocordeiro&quot;&gt;&lt;em&gt;thiagocordeiro&lt;/em&gt;&lt;/a&gt;&lt;em&gt; (&lt;/em&gt;&lt;a href=&quot;https://github.com/briannesbitt/Carbon/pull/927&quot;&gt;&lt;em&gt;#927&lt;/em&gt;&lt;/a&gt;&lt;em&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;CarbonInterval&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CarbonInterval类继承了PHP DateInterval类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; CarbonInterval &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; \DateInterval
{    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; code here&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以通过以下方式创建实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::year();                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::months(3);                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 months&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(3)-&amp;gt;seconds(32);             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 days 32 seconds&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::weeks(3);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 weeks&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(23);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 weeks 2 days&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::create(2, 0, 5, 1, 1, 2, 7);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 years 5 weeks 1 day 1 hour 2 minutes 7 seconds&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果您发现自己从另一个库继承了\DateInterval实例，不要害怕!您可以通过一个友好的instance()函数创建一个CarbonInterval实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$di&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; \DateInterval('P1Y2M'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;== instance from another API&lt;/span&gt;
&lt;span&gt;$ci&lt;/span&gt; = CarbonInterval::instance(&lt;span&gt;$di&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;get_class&lt;/span&gt;(&lt;span&gt;$ci&lt;/span&gt;);                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'Carbon\CarbonInterval'&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$ci&lt;/span&gt;;                                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 year 2 months&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他的帮助程序，但是要注意实现提供了帮助程序来处理几周，但是只节省了几天。数周是根据当前实例的总天数计算的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::year()-&amp;gt;years;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::year()-&amp;gt;dayz;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(24)-&amp;gt;dayz;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(24)-&amp;gt;daysExcludeWeeks;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::weeks(3)-&amp;gt;days(14)-&amp;gt;weeks;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2  &amp;lt;-- days setter overwrites the current value&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::weeks(3)-&amp;gt;weeks;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::minutes(3)-&amp;gt;weeksAndDays(2, 5);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 weeks 5 days 3 minutes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CarbonInterval扩展DateInterval，您可以使用ISO-8601的持续时间格式创建这两种格式:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$ci&lt;/span&gt; = CarbonInterval::create('P1Y2M3D'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$ci&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; CarbonInterval('PT0S');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;借助fromString()方法，可以从友好的字符串创建Carbon intervals。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
CarbonInterval::fromString('2 minutes 15 seconds'&lt;span&gt;);

CarbonInterval&lt;/span&gt;::fromString('2m 15s'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; or abbreviated&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这个月缩写为“mo”以区别于分钟和整个语法不区分大小写。&lt;/p&gt;
&lt;p&gt;它还有一个方便的for human()，它被映射为__toString()实现，用于为人类打印间隔。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
CarbonInterval::&lt;span&gt;setLocale&lt;/span&gt;('fr'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; CarbonInterval::create(2, 1)-&amp;gt;forHumans();        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 ans 1 mois&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::hour()-&amp;gt;seconds(3);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 heure 3 secondes&lt;/span&gt;
CarbonInterval::&lt;span&gt;setLocale&lt;/span&gt;('en');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如您所见，您可以使用CarbonInterval::setLocale('fr')更改字符串的语言环境。&lt;/p&gt;
&lt;p&gt;至于Carbon，您可以使用make方法从其他区间或字符串返回一个新的CarbonInterval实例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$dateInterval&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; DateInterval('P2D'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$carbonInterval&lt;/span&gt; = CarbonInterval::&lt;span&gt;month();
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; CarbonInterval::make(&lt;span&gt;$dateInterval&lt;/span&gt;)-&amp;gt;forHumans();       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 days&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::make(&lt;span&gt;$carbonInterval&lt;/span&gt;)-&amp;gt;forHumans();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 month&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::make('PT3H')-&amp;gt;forHumans();              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 hours&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::make('1h 15m')-&amp;gt;forHumans();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 hour 15 minutes
// Pass true to get short format&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::make('1h 15m')-&amp;gt;forHumans(&lt;span&gt;true&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1h 15m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本机DateInterval分别添加和相乘，因此:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$interval&lt;/span&gt; = CarbonInterval::make('7h 55m'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$interval&lt;/span&gt;-&amp;gt;add(CarbonInterval::make('17h 35m'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;$interval&lt;/span&gt;-&amp;gt;times(3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$interval&lt;/span&gt;-&amp;gt;forHumans(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 72 hours 270 minutes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从单位到单位的输入中得到纯计算。将分钟级联成小时、小时级联成天等。使用级联方法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$interval&lt;/span&gt;-&amp;gt;forHumans();             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 72 hours 270 minutes&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$interval&lt;/span&gt;-&amp;gt;cascade()-&amp;gt;forHumans();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3 days 4 hours 30 minutes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认的因素有:&lt;/p&gt;
&lt;p&gt;1分钟= 60秒&lt;/p&gt;
&lt;p&gt;1小时=60分钟&lt;/p&gt;
&lt;p&gt;1天=24小时&lt;/p&gt;
&lt;p&gt;1周= 7天&lt;/p&gt;
&lt;p&gt;1个月= 4周&lt;/p&gt;
&lt;p&gt;1年= 12个月&lt;/p&gt;
&lt;p&gt;CarbonIntervals 没有上下文，所以它们不能更精确(没有DST、没有闰年、没有实际的月长或年长)。但是你可以完全定制这些因素。例如处理工作时间日志:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$cascades&lt;/span&gt; = CarbonInterval::getCascadeFactors(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; save initial factors&lt;/span&gt;
&lt;span&gt;
CarbonInterval&lt;/span&gt;::setCascadeFactors(&lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;'minute' =&amp;gt; &lt;span&gt;array&lt;/span&gt;(60, 'seconds'),
    'hour' =&amp;gt; &lt;span&gt;array&lt;/span&gt;(60, 'minutes'),
    'day' =&amp;gt; &lt;span&gt;array&lt;/span&gt;(8, 'hours'),
    'week' =&amp;gt; &lt;span&gt;array&lt;/span&gt;(5, 'days'),
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; in this example the cascade won't go farther than week unit&lt;/span&gt;
&lt;span&gt;));

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; CarbonInterval::fromString('20h')-&amp;gt;cascade()-&amp;gt;forHumans();              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 days 4 hours&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::fromString('10d')-&amp;gt;cascade()-&amp;gt;forHumans();              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2 weeks&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::fromString('3w 18d 53h 159m')-&amp;gt;cascade()-&amp;gt;forHumans();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7 weeks 4 days 7 hours 39 minutes

// You can see currently set factors with getFactor:&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getFactor('minutes', &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; per &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 'hour');                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getFactor('days', 'week');                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5

// And common factors can be get with short-cut methods:&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getDaysPerWeek();                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getHoursPerDay();                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getMinutesPerHours();                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getSecondsPerMinutes();                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;
&lt;span&gt;
CarbonInterval&lt;/span&gt;::setCascadeFactors(&lt;span&gt;$cascades&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; restore original factors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是否可能将间隔转换为给定的单元(使用提供的级联因子)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(3)-&amp;gt;hours(5)-&amp;gt;total('hours');    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(3)-&amp;gt;hours(5)-&amp;gt;totalHours;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::months(6)-&amp;gt;totalWeeks;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::year()-&amp;gt;totalDays;                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 336&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以使用spec()获得inverval的ISO 8601规范&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::days(3)-&amp;gt;hours(5)-&amp;gt;spec(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; P3DT5H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以从DateInterval对象获取它，因为它是静态助手:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::getDateIntervalSpec(&lt;span&gt;new&lt;/span&gt; DateInterval('P3DT6M10S')); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; P3DT6M10S&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用compare()和comparedateinterval()方法可以对日期间隔列表进行排序:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$halfDay&lt;/span&gt; = CarbonInterval::hours(12&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$oneDay&lt;/span&gt; = CarbonInterval::&lt;span&gt;day();
&lt;/span&gt;&lt;span&gt;$twoDay&lt;/span&gt; = CarbonInterval::days(2&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; CarbonInterval::compareDateIntervals(&lt;span&gt;$oneDay&lt;/span&gt;, &lt;span&gt;$oneDay&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$oneDay&lt;/span&gt;-&amp;gt;compare(&lt;span&gt;$oneDay&lt;/span&gt;);                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::compareDateIntervals(&lt;span&gt;$oneDay&lt;/span&gt;, &lt;span&gt;$halfDay&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$oneDay&lt;/span&gt;-&amp;gt;compare(&lt;span&gt;$halfDay&lt;/span&gt;);                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; CarbonInterval::compareDateIntervals(&lt;span&gt;$oneDay&lt;/span&gt;, &lt;span&gt;$twoDay&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -1&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$oneDay&lt;/span&gt;-&amp;gt;compare(&lt;span&gt;$twoDay&lt;/span&gt;);                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -1&lt;/span&gt;

&lt;span&gt;$list&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(&lt;span&gt;$twoDay&lt;/span&gt;, &lt;span&gt;$halfDay&lt;/span&gt;, &lt;span&gt;$oneDay&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;usort&lt;/span&gt;(&lt;span&gt;$list&lt;/span&gt;, &lt;span&gt;array&lt;/span&gt;('Carbon\CarbonInterval', 'compareDateIntervals'&lt;span&gt;));

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$list&lt;/span&gt;);                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12 hours, 1 day, 2 days&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，通过使用互补参数调用toPeriod()，可以将一个CarbonInterval实例转换为一个CarbonPeriod实例。 &lt;/p&gt;
&lt;p&gt;我听到你问什么是CarbonPeriod 实例。哦!完美过渡到下一章。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;&lt;strong&gt;CarbonPeriod&lt;/strong&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CarbonPeriod是一个友好的DatePeriod版本，具有许多快捷方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a new instance:&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; CarbonPeriod('2018-04-21', '3 days', '2018-04-27'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use static constructor:&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2018-04-21', '3 days', '2018-04-27'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use the fluent setters:&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::since('2018-04-21')-&amp;gt;days(3)-&amp;gt;until('2018-04-27'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Start from a CarbonInterval:&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonInterval::days(3)-&amp;gt;toPeriod('2018-04-21', '2018-04-27');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CarbonPeriod可以通过多种方式构建:&lt;/p&gt;
&lt;p&gt;开始日期、结束日期和可选间隔(默认为1天)，&lt;/p&gt;
&lt;p&gt;起始日期，递归次数和可选区间，&lt;/p&gt;
&lt;p&gt;ISO 8601间隔规范。&lt;/p&gt;
&lt;p&gt;日期可以是DateTime/Carbon实例，绝对字符串如“2007-10-15 15:00”或相对字符串，例如“next monday”。Interval可以作为DateInterval/CarbonInterval实例、ISO 8601的Interval规范(如“P4D”)或人类可读字符串(如“4 days”)给出。&lt;/p&gt;
&lt;p&gt;默认构造函数和create()方法在参数类型和顺序方面都很容易理解，所以如果您想要更精确，建议使用fluent语法。另一方面，您可以将动态值数组传递给createFromArray()，它将使用给定的数组作为参数列表构造一个新实例。&lt;/p&gt;
&lt;p&gt;CarbonPeriod实现迭代器接口。它意味着它可以直接传递给foreach循环:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2018-04-21', '3 days', '2018-04-27'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; ', '&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 04-21, 04-24, 04-27

// Here is what happens under the hood:&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt;-&amp;gt;&lt;span&gt;rewind&lt;/span&gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; restart the iteration&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt;-&amp;gt;valid()) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; check if current item is valid&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt;-&amp;gt;&lt;span&gt;key&lt;/span&gt;()) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; echo comma if current key is greater than 0&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; ', '&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;&lt;span&gt;current&lt;/span&gt;()-&amp;gt;format('m-d'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; echo current date&lt;/span&gt;
    &lt;span&gt;$period&lt;/span&gt;-&amp;gt;&lt;span&gt;next&lt;/span&gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; move to the next item&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 04-21, 04-24, 04-27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数可以在迭代过程中进行修改:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2018-04-29', 7&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$dates&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$key&lt;/span&gt; === 3&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;invert()-&amp;gt;start(&lt;span&gt;$date&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; invert() is an alias for invertDateInterval()&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;$dates&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$dates&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 04-29, 04-30, 05-01, 05-02, 05-01, 04-30, 04-29&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和DatePeriod一样，CarbonPeriod也支持ISO 8601时间间隔规范。&lt;/p&gt;
&lt;p&gt;请注意，本机日期周期将递归处理为多次重复间隔。因此，在排除开始日期时，它将减少一个结果。CarbonPeriod的自定义过滤器的引入使得知道结果的数量变得更加困难。由于这个原因，我们稍微改变了实现，递归被视为返回日期的总体限制。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Possible options are: CarbonPeriod::EXCLUDE_START_DATE | CarbonPeriod::EXCLUDE_END_DATE
// Default value is 0 which will have the same effect as when no options are given.&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::createFromIso('R4/2012-07-01T00:00:00Z/P7D', CarbonPeriod::&lt;span&gt;EXCLUDE_START_DATE);
&lt;/span&gt;&lt;span&gt;$dates&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$dates&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$dates&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 07-08, 07-15, 07-22, 07-29&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以从不同的getter中检索数据:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2010-05-06', '2010-05-25', CarbonPeriod::&lt;span&gt;EXCLUDE_START_DATE);

&lt;/span&gt;&lt;span&gt;$exclude&lt;/span&gt; = &lt;span&gt;$period&lt;/span&gt;-&amp;gt;getOptions() &amp;amp; CarbonPeriod::&lt;span&gt;EXCLUDE_START_DATE;

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;getStartDate();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-06 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;getEndDate();              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-25 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;getDateInterval();         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 day&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$exclude&lt;/span&gt; ? 'exclude' : 'include';   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; exclude&lt;/span&gt;

&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isStartExcluded());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isEndExcluded());      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toString();                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Every 1 day from 2010-05-06 to 2010-05-25&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;implicit toString&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Every 1 day from 2010-05-06 to 2010-05-25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附加的getter允许您以数组的形式访问结果:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2010-05-11', '2010-05-13'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;&lt;span&gt;count&lt;/span&gt;();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3, equivalent to count($period)&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toArray());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-11 00:00:00, 2010-05-12 00:00:00, 2010-05-13 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;first();                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-11 00:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;last();                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-13 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，如果您打算使用上述函数，将toArray()调用的结果存储为变量并使用它是一个好主意，因为每个调用在内部执行一个完整的迭代。&lt;/p&gt;
&lt;p&gt;想要更改参数，可以使用setter方法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2010-05-01', '2010-05-14', CarbonPeriod::&lt;span&gt;EXCLUDE_END_DATE);

&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;setStartDate('2010-05-11'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toArray());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-11 00:00:00, 2010-05-12 00:00:00, 2010-05-13 00:00:00

// Second argument can be optionally used to exclude the date from the results.&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt;-&amp;gt;setStartDate('2010-05-11', &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;setEndDate('2010-05-14', &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toArray());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-12 00:00:00, 2010-05-13 00:00:00, 2010-05-14 00:00:00&lt;/span&gt;

&lt;span&gt;$period&lt;/span&gt;-&amp;gt;setRecurrences(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toArray());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-12 00:00:00, 2010-05-13 00:00:00&lt;/span&gt;

&lt;span&gt;$period&lt;/span&gt;-&amp;gt;setDateInterval('PT12H'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toArray());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2010-05-11 12:00:00, 2010-05-12 00:00:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以使用setOptions()更改选项以替换所有选项，但也可以分别更改:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2010-05-06', '2010-05-25'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isStartExcluded());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isEndExcluded());      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;

&lt;span&gt;$period&lt;/span&gt;-&amp;gt;toggleOptions(CarbonPeriod::EXCLUDE_START_DATE, &lt;span&gt;true&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true, false or nothing to invert the option&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isStartExcluded());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isEndExcluded());      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false) (unchanged)&lt;/span&gt;

&lt;span&gt;$period&lt;/span&gt;-&amp;gt;excludeEndDate();               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; specify false to include, true or omit to exclude&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isStartExcluded());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true) (unchanged)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isEndExcluded());      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;

&lt;span&gt;$period&lt;/span&gt;-&amp;gt;excludeStartDate(&lt;span&gt;false&lt;/span&gt;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; specify false to include, true or omit to exclude&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isStartExcluded());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;isEndExcluded());      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如前所述，根据ISO 8601规范，递归是重复间隔的数倍。因此，本机DatePeriod将根据开始日期的排除而改变返回日期的数量。与此同时，CarbonPeriod在输入和允许自定义过滤器方面更加宽容，将递归作为返回日期的总体限制:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::createFromIso('R4/2012-07-01T00:00:00Z/P7D'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('d'&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;getRecurrences();          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 01, 08, 15, 22&lt;/span&gt;

&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;setRecurrences(3)-&amp;gt;&lt;span&gt;excludeStartDate();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('d'&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;getRecurrences();          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 08, 15, 22&lt;/span&gt;

&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::recurrences(3)-&amp;gt;&lt;span&gt;sinceNow();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('Y-m-d'&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2018-07-05, 2018-07-06, 2018-07-07&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DatePeriod返回的日期可以很容易地过滤。例如，过滤器可以用于跳过某些日期或只在工作日或周末迭代。筛选函数应该返回true以接受日期，返回false以跳过日期，但继续搜索或CarbonPeriod::END_ITERATION以结束迭代。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::between('2000-01-01', '2000-01-15'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$weekendFilter&lt;/span&gt; = &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;&lt;span&gt;isWeekend();
};
&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;filter(&lt;span&gt;$weekendFilter&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 01-01, 01-02, 01-08, 01-09, 01-15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您还可以跳过循环中的一个或多个值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::between('2000-01-01', '2000-01-10'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$day&lt;/span&gt; = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$day&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$day&lt;/span&gt; === '01-04'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;skip(3&lt;span&gt;);
    }
}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 01-01, 01-02, 01-03, 01-04, 01-08, 01-09, 01-10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getFilters()允许您在一个时间段内检索所有存储的过滤器。但是要注意递归限制和结束日期将出现在返回的数组中，因为它们作为过滤器存储在内部。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::&lt;span&gt;end&lt;/span&gt;('2000-01-01')-&amp;gt;recurrences(3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_export&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;&lt;span&gt;getFilters());
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
array (
  0 =&amp;gt; 
  array (
    0 =&amp;gt; 'Carbon\\CarbonPeriod::filterEndDate',
    1 =&amp;gt; NULL,
  ),
  1 =&amp;gt; 
  array (
    0 =&amp;gt; 'Carbon\\CarbonPeriod::filterRecurrences',
    1 =&amp;gt; NULL,
  ),
)
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;过滤器存储在堆栈中，可以使用一组特殊的方法进行管理:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::between('2000-01-01', '2000-01-15'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$weekendFilter&lt;/span&gt; = &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;&lt;span&gt;isWeekend();
};

&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;hasFilter(&lt;span&gt;$weekendFilter&lt;/span&gt;));      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt;-&amp;gt;addFilter(&lt;span&gt;$weekendFilter&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;hasFilter(&lt;span&gt;$weekendFilter&lt;/span&gt;));      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt;-&amp;gt;removeFilter(&lt;span&gt;$weekendFilter&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;hasFilter(&lt;span&gt;$weekendFilter&lt;/span&gt;));      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)

// To avoid storing filters as variables you can name your filters:&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt;-&amp;gt;prependFilter(&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;-&amp;gt;&lt;span&gt;isWeekend();
}&lt;/span&gt;, 'weekend'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;hasFilter('weekend'));           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(true)&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt;-&amp;gt;removeFilter('weekend'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$period&lt;/span&gt;-&amp;gt;hasFilter('weekend'));           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; bool(false)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加过滤器的顺序会对性能和结果产生影响，因此您可以使用addFilter()在堆栈末尾添加过滤器;您可以使用prependFilter()在开始时添加一个。甚至可以使用setfilter()替换所有的过滤器。请注意，您必须保持堆栈的正确格式，并记住关于递归限制和结束日期的内部过滤器。或者，您可以使用resetFilters()方法，然后逐个添加新的过滤器。&lt;/p&gt;
&lt;p&gt;例如，当您添加一个限制尝试日期数量的自定义过滤器时，如果您在工作日过滤器之前或之后添加它，那么结果将是不同的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note that you can pass a name of any Carbon method starting with &quot;is&quot;, including macros&lt;/span&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::between('2018-05-03', '2018-05-25')-&amp;gt;filter('isWeekday'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;$attempts&lt;/span&gt; = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$attemptsFilter&lt;/span&gt; = &lt;span&gt;function&lt;/span&gt; () &lt;span&gt;use&lt;/span&gt; (&amp;amp;&lt;span&gt;$attempts&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ++&lt;span&gt;$attempts&lt;/span&gt; &amp;lt;= 5 ? &lt;span&gt;true&lt;/span&gt; : CarbonPeriod::&lt;span&gt;END_ITERATION;
};

&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;prependFilter(&lt;span&gt;$attemptsFilter&lt;/span&gt;, 'attempts'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 05-03, 05-04, 05-07&lt;/span&gt;

&lt;span&gt;$attempts&lt;/span&gt; = 0&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;$period&lt;/span&gt;-&amp;gt;removeFilter(&lt;span&gt;$attemptsFilter&lt;/span&gt;)-&amp;gt;addFilter(&lt;span&gt;$attemptsFilter&lt;/span&gt;, 'attempts'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$days&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$period&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$date&lt;/span&gt;&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;$days&lt;/span&gt;[] = &lt;span&gt;$date&lt;/span&gt;-&amp;gt;format('m-d'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;implode&lt;/span&gt;(', ', &lt;span&gt;$days&lt;/span&gt;);                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 05-03, 05-04, 05-07, 05-08, 05-09&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，内置的递归过滤器不是这样工作的。相反，它基于当前键，每个条目只增加一次，无论在找到有效日期之前需要检查多少个日期。如果您将它放在堆栈的开头或末尾，那么这个技巧将使它的工作方式相同。&lt;/p&gt;
&lt;p&gt;为了简化CarbonPeriod的构建，添加了一些别名:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;start&quot;, &quot;since&quot;, &quot;sinceNow&quot;:&lt;/span&gt;
CarbonPeriod::start('2017-03-10') == CarbonPeriod::create()-&amp;gt;setStartDate('2017-03-10'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Same with optional boolean argument $inclusive to change the option about include/exclude start date:&lt;/span&gt;
CarbonPeriod::start('2017-03-10', &lt;span&gt;true&lt;/span&gt;) == CarbonPeriod::create()-&amp;gt;setStartDate('2017-03-10', &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;end&quot;, &quot;until&quot;, &quot;untilNow&quot;:&lt;/span&gt;
CarbonPeriod::&lt;span&gt;end&lt;/span&gt;('2017-03-20') == CarbonPeriod::create()-&amp;gt;setEndDate('2017-03-20'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Same with optional boolean argument $inclusive to change the option about include/exclude end date:&lt;/span&gt;
CarbonPeriod::&lt;span&gt;end&lt;/span&gt;('2017-03-20', &lt;span&gt;true&lt;/span&gt;) == CarbonPeriod::create()-&amp;gt;setEndDate('2017-03-20', &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;dates&quot;, &quot;between&quot;:&lt;/span&gt;
CarbonPeriod::dates(..., ...) == CarbonPeriod::create()-&amp;gt;setDates(..., ...&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;recurrences&quot;, &quot;times&quot;:&lt;/span&gt;
CarbonPeriod::recurrences(5) == CarbonPeriod::create()-&amp;gt;setRecurrences(5&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;options&quot;:&lt;/span&gt;
CarbonPeriod::options(...) == CarbonPeriod::create()-&amp;gt;setOptions(...&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;toggle&quot;:&lt;/span&gt;
CarbonPeriod::toggle(..., &lt;span&gt;true&lt;/span&gt;) == CarbonPeriod::create()-&amp;gt;toggleOptions(..., &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;filter&quot;, &quot;push&quot;:&lt;/span&gt;
CarbonPeriod::filter(...) == CarbonPeriod::create()-&amp;gt;addFilter(...&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;prepend&quot;:&lt;/span&gt;
CarbonPeriod::prepend(...) == CarbonPeriod::create()-&amp;gt;prependFilter(...&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;filters&quot;:&lt;/span&gt;
CarbonPeriod::filters(...) == CarbonPeriod::create()-&amp;gt;setFilters(...&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;interval&quot;, &quot;each&quot;, &quot;every&quot;, &quot;step&quot;, &quot;stepBy&quot;:&lt;/span&gt;
CarbonPeriod::interval(...) == CarbonPeriod::create()-&amp;gt;setDateInterval(...&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;invert&quot;:&lt;/span&gt;
CarbonPeriod::invert() == CarbonPeriod::create()-&amp;gt;&lt;span&gt;invertDateInterval();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;year&quot;, &quot;months&quot;, &quot;month&quot;, &quot;weeks&quot;, &quot;week&quot;, &quot;days&quot;, &quot;dayz&quot;, &quot;day&quot;,
// &quot;hours&quot;, &quot;hour&quot;, &quot;minutes&quot;, &quot;minute&quot;, &quot;seconds&quot;, &quot;second&quot;:&lt;/span&gt;
CarbonPeriod::hours(5) == CarbonPeriod::create()-&amp;gt;setDateInterval(&lt;span&gt;new&lt;/span&gt; CarbonInterval::hours(5));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以很容易地将CarbonPeriod转换为人类可读的字符串和ISO 8601规范:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$period&lt;/span&gt; = CarbonPeriod::create('2000-01-01 12:00', '3 days 12 hours', '2000-01-15 12:00'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toString();            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Every 3 days 12 hours from 2000-01-01 12:00:00 to 2000-01-15 12:00:00&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$period&lt;/span&gt;-&amp;gt;toIso8601String();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2000-01-01T12:00:00-05:00/P3DT12H/2000-01-15T12:00:00-05:00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;&lt;em&gt;英文原文：&lt;/em&gt;&lt;em&gt;https://carbon.nesbot.com/docs/#api-interval&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;翻译有问题的地方还请斧正&lt;/em&gt;&lt;em&gt;~&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 27 Jul 2018 06:19:00 +0000</pubDate>
<dc:creator>寞小陌</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/x-x-j/p/9377338.html</dc:identifier>
</item>
<item>
<title>redis系列--redis4.0深入持久化 - W-D</title>
<link>http://www.cnblogs.com/wdliu/p/9377278.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wdliu/p/9377278.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在之前的博文中已经详细的介绍了&lt;a href=&quot;https://www.cnblogs.com/wdliu/p/9360286.html&quot; target=&quot;_blank&quot;&gt;redis4.0基础部分&lt;/a&gt;，并且在memcache和redis对比中提及redis提供可靠的数据持久化方案，而memcache没有数据持久化方案，本篇博文将详细介绍redis4.0所提供的持久化方案：RDB持久化和AOF持久化以及redis4.0新特性混合持久化。这里将从原理到配置以及相关实践进行说明，希望能对你有所帮助。&lt;/p&gt;
&lt;h2&gt;一、RDB持久化&lt;/h2&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;RDB持久化方式是通过快照(snapshotting)完成的，当符合一定条件时，redis会自动将内存中所有数据以二进制方式生成一份副本并存储在硬盘上。当redis重启时，并且AOF持久化未开启时，redis会读取RDB持久化生成的二进制文件(默认名称dump.rdb，可通过设置dbfilename修改)进行数据恢复，对于持久化信息可以用过命令“info Persistence”查看。&lt;/p&gt;
&lt;h3&gt;快照文件位置&lt;/h3&gt;
&lt;p&gt;RDB快照文件存储文件位置由dir配置参数指明，文件名由dbfilename指定，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725192452019-1361880741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;快照触发条件&lt;/h3&gt;
&lt;p&gt;RDB生成快照可自动促发，也可以使用命令手动触发，以下是redis触发执行快照条件，后续会对每个条件详细说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端执行命令save和bgsave会生成快照；&lt;/li&gt;
&lt;li&gt;根据配置文件save m n规则进行自动快照；&lt;/li&gt;
&lt;li&gt;主从复制时，从库全量复制同步主库数据，此时主库会执行bgsave命令进行快照；&lt;/li&gt;
&lt;li&gt;客户端执行数据库清空命令FLUSHALL时候，触发快照；&lt;/li&gt;
&lt;li&gt;客户端执行shutdown关闭redis时，触发快照；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;save命令触发&lt;/h3&gt;
&lt;p&gt;客户端执行save命令，该命令强制redis执行快照，这时候redis处于阻塞状态，不会响应任何其他客户端发来的请求，直到RDB快照文件执行完毕，所以请慎用。&lt;/p&gt;
&lt;p&gt;实践操作：&lt;/p&gt;
&lt;p&gt;首先使用info Persistence查看最近一次持久化时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725162051140-115934526.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时我们执行save命令，并再次查看最新快照保存时间已经是最新一次时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725162342372-831597131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然你也可以直接查看RDB数据文件目录下的RDB文件最新时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725163048654-1985991165.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;bgsave命令触发&lt;/h3&gt;
&lt;p&gt;bgsave命令可以理解为background save即：“后台保存”。当执行bgsave命令时，redis会fork出一个子进程来执行快照生成操作，需要注意的redis是在fork子进程这个简短的时间redis是阻塞的（此段时间不会响应客户端请求，），当子进程创建完成以后redis响应客户端请求。其实redis自动快照也是使用bgsave来完成的。&lt;/p&gt;
&lt;p&gt;为了能清楚了解bgsave工作过程，以下将图文详细描述其工作过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725172641202-1573986143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对上述过程描述：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端执行bgsave命令，redis主进程收到指令并判断此时是否在执行bgrewriteaof(AOF文件重新过程，后续会讲解)，如果此时正好在执行则bgsave直接返回，不fork子进程，如果没有执行bgrewriteaof重写AOF文件，则进入下一个阶段；&lt;/li&gt;
&lt;li&gt;主进程调用fork方法创建子进程，在创建过程中redis主进程阻塞，所以不能响应客户端请求；&lt;/li&gt;
&lt;li&gt;子进程创建完成以后，bgsave命令返回“Background saving started”，此时标志着redis可以响应客户端请求了；&lt;/li&gt;
&lt;li&gt;子经常根据主进程的内存副本创建临时快照文件，当快照文件完成以后对原快照文件进行替换；&lt;/li&gt;
&lt;li&gt;子进程发送信号给redis主进程完成快照操作，主进程更新统计信息（info Persistence可查看）,子进程退出；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实践操作：&lt;/p&gt;
&lt;p&gt;执行bgsave&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725180545944-1115113428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看日志，能看到6MB文件内存副本写到了磁盘上，同时打印“Background saving terminated with success”代表文件bgsave操作完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725180641008-453656258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时我们查看统计信息最后一次RDB保存时间已经更新：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725181147875-1551556683.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; save m n规则触发 &lt;/h3&gt;
&lt;p&gt;save m n规则说明：在指定的m秒内，redis中有n个键发生改变，则自动触发bgsave。该规则默认也在redis.conf中进行了配置，并且可组合使用，满足其中一个规则，则触发bgsave，在上篇博文也进行了解释，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725182526630-131017848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以save 900 1为例，表明当900秒内至少有一个键发生改变时候，redis触发bgsave操作。&lt;/p&gt;

&lt;p&gt;实践操作：&lt;/p&gt;
&lt;p&gt;我们改变一个键，满足save 900 1 ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725183245166-679592639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时查看redis日志，会发现redis立即响应开始bgsave操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725183320854-1194188372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;FLUSHALL触发&lt;/h3&gt;
&lt;p&gt;flushall命令用于清空数据库，请慎用，当我们使用了则表明我们需要对数据进行清空，那redis当然需要对快照文件也进行清空，所以会触发bgsave。&lt;/p&gt;
&lt;p&gt;实践操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725185027573-2116464119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725185106757-306359657.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;shutdown触发&lt;/h3&gt;
&lt;p&gt;shutdown命令触发就不用说了,redis在关闭前处于安全角度将所有数据全部保存下来，以便下次启动会恢复。&lt;/p&gt;
&lt;p&gt;实践操作：&lt;/p&gt;
&lt;p&gt;可以使用客户端连入执行shutdown命令，也可以直接使用脚本关闭redis,这里我使用init脚本（系统centos6.X）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725185451934-1052283048.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180725185627452-1839816217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;主从触发&lt;/h3&gt;
&lt;p&gt;在redis主从复制中，从节点执行全量复制操作，主节点会执行bgsave命令，并将rdb文件发送给从节点，该过程会在复制篇中进行阐述。&lt;/p&gt;

&lt;h3&gt;故障恢复&lt;/h3&gt;
&lt;p&gt;上面提及到过，当redis意外崩溃或者关闭再次启动时，此时AOF持久化未开启时(默认未开启)，将使用RDB快照文件恢复数据。&lt;/p&gt;
&lt;p&gt;下面我们停用redis服务来模拟故障情况，让再启动redis服务：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726091716171-1101078702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;观察日志会发现，启动时候load RDB文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726091825425-686359421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;RDB持久化配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;save m n
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置快照(rdb)促发规则，格式：save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;save 900 1  900秒内至少有1个key被改变则做一次快照&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;save 300 10  300秒内至少有300个key被改变则做一次快照&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;save 60 10000  60秒内至少有10000个key被改变则做一次快照&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;关闭该规则使用svae “” &lt;/span&gt;
&lt;span&gt;
dbfilename  dump.rdb
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;rdb持久化存储数据库文件名，默认为dump.rdb&lt;/span&gt;
&lt;span&gt;
stop&lt;/span&gt;-write-on-bgsave-&lt;span&gt;error yes 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;yes代表当使用bgsave命令持久化出错时候停止写RDB快照文件,no表明忽略错误继续写文件。&lt;/span&gt;
&lt;span&gt;
rdbchecksum yes
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在写入文件和读取文件时是否开启rdb文件检查，检查是否有无损坏，如果在启动是检查发现损坏，则停止启动。&lt;/span&gt;
&lt;span&gt;
dir &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/etc/redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;数据文件存放目录，rdb快照文件和aof文件都会存放至该目录，请确保有写权限&lt;/span&gt;
&lt;span&gt;
rdbcompression yes
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否开启RDB文件压缩，该功能可以节约磁盘空间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 二、AOF持久化&lt;/h2&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;当redis存储非临时数据时，为了降低redis故障而引起的数据丢失，redis提供了AOF(Append Only File)持久化，从单词意思讲，将命令追加到文件。AOF可以将Redis执行的每一条写命令追加到磁盘文件(appendonly.aof)中,在redis启动时候优先选择从AOF文件恢复数据。由于每一次的写操作，redis都会记录到文件中，所以开启AOF持久化会对性能有一定的影响，但是大部分情况下这个影响是可以接受的，我们可以使用读写速率高的硬盘提高AOF性能。与RDB持久化相比，AOF持久化数据丢失更少，其消耗内存更少(RDB方式执行bgsve会有内存拷贝)。&lt;/p&gt;

&lt;h3&gt;开启AOF&lt;/h3&gt;
&lt;p&gt;默认情况下，redis是关闭了AOF持久化，开启AOF通过配置appendonly为yes开启，我们修改配置文件或者在命令行直接使用config set修改，在用config rewrite同步到配置文件。通过客户端修改好处是不用重启redis，AOF持久化直接生效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726104425988-577848390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;AOF持久化过程 &lt;/h3&gt;
&lt;p&gt;redisAOF持久化过程可分为以下阶段：&lt;/p&gt;
&lt;p&gt;1.追加写入&lt;/p&gt;
&lt;p&gt;　　redis将每一条写命令以redis通讯协议添加至缓冲区aof_buf,这样的好处在于在大量写请求情况下，采用缓冲区暂存一部分命令随后根据策略一次性写入磁盘，这样可以减少磁盘的I/O次数，提高性能。&lt;/p&gt;
&lt;p&gt;2.同步命令到硬盘&lt;/p&gt;
&lt;p&gt;　　当写命令写入aof_buf缓冲区后，redis会将缓冲区的命令写入到文件，redis提供了三种同步策略，由配置参数appendfsync决定，下面是每个策略所对应的含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;no：不使用fsync方法同步，而是交给操作系统write函数去执行同步操作，在linux操作系统中大约每30秒刷一次缓冲。这种情况下，缓冲区数据同步不可控，并且在大量的写操作下，aof_buf缓冲区会堆积会越来越严重，一旦redis出现故障，数据丢失严重。&lt;/li&gt;
&lt;li&gt;always：表示每次有写操作都调用fsync方法强制内核将数据写入到aof文件。这种情况下由于每次写命令都写到了文件中, 虽然数据比较安全，但是因为每次写操作都会同步到AOF文件中，所以在性能上会有影响，同时由于频繁的IO操作，硬盘的使用寿命会降低。&lt;/li&gt;
&lt;li&gt;everysec：数据将使用调用操作系统write写入文件，并使用fsync每秒一次从内核刷新到磁盘。 这是折中的方案，兼顾性能和数据安全，所以redis默认推荐使用该配置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3.文件重写(bgrewriteaof)&lt;/p&gt;
&lt;p&gt;　　当开启的AOF时，随着时间推移，AOF文件会越来越大,当然redis也对AOF文件进行了优化，即触发AOF文件重写条件（后续会说明）时候，redis将使用bgrewriteaof对AOF文件进行重写。这样的好处在于减少AOF文件大小，同时有利于数据的恢复。&lt;/p&gt;
&lt;p&gt;　　为什么重写？比如先后执行了“set foo bar1 set foo bar2 set foo bar3” 此时AOF文件会记录三条命令，这显然不合理，因为文件中应只保留“set foo bar3”这个最后设置的值，前面的set命令都是多余的，下面是一些重写时候策略：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;重复或无效的命令不写入文件&lt;/li&gt;
&lt;li&gt;过期的数据不再写入文件&lt;/li&gt;
&lt;li&gt;多条命令合并写入（当多个命令能合并一条命令时候会对其优化合并作为一个命令写入，例如“RPUSH &lt;span class=&quot;hljs-type&quot;&gt;list1 &lt;span class=&quot;hljs-string&quot;&gt;a RPUSH &lt;span class=&quot;hljs-type&quot;&gt;list1 b&quot; 合并为“RPUSH &lt;span class=&quot;hljs-type&quot;&gt;list1 &lt;span class=&quot;hljs-string&quot;&gt;a &lt;span class=&quot;hljs-type&quot;&gt;b”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;重写触发条件 &lt;/h3&gt;
&lt;p&gt;AOF文件触发条件可分为手动触发和自动触发：&lt;/p&gt;
&lt;p&gt;手动触发：客户端执行bgrewriteaof命令。&lt;/p&gt;
&lt;p&gt;自动触发：自动触发通过以下两个配置协作生效：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;auto-aof-rewrite-min-size: AOF文件最小重写大小，只有当AOF文件大小大于该值时候才可能重写,4.0默认配置64mb。&lt;/li&gt;
&lt;li&gt;auto-aof-rewrite-percentage：当前AOF文件大小和最后一次重写后的大小之间的比率等于或者等于指定的增长百分比，如100代表当前AOF文件是上次重写的两倍时候才重写。　&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;redis开启在AOF功能开启的情况下，会维持以下三个变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;记录当前AOF文件大小的变量aof_current_size。&lt;/li&gt;
&lt;li&gt;记录最后一次AOF重写之后，AOF文件大小的变量aof_rewrite_base_size。&lt;/li&gt;
&lt;li&gt;增长百分比变量aof_rewrite_perc。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每次当serverCron（服务器周期性操作函数）函数执行时，它会检查以下条件是否全部满足，如果全部满足的话，就触发自动的AOF重写操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;没有BGSAVE命令（RDB持久化）/AOF持久化在执行；&lt;/li&gt;
&lt;li&gt;没有BGREWRITEAOF在进行；&lt;/li&gt;
&lt;li&gt;当前AOF文件大小要大于server.aof_rewrite_min_size的值；&lt;/li&gt;
&lt;li&gt;当前AOF文件大小和最后一次重写后的大小之间的比率等于或者大于指定的增长百分比（auto-aof-rewrite-percentage参数）&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;重写过程&lt;/h3&gt;
&lt;p&gt;　　AOF文件重写过程与RDB快照bgsave工作过程有点相似，都是通过fork子进程，由子进程完成相应的操作，同样的在fork子进程简短的时间内，redis是阻塞的，以下图文说明其重写过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726171841786-525684493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;过程说明：&lt;/p&gt;
&lt;p&gt;　　aof_rewrite_buf 代表重写缓冲区      aof_buf代表写写命令存放的缓冲区&lt;/p&gt;
&lt;p&gt;　　1.开始bgrewriteaof，判断当前有没有bgsave命令(RDB持久化)/bgrewriteaof在执行，倘若有，则这些命令执行完成以后在执行。&lt;/p&gt;
&lt;p&gt;　　2.主进程fork出子进程，在这一个短暂的时间内，redis是阻塞的。&lt;/p&gt;
&lt;p&gt;　　3.主进程fork完子进程继续接受客户端请求，所有写命令依然写入AOF文件缓冲区并根据appendfsync策略同步到磁盘，保证原有AOF文件完整和正确。由于fork的子进程仅仅只共享主进程fork时的内存，因此Redis使用采用重写缓冲区(aof_rewrite_buf)机制保存fork之后的客户端的写请求，防止新AOF文件生成期间丢失这部分数据。此时，客户端的写请求不仅仅写入原来aof_buf缓冲，还写入重写缓冲区(aof_rewrite_buf)。&lt;/p&gt;
&lt;p&gt;　　4.子进程通过内存快照，按照命令重写策略写入到新的AOF文件。&lt;/p&gt;
&lt;p&gt;　　4.1子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。&lt;/p&gt;
&lt;p&gt;　　4.2主进程把AOFaof_rewrite_buf中的数据写入到新的AOF文件(避免写文件是数据丢失)。&lt;/p&gt;
&lt;p&gt;　　5.使用新的AOF文件覆盖旧的AOF文件，标志AOF重写完成。&lt;/p&gt;

&lt;h3&gt;AOF实现本质&lt;/h3&gt;
&lt;p&gt;AOF实现本质是基于redis通讯协议，将命令以纯文本的方式写入到文件中。&lt;/p&gt;
&lt;p&gt;redis协议：&lt;/p&gt;
&lt;p&gt;首先Redis是以行来划分，每行以\r\n行结束。每一行都有一个消息头，消息头共分为5种分别如下:&lt;/p&gt;
&lt;p&gt;(+) 表示一个正确的状态信息，具体信息是当前行+后面的字符。&lt;/p&gt;
&lt;p&gt;(-)  表示一个错误信息，具体信息是当前行－后面的字符。&lt;/p&gt;
&lt;p&gt;(*) 表示消息体总共有多少行，不包括当前行,*后面是具体的行数。&lt;/p&gt;
&lt;p&gt;($) 表示下一行数据长度，不包括换行符长度\r\n,$后面则是对应的长度的数据。&lt;/p&gt;
&lt;p&gt;(:) 表示返回一个数值，：后面是相应的数字节符。&lt;/p&gt;
&lt;p&gt;我们可以直接查看AOF文件中的格式，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726164713917-221284785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;数据恢复&lt;/h3&gt;
&lt;p&gt;之前已经提到当AOF开启时候，redis数据恢复优先选用AOF进行数据恢复，以下使用停止redis来模拟redis故障,然后在重写启动进行恢复。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726165343603-2065130718.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看日志会发现数据恢复已经变成从AOF(append only file)文件中恢复：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726165528177-1455389442.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;AOF配置参数&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
auto-aof-rewrite-min-&lt;span&gt;size 64mb
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;AOF文件最小重写大小，只有当AOF文件大小大于该值时候才可能重写,4.0默认配置64mb。&lt;/span&gt;
&lt;span&gt;
auto&lt;/span&gt;-aof-rewrite-percentage  100
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前AOF文件大小和最后一次重写后的大小之间的比率等于或者等于指定的增长百分比，如100代表当前AOF文件是上次重写的两倍时候才重写。&lt;/span&gt;
&lt;span&gt;
appendfsync everysec
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;no：不使用fsync方法同步，而是交给操作系统write函数去执行同步操作，在linux操作系统中大约每30秒刷一次缓冲。这种情况下，缓冲区数据同步不可控，并且在大量的写操作下，aof_buf缓冲区会堆积会越来越严重，一旦redis出现故障，数据&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;always：表示每次有写操作都调用fsync方法强制内核将数据写入到aof文件。这种情况下由于每次写命令都写到了文件中, 虽然数据比较安全，但是因为每次写操作都会同步到AOF文件中，所以在性能上会有影响，同时由于频繁的IO操作，硬盘的使用寿命会降低。&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;everysec：数据将使用调用操作系统write写入文件，并使用fsync每秒一次从内核刷新到磁盘。 这是折中的方案，兼顾性能和数据安全，所以redis默认推荐使用该配置。&lt;/span&gt;
&lt;span&gt;
aof&lt;/span&gt;-load-&lt;span&gt;truncated yes
&lt;span&gt;#当redis突然运行崩溃时，会出现aof文件被截断的情况，Redis可以在发生这种情况时退出并加载错误，以下选项控制此行为。
#如果aof&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-load-truncated设置为yes，则加载截断的AOF文件，Redis服务器启动发出日志以通知用户该事件。
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果该选项设置为no，则服务将中止并显示错误并停止启动。当该选项设置为no时，用户需要在重启之前使用“redis-check-aof”实用程序修复AOF文件在进行启动。&lt;/span&gt;
&lt;span&gt;
appendonly no 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;yes开启AOF，no关闭AOF&lt;/span&gt;
&lt;span&gt;
appendfilename appendonly.aof
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定AOF文件名，4.0无法通过config set 设置，只能通过修改配置文件设置。&lt;/span&gt;
&lt;span&gt;
dir &lt;/span&gt;/etc/&lt;span&gt;redis
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;RDB文件和AOF文件存放目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;实践&lt;/h3&gt;
&lt;p&gt;实践操作这里使用手动执bgrewriteaof演示重写。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726172011427-1348771901.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726172245449-1830645633.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;三、RDB-AOF混合持久化&lt;/h2&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;redis4.0相对与3.X版本其中一个比较大的变化是4.0添加了新的混合持久化方式。前面已经详细介绍了AOF持久化以及RDB持久化，这里介绍的混合持久化就是同时结合RDB持久化以及AOF持久化混合写入AOF文件。这样做的好处是可以结合 rdb 和 aof 的优点, 快速加载同时避免丢失过多的数据，缺点是 aof 里面的 rdb 部分就是压缩格式不再是 aof 格式，可读性差。&lt;/p&gt;
&lt;h3&gt;开启混合持久化&lt;/h3&gt;
&lt;p&gt;4.0版本的混合持久化默认关闭的，通过aof-use-rdb-preamble配置参数控制，yes则表示开启，no表示禁用，默认是禁用的，可通过config set修改。&lt;/p&gt;
&lt;h3&gt;混合持久化过程&lt;/h3&gt;
&lt;p&gt;了解了AOF持久化过程和RDB持久化过程以后，混合持久化过程就相对简单了。&lt;/p&gt;
&lt;p&gt;混合持久化同样也是通过bgrewriteaof完成的，不同的是当开启混合持久化时，fork出的子进程先将共享的内存副本全量的以RDB方式写入aof文件，然后在将重写缓冲区的增量命令以AOF方式写入到文件，写入完成后通知主进程更新统计信息，并将新的含有RDB格式和AOF格式的AOF文件替换旧的的AOF文件。简单的说：新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726181756270-1907770368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;数据恢复&lt;/h3&gt;
&lt;p&gt;当我们开启了混合持久化时，启动redis依然优先加载aof文件，aof文件加载可能有两种情况如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;aof文件开头是rdb的格式, 先加载 rdb内容再加载剩余的 aof。&lt;/li&gt;
&lt;li&gt;aof文件开头不是rdb的格式，直接以aof格式加载整个文件。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;实践 &lt;/h3&gt;
&lt;p&gt; 开启混合持久化，并在开启后立马执行写操作，为了证实混合持久化的后半部分AOF过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726184949387-821527155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726185553432-461739380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时的aof文件已经和只开启AOF持久化文件不一样了，上半部分是RDB持久化的数据，下半部分是AOF格式数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726185413299-1737324617.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726185422042-1609679914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;四、优缺点 &lt;/h2&gt;
&lt;h3&gt; RDB&lt;/h3&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;RDB 是一个非常紧凑（&lt;span lang=&quot;en-US&quot;&gt;compact）的文件，体积小，因此在传输速度上比较快，因此适合灾难恢复。&lt;span lang=&quot;en-US&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;RDB 可以最大化 &lt;span lang=&quot;en-US&quot;&gt;Redis 的性能：父进程在保存 &lt;span lang=&quot;en-US&quot;&gt;RDB 文件时唯一要做的就是 &lt;span lang=&quot;en-US&quot;&gt;&lt;tt class=&quot;western&quot;&gt;fork&lt;/tt&gt; 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 &lt;span lang=&quot;en-US&quot;&gt;I/O 操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;RDB 在恢复大数据集时的速度比 &lt;span lang=&quot;en-US&quot;&gt;AOF 的恢复速度要快。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;RDB是一个快照过程，无法完整的保存所以数据，尤其在数据量比较大时候，一旦出现故障丢失的数据将更多。&lt;/li&gt;
&lt;li&gt;当redis中数据集比较大时候，RDB由于RDB方式需要对数据进行完成拷贝并生成快照文件，fork的子进程会耗CPU，并且数据越大，RDB快照生成会越耗时。&lt;/li&gt;
&lt;li&gt;RDB文件是特定的格式，阅读性差，由于格式固定，可能存在不兼容情况。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;AOF　&lt;/h3&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数据更完整，秒级数据丢失(取决于设置fsync策略)。&lt;/li&gt;
&lt;li&gt;兼容性较高，由于是基于redis通讯协议而形成的命令追加方式，无论何种版本的redis都兼容，再者aof文件是明文的，可阅读性较好。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数据文件体积较大,即使有重写机制，但是在相同的数据集情况下，AOF文件通常比RDB文件大。&lt;/li&gt;
&lt;li&gt;相对RDB方式，AOF速度慢于RDB，并且在数据量大时候，恢复速度AOF速度也是慢于RDB。&lt;/li&gt;
&lt;li&gt;由于频繁地将命令同步到文件中，AOF持久化对性能的影响相对RDB较大，但是对于我们来说是可以接受的。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;&lt;strong&gt;混合持久化&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;混合持久化结合了RDB持久化 和 AOF 持久化的优点, 由于绝大部分都是RDB格式，加载速度快，同时结合AOF，增量的数据以AOF方式保存了，数据更少的丢失。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;兼容性差，一旦开启了混合持久化，在4.0之前版本都不识别该aof文件，同时由于前部分是RDB格式，阅读性较差&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;五、相关命令&lt;/h2&gt;
&lt;p&gt;aof文件检查&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-check-aof /etc/redis/appendonly.aof
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rdb文件检查&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-check-rdb /etc/redis/dump.rdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看持久化信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
info Persistence
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看状态信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
info stats
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上是所有内容，希望对你有帮助～&lt;/p&gt;
</description>
<pubDate>Fri, 27 Jul 2018 06:05:00 +0000</pubDate>
<dc:creator>W-D</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wdliu/p/9377278.html</dc:identifier>
</item>
<item>
<title>最优-scroll事件的监听实现 - YuanXin.me</title>
<link>http://www.cnblogs.com/geyouneihan/p/9377259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/geyouneihan/p/9377259.html</guid>
<description>&lt;h2 id=&quot;背景和目标&quot;&gt;1. 背景和目标&lt;/h2&gt;
&lt;p&gt;前端在监听&lt;code&gt;scroll&lt;/code&gt;这类高频率触发事件时，常常需要一个监听函数来实现监听和回调处理。传统写法上利用&lt;code&gt;setInterval&lt;/code&gt;或&lt;code&gt;setTimeout&lt;/code&gt;来实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了减小 CPU 开支，往往需要节流函数，但是，&lt;code&gt;interval&lt;/code&gt;的指定依旧是个难题。&lt;code&gt;interval&lt;/code&gt;较大，会处理不及时；较小，占用内存资源。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;为了实践和解决问题，打算实现一个&lt;strong&gt;监听 HTML 元素滚动到底部的函数&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;监听指定 HTML 元素的&lt;code&gt;scroll&lt;/code&gt;事件，并&lt;strong&gt;正确判断是否到底部&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;正确确定确定&lt;strong&gt;回调间隔&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;正确使用&lt;strong&gt;节流函数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组件封装&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;window.requestanimationframe&quot;&gt;2. &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;前文说到，如果利用&lt;code&gt;setTimeout&lt;/code&gt;或者&lt;code&gt;setInterval&lt;/code&gt;，回调间隔&lt;code&gt;interval&lt;/code&gt;很难确定。最理想的情况就是：&lt;strong&gt;回调间隔等于显示屏（浏览器）刷新频率。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;浏览器刷新频率一般会略低于显示屏刷新频率，为&lt;code&gt;16.7次/ms&lt;/code&gt;。具体说，就是：&lt;strong&gt;&lt;code&gt;scroll&lt;/code&gt;事件每次触发时候的时间间隔&lt;/strong&gt;。通过代码来看一下：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;var app = document.getElementById(&quot;app&quot;);
app.addEventListener(&quot;scroll&quot;, function() {
  console.log(new Date().getTime());
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;控制台输出：&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dongyuanxin/markdown-static/master/JavaScript/%E6%9C%80%E4%BC%98-scroll%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E5%AE%9E%E7%8E%B0/1.png&quot; alt=&quot;1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，有时候间隔是 10ms，有时候是 30ms，如果我们自己来设定&lt;code&gt;interval&lt;/code&gt;，应该取最小值。&lt;strong&gt;然而，不同浏览器和不同电脑的刷新频率不确定&lt;/strong&gt;。如果设置过小，还会造成刷新频率低的显示屏的 CPU 损耗。&lt;/p&gt;
&lt;p&gt;所以，使用&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;来让浏览器根据刷新频率自动设置&lt;code&gt;interval&lt;/code&gt;。我们只需要关注回调函数即可。&lt;/p&gt;
&lt;p&gt;当然，这个函数本身还实现了很多优化，&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame&quot;&gt;可以点我看一下&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;节流函数&quot;&gt;3. 节流函数&lt;/h2&gt;
&lt;p&gt;由于&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;的特效，所以它可以在同一帧中被重复绘制。&lt;strong&gt;这时候，就需要节流函数，保证&lt;code&gt;requestAnimationFrame&lt;/code&gt;的回调队列中只有一个函数在执行&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// 节流函数 : 减少浏览器内存消耗
function throttle(ele, callback) {
  var isRunning = false;
  return function() {
    if (isRunning) return;
    isRunning = true;
    // requestAnimationFrame:回调间隔 = 浏览器重绘频率
    window.requestAnimationFrame(function(timestamp) {
      if (ele.scrollTop + ele.clientHeight &amp;gt;= ele.scrollHeight) {
        // 检测是否滚动到元素底部
        callback();
      }
      isRunning = false;
    });
  };
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;代码封装&quot;&gt;4. 代码封装&lt;/h2&gt;
&lt;blockquote readability=&quot;3.3620689655172&quot;&gt;
&lt;p&gt;函数封装详见&lt;a href=&quot;https://github.com/dongyuanxin/markdown-static/blob/master/JavaScript/%E6%9C%80%E4%BC%98-scroll%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E5%AE%9E%E7%8E%B0/script.js&quot;&gt;script.js&lt;/a&gt;，调用样例详见&lt;a href=&quot;https://github.com/dongyuanxin/markdown-static/blob/master/JavaScript/%E6%9C%80%E4%BC%98-scroll%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%9B%91%E5%90%AC%E5%AE%9E%E7%8E%B0/index.html&quot;&gt;index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基于上面，我们封装&lt;code&gt;script.js&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;// 节流函数 : 减少浏览器内存消耗
function throttle(ele, callback) {
  var isRunning = false;
  return function() {
    if (isRunning) return;
    isRunning = true;
    // requestAnimationFrame:回调间隔 = 浏览器重绘频率
    window.requestAnimationFrame(function(timestamp) {
      if (ele.scrollTop + ele.clientHeight &amp;gt;= ele.scrollHeight) {
        // 检测是否滚动到元素底部
        callback();
      }
      isRunning = false;
    });
  };
}

/**
 * 监听HTML元素是否滚动到底部 : 兼容ES5
 * @param {object} ele HTML元素
 * @param {function} callback 滚动到底部后的回调函数
 */
function listenScrollToBottom(ele, callback) {
  if (ele === null || ele === undefined) {
    // 节点不存在：抛出错误
    throw new Error(&quot;Undefined COM&quot;);
    return;
  }
  ele.addEventListener(&quot;scroll&quot;, throttle(ele, callback), false); // 监听 scroll 事件
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将需要监听的 HTML 元素和回调函数传入，即可在 HTML 元素滚动到底部时，触发相应的操作。例如：瀑布流、缓冲加载等。下面是控制台输出一段文字。&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;app&quot;&amp;gt;
    &amp;lt;div class=&quot;inner&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script&amp;gt;
    var app = document.getElementById('app')
    listenScrollToBottom(app , function() { // 回调函数
      console.log(&quot;Scroll to bottom&quot;)
    })
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;关于&quot;&gt;4. 关于&lt;/h2&gt;
&lt;blockquote readability=&quot;3.8823529411765&quot;&gt;
&lt;p&gt;欢迎技术交流，引用请注明出处。&lt;br/&gt;个人网站：&lt;a href=&quot;http://yuanxin.me&quot;&gt;Yuan Xin&lt;/a&gt;&lt;br/&gt;原文链接：&lt;a href=&quot;http://yuanxin.me/#/blog/passage/23&quot;&gt;最优-scroll事件的监听实现&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 27 Jul 2018 06:01:00 +0000</pubDate>
<dc:creator>YuanXin.me</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/geyouneihan/p/9377259.html</dc:identifier>
</item>
<item>
<title>iOS Xcode 小技巧，提升理解查询能力，Command + 点击鼠标右键 Jump to Definition等 - 冬季的暖风</title>
<link>http://www.cnblogs.com/zhouDongdong/p/9377255.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhouDongdong/p/9377255.html</guid>
<description>&lt;p&gt;&lt;span&gt;前言： 介绍下Xcode 小技巧，以及一下快捷键，让你调试程序更加出类拔萃，安排！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Command + 点击鼠标右键 Jump to Definition，可能你平时也在用，但是你明白全部的用法吗，试试 command+点击鼠标左键&lt;/span&gt;😜&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;一. command+点击鼠标左键&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;（鼠标放在类，对象，变量上都可以）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先看图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727110412640-875097880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是出来很多选项呢，都有什么用法呢？简短讲如下&lt;/p&gt;
&lt;p&gt;* &lt;strong&gt;&lt;span&gt;&lt;span&gt;Jump to Definition&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; :  跳转类头文件或定义&lt;/p&gt;
&lt;p&gt;* &lt;span&gt;&lt;strong&gt;Show Quick Help&lt;/strong&gt;&lt;/span&gt; :  显示苹果帮助文档下的定义&lt;/p&gt;
&lt;p&gt;* &lt;span&gt;&lt;strong&gt;Callers&lt;/strong&gt;&lt;/span&gt; : 中文翻译 呼叫者 调用这个函数的列表&lt;/p&gt;
&lt;p&gt;* &lt;strong&gt;&lt;span&gt;Edit All in Scope&lt;/span&gt;&lt;/strong&gt; : 编辑文档内所有匹配内容&lt;/p&gt;
&lt;p&gt;* &lt;strong&gt;&lt;span&gt;Extract Function&lt;/span&gt;&lt;/strong&gt;: 提取成函数，会给你自动封装&lt;/p&gt;
&lt;p&gt;* &lt;strong&gt;&lt;span&gt;Extract Method&lt;/span&gt;&lt;/strong&gt; : 提取成方法 同上&lt;/p&gt;
&lt;p&gt;* &lt;strong&gt;&lt;span&gt;Rename&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;：&lt;/span&gt;搜索当前文件中所有同名，相当于 command +F ，但是比 command +F 好&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二. 具体用法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. Jump to Definition&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;快捷键 control + command +点击鼠标左/右键，通常 command + 点击鼠标右键 （正常键位设置下）&lt;/p&gt;
&lt;p&gt;可以快速跳转到定义变量，定义对象或头文件的位置，方便看清声明与定义，利于项目调试维护&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2. Show Quick Help&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;快捷键 option + 点击鼠标右键  （正常键位设置下）&lt;/p&gt;
&lt;p&gt;快速查看 相关函数，类等在苹果官方帮助文档下的解释，不用kubi的去用文档搜索了&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727123849826-1980491928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3. callers &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;callers ：可以查询到所有调用这个函数的列表&lt;/p&gt;
&lt;p&gt;callees ： 跟这个函数相关联的其它所有函数&lt;/p&gt;
&lt;p&gt;用法，鼠标选择函数某一行，点击 &lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727124354530-2086876036.png&quot; alt=&quot;&quot;/&gt;，可以看到 Callers，与callees，很清晰，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727124304507-1956167041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 注意，通过selector方式的函数不会出现在callers里，因为未编译时无法识别，需要运行时，在清楚函数的存在与否&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4. Rename&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 通常用于查询变量，看图，选择test，然后Rename&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727133050235-319790660.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727133121824-993054112.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;给 当前文件下的 同名 test 都罗列到一起，抛开了多余干扰代码，这是跟 command + f  查询区别&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5. Extract Function 与 Extract Method&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 一个提取函数，一个提取方法，&lt;/p&gt;
&lt;p&gt; 提取函数，如图：（提取方法类似）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727135042924-831904261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;提取后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772820/201807/772820-20180727135223813-1519492023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;会发现自动封装函数，方法，是不是很方便呢&lt;/p&gt;

&lt;p&gt;总结：这个还是很实用的， 大神已经掌握了，你呢😄&lt;/p&gt;

</description>
<pubDate>Fri, 27 Jul 2018 06:00:00 +0000</pubDate>
<dc:creator>冬季的暖风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhouDongdong/p/9377255.html</dc:identifier>
</item>
</channel>
</rss>