<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>DaemonSet 典型应用场景 - 每天5分钟玩转 Docker 容器技术（129） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8445954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8445954.html</guid>
<description>&lt;p&gt;&lt;span&gt;Deployment 部署的副本 Pod 会分布在各个 Node 上，每个 Node 都可能运行好几个副本。DaemonSet 的不同之处在于：每个 Node 上最多只能运行一个副本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DaemonSet 的典型应用场景有：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;在集群的每个节点上运行存储 Daemon，比如 glusterd 或 ceph。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;在每个节点上运行日志收集 Daemon，比如 flunentd 或 logstash。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;在每个节点上运行监控 Daemon，比如 Prometheus Node Exporter 或 collectd。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;其实 Kubernetes 自己就在用 DaemonSet 运行系统组件。执行如下命令：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl get daemonset --namespace=kube-system&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201802/775365-20180213072504999-1822937547.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;DaemonSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;kube-flannel-ds&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kube-proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;分别负责在每个节点上运行 flannel 和 kube-proxy 组件。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/775365/201802/775365-20180213072518843-1618953387.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;因为 flannel 和 kube-proxy 属于系统组件，需要在命令行中通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--namespace=kube-system&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 指定 namespace &lt;/span&gt;&lt;code&gt;&lt;span&gt;kube-system&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。如果不指定则只返回默认 namespace &lt;/span&gt;&lt;code&gt;&lt;span&gt;default&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的资源。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;下节我们详细分析 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kube-flannel-ds&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kube-proxy&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 这两个 DaemonSet。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/480.png?v=1510821977521&quot; alt=&quot;&quot;/&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 22:38:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8445954.html</dc:identifier>
</item>
<item>
<title>设计模式之“Decorator”注疏#02 - kid551</title>
<link>http://www.cnblogs.com/kid551/p/8447795.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kid551/p/8447795.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/672506/201802/672506-20180214005946202-961190241.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;装饰模式&lt;/strong&gt;在某种意义上来说也是挺原始的，&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;它首先需要一个你被装饰的&lt;strong&gt;基础类&lt;/strong&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;再来是需要一个基于这个基础类的&lt;strong&gt;原始包装器&lt;/strong&gt;，可以看作是其它包装器的基础类&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;进而通过继承这个包装器，来构建出多个具有各自功能的&lt;strong&gt;特定包装器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;最后，是通过层层组合这些包装器（通过一层层地使用构造函数的方式），来构建出你最终需要的包含多个功能的&lt;strong&gt;产品类&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一开始接触这一过程时，不免会感觉繁杂、手足无措。不就是一个不断装饰、不断包裹的过程么，为何需要这么多的步骤呢？&lt;/p&gt;
&lt;p&gt;那么，我可以首先给出一个直观解释，并且通过这个直观解释，可以在一定程度上去解释这里所谓的装饰模式的“原始”表示什么意思。&lt;/p&gt;
&lt;p&gt;我们可以把一般的抽象的“装饰过程”想象为：不断地往&lt;strong&gt;被装饰物&lt;/strong&gt;上面&lt;strong&gt;添加装饰物件&lt;/strong&gt;的过程。（特别地，我们在这里考察一个特殊的装饰过程：往墙壁上不断添加各色墙纸的过程，来作为例子。）&lt;/p&gt;
&lt;p&gt;（一）&lt;/p&gt;
&lt;p&gt;那么，从一般性的装饰过程来看，首先要解决的问题便是：到底为什么物件做装饰呢？你是为一盏台灯做装饰，还是为一张桌子做装饰，又或是为了一面墙做装饰？所以，我们需要一个基础类来决定，&lt;strong&gt;被装饰物&lt;/strong&gt;到底是什么。（在这里，我们的被装饰物是一面墙，所以，我们需要声明“墙”这个类作为我们的基础类。）&lt;/p&gt;
&lt;p&gt;（二）&lt;/p&gt;
&lt;p&gt;有了装饰的目标之后，下一个要解决的问题是拿什么来做装饰呢？你是用一朵花来做装饰呢？还是用一个气球？又或是用一张海报来做装饰？并且，你选中的这个装饰物还和你的被装饰物牢牢相关。例如，装饰汽车的花朵和装饰卧室的花朵品种可能并不相同；装饰户外的气球和装饰办公室的气球风格，也可能不同。&lt;/p&gt;
&lt;p&gt;所以，你不仅要决定做装饰器物（也即是装饰器decorator）的品种，还得要让这个装饰器牢牢地和你的被装饰物相关。（在这里，我们需要装饰墙壁的墙纸。所以你需要建立一个“墙纸”类，并且它是同你的被装饰物“墙”相关）&lt;/p&gt;
&lt;p&gt;需要注意的是，这一步的装饰物是一个泛指。例如装饰汽车的花朵、装饰办公室的气球、装饰墙壁的墙纸。可是，这个花朵是什么颜色的、气球是什么形状的、墙纸是什么花纹的，我们并不知道。所以在这一步，声明的仅仅是一个具备功能性泛指的装饰器基础类。&lt;/p&gt;
&lt;p&gt;（三）&lt;/p&gt;
&lt;p&gt;自然地，下一步的工作便是细化你的装饰器。在这个一般性的装饰器下，例如墙纸，你的这个墙纸到底是什么花纹、什么颜色、有什么特殊功效。这就可以通过构建一个个具体的子类来实现。&lt;/p&gt;
&lt;p&gt;（四）&lt;/p&gt;
&lt;p&gt;最后，有了被装饰的物件、有了各种装饰器，那么，就可以通过原始的被装饰物，以及各个装饰器的层层嵌套构造函数，来构建出一个具备各种特定功能的产品。&lt;/p&gt;
&lt;p&gt;所以，整体考察下来，这个过程还是挺直观的。但是，说其“原始”，是因为你的很多特殊装饰器的构造都必须要通过层层嵌套才能够创造。例如，我装饰汽车的花朵为什么不可以直接拿去装饰卧室？从现实直观上，我们是可以这样做的，但是它却不能在“类”的构建体系中实现一个方便的迁移，不得不从最开始被装饰物出发，一层层地添加装饰物来实现最后的你需要的产品。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
// 1. Basic class, the decorated thing
public class Wall {
  private String _name;
  public Wall();
  public void set(String name) { _name = name; }
  public String get() { return _name; }
}

// 2. General decorator class
public class WallPaper extends Wall {
  protected Wall _wall;
  public WallPaper(Wall wall) { _wall = wall; }
  
  public void set(String name) { _wall.set(name); }
  public String get() { return _wall.get(); }
}

// 3.1 Specific decorator: red wall paper
public class RedWallPaper extends WallPaper {
  public RedWallPaper(Wall wall) { super(wall); }
  
  // ... other specific features
}

// 3.2 Specific decorator: blue wall paper
public class BlueWallPaper extends WallPaper {
  public BlueWallPaper(Wall wall) { super(wall); }
  
  // ... other specific features
}

// 4. Final decoration: colorful wall
public class Decoration {
  public static void main(String[] args) {
    BlueWallPaper ColorfulWall = 
                new BlueWallPaper( new RedWallPaper(new Wall()) );
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再来看更为一般和抽象的来自&lt;em&gt;Thinking in Java&lt;/em&gt;的&lt;strong&gt;装饰模式&lt;/strong&gt;的代码示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
// 1. Basic class, the decorated thing
class Basic {
  private String value;
  public void set(String val) { value = val; }
  public String get() { return value; }
}

// 2. General decorator class
class Decorator extends Basic {
  protected Basic basic;
  public Decorator(Basic basic) { this.basic = basic; }
  public void set(String val) { basic.set(val); }
  public String get() { return basic.get(); }
}

// 3.1 Specific decorator
class TimeStamped extends Decorator {
  private final long timeStamp;
  public TimeStamped(Basic basic) {
    super(basic);
    timeStamped = new Date().getTime();
  }
  public long getStamp() { return timeStamp; }
}

// 3.2 Specific decorator
class SerialNumbered extends Decorator {
  private static long counter = 1;
  private final long serialNumber = counter++;
  public SerialNumbered(Basic basic) { super(basic); }
  public getSerialNumber() { return serialNumber; }
}

// 4. Decoration
public class Decoration {
  public static void main(String[] args) {
    TimeStamped t = new TimeStamped( new Basic() );
    TimeStamped t2 = new TimeStamped(
        new SerialNumbered(new Basic()) );
    //! t2.getSerialNumber(); // Not available 
    
    SerialNumbered s = new SerialNumbered( new Basic() );
    SerialNumbered s2 = new SerialNumbered(
        new TimeStamped(new Basic()) );
    //! s2.getStamp(); // Not available
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样，装饰模式应该就可以理解了。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 17:00:00 +0000</pubDate>
<dc:creator>kid551</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kid551/p/8447795.html</dc:identifier>
</item>
<item>
<title>2017人生总结(MECE分析法) - 静儿1986</title>
<link>http://www.cnblogs.com/xiexj/p/8432755.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiexj/p/8432755.html</guid>
<description>&lt;p class=&quot;p1&quot;&gt;　　试着用MECE分析法对人生的整个规划做一下总结。作为技术人员，其实除了编码架构能力之外，分析问题的能力的重要程度也会随着职业发展越来越重要。《美团点评技术博客》说这几天要在黄金时段头版头条发表静儿的文章。虽然比较担心大过年的，技术文章的点击量，但是还是很开心。毕竟《美团点评技术博客》是干货满满，高质量的博客。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1112728/201802/1112728-20180213092325515-1459897695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　首先介绍MECE分析法。MECE全称：mutually exclusive,collectively exhaustive，这是麦肯锡解决问题的一个重要法则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1112728/201802/1112728-20180213092902952-749774493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 确立问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　人生目标：1.安全感 2.forever young&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　短期目标：系统化思维&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　&lt;/span&gt;问题：实现目标的核心竞争力是什么。&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;　　先说目标是怎么确立的。&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;strong&gt;安全感：&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;　　我现在工作确实比原来努力很多，但是这么努力也就是近一年的事情。所以工作了这么多年，一直也没有突破。美团是一个很有潜力的公司，但是与谷歌这类公司相比，档次差太多了。我毕业的学校基本就在这个档次，所以从大的方面上说，进步一点也没有。因为从始至终，我只是想要一份工作，&lt;span class=&quot;Apple-tab-span&quot;&gt;我的安全感是自己给的。我想做什么就做什么最原始的自信是因为我可以养活我们一家子。&lt;/span&gt;虽然我家男神是爱奇艺的研究员助理（级别高于技术专家），我真的不工作我们家也能生活的不错。而且我家男神是技术方向，不做管理的，失业的概率小很多。但是我总是对未来充满担忧，基因决定的吧。&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;　　我一直很鼓励我家男神找个红颜知己，因为万一我死的早，老了需要人做个伴，再培养感情就不是件容易的事情，大家考虑利益可能会多一些，对彼此会缺乏信任。我遇到我家男神的时候，他并不知道我家家境好，或者我任何能给他带来的利益价值，只是想让我幸福而已。而现在，我本身是和我的价值绑定的。我都分不清哪些是本我。所以很对他以后担心，怕他再遇不到当初那么纯净的心。但是我从来不担心他会离开我，因为我们是亲人。像无数最完美的家庭一样，我俩也曾经要各走各的路，但是那时候我俩都很平静，不会因为物质上的东西斤斤计较，想的都是孩子归他，那我应该多久来看一次孩子，最后谈到干脆他就住我家客厅算了，那还离个啥。我不担心他离开我，我担心的是他老了怎样给他养老，所有的安全感都需要我自己努力才行。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;forever young 　&lt;/strong&gt;　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　我家的基因就是超级怕麻烦。我妈甚至简单粗暴到跳过幼儿园学前班直接让我上一年级。于是我从小就比周围的同学要小，然后跟着其他人一起做其他人年龄段该干的事情。我结婚生子的时候已经毕业4年了。只是因为我20岁大学毕业，所以结婚时24岁，所以从年龄上看总是超前一步。而我从来都是很骄傲自己的年龄。因为我总是处于同一阶段人中最年轻的。作为30岁的程序员实在是年龄很大了，但是30岁的CEO，30岁的诺贝尔奖获得者，听起来是不是很年轻啊。所以要不断的提升自己，站到更高的地方，和同位置的人比，就会forever young。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;系统化思维&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　这是17年我面试时发现自己的弱项，也是最终我为什么选择了新美大。而且目前我周围有很多系统化思维的大成者，对这方面的提升，可谓天时地利人和。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;&lt;span&gt;分析问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　&lt;/span&gt;首先结合头脑风暴法找到主要问题。&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　上次去南山滑雪场，因为是第一次滑雪，前两次基本是坐着下来的。第三次，我打算站着滑，还是因为速度太快吓得又坐到了地上，但是这次工作人员先帮我停了一下，我再站起来的。站起来的那一瞬间，我突然的领悟到了，然后匀速的滑到了最下面。然后我连午饭也没吃，滑了近6个小时，换了更长的滑道，却再没摔过交。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　我&lt;/span&gt;上面&lt;span class=&quot;Apple-tab-span&quot;&gt;说的是一件具体的事情，也是我的做事情难以改变的风格。刚开始时很吃力，心里是有抵制的，当心里完全接受了，认同了，剩下的都是&lt;/span&gt;容易&lt;span class=&quot;Apple-tab-span&quot;&gt;的事情。我习惯了这么做事，也习惯了一开始很艰难，也习惯于在艰难的情况下仍然相信自己。这就是我的基因。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　科技公司和其他公司不同，生命周期很短。兴衰都来的很快。《浪潮之巅》里总结&lt;/span&gt;衰落&lt;span class=&quot;Apple-tab-span&quot;&gt;最基本还是基因决定的。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　我之前博客中提到我目前正处于职业生涯的第二个阶段的开始。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　第一个阶段，做技术。因为技术相对容易，可以兼顾很多事情。可以try everything。我曾经在一个夏天拍了一组照片，叫做《看我七十二变》，里面有我穿着各种职业装的照片。都不是在照相馆照的。比如我去美容院就顺便找关系好的美容师妹子借工服来拍个照。所以虽然最后只拍了十张，但是却是十次不同的尝试。后来我兼职创业去了，没时间接着拍了。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　第一个阶段时，我给自己的定位是：“工作是我的游戏，好玩就行。”这实际上要求我在过程中要勇于尝试很多新的东西，给自己一个无限可能的未来。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　而目前处在的第二个阶段，给自己的定位是：“不失业。” 这个真的没有听起来这么容易。互联网是瞬息万变的，在各个阶段都有竞争力，成为永远不被淘汰的百一不是容易的事情，特别是对女孩子。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　不失业要求技术上有过硬的专长，同时要打造自己的核心竞争力。我的核心竞争力来源于我的第一个阶段，各种尝试让我更乐于去“创新”。很多人问我专利达人的诀窍是什么。我的方法毫无保留的告诉他们，但是他们还是做不来。因为我的创新来源于早期的经历，就好像是滑雪场的前三次，我到现在也不明白为什么第三次站起来的时候就突然顿悟了，只是说基因决定的吧。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　我来美团之前有一些创业公司给了我&lt;/span&gt;超级高的薪水&lt;span class=&quot;Apple-tab-span&quot;&gt;和很高的职位邀请我去任职。不去的原因第一家庭对我永远是第一位的，不愿意压力太大时间太少；第二一下子职位高了中间错过了很多阶段，对长远的发展不利；第三我没有足够的时间和资源去发展我个人竞争力和专业品牌影响力；第四我无意成为高层决策者，我的天赋不适合。历史上鲜有好的女决策官。凯丽.菲奥莉娜是惠普历史上最差的CEO。我需要能万一一些小失误不会造成大的损失，而我的创新可以发挥作用的地方。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; 　　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　那么我的核心竞争力之一就是：创新。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　我不是一般的反应迟钝，这倒是不是天生的。只是我家男神反应慢，我刚开始的时候和他一起是不适应的，后来慢慢的习惯。但是脑子里还是有一个小人。那个小人在我脑子里着急的不得了，我说一句话做一个动作的时候，脑子里的那个小人已经活动好几圈了。后来有了我家小鲜肉以后，劳累，长时间睡眠不足神经衰弱，慢慢的小人也没有了，就变成了现在的样子。所以有的时候我看着一个男孩子笑，天知道，我可能不认识他，或者我只是看着眼熟，但是根本没认出来。我连小鲜肉也够呛能一眼认出来，顶多能一眼认出来我家男神。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　既然不是天生的，就有后来补救的方法，但是我绝对不适合需要急智的工作。从这个问题衍生出来的另一个问题就是不灵活。体现在大体规划是对的，具体实施方法是欠妥当的。这个需要积累一些方法技巧妥善处理问题。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　我在大方向上都是符合自己规划的，所以从综合分析能力上说，还是不错的。我老公家小姨得了肺癌，现在已经是晚期了。身上肿的很厉害。本来基本动不了了。但是我给她按摩，从第一天按摩开始她的喘气就好了很多，腿脚能动了。第二天开始去的时候，腿脚都是热乎的，第一天是腿脚冰凉。我并没有学过按摩，但是我可以自己感受到她应该哪些不舒服。这和我家祖上出神婆和医生有关系，还有一点就是爱思考。所以我在家里不做家务，但是我要工作，没有动脑子的地方我会被憋死。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　虽说比较爱动脑，但是平时多数想的都是没有用的东西，而且懒于动手。到什么程度呢。我做数学题多用心算，因为我总是试图能少些一个字就少写一个字。做语文题，比如需要查词典写出含义的。我都是不查词典的，而是自己编。原因1：查词典麻烦。原因2：词典上的意思通常比较长，多写很多字。现在慢慢的没有这么懒惰了，也试着有中心思想的思考问题，相信以后会对事业有帮助。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　我擅长解决问题，这也和爱思考有关系。但是不能作为核心竞争力，因为作为一个脑力工作者爱思考是最基本的。但是我思考的素材会更多些，因为我涉猎广泛，而且在别人看来都不是一知半解。我需要把握怎么将这些能力串联起来，而且要掌握合适的时机。本来前段时间打算写书的，后来放弃了。因为时机不对。因为写博客，很多人邀请我去他们的网站、论坛或者做技术分享之类的，还有找我写书的。写书也是我的一个心愿。但是我最终决策好了目前先做更重要的事情。《浪潮之巅》里介绍了铱星计划的失败，因为太超前了。时机可以决定成败。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt; 　　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　很多人只是努力一段时间，因为他们的前进需要很强的动力。我努力的动力是难以消失的。一方面是处于马斯洛需求层次理论中两个基本需求：安全感和自我实现。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1112728/201802/1112728-20180213234402343-890669203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（马斯洛需求层次理论）&lt;/p&gt;
&lt;p&gt;这是人生存本质的需求，是很难改变的。我妈妈大我40岁，是上世纪60年代的大学生。我爱工作基本上是由基因决定的。&lt;/p&gt;
&lt;p&gt;　　我们家生活的很简单，我家男神还有公公婆婆都不是爱攀比的人。很多人都理解不了我家为什么不买车。理由很简单，养车麻烦，费心。另外，我喜欢做男神的电动车。记得有次男神照例早上骑车送我去公交站。路上街旁9点的钟声响了。&lt;/p&gt;
&lt;p&gt;　　我说：“我听到这钟声就会幻想这是为我们两个举行的婚礼。要不要咱们也去教堂结一次婚。”&lt;/p&gt;
&lt;p&gt;　　男神说：“我有毛病啊”&lt;/p&gt;
&lt;p&gt;　　我以为他会说：“鱼都钓到了谁还放饵”。&lt;/p&gt;
&lt;p&gt;　　结果他说：“好不容易再结一次婚，我还娶你？”&lt;/p&gt;
&lt;p&gt;　　我：……&lt;/p&gt;
&lt;p&gt;　　世界上能用钱买到的是最便宜的东西。喜欢去面馆吃面，看他吃不饱的样子，然后默默的将自己碗里的拨给他。从小物质上没缺过，对爱却是多多益善。像我经常说的：女孩子为爱而活。&lt;/p&gt;
&lt;p&gt;　　所以不管富裕还是更富裕，原本就不是我努力的动力，当然更不会因此而堕落。&lt;/p&gt;

&lt;p&gt;　　平时注重身体锻炼，讲究可持续发展。这是未来的资本。我培养的不仅是自己，还有我家男神，这是我近二十年的资本。我要有足够的时间和精力培养我家娃，这是我二十年后的资本。我曾经有近四年的时间，基本都在养娃，没怎么上班。而且为了娃的身体，把自己喂到170斤。一方面是天性，做了母亲，心里哪里还有自己。另一方面，本身也是长远的考虑。提到这里就不得不提自己的另一个特质：决心和意志力。体现的太多了，比较能一句话说清楚的就是：我胖了好几年后从170斤减肥到90斤。&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　18年我有很多事情要做。其中包括不要对别人的事情公开的发表观点，哪怕是好心。这会让别人不舒服。还有就是更努力的坚持每天头发梳理整齐。天知道这是对我多大一个挑战。看上去很小的事情，却是尊重别人必不可少的。而且却是不管以后怎么发展，做成了就不会浪费掉的好习惯。&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;　　好了，上面的头脑风暴用鱼骨图分析总结一下，核心竞争力就是：&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1112728/201802/1112728-20180214002657906-1464350909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;　　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;跑题时间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;两个人&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搭档： &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　高中时的搭档，如果当初我们没有遇到彼此，可能我们都会上一个更好的大学。我俩是班里最经常被叫进老师办公室的人。学校强制高三学生必须住校，我俩却经常溜出去玩。各种恶作剧，让班主任很头疼又很无奈，两个爱惹事的学霸，还不能不管。&lt;/p&gt;
&lt;p&gt;　　搭档是个女孩子，身上的肌肉比男生还发达，长得也像男孩子，认识我不认识她的人都问我这是不是我男朋友。她反应很快，学习也很快，和男孩子们玩得很好。我俩一起合作做的事情，通常都是我出的主意，她负责实施。我想出来的搞笑又体现智慧的句子，别人却都是从她嘴里听到的。我眼中，她总是在光环下的，我却藏在背后的角落里。所以我一直很羡慕她。&lt;/p&gt;
&lt;p&gt;　　有一天我在宿舍门口吃一根黄瓜，我刚想咬一口，结果室友们陆续回来了，一人从我的黄瓜上咬了一口，竟然给吃没了。我就很无奈的回了宿舍很随意的跟搭档说：“黄瓜我自己都没吃着。”搭档表情却是既伤心又生气的表情，跟我说：“你人缘好行了吧。” 确实我在女孩子中的人缘比她好很多，只是我自己从来不注意这些，也不知道她也在羡慕我。&lt;/p&gt;
&lt;p&gt;　　后来她学了医学，在女孩堆里混，励志当一个淑女。我却学了计算机，一个班两个女生，和男孩子通宵打游戏。可见受彼此的影响很大。只是后来她一直很怀念这段时光。我却总是往前看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;男神：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　但实际上自己遇到的人经历的事情很多是由自己的基因决定的。记得还是高三，有天早上，我梦见在一条长长的玻璃做的长廊里，长廊的两侧住的都是高挑的美女，他们的宿舍也是玻璃的，我就一路跑啊跳啊，一会儿和这个打打招呼，一会儿和那个说说话。然后我到了长廊的尽头，上了楼梯，来到黑暗的楼顶上。下面长廊里一个男生出现了，西装革履，很有风度的长相。他一路小跑过长廊，只是在找我，没有多看旁边的女孩子们一眼。最后，他也来到了楼顶，天很黑，我在他身后，他没有看到我。他走到了栏杆边上，手扶着栏杆，叹了口气。突然，他意识到了或者说感应到了身后的我，猛地回过头来。&lt;/p&gt;
&lt;p&gt;　　然后，我就醒了，当时感动的想哭。后来很多年，每次回想起这个梦，都会感动的想哭，因为我从梦里感受到了包容。只是到了我真该找男朋友的时候，我却从来没有等待这样一个人出现。我觉得等待这么一个人出现是不现实的。&lt;/p&gt;
&lt;p&gt;　　只是后来我发现那个能够忍受我到处惹麻烦，喜欢我的动又喜欢我的静，心里只有我的那个人，其实一直在我身边，就是我家男神。不过小鲜肉出生之后，每当只有我和男神两个人的时候，任何的事情都会让男神想起小鲜肉，我觉得比起小鲜肉，他对我的爱差得远。直到这次小鲜肉在奶奶家，男神公司已经放假了，他却不肯先去看小鲜肉，要5天自己呆在家里等着和我一起走，我才突然想到：我不在的时候，任何事情也会让他想起我，只是我没看到。　　&lt;/p&gt;

&lt;p&gt;　　情人节快乐！&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 16:28:00 +0000</pubDate>
<dc:creator>静儿1986</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiexj/p/8432755.html</dc:identifier>
</item>
<item>
<title>数据分析之pandas教程------数据处理 - 逝雪</title>
<link>http://www.cnblogs.com/songfy/p/8447712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songfy/p/8447712.html</guid>
<description>&lt;h3 id=&quot;数据合并&quot;&gt;数据合并&lt;/h3&gt;
&lt;h4 id=&quot;实现数据库表join功能&quot;&gt;实现数据库表join功能&lt;/h4&gt;
&lt;p&gt;当我们有多张表的时候, 经常会遇到的一个问题就是, 如何把这些表关联起来, 我们可以想想我们在数据库的时候,&lt;br/&gt;进场会遇到表连接的问题, 比如join, union等等, 其实这里等同于是在pandas里实现了这些&lt;br/&gt;功能. 首先, 我们来看看这个join在pandas里是怎么实现的.&lt;/p&gt;
&lt;p&gt;我们在pandas里主要通过merge来实现数据库的join工作.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Series, DataFrame
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np

sep &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;---------------------------------------------------------------------&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data1&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data2&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1)
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key
0      1   a
1      2   b
2      3   c
3      4   d
4      5   e
---------------------------------------------------------------------
   data2 key
0      1   a
1      2   b
2      3   c
3    100   f
---------------------------------------------------------------------
   data1 key  data2
0      1   a      1
1      2   b      2
2      3   c      3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意, 我们默认是inner方式的连接, 对于数据库怎么做连接的, 以及连接的种类, 留作作业.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业1: 熟悉数据库连接的方式.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 左外连&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key  data2
0      1   a    1.0
1      2   b    2.0
2      3   c    3.0
3      4   d    NaN
4      5   e    NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 右外连&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'right'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key  data2
0    1.0   a      1
1    2.0   b      2
2    3.0   c      3
3    NaN   f    100&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 外连接&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'outer'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key  data2
0    1.0   a    1.0
1    2.0   b    2.0
2    3.0   c    3.0
3    4.0   d    NaN
4    5.0   e    NaN
5    NaN   f  100.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 这和我们数据库的是一模一样, 我们主要到, on可以指定要关联的列名, 但是我们可能需要关联的列名不同, 这时候我们要分别指定.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data1&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key1&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data2&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key2&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1)
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key1
0      1    a
1      2    b
2      3    c
3      4    d
4      5    e
---------------------------------------------------------------------
   data2 key2
0      1    a
1      2    b
2      3    c
3    100    f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们要在把key1和key2关联起来, 我们可以怎么做呢? 在sql中, 我们可以用on (key1 = key2), 在pandas中, 我们可以这么做:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;, left_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key1'&lt;/span&gt;, right_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key2'&lt;/span&gt;).drop(&lt;span class=&quot;st&quot;&gt;&quot;key1&quot;&lt;/span&gt;, axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1  data2 key2
0      1      1    a
1      2      2    b
2      3      3    c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现一个有趣的现象:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'outer'&lt;/span&gt;, left_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key1'&lt;/span&gt;, right_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key2'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key1  data2 key2
0    1.0    a    1.0    a
1    2.0    b    2.0    b
2    3.0    c    3.0    c
3    4.0    d    NaN  NaN
4    5.0    e    NaN  NaN
5    NaN  NaN  100.0    f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现, 这个数据就不一样了, 因为我们是外连接,会保留所有的数据.&lt;/p&gt;
&lt;p&gt;多个键做关联也是一样的, 只不过把on改成一个list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业2: 研究多个键关联.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们来说一个有趣的东西, 我们来看:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1)
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data key
0     1   a
1     2   b
2     3   c
3     4   d
4     5   e
---------------------------------------------------------------------
   data key
0     1   a
1     2   b
2     3   c
3   100   f
---------------------------------------------------------------------
   data_x key  data_y
0       1   a       1
1       2   b       2
2       3   c       3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现对于列名重复的列, 会自动加上一个后缀, 左边+_x, 右边+_y, 注意这个后缀, 我们是可以自己定义的.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;, suffixes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&quot;-a&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;-b&quot;&lt;/span&gt;]))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data-a key  data-b
0       1   a       1
1       2   b       2
2       3   c       3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们的问题来了, 如果我们要关联的列, 是索引怎么办 , 这个问题有点意思, 但是merge这个函数已经为大家都设计好了,&lt;br/&gt;我们可以这样搞:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1, index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;])
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2, index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, left_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, right_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;))

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2, index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, left_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, right_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data key
a     1   a
b     2   b
c     3   c
d     4   d
e     5   e
---------------------------------------------------------------------
   data key
a     1   a
b     2   b
c     3   c
f   100   f
---------------------------------------------------------------------
   data_x key_x  data_y key_y
a       1     a       1     a
b       2     b       2     b
c       3     c       3     c
---------------------------------------------------------------------
   data key
1     1   a
2     2   b
3     3   c
4   100   f
---------------------------------------------------------------------
  key  data_x key_x  data_y key_y
1   a       1     a     1.0     a
2   b       2     b     2.0     b
3   c       3     c     3.0     c
4   d       4     d     NaN   NaN
4   e       5     e     NaN   NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后一个例子是把frame1的index和frame2的key连接了起来, 这里我们发现, frame1的索引因为被merge掉了, frame2的索引保留了下来, 同时frame1的key被保留了下来.&lt;/p&gt;
&lt;p&gt;我们还有一个函数是join, 他也是实现了按索引关联.&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;frame1.join(frame2, lsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_x&quot;&lt;/span&gt;, rsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_y&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data_x&lt;/th&gt;
&lt;th&gt;key_x&lt;/th&gt;
&lt;th&gt;data_y&lt;/th&gt;
&lt;th&gt;key_y&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们发现&lt;strong&gt;调用者的索引被保留了下来&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 参数的索引和调用者的列关联在一起&lt;/span&gt;
frame2.join(frame1, lsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_x&quot;&lt;/span&gt;, rsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_y&quot;&lt;/span&gt;, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data_x&lt;/th&gt;
&lt;th&gt;key_x&lt;/th&gt;
&lt;th&gt;data_y&lt;/th&gt;
&lt;th&gt;key_y&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这里设置了on参数, 因此是&lt;strong&gt;调用者的列&lt;/strong&gt;和&lt;strong&gt;参数的索引&lt;/strong&gt;关联, 最后保留了&lt;strong&gt;调用者的索引&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&quot;实现union功能&quot;&gt;实现union功能&lt;/h4&gt;
&lt;p&gt;上面介绍的都是列关联的,也就是join, 之后我们会看怎么做union. 所谓union就是在纵向上面做连接, 我们可以看到, 这种方式, 可以两张列相同的表拼接起来.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# Series的连接&lt;/span&gt;

a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Series([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;], index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;])
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Series([&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;], index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt; , &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;])
c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Series([&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;], index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;])

pd.concat([a, b, c])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;a    1
b    2
c    3
d    3
e    4
e    6
f    7
dtype: int64&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 这样就把这3个Series拼接起来了, 默认是在axis=0上连接的, 但是我们也可以在axis=1上连接, 我们来看看结果怎么样.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([a, b, c], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;f&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们看到, 这个相当于是&lt;strong&gt;这3个Series按索引做外连接&lt;/strong&gt;. 如果我们要做内连接, 怎么办呢?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([b, c], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, join&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果要区分从原来哪些地方合并而来的, 我们可以指定keys:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([a, b, c], keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;one     a    1
        b    2
        c    3
two     d    3
        e    4
threee  e    6
        f    7
dtype: int64&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([a, b, c], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,  keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;f&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们发现, 我们的keys在axis=1连接的时候, 变成了列头.&lt;/p&gt;
&lt;p&gt;我们下面来看看如果是两个DataFrame, 会怎么样.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;f1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.arange(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;], columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;])

f2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.arange(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;,  &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;], columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'four'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f2)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  two
a    0    1
b    2    3
c    4    5
---------------------------------------------------------------------
   three  four
c      0     1
d      2     3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这就是我们要的union效果, 我们也可以区分出来源&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2], keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th/&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th rowspan=&quot;3&quot; valign=&quot;top&quot;&gt;1&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot; valign=&quot;top&quot;&gt;2&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2], keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th colspan=&quot;2&quot;&gt;1&lt;/th&gt;
&lt;th colspan=&quot;2&quot;&gt;2&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;如果我们不想要原来的索引, 而想要重新索引, 我们可以这样来:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2], ignore_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;总结起来, concat默认就是union的功能, 但是我们可以通过设置axis=1达到按索引关联的功能.&lt;/p&gt;
&lt;h3 id=&quot;数据转换&quot;&gt;数据转换&lt;/h3&gt;
&lt;h4 id=&quot;轴旋转&quot;&gt;轴旋转&lt;/h4&gt;
&lt;p&gt;这里我们要来聊聊轴旋转的课题, 其中主要用到两个函数:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt; 将列旋转为行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unstack&lt;/strong&gt; 将行旋转为列&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.arange(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.Index([&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;], name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;column&quot;&lt;/span&gt;), index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.Index([&lt;span class=&quot;st&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;two&quot;&lt;/span&gt;], name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;index&quot;&lt;/span&gt;))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;column  a  b  c
index          
one     0  1  2
two     3  4  5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来stack一下, 看看会有什么结果:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.stack())

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;][&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.loc[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;][&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.stack()[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index  column
one    a         0
       b         1
       c         2
two    a         3
       b         4
       c         5
dtype: int32
---------------------------------------------------------------------
0
0
---------------------------------------------------------------------
0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 我们把每一行都变成了一列, 然后堆了起来, 变成了一个Series.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.stack().unstack())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;column  a  b  c
index          
one     0  1  2
two     3  4  5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来看看, 如果我们把stack后的two, c项给删了, 会怎么样呢?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data.stack()
&lt;span class=&quot;kw&quot;&gt;del&lt;/span&gt; a[&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;]

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a.unstack())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;column    a    b    c
index                
one     0.0  1.0  2.0
two     3.0  4.0  NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在unstack的时候, 会自动补充NaN值来对齐, 而在stack的时候, 会删除这些NaN值.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.unstack().stack()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index  column
one    a         0.0
       b         1.0
       c         2.0
two    a         3.0
       b         4.0
dtype: float64&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现, 我们在做stack还是unstack的时候, 都是从最内测的轴开始的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.unstack().stack()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b.unstack())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index  column
one    a         0.0
       b         1.0
       c         2.0
two    a         3.0
       b         4.0
dtype: float64
---------------------------------------------------------------------
column    a    b    c
index                
one     0.0  1.0  2.0
two     3.0  4.0  NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;确实是内侧的column转到了列上面去. 如果我们要转外侧的索引呢, 我们可以指定数字或者列名.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b.unstack(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b.unstack(&lt;span class=&quot;st&quot;&gt;&quot;index&quot;&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index   one  two
column          
a       0.0  3.0
b       1.0  4.0
c       2.0  NaN
index   one  two
column          
a       0.0  3.0
b       1.0  4.0
c       2.0  NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;count&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;mean&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;3.500000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;std&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.707107&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;min&lt;/th&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;3.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;25%&lt;/th&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;3.250000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;50%&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;3.500000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;75%&lt;/th&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;3.750000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;max&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.000000&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这样, 行和列就互换了.&lt;/p&gt;
&lt;p&gt;强调一下:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack: 把行变成列. 我们可以这么理解, 把行堆到了列上.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unstack: 把列变成行, 把列反堆到了行上.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据转换-1&quot;&gt;数据转换&lt;/h4&gt;
&lt;h5 id=&quot;去重&quot;&gt;去重&lt;/h5&gt;
&lt;p&gt;去除重复数据, 我们这里主要讲讲怎么能够把重复的数据进行去除&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  two
0    1    1
1    1    1
2    2    2
3    2    2
4    3    3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.drop_duplicates())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  two
0    1    1
2    2    2
4    3    3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  three  two
0    1      5    1
1    1      6    1
2    2      7    2
3    2      8    2
4    3      9    3&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;count&lt;/th&gt;
&lt;td&gt;5.00000&lt;/td&gt;
&lt;td&gt;5.000000&lt;/td&gt;
&lt;td&gt;5.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;mean&lt;/th&gt;
&lt;td&gt;1.80000&lt;/td&gt;
&lt;td&gt;7.000000&lt;/td&gt;
&lt;td&gt;1.80000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;std&lt;/th&gt;
&lt;td&gt;0.83666&lt;/td&gt;
&lt;td&gt;1.581139&lt;/td&gt;
&lt;td&gt;0.83666&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;min&lt;/th&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;td&gt;5.000000&lt;/td&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;25%&lt;/th&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;td&gt;6.000000&lt;/td&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;50%&lt;/th&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;td&gt;7.000000&lt;/td&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;75%&lt;/th&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;td&gt;8.000000&lt;/td&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;max&lt;/th&gt;
&lt;td&gt;3.00000&lt;/td&gt;
&lt;td&gt;9.000000&lt;/td&gt;
&lt;td&gt;3.00000&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们可以按照某一列来进行去重&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.drop_duplicates([&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;]))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  three  two
0    1      5    1
2    2      7    2
4    3      9    3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;去重默认是按照保留最先出现的一个, 我们也可以保留最后出现的一个.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业3: 去重, 保留最后出现的一个.&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;对某一列运用函数&quot;&gt;对某一列运用函数&lt;/h5&gt;
&lt;p&gt;我们之前提到过, 对于一整列或者一整行, 可以用apply函数, 对于每个元素, 可以用applymap函数, 如果我们要对某一列的&lt;/p&gt;
&lt;p&gt;每个元素进行运算, 我们可以用map函数.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;.upper)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  one two
0   a   e
1   b   d
2   c   f
---------------------------------------------------------------------
  one two
0   A   e
1   B   d
2   C   f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们只想把a变成大写呢, 我们可以用传入一个map的方法.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;({&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  one two
0   a   e
1   b   d
2   c   f
---------------------------------------------------------------------
  one two
0   A   e
1   b   d
2   c   f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在最后一个例子中, 我们发现要提供b和c的值, 太麻烦了, 可以用replace函数:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;
data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;].replace(&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  one two
0   a   e
1   b   d
2   c   f&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;重命名行和列名&quot;&gt;重命名行和列名&lt;/h5&gt;
&lt;p&gt;这里我们来谈谈怎么重命名行或者列的名字. 我们可以用rename函数来完成, 比如我们希望把列名的首字母大写等等, 这个就留作作业.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业4: 重命名行名和列名, 把首字母大写.&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;离散化&quot;&gt;离散化&lt;/h5&gt;
&lt;p&gt;这里会讲一个很有用的技能, 就是离散化, 这个在我们后面处理特征的时候是非常有用的. 离散化主要是用到cut和qcut函数.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.cut(a, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 这个4将最大值和最小值间分成4等分&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[(-0.019, 4.75], (-0.019, 4.75], (-0.019, 4.75], (-0.019, 4.75], (-0.019, 4.75], ..., (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0]]
Length: 20
Categories (4, interval[float64]): [(-0.019, 4.75] &amp;lt; (4.75, 9.5] &amp;lt; (9.5, 14.25] &amp;lt; (14.25, 19.0]]&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.qcut(a, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 这个4按照个数分成四等分&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[(-0.001, 4.75], (-0.001, 4.75], (-0.001, 4.75], (-0.001, 4.75], (-0.001, 4.75], ..., (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0]]
Length: 20
Categories (4, interval[float64]): [(-0.001, 4.75] &amp;lt; (4.75, 9.5] &amp;lt; (9.5, 14.25] &amp;lt; (14.25, 19.0]]&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.qcut(a, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;).codes &lt;span class=&quot;co&quot;&gt;#输出codes&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], dtype=int8)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们也可以按照我们指定的分割点来, 这个留作作业.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业5: 按照自己定义的分割点来分割&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;过滤数据&quot;&gt;过滤数据&lt;/h5&gt;
&lt;p&gt;这个小节的功能类似于select中的where语句, 但是要灵活的多, 我们先来看看怎么选出绝对值大于2的行.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.random.randn(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;          0         1         2         3         4         5         6  \
0 -0.064111 -1.237009  0.040219 -0.300265 -0.195558  0.018277 -0.484843   
1 -0.497673 -0.010135 -1.482219 -0.239210 -0.789893  0.593664  0.345015   
2 -1.818869  0.613175 -0.165610  0.649670 -1.364698  0.444785 -0.146202   
3 -0.274151  0.718986  0.321961 -0.416124 -0.275706 -0.738405 -0.260420   
4  1.980359 -0.429317 -0.964024 -1.474141  0.339342 -0.932012 -0.116387   
5 -0.518374 -0.224879 -1.517607 -0.079120  0.728408  1.218297  1.191882   
6 -0.508048  2.010942  1.338983  2.026203 -0.794110 -1.370830  1.364660   
7  0.855870 -0.804471  0.939610  0.796154  0.467878  0.362091 -1.892815   
8  1.059561  0.223369  1.098954  1.583732  0.865225 -0.597980 -1.853170   
9 -0.434388  0.475098 -0.103491 -0.735113  0.823425 -0.905158  0.145539   

          7         8         9  
0 -1.370281  0.112070 -0.387124  
1  0.049215  0.578946  0.462688  
2  0.085562  2.906838 -1.059603  
3 -0.327103  0.504234  0.192760  
4  0.826963  1.188256  0.590085  
5 -0.061007  1.955653 -0.984727  
6 -0.471252  1.067497  0.550022  
7 -0.503244 -0.288634  1.121110  
8 -0.650933  0.138730 -0.389139  
9 -2.078052  0.158038 -0.109184  &lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data[np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;    0         1   2         3   4   5   6         7         8   9
0 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
1 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
2 NaN       NaN NaN       NaN NaN NaN NaN       NaN  2.906838 NaN
3 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
4 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
5 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
6 NaN  2.010942 NaN  2.026203 NaN NaN NaN       NaN       NaN NaN
7 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
8 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
9 NaN       NaN NaN       NaN NaN NaN NaN -2.078052       NaN NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完了, 居然是这幅德行&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;7&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们发现, false的这些地方, 都被设为NaN, 我们不想要这些false的数据, 我们只需要存在一个大于2的行, 我们看看apply函数行不行呢?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data[(np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x: x.name &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;).notnull()]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;-1.818869&lt;/td&gt;
&lt;td&gt;0.613175&lt;/td&gt;
&lt;td&gt;-0.165610&lt;/td&gt;
&lt;td&gt;0.649670&lt;/td&gt;
&lt;td&gt;-1.364698&lt;/td&gt;
&lt;td&gt;0.444785&lt;/td&gt;
&lt;td&gt;-0.146202&lt;/td&gt;
&lt;td&gt;0.085562&lt;/td&gt;
&lt;td&gt;2.906838&lt;/td&gt;
&lt;td&gt;-1.059603&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;-0.508048&lt;/td&gt;
&lt;td&gt;2.010942&lt;/td&gt;
&lt;td&gt;1.338983&lt;/td&gt;
&lt;td&gt;2.026203&lt;/td&gt;
&lt;td&gt;-0.794110&lt;/td&gt;
&lt;td&gt;-1.370830&lt;/td&gt;
&lt;td&gt;1.364660&lt;/td&gt;
&lt;td&gt;-0.471252&lt;/td&gt;
&lt;td&gt;1.067497&lt;/td&gt;
&lt;td&gt;0.550022&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;-0.434388&lt;/td&gt;
&lt;td&gt;0.475098&lt;/td&gt;
&lt;td&gt;-0.103491&lt;/td&gt;
&lt;td&gt;-0.735113&lt;/td&gt;
&lt;td&gt;0.823425&lt;/td&gt;
&lt;td&gt;-0.905158&lt;/td&gt;
&lt;td&gt;0.145539&lt;/td&gt;
&lt;td&gt;-2.078052&lt;/td&gt;
&lt;td&gt;0.158038&lt;/td&gt;
&lt;td&gt;-0.109184&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这样看上去实在是太复杂了, 其实可以简化&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;(np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;0    False
1    False
2     True
3    False
4    False
5    False
6     True
7    False
8    False
9     True
dtype: bool&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data[(np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)] &lt;span class=&quot;co&quot;&gt;# 有一个真就是真&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;-1.818869&lt;/td&gt;
&lt;td&gt;0.613175&lt;/td&gt;
&lt;td&gt;-0.165610&lt;/td&gt;
&lt;td&gt;0.649670&lt;/td&gt;
&lt;td&gt;-1.364698&lt;/td&gt;
&lt;td&gt;0.444785&lt;/td&gt;
&lt;td&gt;-0.146202&lt;/td&gt;
&lt;td&gt;0.085562&lt;/td&gt;
&lt;td&gt;2.906838&lt;/td&gt;
&lt;td&gt;-1.059603&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;-0.508048&lt;/td&gt;
&lt;td&gt;2.010942&lt;/td&gt;
&lt;td&gt;1.338983&lt;/td&gt;
&lt;td&gt;2.026203&lt;/td&gt;
&lt;td&gt;-0.794110&lt;/td&gt;
&lt;td&gt;-1.370830&lt;/td&gt;
&lt;td&gt;1.364660&lt;/td&gt;
&lt;td&gt;-0.471252&lt;/td&gt;
&lt;td&gt;1.067497&lt;/td&gt;
&lt;td&gt;0.550022&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;-0.434388&lt;/td&gt;
&lt;td&gt;0.475098&lt;/td&gt;
&lt;td&gt;-0.103491&lt;/td&gt;
&lt;td&gt;-0.735113&lt;/td&gt;
&lt;td&gt;0.823425&lt;/td&gt;
&lt;td&gt;-0.905158&lt;/td&gt;
&lt;td&gt;0.145539&lt;/td&gt;
&lt;td&gt;-2.078052&lt;/td&gt;
&lt;td&gt;0.158038&lt;/td&gt;
&lt;td&gt;-0.109184&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这里这个any(1)相当于是apply(lambda x: x.name if x.sum() &amp;gt; 0 else None, axis=1).notnull()&lt;/p&gt;
&lt;h5 id=&quot;转换为onehot表示&quot;&gt;转换为onehot表示&lt;/h5&gt;
&lt;p&gt;下面我们来提一个东西, 就是怎么将数据转换为onehot的表示.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;: np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;: np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)})
data.join(pd.get_dummies(pd.cut(data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;],  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;).values.codes, prefix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;one_&quot;&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;th&gt;one__0&lt;/th&gt;
&lt;th&gt;one__1&lt;/th&gt;
&lt;th&gt;one__2&lt;/th&gt;
&lt;th&gt;one__3&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;7&lt;/th&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;10&lt;/th&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;11&lt;/th&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;12&lt;/th&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;13&lt;/th&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;14&lt;/th&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;15&lt;/th&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;16&lt;/th&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;17&lt;/th&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;18&lt;/th&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;19&lt;/th&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;是不是超级简单.&lt;/p&gt;
&lt;h5 id=&quot;字符串操作&quot;&gt;字符串操作&lt;/h5&gt;
&lt;p&gt;我们来看看字符串的操作, 其实主要还是正则表达式, 我们来看一个例子:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;&quot;xiaoming@sina.com&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;xiaozhang@gmail.com&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;xiaohong@qq.com&quot;&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;                     a  b
0    xiaoming@sina.com  1
1  xiaozhang@gmail.com  2
2      xiaohong@qq.com  3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;r'([A-Z]+)@([A-Z]+)\.([A-Z]{2,4})'&lt;/span&gt;

data[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;.findall(pattern, flags&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;re.IGNORECASE).&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;0     sina
1    gmail
2       qq
Name: a, dtype: object&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 我们可以用python的正则表达式来处理字符串问题.&lt;/p&gt;
&lt;p&gt;**作业6: 熟悉python正则表达式. &lt;a href=&quot;http://www.runoob.com/python3/python3-reg-expressions.html**&quot; class=&quot;uri&quot;&gt;http://www.runoob.com/python3/python3-reg-expressions.html**&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 15:32:00 +0000</pubDate>
<dc:creator>逝雪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songfy/p/8447712.html</dc:identifier>
</item>
<item>
<title>wenpack-simple+elementUI配置 - 房东家的猫</title>
<link>http://www.cnblogs.com/fangdongdemao/p/8447697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fangdongdemao/p/8447697.html</guid>
<description>&lt;p&gt;首先跟着element官方文档走一遍&lt;/p&gt;
&lt;p&gt;注意把.babelrc改成这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;presets&quot;: [
    [&quot;env&quot;, { &quot;modules&quot;: false }],
    &quot;stage-3&quot;
  ],
  &quot;plugins&quot;: [[&quot;component&quot;, {
    &quot;libraryName&quot;: &quot;element-ui&quot;,
    &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;
  }
  ]]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在webpack.config.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        loader: 'url-loader',
        options: {
            limit: 10000,
            name: '[name].[ext]'
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装style-loader依赖&lt;code&gt;npm install --save-dev style-loader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再安装url-loader&lt;code&gt;npm install --save-dev url-loader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果安装less ,less-loader&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cnpm install less less-loader -D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cnpm install node-sass sass-loader -D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;style lang=&quot;sass&quot; scoped&amp;gt; .....&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;引用日历组件&lt;/p&gt;
&lt;p&gt;在src文件夹中新建components文件夹-&amp;gt;Date.vue复制内容注意template内记得用div包着&lt;/p&gt;
&lt;p&gt;在App.vue 中script标签中&lt;code&gt;import Date from &quot;./components/Date.vue&quot;``components:{Date}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在template插入&lt;code&gt;&amp;lt;Date&amp;gt;&amp;lt;/Date&amp;gt;标签&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;bower包管理器&quot;&gt;bower包管理器&lt;/h2&gt;
&lt;p&gt;下包: bower install 包名&lt;/p&gt;
&lt;p&gt;简写&lt;code&gt;i --&amp;gt;install D--&amp;gt;--save-dev S --&amp;gt;--save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如bootstrap&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bower install bootstrap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后再index.html直接引用就可以了&lt;/p&gt;
&lt;h2 id=&quot;啰嗦几句改端口&quot;&gt;啰嗦几句改端口&lt;/h2&gt;
&lt;p&gt;在package.json中在&lt;code&gt;--hot --port 8800&lt;/code&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 15:27:00 +0000</pubDate>
<dc:creator>房东家的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fangdongdemao/p/8447697.html</dc:identifier>
</item>
<item>
<title>微信小程序项目踩过的几个坑 - shoufengwei</title>
<link>http://www.cnblogs.com/shoufengwei/p/8447674.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufengwei/p/8447674.html</guid>
<description>&lt;p&gt;近期，开始了一段辛酸的还未开始就已经结束的“创业”（参见&lt;a href=&quot;https://www.jianshu.com/p/3f3677006376&quot;&gt;我的第二次创业，以梦为马，莫负韶华&lt;/a&gt;）。大体上是开发了一款微信小程序，关于创业这件事情就不细说了，本文主要介绍一下开发小程序的过程中踩过的几个坑。&lt;/p&gt;

&lt;p&gt;开发一款功能全乎的小程序，在未动键盘开始码代码之前就要涉及到账号注册、微信认证、支付申请等等，这里面也有一些坑。&lt;/p&gt;
&lt;p&gt;首先是必须要企业认证才能有微信支付功能，以个人名义申请不能进行支付。微信认证还算容易，只需要支付300元即可。支付申请的时候会让你选择需要申请的经营种类，此处如果与企业执照上相同会比较容易通过，我们的经营项目不太一致，刚开始写的比较简单被直接驳回，后面我写了一段比较长的话详细解释了一下要做个什么、为什么申请此类型，估计审核的人被我感动了，于是顺利通过。&lt;/p&gt;

&lt;p&gt;如果小程序需要和后台交互，那么交互时只能选择域名的方式，且此域名必须经过ICP备案，并且只能采用HTTPS方式。&lt;/p&gt;
&lt;p&gt;ICP备案比较麻烦，可以直接选择购买阿里云服务器，这应该是最方便的方式了吧。&lt;/p&gt;
&lt;p&gt;HTTPS建议使用百度云，可以申请到一年的免费证书，申请也比较容易。&lt;/p&gt;

&lt;p&gt;回归到本行。其实小程序开发是个涉及到方方面面的工作，要求还是蛮高的，一套下来基本也就是个全栈工程师了。&lt;/p&gt;
&lt;p&gt;小程序本身就分前台和后台，就类似与网站开发，wxml对应html、wxss对应css、js就是js、还多了个json用于配置等。说白了就是微信把这些东西以一定的方式封装起来了，但是我个人感觉封装的也不是那么理想，所以有点不太顺手。&lt;/p&gt;
&lt;p&gt;小程序通信的后台可以采用各种语言，相当于网页的后台，也基本等同于restful接口。此项目我们使用了python的django框架，开发起来还蛮容易的。&lt;/p&gt;
&lt;p&gt;整个一套下来，哪方面都有接触，我的合伙人包亮是个编程大牛，对我进行了很多指导，我对开发这件事情和js、python这两种语言都有了全新的认识。&lt;/p&gt;
&lt;p&gt;言归正传，下面开始介绍开发过程中踩过的坑。&lt;/p&gt;
&lt;h2 id=&quot;js回调&quot;&gt;4.1 js回调&lt;/h2&gt;
&lt;p&gt;刚开始js代码写的很冗长，一个函数有上百行。并不是我不懂得代码编写的艺术，而是小程序的js开发往往是一个请求中的sucess以及fail中嵌套另一个请求，函数只能越写越长，最后各种功能交织在一起，变量也混杂在仪器，我自己实在看不下去了，于是开始重构，将一些功能提取出来组成函数，整体代码清爽了不少，但是出现了一些让我很费解的bug，大神简单看了一下直接指出问题来了，本来应该嵌套的异步函数写成了并列，这样导致函数在执行的时候没有时间上的先后顺序，于是就会出现莫名其妙的bug，这个问题我是有所注意的，但是有些地方也确实没有注意到，他告诉我你应该将各种回掉函数作为参数传入，这样就不会再出问题。简单如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// do something when sucess&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;sucess&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是我原来写的方式，当然比这复杂的多，所以不注意的时候就会将b写到a的后面，其实真正的方式应该是这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// do something when sucess&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;(aSucess) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;sucess&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;aSucess&lt;/span&gt;()
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;(b)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就很清晰的知道a函数里当请求成功的时候做了什么事情，因为直接在调用a的时候就已经传入其中了。&lt;/p&gt;
&lt;h2 id=&quot;app.js中的异步函数如何保证可靠性&quot;&gt;4.2 app.js中的异步函数如何保证可靠性&lt;/h2&gt;
&lt;p&gt;有的时候需要在app.js的onLaunch事件中向后台请求一些数据，比如用户信息等等（非微信用户信息，但需要与微信openid关联），取出这些信息后在加载用户页面的时候会再向后台请求些数据进行展示等，但是app.js和页面之间无法进行普通回掉，这样就会造成在app.js中还没有请求完成，数据还是undefined而页面中使用此数据就会造成错误。后来查看了一些文档，发现可以在app.js中为特定数据自定义事件，用于在其他页面判断，方式如下：&lt;/p&gt;
&lt;p&gt;app.js中:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; res_user_info &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userIdCallback&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userIdCallback&lt;/span&gt;(res_user_info)
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;globalData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res_user_info&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就在app.js中定义了一个userIdCallback事件，该事件完成的时候表示已经从后台取到了用户数据。在其他页面即可通过此种方式进行判断：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;globalData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;globalData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userIdCallback&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; res_user_id &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即首先判断此数据是否已经请求到，如果还未完成则等待此数据完成，然后在其回调函数中再完成有关操作。&lt;/p&gt;
&lt;h2 id=&quot;tabbar之间的切换&quot;&gt;4.3 tabBar之间的切换&lt;/h2&gt;
&lt;p&gt;如果在app.js中设置了tabBar，则页面底部会出现相应的导航栏，但是页面中使用wx.navigateTo跳转到的页面底部不显示导航栏，并且如果需要切换到导航栏内的任何页面，都需要使用wx.switchTab函数而不是wx.navigateTo函数。&lt;/p&gt;
&lt;h2 id=&quot;数据绑定&quot;&gt;4.4 数据绑定&lt;/h2&gt;
&lt;p&gt;微信小程序没有数据双向绑定，在Page对象中设置的data只能单向改变前台渲染，而前台改变无法同步更改此变量。那么如果需要将前台的变化也同步到后台，只能监控前台控件的变化事件，如input的bindinput事件，在此事件中对输入值进行判断，如下：&lt;/p&gt;
&lt;pre class=&quot;wxml&quot;&gt;
&lt;code&gt;&amp;lt;input bindinput=&quot;bindMoney&quot; value=&quot;{{money}}&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中value=&quot;{{money}}&quot;用于后台到前台的绑定，而bindinput则用于前台到后台的绑定，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;bindMoney&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;detail&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setData&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; value
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并且小程序在绑定变化的时候前台会出现undefined的情况，如果是图像的话就会造成请求错误，倒是无伤大雅，时间很短，前台基本不会察觉。&lt;/p&gt;

&lt;p&gt;这是最坑的一点，吭哧吭哧的做了半天，最后居然因为种种非技术原因而无法通过审核。好吧，最为个体我们真的无法说什么，只能对微信这个大平台言听计从，希望我们更改相应页面后能够通过审核。审核太严失去了自由的土壤，微信如何保证有好的产品出现呢？&lt;/p&gt;

&lt;p&gt;本文简单介绍了在微信小程序开发过程中踩过的一系列坑，希望对后来者能够有所帮助。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 15:16:00 +0000</pubDate>
<dc:creator>shoufengwei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufengwei/p/8447674.html</dc:identifier>
</item>
<item>
<title>豹哥嵌入式讲堂：ARM Cortex-M调试过程探析（1）- 4线接口标准（JTAG） - Jay豹哥</title>
<link>http://www.cnblogs.com/henjay724/p/8447578.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henjay724/p/8447578.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;　　大家好，我是豹哥，猎豹的豹，犀利哥的哥。今天豹哥给大家讲的是&lt;strong&gt;嵌入式调试里的接口标准JTAG&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　在结束&lt;a href=&quot;http://www.cnblogs.com/henjay724/p/8166334.html&quot;&gt;《ARM Cortex-M开发文件详解》&lt;/a&gt;系列文章之后，豹哥修整了一小段时间，但是讲课的心完全停不下来啊，所以忍不住新开了一个系列文章，叫《ARM Cortex-M调试过程探析》，本文是这个系列文章的第一篇，欢迎各位嵌入式朋友前来围观捧场~~~&lt;br/&gt;　　嵌入式开发中，大家免不了需要仿真调试代码，尤其是当应用工程功能逻辑复杂到一定程度时，免不了在写代码时会引入一些逻辑bug，仅靠代码审查有时候并不一定能排除所有bug，所以在线调试便成为排除bug最有效直接的方式，今天我们要聊的是调试里最基础的东西，即接口标准。ARM内核原生支持2种业界通用的接口标准，分别是JTAG和SWD。本节课豹哥先给大家详细讲讲JTAG接口。&lt;/p&gt;
&lt;h3 id=&quot;一jtag接口标准&quot;&gt;一、JTAG接口标准&lt;/h3&gt;
&lt;p&gt;　　JTAG全称“Joint Test Action Group”，既是个标准也是个组织，这是个由几家主要的电子制造商（IBM、AT&amp;amp;T、TI、Philips等）成立于1985年的组织，这个组织成立的目的是发起制订一种PCB和芯片测试标准。&lt;br/&gt;　　JTAG标准于1990年被IEEE批准为IEEE1149.1测试访问端口和边界扫描结构标准。JTAG标准规定了进行边界扫描所需要的硬件和软件，主要应用于电路的边界扫描测试和可编程芯片的在线系统编程。&lt;/p&gt;
&lt;h4 id=&quot;ieee1149.1标准&quot;&gt;1.1 IEEE1149.1标准&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;// IEEE 1149.1工作组&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//grouper.ieee.org/groups/1149/1/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 最初版手册1149.1-1990&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//standards.ieee.org/findstds/standard/1149.1-1990.html&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 最新版手册1149.1-2013&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//standards.ieee.org/findstds/standard/1149.1-2013.html&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jtag接口信号&quot;&gt;1.2 JTAG接口信号&lt;/h4&gt;
&lt;p&gt;　　JTAG接口，总称测试访问接口TAP（Test Access Port），使用如下信号来实现边界扫描操作：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;TCK（测试时钟）：同步内部状态机操作的时钟信号。&lt;/li&gt;
&lt;li&gt;TMS（测试模式选择）：控制内部状态机转换的模式信号（TCK上升沿采样）。&lt;/li&gt;
&lt;li&gt;TDI（测试数据输入）：移入器件测试或编程逻辑的数据（TCK上升沿采样）。&lt;/li&gt;
&lt;li&gt;TDO（测试数据输出）：移出器件测试或编程逻辑的数据（TCK下降沿采样）。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　除了以上信号线外，还有1个可选的信号：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;TRST（测试重置）：重置TAP控制器的状态机的复位信号。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;jtag系统内部构造&quot;&gt;1.3 JTAG系统内部构造&lt;/h4&gt;
&lt;p&gt;　　JTAG系统内部最基本的单元是边界扫描单元（其扫描获取的值存在边界扫描寄存器BSR（Boundary Scan Register）中），每个边界扫描单元都位于目标器件的边界上，所以很多时候JTAG测试也被称为边界扫描。&lt;br/&gt;　　所有目标器件核心逻辑与针脚之间的信号都会被串联的边界扫描单元所拦截。正常运行时，这些边界扫描单元是不可见的。但是，在测试模式下这些单元可以被用来设置/读取目标器件针脚或核心逻辑的值。&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-registers-cn.jpg&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/schematic_diagram_jtag_enab-cn.gif&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　除了上述BSR之外，JTAG系统还需要以下3个寄存器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;指令寄存器：存储当前的指令，指令内容被TAP控制器用来决定如何处理接收到的信号。&lt;/li&gt;
&lt;li&gt;旁路寄存器（BYPASS）：把信息从TDI传到TDO的单位寄存器。&lt;/li&gt;
&lt;li&gt;识别码寄存器（IDCODES）：含有器件的识别码和版本序号，该信息可以使器件和它的边界扫描描述语言（BSDL）文件相关联。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　JTAG系统最核心的是TAP控制器，TAP控制器被设计用来与JTAG系统内部寄存器相互动，TAP控制器是一个被TMS信号控制转换的同步状态机，控制着JTAG系统的行为。&lt;br/&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-tap_state_machine-cn.gif&quot;/&gt;&lt;br/&gt;　　如上图所示，TAP控制器的内部状态机一共16个状态，关于各个状态具体含义可查阅IEEE1149.1手册。TAP控制器的基本功能是产生BSR和指令寄存器正常工作所需要的时钟和控制信号，其主要功能有以下几点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;提供信号将指令装入指令寄存器。&lt;/li&gt;
&lt;li&gt;提供信号将输入数据从TDI管脚移入内部寄存器、把输出数据从内部寄存器移出到TDO管脚。&lt;/li&gt;
&lt;li&gt;执行相应功能，如捕获、移位和更新数据等。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　指令寄存器是用来存储需要解释执行的指令的，IEEE 1149.1标准规定了JTAG兼容器件必须要具备的指令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;BYPASS：用单一单元旁路寄存器传送数据，缩短JTAG链上不必要的扫描链路。&lt;/li&gt;
&lt;li&gt;EXTEST：将已知值（存在BSR）驱动到芯片针脚上。&lt;/li&gt;
&lt;li&gt;SAMPLE/PRELOAD：将捕获到的芯片针脚值装入BSR。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　除了必备的指令外，IEEE 1149.1标准还规定了如下可选的指令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;IDCODE：将IDCODES寄存器中的数据移出。&lt;/li&gt;
&lt;li&gt;INTEST：将已知值（存在BSR）驱动到芯片核心逻辑上。&lt;/li&gt;
&lt;li&gt;RUNBIST：当TAP进入测试运行空闲状态时，芯片进行自检。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;jtag调试工具pinout&quot;&gt;1.4 JTAG调试工具pinout&lt;/h4&gt;
&lt;p&gt;　　通常支持JTAG接口的调试编程工具其实只是利用了JTAG技术的四线TAP通信协议，而除了标准TAP信号线外，有时还加入其他辅助信号线构成完整pinout，对于ARM JTAG调试工具来说，有两种比较通用的pinout标准，即ARM20 JTAG header和ARM14 JTAG header：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-arm20-pinout.jpg&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-arm14-pinout.jpg&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　上述两种ARM JTAG header中除了标准TAP信号线外，其他辅助信号线含义如下：&lt;/p&gt;
&lt;table&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr&gt;&lt;th&gt;信号名&lt;/th&gt;
&lt;th&gt;ARM20-pin&lt;/th&gt;
&lt;th&gt;ARM14-pin&lt;/th&gt;
&lt;th&gt;信号含义&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Vref&lt;/td&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;P1，P13&lt;/td&gt;
&lt;td&gt;JTAG接口电平参考电压。用于检查目标系统是否供电，该引脚通常与目标系统Vdd相连，中间不允许串接电阻。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Vsupply&lt;/td&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;电源输入&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nSRST&lt;/td&gt;
&lt;td&gt;P15&lt;/td&gt;
&lt;td&gt;P12&lt;/td&gt;
&lt;td&gt;System Reset信号，与目标系统复位信号相连。可以直接对目标系统复位，同时可以检测目标系统的复位情况。为了防止误触发，应在目标端加上适当的上拉电阻。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;RTCK&lt;/td&gt;
&lt;td&gt;P11&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Return Test Clock。由目标系统反馈给JTAG的时钟信号，用来动态控制TCK速率。不使用时可以直接接地。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;P4，P6，P8，P10，P12，P14，P16，P18，P20&lt;/td&gt;
&lt;td&gt;P2，P4，P6，P8，P10，P14&lt;/td&gt;
&lt;td&gt;接地&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DBGRQ&lt;/td&gt;
&lt;td&gt;P17&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;连接到目标系统的调试请求信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DBGACK&lt;/td&gt;
&lt;td&gt;P19&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;由目标系统反馈回来的调试应答信号&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;3.1609195402299&quot;&gt;
&lt;p&gt;Note：更多JTAG pinout详见JTAG test网站的整理 &lt;a href=&quot;http://www.jtagtest.com/pinouts/&quot; class=&quot;uri&quot;&gt;http://www.jtagtest.com/pinouts/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;二jtag接口进阶&quot;&gt;二、JTAG接口进阶&lt;/h3&gt;
&lt;p&gt;　　前面讲完了JTAG基础知识，下面豹哥再给大家多介绍一些JTAG相关的“黑科技”。&lt;/p&gt;
&lt;h4 id=&quot;bsdl文件&quot;&gt;2.1 BSDL文件&lt;/h4&gt;
&lt;p&gt;　　现如今支持JTAG接口的芯片越来越多，为了统一各芯片厂商的具体JTAG实现，促进整个电子行业的一致性，IEEE1149.1标准制订了BSDL语言规范。BSDL是JTAG设备的标准建模语言，它的语法是VHDL的子集，是对JTAG器件的边界扫描特性的描述，主要用来沟通芯片厂商、用户与测试工具之间的联系。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 免费的JTAG BSDL库网站，涵盖主流厂商的主流芯片的BSDL文件&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//bsdl.info/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　豹哥随便找一款芯片的BSDL文件（Freescale K60_1M（K24_144QFP））简单分析下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;entity k60_1m is
     generic (PHYSICAL_PIN_MAP : string := &lt;span class=&quot;st&quot;&gt;&quot;K24_144qfp&quot;&lt;/span&gt;);
-- 此处描述芯片所有引脚属性
    port (
                                PTA0:        in   bit;
                                  ...
                              XTAL32:   linkage   bit);
    use STD_1149_1_2001.all;
    use STD_1149_6_2003.all;
-- 描述芯片引脚pinout
    attribute COMPONENT_CONFORMANCE of k60_1m: entity is &lt;span class=&quot;st&quot;&gt;&quot;STD_1149_1_2001&quot;&lt;/span&gt;;
    attribute PIN_MAP of k60_1m: entity is PHYSICAL_PIN_MAP;
    constant K24_144qfp :PIN_MAP_STRING :=
                                &lt;span class=&quot;st&quot;&gt;&quot;PTA0:      50,&quot;&lt;/span&gt; &amp;amp;
                                   ...
                              &lt;span class=&quot;st&quot;&gt;&quot;XTAL32:      40&quot;&lt;/span&gt; ;
-- 描述JTAG信号在芯片引脚分配
    attribute TAP_SCAN_OUT of PTA2 : signal is true;
    attribute TAP_SCAN_CLOCK of PTA0 : signal is (&lt;span class=&quot;fl&quot;&gt;2.00e+07&lt;/span&gt;,BOTH);
    attribute TAP_SCAN_MODE of PTA3 : signal is true;
    attribute TAP_SCAN_IN of PTA1 : signal is true;
-- 描述JTAG指令寄存器相关属性
    attribute INSTRUCTION_LENGTH of k60_1m: entity is &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
    attribute INSTRUCTION_OPCODE of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;BYPASS  (1111),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;CLAMP  (1100),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;EXTEST  (0100),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;HIGHZ  (1001),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;IDCODE  (0000),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;PRELOAD  (0010),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;SAMPLE  (0011),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_CENSOR_CTRL  (0111),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_TEST_CTRL  (0110),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;EZPORT  (1101),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_ABORT  (1000),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_APACC  (1011),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_DPACC  (1010),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_IDCODE  (1110)&quot;&lt;/span&gt;;
    attribute INSTRUCTION_CAPTURE of k60_1m: entity is  &lt;span class=&quot;st&quot;&gt;&quot;xx01&quot;&lt;/span&gt;;
    attribute INSTRUCTION_PRIVATE of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_CENSOR_CTRL,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_TEST_CTRL,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;EZPORT,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_ABORT,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_APACC,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_DPACC,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_IDCODE&quot;&lt;/span&gt;;
-- 描述JTAG识别码寄存器相关属性
    attribute IDCODE_REGISTER of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;0000&quot;&lt;/span&gt;  &amp;amp; -- Version
        &lt;span class=&quot;st&quot;&gt;&quot;1011001100011010&quot;&lt;/span&gt;  &amp;amp; -- Part Number
        &lt;span class=&quot;st&quot;&gt;&quot;00000001110&quot;&lt;/span&gt;  &amp;amp; -- Manufacturer Identity
        &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;;  -- IEEE &lt;span class=&quot;fl&quot;&gt;1149.1&lt;/span&gt; Requirement
 
    attribute REGISTER_ACCESS of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;BYPASS (BYPASS),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;DEVICE_ID (IDCODE)&quot;&lt;/span&gt;;
-- 描述JTAG边界扫描寄存器相关属性
    attribute BOUNDARY_LENGTH of k60_1m: entity is &lt;span class=&quot;dv&quot;&gt;196&lt;/span&gt;;
    attribute BOUNDARY_REGISTER of k60_1m: entity is
-- num cell   port&lt;span class=&quot;co&quot;&gt;/*                            function  safe  [ccell  dis  rslt] &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot;   0  (BC_2, *,                                control,  1)                       ,&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot;   1  (BC_8, PTE0,                             bidir,    X,    0,      1,   Z)    ,&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot; 194  (BC_2, *,                                control,  1)                       ,&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot; 195  (BC_8, PTD15,                            bidir,    X,    194,    1,   Z)    &quot;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;end k60_1m;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jtag菊花链&quot;&gt;2.2 JTAG菊花链&lt;/h4&gt;
&lt;p&gt;　　当你的系统中有多个JTAG设备时，为解决JTAG口过多占用PCB的问题，JTAG支持如下菊花链方式连接（在FPGA应用尤其广泛）：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-device-symbol.PNG&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-device-chain.PNG&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　从上图可以看出TMS、TCK是一主多从并联的结构（设备过多时TMS,TCK电路需加缓冲器（如74LVC245）增加驱动能力）；TDI、TDO是一主一从串联的结构，这种菊花链方式使得PCB上只需要一个JTAG接口便可以访问所有JTAG设备。&lt;/p&gt;
&lt;p&gt;　　至此，嵌入式调试里的接口标准JTAG豹哥便介绍完毕了，掌声在哪里~~~&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 14:35:00 +0000</pubDate>
<dc:creator>Jay豹哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/henjay724/p/8447578.html</dc:identifier>
</item>
<item>
<title>.NET Core版本七牛云SDK使用 - OMango</title>
<link>http://www.cnblogs.com/OMango/p/8447480.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/OMango/p/8447480.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、问题背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　公司目前正在将一部分的业务从.NET平台准备迁移到.NET Core上去，同时也准备启用docker进行.NET Core的部署，在项目迁移过程中，不可避免的碰到有些SDK只有在.NET Framework下有，而.NET Core没有的情况，而七牛就是碰到的其中一个，之前在nuget上看到qiniu的官方SDK引用进来后，会提醒你该sdk是基于.NET Framework版本，那如果部署在IIS下是没问题的，但是如果部署在linux下，那就跑不起来了，基于此，也为了以后方便其他项目的迁移，就捣鼓了一个.NET Core版本的七牛SDK，基于官方最新7.3的版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、修改说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　废话不多说，上代码，啊呸先上链接&lt;a href=&quot;https://github.com/Hello-Mango/MQiniu.Core&quot; target=&quot;_blank&quot;&gt;https://github.com/Hello-Mango/MQiniu.Core&lt;/a&gt;，这是我已经编译好的代码，并且已经上传NUGET（搜索MQiniu.Core，不敢用qiniu.core这个名字，觉得最好还是官方可以出一个）&lt;/p&gt;
&lt;p&gt;　　修改方案其实是非常简单的，官方的sdk源码语法上跟.NET Core其实就是一样的，最终需要修改的是HttpManager.cs文件中将&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
wReq.ServicePoint.Expect100Continue = &lt;span&gt;false&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　修改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ServicePointManager.Expect100Continue = &lt;span&gt;false&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果不修改的话，会出现报错情况，具体啥报错给忘记了，这个也是我后来查找到的解决方案，如果有朋友有更好的解决方案，也麻烦请告知。&lt;/p&gt;
&lt;p&gt;　　以下是引用图：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/465472/201802/465472-20180213213552437-76870299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到使用MQiniu.Core时不会提示已使用.NETFrameWork&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、具体使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;如果大家想自己尝试的话，可以下载官方的SDK源码进行.NET Core的改造，官方sdk源码地址：&lt;a href=&quot;https://github.com/qiniu/csharp-sdk&quot; target=&quot;_blank&quot;&gt;https://github.com/qiniu/csharp-sdk&lt;/a&gt;，或者可以直接Nuget搜索MQiniu.Core&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;具体代码使用方法完全可以参照官方的文档进行，这里就不多说，这边只给出我这边的试验代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; List&amp;lt;Object&amp;gt; UploadQiniu()
        {
            Mac mac &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mac(appSettings.qiniuupload.qiniuyunAK, appSettings.qiniuupload.qiniuyunSK);/AK SK使用
            PutPolicy putPolicy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PutPolicy();
            putPolicy.Scope &lt;/span&gt;=&lt;span&gt; appSettings.qiniuupload.qiniuyunBucket;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; token =&lt;span&gt; Auth.CreateUploadToken(mac, putPolicy.ToJsonString());//token生成
            IFormFileCollection files &lt;/span&gt;=&lt;span&gt; Request.Form.Files;
            Config config &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Config()
            {
                Zone &lt;/span&gt;=&lt;span&gt; Zone.ZONE_CN_East,
                UseHttps &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res =&lt;span&gt; Request.Form.ToArray();
&lt;/span&gt;
            FormUploader upload = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormUploader(config);
            HttpResult result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpResult();
            List&lt;/span&gt;&amp;lt;Object&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Object&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (IFormFile file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; files)//获取多个文件列表集合
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (file.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _fileName =&lt;span&gt; ContentDispositionHeaderValue
                                    .Parse(file.ContentDisposition)
                                    .FileName
                                    .Trim(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _qiniuName = appSettings.qiniuupload.prefixPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMddHHmmssffffff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +&lt;span&gt; _fileName;//重命名文件加上时间戳
                    Stream stream &lt;/span&gt;=&lt;span&gt; file.OpenReadStream();
                    result &lt;/span&gt;= upload.UploadStream(stream, _qiniuName, token, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.Code == &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)
                    {
                        list.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { fileName = _fileName, qiniuName = _qiniuName, uploadTime = DateTime.Now, Remark = res.First(p =&amp;gt; p.Key == _fileName).Value[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] });
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;result.RefText);//上传失败错误信息
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;目前使用下来，qiniu是个非常好的CDN以及对象存储平台，开发测试中的免费使用量也基本都是够够的，但是觉得像.NET Core这种的SDK包最好还是由官方提供，然后后面也许会继续探索性的尝试七牛的容器平台。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;由于这个只是我个人的修改作品，未经过大量的验证，如果大家发现有什么问题的话，也请联系我。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者： Mango&lt;/p&gt;
&lt;p&gt;出处： &lt;a href=&quot;http://www.cnblogs.com/OMango/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/OMango/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于自己：专注.Net桌面开发以及Web后台开发，开始接触微服务、docker等互联网相关&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出, &lt;a href=&quot;http://www.cnblogs.com/OMango/p/8447480.html&quot;&gt;原文链接&lt;/a&gt; 如有问题， 可邮件（hongjb@yizit.com）咨询.&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 13:50:00 +0000</pubDate>
<dc:creator>OMango</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/OMango/p/8447480.html</dc:identifier>
</item>
<item>
<title>Netty（一）：入门篇 - 匠心零度</title>
<link>http://www.cnblogs.com/lirenzuo/p/8447326.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lirenzuo/p/8447326.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;匠心零度 转载请注明原创出处，谢谢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;说在前面&quot;&gt;说在前面&lt;/h3&gt;
&lt;p&gt;上篇文章对Netty进行了初探：&lt;a href=&quot;http://mp.weixin.qq.com/s/m-OHG12f2ZCADgzJazVC4A&quot;&gt;Netty初探&lt;/a&gt;，主要介绍了下我们为什么需要学习netty、netty介绍等；本篇文章接着上篇文章的内容。本篇为了方便大家快速入门、了解实践Netty特性、快速上手一个例子让大家有一个比较直接的认识。&lt;/p&gt;
&lt;h3 id=&quot;主题&quot;&gt;主题&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;版本选择及说明&lt;/li&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;版本选择及说明&quot;&gt;版本选择及说明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;版本的选择&lt;/strong&gt;，这是一个很直接但是又经常需要面对的问题，特别是开源项目的时候，我们在选择版本的时候有很多考虑，比较jdk各个版本选择、zookeeper版本的选择、Tomcat版本选择，Spring系列版本选择等等，后续后空我们可以讨论讨论关于开源这些版本选择以及升级事宜交流，&lt;strong&gt;今天的重点是在netty版本的选择上面。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;netty目前版本说明&quot;&gt;netty目前版本说明&lt;/h5&gt;
&lt;p&gt;目前Netty大版本就分为三个：3.x、4.x、5.x。&lt;br/&gt;我们先看看官网怎么说：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-005fde483bb2e037.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;推荐使用的版本是4.x，那么我们再看看很多使用Netty的一些项目，的确使用的是4.x版本，据了解Dubbo3.x将会将Netty4.0.x升级到4.1.x版本。&lt;/p&gt;
&lt;p&gt;看看官网：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-477bec900fc30d8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;br/&gt;&lt;strong&gt;备注：&lt;/strong&gt;如果是在项目中进行使用那么我们可能会选择4.1.x的比如其他版本，需要考虑稳定性等，一般很少选择最新的，&lt;strong&gt;但是我们是来学习netty，那么我建议就选择最新版本：4.1.21.Final版本。&lt;/strong&gt;，因为当我们学习完了之后，可能已经很久了，21版本估计也稳定了，并且都是4.1x版本，一般仅仅是一些小的改动，就算后面选择新版本学习应该也不是特别困难。&lt;/p&gt;
&lt;h5 id=&quot;netty4.1.x简单介绍&quot;&gt;Netty4.1.x简单介绍&lt;/h5&gt;
&lt;p&gt;建议看官网&lt;strong&gt;New and noteworthy in 4.1&lt;/strong&gt;（&lt;a href=&quot;http://netty.io/wiki/new-and-noteworthy-in-4.1.html&quot; class=&quot;uri&quot;&gt;http://netty.io/wiki/new-and-noteworthy-in-4.1.html&lt;/a&gt;），先了解下有那些大概的变动（不要认为之前没用过，看就没有必要，看看也是它的一些亮点，后续可能要重点学习了解思考的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要改变：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;具体详情记得去官网看看：&lt;a href=&quot;http://netty.io/wiki/new-and-noteworthy-in-4.1.html%EF%BC%8C%E8%BF%99%E6%AC%A1%E5%8F%AF%E4%BB%A5%E5%A4%A7%E6%A6%82%E4%BA%86%E8%A7%A3%E4%B8%8B%EF%BC%8C%E5%90%8E%E7%BB%AD%E6%9C%89%E7%A9%BA%E6%85%A2%E6%85%A2%E7%9C%8B%E7%9C%8B&quot; class=&quot;uri&quot;&gt;http://netty.io/wiki/new-and-noteworthy-in-4.1.html，这次可以大概了解下，后续有空慢慢看看&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;快速入门&quot;&gt;快速入门&lt;/h3&gt;
&lt;p&gt;说了那么多了，我们来一个简单的Demo来简单的感受下Netty。&lt;/p&gt;
&lt;h5 id=&quot;maven构建项目&quot;&gt;maven构建项目&lt;/h5&gt;
&lt;p&gt;新建一个Maven项目，之后去github上面找到netty对应的例子代码：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-94fb0cae75e01980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;br/&gt;放到项目中，代码结构如图：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-1d3221e29308c4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pom.xml中添加如下内容：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.&lt;span class=&quot;fu&quot;&gt;netty&lt;/span&gt;&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;&lt;span class=&quot;fl&quot;&gt;4.1.21&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Final&lt;/span&gt;&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;稍微在原来demo基础上面修改了点东西，解决半包、黏包问题（后续详细介绍）&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-5e987e07b763a563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;以及发送内容等信息。&lt;/p&gt;
&lt;p&gt;我已经把代码提交到github上面去了，需要的小伙伴可以直接下载：&lt;a href=&quot;https://github.com/lirenzuo/nettydemo&quot; class=&quot;uri&quot;&gt;https://github.com/lirenzuo/nettydemo&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;运行效果截图&quot;&gt;运行效果截图&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-e800e1613aada2dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-a4d9f5d10d159e59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以与使用nio写的代码进行对比，&lt;a href=&quot;http://mp.weixin.qq.com/s/KN7ANdJBLidlKBs6fGCutQ&quot;&gt;NIO相关基础篇二&lt;/a&gt;，发现用Netty写一个TCP原来这么简单，都封装好了。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;使用Netty可以非常方便、快速的搭建网络开发环境，使得我们不用关心一些例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等的问题，所以使用Netty进行网络开发是非常合适的，&lt;strong&gt;本篇只是一个入门，后续有了Demo可以跑起来的时候，进行断点啥的也好进行学习了。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;如果读完觉得有收获的话，欢迎点赞、关注、加公众号【匠心零度】，查阅更多精彩历史！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-4d7901dbb854ad29.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 12:23:00 +0000</pubDate>
<dc:creator>匠心零度</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lirenzuo/p/8447326.html</dc:identifier>
</item>
<item>
<title>Linux内存机制以及手动释放swap和内存 - 飞天小子</title>
<link>http://www.cnblogs.com/Zfc-Cjk/p/8447270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Zfc-Cjk/p/8447270.html</guid>
<description>&lt;p&gt;今天我们来谈谈Linux的内存机制。&lt;/p&gt;
&lt;p&gt;首先我们理一下概念&lt;/p&gt;
&lt;p&gt;一、什么是linux的内存机制？&lt;/p&gt;
&lt;p&gt;我们知道，直接从物理内存读写数据要比从硬盘读写数据要快的多，因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，这样就引出了物理内存与虚拟内存的概念。&lt;/p&gt;&lt;p&gt;物理内存就是系统硬件提供的内存大小，是真正的内存，相对于物理内存，在linux下还有一个虚拟内存的概念，虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空间（Swap Space）。&lt;/p&gt;&lt;p&gt;作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。&lt;/p&gt;&lt;p&gt;Linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。&lt;/p&gt;
&lt;p&gt;要深入了解linux内存运行机制，需要知道下面提到的几个方面：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内存页面。这可以避免等待交换所需的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经常使用的页面文件交换到虚拟 内存，有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多。其实，这并不奇怪，例如，一个占用很大内存的进程运行时，需 要耗费很多内存资源，此时就会有一些不常用页面文件被交换到虚拟内存中，但后来这个占用很多内存资源的进程结束并释放了很多内存时，刚才被交换出去的页面 文件并不会自动的交换进物理内存，除非有这个必要，那么此刻系统物理内存就会空闲很多，同时交换空间也在被使用，就出现了刚才所说的现象了。关于这点，不 用担心什么，只要知道是怎么一回事就可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;交换空间的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内存来容纳这些页 面，它们又会被马上交换出去，如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假死机、服务异常等问题，linux虽 然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因此，合理规划和设计Linux内存的使用，是非常重要的.&lt;/p&gt;
&lt;p&gt;在Linux 操作系统中，当应用程序需要读取文件中的数据时，操作系统先分配一些内存，将数据从磁盘读入到这些内存中，然后再将数据分发给应用程序；当需要往文件中写 数据时，操作系统先分配内存接收用户数据，然后再将数据从内存写到磁盘上。然而，如果有大量数据需要从磁盘读取到内存或者由内存写入磁盘时，系统的读写性 能就变得非常低下，因为无论是从磁盘读数据，还是写数据到磁盘，都是一个很消耗时间和资源的过程，在这种情况下，Linux引入了buffers和 cached机制。&lt;/p&gt;&lt;p&gt;buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会首先在buffers 与cached内存区查找，如果找到，直接读出传送给应用程序，如果没有找到需要数据，才从磁盘读取，这就是操作系统的缓存机制，通过缓存，大大提高了操 作系统的性能。但buffers与cached缓冲的内容却是不同的。&lt;/p&gt;&lt;p&gt;buffers是用来缓冲块设备做的，它只记录文件系统的元数据（metadata）以及 tracking in-flight pages，而cached是用来给文件做缓冲。更通俗一点说：buffers主要用来存放目录里面有什么内容，文件的属性以及权限等等。而cached直接用来记忆我们打开过的文件和程序。&lt;/p&gt;
&lt;p&gt;为了验证我们的结论是否正确，可以通过vi打开一个非常大的文件，看看cached的变化，然后再次vi这个文件，感觉一下两次打开的速度有何异同，是不是第二次打开的速度明显快于第一次呢？&lt;br data-filtered=&quot;filtered&quot;/&gt;
接着执行下面的命令：&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-bsh prettyprinted&quot;&gt;
find /* -name  *.conf
&lt;/pre&gt;
&lt;p&gt;看看buffers的值是否变化，然后重复执行find命令，看看两次显示速度有何不同。&lt;/p&gt;


&lt;p&gt;二、linux什么时候开始使用虚拟内存（swap)？&lt;/p&gt;
&lt;p&gt;A.[root@wenwen ~]# cat /proc/sys/vm/swappiness&lt;/p&gt;
&lt;p&gt;60&lt;/p&gt;
&lt;p&gt;上面这个60代表物理内存在使用60%的时候才会使用swap&lt;/p&gt;
&lt;p&gt;swappiness=0的时候表示最大限度使用物理内存，然后才是 swap空间，&lt;/p&gt;
&lt;p&gt;swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。&lt;/p&gt;
&lt;p&gt;通常情况下：&lt;/p&gt;
&lt;p&gt;swap分区设置建议是内存的两倍 （内存小于等于4G时），如果内存大于4G，swap只要比内存大就行。另外尽量的将swappiness调低，这样系统的性能会更好。&lt;/p&gt;
&lt;p&gt;B.修改swappiness参数&lt;/p&gt;
&lt;p&gt;临时性修改：&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# sysctl vm.swappiness=10&lt;/p&gt;
&lt;p&gt;vm.swappiness = 10&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# cat /proc/sys/vm/swappiness                 &lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;

&lt;p&gt;永久性修改：&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# vim /etc/sysctl.conf&lt;/p&gt;
&lt;p&gt;加入参数：&lt;/p&gt;
&lt;p&gt;vm.swappiness = 35&lt;/p&gt;
&lt;p&gt;然后在直接：&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# sysctl -p&lt;/p&gt;
&lt;p&gt;查看是否生效：&lt;/p&gt;
&lt;p&gt;cat /proc/sys/vm/swappiness&lt;/p&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;p&gt;&lt;span data-filtered=&quot;filtered&quot;&gt; &lt;/span&gt;&lt;/p&gt;


&lt;p&gt;三、怎么释放内存？&lt;/p&gt;
&lt;p&gt;一般系统是不会自动释放内存的&lt;/p&gt;
&lt;p&gt;关键的&lt;a href=&quot;http://blog.51cto.com/9237101/***r_s/&quot;&gt;配置&lt;/a&gt;文件/proc/sys/vm/drop_caches。这个文件中记录了缓存释放的参数，默认值为0，也就是不释放缓存。他的值可以为0~3之间的任意数字，代表着不同的含义：&lt;/p&gt;
&lt;p&gt;0 – 不释放&lt;br data-filtered=&quot;filtered&quot;/&gt;
1 – 释放页缓存&lt;br data-filtered=&quot;filtered&quot;/&gt;
2 – 释放dentries和inodes&lt;br data-filtered=&quot;filtered&quot;/&gt;
3 – 释放所有缓存&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://s4.51cto.com/wyfs02/M02/93/28/wKiom1kIfqfCWjMwAABa_PWXhZ8253.png-wh_500x0-wm_3-wmp_4-s_3766427302.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;z.png&quot; src=&quot;https://s4.51cto.com/wyfs02/M02/93/28/wKiom1kIfqfCWjMwAABa_PWXhZ8253.png-wh_500x0-wm_3-wmp_4-s_3766427302.png&quot; alt=&quot;wKiom1kIfqfCWjMwAABa_PWXhZ8253.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很明显多出来很多空闲的内存了吧&lt;/p&gt;


&lt;p&gt;四、怎么释放swap？&lt;/p&gt;
&lt;p&gt;前提：首先要保证内存剩余要大于等于swap使用量，否则会宕机！根据内存机制，swap分区一旦释放，所有存放在swap分区的文件都会转存到物理内存上。通常通过重新挂载swap分区完成释放swap。&lt;/p&gt;
&lt;p&gt;a.查看当前swap分区挂载在哪？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s2.51cto.com/wyfs02/M02/93/27/wKioL1kIg_-QgRPNAAAc0YY8hDs713.png-wh_500x0-wm_3-wmp_4-s_3406965261.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;c.png&quot; src=&quot;https://s2.51cto.com/wyfs02/M02/93/27/wKioL1kIg_-QgRPNAAAc0YY8hDs713.png-wh_500x0-wm_3-wmp_4-s_3406965261.png&quot; alt=&quot;wKioL1kIg_-QgRPNAAAc0YY8hDs713.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;b.关停这个分区&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s4.51cto.com/wyfs02/M01/93/29/wKiom1kIhCjzKPz0AAAJ4nqUEqM343.png-wh_500x0-wm_3-wmp_4-s_3264097685.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;d.png&quot; src=&quot;https://s4.51cto.com/wyfs02/M01/93/29/wKiom1kIhCjzKPz0AAAJ4nqUEqM343.png-wh_500x0-wm_3-wmp_4-s_3264097685.png&quot; alt=&quot;wKiom1kIhCjzKPz0AAAJ4nqUEqM343.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;c.查看状态：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s5.51cto.com/wyfs02/M00/93/27/wKioL1kIhEuQnJNsAAARrgqCj1I720.png-wh_500x0-wm_3-wmp_4-s_1232276929.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;e.png&quot; src=&quot;https://s5.51cto.com/wyfs02/M00/93/27/wKioL1kIhEuQnJNsAAARrgqCj1I720.png-wh_500x0-wm_3-wmp_4-s_1232276929.png&quot; alt=&quot;wKioL1kIhEuQnJNsAAARrgqCj1I720.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;d.查看swap分区是否关停，最下面一行显示全0&lt;a href=&quot;https://s4.51cto.com/wyfs02/M00/93/27/wKioL1kIhGPAeVG_AAAmRTAqcso981.png-wh_500x0-wm_3-wmp_4-s_364449478.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;f.png&quot; src=&quot;https://s4.51cto.com/wyfs02/M00/93/27/wKioL1kIhGPAeVG_AAAmRTAqcso981.png-wh_500x0-wm_3-wmp_4-s_364449478.png&quot; alt=&quot;wKioL1kIhGPAeVG_AAAmRTAqcso981.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e.将swap挂载到/dev/sda5上&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s3.51cto.com/wyfs02/M00/93/29/wKiom1kIhL-DWuyLAAAJq9dwCWk401.png-wh_500x0-wm_3-wmp_4-s_1562435597.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;g.png&quot; src=&quot;https://s3.51cto.com/wyfs02/M00/93/29/wKiom1kIhL-DWuyLAAAJq9dwCWk401.png-wh_500x0-wm_3-wmp_4-s_1562435597.png&quot; alt=&quot;wKiom1kIhL-DWuyLAAAJq9dwCWk401.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;f.查看挂载是否成功&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s5.51cto.com/wyfs02/M01/93/27/wKioL1kIhJKAttdNAAAbWQ1IwjE929.png-wh_500x0-wm_3-wmp_4-s_4130644756.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;h.png&quot; src=&quot;https://s5.51cto.com/wyfs02/M01/93/27/wKioL1kIhJKAttdNAAAbWQ1IwjE929.png-wh_500x0-wm_3-wmp_4-s_4130644756.png&quot; alt=&quot;wKioL1kIhJKAttdNAAAbWQ1IwjE929.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;五、一些实际的小例子？&lt;/p&gt;
&lt;p&gt;我在设置mysql的时候，将&lt;/p&gt;
&lt;p&gt;my.cnf文件&lt;/p&gt;
&lt;p&gt;innodb_buffer_pool_size = 6G（我操作系统的内存就是6G，一般这个值设置为操作系统内存的80%）&lt;/p&gt;
&lt;p&gt;这个值并不是设置的越大越好。设置的过大，会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率。&lt;/p&gt;
&lt;p&gt;这里你可以这么理解，当我将这个buffer_pool_size设置得过大，跟操作系统内存一样大的时候，我使用mysql,会在一段时间内调用大量的数据进内存，由于linux的内存机制，再根据最近最优的原则，将一部分数据筛选放入swap分区，而swap分区没有及时的清理掉数据，当再次调用其它数据的时候，又会将一部分数据筛选放入swap分区，可能会出现一个现象，就是物理内存还有剩余，甚至是空的，而swap分区却是满的。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 11:36:00 +0000</pubDate>
<dc:creator>飞天小子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Zfc-Cjk/p/8447270.html</dc:identifier>
</item>
</channel>
</rss>