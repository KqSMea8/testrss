<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>SSE图像算法优化系列十七：多个图像处理中常用函数的SSE实现。 - Imageshop</title>
<link>http://www.cnblogs.com/Imageshop/p/8469208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Imageshop/p/8469208.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　在做图像处理的SSE优化时，也会经常遇到一些小的过程、数值优化等代码，本文分享一些个人收藏或实现的代码片段给大家。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、快速求对数运算&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对数运算在图像处理中也是个经常会遇到的过程，特备是在一些数据压缩和空间转换时常常会用到，而且是个比较耗时的函数，标准的SSE库里并没有提供该函数的实现，如果需要高精度的SSE版本，网络上已经有了，参考：&lt;a href=&quot;https://github.com/to-miz/sse_mathfun_extension/blob/master/sse_mathfun.h&quot; target=&quot;_blank&quot;&gt;https://github.com/to-miz/sse_mathfun_extension/blob/master/sse_mathfun.h&lt;/a&gt;，这个的精度和标准库的精度基本一致了，稍作整理后的代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;126&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    对数函数的SSE实现，高精度版
inline __m128 _mm_log_ps(__m128 x)
{
    static const __declspec(align(16)) int _ps_min_norm_pos[4] = { 0x00800000, 0x00800000, 0x00800000, 0x00800000 };
    static const __declspec(align(16)) int _ps_inv_mant_mask[4] = { ~0x7f800000, ~0x7f800000, ~0x7f800000, ~0x7f800000 };
    static const __declspec(align(16)) int _pi32_0x7f[4] = { 0x7f, 0x7f, 0x7f, 0x7f };
    static const __declspec(align(16)) float _ps_1[4] = { 1.0f, 1.0f, 1.0f, 1.0f };
    static const __declspec(align(16)) float _ps_0p5[4] = { 0.5f, 0.5f, 0.5f, 0.5f };
    static const __declspec(align(16)) float _ps_sqrthf[4] = { 0.707106781186547524f, 0.707106781186547524f, 0.707106781186547524f, 0.707106781186547524f };
    static const __declspec(align(16)) float _ps_log_p0[4] = { 7.0376836292E-2f, 7.0376836292E-2f, 7.0376836292E-2f, 7.0376836292E-2f };
    static const __declspec(align(16)) float _ps_log_p1[4] = { -1.1514610310E-1f, -1.1514610310E-1f, -1.1514610310E-1f, -1.1514610310E-1f };
    static const __declspec(align(16)) float _ps_log_p2[4] = { 1.1676998740E-1f, 1.1676998740E-1f, 1.1676998740E-1f, 1.1676998740E-1f };
    static const __declspec(align(16)) float _ps_log_p3[4] = { -1.2420140846E-1f, -1.2420140846E-1f, -1.2420140846E-1f, -1.2420140846E-1f };
    static const __declspec(align(16)) float _ps_log_p4[4] = { 1.4249322787E-1f, 1.4249322787E-1f, 1.4249322787E-1f, 1.4249322787E-1f };
    static const __declspec(align(16)) float _ps_log_p5[4] = { -1.6668057665E-1f, -1.6668057665E-1f, -1.6668057665E-1f, -1.6668057665E-1f };
    static const __declspec(align(16)) float _ps_log_p6[4] = { 2.0000714765E-1f, 2.0000714765E-1f, 2.0000714765E-1f, 2.0000714765E-1f };
    static const __declspec(align(16)) float _ps_log_p7[4] = { -2.4999993993E-1f, -2.4999993993E-1f, -2.4999993993E-1f, -2.4999993993E-1f };
    static const __declspec(align(16)) float _ps_log_p8[4] = { 3.3333331174E-1f, 3.3333331174E-1f, 3.3333331174E-1f, 3.3333331174E-1f };
    static const __declspec(align(16)) float _ps_log_q1[4] = { -2.12194440e-4f, -2.12194440e-4f, -2.12194440e-4f, -2.12194440e-4f };
    static const __declspec(align(16)) float _ps_log_q2[4] = { 0.693359375f, 0.693359375f, 0.693359375f, 0.693359375f };

    __m128 one = *(__m128*)_ps_1;
    __m128 invalid_mask = _mm_cmple_ps(x, _mm_setzero_ps());
    /* cut off denormalized stuff */
    x = _mm_max_ps(x, *(__m128*)_ps_min_norm_pos);
    __m128i emm0 = _mm_srli_epi32(_mm_castps_si128(x), 23);

    /* keep only the fractional part */
    x = _mm_and_ps(x, *(__m128*)_ps_inv_mant_mask);
    x = _mm_or_ps(x, _mm_set1_ps(0.5f));

    emm0 = _mm_sub_epi32(emm0, *(__m128i *)_pi32_0x7f);
    __m128 e = _mm_cvtepi32_ps(emm0);
    e = _mm_add_ps(e, one);

    __m128 mask = _mm_cmplt_ps(x, *(__m128*)_ps_sqrthf);
    __m128 tmp = _mm_and_ps(x, mask);
    x = _mm_sub_ps(x, one);
    e = _mm_sub_ps(e, _mm_and_ps(one, mask));
    x = _mm_add_ps(x, tmp);

    __m128 z = _mm_mul_ps(x, x);
    __m128 y = *(__m128*)_ps_log_p0;
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p1);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p2);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p3);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p4);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p5);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p6);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p7);
    y = _mm_mul_ps(y, x);
    y = _mm_add_ps(y, *(__m128*)_ps_log_p8);
    y = _mm_mul_ps(y, x);

    y = _mm_mul_ps(y, z);
    tmp = _mm_mul_ps(e, *(__m128*)_ps_log_q1);
    y = _mm_add_ps(y, tmp);
    tmp = _mm_mul_ps(z, *(__m128*)_ps_0p5);
    y = _mm_sub_ps(y, tmp);
    tmp = _mm_mul_ps(e, *(__m128*)_ps_log_q2);
    x = _mm_add_ps(x, y);
    x = _mm_add_ps(x, tmp);
    x = _mm_or_ps(x, invalid_mask); // negative arg will be NAN

    return x;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　看上去有一大堆代码，不过实测这个的速度越是标准库（&lt;strong&gt;本文是指启动增强指令集选项设置为：未设置，设计上编译器在此种情况下会自动设置为SSE2增强，这可以从反编译logf函数看到，因此，这里的速度比较还不是和纯Fpu实现的比较&lt;/strong&gt;）的2倍，如果稍微降低点精度，比如_ps_log_p5到_ps_log_p8之间的代码，还能提高点速度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外，在很多场合我们还可以使用另外一种低精度的log函数，其C代码如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//https://stackoverflow.com/questions/9411823/fast-log2float-x-implementation-c
inline float IM_Flog(float val)
{
    union
    {
        float val;
        int x;
    } u = { val };
    float log_2 = (float)(((u.x &amp;gt;&amp;gt; 23) &amp;amp; 255) - 128);
    u.x &amp;amp;= ~(255 &amp;lt;&amp;lt; 23);
    u.x += (127 &amp;lt;&amp;lt; 23);
    log_2 += ((-0.34484843f) * u.val + 2.02466578f) * u.val - 0.67487759f;
    return log_2 * 0.69314718f;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个函数大概有小数点后2位精度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上述代码大约也是标准函数的2倍速度左右。但是上述函数是可以向量化的，我们来尝试实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们首先来看联合体，其实这个东西就是两个东西占同一个内存空间，然后外部用不同的规则去读取他，在SSE里，有着丰富的cast函数，他也是干这个事情的，比如这里的联合体就可以用_mm_castps_si128来转换，而实际上这个Intrinsic并不会产生任何的汇编语句。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么后面的那些移位、或运算、非运算、加减乘除之类的就是直接翻译了，毫无难处，完整的代码如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;inline __m128 _mm_flog_ps(__m128 x)
{
    __m128i I = _mm_castps_si128(x);
    __m128 log_2 = _mm_cvtepi32_ps(_mm_sub_epi32(_mm_and_si128(_mm_srli_epi32(I, 23), _mm_set1_epi32(255)), _mm_set1_epi32(128)));
    I = _mm_and_si128(I, _mm_set1_epi32(-2139095041));        //    255 &amp;lt;&amp;lt; 23
    I = _mm_add_epi32(I, _mm_set1_epi32(1065353216));        //    127 &amp;lt;&amp;lt; 23
    __m128 F = _mm_castsi128_ps(I);
    __m128 T = _mm_add_ps(_mm_mul_ps(_mm_set1_ps(-0.34484843f), F), _mm_set1_ps(2.02466578f));
    T = _mm_sub_ps(_mm_mul_ps(T, F), _mm_set1_ps(0.67487759f));
    return _mm_mul_ps(_mm_add_ps(log_2, T), _mm_set1_ps(0.69314718f));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　经过实测，这个速度可以达到标准库的7到8倍的优势。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、快速求幂运算&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一般图像编程中有log出现的地方就会有exp出现，因此exp的优化也尤为重要，同样在&lt;a href=&quot;https://github.com/to-miz/sse_mathfun_extension/blob/master/sse_mathfun.h&quot; target=&quot;_blank&quot;&gt;sse_mathfun.h&lt;/a&gt;中也有exp的优化（还有sin,cos的SSE优化语句呢），我这里就不贴那个的代码了，我们同样关注下用联合体实现的近似快速算法，其C代码如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;inline float IM_Fexp(float Y)            
{
    union
    {
        double Value;
        int X[2];
    } V;
    V.X[1] = (int)(Y * 1512775 + 1072632447 + 0.5F);
    V.X[0] = 0;
    return (float)V.Value;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　测试这个和标准的exp库函数速度居然差不多，不晓得为啥，但我们来试下他的SSE优化版本了。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　V.X[1] = (int)(Y * 1512775 + 1072632447 + 0.5F);这句话没啥难度，直接翻译就可以了，注意几个强制类型转化就可以了，如下所示：&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__m128i T = _mm_cvtps_epi32(_mm_add_ps(_mm_mul_ps(Y, _mm_set1_ps(1512775)), _mm_set1_ps(1072632447)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由于我们想一次性处理4个float类型的数据，因此也就需要4个union的空间，这样就需要2个__m128i变量来保存数据，每个XMM寄存器的数据应该分别为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　T1    0    T0    0         +     T3   0    T2    0 　　　　（高位----》低位）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个可以使用unpack来实现，具体如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    __m128i TL = _mm_unpacklo_epi32(_mm_setzero_si128(), T);
    __m128i TH = _mm_unpackhi_epi32(_mm_setzero_si128(), T);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　最后我们认为__m128i里的数据是double数据，直接一个cast就可以了，然后因为我们只需要单精度的数据，再使用_mm_cvtpd_ps将double转换为float类型，注意这个时候还需要将他们连接再一起形成一个完整的__m128变量，最终的代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;inline __m128 _mm_fexp_ps(__m128 Y)
{
    __m128i T = _mm_cvtps_epi32(_mm_add_ps(_mm_mul_ps(Y, _mm_set1_ps(1512775)), _mm_set1_ps(1072632447)));
    __m128i TL = _mm_unpacklo_epi32(_mm_setzero_si128(), T);
    __m128i TH = _mm_unpackhi_epi32(_mm_setzero_si128(), T);
    return _mm_movelh_ps(_mm_cvtpd_ps(_mm_castsi128_pd(TL)), _mm_cvtpd_ps(_mm_castsi128_pd(TH)));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　实测这个的提速大概有10倍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果要求double的exp，其SSE代码你会了吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、pow函数的优化。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一种常用的近似算法如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;inline float IM_Fpow(float a, float b) 
{
    union
    {
        double Value;
        int X[2];
    } V;
    V.X[1] = (int)(b * (V.X[1] - 1072632447) + 1072632447);
    V.X[0] = 0;
    return (float)V.Value;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　和exp很类似，留给有兴趣的人自己实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四：两个求倒数函数的优化误区&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　SSE提供了连个快速求倒数的函数，_mm_rcp_ps，_mm_rsqrt_ps，他们都是近似值，只有12bit的精度，如果想通过他们得到精确的倒数值，需要牛顿 - 拉弗森方法，比如利用_mm_rcp_ps求精确倒数的代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__forceinline __m128 _mm_prcp_ps(__m128 a)
{
    __m128 rcp = _mm_rcp_ps(a);            //    此函数只有12bit的精度.                    
    return _mm_sub_ps(_mm_add_ps(rcp, rcp), _mm_mul_ps(a, _mm_mul_ps(rcp, rcp)));    //    x1 = x0 * (2 - d * x0) = 2 * x0 - d * x0 * x0，使用牛顿 - 拉弗森方法这种方法可以提高精度到23bit
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　但是实测这个还不如直接用_mm_div_ps的速度，即使是下面的函数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__forceinline __m128 _mm_fdiv_ps(__m128 a, __m128 b)
{
    return _mm_mul_ps(a, _mm_rcp_ps(b));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　似乎速度也不够好，而且精度还低了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　特别低，如果使用_mm_rcp_ps和_mm_rsqrt_ps联合求近似sqrt，即如下代码，速度好像还慢了，真搞不明白为什么。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__forceinline __m128 _mm_fsqrt_ps(__m128 a)
{
    return _mm_rcp_ps(_mm_rsqrt_ps(a));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五：避免除数为0时的获得无效效果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在SSE指令中，没有提供整数的除法指令，不知道这是为什么，所以整数除法一般只能借用浮点版本的指令，同时，除法存在的一个问题就是如果除数为0，可能会触发异常，不过SSE在这种情况下不会抛出异常，但是我们应该避免，避免的方式有很多，比如判断如果除数为0，就做特殊处理，或者如果除数为0就除以一个很小的数，不过大部分的需求是，除数为0，则返回0，此时就可以使用下面的SSE指令代替_mm_div_ps:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    四个浮点数的除法a/b，如果b中某个分量为0，则对应位置返回0值
inline __m128 _mm_divz_ps(__m128 a, __m128 b)
{
    __m128 Mask = _mm_cmpeq_ps(b, _mm_setzero_ps());
    return _mm_blendv_ps(_mm_div_ps(a, b), _mm_setzero_ps(), Mask);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　即先把除数和0进行比较，然后在把_mm_div_ps的返回值中，除数为0的部分用0代替，当然，这会带来一定的性能下降。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　实际上，利用位运算，上述代码还可以稍作优化如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;inline __m128 _mm_divz_ps(__m128 a, __m128 b)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _mm_and_ps(_mm_div_ps(a, b), _mm_cmpneq_ps(b, _mm_setzero_ps()));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;六、将4个32位整数转换为字节数并保存&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很多情况下，我们的算法计算需要将字节类型扩展到32位，计算完成后再保存的字节数据中，这个时候使用SSE的话是没有直接的指令的，不过SSE4提供了一条_mm_cvtsi128_si32指令，可以将XMM寄存器的4个int32数据转换为4个字节数据并保存到一个普通的寄存器中，因此，我们只要调用几个合适的pack语句就可以实现这个功能了，如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    将4个32位整形变量数据打包到4个字节数据中
inline void _mm_storesi128_4char(unsigned char *Dest, __m128i P)
{
    __m128i T = _mm_packs_epi32(P, P);
    *((int *)Dest) = _mm_cvtsi128_si32(_mm_packus_epi16(T, T));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;七、读取12个字节数到一个XMM寄存器中&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　XMM寄存器是16个字节大小的，而且SSE的很多计算是以4的整数倍字节位单位进行的，但是在图像处理中，70%情况下处理的是彩色的24位图像，即一个像素占用3个字节，如果直接使用load指令载入数据，一次性可载入5加1/3个像素，这对算法的处理是很不方便的，一般状况下都是加载4个像素，即12个字节，然后扩展成16个字节（给每个像素增加一个Alpha值），我们当然可以直接使用load加载16个字节，然后每次跳过12个字节在进行load加载，但是其实也可以使用下面的加载12个字节的函数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    从指针p处加载12个字节数据到XMM寄存器中，寄存器最高32位清0
inline __m128i _mm_loadu_epi96(const __m128i * p)
{
    return _mm_unpacklo_epi64(_mm_loadl_epi64(p), _mm_cvtsi32_si128(((int *)p)[2]));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　保存当然也可以只保存XMM的低12位：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//     将寄存器Q的低位12个字节数据写入到指针P中。
inline void _mm_storeu_epi96(__m128i *P, __m128i Q)
{
    _mm_storel_epi64(P, Q);
    ((int *)P)[2] = _mm_cvtsi128_si32(_mm_srli_si128(Q, 8));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　不过实际测试，可能还是直接使用_mm_loadu_si128和_mm_storeu_si128快点，但是要注意循环的结束为止。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;八、整除255&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　整除255在图像处理是非常非常常见的操作，前面说了，SSE里没有整数除法的指令，如果转换到浮点在除那就慢的死了，一般情况下如果要求精度不高可以使用右移8位实现，如果非要精确值可以使用如下的C代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    计算整数整除255的四舍五入结果。
inline int IM_Div255(int V)
{
    return (((V &amp;gt;&amp;gt; 8) + V + 1) &amp;gt;&amp;gt; 8);        //    似乎V可以是负数
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　翻译为SSE为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    返回16位无符号整形数据整除255后四舍五入的结果： x = ((x + 1) + (x &amp;gt;&amp;gt; 8)) &amp;gt;&amp;gt; 8:
inline __m128i _mm_div255_epu16(__m128i x)
{
    return _mm_srli_epi16(_mm_adds_epu16(_mm_adds_epu16(x, _mm_set1_epi16(1)), _mm_srli_epi16(x, 8)), 8);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;九、求XMM寄存器内所有元素的累加值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这也是个常见的需求，我们可能把某个结果重复的结果保存在寄存器中，最后结束时在把寄存器中的每个元素想加，你当然可以通过访问__m128i变量的内部的元素实现，但是据说这样会降低循环内的优化，一种方式是直接用SSE指令实现，比如对8个有符号的short类型的相加代码如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    8个有符号的16位的数据相加的和。
//    https://stackoverflow.com/questions/31382209/computing-the-inner-product-of-vectors-with-allowed-scalar-values-0-1-and-2-usi/31382878#31382878
inline int _mm_hsum_epi16(__m128i V)                            //    V7 V6 V5 V4 V3 V2 V1 V0
{
    //    V = _mm_unpacklo_epi16(_mm_hadd_epi16(V, _mm_setzero_si128()), _mm_setzero_si128());    也可以用这句，_mm_hadd_epi16似乎对计算结果超出32768能获得正确结果
    __m128i T = _mm_madd_epi16(V, _mm_set1_epi16(1));   //    V7+V6                        V5+V4            V3+V2    V1+V0
    T = _mm_add_epi32(T, _mm_srli_si128(T, 8));            //    V7+V6+V3+V2                    V5+V4+V1+V0        0        0        
    T = _mm_add_epi32(T, _mm_srli_si128(T, 4));            //    V7+V6+V3+V2+V5+V4+V1+V0        V5+V4+V1+V0        0        0    
    return _mm_cvtsi128_si32(T);                        //    提取低位    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　对于epi32或者ps类型也是使用类似的过程的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;10、求16个字节的最小值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　比如我们要求一个字节序列的最小值，我们肯定会使用_mm_min_epi8这样的函数保存每隔16个字节的最小值，这样最终我们得到16个字节的一个XMM寄存器，整个序列的最小值肯定在这个16个字节里面，这个时候我们可以巧妙的借用下面的SSE语句得到这16个字节的最小值：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    求16个字节数据的最小值, 只能针对字节数据。
inline int _mm_hmin_epu8(__m128i a)
{
    __m128i L = _mm_unpacklo_epi8(a, _mm_setzero_si128());
    __m128i H = _mm_unpackhi_epi8(a, _mm_setzero_si128());
    return _mm_extract_epi16(_mm_min_epu16(_mm_minpos_epu16(L), _mm_minpos_epu16(H)), 0);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SSE3提供了_mm_minpos_epu16函数，他能获取8个无符号数的的最小值及其最小值的索引，放置在寄存器的低16和低32位，我们把字节数据扩展到16位，然后在通过两次比较就可以获得相应的最小值了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那如果是求最大值呢，可惜SSE没有提供_mm_maxpos_epu16函数，但是也无妨，稍微修改下上面的代码就可以了，如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//    求16个字节数据的最大值, 只能针对字节数据。
inline int _mm_hmax_epu8(__m128i a)
{
    __m128i b = _mm_subs_epu8(_mm_set1_epi8(255), a);
    __m128i L = _mm_unpacklo_epi8(b, _mm_setzero_si128());
    __m128i H = _mm_unpackhi_epi8(b, _mm_setzero_si128());
    return 255 - _mm_extract_epi16(_mm_min_epu16(_mm_minpos_epu16(L), _mm_minpos_epu16(H)), 0);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十一、其他一些优化技巧&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在&lt;a href=&quot;http://www.alfredklomp.com/programming/sse-intrinsics/%20&quot; target=&quot;_blank&quot;&gt;http://www.alfredklomp.com/programming/sse-intrinsics/ &lt;/a&gt;以及 &lt;a href=&quot;http://www.itkeyword.com/doc/0326039046115117x827/c++-sse2-intrinsics-comparing-unsigned-integers&quot; target=&quot;_blank&quot;&gt;http://www.itkeyword.com/doc/0326039046115117x827/c++-sse2-intrinsics-comparing-unsigned-integers&lt;/a&gt;等网站上还有很多参考的资料，希望大家自己去学习下。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 05:34:00 +0000</pubDate>
<dc:creator>Imageshop</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Imageshop/p/8469208.html</dc:identifier>
</item>
<item>
<title>模拟退火算法从原理到实战【基础篇】 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/8468831.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/8468831.html</guid>
<description>&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　模拟退火算法来源于固体退火原理，将固体加温至充分高，再让其徐徐冷却，加温时，固体内部粒子随温升变为无序状，内能增大，而徐徐冷却时粒子渐趋有序，在每个温度都达到平衡态，最后在常温时达到基态，内能减为最小。根据&lt;span lang=&quot;EN-US&quot;&gt;Metropolis准则，粒子在温度&lt;span lang=&quot;EN-US&quot;&gt;T时趋于平衡的概率为&lt;span lang=&quot;EN-US&quot;&gt;e-ΔE/(kT)，其中&lt;span lang=&quot;EN-US&quot;&gt;E为温度&lt;span lang=&quot;EN-US&quot;&gt;T时的内能，&lt;span lang=&quot;EN-US&quot;&gt;ΔE为其改变量，&lt;span lang=&quot;EN-US&quot;&gt;k为&lt;span lang=&quot;EN-US&quot;&gt;Boltzmann常数。用固体退火模拟组合优化问题，将内能&lt;span lang=&quot;EN-US&quot;&gt;E模拟为目标函数值&lt;span lang=&quot;EN-US&quot;&gt;f，温度&lt;span lang=&quot;EN-US&quot;&gt;T演化成控制参数&lt;span lang=&quot;EN-US&quot;&gt;t，即得到解组合优化问题的模拟退火算法：由初始解&lt;span lang=&quot;EN-US&quot;&gt;i和控制参数初值&lt;span lang=&quot;EN-US&quot;&gt;t开始，对当前解重复&lt;span lang=&quot;EN-US&quot;&gt;“产生新解&lt;span lang=&quot;EN-US&quot;&gt;→计算目标函数差&lt;span lang=&quot;EN-US&quot;&gt;→接受或舍弃&lt;span lang=&quot;EN-US&quot;&gt;”的迭代，并逐步衰减&lt;span lang=&quot;EN-US&quot;&gt;t值，算法终止时的当前解即为所得近似最优解，这是基于蒙特卡罗迭代求解法的一种启发式随机搜索过程。退火过程由冷却进度表&lt;span lang=&quot;EN-US&quot;&gt;(Cooling Schedule)控制，包括控制参数的初值&lt;span lang=&quot;EN-US&quot;&gt;t及其衰减因子&lt;span lang=&quot;EN-US&quot;&gt;Δt、每个&lt;span lang=&quot;EN-US&quot;&gt;t值时的迭代次数&lt;span lang=&quot;EN-US&quot;&gt;L和停止条件&lt;span lang=&quot;EN-US&quot;&gt;S。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;模拟退火算法的模型 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;模拟退火算法可以分解为解空间、目标函数和初始解三部分。 &lt;span lang=&quot;EN-US&quot;&gt;　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;模拟退火的基本思想&lt;span lang=&quot;EN-US&quot;&gt;: 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(1) 初始化：初始温度&lt;span lang=&quot;EN-US&quot;&gt;T(充分大&lt;span lang=&quot;EN-US&quot;&gt;)，初始解状态&lt;span lang=&quot;EN-US&quot;&gt;S(是算法迭代的起点&lt;span lang=&quot;EN-US&quot;&gt;)， 每个&lt;span lang=&quot;EN-US&quot;&gt;T值的迭代次数&lt;span lang=&quot;EN-US&quot;&gt;L 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(2) 对&lt;span lang=&quot;EN-US&quot;&gt;k=1，&lt;span lang=&quot;EN-US&quot;&gt;……，&lt;span lang=&quot;EN-US&quot;&gt;L做第&lt;span lang=&quot;EN-US&quot;&gt;(3)至第&lt;span lang=&quot;EN-US&quot;&gt;6步： &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(3) 产生新解&lt;span lang=&quot;EN-US&quot;&gt;S′ 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(4) 计算增量Δ&lt;span lang=&quot;EN-US&quot;&gt;t′=C(S′)-C(S)，其中&lt;span lang=&quot;EN-US&quot;&gt;C(S)为评价函数 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(5) 若Δ&lt;span lang=&quot;EN-US&quot;&gt;t′&amp;lt;0则接受&lt;span lang=&quot;EN-US&quot;&gt;S′作为新的当前解，否则以概率&lt;span lang=&quot;EN-US&quot;&gt;exp(-Δt′/T)接受&lt;span lang=&quot;EN-US&quot;&gt;S′作为新的当前解&lt;span lang=&quot;EN-US&quot;&gt;. 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(6) 如果满足终止条件则输出当前解作为最优解，结束程序。 &lt;span lang=&quot;EN-US&quot;&gt;终止条件通常取为连续若干个新解都没有被接受时终止算法。 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(7) T逐渐减少，且&lt;span lang=&quot;EN-US&quot;&gt;T-&amp;gt;0，然后转第&lt;span lang=&quot;EN-US&quot;&gt;2步。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;模拟退火的算法流程图如下:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20150430153401164&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;模拟退火算法新解的产生和接受可分为如下四个步骤： &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;第一步是由一个产生函数从当前解产生一个位于解空间的新解；为便于后续的计算和接受，减少算法耗时，通常选择由当前新解经过简单地变换即可产生新解的方法，如对构成新解的全部或部分元素进行置换、互换等，注意到产生新解的变换方法决定了当前新解的邻域结构，因而对冷却进度表的选取有一定的影响。 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;第二步是计算与新解所对应的目标函数差。因为目标函数差仅由变换部分产生，所以目标函数差的计算最好按增量计算。事实表明，对大多数应用而言，这是计算目标函数差的最快方法。 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;第三步是判断新解是否被接受&lt;span lang=&quot;EN-US&quot;&gt;,判断的依据是一个接受准则，最常用的接受准则是&lt;span lang=&quot;EN-US&quot;&gt;Metropo1is准则&lt;span lang=&quot;EN-US&quot;&gt;: 若Δ&lt;span lang=&quot;EN-US&quot;&gt;t′&amp;lt;0则接受&lt;span lang=&quot;EN-US&quot;&gt;S′作为新的当前解&lt;span lang=&quot;EN-US&quot;&gt;S，否则以概率&lt;span lang=&quot;EN-US&quot;&gt;exp(-Δt′/T)接受&lt;span lang=&quot;EN-US&quot;&gt;S′作为新的当前解&lt;span lang=&quot;EN-US&quot;&gt;S。 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;第四步是当新解被确定接受时，用新解代替当前解，这只需将当前解中对应于产生新解时的变换部分予以实现，同时修正目标函数值即可。此时，当前解实现了一次迭代。可在此基础上开始下一轮试验。而当新解被判定为舍弃时，则在原当前解的基础上继续下一轮试验。 &lt;span lang=&quot;EN-US&quot;&gt;　　模拟退火算法与初始值无关，算法求得的解与初始解状态&lt;span lang=&quot;EN-US&quot;&gt;S(是算法迭代的起点&lt;span lang=&quot;EN-US&quot;&gt;)无关；模拟退火算法具有渐近收敛性，已在理论上被证明是一种以概率&lt;span lang=&quot;EN-US&quot;&gt;l 收敛于全局最优解的全局优化算法；模拟退火算法具有并行性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果你对退火的物理意义还是晕晕的，没关系我们还有更为简单的理解方式。想象一下如果我们现在有下面这样一个函数，现在想求函数的（全局）最优解。如果采用Greedy策略，那么从A点开始试探，如果函数值继续减少，那么试探过程就会继续。而当到达点B时，显然我们的探求过程就结束了（因为无论朝哪个方向努力，结果只会越来越大）。最终我们只能找打一个局部最后解B。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160720013056805&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;282&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模拟退火其实也是一种Greedy算法，但是它的搜索过程引入了随机因素。模拟退火算法以一定的概率来接受一个比当前解要差的解，因此有可能会跳出这个局部的最优解，达到全局的最优解。以上图为例，模拟退火算法在搜索到局部最优解B后，会以一定的概率接受向右继续移动。也许经过几次这样的不是局部最优的移动后会到达B 和C之间的峰点，于是就跳出了局部最小值B。&lt;/p&gt;
&lt;p&gt;根据Metropolis准则，粒子在温度T时趋于平衡的概率为exp(-ΔE/(kT))，其中E为温度T时的内能，ΔE为其改变数,k为Boltzmann常数。Metropolis准则常表示为&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160720015712245&quot; alt=&quot;&quot; width=&quot;437&quot; height=&quot;87&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;Metropolis准则表明，在温度为T时，出现能量差为dE的降温的概率为P(dE)，表示为：P(dE) = exp( dE/(kT) )。其中k是一个常数，exp表示自然指数，且dE&amp;lt;0。所以P和T正相关。这条公式就表示：温度越高，出现一次能量差为dE的降温的概率就越大；温度越低，则出现降温的概率就越小。又由于dE总是小于0（因为退火的过程是温度逐渐下降的过程），因此dE/kT &amp;lt; 0 ，所以P(dE)的函数取值范围是(0,1) 。随着温度T的降低，P(dE)会逐渐降低。&lt;br/&gt;我们将一次向较差解的移动看做一次温度跳变过程，我们以概率P(dE)来接受这样的移动。也就是说，在用固体退火模拟组合优化问题，将内能E模拟为目标函数值 &lt;em&gt;f&lt;/em&gt;，温度T演化成控制参数 &lt;em&gt;t&lt;/em&gt;，即得到解组合优化问题的模拟退火演算法：由初始解 &lt;em&gt;i&lt;/em&gt; 和控制参数初值 &lt;em&gt;t&lt;/em&gt; 开始，对当前解重复“产生新解→计算目标函数差→接受或丢弃”的迭代，并逐步衰减 &lt;em&gt;t&lt;/em&gt; 值，算法终止时的当前解即为所得近似最优解，这是基于蒙特卡罗迭代求解法的一种启发式随机搜索过程。退火过程由冷却进度表(Cooling Schedule)控制，包括控制参数的初值 &lt;em&gt;t&lt;/em&gt; 及其衰减因子Δ&lt;em&gt;t&lt;/em&gt; 、每个 &lt;em&gt;t&lt;/em&gt; 值时的迭代次数L和停止条件S。&lt;/p&gt;
&lt;p&gt;总结起来就是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;若&lt;em&gt;f&lt;/em&gt;( Y(i+1) ) &amp;lt;= &lt;em&gt;f&lt;/em&gt;( Y(i) )  (即移动后得到更优解)，则总是接受该移动；&lt;/li&gt;
&lt;li&gt;若&lt;em&gt;f&lt;/em&gt;( Y(i+1) ) &amp;gt; &lt;em&gt;f&lt;/em&gt;( Y(i) )  (即移动后的解比当前解要差)，则以一定的概率接受移动，而且这个概率随着时间推移逐渐降低（逐渐降低才能趋向稳定）相当于上图中，从B移向BC之间的小波峰时，每次右移（即接受一个更糟糕值）的概率在逐渐降低。如果这个坡特别长，那么很有可能最终我们并不会翻过这个坡。如果它不太长，这很有可能会翻过它，这取决于衰减 &lt;em&gt;t&lt;/em&gt; 值的设定。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;关于普通Greedy算法与模拟退火，有一个有趣的比喻：&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;普通Greedy算法：兔子朝着比现在低的地方跳去。它找到了不远处的最低的山谷。但是这座山谷不一定最低的。这就是普通Greedy算法，它不能保证局部最优值就是全局最优值。&lt;/li&gt;
&lt;li&gt;模拟退火：兔子喝醉了。它随机地跳了很长时间。这期间，它可能走向低处，也可能踏入平地。但是，它渐渐清醒了并朝最低的方向跳去。这就是模拟退火。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h3&gt;模拟退火算法的简单应用&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;作为模拟退火算法应用，讨论货郎担问题&lt;span lang=&quot;EN-US&quot;&gt;(Travelling Salesman Problem，简记为&lt;span lang=&quot;EN-US&quot;&gt;TSP)：设有&lt;span lang=&quot;EN-US&quot;&gt;n个城市，用数码&lt;span lang=&quot;EN-US&quot;&gt;1,…,n代表。城市&lt;span lang=&quot;EN-US&quot;&gt;i和城市&lt;span lang=&quot;EN-US&quot;&gt;j之间的距离为&lt;span lang=&quot;EN-US&quot;&gt;d(i，&lt;span lang=&quot;EN-US&quot;&gt;j) i, j=1,…,n．&lt;span lang=&quot;EN-US&quot;&gt;TSP问题是要找遍访每个域市恰好一次的一条回路，且其路径总长度为最短&lt;span lang=&quot;EN-US&quot;&gt;.。&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;求解&lt;span lang=&quot;EN-US&quot;&gt;TSP的模拟退火算法模型可描述如下：&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;解空间 解空间&lt;span lang=&quot;EN-US&quot;&gt;S是遍访每个城市恰好一次的所有回路，是&lt;span lang=&quot;EN-US&quot;&gt;{1，&lt;span lang=&quot;EN-US&quot;&gt;……，&lt;span lang=&quot;EN-US&quot;&gt;n}的所有循环排列的集合，&lt;span lang=&quot;EN-US&quot;&gt;S中的成员记为&lt;span lang=&quot;EN-US&quot;&gt;(w1,w2 ,……，&lt;span lang=&quot;EN-US&quot;&gt;wn)，并记&lt;span lang=&quot;EN-US&quot;&gt;wn+1= w1。初始解可选为&lt;span lang=&quot;EN-US&quot;&gt;(1，&lt;span lang=&quot;EN-US&quot;&gt;……，&lt;span lang=&quot;EN-US&quot;&gt;n) 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;目标函数 此时的目标函数即为访问所有城市的路径总长度或称为代价函数： &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;我们要求此代价函数的最小值。&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;新解的产生 随机产生&lt;span lang=&quot;EN-US&quot;&gt;1和&lt;span lang=&quot;EN-US&quot;&gt;n之间的两相异数&lt;span lang=&quot;EN-US&quot;&gt;k和&lt;span lang=&quot;EN-US&quot;&gt;m，若&lt;span lang=&quot;EN-US&quot;&gt;k&amp;lt;m，则将&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(w1, w2 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wk , wk+1 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wm ,…，&lt;span lang=&quot;EN-US&quot;&gt;wn) 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;变为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(w1, w2 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wm , wm-1 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wk+1 , wk ,…，&lt;span lang=&quot;EN-US&quot;&gt;wn). 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;如果是&lt;span lang=&quot;EN-US&quot;&gt;k&amp;gt;m，则将&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(w1, w2 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wk , wk+1 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wm ,…，&lt;span lang=&quot;EN-US&quot;&gt;wn) 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;变为：&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(wm, wm-1 ,…，&lt;span lang=&quot;EN-US&quot;&gt;w1 , wm+1 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wk-1 ,wn , wn-1 ,…，&lt;span lang=&quot;EN-US&quot;&gt;wk). 　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;上述变换方法可简单说成是“逆转中间或者逆转两端”。&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;也可以采用其他的变换方法，有些变换有独特的优越性，有时也将它们交替使用，得到一种更好方法。 &lt;span lang=&quot;EN-US&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;代价函数差 设将&lt;span lang=&quot;EN-US&quot;&gt;(w1, w2 ,……，&lt;span lang=&quot;EN-US&quot;&gt;wn)变换为&lt;span lang=&quot;EN-US&quot;&gt;(u1, u2 ,……，&lt;span lang=&quot;EN-US&quot;&gt;un), 则代价函数差为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;根据上述分析，可写出用模拟退火算法求解&lt;span lang=&quot;EN-US&quot;&gt;TSP问题的伪程序：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Procedure TSPSA:
              　&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;&lt;span&gt; 
              　　init&lt;/span&gt;-&lt;span&gt;of&lt;/span&gt;-T; &lt;span&gt;{&lt;/span&gt;&lt;span&gt; T为初始温度&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
              　　S&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&lt;span&gt;1，……，n&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;S为初始值&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
              　　termination&lt;/span&gt;=&lt;span&gt;false;
              　　&lt;/span&gt;&lt;span&gt;while&lt;/span&gt; termination=&lt;span&gt;false
              　　　&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt; 
              　　　　&lt;span&gt;for&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; L &lt;span&gt;do&lt;/span&gt;
              　　　　　　&lt;span&gt;begin&lt;/span&gt;&lt;span&gt;
              　　　　　　　　generate(S′form S); &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; 从当前回路S产生新回路S′&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
              　　　　　　　　Δt:&lt;/span&gt;=f(S′))-f(S);&lt;span&gt;{&lt;/span&gt;&lt;span&gt;f(S)为路径总长&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
              　　　　　　　　IF(Δt&lt;/span&gt;&amp;lt;&lt;span&gt;0&lt;/span&gt;) OR (EXP(-Δt/T)&amp;gt;Random-&lt;span&gt;of&lt;/span&gt;-[&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])
              　　　　　　　　S&lt;/span&gt;=&lt;span&gt;S′;
              　　　　　　　　IF the&lt;/span&gt;-halt-condition-is-&lt;span&gt;TRUE THEN 
              　　　　　　　　termination&lt;/span&gt;=&lt;span&gt;true;
              　　　　　　End;
              　　　　T_lower;
              　　　End;
              　End&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面给出C++实现参考源码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;模拟退火算法解决TSP问题
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;输入格式(tsp.in)：
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;第1行:1个整数N，表示城市的数量
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;第2..N+1行：每行有2个空格分开的整数x,y，第i+1行的x,y表示城市i的坐标
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt;  8&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;  9&lt;/span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;span&gt; 10&lt;/span&gt; #include &amp;lt;algorithm&amp;gt;
&lt;span&gt; 11&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 12&lt;/span&gt; #include &amp;lt;time.h&amp;gt;
&lt;span&gt; 13&lt;/span&gt; #include &amp;lt;math.h&amp;gt;
&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N     30      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;城市数量&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; T     3000    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始温度&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; EPS   1e-8    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;终止温度&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; DELTA 0.98    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;温度衰减率&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; LIMIT 1000   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;概率选择上限&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; OLOOP 20    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;外循环次数&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; ILOOP 100   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;内循环次数&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义路线结构体&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Path
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; citys[N];
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; len;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义城市点坐标&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Point
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; x, y;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt; Path bestPath;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录最优路径&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt; Point p[N];       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个城市的坐标&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; w[N][N];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;两两城市之间路径长度&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; nCase;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;测试次数&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; dist(Point A, Point B)
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y -&lt;span&gt; B.y));
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GetDist(Point p[], &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt;; j &amp;lt; n; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             w[i][j] = w[j][i] =&lt;span&gt; dist(p[i], p[j]);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Input(Point p[], &lt;span&gt;int&lt;/span&gt; &amp;amp;&lt;span&gt;n)
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lf %lf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;p[i].x, &amp;amp;&lt;span&gt;p[i].y);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Init(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     nCase = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     bestPath.len = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         bestPath.citys[i] =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(i != n - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;             printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d---&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             bestPath.len += w[i][i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nInit path length is : %.3lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, bestPath.len);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----------------------------------\n\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Print(Path t, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Path is : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(i != n - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d--&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, t.citys[i]);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, t.citys[i]);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nThe path length is : %.3lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, t.len);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----------------------------------\n\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt; Path GetNext(Path p, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     Path ans =&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; x = (&lt;span&gt;int&lt;/span&gt;)(n * (rand() / (RAND_MAX + &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; y = (&lt;span&gt;int&lt;/span&gt;)(n * (rand() / (RAND_MAX + &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(x ==&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         x = (&lt;span&gt;int&lt;/span&gt;)(n * (rand() / (RAND_MAX + &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         y = (&lt;span&gt;int&lt;/span&gt;)(n * (rand() / (RAND_MAX + &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    swap(ans.citys[x], ans.citys[y]);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     ans.len = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         ans.len += w[ans.citys[i]][ans.citys[i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]];
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nCase = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; nCase &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;    Print(ans, n);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     nCase++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ans;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SA(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; t =&lt;span&gt; T;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    srand((unsigned)(time(NULL)));
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     Path curPath =&lt;span&gt; bestPath;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;     Path newPath =&lt;span&gt; bestPath;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; P_L = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; P_F = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;外循环，主要更新参数t，模拟退火过程&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ILOOP; i++)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;内循环，寻找在一定温度下的最优值&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             newPath =&lt;span&gt; GetNext(curPath, n);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; dE = newPath.len -&lt;span&gt; curPath.len;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dE &amp;lt; &lt;span&gt;0&lt;/span&gt;)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果找到更优值，直接更新&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                 curPath =&lt;span&gt; newPath;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                 P_L = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 P_F = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;                 &lt;span&gt;double&lt;/span&gt; rd = rand() / (RAND_MAX + &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果找到比当前更差的解，以一定概率接受该解，并且这个概率会越来越小&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(exp(dE / t) &amp;gt; rd &amp;amp;&amp;amp; exp(dE / t) &amp;lt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                     curPath =&lt;span&gt; newPath;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                 P_L++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(P_L &amp;gt;&lt;span&gt; LIMIT)
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                 P_F++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(curPath.len &amp;lt;&lt;span&gt; bestPath.len)
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;             bestPath =&lt;span&gt; curPath;
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(P_F &amp;gt; OLOOP || t &amp;lt;&lt;span&gt; EPS)
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         t *=&lt;span&gt; DELTA;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt; argv[]) {
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; 
&lt;span&gt;160&lt;/span&gt;     freopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TSP.data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, stdin);
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;    Input(p, n);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;    GetDist(p, n);
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;    Init(n);
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;    SA(n);
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;    Print(bestPath, n);
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Total test times is : %d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, nCase);
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TSP.data的数据格式如下，第一行的数字表示一个有多少座城市，第2至最后一行，每行有两个数字表示，城市的坐标（平面直角坐标系）。例如： &lt;br/&gt;6 &lt;br/&gt;20 80 &lt;br/&gt;16 84 &lt;br/&gt;23 66 &lt;br/&gt;62 90 &lt;br/&gt;11 9 &lt;br/&gt;35 28 &lt;/p&gt;
&lt;p&gt;注意由于是基于蒙特卡洛的方法，所以上面代码每次得出的结果并不完全一致。你可以通过增加迭代的次数来获得一个更优的结果。&lt;/p&gt;
&lt;p&gt;我们这里需要说明的是，在之前的文章里，我们用求最小值的例子来解释模拟退火的执行：如果新一轮的计算结果更前一轮之结果更小，那么我们就接受它，否则就以一个概率来拒绝或接受它，而这个拒绝的概率会随着温度的降低（也即是迭代次数的增加）而变大（也就是接受的概率会越来越小）。&lt;/p&gt;
&lt;p&gt;但现在我们面对一个TSP问题，我们如何定义或者说如何获取下一轮将要被考察的哈密尔顿路径呢？在一元函数最小值的例子中，下一轮就是指向左或者向右移动一小段距离。而在TSP问题中，我们可以采用的方式其实是很多的。上面代码中GetNext()函数所采用的方式是随机交换两个城市在路径中的顺序。例如当前路径为 A-&amp;gt;B-&amp;gt;C-&amp;gt;D-&amp;gt;A，那么下一次路径就可能是A-&amp;gt;D-&amp;gt;C-&amp;gt;B-&amp;gt;A，即交换B和D。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Tour{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    ... ...
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Creates a random individual&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; generateIndividual() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Loop through all our destination cities and add them to our tour&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; cityIndex = 0; cityIndex &amp;lt; TourManager.numberOfCities(); cityIndex++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;          setCity(cityIndex, TourManager.getCity(cityIndex));
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Randomly reorder the tour&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        Collections.shuffle(tour);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    ... ...
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见把上一轮路径做一个随机的重排（这显然也是一种策略）。&lt;/p&gt;
&lt;p&gt;我们对上述问题提出一种新的策略:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.theprojectspot.com/images/post-assets/map1.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，我们需要创建一个城市类，它可以用来为旅行推销员的不同目的地建模。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;* City.java
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;* Models a city
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; sa;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; City {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Constructs a randomly placed city&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; City(){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.x = (&lt;span&gt;int&lt;/span&gt;)(Math.random()*200&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.y = (&lt;span&gt;int&lt;/span&gt;)(Math.random()*200&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Constructs a city at chosen x, y location&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; City(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.x =&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.y =&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gets city's x coordinate&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getX(){
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.x;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gets city's y coordinate&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getY(){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.y;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gets the distance to given city&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; distanceTo(City city){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; xDistance = Math.abs(getX() -&lt;span&gt; city.getX());
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; yDistance = Math.abs(getY() -&lt;span&gt; city.getY());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;double&lt;/span&gt; distance = Math.sqrt( (xDistance*xDistance) + (yDistance*&lt;span&gt;yDistance) );
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; distance;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString(){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; getX()+&quot;, &quot;+&lt;span&gt;getY();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来让我们创建一个可以跟踪城市的类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;* TourManager.java
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;* Holds the cities of a tour
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; sa;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TourManager {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Holds our cities&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ArrayList destinationCities = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;City&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Adds a destination city&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addCity(City city) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        destinationCities.add(city);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get a city&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; City getCity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (City)destinationCities.get(index);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get the number of destination cities&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; numberOfCities(){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; destinationCities.size();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     
&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在来创建一个可以模拟旅行推销员之旅：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;* Tour.java
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;* Stores a candidate tour through all cities
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; sa;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collections;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Tour{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Holds our tour of cities&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; ArrayList tour = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;City&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cache&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; distance = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Constructs a blank tour&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Tour(){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; TourManager.numberOfCities(); i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             tour.add(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Constructs a tour from another tour&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Tour(ArrayList tour){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.tour =&lt;span&gt; (ArrayList) tour.clone();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Returns tour information&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArrayList getTour(){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tour;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Creates a random individual&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; generateIndividual() {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Loop through all our destination cities and add them to our tour&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; cityIndex = 0; cityIndex &amp;lt; TourManager.numberOfCities(); cityIndex++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;          setCity(cityIndex, TourManager.getCity(cityIndex));
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Randomly reorder the tour&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        Collections.shuffle(tour);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gets a city from the tour&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; City getCity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; tourPosition) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (City)tour.get(tourPosition);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sets a city in a certain position within a tour&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; tourPosition, City city) {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        tour.set(tourPosition, city);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If the tours been altered we need to reset the fitness and distance&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         distance = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     
&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gets the total distance of the tour&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getDistance(){
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (distance == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; tourDistance = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Loop through our tour's cities&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; cityIndex=0; cityIndex &amp;lt; tourSize(); cityIndex++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get city we're traveling from&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;                 City fromCity =&lt;span&gt; getCity(cityIndex);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; City we're traveling to&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;                City destinationCity;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check we're not on our tour's last city, if we are set our 
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tour's final destination city to our starting city&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(cityIndex+1 &amp;lt;&lt;span&gt; tourSize()){
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                     destinationCity = getCity(cityIndex+1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                     destinationCity = getCity(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get the distance between the two cities&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;                 tourDistance +=&lt;span&gt; fromCity.distanceTo(destinationCity);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;             distance =&lt;span&gt; tourDistance;
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; distance;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; 
&lt;span&gt;83&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get number of cities on our tour&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; tourSize() {
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tour.size();
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;     
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;         String geneString = &quot;|&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; tourSize(); i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;             geneString += getCity(i)+&quot;|&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; geneString;
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;96&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，让我们创建模拟退火算法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; sa;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimulatedAnnealing {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Calculate the acceptance probability&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; acceptanceProbability(&lt;span&gt;int&lt;/span&gt; energy, &lt;span&gt;int&lt;/span&gt; newEnergy, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; temperature) {
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If the new solution is better, accept it&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newEnergy &amp;lt;&lt;span&gt; energy) {
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; 1.0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If the new solution is worse, calculate an acceptance probability&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; Math.exp((energy - newEnergy) /&lt;span&gt; temperature);
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create and add our cities&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         City city = &lt;span&gt;new&lt;/span&gt; City(60, 200&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city);
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         City city2 = &lt;span&gt;new&lt;/span&gt; City(180, 200&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city2);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         City city3 = &lt;span&gt;new&lt;/span&gt; City(80, 180&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city3);
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         City city4 = &lt;span&gt;new&lt;/span&gt; City(140, 180&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city4);
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         City city5 = &lt;span&gt;new&lt;/span&gt; City(20, 160&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city5);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         City city6 = &lt;span&gt;new&lt;/span&gt; City(100, 160&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city6);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         City city7 = &lt;span&gt;new&lt;/span&gt; City(200, 160&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city7);
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         City city8 = &lt;span&gt;new&lt;/span&gt; City(140, 140&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city8);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         City city9 = &lt;span&gt;new&lt;/span&gt; City(40, 120&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city9);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         City city10 = &lt;span&gt;new&lt;/span&gt; City(100, 120&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city10);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         City city11 = &lt;span&gt;new&lt;/span&gt; City(180, 100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city11);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         City city12 = &lt;span&gt;new&lt;/span&gt; City(60, 80&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city12);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         City city13 = &lt;span&gt;new&lt;/span&gt; City(120, 80&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city13);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         City city14 = &lt;span&gt;new&lt;/span&gt; City(180, 60&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city14);
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         City city15 = &lt;span&gt;new&lt;/span&gt; City(20, 40&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city15);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         City city16 = &lt;span&gt;new&lt;/span&gt; City(100, 40&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city16);
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         City city17 = &lt;span&gt;new&lt;/span&gt; City(200, 40&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city17);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         City city18 = &lt;span&gt;new&lt;/span&gt; City(20, 20&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city18);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         City city19 = &lt;span&gt;new&lt;/span&gt; City(60, 20&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city19);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         City city20 = &lt;span&gt;new&lt;/span&gt; City(160, 20&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;        TourManager.addCity(city20);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set initial temp&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;double&lt;/span&gt; temp = 10000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cooling rate&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;double&lt;/span&gt; coolingRate = 0.003&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initialize intial solution&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         Tour currentSolution = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tour();
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;        currentSolution.generateIndividual();
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         
&lt;span&gt; 68&lt;/span&gt;         System.out.println(&quot;Initial solution distance: &quot; +&lt;span&gt; currentSolution.getDistance());
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set as current best&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         Tour best = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tour(currentSolution.getTour());
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Loop until system has cooled&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (temp &amp;gt; 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create new neighbour tour&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             Tour newSolution = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tour(currentSolution.getTour());
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get a random positions in the tour&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; tourPos1 = (&lt;span&gt;int&lt;/span&gt;) (newSolution.tourSize() *&lt;span&gt; Math.random());
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; tourPos2 = (&lt;span&gt;int&lt;/span&gt;) (newSolution.tourSize() *&lt;span&gt; Math.random());
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get the cities at selected positions in the tour&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             City citySwap1 =&lt;span&gt; newSolution.getCity(tourPos1);
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             City citySwap2 =&lt;span&gt; newSolution.getCity(tourPos2);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Swap them&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            newSolution.setCity(tourPos2, citySwap1);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            newSolution.setCity(tourPos1, citySwap2);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             
&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get energy of solutions&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; currentEnergy =&lt;span&gt; currentSolution.getDistance();
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; neighbourEnergy =&lt;span&gt; newSolution.getDistance();
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Decide if we should accept the neighbour&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (acceptanceProbability(currentEnergy, neighbourEnergy, temp) &amp;gt;&lt;span&gt; Math.random()) {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 currentSolution = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tour(newSolution.getTour());
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Keep track of the best solution found&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (currentSolution.getDistance() &amp;lt;&lt;span&gt; best.getDistance()) {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;                 best = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tour(currentSolution.getTour());
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;             
&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cool system&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;             temp *= 1-&lt;span&gt;coolingRate;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;         System.out.println(&quot;Final solution distance: &quot; +&lt;span&gt; best.getDistance());
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         System.out.println(&quot;Tour: &quot; +&lt;span&gt; best);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
Initial solution distance: 1966&lt;span&gt;
Final solution distance: &lt;/span&gt;911&lt;span&gt;
Tour: &lt;/span&gt;|180, 200|200, 160|140, 140|180, 100|180, 60|200, 40|160, 20|120, 80|100, 40|60, 20|20, 20|20, 40|60, 80|100, 120|40, 120|20, 160|60, 200|80, 180|100, 160|140, 180|
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span data-sentence=&quot;0&quot; data-section=&quot;0&quot;&gt;在这个例子中，我们能够超过我们初始随机生成路径的一半以上。很大程度上&lt;span data-sentence=&quot;1&quot; data-section=&quot;0&quot;&gt;说明，当应用到某些类型的优化问题时，这个相对简单的算法是多么方便。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-sentence=&quot;0&quot; data-section=&quot;0&quot;&gt;&lt;span data-sentence=&quot;1&quot; data-section=&quot;0&quot;&gt;&lt;img src=&quot;http://www.theprojectspot.com/images/post-assets/sa_complete.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;模拟退火算法的参数控制问题&lt;em id=&quot;__mceDel&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　&lt;/span&gt;&lt;/em&gt;&lt;span lang=&quot;EN-US&quot;&gt;　&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;模拟退火算法的应用很广泛，可以求解&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;NP完全问题，但其参数难以控制，其主要问题有以下三点：&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;span lang=&quot;EN-US&quot;&gt;(1) 温度&lt;span lang=&quot;EN-US&quot;&gt;T的初始值设置问题。&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;　　温度&lt;span lang=&quot;EN-US&quot;&gt;T的初始值设置是影响模拟退火算法全局搜索性能的重要因素之一、初始温度高，则搜索到全局最优解的可能性大，但因此要花费大量的计算时间；反之，则可节约计算时间，但全局搜索性能可能受到影响。实际应用过程中，初始温度一般需要依据实验结果进行若干次调整。&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;　　&lt;span lang=&quot;EN-US&quot;&gt;(2) 退火速度问题。&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;　　模拟退火算法的全局搜索性能也与退火速度密切相关。一般来说，同一温度下的“充分”搜索&lt;span lang=&quot;EN-US&quot;&gt;(退火&lt;span lang=&quot;EN-US&quot;&gt;)是相当必要的，但这需要计算时间。实际应用中，要针对具体问题的性质和特征设置合理的退火平衡条件。&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;　　&lt;span lang=&quot;EN-US&quot;&gt;(3) 温度管理问题。&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;　　温度管理问题也是模拟退火算法难以处理的问题之一。实际应用中，由于必须考虑计算复杂度的切实可行性等问题，常采用如下所示的降温方式：&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;       T(t+1)＝&lt;span lang=&quot;EN-US&quot;&gt;k×T(t)&lt;br/&gt;式中&lt;span lang=&quot;EN-US&quot;&gt;k为正的略小于&lt;span lang=&quot;EN-US&quot;&gt;1.00的常数，&lt;span lang=&quot;EN-US&quot;&gt;t为降温的次数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;例题推荐&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul readability=&quot;-0.495597945708&quot;&gt;&lt;li&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;给定n个质点，求重心，这n个质点的重心满足Σ(重心到点i的距离)*g[i]最小。---BZOJ 3680 参考题解请看&lt;a href=&quot;http://www.cnblogs.com/ECJTUACM-873284962/p/7140538.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;给n个点，找出一个点，使这个点到其他所有点的距离之和最小，也就是求费马点。---POJ 2420&lt;/li&gt;
&lt;li&gt;给定三维空间的n点，找出一个半径最小的球把这些点全部包围住。---POJ 2069&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;给出方程&lt;img src=&quot;http://img.blog.csdn.net/20150104134331750&quot; alt=&quot;&quot;/&gt;，其中&lt;img src=&quot;http://img.blog.csdn.net/20150104134411546&quot; alt=&quot;&quot;/&gt;，输入&lt;img src=&quot;http://img.blog.csdn.net/20150104134451888&quot; alt=&quot;&quot;/&gt;，求&lt;img src=&quot;http://img.blog.csdn.net/20150104134543859&quot; alt=&quot;&quot;/&gt;的最小值。&lt;/p&gt;
&lt;p&gt; 本题可以用经典的二分法求解，这种方法比较简单，就不说了。主要来说模拟退火做法。---HDU 2899&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;平面上给定n条线段，找出一个点，使这个点到这n条线段的距离和最小。参考源码在&lt;a href=&quot;http://www.cnblogs.com/ECJTUACM-873284962/p/8468780.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;地图中有N个陷阱，给出他们的坐标，求一个点，使得这个点到所有陷阱的最小距离最大。---POJ 1379&lt;/li&gt;
&lt;li&gt;求一个椭球面上的一个点到原点的最短距离。---HDU 5017&lt;/li&gt;
&lt;li&gt;找出一个点使得这个店到n个点的最长距离最短，即求最小覆盖圆的半径。---HDU 3932&lt;/li&gt;
&lt;li&gt;给一个矩阵的长宽，再给n个点，求矩阵区域内某个点到各个点的最小距离的最大值，输出所求点的坐标。---HDU 1109&lt;/li&gt;
&lt;li&gt;给定n个点的一个多边形，一个圆的半径，判断圆是否可以放在多边形里。---HDU 3644&lt;/li&gt;
&lt;li&gt;给定n个点的坐标和它x和y方向的分速度，要求在任意时刻两两点之间距离最大值中的最小值。---HDU 4717&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;参考文献&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 02:59:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/8468831.html</dc:identifier>
</item>
<item>
<title>angularjs 指令详解 - 柴小智</title>
<link>http://www.cnblogs.com/chaixiaozhi/p/8467798.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chaixiaozhi/p/8467798.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、指令定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于指令，可以把它简单的理解成在特定DOM元素上运行的函数，指令可以扩展这个元素的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先来看个完整的参数示例再来详细的介绍各个参数的作用及用法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&amp;lt;div my-directive&amp;gt;&amp;lt;/div&amp;gt; 
&lt;/pre&gt;
&lt;pre&gt;
angular.module('myApp'&lt;span&gt;, []) 
.directive(&lt;/span&gt;'myDirective', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { 
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; { 
    restrict: String, 
    priority: Number, 
    terminal: Boolean, 
    template: String or Template Function: 
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(tElement, tAttrs) {...}, 
    templateUrl: String, 
    replace: Boolean or String, 
    scope: Boolean or Object, 
    transclude: Boolean, 
    controller: String or 
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(scope, element, attrs, transclude, otherInjectables) { ... }, 
    controllerAs: String, 
    require: String, 
    link: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(scope, iElement, iAttrs) { ... }, 
    compile: &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回一个对象或连接函数，如下所示：&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(tElement, tAttrs, transclude) { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; { 
            pre: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(scope, iElement, iAttrs, controller) { ... }, 
            post: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(scope, iElement, iAttrs, controller) { ... } 
           } 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; postLink(...) { ... } 
        } 
    }; 
 });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、指令参数的作用和意义（这个地方只选常用的几种来讲一下）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;restrict[string]&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;restrict是一个可选的参数。用于指定该指令在DOM中以何种形式被声明。默认值是A，即以属性的形式来进行声明。&lt;/span&gt;
可选值如下：
E（元素）

&lt;/span&gt;&amp;lt;my-directive&amp;gt;&amp;lt;/my-directive&amp;gt; 
&lt;span&gt;A（属性，默认值）

&lt;/span&gt;&amp;lt;div my-directive&amp;gt;&amp;lt;/div&amp;gt; 
&lt;span&gt;C（类名）

&lt;/span&gt;&amp;lt;div class=&quot;my-directive:expression;&quot;&amp;gt;&amp;lt;/div&amp;gt; 
&lt;span&gt;M（注释）

&lt;/span&gt;&amp;lt;--directive:my-directive expression--&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;一般考虑到浏览器的兼容性，强烈建议使用默认的属性就可以即即以属性的形式来进行声明。最后一种方式建议在不要求逼格指数的时候千万不要用。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;replace[bool]&lt;/h3&gt;
&lt;p&gt;replace是一个可选参数，如果设置了这个参数，值必须为true，因为默认值为false。默认值意味着模板会被当作子元素插入到调用此指令的元素内部,&lt;br/&gt;例如上面的示例默认值情况下，生成的html代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-directive &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span&gt; text&lt;/span&gt;&lt;span&gt;=&quot;百度&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;百度&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-directive&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果设置replace=true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span&gt; text&lt;/span&gt;&lt;span&gt;=&quot;百度&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;百度&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;templateUrl[string or function]&lt;/h3&gt;
&lt;p&gt;templateUrl是可选的参数，可以是以下类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个代表外部HTML文件路径的字符串；&lt;/li&gt;
&lt;li&gt;一个可以接受两个参数的函数，参数为tElement和tAttrs，并返回一个外部HTML文件路径的字符串。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;无论哪种方式，模板的URL都将通过ng内置的安全层，特别是$getTrustedResourceUrl，这样可以保护模板不会被不信任的源加载。 默认情况下，调用指令时会在后台通过Ajax来请求HTML模板文件。加载大量的模板将严重拖慢一个客户端应用的速度。为了避免延迟，可以在部署应用之前对HTML模板进行缓存。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    angular.module('app'&lt;span&gt;,[])
    .directive(&lt;/span&gt;'myDirective', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; { 
                restrict: &lt;/span&gt;'A'&lt;span&gt;, 
                templateUrl: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (elem, attr) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; attr.value + &quot;.html&quot;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当然这里我们可以直接指定路径，同时在模板中可以包含表达式&lt;/span&gt;
&lt;span&gt;                }
        };
    })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; controller[string or function]&lt;/h3&gt;
&lt;p&gt; controller参数可以是一个字符串或一个函数。当设置为字符串时，会以字符串的值为名字，来查找注册在应用中的控制器的构造函数.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
angular.module('myApp'&lt;span&gt;, []) 
.directive(&lt;/span&gt;'myDirective', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { 
restrict: &lt;/span&gt;'A'&lt;span&gt;,  &lt;br/&gt;replace: true,&lt;br/&gt;templateUrl: 'test.html',
controller: &lt;/span&gt;'SomeController'&lt;span&gt; 
}) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 可以在指令内部通过匿名构造函数的方式来定义一个内联的控制器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
angular.module('myApp'&lt;span&gt;,[]) 
.directive(&lt;/span&gt;'myDirective', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { 
restrict: &lt;/span&gt;'A'&lt;span&gt;, 
controller: 
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope, $element, $attrs, $transclude) { 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制器逻辑放在这里&lt;/span&gt;
&lt;span&gt;} 
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以将任意可以被注入的ng服务注入到控制器中，便可以在指令中使用它了。控制器中也有一些特殊的服务可以被注入到指令当中。这些服务有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. $scope&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与指令元素相关联的当前作用域。&lt;br/&gt;&lt;strong&gt;2. $element&lt;/strong&gt;&lt;br/&gt;当前指令对应的元素。&lt;br/&gt;&lt;strong&gt;3. $attrs&lt;/strong&gt;&lt;br/&gt;由当前元素的属性组成的对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;aDiv&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
具有如下的属性对象：
{ 
id: &quot;aDiv&quot;, 
class: &quot;box&quot; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;三、指令作用域&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;scope参数[bool or object]&lt;/h3&gt;
&lt;p&gt;scope参数是可选的，可以被设置为true或一个对象。默认值是false。&lt;/p&gt;
&lt;p&gt;html代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-controller&lt;/span&gt;&lt;span&gt;='MainController' &lt;/span&gt;&lt;span&gt;ng-init&lt;/span&gt;&lt;span&gt;=&quot;myProperty='Hello World!'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        外部: {{ myProperty}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myProperty&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;my-directive&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;js代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    angular.module('myApp', [])
        .controller('MainController', function ($scope) {
        })
        .directive('myDirective', function () {
            return {
                restrict: 'A',
                scope:false,//切换为{}，true测试
                priority: 100,
                template: '&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;内部:{{ myProperty }}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myProperty&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'
            };
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 当我们改变scope的值我们会发现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;false:&lt;/strong&gt;继承但不隔离&lt;img src=&quot;https://images0.cnblogs.com/blog/360406/201410/261354226378679.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.当我们将&lt;code&gt;scope&lt;/code&gt;设置为&lt;code&gt;false&lt;/code&gt;的时候,我们创建的指令和父作用域（其实是同一个作用域）共享同一个&lt;code&gt;model&lt;/code&gt;模型，所以在指令中修改模型数据，它会反映到父作用域的模型中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;true:&lt;/strong&gt;继承并隔离&lt;img src=&quot;https://images0.cnblogs.com/blog/360406/201410/261355268555360.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.当我们将&lt;code&gt;scope&lt;/code&gt;设置为&lt;code&gt;true&lt;/code&gt;的时候，我们就新创建了一个作用域，只不过这个作用域是继承了我们的父作用域；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我觉得可以这样理解，我们新创建的作用域是一个新的作用域，只不过在初始化的时候，用了父作用域的属性和方法去填充我们这个新的作用域。它和父作用域不是同一个作用域。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;{}：&lt;/strong&gt;隔离且不继承 &lt;img src=&quot;https://images0.cnblogs.com/blog/360406/201410/261356081684973.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.当我们将&lt;code&gt;scope&lt;/code&gt;设置为&lt;code&gt;{}&lt;/code&gt;时，意味着我们创建的一个新的与父作用域隔离的新的作用域，这使我们在不知道外部环境的情况下，就可以正常工作，不依赖外部环境。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、绑定策略&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 在使用独立作用域scope的时候，一般有三种绑定传递策略， @单向传递字符串  =双向传递  &amp;amp;单向传递父级的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;inputtype&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myUrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div my-directive my-url&lt;/span&gt;&lt;span&gt;=&quot;{{myUrl}}&quot; &lt;/span&gt;&lt;span&gt;my-age&lt;/span&gt;&lt;span&gt;=&quot;age&quot; &lt;span&gt;change-my-age&lt;/span&gt;=&quot;changeAge()&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; ①
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
angular.module('myApp'&lt;span&gt;,[])
.directive(&lt;/span&gt;'myDirective',&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;{
restrict:&lt;/span&gt;'A',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性方式&lt;/span&gt;
replace:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
scope:{
myUrl:&lt;/span&gt;'@',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@绑定策略(默认绑定到 my-url指令属性)&lt;/span&gt;
myAge:'='&lt;span&gt;//=双向绑定&lt;/span&gt;&lt;span&gt;(父子互相影响)&lt;br/&gt;&lt;span&gt;changeMyAge:'&amp;amp;' &lt;span&gt;//传递父作用域的方法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;},
template:&lt;/span&gt;'&amp;lt;a href=&quot;{{myUrl}}&quot; ng-click=changeMyAge()&amp;gt;{{ myAge }}&amp;lt;/a&amp;gt;'&lt;span&gt;
}
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;7.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在上面的代码中，我创建了一个指令&lt;code&gt;myDirective&lt;/code&gt; 该指令创建了两个变量 myUrl、myLinkText,并且这俩个变量都是采用&lt;code&gt;@绑定策略&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;说一下，不管是&lt;code&gt;@&lt;/code&gt;、&lt;code&gt;=&lt;/code&gt;还是&lt;code&gt;&amp;amp;&lt;/code&gt;绑定策略，它们都有一个默认的方式，以@绑定策略为例，如上面代码那么样:&lt;code&gt;myUrl:'@'&lt;/code&gt;，直接用一个&lt;code&gt;@&lt;/code&gt;表示绑定的方式，&lt;span&gt;它就会默认得将指令属性my-url的值赋值给myUrl变量&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;当然，你不想使用默认的方式，也就是说，你不想myUrl变量绑定my-url的值，而想要绑定其它属性名的值，那么你可以在&lt;code&gt;@&lt;/code&gt;后加上你希望的属性名（格式要求：驼峰式）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如，我想讲myUrl绑定到&lt;code&gt;&amp;lt;myDirective&amp;gt;&amp;lt;/myDirective&amp;gt;&lt;/code&gt;指令的some-attr属性的值，那么你可以这样写：&lt;code&gt;myUrl:'@someAttr'&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;那么我们知道了指令的myUrl变量的值是如何来的，那么我们要如何在template中使用它呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这个很简单，看上面的代码就能很明白了，我们在template中的代码中需要用表达式的方式对其引用&lt;code&gt;{{myUrl}}&lt;/code&gt;，这样我们就能够使用到myUrl变量的值了~&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;　　1. 本地作用域属性：使用@符号将本地作用域同DOM属性的值进行绑定，使指令内部作用域可以使用外部作用域的变量： &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;code&gt;@ &lt;/code&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;可以在指令中使用绑定的字符串了。&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　2.  双向绑定：通过=可以将本地作用域上的属性同父级作用域上的属性进行双向的数据绑定。就像普通的数据绑定一样，本地属性会反映出父数据模型中所发生的改变。 &lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;　　&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. 父级作用域绑定 通过&amp;amp;符号可以对父级作用域进行绑定，以便在其中运行函数。意味着对这个值进行设置时会生成一个指向父级作用域的包装函数。 &lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;　　要使调用带有一个参数的父方法，我们需要传递一个对象，这个对象的键是参数的名称，值是要传递给参数的内容。&lt;/span&gt; &lt;/p&gt;

</description>
<pubDate>Sun, 25 Feb 2018 02:40:00 +0000</pubDate>
<dc:creator>柴小智</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chaixiaozhi/p/8467798.html</dc:identifier>
</item>
<item>
<title>【算法】实现栈和队列 - 外婆的彭湖湾</title>
<link>http://www.cnblogs.com/penghuwan/p/8468595.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/penghuwan/p/8468595.html</guid>
<description>&lt;h2&gt;&lt;span&gt;栈（stack）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;栈（stack）是一种后进先出（LIFO）的集合类型， 即后来添加的数据会先被删除&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225090646455-256001903.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;file:///C:/Users/lenovo/AppData/Local/YNote/data/qq558635343CE3D787D7910E2E25B05D68/8210fc55033c4bf28de7312c7f5bff92/w%2525z%25600dq7x%2528@it%257D91bx%2529@b80.png&quot; alt=&quot;&quot; data-attr-org-src-id=&quot;0D40FBA15A204EAE92EFC95956B2E492&quot; data-media-type=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以将其类比于下面文件的取放操作：新到的文件会被先取走，这使得每次取走的文件都是最新的。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225090720969-1082582875.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;

&lt;div&gt;&lt;span&gt;&lt;img src=&quot;file:///C:/Users/lenovo/AppData/Local/YNote/data/qq558635343CE3D787D7910E2E25B05D68/7d9759ab14d14487b62ea72a6586145a/zrrdf%2529%2560u9%256056z3cy43%2560p%257D4k.png&quot; alt=&quot;&quot; data-attr-org-src-id=&quot;BE6B0FB0EBBE43E29D482F6FA0DDDC6F&quot; data-media-type=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;栈可以用数组或者队列去实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面要实现的栈的API如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;file:///C:/Users/lenovo/AppData/Local/YNote/data/qq558635343CE3D787D7910E2E25B05D68/953321c8afb1453eaf6a6991a83c9795/m%2528_o%255Bvs@4c%255Bkb77zpz%2529%257B3v0.png&quot; alt=&quot;&quot; data-attr-org-src-id=&quot;511F4A6AE2D348DD84ABA64226A3D2A0&quot; data-media-type=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225090800451-297178048.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;用数组实现栈&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;下面我们通过数组实现一个指定了初始容量，但随着元素的增加能够动态地扩张容量的栈。注意： 因为数组指定大小后不可改变， 所以我们要定义自动扩大栈容量的操作&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ArrayStack&amp;lt;Item&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 栈元素的总数&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; N = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存放栈元素的数组&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Item [] items;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ArrayStack (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; M) {
    items &lt;/span&gt;= (Item[]) &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[M];
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 调整栈的大小
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; resize (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; max) {
    Item [] temp &lt;/span&gt;= (Item [])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[max];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i =0;i&amp;lt;items.length;i++&lt;span&gt;) {
      temp[i] &lt;/span&gt;=&lt;span&gt; items[i];
    }
    items &lt;/span&gt;=&lt;span&gt; temp;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 向栈顶插入元素
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; push (Item item) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当栈满了的时候， 将栈的数组大小扩大为原来两倍&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (N==items.length) resize(2*&lt;span&gt;N);
    items[N&lt;/span&gt;++] =&lt;span&gt; item;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 从栈顶删除元素，并将删除的元素返回
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Item pop () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当栈还是空的时候， 不删除并且返回空&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(isEmpty()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存将要被删除的元素&lt;/span&gt;
    Item i = items[N-1&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将该元素删除&lt;/span&gt;
    items[N-1] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 栈的长度减1&lt;/span&gt;
    N--&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;
  }
 
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 判断栈是否为空
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; N == 0&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 返回栈的大小
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; N;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main (String args []) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开始时指定栈的容量为2&lt;/span&gt;
    ArrayStack&amp;lt;Integer&amp;gt; stack = &lt;span&gt;new&lt;/span&gt; ArrayStack&amp;lt;&amp;gt;(2&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向栈顶依次添加3个元素&lt;/span&gt;
    stack.push(1&lt;span&gt;);
    stack.push(&lt;/span&gt;2&lt;span&gt;);
    stack.push(&lt;/span&gt;3&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加3后栈的容量自动扩大了
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依次从栈顶删除3个元素&lt;/span&gt;
&lt;span&gt;    System.out.println(stack.pop());
    System.out.println(stack.pop());
    System.out.println(stack.pop());
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;用链表实现栈&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;下面展示用链表实现的栈的代码， 注意： 添加和删除操作都是在链表的头部进行的&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LinkedListStack&amp;lt;Item&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 栈中元素的总数&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; N = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 链表头元素&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Node front;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 内部结点类&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Node {
    Item item;
    Node next;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 向栈顶插入元素
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; push (Item item) {
    Node oldFront &lt;/span&gt;=&lt;span&gt; front;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向链表头部插入新的结点&lt;/span&gt;
    front = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node();
    front.item &lt;/span&gt;=&lt;span&gt; item;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将新头结点的next指针指向旧的头结点&lt;/span&gt;
    front.next =&lt;span&gt; oldFront;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 栈的长度加1&lt;/span&gt;
    N++&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 向栈顶删除元素，并将删除的元素返回
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Item pop () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当栈还是空的时候， 不删除并且返回空&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(isEmpty()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存待删除的项以便返回&lt;/span&gt;
    Item item =&lt;span&gt; front.item;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除原头结点&lt;/span&gt;
    front =&lt;span&gt; front.next;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 栈的长度减1&lt;/span&gt;
    N--&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 判断栈是否为空
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; N == 0&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 返回栈的大小
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; N;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main (String args []) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建栈&lt;/span&gt;
    LinkedListStack&amp;lt;Integer&amp;gt; stack = &lt;span&gt;new&lt;/span&gt; LinkedListStack&amp;lt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向栈顶依次添加3个元素&lt;/span&gt;
    stack.push(1&lt;span&gt;);
    stack.push(&lt;/span&gt;2&lt;span&gt;);
    stack.push(&lt;/span&gt;3&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依次从栈顶删除3个元素&lt;/span&gt;
&lt;span&gt;    System.out.println(stack.pop());
    System.out.println(stack.pop());
    System.out.println(stack.pop());
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;队列(queue)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;队列属于一种遵循先进先出(FIFO)原则的集合类型，可以将其类比为生活中一些以公平性为原则的服务场景： 排成一排的客户等待服务，等待最久即最先入列的客户应该最先提供服务（出列）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225094059682-1805363624.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实现队列也有两种方式，一种是链表， 另一种是循环数组&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;队列和栈在实现上的不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;栈遵循后进先出的原则，所以要在数组或链表同一端做添加和删除操作&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;队列遵循先进先出的原则， 所以要在数组或链表的两端分别做插入和删除的操作&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们要实现的队列API如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225090912398-772173069.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;

&lt;div&gt;&lt;span&gt;&lt;img src=&quot;file:///C:/Users/lenovo/AppData/Local/YNote/data/qq558635343CE3D787D7910E2E25B05D68/0c5bc448670044c1b7c2987781f81b01/ma@57%255Bhky6%255B_%257Dk2%2529co6b%2529yh.png&quot; alt=&quot;&quot; data-attr-org-src-id=&quot;A279E9FACB6742E19DC122B7C0BAD259&quot; data-media-type=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;通过链表实现队列&lt;/span&gt;&lt;/h3&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LinkedListQueue&amp;lt;Item&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 链表中的结点数目&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; N = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 链表头结点&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; Node front = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 链表尾结点&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; Node rear = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 结点内部类&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Node {
    Item item;
    Node next;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 元素入列（在链表尾部添加）
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; enqueue (Item item) {
    Node oldRear &lt;/span&gt;=&lt;span&gt; rear;
    rear &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node();
    rear.item &lt;/span&gt;=&lt;span&gt; item;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isEmpty()) front =&lt;span&gt; rear;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;           oldRear.next =&lt;span&gt; rear;
    N&lt;/span&gt;++&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 元素出列（在链表头部删除）
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Item dequeue () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isEmpty()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    Item item &lt;/span&gt;=&lt;span&gt; front.item;
    front &lt;/span&gt;=&lt;span&gt; front.next;
    N&lt;/span&gt;--&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isEmpty()) rear = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 判断队列是否为空
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; N == 0&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 返回队列长度
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; N;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main (String args []) {
    LinkedListQueue&lt;/span&gt;&amp;lt;String&amp;gt; queue = &lt;span&gt;new&lt;/span&gt; LinkedListQueue&amp;lt;&amp;gt;&lt;span&gt;();
    queue.enqueue(&lt;/span&gt;&quot;A&quot;&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;&quot;B&quot;&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;&quot;C&quot;&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;&quot;D&quot;&lt;span&gt;);
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;头部删除-尾部添加 OR 头部添加-尾部删除？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上面的代码中，我们是通过在链表尾部添加结点，在链表头部删除结点的操作实现队列， 那能不能通过在链表头部添加结点，在链表尾部删除结点的方式实现队列呢？ 这是可以的，但并不是一个合适的做法，因为如果这样操作，在单向链表的条件下，需要将链表从头到尾迭代一遍才能实现删除操作，而我们通过上面的“头部删除-尾部添加”就能避免这种开销。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;通过在链表头部添加结点，在链表尾部删除结点实现队列（不推荐）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  /**&lt;/span&gt;&lt;span&gt;
   * @description: 元素入列（在链表头部添加）
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; enqueue (Item item) {
    Node oldFront &lt;/span&gt;=&lt;span&gt; front;
    front &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node();
    front.item &lt;/span&gt;=&lt;span&gt; item;
    front.next &lt;/span&gt;=&lt;span&gt; oldFront;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isEmpty()) rear =&lt;span&gt; front;
    N&lt;/span&gt;++&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 元素出列（在链表尾部删除）
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Item dequeue () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isEmpty()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size()==1&lt;span&gt;) {
      Item item &lt;/span&gt;=&lt;span&gt; rear.item;
      front &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      rear &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      N&lt;/span&gt;--&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
    }
    Node x &lt;/span&gt;=&lt;span&gt; front;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;x.next.equals(rear)) {
      x&lt;/span&gt;=&lt;span&gt;x.next;
    }
    Item item &lt;/span&gt;=&lt;span&gt; x.next.item;
    x.next &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    rear &lt;/span&gt;=&lt;span&gt; x;
    N&lt;/span&gt;--&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;通过循环数组实现队列&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;除了链表之外， 另外一种实现队列的方式是循环数组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;为什么需要循环数组？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为仅靠普通的数组实现队列可能会导致一个问题： 数组大量空位元素得不到利用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如下图所示， 在数组的实现方式中，我们会使用front和rear两个指针跟踪队列头部元素和尾部元素的位置，在动态的出列和入列操作中它们的位置会不断发生变化，随着出列操作fron指针t会不断后移(a-&amp;gt;b-&amp;gt;c-&amp;gt;d)， 当front和rear到达图d的状态时，我们发现：front前面的元素有一大段因为出列而腾出的空的元素没有得到利用，而此时又无法继续入列了(rear指针到达数组尾部，再次入列将导致数组越界的错误)&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225090945045-225800847.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;file:///C:/Users/lenovo/AppData/Local/YNote/data/qq558635343CE3D787D7910E2E25B05D68/4858c43b7b8a49b48afcf6a655fe736d/_x%2528jw@pkz2%2528cx5yo_wvt%255B28.png&quot; alt=&quot;&quot; data-attr-org-src-id=&quot;5B83296A0A324950A2504099008923BC&quot; data-media-type=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在我们有一个方式可以解决这个问题： 将数组的头部和尾部连在一起，构成一个循环数组：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060770/201802/1060770-20180225090957119-1253952824.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;

&lt;div&gt;&lt;span&gt;&lt;img src=&quot;file:///C:/Users/lenovo/AppData/Local/YNote/data/qq558635343CE3D787D7910E2E25B05D68/87e9469180584a83b56d055522ec7309/lrfwb7my%2529_ph%2525%255Dirln@q%255B%25284.png&quot; alt=&quot;&quot; data-attr-org-src-id=&quot;9B17BF0B209842E686EAB00243F4317F&quot; data-media-type=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;代码如下图所示， 可以看到，实现循环的关键是使用的一个取余数的操作，使得指针在移动到数组尾部的时候，能够重新移动到数组的头部：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CircleArrayQueue&amp;lt;Item&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 队列元素总数&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; N = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组长度&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; M;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 队列头部元素指针&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; front = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 队列尾部元素指针&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; rear = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Item [] items;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CircleArrayQueue (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; M) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.M =&lt;span&gt; M;
    items &lt;/span&gt;= (Item [])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[M];
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 入列操作
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; enqueue (Item item) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当队列为空时， 不能进行入列操作&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (isFull()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向队列尾部插入元素&lt;/span&gt;
    items[rear] =&lt;span&gt; item;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用数组长度M取余， 使得rear到达数组尾部时能返回数组头部&lt;/span&gt;
    rear = (rear + 1) %&lt;span&gt; M;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 增加队列长度&lt;/span&gt;
    N++&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 出列，并返回被删除项
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Item dequeue () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当队列为满时， 不能进行出列操作&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (isEmpty()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存待删除元素， 以待返回&lt;/span&gt;
    Item item =&lt;span&gt; items[front];
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除队列头部元素&lt;/span&gt;
    items[front] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用数组长度M取余， 使得front到达数组尾部时能返回数组头部&lt;/span&gt;
    front = (front + 1) %&lt;span&gt; M;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 减少队列长度&lt;/span&gt;
    N--&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回删除元素&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 判断队列是否满了
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isFull () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; N ==&lt;span&gt; M;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 判断队列是否为空
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; N == 0&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * @description: 返回队列元素总数
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; N;
  }

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main (String args []) {
    CircleArrayQueue&lt;/span&gt;&amp;lt;Integer&amp;gt; queue = &lt;span&gt;new&lt;/span&gt; CircleArrayQueue&amp;lt;&amp;gt;(3&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依次入列三个元素&lt;/span&gt;
    queue.enqueue(1&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;2&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;3&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 依次出列三个元素&lt;/span&gt;
&lt;span&gt;    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;判断循环数组的满状态和空状态&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在循环数组的实现中，一个非常重要的操作就是区分数组是处在&quot;满&quot;状态还是“空”状态，因为当front和rear指向同一个元素位置时，既可能处在满状态也可能处在空状态。&lt;/span&gt;&lt;span&gt;上面的代码里我们是通过一个表示队列元素总数的变量N去判断的，除此之外，我们也可以通过另外一种不依赖于变量N的方式去判断数组的满和空的状态， 但代价是少用一个元素空间，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(下面的代码除了isEmpty和isFull外都和上面相同)&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CircleArrayQueue2&amp;lt;Item&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; M;
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; front = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; rear = 0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Item [] items;
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CircleArrayQueue2 (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; M) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.M =&lt;span&gt; M;
    items &lt;/span&gt;= (Item [])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[M];
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; enqueue (Item item) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isFull()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    items[rear] &lt;/span&gt;=&lt;span&gt; item;
    rear &lt;/span&gt;= (rear + 1) %&lt;span&gt; M;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Item dequeue () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isEmpty()) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    Item item &lt;/span&gt;=&lt;span&gt; items[front];
    items[front] &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    front &lt;/span&gt;= (front + 1) %&lt;span&gt; M;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; item;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&lt;span&gt; isFull&lt;/span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;(rear + 1) % M ==&lt;/span&gt;&lt;span&gt;&lt;span&gt; front;&lt;/span&gt;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;&lt;span&gt; isEmpty&lt;/span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;rear ==&lt;/span&gt;&lt;span&gt;&lt;span&gt; front;&lt;/span&gt;
  }
 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main (String args []) {
    CircleArrayQueue2&lt;/span&gt;&amp;lt;Integer&amp;gt; queue = &lt;span&gt;new&lt;/span&gt; CircleArrayQueue2&amp;lt;&amp;gt;(3&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;1&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;2&lt;span&gt;);
    queue.enqueue(&lt;/span&gt;3&lt;span&gt;);
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;由输出可看出， 在数组长度为3时， 我们实际上只能有2个元素位置去存储队列元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【完】&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 25 Feb 2018 01:17:00 +0000</pubDate>
<dc:creator>外婆的彭湖湾</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/penghuwan/p/8468595.html</dc:identifier>
</item>
<item>
<title>neo-thinsdk-cs 之 thinWallet 接入私链 - JoiT</title>
<link>http://www.cnblogs.com/JoiT/p/thinwallet-to-private-neo-chain.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JoiT/p/thinwallet-to-private-neo-chain.html</guid>
<description>&lt;blockquote readability=&quot;6.9861751152074&quot;&gt;
&lt;p&gt;2017年底刚开始接触区块链，目前在被 &lt;a href=&quot;https://neo.org/&quot;&gt;NEO&lt;/a&gt; 折磨。&lt;br/&gt;一开始被&lt;a href=&quot;http://docs.neo.org/en-us/index.html&quot;&gt;官方文档&lt;/a&gt;和 &lt;a href=&quot;https://neo.org/download&quot;&gt;NEO-GUI&lt;/a&gt; 搞得体无完肤（尤其是传说中的 F12），也找了各种调试工具用来搞 &lt;a href=&quot;http://docs.neo.org/en-us/sc/introduction.html&quot;&gt;NeoContract&lt;/a&gt;，然并卵。&lt;br/&gt;直到有一天发现了 &lt;a href=&quot;https://github.com/NewEconoLab&quot;&gt;NewEconoLab&lt;/a&gt; ，在它的 &lt;a href=&quot;https://github.com/NewEconoLab&quot;&gt;github&lt;/a&gt; 上有一个项目 &lt;a href=&quot;https://github.com/NewEconoLab/neo-thinsdk-cs&quot;&gt;neo-thinsdk-cs&lt;/a&gt; ，用 C# 实现了一个轻钱包 —— &lt;a href=&quot;https://github.com/NewEconoLab/neo-thinsdk-cs&quot;&gt;thinWallet&lt;/a&gt; 。&lt;br/&gt;这个轻钱包只做了一件事情，就是做交易，它把整个交易的流程都体现出来了，给开发者展示了明确的可视化交易拼接流程（包括Attribute、Inputs、Outputs、Script、Witness等，我曾经用 VS F11 一行一行的调试跟踪过它的源代码，所有的这些交易必须的数据都组装好，放到一个数据结构里，非常清晰）。&lt;br/&gt;最重要的是分解了 UTXO 和 使得 Witness 变得可处理，以达成 &lt;a href=&quot;https://neo.org/download&quot;&gt;NEO-GUI&lt;/a&gt; 达不到的操作。&lt;br/&gt;此外，目前的 &lt;a href=&quot;https://github.com/NewEconoLab/neo-thinsdk-cs&quot;&gt;thinWallet&lt;/a&gt; ，默认接入到 Testnet，还不支持直接接入 Mainnet ，也不支持接入到 &lt;a href=&quot;http://docs.neo.org/en-us/node/private-chain.html&quot;&gt;NEO 私有链&lt;/a&gt; ，我们都知道 Testnet 上的 Gas 十分珍贵，&lt;a href=&quot;https://neo.org/Testnet/Create&quot;&gt;需要去申请才能有&lt;/a&gt;，而我们部署合约，动不动就消耗 990 Gas 。而在&lt;a href=&quot;http://docs.neo.org/en-us/node/private-chain.html&quot;&gt;自己的私有链&lt;/a&gt;上 Gas 就是大白菜了，随便乱玩都可以。&lt;br/&gt;所以为了方便部署合约调试，今天的任务是将 &lt;a href=&quot;https://github.com/NewEconoLab/neo-thinsdk-cs&quot;&gt;thinWallet&lt;/a&gt; 接入到&lt;a href=&quot;http://docs.neo.org/en-us/node/private-chain.html&quot;&gt;私有链&lt;/a&gt;中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;1、环境准备&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;基础要求&lt;/strong&gt;：四台 Debian 9（其他发行版随你喜欢，&lt;a href=&quot;http://docs.neo.org/en-us/node/setup.html&quot;&gt;单击此处查看支持的机器&lt;/a&gt;，建议创建一台虚拟机配好环境然后直接克隆，别忘了强制刷新 MAC 地址，要不然 IP 冲突） ，一台 Windows 10 ，.net core sdk，visual studio 2017 community，.net framework 4.7 SDK，NEO-CLI，搭私链跑共识，建钱包，拿到一亿的 NEO 币和至少 1000 个 Gas （相当于你的区块高度超过 125，这至少需要耗费31分钟），这些东西&lt;a href=&quot;http://docs.neo.org/en-us/node/private-chain.html&quot;&gt;文档&lt;/a&gt;里都有，此处不再赘述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;克隆项目&lt;/strong&gt;：&lt;a href=&quot;https://github.com/NewEconoLab/NeoBlock-Mongo-Storage&quot;&gt;NeoBlock-Mongo-Storage&lt;/a&gt;，&lt;a href=&quot;https://github.com/NewEconoLab/NEO_Block_API&quot;&gt;NEO_Block_API&lt;/a&gt;，&lt;a href=&quot;https://github.com/NewEconoLab/neo-thinsdk-cs&quot;&gt;neo-thinsdk-cs&lt;/a&gt;，三个项目都是直接用 master 分支就可以了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里解释一下克隆下来的三个项目是什么样的关系，三个都是 .net 项目&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;neo-thinsdk-cs 是一整个解决方案，用 vs 2017 打开，里面有一个 WPF 项目是 thinWallet ，把它设置为启动项目，直接 CTRL+F5 就可以运行了，当然默认是接入 Testnet 。项目里面有一个《NEO智能合约开发（一）不可能完成的任务.docx》，好好看看。运行结果如下：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/thinWallet-index.png&quot; alt=&quot;thinWallet-index&quot;/&gt;&lt;br/&gt;&lt;strong&gt;这里我们按第二个按钮 ThinWallet Test 就好了，进去是这样的界面：&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/thinWallet-test.png&quot; alt=&quot;thinWallet-test&quot;/&gt;&lt;/li&gt;
&lt;li&gt;我们可以看到右上角在调用一个 API for UTXO，这是一个 webapi ，由 NEO_Block_API 提供，大家可以看到这地方默认就是 Testnet ，区块高度也是 Testnet 的高度，切换网络那个按钮还没写功能。总共五个大面板都很好理解，第一个登录方式，第二个 api 信息，第三个账户信息（你的 utxo 将会出现在这里），第四个交易三要素，第五个决定是什么类型的交易。&lt;/li&gt;
&lt;li&gt;NEO_Block_API 里面用到了 mongodb ，所以我们的第三个项目 NeoBlock-Mongo-Storage 作为一个调度任务跑着，用来实时收集链上的交易信息存入 mongodb 中，供 NEO_Block_API 使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顺便说明一下， vs 2017 很人性化，你直接 CTRL+F5 或者生成解决方案 ，会帮你还原依赖库的，看见黄色感叹号不要慌。如果你无法打开项目或者无法还原或者出现任何异常，相信我，一定是你的打开方式不对，或者你改了里面的东西改错了，或者环境有问题，三个项目是绝对没有错误的，我验证了好几遍了，请回头好好检查自己的环境等基础设施吧。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;配置-neo_block_api&quot;&gt;配置 NEO_Block_API&lt;/h2&gt;
&lt;p&gt;到这里，基础环境全部搭建完毕，thinWallet 也可以在 Testnet 上正常使用了，那么接下来就需要开始接入私链了。首先我们要把 NEO_Block_API 的源代码增改一下，让它支持接入私链。&lt;br/&gt;我们先看一下源代码长什么样，还是 vs 2017 打开：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/neo-block-api-code-structure.png&quot; alt=&quot;neo-block-api-code-structure&quot;/&gt;&lt;br/&gt;我已经生成过解决方案了，所以依赖库都没问题了，结构非常简单。Controllers 是控制器，就是一些 web 接口在这里实现，lib 就是要用到的工具，RPC 定义了一些数据结构，再加一个 Startup.cs 和 Program.cs 文件，典型的 .net core web 项目。&lt;br/&gt;我们可以看到里边有一个 mongodbsettings.json 文件带了个黄色警告标志，说明这个文件丢失了，因为在 .gitignore 里边把它写进去了，所以 git 就把它忽略了，问题不大，我们删掉它重新建立一个一样名字的文件就好了，我们可以找一下在哪里用到了这个文件，你可以 CTRL+SHIFT+F 全局查找，最终发现在 &lt;strong&gt;mongoHelper.cs&lt;/strong&gt; 里面有这么一段：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public mongoHelper() {
    var config = new ConfigurationBuilder()
        .AddInMemoryCollection()    //将配置文件的数据加载到内存中
        .SetBasePath(System.IO.Directory.GetCurrentDirectory())   //指定配置文件所在的目录
        .AddJsonFile(&quot;mongodbsettings.json&quot;, optional: true, reloadOnChange: true)  //指定加载的配置文件
        .Build();    //编译成对象  
    mongodbConnStr_testnet = config[&quot;mongodbConnStr_testnet&quot;];
    mongodbDatabase_testnet = config[&quot;mongodbDatabase_testnet&quot;];
    neoCliJsonRPCUrl_testnet = config[&quot;neoCliJsonRPCUrl_testnet&quot;];

    mongodbConnStr_mainnet = config[&quot;mongodbConnStr_mainnet&quot;];
    mongodbDatabase_mainnet = config[&quot;mongodbDatabase_mainnet&quot;];
    neoCliJsonRPCUrl_mainnet = config[&quot;neoCliJsonRPCUrl_mainnet&quot;];

    mongodbConnStr_NeonOnline = config[&quot;mongodbConnStr_NeonOnline&quot;];
    mongodbDatabase_NeonOnline = config[&quot;mongodbDatabase_NeonOnline&quot;];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么事情就简单了，我们看到这里面一共有 8 个字段要用到，给它就是了，我们在新建的 mongodbsettings.json 文件写上这些内容：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbConnStr_testnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mongodb://127.0.0.1:27017&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbDatabase_testnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;testnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;neoCliJsonRPCUrl_testnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://47.96.168.8:20332&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbConnStr_mainnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mongodb://127.0.0.1:27017&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbDatabase_mainnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mainnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;neoCliJsonRPCUrl_mainnet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbConnStr_privatenet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mongodb://127.0.0.1:27017&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbDatabase_privatenet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;privatenet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;neoCliJsonRPCUrl_privatenet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://192.168.1.135:20332&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbConnStr_NeonOnline&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mongodb://127.0.0.1:27017&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbDatabase_NeonOnline&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;neononline&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mainnet 一时半会儿肯定用不着，我懒得写了，testnet 还是保留原样，加一个 privatenet 。注意 neoCliJsonRPCUrl_privatenet 这个字段的值是 &lt;a href=&quot;http://192.168.1.135:20332/&quot; class=&quot;uri&quot;&gt;http://192.168.1.135:20332&lt;/a&gt; ，192.168.1.135 这台机器是四台共识机中的一台，开了 RPC ，就是：&lt;code&gt;dotnet neo-cli.dll /rpc&lt;/code&gt; 。我们可以用 postman 来测试一下，随便找个接口，路由是： &lt;code&gt;http://192.168.1.135:20332&lt;/code&gt; 就用 &lt;a href=&quot;http://docs.neo.org/en-us/node/api/getbestblockhash.html&quot;&gt;getbestblockhash&lt;/a&gt; 吧：&lt;br/&gt;先看一下我跑的四个共识节点，我的共识跑了挺久了，现在高度接近 7000 ：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/consensus.png&quot; alt=&quot;consensus&quot;/&gt;&lt;br/&gt;接下来我们看一下 rpc 接口调用结果：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/rpc-test.png&quot; alt=&quot;rpc-test&quot;/&gt;&lt;br/&gt;如果你无法得到类似的结果，那还是得去多看看文档，跑跑共识。现在我们得到了正确结果，说明私链的 RPC 完全没有问题。此刻我们得到了第一个需要的接口就是刚才打开的 thinWallet 右上角 RPC Node 所需要的接口地址：&lt;code&gt;http://192.168.1.151:59908/api/privatenet&lt;/code&gt; 。&lt;br/&gt;mongodb 你得装一下（随你 linux 还是 windows，推荐 linux），为了演示方便，我装在了 windows 里面。装完之后就是 C:\Program Files\MongoDB\Server\3.6\bin 里面有一堆东西。其中 mongod.exe 这个是服务端，因为国际惯例有个 d 。别急着双击它，你得先建立两个文件夹：C:\data\db，不然双击就闪退了，其实你可以用 cmd 来打开，可以看到异常信息。现在你可以双击它了，结果就是一个控制台，打印了一堆日志，你可以用 mongodb 自带的可视化客户端连接一下。这边注意，我们不需要事先创建数据库。&lt;br/&gt;下面开始创建 webapi 接口，也就是新建一个控制器，在项目的 Controllers 文件夹下，新建一个类，取名：&lt;strong&gt;PrivatenetController.cs&lt;/strong&gt; ，然后把随便 &lt;strong&gt;TestnetController.cs&lt;/strong&gt; 或者 ** MainnetController.cs** 里面的内容全部复制粘贴到我们的 &lt;strong&gt;PrivatenetController.cs&lt;/strong&gt; 中，改一下两个地方，变成 privatenet ：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[Route(&quot;api/[controller]&quot;)]
public class PrivatenetController : Controller
{
    Api api = new Api(&quot;privatenet&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着 mongoHelper.cs 里面改一下，把私链的东西加进去：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public string mongodbConnStr_testnet = string.Empty;
public string mongodbDatabase_testnet = string.Empty;
public string neoCliJsonRPCUrl_testnet = string.Empty;

public string mongodbConnStr_mainnet = string.Empty;
public string mongodbDatabase_mainnet = string.Empty;
public string neoCliJsonRPCUrl_mainnet = string.Empty;

public string mongodbConnStr_privatenet = string.Empty;
public string mongodbDatabase_privatenet = string.Empty;
public string neoCliJsonRPCUrl_privatenet = string.Empty;

public string mongodbConnStr_NeonOnline = string.Empty;
public string mongodbDatabase_NeonOnline = string.Empty;

public mongoHelper() {
    var config = new ConfigurationBuilder()
        .AddInMemoryCollection()    //将配置文件的数据加载到内存中
        .SetBasePath(System.IO.Directory.GetCurrentDirectory())   //指定配置文件所在的目录
        .AddJsonFile(&quot;mongodbsettings.json&quot;, optional: true, reloadOnChange: true)  //指定加载的配置文件
        .Build();    //编译成对象  
    mongodbConnStr_testnet = config[&quot;mongodbConnStr_testnet&quot;];
    mongodbDatabase_testnet = config[&quot;mongodbDatabase_testnet&quot;];
    neoCliJsonRPCUrl_testnet = config[&quot;neoCliJsonRPCUrl_testnet&quot;];

    mongodbConnStr_mainnet = config[&quot;mongodbConnStr_mainnet&quot;];
    mongodbDatabase_mainnet = config[&quot;mongodbDatabase_mainnet&quot;];
    neoCliJsonRPCUrl_mainnet = config[&quot;neoCliJsonRPCUrl_mainnet&quot;];

    mongodbConnStr_privatenet = config[&quot;mongodbConnStr_privatenet&quot;];
    mongodbDatabase_privatenet = config[&quot;mongodbDatabase_privatenet&quot;];
    neoCliJsonRPCUrl_privatenet = config[&quot;neoCliJsonRPCUrl_privatenet&quot;];

    mongodbConnStr_NeonOnline = config[&quot;mongodbConnStr_NeonOnline&quot;];
    mongodbDatabase_NeonOnline = config[&quot;mongodbDatabase_NeonOnline&quot;];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，Api.cs 里面加私链的东西：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public Api(string node) {
    netnode = node;
    switch (netnode) {
        case &quot;testnet&quot;:
            mongodbConnStr = mh.mongodbConnStr_testnet;
            mongodbDatabase = mh.mongodbDatabase_testnet;
            neoCliJsonRPCUrl = mh.neoCliJsonRPCUrl_testnet;
            break;
        case &quot;mainnet&quot;:
            mongodbConnStr = mh.mongodbConnStr_mainnet;
            mongodbDatabase = mh.mongodbDatabase_mainnet;
            neoCliJsonRPCUrl = mh.neoCliJsonRPCUrl_mainnet;
            break;
        case &quot;privatenet&quot;:
            mongodbConnStr = mh.mongodbConnStr_privatenet;
            mongodbDatabase = mh.mongodbDatabase_privatenet;
            neoCliJsonRPCUrl = mh.neoCliJsonRPCUrl_privatenet;
            break;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打完收工我们来试一下，CTRL+F5，我们可以看到内置的 IIS Express 被启动了，可以访问这个地址：&lt;br/&gt;&lt;code&gt;http://localhost:59908/api/privatenet&lt;/code&gt;&lt;br/&gt;显示的结果是：&lt;br/&gt;&lt;code&gt;{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:0,&quot;error&quot;:{&quot;code&quot;:-100,&quot;message&quot;:&quot;Parameter Error&quot;,&quot;data&quot;:&quot;Value cannot be null.\r\nParameter name: s&quot;}}&lt;/code&gt;&lt;br/&gt;那说明 webapi 本身已经没问题了，我们看到用的是 localhost ，如果想局域网都能用的话我们可以改一下 .vs\config\applicationhost.config 里面的配置再运行，或者我们用典型的 .net core 方法（我采用这种），就是在 Program.cs 里面加一点料：&lt;code&gt;.UseUrls(&quot;http://*:59908&quot;)&lt;/code&gt;，详细如下，这是允许局域网 ip 访问的第一步:&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public static IWebHost BuildWebHost(string[] args) =&amp;gt;
            WebHost.CreateDefaultBuilder(args)
                .UseStartup&amp;lt;Startup&amp;gt;()
                .UseUrls(&quot;http://*:59908&quot;)
                .Build();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步我们改一下启动方式，先重新生成解决方案，然后把 &lt;code&gt;appsettings.json&lt;/code&gt; 和 &lt;code&gt;mongodbsettings.json&lt;/code&gt; 两个文件复制到 &lt;code&gt;bin\Debug\netcoreapp2.0&lt;/code&gt; 里面去，关掉刚才启动的 IIS Express，然后我们以管理员身份打开 cmd ，cd 到你的 &lt;code&gt;bin\Debug\netcoreapp2.0&lt;/code&gt; 文件夹里面，然后 &lt;code&gt;dotnet NEO_Block_API.dll&lt;/code&gt; 就好了，结果如下：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/dotnet-neo-block-api.png&quot; alt=&quot;dotnet-neo-block-api&quot;/&gt;&lt;br/&gt;你可以去局域网的其他机器上用 postman 访问一下，没啥问题，用 &lt;code&gt;getblockcount&lt;/code&gt; 接口吧，路由是这个： &lt;code&gt;http://192.168.1.151:59908/api/privatenet&lt;/code&gt; ，文档在这：&lt;a href=&quot;http://www.xiaoyaoji.cn/share/1H0gjTDtfk/1GzzPWtpFG&quot;&gt;单击此处&lt;/a&gt; 。&lt;br/&gt;我在这台 windows 10 上操作的，IP 是 &lt;code&gt;192.168.1.151&lt;/code&gt; ，所以我们得到了第二个想要的接口地址，就是 API for UTXO 的 api 地址：&lt;code&gt;http://192.168.1.151:59908/api/privatenet&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;thinwallet-接入私链&quot;&gt;thinWallet 接入私链&lt;/h3&gt;
&lt;p&gt;现在我们来观察一下 thinWallet 的代码结构：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/thinWallet-code-structure.png&quot; alt=&quot;thinWallet-code-structure&quot;/&gt;&lt;br/&gt;很显然，上面三个项目都是通用库，第三个是用户端，而且我们只需要改一个地方就可以了，双击打开 &lt;strong&gt;Window_thinwallet.xaml&lt;/strong&gt; ，WPF 的界面文件，打开是这样的：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/wpf-full.png&quot; alt=&quot;wpf-full&quot;/&gt;&lt;br/&gt;简直不能忍，不仅丑爆了，还影响阅读和写代码，我们做一下调整，下面图里面中间，左右两个红圈圈出来的按钮，先按左边那个，上下窗口对调，然后按右边那个，把下窗口缩进去，这样就是纯代码界面了，又好看又能高效阅读。&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/wpf-adjust.png&quot; alt=&quot;wpf-adjust&quot;/&gt;&lt;br/&gt;接下来我们要把它接入私链，其实就该两个接口地址，就在这个界面代码里面，thinWallet 对这两个地址目前是写死在界面上的，我们在界面代码里面查找一下 CTRL+F ，输入 &lt;code&gt;47.96&lt;/code&gt; 就能找到了，一共两个地方，分别对应的填进去：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/private-api.png&quot; alt=&quot;private-api&quot;/&gt;&lt;br/&gt;打完收工我们来访问一下，CTRL+F5：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/thinWallet-error-height.png&quot; alt=&quot;thinWallet-error-height&quot;/&gt;&lt;br/&gt;我们发现一个很诡异的数字，下面那个直接访问 neo rpc 的已经完全正常了，但是上面那个访问 webapi 的居然是这么个诡异的数字，那么碰到问题，我们首先得想到的事情只有一件，就是 &lt;strong&gt;F5&lt;/strong&gt;，首先我们先打开 Window_thinwallet.xaml 这个文件的后台文件，就是 &lt;code&gt;Window_thinwallet.xaml.cs&lt;/code&gt; ，我们观察一下里面的代码，发现有一个异步更新界面的地方：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/update-ui-height.png&quot; alt=&quot;update-ui-height&quot;/&gt;&lt;br/&gt;再来看一下这个 &lt;code&gt;api_getHeight&lt;/code&gt; 是怎么实现的，F12 过去：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/update-ui-request.png&quot; alt=&quot;update-ui-request&quot;/&gt;&lt;br/&gt;真相在这里，请求了 webapi 的一个 &lt;code&gt;getblockcount&lt;/code&gt; 的接口，那么现在来看一下 NEO_Block_API 项目对 &lt;code&gt;getblockcount&lt;/code&gt; 是怎么实现的：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/impl-getblockcount.png&quot; alt=&quot;impl-getblockcount&quot;/&gt;&lt;br/&gt;这时候就发现了，这里居然在调用 mongodb 的数据，我们回想一下，似乎没有任何操作 mongodb 的地方，也就是说没有任何数据，那么我们可以猜到，&lt;code&gt;getblockcount&lt;/code&gt; 接口返回了一个 0 ，而且在我们的 &lt;code&gt;Window_thinwallet.xaml.cs&lt;/code&gt; 文件异步更新界面的地方，最后 &lt;code&gt;var height = ulong.Parse(json[0].AsDict()[&quot;blockcount&quot;].ToString()) - 1;&lt;/code&gt; 来了这么一句，很明确了，无符号长整型，减了个 1 ，导致变成了那个数字，现在来 F5 证明一下，断点打在 &lt;code&gt;api_getHeight&lt;/code&gt; 这个方法的最后一句 return 的代码上：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/debug.png&quot; alt=&quot;debug&quot;/&gt;&lt;br/&gt;其中 result 是请求结果，就是 0 ，已经说明了一切。那还差什么呢，想想我们好像漏了一个项目，没错还有最后一个调度任务项目没配置好。&lt;/p&gt;
&lt;h2 id=&quot;neoblock-mongo-storage-开启对私链的任务调度&quot;&gt;NeoBlock-Mongo-Storage 开启对私链的任务调度&lt;/h2&gt;
&lt;p&gt;老样子观察代码：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/storage-structure.png&quot; alt=&quot;storage-structure&quot;/&gt;&lt;br/&gt;很简单，一个入口，两个数据接口，一个工具，没了。&lt;br/&gt;我们可以发现在 &lt;code&gt;Program.cs&lt;/code&gt; 里面有这么一段：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;var config = new ConfigurationBuilder()
    .AddInMemoryCollection()    //将配置文件的数据加载到内存中
    .SetBasePath(System.IO.Directory.GetCurrentDirectory())   //指定配置文件所在的目录
    .AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true)  //指定加载的配置文件
    .Build();    //编译成对象  
mongodbConnStr = config[&quot;mongodbConnStr&quot;];
mongodbDatabase = config[&quot;mongodbDatabase&quot;];
NeoCliJsonRPCUrl = config[&quot;NeoCliJsonRPCUrl&quot;];
sleepTime = int.Parse(config[&quot;sleepTime&quot;]);
if (int.Parse(config[&quot;utxoIsSleep&quot;]) == 1) {
    utxoIsSleep = true;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很简单了，加个文件，&lt;code&gt;appsettings.json&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbConnStr&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mongodb://127.0.0.1:27017&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbDatabase&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;privatenet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;NeoCliJsonRPCUrl&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://192.168.1.135:20332&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;sleepTime&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;utxoIsSleep&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样道理，重新生成解决方案，把这个 json 文件复制到 bin\Debug\netcoreapp2.0 里面去，然后管理员身份打开 cmd ，然后 cd 进去，然后 &lt;code&gt;dotnet NeoBlockMongoStorage.dll&lt;/code&gt; ，看下结果：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/GIF.gif&quot; alt=&quot;GIF&quot;/&gt;&lt;br/&gt;这个狂暴的气息，然后我们开一下 thinWallet，看下结果：&lt;br/&gt;&lt;img src=&quot;http://www.myjoit.com/thinWallet/update-height.gif&quot; alt=&quot;update-height&quot;/&gt;&lt;br/&gt;这个高度正在快速地向最高高度同步过去，同步完成之后，我们就完成了 thinWallet 接入私链的所有步骤，你的 thinWallet 就可以在私链中随便玩了。&lt;br/&gt;同步完成之后，我们最好把 NeoBlock-Mongo-Storage 项目的 appsettings.json 改一下，把 &lt;code&gt;sleepTime&lt;/code&gt; 从 0 改为 2000，&lt;code&gt;utxoIsSleep&lt;/code&gt; 从 0 改为 1，因为调度是个无限循环，如果不让它睡一会，就会一直浪费你的 cpu ，同步完成了，没那么多数据要写了，让它休息休息，这样造成的效果是，上面那个高度永远比下面那个高度更新慢半拍。单位是毫秒。自己随便调节。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbConnStr&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;mongodb://127.0.0.1:27017&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mongodbDatabase&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;privatenet&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;NeoCliJsonRPCUrl&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://192.168.1.135:20332&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;sleepTime&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;2000&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;utxoIsSleep&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后对着这两篇质量文档去玩吧。&lt;br/&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s/7ifwcY-UVj7qquDRpq1zUA&quot;&gt;不可能任务一&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s/qe7lV71__FygKxO9E4_Oew&quot;&gt;不可能任务二&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 24 Feb 2018 22:30:00 +0000</pubDate>
<dc:creator>JoiT</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JoiT/p/thinwallet-to-private-neo-chain.html</dc:identifier>
</item>
<item>
<title>揽货最短路径解决方案算法 - C# 蚁群优化算法实现 - McKay</title>
<link>http://www.cnblogs.com/aarond/p/ant_wuliu.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aarond/p/ant_wuliu.html</guid>
<description>&lt;p&gt;需求为（自己编的，非实际项目）：&lt;/p&gt;
&lt;p&gt;某配送中心进行揽货，目标客户数为50个客户，配送中心目前的运力资源如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;现有车辆5台&lt;/li&gt;
&lt;li&gt;单台运力最大行驶距离200千米&lt;/li&gt;
&lt;li&gt;单台运力最大载重公斤1吨&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;问：运力怎样走法才能以最低的成本完成针对这50个客户的揽货行为&lt;/p&gt;
&lt;p&gt;是个最优化问题（运筹学），我们只考虑简化后的模型，不考虑路面交通、时间窗口这些复杂计算，用蚁群优化算法来实现接近最优解的计算。&lt;/p&gt;
&lt;p&gt;关于蚁群优化算法的理论请看这篇文章：&lt;a href=&quot;https://www.cnblogs.com/asxinyu/p/Path_Optimization_Tsp_Problem_Ant_System_CSharp.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/asxinyu/p/Path_Optimization_Tsp_Problem_Ant_System_CSharp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面的基本算法已经写明了，也有demo，本文是针对如何适应到具体业务的介绍（本文用的蚁群核心代码也是上文中改来的）&lt;/p&gt;
&lt;p&gt;蚁群主要步骤为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;初始化（如信息素）&lt;/li&gt;
&lt;li&gt;开始迭代
&lt;ol&gt;&lt;li&gt;构造各个蚂蚁，以及蚂蚁走的路径（核心是针对后续节点的SELECT）&lt;/li&gt;
&lt;li&gt;计算适应度&lt;/li&gt;
&lt;li&gt;加入优秀蚂蚁到跟踪列表&lt;/li&gt;
&lt;li&gt;更新信息素（根据适应度）&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;结束迭代&lt;/li&gt;
&lt;li&gt;给出报告&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;原文章里用的是TSP做DEMO，比较难看清楚如何应用到实际业务逻辑中&lt;/p&gt;
&lt;p&gt;同样的，最困惑的核心中的核心，类似遗传算法，也是适应度值的计算，有的地方是一步一步增加vlaue，比如单纯距离的增加，但是复杂点的都没法这么操作，而是要看整体路径的指标（包括惩罚等）&lt;/p&gt;
&lt;p&gt;由于蚁群优化算法和本文代码都能下载，所以只介绍适应度value的计算&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/aarond/%E7%89%A9%E6%B5%81%E9%85%8D%E9%80%81%E8%B7%AF%E5%BE%84%EF%BC%88ANT%EF%BC%89.rar&quot; target=&quot;_blank&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; FitnessValueCalculator
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; 拥有运力车辆数 = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; 单台运力最大行驶距离 = &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; 单台运力最大载重公斤 = &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; 惩罚权重 = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Calculator(ShortestDeliverAnt ant)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; paths = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; distances = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; weights = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; 当前行驶距离 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; 当前运力载重 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; 当前行驶路径 = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; 当前所需运力数 = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算枢纽到第一个客户配送距离&lt;/span&gt;
            当前行驶路径 += &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HUB--&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ant.PathNodes.First();
            当前行驶距离 &lt;/span&gt;+=&lt;span&gt; ant.DistanceHelper.hub.DistanceTo(ant.DistanceHelper.customers[ant.PathNodes.First()]);
            当前运力载重 &lt;/span&gt;+=&lt;span&gt; ant.DistanceHelper.customers[ant.PathNodes.First()].需求量_公斤;

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; path &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ant.Edges)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fromNodeId =&lt;span&gt; path.Key;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toNodeId =&lt;span&gt; path.Value;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fromNode =&lt;span&gt; ant.DistanceHelper.customers[fromNodeId];
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toNode =&lt;span&gt; ant.DistanceHelper.customers[toNodeId];

                &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; newAddedDistance2Customer = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; newAddedDistance2Hub = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; newAddedWeight = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

                newAddedDistance2Customer &lt;/span&gt;=&lt;span&gt; fromNode.DistanceTo(toNode);
                newAddedDistance2Hub &lt;/span&gt;=&lt;span&gt; toNode.DistanceTo(ant.DistanceHelper.hub);

                newAddedWeight &lt;/span&gt;=&lt;span&gt; toNode.需求量_公斤;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (当前行驶距离 + newAddedDistance2Customer + newAddedDistance2Hub &amp;lt;=&lt;span&gt; 单台运力最大行驶距离
                    &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt;
                    当前运力载重 &lt;/span&gt;&amp;lt;=&lt;span&gt; 单台运力最大载重公斤)
                {
                    当前行驶距离 &lt;/span&gt;+=&lt;span&gt; newAddedDistance2Customer;
                    当前运力载重 &lt;/span&gt;+=&lt;span&gt; newAddedWeight;
                    当前行驶路径 &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; toNodeId;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加当前客户距离、以及回到HUB的距离&lt;/span&gt;
                    当前行驶距离 +=&lt;span&gt; fromNode.DistanceTo(ant.DistanceHelper.hub);
                    distances.Add(当前行驶距离);

                    weights.Add(当前运力载重);

                    当前行驶路径 &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&amp;gt;HUB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    paths.Add(当前行驶路径);

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;RESET&lt;/span&gt;
                    当前行驶距离 = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    当前行驶距离 &lt;/span&gt;+=&lt;span&gt; ant.DistanceHelper.hub.DistanceTo(toNode);

                    当前运力载重 &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    当前运力载重 &lt;/span&gt;+=&lt;span&gt; toNode.需求量_公斤;

                    当前行驶路径 &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                    当前行驶路径 &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HUB--&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; toNodeId;

                    当前所需运力数&lt;/span&gt;++&lt;span&gt;;
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回到枢纽&lt;/span&gt;
            当前行驶距离 +=&lt;span&gt; ant.DistanceHelper.customers[ant.PathNodes.Last()].DistanceTo(ant.DistanceHelper.hub);
            distances.Add(当前行驶距离);

            当前行驶路径 &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&amp;gt;HUB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            paths.Add(当前行驶路径);



            &lt;/span&gt;&lt;span&gt;int 惩罚系数 = 0;
            if (当前所需运力数 &amp;gt; 拥有运力车辆数)
                惩罚系数 = 当前所需运力数 -&lt;/span&gt;&lt;span&gt;&lt;span&gt; 拥有运力车辆数;&lt;/span&gt;


            ant.运输距离顺序 &lt;/span&gt;=&lt;span&gt; distances;
            ant.运输路径 &lt;/span&gt;=&lt;span&gt; paths;

            ant.Total行驶距离 &lt;/span&gt;=&lt;span&gt; distances.Sum();
            ant.Total运力数 &lt;/span&gt;=&lt;span&gt; 当前所需运力数;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ant.Total行驶距离&lt;span&gt; + 惩罚系数 *&lt;/span&gt;&lt;span&gt;&lt;span&gt; 惩罚权重&lt;/span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;ant.DistanceHelper.hub: 是配送中心的info，有地址信息&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;ant.DistanceHelper.customers: 是50个客户的info，也有地址信息&lt;br/&gt;目前为了简化，是以街道距离来计算距离的&lt;/span&gt;
&lt;/pre&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;span readability=&quot;4&quot;&gt;目前代码只是单目标优化算法，非多目标优化，后续研究研究再发文。&lt;br/&gt;上述代码其实就是第一辆车从配送中心开出到第一个客户位置，然后加上客户需求（揽的货物重量）&lt;br/&gt;接着判断能否开到下一个客户那里揽货，如果里程、重量都在限制条件只能，就开过去，不满足条件就开回枢纽；然后继续判断第二辆车，也是这么个逻辑&lt;br/&gt;最终车辆的数量就是完成这50个客户揽货所需的运力数&lt;br/&gt;万一碰到所需运力超出了限制（代码中为5辆车），这时就需要惩罚，由于最终函数返回是double，而且是越小代表越优越，因此碰到了需要惩罚的情况，实际就是大幅度的增加返回值（适应度值）&lt;br/&gt;红色部分就是惩罚变量部分。&lt;p&gt;各种优化算法的核心写完框架后基本就不怎么变化了，最易变的其实是适应度函数的计算，如果适应度计算中用到了预测技术，还得在上面那函数里调机器学习的代码，感觉强化学习中动作施加后给出的反馈值也是这么个值&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/aarond/%E7%89%A9%E6%B5%81%E9%85%8D%E9%80%81%E8%B7%AF%E5%BE%84%EF%BC%88ANT%EF%BC%89.rar&quot; target=&quot;_blank&quot;&gt;代码下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/68230/201802/68230-20180225032136955-1016057116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 24 Feb 2018 19:27:00 +0000</pubDate>
<dc:creator>McKay</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aarond/p/ant_wuliu.html</dc:identifier>
</item>
<item>
<title>R语言-来自Prosper的贷款数据探索 - 月上贺兰</title>
<link>http://www.cnblogs.com/luhuajun/p/8468091.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luhuajun/p/8468091.html</guid>
<description>&lt;p&gt;案例分析:Prosper是美国的一家P2P在线借贷平台，网站撮合了一些有闲钱的人和一些急用钱的人。用户若有贷款需求，可在网站上列出期望数额和可承受的最大利率。潜在贷方则为数额和利率展开竞价。&lt;/p&gt;&lt;p&gt;　　　　本项目拟通过该数据集的探索，结合自己的理解进行分析，最终目的的是初步预测哪些人贷款后会还款、哪些人会赖账。&lt;/p&gt;
&lt;p&gt;　　1.探索数据集&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; loandata = read.csv(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prosperLoanData.csv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; str(loandata)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结论:一共有81个变量,113937个对象&lt;/p&gt;
&lt;p&gt;　　2.选择分析的变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;由于有81个变量，为简化分析，仅选取其中有代表性的13个变量。变量选取如下：

&lt;/span&gt;1. **ListingCreation**&lt;span&gt;: 列表创建时间。

&lt;/span&gt;2. **Term**&lt;span&gt;: 贷款期限，期限越长的，利率应当越高

&lt;/span&gt;3. **LoanStatus**&lt;span&gt;: 贷款状态（Completed、Current、Defaulted、Chargedoff等）

&lt;/span&gt;4. **BorrowerBorrowerRate**&lt;span&gt;: 借款利率。

&lt;/span&gt;5. **DelinquenciesLast7Years**&lt;span&gt;: 信用资料提交时借款人过去7年违约次数。

&lt;/span&gt;6. **StatedMonthlyIncome**&lt;span&gt;: 客户自己声称的月收入。

&lt;/span&gt;7. **IsBorrowerHomeowner**&lt;span&gt;: 借款人是否拥有住房。

&lt;/span&gt;8. **InquiriesLast6Months**&lt;span&gt;: 最近6个月的征信记录查询次数。一般来说，征信查询次数越多，该主体的贷款申请就越多。

&lt;/span&gt;9. **DebtToIncomeRatio**&lt;span&gt;: 借款人的债务收入比，债务收入比越高说明筹资者财务状况越差，还款能力越低。

&lt;/span&gt;10. **Occupation**&lt;span&gt;: 贷款人职业

&lt;/span&gt;11. **CreditGrade/ProsperRating(Alpha)**&lt;span&gt;: 信用等级，前者反映的是2009年7月1日前客户的信用等级，后者反映的是2009年7月1日后的信用等级。信用等级越高，其偿债能力越强。

&lt;/span&gt;12. **CreditScore**&lt;span&gt;: 由消费信用公司提供的消费信用评分，同信用评级作用。

&lt;/span&gt;13. **BankCardUse**: 信用资料提交时借款人信用卡使用额度和信用卡总透支额度的百分比，本文将这个数据分成四组（mild use; medium use; heavy use; super use）
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　3.数据预处理&lt;/p&gt;
&lt;p&gt;　　　　3.1贷款状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 查看贷款状态&lt;br/&gt;1&lt;/span&gt; table(loandata$LoanStatus)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224095301422-1317468808.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; # 2.整合数据&lt;br/&gt;# 针对LoanStatus进行重构&lt;br/&gt;# 1.将所有含有&quot;Past Due&quot;字段的值统一为&quot;PastDue&quot;&lt;br/&gt;# 2.将&quot;Cancelled&quot;归类到&quot;Current&quot;中&lt;br/&gt;# 3.将&quot;defaulted&quot;归类到&quot;Chargedoff&quot;中&lt;br/&gt;# 4.将&quot;FinalPaymentInProgress&quot;归类到&quot;Completed&quot;中&lt;br/&gt;1&lt;/span&gt; PastDue &amp;lt;- c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Past Due (&amp;gt;120 days)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;              &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Past Due (1-15 days)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;              &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Past Due (16-30 days)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;              &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Past Due (31-60 days)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;              &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Past Due (61-90 days)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;              &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Past Due (91-120 days)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; loandata$LoanStatus &amp;lt;-&lt;span&gt; as.character(loandata$LoanStatus)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; loandata$LoanStatus[loandata$LoanStatus %&lt;span&gt;in&lt;/span&gt;% PastDue] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PastDue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; loandata$LoanStatus[loandata$LoanStatus == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cancelled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; loandata$LoanStatus[loandata$LoanStatus == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Defaulted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Chargedoff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; loandata$LoanStatus[loandata$LoanStatus == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FinalPaymentInProgress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Completed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224095816544-961869321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3.再次整合数据&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1.然后将&quot;PastDue&quot;与&quot;Chargedoff&quot;合并，表示未按时还款&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2.将&quot;Current&quot;和&quot;Completed&quot;合并，表示按时还款未出现不良记录的&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; loandata$LoanStatus[loandata$LoanStatus == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PastDue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Chargedoff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; loandata$LoanStatus[loandata$LoanStatus == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Completed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; table(loandata$LoanStatus)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224100124922-955598172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　3.2消费信用评分&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对借款人的消费信用评级，数据中有高低范围，将这两个数值取平均值做计算&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; loandata$CreditScore &amp;lt;- (loandata$CreditScoreRangeLower + loandata$CreditScoreRangeUpper) / 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　3.3信用评级&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 因2009年7月1日，Prosper的信用评级模型发生了改变，所以需要进行分段处理&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 先处理2009年7月1日前的数据&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; loandata$CreditGrade &amp;lt;-&lt;span&gt; ordered(loandata$CreditGrade,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                                 levels = c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 再处理2009年7月1日后的数据&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; loandata$ProsperRating..Alpha. &amp;lt;-&lt;span&gt; ordered(loandata$ProsperRating..Alpha.,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                                           levels = c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 因为2009年7月1日是一个数据节点，因此将数据分成两段处理&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; loandata$LoanOriginationDate &amp;lt;-&lt;span&gt; as.Date(loandata$LoanOriginationDate)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; loandata$Phase[loandata$LoanOriginationDate &amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;After 2009&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; loandata$Phase[loandata$LoanOriginationDate &amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Before 2009&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; table(loandata$Phase)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224100643633-579831403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　3.4信用卡使用程度&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义&quot;Mild Use&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;loandata$BankCardUse[
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     loandata$BankcardUtilization &amp;lt;&lt;span&gt; quantile(loandata$BankcardUtilization, 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                                             probs = 0.25, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; TRUE)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; ] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mild Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义“Medium Use”&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;loandata$BankCardUse[
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     loandata$BankcardUtilization &amp;gt;=&lt;span&gt; quantile(loandata$BankcardUtilization,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                                              probs = 0.25, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; TRUE) 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &amp;amp;
&lt;span&gt;12&lt;/span&gt;         loandata$BankcardUtilization &amp;lt;&lt;span&gt; quantile(loandata$BankcardUtilization,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                                                     probs = 0.5, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt; TRUE)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; ] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Medium Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义“Heavy Use”&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;loandata$BankCardUse[
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     loandata$BankcardUtilization &amp;gt;=&lt;span&gt; quantile(loandata$BankcardUtilization,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                                              probs = 0.5, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; TRUE)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &amp;amp;
&lt;span&gt;21&lt;/span&gt;         loandata$BankcardUtilization &amp;lt;&lt;span&gt; quantile(loandata$BankcardUtilization,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                                                 probs = 0.75, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; TRUE)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; ] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Heavy Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义“Super Use”&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; loandata$BankCardUse[loandata$BankcardUtilization &amp;gt;= 0.75] &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Super Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; loandata$BankCardUse &amp;lt;-&lt;span&gt; factor(loandata$BankCardUse,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                                levels = c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mild Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                                           &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Medium Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                                           &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Heavy Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                                           &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Super Use&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; table(loandata$BankCardUse)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224100857643-2108532529.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4.探索数据集&lt;/p&gt;
&lt;p&gt;　　　　4.1单变量探索&lt;/p&gt;
&lt;p&gt;　　　　　　4.1.1贷款期限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = as.factor(Term)), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_histogram(stat = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;3&lt;/span&gt;     xlab(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Term&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; table(loandata$Term, dnn = (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Term&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224101122512-1970721501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224101138035-371260504.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:一年期（12个月）的有1614笔，三年期（36个月）的有87778笔，五年期（60个月）的有24545笔。由此，平台上的贷款以中长期为主，且三年期占绝大多数。经查阅资料发现，Prosper平台是　　　　　　　　　　2009年以后才开始提供一年期和五年期贷款品种。&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.2贷款利率&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
ggplot(aes(x = BorrowerRate), data = loandata) +&lt;span&gt;
    geom_histogram(binwidth &lt;/span&gt;= 0.01) +&lt;span&gt;
    scale_x_continuous(breaks &lt;/span&gt;= seq(0, 0.5, 0.05)) +&lt;span&gt;
    facet_wrap(&lt;/span&gt;~ Term, ncol = 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224101445722-188950700.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:平台上的借款利率多集中在0.08至0.2这个区间，另外，利率0.32附近也拥有大量的观测值。并且贷款利率似乎与贷款期限关系并不明显，未如经验判断的“期限越长、利率越高”。&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.3过去7年的违约次数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = DelinquenciesLast7Years), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_density(aes(fill = I(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))) +
&lt;span&gt;3&lt;/span&gt;     coord_cartesian(xlim =&lt;span&gt; c(0, quantile(loandata$DelinquenciesLast7Years,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                                                probs = 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = TRUE)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224103720793-2070303248.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:大部分借款人在过去7年内的违约次数均为0，这说明整个平台借款人的信用状况较好&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.4月收入,月收入很大情况下能够反映借贷人的还款能力&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x =&lt;span&gt; StatedMonthlyIncome), 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data = subset(loandata, loandata$StatedMonthlyIncome &amp;lt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;                         quantile(loandata$StatedMonthlyIncome, 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                                   probs = 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = TRUE))) +
&lt;span&gt;5&lt;/span&gt;     geom_histogram(binwidth = 500) +
&lt;span&gt;6&lt;/span&gt;     scale_x_continuous(breaks = seq(0, 21000, 500)) +
&lt;span&gt;7&lt;/span&gt;     geom_vline(xintercept = 2500, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;8&lt;/span&gt;     geom_vline(xintercept = 6000, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224103945474-1202803430.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:大部分借贷人的月薪在2500~6000美金之间&lt;/p&gt;
&lt;p&gt; 　　　　　　　  4.1.5是否拥有房屋(有房子的要比没有房屋的人偿还能力强)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = IsBorrowerHomeowner), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_bar()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224104239765-809084194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:有房屋的借贷人略微大于没房屋的借贷人&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.6借款人征信查询的次数,征信查询的次数越多表示借款人近期的申请的贷款越多,资金越紧张&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
ggplot(aes(x = InquiriesLast6Months, fill = I(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)), data = loandata) +&lt;span&gt;
    geom_density(binwidth &lt;/span&gt;= 1) +&lt;span&gt;
    geom_vline(xintercept &lt;/span&gt;=&lt;span&gt; quantile(loandata$InquiriesLast6Months, 
                                     probs &lt;/span&gt;= 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; TRUE), 
               linetype &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dashed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +&lt;span&gt;
    coord_cartesian(xlim &lt;/span&gt;=&lt;span&gt; c(0, quantile(loandata$InquiriesLast6Months,
                                         probs &lt;/span&gt;= 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = TRUE)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224104529240-1749360144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:95%的借款人征信查询次数在5次及以下&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.7负债收益比(反映了借款人的杠杆率,如果大于1表示很难偿还贷款,极易引发坏账)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = DebtToIncomeRatio), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_histogram(binwidth = 0.05) +
&lt;span&gt;3&lt;/span&gt;     scale_x_continuous(breaks = seq(0, 10, 0.5)) +
&lt;span&gt;4&lt;/span&gt;     geom_vline(xintercept =&lt;span&gt; quantile(loandata$DebtToIncomeRatio, 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                                      probs = 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; TRUE),
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                linetype = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dashed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224105114610-733754002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:95%的借款人负债收入比小于0.5，另外注意到，极少数人的负债收入比达到甚至超过10,总体来说平台的负债收益比较低,资质较好&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.8借款人职业&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
data_count &amp;lt;- loandata %&amp;gt;%&lt;span&gt; 
    group_by(Occupation) &lt;/span&gt;%&amp;gt;%&lt;span&gt; 
    summarise(n &lt;/span&gt;=&lt;span&gt; n())

ggplot(aes(x &lt;/span&gt;= reorder(Occupation, -n), y =&lt;span&gt; n),
       data &lt;/span&gt;= data_count) +&lt;span&gt;
    geom_bar(stat &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;identity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +&lt;span&gt;
    theme(axis.text.x &lt;/span&gt;= element_text(angle = 90&lt;span&gt;,
                                     vjust &lt;/span&gt;= 0.5&lt;span&gt;,
                                     hjust &lt;/span&gt;= 1))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224105406176-2016489045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:职业中，选择“other”的人数最多，说明很多人在申请贷款时出于隐私或者其他原因不选择职业，该数据的真实性存疑&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.9贷款状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ggplot(aes(x = LoanStatus), data = loandata) +&lt;span&gt;
    geom_bar()
table(loandata$LoanStatus)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224105544303-1291268802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224105600110-1141698143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:Prosper平台整体贷款的违约率约为16.74%&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.10贷款日期&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; loandata$ListingCreationDate &amp;lt;-&lt;span&gt; as.Date(loandata$ListingCreationDate)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; ggplot(aes(x = ListingCreationDate), data = loandata) +
&lt;span&gt;4&lt;/span&gt;     geom_histogram()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224105931080-984650234.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:09年前后，平台贷款成交量几乎为0，通过查阅相关资料发现，Prosper平台因涉诉被迫于2008年11月24日暂停运营，并于2009年7月1日重新开始营运。&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.1.11客户信用评价&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; p1 &amp;lt;- ggplot(aes(x = CreditScore), data = loandata) +
&lt;span&gt; 2&lt;/span&gt;     geom_histogram()+
&lt;span&gt; 3&lt;/span&gt;     coord_cartesian(xlim = c(400, 900)) +
&lt;span&gt; 4&lt;/span&gt;     scale_x_continuous(breaks = seq(400, 900, 50)) +
&lt;span&gt; 5&lt;/span&gt;     ggtitle(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The Histogram of Borrowers' CreditScore&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; p2 &amp;lt;- ggplot(aes(x =&lt;span&gt; CreditGrade),
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;              data = subset(loandata, LoanOriginationDate &amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +
&lt;span&gt; 9&lt;/span&gt;     geom_bar() +
&lt;span&gt;10&lt;/span&gt;     scale_x_discrete(limits = c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +
&lt;span&gt;11&lt;/span&gt;     ggtitle(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreditGrade Before 2009&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; p3 &amp;lt;- ggplot(aes(x =&lt;span&gt; ProsperRating..Alpha.),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;              data = subset(loandata, LoanOriginationDate &amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +
&lt;span&gt;15&lt;/span&gt;     geom_bar() +
&lt;span&gt;16&lt;/span&gt;     scale_x_discrete(limits = c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +
&lt;span&gt;17&lt;/span&gt;     ggtitle(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreditGrade After 2009&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; grid.arrange(p1, p2, p3, ncol = 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224110059593-330396291.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:大部分借款人的消费信用评分都高于600分，集中于700分左右，而2009年前后的信用评级也显示出较为优秀的信用资质B级。&lt;br/&gt;　　　　　　　　4.1.12信用卡使用情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;ggplot(aes(BankCardUse), 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data = subset(loandata, !&lt;span&gt;is&lt;/span&gt;.na(BankcardUtilization))) +
&lt;span&gt;3&lt;/span&gt;     geom_bar()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224110253783-1827392635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:大部分人都处于Super Use状态，借款人的还款能力会因此而打折扣&lt;/p&gt;
&lt;p&gt;　　　　　单变量分析总结论:　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
数据集中共含有113937笔贷款记录，每笔记录均有12个特征描述，分别是：贷款日期（ListingCreationDate）、贷款期限（Term）、贷款状态（LoanStatus）、贷款利率（BorrowerRate）、借款人过去7年违约次数（DelinquenciesLast7Years）、借款人月收入（StatedMonthlyIncome）、借款人是否拥有房屋（IsBorrowerHomeowner）、借款人最近6个月的征信查询次数（InquiriesLast6Months）、借款人负债收入比（DebtToIncomeRatio）、借款人职业（Occupation）、借款人信用评价（CreditScore / CreditGrade /&lt;span&gt; ProsperRating(Alpha)）及借款人的信用卡使用情况（BankCardUse）。

这12个特征中，有4个特征用于描述贷款的特点，包括贷款日期、贷款期限、贷款状态和贷款利率。

有8个特征用于描述借款人主体的特点，包括过去7年违约次数、月收入、是否拥有房屋、最近6个月的征信查询次数、负债收入比、职业、信用评价及信用卡使用情况。

通过上一部分的初步探索，发现以下特点：

&lt;/span&gt;1&lt;span&gt;. 大部分贷款的期限为三年期。

&lt;/span&gt;2. 整个平台贷款的违约率为16.74%&lt;span&gt;。

&lt;/span&gt;3&lt;span&gt;. 大部分贷款利率集中在0.08至0.2这个区间，0.32附近也有较大的成交量。

&lt;/span&gt;4&lt;span&gt;. 平台上的借款人整体信用资质较好。

&lt;/span&gt;5&lt;span&gt;. 从信用卡使用角度来看，借款人的还款压力较大。

&lt;/span&gt;6&lt;span&gt;. 大部分借款人的月收入集中在2500至6000美元之间。

&lt;/span&gt;7&lt;span&gt;. 拥有房屋的借款人与未拥有房屋的借款人数量大致相当。

&lt;/span&gt;8. 出于隐私或者其他原因，借款人申请贷款时职业一项选择“other”的极多。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　4.2双变量探索&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.1贷款利率随着时间变化的趋势&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ggplot(aes(x = ListingCreationDate, y = BorrowerRate), data = loandata) +&lt;span&gt;
    geom_point(alpha &lt;/span&gt;= 0.05) +&lt;span&gt;
    facet_wrap(&lt;/span&gt;~Term)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224111014048-1892216781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:一年期与五年期贷款是在2011年前后才上线的产品。三年期是整个平台最主要的贷款,&lt;/p&gt;
&lt;p&gt;　　　　　　　　　   2008年以前，贷款利率主要分布在0.08至0.2这个区间，随着美国次贷危机的持续发酵2010年利率逐渐分化，优质借款人依旧可以拿到0.1甚至更低的利率，而更多的借款人则需要以0.2以上甚至　　　　　　　　　　   0.35的利率方可筹到资金。为了救市美联储实行了量化宽松政策，持续向市场中注入大量流动性，利率承压下行。至2014年，可以看到各个利率层面均有大量的成交记录信贷市场逐渐恢复元气。&lt;/p&gt;
&lt;p&gt; 　　　　　　　　4.2.2贷款利率与贷款状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = LoanStatus, y = BorrowerRate), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_boxplot()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224111428954-766189721.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:违约贷款组的利率明显高于正常还款组。一方面，贷款定价高是由于借款人自身资质差；另一方面，高利率又使得借款人更加难以承受进而违约&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.3贷款利率与过去7年违约次数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = DelinquenciesLast7Years, y =&lt;span&gt; BorrowerRate), 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data =&lt;span&gt; subset(loandata, 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                      loandata$DelinquenciesLast7Years &amp;lt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;                         quantile(loandata$DelinquenciesLast7Years,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                                   probs = 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = TRUE))) +
&lt;span&gt;6&lt;/span&gt;     geom_point(alpha = 0.05, position = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;7&lt;/span&gt;     geom_smooth()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224231115960-302586814.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:95%的借款人过去7年违约次数低于23次，违约次数低于3次时，违约次数与贷款利率呈现出弱正相关性；而3次以后两者关系就趋于平稳。&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.4贷款利率和借款人月收入的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = StatedMonthlyIncome, y =&lt;span&gt; BorrowerRate), 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data = subset(loandata, !&lt;span&gt;is&lt;/span&gt;.na(loandata$StatedMonthlyIncome))) +
&lt;span&gt;3&lt;/span&gt;     stat_density2d(aes(alpha = ..density..), geom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, contour = FALSE) +
&lt;span&gt;4&lt;/span&gt;     scale_x_continuous(limits = c(0, 30000))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224231334383-612747306.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:平台的借贷人月收入在10000美金以下,未发现贷款利率和月收入存在关系&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.5贷款利率与借款人是否拥有房屋之间的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = BorrowerRate), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_histogram() +
&lt;span&gt;3&lt;/span&gt;     geom_hline(yintercept = 3000, linetype = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dashed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;4&lt;/span&gt;     facet_wrap(~IsBorrowerHomeowner, ncol = 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224231554243-470657405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:拥有房屋的人比没有房屋的人贷款的利息更低&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.6贷款利率与过去6个月征信查询次数的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = as.factor(InquiriesLast6Months), y =&lt;span&gt; BorrowerRate), 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data = subset(loandata, loandata$InquiriesLast6Months &amp;lt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;                         quantile(loandata$InquiriesLast6Months, 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                                   probs = 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = TRUE))) +
&lt;span&gt;5&lt;/span&gt;     geom_boxplot() +
&lt;span&gt;6&lt;/span&gt;     xlab(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InquiriesLast6Months&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224231839098-1165709729.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:征信查询的次数越多,贷款的利率越高&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.7贷款利率和负债收益比的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = DebtToIncomeRatio, y =&lt;span&gt; BorrowerRate), 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data = subset(loandata, loandata$DebtToIncomeRatio &amp;lt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;                         quantile(loandata$DebtToIncomeRatio, 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                                   probs = 0.95, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;na.rm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = TRUE))) +
&lt;span&gt;5&lt;/span&gt;     geom_point(alpha = 0.05, position = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;6&lt;/span&gt;     stat_smooth(color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224232113344-709022753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:借款人的收入负债比越高，贷款利率也越高&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.8贷款利率和信用评分的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = CreditScore, y = BorrowerRate), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_point(alpha = 0.05) +
&lt;span&gt;3&lt;/span&gt;     facet_wrap(~Phase, ncol = 1) +
&lt;span&gt;4&lt;/span&gt;     coord_cartesian(xlim = c(400, 900), ylim = c(0, 0.4)) +
&lt;span&gt;5&lt;/span&gt;     geom_line(stat = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, fun.y = mean) +
&lt;span&gt;6&lt;/span&gt;     geom_line(stat = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, fun.y = median, linetype = 2, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;7&lt;/span&gt;     geom_vline(xintercept = 600, color = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224232512609-186746871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:在2009年之前,Prosper还会为消费信用评级低于600分的借款人提供服务,在2009年重新上线之后,不再为评分低于600分的客户服务&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.2.9贷款利率和信用等级的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日以前&lt;/span&gt;
ggplot(aes(x = CreditGrade, y =&lt;span&gt; BorrowerRate), 
       data &lt;/span&gt;= subset(loandata, LoanOriginationDate &amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +&lt;span&gt;
    scale_x_discrete(limits &lt;/span&gt;= c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +&lt;span&gt;
    geom_boxplot() &lt;/span&gt;+&lt;span&gt;
    stat_summary(fun.y &lt;/span&gt;= mean, geom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, shape = 4) +&lt;span&gt;
    stat_summary(fun.y &lt;/span&gt;= mean, geom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smooth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, aes(group = 1&lt;span&gt;))


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日以后&lt;/span&gt;
ggplot(aes(x = ProsperRating..Alpha., y =&lt;span&gt; BorrowerRate),
       data &lt;/span&gt;= subset(loandata, LoanOriginationDate &amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +&lt;span&gt;
    geom_boxplot() &lt;/span&gt;+&lt;span&gt;
    scale_x_discrete(limits &lt;/span&gt;= c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HR&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +&lt;span&gt;
    stat_summary(fun.y &lt;/span&gt;= mean, geom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, shape = 4) +&lt;span&gt;
    stat_summary(fun.y &lt;/span&gt;= mean, geom = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smooth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, aes(group = 1))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224232736745-670102419.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224232800652-415397301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　　　　　　　结论:通过比较2009年7月1日前后贷款利率与借款人信用评级之间的关系发现，2009年7月1日后图形的均值连线明显斜率更大，说明Prosper在涉诉恢复运营后更为重视借款人的信用评级，评级对贷款　　　　　　　　　　  利率的影响权重更大了。&lt;/p&gt;
&lt;p&gt;　　　　　　总结论:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;通过探索贷款利率与其他变量之间的关系，大致得出以下结论：

&lt;/span&gt;1&lt;span&gt;. 贷款利率与过去7年的违约次数、过去6个月征信查询次数及负债收入比呈现出正相关关系。

&lt;/span&gt;2&lt;span&gt;. 贷款利率似乎与借款人的月收入水平关系不明确。

&lt;/span&gt;3&lt;span&gt;. 拥有房屋的借款人相比未拥有房屋的借款人更能够以较低利率筹得资金。

&lt;/span&gt;4. Prosper平台在2009年7月1日后似乎增加了信用评级对贷款利率的影响权重，并且不再对消费信用评分低于600分的借款人提供服务。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　4.3多变量分析&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.3.1贷款日期和贷款利率和贷款状态之间的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = ListingCreationDate, y = BorrowerRate, color = LoanStatus), data = loandata) +
&lt;span&gt;2&lt;/span&gt;     geom_point(alpha = 0.05) +
&lt;span&gt;3&lt;/span&gt;     guides(colour = guide_legend(override.aes = list(alpha = 1, size = 5)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224233236989-499097889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:2009年之前的违约数远大于2009年之后,且利息越高违约率就越大&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.3.2贷款利率与消费信用评分及贷款状态的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ggplot(aes(x = CreditScore, y = BorrowerRate, color =&lt;span&gt; LoanStatus),
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;        data = loandata) +
&lt;span&gt;3&lt;/span&gt;     geom_point(alpha = 0.05, position = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt;4&lt;/span&gt;     coord_cartesian(xlim = c(400, 900), ylim = c(0, 0.4)) +
&lt;span&gt;5&lt;/span&gt;     facet_wrap(~Phase, ncol = 1) +
&lt;span&gt;6&lt;/span&gt;     guides(color = guide_legend(override.aes = list(alpha = 1, size = 5)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224233652109-741808690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:在2009年之前的债务违约明显很多,并且是以信用评分较低的且贷款利率较高客户为主,2009年之后平台不再为信用评分低于600的客户提供贷款,贷款的质量有了明显提升&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　也可以看出信用评分越高的客户,贷款的利率越低&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.3.3贷款利率与贷款总额及信用评级的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日之前&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; ggplot(aes(x = LoanOriginalAmount, y = BorrowerRate, color =&lt;span&gt; CreditGrade),
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        data = subset(loandata, LoanOriginationDate &amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp; CreditGrade != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)) +
&lt;span&gt; 4&lt;/span&gt;     geom_point(alpha = 0.5, position = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jitter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +
&lt;span&gt; 5&lt;/span&gt;     scale_color_brewer(type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;seq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                        guide = guide_legend(title = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreditGrade&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, reverse =&lt;span&gt; F,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                                             override.aes = list(alpha = 1, size = 5))) +
&lt;span&gt; 8&lt;/span&gt;     facet_wrap(~LoanStatus, ncol = 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日之后&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; ggplot(aes(x = LoanOriginalAmount, y = BorrowerRate, color =&lt;span&gt; ProsperRating..Alpha.), 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;        data = subset(loandata, LoanOriginationDate &amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;
&lt;span&gt;13&lt;/span&gt;                          !&lt;span&gt;is&lt;/span&gt;.na(ProsperRating..Alpha.))) +
&lt;span&gt;14&lt;/span&gt;     geom_point(alpha = 0.5) +
&lt;span&gt;15&lt;/span&gt;     scale_color_brewer(type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;seq&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                        guide = guide_legend(title = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ProsPerRating&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, reverse =&lt;span&gt; F,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                                             override.aes = list(alpha = 1, size = 5))) +
&lt;span&gt;18&lt;/span&gt;     facet_wrap(~LoanStatus, ncol = 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224234535835-366494312.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224234554924-777615773.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:在2009年7月1日之后,Prosper将最大的贷款金额有25000提升到了35000,并且只针对信用评级为B以上的客户,随着贷款的金额越高利率在逐渐降低,此外平台的违约贷款都是由HR和E等级的客户导　　　　　　　　　　 致的&lt;/p&gt;
&lt;p&gt;　　　　　　　　4.3.4贷款利率与贷款总额与信用卡使用频率的关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日之前&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; ggplot(aes(x = LoanOriginalAmount, y = BorrowerRate, color =&lt;span&gt; BankCardUse),
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        data = subset(loandata, LoanOriginationDate &amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp; 
&lt;span&gt; 4&lt;/span&gt;                          !&lt;span&gt;is&lt;/span&gt;.na(BankCardUse))) +
&lt;span&gt; 5&lt;/span&gt;     geom_point(alpha = 0.5) +
&lt;span&gt; 6&lt;/span&gt;     scale_color_brewer(type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qual&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                        guide = guide_legend(title = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BankCardUse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, reverse =&lt;span&gt; T,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                                             override.aes = list(alpha = 1, size = 5))) +
&lt;span&gt; 9&lt;/span&gt;     facet_wrap(~LoanStatus, ncol = 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日之后&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; ggplot(aes(x = LoanOriginalAmount, y = BorrowerRate, color =&lt;span&gt; BankCardUse),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;        data = subset(loandata, LoanOriginationDate &amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;
&lt;span&gt;14&lt;/span&gt;                          !&lt;span&gt;is&lt;/span&gt;.na(BankCardUse))) +
&lt;span&gt;15&lt;/span&gt;     geom_point(alpha = 0.5) +
&lt;span&gt;16&lt;/span&gt;     scale_color_brewer(type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                        guide = guide_legend(title = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BankCardUse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, reverse =&lt;span&gt; T,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                                             override.aes = list(alpha = 1, size = 5))) +
&lt;span&gt;19&lt;/span&gt;     facet_wrap(~LoanStatus, ncol = 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224235148049-526483412.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180224235205651-1436523178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　结论:从信用卡的使用情况来看，时间节点前后并无明显变化。但是，违约贷款中，信用卡使用情况为Mild Use的借款人占比极低；相对的，信用卡使用情况为Super Use的客户占比却极高，这也印证了　　　　　　　　　　 前文的判断，信用卡的超额透支会对借款人的还款能力产生较大的负面影响。&lt;/p&gt;
&lt;p&gt;　　　　　　总结论:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;本部分通过分时间节点、分贷款状态更为深入的探索了多重变量之间的关系，发现如下特点：

&lt;/span&gt;1&lt;span&gt;. 2009年以前贷款违约数量明显高于2009年以后的数量，且利率越高，违约率越高！

&lt;/span&gt;2&lt;span&gt;. 消费信用评分越高的借款人，其贷款利率也相对越低。

&lt;/span&gt;3&lt;span&gt;. 2009年以前，Prosper限制了最大借款金额为25000美元，而在2009年以后放宽限制至35000美元，且似乎只针对信用评级B级以上的客户开放申请。并且随着贷款金额的增加，贷款利率在逐渐降低。

&lt;/span&gt;4&lt;span&gt;. 信用评级为“HR”和“E”的借款人在违约组中的比例明显较高。

&lt;/span&gt;5. 信用卡使用情况为Super Use的借款人在违约组中的比例明显较高，使用情况为Mild Use的借款人在违约组中的占比极低。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.拟合因子,验证相关性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日之前&lt;/span&gt;
m1 &amp;lt;- lm(I(BorrowerRate)~&lt;span&gt;I(CreditScore),
         data&lt;/span&gt;=&lt;span&gt;subset(loan_data,
                     loan_data$LoanOriginationDate &lt;/span&gt;&amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
                      &amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(CreditScore) 
                      &lt;/span&gt;&amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(CreditGrade) 
                      &lt;/span&gt;&amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(LoanOriginalAmount) 
                      &lt;/span&gt;&amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(BankCardUse)))
m2 &lt;/span&gt;&amp;lt;- update(m1,~ . +&lt;span&gt; CreditGrade)
m3 &lt;/span&gt;&amp;lt;- update(m2,~ . +&lt;span&gt; LoanOriginalAmount)
m4 &lt;/span&gt;&amp;lt;- update(m3,~ . +&lt;span&gt; BankCardUse)
mtable(m1,m2,m3,m4)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2009年7月1日之后&lt;/span&gt;
m5 &amp;lt;- lm(I(BorrowerRate)~&lt;span&gt;I(CreditScore),
         data&lt;/span&gt;=&lt;span&gt;subset(loan_data,
                     loan_data$LoanOriginationDate &lt;/span&gt;&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2009-07-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
                      &amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(CreditScore) 
                      &lt;/span&gt;&amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(ProsperRating..Alpha.) 
                      &lt;/span&gt;&amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(LoanOriginalAmount) 
                      &lt;/span&gt;&amp;amp; !&lt;span&gt;is&lt;/span&gt;&lt;span&gt;.na(BankCardUse)))
m6 &lt;/span&gt;&amp;lt;- update(m5,~ . +&lt;span&gt; ProsperRating..Alpha.)
m7 &lt;/span&gt;&amp;lt;- update(m6,~ . +&lt;span&gt; LoanOriginalAmount)
m8 &lt;/span&gt;&amp;lt;- update(m7,~ . +&lt;span&gt; BankCardUse)
mtable(m5,m6,m7,m8)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225000628066-1421241447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180225000649971-326397128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:从表上看出2者的P值都是0说明拟合的较好,在2009年7月1日之前的R²是0.5左右,2009年7月1日之后的R²是0.9左右,说明平台降低了对信用评分的权重,加强信用等级的权重&lt;/p&gt;
</description>
<pubDate>Sat, 24 Feb 2018 16:07:00 +0000</pubDate>
<dc:creator>月上贺兰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luhuajun/p/8468091.html</dc:identifier>
</item>
<item>
<title>Lua内存分析工具 - 李嘉的博客</title>
<link>http://www.cnblogs.com/lijiajia/p/8468054.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lijiajia/p/8468054.html</guid>
<description>&lt;p&gt;最近给公司写了一个lua内存分析工具，可以方便的分析出Lua内存泄露问题（虽然还没正式使用，但我是这样想的，哈哈哈），有图形化界面操作，方便手机端上传快照等功能&lt;/p&gt;
&lt;p&gt;内存分析我是在c语言端写的，也有人写过lua端的分析工具，也蛮好用的，不过lua分析工具本身也会影响到lua的内存占用（尽管用的是弱表缓存的），也会有些不准确。&lt;br/&gt;Lua方案：&lt;a href=&quot;https://github.com/yaukeywang/LuaMemorySnapshotDump&quot; class=&quot;uri&quot;&gt;https://github.com/yaukeywang/LuaMemorySnapshotDump&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后找到了云风大神写的C语言解决方案&lt;br/&gt;&lt;a href=&quot;https://blog.codingnow.com/2012/12/lua_snapshot.html&quot; class=&quot;uri&quot;&gt;https://blog.codingnow.com/2012/12/lua_snapshot.html&lt;/a&gt;&lt;br/&gt;这个库功能颇为简单，简单到连对象引用链都没有，只打印出key名和内存地址&lt;/p&gt;
&lt;p&gt;所以我还是决定自己造轮子改进一下云风大神的方案，也是更进一步的去学习一下lua的c api&lt;/p&gt;
&lt;p&gt;C实现起来比Lua复杂一些&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;因为要操作Lua栈，稍微写错一个栈没对称弹出，就会导致溢出，调试起来非常麻烦&lt;/li&gt;
&lt;li&gt;因为c语言就像一块空地，什么都要自己造，连一些最基本的数据结构，都没有...&lt;/li&gt;
&lt;li&gt;你需要编译成各个平台的库，这个后面会讲到如何跟tolua c编译到一起&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;工具分为2个部分&quot;&gt;工具分为2个部分&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;c库生成快照&lt;/li&gt;
&lt;li&gt;web端接收上传快照，快照分析&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1208599-d7d614881e2c094e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024&quot; alt=&quot;web端图&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;lua中哪些数据类型是需要gc的&quot;&gt;Lua中哪些数据类型是需要GC的？&lt;/h4&gt;
&lt;p&gt;lua源码中定义了这些数据类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*
** basic types
*/
#define LUA_TNONE       (-1)

#define LUA_TNIL        0
#define LUA_TBOOLEAN        1
#define LUA_TLIGHTUSERDATA  2
#define LUA_TNUMBER     3
#define LUA_TSTRING     4
#define LUA_TTABLE      5
#define LUA_TFUNCTION       6
#define LUA_TUSERDATA       7
#define LUA_TTHREAD     8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用GCObject的联合体将所有需要进行垃圾回收的数据囊括了进来。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*
** Union of all collectable objects
*/
union GCObject {
  GCheader gch;
  union TString ts;
  union Udata u;
  union Closure cl;
  struct Table h;
  struct Proto p;
  struct UpVal uv;
  struct lua_State th;  /* thread */
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是还有一些不需要GC的数据类型，所以又定义了一个Value的联合体&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*
** Union of all Lua values
*/
typedef union {
  GCObject *gc;
  void *p;
  lua_Number n;
  int b;
} Value;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就可以将Lua中所有的数据类型表示出来了，Lua还使用了一个宏来判断哪些数据类型是需要GC的&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#define iscollectable(o)    (ttype(o) &amp;gt;= LUA_TSTRING)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过这个我们可以知道，定义在LUA_TSTRING后的数据类型，都需要GC。一共有：LUA_TSTRING、LUA_TTABLE、LUA_TFUNCTION、LUA_TUSERDATA、LUA_TTHREAD&lt;/p&gt;
&lt;p&gt;通过这样的遍历方式，从根节点开始递归整颗GC树&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1208599-593c1511dcaf874e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;遍历方式&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;如何遍历table&quot;&gt;如何遍历table？&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;void mark_object(lua_State *L, const char *desc, struct lua_gc_node *parent)
{
    luaL_checkstack(L, LUA_MINSTACK, NULL);
    int t = lua_type(L, -1);
    switch (t) {
    case LUA_TTABLE:
        mark_table(L, desc, parent);
        break;
    case LUA_TUSERDATA:
        mark_userdata(L, desc, parent);
        break;
    case LUA_TFUNCTION:
        mark_function(L, desc, parent);
        break;
    case LUA_TTHREAD:
        mark_thread(L, desc, parent);
        break;
    default:
        lua_pop(L,1);
        break;
    }
}

void mark_table(lua_State *L, const char *desc, struct lua_gc_node *parent)
{
    const void *p = lua_topointer(L, -1);
    if(p == NULL)
    {
        return;
    }
    if(isMark(p))
    {
        lua_pop(L, 1);
        return;
    }

    struct lua_gc_node *currNode = gen_node(L, p, desc, parent);

    bool weakk = false;
    bool weakv = false;

    if(lua_getmetatable(L, -1))
    {
        lua_pushliteral(L, &quot;__mode&quot;);
        lua_rawget(L, -2);
        if (lua_isstring(L,-1)) 
        {
            const char *mode = lua_tostring(L, -1);
            if (strchr(mode, 'k')) 
            {
                weakk = true;
            }
            if (strchr(mode, 'v')) 
            {
                weakv = true;
            }
        }
        lua_pop(L,1);

        luaL_checkstack(L, LUA_MINSTACK, NULL);
        mark_table(L, &quot;.[metatable]&quot;, currNode);
    }
 
    lua_pushnil(L);
    while (lua_next(L, -2) != 0) 
    {
        if(weakv)
        {
            lua_pop(L, 1);
        }
        else
        {
            char temp[128];
            const char * _key = keystring(L, -2, temp);
            mark_object(L, _key, currNode);
        }
        if(!weakk)
        {
            lua_pushvalue(L,-1);
            mark_object(L, &quot;.[key]&quot;, currNode);
        }
    }
    lua_pop(L, 1);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;const void *p = lua_topointer(L, -1);&lt;br/&gt;取出栈顶的指针，下面用到指针做key存入一个哈希表里，来标记是否被遍历过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;从metatable中取出__mode，来判断key,value是否为弱引用。如果是弱引用就不需要继续递归了，否则就继续调用mark_object递归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;通过lua_next方法可以取出table中的key,value压入栈中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这里一定要严谨使用lua_pop(L, 1)管理虚拟栈的平衡，否则栈很快就溢出了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他的函数可以多查找Lua手册，里面说的很详细，我就不一一列举啦。&lt;/p&gt;
&lt;p&gt;另外在c语言中自己创建的内存，需要手动释放，否则也会有内存溢出问题&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;s = malloc(sizeof(struct lua_gc_node)); 通过malloc开辟内存&lt;br/&gt;free(current_node); 对应使用free释放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;递归完毕后，输出成Json格式的快照文件，方便Web端操作。&lt;/p&gt;
&lt;h4 id=&quot;web端功能&quot;&gt;Web端功能&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;手机上文件传到PC上不太方便，所以弄了个web端直接接收上传的快照文件&lt;/li&gt;
&lt;li&gt;取补集（可以取出2个快照之间，新创建了哪些东西没释放掉），比如战斗前快照，跟战斗后快照进行取补集，就可以知道战斗内有哪些是没释放的，立马就能查出泄露&lt;/li&gt;
&lt;li&gt;取交集（可以查询常住内存）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上传文件的php代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
  if ($_FILES[&quot;file&quot;][&quot;error&quot;] &amp;gt; 0)
  {
      echo &quot;错误：&quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&amp;lt;br&amp;gt;&quot;;
  }
  else
  {
      if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))
      {
          echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;
      }
      else
      {
          // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下
          move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);
          echo &quot;文件存储在: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];
      }
  }
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;如何把我们的代码编译到toluac中&quot;&gt;如何把我们的代码编译到toluac中？&lt;/h4&gt;
&lt;p&gt;在网上搜这方面的资料，找到了之前同事（外号姐夫）写的博客，哈哈&lt;br/&gt;&lt;a href=&quot;https://www.jianshu.com/p/5a35602adef8&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/5a35602adef8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他讲的很清楚，我这里就不写了，可以看这篇文章把环境搭好。&lt;/p&gt;
&lt;p&gt;另外还需要在tolua#中的LuaDLL.cs类里加上一个方法引入我们的库函数&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1208599-d4c191b4c9308d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在LuaManager.cs中把函数注册进去给lua使用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;lua.OpenLibs (LuaDLL.luaopen_snapshot37);
lua.LuaSetField(-2, &quot;snapshot37&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样在lua代码里，我们就可以通过&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;local snapLib = require &quot;snapshot37&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;来引入我们的函数了&lt;/p&gt;
&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;Lua内存分析工具的一些解决方案&lt;/li&gt;
&lt;li&gt;Lua中各种数据类型是怎么表示的&lt;/li&gt;
&lt;li&gt;遍历GCObject的步骤&lt;/li&gt;
&lt;li&gt;具体的一些LUA C API有不明白的可以多查看Lua官方文档&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本文主要介绍了以上内容，欢迎找我一起交流讨论&lt;/p&gt;
&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.codingnow.com/2012/12/lua_snapshot.html&quot; class=&quot;uri&quot;&gt;https://blog.codingnow.com/2012/12/lua_snapshot.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/yaukey/p/unity_lua_memory_leak_trace.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/yaukey/p/unity_lua_memory_leak_trace.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.jianshu.com/p/5a35602adef8&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/5a35602adef8&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://troydhanson.github.io/uthash&quot; class=&quot;uri&quot;&gt;https://troydhanson.github.io/uthash&lt;/a&gt;&lt;br/&gt;《Lua设计与实现》—— codedump (作者)&lt;/p&gt;
</description>
<pubDate>Sat, 24 Feb 2018 16:03:00 +0000</pubDate>
<dc:creator>李嘉的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lijiajia/p/8468054.html</dc:identifier>
</item>
<item>
<title>当inline元素包裹block元素时会发生什么 - 長风</title>
<link>http://www.cnblogs.com/Kuro-P/p/8468042.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Kuro-P/p/8468042.html</guid>
<description>&lt;p&gt;经常有图片链接写法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;www.baidu.com&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;baidu.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击图片自动跳转，不用增加新的点击事件，光标滑过时变成小手等等，这都是a标签的功劳。&lt;/p&gt;
&lt;p&gt;但是inline元素包裹block元素后，inline元素本身是否会变成blcok元素，还有待求证，于是做了如下对比：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这里是块元素&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用于测试（没有包裹 a 标签之前）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201802/1200842-20180224232010065-473045729.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;猜想一下，被 a 标签包裹之后 ,span 标签是否会和 div 标签处于同一行呢？（div即使设置了宽高也不会触发BFC）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;www.cnblogs.com&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这里是块元素&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用于测试（已经包裹 a 标签）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201802/1200842-20180224235045072-1153208851.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很明显，a 标签包裹block元素后变成了block元素。&lt;/p&gt;

</description>
<pubDate>Sat, 24 Feb 2018 15:54:00 +0000</pubDate>
<dc:creator>長风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Kuro-P/p/8468042.html</dc:identifier>
</item>
<item>
<title>xBIM WeXplorer xViewer 浏览器检查 - 在 水 一 方</title>
<link>http://www.cnblogs.com/w2011/p/8467945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w2011/p/8467945.html</guid>
<description>&lt;h3&gt;目录&lt;/h3&gt;
&lt;h4&gt;    基础&lt;/h4&gt;
&lt;h4&gt;     高级应用&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（一）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（二）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（三）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;    在之前的博客&lt;a href=&quot;http://www.cnblogs.com/w2011/p/8457805.html&quot; target=&quot;_blank&quot;&gt;xBIM WeXplorer xViewer 基本应用&lt;/a&gt; 我们已经提到，WeXplore不能在所有的浏览器上运行。为了方便简单操作，我们觉得使用最新技术。浏览器应该满足几个先决条件才能运行查看器。请不要放弃检查浏览器，它可以在几年前的电脑上运行Chrome 或者 Mozilla的PC 上运行。并且可以在平板电脑和移动设备上运行。主要的限制是关于在IE11之前不支持WebGLass的IE。为了在开发的过程中方便。查看器具有静态功能来检查其要求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; check &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; xViewer.check();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (check.noErrors)
    {
        ...
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实很简单的，只要运行这个静态函数，他会向你报告任何错误和警告。（当然现在一般也不会遇到错误)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello building!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;css/layout.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/xbim-viewer.debug.bundle.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;canvas &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;viewer&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; check &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; xViewer.check();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (check.noErrors)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; viewer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; xViewer(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;viewer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                viewer.load(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data/SampleHouse.wexbim&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                viewer.start();
            }
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果检查浏览器不兼容、可以向用户提供错误报告，如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; check &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; xViewer.check();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (check.noErrors)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;start animation, listen to events and do all the funny stuff&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; msg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        msg.innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; check.errors)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; check.errors[i];
            msg.innerHTML &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;div style='color: red;'&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 24 Feb 2018 15:16:00 +0000</pubDate>
<dc:creator>在 水 一 方</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w2011/p/8467945.html</dc:identifier>
</item>
</channel>
</rss>