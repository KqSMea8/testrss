<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>前端自动化准备和详细配置(NVM、NPM/CNPM、NodeJs、NRM、WebPack、Gulp/Grunt、Git/SVN) - Yaopengfei</title>
<link>http://www.cnblogs.com/yaopengfei/p/7551647.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaopengfei/p/7551647.html</guid>
<description>&lt;p&gt;&lt;span&gt;一. 各类概念和指令介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 1. NVM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(1).  全称：Node Version Manager，是一款针对Nodejs的版本管理工具，由于Node的版本很多，很多时候我要需要依赖多个版本，并且要求可以自动切换，这个时候采用NVM来管理Node再合适不过了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(2). 下载地址：https://github.com/coreybutler/nvm-windows/releases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(3). 常用指令：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　a. 查看已经安装的node版本：    &lt;strong&gt;&lt;span&gt;【nvm list】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　b. 更换当前node的版本：          &lt;span&gt;&lt;strong&gt;【nvm  use 版本号 】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　c.  安装指定版本的node：          &lt;strong&gt;&lt;span&gt;【nvm  install 版本号 】&lt;/span&gt;&lt;/strong&gt;      （&lt;span&gt;&lt;strong&gt;nvm install stable&lt;/strong&gt;&lt;/span&gt;   特指安装最新最稳的node版本      &lt;span&gt;&lt;strong&gt;nvm install latest&lt;/strong&gt;&lt;/span&gt;  特指下载最新的node版本）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　d.  删除指定版本的node：         &lt;span&gt;&lt;strong&gt;【nvm  uninstall 版本号】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其它指令：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919145543462-1989081976.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; (4). NVM自身版本如何更新：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　    &lt;span&gt;NVM总共就5个文件，直接复制到原文件夹下，覆盖即可。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919150844353-1640318258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 2. Node.JS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(1). 一个JS的运行环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(2). 主要用于开发Web应用程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(3). 很多的前端开发工具都是基于node这个平台&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(4). 所用的工具就相当于一些软件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　PS：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　Node.js的版本管理器为nvm。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. NPM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　NPM（node package manager），是Node.js的包管理器，是全球最大的开源生态库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　参考地址：  官方网站：&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;https://www.npmjs.com/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                           淘宝镜像：&lt;a href=&quot;https://npm.taobao.org/&quot;&gt;https://npm.taobao.org/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       npm管理包非常方便，我们只需要记住使用哪个包就可以了，类似于.Net平台下的Nuget。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 4. CNPM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　cnpm工具，它是中国版的npm镜像库，地址在这里：&lt;a href=&quot;https://cnpmjs.org/&quot; target=&quot;_blank&quot;&gt;https://cnpmjs.org/&lt;/a&gt;，也是npm官方的一个拷贝，因为我们和外界有一堵墙隔着，所以用这个国内的比较快，淘宝也弄了一个和npm一样的镜像库，&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot;&gt;http://npm.taobao.org/&lt;/a&gt;，它和官方的npm每隔10分钟同步一次。安装方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;strong&gt;　　&lt;span&gt;指令：【npm install -g cnpm --registry=https://registry.npm.taobao.org】&lt;/span&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　安装好了cnpm后，直接执行：&lt;span&gt;&lt;strong&gt;&lt;code&gt;cnpm install 包名&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　比如：&lt;code&gt;cnpm install bower -g&lt;/code&gt; 就可以了。&lt;code&gt;-g&lt;/code&gt;只是为了把包安装在全局路径下。如果不全局安装，也可以在当前目录中安装，不用&lt;code&gt;-g&lt;/code&gt;就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注意：cnpm的下载路径按照上述指令安装的话，默认就是从taobao的地址下载，和通过nrm切换npm的下载源到taobao，此时npm和cnpm的下载源是相同的，下载速度也是一致的。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5. NRM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　nrm就是npm registry manager 也就是npm的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换下载的镜像源。 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       我们只要通过这个命令: &lt;strong&gt;&lt;span&gt;【&lt;code&gt;npm install -g nrm&lt;/code&gt; 】&lt;/span&gt;&lt;/strong&gt;就可以实现安装。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt;&lt;strong&gt;注意：&lt;code&gt;-g&lt;/code&gt;可以直接放到install的后面，我们以后也最好这样用，因为这样用，我们可以在cmd中上下箭头切换最近命令的时候，容易修改，更方便操作。安装完成后，我们就可以使用了。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　命令：&lt;span&gt;&lt;strong&gt;【&lt;code&gt;nrm ls&lt;/code&gt; 】&lt;/strong&gt;&lt;/span&gt;用于展示所有可切换的镜像地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　命令：&lt;span&gt;&lt;strong&gt;【nrm use taobao】&lt;/strong&gt;&lt;/span&gt; 我们这样就可以直接切换到taobao上了，和上述的cnpm就一致了。当然也可以按照上面罗列的其他内容进行切换。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6. WebPack&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7. Gulp/Grunt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8. Git/SVN&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;代码、文件等版本管理工具。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二. 安装步骤(两套安装方案)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; 方案一：严格按照顺序进行安装配置 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(一). 安装NVM的详细步骤&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt; &lt;strong&gt;&lt;span&gt;(1). 在C盘目录下建一个Develop文件夹，该文件用来存放各种与开发相关的配置。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919152227525-2081424646.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;  &lt;span&gt;(2). 在Develop文件夹中新建nvm文件夹，并将下载的nvm五个文件拷贝进去。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   下载地址：https://github.com/coreybutler/nvm-windows/releases  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;   注意：下载免安装版本的，不要下载exe安装程序。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919152525118-968056185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(3). cmd命令测试是否安装成功。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 输入指令：&lt;strong&gt;【nvm -v 】&lt;/strong&gt;，  &lt;span&gt;&lt;strong&gt;发现并不能用&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;原因是还没有配置环境变量&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919152641821-1506851854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(4).  配置环境变量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    NVM_HOME=C:\Develop\nvm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    PATH=%NVM_HOME%;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    如图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919155413946-783938587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919155439978-1143333761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后通过命令测试：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919155528900-422051954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发现：并没有成功&lt;/span&gt;，原因是 nvm 的根目录下缺少一个 配置文件setting.txt。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(5). 动态生成配置文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（有现成的可以直接拷贝进去，这里介绍一种动态生成的方式）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  双击：install.cmd命令，然后把当前路径拷贝进去，点击回车，会自动在当前目录下生成 setting.txt文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919160032431-1176323980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919160111228-1279601617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;重新cmd 输入指令【nvm -v】,发现大功告成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919160245181-1381666333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们测试一下nodejs环境，指令&lt;span&gt;&lt;strong&gt;【nvm list】&lt;/strong&gt;&lt;/span&gt;，发现并没有安装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919160334696-1684752103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(二). 安装Node.js&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(1). 直接输入指令【nvm install latest】，安装最新版本的node。 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919161558728-1949283505.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;特别注意：备注： 如果你的电脑系统是32 位的，那么在下载nodejs版本的时候，一定要指明 32 如：【&lt;code&gt;nvm install 5.11.0 32&lt;/code&gt; 】 这样在32位的电脑系统中，才可以使用，默认是64位的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　这个时候发现一个现象，下载完最新的nodejs版后，自动去下载最新的npm了，这个现象很正常，在每个版本的nodejs中，都会自带npm，为了统一起见，我们安装一个全局的npm工具，这个操作很有必要，因为我们需要安装一些全局的其他包，不会因为切换node版本造成原来下载过的包不可用。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919162335900-2009985585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919162910025-769775462.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　为了后面演示切换方便，我们这里再安装另外一个node的版本 指令&lt;strong&gt;【node install 6.2.0】&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　  同样的现象，安装完node后，会自动下载该版本的node对应npm包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919163246618-1447729401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; (2). 配置node的环境变量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【&lt;span&gt;&lt;strong&gt;这里先补充一个知识点：nvm切换node版本的原理，会在nvm的同级目录下生成一个nodejs的快捷方式，当前使用哪个版本的node，该快捷方式就会执行nvm文件夹里的对应版本的node&lt;/strong&gt;&lt;/span&gt;】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;span&gt;&lt;strong&gt;基于以上原理，配置nodejs环境变量的时候，指向的是该快捷方式，这样无论怎么切换node版本，环境变量都不需要改，都可以直接对应。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; A：配置NVM文件夹下的setting.txt配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919164921696-1049368613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;B：配置系统环境变量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　NVM_SYMLINK=C:\Develop\nodejs&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　PATH=%NVM_SYMLINK%;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919165207150-2099013643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;(3) . 查看已经安装的node版本，并选择指定版本来使用。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　查看已经安装的node版本，指令&lt;span&gt;【node list】&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919163627196-1835177356.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　选择8.5.0版本进行使用，指令 &lt;span&gt;【node use 8.5.0】&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　 再输入该命令之前，观察一个现象，Develop目录下只有nvm一个文件夹。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     执行该命令。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919163921150-1282946206.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;strong&gt;&lt;span&gt;发现Develop目录下多了一个nodejs的快捷方式【正是通过该快捷方式来映射nvm文件夹里对应的node版本，同时node的环境变量也是对应该快捷方式】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919165405806-921994750.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　 &lt;span&gt;&lt;span&gt;再次查看使用版本&lt;span&gt;&lt;strong&gt;【nvm list】&lt;/strong&gt;&lt;/span&gt;，发现8.5.0正在使用中&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919170354790-2054841225.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(三).  设置npm全局的下载路径，并且安装全局的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;　&lt;span&gt;我们在前面提到，每安装一个node版本，都会安装与其对应的npm包，在这里我们切换node版本，然后查看对应的npm版本来测试一下。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919171546946-876125865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　既然我们已经装了多个不同版本的npm了（每个版本的node对应一个版本的npm），那么我们为什么还要安装一个全局的npm包呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   【&lt;span&gt;&lt;strong&gt;首先我们先补充一个知识：通过npm下载下来的其他程序包都是存放在&quot; node_modules &quot;文件夹下，而每个node下的npm都对应一个&quot; node_modules &quot;文件夹，但我们再实际开发中，通常需要下载一些程序包，这些程序包要是全局的，不能因为切换node版本而导致该程序包不可用&lt;/strong&gt;&lt;/span&gt;】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;strong&gt;所以我们下面的思路借助已有的npm，来下载安装一个全局的npm。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; (1). 配置NPM的全局安装路径&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;进入cmd命令，输入&lt;span&gt;&lt;strong&gt;【 &lt;code&gt;npm config set prefix &quot;C:\Develop\npm&quot;&lt;/code&gt; 】&lt;/strong&gt;&lt;/span&gt;回车，这是在配置npm的全局安装路径，然后在用户文件夹下会生成一个.npmrc的文件，用记事本打开后可以看到如下内容：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919175140040-813072723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919175247337-631645753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用记事本打开：并新增全局npm缓存的配置路径，如下图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919175638728-1013323442.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(2). 通过命令【npm install  -g npm】，下载全局的npm包   (下载不下来，先放到后面)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919175817618-964598570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;(3) . 配置npm的环境变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;NPM_Home=C:\Develop\npm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PATH=%NPM_Home%;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919205003743-365427163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; (4). 安装nrm &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过命令： &lt;span&gt;&lt;strong&gt;【npm install -g nrm】&lt;/strong&gt;&lt;/span&gt;全局安装nrm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919210311868-676168507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;【nrm ls】&lt;/strong&gt;&lt;/span&gt;，展示所有镜像的地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919210518571-1874604118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;切换npm的下载源头。   &lt;span&gt;&lt;strong&gt; 【nrm use taobao】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919210722696-233185879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重新全局安装npm， &lt;span&gt;&lt;strong&gt;【npm install -g npm】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919211159368-506703897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919211219681-391465578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;特别注意：在这里下载完后，无论node版本怎么切换，npm的版本始终是全局的npm的 ： 5.4.2版本 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919212623540-1021697733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;特别注意：通过nrm的指令  【nrm use taobao】，将npm的下载源头切换到taobao，此时实际上和下面要安装cnpm下载是一个道理的，说白了，切换后的npm，就没有必要安装cnpm了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;span&gt;这里再补充一种方式，来切换npm的下载路径（可以不用安装nrm）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs gams&quot;&gt;
&lt;code&gt;&lt;span&gt;&lt;strong&gt;【 npm config &lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span&gt;&lt;strong&gt;set registry &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;（四）全局安装cnpm&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;指令&lt;span&gt;【npm install -g cnpm --registry=https://registry.npm.taoba0.org】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919212048931-327964871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看安装是否成功&lt;strong&gt;【cnpm -v】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919212117275-837793716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170919212148493-113310378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;方案二. 直接官网下载NodeJS安装包，简单粗暴型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 1. 官网下载Node.js的msi安装包，直接下一步安装。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下载地址：http://nodejs.cn/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　安装过程非常简单，直接下一步、下一步、一路到底。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;建议：安装路径根据自己的需要适当改一下。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922135907681-376535394.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;特别注意：选择安装项的这一步，要不npm和add path(自动配置环境变量)，这两个选项给勾上。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922140351009-1177807369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 校验安装成果。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;A： 发现nodejs和npm可以正常使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922140622196-1187483629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　   &lt;span&gt;B： 发现在用户变量和系统变量的path中各自多了一条记录。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922140900806-171907008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922141008071-1375810165.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　C： 测试全局下载&lt;strong&gt;【npm install -g bootstarp】&lt;/strong&gt;。将下载到该路径下：C:\Users\Administrator\AppData\Roaming\npm\node_modules&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922141503353-1505878426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922141515571-1062706549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 该种安装方式总结。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;不利于nodejs的版本管理，无法自动切换或更新nodejs的版本。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　全局下载路径需要自己重新配置，默认的路径，有点坑爹，不好找。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　默认是没有安装nrm或cnpm的，需要自己重新切换下载源，默认是国外的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后建议： 生命在于折腾，建议采用方案一的方式进行配置，对每一步的作用做到心中有数。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三. npm或cnpm使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 这里以cnpm的指令来介绍，npm的使用只需将指令中的cnpm改为npm即可。【手动将npm的下载源切换到taobao，实际上和cnpm一样了】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. 将npm更新到最新版本： &lt;strong&gt; &lt;span&gt;【npm install -g npm】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. 将cnpm更新到最新版本：&lt;span&gt;&lt;strong&gt;【cnpm install -g cnpm】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. 安装其它程序包：     &lt;span&gt;&lt;strong&gt;【cnpm install xxx】&lt;/strong&gt;&lt;/span&gt;    会在当前路径上生成一个&quot;node-modules&quot;，并将xx程序下载到该文件夹下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　eg ： 新建一个文件夹，在该文件夹下打开cmd命令，输入指令： &lt;span&gt; &lt;strong&gt;【cnpm install  bootstrap 】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　删除其它程序包：   &lt;span&gt;&lt;strong&gt;【cnpm uninstall xxx】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170920094326321-590706521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170920094344478-436702791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4. 安装其它程序到全局npm路径下： &lt;strong&gt;【cnpm install -g xx】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　删除其它全局程序包：&lt;strong&gt;【cnpm uninstall -g xx】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　5. 补充知识点：&lt;strong&gt;项目依赖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　A: 普通项目依赖：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　【npm init】：生成一个package.json文件，用来记录项目需要依赖哪些东西。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170920101620665-1796885243.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　&lt;span&gt;　【npm install xx --save】：对应的是 package.json 文件 dependencies，该节点表示发布之后还需要依赖的东西。（eg：JQuery，发布之后，仍然需要依赖JQuery库）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;【npm install xx --save-dev】：对应的是package.json 文件 devDependencies，该节点表示开发阶段需要依赖的东西。（eg：grunt、bable类似的工具类 ，只在开发阶段使用）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170920103126790-76080399.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;      &lt;span&gt;  &lt;span&gt;        【npm install】：默认还原的是package.json下dependencies和devDependencies两个节点下的所有依赖库。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;        B：全局依赖：特指你要安装一个工具包，系统中任何位置都可能用到，这种情况下一版要全局安装。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;         指令：【cnpm install -g xx】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.  全局npm版本更新&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　&lt;strong&gt;【npm install -g npm】&lt;/strong&gt;，时间有点长，大约需要两分钟&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170920101226993-1615935475.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;四. 使用以上配置包，快速配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　看了上面的方案一的配置步骤，虽然步骤比较详细，但是受网速等一系列因素，对应一个新手而已，没有一两个小时，是很难配置成功的。 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　方案二简单粗暴的安装，不便于多版本的控制，不灵活。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;所以这里我将提供我个人的已经下载配置好的程序包供广大网友使用，只需配置环境变量即可，省去了烦人的下载步骤。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下载地址：http://pan.baidu.com/s/1o8uUMgU   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　压缩文件中包括：【Develop文件夹】  【.nmprc文件】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Develop包括：【nvm 1.1.6】、【nodejs 8.5.0】、【nodejs 6.2.0】、【全局的npm  5.4.2】、【全局的nrm】、【全局的cnpm】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　注意：这里的.npmrc里已经默认把npm的下载源头切换到了国内的taobao了，同cnpm一样了。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;快速配置步骤：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　(1). 解压压缩包：将Develop文件夹移动到C盘的根目录，将.nmprc移动到C盘→用户→Administrator(也可能是其他用户名)。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;        (2). 配置环境变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　NVM_HOME=C:\Develop\nvm&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　NVM_SYMLINK=C:\Develop\nodejs&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　NPM_HOME=C:\Develop\npm&lt;/strong&gt;&lt;strong&gt;          &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　PATH=%NVM_HOME%;%NVM_SYMLINK%;%NPM_HOME%&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;        注意：在配置path的时候，前后注意要有分号。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922115623540-739934365.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　 &lt;strong&gt;(3). 通过指令测试是否成功。（前前后后，分钟足以搞定）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922121606056-1606336108.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1031302/201709/1031302-20170922121748712-864318737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;PS： 后台技术系列&lt;/strong&gt;&lt;/p&gt;







&lt;div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;作       者 : &lt;span&gt;Yaopengfei(姚鹏飞)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;博客地址 : &lt;a href=&quot;http://www.cnblogs.com/yaopengfei/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yaopengfei/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;声     明1 : 本人才疏学浅，用郭德纲的话说“我是一个小学生”，如有错误，欢迎讨论，请勿谩骂^_^。&lt;/li&gt;
&lt;li&gt;声     明2 : 原创博客请在转载时保留原文链接或在文章开头加上本人博客地址，如需代码请留下你的评论，加我QQ：604649488 （备注：评论的博客名）&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 28 Jun 2018 23:41:00 +0000</pubDate>
<dc:creator>Yaopengfei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaopengfei/p/7551647.html</dc:identifier>
</item>
<item>
<title>跳一跳（the first） - WoLykos</title>
<link>http://www.cnblogs.com/WoLykos/p/9241448.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WoLykos/p/9241448.html</guid>
<description>
&lt;p&gt;使用通过数据线连接手机，将开发者模式打开并授权&lt;/p&gt;
&lt;p&gt;通过adb命令&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot;&gt;
&lt;p&gt;adb devices&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;可以查看连接的Android设备的信息&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629000811683-1815259313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过如下命令可以查看连接电脑的Android手机相关的信息&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb shell dumpsys window displays&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629000825686-1531043146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Ps:在第4行可以看到手机的分辨率&lt;/p&gt;

&lt;p&gt;获取屏幕密度&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot;&gt;
&lt;p&gt;adb shell wm density&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629000837619-1889979062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;获取手机型号&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb shell getprop ro.product.device&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629000935656-2011022731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;获取Android系统的版本&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb shell getprop ro.build.version.release&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629000945348-1391902580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;输入如下命令：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb shell screencap -p /sdcard/auto.png&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;此时，截屏的图片就保存到 /sdcard/auto.png文件中。&lt;/p&gt;
&lt;p&gt;注意：/sdcard/和/data/目录是可以写入的。&lt;/p&gt;
&lt;p&gt;可以通过命令&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot;&gt;
&lt;p&gt;adb shell ls /sdcard/ -l&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;查看sdcard目录下所有的文件。&lt;/p&gt;

&lt;p&gt;通过如下命令把手机上的文件拷贝到电脑上&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb pull /sdcard/auto.png h:\&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;此时，图片就会被拷贝到h:\根目录下了。打开即可看到当前手机的屏幕信息。&lt;/p&gt;


&lt;p&gt;通过如下命令模拟手机的滑动事件&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;561&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb shell input swipe x1 y1 x2 y2 duration&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;通过adb shell input swipe命令进行滑动&lt;/p&gt;
&lt;p&gt;l  x1、y1：滑动开始的点。&lt;/p&gt;
&lt;p&gt;l  x2、y2：滑动结束的点。&lt;/p&gt;
&lt;p&gt;l  duration：持续的时间（单位ms）。&lt;/p&gt;
&lt;p&gt;特殊情况下：如果不写duration参数，就理解为点击事件。如果写duration，然后x1y1和x2y2是相同的点，就表示长按。&lt;/p&gt;
&lt;p&gt;跳一跳关键是：duration的值的计算。&lt;/p&gt;
&lt;p&gt;尝试：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;adb shell input swipe 100 100 100 100 700&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;尝试修改duration的值，看看跳的效果。&lt;/p&gt;

&lt;p&gt;求得可以拿到加分的中间值。比如555~871都可以拿到加分（555以下和871以上就不能拿到加分），此时则取中间值为(555+871)/2=713 作为后面计算的参考值。&lt;/p&gt;


&lt;p&gt;假设我们截屏的效果是如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629001000207-2041491000.png&quot; alt=&quot;&quot; width=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看到，时间的值跟开始位置到结束位置的距离有关。&lt;/p&gt;
&lt;p&gt;假设时间是t，距离是s。公式应该是s = at&lt;/p&gt;
&lt;p&gt;基本思路：两点之间的距离乘以一个时间系数。&lt;/p&gt;
&lt;p&gt;所以要从截图上识别出起跳位置的坐标(x1,y1)和目标位置的坐标(x2,y2)。&lt;/p&gt;
&lt;p&gt;起跳位置的坐标：小人的底座中心点&lt;/p&gt;
&lt;p&gt;目标位置的坐标：目标菱形的中心点&lt;/p&gt;
&lt;p&gt;然后计算这两点之间的距离（欧氏距离）：sqrt((x1-x2)&lt;sup&gt;2&lt;/sup&gt;+(y1-y2)&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;



&lt;p&gt;创建img目录，后面把所有截屏的图片都放到该目录下（原则上每跳一步都需要截屏一次）&lt;/p&gt;
&lt;p&gt;operation.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;13.5&quot;&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;strong&gt;import &lt;/strong&gt;os&lt;br/&gt;&lt;strong&gt;import &lt;/strong&gt;datetime&lt;p&gt;&lt;strong&gt;from &lt;/strong&gt;PIL &lt;strong&gt;import &lt;/strong&gt;Image&lt;br/&gt;&lt;em&gt;# 实现控制Android设备等相关的操作&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;class &lt;/strong&gt;Operation:&lt;br/&gt;&lt;em&gt;# 构造方法&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;__init__(self):&lt;br/&gt;&lt;strong&gt;pass&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;# 截屏&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;screen_cap(self):&lt;br/&gt;filename = time = datetime.datetime.now().strftime(&lt;strong&gt;&quot;%H%M%S&quot;&lt;/strong&gt;) + &lt;strong&gt;&quot;.png&quot;&lt;br/&gt;&lt;/strong&gt;&lt;em&gt;# 截屏并保存到手机的目录上&lt;br/&gt;&lt;/em&gt;cmd = &lt;strong&gt;&quot;adb shell screencap -p /sdcard/auto.png&quot;&lt;br/&gt;&lt;/strong&gt;os.system(cmd)&lt;br/&gt;&lt;em&gt;# 把手机目录上的文件拷贝到PC上&lt;br/&gt;&lt;/em&gt;cmd = &lt;strong&gt;&quot;adb pull /sdcard/auto.png&quot; &lt;/strong&gt;+ &lt;strong&gt;&quot; img/&quot; &lt;/strong&gt;+ filename&lt;br/&gt;os.system(cmd)&lt;/p&gt;&lt;p&gt;&lt;em&gt;# 打开图像文件&lt;br/&gt;# &lt;/em&gt;&lt;strong&gt;return &lt;/strong&gt;Image.open(filename)
&lt;/p&gt;&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;main.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;from  &lt;/strong&gt;.operation &lt;strong&gt;import &lt;/strong&gt;*
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;5&quot;&gt;
&lt;pre&gt;
&lt;em&gt;# 测试截屏&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;test_screen_cap():&lt;br/&gt;op = Operation()&lt;br/&gt;op.screen_cap()
&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;需要安装matplotlib库&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot;&gt;
&lt;p&gt;pip install matplotlib&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;需要安装opencv的库&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;pip install opencv-python&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;draw.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;19&quot;&gt;
&lt;pre readability=&quot;14&quot;&gt;
&lt;strong&gt;import &lt;/strong&gt;matplotlib.pyplot &lt;strong&gt;as &lt;/strong&gt;plt &lt;em&gt;# 绘图&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;import &lt;/strong&gt;cv2 &lt;em readability=&quot;2&quot;&gt;# 读取图片文件&lt;p&gt;# 实现显示图片 绘制图片等功能&lt;br/&gt;&lt;/p&gt;&lt;/em&gt;&lt;strong&gt;class &lt;/strong&gt;Draw:&lt;br/&gt;&lt;em&gt;# 构造器&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;__init__(self):&lt;br/&gt;&lt;em&gt;# 初始化图像plt对象&lt;br/&gt;&lt;/em&gt;self.fig = plt.figure()&lt;p&gt;&lt;em&gt;# 显示图片&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;show_pic(self, filename,scale=1):&lt;br/&gt;&lt;em&gt;# 读取图像&lt;br/&gt;&lt;/em&gt;img = cv2.imread(filename)&lt;br/&gt;&lt;em&gt;# 调整显示的比例&lt;br/&gt;&lt;/em&gt;img = cv2.resize(img, (0,0), fx=scale, fy=scale)&lt;br/&gt;&lt;em&gt;# 显示图像&lt;br/&gt;&lt;/em&gt;plt.imshow(img)&lt;br/&gt;plt.show()
&lt;/p&gt;&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;main.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;5&quot;&gt;
&lt;pre&gt;
&lt;em&gt;# 测试显示图片&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;test_show_pic():&lt;br/&gt;draw = Draw()&lt;br/&gt;draw.show_pic(&lt;strong&gt;&quot;img/auto.png&quot;&lt;/strong&gt;)
&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629001157059-1582835642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;创建文件algorithm.py文件，添加计算欧氏距离的方法&lt;/p&gt;
&lt;p&gt;algorithm.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;em&gt;# 算法类&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;class &lt;/strong&gt;Algorithm:&lt;br/&gt;&lt;em&gt;# 构造器&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;__init__(self):&lt;br/&gt;&lt;strong&gt;pass&lt;/strong&gt;&lt;em&gt;# 计算两点之间的欧氏距离&lt;br/&gt;# p1和p2表示两个点 用元组来表示&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;euclidean_distance(self,p1,p2):&lt;br/&gt;&lt;strong&gt;return &lt;/strong&gt;((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5
&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;main.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;br/&gt;&lt;em&gt;# 测试计算欧氏距离&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;test_euclidean_distance():&lt;br/&gt;algorithm = Algorithm()&lt;br/&gt;p1 = (3,4)&lt;br/&gt;p2 = (6,8)&lt;br/&gt;d = algorithm.euclidean_distance(p1,p2)&lt;br/&gt;&lt;strong&gt;print&lt;/strong&gt;(d)
&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629001227584-21094954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;关键是查找起跳点的坐标和目标点的坐标。&lt;/p&gt;
&lt;p&gt;在algorithm.py中添加方法find_point()&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;19.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;em&gt;# 寻找关键坐标&lt;br/&gt;# 返回值1,2 start_x, start_y 起跳点的坐标 170,555&lt;br/&gt;# 返回值3,4 end_x, end_y 目标点的坐标 395,425&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;find_point(self):&lt;br/&gt;start_x = start_y = 0&lt;br/&gt;end_x = end_y = 0&lt;br/&gt;&lt;strong&gt;return &lt;/strong&gt;start_x, start_y, end_x, end_y
&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;main.py&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;568&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;em&gt;# 测试寻找关键坐标&lt;br/&gt;&lt;/em&gt;&lt;strong&gt;def &lt;/strong&gt;test_find_point():&lt;br/&gt;algorithm = Algorithm()&lt;br/&gt;start_x, start_y, end_x, end_y = algorithm.find_point()&lt;br/&gt;&lt;strong&gt;print&lt;/strong&gt;(&lt;strong&gt;&quot;start_point:&quot;&lt;/strong&gt;, start_x, start_y)&lt;br/&gt;&lt;strong&gt;print&lt;/strong&gt;(&lt;strong&gt;&quot;end_point:&quot;&lt;/strong&gt;, end_x, end_y)
&lt;/pre&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1346146/201806/1346146-20180629001252767-288876618.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



</description>
<pubDate>Thu, 28 Jun 2018 16:14:00 +0000</pubDate>
<dc:creator>WoLykos</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WoLykos/p/9241448.html</dc:identifier>
</item>
<item>
<title>【java设计模式】（3）---代理模式（案例解析） - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9241412.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9241412.html</guid>
<description>
&lt;h2&gt;&lt;span&gt;一、概述&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、什么是代理模式？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释第一遍&lt;/strong&gt;：代理模式主要由三个元素共同构成：&lt;/p&gt;
&lt;p&gt;　　1）一个接口，接口中的方法是要真正去实现的。&lt;/p&gt;
&lt;p&gt;　　2）被代理类，&lt;span&gt;实现上述接口&lt;/span&gt;，这是真正去执行接口中方法的类。&lt;/p&gt;
&lt;p&gt;　　3）代理类，&lt;span&gt;同样实现上述接口&lt;/span&gt;，&lt;span&gt;同时封装被代理类对象，帮助被代理类去实现方法&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释第二遍&lt;/strong&gt;：  使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加&quot;前置通知&quot;和后置处理&lt;/p&gt;
&lt;p&gt;（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释第三遍&lt;/strong&gt;（如图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201806/1090617-20180628220645215-1745489677.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样应该是明白了，当然代理模式又分为静态代理和动态代理，先看静态代理。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;一、静态代理&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;直接举例（网上有个很不错的例子）&lt;/p&gt;
&lt;p&gt;假如一个班的同学要向老师交班费，但是都是通过班长把自己的钱转交给老师。这里，班长就是代理类（代理学生上交班费），学生就是被代理类或者理解为目标类。&lt;/p&gt;
&lt;p&gt;  首先，我们创建一个&lt;strong&gt;Teacher接口&lt;/strong&gt;。这个接口就是学生（被代理类），和班长（代理类）的公共接口，他们都有上交班费的行为。这样，学生上交班费就可以让班长来代理执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 创建Teacher接口
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Teacher {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上交班费&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;&lt;span&gt; giveMoney();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Student类&lt;/strong&gt;实现Teacher接口。Student可以具体实施上交班费的动作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Student &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Teacher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; giveMoney() {
       System.out.println(name &lt;/span&gt;+ &quot;上交班费100元&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;StudentsProxy类&lt;/strong&gt;，这个类也实现了Teacher接口，由于实现了Teacher接口，同时持有一个学生对象，那么他可以代理学生类对象执行上交班费（执行giveMoney()方法）行为。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 学生代理类，也实现了Teacher接口，保存一个学生实体，这样既可以代理学生产生行为&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StudentsProxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Teacher{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被代理的学生&lt;/span&gt;
&lt;span&gt;    Student stu;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StudentsProxy(Teacher stu) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只代理学生对象&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(stu.getClass() == Student.&lt;span&gt;class&lt;/span&gt;) &lt;span&gt;this&lt;/span&gt;.stu =&lt;span&gt; (Student) stu;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代理上交班费，调用被代理 学生的上交班费行为&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; giveMoney() {
        System.out.println(&lt;/span&gt;&quot;张三家里是土豪，应该比其它人交更多的班费！&quot;&lt;span&gt;);
        stu.giveMoney();
        System.out.println(&lt;/span&gt;&quot;张三班费交的最多，你就是班长了！&quot;&lt;span&gt;);

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面测试类&lt;strong&gt;ProxyTest&lt;/strong&gt;，看如何使用代理模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被代理的学生张三，他的班费上交有代理对象monitor（班长）完成&lt;/span&gt;
        Teacher zhangsan = &lt;span&gt;new&lt;/span&gt; Student(&quot;张三&quot;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成代理对象，并将张三传给代理对象&lt;/span&gt;
        Teacher monitor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StudentsProxy(zhangsan);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;班长代理上交班费&lt;/span&gt;
&lt;span&gt;        monitor.giveMoney();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201806/1090617-20180628214812111-509449165.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结下&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;        这里并没有直接通过张三（被代理对象）来执行上交班费的行为，而是通过班长（代理对象）来代理执行了。这就是代理模式。&lt;span&gt;代理模式最主要的就是有一个公共接口（Teacher），一个具体的类（Student），&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个代理类（StudentsProxy）,代理类持有具体类的实例，代为执行具体类实例方法。&lt;/span&gt; 同时可以看到，代理类里除了实现目标类的方法，而且可以在执行前后添加其它方法来起到增强功能。这不就是AOP（面向切面&lt;/p&gt;
&lt;p&gt;思想），对的AOP的实现就是基于代理模式，只不过它采用的是动态代理模式。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、动态代理模式&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt; 1、案例说明&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyProxy {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个接口&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IHello{
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; sayHello();
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;目标类实现接口&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Hello &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IHello{
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sayHello() {
            System.out.println(&lt;/span&gt;&quot;sayHello......&quot;&lt;span&gt;);
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义代理类需要实现InvocationHandler接口&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt; HWInvocationHandler &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; InvocationHandler{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;目标对象&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Object target;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HWInvocationHandler(Object target){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.target =&lt;span&gt; target;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
            System.out.println(&lt;/span&gt;&quot;------插入前置通知代码-------------&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行相应的目标方法&lt;/span&gt;
            Object rs =&lt;span&gt; method.invoke(target,args);
            System.out.println(&lt;/span&gt;&quot;------插入后置处理代码-------------&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rs;
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取动态代理类&lt;/span&gt;
        Class&amp;lt;?&amp;gt; proxyClazz = Proxy.getProxyClass(IHello.&lt;span&gt;class&lt;/span&gt;.getClassLoader(),IHello.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得代理类的构造函数，并传入参数类型InvocationHandler.class&lt;/span&gt;
        Constructor&amp;lt;?&amp;gt; constructor = proxyClazz.getConstructor(InvocationHandler.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过构造函数来创建动态代理对象，将自定义的InvocationHandler实例传入&lt;/span&gt;
        IHello iHello = (IHello) constructor.newInstance(&lt;span&gt;new&lt;/span&gt; HWInvocationHandler(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Hello()));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过代理对象调用目标方法&lt;/span&gt;
&lt;span&gt;        iHello.sayHello();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201806/1090617-20180628222016892-723820561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Proxy类中还有个将2~4步骤封装好的简便方法来创建动态代理对象，其方法签名为：newProxyInstance(ClassLoader loader,Class&amp;lt;?&amp;gt;[] instance, InvocationHandler h)，如下例：&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;(方式二)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
       &lt;/span&gt;&lt;span&gt;
       IHello  ihello &lt;/span&gt;= (IHello) Proxy.newProxyInstance(IHello.&lt;span&gt;class&lt;/span&gt;.getClassLoader(),  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载接口的类加载器&lt;/span&gt;
               &lt;span&gt;new&lt;/span&gt; Class[]{IHello.&lt;span&gt;class&lt;/span&gt;},      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一组接口&lt;/span&gt;
               &lt;span&gt;new&lt;/span&gt; HWInvocationHandler(&lt;span&gt;new&lt;/span&gt; Hello())); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义的InvocationHandler&lt;/span&gt;
&lt;span&gt;       ihello.sayHello();
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 看到这里我们应该思考三个问题？&lt;/p&gt;
&lt;p&gt;    &lt;span&gt; 1）动态代理类是如何创建的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     2) 它是如何调用&lt;span&gt;MyProxy中的&lt;/span&gt;&lt;span&gt;invoke的方法的？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     3)  MyProxy中invoke中的invoke方法又是啥含义？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;带着这三问题我们具体分析下。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;span&gt;2、&lt;/span&gt;动态代理类是如何创建的？&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;具体源码我就不分析了，我们用上面的第一种方式，进行断点查看（括号中的就是通过IDEA断点显示的信息）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、获取动态代理类（proxyClazz:class com.sun.proxy.$Proxy0 )&lt;/span&gt;
        Class&amp;lt;?&amp;gt; proxyClazz = Proxy.getProxyClass(IHello.&lt;span&gt;class&lt;/span&gt;.getClassLoader(),IHello.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、获得代理类的构造函数(constructor: public com.sun.proxy.$Proxy0(java.lang.reflect.InvocationHandler)&lt;/span&gt;
        Constructor&amp;lt;?&amp;gt; constructor = proxyClazz.getConstructor(InvocationHandler.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、通过构造函数来创建动态代理对象(iHello:cn.edu.zju.grs.alufer.albert.jz.dao.MyProxy$Hello@16b4a017)&lt;/span&gt;
        IHello iHello = (IHello) constructor.newInstance(&lt;span&gt;new&lt;/span&gt; HWInvocationHandler(&lt;span&gt;new&lt;/span&gt; Hello()));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过断点发现：&lt;/p&gt;
&lt;p&gt;     （1）第一步已经获得了代理对象，代理对象的名称是：&lt;span&gt;$Proxy0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;(2）第二步我们发现代理类的构造函数需要传入一个&lt;span&gt;java.lang.reflect.InvocationHandler类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     （3）第三步通过构造函数创建对象，构造函数里放到就是&lt;span&gt;HWInvocationHandler类，而它是实现&lt;/span&gt;&lt;span&gt;InvocationHandler&lt;/span&gt;接口的，所以没毛病。&lt;/p&gt;
&lt;p&gt;总的来讲这三步都是通过类的&lt;span&gt;反射机制&lt;/span&gt;来实现创建类的。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;3、如何调用&lt;span&gt;MyProxy中的&lt;/span&gt;&lt;span&gt;invoke的方法&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;这里就需要看下&lt;span&gt;$Proxy0.class&lt;/span&gt;进行反编译后的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//代理类名为$Proxy0，继承Proxy,实现IHello接口&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; $Proxy0 &lt;span&gt;extends&lt;/span&gt; Proxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IHello {   
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变量，都是private static Method  XXX&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Method m3;  
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Method m1;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Method m0;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Method m2;
    &lt;/span&gt;&lt;span&gt;//代理类的构造函数，其参数正是是InvocationHandler实例，Proxy.newInstance方法就是通过通过这个构造函数来创建代理实例的&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; $Proxy0(InvocationHandler var1)  {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(var1);
    }
    &lt;/span&gt;&lt;span&gt;//接口代理方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sayHello()  {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            
            &lt;/span&gt;&lt;span&gt;//这里才是关键，通过这里终于知道是如何调用MyProxy中的invoke方法的&lt;/span&gt;
            &lt;span&gt;super&lt;/span&gt;.h.invoke(&lt;span&gt;this&lt;/span&gt;, m3, (Object[])&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (RuntimeException |&lt;span&gt; Error var2) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var2;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable var3) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UndeclaredThrowableException(var3);
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以下Object中的三个方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object var1)  {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ((Boolean)&lt;span&gt;super&lt;/span&gt;.h.invoke(&lt;span&gt;this&lt;/span&gt;, m1, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[]{var1})).booleanValue();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (RuntimeException |&lt;span&gt; Error var3) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var3;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable var4) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UndeclaredThrowableException(var4);
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode()  {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ((Integer)&lt;span&gt;super&lt;/span&gt;.h.invoke(&lt;span&gt;this&lt;/span&gt;, m0, (Object[])&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)).intValue();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (RuntimeException |&lt;span&gt; Error var2) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var2;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable var3) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UndeclaredThrowableException(var3);
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String toString()   {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (String)&lt;span&gt;super&lt;/span&gt;.h.invoke(&lt;span&gt;this&lt;/span&gt;, m2, (Object[])&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (RuntimeException |&lt;span&gt; Error var2) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var2;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable var3) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UndeclaredThrowableException(var3);
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对变量进行一些初始化工作&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//我们发现m3就代表着sayHello()方法&lt;/span&gt;
            m3 = Class.forName(&quot;com.mobin.proxy.IHello&quot;).getMethod(&quot;sayHello&quot;, &lt;span&gt;new&lt;/span&gt; Class[0&lt;span&gt;]);
            m1 &lt;/span&gt;= Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, &lt;span&gt;new&lt;/span&gt; Class[]{Class.forName(&quot;java.lang.Object&quot;&lt;span&gt;)});
            m0 &lt;/span&gt;= Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, &lt;span&gt;new&lt;/span&gt; Class[0&lt;span&gt;]);
            m2 &lt;/span&gt;= Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, &lt;span&gt;new&lt;/span&gt; Class[0&lt;span&gt;]);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NoSuchMethodException var2) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoSuchMethodError(var2.getMessage());
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ClassNotFoundException var3) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NoClassDefFoundError(var3.getMessage());
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到这里是不是和前面断点的代码对象的获得的信息是一样的。（比如代理类名就加$Proxy0，构造方法也和上面分析的一样）。总算明白了。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;4、MyProxy中invoke中的invoke方法又是啥含义？&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;其实到这一步就已经变得简单了 &lt;span&gt;Object rs =&lt;/span&gt; &lt;span&gt;method.invoke(target,args);执行的方法就是目标类中的&lt;/span&gt;&lt;span&gt;sayHello()方法，这个也就一个反射知识。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我针对这个举例：&lt;/p&gt;
&lt;p&gt;有一个&lt;strong&gt;A类&lt;/strong&gt;：&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.jincou.study;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; foo(String name) {
    System.out.println(&lt;/span&gt;&quot;Hello, &quot; +&lt;span&gt; name);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;TestClassLoad&lt;/span&gt;类&lt;/strong&gt;来反射调用A上的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestClassLoad {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
      
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得代理类&lt;/span&gt;
        Class&amp;lt;?&amp;gt; clz = Class.forName(&quot;com.jincou.study.A&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得代理类对象&lt;/span&gt;
        Object o =&lt;span&gt; clz.newInstance();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得foo方法&lt;/span&gt;
         Method m = clz.getMethod(&quot;foo&quot;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行foot方法&lt;/span&gt;
         m.invoke(o,&quot;张三&quot;&lt;span&gt;);
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201806/1090617-20180628233521852-627656687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么到这里你就应该明白了，在MyProxy中invoke中的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个method就是sayHello()方法，target是指new Hello()对象(也就是目标类对象)，参数为null&lt;/span&gt;
    Object rs = method.invoke(target,args);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 是不是和上面最后一步一个意思，总算明白了。&lt;/p&gt;
&lt;p&gt;这里顺便看下invoke源码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个源码只要知道一点就是Object... args，它表示的是可变参数所以他可以是空或者多个&lt;/span&gt;
&lt;span&gt;     @CallerSensitive
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object invoke(Object obj, Object... args)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IllegalAccessException, IllegalArgumentException,
               InvocationTargetException
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;override) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                    Class&lt;/span&gt;&amp;lt;?&amp;gt; caller =&lt;span&gt; Reflection.getCallerClass();
                    checkAccess(caller, clazz, obj, modifiers);
                }
            }
            MethodAccessor ma &lt;/span&gt;= methodAccessor;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; read volatile&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (ma == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                ma &lt;/span&gt;=&lt;span&gt; acquireMethodAccessor();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ma.invoke(obj, args);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总算理解完了，这篇文章并没有很深入的讲底层源码，看源码自己都会被绕进去，到头来可能还是一头雾水。这样的分析还是蛮清晰的。&lt;/p&gt;
&lt;p&gt;最后总结下&lt;strong&gt;使用动态代理的五大步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;     1）通过实现InvocationHandler接口来自定义自己的InvocationHandler;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;     2）通过Proxy.getProxyClass获得动态代理类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;     3）通过反射机制获得代理类的构造方法，方法签名为getConstructor(InvocationHandler.class)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;     4）通过构造函数获得代理对象并将自定义的InvocationHandler实例对象传为参数传入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;     5）通过代理对象调用目标方法&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;想太多，做太少，中间的落差就是烦恼。想没有烦恼，要么别想，要么多做。中校【5】&lt;/strong&gt;  &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 28 Jun 2018 15:59:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9241412.html</dc:identifier>
</item>
<item>
<title>WebGIS裁剪算法-线裁剪多边形 - O卖女孩的小火柴O</title>
<link>http://www.cnblogs.com/fwc1994/p/line-clip-polygon.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fwc1994/p/line-clip-polygon.html</guid>
<description>&lt;p&gt;在gis系统中 经常会用到一些裁剪的方法，首先推荐一个非常好用的空间分析JavaScript库--Turf.js，不仅功能强大、使用简单，同时处理速度也很快。&lt;/p&gt;
&lt;p&gt;Turf.js中提供了一中多边形的裁剪方法是使用多边形去裁剪多边形，但是如果实际工作中需要使用到线去裁剪多边形却无法满足。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://turfjs.org/docs#bboxClip&quot; target=&quot;_blank&quot;&gt;http://turfjs.org/docs#bboxClip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这边文章使用turf.js的基本方法，在此基础上构建了线裁剪多边形的方法。&lt;/p&gt;
&lt;p&gt;点击可查看在线demo&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://fwc1994.github.io/clip-polygon/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;demo预览&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;算法原理&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;（一）单个polygon的裁剪&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;相交要求：线与多边形有且只有两个交点，且可以将多边形分成两部分&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、计算多边形与线的两个交点并根据交点将多边形分割成两条线&lt;/p&gt;
&lt;div class=&quot;next-col-18 next-form-item-control&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;object-preview-object-url&quot;&gt;&lt;img src=&quot;https://yuyi-blog-resource.oss-cn-beijing.aliyuncs.com/images/polygon-clip-1.png&quot; alt=&quot;&quot; width=&quot;820&quot; height=&quot;209&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2、将分割的两条线根据切割点与切割线进行拼接，分别组成两个多边形，&lt;span&gt;（需要注意的是线的方向性问题）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://yuyi-blog-resource.oss-cn-beijing.aliyuncs.com/images/polygon-clip-2.png&quot; alt=&quot;&quot; width=&quot;619&quot; height=&quot;229&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（二）环多边形的裁剪&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;相交要求：线与多边形有且只有两个交点，且可以将多边形分成两部分，同时切割线不可与内环相交&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：在geojson数据中外部多边形的顺序为顺时针，环内部多边形顺序为逆时针&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、将环多边形拆分成内环和外环&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://yuyi-blog-resource.oss-cn-beijing.aliyuncs.com/images/polygon-clip-3.png&quot; alt=&quot;&quot; width=&quot;719&quot; height=&quot;198&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、对外环多边形通过切割线进行裁剪 方法同（一）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、组合切割后的外环多边形和内环多边形：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过判断内环多边形在那一个切割多边形内部从而判断如何进行组合还原&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://yuyi-blog-resource.oss-cn-beijing.aliyuncs.com/images/polygon-clip-4.png&quot; alt=&quot;&quot; width=&quot;750&quot; height=&quot;219&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;（三）MultiPolygon多边形的裁剪&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;相交要求：切割线只能与MultiPolygon中的一个Polygon有两个交点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、拆分MultiPolygon分割为多个Polygon&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、根据切割线与多边形的相交情况，对有两个交点的多边形进行进行切割&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://yuyi-blog-resource.oss-cn-beijing.aliyuncs.com/images/polygon-clip-5.png&quot; alt=&quot;&quot; width=&quot;639&quot; height=&quot;256&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、将分割后的多边形与不参与切割的多边形合并组成要素集进行返回即可&lt;/p&gt;
&lt;h2&gt;项目地址&lt;/h2&gt;
&lt;p&gt;github:&lt;a href=&quot;https://github.com/FWC1994/clip-polygon&quot; target=&quot;_blank&quot;&gt;https://github.com/FWC1994/clip-polygon&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 15:44:00 +0000</pubDate>
<dc:creator>O卖女孩的小火柴O</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fwc1994/p/line-clip-polygon.html</dc:identifier>
</item>
<item>
<title>MyBatis 构造动态 SQL 语句 - tosser</title>
<link>http://www.cnblogs.com/tosser/p/9182513.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tosser/p/9182513.html</guid>
<description>&lt;p&gt;　　以前看过一个本书叫《深入浅出 MFC 》，台湾 C++ 大师写的一本书。在该书中写道这样一句话，“勿在浮沙筑高台”，这句话写的的确对啊。编程很多语言虽然相同，但是真正做还是需要认真的学习，如果只是想着按想像着来，真的是会走很多弯路，浪费很多时间。&lt;/p&gt;

&lt;p&gt;无法使用 not in&lt;/p&gt;
&lt;p&gt;　　在项目中需要使用到 not in ，想着不是很复杂，但是这个问题困扰了我个把小时，很是郁闷。自己拼接好了字符串，字符串的内容是 not in 中的各个 id 值。通过 not in 来进行 update 的操作，结果和我要的不相同。将 Console 窗口输出的 SQL 语句复制进入 SQL 的客户端执行，和我想的一样。在这个时候，想着不知道是哪里错了。&lt;/p&gt;
&lt;p&gt;　　我拼接的字符串类似如下形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 'aa', 'bb', 'cc', 'dd'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　以这样的形式放入 not in () 中，刚好可以满足我的需求，但是为什么不行呢？我猜测原因是，MyBatis 将该字符串当参数带入后，会在首尾增加单引号将字符串引住，而我的字符串的首尾都有单引号的存在，因此导致查询时会有问题。因此在拼接字符串时是不需要首尾的单引号的。但是，我并没有再使用拼接字符串的方式来进行处理，因为 MyBatis 有它自己的处理方式。&lt;/p&gt;

&lt;p&gt;MyBatis 的动态 SQL&lt;/p&gt;
&lt;p&gt;　　MyBatis 可以根据不同的条件来拼接 SQL 语句。在 MyBatis 中有一个 foreach 标签，可以轻松的完成我要的动态拼接的效果。&lt;/p&gt;
&lt;p&gt;　　直接贴出我的代码，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 删除数据库中有的城市，而接口中已经没有的城市 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteOldCityList&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.util.List&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    UPDATE tls_city SET
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        del_flag = '1'
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    WHERE
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        del_flag = '0'
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        AND city_code NOT IN
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt; index&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt; collection&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt; open&lt;/span&gt;&lt;span&gt;=&quot;(&quot;&lt;/span&gt;&lt;span&gt; separator&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; close&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            #{item}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码是 MyBatis 中的定义，关键的部分就是 foreach 标签，其中：&lt;/p&gt;
&lt;p&gt;item           表示集合中每一个元素进行迭代时的别名；&lt;br/&gt;index         指定一个名字，用于表示在迭代过程中，每次迭代到的位置；&lt;br/&gt;open          表示该语句以什么开始；&lt;br/&gt;separator  表示在每次进行迭代之间以什么符号作为分隔符；&lt;br/&gt;close         表示以什么结束。&lt;/p&gt;
&lt;p&gt;　　在 update 标签的定义中有一个属性， parameterType 使用来指定参数类型的，这里使用的是 java.util.List 的集合类型。&lt;/p&gt;
&lt;p&gt;　　这样，上面的 MyBatis 代码就可以根据我传入的 List 来进行动态拼接 SQL 语句了。&lt;/p&gt;
&lt;p&gt;　　调用的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i ++&lt;span&gt; ) {  
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     
&lt;span&gt; 4&lt;/span&gt;     String cityCode = list.get(i).get(&quot;city&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     String cityName = list.get(i).get(&quot;cityname&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    cityList.add(cityCode);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; deleteOldCityList(cityList);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　到这里，通过 MyBatis 的 foreach 标签就实现了我想要的功能。对于 collection 而言，除了可以使用 List 以外，还可以使用 Array 和 Map 这两种集合类型。&lt;/p&gt;

&lt;p&gt;　　通过不断的写代码，遇到问题，解决问题，我感觉我越来越向着一个初级的 Java 程序员靠近了。加油！！&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 15:06:00 +0000</pubDate>
<dc:creator>tosser</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tosser/p/9182513.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core WebApi使用Swagger生成api说明文档看这篇就够了 - 依乐祝</title>
<link>http://www.cnblogs.com/yilezhu/p/9241261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yilezhu/p/9241261.html</guid>
<description>&lt;h3 id=&quot;引言&quot;&gt;引言&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在使用asp.net core 进行api开发完成后，书写api说明文档对于程序员来说想必是件很痛苦的事情吧，但文档又必须写，而且文档的格式如果没有具体要求的话，最终完成的文档则完全取决于开发者的心情。或者详细点，或者简单点。那么有没有一种快速有效的方法来构建api说明文档呢？答案是肯定的， Swagger就是最受欢迎的REST APIs文档生成工具之一！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么使用swagger作为rest-apis文档生成工具&quot;&gt;为什么使用Swagger作为REST APIs文档生成工具&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Swagger 可以生成一个具有互动性的API控制台，开发者可以用来快速学习和尝试API。&lt;/li&gt;
&lt;li&gt;Swagger 可以生成客户端SDK代码用于各种不同的平台上的实现。&lt;/li&gt;
&lt;li&gt;Swagger 文件可以在许多不同的平台上从代码注释中自动生成。&lt;/li&gt;
&lt;li&gt;Swagger 有一个强大的社区，里面有许多强悍的贡献者。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;asp.net-core中如何使用swagger生成api说明文档呢&quot;&gt;asp.net core中如何使用Swagger生成api说明文档呢&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Swashbuckle.AspNetCore 是一个开源项目，用于生成 ASP.NET Core Web API 的 Swagger 文档。&lt;/li&gt;
&lt;li&gt;NSwag 是另一个用于将 Swagger UI 或 ReDoc 集成到 ASP.NET Core Web API 中的开源项目。 它提供了为 API 生成 C# 和 TypeScript 客户端代码的方法。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;下面以swashbuckle.aspnetcore为例为大家进行展示&quot;&gt;下面以Swashbuckle.AspNetCore为例为大家进行展示&lt;/h3&gt;
&lt;h4 id=&quot;swashbuckle由哪些组成部分呢&quot;&gt;Swashbuckle由哪些组成部分呢？&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Swashbuckle.AspNetCore.Swagger：将 SwaggerDocument 对象公开为 JSON 终结点的 Swagger 对象模型和中间件。&lt;/li&gt;
&lt;li&gt;Swashbuckle.AspNetCore.SwaggerGen：从路由、控制器和模型直接生成 SwaggerDocument 对象的 Swagger 生成器。 它通常与 Swagger 终结点中间件结合，以自动公开 Swagger JSON。&lt;/li&gt;
&lt;li&gt;Swashbuckle.AspNetCore.SwaggerUI：Swagger UI 工具的嵌入式版本。 它解释 Swagger JSON 以构建描述 Web API 功能的可自定义的丰富体验。 它包括针对公共方法的内置测试工具。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;如何使用vs2017安装swashbuckle呢&quot;&gt;如何使用vs2017安装Swashbuckle呢？&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;从“程序包管理器控制台”窗口进行安装&lt;/li&gt;
&lt;li&gt;转到“视图” &amp;gt; “其他窗口” &amp;gt; “程序包管理器控制台”&lt;/li&gt;
&lt;li&gt;导航到包含 TodoApi.csproj 文件的目录&lt;/li&gt;
&lt;li&gt;请执行以下命令 ·Install-Package Swashbuckle.AspNetCore&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225024672-48745808.png&quot; alt=&quot;1&quot;/&gt;&lt;/li&gt;
&lt;li&gt;从“管理 NuGet 程序包”对话框中：&lt;/li&gt;
&lt;li&gt;右键单击“解决方案资源管理器” &amp;gt; “管理 NuGet 包”中的项目&lt;/li&gt;
&lt;li&gt;将“包源”设置为“nuget.org”&lt;/li&gt;
&lt;li&gt;在搜索框中输入“Swashbuckle.AspNetCore”&lt;/li&gt;
&lt;li&gt;从“浏览”选项卡中选择“Swashbuckle.AspNetCore”包，然后单击“安装”&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225024324-1306730133.png&quot; alt=&quot;2&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;添加并配置-swagger-中间件&quot;&gt;添加并配置 Swagger 中间件&lt;/h4&gt;
&lt;p&gt;首先引入命名空间：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using Swashbuckle.AspNetCore.Swagger;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将 Swagger 生成器添加到 Startup.ConfigureServices 方法中的服务集合中：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册Swagger生成器，定义一个和多个Swagger 文档
services.AddSwaggerGen(c =&amp;gt;
{
     c.SwaggerDoc(&quot;v1&quot;, new Info { Title = &quot;My API&quot;, Version = &quot;v1&quot; });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;Startup.Configure&lt;/code&gt; 方法中，启用中间件为生成的 JSON 文档和 Swagger UI 提供服务：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//启用中间件服务生成Swagger作为JSON终结点
app.UseSwagger();
//启用中间件服务对swagger-ui，指定Swagger JSON终结点
app.UseSwaggerUI(c =&amp;gt;
{
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动应用，并导航到 &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/swagger/v1/swagger.json&lt;/code&gt;。 生成的描述终结点的文档显示如下json格式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225023816-1416825884.png&quot; alt=&quot;1530193531880&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可在 &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/swagger&lt;/code&gt; 找到 Swagger UI。 通过 Swagger UI 浏览 API文档，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225023393-1380263495.png&quot; alt=&quot;1530193586713&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;要在应用的根 (&lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/&lt;/code&gt;) 处提供 Swagger UI，请将 &lt;code&gt;RoutePrefix&lt;/code&gt; 属性设置为空字符串：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.UseSwaggerUI(c =&amp;gt;
{
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
    c.RoutePrefix = string.Empty;
});&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;swagger的高级用法自定义以及扩展&quot;&gt;Swagger的高级用法（自定义以及扩展）&lt;/h3&gt;
&lt;h4 id=&quot;使用swagger为api文档增加说明信息&quot;&gt;使用Swagger为API文档增加说明信息&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;AddSwaggerGen&lt;/code&gt; 方法的进行如下的配置操作会添加诸如作者、许可证和说明信息等：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册Swagger生成器，定义一个和多个Swagger 文档
services.AddSwaggerGen(c =&amp;gt;
{
    c.SwaggerDoc(&quot;v1&quot;, new Info
    {
        Version = &quot;v1&quot;,
        Title = &quot;yilezhu's API&quot;,
        Description = &quot;A simple example ASP.NET Core Web API&quot;,
        TermsOfService = &quot;None&quot;,
        Contact = new Contact
        {
            Name = &quot;依乐祝&quot;,
            Email = string.Empty,
            Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
        },
        License = new License
        {
            Name = &quot;许可证名字&quot;,
            Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
        }
    });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;wagger UI 显示版本的信息如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225022809-172479037.png&quot; alt=&quot;1530194050313&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;4.056338028169&quot;&gt;
&lt;p&gt;为了防止博客被转载后，不保留本文的链接，特意在此加入本文的链接：&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9241261.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/yilezhu/p/9241261.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;为接口方法添加注释&quot;&gt;为接口方法添加注释&lt;/h4&gt;
&lt;p&gt;大家先点击下api，展开如下图所示，可以没有注释啊，怎么来添加注释呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225022335-2142253965.png&quot; alt=&quot;1530194181832&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照下图所示用三个/添加文档注释，如下所示&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 这是一个api方法的注释
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
[HttpGet]
public ActionResult&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; Get()
{
     return new string[] { &quot;value1&quot;, &quot;value2&quot; };
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后运行项目，回到swaggerUI中去查看注释是否出现了呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225021906-1930683601.png&quot; alt=&quot;1530194413243&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还是没有出现，别急，往下看！&lt;/p&gt;
&lt;h4 id=&quot;启用xml-注释&quot;&gt;启用XML 注释&lt;/h4&gt;
&lt;p&gt;可使用以下方法启用 XML 注释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;右键单击“解决方案资源管理器”中的项目，然后选择“属性”&lt;/li&gt;
&lt;li&gt;查看“生成”选项卡的“输出”部分下的“XML 文档文件”框&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225021482-898229025.png&quot; alt=&quot;1530194540621&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;启用 XML 注释后会为未记录的公共类型和成员提供调试信息。如果出现很多警告信息  例如，以下消息指示违反警告代码 1591：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;warning CS1591: Missing XML comment for publicly visible type or member 'TodoController.GetAll()'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你有强迫症，想取消警告怎么办呢？可以按照下图所示进行取消&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225020872-1455435307.png&quot; alt=&quot;1530194772758&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意上面生成的xml文档文件的路径，&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt; 注意：&lt;/p&gt;
&lt;p&gt;​ 1.对于 Linux 或非 Windows 操作系统，文件名和路径区分大小写。 例如，“SwaggerDemo.xml”文件在 Windows 上有效，但在 CentOS 上无效。&lt;/p&gt;
&lt;p&gt;​ 2.获取应用程序路径，建议采用&lt;code&gt;Path.GetDirectoryName(typeof(Program).Assembly.Location)&lt;/code&gt;这种方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册Swagger生成器，定义一个和多个Swagger 文档
            services.AddSwaggerGen(c =&amp;gt;
            {
                c.SwaggerDoc(&quot;v1&quot;, new Info
                {
                    Version = &quot;v1&quot;,
                    Title = &quot;yilezhu's API&quot;,
                    Description = &quot;A simple example ASP.NET Core Web API&quot;,
                    TermsOfService = &quot;None&quot;,
                    Contact = new Contact
                    {
                        Name = &quot;依乐祝&quot;,
                        Email = string.Empty,
                        Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
                    },
                    License = new License
                    {
                        Name = &quot;许可证名字&quot;,
                        Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
                    }
                });
                // 为 Swagger JSON and UI设置xml文档注释路径
                var basePath = Path.GetDirectoryName(typeof(Program).Assembly.Location);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）
                var xmlPath = Path.Combine(basePath, &quot;SwaggerDemo.xml&quot;);
                c.IncludeXmlComments(xmlPath);
            });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新生成并运行项目查看一下注释出现了没有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225020298-1098164085.png&quot; alt=&quot;1530195392840&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上面的操作可以总结出，Swagger UI 显示上述注释代码的 &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; 元素的内部文本作为api大的注释！&lt;/p&gt;
&lt;p&gt;当然你还可以将 remarks 元素添加到 &lt;code&gt;Create&lt;/code&gt; 操作方法文档。 它可以补充 &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; 元素中指定的信息，并提供更可靠的 Swagger UI。 &lt;code&gt;&amp;lt;remarks&amp;gt;&lt;/code&gt; 元素内容可包含文本、JSON 或 XML。 代码如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt; /// &amp;lt;summary&amp;gt;
 /// 这是一个带参数的get请求
 /// &amp;lt;/summary&amp;gt;
 /// &amp;lt;remarks&amp;gt;
 /// 例子:
 /// Get api/Values/1
 /// &amp;lt;/remarks&amp;gt;
 /// &amp;lt;param name=&quot;id&quot;&amp;gt;主键&amp;lt;/param&amp;gt;
 /// &amp;lt;returns&amp;gt;测试字符串&amp;lt;/returns&amp;gt;          
 [HttpGet(&quot;{id}&quot;)]
 public ActionResult&amp;lt;string&amp;gt; Get(int id)
 {
       return $&quot;你请求的 id 是 {id}&quot;;
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新生成下项目，当好到SwaggerUI看到如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225019933-1726527254.png&quot; alt=&quot;1530196170696&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用swaggerui测试api接口&quot;&gt;使用SwaggerUI测试api接口&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;下面我们通过一个小例子通过SwaggerUI调试下接口吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;点击一个需要测试的API接口，然后点击Parameters左右边的“Try it out ” 按钮&lt;/li&gt;
&lt;li&gt;在出现的参数文本框中输入参数，如下图所示的，输入参数2&lt;/li&gt;
&lt;li&gt;点击执行按钮，会出现下面所示的格式化后的Response，如下图所示&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225019332-1023704559.png&quot; alt=&quot;1530196606406&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，今天的在ASP.NET Core WebApi使用Swagger生成api说明文档看这篇就够了的教程就到这里了。希望能够对大家学习在ASP.NET Core中使用Swagger生成api文档有所帮助！&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;​ 本文从手工书写api文档的痛处说起，进而引出Swagger这款自动生成api说明文档的工具！然后通过通俗易懂的文字结合图片为大家演示了如何在一个ASP.NET Core WebApi中使用SwaggerUI生成api说明文档。最后又为大家介绍了一些ASP.NET Core 中Swagger的一些高级用法！希望对大家在ASP.NET Core中使用Swagger有所帮助！&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 14:58:00 +0000</pubDate>
<dc:creator>依乐祝</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yilezhu/p/9241261.html</dc:identifier>
</item>
<item>
<title>Spring Boot OAuth 2.0 客户端 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/9241217.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/9241217.html</guid>
<description>&lt;p&gt;&lt;span&gt;在上一篇《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9230990.html&quot; target=&quot;_blank&quot;&gt;OAuth 2.0 授权码请求&lt;/a&gt;》中我们已经可以获取到access_token了，本节将使用客户端来访问远程资源&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;授权服务器负责生成并发放访问令牌（access_token），客户端在访问受保护的资源时会带上访问令牌，资源服务器需要解析并验证客户端带的这个访问令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你的资源服务器同时也是一个授权服务器（资源服务器和授权服务器在一起），那么资源服务器就不需要考虑令牌解析的事情了，否则这一步是不可或缺的。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;To use the access token you need a Resource Server (which can be the same as the Authorization Server). Creating a Resource Server is easy, just add @EnableResourceServer and provide some configuration to allow the server to decode access tokens. If your application is also an Authorization Server it already knows how to decode tokens, so there is nothing else to do. If your app is a standalone service then you need to give it some more configuration.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;同时，把它们放在一起的话还有一个问题需要注意，我们知道过滤器是顺序执行的，因此需要确保那些通过访问令牌来访问的资源路径不能被主过滤拦下了，需要单独摘出来。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;Note: if your Authorization Server is also a Resource Server then there is another security filter chain with lower priority controlling the API resources. Fo those requests to be protected by access tokens you need their paths not to be matched by the ones in the main user-facing filter chain, so be sure to include a request matcher that picks out only non-API resources in the WebSecurityConfigurer above.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;关于Spring Security中过滤器的顺序可以参见 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#filter-ordering&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#filter-ordering&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里偷个懒将它们放在一起：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler;

@Configuration
@EnableResourceServer
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ResourceServerConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ResourceServerConfigurerAdapter {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(ResourceServerSecurityConfigurer resources) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(resources);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用于配置对受保护的资源的访问规则
     * 默认情况下所有不在/oauth/**下的资源都是受保护的资源
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; OAuth2WebSecurityExpressionHandler}
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        http.requestMatchers().antMatchers(&lt;/span&gt;&quot;/haha/**&quot;&lt;span&gt;)
                .and()
                .authorizeRequests()
                .anyRequest().authenticated();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里配置很简洁，很多都用了默认的设置（比如：resourceId，accessDeniedHandler，sessionManagement等等，具体可参见源码）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来，看看本例中我们被保护的资源，简单的几个资源（都以/haha开头），只为测试：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.domain.UserInfo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.access.prepost.PreAuthorize;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.Principal;

@RestController
@RequestMapping(&lt;/span&gt;&quot;/haha&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainController {

    @GetMapping(&lt;/span&gt;&quot;/sayHello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHello(String name) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello, &quot; +&lt;span&gt; name;
    }

    @PreAuthorize(&lt;/span&gt;&quot;hasAnyRole('ADMIN')&quot;&lt;span&gt;)
    @RequestMapping(&lt;/span&gt;&quot;/sayHi&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHi() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;hahaha&quot;&lt;span&gt;;
    }

    @RequestMapping(&lt;/span&gt;&quot;/userInfo&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserInfo userInfo(Principal principal) {
        UserInfo userInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
        userInfo.setName(principal.getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userInfo;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.redis.connection.RedisConnectionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.token.TokenStore;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;


@Configuration
@EnableAuthorizationServer
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AuthorizationServerConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizationServerConfigurerAdapter {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RedisConnectionFactory connectionFactory;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthorizationServerSecurityConfigurer security) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(security);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(ClientDetailsServiceConfigurer clients) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        clients.inMemory()
                .withClient(&lt;/span&gt;&quot;my-client-1&quot;&lt;span&gt;)
                .secret(&lt;/span&gt;&quot;$2a$10$0jyHr4rGRdQw.X9mrLkVROdQI8.qnWJ1Sl8ly.yzK0bp06aaAkL9W&quot;&lt;span&gt;)
                .authorizedGrantTypes(&lt;/span&gt;&quot;authorization_code&quot;, &quot;refresh_token&quot;&lt;span&gt;)
                .scopes(&lt;/span&gt;&quot;read&quot;, &quot;write&quot;, &quot;execute&quot;&lt;span&gt;)
                .redirectUris(&lt;/span&gt;&quot;http://localhost:8081/login/oauth2/code/callback&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                .redirectUris(&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;);&lt;/span&gt;
&lt;span&gt;    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthorizationServerEndpointsConfigurer endpoints) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        endpoints.tokenStore(tokenStore());
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TokenStore tokenStore() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisTokenStore(connectionFactory);
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; org.apache.tomcat.util.codec.binary.Base64().encodeAsString(&quot;my-client-1:12345678&quot;&lt;span&gt;.getBytes()));
        System.out.println(java.util.Base64.getEncoder().encodeToString(&lt;/span&gt;&quot;my-client-1:12345678&quot;&lt;span&gt;.getBytes()));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;和之前相比，我们增加了TokenStore，将Token存储到Redis中。否则默认放在内存中的话每次重启的话token都丢了。下面是一个例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628195155876-2103785868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;application.yml如下：&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: &lt;/span&gt;8080&lt;span&gt;

spring:
  redis:
    host: &lt;/span&gt;127.0.0.1&lt;span&gt;
    port: &lt;/span&gt;6379&lt;span&gt;

logging:
  level:
    root: debug
    org.springframework.web: debug
    org.springframework.security: debug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;我们有了资源，有了授权，我们还缺少用户。WebSecurity主要是配置咱们这个项目的一些安全配置，比如用户、认证、授权等等。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.WebSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;, proxyTargetClass = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WebSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        auth.inMemoryAuthentication()
                .withUser(&lt;/span&gt;&quot;zhangsan&quot;&lt;span&gt;)
                .password(&lt;/span&gt;&quot;$2a$10$qsJ/Oy1RmUxFA.YtDT8RJ.Y2kU3U4z0jvd35YmiMOAPpD.nZUIRMC&quot;&lt;span&gt;)
                .roles(&lt;/span&gt;&quot;USER&quot;&lt;span&gt;)
                .and()
                .withUser(&lt;/span&gt;&quot;lisi&quot;&lt;span&gt;)
                .password(&lt;/span&gt;&quot;$2a$10$qsJ/Oy1RmUxFA.YtDT8RJ.Y2kU3U4z0jvd35YmiMOAPpD.nZUIRMC&quot;&lt;span&gt;)
                .roles(&lt;/span&gt;&quot;USER&quot;, &quot;ADMIN&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(WebSecurity web) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        web.ignoring().antMatchers(&lt;/span&gt;&quot;/css/**&quot;, &quot;/js/**&quot;, &quot;/plugins/**&quot;, &quot;/favicon.ico&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(http);
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        BCryptPasswordEncoder bCryptPasswordEncoder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
        System.out.println(bCryptPasswordEncoder.encode(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;));
        System.out.println(bCryptPasswordEncoder.encode(&lt;/span&gt;&quot;12345678&quot;&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里多说两句，关于Endpoint和HttpSecurity&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Endpoint&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有很多端点我们是可以重写的，比如：/login，/oauth/token等等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628200225442-290136270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;HttpSecurity&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;很多初学者可能会不知道怎么配置HttpSecurity，这个时候其实最好的方法就是看代码或者API文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面一起看一下常见的几个配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们先来看一下，当我们继承WebSecurityConfigurerAdapter之后它的默认的HttpSecurity是怎么配置的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @formatter:off&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        logger.debug(&lt;/span&gt;&quot;Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).&quot;&lt;span&gt;);

        http
            .authorizeRequests()
                .anyRequest().authenticated()
                .and()
            .formLogin().and()
            .httpBasic();
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @formatter:on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到，所有的请求都需要授权，并且指定登录的uri是/login，同时支持Basic认证。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;requestMatchers()&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;这个方法是用于限定只有特定的HttpServletRequest实例才会导致该HttpSecurity被调用，当然是通过请求uri进行限定的了。它后面可以接多个匹配规则。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@EnableWebSecurity
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RequestMatchersSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                http
                        .requestMatchers()
                                .antMatchers(&lt;/span&gt;&quot;/api/**&quot;&lt;span&gt;)
                                .antMatchers(&lt;/span&gt;&quot;/oauth/**&quot;&lt;span&gt;)
                                .and()
                        .authorizeRequests()
                                .antMatchers(&lt;/span&gt;&quot;/**&quot;).hasRole(&quot;USER&quot;&lt;span&gt;)
                                .and()
                        .httpBasic();
        }
        
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  与上面那段等价
        @Override
        protected void configure(HttpSecurity http) throws Exception {
                http
                        .requestMatchers()
                                .antMatchers(&quot;/api/**&quot;)
                                .and()
                         .requestMatchers()
                                .antMatchers(&quot;/oauth/**&quot;)
                                .and()
                        .authorizeRequests()
                                .antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;)
                                .and()
                        .httpBasic();
        }
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                auth
                        .inMemoryAuthentication()
                                .withUser(&lt;/span&gt;&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;&lt;span&gt;);
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;formLogin()&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;该方法是用于配置登录相关的设置的。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Configuration
 @EnableWebSecurity
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FormLoginSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                http.authorizeRequests().antMatchers(&lt;/span&gt;&quot;/**&quot;).hasRole(&quot;USER&quot;&lt;span&gt;).and().formLogin()
                                .usernameParameter(&lt;/span&gt;&quot;username&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is username&lt;/span&gt;
                                .passwordParameter(&quot;password&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is password&lt;/span&gt;
                                .loginPage(&quot;/authentication/login&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is /login with an HTTP get&lt;/span&gt;
                                .failureUrl(&quot;/authentication/login?failed&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is /login?error&lt;/span&gt;
                                .loginProcessingUrl(&quot;/authentication/login/process&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is /login
                                                                                                      &lt;/span&gt;
&lt;span&gt;        }

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                auth.inMemoryAuthentication().withUser(&lt;/span&gt;&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;&lt;span&gt;);
        }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当我们没有配置登录的时候，会用默认的登录，有默认的登录页面，还有好多默认的登录配置。具体可参见 FormLoginConfigurer.loginPage(String)方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628202636808-819886861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;authorizeRequests()&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;该方法允许基于HttpServletRequest进行访问限制，比如角色、权限。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Configuration
 @EnableWebSecurity
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AuthorizeUrlsSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                http.authorizeRequests().antMatchers(&lt;/span&gt;&quot;/admin/**&quot;).hasRole(&quot;ADMIN&quot;&lt;span&gt;)
                                .antMatchers(&lt;/span&gt;&quot;/**&quot;).hasRole(&quot;USER&quot;&lt;span&gt;).and().formLogin();
        }

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                auth.inMemoryAuthentication().withUser(&lt;/span&gt;&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;&lt;span&gt;)
                                .and().withUser(&lt;/span&gt;&quot;admin&quot;).password(&quot;password&quot;).roles(&quot;ADMIN&quot;, &quot;USER&quot;&lt;span&gt;);
        }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;anyRequest()表示匹配任意请求&lt;/span&gt;&lt;br/&gt;&lt;span&gt;authenticated()表示只有认证通过的用户才可以访问&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;更多可以参见API文档：&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;获取授权码&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在浏览器中输入http://localhost:8080/oauth/authorize?response_type=code&amp;amp;client_id=my-client-1&amp;amp;redirect_uri=http://www.baidu.com&amp;amp;scope=read&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后跳到登录页面，输入用户名和密码登录，然后从重定向url中拿到code&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;换取访问令牌&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628204141605-637235197.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628204149219-1449176256.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;访问资源&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
http://localhost:8080/haha/sayHi?access_token=9f908b8f-06d6-4987-b105-665ca5a4522a

{
    &quot;error&quot;: &quot;access_denied&quot;,
    &quot;error_description&quot;: &quot;不允许访问&quot;
}
这里不允许访问是因为我用zhangsan登录的，他不在ADMIN角色中

http://localhost:8080/haha/userInfo?access_token=9f908b8f-06d6-4987-b105-665ca5a4522a

{
    &quot;name&quot;: &quot;zhangsan&quot;
}


http://localhost:8080/haha/sayHello?name=jack&amp;amp;access_token=9f908b8f-06d6-4987-b105-665ca5a4522a

Hello, jack
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;访问GitHub&lt;/h2&gt;
&lt;h3&gt;参照SpringBoot官网的示例&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-oauth2-client&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://github.com/spring-projects&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://github.com/spring-projects/spring-boot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以将代码拷下来 &lt;span&gt;https://github.com/spring-projects/spring-boot.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第一步  将我们的客户端注册到GitHub上去&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628205957060-1858550873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GitHub的OAuth文档在这里  https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第二步  浏览器输入http://localhost:8080/后出现如下界面&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628205405841-606869083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;第三步  点击任意一个连接，跳GitHub登录&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628210326910-1837678532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;授权以后就可以重定向到我们的localhost:8080/了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628210420966-418694029.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;主要配置如下：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
APP-CLIENT-ID: &lt;span&gt;7e304109d91ed8e9bf72&lt;/span&gt;
APP-CLIENT-SECRET: 003daa47fa0f350d181c8741d8bac6833aef568a

spring:
  security:
    oauth2:
      client:
        registration:
          github-client-1:
            client-id: ${APP-CLIENT-ID}
            client-secret: ${APP-CLIENT-SECRET}
            client-name: Github user
            provider: github
            scope: user
            redirect-uri-template: http://cjshuashengke.6655.la:11664/login/oauth2/code/github
          github-client-2:
            client-id: ${APP-CLIENT-ID}
            client-secret: ${APP-CLIENT-SECRET}
            client-name: Github email
            provider: github
            scope: user:email
            redirect-uri-template: http://cjshuashengke.6655.la:11664/login/oauth2/code/github
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;pom.xml如下&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;sample.oauth2.client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-sample-oauth2-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.3.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Compile &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-jose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Test &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.httpcomponents&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;httpclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; sample.oauth2.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SampleOAuth2ClientApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(SampleOAuth2ClientApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ExampleController&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; sample.oauth2.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.Principal;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExampleController {

    @RequestMapping(&lt;/span&gt;&quot;/&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String email(Principal principal) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello &quot; +&lt;span&gt; principal.getName();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;访问自定义的Provider&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在这里我遇到一些问题，将provider换成自己的localhost:8080就总是报错，不知道什么原因。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想想还是写出来吧，希望有大神看到帮我指点迷津。。。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;首先需要明确一点：Spring Security OAuth2提供了一套客户端实现，Spring Boot也有它自己的方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里我是按照Spring Boot的那一套来的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Spring Boot最大的优点莫过于自动配置了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只要在你的classpath下有&lt;span&gt;spring-security-oauth2-client&lt;/span&gt;，那么将会自动配置OAuth2 Client。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置的属性用的是&lt;span class=&quot;fontstyle0&quot;&gt;OAuth2ClientProperties&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体参见 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#boot-features-security-oauth2&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#boot-features-security-oauth2&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628212609911-1737630144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，Spring Security的OAuth2LoginAuthenticationFilter只处理URL匹配/login/oauth2/code/*的请求。&lt;/p&gt;
&lt;p&gt;如果你想自定义redirect-uri-template可以在WebSecurityConfigurerAdapter中配置。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {
　　@Override
　　protected void configure(HttpSecurity http) throws Exception {
　　　　http
　　　　　　.authorizeRequests()
　　　　　　.anyRequest().authenticated()
　　　　　　.and()
　　　　　　.oauth2Login()
　　　　　　.redirectionEndpoint()
　　　　　　.baseUri(&quot;/custom-callback&quot;);
　　}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其实，不仅仅可以自定义重定向端点，其它的比如授权端点也是可以自定义的，可参见源码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628213218460-200309379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面重点说下我的配置&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;pom.xml&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.cjs.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cjs-oauth2-code-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cjs-oauth2-code-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-jose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security.oauth&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.3.3.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;application.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
server:
  port: 8081

spring:
  security:
    oauth2:
      client:
        registration:
          my-client-1:
            client-id: my-client-1
            client-secret: 12345678
            client-name: ABC
            provider: my-oauth-provider
            scope: read
            redirect-uri-template: http://localhost:8081/login/oauth2/code/callback
            client-authentication-method: basic
            authorization-grant-type: authorization_code
        provider:
          my-oauth-provider:
            authorization-uri: http://localhost:8080/oauth/authorize
            token-uri: http://localhost:8080/oauth/token
logging:
  level:
    root: debug
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;分别启动两个项目&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;浏览器输入http://localhost:8080/test&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628214140668-1688399538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;点击链接ABC&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628214208847-935221613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;输入zhangsan/123456，结果报错了&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628214358189-444233684.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看控制台错误信息&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
org.springframework.security.oauth2.core.OAuth2AuthenticationException: [authorization_request_not_found] 
        at org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter.attemptAuthentication(OAuth2LoginAuthenticationFilter.java:146)
        at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.5.RELEASE.jar:5.0.5.RELEASE]
        at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:128)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;打端点，发现重定向过来的HttpServletRequest中session=null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正常情况下session不应该是null，而且属性中还应该有一个key为org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizationRequestRepository.AUTHORIZATION_REQUEST的属性的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628215213487-1263575107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628215227039-1022092950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628215232758-606974457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;后来看根据Spring Security那一套说用@EnableOAuth2Client&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用OAuth2RestTemplate来访问资源，具体参见《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9184173.html&quot; target=&quot;_blank&quot;&gt;Spring Security OAuth 2.0&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是我发现加了这些问题依旧，根本问题是服务端带着code重定向到客户端的时候就失败了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在客户端收到的重定向请求中session为null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不知道大家有没有遇到这种问题，求路过的大神们支招。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面贴出客户端完整代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.OAuth2RestTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.Principal;

@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainController {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OAuth2RestTemplate oAuth2RestTemplate;

    @GetMapping(&lt;/span&gt;&quot;/test&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String test(Principal principal) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello, &quot; +&lt;span&gt; principal.getName();
    }

    @GetMapping(&lt;/span&gt;&quot;/hello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; oAuth2RestTemplate.getForObject(&quot;http://localhost:8080/sayHi&quot;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.OAuth2ClientContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.OAuth2RestTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;

@EnableOAuth2Client
@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CjsOauth2CodeClientApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(CjsOauth2CodeClientApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OAuth2ClientContext oauth2ClientContext;

    @Bean
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OAuth2RestTemplate restTemplate() {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; OAuth2RestTemplate(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationCodeResourceDetails(), oauth2ClientContext);
     }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;工程截图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628220631430-738182282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;代码上传至 https://github.com/chengjiansheng/cjs-oauth2-example.git&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security-oauth2-boot/docs/2.0.1.RELEASE/reference/pdf/spring-security-oauth2-boot-reference.pdf&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security-oauth2-boot/docs/2.0.1.RELEASE/reference/pdf/spring-security-oauth2-boot-reference.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#oauth2login-advanced-login-page&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#oauth2login-advanced-login-page&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples&quot; target=&quot;_blank&quot;&gt;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012309216&quot; target=&quot;_blank&quot;&gt;https://segmentfault.com/a/1190000012309216&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.jianshu.com/p/bf5dd33aea6d?utm_source=oschina-app&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/bf5dd33aea6d?utm_source=oschina-app&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.aliyun.com/jiaocheng/800606.html&quot; target=&quot;_blank&quot;&gt;https://www.aliyun.com/jiaocheng/800606.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/peter1220/article/details/52413250&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/peter1220/article/details/52413250&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_42033269/article/details/80086422&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/weixin_42033269/article/details/80086422&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 28 Jun 2018 14:37:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/9241217.html</dc:identifier>
</item>
<item>
<title>RabbitMQ详解（一）------简介与安装 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/9227233.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/9227233.html</guid>
<description>&lt;p&gt;　　RabbitMQ 这个消息中间件，其实公司最近的项目中有用到，但是一直没有系统的整理，最近看完了《RabbitMQ实战  高效部署分布式消息队列》这本书，所以顺便写写。&lt;/p&gt;
&lt;p&gt;　　那么关于 RabbitMQ 是什么？大家可以首先参考官网：&lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot;&gt;http://www.rabbitmq.com&lt;/a&gt; 。这里我大概的介绍一下：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;RabbitMQ  是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;①、AMQP，即Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。关于 AMQP 的介绍可以参考：&lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol&quot; target=&quot;_blank&quot;&gt;https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol&lt;/a&gt;，还有官方网站：&lt;a href=&quot;http://www.amqp.org/confluence/display/AMQP/Advanced+Message+Queuing+Protocol&quot; target=&quot;_blank&quot;&gt;http://www.amqp.org/confluence/display/AMQP/Advanced+Message+Queuing+Protocol&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　②、开源。&lt;/p&gt;
&lt;p&gt;　　③、使用 Erlang 语言编写，这是一种面向并发的编程语言，目的是创造一种可以应对大规模并发活动的编程语言和运行环境。&lt;/p&gt;
&lt;p&gt;　　接下来我们介绍如何在 Linux 系统上安装 RabbitMQ。&lt;/p&gt;
&lt;h3&gt;1、安装 Erlang&lt;/h3&gt;
&lt;p&gt;　　就想我们编写Java引用程序需要安装 JDK一样，安装 RabbitMQ ,我们也需要安装 Erlang 。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①、下载 erlang 安装包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180626224928551-1549800230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　将安装包下载到 /home/erlang 目录下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; wget http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.erlang.org/download/otp_src_R16B02.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;②、解压&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tar -zxvf otp_src_R16B02.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;③、编译安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　首先进入解压的文件目录，然后安装如下插件&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627080949731-273357528.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接着设置编译目录为 /usr/local/erlang&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627081244875-918373099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后执行 make  和 make install 命令即可。&lt;/p&gt;
&lt;p&gt;　　全部命令步骤为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;、cd otp_src_R16B02
&lt;/span&gt;2、yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-&lt;span&gt;devel
&lt;/span&gt;3、./configure --prefix=/usr/local/erlang --enable-hipe --enable-threads --enable-smp-support --enable-kernel-&lt;span&gt;poll
&lt;/span&gt;4&lt;span&gt;、make
&lt;/span&gt;5、make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;④、配置环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　通过 vim /etc/profile 命令进入文件，然后敲入如下代码&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627082411439-1621106617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后通过如下命令使环境变量生效：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
source /etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;⑤、验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在任意目录下输入 erl 命令，出现如下情况，则 erlang 安装成功：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627082650196-431113606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2、安装 RabbitMQ&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;①、下载安装包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　创建 /home/rabbitmq 目录，在该目录下执行如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
wget http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.tar.gz &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;②、解压&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tar -zxvf rabbitmq-server-3.1.5.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;③、编译安装&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; cd rabbitmq-server-3.1.5 
&lt;span&gt;2&lt;/span&gt; yum -&lt;span&gt;y install xmlto 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;make
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; make install TARGET_DIR=/opt/mq/rabbitmq SBIN_DIR=/opt/mq/rabbitmq/sbin MAN_DIR=/opt/mq/rabbitmq/man
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将rabbitmq编译到/opt/mq/rabbitmq目录。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;④、开启 web 插件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; cd /opt/mq/rabbitmq/&lt;span&gt;sbin 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; mkdir /etc/rabbitmq/ 
&lt;span&gt;3&lt;/span&gt; ./rabbitmq-plugins enable rabbitmq_management
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3、启动和关闭RabbitMQ&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 启动监控管理器：rabbitmq-&lt;span&gt;plugins enable rabbitmq_management
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 关闭监控管理器：rabbitmq-&lt;span&gt;plugins disable rabbitmq_management
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 启动rabbitmq：rabbitmq-&lt;span&gt;service start
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 关闭rabbitmq：rabbitmq-&lt;span&gt;service stop
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;查看所有的队列：rabbitmqctl list_queues
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;清除所有的队列：rabbitmqctl reset
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;关闭应用：rabbitmqctl stop_app
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 启动应用：rabbitmqctl start_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过第 3 条命令启动rabbitmq 服务，然后在浏览器上输入 &lt;/p&gt;

&lt;p&gt;　　出现如下界面即可。其中 ip 是安装 rabbitmq 的机器ip地址，15672 是rabbitmq的默认端口。&lt;/p&gt;
&lt;p&gt;　　ps:如果不能打开如下画面，可能是防火墙没有关闭。centos6 关闭防火墙命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;关闭命令：  service iptables stop 
永久关闭防火墙：chkconfig iptables off
查看防火墙状态：service iptables status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627221815907-104225812.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　默认用户名和密码都是 guest。我们可以用 guest 登录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627221944051-1470091069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 13:42:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/9227233.html</dc:identifier>
</item>
<item>
<title>vuex的使用 - 只会一点前端</title>
<link>http://www.cnblogs.com/jsydb/p/9240741.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jsydb/p/9240741.html</guid>
<description>&lt;p&gt;&lt;span&gt;vuex说白了就是vue中的数据管理仓库,为开发者的数据操作,例如购物车类似的操作,带来了极大的便捷,最近也在使用vuex整理了如下的学习心得,希望能帮大家解决问题.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vuex的基础使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.下载好vue.js和vuex.js文件,并引入到html页面中去&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1426400/201806/1426400-20180628192107610-2032763834.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.对vuex的基础配置&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
const store = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vuex.Store({ 
        state:{ 
            count:&lt;/span&gt;0&lt;span&gt;
        },
        mutations:{
            increment:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (state) {
                state.count&lt;/span&gt;++&lt;span&gt;;
            },
            descrement:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (state) {
                state.count&lt;/span&gt;--&lt;span&gt;
            }
        }
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;store是新创建vuex中对的store对象&lt;/p&gt;
&lt;p&gt;state是专门来管理数据的仓库&lt;/p&gt;
&lt;p&gt;mutations是用来处理各种判断,异步请求,流程控制,也就是说要干什么事情,在这里监听了两个action名,只有接受到相对应的action名,就会触发函数,对state中的count进行操作&lt;/p&gt;
&lt;p&gt;3.html代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    count的值:{{count}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;increment&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count加1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;descrement&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count减1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkAsyncAdd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;延迟加1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkAsyncOdd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;延迟减1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每一个按钮绑定一个事件,实现对count的改变&lt;/p&gt;
&lt;p&gt;4.vue实例中代码的编写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        computed:{
            count(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; store.state.count
            }
        },
        methods:{
            increment:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                store.commit(&lt;/span&gt;&quot;increment&quot;&lt;span&gt;)
            },
            descrement:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                store.commit(&lt;/span&gt;&quot;descrement&quot;&lt;span&gt;)
            },
            checkAsyncAdd:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
               setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                   store.commit(&lt;/span&gt;&quot;increment&quot;&lt;span&gt;)
               },&lt;/span&gt;1000&lt;span&gt;)
            },
            checkAsyncOdd:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    store.commit(&lt;/span&gt;&quot;descrement&quot;&lt;span&gt;)
                },&lt;/span&gt;1000&lt;span&gt;)
            }
        }
    }).$mount(&lt;/span&gt;&quot;#app&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用计算属性来实时元素标签更新对state.count中的引用,(因为state是一个对象,那么count就是其属性,所以在vuex的store中count变化,由于是地址引用,那么count就在全局进行变化)&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;increment函数执行通过store中的commit属性发送&quot;increment&quot;action名,就可以实现了state中count的改变,其他的方法类似&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;在vue项目中使用vuex&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1没有安装vuex就使用cnpm/npm i vuex -D  安装好vuex&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.创建store.js文件(随便创建在哪个目录下,我推荐跟main.js在同一目录下),设置如下内容&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'&lt;span&gt;
import Vuex from &lt;/span&gt;'vuex'&lt;span&gt;
Vue.use(Vuex); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局使用vuex&lt;/span&gt;
const state = { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义数据仓&lt;/span&gt;
  count :10&lt;span&gt;
};
const mutations &lt;/span&gt;= { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理数据(状态)变化&lt;/span&gt;
  ydb(state){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;ydb&quot;和&quot;ydb1&quot;都是action名&lt;/span&gt;
    state.count++&lt;span&gt;;
  },
  ydb1(state){
    state.count&lt;/span&gt;--&lt;span&gt;;
  }
};
const actions&lt;/span&gt;=&lt;span&gt; {
  increment:({commit})&lt;/span&gt;=&amp;gt;{  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;increment&quot;是接受前端页面传过来的事件名,下面的也是&lt;/span&gt;
      commit(&quot;ydb&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送actions名,下面类似&lt;/span&gt;
&lt;span&gt;  },
  descrement:({commit})&lt;/span&gt;=&amp;gt;&lt;span&gt;{
    console.log(arguments);
    commit(&lt;/span&gt;&quot;ydb1&quot;&lt;span&gt;);
  },
  checkOdd:({commit,state})&lt;/span&gt;=&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(state.count%2===0&lt;span&gt;){
      commit(&lt;/span&gt;&quot;ydb&quot;&lt;span&gt;)
    }
  },
  checkAsync:({commit})&lt;/span&gt;=&amp;gt;&lt;span&gt;{
   &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Promise((resolve)=&amp;gt;&lt;span&gt;{
     setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
       commit(&lt;/span&gt;&quot;ydb&quot;&lt;span&gt;);
       resolve();
     },&lt;/span&gt;1000&lt;span&gt;)
   })
  }
};
const getters &lt;/span&gt;= { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置仓库数去获取对象,方便页面获取仓库中的值&lt;/span&gt;
  count:&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; state.count
  }
};
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Vuex.Store({ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出一个新的vuex.Store对象&lt;/span&gt;
&lt;span&gt;  state,
  actions,
  mutations,
  getters
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;并返回定义好的各种功能对象,注意名称必须按照我这样子写,如state写成states会报错&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3 在项目主文件main.js中引入vuex&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'&lt;span&gt;
import App from &lt;/span&gt;'./App.vue'
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;import Loading from './components/loading/index'&lt;/span&gt;
import store from  './store' //引入创建好的store对象
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Vue.use(Loading);&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  store,
  el: &lt;/span&gt;'#app'&lt;span&gt;,
  render: h &lt;/span&gt;=&amp;gt;&lt;span&gt; h(App)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.APP.vue文件中编写如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;get&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;welcome to 蚂蝗俱乐部&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Loading &lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{count}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;increment&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count加1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;descrement&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count减1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkOdd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;偶数才能点击+&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkAsync&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击异步+&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
import {mapGetters,mapActions} from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vuex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过es6中的语法,对vuex进行解构赋值,注意名称必须这样写 关于es6的更多介绍,请查看我其他随笔&lt;/span&gt;
&lt;span&gt;export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
  },
  computed: { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一种写法:获取在main.js中全局使用store中state中count的值&lt;/span&gt;
&lt;span&gt;    ...mapGetters([
      &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ])
  },
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  computed:mapGetters( //第二种写法:作用同上&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;      ['count']&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;  ),&lt;/span&gt;
&lt;span&gt;  methods: {
    ...mapActions([ &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一种写法:向store对象中的actions发送事件名&lt;/span&gt;
      &lt;span&gt;'&lt;/span&gt;&lt;span&gt;increment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;descrement&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkOdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkAsync&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    ]),
    get(){
      alert(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    }
  },
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  methods:mapActions([ //第二种写法:向store对象中的actions发送事件名&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;      'increment', 'descrement', &quot;checkOdd&quot;, &quot;checkAsync&quot;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    ]),&lt;/span&gt;
&lt;span&gt;  
}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;vuex模块化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;个人感觉使用vue项目中使用vuex的方法,所有东西都在store.js中,这样页面显的比较代码拥堵,在官网中,作者提供了vuex模块化的思路,自己也把上面的代码改造了一下,实现了一个小的demo&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.在vue项目中创建store文件夹,创建如下文件&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1426400/201806/1426400-20180628210704001-602775785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;actions.js相当于之前的actions对象,用来监听不同的事件名来发送不同的actions名&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
import * as types from './types' //导入actions名集合
import state from './module'//导入数据仓库
export default { //到处一个发送actions名的对象
  increment:({commit})=&amp;gt;{ //&quot;increment&quot;为前端页面在mapActions中传递过来的事件名,监听到就发送对应的actions名,下面的类似
    commit(types.YDB);
  },
  descrement:({commit})=&amp;gt;{
    commit(types.YDB1);
  },
  checkOdd:({commit})=&amp;gt;{
    if(state.count%2===0){
      commit(types.YDB);
    }

  },
  checkAsync:({commit})=&amp;gt;{
    new Promise((resovle)=&amp;gt;{
      setTimeout(function () {
        commit(types.YDB);
        resovle()
      },1000)
    })

  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;getters.js相当于之前的getters对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
export default { //返回数据仓库中的count值
  count:(state)=&amp;gt;{
    return state.count
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index就是主文件,负责到处vuex所必须要的配置好之后的对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
import Vue from 'vue'
import Vuex from 'vuex'
import mutations from './mutations'
import actions from './actions'
Vue.use(Vuex); //全局使用vuex
export  default new Vuex.Store({
  actions,   
  modules:{
    mutations //这里的mutations里面包含了多个对象,使用modules可以转化格式导出
  }
})
//导出配置好的vuex对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;module.js相当于之前的state对象,用来存放数据,就是一个数据仓库&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const state = {
  count:20
};
export default state //导出数据仓库
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;types.js其实在官方中是没有的,但是大多数人的项目中是用的,一般用来放置一些acction名集合&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
export const YDB = &quot;YDB&quot;;
export const YDB1 = &quot;YDB1&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如上所示,已经成功的把vuex模块化,这样不同的操作,只需要找到不同的js文件就可以进行处理,更符合模块化开发&lt;/p&gt;
&lt;p&gt;其中main.js中的内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot; readability=&quot;5&quot;&gt;
import Vue from 'vue'
import App from './App.vue'
import Loading from './components/loading/index'
import store from  './store/index' //引入store文件夹中的index主文件
Vue.use(Loading);
new Vue({
  store, //全局使用
  el: '#app',
  render: h =&amp;gt; h(App)
})　　&lt;p&gt;//注 APP.vue中的代码没有发生任何改变
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 28 Jun 2018 13:25:00 +0000</pubDate>
<dc:creator>只会一点前端</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jsydb/p/9240741.html</dc:identifier>
</item>
<item>
<title>工作流技术分析 - 心如直水</title>
<link>http://www.cnblogs.com/CREN/p/9240684.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CREN/p/9240684.html</guid>
<description>&lt;div class=&quot;Section1&quot; readability=&quot;36.650870203397&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;工作流技术分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;基于上篇文章我决定写篇文章对工作流技术进行剖析和解读，授之以鱼不如授之以渔。所以决定讲讲原理，以便让大家对工作流有更深的了解。最早工作流是由外国人研发，慢慢被引近国内，我接触比较早的是&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的工作流如&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Jbpm&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;osworkflow&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;activiti&lt;/span&gt;&lt;span&gt;都是比较成熟的解决方案，相比而言，采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;研发还是比较幸福，不像&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C#&lt;/span&gt; &lt;span&gt;那时候还没比较好的成熟解决方案，导致我们在工作流技术框架方面不得不采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的解决方案。由于公司的原因，最后我们业务部分采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C#&lt;/span&gt;&lt;span&gt;语言编写，流程部分采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;下&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;osworkflow&lt;/span&gt;&lt;span&gt;技术方案，将&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;osWorkflow&lt;/span&gt;&lt;span&gt;工作流封装成&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WebService&lt;/span&gt;&lt;span&gt;服务与&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C#&lt;/span&gt;&lt;span&gt;这边进行交互模式，增加实施的难度。微软发布的工作流产品（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WF&lt;/span&gt;&lt;span&gt;），我们也研究使用过这款产品，这款产品只包含引擎和一个&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C/S&lt;/span&gt;&lt;span&gt;版的流程设计器，并不支持在线设计流程。在使用方面，我们并没有用好&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WF&lt;/span&gt;&lt;span&gt;，不知道是不是技术原因，时常报些莫明其妙的错误，使用起来并不太稳定，最后不得不放弃转而使用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的解决方案。目前市面上有很多公司或个人研发的工作流产品，有的是完全遵循国际上制定的工作流标准实现，而有的则并没有遵循标准，这两种实现暂且不论好坏，只要能解决自已的需求，在我看来，那就是好的产品。中国有位领导说过，不管白猫黑猫，能抓到老鼠的就是好猫。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;工作流背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;引用上篇文章解释工作流产生背景以及使用场景。&lt;span&gt;工作流是为解决现实中繁杂多变的业务审批流程，应运而生的一种技术。在现实中好多公司、政府、军工单位中审批业务流程是频繁变更，特别在研发&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;ERP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;信息管理系统，或多或少都存在这种需求。工作流技术的出现为这种需求提供了一种更好的解决方案，将大大的减轻研发人员的工作量。在工作流技术未出现前，研发人员为应对这种情况是疲于应付&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，精疲力竭。通常都是通过硬性编码对固定的业务流程，进行针对性编码，这种编码方式，就很不适应业务频繁的变更，造成开发人员这种被动的局面。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;工作流产品一般包含流程引擎和流程设计器两个部分，这两部分是工作流核心部件。流程引擎提供对流程解析，并驱动业务流程的流转。流程设计器则提供图形化操作方式，通过画图方式定义工作流审批流程，最终生成工作审批流程定义的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;XML&lt;/span&gt;&lt;span&gt;文件。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;流程设计器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;市面上通常都是提供的在线流程设计器，在线的流程设计器主要基于&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Flash&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SL&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H5&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SVG&lt;/span&gt;&lt;span&gt;这四种技术实现。这四种技术实现画图各有优缺点。&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Flash&lt;/span&gt;&lt;span&gt;、&lt;/span&gt; &lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;这两种是必须要在客户端安装插件、学习成本也不低，这两种技术在逐步末落。&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H5&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SVG&lt;/span&gt;&lt;span&gt;这两种技术在近年是越来越流行，但是对老浏览器不支持。选择哪种技术实现方式主要看目前自已的需求。也有些比较优秀&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;JS&lt;/span&gt;&lt;span&gt;开源画图框架如&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SVGJS&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Jsplumb&lt;/span&gt;&lt;span&gt;等等，本质上都是基于上面几种技术方式实现的，有兴趣的可以自已去了解。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;流程引擎实现原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;在系统中为了反映与现实的送审流程，工作流框架中通常都采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;XML&lt;/span&gt;&lt;span&gt;对送审流程进行描述定义。然后，由工作流引擎对&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;XML&lt;/span&gt;&lt;span&gt;数据结构解析，并将定义的流程节点和关联信息都序列化存储到数据库里。在序列化过程中将与业务表单建立关联，后续将依据上述定义的流程，进行业务上的流转。市面上工作流框架基本上都是基于这种实现方式。当然我并没有准备引入那些高大上的理论进行讲解，因为我觉得那些&lt;/span&gt;&lt;span&gt;专业术语让人听得都生畏，什么工作流泳道模型、顺序、状态机、事件等等这些专业术语的解释，有兴趣的可自行了解。其实，还涉及到到表单流转，这个话题等下次有时间，再来说道说道。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;开源工作流地址：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://github.com/chengderen/Smartflow-Sharp&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/chengderen/Smartflow-Sharp&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;上述是我对流程定义、原理和实现，进行解读和分析。由于本人技术水平有限，有理解的不对地方，还请指教。写文章真的太折磨人，费神费力，希望对大家有所帮助。顺便教大家一个排版的技巧，我也是前几天才知道的，写文章最好是先在&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Word&lt;/span&gt;&lt;span&gt;文档中先调整好格式和排版，然后导出&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Html&lt;/span&gt;&lt;span&gt;格式的文档，这样你的文章排版和格式看起来很舒服，不会错乱。之前一直苦恼纠结在博客园格编辑器中怎么调整好格式与排版。建议博客园的编辑器应该向&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;csdn&lt;/span&gt;&lt;span&gt;的学习，那个直接拷贝文档都不会乱格式。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 28 Jun 2018 13:12:00 +0000</pubDate>
<dc:creator>心如直水</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CREN/p/9240684.html</dc:identifier>
</item>
</channel>
</rss>