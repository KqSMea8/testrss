<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>存储与索引------《Designing Data-Intensive Applications》读书笔记3 - HappenLee</title>
<link>http://www.cnblogs.com/happenlee/p/8118267.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happenlee/p/8118267.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在上一篇的笔记之中，我们讨论了数据模型和查询语言。在第三章之中我们来聊一聊不同的数据引擎内部是如何实现存储和检索的，以及不同设计之间的折中与妥协。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;键值对数据库&quot;&gt;1.键值对数据库&lt;/h3&gt;
&lt;p&gt;键值对数据库是数据库形式之中最简单的一种模式，我们可以把它简化的实现为下面两个函数：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-da8d9ab395c89c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;通过两个Shell函数就可以实现简易的键值对数据库&quot;/&gt;&lt;br/&gt;底层存储格式也十分简单：一个文本文件，其中每行包含一个键值对，用逗号分隔（&lt;strong&gt;类似于CSV文件，忽略转义问题&lt;/strong&gt;）。每一次调用 &lt;em&gt;db_set&lt;/em&gt; 会追加键值对到文件的末尾，如果你更新的一个键值对的旧版本不会覆盖之前的键值对，但是 &lt;em&gt;db_get&lt;/em&gt;会利用 tail -n 1 in 语句读取最新的键值对。但是真正的数据库需要处理更多的问题（例如并发控制、回收磁盘空间、使日志不能永久增长、处理错误和部分写的问题），但基本设计思路和原则是相同的。&lt;/p&gt;
&lt;p&gt;但是，&lt;em&gt;db_get&lt;/em&gt; 在性能上表现的很糟糕，每一次需要查找一个key，&lt;em&gt;db_get&lt;/em&gt; 会扫描整个数据库文件来查找Key。在算法定义之中，查找的时间复杂度是O（n）。为了有效地查找数据库中某个特定键的值，我们需要一个不同的数据结构：&lt;strong&gt;索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;索引&quot;&gt;2.索引&lt;/h3&gt;
&lt;p&gt;索引是从原始数据派生出来的附加结构。在添加和删除索引时，不会影响数据存储的内容，它只会影响查询的性能。但是维护额外的结构会导致开销，尤其是写操作。任何类型的索引都会减慢写速度，因为每次写入数据时也需要更新索引。&lt;br/&gt;在存储系统的有一个重要的权衡：&lt;strong&gt;精心挑选的索引加快了读取的速度，但是每个索引都会减慢写入速度。&lt;/strong&gt;由于这个原因，数据库通常不会默认索引所有内容，但要求应用程序开发人员或数据库管理员手动地选择索引，可以选择使应用程序受益最大的索引，而不需要引入更多的开销。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;哈希索引&lt;/strong&gt;&lt;br/&gt;这里我们通过哈希索引来分析一下上文提及的那个简易的键值数据库。最简单的索引策略是：保持一个内存的哈希映射，其中每一个键都映射到数据文件中的字节偏移量，通过偏移量可以找到该值的位置，如下图所示：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-5854b15fd98f1bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;内存哈希映射索引&quot;/&gt;&lt;br/&gt;每当向文件追加一个新的键值对时，也会同时更新哈希映射以反映刚才写入的数据的偏移量（这既可以用于插入新的键值对，也可以用于更新现有的键值对）。在查找值时，使用哈希映射查找数据文件中的偏移量，查找该位置并读取该值。&lt;br/&gt;那么我们如何避免最终耗尽磁盘空间呢？一个好的解决方案是，我们可以对这些文件执行压缩，如下图所示。压缩意味着在文件中扔掉重复的键，并且只保留每个键的最新更新。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-dbc19fb1f95ac0bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;文件的压实操作.png&quot;/&gt;&lt;br/&gt;合并和压缩可以由后台线程完成，并且在进行合并和压缩操作时，我们仍然可以使用旧的文件继续正常地服务读写请求。在合并过程完成后，我们将读取请求转换为使用新合并的文件，然后旧的文件可以简单地删除。&lt;br/&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;br/&gt;（1）哈希索引严重依赖于内存，所以如果Key的数量庞大，需要匹配足够的内存空间。&lt;br/&gt;（2）范围查询效率不高，每查找一个值都需要一次键值对映射。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSTable&lt;/strong&gt;&lt;br/&gt;由哈希索引我们可以引申出更加高效的索引结构:SSTable(&lt;strong&gt;S&lt;/strong&gt;orted &lt;strong&gt;S&lt;/strong&gt;tring &lt;strong&gt;T&lt;/strong&gt;able)，SSTable要求键值对序列按照键来排序。乍一看，这个要求似乎破坏了顺序写的性能，但是它大大提高了维护数据以及索引结构的效率。
&lt;ul&gt;&lt;li&gt;合并文件既简单又高效，使用简单的归并排序算法。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-2a0afa6b4438c6d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;使用归并排序合并SSTable&quot;/&gt;&lt;ul&gt;&lt;li&gt;不再需要保留所有键在内存中的索引，只需要保留部分键的索引，利用键在SSTable之中有序的特点。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-6965fed7c3ea770a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;只需要保留部分键的索引&quot;/&gt;&lt;/li&gt;
&lt;li&gt;可以进行分组压缩，每个索引可以指向压缩块的起始点，来节省存储空间与减少I/O带宽的使用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;但是，如何让我们写入的键值对有序呢？这个问题在内存之中并不是什么难事，如&lt;em&gt;红黑树&lt;/em&gt;或&lt;em&gt;AVL树&lt;/em&gt;这些数据结构，可以按任何顺序插入键，并按排序顺序读取它们。所以我们在使用SSTable时，会维护一个MemTable的数据结构在内存之中，当MemTable达到阀值时，我们将MemTable作为一个新的SSTable序列化到磁盘之上。同时利用后台线程，不断压缩删除旧的SSTable，来维护一个可循环运行的存储系统。由于两次写入一次是在内存，一次磁盘写入是连续的（append日志），因此SSTable可以支持非常高的写入吞吐量。&lt;/p&gt;
&lt;p&gt;许多数据库都是采用这样的思路来高效的处理数据，如&lt;strong&gt;Cassandra&lt;/strong&gt;，&lt;strong&gt;HBase&lt;/strong&gt;，&lt;strong&gt;LevelDB&lt;/strong&gt;，&lt;strong&gt;Bitcask&lt;/strong&gt;等。&lt;strong&gt;Lucene&lt;/strong&gt;的全文搜索的使用&lt;strong&gt;Elasticsearch&lt;/strong&gt;和&lt;strong&gt;Solr&lt;/strong&gt;索引引擎，也采用了类似的方法来存储它的词典，当然，全文索引比键值索引复杂得多，但基于一个类似的想法：给定搜索查询中的一个词，查找提及该词的所有文档（Web页面、产品描述等）。这同样是一个键值结构实现的，其中键是一个词，而这个值是包含该词的所有文档的ID列表。&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;B树索引&lt;/strong&gt;&lt;br/&gt;这个索引结构大家应该非常熟悉了，在关系型数据库（如：&lt;strong&gt;MySQL，Oracle&lt;/strong&gt;）与非关系型数据库（如：&lt;strong&gt;MongoDB&lt;/strong&gt;）之中都大量应用。B树也把键值对进行了排序，它既允许高效的值查询也允许高效的范围查询。&lt;br/&gt;哈希索引结构将数据分解成可变大小的段，通常是几个兆字节或更多的大小。而相比之下，树型索引将数据分成固定大小的块或页，通常为4KB大小（有时更大），每次读或写都基于页的大小。这种设计更接近于底层硬件，因为磁盘也是按固定大小的页来排列的。B树索引保证了：N个键总是有深度的O（log n）树，大多数数据都可以放入到一个三或四层的B树之中，（一个4页的四级树，分支系数为500，可以存储256TB）。下图展示了我们怎么样使用B树来查找“251”这个键:&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-67c07d44512f0e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;利用B树索引的存储结构&quot;/&gt;&lt;br/&gt;基本写的操作是覆盖旧数据的数据页，重写不会改变页的位置；即，当页被覆盖时，对该页的所有引用都保持不变。这与SSTable这样的哈希索引结构形成鲜明对比，它有附加操作，但从不修改文件。&lt;br/&gt;而B树索引的并发控制相对复杂，当多个线程会对树进行访问时，需要通过用锁存器（轻量级锁）保护树的数据结构来完成。（这里也可以用Copy on Write来快照隔离）而哈希索引结构的压缩，合并则不会影响查询，写入等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;一些优缺点的探讨&lt;/p&gt;
&lt;p&gt;（1）顺序写入通常比随机写入快得多，所以SSTable通常的写入性能是相对优秀的。&lt;br/&gt;（2）由于SSTable压缩与清理的线程存在，通常会有较低的存储开销。但是压缩和清理磁盘的过程之中会与正常的请求服务产生磁盘竞争，导致吞吐量的下降。&lt;br/&gt;（3）由于SSTable会存在同一个键值的多个副本，对于实现事务等对于一致性要求更高的场景，树型索引会表现的更加出色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;小结&quot;&gt;3.小结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;树型索引在数据库架构是非常根深蒂固的，对于很多的工作负载提供始终如一的良好性能。而以SSTable为代表的哈希索引也越来越受欢迎。确定哪种类型的存储引擎更适合应用场景，并没有一个简单易用的规则，因此需要我们对业务逻辑有更深层次的理解。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 07:34:00 +0000</pubDate>
<dc:creator>HappenLee</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happenlee/p/8118267.html</dc:identifier>
</item>
<item>
<title>七.Spring与RabbitMQ集成--stock trading(股票交易系统） - xdxxdx</title>
<link>http://www.cnblogs.com/roy-blog/p/8094842.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/roy-blog/p/8094842.html</guid>
<description>&lt;p&gt;　　周末继续写博客，算起来，关于rabbitMQ这个中间件的研究已经持续至两个星期了，上一篇文章使用sring amqp实现了同步和异步的消息接收功能。这一节继续实用spring amqp实现一个股票交易系统的主要逻辑。这个例子更为复杂也更具代表意义，因为它是现实世界中的例子。&lt;/p&gt;
&lt;p&gt;　　stock trading这个例子包含一个服务端（server）,它用于向指定的Topic Exchange发送股票数据。还要很多客户端（clients），它们从特定的Queue（绑定了routing patten的Queue）订阅消息。这个例子的另外一个特性是它实现了一个“请求--响应”的股票交易交互动作，即由客户端发起请求，而由服务端进行处理。&lt;/p&gt;
&lt;p&gt;　　也就是说，这个demo包含了两条线索，第一：服务端发送股票行情数据，客户端根据自己的喜好接收特定的行情数据；第二：客户端看到喜欢的股票，申请交易，服务端处理，然后将结果返回客户端。&lt;/p&gt;
&lt;h3&gt;　　一.领域对象&lt;/h3&gt;
&lt;p&gt;　　在正式开始讲解程序的主要逻辑之前，先看看该demo所涉及的领域对象。为节省篇幅，只列出主要的成员，get,set方法就不列出了。&lt;/p&gt;
&lt;p&gt;　　--Quote：股票报价信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Quote {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Stock stock;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String price;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; timestamp;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　--Stock：股票信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stock {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ticker;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; StockExchange stockExchange;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中的&lt;span&gt;StockExchange&lt;/span&gt;为一个枚举类型，代表的是股票交易所，它的定义如下。&lt;/p&gt;
&lt;p&gt;　　--StockExchange：证券交易所&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Enumeration for Stock Exchanges.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Fisher
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; StockExchange {

    nyse, nasdaq;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　--TradeRequest：交易请求实体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TradeRequest {
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ticker;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; quantity;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BigDecimal price;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String orderType;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String accountName;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; buyRequest;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String requestId;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String id =&lt;span&gt; UUID.randomUUID().toString();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　--TradeResponse：交易响应实体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Simple trade request 'data' object. No functionality in this 'domain' class.
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TradeResponse {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ticker;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; quantity;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BigDecimal price;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String orderType;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String confirmationNumber;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; error;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String errorMessage;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String accountName;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; timestamp = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String requestId;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　二.服务端发送股票报价信息，客户端接收特定信息&lt;/h3&gt;
&lt;p&gt;　　这部分的逻辑可以用以下图示来表示。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/998564/201712/998564-20171225164837775-932732045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　服务端向名为app.stock.marketdata的TopicExchange里面发布股票行情报价消息，并且每次发布消息以app.stock.quotes.[stockExchange].[ticker]作为routekey，其中后面两个为可变参数，即不同的股票，因为他们stockExchange和ticker不一样，所以发送该股票行情信息的RouteKey也不一样。这为消费者按指定类别接收股票提供了基础。&lt;/p&gt;
&lt;p&gt;　　客户端的消费者可以按照需要订阅自己感兴趣的股票，只需要指定与Queue绑定的key，如app.stock.uotes.nasdaq.*表示接收所有纳斯达克交易所的股票行情。这一部分的原理在讲述topic的Exchange的时候就有解释，此处不再赘述。感兴趣的读者可以点这里。&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/roy-blog/p/8041969.html&quot;&gt;五.RabbitMQ之路由（Routing）和主题（topics）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　首先来看主要的配置文件，该配置文件为服务端和客户端共享。需要注意的是，在获取&lt;span&gt;RabbitTemplate的bean中，调用了抽象方法&lt;span&gt;configureRabbitTemplate&lt;/span&gt;，该方法会在其子类中实现。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.AmqpAdmin;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.TopicExchange;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.connection.ConnectionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitAdmin;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.support.converter.JsonMessageConverter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.support.converter.MessageConverter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Provides shared configuration between Client and Server. (客户端和服务端共用的) 
 * &amp;lt;p&amp;gt;The abstract method configureRabbitTemplate lets the Client and Server further customize
 * the rabbit template to their specific needs.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Fisher
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractStockAppRabbitConfiguration {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Shared topic exchange used for publishing any market data (e.g. stock quotes) 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String MARKET_DATA_EXCHANGE_NAME = &quot;app.stock.marketdata&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;topic exchange的名称&lt;/span&gt;

    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * The server-side consumer's queue that provides point-to-point semantics for stock requests.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String STOCK_REQUEST_QUEUE_NAME = &quot;app.stock.request&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Key that clients will use to send to the stock request queue via the default direct exchange.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String STOCK_REQUEST_ROUTING_KEY =&lt;span&gt; STOCK_REQUEST_QUEUE_NAME;
    
    @Value(&lt;/span&gt;&quot;${amqp.port:5672}&quot;&lt;span&gt;) 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; port = 5672&lt;span&gt;;
    

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureRabbitTemplate(RabbitTemplate template);

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ConnectionFactory connectionFactory() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO make it possible to customize in subclasses.&lt;/span&gt;
        CachingConnectionFactory connectionFactory = &lt;span&gt;new&lt;/span&gt; CachingConnectionFactory(&quot;192.168.1.195&quot;&lt;span&gt;);
        connectionFactory.setUsername(&lt;/span&gt;&quot;xdx&quot;&lt;span&gt;);
        connectionFactory.setPassword(&lt;/span&gt;&quot;xxxx&quot;&lt;span&gt;);
        connectionFactory.setPort(port);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; connectionFactory;
    }

    @Bean 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RabbitTemplate rabbitTemplate() {
        RabbitTemplate template &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RabbitTemplate(connectionFactory());
        template.setMessageConverter(jsonMessageConverter());
        configureRabbitTemplate(template);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; template;
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MessageConverter jsonMessageConverter() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonMessageConverter();
    }
    
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TopicExchange marketDataExchange() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TopicExchange(MARKET_DATA_EXCHANGE_NAME);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; the admin bean that can declare queues etc.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AmqpAdmin amqpAdmin() {
        RabbitAdmin rabbitAdmin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RabbitAdmin(connectionFactory());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rabbitAdmin ;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来就是服务端的配置文件，它继承自&lt;span&gt;AbstractStockAppRabbitConfiguration&lt;/span&gt;并且实现了&lt;span&gt;configureRabbitTemplate方法。指定server端的TopicExchange的名称。同时建立一个Queue，Exchange为匿名，Queue名称为&lt;span&gt;app.stock.request&lt;/span&gt;，默认绑定的routekey为&lt;span&gt;&lt;span&gt;app.stock.request&lt;/span&gt;&lt;/span&gt;，该Queue用于接收来自客户端的交易请求消息。(现在我们暂且不管接收消息部分，专注于发送消息部分）&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.config.server;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.Queue;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.config.AbstractStockAppRabbitConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Configures RabbitTemplate for the server.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Fisher
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RabbitServerConfiguration &lt;span&gt;extends&lt;/span&gt;&lt;span&gt;
        AbstractStockAppRabbitConfiguration {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * The server's template will by default send to the topic exchange named
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; AbstractStockAppRabbitConfiguration#MARKET_DATA_EXCHANGE_NAME}.
     * 服务端继承自AbstractStockAppRabbitConfiguration
     * ，重写了父类方法configureRabbitTemplate，将topic
     * Exchange的名称定为MARKET_DATA_EXCHANGE_NAME，这样发送消息的时候就不必每次指定Exchange这个参数
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureRabbitTemplate(RabbitTemplate rabbitTemplate) {
        rabbitTemplate.setExchange(MARKET_DATA_EXCHANGE_NAME);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * We don't need to define any binding for the stock request queue, since
     * it's relying on the default (no-name) direct exchange to which every
     * queue is implicitly bound.
     * 生成一个绑定了默认（无名称）的DirectExchange的Queue实例，名称为该&lt;span&gt;app.stock.request&lt;/span&gt;，这个队列是服务为股票交易开设的（股票请求队列）。
     * 服务端监听这个队列里面的消息(即交易请求，来自客户端),并做处理
     * 名称为：app.stock.request
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Queue stockRequestQueue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Queue(STOCK_REQUEST_QUEUE_NAME);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　接下来就是编写发送消息的代码。如RabbitMarketDataGateway类所示，该类模拟发送股票行情数据（随机生成一个行情价）的功能。可以看到它将消息发送到了topic Exchange名为&lt;span&gt;app.stock.marketdata&lt;/span&gt;，而routekey为&lt;span&gt;app.stock.quotes.nyse.AAPL或者app.stock.quotes.nasdaq.IBM&lt;/span&gt;这样的通道中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.gateway;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.DecimalFormat;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Random;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.logging.Log;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.logging.LogFactory;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitGatewaySupport;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.Quote;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.Stock;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.StockExchange;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Rabbit implementation of the {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; MarketDataGateway} for sending Market
 * data.
 *
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Fisher
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RabbitMarketDataGateway &lt;span&gt;extends&lt;/span&gt; RabbitGatewaySupport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;
        MarketDataGateway {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Log logger =&lt;span&gt; LogFactory
            .getLog(RabbitMarketDataGateway.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Random random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; List&amp;lt;MockStock&amp;gt; stocks = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;MockStock&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RabbitMarketDataGateway() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;AAPL&quot;, StockExchange.nasdaq, 255&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;CSCO&quot;, StockExchange.nasdaq, 22&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;DELL&quot;, StockExchange.nasdaq, 15&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;GOOG&quot;, StockExchange.nasdaq, 500&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;INTC&quot;, StockExchange.nasdaq, 22&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;MSFT&quot;, StockExchange.nasdaq, 29&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;ORCL&quot;, StockExchange.nasdaq, 24&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;CAJ&quot;, StockExchange.nyse, 43&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;F&quot;, StockExchange.nyse, 12&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;GE&quot;, StockExchange.nyse, 18&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;HMC&quot;, StockExchange.nyse, 32&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;HPQ&quot;, StockExchange.nyse, 48&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;IBM&quot;, StockExchange.nyse, 130&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stocks.add(&lt;span&gt;new&lt;/span&gt; MockStock(&quot;TM&quot;, StockExchange.nyse, 76&lt;span&gt;));
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 服务端发送消息，发送到的Exchange为app.stock.marketdata，routekey为app.stock.quotes.+
     * stock.getStockExchange()+.stock.getTicker()
     * 比如app.stock.quotes.nyse.AAPL或者app.stock.quotes.nasdaq.IBM
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sendMarketData() {
        Quote quote &lt;/span&gt;= generateFakeQuote();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将股票按照原来的basePrice进行包装后得到一个新的报价信息&lt;/span&gt;
        Stock stock =&lt;span&gt; quote.getStock();
        logger.info(&lt;/span&gt;&quot;Sending Market Data for &quot; +&lt;span&gt; stock.getTicker());
        String routingKey &lt;/span&gt;= &quot;app.stock.quotes.&quot; +&lt;span&gt; stock.getStockExchange()
                &lt;/span&gt;+ &quot;.&quot; +&lt;span&gt; stock.getTicker();
        getRabbitTemplate().convertAndSend(routingKey, quote);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 生成一条行情数据
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Quote generateFakeQuote() {
        MockStock stock &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.stocks.get(random.nextInt(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.stocks.size()));
        String price &lt;/span&gt;=&lt;span&gt; stock.randomPrice();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Quote(stock, price);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 对股票stock类进行封装，给它一个基本当价格basePrice
     * 
     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; xdx
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MockStock &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Stock {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; basePrice;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; DecimalFormat twoPlacesFormat = &lt;span&gt;new&lt;/span&gt; DecimalFormat(&quot;0.00&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MockStock(String ticker, StockExchange stockExchange,
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; basePrice) {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(stockExchange, ticker);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.basePrice =&lt;span&gt; basePrice;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String randomPrice() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.twoPlacesFormat.format(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.basePrice
                    &lt;/span&gt;+&lt;span&gt; Math.abs(random.nextGaussian()));
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来配置一下上述的bean，使其可以被spring调用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &amp;lt;!-- 发送消息，注入了服务端的rabbitTemplate--&amp;gt;
    &amp;lt;bean id=&quot;marketDataGateway&quot;
        &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.amqp.rabbit.stocks.gateway.RabbitMarketDataGateway&quot;&amp;gt;
        &amp;lt;property name=&quot;rabbitTemplate&quot; ref=&quot;rabbitTemplate&quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后配置任务管理，让服务端每隔一段时间调用marketDataGateway来发送股票行情。如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;task:scheduled-tasks&amp;gt;
        &amp;lt;task:scheduled ref=&quot;marketDataGateway&quot; method=&quot;sendMarketData&quot; fixed-delay=&quot;5000&quot;/&amp;gt;
    &amp;lt;/task:scheduled-tasks&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到此为止，我们就完成了发送一端的功能。接下来我们来完成接收消息这一端的功能。&lt;/p&gt;
&lt;p&gt;　　同样的，客户端也有一个主配置文件，也是继承自AbstractStockAppRabbitConfiguration，在该配置文件中定义了关于客户端发送和接收消息的一些bean，我们还是先专注于接收消息这一端。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.config.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.AcknowledgeMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.AmqpAdmin;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.AnonymousQueue;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.Binding;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.BindingBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.Queue;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitAdmin;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.config.AbstractStockAppRabbitConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.gateway.RabbitStockServiceGateway;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.gateway.StockServiceGateway;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.handler.ClientHandler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Configures RabbitTemplate and creates the Trader queue and binding for the
 * client. 与服务端共用一个RabbitTemplate，但是配置略有不同
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Fisher
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RabbitClientConfiguration &lt;span&gt;extends&lt;/span&gt;&lt;span&gt;
        AbstractStockAppRabbitConfiguration {

    @Value(&lt;/span&gt;&quot;${stocks.quote.pattern}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; app.stock.quotes.nasdaq.* 接收消息的pattern&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String marketDataRoutingKey;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ClientHandler clientHandler;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * The client's template will by default send to the exchange defined in
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.config.AbstractRabbitConfiguration#rabbitTemplate()}
     * with the routing key
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; AbstractStockAppRabbitConfiguration#STOCK_REQUEST_QUEUE_NAME}
     * &amp;lt;p&amp;gt;
     * The default exchange will delivery to a queue whose name matches the
     * routing key value.
     * Exchange为default，即无名的Exchange，RoutingKey为app.stock.request，这是客户端发送信息的配置
     * 也就是说客户端的信息将发送至匿名的Exchange，RoutingKey为app.stock.request的通道
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureRabbitTemplate(RabbitTemplate rabbitTemplate) {
        rabbitTemplate.setRoutingKey(STOCK_REQUEST_QUEUE_NAME);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户端将信息发送到defaultExchange，RouteKey为app.stock.request&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean主要用于从客户端向服务端发送交易请求
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StockServiceGateway stockServiceGateway() {
        RabbitStockServiceGateway gateway &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RabbitStockServiceGateway();
        gateway.setRabbitTemplate(rabbitTemplate());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处设置DefaultReplyTo为traderJoeQueue().getName()，它将作为一个回调的Queue，接收来自服务端的响应。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 隐式的注入RabbitTemplate对象到RabbitStockServiceGateway中
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个bean在client-message.xml中也有配置&lt;/span&gt;
&lt;span&gt;        gateway.setDefaultReplyTo(traderJoeQueue().getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; gateway;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean用于监听服务端发过来的消息，包含两类消息，一类是服务端发送的行情消息，另外一类是 服务端处理完客户端的交易请求以后的响应消息
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleMessageListenerContainer messageListenerContainer() {
        SimpleMessageListenerContainer container &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleMessageListenerContainer(
                connectionFactory());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置该监听器监听的为marketDataQueue()和traderJoeQueue()，其中marketDataQueue()绑定了app.stock.marketdata这个Exchange和
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; app.stock.quotes.nasdaq.*这个routeKey。所以他可以监听到服务端发过来的nasdaq交易所下的证券信息
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; traderJoeQueue()是一个系统自动命名的Queue,当客户端发送trade
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; request会用它作为确认（replyTo)的Queue,好让服务端在处理完后发送确认信息到这个Queue
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以此处我们也要监听它。这个bean在client-message.xml中也有配置&lt;/span&gt;
        container.setConcurrentConsumers(5&lt;span&gt;);
        container.setQueues(marketDataQueue(), traderJoeQueue());
        container.setMessageListener(messageListenerAdapter());
        container.setAcknowledgeMode(AcknowledgeMode.AUTO);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; container;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; container(using(connectionFactory()).listenToQueues(marketDataQueue(),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; traderJoeQueue()).withListener(messageListenerAdapter()).&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean为监听适配器，主要的作用是监听消息
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MessageListenerAdapter messageListenerAdapter() {
        &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageListenerAdapter(clientHandler, jsonMessageConverter());
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Broker Configuration

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @PostContruct
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; public void declareClientBrokerConfiguration() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; declare(marketDataQueue);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; declare(new Binding(marketDataQueue, MARKET_DATA_EXCHANGE,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; marketDataRoutingKey));
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; declare(traderJoeQueue);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; no need to bind traderJoeQueue as it is automatically bound to the
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; default direct exchanage, which is what we will use
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;add as many declare statements as needed like a script.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean是用于接收股票行情的Queue，这是一个匿名的Queue。
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Queue marketDataQueue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousQueue();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Binds to the market data exchange. Interested in any stock quotes.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 将marketDataQueue与发送股票行情的topic Exchange关联，并且以marketDataRoutingKey作为绑定
     * 的key。这样就可以接收特定的股票行情。
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Binding marketDataBinding() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BindingBuilder.bind(marketDataQueue()).to(marketDataExchange())
                .with(marketDataRoutingKey);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * This queue does not need a binding, since it relies on the default
     * exchange.
     * 该bean用于接收服务端发送回来的响应消息。
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Queue traderJoeQueue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousQueue();
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AmqpAdmin rabbitAdmin() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RabbitAdmin(connectionFactory());
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　按照上述配置文件，我们来探究客户端是如何接收消息的。&lt;/p&gt;
&lt;p&gt;　　客户端采用的是异步接收消息的策略，记得我们在上一篇文章（hello world例子中）阐述过，异步接收策略需要用到一个监听器，监听特定的Queue，然后调用一个回调的接口的回调方法（一般是handleMessage方法）。此处我们也是按照这种方式来配置的。&lt;/p&gt;
&lt;p&gt;　　首先，定义一个Queue,用于接收服务端发送的行情数据。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean是用于接收股票行情的Queue，这是一个匿名的Queue。
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Queue marketDataQueue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousQueue();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接着，给这个Queue绑定特定的TopicExchange和RouteKey。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Binds to the market data exchange. Interested in any stock quotes.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 将marketDataQueue与发送股票行情的topic Exchange关联，并且以marketDataRoutingKey作为绑定
     * 的key。这样就可以接收特定的股票行情。
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Binding marketDataBinding() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BindingBuilder.bind(marketDataQueue()).to(marketDataExchange())
                .with(marketDataRoutingKey);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中的RouteKey为&lt;span&gt;marketDataRoutingKey&lt;/span&gt;，它的定义如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@Value(&quot;${stocks.quote.pattern}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; app.stock.quotes.nasdaq.* 接收消息的pattern&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String marketDataRoutingKey;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这是从client.properties配置文件中读取的，此处为stocks.quote.pattern=app.stock.quotes.nasdaq.*。这样做的好处是当我们要修改这个筛选模式的时候，不需要重新编译整个项目。&lt;/p&gt;
&lt;p&gt;　　通过上述两个步骤，我们构造了一个可以从topic Exchange为app.stock.marketdata，routekey为app.stock.quotes.nasdaq.*的Queue中去接收消息，也就是接收所有nasdaq交易所下面的股票信息。&lt;/p&gt;
&lt;p&gt;　　编写一个监听器，监听特定的queue。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean为监听适配器，主要的作用是监听消息
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MessageListenerAdapter messageListenerAdapter() {
        &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageListenerAdapter(clientHandler, jsonMessageConverter());
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　该监听器指定了一个handler作为回调的类，并且指定了消息转换器为Json类型的消息，clientHandler的代码如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.handler;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.logging.Log;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.logging.LogFactory;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.Quote;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.Stock;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.TradeResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.ui.StockController;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * POJO handler that receives market data and trade responses. Calls are
 * delegated to the UI controller.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Fisher
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientHandler {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Log log = LogFactory.getLog(ClientHandler.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; StockController stockController;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StockController getStockController() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; stockController;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setStockController(StockController stockController) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stockController =&lt;span&gt; stockController;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 处理股票行情消息
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; quote
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleMessage(Quote quote) {
        Stock stock &lt;/span&gt;=&lt;span&gt; quote.getStock();
        log.info(&lt;/span&gt;&quot;Received market data.  Ticker = &quot; +&lt;span&gt; stock.getTicker()
                &lt;/span&gt;+ &quot;, Price = &quot; +&lt;span&gt; quote.getPrice());
        stockController.displayQuote(quote);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 处理交易请求的响应消息
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tradeResponse
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleMessage(TradeResponse tradeResponse) {
        log.info(&lt;/span&gt;&quot;Received trade repsonse. [&quot; + tradeResponse + &quot;]&quot;&lt;span&gt;);
        stockController.updateTrade(tradeResponse);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述&lt;span&gt;ClientHandler&lt;/span&gt; 处理器有两个handleMessage方法，分别用于处理行情消息以及交易请求的响应消息，我们现在只需关注第一个方法，第一个方法，打印出股票的行情信息，并且调用&lt;span&gt;stockController.displayQuote(quote);&lt;/span&gt;将其显示在可视化的容器Panel里。&lt;/p&gt;
&lt;p&gt;　　监听器写好了，接下来就是把它放入一个container里面。　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean用于监听服务端发过来的消息，包含两类消息，一类是服务端发送的行情消息，另外一类是 服务端处理完客户端的交易请求以后的响应消息
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleMessageListenerContainer messageListenerContainer() {
        SimpleMessageListenerContainer container &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleMessageListenerContainer(
                connectionFactory());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置该监听器监听的为marketDataQueue()和traderJoeQueue()，其中marketDataQueue()绑定了app.stock.marketdata这个Exchange和
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; app.stock.quotes.nasdaq.*这个routeKey。所以他可以监听到服务端发过来的nasdaq交易所下的证券信息
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; traderJoeQueue()是一个系统自动命名的Queue,当客户端发送trade
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; request会用它作为确认（replyTo)的Queue,好让服务端在处理完后发送确认信息到这个Queue
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以此处我们也要监听它。这个bean在client-message.xml中也有配置&lt;/span&gt;
        container.setConcurrentConsumers(5&lt;span&gt;);
        container.setQueues(marketDataQueue(), traderJoeQueue());
        container.setMessageListener(messageListenerAdapter());
        container.setAcknowledgeMode(AcknowledgeMode.AUTO);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; container;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; container(using(connectionFactory()).listenToQueues(marketDataQueue(),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; traderJoeQueue()).withListener(messageListenerAdapter()).&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　做完上述步骤，只需要运行服务端的任务管理器，模拟定时发送行情消息，再运行客户端的监听器，就可以实现股票行情监测的功能了。&lt;/p&gt;
&lt;p&gt;　　看看服务端的main入口。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Server application than can be run as an app or unit test.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Server {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ClassPathXmlApplicationContext context;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Server().run();
    }

    @After
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (context != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            context.close();
        }
    }

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
        context &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;server-bootstrap-config.xml&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　它做的只是载入主xml配置文件server-bootstrap-config.xml，由该配置文件去将所有的bean加载。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:task&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/task&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder
        &lt;/span&gt;&lt;span&gt;system-properties-mode&lt;/span&gt;&lt;span&gt;=&quot;OVERRIDE&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; pick up rabbit broker configuration &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan
        &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.stocks.config.server&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:server-handlers.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:server-messaging.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:server-services.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;import resource=&quot;classpath:server-jmx.xml&quot; /&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 任务我管理器，定时发送行情消息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;task:scheduled-tasks&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;task:scheduled &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;marketDataGateway&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;sendMarketData&quot;&lt;/span&gt;&lt;span&gt;
            fixed-delay&lt;/span&gt;&lt;span&gt;=&quot;5000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;task:scheduled-tasks&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　看看客户端的main入口。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.swing.JFrame;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.After;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.ui.StockController;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.ui.StockPanel;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ConfigurableApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Main client application, can run as an application or unit test.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ConfigurableApplicationContext context;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Client().run();
    }

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
        context &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;client-bootstrap-config.xml&quot;&lt;span&gt;);
        StockController controller &lt;/span&gt;= context.getBean(StockController.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        JFrame f &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; JFrame(&quot;Rabbit Stock Demo&quot;&lt;span&gt;);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO consider @Configurable&lt;/span&gt;
        f.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StockPanel(controller));
        f.pack();
        f.setVisible(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    }

    @After
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (context != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            context.close();
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　它除了加载主配置文件，还调起了一个Panel，我们可以在该Panel上面进行股票交易请求的操作。&lt;/p&gt;
&lt;p&gt;　　客户端的主配置xml文件如下。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  pick up rabbit broker configuration &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.amqp.rabbit.stocks.config.client&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath:/client.properties&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:client-handlers.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; XML version of RabbitClientConfiguration &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; import resource=&quot;classpath:client-messaging.xml&quot; /&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　三.客户端发送交易请求，服务端接收请求并响应&lt;/h3&gt;
&lt;p&gt;　　这一部分的内容可以用以下的流程图来表示。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/998564/201712/998564-20171226142234448-1118423874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　1.客户端发现自己感兴趣的股票，执行交易请求操作，将请求消息发送到一个Default Exchange（就是无名称的Exchange），绑定的RouteKey为app.stock.request.在发送消息的同时，指定了一个匿名的ReplyTo的Queue,即上图中的tradeJoeQueue。&lt;/p&gt;
&lt;p&gt;　　 2.服务端生成名为app.stock.request的queue,因为没有绑定特定的Exchange，所以其默认的绑定的routeKey即为自己的名称app.stock.request。&lt;/p&gt;
&lt;p&gt;　　 3.服务端监听上述名为app.stock.request的queue，就可以坚挺到客户端发送的交易请求。&lt;/p&gt;
&lt;p&gt;　　 4.监听到客户端的交易请求，服务端对其进行处理，然后将响应沿着客户端在第一步指定的tradeJoeQueue发送回去。&lt;/p&gt;
&lt;p&gt;　　 5.客户端监听tradeJoeQueue的消息，接收到服务端返回的响应，打印出来。&lt;/p&gt;
&lt;p&gt;　　接下来我们一步一步的讲解上述步骤的具体实现。&lt;/p&gt;
&lt;p&gt;　　首先是客户端指定发送消息的Exchange和RouteKey，如下所示。　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * The client's template will by default send to the exchange defined in
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.config.AbstractRabbitConfiguration#rabbitTemplate()}
     * with the routing key
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; AbstractStockAppRabbitConfiguration#STOCK_REQUEST_QUEUE_NAME}
     * &amp;lt;p&amp;gt;
     * The default exchange will delivery to a queue whose name matches the
     * routing key value.
     * Exchange为default，即无名的Exchange，RoutingKey为app.stock.request，这是客户端发送信息的配置
     * 也就是说客户端的信息将发送至匿名的Exchange，RoutingKey为app.stock.request的通道
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureRabbitTemplate(RabbitTemplate rabbitTemplate) {
        rabbitTemplate.setRoutingKey(STOCK_REQUEST_QUEUE_NAME);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 客户端将信息发送到defaultExchange，RouteKey为app.stock.request&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来是发送消息，发送消息的动作是通过一个可视化的panel来进行的，我们暂且不关心，只看与RabbitMQ相关的发送部分。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.gateway;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.UnsupportedEncodingException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.UUID;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.AmqpException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.Message;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.core.MessagePostProcessor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.core.RabbitGatewaySupport;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.TradeRequest;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Rabbit implementation of {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; StockServiceGateway} to send trade requests
 * to an external process.
 *
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Gary Russell
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RabbitStockServiceGateway &lt;span&gt;extends&lt;/span&gt; RabbitGatewaySupport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;
        StockServiceGateway {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String defaultReplyTo;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDefaultReplyTo(String defaultReplyTo) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.defaultReplyTo =&lt;span&gt; defaultReplyTo;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 此处将发送股票交易请求到DefaultExchange，RouteKey为app.stock.request的通道
     * 并且指定了回调的Queue名字为traderJoeQueue().getName()
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; send(TradeRequest tradeRequest) {
        getRabbitTemplate().convertAndSend(tradeRequest,
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessagePostProcessor() {
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Message postProcessMessage(Message message)
                            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AmqpException {
                        message.getMessageProperties().setReplyTo(
                                defaultReplyTo);
                        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                            message.getMessageProperties().setCorrelationId(
                                    UUID.randomUUID().toString()
                                            .getBytes(&lt;/span&gt;&quot;UTF-8&quot;&lt;span&gt;));
                        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (UnsupportedEncodingException e) {
                            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AmqpException(e);
                        }
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; message;
                    }
                });
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这是一个发送消息的类，在主配置文件中，我们有配置&lt;span&gt;defaultReplyTo&lt;/span&gt;参数，如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean主要用于从客户端向服务端发送交易请求
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StockServiceGateway stockServiceGateway() {
        RabbitStockServiceGateway gateway &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RabbitStockServiceGateway();
        gateway.setRabbitTemplate(rabbitTemplate());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处设置DefaultReplyTo为traderJoeQueue().getName()，它将作为一个回调的Queue，接收来自服务端的响应。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 隐式的注入RabbitTemplate对象到RabbitStockServiceGateway中
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个bean在client-message.xml中也有配置&lt;/span&gt;
&lt;span&gt;        gateway.setDefaultReplyTo(traderJoeQueue().getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; gateway;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中的&lt;span&gt;traderJoeQueue&lt;/span&gt;的代码如下。　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * This queue does not need a binding, since it relies on the default
     * exchange.
     * 该bean用于接收服务端发送回来的响应消息。
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Queue traderJoeQueue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousQueue();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个Queue在客户端主配置文件被载入的时候就生成，它是一个匿名的Queue,也就是说由系统自动命名，它默认绑定的是无名称的topicExchange，routeKey为自己的名字。它被指定作为交易响应的回调Queue.&lt;/p&gt;
&lt;p&gt;　　客户端发送完请求消息以后，服务端需要监听这些请求消息，如下所示。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 监听消息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-container &lt;/span&gt;&lt;span&gt;concurrency&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;
        connection-factory&lt;/span&gt;&lt;span&gt;=&quot;connectionFactory&quot;&lt;/span&gt;&lt;span&gt; message-converter&lt;/span&gt;&lt;span&gt;=&quot;jsonMessageConverter&quot;&lt;/span&gt;&lt;span&gt;
        xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/rabbit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 从stockRequestQueue.name（app.stock.request）中去监听消息 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;serverHandler&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;handleMessage&quot;&lt;/span&gt;&lt;span&gt;
            queue-names&lt;/span&gt;&lt;span&gt;=&quot;#{stockRequestQueue.name}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对应的serverHandler代码如下所示。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.handler;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.TradeRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.domain.TradeResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.service.CreditCheckService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.service.ExecutionVenueService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.amqp.rabbit.stocks.service.TradingService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.StringUtils;


&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * POJO handler that receives trade requests and sends back a trade response.  Main application
 * logic sits here which coordinates between {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; ExecutionVenueService}, {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; CreditCheckService}, 
 * and {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; TradingService}.
 * 
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Mark Pollack
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServerHandler {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ExecutionVenueService executionVenueService;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CreditCheckService creditCheckService;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TradingService tradingService;
    
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ServerHandler(ExecutionVenueService executionVenueService,
                         CreditCheckService creditCheckService, 
                         TradingService tradingService) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.executionVenueService =&lt;span&gt; executionVenueService;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.creditCheckService =&lt;span&gt; creditCheckService;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tradingService =&lt;span&gt; tradingService;
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;委托方法，用于处理客户端发来的交易请求tradeRequest并且处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TradeResponse handleMessage(TradeRequest tradeRequest)
    {
        TradeResponse tradeResponse;
        List&lt;/span&gt;&amp;lt;?&amp;gt; errors = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Object&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (creditCheckService.canExecute(tradeRequest, errors))
        {
            tradeResponse &lt;/span&gt;=&lt;span&gt; executionVenueService.executeTradeRequest(tradeRequest);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            tradeResponse &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TradeResponse();
            tradeResponse.setError(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            tradeResponse.setErrorMessage(StringUtils.arrayToCommaDelimitedString(errors.toArray()));
            
        }
        tradingService.processTrade(tradeRequest, tradeResponse);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tradeResponse;
    }
   
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以简单的理解该处理方法将股票交易的请求数据做了简单的价格处理（比如随机将价格换成另外一个数字），然后返回一个响应的对象。&lt;/p&gt;
&lt;p&gt;　　接下来就是客户端来监听这些响应消息了，这部分的代码在第二部分介绍服务端发送行情消息，客户端监听消息的时候已经有提及，主要是如下代码。可以看到它不仅监听&lt;span&gt;marketDataQueue()，而且监听了&lt;span&gt;traderJoeQueue()&lt;/span&gt;，后者就是用于回传响应的QUeue.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 这个bean用于监听服务端发过来的消息，包含两类消息，一类是服务端发送的行情消息，另外一类是 服务端处理完客户端的交易请求以后的响应消息
     * 
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SimpleMessageListenerContainer messageListenerContainer() {
        SimpleMessageListenerContainer container &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleMessageListenerContainer(
                connectionFactory());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置该监听器监听的为marketDataQueue()和traderJoeQueue()，其中marketDataQueue()绑定了app.stock.marketdata这个Exchange和
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; app.stock.quotes.nasdaq.*这个routeKey。所以他可以监听到服务端发过来的nasdaq交易所下的证券信息
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; traderJoeQueue()是一个系统自动命名的Queue,当客户端发送trade
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; request会用它作为确认（replyTo)的Queue,好让服务端在处理完后发送确认信息到这个Queue
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以此处我们也要监听它。这个bean在client-message.xml中也有配置&lt;/span&gt;
        container.setConcurrentConsumers(5&lt;span&gt;);
        container.setQueues(marketDataQueue(), traderJoeQueue());
        container.setMessageListener(messageListenerAdapter());
        container.setAcknowledgeMode(AcknowledgeMode.AUTO);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; container;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; container(using(connectionFactory()).listenToQueues(marketDataQueue(),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; traderJoeQueue()).withListener(messageListenerAdapter()).&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们最后来看看客户端如何处理这些响应消息。如下所示。它只是把它打印出来，并且显示在可视化的panel上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 处理交易请求的响应消息
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; tradeResponse
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleMessage(TradeResponse tradeResponse) {
        log.info(&lt;/span&gt;&quot;Received trade repsonse. [&quot; + tradeResponse + &quot;]&quot;&lt;span&gt;);
        stockController.updateTrade(tradeResponse);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　至此，关于这个demo的所有知识点都已介绍完毕，相信掌握了这个demo，我们就可以利用spring amqp在自己的项目中实现异步消息队列。后续有时间我会利用spring amqp实现一个日志管理系统，集成到旧有的系统中去。&lt;/p&gt;
&lt;p&gt;　　 PS：demo的下载地址为&lt;a href=&quot;http://download.csdn.net/download/xxjoy_777/10173957&quot; target=&quot;_blank&quot;&gt;http://download.csdn.net/download/xxjoy_777/10173957&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 26 Dec 2017 07:06:00 +0000</pubDate>
<dc:creator>xdxxdx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/roy-blog/p/8094842.html</dc:identifier>
</item>
<item>
<title>ABP 教程文档 1-1 手把手引进门之 ASP.NET Core &amp; Entity Framework Core（官方教程翻译版 版本3.2.5） - 鸭补一生如梦</title>
<link>http://www.cnblogs.com/yabu007/p/8067694.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yabu007/p/8067694.html</guid>
<description>&lt;p&gt;本文是ABP官方文档翻译版，翻译基于 3.2.5 版本&lt;/p&gt;
&lt;p&gt;官方文档分四部分&lt;/p&gt;
&lt;p&gt;一、 教程文档&lt;/p&gt;
&lt;p&gt;二、ABP 框架&lt;/p&gt;
&lt;p&gt;三、zero 模块&lt;/p&gt;
&lt;p&gt;四、其他（中文翻译资源）&lt;/p&gt;

&lt;p&gt;本篇是第一部分的第一篇。&lt;/p&gt;
&lt;p&gt;第一部分分三篇&lt;/p&gt;
&lt;p&gt;1-1 手把手引进门&lt;/p&gt;
&lt;p&gt;1-2 进阶&lt;/p&gt;
&lt;p&gt;1-3 杂项 （相关理论知识）&lt;/p&gt;

&lt;p&gt;第一篇含两个步骤。&lt;/p&gt;
&lt;p&gt;1-1-1 &lt;a href=&quot;http://www.codeproject.com/Articles/1115763/Using-ASP-NET-Core-Entity-Framework-Core-and-ASP-N&quot;&gt;ASP.NET Core &amp;amp; Entity Framework Core&lt;/a&gt; 后端（内核）&lt;/p&gt;
&lt;p&gt;1-1-2 &lt;a href=&quot;http://www.codeproject.com/Articles/791740/Using-AngularJs-ASP-NET-MVC-Web-API-and-EntityFram&quot;&gt;ASP.NET MVC, Web API, EntityFramework &amp;amp; AngularJs&lt;/a&gt;  前端&lt;/p&gt;

&lt;p&gt;现在进入正文 &lt;/p&gt;

&lt;p&gt;土牛语录：&lt;span class=&quot;author&quot;&gt;&lt;a href=&quot;https://www.codeproject.com/script/Membership/View.aspx?mid=6866592&quot; rel=&quot;author&quot;&gt;Halil ibrahim Kalkan&lt;/a&gt;, &lt;span class=&quot;date&quot; title=&quot;Date last updated&quot;&gt;30 Jul 2017&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以下是手把手引进门教程，基于 ASP.NET Core， Entity Framework Core ，ABP 框架 创建Web 应用， PS： 自带自动的测试模块哦。&lt;/p&gt;
&lt;p&gt;本文目录如下：&lt;/p&gt;
&lt;p&gt;介绍&lt;/p&gt;
&lt;p&gt;　　前期准备&lt;/p&gt;
&lt;p&gt;创建应用&lt;/p&gt;
&lt;p&gt;正式开发&lt;/p&gt;
&lt;p&gt;　　创建任务实体 Entity&lt;/p&gt;
&lt;p&gt;　　将任务添加到数据库上下文 DbContext&lt;/p&gt;
&lt;p&gt;　　创建第一个数据迁移&lt;/p&gt;
&lt;p&gt;　　创建数据库&lt;/p&gt;
&lt;p&gt;　　编写任务服务&lt;/p&gt;
&lt;p&gt;　　测试任务服务&lt;/p&gt;
&lt;p&gt;　　任务列表展示&lt;/p&gt;
&lt;p&gt;　　　　添加菜单&lt;/p&gt;
&lt;p&gt;　　　　创建任务 Controller 和 视图模型&lt;/p&gt;
&lt;p&gt;　　　　任务列表页面&lt;/p&gt;
&lt;p&gt;　　　　本地化&lt;/p&gt;
&lt;p&gt;　　　　任务过滤&lt;/p&gt;
&lt;p&gt;　　　　任务列表页面的自动化测试&lt;/p&gt;
&lt;p&gt;其他相关内容&lt;/p&gt;
&lt;p&gt;文章修改历史&lt;/p&gt;
&lt;p&gt;版权所有&lt;/p&gt;


&lt;p&gt;这是系列文章的第一部分：使用 ASP.NET Core, Entity Framework Core 和 ASP.NET Boilerplate 创建N层Web应用 &lt;/p&gt;
&lt;p&gt;在本文中，我将指导大家创建一个样例（跨平台的多层Web应用），该样例会用到如下工具（请读者提前准备）：&lt;/p&gt;
&lt;p&gt; ABP 框架中会默认使用 &lt;a href=&quot;https://logging.apache.org/log4net/&quot; target=&quot;_blank&quot;&gt;Log4Net&lt;/a&gt; 和 &lt;a href=&quot;http://automapper.org/&quot; target=&quot;_blank&quot;&gt;AutoMapper&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;我们同时还会使用以下技术：&lt;/p&gt;
&lt;p&gt;演示的开发项目是一个简单的任务管理应用，用于将任务分配出去。我不会一层一层的进行开发，而是随着应用的拓展直接切换所需的层次。随着应用的推拓展，我将会介绍所需的ABP和其他框架的特性。&lt;/p&gt;

&lt;h2&gt;前期准备&lt;/h2&gt;
&lt;p&gt;开发样例时需要以下工具，请提前在你的机器上进行安装：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;Visual Studio 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SQL Server (你可以更改连接字符串为 localdb)&lt;/li&gt;
&lt;li&gt;Visual Studio Extensions:
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先使用ABP模版（&lt;a href=&quot;http://www.aspnetboilerplate.com/Templates&quot;&gt;http://www.aspnetboilerplate.com/Templates&lt;/a&gt;）创建一个web应用项目，命名为&quot;&lt;strong&gt;Acme.SimpleTaskApp&lt;/strong&gt;&quot; 。创建模板时可以设置自己的公司名称（比如&lt;strong&gt;Acme&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;本样例使用MPA（&lt;strong&gt;Multi Page Web Application&lt;/strong&gt;）多页面模式（注：即使用MVC和Razor技术）进行开发，本文不使用SPA（注：土牛的SPA是使用Angular）单页面模式。同时为了使用最基础的开发模板功能，本文不使用Module Zero模块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171221101919803-1063906056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ABP 模版会创建一个多层的解决方案，如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171221154037334-1549597848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模板会根据输入的名字自动创建6个项目。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;core  领域层／业务层，包含实体Entity，领域服务 domain service 等等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Application 应用层 ， 包含DTO，应用服务 application service 等等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Entity Framework 基础设施层 ，EF core 数据库集成处理 （从其他层抽象出来的EF core）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Web 展示层 ， 即Asp.net MVC层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Tests 单元测试和集成测试，含应用层，领域层，基础设施层，不含Web展示层&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Web.Tests ASP.NET Core集成测试，包含web展示层的全部集成测试&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;以上是没有选择zero的项目结果，如果你选择了zero，项目结构就会变成下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171221154130521-177301718.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当你把应用运行起来后，你会看到下图所示的用户界面：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226133554385-1423370914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个应用包含一个顶级菜单栏，包含空的首页，关于页，还有一个语言的下拉选项。&lt;/p&gt;


&lt;h2&gt;创建任务实体 Entity&lt;/h2&gt;
&lt;p&gt;我们从创建一个简单的任务实体 Task Entity 开始，由于它属于领域层，把它加到 core 项目里。&lt;/p&gt;

&lt;p&gt;代码如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c9017315-37c1-425a-8429-dc4d1231d28b')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_c9017315-37c1-425a-8429-dc4d1231d28b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c9017315-37c1-425a-8429-dc4d1231d28b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c9017315-37c1-425a-8429-dc4d1231d28b',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c9017315-37c1-425a-8429-dc4d1231d28b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations.Schema;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Domain.Entities;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Domain.Entities.Auditing;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Timing;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Acme.SimpleTaskApp.Tasks
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     [Table(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Task : Entity, IHasCreationTime
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxTitleLength = &lt;span&gt;256&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxDescriptionLength = &lt;span&gt;64&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;64KB&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        [MaxLength(MaxTitleLength)]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        [MaxLength(MaxDescriptionLength)]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DateTime CreationTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; TaskState State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             CreationTime =&lt;span&gt; Clock.Now;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             State =&lt;span&gt; TaskState.Open;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Task(&lt;span&gt;string&lt;/span&gt; title, &lt;span&gt;string&lt;/span&gt; description = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             Title =&lt;span&gt; title;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             Description =&lt;span&gt; description;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; TaskState : &lt;span&gt;byte&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         Open = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         Completed = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;Task 实体从 ABP 的 Entity 基类继承，Entity 基类默认ID属性是 int 类型。如果主键类型为非 int 类型，也可以选择范型版本的 Entity&amp;lt;TPrimaryKey&amp;gt;.&lt;/li&gt;
&lt;li&gt;IHasCreationTime 是一个简单的接口，只定义了 CreationTime 属性 （统一规范 CreationTime 的名字）&lt;/li&gt;
&lt;li&gt;Task 实体定义了一个必填的 Title 和 非必填的 Description&lt;/li&gt;
&lt;li&gt;TaskState 是一个简单枚举，定义了 Task 任务的状态&lt;/li&gt;
&lt;li&gt;Clock.Now 返回默认的 DateTime.Now 。但它提供了一个抽象方法，使得我们可以在将来有需要的时候很轻松就可以转换为 DateTime.UtcNow 。在 ABP 框架中总是使用Clock.Now 而不使用 DateTime.Now 。&lt;/li&gt;
&lt;li&gt;将 Task 实体存储到数据库的 AppTasks 表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;将任务添加到数据库上下文 DbContext&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;.EntityFrameworkCore 包含一个预定义的 &lt;/strong&gt;DbContext 。将 Task 实体的 DbSet 加到 &lt;strong&gt;&lt;strong&gt;DbContext 里。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('08b8b071-19c3-46fb-b669-bdc230f5324f')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_08b8b071-19c3-46fb-b669-bdc230f5324f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_08b8b071-19c3-46fb-b669-bdc230f5324f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('08b8b071-19c3-46fb-b669-bdc230f5324f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_08b8b071-19c3-46fb-b669-bdc230f5324f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleTaskAppDbContext : AbpDbContext
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; DbSet&amp;amp;lt;Task&amp;gt; Tasks { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; SimpleTaskAppDbContext(DbContextOptions&amp;amp;lt;SimpleTaskAppDbContext&amp;gt;&lt;span&gt; options) 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;现在，EF core 知道我们有了一个 Task 的实体。&lt;/p&gt;

&lt;h2&gt;创建第一个数据迁移&lt;/h2&gt;
&lt;p&gt;我们将创建一个初始化数据库迁移文件，它会自动创建数据库和数据库表 AppTasks 。打开源管理器 &lt;strong&gt;Package Manager Console from Visual Studio , 执行 Add-Migration 命令（默认的项目必须是 .EntityFrameworkCore 项目），如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171222144309443-129483148.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个命令会在 . EntityFrameworkCore 项目下创建一个迁移（ Migrations ）文件夹，文件夹包含一个迁移类和数据库模型的快照，如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226133651729-547569485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如下代码所示，自动创建了 “初始化 （ Initial ）”迁移类：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1120bbc3-7e94-495f-91ea-b85c81065353')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_1120bbc3-7e94-495f-91ea-b85c81065353&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1120bbc3-7e94-495f-91ea-b85c81065353&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1120bbc3-7e94-495f-91ea-b85c81065353',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1120bbc3-7e94-495f-91ea-b85c81065353&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Initial : Migration
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Up(MigrationBuilder migrationBuilder)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        migrationBuilder.CreateTable(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             columns: table =&amp;gt; &lt;span&gt;new&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 Id = table.Column&amp;amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(nullable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     .Annotation(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SqlServer:ValueGenerationStrategy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SqlServerValueGenerationStrategy.IdentityColumn),
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 CreationTime = table.Column&amp;amp;lt;DateTime&amp;gt;(nullable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 Description = table.Column&amp;amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(maxLength: &lt;span&gt;65536&lt;/span&gt;, nullable: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 State = table.Column&amp;amp;lt;&lt;span&gt;byte&lt;/span&gt;&amp;gt;(nullable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 Title = table.Column&amp;amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(maxLength: &lt;span&gt;256&lt;/span&gt;, nullable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             constraints: table =&amp;gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 table.PrimaryKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PK_AppTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, x =&amp;gt;&lt;span&gt; x.Id);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Down(MigrationBuilder migrationBuilder)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        migrationBuilder.DropTable(
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;当我们执行数据库迁移命令时，这些代码会创建 AppTasks 表 （更多迁移相关信息请参照  &lt;a href=&quot;https://docs.efproject.net/&quot; target=&quot;_blank&quot;&gt;entity framework documentation&lt;/a&gt; ）&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;创建数据库&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;以上的迁移执行完毕后（注：Add-Migration 命令执行后），在包管理控制台中执行 Update-Database 命令，如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171222144228068-1192732998.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;这个命令将在 local SQL Server 中创建一个名为 “SimpleTaskAppDb” 的数据库并执行数据库迁移（此时，我们只有一个“初始化 （ Initial ）”的迁移）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226133736026-1990929022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在，我们有了 Task 实体，并且在数据库中有对应的数据库表， 我们输入一些简单的任务到表里。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226133747401-2111233830.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;友情提示： 数据库上下文字符串 connection string 在 .web 应用的 appsettings.json 中。 （要换数据库的自己改一下字符串哦）。&lt;/p&gt;

&lt;h2&gt;编写任务服务&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Application-Services&quot; target=&quot;_blank&quot;&gt;Application Services&lt;/a&gt; 应用层服务&lt;/em&gt;用于将领域业务逻辑暴露给展示层。展示层在必要时通过使用&lt;em&gt; &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Data-Transfer-Objects&quot; target=&quot;_blank&quot;&gt;Data Transfer Object&lt;/a&gt; &lt;/em&gt;数据传输对象（DTO）作用参数调用一个应用服务，应用服务则通过调用领域对象执行一些具体的业务逻辑并在有需要时返回一个DTO给展示层。&lt;/p&gt;
&lt;p&gt;我们在 .Application 项目中创建第一个应用服务 TaskAppService ，该服务将执行与任务相关的应用程序逻辑。首先，我们先来定义一个app 服务接口：&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('126b69f9-8cb4-4bd3-99f7-49860a21acac')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_126b69f9-8cb4-4bd3-99f7-49860a21acac&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_126b69f9-8cb4-4bd3-99f7-49860a21acac&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('126b69f9-8cb4-4bd3-99f7-49860a21acac',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_126b69f9-8cb4-4bd3-99f7-49860a21acac&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ITaskAppService : IApplicationService
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     Task&amp;amp;lt;ListResultDto&amp;amp;lt;TaskListDto&amp;gt;&amp;gt;&lt;span&gt; GetAll(GetAllTasksInput input);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;我们推荐先定义接口，但不是非这样做不可。按照惯例，ABP 中所有的应用服务都需要实现 IApplicationService 接口 （它只是一个空的标记接口）。我们创建了一个 GetAll 方法去查询任务列表，同时，我们定义了如下的 DTOs ：&lt;/p&gt;
&lt;p&gt; 代码如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a34a9943-9479-4415-940f-2f11c463fbd9')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_a34a9943-9479-4415-940f-2f11c463fbd9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a34a9943-9479-4415-940f-2f11c463fbd9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a34a9943-9479-4415-940f-2f11c463fbd9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a34a9943-9479-4415-940f-2f11c463fbd9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GetAllTasksInput
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; TaskState? State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; [AutoMapFrom(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Task))]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TaskListDto : EntityDto, IHasCreationTime
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Title { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; DateTime CreationTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; TaskState State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;GetAllTasksInput DTO 为 GetAll 应用服务方法定义了一个输入参数 。 我们将 状态 state 定义为 DTO 对象 而不定义为方法的参数。 这样我们将来需要的时候可以在这个DTO增加其他的参数，同时兼容现有的客户端 （当然我们也可以在方法里加一个 state 参数）。&lt;/li&gt;
&lt;li&gt;TaskListDto 用开返回任务数据。该Dto 从 EntityDto 继承，EntityDto 只是定义了 Id 属性（我们可以不继承 EntityDto ，直接自己将 Id 加到我们的Dto里）。我们定义了[AutoMapFrom] 特性来创建 &lt;a href=&quot;http://automapper.org/&quot; target=&quot;_blank&quot;&gt;AutoMapper&lt;/a&gt; 自动映射任务实体到任务列表Dto TaskListDto 。这个特性在 Abp.AutoMapper nuget 包里进行了定义。&lt;/li&gt;
&lt;li&gt;ListResultDto 是一个简单的类，包含了一个列表（我们可以直接返回一个 List&amp;lt;TaskListDto&amp;gt; 列表）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在，我们可以实现 ITaskAppService 了。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5d98a25e-74ad-48b6-996f-2781701fe446')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_5d98a25e-74ad-48b6-996f-2781701fe446&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5d98a25e-74ad-48b6-996f-2781701fe446&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5d98a25e-74ad-48b6-996f-2781701fe446',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5d98a25e-74ad-48b6-996f-2781701fe446&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Application.Services.Dto;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Domain.Repositories;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Abp.Linq.Extensions;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Acme.SimpleTaskApp.Tasks.Dtos;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Acme.SimpleTaskApp.Tasks
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TaskAppService : SimpleTaskAppAppServiceBase, ITaskAppService
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IRepository&amp;amp;lt;Task&amp;gt;&lt;span&gt; _taskRepository;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; TaskAppService(IRepository&amp;amp;lt;Task&amp;gt;&lt;span&gt; taskRepository)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             _taskRepository =&lt;span&gt; taskRepository;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;amp;lt;ListResultDto&amp;amp;lt;TaskListDto&amp;gt;&amp;gt;&lt;span&gt; GetAll(GetAllTasksInput input)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; tasks = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _taskRepository
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                .GetAll()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 .WhereIf(input.State.HasValue, t =&amp;gt; t.State ==&lt;span&gt; input.State.Value)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 .OrderByDescending(t =&amp;gt;&lt;span&gt; t.CreationTime)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                .ToListAsync();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ListResultDto&amp;amp;lt;TaskListDto&amp;gt;&lt;span&gt;(
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 ObjectMapper.Map&amp;amp;lt;List&amp;amp;lt;TaskListDto&amp;gt;&amp;gt;&lt;span&gt;(tasks)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;TaskAppService 该类从 SimpleTaskAppAppServiceBase 继承，SimpleTaskAppAppServiceBase （从 ABP 的 ApplicationService 类继承）在模板里已经自动生成。 TaskAppService 不是必须从 SimpleTaskAppAppServiceBase 继承，应用服务可以是普通类。但是 ApplicationService 基类有一些预先注入的服务（就像这里使用的 ObjectMapper ）&lt;/li&gt;
&lt;li&gt;我们使用依赖注入 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Dependency-Injection&quot; target=&quot;_blank&quot;&gt;dependency injection&lt;/a&gt; 来获取数据仓储 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Repositories&quot; target=&quot;_blank&quot;&gt;repository&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Repositories 数据仓储用于为数据实体抽象数据库操作。ABP 为每个实体创建了预定义的数据库仓储（就像这里用到了 IRepository&amp;lt;Task&amp;gt; ）用于实现通用的任务。IRepository.GetAll() 方法用于查询数据实体，它返回了一个 IQueryable 接口。&lt;/li&gt;
&lt;li&gt;WhereIf 这是 ABP 里的一个拓展方法，该方法提供了一个 IQueryable.Where 方法的简便条件语法。&lt;/li&gt;
&lt;li&gt;ObjectMapper 用于将任务对象列表映射到任务列表Dto对象列表 （基于 Application Service 基类并默认实现 AutoMapper ） &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;测试任务服务&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在创建用户接口钱，我们需要测试一下任务应用服务 TaskAppService 。 如果你对自动化测试不感兴趣的话，可以忽略这个部分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们的模板包含 .Tests 项目，这可以测试我们的代码。这个项目不使用 SQL Server数据库，而是使用EF core 的内存数据库。所以，我们可以不用真实数据库来进行单元测试。它为每个测试创建了单独的数据库。所以每个测试都是隔离的。我们需要在开始测试前使用 TestDataBuilder 类添加初始测试数据到内存数据库里。我修改了 TestDataBuilder 。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4d25ef17-3a7b-41e6-badd-4589ce998ab0')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4d25ef17-3a7b-41e6-badd-4589ce998ab0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4d25ef17-3a7b-41e6-badd-4589ce998ab0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4d25ef17-3a7b-41e6-badd-4589ce998ab0',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4d25ef17-3a7b-41e6-badd-4589ce998ab0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestDataBuilder
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; SimpleTaskAppDbContext _context;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TestDataBuilder(SimpleTaskAppDbContext context)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         _context =&lt;span&gt; context;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Build()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        _context.Tasks.AddRange(
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt; Task(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Follow the white rabbit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Follow the white rabbit in order to know the reality.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt; Task(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Clean your room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) { State =&lt;span&gt; TaskState.Completed }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;通过样例项目的源代码，你可以看懂 TestDataBuilder 在哪里用，具体怎么用。我们添加2个任务（其中一个已经完成）到数据库上下文 dbcontext 。我们可以假定数据库中有2个任务，开始编写测试用例。 第一个继承测试用来测试 TaskAppService.GetAll 方法。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('88d6314b-2e5b-49e6-a107-26269ed68dab')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_88d6314b-2e5b-49e6-a107-26269ed68dab&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_88d6314b-2e5b-49e6-a107-26269ed68dab&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('88d6314b-2e5b-49e6-a107-26269ed68dab',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_88d6314b-2e5b-49e6-a107-26269ed68dab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TaskAppService_Tests : SimpleTaskAppTestBase
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ITaskAppService _taskAppService;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TaskAppService_Tests()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         _taskAppService = Resolve&amp;amp;lt;ITaskAppService&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    [Fact]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; System.Threading.Tasks.Task Should_Get_All_Tasks()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; output = &lt;span&gt;await&lt;/span&gt; _taskAppService.GetAll(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; GetAllTasksInput());
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         output.Items.Count.ShouldBe(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    [Fact]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; System.Threading.Tasks.Task Should_Get_Filtered_Tasks()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; output = &lt;span&gt;await&lt;/span&gt; _taskAppService.GetAll(&lt;span&gt;new&lt;/span&gt; GetAllTasksInput { State =&lt;span&gt; TaskState.Open });
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         output.Items.ShouldAllBe(t =&amp;gt; t.State ==&lt;span&gt; TaskState.Open);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们创建2个不同的测试用例来测试 GetAll 方法。现在，我们打开测试浏览器（在VS主菜单的 Test\Windows\Test Explorer 菜单下）开始进行单元测试。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226095227040-1103082514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有测试均成功。最后一个我们现在可以忽略它，他是一个模板生成的测试。&lt;/p&gt;
&lt;p&gt;友情提示： ABP 模板默认安装使用 &lt;a href=&quot;https://xunit.github.io/&quot; target=&quot;_blank&quot;&gt;xUnit&lt;/a&gt; 和 &lt;a href=&quot;http://shouldly.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;Shouldly&lt;/a&gt; 。我们使用它们编写我们的测试。&lt;/p&gt;


&lt;p&gt;现在，我们确定 TaskAppService 服务可以正常工作。 我们可以开始创建页面来展示所有的任务。&lt;/p&gt;

&lt;h2&gt;添加菜单&lt;/h2&gt;
&lt;p&gt;首先，我们在顶级菜单上添加一个新的菜单&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fee842a0-5233-4a00-aa4b-e2446f4bf3bc')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_fee842a0-5233-4a00-aa4b-e2446f4bf3bc&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fee842a0-5233-4a00-aa4b-e2446f4bf3bc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fee842a0-5233-4a00-aa4b-e2446f4bf3bc',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fee842a0-5233-4a00-aa4b-e2446f4bf3bc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleTaskAppNavigationProvider : NavigationProvider
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetNavigation(INavigationProviderContext context)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        context.Manager.MainMenu
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            .AddItem(
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MenuItemDefinition(
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HomePage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     url: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     icon: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fa fa-home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    )
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            ).AddItem(
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MenuItemDefinition(
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     url: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home/About&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     icon: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fa fa-info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    )
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            ).AddItem(
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MenuItemDefinition(
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     url: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     icon: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fa fa-tasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    )
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ILocalizableString L(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LocalizableString(name, SimpleTaskAppConsts.LocalizationSourceName);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;模板自带两个页面：首页和关于页，如上代码所示。我们也可以修改它们创建新的页面。但现在我们不修改首页和关于页，我们创建新的菜单项。&lt;/p&gt;

&lt;h2&gt;创建任务 Controller 和 视图模型&lt;/h2&gt;
&lt;p&gt;我们在 .Web 项目下创建一个新的 controller 类，命名为 TasksController 。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5fa4d602-6954-4912-9b8e-bd4d904be938')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5fa4d602-6954-4912-9b8e-bd4d904be938&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5fa4d602-6954-4912-9b8e-bd4d904be938&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5fa4d602-6954-4912-9b8e-bd4d904be938',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5fa4d602-6954-4912-9b8e-bd4d904be938&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TasksController : SimpleTaskAppControllerBase
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ITaskAppService _taskAppService;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TasksController(ITaskAppService taskAppService)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         _taskAppService =&lt;span&gt; taskAppService;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;amp;lt;ActionResult&amp;gt;&lt;span&gt; Index(GetAllTasksInput input)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; output = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _taskAppService.GetAll(input);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; model = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexViewModel(output.Items);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(model);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;TasksController 从 SimpleTaskAppControllerBase （ SimpleTaskAppControllerBase 从 AbpController 继承）继承，该类包含应用程序 Controllers 需要的通用基础代码。&lt;/li&gt;
&lt;li&gt;我们反射了 ITaskAppService ， 以获取到所有的任务列表。&lt;/li&gt;
&lt;li&gt;我们在 .Web 项目中创建了一个 IndexViewModel 类来将数据展示到视图上，这样可以不直接将 GetAll 方法的结果直接暴露到视图上。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('42d59829-1ee4-47d2-9493-cb4ae37f9b4c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_42d59829-1ee4-47d2-9493-cb4ae37f9b4c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_42d59829-1ee4-47d2-9493-cb4ae37f9b4c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('42d59829-1ee4-47d2-9493-cb4ae37f9b4c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_42d59829-1ee4-47d2-9493-cb4ae37f9b4c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexViewModel
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; IReadOnlyList&amp;amp;lt;TaskListDto&amp;gt; Tasks { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; IndexViewModel(IReadOnlyList&amp;amp;lt;TaskListDto&amp;gt;&lt;span&gt; tasks)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Tasks =&lt;span&gt; tasks;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetTaskLabel(TaskListDto task)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (task.State)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;case&lt;/span&gt;&lt;span&gt; TaskState.Open:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label-success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label-default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们创建了一个简单的视图模型，在它的构造函数中，我们获取了一个任务列表（由 ITaskAppService 提供）。同时它还有一个 GetTaskLabel 方法，用于在视图中通过一个 选择 Bootstrap 标签来标示任务。&lt;/p&gt;

&lt;h2&gt;任务列表页面&lt;/h2&gt;
&lt;p&gt;最后，完成实际的 Index 视图。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f834440d-d428-4abe-81c6-cca2571c9f83')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f834440d-d428-4abe-81c6-cca2571c9f83&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f834440d-d428-4abe-81c6-cca2571c9f83&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f834440d-d428-4abe-81c6-cca2571c9f83',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f834440d-d428-4abe-81c6-cca2571c9f83&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@model Acme.SimpleTaskApp.Web.Models.Tasks.IndexViewModel
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     ViewBag.Title = L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     ViewBag.ActiveMenu = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Matches with the menu name in SimpleTaskAppNavigationProvider to highlight the menu item&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &amp;amp;lt;h2&amp;gt;@L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;amp;lt;/h2&amp;gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;amp;lt;div&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;13&lt;/span&gt;             @foreach (&lt;span&gt;var&lt;/span&gt; task &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Model.Tasks)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &amp;amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;16&lt;/span&gt;                     &amp;amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pull-right label @Model.GetTaskLabel(task)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@L($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskState_{task.State}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&amp;amp;lt;/span&amp;gt;
&lt;span&gt;17&lt;/span&gt;                     &amp;amp;lt;h4 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item-heading&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;@task.Title&amp;amp;lt;/h4&amp;gt;
&lt;span&gt;18&lt;/span&gt;                     &amp;amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list-group-item-text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;19&lt;/span&gt;                         @task.CreationTime.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &amp;amp;lt;/div&amp;gt;
&lt;span&gt;21&lt;/span&gt;                 &amp;amp;lt;/li&amp;gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &amp;amp;lt;/ul&amp;gt;
&lt;span&gt;24&lt;/span&gt;     &amp;amp;lt;/div&amp;gt;
&lt;span&gt;25&lt;/span&gt; &amp;amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们使用 Bootstrap 的 &lt;a href=&quot;http://getbootstrap.com/components/#list-group&quot; target=&quot;_blank&quot;&gt;list group&lt;/a&gt; 组件和定义好的模型来渲染视图。我们使用 IndexViewModel.GetTaskLable() 方法来获得任务的标签类型。渲染后的界面如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226103456197-1840534047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;本地化&lt;/h2&gt;
&lt;p&gt;我们在视图里使用 ABP 框架自带的 L 方法。 它用于本地化语言。我们在 .Core 项目下的 Localization/Source 文件夹中定义好了本地化字符串，使用 .json 文件。英语版本的本地化语言设置&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6c374672-2c06-48db-8d37-2b24df83bcca')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_6c374672-2c06-48db-8d37-2b24df83bcca&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6c374672-2c06-48db-8d37-2b24df83bcca&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6c374672-2c06-48db-8d37-2b24df83bcca',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6c374672-2c06-48db-8d37-2b24df83bcca&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;culture&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;texts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HelloWorld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChangeLanguage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Change language&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HomePage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HomePage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;About&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home_Description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome to SimpleTaskApp...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;About_Description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a simple startup template to use ASP.NET Core with ABP framework.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Task List&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskState_Open&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Open&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskState_Completed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Completed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;模板自带了大多数的文本，当然，它们可以删除掉。在上面的代码中我只是加了最后的三行。使用 ABP 的本地化是相当的简单，如果你想了解本地化系统更多的信息，请查阅文档 &lt;a href=&quot;http://www.aspnetboilerplate.com/Pages/Documents/Localization&quot; target=&quot;_blank&quot;&gt;localization document&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;任务过滤&lt;/h2&gt;
&lt;p&gt;正如之前说过的，TaskController 实际上使用的是 GetAllTasksInput ，可以灵活的过滤任务。我们可以添加一个任务列表的下拉菜单来过滤任务。首先，我们添加一个下拉菜单到视图上（我们加到 header 里）：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7305676a-ad9f-4b8d-ae7e-e46d9758b2e5')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_7305676a-ad9f-4b8d-ae7e-e46d9758b2e5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7305676a-ad9f-4b8d-ae7e-e46d9758b2e5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7305676a-ad9f-4b8d-ae7e-e46d9758b2e5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7305676a-ad9f-4b8d-ae7e-e46d9758b2e5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;amp;lt;h2&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     @L(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &amp;amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pull-right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        @Html.DropDownListFor(
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;            model =&amp;gt;&lt;span&gt; model.SelectedTaskState,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;           Model.GetTasksStateSelectListItems(LocalizationManager),
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;            &lt;span&gt;new&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;           {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                @class = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskStateCombobox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;           })
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &amp;amp;lt;/span&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;amp;lt;/h2&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;然后我修改了 IndexViewModel ， 增加了 SeletedTaskState 属性和 GetTaskStateSelectListItems 方法：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('913b9706-9591-4fb9-a125-59e72b0b9d3f')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_913b9706-9591-4fb9-a125-59e72b0b9d3f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_913b9706-9591-4fb9-a125-59e72b0b9d3f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('913b9706-9591-4fb9-a125-59e72b0b9d3f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_913b9706-9591-4fb9-a125-59e72b0b9d3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexViewModel
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; TaskState? SelectedTaskState { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;amp;lt;SelectListItem&amp;gt;&lt;span&gt; GetTasksStateSelectListItems(ILocalizationManager localizationManager)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;amp;lt;SelectListItem&amp;gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SelectListItem
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 Text = localizationManager.GetString(SimpleTaskAppConsts.LocalizationSourceName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllTasks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 Value = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 Selected = SelectedTaskState == &lt;span&gt;null&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         list.AddRange(Enum.GetValues(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TaskState))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 .Cast&amp;amp;lt;TaskState&amp;gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 .Select(state =&amp;gt;
&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SelectListItem
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         Text = localizationManager.GetString(SimpleTaskAppConsts.LocalizationSourceName, $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TaskState_{state}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         Value =&lt;span&gt; state.ToString(),
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         Selected = state ==&lt;span&gt; SelectedTaskState
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    })
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们也可以在 controller 里设置 SelectedTaskState ：&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b1a2eab5-5029-40e7-824f-fc79c9cac0dc')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_b1a2eab5-5029-40e7-824f-fc79c9cac0dc&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b1a2eab5-5029-40e7-824f-fc79c9cac0dc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b1a2eab5-5029-40e7-824f-fc79c9cac0dc',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b1a2eab5-5029-40e7-824f-fc79c9cac0dc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;amp;lt;ActionResult&amp;gt;&lt;span&gt; Index(GetAllTasksInput input)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; output = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _taskAppService.GetAll(input);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; model = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexViewModel(output.Items)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         SelectedTaskState =&lt;span&gt; input.State
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(model);
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;现在，我们运行程序，可以看到视图的右上角有个下拉框，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226111549900-1955717259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们添加了下拉框，但它现在还不能用。我们需要编写一些简单的 javascript 代码，当下拉框内容更改后可以重新请求/刷新任务列表页面。我们在 .Web 项目里创建了 wwwroot\js\views\tasks\&lt;strong&gt;index.js &lt;/strong&gt;文件&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c851ddb8-6685-4edb-93c4-2943461266f7')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_c851ddb8-6685-4edb-93c4-2943461266f7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c851ddb8-6685-4edb-93c4-2943461266f7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c851ddb8-6685-4edb-93c4-2943461266f7',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c851ddb8-6685-4edb-93c4-2943461266f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;(function ($) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    $(function () {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; _$taskStateCombobox = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#TaskStateCombobox&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        _$taskStateCombobox.change(function() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             location.href = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/Tasks?state=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; _$taskStateCombobox.val();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; })(jQuery);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 我们首先添加 &lt;strong&gt;&lt;a href=&quot;https://github.com/madskristensen/BundlerMinifier&quot; target=&quot;_blank&quot;&gt;Bundler &amp;amp; Minifier&lt;/a&gt;&lt;/strong&gt; 扩展程序（这是 ASP.NET Core 项目标配的压缩文件）来压缩脚本的大小， 然后开始在视图里编写 javascript ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226125554978-1017024353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这将在 .Web 项目中的 bundleconfig.json 中添加以下代码&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4fc5a902-71dd-42a6-94dd-12b549e05a2f')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_4fc5a902-71dd-42a6-94dd-12b549e05a2f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4fc5a902-71dd-42a6-94dd-12b549e05a2f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4fc5a902-71dd-42a6-94dd-12b549e05a2f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4fc5a902-71dd-42a6-94dd-12b549e05a2f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputFileName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wwwroot/js/views/tasks/index.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputFiles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wwwroot/js/views/tasks/index.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;  ]
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;同时创建了 script 的压缩版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226130044009-2007903340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;无论我何时修改了index.js ， index.min.js 都会自动重新生成。现在，我们可以在我们的页面里插入 javascript 文件了。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('838dec20-0223-4a33-93d4-f302b164ccaf')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_838dec20-0223-4a33-93d4-f302b164ccaf&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_838dec20-0223-4a33-93d4-f302b164ccaf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('838dec20-0223-4a33-93d4-f302b164ccaf',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_838dec20-0223-4a33-93d4-f302b164ccaf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@section scripts
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &amp;amp;lt;environment names=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Development&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;         &amp;amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/js/views/tasks/index.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;lt;/script&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;amp;lt;/environment&amp;gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &amp;amp;lt;environment names=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Staging,Production&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 8&lt;/span&gt;         &amp;amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/js/views/tasks/index.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;amp;lt;/script&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;amp;lt;/environment&amp;gt;
&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;至此，我们的视图将在开发环境下使用 index.js 包，而在生产环境中使用 index.min.js （压缩版本）包。这是在 ASP.Net Core MVC 项目中通用的做法。&lt;/p&gt;

&lt;h2&gt;任务列表页面的自动化测试&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;ASP.NET Core MVC 基础框架中集成了一个继承测试模块。我们可以完整的测试我们的服务端代码了。如果你对自动化测试不感兴趣的话，你可以忽略这个部分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ABP 模板中自带 .Web.Tests 项目。我们创建一个普通的测试来请求 TaskController.Index ， 然后检查反馈内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('35f423f3-7e3c-425a-bdb3-0ea4a6fa7e77')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_35f423f3-7e3c-425a-bdb3-0ea4a6fa7e77&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_35f423f3-7e3c-425a-bdb3-0ea4a6fa7e77&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('35f423f3-7e3c-425a-bdb3-0ea4a6fa7e77',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_35f423f3-7e3c-425a-bdb3-0ea4a6fa7e77&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TasksController_Tests : SimpleTaskAppWebTestBase
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    [Fact]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; System.Threading.Tasks.Task Should_Get_Tasks_By_State()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetResponseAsStringAsync(
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             GetUrl&amp;amp;lt;TasksController&amp;gt;(nameof(TasksController.Index), &lt;span&gt;new&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     state =&lt;span&gt; TaskState.Open
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        response.ShouldNotBeNullOrWhiteSpace();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;GetResponseAsStringAsync 和 GetUrl 是 ABP 的 AbpAspNetCoreIntrgratedTestBase 类中很有用的方法。使用这些快捷方法我们可以比较容易的创建请求，如果直接使用客户端请求（一个 HttpClient 的实例）会相对复杂一些。如果想深入了解，请参考 ASP.NET Core 的  &lt;a href=&quot;https://docs.asp.net/en/latest/testing/integration-testing.html&quot; target=&quot;_blank&quot;&gt;integration testing documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们开始 debug 测试模块式，我们可以看到反馈的 HTML 如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/9304/201712/9304-20171226131843229-1812603401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图显示 Index 页面的反馈很正常。但是，我们更想知道返回的 HTML 是否正如我们所预期的那样。 有很多类库可以用来解析 HTML 。ABP 模板的 .Web.Tests 项目预先安装了其中的一个类库 &lt;a href=&quot;https://anglesharp.github.io/&quot; target=&quot;_blank&quot;&gt;AngleSharp&lt;/a&gt; 我们用它来检查创建的 HTML 代码。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b59fdc87-f5d2-4455-bdd4-860a70fa2af7')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b59fdc87-f5d2-4455-bdd4-860a70fa2af7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b59fdc87-f5d2-4455-bdd4-860a70fa2af7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b59fdc87-f5d2-4455-bdd4-860a70fa2af7',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b59fdc87-f5d2-4455-bdd4-860a70fa2af7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TasksController_Tests : SimpleTaskAppWebTestBase
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    [Fact]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; System.Threading.Tasks.Task Should_Get_Tasks_By_State()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; GetResponseAsStringAsync(
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             GetUrl&amp;amp;lt;TasksController&amp;gt;(nameof(TasksController.Index), &lt;span&gt;new&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     state =&lt;span&gt; TaskState.Open
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        response.ShouldNotBeNullOrWhiteSpace();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Get tasks from database&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tasksInDatabase = &lt;span&gt;await&lt;/span&gt; UsingDbContextAsync(&lt;span&gt;async&lt;/span&gt; dbContext =&amp;gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; dbContext.Tasks
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 .Where(t =&amp;gt; t.State ==&lt;span&gt; TaskState.Open)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                .ToListAsync();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Parse HTML response to check if tasks in the database are returned&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; document = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlParser().Parse(response);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; listItems = document.QuerySelectorAll(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#TaskList li&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Check task count&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        listItems.Length.ShouldBe(tasksInDatabase.Count);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Check if returned list items are same those in the database&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; listItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; listItems)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; header = listItem.QuerySelector(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.list-group-item-heading&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; taskTitle =&lt;span&gt; header.InnerHtml.Trim();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             tasksInDatabase.Any(t =&amp;gt; t.Title ==&lt;span&gt; taskTitle).ShouldBeTrue();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;你可以深入检查 HTML 的更多细节。但一般来说，检查基本的标签就够了。&lt;/p&gt;


&lt;p&gt;第二篇 &lt;a href=&quot;http://www.codeproject.com/Articles/1117216/Using-ASP-NET-Core-Entity-Framework-Core-and-ASP&quot;&gt;Second article&lt;/a&gt; 接着开发这个应用服务。&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;2017-07-30: 将文章中的 ListResultOutput 替换为 ListResultDto &lt;/li&gt;
&lt;li&gt;2017-06-02: 将文章和解决方案修改为支持 .net core&lt;/li&gt;
&lt;li&gt;2016-08-08: 添加 第二篇 的链接&lt;/li&gt;
&lt;li&gt;2016-08-01: 第一次发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该文章和其中的任何源代码和文件的版权均归  &lt;a href=&quot;http://www.codeproject.com/info/cpol10.aspx&quot; rel=&quot;license&quot;&gt;The Code Project Open License (CPOL)&lt;/a&gt; 所有&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 05:40:00 +0000</pubDate>
<dc:creator>鸭补一生如梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yabu007/p/8067694.html</dc:identifier>
</item>
<item>
<title>UI性能优化 - 赵青青</title>
<link>http://www.cnblogs.com/zhaoqingqing/p/7975705.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaoqingqing/p/7975705.html</guid>
<description>&lt;h3&gt;我的思路&lt;/h3&gt;
&lt;p&gt;在移动设备上打开UI界面卡顿，等待时间长，页面白块，等等体验是很不好的。本文记录我在工作中解决UI卡顿的方法。&lt;/p&gt;
&lt;p&gt;我主要从以下方面入手&lt;/p&gt;
&lt;p&gt;资源量&lt;/p&gt;
&lt;p&gt;界面打开做的操作&lt;/p&gt;
&lt;p&gt;界面自身的逻辑&lt;/p&gt;
&lt;p&gt;IO的读写（包括收到的网络协议数据量）&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;我的环境&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;项目类型：大型3DMMOARPG&lt;/p&gt;
&lt;p&gt;Unity3D 5.3.7 基于UGUI，UI基础框架使用KSFramework：&lt;a title=&quot;https://github.com/mr-kelly/KSFramework&quot; href=&quot;https://github.com/mr-kelly/KSFramework&quot;&gt;https://github.com/mr-kelly/KSFramework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;客户端配置文件通过sqlite存储（在Lua中读取数据）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试机型&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;OPPOA57 中端机器 ，3G内存&lt;/p&gt;
&lt;p&gt;详细参数：&lt;a title=&quot;http://detail.zol.com.cn/1161/1160598/param.shtml&quot; href=&quot;http://detail.zol.com.cn/1161/1160598/param.shtml&quot;&gt;http://detail.zol.com.cn/1161/1160598/param.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化目标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开界面的瞬间，就能得到反馈，等待时间在0.2s之内。&lt;/p&gt;
&lt;p&gt;页面的内容可以是逐步显示，但不希望出现卡住的现象。&lt;/p&gt;

&lt;h3&gt;UI的Assetbundle大小&lt;/h3&gt;
&lt;p&gt;建议一个UI界面的的Assetbundle文件大小在1mb以内，且依赖关系不要超过三个，在打包出来的*.manifest文件中（Dependencies节点）可以看到资源依赖关系。&lt;/p&gt;
&lt;p&gt;如果一个界面的图片量过多，美术可以考虑在设计上精简图集，重复利用，九宫格，抽离大的背景图等方法，减少资源量。&lt;/p&gt;

&lt;p&gt;建议：一个界面使用一个图集，减少图集间的交叉引用。&lt;/p&gt;
&lt;h3&gt;UI图占用的内存&lt;/h3&gt;
&lt;p&gt;查看单个界面的资源占用内存大小&lt;/p&gt;
&lt;p&gt;1、点击 &lt;strong&gt;Window&lt;/strong&gt; - 点击&lt;strong&gt;Profiler&lt;/strong&gt; ，打开Profiler ，切换到 &lt;strong&gt;Memory&lt;/strong&gt;页签&lt;/p&gt;
&lt;p&gt;2、点击 &lt;strong&gt;Detaild&lt;/strong&gt; - 点击 &lt;strong&gt;Take Sample&lt;/strong&gt; ，选择 &lt;strong&gt;Assets&lt;/strong&gt;/&lt;strong&gt;Texture2D&lt;/strong&gt;，查看每张图片占用的内存&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/363476/201712/363476-20171205102050456-425232232.png&quot;&gt;&lt;img width=&quot;888&quot; height=&quot;629&quot; title=&quot;{9NQ4_EJ3E9H}GQ495F`$JF&quot; alt=&quot;{9NQ4_EJ3E9H}GQ495F`$JF&quot; src=&quot;https://images2017.cnblogs.com/blog/363476/201712/363476-20171205102050753-1792841639.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;建议：单个界面图集的内存占用控制在1~2M之内，其它特殊情况，可以考虑做成大图加载&lt;/p&gt;

&lt;h3&gt;整个UI界面的Gameobject数量&lt;/h3&gt;
&lt;p&gt;如果UI界面中Gameobject的数量过多，在加载Assetbundle实例化Gameobject时，耗时会更长。&lt;/p&gt;
&lt;p&gt;我的例子：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/363476/201712/363476-20171208220309249-1944702235.png&quot;&gt;&lt;img width=&quot;752&quot; height=&quot;372&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2017.cnblogs.com/blog/363476/201712/363476-20171208220309640-811503578.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（1个道具Prefab的Gameobject数量在10个左右）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计UI界面的gameobject数量脚本&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[MenuItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UI/统计当前场景的Gameobject数量&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MenuGameobjectCount()
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj = GameObject.FindObjectOfType&amp;lt;UIWindowAsset&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (obj)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; graphics = obj.GetComponentsInChildren&amp;lt;Transform&amp;gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            Debug.LogFormat(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前场景的Gameobject数量:{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,graphics.Length);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建议：单个界面的gameobject数量控制在100以内&lt;/p&gt;

&lt;h3&gt;打开界面做的操作&lt;/h3&gt;
&lt;p&gt;减少在UI打开瞬间做的操作，耗时的计算或者操作可以延时处理。&lt;/p&gt;

&lt;h3&gt;每帧生成Gameobject&lt;/h3&gt;
&lt;p&gt;如果列表的数量过多，建议每帧或者间隔多少帧进行Instantiate操作。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; UIRewardMonthly:Update()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; self.index &lt;span&gt;and&lt;/span&gt;  self.index &amp;lt;= self.maxCell &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;local&lt;/span&gt; item =&lt;span&gt; GameObject.Instantiate(self.itemCell.gameObject)
        item.transform:SetParent(self.scrollContent.transform, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
        self:DoRenderItem(self.index, item.transform, self.uiCache[self.index])
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; self.index == self.maxCell &lt;span&gt;then&lt;/span&gt;
            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;print(&quot;全部格子生成完成&quot;)&lt;/span&gt;
        &lt;span&gt;end&lt;/span&gt;&lt;span&gt;
        self.index &lt;/span&gt;= self.index + &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;IO的读取&lt;/h3&gt;
&lt;p&gt;在移动端的IO操作是很耗时的，比如读写配置文件。&lt;/p&gt;
&lt;p&gt;解析网络数据也是一种IO的操作，如果网络数据量大，解析也是较耗时的。&lt;/p&gt;
&lt;p&gt;建议：&lt;/p&gt;
&lt;p&gt;1、尽量减少在打开界面时做IO的操作。&lt;/p&gt;
&lt;p&gt;2、对需要的数据提前处理，数量很多的网络数据可以进行分页。&lt;/p&gt;
&lt;p&gt;3、对于本地数据可以进行缓存，避免在循环中进行查询或文件读写。&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 04:57:00 +0000</pubDate>
<dc:creator>赵青青</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaoqingqing/p/7975705.html</dc:identifier>
</item>
<item>
<title>年终盘点 | 最全面的2017物联网安全事件盘点 - 顶象技术</title>
<link>http://www.cnblogs.com/dxjx/p/8117276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dxjx/p/8117276.html</guid>
<description>&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;9uc5a-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9uc5a-0-0&quot;&gt;2017年随着物联网的高速发展，人们生活中与物联网设备的接触越来越频繁，人与物联网之间的联系更加紧密。IPv6通讯协议、5G通信的推广，网络传输和响应的速度越来越快，万物互联时代即将来临。根据研究机构IDC的报告，2020年全球物联网市场规模将达到17000亿美元，物联网设备将有200亿台。在2025年，这一数字更将达到754亿台。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;24fu9-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;24fu9-0-0&quot;&gt;同时，由于物联网设备的防护难度或对安全性的忽视，使得物联网设备异常脆弱，很容易被攻击者发现漏洞并利用。据统计，物联网设备在全球范围内已暴露7100多万台，包含路由器、摄像头、防火墙、打印机、VPN等设备类型，物联网设备的安全需求日益凸显。小编将为大家盘点2017年发生的十二大物联网安全事件。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/329/32937479-b38c-4e4d-85ba-d455d5ae01ff.png&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;98mkk-0-0&quot;&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;98mkk-0-0&quot;&gt;一、智能玩具泄露200万父母与儿童语音信息&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;5ocgl-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5ocgl-0-0&quot;&gt;今年3月，Spiral Toys旗下的CloudPets系列动物填充玩具遭遇数据泄露，敏感客户数据库受到恶意入侵。此次事故泄露信息包括玩具录音、MongoDB泄露的数据、220万账户语音信息、数据库勒索信息等。这些数据被保存在一套未经密码保护的公开数据库当中。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;4gmno-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4gmno-0-0&quot;&gt;Spiral Toys公司将客户数据库保存在可公开访问的位置之外，还利用一款未经任何验证机制保护的Amazon托管服务存储客户的个人资料、儿童姓名及其与父母、亲属及朋友间的关系信息。只需要了解文件的所处位置，任何人都能够轻松获取到该数据。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;9ufcc-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9ufcc-0-0&quot;&gt;2015年11月，香港玩具制造商VTech就曾遭遇入侵，近500万名成年用户的姓名、电子邮箱地址、密码、住址以及超过20万儿童的姓名、性别与生日不慎外泄。就在一个月后，一位研究人员又发现美泰公司生产的联网型芭比娃娃中存在的漏洞可能允许黑客拦截用户的实时对话。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;d3aeb-0-0&quot; readability=&quot;7&quot;&gt;

&lt;p&gt;&lt;span data-offset-key=&quot;d3aeb-0-0&quot;&gt;家长应该提高忧患意识，给小孩买任何可联网智能玩具之前，三思而后行。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/d1d/d1d2df43-651f-4b99-96e0-e287a3f3a839.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;4ucai-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;4ucai-0-0&quot;&gt;二、基带漏洞可攻击数百万部华为手机&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;5l45n-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5l45n-0-0&quot;&gt;今年4月，安全公司Comsecuris的一名安全研究员发现，未公开的基带漏洞MIAMI影响了华为智能手机、笔记本WWAN模块以及loT(物联网)组件。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;dm50p-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dm50p-0-0&quot;&gt;基带是蜂窝调制解调器制造商使用的固件，用于智能手机连接到蜂窝网络，发送和接收数据，并进行语音通话。攻击者可通过基带漏洞监听手机通信，拨打电话，发送短信，或者进行大量隐蔽，不为人知的通信。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;age5-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;age5-0-0&quot;&gt;该漏洞是HiSliconBalong芯片组中的4G LTE调制解调器(俗称猫)引发的。Hisilion科技是华为的一个子公司，同时Balong应用处理器叫做:Kirin。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;6m23b-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6m23b-0-0&quot;&gt;这些有漏洞的固件存在于华为荣耀系列手机中。研究人员无法具体确定有多少设备受到了这个漏洞的影响。他们估计有数千万的华为智能手机可能收到攻击。仅在2016年第三季度销售的3300万元的智能手机中，其中就有50%使用了这个芯片。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/a9d/a9db38e4-6f6f-4b53-b44e-70fb8ebf0fc7.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;6nppq-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;6nppq-0-0&quot;&gt;三、三星Tizen操作系统存在严重安全漏洞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;84j07-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;84j07-0-0&quot;&gt;今年4月，三星Tizen操作系统被发现存在40多个安全漏洞，Tizen操作系统被应用在三星智能电视、智能手表、Z系列手机上，全球有不少用户正在使用。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;82ojc-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;82ojc-0-0&quot;&gt;这些漏洞可能让黑客更容易从远程攻击与控制设备，且三星在过去8个月以来一直没有修复这些三星在产品测试中编码错误所引起的漏洞。安全专家狠批其程序代码早已过时，黑客可以利用这些漏洞自远程完全地控制这些物联网装置。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;ft9oi-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ft9oi-0-0&quot;&gt;值得一提的是三星目前大约有3000万台电视搭载了Tizen系统，而且三星更是计划到今年年底之前有1000万部手机运行该系统，并希望藉此减少对Android系统的依赖，但很显然Tizen现在仍不安全。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/527/5276c771-9756-4e98-ad25-c2f36efce490.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;2ho8k-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;2ho8k-0-0&quot;&gt;四、无人机多次入侵成都双流国际机场&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;frhor-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;frhor-0-0&quot;&gt;今年4月，成都双流连续发生多起无人机(无人飞行器)黑飞事件，导致百余架次航班被迫备降或返航，超过万名旅客受阻滞留机场，经济损失以千万元计，旅客的生命安全和损失更是遭到了巨大的威胁。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;dvr0l-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dvr0l-0-0&quot;&gt;无人机已经进入人们的工作和生活。不仅在国防、救援、勘探等领域发挥着越来越重的作用，更成为物流、拍摄、旅游等商业服务的新模式。一台无人机由通信系统、传感器、动力系统、储能装置、任务载荷系统、控制电路和机体等多个模块组成。与我们平常使用的智能手机、平板电脑一样，在系统、信号、应用上面临各类安全威胁。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;dprba-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dprba-0-0&quot;&gt;在今年11月份的一次安全会议上，阿里巴巴安全研究人员做了远程劫持无人机的演示，一个专业人员无需软件漏洞就能Root（获得管理员权限）无人机。而就在1年前的2016年黑帽安全亚洲峰会上，IBM安全专家也演示了远程遥控两公里内的无人机起飞的案例，攻击者只需要多掌握一点无线电通信的基础知识就能够完成劫持操作。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;faqto-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;faqto-0-0&quot;&gt;针对越来越多的安全威胁，为了保障无人机的运行安全，顶象技术联手迅蚁网络推出国内首个无人机安全解决方案——“无人机全链路防护体系”。在设备端：通过虚机源码保护技术对核心算法、系统源代码进行保护，以防范系统的代码泄露、被破解，保障无人机的系统安全。在通讯端：配置链路保护技术，防范在数据传输中被窃听、篡改、劫持，保障通信指令的可信有效和操控安全。在服务器端：部署云安全防护，保障服务器、网络和各个应用的安全，并提供实施风险决策和智能分析。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/789/7898c106-02da-42eb-9265-68cd2096dba4.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;1g3jf-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;1g3jf-0-0&quot;&gt;五、Avanti Markets自动售货机泄露用户数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;cc7kl-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;cc7kl-0-0&quot;&gt;今年七月，美国自动售货机供应商 Avanti Markets遭遇黑客入侵内网。攻击者在终端支付设备中植入恶意软件，并窃取了用户信用卡账户以及生物特征识别数据等个人信息。该公司的售货机大多分布在各大休息室，售卖饮料、零食等副食品，顾客可以用信用卡支付、指纹扫描支付或现金支付的方式买单。Avanti Markets的用户多达160万。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;e5kb2-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;e5kb2-0-0&quot;&gt;根据某位匿名者提供的消息，Avanti 没有采取任何安全措施保护数据安全，连基本的 P2P 加密都没有做到。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;6e55h-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6e55h-0-0&quot;&gt;事实上，售货终端以及支付终端等IoT设备遭遇入侵在近几年似乎已成为家常便饭。支付卡机器以及POS终端之所以备受黑客欢迎，主要是因为从这里窃取到的数据很容易变现。遗憾的是，POS终端厂商总是生产一批批不安全的产品，而且只在产品上市发布之后才考虑到安全问题。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/d0f/d0fe6349-bbb2-42f0-8359-328807037886.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;d8q5o-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;d8q5o-0-0&quot;&gt;六、17.5 万个安防摄像头被曝漏洞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;6eq3b-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6eq3b-0-0&quot;&gt;今年八月，深圳某公司制造的17.5万个物联网安防摄像头被爆可能遭受黑客攻击，这些安防摄像头可以提供监控和多项安全解决方案，包括网络摄像头、传感器和警报器等。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;b1533-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;b1533-0-0&quot;&gt;安全专家在该公司制造的两个型号的安防摄像头中找到了多个缓冲区溢出漏洞。这些安防摄像头都是通用即插即用（UPnP）设备，它们能自动在路由器防火墙上打开端口接受来自互联网的访问。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;10vl3-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;10vl3-0-0&quot;&gt;安全专家注意到，两款安防摄像头可能会遭受两种不同的网络攻击，一种攻击会影响摄像头的网络服务器服务，另一种则会波及 RSTP（实时串流协议）服务器。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;34iuv-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;34iuv-0-0&quot;&gt;研究人员称这两款安防摄像头的漏洞很容易就会被黑客利用，只需使用默认凭证登陆，任何人都能访问摄像头的转播画面。同时，摄像头存在的缓冲区溢出漏洞还使黑客能对其进行远程控制。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/660/66085826-96e0-4c55-b648-089bfe52cdb7.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;9bemd-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;9bemd-0-0&quot;&gt;七、超1700对台IoT设备Telnet密码列表遭泄露&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;bhtbs-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bhtbs-0-0&quot;&gt;今年八月，安全研究人员 Ankit Anubhav 在 Twitter 上分享了一则消息，声称超 1700 台 IoT 设备的有效 Telnet 密码列表遭泄露，这些密码可以被黑客用来扩大僵尸网络进行 DDoS 攻击的动力来源。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;emmv3-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;emmv3-0-0&quot;&gt;这份列表中包含了33138 个IP地址、设备名称和telnet密码，列表中大部分的用户名密码组合都是”admin:admin”或者”root:root”等。这整份列表中包含143种密码组合，其中60种密码组合都来自于Mirai Telnet扫描器。GDI 研究人员在分析了上述列表后确认它由 8200 个独特 IP 地址组成，大约每 2.174 个 IP 地址是通过远程登录凭证进行访问的。然而，该列表中的 61％ IP 地址位于中国。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;2fe6d-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;2fe6d-0-0&quot;&gt;该列表最初于今年 6 月在 Pastebin 平台出现，早期名单的泄露者与此前发布有效登录凭据转储、散发僵尸网络源代码的黑客是同一人。当天正值七夕，简直就是国内黑客们的七夕礼物。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/86f/86f8cc46-f325-42fc-825b-8be90f66ae72.png&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;1q7d7-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;1q7d7-0-0&quot;&gt;八、蓝牙协议爆严重安全漏洞，影响53亿设备&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;fncl1-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fncl1-0-0&quot;&gt;物联网安全研究公司Armis在蓝牙协议中发现了8个零日漏洞，这些漏洞将影响超过53亿设备——从Android、iOS、Windows以及Linux系统设备到使用短距离无线通信技术的物联网设备，利用这些蓝牙协议漏洞，Armis构建了一组攻击向量(attack vector)“BlueBorne”，演示中攻击者完全接管支持蓝牙的设备，传播恶意软件，甚至建立一个“中间人”（MITM）连接。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;ah1r9-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ah1r9-0-0&quot;&gt;研究人员表示，想要成功实施攻击，必备的因素是：受害者设备中的蓝牙处于“开启”状态，以及很明显的一点，要尽可能地靠近攻击者的设备。此外，需要注意的是，成功的漏洞利用甚至不需要将脆弱设备与攻击者的设备进行配对。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;4m7od-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4m7od-0-0&quot;&gt;BlueBorne可以服务于任何恶意目的，例如网络间谍、数据窃取、勒索攻击，甚至利用物联网设备创建大型僵尸网络（如Mirai僵尸网络），或是利用移动设备创建僵尸网络（如最近的WireX僵尸网络）。BlueBorne攻击向量可以穿透安全的‘气隙’网络（将电脑与互联网以及任何连接到互联网上的电脑进行隔离），这一点是其他大多数攻击向量所不具备的能力。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/a58/a588fc07-d530-4bbd-944e-8dffc0047201.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;477t5-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;477t5-0-0&quot;&gt;九、WPA2爆严重安全漏洞，黑客可任意读取信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;5oufp-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5oufp-0-0&quot;&gt;今年10月，有安全专家表示WiFi的WPA2（WPA2是一种保护无线网络安全的加密协议）存在重大漏洞，导致黑客可任意读取通过WAP2保护的任何无线网络的所有信息。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;f01cv-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;f01cv-0-0&quot;&gt;据发现该漏洞的比利时鲁汶大学计算机安全学者马蒂·凡赫尔夫（Mathy Vanhoef）称：“我们发现了WPA2的严重漏洞，这是一种如今使用最广泛的WiFi网络保护协议。黑客可以使用这种新颖的攻击技术来读取以前假定为安全加密的信息，如信用卡号、密码、聊天信息、电子邮件、照片等等。”&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;847ca-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;847ca-0-0&quot;&gt;据悉，该漏洞名叫“KRACK”，存在于所有应用WPA2协议的产品或服务中。其中，Android和Linux最为脆弱，Windows、OpenBSD、iOS、macOS、联发科技、Linksys等无线产品都受影响。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;aprv-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;aprv-0-0&quot;&gt;“KRACK”漏洞利用有一定局限性，比如，需要在正常WiFi信号辐射到范围内。另外，该漏洞可以让中间人窃取无线通信中的数据，而不是直接破解WiFi的密码。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/686/6863d95b-4f37-417d-ab85-7206f4491a3a.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;afpms-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;afpms-0-0&quot;&gt;十、智能家居设备存在漏洞，吸尘器秒变监视器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;9up7r-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9up7r-0-0&quot;&gt;今年11月，Check Point研究人员表示LG智能家居设备存在漏洞，黑客可以利用该漏洞完全控制一个用户账户，然后远程劫持LG SmartThinQ家用电器，包括冰箱，干衣机，洗碗机，微波炉以及吸尘机器人。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;bs1pj-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bs1pj-0-0&quot;&gt;LG智能家居的移动端应用程序允许用户远程控制其设备（包括打开和关闭它们）。例如，用户可以在回家前启动烤箱和空调，在进超市前检查智能冰箱中还有多少库存，或者检查洗衣机何时完成一个洗衣循环。当用户离开时，无论设备是开启的还是关闭的，网络犯罪分子都可以得到一个完美的入侵机会，并将它们转换为实时监控设备。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;f8lrj-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;f8lrj-0-0&quot;&gt;研究人员演示了黑客通过控制安装在设备内的集成摄像头将LG Hom-Bot变成一个间谍。他们分析了Hom-Bot并找到了通用异步收发传输器（UART）的连接，当连接被找到时，研究人员就可以操纵它来访问文件系统，一旦主进程被调试，他们就可以找到启动Hom-Bot与SmartThinQ移动端应用程序之间用于通信的代码了。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;2imql-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;2imql-0-0&quot;&gt;迄今为止LG已售出超过100万台Hom-Bot吸尘器，但并非所有型号都具有HomeGuard安全监控功能。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/e17/e1714dfd-279e-4028-928a-da42c7a7441c.png&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;26rus-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;26rus-0-0&quot;&gt;十一、美国交通指示牌被攻击，播放反特朗普语言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;4a2ub-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4a2ub-0-0&quot;&gt;今年12月，位于达拉斯北中央高速公路附近的一个电子交通指示牌遭到了不明黑客的攻击。标志牌的显示内容遭到了篡改，被用于显示针对美国现任总统唐纳德·特朗普（Donald Trump）以及其支持者的侮辱性言语。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;1hbi8-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1hbi8-0-0&quot;&gt;事件发生在周五晚上，这些信息被持续不间断地循环播放，并一直持续到周六早上。如此一块指示牌不仅震惊了人们，还造成了交通拥堵，因为大多数司机决定停下来“拍照留念”。值得注意的是，这并不是美国首次遭遇电子交通指示牌被黑客攻击事件。在2015年12月，特朗普的一位支持者在位于加利福尼亚州科罗纳市的一个高速公路牌上留下了“为唐纳德·特朗普投票（Vote Donald Trump）”的消息。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;ltnu-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ltnu-0-0&quot;&gt;安全专家表示，攻击电子交通指示牌是很简单的。因为，它们的控制后台总是采用默认密码，并提供有关如何打开控制台电源、关闭标志显示、关闭快速消息以及创建自定义消息的说明。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/b94/b947e3c5-481f-4dfa-9cb3-cd06a98780a9.jpg&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;bs4p6-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;bs4p6-0-0&quot;&gt;十二、1000余台利盟（Lexmark）打印机在线暴露，涉及众多国家政府办公室&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;47mk3-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;47mk3-0-0&quot;&gt;NewSky Security的安全研究人员最近发现超过1000台利盟（Lexmark）打印机因人为配置错误而在线暴露，任何能够连接到互联网的人都可以轻松地对其进行访问。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;de0f5-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;de0f5-0-0&quot;&gt;研究人员确定的易受攻击打印机具体数量为1123台，它们均没有设置密码保护。这意味着，只要潜在攻击者能够找到这些打印机，就可以执行多种不同类型的活动。比如，添加后门、劫持打印作业、使打印机脱机，甚至可以发送大量打印垃圾内容的作业指令造成打印机的物理损坏。&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;dbbkb-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dbbkb-0-0&quot;&gt;这些打印机来自全球多个国家，涉及企业、大学，甚至还包括某些国家政府办公室。NewSky Security的研究人员在使用Shodan引擎进行搜索时，就发现了一台在线暴露的打印机似乎属于美国拉斐特市政府办公室。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;rdw-image-alignment rdw-image-center&quot;&gt;&lt;span class=&quot;rdw-image-imagewrapper&quot;&gt;&lt;img src=&quot;https://cdn.dingxiang-inc.com/images/0a2/0a27f4ad-c26f-46c5-a75a-257a48d64d07.png&quot; alt=&quot;undefined&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;6hftb-0-0&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;6hftb-0-0&quot;&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div data-block=&quot;true&quot; data-editor=&quot;eiqh6&quot; data-offset-key=&quot;ctpje-0-0&quot; readability=&quot;9.3461538461538&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ctpje-0-0&quot;&gt;上述曝光的物联网安全事件，仅仅是呈现在大家眼前的冰山一角，隐藏在背后的物联网安全威胁层出不穷，2018的安全形势将会更加严峻。随着物联网逐渐走入千家万户的生活当中，物联网设备将成为黑客们新的战场，而且黑客攻击日益组织化、产业化，攻击对象的广度及深度，将有大幅度的变化。&lt;/span&gt;&lt;/p&gt;



&lt;/div&gt;
</description>
<pubDate>Tue, 26 Dec 2017 03:49:00 +0000</pubDate>
<dc:creator>顶象技术</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dxjx/p/8117276.html</dc:identifier>
</item>
<item>
<title>Druid数据库连接池源码分析 - 大诚挚</title>
<link>http://www.cnblogs.com/cz123/p/8117146.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cz123/p/8117146.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　上一篇文章重点介绍了一下Java的Future模式，最后意淫了一个数据库连接池的场景。本想通过Future模式来防止，当多个线程同时获取数据库连接时各自都生成一个，造成资源浪费。但是忽略了一个根本的功能，就是多个线程同时调用get方法时，得到的是同一个数据库连接的多个引用，这会导致严重的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以，我抽空看了看呼声很高的Druid的数据库连接池实现，当然关注点主要是多线程方面的处理。我觉得，带着问题去看源码是一种很好的思考方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;Druid不仅仅是一个数据库连接池，还有很多标签，比如统计监控、过滤器、SQL解析等。&lt;/span&gt;&lt;span&gt;既然要分析连接池，那先看看&lt;/span&gt;&lt;span&gt;DruidDataSource类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;getConnection方法的实现：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DruidPooledConnection getConnection() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getConnection(maxWait);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DruidPooledConnection getConnection(&lt;span&gt;long&lt;/span&gt; maxWaitMillis) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        init();

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (filters.size() &amp;gt; 0&lt;span&gt;) {
            FilterChainImpl filterChain &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FilterChainImpl(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; filterChain.dataSource_connect(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, maxWaitMillis);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getConnectionDirect(maxWaitMillis);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;返回的是一个&lt;/span&gt;&lt;span&gt;DruidPooledConnection，这个类后面再说；另外这里传入了一个long类型maxWait，应该是用来做超时处理的；init方法在getConnection方法里面调用，这也是一种很好的设计；里面的过滤器链的处理就不多说了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; init() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (inited) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; ReentrantLock lock = &lt;span&gt;this&lt;/span&gt;.lock;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用lock而不是synchronized&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            lock.lockInterruptibly();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SQLException(&quot;interrupt&quot;&lt;span&gt;, e);
        }

        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; init = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (inited) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            init &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

            connections &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; DruidConnectionHolder[maxActive];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组&lt;/span&gt;

            &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; init connections&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0, size = getInitialSize(); i &amp;lt; size; ++&lt;span&gt;i) {
                    Connection conn &lt;/span&gt;= createPhysicalConnection();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生成真正的数据库连接&lt;/span&gt;
                    DruidConnectionHolder holder = &lt;span&gt;new&lt;/span&gt; DruidConnectionHolder(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, conn);
                    connections[poolingCount] &lt;/span&gt;=&lt;span&gt; holder;
                    incrementPoolingCount();&lt;/span&gt;
&lt;span&gt;                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (poolingCount &amp;gt; 0&lt;span&gt;) {
                    poolingPeak &lt;/span&gt;=&lt;span&gt; poolingCount;
                    poolingPeakTime &lt;/span&gt;=&lt;span&gt; System.currentTimeMillis();
                }
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException ex) {
                LOG.error(&lt;/span&gt;&quot;init datasource error, url: &quot; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUrl(), ex);
                connectError &lt;/span&gt;=&lt;span&gt; ex;
            }

            createAndLogThread();
            createAndStartCreatorThread();
            createAndStartDestroyThread();

            initedLatch.await();

            initedTime &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
            registerMbean();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (connectError != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; poolingCount == 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; connectError;
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
            LOG.error(&lt;/span&gt;&quot;dataSource init error&quot;&lt;span&gt;, e);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLException(e.getMessage(), e);
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            inited &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            lock.unlock();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 释放锁&lt;/span&gt;

            &lt;span&gt;if&lt;/span&gt; (init &amp;amp;&amp;amp;&lt;span&gt; LOG.isInfoEnabled()) {
                LOG.info(&lt;/span&gt;&quot;{dataSource-&quot; + &lt;span&gt;this&lt;/span&gt;.getID() + &quot;} inited&quot;&lt;span&gt;);
            }
        }
    }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　我这里做了删减，加了一些简单的注释。通过这个方法，正好复习一下之前写的那些知识点，如果感兴趣，可以看看我之前写的文章。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里使用了lock，并且保证只会被执行一次。根据初始容量，先生成了一批数据库连接，用一个数组connections存放这些连接的引用，而且专门定义了一个变量&lt;/span&gt;&lt;span&gt;poolingCount&lt;/span&gt;&lt;span&gt;来保存这些连接的总数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　看到initedLatch.await有一种似曾相识的感觉&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch             initedLatch             = &lt;span&gt;new&lt;/span&gt; CountDownLatch(2);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;span&gt;这里调用了await方法，那countDown方法在哪些线程里面被调用呢&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; createAndStartCreatorThread() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (createScheduler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            String threadName &lt;/span&gt;= &quot;Druid-ConnectionPool-Create-&quot; + System.identityHashCode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            createConnectionThread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CreateConnectionThread(threadName);
            createConnectionThread.start();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        initedLatch.countDown();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这里先判断createScheduler这个调度线程池是否被设置，如果没有设置，直接countDown；否则，就开启一个创建数据库连接的线程，当然这个线程的run方法还是会调用countDown方法。但是这里我有一个疑问：开启创建连接的线程，为什么一定要有一个调度线程池呢？？？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　难道是当数据库连接创建失败的时候，需要过了指定时间后，再重试？这么理解好像有点牵强，希望高人来评论。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　还有就是，当开启destroy线程的时候也会调用countDown方法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　接着在看getConnection方法，一直调用到&lt;/span&gt;&lt;span&gt;getConnectionInternal方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        DruidConnectionHolder holder;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            lock.lockInterruptibly();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
            connectErrorCount.incrementAndGet();
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SQLException(&quot;interrupt&quot;&lt;span&gt;, e);
        }

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (maxWait &amp;gt; 0&lt;span&gt;) {
                holder &lt;/span&gt;=&lt;span&gt; pollLast(nanos);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                holder &lt;/span&gt;=&lt;span&gt; takeLast();
            }

        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
            connectErrorCount.incrementAndGet();
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SQLException(e.getMessage(), e);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
            connectErrorCount.incrementAndGet();
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e;
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            lock.unlock();
        }

        holder.incrementUseCount();

        DruidPooledConnection poolalbeConnection &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DruidPooledConnection(holder);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; poolalbeConnection;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;我这里还是做了删减。大体逻辑是：先从连接池中取出&lt;/span&gt;&lt;span&gt;DruidConnectionHolder，然后再封装成&lt;/span&gt;&lt;span&gt;DruidPooledConnection对象返回。再看看取holder的方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    DruidConnectionHolder takeLast() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException, SQLException {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (poolingCount == 0&lt;span&gt;) {
                emptySignal(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; send signal to CreateThread create connection&lt;/span&gt;
                notEmptyWaitThreadCount++&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (notEmptyWaitThreadCount &amp;gt;&lt;span&gt; notEmptyWaitThreadPeak) {
                    notEmptyWaitThreadPeak &lt;/span&gt;=&lt;span&gt; notEmptyWaitThreadCount;
                }
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    notEmpty.await(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; signal by recycle or creator&lt;/span&gt;
                } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                    notEmptyWaitThreadCount&lt;/span&gt;--&lt;span&gt;;
                }
                notEmptyWaitCount&lt;/span&gt;++&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;enable) {
                    connectErrorCount.incrementAndGet();
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSourceDisableException();
                }
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException ie) {
            notEmpty.signal(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; propagate to non-interrupted thread&lt;/span&gt;
            notEmptySignalCount++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ie;
        }

        decrementPoolingCount();
        DruidConnectionHolder last &lt;/span&gt;=&lt;span&gt; connections[poolingCount];
        connections[poolingCount] &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; last;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;这个方法非常好的诠释了Lock-Condition的使用场景，几行绿色的注释解释的很明白了，如果对empty和notEmpty看不太懂，可以去看看我之前写的那篇文章。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个方法的逻辑：先判断池中的连接数，如果到0了，那么本线程就得被挂起，同时释放empty信号，并且等待notEmpty的信号。如果还有连接，就取出数组的最后一个，同时更改poolingCount。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　到这里，基本理解了Druid数据库连接池获取连接的实现流程。但是，如果不去看看里面的数据结构，还是会一头雾水。我们就看看几个基本的类，以及它们之间的持有关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、DruidDataSource持有一个DruidConnectionHolder的数组，保存所有的数据库连接&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; DruidConnectionHolder[] connections;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注意这里的volatile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;2、DruidConnectionHolder持有数据库连接，还有所在的DataSource等&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; DruidAbstractDataSource       dataSource;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Connection                    conn;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;3、DruidPooledConnection持有DruidConnectionHolder，所在线程等&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; DruidConnectionHolder holder;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Thread                     ownerThread;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/946965/201712/946965-20171226110107150-594374520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于这种设计，我很好奇为什么要添加一层holder做封装，数组里直接存放Connection好像也未尝不可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其实，这么设计是有道理的。比如说，一个Connection对象可以产生多个Statement对象，当我们想同时保存Connection和对应的多个Statement的时候，就比较纠结。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　再看看DruidConnectionHolder的成员变量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; PreparedStatementPool               statementPool;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; List&amp;lt;Statement&amp;gt;               statementTrace           = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Statement&amp;gt;(2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样的话，既可以做缓存，也可以做统计。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　最终我们对Connection的操作都是通过DruidPooledConnection来实现，比如commit、rollback等，它们大都是通过实际的数据库连接完成工作。而我比较关心的是close方法的实现，close方法最核心的逻辑是recycle方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; recycle() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.disable) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        DruidConnectionHolder holder &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.holder;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (holder == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dupCloseLogEnable) {
                LOG.error(&lt;/span&gt;&quot;dup close&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.abandoned) {
            DruidAbstractDataSource dataSource &lt;/span&gt;=&lt;span&gt; holder.getDataSource();
            dataSource.recycle(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.holder = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        conn &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        transactionInfo &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        closed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;通过最后几行代码，能够看出，并没有调用实际数据库连接的close方法，而只是断开了之前那张图里面的4号引用。用这种方式，来实现数据库连接的复用。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 26 Dec 2017 03:28:00 +0000</pubDate>
<dc:creator>大诚挚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cz123/p/8117146.html</dc:identifier>
</item>
<item>
<title>Spring Boot实战之逐行释义HelloWorld - liuxiaopeng</title>
<link>http://www.cnblogs.com/paddix/p/8116866.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/paddix/p/8116866.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 研究Spring boot也有一小段时间了，最近会将研究东西整理一下给大家分享，大概会有10~20篇左右的博客，整个系列会以一个简单的博客系统作为基础，因为光讲理论很多东西不是特别容易理解，并且如果每次通过一个简单的小程序也无法系统的把握好一些知识点，所以就以一个简单的系统作为基础来讲，看看通过spring boot如何实现一个完整系统。本系列除了Spring boot基本的知识点之外，还会涉及到Spring boot与数据库、缓存（redis）、消息队列等的结合以及多实例部署等方面的内容。有兴趣的同学可以关注一下。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Spring boot 简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　Spring boot 从名称上就可以看出，它是基于Spring的一个框架，所以不熟悉Spring的同学还是得先去学习一下Spring。其次，Spring boot帮我们集成很多常用的功能，使得整个配置更加简单。用过Spring的同学应该知道，虽然Spring一直在努力的减少配置的复杂性，但是，配置一个完全可用的（web）环境还是挺麻烦的，比如需要配置日志、数据库、缓存等，然后再配置tomcat，最后将程序发布到tomcat目录下。而Spring boot则帮我们大大简化了这个过程，它提供了很多starter，只要引入对应的jar包就可以了。例如，我们需要集成tomcat，只需要引入tomcat的starter即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　备注：本文的例子都是基于Maven来实现的，所以如果不熟悉Maven，可以先去看下怎么用，如果熟悉gradle的话，也可以根据情况对配置做相应调整。&lt;/p&gt;
&lt;p&gt;　　我们可以从官方文档上查看Spring boot提供的starter：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820406/201712/820406-20171226012517087-1120219678.jpg&quot; alt=&quot;&quot; width=&quot;801&quot; height=&quot;526&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里我只截取了一小部分，可以看到Spring boot支持缓存、批处理、mq、es等等，完整的列表参考官方文档。其他就不多解释了，后续通过示例来讲解整个Spring boot功能，我们先看Spring boot来如何实现一个web版的Hello World！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、Hello World程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　 &lt;span&gt;3.1 Hello World 源码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　第一步：导入jar包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.5.8.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第二步：编写控制器类　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package com.pandy.blog;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.HashMap;
import java.util.Map;

@Controller
public class HelloWorld {
    @RequestMapping(&quot;/hello&quot;)
    @ResponseBody
    public Map&amp;lt;String, Object&amp;gt; hello() {
        Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put(&quot;hello&quot;, &quot;world&quot;);
        return map;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第三步：编写启动类（入库）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package com.pandy.blog;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　运行该类的main方法，然后访问http://localhost:8080/hello，就可以看到如下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820406/201712/820406-20171226013200353-1193813134.png&quot; alt=&quot;&quot; width=&quot;456&quot; height=&quot;91&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　是不是感觉很开心？一行配置都没有，就可以直接运行一个Web应用。不过开心完以后有没有想过这是怎么实现的呢？接下来我们一行一行解析上面的代码，虽然行数不多，但是还是有很多东西值得我们去学习和理解的。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;3.2 pom文件分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们先从pom文件入手，pom文件里面只引入了两个依赖项。第一个是spring-boot-starter-parent，熟悉Maven的朋友应该知道，Maven也可以跟类一样，从父pom文件中继承配置。我们可以看下spring-boot-starter-parent的pom文件，由于篇幅问题，这里面只看两部分，其他东西比较容易理解，大家可以自己读一下。第一个部分是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820406/201712/820406-20171225191125181-480834980.jpg&quot; alt=&quot;&quot; width=&quot;670&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　该文件又继承了另一个pom文件，即spring-boot-dependencies，这个文件其实就是包含了一大堆的jar，其作用是统一管理spring boot所依赖的jar包的版本，所以之后大家可以看到，各个组件里面引入jar的时候就不再需要再指定版本号了。另一个地方需要说明一下是配置文件的管理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820406/201712/820406-20171225191742603-964135691.jpg&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　大家可以看到，默认情况下会将/src/main/resources目录下的文件作为资源文件加入到classpath下，另外，这个地方的仅仅对application*.yml，application*.yaml，application*.properties三种文件进行过滤。这个过滤是指什么呢？大家配置过spring mvc的人应该都知道，配置数据库时，我们通常将数据库的信息配置在一个properties文件中，然后在spring的配置文件中通过&amp;lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot; /&amp;gt; 的形式引入，这个filter的作用就是在编译的时候将配置文件中配置的名值对替换到spring的配置文件中${xxx}字符，但这个功能不是必要的，即使不进行替换，Spring也能在运行时读取到配置项。&lt;/p&gt;
&lt;p&gt;　　总结一下：spring-boot-starter-parent的作用：：&lt;/p&gt;
&lt;p&gt;　　1）jar包的版本管理。&lt;/p&gt;
&lt;p&gt;　　2）配置文件的过滤。&lt;/p&gt;
&lt;p&gt;　　3）常用插件管理。&lt;/p&gt;
&lt;p&gt;　　其实从什么的分析可以看出，spring-boot-starter-parent最核心的功能是管理了Spring boot所依赖的所有jar包。不过通parent的方式有一个很明显的问题，很多公司自己有自己的parent文件，而maven是没办法配置多个parent的。如果不使用spring-boot-starter-parent，那应该怎么做？？实际上Spring boot提供了另一种方式来解决这个问题，就是在自己的pom文件中加入spring boot的依赖的管理：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependencyManagement&amp;gt;
     &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其实从上面的分析可以看到，这个也是spring-boot-starter-parent 的pom文件的parent，而这个pom文件里面主要就是管理了一大堆的jar包版本。所以导入这个后，就不需要自己再去做版本管理，各个starter会自己根据需要导入对应的jar，但版本号由spring-boot-dependencies统一管理。但是这样的话，spring-boot-starter-parent中的插件就无法使用，并且默认配置文件的过滤功能也没有了。不过这没什么影响，一方面这些功能不是必须的，另一方面如果需要，自己添加也是件很容易的事情。　　&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;3.3 HelloWorld类解析：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们再看下HelloWorld这个类，用过Spring mvc应该知道，其实这个类跟Spring boot没半毛钱关系，业务代码更是没任何跟spring相关的东西，这也是spring一直奉行的一个原则，侵入性极小，这也是Spring成功的一个主要原因。这个类里面跟spring相关的是三个注解，即@Controller，@RequestMapping，@ResponseBody，但是这三个注解也都是Spring mvc提供的。跟Spring boot没有太多联系，在这我就不细讲了，如果不是很清楚，可以去看下Spring MVC的内容，三个注解的基本作用如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Controller：标识为一个控制器，spring会自动实例化该类。&lt;/li&gt;
&lt;li&gt;RequestMapping：url映射。&lt;/li&gt;
&lt;li&gt;ResponseBody：将返回结果自动转换为json串。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;3.4 Application类解析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　最后我们看下Application这个类，你会发现这个类的东西更少，总共就一行有用的代码，即SpringApplication.run(Application.class, args);这个方法的作用是加载Application这个类，那Application这个类有什么特别之处吗？可以看一下，其实这个类的唯一特殊的地方是一个注解@SpringBootApplication，所以Spring boot的运行肯定跟这个注解有着诸多的联系，我们可以看下这个注解的源码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(excludeFilters = {
                @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
                @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
public @interface SpringBootApplication {
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　该注解的主要方法就不说了，大家看下就知道，主要是为上面这些注解提供别名。该注解上前四个注解（@Target(ElementType.TYPE)，@Retention(RetentionPolicy.RUNTIME)，@Documented，@Inherited）大家应该都知道，不熟悉的朋友自己去看下JDK如何实现自定义的注解。我们详细解释一下后面三个注解：@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan。&lt;/p&gt;
&lt;p&gt;　　先看一下SpringBootConfiguration，这个注解比较简单，源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Configuration
public @interface SpringBootConfiguration {
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个注解仅仅是继承了@Configuration，大家应该知道，Spring提供三种方式的配置：（1）xml文件配置（2）annotation配置（3）Java 类配置。而@Configuration就是用于标识一个类为配置类的注解。Spring 4以后比较推崇通过Java类的方式来进行配置，所以Spring boot也倾向于这种方配置式。并且从源码可以看出，SpringBootConfiguration的作用就是标识类为配置类。&lt;/p&gt;
&lt;p&gt;　　接下来我们看一下@EnableAutoConfiguration注解，这个注解的源码有点复杂，在这不做细讲，后面的文章再详细解析期实现方式。这里说一下该注解的作用，它的主要功能是实现自动配置，什么叫做自动配置？就是Spring boot会根据你引入的jar包做一些自动的配置，例如，在classpath有HSQLDB的jar，spring boot就会自动给你配置一个内存数据库。在这个例子里面我们也可以看到，因为我们引入了Spring-mvc、tomcat等相关的jar，spring boot就会猜测你是一个web工程，然后就会自动做一些spring mvc的配置，比如对静态资源的支持、将返回结果自动转为json格式数据的支持等。这些都是自动配置的结果。对Spring Enable*注解熟悉的同学应该能够更容易理解这个注解，因为Spring中有很多类似的注解。&lt;/p&gt;
&lt;p&gt;　　最后我们再看下@ComponentScan，这个注解不是Spring boot提供的，而是Spring提供的，Spring扫描的包或类，即哪些包和类会自动纳入Spring IoC容器的管理，IoC根据配置对这些类进行实例化。&lt;/p&gt;
&lt;p&gt; 　　现在我们再总结一下SpringBootConfiguration这个注解的作用：&lt;/p&gt;
&lt;p&gt;　　1）标志该类为一个配置类。&lt;br/&gt;　　2）指定扫描的包，便于Spring IoC容器对其进行实例和生命周期的管理。&lt;br/&gt;　　3）自动配置，通过引入的jar包，猜测用户的意图进行自动化配置。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　本文详细分析了Spring boot实现的一个web版的Hello World，通过这个例子，我们了解了Spring boot的基本操作，并通过对每行的代码的分析，对Spring boot的原理有了一个大致的了解。总体来讲，Spring boot 统一管理了jar包，然后会根据我们选择的starter来进行自动化配置，通过这种方式来解决复杂的依赖管理，精简配置，从而使得开发者能够更加专注于自己的业务，而不需要做那些很复杂的配置工作。同时，Spring boot这种快速、轻量级的服务也非常适合微服务架构，这个后续有机会再跟大家分享，欢迎继续关注。&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 02:47:00 +0000</pubDate>
<dc:creator>liuxiaopeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/paddix/p/8116866.html</dc:identifier>
</item>
<item>
<title>网络程序中常用的三种心跳机制----服务器端 - 沐浴凌风</title>
<link>http://www.cnblogs.com/MaAce/p/8098156.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MaAce/p/8098156.html</guid>
<description>&lt;p&gt;心跳检测在网络程序中常常被用到，在客户端和服务器之间暂时没有数据交互时，就需要心跳检测对方是否存活。心跳检测可以由客户端主动发起，也可以由服务器主动发起。在网上看了一下心跳的讲解，大多是千遍一律只是给出了客户端十分简单的Heartbeat。这里提供了三种Echo服务器的HeartBeat 实例可供参考。来对比它们各自的优缺点。 &lt;a href=&quot;https://github.com/BambooAce/MyEvent/tree/master/heartbeat&quot; target=&quot;_blank&quot;&gt;https://github.com/BambooAce/MyEvent/tree/master/heartbeat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完整测试代码在上述github连接中: 其中服务器是epoll模型的，测试客户端是python写的。测试时别忘了把client的目标server IP地址改了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;hb_msg_oob  带外数据类型心跳
hb_send_recv  正常数据的心跳
keepalive      TCP 的keepalive选项实现heartbeat

hb_test_client&lt;/span&gt;/&lt;span&gt;hb_oob.py带外数据类型的client
hb_test_client&lt;/span&gt;/hb.py 发送正常数据的client   也可用来测试keepalive类型服务器
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们依次看一下这三种模型：&lt;/p&gt;
&lt;h3&gt;TCP KeepAlive实现心跳检测：&lt;/h3&gt;
&lt;p&gt;在TCP协议中提供了保活计时器，这个计时器默认是两个小时,可以看一下它们的相关内核参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 hb_send_recv]$ cat /proc/sys/net/ipv4/&lt;span&gt;tcp_keepalive_time 最后一次数据发送与探测的间隔时间  2h
&lt;/span&gt;&lt;span&gt;7200&lt;/span&gt;&lt;span&gt;
 hb_send_recv]$ cat &lt;/span&gt;/proc/sys/net/ipv4/&lt;span&gt;tcp_keepalive_intvl 一直未有数据交互，连续探测时间间隔
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;&lt;span&gt;
 hb_send_recv]$ cat &lt;/span&gt;/proc/sys/net/ipv4/&lt;span&gt;tcp_keepalive_probes 到检测断开，发送探测没有回复要坚持探测多少次
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;套接字选项提供了对它的控制&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; setkeepalive(&lt;span&gt;int&lt;/span&gt; lisfd, unsigned &lt;span&gt;int&lt;/span&gt; begin, unsigned &lt;span&gt;int&lt;/span&gt; cnt, unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; intvl)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(lisfd){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; keepalive = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(setsockopt(lisfd, SOL_SOCKET, SO_KEEPALIVE,(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *)&amp;amp;keepalive, &lt;span&gt;sizeof&lt;/span&gt;(keepalive)) == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SO_KEEPALIVE %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, strerror(errno));//开启调整keepalive的选项
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(setsockopt(lisfd, IPPROTO_TCP, TCP_KEEPIDLE, (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *)&amp;amp;begin, &lt;span&gt;sizeof&lt;/span&gt;(begin)) == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TCP_KEEPIDLE %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, strerror(errno));     //距离上次发送数据多长时间后开始探测
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(setsockopt(lisfd, IPPROTO_TCP, TCP_KEEPCNT, (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *)&amp;amp;cnt, &lt;span&gt;sizeof&lt;/span&gt;(cnt))==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TCP_KEEPCNT %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, strerror(errno));//探测没有回应要坚持多少次
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(setsockopt(lisfd, IPPROTO_TCP, TCP_KEEPINTVL, (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *)&amp;amp;intvl, &lt;span&gt;sizeof&lt;/span&gt;(intvl))==-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TCP_KEEPINTVL %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, strerror(errno));//无数据交互下 每隔多长时间探测一次
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 再看一下服务器端实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
    setsockopt(lisfd, SOL_SOCKET, SO_REUSEADDR, (&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *)&amp;amp;&lt;span&gt;re, re);
    setsockopt(lisfd, SOL_SOCKET, SO_REUSEPORT, (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *)&amp;amp;&lt;span&gt;re, re);
    setnonblock(lisfd);
    setkeepalive(lisfd, &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);//将监听描述符号设置了这个属性 accept后返回的文件描述符都会继承此属性
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; loop(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; lisfd)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; epfd =&lt;span&gt; epoll_create(MAXCLIENT);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(epfd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; epoll_event events[MAXCLIENT];
    memset(events, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt; epoll_event) *&lt;span&gt; MAXCLIENT);
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; epoll_event ev;
    ev.data.fd &lt;/span&gt;=&lt;span&gt; lisfd;
    ev.events &lt;/span&gt;= EPOLLIN |&lt;span&gt; EPOLLET;
    epoll_ctl(epfd, EPOLL_CTL_ADD, lisfd, &lt;/span&gt;&amp;amp;&lt;span&gt;ev);
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; sockaddr_in cliaddr;
    socklen_t len &lt;/span&gt;= &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(cliaddr);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; clifd = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; buff[SIZE] = {&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    {
    lable:
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ready = epoll_wait(epfd, events, MAXCLIENT, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ready == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(errno ==&lt;span&gt; EINTR)
                &lt;/span&gt;&lt;span&gt;goto&lt;/span&gt;&lt;span&gt; lable;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(ready)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; ready; ++&lt;span&gt;i)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(events[i].data.fd ==&lt;span&gt; lisfd)
                {
                lable2:
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;((clifd = accept(lisfd, (&lt;span&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;cliaddr, &amp;amp;len)) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        setnonblock(clifd);
                        
                        ev.data.fd &lt;/span&gt;=&lt;span&gt; clifd;
                        ev.events &lt;/span&gt;= EPOLLIN | EPOLLPRI |&lt;span&gt; EPOLLERR;
                        epoll_ctl(epfd, EPOLL_CTL_ADD, clifd, &lt;/span&gt;&amp;amp;&lt;span&gt;ev);
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(clifd == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(errno !=&lt;span&gt; EAGAIN){
                            &lt;/span&gt;&lt;span&gt;goto&lt;/span&gt;&lt;span&gt; lable2;
                        }
                    }
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLIN)
                {
                    size_t rd &lt;/span&gt;=&lt;span&gt; read(events[i].data.fd, buff, SIZE);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rd)
                    {
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, buff);
                        write(events[i].data.fd, buff, rd);
                        memset(buff, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SIZE);
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rd == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;closed\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        close(events[i].data.fd);
                        epoll_ctl(epfd, EPOLL_CTL_DEL, events[i].data.fd, &lt;/span&gt;&amp;amp;&lt;span&gt;(events[i]));
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rd == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (errno ==&lt;span&gt;ECONNRESET )
                        {
                        fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connect reset\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (errno ==&lt;span&gt; EHOSTUNREACH)
                        {
                            fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host unreach\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (errno ==&lt;span&gt;ETIMEDOUT )
                        {
                            fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLPRI)
                {
                    &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLOUT)
                {
                    &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLERR)
                {
                    fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have error\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我将客户端与服务器之间的网络断开，抓取服务器端的数据包如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;179.128&lt;/span&gt;.ircu-&lt;span&gt;2&lt;/span&gt; &amp;gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;179.129&lt;/span&gt;.msfw-array: Flags [.], cksum &lt;span&gt;0xe879&lt;/span&gt; (incorrect -&amp;gt; &lt;span&gt;0xd8db&lt;/span&gt;), seq &lt;span&gt;15&lt;/span&gt;, ack &lt;span&gt;16&lt;/span&gt;, win &lt;span&gt;114&lt;/span&gt;, options [nop,nop,TS val &lt;span&gt;4778016&lt;/span&gt; ecr &lt;span&gt;5041318&lt;/span&gt;], length &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;:&lt;span&gt;21.668755&lt;/span&gt; IP (tos &lt;span&gt;0x0&lt;/span&gt;, ttl &lt;span&gt;64&lt;/span&gt;, id &lt;span&gt;43342&lt;/span&gt;, offset &lt;span&gt;0&lt;/span&gt;, flags [DF], proto TCP (&lt;span&gt;6&lt;/span&gt;), length &lt;span&gt;52&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;179.128&lt;/span&gt;.ircu-&lt;span&gt;2&lt;/span&gt; &amp;gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;179.129&lt;/span&gt;.msfw-array: Flags [.], cksum &lt;span&gt;0xe879&lt;/span&gt; (incorrect -&amp;gt; &lt;span&gt;0xb1bb&lt;/span&gt;), seq &lt;span&gt;15&lt;/span&gt;, ack &lt;span&gt;16&lt;/span&gt;, win &lt;span&gt;114&lt;/span&gt;, options [nop,nop,TS val &lt;span&gt;4788032&lt;/span&gt; ecr &lt;span&gt;5041318&lt;/span&gt;], length &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;:&lt;span&gt;31.684278&lt;/span&gt; IP (tos &lt;span&gt;0x0&lt;/span&gt;, ttl &lt;span&gt;64&lt;/span&gt;, id &lt;span&gt;43343&lt;/span&gt;, offset &lt;span&gt;0&lt;/span&gt;, flags [DF], proto TCP (&lt;span&gt;6&lt;/span&gt;), length &lt;span&gt;52&lt;/span&gt;&lt;span&gt;)//以上是坚持探测  但是并没有回应。
    &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;179.128&lt;/span&gt;.ircu-&lt;span&gt;2&lt;/span&gt; &amp;gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;179.129&lt;/span&gt;.msfw-array: Flags [R.], cksum &lt;span&gt;0xe879&lt;/span&gt; (incorrect -&amp;gt; &lt;span&gt;0x8a96&lt;/span&gt;), seq &lt;span&gt;16&lt;/span&gt;, ack &lt;span&gt;16&lt;/span&gt;, win &lt;span&gt;114&lt;/span&gt;, options [nop,nop,TS val &lt;span&gt;4798048&lt;/span&gt; ecr &lt;span&gt;5041318&lt;/span&gt;], length &lt;span&gt;0&lt;br/&gt;最后服务器端向客户端发送了 RST复位要断开这个连接。&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终服务器在read返回0，表明客户端已断开。注意这里与客户端正常关闭返回没有什么区别，从应用层是没有办法知道与客户端断开的。那么对后续的处理就不知道是正常close还是因网络原因临时断开。如果服务器并不关心这些那么服务器就可以很好处理不断重传问题，它会在超时后主动切断网络。客户端最后再连接上时也会被服务器拒绝。&lt;/p&gt;
&lt;h3&gt;正常数据交互探测：&lt;/h3&gt;
&lt;p&gt;在这里的实例客户端与服务器实现简单的回射，一段时间未交互时，服务器主动发送HEARTBEAT，然后客户端收到后回应HEARTBEAT，当多次未回应时表示网络已经断开。主要代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    time_t cache;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; maxfd  = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    {
    lable:
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ready = epoll_wait(epfd, events, MAXCLIENT, &lt;span&gt;300&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ready == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(errno ==&lt;span&gt; EINTR)
                &lt;/span&gt;&lt;span&gt;goto&lt;/span&gt;&lt;span&gt; lable;
        }
        time_t now &lt;/span&gt;=&lt;span&gt; time(NULL);
        cache &lt;/span&gt;=&lt;span&gt; now;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(ready)
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; ready; ++&lt;span&gt;i)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(events[i].data.fd ==&lt;span&gt; lisfd)
                {
                lable2:
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;((clifd = accept(lisfd, (&lt;span&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;cliaddr, &amp;amp;len)) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        maxfd &lt;/span&gt;= clifd &amp;gt; maxfd ?&lt;span&gt; clifd : maxfd;
                        setnonblock(clifd);
                        ev.data.fd &lt;/span&gt;=&lt;span&gt; clifd;
                        ev.events &lt;/span&gt;= EPOLLIN | EPOLLPRI |&lt;span&gt; EPOLLERR;
                        epoll_ctl(epfd, EPOLL_CTL_ADD, clifd, &lt;/span&gt;&amp;amp;&lt;span&gt;ev);
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[clifd].fd =&lt;span&gt; clifd;//以文件描述符为数组标号
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[clifd].idle =&lt;span&gt; now; //记录时间
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[clifd].times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  //已经探测了多少次
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[clifd].interval= &lt;span&gt;20&lt;/span&gt;&lt;span&gt;; //探测间隔时间
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[clifd].flags =&lt;span&gt; CONNECTED; //状态
                        (&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cliNum)++&lt;span&gt;; //客户端个数
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(clifd == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(errno !=&lt;span&gt; EAGAIN){
                            &lt;/span&gt;&lt;span&gt;goto&lt;/span&gt;&lt;span&gt; lable2;
                        }
                    }
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLIN)
                {
                    size_t rd &lt;/span&gt;=&lt;span&gt; read(events[i].data.fd, buff, SIZE);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rd)
                    {
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, buff);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (strcmp(buff, hb) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)  //收到的是HEARTBEAT
                        {
                            //&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;base&lt;/span&gt;-&amp;gt;&lt;span&gt;cli_map[events[i].data.fd].times){
                            //    (&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].times)--&lt;span&gt;;  //探测次数
                            //}
                        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                            write(events[i].data.fd, buff, rd);
                        }
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].idle =&lt;span&gt; cache; //更新交互时间
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; //无反馈坚持次数至0
                        memset(buff, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SIZE);
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rd == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;client close normally\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
                        close(events[i].data.fd);
                        memset(&lt;/span&gt;&amp;amp;(&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd]),&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Event));
                    }
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLPRI)
                {
                    &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;                }
            }
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (n = &lt;span&gt;0&lt;/span&gt;; n &amp;lt;= maxfd; ++&lt;span&gt;n)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].flags == CONNECTED) &amp;amp;&amp;amp; (cache &amp;gt;= (&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].idle +&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].interval)) &amp;amp;&amp;amp; (&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].times &amp;lt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;))
            {         //如果超时没有数据交互 且探测次数小于3次 则发送HB
                write(&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;&lt;span&gt;cli_map[n].fd, hb, strlen(hb));     
                &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].idle =&lt;span&gt; cache;  //更新时间
                (&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].times)++&lt;span&gt;; //次数+1
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].times == &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)  //如果是3次了则表明可能断开了
            {
                fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d may be offline  \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;base&lt;/span&gt;-&amp;gt;&lt;span&gt;cli_map[n].fd);
                &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].flags =&lt;span&gt; OFFLINE;
                &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                ev.events &lt;/span&gt;=&lt;span&gt; EPOLLIN;
                ev.data.fd &lt;/span&gt;= &lt;span&gt;base&lt;/span&gt;-&amp;gt;&lt;span&gt;cli_map[n].fd;
                epoll_ctl(epfd, EPOLL_CTL_DEL, &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[n].fd , &amp;amp;&lt;span&gt;ev);
                close(&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;&lt;span&gt;cli_map[n].fd);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;memset(&amp;amp;(base-&amp;gt;cli_map[i]), 0, sizeof(struct Event));&lt;/span&gt;
&lt;span&gt;            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里只是在单个线程中简单的实现，如果长时间没有交互会定时的发送HB，如果网络断开的话那么在规定时间没有相应就认为是网络断开了，这时能够知道可能网络断开这件事可以对此连接进行下一步的处理，这里可以将HB放在单个线程中去实现。&lt;/p&gt;
&lt;h3&gt;带外数据实现心跳检测：&lt;/h3&gt;
&lt;p&gt;带外数据的HB的实现和上面大致相同，只是注意紧急数据只用一个字节，发送和接收都为单个字节，否则多于字节会当成正常数据来接收。在EPOLL中EPOLLPRI表示接收到了紧急数据，在select异常表示收到了紧急数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
      }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLIN)
                {
                    size_t rd &lt;/span&gt;=&lt;span&gt; read(events[i].data.fd, buff, SIZE);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rd)
                    {
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, buff);
                        write(events[i].data.fd, buff, rd);
                        &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].idle =&lt;span&gt; cache;
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                        memset(buff, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SIZE);
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rd == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;client close normally\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
                        close(events[i].data.fd);
                        memset(&lt;/span&gt;&amp;amp;(&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd]),&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Event));
                    }
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(events[i].events &amp;amp;&lt;span&gt; EPOLLPRI) //收到了HB
                {
                    size_t oob_msg &lt;/span&gt;=&lt;span&gt; recv(events[i].data.fd, buff, SIZE, MSG_OOB);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (oob_msg)
                    {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (strcmp(buff, OOB_ACK) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                            {
                                fprintf(stderr, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Recv MSG_OOB\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                            }
                            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].idle =&lt;span&gt; cache;
                            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;-&amp;gt;cli_map[events[i].data.fd].times = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                            memset(buff, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SIZE);
                    }
                }
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做的好处在于有利用读取时的数据分离，但整体来说和正常数据HB相同。&lt;/p&gt;
&lt;h3&gt;总结：&lt;/h3&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;10.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;心跳检测的各种实现方式&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;各自的优点&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;各自的缺点&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td&gt;&lt;span&gt;TCP keepalive实现&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;实现简单方便，只需要两次数据交互即可 另一端无需专门实现(适用与不在乎对方的断线的状态)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;span&gt;并不能知道对方是正常断开还是处于断线状态，若对于断线还有专门的处理那么无法知道对方的真正状态&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td&gt;&lt;span&gt;send/recv 的实现&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;能够知道对端断线或者是正常断开 有利于后续对断线类的单独处理(如游戏中 断线正常连上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不扣积分，强制断开逃跑扣积分等等)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;实现比TCP keepalive要复杂，需要彼此交互，探测过程四次数据交互(捎带确认下三次即可)，数据与正常的数据要做分离，需&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要额外不通的应用层协议实现。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td&gt;&lt;span&gt;紧急数据的实现&lt;/span&gt;&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;优点和上述正常数据交互的HB相同，另外它可以做到数据的分离，方便分开处理 实现比正常数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;据交互稍微简单点&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;缺点就是不确定紧急数据会不会对网络造成影响，接收到紧急数据后优先处理等等？&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;另外：&lt;span&gt;要注意的是TCP keepalive的心跳机制，在《unix网络编程》一书中提到，对于大多数内核这个参数是基于整个内核维护时间参数的，而不是基于每个套接字的维护的，因此如果修改了keepalive时间，可能会影响到该主机上所有开启这个选项的套接字。但是对于一般服务器内只有一个server下无影响，再者这种情况下是无需对端特别去实现的。&lt;/span&gt;  这里如果只是避免一端在断开网络的情况下 不断尝试重传并且不在乎与另一端断开网络的状态还是使用TCP keepalive较为方便，但是如果十分关心一端断线的状态那就使用应用层自己实现的心跳机制。&lt;/p&gt;
&lt;p&gt;完整测试代码在： &lt;a href=&quot;https://github.com/BambooAce/MyEvent/tree/master/heartbeat&quot; target=&quot;_blank&quot;&gt;https://github.com/BambooAce/MyEvent/tree/master/heartbeat&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 26 Dec 2017 02:32:00 +0000</pubDate>
<dc:creator>沐浴凌风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MaAce/p/8098156.html</dc:identifier>
</item>
<item>
<title>webpack入门（2） - sakurayeah</title>
<link>http://www.cnblogs.com/sakurayeah/p/8109978.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sakurayeah/p/8109978.html</guid>
<description>&lt;p&gt;&lt;span&gt;ps：每个案例都是基于前一个案例改造的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;webpack入门（1） &lt;a href=&quot;http://www.cnblogs.com/sakurayeah/p/7837314.html&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;案例源码&lt;a href=&quot;https://github.com/sakurayeah/webpackDemo&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十二provideplugin&quot;&gt;十二、ProvidePlugin&lt;/h2&gt;
&lt;p&gt;自动加载模块&lt;/p&gt;
&lt;p&gt;new webpack.ProvidePlugin()&lt;/p&gt;
&lt;p&gt;上面的案例太复杂，下面再新建一个简单的项目来讲解&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例16----全局引入jquery&quot;&gt;案例16 -- 全局引入jquery&lt;/h3&gt;
&lt;p&gt;新建一个项目，如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[webpack]
  |-- src
    |-- index.html
    |-- index.less
    |-- index.js
  |-- package.json
  |-- webpack.config.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/package.json&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server --content-base build --inline --hot&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack -p&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.26.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^7.1.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.28.7&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^1.1.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;html-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.30.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.2.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.7.3&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^4.0.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.19.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;url-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.6.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.10.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.9.5&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&quot;jquery&quot;&lt;/span&gt; ]
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets=es2015'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// css-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;optimize&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;CommonsChunkPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ProvidePlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 全局引入jquery&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.html&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;webpackDemo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.less&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;less&quot;&gt;
&lt;code&gt;body {
  background: lightpink;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'hi'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在webpack.config.js里设置了全局引入jquery，这里就不需要&lt;/p&gt;
&lt;pre class=&quot;javscript&quot;&gt;
&lt;code&gt;import $ from 'jquery'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以直接用 $&lt;/p&gt;
&lt;p&gt;$ npm run start , 打开 &lt;a href=&quot;http://localhost:8080/index.html&quot; class=&quot;uri&quot;&gt;http://localhost:8080/index.html&lt;/a&gt; , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1009686/201712/1009686-20171214174727685-1039763810.jpg&quot; alt=&quot;39&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十三iconfont&quot;&gt;十三、iconfont&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/sakurayeah/webpack%E6%9E%84%E5%BB%BA-%E6%A1%88%E4%BE%8B16-iconfont.zip&quot;&gt;点击这里下载 案例17 使用的iconfont文件&lt;/a&gt;，以下简称“案例17压缩包”&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例17&quot;&gt;案例17&lt;/h3&gt;
&lt;p&gt;新增文件 iconfont.less 和 iconfont.ttf(案例17压缩包里的iconfont.ttf)，将index.less移动至css文件夹下，如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[webpack]
  |-- src
    |-- images
      |-- iconfont.ttf
    |-- css
      |-- iconfont.less
      |-- index.less
    |-- index.html
    |-- index.js
  |-- package.json
  |-- webpack.config.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/src/css/iconfont.less&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;less&quot;&gt;
&lt;code&gt;@font-face {
  font-family: &quot;iconfont&quot;;
  src: url('../images/iconfont.ttf') format('truetype');
}
.iconfont {
  font-family: &quot;iconfont&quot; !important;
  font-size: 16px;
  font-style: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.icon-love:before { content: &quot;\e612&quot;; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/src/css/index.less&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;less&quot;&gt;
&lt;code&gt;@import './iconfont.less';
body {
  background: lightpink;
  .iconfont {
    font-size: 50px;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./css/index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;i class=&quot;iconfont icon-love&quot;&amp;gt;&amp;lt;/i&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;st&quot;&gt;&quot;jquery&quot;&lt;/span&gt; ]
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets=es2015'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// css-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;optimize&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;CommonsChunkPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ProvidePlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 全局引入jquery&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本案例只引入了ttf，其他可以类似添加&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;eot&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;woff&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ npm run start , 打开 &lt;a href=&quot;http://localhost:8080/index.html&quot; class=&quot;uri&quot;&gt;http://localhost:8080/index.html&lt;/a&gt; ，效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1009686/201712/1009686-20171214174759857-752858168.jpg&quot; alt=&quot;40&quot;/&gt;&lt;/p&gt;
&lt;p&gt;$ npm run build , iconfont.ttf文件小会转为base64直接打包到index.css里，如果文件比较大，则会单独打包到webpack/build/images/iconfont.ttf&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十四externals&quot;&gt;十四、externals&lt;/h2&gt;
&lt;p&gt;externals 配置选项提供了「从输出的 bundle 中排除依赖」的方法。&lt;/p&gt;
&lt;p&gt;比如 jquery 希望通过 cdn 的方式引入，代码里依旧用 import 的方式来使用，但是又不希望被打包。&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例18&quot;&gt;案例18&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.html&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;webpackDemo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://code.jquery.com/jquery-3.1.0.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; $ &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./css/index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;i class=&quot;iconfont icon-love&quot;&amp;gt;&amp;lt;/i&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// jquery不被webpack编译到文件中&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets=es2015'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// css-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行 $ npm run build , 生成文件目录如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[webpack]
  |-- build
    |-- index.css
    |-- index.html
    |-- index.js&lt;/code&gt;
&lt;/pre&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十五react&quot;&gt;十五、react&lt;/h2&gt;
&lt;p&gt;安装依赖&lt;br/&gt;$ npm i babel-preset-react react react-dom --save-dev&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例19&quot;&gt;案例19&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.html&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;webpackDemo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./css/index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Demo &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;i  className&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;iconfont icon-love&quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  &amp;lt;Demo /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'root'&lt;/span&gt;)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// css-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要babel-preset-react插件来编译React&lt;/p&gt;
&lt;p&gt;运行 $ npm run start , 打开 &lt;a href=&quot;http://localhost:8080/&quot; class=&quot;uri&quot;&gt;http://localhost:8080/&lt;/a&gt; ，能看到效果&lt;/p&gt;
&lt;p&gt;运行 $ npm run build ，打包文件目录如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[webpack]
  |-- build
    |-- index.css
    |-- index.html
    |-- index.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;react被打包到webpack/build/index.js里去了&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例20----react-通过-cdn-的方式引入&quot;&gt;案例20 -- react 通过 cdn 的方式引入&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.html&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;webpackDemo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/react/15.4.2/react.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/react/15.4.2/react-dom.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'React'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ReactDOM'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// css-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样 react 就不会被打包入 webpack/build/index.js&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十六devserver&quot;&gt;十六、devServer&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;hot : boolean , 启用 webpack 的模块热替换特性&lt;/li&gt;
&lt;li&gt;inline : boolean , 内联模式(默认) , false 时为 iframe 模式&lt;/li&gt;
&lt;li&gt;contentBase : boolean|string|array , 设定webpack-dev-server的director根目录。如果不进行设定的话，默认是在当前目录下。&lt;/li&gt;
&lt;li&gt;compress : boolean , 一切服务都启用 gzip 压缩&lt;/li&gt;
&lt;li&gt;port : number , 指定要监听请求的端口号&lt;/li&gt;
&lt;li&gt;host : string , 指定使用一个 host&lt;/li&gt;
&lt;li&gt;proxy : object , webpack 代理&lt;/li&gt;
&lt;li&gt;filename : string , 可以只在某个文件时被请求时编译&lt;/li&gt;
&lt;li&gt;headers : object , 在所有请求中添加首部内容&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://doc.webpack-china.org/configuration/dev-server&quot;&gt;更多参数戳这里&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例21&quot;&gt;案例21&lt;/h3&gt;
&lt;p&gt;新建一个项目如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[webpack]
  |-- package.json
  |-- webpack.config.js
  |-- src
    |-- index.html
    |-- index.js
    |-- images
      |-- SpongeBob.jpg
    |-- css
      |-- index.less&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本案例用到的图片 &lt;a href=&quot;http://images.cnblogs.com/cnblogs_com/sakurayeah/1133161/o_SpongeBob.jpg&quot;&gt;SpongeBob.jpg 戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;webpack/package.json&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack -p&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.26.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^7.1.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-react&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.28.7&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^1.1.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;html-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.30.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.2.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.7.3&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^4.0.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.19.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;url-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.6.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.10.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.9.5&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 不打包jquery&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 启用热替换模块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.html&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;webpackDemo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://code.jquery.com/jquery-3.1.0.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/css/index.less&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;less&quot;&gt;
&lt;code&gt;body {
  background: url(../images/SpongeBob.jpg) no-repeat;
  color: blue;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./css/index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'hi'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;package.json 对比&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 案例16&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server --content-base build --inline --hot&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 案例21&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;案例21 中 webpack-dev-server 后的参数，改为在 webapck.config.js 中设置&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;() ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ npm run start , 打开 &lt;a href=&quot;http://localhost:8080/&quot; class=&quot;uri&quot;&gt;http://localhost:8080/&lt;/a&gt; , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201712/1009686-20171225162202290-922471789.jpg&quot; alt=&quot;41&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十七本地-mock-模拟后端数据&quot;&gt;十七、本地 mock 模拟后端数据&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (app) &lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/init.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;json&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例22&quot;&gt;案例22&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 不打包jquery&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (app) &lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/init.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;json&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 启用热替换模块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./css/index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/init.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (d &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ajax error'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ npm run start , 打开 &lt;a href=&quot;http://localhost:8080/index.html&quot; class=&quot;uri&quot;&gt;http://localhost:8080/index.html&lt;/a&gt; , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201712/1009686-20171225162219603-1975982702.jpg&quot; alt=&quot;42&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十八环境变量&quot;&gt;十八、环境变量&lt;/h2&gt;
&lt;p&gt;DefinePlugin 可以把命令行的环境变量带到浏览器端。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.css88.com/doc/webpack/plugins/define-plugin/&quot;&gt;详解戳这里&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例23&quot;&gt;案例23&lt;/h3&gt;
&lt;p&gt;环境变量在很多情况都会使用，这里举一个例子，比如我们本地 mock 数据时，请求都是 &quot;localhost:8080&quot; 开头的，但是到线上了则是 &quot;&lt;a href=&quot;http://a.com/&quot; class=&quot;uri&quot;&gt;http://a.com&lt;/a&gt;&quot; 和 &quot;&lt;a href=&quot;http://b.com/&quot; class=&quot;uri&quot;&gt;http://b.com&lt;/a&gt;&quot; , 这个时候就可以使用 DefinePlugin 来解决&lt;/p&gt;
&lt;p&gt;&lt;span&gt;webpack/package.json&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=mock webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=prod webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build-start&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=mock webpack -p&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build-prod&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=prod webpack -p&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.26.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^7.1.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-react&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.28.7&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^1.1.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;html-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.30.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.2.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.7.3&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^4.0.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.19.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;url-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.6.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.10.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.9.5&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&quot;NODE_ENV=xxx&quot; , 可以定义不同环境的 NODE_ENV&lt;/p&gt;
&lt;p&gt;start 和 build-start , 是我们本地开发时使用 ; prod 和 build-prod , 是线上环境使用&lt;/p&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'----------- NODE_ENV ----------- : '&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt;)

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 不打包jquery&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (app) &lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/init.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;json&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 启用热替换模块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 process.env.NODE_ENV 变量拿到值&lt;/p&gt;
&lt;p&gt;$ npm run start , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201712/1009686-20171225162231869-281188118.jpg&quot; alt=&quot;43&quot;/&gt;&lt;/p&gt;
&lt;p&gt;$ npm run prod , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201712/1009686-20171225162242650-1489072214.jpg&quot; alt=&quot;44&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; checkHost &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;mock&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://a.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://b.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostKey &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'mock'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostContent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[checkHostKey]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; checkHostContent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  checkHostContent[i] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(checkHostContent[i])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 不打包jquery&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (app) &lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/init.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;json&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(checkHostContent)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 启用热替换模块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; checkHost &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;mock&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 本地 mock 数据使用&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 线上环境使用&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://a.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://b.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 检查 checkHost[process.env.NODE_ENV] 是否存在，不存在时，将rocess.env.NODE_ENV 设置为 mock&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostKey &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'mock'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// checkHostContent 相当于是 checkHost.mock 或 checkHost.prod&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostContent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[checkHostKey]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 如果 DefinePlugin 键值是一个字符串，它会被当作一个代码片段来使用，需要 JSON.stringify() 处理&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; checkHostContent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  checkHostContent[i] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(checkHostContent[i])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 将处理好的 checkHostContent 放入&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(checkHostContent)]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一部分代码，将我们要用到的 A_HOST 和 B_HOST 都处理好，再放入new webpack.DefinePlugin()，拿 prod 举例，相当于处理成&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;A_HOST&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://a.com&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;B_HOST&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://b.com&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/src/index.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./css/index.less'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(A_HOST&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; B_HOST)

&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ajax&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;A_HOST&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/init.json`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (d &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'body'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;prepend&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ajax error'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ npm run start , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201712/1009686-20171225162255181-1733300594.jpg&quot; alt=&quot;45&quot;/&gt;&lt;/p&gt;
&lt;p&gt;$ npm run prod , 效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1009686/201712/1009686-20171225162304853-439167576.jpg&quot; alt=&quot;46&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以直接写两个 webpack.config.js 文件，这里就贴一下代码，不具体写案例了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// webpack.start.config.js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;A_HOST&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;B_HOST&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// webpack.prod.config.js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;A_HOST&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://a.com&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;B_HOST&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://b.com&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// package.json&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server --config webpack.start.config.js&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server --config webpack.prod.config.js&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;build-start&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack -p --config webpack.start.config.js&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;build-prod&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack -p --config webpack.prod.config.js&quot;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;十九server.js&quot;&gt;十九、server.js&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.github.io/docs/webpack-dev-server.html#api&quot;&gt;详细介绍戳这里&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例24&quot;&gt;案例24&lt;/h3&gt;
&lt;p&gt;新增 webpack/server.js , 目录如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[webpack]
  |-- server.js
  |-- package.json
  |-- webpack.config.js
  |-- src
    |-- index.html
    |-- index.js
    |-- images
      |-- SpongeBob.jpg
    |-- css
      |-- index.less&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;webpack/webpack.config.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; checkHost &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;mock&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 本地 mock 数据使用&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 线上环境使用&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://a.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://b.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 检查 process.env.NODE_ENV 是否和 checkHost 里的对应&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostKey &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'mock'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// checkHostContent 相当于是 checkHost.mock 或 checkHost.prod&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostContent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[checkHostKey]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 如果 DefinePlugin 键值是是一个字符串，它会被当作一个代码片段来使用，需要 JSON.stringify() 处理&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; checkHostContent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  checkHostContent[i] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(checkHostContent[i])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;]
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 不打包jquery&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// js-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// less-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'css-loader!less-loader'&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// img-loader&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(checkHostContent)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 将处理好的 checkHostContent 放入&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 启用热替换模块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将 devServer 删除 , entry.index 改为 array 写法&lt;/p&gt;
&lt;p&gt;&lt;span&gt;webpack/server.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 引入 webpack 和 webpack-dev-server&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; WebpackDevServer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack-dev-server'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 引入 webpack 的配置&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; config &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./webpack.config.js'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 添加 webpack-dev-server 的客户端入口文件到 webpack 的配置中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 通过 unshift 方法，将 webpack-dev-server/client?http://«path»:«port»/ 插入到 webpack-dev-server 配置的 entry.index 中&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;entry&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;unshift&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server/client?http://localhost:8080/&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// compiler = webpack({ webpack 的配置 })&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; compiler &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;webpack&lt;/span&gt;(config)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// server = new WebpackDevServer(compiler, { devServer 的配置 })&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; server &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;WebpackDevServer&lt;/span&gt;(compiler&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;contentBase&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./build'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (app) &lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/init.json'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(req&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;json&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webpack-dev-server 的配置里没有 inline : true 这个配置项, 因为 webpack-dev-server 无法访问 webpack 的配置。 因此，用户必须添加 webpack-dev-server 的客户端入口文件到 webpack 的配置中，有以下几种方式（上面案例只写了一种，其他大家可以自行尝试）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// server.js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;entry&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;unshift&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;webpack-dev-server/client?http://localhost:8080/&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// webpack.config.js&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
     &lt;span class=&quot;st&quot;&gt;'webpack-dev-server/client?http://localhost:8080/'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;
    ]
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// index.html&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080/webpack-dev-server.js&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;webpack/package.json&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=mock node server.js&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=prod node server.js&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build-start&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=mock webpack -p&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;build-prod&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;NODE_ENV=prod webpack -p&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.26.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^7.1.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-es2015&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;babel-preset-react&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^6.24.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.28.7&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;file-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^1.1.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;html-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.30.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.2.1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.7.3&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^4.0.5&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.19.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;url-loader&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^0.6.2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^3.10.0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;^2.9.5&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改了 scripts.start 和 scripts.prod ，$ npm run start 和 $ npm run prod ，效果和 案例23 一样&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;二十module.rules&quot;&gt;二十、module.rules&lt;/h2&gt;
&lt;p&gt;下面介绍一下 loaders 的其他写法&lt;/p&gt;

&lt;hr/&gt;
&lt;h3 id=&quot;案例25&quot;&gt;案例25&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;webpack/server.js&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; checkHost &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;mock&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 本地 mock 数据使用&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 线上环境使用&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;A_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://a.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;B_HOST&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://b.com&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 检查 process.env.NODE_ENV 是否和 checkHost 里的对应&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostKey &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;env&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;NODE_ENV&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'mock'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// checkHostContent 相当于是 checkHost.mock 或 checkHost.prod&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; checkHostContent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; checkHost[checkHostKey]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 如果 DefinePlugin 键值是是一个字符串，它会被当作一个代码片段来使用，需要 JSON.stringify() 处理&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; checkHostContent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  checkHostContent[i] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(checkHostContent[i])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 入口文件地址&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'./src/index.js'&lt;/span&gt;]
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 出口&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/build&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 打包后的文件存放路径&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].js'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 文件名，name即为entry的key&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;externals&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jQuery'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 不打包jquery&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [ &lt;span class=&quot;co&quot;&gt;// loaders&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;]
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;dt&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'images/[hash:8].[name].[ext]'&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ]
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;DefinePlugin&lt;/span&gt;(checkHostContent)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 将处理好的 checkHostContent 放入&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 启用热替换模块&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 生成的的html文件名&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/index.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 被打包的html路径&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;] &lt;span class=&quot;co&quot;&gt;// 需要引入的js，对应entry的key&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 单独打包css&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name].css'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  ]
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对比分析如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// module.loaders 改为 module.rules&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
      &lt;span class=&quot;co&quot;&gt;// {&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//   test: /\.(js|jsx)$/,  // js-loader&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//   loader: 'babel-loader?presets[]=es2015&amp;amp;presets[]=react'&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// }&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ? 后的参数可以写在这里&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;]
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// {&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//   test: /\.less/, // less-loader&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//   loaders: ExtractTextPlugin.extract('css-loader!less-loader')&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// }&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// {&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//   test: /\.(png|jpg|ttf)$/, // img-loader&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;//   loader: 'url-loader?limit=8192&amp;amp;name=images/[hash:8].[name].[ext]'&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// }&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ttf&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'url-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;dt&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'images/[hash:8].[name].[ext]'&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ]
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 26 Dec 2017 02:27:00 +0000</pubDate>
<dc:creator>sakurayeah</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sakurayeah/p/8109978.html</dc:identifier>
</item>
<item>
<title>项目实战13—企业级虚拟化Virtualization - KVM技术 - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/8116509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/8116509.html</guid>
<description>&lt;p&gt;　　项目实战系列，总架构图 &lt;a href=&quot;http://www.cnblogs.com/along21/p/8000812.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/along21/p/8000812.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;KVM的介绍、准备工作和qemu-kvm 命令详解&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　KVM：就是Keyboard Video Mouse的缩写。KVM &lt;span&gt;交换机&lt;span&gt;通过直接连接键盘、视频和鼠标 (KVM) 端口，让您能够访问和控制计算机。KVM 技术无需目标服务器修改软件。这就意味着可以在 Windows 的 BIOS 环境下，随时访问目标计算机。KVM 提供真正的主板级别访问，并支持多平台服务器和串行设备。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　KVM 技术已经从最初的基础SOHO办公型，发展成为企业 IT 基础机房设施管理系统。可以从kvm 客户端管理软件轻松的直接访问位于多个远程位置的服务器和设备。KVM over IP 解决方案具备完善的多地点故障转移功能、符合新服务器管理标准 (IPMI) 的直接界面，以及将本地存储媒体映射至远程位置的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　KVM 是个&quot;怪胎&quot;，原本是类型2 的主机虚拟化；但一旦在OS 上加载了kvm.ko 模块，就会&quot;感染&quot;OS，使其变为&lt;/span&gt;hypervisor（kvm），原本的软件空间作为控制台，转化成类型1 模式的主机虚拟化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094814040-239671539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）KVM的组件&lt;/p&gt;
&lt;p&gt;① kvm.ko：模块&lt;/p&gt;
&lt;p&gt;　　API 应用程序编程接口&lt;/p&gt;
&lt;p&gt;② &lt;strong&gt;qemu&lt;/strong&gt;-kvm：用户空间的工具程序；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　qemu-KVM&lt;/strong&gt;是一种开源虚拟器，它为KVM管理程序提供硬件仿真。&lt;/p&gt;
&lt;p&gt;　　 运行中的一个kvm虚拟机就是一个qemu-kvm进程，运行qemu-kvm程序并传递给它合适的选项及参数即能完成虚拟机启动，终止此进程即能关闭虚拟机；&lt;/p&gt;
&lt;p&gt;③ libvirt 虚拟化库：Libvirt是一个C工具包，可以与最近版本的Linux(以及其他操作系统)的虚拟化功能进行交互。主包包含了导出虚拟化支持的libvirtd服务器。&lt;/p&gt;
&lt;p&gt;　　C/S：&lt;/p&gt;
&lt;p&gt;　　　　Client：&lt;/p&gt;
&lt;p&gt;　　　　　　libvirt-client&lt;/p&gt;
&lt;p&gt;　　　　　　virt-manager&lt;/p&gt;
&lt;p&gt;　　Daemon：&lt;/p&gt;
&lt;p&gt;　　　　libvirt-daemon&lt;/p&gt;

&lt;p&gt;（3）KVM模块load进内存之后，系统的运行模式：&lt;/p&gt;
&lt;p&gt;　　内核模式：GuestOS执行IO类的操作时，或其它的特殊指令操作时的模式；它也被称为&quot;Guest-Kernel&quot;模式；&lt;/p&gt;
&lt;p&gt;　　用户模式：Host OS的用户空间，用于代为GuestOS发出IO请求；&lt;/p&gt;
&lt;p&gt;　　来宾模式：GuestOS的用户模式；所有的非IO类请求&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、使用KVM 的准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）前提：&lt;/p&gt;
&lt;p&gt;① 必须跑在&lt;span&gt;&lt;strong&gt;x86&lt;/strong&gt;&lt;/span&gt; 系统的架构上&lt;/p&gt;
&lt;p&gt;② 必须支持&lt;span&gt;&lt;strong&gt;硬件级虚拟化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　vmx：Intel VT-x&lt;/p&gt;
&lt;p&gt;　　svm：AMD AMD-v&lt;/p&gt;
&lt;p&gt;③ 在虚拟机上再虚拟化，需开启虚拟化 Intel VT-x/EPT&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094814353-1520278827.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）判断CPU是否支持硬件虚拟化：&lt;/p&gt;
&lt;p&gt;[root@master ~]# grep -i -E '(vmx|svm|lm)' /proc/cpuinfo&lt;/p&gt;
&lt;p&gt;注意：vmx 或 svm 必须出现一个，表示是支持的&lt;/p&gt;
&lt;p&gt;　　vmx：Intel VT-x&lt;/p&gt;
&lt;p&gt;　　svm：AMD AMD-v&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094815181-1479849670.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）安装前准备&lt;/p&gt;
&lt;p&gt;① 装载KVM 模块&lt;/p&gt;
&lt;p&gt;[root@master ~]# yum install &lt;strong&gt;libvirt-daemon-kvm qemu-kvm virt-manager&lt;/strong&gt; -y&lt;/p&gt;
&lt;p&gt;[root@master ~]# &lt;span&gt;&lt;strong&gt;modprobe kvm&lt;/strong&gt;&lt;/span&gt; 装载kvm 模块&lt;/p&gt;

&lt;p&gt;② 检测kvm 模块是否装载&lt;/p&gt;
&lt;p&gt;[root@master ~]# lsmod |grep kvm&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094815400-380113302.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[root@master ~]# ll /dev/kvm 字符设备&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094815525-535408499.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;③ 安装用户端工具 qemu-kvm&lt;/p&gt;
&lt;p&gt;[root@master ~]# yum install libvirt-daemon-kvm &lt;strong&gt;qemu-kvm&lt;/strong&gt; virt-manager -y&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、qemu-kvm命令语法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;qemu-kvm [options] [disk_image]&lt;/p&gt;
&lt;p&gt;选项有很多类别：&lt;strong&gt;标准选项、块设备相关选项、显示选项、网络选项&lt;/strong&gt;、...&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
（&lt;span&gt;1&lt;/span&gt;&lt;span&gt;）标准选项：
　　&lt;/span&gt;-machine [type=]name：-&lt;span&gt;machine help来获取列表，用于指定模拟的主机类型； 
　　&lt;/span&gt;-cpu cpu：-&lt;span&gt;cpu help来获取列表；用于指定要模拟的CPU型号；
　　&lt;/span&gt;-smp n[,maxcpus=cpus][,cores=cores][,threads=threads]多少线程[,sockets=&lt;span&gt;sockets]多少核：指明虚拟机上vcpu的数量及拓扑；
　　&lt;/span&gt;-boot [order=drives][,once=drives]只用一次（如按照系统时只用一次光盘引导）[,menu=on|off] [,splash=sp_name][,splash-&lt;span&gt;time&lt;/span&gt;=sp_time][,reboot-timeout=rb_time][,strict=on|&lt;span&gt;off]
　　order：各设备的引导次序：c表示第一块硬盘，d表示第一个光驱设备；&lt;/span&gt;-boot order=dc,once=&lt;span&gt;d
　　&lt;/span&gt;-&lt;span&gt;m megs：虚拟机的内存大小；
　　&lt;/span&gt;-&lt;span&gt;name NAME：当前虚拟机的名称，要惟一；

（&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;）块设备相关的选项：
　　&lt;/span&gt;-hda/-hdb &lt;span&gt;file&lt;/span&gt;&lt;span&gt;：指明IDE总线类型的磁盘映像文件路径；第0和第1个；
　　&lt;/span&gt;-hdc/-hdd &lt;span&gt;file&lt;/span&gt;&lt;span&gt;：第2和第3个；
　　&lt;/span&gt;-cdrom &lt;span&gt;file&lt;/span&gt;&lt;span&gt;：指定要使用光盘映像文件； 
　　&lt;/span&gt;-drive [&lt;span&gt;file&lt;/span&gt;=file路径][,&lt;span&gt;if&lt;/span&gt;=type接口][,media=d接口对应的设备类型][,index=i] [,cache=writethrough|writeback|none|directsync|unsafe][,format=&lt;span&gt;f]：
　　　　① &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;=/PATH/TO/&lt;span&gt;SOME_IMAGE_FILE：映像文件路径；&lt;br/&gt;　　　　② &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;TYPE：块设备总线类型，ide, scsi, sd, floppy, virtio,...
　　　　③ media&lt;/span&gt;=&lt;span&gt;TYPE：介质类型，cdrom和disk；
　　　　④ index&lt;/span&gt;=&lt;span&gt;i：设定同一类型设备多个设备的编号；
　　　　⑤ cache&lt;/span&gt;=writethrough|writeback|none|directsync|&lt;span&gt;unsafe：缓存方式；
　　　　⑥ format&lt;/span&gt;=&lt;span&gt;f：磁盘映像文件的格式；
　　CentOS磁盘镜像文件下载： https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cloud.centos.org/centos/7/images/&lt;/span&gt;
&lt;span&gt;
（&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;）显示选项：
　　&lt;/span&gt;-&lt;span&gt;display type：显示的类型，sdl, curses, none和vnc；
　　&lt;/span&gt;-&lt;span&gt;nographic：不使用图形接口； 显卡型号
　　&lt;/span&gt;-vga [std|cirrus|vmware|qxl|xenfb|&lt;span&gt;none]：模拟出的显卡的型号；
　　&lt;/span&gt;-&lt;span&gt;vnc display[,option[,option[,...]]]]：启动一个vnc server来显示虚拟机接口； 让qemu进程监听一个vnc接口； 
　　　　display：
　　　　　　① HOST:N
　　　　　　　　在HOST主机的第N个桌面号输出vnc；&lt;/span&gt;&lt;span&gt;
　　　　　　② unix:&lt;/span&gt;/PATH/TO/&lt;span&gt;SOCK_FILE
　　　　　　③ none
　　　　options：
　　　　　　password：连接此服务所需要的密码；&lt;br/&gt;&lt;/span&gt;　　-&lt;span&gt;monitor stdio：在标准输出上显示monitor界面；
　　　　Ctrl&lt;/span&gt;-&lt;span&gt;a, c：在console和monitor之间切换；
　　　　Ctrl&lt;/span&gt;-&lt;span&gt;a, h
                        
（&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;）网络选项：
　　&lt;/span&gt;-net nic[,vlan=n][,macaddr=mac][,model=type][,name=str][,addr=str][,vectors=&lt;span&gt;v]
　　　　为虚拟机创建一个网络接口，并将其添加至指定的VLAN；
　　　　model&lt;/span&gt;=&lt;span&gt;type：指明模拟出的网卡的型号，ne2k_pci,i82551,i82557b,i82559er,rtl8139,e1000,pcnet,virtio；
　　　　　　net nic,model&lt;/span&gt;=?&lt;span&gt;
　　　　macaddr&lt;/span&gt;=mac：指明mac地址；&lt;span&gt;52&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;:
                            
　　&lt;/span&gt;-net tap[,vlan=n][,name=str][,fd=h][,fds=x:y:...:z][,ifname=name][,script=&lt;span&gt;file&lt;/span&gt;][,downscript=&lt;span&gt;dfile]:
　　　　通过物理的TAP网络接口连接至vlan；
　　　　script&lt;/span&gt;=&lt;span&gt;file&lt;/span&gt;：启动虚拟机时要执行的脚本，默认为/etc/qemu-&lt;span&gt;ifup
　　　　downscript&lt;/span&gt;=dfile：关闭虚拟机时要执行的脚本，/etc/qemu-&lt;span&gt;ifdown
　　　　ifname&lt;/span&gt;=&lt;span&gt;NAME：自定义接口名称；
其它选项：
　　&lt;/span&gt;-daemonize：以守护进程运行；
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;实战一：图形化工具virt-manager 创建虚拟机&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、创建物理桥桥接接口br0&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;[root@master ~]# systemctl start libvirtd.service&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh iface-bridge eth0 br0&lt;/p&gt;
&lt;p&gt;分析：把自己的物理网卡eth0 作为交换机，把br0 当网卡，提供IP&lt;/p&gt;
&lt;p&gt;注意：命令可能会卡死或出错，终端被强制退出；等一会，在登录就OK 了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094815884-1474880789.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、图形化工具创建虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）打开窗口&lt;/p&gt;
&lt;p&gt;[root@master ~]# virt-manager&lt;/p&gt;
&lt;p&gt;注意：这个命令需在支持图形化界面的机器才能执行， 用其他机器 ssh -X 连接，再执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094816181-813471287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）创建虚拟机&lt;/p&gt;
&lt;p&gt;① 创建新的虚拟机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094816462-1215490428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 选择操作系统类型和版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094816744-1807476258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 选择内存和CPU 设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094816962-1529007090.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ 虚拟硬盘有多大&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094817259-1541320870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;⑤ 网络选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094818447-379324628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;⑥ 详细配置，开始安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094818806-1556084910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;⑦ 进入虚拟化图形管理窗口，选择安装系统版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094819150-1761871118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;实战二：命令行工具qemu-kvm创建使用虚拟机&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、准备桥&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）命令管控虚拟网桥：brctl&lt;/p&gt;
&lt;p&gt;[root@master ~]# yum -y install bridge-utils   下载brctl 命令的包&lt;/p&gt;
&lt;p&gt;[root@master ~]# brctl addbr br-int0   添加网桥&lt;/p&gt;
&lt;p&gt;[root@master ~]# brctl show   查询所有网桥&lt;/p&gt;
&lt;p&gt;[root@master ~]# ifconfig -a   每一个桥，在机器上都表现为一个网卡接口，只是没有激活&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094819540-1502968024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[root@master ~]# ip link set br-int0 up   激活桥，会分配mac 地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094819806-1970637639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;删除网桥&lt;/p&gt;
&lt;p&gt;[root@master ~]# ip link set br-int0 down   先down掉网桥&lt;/p&gt;
&lt;p&gt;[root@master ~]# brctl delbr br-int0   再删除&lt;/p&gt;
&lt;p&gt;[root@master ~]# ifconfig -a   查询不到这个网卡了&lt;/p&gt;
&lt;p&gt;[root@master ~]# brctl show   查询不到网桥&lt;/p&gt;

&lt;p&gt;（2）手动创建物理网桥&lt;/p&gt;
&lt;p&gt;① 创建网桥对应的配置文件&lt;/p&gt;
&lt;p&gt;[root@master network-scripts]# pwd&lt;/p&gt;
&lt;p&gt;/etc/sysconfig/network-scripts&lt;/p&gt;
&lt;p&gt;[root@master network-scripts]# cp ifcfg-eth1 ifcfg-br0&lt;/p&gt;
&lt;p&gt;[root@master network-scripts]# vim ifcfg-br0&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
DEVICE=&lt;span&gt;br0
NAME&lt;/span&gt;=&lt;span&gt;br0
TYPE&lt;/span&gt;=&lt;span&gt;Bridge
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
IPADDR&lt;/span&gt;=&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.7&lt;/span&gt;&lt;span&gt;
NETMASK&lt;/span&gt;=&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
GATEWAY&lt;/span&gt;=&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
DNS1&lt;/span&gt;=&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：是要充当正常网卡使用的，所有IP、NETMASK、GATEWAY、DNS1 都要有&lt;/p&gt;

&lt;p&gt;② 把主机的网卡连接到桥上&lt;/p&gt;
&lt;p&gt;[root@master network-scripts]# vim ifcfg-eth1&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
DEVICE=&lt;span&gt;eth1
ONBOOT&lt;/span&gt;=&lt;span&gt;yes
BRIDGE&lt;/span&gt;=br0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：主机的网卡连接网桥后，是要充当交换机的，所以不需要IP、NETMASK、GATEWAY、DNS1&lt;/p&gt;

&lt;p&gt;③ 重启网络服务&lt;/p&gt;
&lt;p&gt;[root@master network-scripts]# systemctl restart network&lt;/p&gt;
&lt;p&gt;[root@master ~]# ifconfig&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094820119-1683575169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[root@master ~]# brctl show 也能查到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094820337-82764176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、创建虚拟机前准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;使用virt-manager管理KVM&lt;/p&gt;
&lt;p&gt;（1）准备 qemu-kvm 命令&lt;/p&gt;
&lt;p&gt;[root@master ~]# yum install qemu-kvm libvirt-daemon-kvm virt-manager   安装qemu-kvm 命令行工具&lt;/p&gt;
&lt;p&gt;[root@master ~]# modprobe kvm   加载模块&lt;/p&gt;
&lt;p&gt;[root@master ~]# lsmod |grep kvm&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094820572-755680492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[root@master ~]# rpm -ql qemu-kvm 因为qemu-kvm 命令路径不在PATH 路径下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094820775-77350956.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建软连接，或者写入PATH 变量都行&lt;/p&gt;
&lt;p&gt;[root@master ~]# ln -sv /usr/libexec/qemu-kvm /usr/bin/&lt;/p&gt;
&lt;p&gt;[root@master ~]# qemu-kvm -h 查询命令帮助&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094820978-665556865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、创建一个虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）创建一个虚拟机，用kubuntu 的镜像文件（用windows、linux 什么镜像文件都行）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
[root@master ~]# qemu-kvm -cpu host -smp &lt;span&gt;2&lt;/span&gt;,sockets=&lt;span&gt;1&lt;/span&gt;,cores=&lt;span&gt;2&lt;/span&gt;,threads=&lt;span&gt;1&lt;/span&gt; -m &lt;span&gt;512&lt;/span&gt; -drive &lt;span&gt;file&lt;/span&gt;=/data/imgs/test.img,&lt;span&gt;if&lt;/span&gt;=virtio,media=disk,format=qcow2 -drive &lt;span&gt;file&lt;/span&gt;=/root/kubuntu-&lt;span&gt;17.10&lt;/span&gt;-desktop-amd64.iso,&lt;span&gt;if&lt;/span&gt;=ide,media=cdrom -boot order=dc,once=d -vnc &lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.7&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分析：命令详解见上边&lt;/p&gt;

&lt;p&gt;（2）vnc 登录实验虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# vncviewer 172.16.1.7:0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094821369-1364905792.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;实战三：手动构建虚拟机间的虚拟通道、仅主机网桥和NAT 网桥&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、准备虚拟机镜像文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）下载cirros 镜像文件&lt;/p&gt;
&lt;p&gt;用cirros 来演示测试，因为它很小，不占资源&lt;/p&gt;
&lt;p&gt;去网站下载cirros&lt;/p&gt;
&lt;p&gt;CentOS磁盘镜像文件下载： &lt;a href=&quot;https://cloud.centos.org/centos/7/images/&quot;&gt;&lt;span&gt;https://cloud.centos.org/centos/7/images/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;[root@master ~]# qemu-img info cirros-no_cloud-i386.img&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094821665-34916477.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）准备2分创建虚拟机的镜像文件&lt;/p&gt;
&lt;p&gt;[root@master ~]# mkdir -pv /data/imgs/&lt;/p&gt;
&lt;p&gt;[root@master ~]# cp cirros-no_cloud-i386.img /data/imgs/c1.img&lt;/p&gt;
&lt;p&gt;[root@master ~]# cp cirros-no_cloud-i386.img /data/imgs/c2.img&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、创建虚拟的准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）准备物理网桥&lt;/p&gt;
&lt;p&gt;[root@master imgs]# brctl addbr br-c1-and-c2 创建网桥接口&lt;/p&gt;
&lt;p&gt;[root@master imgs]# ifconfig br-c1-and-c2 up 激活网桥&lt;/p&gt;
&lt;p&gt;[root@master imgs]# brctl show&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094822087-934263028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）准备激活连接网桥脚本&lt;/p&gt;
&lt;p&gt;① [root@master ~]# vim /etc/qemu-ifup-pn1&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash
#
bridge&lt;/span&gt;=br-c1-and-&lt;span&gt;c2
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -n &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ];&lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        ip link set $&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; up
        &lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        brctl addif $bridge $&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        [ $&lt;/span&gt;? -eq &lt;span&gt;0&lt;/span&gt; ] &amp;amp;&amp;amp; exit &lt;span&gt;0&lt;/span&gt; || exit &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error: no interface specified.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        exit &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;② 加执行权限&lt;/p&gt;
&lt;p&gt;[root@master ~]# chmod +x /etc/qemu-ifup-pn1&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、创建、登录两个虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）创建并开启虚拟机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
[root@master ~]# qemu-kvm -name c1 -cpu host -smp &lt;span&gt;2&lt;/span&gt; -m &lt;span&gt;64&lt;/span&gt; -drive &lt;span&gt;file&lt;/span&gt;=/data/imgs/c1.img,&lt;span&gt;if&lt;/span&gt;=virtio,media=disk,format=qcow2 -vnc :&lt;span&gt;0&lt;/span&gt; -net nic,model=e1000,macaddr=&lt;span&gt;52&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; -net tap,script=/etc/qemu-ifup-pn1 -&lt;span&gt;daemonize

[root@master &lt;/span&gt;~]# qemu-kvm -name c2 -cpu host -smp &lt;span&gt;2&lt;/span&gt; -m &lt;span&gt;64&lt;/span&gt; -drive &lt;span&gt;file&lt;/span&gt;=/data/imgs/c2.img,&lt;span&gt;if&lt;/span&gt;=virtio,media=disk,format=qcow2 -vnc :&lt;span&gt;1&lt;/span&gt; -net nic,model=e1000,macaddr=&lt;span&gt;52&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; -net tap,script=/etc/qemu-ifup-pn1 -daemonize
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：-vnc :0/1 是窗口号；MAC 地址52:54:00 不能改，后边随意&lt;/p&gt;
&lt;p&gt;[root@master ~]# ss -nutl 开启了5900 和5901 的端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094822384-873569854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）登录连接2个虚拟机&lt;/p&gt;
&lt;p&gt;开2个终端，vnc 连接虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# vncviewer 192.168.30.107:0&lt;/p&gt;
&lt;p&gt;[root@master ~]# vncviewer 192.168.30.107:1&lt;/p&gt;
&lt;p&gt;登录用户：cirros&lt;/p&gt;
&lt;p&gt;登录密码：cubswin:)&lt;/p&gt;
&lt;p&gt;$ sudo su - 切换到管理用户&lt;/p&gt;
&lt;p&gt;# poweroff 关机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094823525-1155795303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;4、建立虚拟机间的虚拟通道&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;① 给2个虚拟机加 IP ，在同一网段&lt;/p&gt;
&lt;p&gt;# ifconfig eth0 10.1.0.1/16 up&lt;/p&gt;
&lt;p&gt;# ifconfig eth0 10.1.0.2/16 up&lt;/p&gt;
&lt;p&gt;分析：一旦添加了IP，就是仅主机模式了&lt;/p&gt;

&lt;p&gt;② 测试虚拟通道是否连通&lt;/p&gt;
&lt;p&gt;# ping 10.1.0.2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094823822-596245262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;# ping 10.1.0.1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094824025-206982930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;5、通过仅主机网桥连通宿主机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）在宿主机上的br-c1-and-c2 网桥，添加虚拟机网段的地址&lt;/p&gt;
&lt;p&gt;① 每创建一个虚拟主机，都会有另一半在宿主机上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094824540-342559130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② [root@master ~]# ip addr add &lt;strong&gt;10.1.0.10/16&lt;/strong&gt; dev &lt;strong&gt;br-c1-and-c2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[root@master ~]# ip a show br-c1-and-c2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094825134-489925542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）测试仅主机网桥&lt;/p&gt;
&lt;p&gt;# ping 10.1.0.10 在虚拟机上ping&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094825306-2027216852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;6、通过NAT 网桥实现NAT 模式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）在宿主机上开启路由转发功能&lt;/p&gt;
&lt;p&gt;[root@master ~]# sysctl -w net.ipv4.ip_forward=1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094825619-125917054.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）在2个虚拟机上添加路由&lt;/p&gt;
&lt;p&gt;# route add default gw 10.1.0.10&lt;/p&gt;
&lt;p&gt;# ping 172.16.1.7 发现ping 宿主机的另一块网卡能ping 通了，因为内核机制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094825900-1137959123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;# ping 172.16.0.1 但是外网还是ping不同，原因：宿主机上只有出包，没有进包&lt;/p&gt;
&lt;p&gt;[root@master ~]# tcpdump -i eth1 -nn icmp 只有出包，没有进包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094826197-922407665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）做SNAT 策略&lt;/p&gt;
&lt;p&gt;[root@master ~]# iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 172.16.1.7&lt;/p&gt;
&lt;p&gt;[root@master ~]# iptables -vnL -t nat 查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094826540-94415485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）测试NAT 网桥&lt;/p&gt;
&lt;p&gt;① 在宿主机上ping 外网&lt;/p&gt;
&lt;p&gt;# ping 172.16.0.1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094826790-150681082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 宿主机也有回包了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094827087-1708095743.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;7、关闭虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;① 在虚拟机上poweroff&lt;/p&gt;
&lt;p&gt;# poweroff 关机&lt;/p&gt;
&lt;p&gt;② 在宿主机上杀死进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094827462-336577386.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;实战四：命令行工具virt 创建虚拟机及命令管理虚拟机&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、创建前准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）准备cirros 镜像文件&lt;/p&gt;
&lt;p&gt;[root@master imgs]# yum install libvirt-daemon-kvm virt-install -y&lt;/p&gt;
&lt;p&gt;[root@master ~]# mkdir -pv /data/imgs/&lt;/p&gt;
&lt;p&gt;[root@master ~]# cp cirros-no_cloud-i386.img /data/imgs/c1.img&lt;/p&gt;

&lt;p&gt;（2）创建物理网桥br0&lt;/p&gt;
&lt;p&gt;[root@master imgs]# brctl addbr br0 创建网桥接口&lt;/p&gt;
&lt;p&gt;[root@master imgs]# ifconfig br0 up 激活网桥&lt;/p&gt;
&lt;p&gt;[root@master imgs]# brctl show&lt;/p&gt;

&lt;p&gt;（3）把br0 网桥连接到eth0 网卡上&lt;/p&gt;
&lt;p&gt;[root@master ~]# systemctl start libvirtd.service&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh iface-bridge eth0 br0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094827947-90972170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、创建虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;[root@master imgs]# virt-install -n c1 --vcpus 2 --memory 64 -w bridge=br0 --import --disk /data/imgs/c1.img &lt;strong&gt;--dry-run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virt-install -n c1 --vcpus 2 --memory 64 -w bridge=br0 --import --disk /data/imgs/c1.img&lt;/p&gt;
&lt;p&gt;分析：--dry-run 先干跑，测试一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094828259-487529188.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、virsh命令详解，下有实例&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
（&lt;span&gt;1&lt;/span&gt;&lt;span&gt;）virsh命令：
虚拟机的生成需要依赖于预定义的xml格式的配置文件；其生成工具有两个：virt&lt;/span&gt;-manager, virt-&lt;span&gt;install&lt;/span&gt;&lt;span&gt;； 
virsh [OPTION]... COMMAND [ARG]..
子命令的分类：
    Domain Management (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   域管理(帮助关键字“域”)
    Domain Monitoring (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;monitor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   域监视(帮助关键字“监视器”)
    Host and Hypervisor (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   主机和管理程序(帮助关键字“主机”)
    Interface (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   接口(帮助关键字“接口”)
    Networking (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   网络(帮助关键字“网络”)
    Network Filter (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   网络过滤器(帮助关键字“过滤器”)
    Snapshot (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;snapshot&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   快照(帮助关键字“快照”)
    Storage Pool (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pool&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   存储池(help关键字“池”)
    Storage Volume (help keyword &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;volume&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   存储卷(帮助关键字“卷”)
                
（&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;）域管理 Domain Management (help keyword &lt;span&gt;'&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
创建虚拟机：
　　create：从xml格式的配置文件创建并启动虚拟机；
　　define：从xml格式的配置文件创建虚拟机；
停止：
　　destroy：强行关机、拔电源；
　　shutdown：关机；
start：启动
reboot：重启；
undefine：删除虚拟机；
suspend&lt;/span&gt;/&lt;span&gt;resume：暂停于内存中，或继续运行暂停状态的虚拟机；真正实现的效果：pause&lt;/span&gt;/&lt;span&gt;unpause
save&lt;/span&gt;/restore：挂起/&lt;span&gt;继续；保存虚拟机的当前状态至文件中，或从指定文件恢复虚拟机；
console：连接至指定domain的控制台；
                    
（&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;）域的设备资源管理：
① cpu
　　cpu&lt;/span&gt;-&lt;span&gt;stats     查看cpu 信息
　　vcpuinfo      查看vcpu 信息
　　vcpucount     看有几个cpu
　　setvcpus   可以调整cpu数（如果是调整的是动态的，在创建虚拟机时设置，静态的不行）
　　vcpupin    把vcpu 绑定到真正的cpu 上
② memcache                        
　　setmaxmem   修改最大内存（创建虚拟机时设置的是否可以修改）
　　setmem   修改内存大小（没超过上限时）
③ 设备                       
　　attach&lt;/span&gt;-disk/detach-&lt;span&gt;disk：磁盘设备的热插拔；
　　domblklist：查询虚拟机的磁盘设备
　　attach&lt;/span&gt;-interface/detach-&lt;span&gt;interface：网络接口设备的热插拔；
　　domiflist：查询虚拟机的网卡设备&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;4、virsh命令演示&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）简单查询&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virsh list 列出所有正在开启running 的虚拟机&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virsh list --all 列出所有的虚拟机，包括关机的、没运行的&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virsh 交互式执行命令&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virsh nodeinfo 查询信息&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virsh uri 查询uri 路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094828587-1772790858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）连接虚拟机&lt;/p&gt;
&lt;p&gt;[root@master imgs]# virsh &lt;strong&gt;console&lt;/strong&gt; c1 连接至c1 虚拟机的控制台&lt;/p&gt;
&lt;p&gt;# ping 172.16.0.1 因为物理桥已经连接到了网卡，所以有地址，且能ping 通外网&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094829056-367283621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）删除虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh destroy c1 先关掉虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh undefine c1 在删除虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# ls /etc/libvirt/qemu/ .xml 文件被删除&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh list --all 查询不到c1 虚拟机，删除成功&lt;/p&gt;

&lt;p&gt;（4）暂停和挂起虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh suspend c1 暂停虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh resume c1 恢复暂停&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh save /app/c1.bin 挂起虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh restore /app/c1.bin 恢复挂起&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094829415-1944656533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）域设备资源管理查询&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh cpu-stats c1 查看cpu 信息&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh vcpuinfo c1 查看vcpu 信息&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh vcpucount c1 看有几个cpu&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094829900-1921785421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;5、利用已有的虚拟机配置文件，创建一个新的虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;原理：利用已下好的虚拟机，用命令把创建虚拟机的过程生成一个.xml的文件，利用这个文件创建新的虚拟机&lt;/p&gt;
&lt;p&gt;（1）生成.xml的文件&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh dumpxml c1 &amp;gt; /app/c2.xml&lt;/p&gt;
&lt;p&gt;[root@master ~]# vim /app/c2.xml   需要修改的，都在下面列出了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;domain type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kvm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
  &amp;lt;name&amp;gt;c2&amp;lt;/name&amp;gt;&lt;span&gt;   #名字
  &lt;/span&gt;&amp;lt;uuid&amp;gt;7303d4d3-b8d2-4e22-aac8-feb881882a73&amp;lt;/uuid&amp;gt;&lt;span&gt;  #UUID随便改，只要不相同
&lt;/span&gt;&amp;lt;source &lt;span&gt;file&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/data/imgs/c2.img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;&lt;span&gt;   #镜像文件
&lt;/span&gt;&amp;lt;mac address=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;52:54:00:52:10:34&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;&lt;span&gt;   #mac随便改，只要不相同
      &lt;/span&gt;&amp;lt;source bridge=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;br0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;&lt;span&gt;   #桥接的网桥
      &lt;/span&gt;&amp;lt;target dev=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vnet1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/&amp;gt;   #默认的后端设备
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）创建新的虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh create /app/c2.xml --console&lt;/p&gt;
&lt;p&gt;注：--console 直接连接虚拟机，或不加；再用下边的命令连接虚拟机&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh console c2&lt;/p&gt;

&lt;p&gt;（3）检查&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh list 已有2个虚拟机了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094830134-297617458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）把.xml 文件放入/etc/libvirt/qemu&lt;/p&gt;
&lt;p&gt;[root@master ~]# ls /etc/libvirt/qemu&lt;/p&gt;
&lt;p&gt;[root@master ~]# cp /app/c2.xml /etc/libvirt/qemu/&lt;/p&gt;
&lt;p&gt;用virsh 自动启动等各种高级设置了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094830306-1956531139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;6、c1 虚拟机磁盘设备的热插拔&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）创建10G 大小稀疏格式的磁盘映像文件&lt;/p&gt;
&lt;p&gt;[root@master ~]# qemu-img create -f qcow2 -o preallocation=metadata,size=10G /data/imgs/c1.2.img&lt;/p&gt;
&lt;p&gt;[root@master ~]# qemu-img info /data/imgs/c1.2.img 查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094830650-1324484636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）把磁盘设备加到c1 上&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh domblklist c1 查看c1 已有的磁盘设备&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh attach-disk c1 /data/imgs/c1.2.img vda&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094830994-1065118357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）连接至虚拟机，可以对这个磁盘做分区、文件系统格式化、挂载等操作&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh console c1&lt;/p&gt;
&lt;p&gt;# fdisk /dev/vda&lt;/p&gt;
&lt;p&gt;# fdisk -l /dev/vda1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094831447-1739472196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）把磁盘设备拔掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094831634-216996124.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;7、网卡的热插拔&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）在宿主机上添加一个新的物理桥&lt;/p&gt;
&lt;p&gt;[root@master ~]# brctl addbr br-int0&lt;/p&gt;
&lt;p&gt;[root@master ~]# ifconfig br-int0 up&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094832134-784127973.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）激活网桥，给ip&lt;/p&gt;
&lt;p&gt;[root@master ~]# ip addr add 10.1.0.254/16 dev br-int0&lt;/p&gt;
&lt;p&gt;[root@master ~]# ifconfig br-int0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094832400-998157489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）给c1 虚拟机插上这个网卡设备 ---&amp;gt; &quot;热插&quot;&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh attach-interface c1 bridge br-int0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094832712-2055254899.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）连接至虚拟机，激活网卡&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh console c1&lt;/p&gt;
&lt;p&gt;# ifconfig eth1 10.1.0.1/16 up&lt;/p&gt;
&lt;p&gt;# ping 10.1.0.254 ping宿主机，测试是否生效&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094833353-1036771913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh domiflist c1 查询虚拟机的网卡设备&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094833634-1920349637.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）拆除网卡 ---&amp;gt; &quot;热拔&quot;&lt;/p&gt;
&lt;p&gt;# ifconfig eth1 down&lt;/p&gt;
&lt;p&gt;[root@master ~]# virsh detach-interface c1 bridge --mac 52:54:00:5b:d8:04&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226094833853-803672248.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;实战五：推荐几个图形化管理虚拟机的工具&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;（1）图形管理工具：&lt;/p&gt;
&lt;p&gt;　　kimchi：基于H5研发的web GUI；virt-king； 网上搜索kimchi kvm 有安装使用教程&lt;/p&gt;
&lt;p&gt;　　OpenStack：IaaS 非常重量级，非常吃资源；至少10台以上的虚拟机才用它&lt;/p&gt;
&lt;p&gt;　　oVirt：比kimchi 功能强大的多，比OpenStack轻量；但配置也较麻烦&lt;/p&gt;
&lt;p&gt;　　proxmox VE&lt;/p&gt;
&lt;p&gt;（2）kvm 官方的管理工具栈：https://www.linux-kvm.org/page/Management_Tools&lt;/p&gt;

</description>
<pubDate>Tue, 26 Dec 2017 02:15:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/8116509.html</dc:identifier>
</item>
</channel>
</rss>