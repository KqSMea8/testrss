<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【java】对jdbc操作结果简单的映射封装 - 早起的虫儿去吃鸟</title>
<link>http://www.cnblogs.com/yeyeck/p/9532688.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeyeck/p/9532688.html</guid>
<description>&lt;p&gt;1. 对jdbc做一个简单的封装，select可以返回一个javabean对象，而不是resultset。主要用了反射。这是我之前写的代码，做了简单的修改。&lt;/p&gt;
&lt;p&gt;　　实现功能：a.对数据库的基本操作 增删改查&lt;/p&gt;
&lt;p&gt;　　　　　　　b.对查询的单条记录返回一个指定类型的javabean对象，利用java反射，jdbc ResultSet类和ResultSetMetaData类&lt;/p&gt;
&lt;p&gt;　　　　　　　c. 对查到的结果集返回一个List， 泛型&lt;/p&gt;
&lt;p&gt;　　数据源：用到的 数据库连接池是我自己简单实现的一个连接池：&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/yeyeck/p/9532603.html&quot;&gt;【java】简单实现数据库连接池&lt;/a&gt;，主要为了后续实现事务的简单实现&lt;/p&gt;
&lt;p&gt;　　用到的java知识 ： 反射，泛型，jdbc&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;import&lt;/span&gt;&lt;span&gt; com.yeyeck.noob.ConnectionPollImpl;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.yeyeck.noob.IConnectionPool;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Field;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationTargetException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.sql.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DBUtil {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; excuteUpdate(String sql, Object... objects) {
        IConnectionPool connectionPool &lt;/span&gt;=&lt;span&gt; ConnectionPollImpl.getInstance();
        Connection connection &lt;/span&gt;=&lt;span&gt; connectionPool.getConnection();
        PreparedStatement preparedStatement &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            preparedStatement &lt;/span&gt;=&lt;span&gt; getStateMent(connection, sql, objects);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; preparedStatement.executeUpdate(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行sql并返回结果&lt;/span&gt;
        } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (preparedStatement != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    preparedStatement.close();
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
                    e.printStackTrace();
                }
            }

        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 查询单条记录
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sql  查询语句
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; clazz 返回对象的class
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; objects 需要的参数，必须跟sql占位符的位置一一对应
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;   泛型返回
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;      返回单个对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T queryForObject(String sql, Class&amp;lt;T&amp;gt;&lt;span&gt; clazz, Object... objects) {
        IConnectionPool connectionPool &lt;/span&gt;=&lt;span&gt; ConnectionPollImpl.getInstance();
        Connection connection &lt;/span&gt;=&lt;span&gt; connectionPool.getConnection();
        PreparedStatement preparedStatement &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ResultSet resultSet &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        T object &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            preparedStatement &lt;/span&gt;=&lt;span&gt; getStateMent(connection, sql, objects);
            resultSet &lt;/span&gt;=&lt;span&gt; getResultSet(preparedStatement);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (resultSet.next()) {
                object &lt;/span&gt;=&lt;span&gt; invokeObject(resultSet, clazz);
            }

        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (SQLException | IllegalAccessException |&lt;span&gt; InstantiationException
                &lt;/span&gt;| NoSuchFieldException | NoSuchMethodException |&lt;span&gt; InvocationTargetException e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            close(preparedStatement, resultSet); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记得关闭&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *查询多条记录
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sql  查询语句
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; clazz 返回对象的class
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; objects 需要的参数，必须跟sql占位符的位置一一对应
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;   泛型返回
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; list
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; queryForList(String sql, Class&amp;lt;T&amp;gt;&lt;span&gt; clazz, Object... objects) {
        IConnectionPool connectionPool &lt;/span&gt;=&lt;span&gt; ConnectionPollImpl.getInstance();
        Connection connection &lt;/span&gt;=&lt;span&gt; connectionPool.getConnection();
        PreparedStatement preparedStatement &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        ResultSet resultSet &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;T&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            preparedStatement &lt;/span&gt;=&lt;span&gt; getStateMent(connection, sql, objects);
            resultSet &lt;/span&gt;=&lt;span&gt; getResultSet(preparedStatement);
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (resultSet.next()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用 invokeObject方法，把一条记录封装成一个对象，添加到list中&lt;/span&gt;
&lt;span&gt;                list.add(invokeObject(resultSet, clazz));
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; (SQLException | IllegalAccessException |&lt;span&gt; InstantiationException
                &lt;/span&gt;| NoSuchFieldException | NoSuchMethodException |&lt;span&gt; InvocationTargetException e) {
            e.printStackTrace();
        }  &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            close(preparedStatement, resultSet);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; list.size() &amp;gt; 0 ? list : &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    }


    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; close(PreparedStatement preparedStatement, ResultSet resultSet) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(resultSet != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                resultSet.close();
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (preparedStatement != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                preparedStatement.close();

            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {
            e.printStackTrace();
        }
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 把数据库中的一条记录通过反射包装成相应的Bean
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; resultSet
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; clazz
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; &amp;lt;T&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IllegalAccessException
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; InstantiationException
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; SQLException
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; NoSuchFieldException
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; NoSuchMethodException
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; InvocationTargetException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T invokeObject(ResultSet resultSet, Class&amp;lt;T&amp;gt; clazz) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IllegalAccessException, InstantiationException,
            SQLException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException {
        T object &lt;/span&gt;=&lt;span&gt; clazz.getDeclaredConstructor().newInstance();
        ResultSetMetaData metaData &lt;/span&gt;=&lt;span&gt; resultSet.getMetaData();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0, count = metaData.getColumnCount(); i &amp;lt; count; i++&lt;span&gt;) {
            String columnName &lt;/span&gt;= metaData.getColumnName(i + 1);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库返回结果的列名&lt;/span&gt;
            String fieldName = StringUtil.camelName(columnName); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;去掉列名中的下划线“_”并转为驼峰命名&lt;/span&gt;
            Field field = clazz.getDeclaredField(fieldName);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据字段名获取field&lt;/span&gt;
            String methName = setMethodName(fieldName);         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;拼set方法名&lt;/span&gt;
            Class type = field.getType();                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取字段类型&lt;/span&gt;
            Method setMethod =&lt;span&gt; clazz.getDeclaredMethod(methName, field.getType());
            Object value &lt;/span&gt;= resultSet.getObject(i + 1);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取字段值&lt;/span&gt;
            setMethod.invoke(object, type.cast(value));       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;强转并且赋值&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; PreparedStatement getStateMent(Connection connection, String sql, Object... objects) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {

        PreparedStatement preparedStatement &lt;/span&gt;=&lt;span&gt; connection.prepareStatement(sql);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0, len = objects.length; i &amp;lt; len; i++&lt;span&gt;) {
            preparedStatement.setObject(i &lt;/span&gt;+ 1, objects[i]);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;给sql每个？占位符填上数据&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; preparedStatement;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ResultSet getResultSet(PreparedStatement statement) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (statement == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; statement.executeQuery();
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String setMethodName(String str) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;set&quot; +&lt;span&gt; StringUtil.firstUpperCase(str);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中用到的StringUtil的几个方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StringUtil {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 转为驼峰命名
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; str
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; string
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String camelName(String str) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isEmpty(str)) {
            StringBuilder stringBuilder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0, len = str.length(); i &amp;lt; len; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (str.charAt(i) == '_'&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (str.charAt(i + 1) == '_'&lt;span&gt;) {
                        i&lt;/span&gt;++&lt;span&gt;;
                    }
                    stringBuilder.append((&lt;/span&gt;&quot;&quot; + str.charAt(++&lt;span&gt;i)).toUpperCase());
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    stringBuilder.append(str.charAt(i));
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; stringBuilder.toString();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判断是否为空串
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; str
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isBlank(String str) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (str != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; str.length() &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0, len = str.length(); i &amp;lt; len; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Character.isSpaceChar(str.charAt(i))) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判断是否为空串 ？！！！ 我怎么又写了个一样的方法？！！！
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; str
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isEmpty(String str) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; str == &lt;span&gt;null&lt;/span&gt; || str.length() == 0&lt;span&gt;;
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 将第一个字母替换为大写
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; str
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String firstUpperCase(String str) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; str.substring(0, 1).toUpperCase() + str.substring(1&lt;span&gt;, str.length());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;1.测试用到的表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `t_user` (
  `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `username` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `age` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8 &lt;span&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1213881/201808/1213881-20180825024407488-1717604015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DBUtilTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {


        List&lt;/span&gt;&amp;lt;User&amp;gt; users1 = DBUtil.queryForList(&quot;select * from t_user&quot;, User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        System.out.println(users1);

        User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user.setUsername(&lt;/span&gt;&quot;刘能&quot;&lt;span&gt;);
        user.setAge(&lt;/span&gt;12&lt;span&gt;);
        String sql1 &lt;/span&gt;= &quot;insert into `t_user`(username, age) values (?, ?)&quot;&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;insert 语句测试返回结果：&quot; +&lt;span&gt; DBUtil.excuteUpdate(sql1, user.getUsername(), user.getAge()));
        List&lt;/span&gt;&amp;lt;User&amp;gt; users2 = DBUtil.queryForList(&quot;select * from t_user&quot;, User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        System.out.println(users2);

        String sql2 &lt;/span&gt;= &quot;delete from t_user where id = ?&quot;&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;delete 语句测试返回结果：&quot; + DBUtil.excuteUpdate(sql2, 3&lt;span&gt;));

        String sql3 &lt;/span&gt;= &quot;update t_user set age = ? where id = ?&quot;&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;update 语句测试返回结果：&quot; + DBUtil.excuteUpdate(sql3, 100, 1&lt;span&gt;));

        String sql4 &lt;/span&gt;= &quot;select * from t_user where id = ?&quot;&lt;span&gt;;
        User user2 &lt;/span&gt;= DBUtil.queryForObject(sql4, User.&lt;span&gt;class&lt;/span&gt;, 2&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;select 语句测试返回结果: &quot; +&lt;span&gt; user2 );
        List&lt;/span&gt;&amp;lt;User&amp;gt; users3 = DBUtil.queryForList(&quot;select * from t_user&quot;, User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        System.out.println(users3);


    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
[User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;100&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小红&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;15&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;4&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小二&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;12&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;刘能&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;12&lt;/span&gt;&lt;span&gt;}]
insert 语句测试返回结果：&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
[User{&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;100&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小红&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;15&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;4&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小二&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;12&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;刘能&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;12&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;6&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;二蛋&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;99&lt;/span&gt;&lt;span&gt;}]
delete 语句测试返回结果：&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
update 语句测试返回结果：&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;select&lt;/span&gt; 语句测试返回结果: User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小红&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;15&lt;/span&gt;&lt;span&gt;}
[User{&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小明&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;20&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小红&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;15&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;4&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;小二&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;12&lt;/span&gt;}, User{&lt;span&gt;id&lt;/span&gt;=&lt;span&gt;6&lt;/span&gt;, username=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;二蛋&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=&lt;span&gt;99&lt;/span&gt;}]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据库数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1213881/201808/1213881-20180825024655573-532244219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 24 Aug 2018 18:55:00 +0000</pubDate>
<dc:creator>早起的虫儿去吃鸟</dc:creator>
<og:description>1. 对jdbc做一个简单的封装，select可以返回一个javabean对象，而不是resultset。主要用了反射。这是我之前写的代码，做了简单的修改。 实现功能：a.对数据库的基本操作 增删改查</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeyeck/p/9532688.html</dc:identifier>
</item>
<item>
<title>11.0  获取手机验证码 - 佬贰</title>
<link>http://www.cnblogs.com/pythontest/p/9532652.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythontest/p/9532652.html</guid>
<description>&lt;p&gt;&lt;span&gt;在我们刚学&lt;/span&gt;ui&lt;span&gt;自动化的时候，基本上所有的人都会在获取验证码这一块有那么一个梗，卡在这里，很不得劲——————————————&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;因为我们几乎都是从登录注册开始&lt;/span&gt;....遇到的第一个难题就是验证码....&lt;/p&gt;
&lt;p&gt; &lt;span&gt;其实获取验证码只是一个基本操作&lt;/span&gt;...&lt;span&gt;我们不需要太在意&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;直接让开发弄个万能验证码就可以了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;当然有些变态的伙计，非的处理这个验证码，不然吃嘛嘛不香&lt;/span&gt;--------&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以本章说一下&lt;/span&gt;，&lt;span&gt;获取手机短信验证码的基本操作&lt;/span&gt;.....&lt;span&gt;当然如有图形验证码直接让开发撸掉吧&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;因为这个东西本来就是防止自动化操作的&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;与其花费时间研究这个&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;不如去看两部电影&lt;/span&gt;&lt;span&gt;....&lt;/span&gt;&lt;span&gt;就当假装已经搞定了&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;1.python&lt;span&gt;链接&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825004148928-606651804.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825004216834-327672286.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825004300645-1612930634.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Install &lt;span&gt;即可！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825004356780-600334135.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查询&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; selectSQL(sql):
    db &lt;/span&gt;= pymysql.connect(host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, port=端口号int类型, user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                         db&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据库名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    cursor &lt;/span&gt;=&lt;span&gt; db.cursor()  
    cursor.execute(sql)  
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; cursor.fetchall()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;或者cursor.fetone()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;span&gt;比如现在有一个表：&lt;/span&gt;user&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;查询语句为：&lt;/span&gt; a=select *  from user where sex=”&lt;span&gt;女&lt;/span&gt;”&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;id&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;name&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;age&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;city&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;sex&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;张三&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;17&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;深圳&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;女&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;李四&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;18&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;北京&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;女&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;王五&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;17&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;上海&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;女&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;麻六&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;18&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;柬埔寨&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p align=&quot;justify&quot;&gt;女&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;取值【常用】方式一共有两种：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;第一种&lt;/span&gt; fetchone-----&lt;span&gt;他是你每次取值只返回一个元组，查询返回（&lt;/span&gt;&lt;span&gt;1.&lt;/span&gt;”&lt;span&gt;张三&lt;/span&gt;”,17,”&lt;span&gt;深圳&lt;/span&gt;”,”&lt;span&gt;女&lt;/span&gt;”&lt;span&gt;）&lt;/span&gt;,&lt;span&gt;执行&lt;/span&gt;&lt;span&gt;selectSql(a)  &lt;/span&gt;&lt;span&gt;他只会返回第一条数据！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　修改脚本：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; selectSQL(sql):
    db &lt;/span&gt;= pymysql.connect(host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, port=3116, user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,db=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据库名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    cursor &lt;/span&gt;= db.cursor()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;面向对象  创建一个游标对象&lt;/span&gt;
    cursor.execute(sql)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行sql语句，返回一个值——他会直接返回一个值，所以不需要db.commit()&lt;/span&gt;
    M=Cursor.fetchone()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;取出第一条数据&lt;/span&gt;
    N=Cutsor.fetchone()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;取出第二条数据&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; M,N  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回M,N的值&lt;/span&gt;
   
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;所以它针对少量取值---讲道理不是写博客--这个方法我几乎快忘了..我几乎没用过&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;第二种方式：&lt;/span&gt;fetchall  ,&lt;span&gt;顾名思义&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;取出所有的&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;  Selectall(a)&lt;span&gt;之后&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;取出来的结果是一个二维素组&lt;/span&gt;...&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;　　格式：mary=((1.”&lt;span&gt;张三&lt;/span&gt;”,17,”&lt;span&gt;深圳&lt;/span&gt;”,”&lt;span&gt;女&lt;/span&gt;”),(2,xxxxxx),(3,xxx),(),(4,xxxx))&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　　　因此在用到这个二维数组的时候需要而外的处理一下如：mary[0][1]的值是张三---把元组当做列表取值就可以了！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;上面说的是查询，如果是增删改呢&lt;/span&gt;---&lt;span&gt;加一个&lt;/span&gt;&lt;span&gt;db.commit()&lt;/span&gt;&lt;span&gt;需要提交一下！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825012310106-1503834363.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;因为增删改是修改数据库&lt;/span&gt;...&lt;span&gt;万一&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;语句执行失败了，肯定是要回滚，所以需要回滚一下！完整的增删改方法，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;代码：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; selectSQL(sql):
    db &lt;/span&gt;= pymysql.connect(host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, port=3116, user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;账号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, password=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                         db&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据库名称&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    cursor &lt;/span&gt;=&lt;span&gt; db.cursor()  
    cursor.execute(sql) 
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        db.commit() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;提交&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
        db.rollback() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;回滚&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;另外&lt;/span&gt;...&lt;span&gt;为什么这里没有&lt;/span&gt;&lt;span&gt;db.close()&lt;/span&gt;&lt;span&gt;关闭数据库链接呢&lt;/span&gt;&lt;span&gt;，我主要是看数据库的连接池的最大值是多少...&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;---我自己封装的方法就没有&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;所以复制过来的方法也没有--&lt;/span&gt;&lt;span&gt;....&lt;/span&gt;&lt;span&gt;不过建议大家在最后加上一个&lt;/span&gt;&lt;span&gt;db.close()&lt;/span&gt;&lt;span&gt;关闭数据库链接&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;某些小公司验证码可能是放在数据库，所以直接链接数据库取就好了！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;如果公司是用的&lt;/span&gt;redis&lt;span&gt;数据库的话，那么你就下载一个&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;客户端，并完成安装&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;下载地址：链接：&lt;/span&gt;https://pan.baidu.com/s/16WLMwZ5a5gVF4vFU4yy6Dg &lt;span&gt;密码：&lt;/span&gt;&lt;span&gt;9s6w&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　安装redis，傻瓜式操作...就不截图了..&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　第一步，　　redis客户端连接服务器&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825010750539-744563758.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　　　然后任意输入名称，指定的&lt;/span&gt;host&lt;span&gt;地址，端口号，&lt;/span&gt;&lt;span&gt;auth&lt;/span&gt; &lt;span&gt;密码，有则填写，无责点击&lt;/span&gt; &lt;span&gt;test connection&lt;/span&gt; &lt;span&gt;测试链接&lt;/span&gt;&lt;span&gt;....&lt;/span&gt;&lt;span&gt;链接成功之后 ，点击&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;即可&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825010841977-1321017770.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第二步，pycharm安装redis库， 和安装PyMySql一样&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825011004807-1438527005.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;python连接redis方法：&lt;span&gt;如果&lt;/span&gt;redis&lt;span&gt;无密码，就不要红色区域标识的这两个&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825011048901-2134985868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;如：获取验证码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825011156914-1586429786.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;如图所示，这个地方就是&lt;/span&gt;key....下图可以看到..我们已经把验证码取出来了对吧....所以在进行ui自动化的时候我们直接用就可以了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180825011234928-1288852738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;然后我们看到我取出来的这个玩意是个啥&lt;/span&gt;.......&lt;span&gt;“双层冰激凌” 竟然是字符串内嵌字符串&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;这个是开发存的问题&lt;/span&gt;&lt;span&gt;....&lt;/span&gt;&lt;span&gt;直接&lt;/span&gt;&lt;span&gt;eval(&lt;/span&gt;&lt;span&gt;取出来的这个值就可以了&lt;/span&gt;&lt;span&gt;)....&lt;/span&gt;&lt;span&gt;如果开发存的是&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;你取出来的就是一个单纯的字符串，直接用就好了！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;是不是基本操作&lt;/span&gt;........&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;另外最后在插上一嘴：   开发可能把不同模块的验证码放到redis不同的目录下....所有可能导致  不同模块的key是不同的  例如：修改密码时的短信验证码和注册时的短信验证码  key会不一样！&lt;/p&gt;



&lt;p&gt;&lt;img id=&quot;uploading_image_39819&quot; src=&quot;https://common.cnblogs.com/images/loading.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 24 Aug 2018 17:25:00 +0000</pubDate>
<dc:creator>佬贰</dc:creator>
<og:description>在我们刚学ui自动化的时候，基本上所有的人都会在获取验证码这一块有那么一个梗，卡在这里，很不得劲—————————————— 因为我们几乎都是从登录注册开始....遇到的第一个难题就是验证码....</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythontest/p/9532652.html</dc:identifier>
</item>
<item>
<title>UML时序图学习 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9532629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9532629.html</guid>
<description>&lt;h3 id=&quot;定义&quot;&gt;定义&lt;/h3&gt;
&lt;p&gt;时序图主要用于展示对象之间交互的顺序。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;时序图将交互关系表示为一个二维图。纵向是时间轴，时间沿竖线向下延伸。横向轴代表了在协作中各独立对象的类元角色。类元角色用生命线表示。当对象存在时，角色用一条虚线表示，当对象的过程处于激活状态时，生命线是一个双道线。消息用从一个对象的生命线到另一个对象生命线的箭头表示。箭头以时间顺序在图中从上到下排列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;对象object和生命线lifeline&quot;&gt;对象（Object）和生命线（lifeline）&lt;/h3&gt;
&lt;p&gt;生命线头上那个方正的框里面存放的就是对象，对象有自己的名字.&lt;br/&gt;生命线其实就是从上到下的一个虚线。生命线标示一个对象存在的生命周期.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825002130.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;消息message&quot;&gt;消息（Message）&lt;/h3&gt;
&lt;p&gt;消息用于对象间传递信息，对象之间的信息交互就是通过消息，消息按照分类可分为：同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message） 自关联消息（Self-Message）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825003615.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每天上班坐公交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825003251.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;组合片段combined-fragments&quot;&gt;组合片段（Combined Fragments）&lt;/h3&gt;
&lt;p&gt;标示有一定条件的消息发送，&lt;/p&gt;
&lt;h4 id=&quot;alternative-fragmentdenoted-alt-标示-ifthenelse&quot;&gt;Alternative fragment（denoted “alt”） 标示 if…then…else&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825004851.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;option-fragment-denoted-opt-标示switch&quot;&gt;Option fragment (denoted “opt”) 标示Switch&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825005012.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;parallel-fragment-denoted-par-标示同时发生&quot;&gt;Parallel fragment (denoted “par”) 标示同时发生&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825005137.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;loop-fragmentdenoted-loop-标示for&quot;&gt;Loop fragment(denoted “loop”) 标示for&lt;/h4&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;当没有指定循环边界默认范围为[0,无穷大]：&lt;br/&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825005229.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;指定了循环边界,则最少执行最小值值，最多执行最大值次数：&lt;br/&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825005256.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;break标示退出循环&quot;&gt;Break标示退出循环&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825005542.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;实例演示&quot;&gt;实例演示&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20180825010054.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 24 Aug 2018 17:03:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>时序图主要用于展示对象之间交互的顺序。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9532629.html</dc:identifier>
</item>
<item>
<title>【从零开始自制CPU之学习篇04】电容 - 闪客sun</title>
<link>http://www.cnblogs.com/flashsun/p/9532611.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flashsun/p/9532611.html</guid>
<description>&lt;p&gt;&lt;strong&gt;电解电容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　多数在1μF以上，直接用数字表示。如：4.7μF、100μF、220μF等等。这种电容的两极有正负之分，长脚是正极。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1096103/201808/1096103-20180825004908472-277885185.png&quot; alt=&quot;&quot; width=&quot;222&quot; height=&quot;104&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;独石电容：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　独石电容器是多层陶瓷电容器的别称， 简称MLCC&lt;/p&gt;
&lt;p&gt;　　读数方法：把&quot;色环表示法&quot;用到电容上来：这又是一种巧妙的演绎！我们在一些瓷片电容上往往看到这样的标记：&quot;103&quot;，&quot;104&quot;，&quot;473&quot;等，这里，第三个数字（个位数字）并非通常理解的个位数，它和四色环电阻的第三环一样，告诉人们前两位数字后面&quot;添加零的个数&quot;；这样，103就是10000，104就是100000，473就是47000，单位默认pF。换算一下，103＝0.01uF,104＝0.1uF，473＝0.047uF。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1096103/201808/1096103-20180825005033348-1247172601.png&quot; alt=&quot;&quot; width=&quot;176&quot; height=&quot;176&quot;/&gt;&lt;/p&gt;

&lt;p&gt;PS：电容作用不说了，只记得学过的隔直通交了。。。在前几篇写555定时器时用到了电容，起到了一个储存电荷不断充放电的作用。&lt;/p&gt;
</description>
<pubDate>Fri, 24 Aug 2018 16:51:00 +0000</pubDate>
<dc:creator>闪客sun</dc:creator>
<og:description>电解电容： 多数在1μF以上，直接用数字表示。如：4.7μF、100μF、220μF等等。这种电容的两极有正负之分，长脚是正极。 独石电容： 独石电容器是多层陶瓷电容器的别称， 简称MLCC 读数方法</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/flashsun/p/9532611.html</dc:identifier>
</item>
<item>
<title>JSON模板引擎--artTemplate - binbinlin</title>
<link>http://www.cnblogs.com/linqb/p/9532552.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linqb/p/9532552.html</guid>
<description>&lt;p&gt; 通常情况下，在我们使用ajax请求数据获得一个json格式的响应体，并且要将获得的相应数据填充到HTML页面上的时候，可能需要自己拼接字符串，这样比较麻烦，而使用模板引擎就可以帮我们省却自己拼接字符串的过程。&lt;/p&gt;
&lt;p&gt;使用模板引擎其实就是预先写好HTML结构代码，然后调用模板引擎第三方库，自动把数据填充到这个HTML里。&lt;/p&gt;
&lt;p&gt;今天要介绍的是artTemplate这款模板框架，下载地址：https://github.com/aui/art-template，下载完成之后解压，然后找到 lib 文件夹，把里面的 template-web.js 文件放到你的项目目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357385/201808/1357385-20180824232321016-1152637513.png&quot; alt=&quot;&quot; width=&quot;352&quot; height=&quot;164&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357385/201808/1357385-20180824232537646-240366965.png&quot; alt=&quot;&quot; width=&quot;278&quot; height=&quot;158&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357385/201808/1357385-20180824232629364-1628236215.png&quot; alt=&quot;&quot; width=&quot;406&quot; height=&quot;151&quot;/&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;1. 基本使用&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;1.1 准备一个模板&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;xxxx&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;tpl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        我叫&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span&gt; name &lt;/span&gt;&lt;span&gt;%&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;span&amp;gt;，今年&amp;lt;span&amp;gt;&amp;lt;%= age %&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;岁了
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;p&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;        
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;说明：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;1&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;要用script标签，必须给type属性，但是值可以随便写，只要不是 &lt;span&gt;&lt;code&gt;text/javascript&lt;/code&gt; &lt;span&gt;就可以，但是我们一般写 &lt;code&gt;text/html&lt;/code&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;必须要给这个script标签加 id&lt;span&gt;&lt;span&gt; ，因为后面需要找到标签内的模板&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;模板里就是未来想显示的html代码，只是里面有些值不能写死，要根据json数据来填充，所以把不写死的数据用 &lt;span&gt;&lt;code&gt;&amp;lt;%= 属性名 %&amp;gt;&lt;/code&gt; &lt;span&gt;包起来&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;1.2 导入框架&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./template-web.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;1.3 填充模板&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;JSON字符串转化为对象&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; JSON.parse(xhr.responseText);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到tpl，并用obj对象填充,填充后的结果是一段html代码&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; html = template('tpl'&lt;span&gt;,obj);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印看结果&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; console.log(html);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357385/201808/1357385-20180824234004870-1689920361.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1357385/201808/1357385-20180824235735024-2055087726.png&quot; alt=&quot;&quot; width=&quot;625&quot; height=&quot;125&quot;/&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2 用模板填充JSON数组&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2.1 准备模板&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script type=&quot;text/html&quot; id=&quot;tpl&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt;         &amp;lt;!--&lt;span&gt; list是我们自己起的虚拟数组名
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;            到时json数据一拿到，把json数组赋值给这个list
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            就能自动把JSON数组每条数据都遍历成tr显示了
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;          --&amp;gt;
&lt;span&gt; 6&lt;/span&gt;         &amp;lt;% &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0;i &amp;lt; list.length; i++){ %&amp;gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;             &amp;lt;tr&amp;gt;
&lt;span&gt; 9&lt;/span&gt;                 &amp;lt;td&amp;gt;&amp;lt;%= list[i]['Id'] %&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;10&lt;/span&gt;                 &amp;lt;td&amp;gt;&amp;lt;%= list[i]['name'] %&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;11&lt;/span&gt;                 &amp;lt;td&amp;gt;&amp;lt;%= list[i]['age'] %&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;12&lt;/span&gt;                 &amp;lt;td&amp;gt;&amp;lt;%= list[i]['score'] %&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;/tr&amp;gt;
&lt;span&gt;14&lt;/span&gt;         &amp;lt;% } %&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2.2 导入框架（跟基本使用一样）&lt;/span&gt;&lt;/h4&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;2.3 填充模板&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; JSON.parse(xhr.responseText);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数2：list:data  意思是把data这个真实的JSON数组替换掉模板里的list值&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; html = template('tpl'&lt;span&gt;, { list: data });
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; document.querySelector('tbody').innerHTML = html;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;3 使用框架内置的遍历语法&lt;/span&gt;&lt;/h3&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;3.1 语法&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
{{each list value key}}
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li class=&quot;md-list-item md-focus-container&quot;&gt;
&lt;p class=&quot;md-focus-p&quot;&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;说明：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0.5&quot;&gt;&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;list是自己定义的虚拟数组或对象，使用模板时用真实JSON数组或对象替换&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;如果list是对象，那么value就是属性值，如果list是数组，那么value得到的就是元素&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;md-list-item&quot; readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;如果list是对象，那么key就是属性名，如果list是数组，那么key就是下标&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/html&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;tpl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         {{each list value key}}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{{value.Id}}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;td&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{{value.name}}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;td&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{{value.age}}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;td&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{{value.score}}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;td&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;tr&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;         {{&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;each}}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;3.2 调用模板&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把报文转换为JSON数组&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; JSON.parse(xhr.responseText);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用模板替换&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; html = template('tpl'&lt;span&gt;, { list: data });
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;替换后的内容放到网页&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; document.querySelector('tbody').innerHTML = html;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;3.3 图解&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;md-expand&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357385/201808/1357385-20180825000938849-709403501.png&quot; alt=&quot;&quot; width=&quot;645&quot; height=&quot;298&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;artTemplate模板引擎的基本使用就这样，按照步骤来就可以了，希望对大家的学习有所帮助&lt;/p&gt;
</description>
<pubDate>Fri, 24 Aug 2018 16:13:00 +0000</pubDate>
<dc:creator>binbinlin</dc:creator>
<og:description>通常情况下，在我们使用ajax请求数据获得一个json格式的响应体，并且要将获得的相应数据填充到HTML页面上的时候，可能需要自己拼接字符串，这样比较麻烦，而使用模板引擎就可以帮我们省却自己拼接字符串</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linqb/p/9532552.html</dc:identifier>
</item>
<item>
<title>angularjs学习第五天笔记（第二篇：表单验证升级篇） - 猴子哥</title>
<link>http://www.cnblogs.com/xiaoXuZhi/p/angularjs_formCheck_ngMessages.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoXuZhi/p/angularjs_formCheck_ngMessages.html</guid>
<description>&lt;p&gt;您好，我是一名后端开发工程师，由于工作需要，现在系统的从0开始学习前端js框架之angular，每天把学习的一些心得分享出来，如果有什么说的不对的地方，请多多指正，多多包涵我这个前端菜鸟，欢迎大家的点评与赐教。谢谢！&lt;/p&gt;
&lt;p&gt;　　第五天，昨天学习了简单的表单验证，在昨天的基础上，今天主要对表单验证进一步学习研究。&lt;/p&gt;
&lt;p&gt;　　今天主要学习一下几点：文本框失去焦点后验证、表单验证提示信息显示处理优化&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;第一、文本框失去焦点后验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　文本框失去焦点验证效果：文本框失去焦点后对其合法性验证&lt;/p&gt;
&lt;p&gt;　　　　文本框失去焦点验证实现方式：定义一个指令（指令后续专门研究）当文本框失去焦点是设置focused=true,获得焦点为false&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　提示显示信息添加并列显示条件（focused）&lt;/p&gt;
&lt;p&gt;　　　　举一个具体的练习实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .oneCount &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1000px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

            .oneCount .titleCount &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 150px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; right&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

            .oneCount .valueCount &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; right&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                .oneCount .valueCount input &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

            .oneCount .alertCount &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 520px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

                .oneCount .alertCount span &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                    float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                    margin-left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                    color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff0000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

        .success &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #19e1cf !important&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

        input .ng-pristine &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #808080&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border-bottom&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid #ff0000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

        input .ng-dirty &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #000000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

        input .ng-valid &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #000000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;

        input .ng-invalid &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #ff0000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;myApp&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;myContro&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;loginForm&quot;&lt;/span&gt;&lt;span&gt; novalidate ng-submit&lt;/span&gt;&lt;span&gt;=&quot;submitForm()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;oneCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;titleCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;账号：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;valueCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;acount&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.acount&quot;&lt;/span&gt;&lt;span&gt;
                       placeholder&lt;/span&gt;&lt;span&gt;=&quot;必填：账号必须由数字字母组合，长度在6-20&quot;&lt;/span&gt;&lt;span&gt;
                       required&lt;/span&gt;&lt;span&gt;=&quot;required&quot;&lt;/span&gt;&lt;span&gt; ng-minlength&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; ng-maxlength&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;
                       ng-pattern&lt;/span&gt;&lt;span&gt;=&quot;/^[0-9a-zA-Z]+$/&quot;&lt;/span&gt;&lt;span&gt;
                       ng-focus &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;alertCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                     ng-show&lt;/span&gt;&lt;span&gt;=&quot;loginForm.acount.$invalid &amp;amp;&amp;amp; ((!loginForm.acount.$focused &amp;amp;&amp;amp; loginForm.acount.$dirty) || loginForm.submitted )&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                          ng-show&lt;/span&gt;&lt;span&gt;=&quot;loginForm.acount.$error.required&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;acount必填&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                          ng-show&lt;/span&gt;&lt;span&gt;=&quot;loginForm.acount.$error.minlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;最少长度为6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                          ng-show&lt;/span&gt;&lt;span&gt;=&quot;loginForm.acount.$error.maxlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;最大长度为20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                          ng-show&lt;/span&gt;&lt;span&gt;=&quot;loginForm.acount.$error.pattern&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;账号格式不符合要求（只能由数字和字母组成）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;success&quot;&lt;/span&gt;&lt;span&gt;
                      ng-show&lt;/span&gt;&lt;span&gt;=&quot;!loginForm.acount.$focused &amp;amp;&amp;amp;loginForm.acount.$valid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;账号输入正确&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;oneCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;titleCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;valueCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.name&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入姓名&quot;&lt;/span&gt;&lt;span&gt; ng-maxlength&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;
                       ng-focus &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;alertCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt; ng-show&lt;/span&gt;&lt;span&gt;=&quot;!loginForm.name.$focused &amp;amp;&amp;amp; loginForm.name.$error.maxlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名最大长度为20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;success&quot;&lt;/span&gt;&lt;span&gt; ng-show&lt;/span&gt;&lt;span&gt;=&quot;!loginForm.name.$focused &amp;amp;&amp;amp; loginForm.name.$dirty &amp;amp;&amp;amp; loginForm.name.$valid&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名输入正确&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;oneCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;titleCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;valueCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;width:40px;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;Scripts/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myApp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, []);
    app.controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myContro&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($scope) {
        $scope.user &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
            acount: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w额外&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            name: &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            age: &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            pass: &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
            rePass: &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        };

        $scope.submitted &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交表单接受函数&lt;/span&gt;
&lt;span&gt;        $scope.submitForm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ($scope.loginForm.$valid) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;// 表单数据真实提交逻辑&lt;/span&gt;
&lt;span&gt;            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                $scope.loginForm.submitted &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
    });

    app.directive(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ngFocus&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; FOCUS_CLASS &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ng-focused&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            restrict: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            require: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ngModel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            link: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (scope, element, attrs, ctrl) {
                ctrl.$focused &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                element.bind(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;focus&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (evt) {
                    element.addClass(FOCUS_CLASS);
                    scope.$apply(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        ctrl.$focused &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    });
                }).bind(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blur&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    element.removeClass(FOCUS_CLASS);
                    scope.$apply(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                        ctrl.$focused &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    })
                })
            }
        }
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　第二、表单验证提示信息显示处理优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;上面的表单验证的提示信息在体验上不是很友好，同一个文本框有可能同时显示多个提示信息&lt;/p&gt;
&lt;p&gt;　　　　新版本的angularjs中，引入了ngMessages指令，用于更加友好的处理方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　&lt;/strong&gt;　ngmessages同时指出提示模板引入，通过ng-messges-include 来加载外部提示模板&lt;/p&gt;
&lt;p&gt;　　直接上练习例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;myApp&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;myContro&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;loginForm&quot;&lt;/span&gt;&lt;span&gt; novalidate ng-submit&lt;/span&gt;&lt;span&gt;=&quot;submitForm()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;oneCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;titleCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;账号：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;valueCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;acount&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.acount&quot;&lt;/span&gt;&lt;span&gt;
                       placeholder&lt;/span&gt;&lt;span&gt;=&quot;必填：账号必须由数字字母组合，长度在6-20&quot;&lt;/span&gt;&lt;span&gt;
                       required&lt;/span&gt;&lt;span&gt;=&quot;required&quot;&lt;/span&gt;&lt;span&gt; ng-minlength&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; ng-maxlength&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;
                       ng-pattern&lt;/span&gt;&lt;span&gt;=&quot;/^[0-9a-zA-Z]+$/&quot;&lt;/span&gt;&lt;span&gt;
                       ng-focus &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;alertCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt; ng-messages&lt;/span&gt;&lt;span&gt;=&quot;loginForm.acount.$error&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ng-messages-include &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;template/required.html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ng-messages-include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                          ng-message&lt;/span&gt;&lt;span&gt;=&quot;minlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;该项最少长度为6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;warning&quot;&lt;/span&gt;&lt;span&gt;
                          ng-message&lt;/span&gt;&lt;span&gt;=&quot;maxlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;该项最大长度为20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-messages-include&lt;/span&gt;&lt;span&gt;=&quot;template/numberAndZhiMu.html&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;oneCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;titleCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;valueCount&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;width:40px;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;Scripts/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;Scripts/angular-messages.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myApp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ngMessages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]);
    app.controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myContro&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($scope) {
        $scope.user &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
            acount: &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        };

        $scope.submitted &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交表单接受函数&lt;/span&gt;
&lt;span&gt;        $scope.submitForm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ($scope.loginForm.$valid) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;// 表单数据真实提交逻辑&lt;/span&gt;
&lt;span&gt;            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                $scope.loginForm.submitted &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
    });
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;时间不早了，明天在仔细研究该问题&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;今天就到此为止，明天继续研究表单验证，明天学习包括如下几点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;表单验证继续研究&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　指令简单了解学习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Fri, 24 Aug 2018 15:58:00 +0000</pubDate>
<dc:creator>猴子哥</dc:creator>
<og:description>angularjs表单验证继续学习，主要内容包括，失去焦点验证、ngMessages</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoXuZhi/p/angularjs_formCheck_ngMessages.html</dc:identifier>
</item>
<item>
<title>springboot下的dubbo、zookeeper 结合使用 - zhyonk</title>
<link>http://www.cnblogs.com/zhyonk/p/9532499.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhyonk/p/9532499.html</guid>
<description>&lt;p&gt;近期在研究dubbo框架&lt;/p&gt;
&lt;p&gt;相信看到这篇博客的，dubbo的基础应该都有了&lt;/p&gt;
&lt;p&gt;zookeeper的搭建走了点弯路，配置起来各种麻烦，妈的搞的好烦。&lt;/p&gt;
&lt;p&gt;正好一直想用一下docker，但对docker只是有个简单的概念。&lt;/p&gt;
&lt;p&gt;用了一晚上去研究docker，之后发现真的好用&lt;/p&gt;
&lt;p&gt;搭建个zookeeper就跟玩似的。&lt;/p&gt;
&lt;p&gt;这里记录一下遇到的一些坑！&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;1、springboot引入dubbo的配置文件&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;网上搜索了一下，大概的两种方式&lt;/p&gt;
&lt;p&gt;1、 这种方式是通过 ClassPathXmlApplicationContext 加载xml来获取上下文Context启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WreserveApplication {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;          ClassPathXmlApplicationContext context = &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span&gt;new&lt;/span&gt; String[]{&quot;dubbo-provider.xml&quot;&lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;         context.start();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;          System.in.read(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; press any key to exit&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、通过 @ImportResource({ &quot;classpath:dubbo-provider.xml&quot; }) 加载。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; @ImportResource({ &quot;classpath:dubbo-provider.xml&quot;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WreserveApplication {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CountDownLatch closeLatch() {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         ConfigurableApplicationContext context = SpringApplication.run(WreserveApplication.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         CountDownLatch closeLatch = context.getBean(CountDownLatch.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        closeLatch.await();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2、dubbo-provider.xml和dubbo-consumer.xml中需要注意的一些问题&lt;/h2&gt;
&lt;p&gt;dubbo-provider.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:dubbo&lt;/span&gt;&lt;span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:application &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;demo-provider&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; use multicast registry center to export service &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:registry &lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;=&quot;zookeeper://192.168.99.100:2181&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; use dubbo protocol to export service on port 20880 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:protocol &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dubbo&quot;&lt;/span&gt;&lt;span&gt; port&lt;/span&gt;&lt;span&gt;=&quot;20880&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; service implementation, as same as regular local bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;helloService&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.zhyonk.service.Impl.HelloServiceImpl&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; declare the service interface to be exported &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:service &lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;=&quot;com.zhyonk.service.HelloService&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;helloService&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dubbo-consumer.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:dubbo&lt;/span&gt;&lt;span&gt;=&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:application &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;wreserve-wechat&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo:application&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;zookeeper注册中心 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:registry
        &lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;=&quot;zookeeper://192.168.99.100:2181&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dubbo:registry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:consumer &lt;/span&gt;&lt;span&gt;check&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; timeout&lt;/span&gt;&lt;span&gt;=&quot;60000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 生成远程服务代理，可以和本地bean一样使用demoService &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:reference &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;helloService&quot;&lt;/span&gt;&lt;span&gt;
        interface&lt;/span&gt;&lt;span&gt;=&quot;com.zhyonk.wreserve.service.HelloService&quot;&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;=&quot;dubbo&quot;&lt;/span&gt;&lt;span&gt;
        timeout&lt;/span&gt;&lt;span&gt;=&quot;15000&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1、消费者要访问提供者，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:reference &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;helloService&quot;&lt;/span&gt;&lt;span&gt;
        interface&lt;/span&gt;&lt;span&gt;=&quot;com.zhyonk.wreserve.service.HelloService&quot;&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;=&quot;dubbo&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; service implementation, as same as regular local bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;helloService&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.zhyonk.service.Impl.HelloServiceImpl&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; declare the service interface to be exported &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dubbo:service &lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;=&quot;com.zhyonk.service.HelloService&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;helloService&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的interface必须要求同一个路径之下，不然对应不上，会出现下面的情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1081162/201808/1081162-20180824233951236-1750875628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正常情况下dubbo-admin中会显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1081162/201808/1081162-20180824234324888-620834878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、如果嫌自己搭建麻烦的话可以直接用用网站自动生成 http://start.dubbo.io/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1081162/201808/1081162-20180824234614168-1050868722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就先到这，睡了&lt;/p&gt;

</description>
<pubDate>Fri, 24 Aug 2018 15:47:00 +0000</pubDate>
<dc:creator>zhyonk</dc:creator>
<og:description>近期在研究dubbo框架 相信看到这篇博客的，dubbo的基础应该都有了 zookeeper的搭建走了点弯路，配置起来各种麻烦，妈的搞的好烦。 正好一直想用一下docker，但对docker只是有个简</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhyonk/p/9532499.html</dc:identifier>
</item>
<item>
<title>深入理解：HTML元素特性attribute 和 DOM元素节点对象属性property区别 以及DOM元素样式操作总结 - 无退路只能勇往直前</title>
<link>http://www.cnblogs.com/webxu20180730/p/9532442.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/webxu20180730/p/9532442.html</guid>
<description>&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　查一下英语单词解释，两个都可以表示属性。但&lt;/span&gt;attribute&lt;span&gt;倾向于解释为特质，而&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;倾向于解释私有的。这个&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;的私有解释可以更方便我们下面的理解。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;&lt;strong&gt;第一部分：区别点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　&lt;strong&gt;第一点： &lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　特性&lt;/span&gt;attribute&lt;span&gt;主要是面向&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;元素来理解的，所以说主要是表现在&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;文件中，写在元素开始标签内。&lt;/span&gt;特性在CSS&lt;span&gt;中的表现&lt;/span&gt;常被用来作选择器&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　属性&lt;/span&gt;property&lt;span&gt;主要是面向&lt;/span&gt;&lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;节点对象来理解的，作为对象的私有属性，不对外显示的。&lt;/span&gt;属性在CSS&lt;span&gt;中表现就是&lt;/span&gt;&lt;span&gt;{  }&lt;/span&gt;&lt;span&gt;内的内容。&lt;/span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE &amp;lt;!DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document Example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        #myId&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 16px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 这里的名值对是属性 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;= &quot;myId&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;myClass&quot;&lt;/span&gt;&lt;span&gt; data-zdy&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color:red;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Text&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这里标签内的名值对都是特性 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;p&quot;&gt;  　　&lt;strong&gt;第二点：　&lt;/strong&gt;　&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　在引擎渲染&lt;/span&gt;HTML&lt;span&gt;结构成&lt;/span&gt;&lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;树状模型的时候，&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;元素中公认的标准特性(非自定义的特性）会被添加&lt;/span&gt;&lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;节点对象的属性中，并且是一对一映射，任何一方的改变都会影响到另一方。所以对&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;元素标准特性的读写都可以通过元素对象的属性方式进行操作，即点&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;。&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]; 
    node.id &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; myNewId &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标签内的元素特性ID，一对一映射到DOM里的P对象里，通过对象属性的获取方式读写元素的特性名&lt;/span&gt;
&lt;span&gt;    console.log(node.id);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象里的属性改变，浏览器视图中DOM树中p节点特性值也改变  &lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1453557/201808/1453557-20180824220917805-699111144.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;p&quot;&gt; &lt;span&gt;　　&lt;/span&gt;&lt;span&gt;在引擎渲染&lt;/span&gt;HTML&lt;span&gt;结构成&lt;/span&gt;&lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;树状模型的时候，&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;元素中的特性会作为元素的&lt;/span&gt;&lt;span&gt;Attr&lt;/span&gt;&lt;span&gt;属性节点被保存在对应&lt;/span&gt;&lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;元素节点对象的&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;属性的&lt;/span&gt;&lt;span&gt;NamedNodeMap&lt;/span&gt;&lt;span&gt;属性对象中，包括自定义特性。但自定义特性不被显示在DOM渲染的树中。可以通过元素的&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;属性对象访问属性节点，就是访问元素特性。&lt;/span&gt;（JS&lt;span&gt;高程&lt;/span&gt;p266 p276 &lt;span&gt;页）&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]; 
    console.log(node.childNodes);  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;p标签里的id/class/标签特性作为DOM树中的Atrr节点 ，但style作为特殊性质和自定义特性不能渲染成特性节点&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    console.log(p.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过p对象的attributes属性对象读取标准特性节点&lt;/span&gt;
&lt;span&gt;    console.log(p.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data-zdy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过p对象的attributes属性对象读取自定义节点,&lt;span&gt;写全拼，包括data- 返回节点字符串&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;    console.log(p.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data-zdy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].value); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过p对象的attributes属性对象读取自定义节点&lt;/span&gt;
&lt;span&gt;    console.log(p.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data-zdy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].nodeValue); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过p对象的attributes属性对象读取自定义节点&lt;/span&gt;
&lt;span&gt;    console.log(p.dataset); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过自定义属性专有的方法读取自定义特性,&lt;span&gt;返回DOMStringMap对象&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;    console.log(p.dataset.zdy); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过自定义属性专有的方法读取自定义特性，&lt;span&gt;不包括data-&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1453557/201808/1453557-20180824222535881-2099733773.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　&lt;strong&gt;第三点：&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　特性在DOM&lt;span&gt;中&lt;/span&gt;&lt;span&gt;可以通过&lt;/span&gt;Attr&lt;span&gt;节点方式访问&lt;/span&gt;：ele.getAttributeNode( ).value/nodeValue&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　在&lt;/span&gt;DOM&lt;span&gt;元素对象也定义了专属的方法对特性进行读写：&lt;/span&gt;&lt;span&gt;getAttribute()/setAttribute()/removeAttribute() P264&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]; 
    console.log(node.getAttributeNode(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Attr节点的方法获取id&lt;/span&gt;
&lt;span&gt;    console.log(node.getAttributeNode(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).nodeValue);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Attr节点的方法读取节点值&lt;/span&gt;
&lt;span&gt;    console.log(node.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取calss的值&lt;/span&gt;
&lt;span&gt;    node.removeAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除class&lt;/span&gt;
&lt;span&gt;    console.log(node.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;再读取class返回null&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;p&quot;&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1453557/201808/1453557-20180824230211017-2107403818.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;strong&gt;　　第四点：&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　特性和属性都可以自定义，自定义的特性和&lt;/span&gt;&lt;span&gt;自定义的属性不能在&lt;/span&gt;&lt;span&gt;DOM&lt;/span&gt;&lt;span&gt;结构中体现，只能通过对象自身调用。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　HTML5&lt;span&gt;规定可以为元素添加非标准的特性，即自定义特性，但是要求添加&lt;/span&gt;&lt;span&gt;data-&lt;/span&gt;&lt;span&gt;前缀。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　可以手动在&lt;/span&gt;HTML&lt;span&gt;元素开始标签内添加，也可以在&lt;/span&gt;&lt;span&gt;JS&lt;/span&gt;&lt;span&gt;代码中通过元素&lt;/span&gt;&lt;span&gt;dataset&lt;/span&gt;&lt;span&gt;属性来读写自定义属性。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　通过&lt;/span&gt;dataset&lt;span&gt;属性读写时属性名时不需要加&lt;/span&gt;&lt;span&gt;data-&lt;/span&gt;&lt;span&gt;前缀。但是这样自定义的属性通过&lt;/span&gt;对象&lt;span&gt;方法&lt;/span&gt;get/set/removeAttribute&lt;span&gt;读写时需要加上&lt;/span&gt;&lt;span&gt;data-,&lt;/span&gt;&lt;span&gt;用全称表示 （JS高程&lt;/span&gt;&lt;span&gt;p293页）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　&lt;strong&gt;（例子见上面第二点第二条）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;&lt;strong&gt;第二部分：标准特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;strong&gt;&lt;span&gt;　　公认的标准元素特性没几个，主要有：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　所有元素都有的特性：&lt;/span&gt;id / class / title / lang / dir / style / onclick&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　表单元素专有的部分特性：&lt;/span&gt;type / name / value&lt;span&gt;等&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　&lt;span&gt;有两类特殊的特性，它们虽然在&lt;/span&gt;&lt;/span&gt;&lt;span&gt;DOM&lt;span&gt;对象中也有映射对应的属性名，但是通过特性专属的方式&lt;/span&gt;&lt;span&gt;getAttribute()&lt;/span&gt;&lt;span&gt;和对象属性点&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;或&lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;操作返回的值是不一样的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　&lt;span&gt;&lt;strong&gt;style&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;用于&lt;/span&gt;&lt;span&gt;CSS&lt;/span&gt;&lt;span&gt;方式为元素指定样式，通过&lt;/span&gt;&lt;span&gt;getAttribute&lt;/span&gt;&lt;span&gt;（）返回的是整个&lt;/span&gt;&lt;span&gt;CSS&lt;/span&gt;&lt;span&gt;文本字符串，而通过对象&lt;/span&gt;&lt;span&gt;ele.style&lt;/span&gt;&lt;span&gt;返回的包含对象&lt;/span&gt;&lt;span&gt;css&lt;/span&gt;&lt;span&gt;样式的&lt;/span&gt;&lt;span&gt;CSSStyleDeclaration&lt;/span&gt;&lt;span&gt;对象。但映射关系成立，仍然可以通过　　&lt;/span&gt;&lt;span&gt;setAttribute&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;&quot;style&quot;,&quot;&lt;/span&gt;&lt;span&gt;值&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;）来设置修改元素样式&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; node &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]; 
    console.log(node.style); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取style特性，返回的是CSSStyleDeclaration对象&lt;/span&gt;
&lt;span&gt;    console.log(node.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回style样式的字符串文本&lt;/span&gt;
&lt;span&gt;    node.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color:#000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过对象特性修改字体颜色可以有映射关系&lt;/span&gt;
&lt;span&gt;    console.log(node.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].value);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象方法修改字体行内样式，体现在元素节点特性也映射改变&lt;/span&gt;
&lt;span&gt;    node.style.color &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ccc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象属性方式修改行内样式&lt;/span&gt;
&lt;span&gt;    console.log(node.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].value);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象属性修改字体行内样式，体现在元素节点特性也映射改变&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;p&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1453557/201808/1453557-20180824225839481-739292358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;&lt;strong&gt;onclick&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;属性也是一样，当用&lt;/span&gt;&lt;span&gt;getAttribute(&quot;onclick&quot;)&lt;/span&gt;&lt;span&gt;读取时，返回的整段&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;代码字符串，而通过对象属性&lt;/span&gt;&lt;span&gt;ele.onclick&lt;/span&gt;&lt;span&gt;返回是&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;函数&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt; &lt;strong&gt;第二部分：操作特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　所以当我们平常操作时，读写元素属性时，先区分下到底是读写元素特性还是对象属性，以便选择对应的操作代码方式&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;strong&gt;&lt;span&gt;　　读写一个元素的特性：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　W3C&lt;span&gt;规范的已有特性节点访问方式：&lt;/span&gt;&lt;span&gt;　　　　　　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ele.attritubes[&quot;特性名&quot;].value或.nodeVlue   写入： = &quot;特性值&quot;&lt;br/&gt;如果新增特性：
var newAttr = document.createAttribute(&quot;myAttr&quot;)  //创建新的特性节点：
newAttr.value = &quot;newValue&quot; //新节点赋值
ele.setAttributeNode(newAttr)  //对元素设置新特性节点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;p&quot;&gt;  　&lt;strong&gt;　但一般不用上面的繁琐的方法，常用下面的简单操作：&lt;/strong&gt; &lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1、对象的特性操作方法：
　　读：ele.getAttribute(&quot;attrName&quot;)
　　写：ele.setAttribute(&quot;attrName&quot;,&quot;value&quot;)
　　删：ele.removeAttribute(&quot;attrName&quot;)

2、作为对象属性的操作方法：ele.attrName   ele[&quot;attrName&quot;]

3、如果是自定义属性，也可以是：
读：ele.dataset.attrName    写：ele.dataset.attrName = “value”  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;p&quot;&gt; 　　很多教材上并没有严格区分特性和属性，只是在《javascript高级程序设计里》有区分这两个概念，但里面也提到一句”所有特性都是属性“，所以在平时并不需要严格去区分它们。&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;我也只是在JS学习中，对如何读写元素样式的很多方法上容易搞蒙圈，所以就理解这两个概念，可以很好的区分读写样式的一些方法，思路会清晰很多。&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　元素CSS操作的样式基本都是DOM对象的属性，在JS中只通过一种方式来读写操作，就是全通过style对象。在渲染过程中style特性会转变成元素的style属性，这是一个对象属性，拥有自己操作样式的属性和方法。比如&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　行内样式的属性直接通过style对象的点. 和[ ] 操作即可，也可以用style对象的方法：ele.style.cssText/item(index)/getPropertyValue()/setProperty(name,value)/removeProperty()。&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　　在内嵌和外部样式中，获取到样式表目标样式表&amp;gt;样式规则&amp;gt;具体样式：stylesheet[ i ].cssRule[ i ].style的各种操作。&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;　&lt;strong&gt;&lt;span&gt;　总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;p&quot;&gt;&lt;span&gt;　　JS中行内元素的特性读写操作：1、通过元素对象的自身的属性方法读写；   2、通过DOM中特性节点读写  3、自定义特性专属的方法dataset&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p&quot;&gt;&lt;span&gt;　　JS中对象属性的新式读写操作：style对象的属性和方法。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;

&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p&quot;&gt; &lt;/p&gt;

</description>
<pubDate>Fri, 24 Aug 2018 15:23:00 +0000</pubDate>
<dc:creator>无退路只能勇往直前</dc:creator>
<og:description>查一下英语单词解释，两个都可以表示属性。但attribute倾向于解释为特质，而property倾向于解释私有的。这个property的私有解释可以更方便我们下面的理解。 第一部分：区别点 第一点：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/webxu20180730/p/9532442.html</dc:identifier>
</item>
<item>
<title>Mysql优化之索引 - 不做空指针</title>
<link>http://www.cnblogs.com/onlylikelearn/p/9523899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/onlylikelearn/p/9523899.html</guid>
<description>&lt;p&gt;　　这几天抽了个时间将《高性能Mysql》看了一下忽觉索引非常之重要，习之然后总结巩固知识。本文索引使用的是InnoDB存储引擎。因为本文并不是说用索引的好处，所以并不会书写QPS之类的测试结果请大家见谅。我的mysql版本是8.0.11。&lt;/p&gt;

&lt;p&gt;　　（一）索引使用优化&lt;/p&gt;
&lt;p&gt;　　　　　 ①独立的列&lt;/p&gt;
&lt;p&gt;                  ②覆盖索引&lt;/p&gt;
&lt;p&gt;                  ③索引匹配&lt;/p&gt;
&lt;p&gt;　　（二）索引创建优化&lt;/p&gt;
&lt;p&gt;　　　　　 ①前缀索引和索引选择性&lt;/p&gt;
&lt;p&gt;                   ②选择合适的索引顺序&lt;/p&gt;
&lt;p&gt;                   ③不创建冗余和重复索引&lt;/p&gt;

&lt;p&gt;　　我们有时候虽然创建了合适的索引但是使用不当依然会使索引失效，所以我将书上的索引使用大致总结了一下。在这之前我先介绍一下EXPLAIN生成结果中字段type和Extra的意义,先说一下type常出现的结果。&lt;/p&gt;
&lt;p&gt;　　（1）const 表中最多只有一行用于主键和唯一索引的匹配&lt;/p&gt;
&lt;p&gt;　　（2）all全表扫描&lt;/p&gt;
&lt;p&gt;　　（3）ref使用索引并符合最左匹配&lt;/p&gt;
&lt;p&gt;　　（4）index ：❶&lt;/p&gt;
&lt;p&gt;　　　　　　a.当查询是索引覆盖的，即所有数据均可从索引树获取的时候（Extra中有Using Index）；&lt;/p&gt;
&lt;p&gt;　　　　　　b.以索引顺序从索引中查找数据行的全表扫描（无 Using Index）；&lt;/p&gt;
&lt;p&gt;　　　　　　c.如果Extra中Using Index与Using Where同时出现的话，则是利用索引查找键值的意思；&lt;/p&gt;
&lt;p&gt;　　　　　　d.如单独出现，则是用读索引来代替读行，但不用于查找&lt;/p&gt;
&lt;p&gt;　　接下来我们解释一下Extra出现的结果：&lt;/p&gt;
&lt;p&gt;　　 （1）using index 使用覆盖索引。&lt;/p&gt;
&lt;p&gt;　　 （2）using where 条件语句中部分条件使用的是索引，其他条件需要去表中筛选。&lt;/p&gt;
&lt;p&gt;　　 （3）using inex condition 条件语句中所有条件都在索引中，但是所需要的数据不在索引中。&lt;/p&gt;
&lt;p&gt;　　 （4）using where;using index 条件和所需数据都在索引中。&lt;/p&gt;
&lt;h2&gt;　独立的列&lt;/h2&gt;
&lt;p&gt;　　独立的列一眼上看去以为是针对于一个单独的列创建索引但是实际上并不是这样的。“独立的列”是指索引列不能是表达式的一部分，也不能是函数的参数❷。这句话的前面一句话在书上是：如果使用独立的列则mysql不会使用索引。这句话有点模棱两可，“不会使用索引”到底是包括索引全扫描还是不包括索引全扫描，如果包括的话则与实验结果不相符，如果不包括的话那就没问题了。废话不多说还是用结果来证明吧。首先我的数据库表结构是这样子的，如下图所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180822153952668-981979634.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我创建了两个单独列的索引用来测试表达式和函数如下图所示:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180822154931727-401035018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180823213130430-19903967.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　测试sql: explain select age  from user where age =2;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180822155258984-1184667843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从测试结果中我们可以看到type为ref(使用BTree索引),Extra为Using index(使用了覆盖索引)&lt;/p&gt;
&lt;p&gt;　　如果我们把sql语句改为： explain select age from user where age+1=2;解释结果如下所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180823213346648-1971278128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到这条查询语句是使用了索引的，不过是扫描索引的全部数据。接下来测试一下如果条件语句中使用了函数是否会使用索引我的sql语是：EXPLAIN SELECT id from user where TO_DAYS(birthday) &amp;gt;= 50000000;测试结果如下图所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180823214112321-1477149846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　OK，结果也是index。至于书上那句话是对是错我就不得而知了，不过大家可以自己去测试一下。&lt;/p&gt;


&lt;h2&gt;　覆盖索引&lt;/h2&gt;
&lt;p&gt; 　如果把使用索引比作你开了一辆五菱宏光的话，那么你使用覆盖索引就是开了一辆兰博基尼（兰博基尼的性能是由你自己来决定的）。覆盖索引简单的来讲就是你所要查询的字段和条件语句都在一条索引中。接下来又是证明的过程，我创建一个新的索引如下图所示:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180823232856180-790037017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后我使用这条sql语句 EXPLAIN SELECT first_name,age from user where  first_name='张' and age &amp;gt;0，在这条sql语句中我查询两个不同索引中的列查询结果如下所示;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180823233618918-1687993418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在这条sql语句中我使用了两个索引idx_fk_name和idx_fk_age，查询的列和查询条件都是在这两个索引中，测试的结果为using where(需要回表查询所需要的数据)。接下来我们使用这个sql语句 EXPLAIN SELECT last_name FROM user where first_name = '张',使用结果如下图所示：&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180824173331350-1748020297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　如果我们书写的sql语句符合索引匹配原则，那么我们就可以不进行索引的全部数据扫描，结果就是我们的查询效率又变高了。那么索引匹配原则是啥？我就简略的总结一下吧。&lt;/p&gt;
&lt;h3&gt;　   全值匹配&lt;/h3&gt;
&lt;p&gt;　　全值匹配就是查询条件和索引中的所有列进行匹配。如我上面创建的idx_fx_name索引。select * from user where first_name='张' 和 last_name = '三' 这条sql语句就是全值匹配。注意如果写成last_name='三' and first_name='张'也是全值匹配&lt;/p&gt;
&lt;h3&gt;　　最左匹配&lt;/h3&gt;
&lt;p&gt;　　 我把书中匹配最左前缀和匹配列前缀都划分为最左匹配，因为我觉得它都是从最左边开始匹配的，好像网上也是这么说的。&lt;/p&gt;
&lt;p&gt;　　最左前缀就是你写的条件查询语句针对于某个索引来说它符合从左边一个一个进行匹配的方式（经过实测条件语句的顺序不影响最左匹配的原则）,再拿我的idx_fx_name索引来举个例子。如select * from user where last_name = '三'和 select * from user where first_name = '张' 这两个sql语句查询索引的方式都不一样，前者是扫描索引所有数据，第二个就只扫描了索引的部分数据。测试结果如下所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180824211003790-906373429.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1418506/201808/1418506-20180824211121079-1380678200.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　匹配范围值&lt;/h3&gt;
&lt;p&gt;　　 在符合最左匹配的基础上可以使用范围进行查询。&lt;/p&gt;
&lt;h3&gt;　　 精确匹配加范围匹配&lt;/h3&gt;
&lt;p&gt;　　  在符合最左匹配的基础上最后一个查询条件可以记性范围查询。&lt;/p&gt;


&lt;h2&gt;　　前缀索引和索引选择性&lt;/h2&gt;
&lt;p&gt;　　　我们先说说索引的选择性吧。索引的选择性是指不重复的索引值（也称为基数,cardinality）和数据表的记录总数（#T）的比值,范围从1/#T到1之间❸。这句话通俗的理解就是你选择作为索引（当然是只能选择某个字段，字段的全部或者部分）的数据在表中这个字段列中重复率越低越好，因为这样可以过滤更多的数据行。前缀索引就是可以拿某个字段的前缀作为索引之所以把前缀所以和索引选择性放到一起说是为了解决当我们选择一个特别长的字段作为索引时首先会很浪费空间其次是查询的时候速度肯定会比较慢。&lt;/p&gt;
&lt;p&gt;　　  那么我们怎么计算索引选择性的高低呢？这个有方法的，方法就是通过关键字DISTINCT 和 Count来计算索引的选择性。如我计算first_name的选择性高低可以这样计算：&lt;/p&gt;
&lt;p&gt;　　 select count(DISTINCT first_name) / count(1) as a1 from user;&lt;/p&gt;
&lt;p&gt;　　 如果我要计算以first_name前三个字符作为索引的话计算选择性可以这样写：&lt;/p&gt;
&lt;p&gt;　　 select count(DISTINCT LEFT(first_name,3)) / count(1) as a1 from user;&lt;/p&gt;
&lt;p&gt;　　 通过不断的修改所包含的前缀的大小我们就能找到选择性高的索引。&lt;/p&gt;
&lt;h2&gt;　  选择合适的索引序列&lt;/h2&gt;
&lt;p&gt;　　  其实选择合适的索引序列我觉得根据实际情况来做分析。不过一般来说我们都把选择性高的放在前面，其他的就是要根据where子句中的排序、分组和范围条件等其他因素来选择索引的序列&lt;/p&gt;
&lt;h2&gt;　  不创建冗余和重复的索引&lt;/h2&gt;
&lt;p&gt;　　  这里有两个问题摆在我们的面前什么是冗余的索引？什么是重复索引？&lt;/p&gt;
&lt;p&gt;　　 重复索引：具有相同列的索引就是重复索引。如(A,B)和(B,A)就是重复索引。&lt;/p&gt;
&lt;p&gt;　　 冗余索引：一个索引的子集就是冗余索引。如(A,B,C) 和(A,B) (B,C)就是冗余索引。&lt;/p&gt;
&lt;p&gt;　　 从一般情况来说就是尽量不创建重复索引和冗余索引，但是在特殊的情况下我们可以创建冗余索引。&lt;/p&gt;


&lt;p&gt;　　以上就是我学习《高性能mysql》书籍的总结。如果有什么问题请大家及时反馈给我毕竟互相交流才能促进学习。&lt;/p&gt;

&lt;p&gt;❶http://blog.51cto.com/lijianjun/1881208&lt;/p&gt;
&lt;p&gt;❷《高性能mysql》第五章第三节&lt;/p&gt;
&lt;p&gt;❸《高性能msql》第五章第三节第二小节&lt;/p&gt;
</description>
<pubDate>Fri, 24 Aug 2018 15:02:00 +0000</pubDate>
<dc:creator>不做空指针</dc:creator>
<og:description>前言 这几天抽了个时间将《高性能Mysql》看了一下忽觉索引非常之重要，习之然后总结巩固知识。本文索引使用的是InnoDB存储引擎。因为本文并不是说用索引的好处，所以并不会书写QPS之类的测试结果请大</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/onlylikelearn/p/9523899.html</dc:identifier>
</item>
<item>
<title>Java文件操作类效率对比 - xiaoxi666</title>
<link>http://www.cnblogs.com/xiaoxi666/p/9531893.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoxi666/p/9531893.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;众所周知，Java中有多种针对文件的操作类，以面向字节流和字符流可分为两大类，这里以写入为例：&lt;/p&gt;
&lt;p&gt;面向字节流的：FileOutputStream 和 BufferedOutputStream&lt;/p&gt;
&lt;p&gt;面向字符流的：FileWriter 和 BufferedWriter&lt;/p&gt;
&lt;p&gt;近年来发展出New I/O ，也叫NIO，里面又包装了两个类：NewOutputStream 和 NewBufferedWriter&lt;/p&gt;
&lt;p&gt;现在，我们建立测试程序，比较这些类写入文件的性能。&lt;/p&gt;
&lt;h2&gt;机器配置&lt;/h2&gt;
&lt;ul&gt;&lt;li class=&quot;p1&quot;&gt;  &lt;span&gt;Processor Name: &lt;span class=&quot;Apple-tab-span&quot;&gt;Intel Core i7&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  Processor Speed: &lt;span class=&quot;Apple-tab-span&quot;&gt;2.2 GHz&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  Number of Processors: &lt;span class=&quot;Apple-tab-span&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  Total Number of Cores: &lt;span class=&quot;Apple-tab-span&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  L2 Cache (per Core): &lt;span class=&quot;Apple-tab-span&quot;&gt;256 KB&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  L3 Cache: &lt;span class=&quot;Apple-tab-span&quot;&gt;6 MB&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  Memory: &lt;span class=&quot;Apple-tab-span&quot;&gt;16 GB&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;测试程序&lt;/h2&gt;
&lt;p&gt;纵向比较：几种文件操作类向文件中写入相同行数的内容（每行内容均为“写入文件Data\n”），比较其耗费时间&lt;/p&gt;
&lt;p&gt;横向比较：对于同一个文件操作类，比较写入不同行数内容情况下所耗费时间；本文以2的次方指数级增长行数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileOutputStream;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.nio.file.Files;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.nio.file.Paths;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; testFileIO {
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDriver () &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; maxlineNum = 100000001;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入文件的最大行数&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; startlineNum = 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入文件的行数&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; Multiplying = 2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;行数增长倍率&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;long&lt;/span&gt; begin = 0L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;long&lt;/span&gt; end = 0L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将时间统计写入文件Result.txt中&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         FileWriter fileWriter = &lt;span&gt;new&lt;/span&gt; FileWriter(&quot;./Result.txt&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         BufferedWriter bufferedWriter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BufferedWriter(fileWriter);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;         System.out.println(&quot;Test FileOutputStream begin.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; lineNum = startlineNum; lineNum &amp;lt; maxlineNum; lineNum *=&lt;span&gt; Multiplying) {
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             begin =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;            testFileOutputStream(lineNum);
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             end =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; timeElapse_FileOutputStream = end -&lt;span&gt; begin;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             bufferedWriter.write(String.valueOf(timeElapse_FileOutputStream)+&quot;\t&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         System.out.println(&quot;Test FileOutputStream end.\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;         System.out.println(&quot;Test BufferedOutputStream begin.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         bufferedWriter.write(&quot;\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; lineNum = startlineNum; lineNum &amp;lt; maxlineNum; lineNum *=&lt;span&gt; Multiplying) {
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;             begin =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;            testBufferedOutputStream(lineNum);
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             end =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; timeElapse_BufferedOutputStream = end -&lt;span&gt; begin;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             bufferedWriter.write(String.valueOf(timeElapse_BufferedOutputStream)+&quot;\t&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         System.out.println(&quot;Test BufferedOutputStream end.\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;         System.out.println(&quot;Test FileWriter begin.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         bufferedWriter.write(&quot;\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; lineNum = startlineNum; lineNum &amp;lt; maxlineNum; lineNum *=&lt;span&gt; Multiplying) {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             begin =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;            testFileWriter(lineNum);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             end =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; timeElapse_FileWriter = end -&lt;span&gt; begin;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             bufferedWriter.write(String.valueOf(timeElapse_FileWriter)+&quot;\t&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         System.out.println(&quot;Test FileWriter end.\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;         System.out.println(&quot;Test BufferedWriter begin.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         bufferedWriter.write(&quot;\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; lineNum = startlineNum; lineNum &amp;lt; maxlineNum; lineNum *=&lt;span&gt; Multiplying) {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             begin =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            testBufferedWriter(lineNum);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             end =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; timeElapse_BufferedWriter = end -&lt;span&gt; begin;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             bufferedWriter.write(String.valueOf(timeElapse_BufferedWriter)+&quot;\t&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         System.out.println(&quot;Test BufferedWriter end.\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;         System.out.println(&quot;Test NewOutputStream begin.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         bufferedWriter.write(&quot;\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; lineNum = startlineNum; lineNum &amp;lt; maxlineNum; lineNum *=&lt;span&gt; Multiplying) {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             begin =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            testNewOutputStream(lineNum);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             end =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; timeElapse_NewOutputStream = end -&lt;span&gt; begin;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             bufferedWriter.write(String.valueOf(timeElapse_NewOutputStream)+&quot;\t&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         System.out.println(&quot;Test NewOutputStream end.\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;         System.out.println(&quot;Test NewBufferedWriter begin.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         bufferedWriter.write(&quot;\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; lineNum = startlineNum; lineNum &amp;lt; maxlineNum; lineNum *=&lt;span&gt; Multiplying) {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             begin =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            testNewBufferedWriter(lineNum);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             end =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; timeElapse_NewBufferedWriter = end -&lt;span&gt; begin;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             bufferedWriter.write(String.valueOf(timeElapse_NewBufferedWriter)+&quot;\t&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         System.out.println(&quot;Test NewOutputStream end.\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        bufferedWriter.close();
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;************************ I/O ****************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;面向字节&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFileOutputStream (&lt;span&gt;int&lt;/span&gt; lineNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         FileOutputStream fileOutputStream = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&lt;span&gt;new&lt;/span&gt; File(&quot;./testFileOutputStream.txt&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (--lineNum &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             fileOutputStream.write(&quot;写入文件Data\n&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        fileOutputStream.close();
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testBufferedOutputStream (&lt;span&gt;int&lt;/span&gt; lineNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         FileOutputStream fileOutputStream = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&lt;span&gt;new&lt;/span&gt; File(&quot;./testBufferedOutputStream.txt&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         BufferedOutputStream bufferedOutputStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BufferedOutputStream(fileOutputStream);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (--lineNum &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;             bufferedOutputStream.write(&quot;写入文件Data\n&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        bufferedOutputStream.close();
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;面向字符&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFileWriter (&lt;span&gt;int&lt;/span&gt; lineNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         FileWriter fileWriter = &lt;span&gt;new&lt;/span&gt; FileWriter(&quot;./testFileWriter.txt&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (--lineNum &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             fileWriter.write(&quot;写入文件Data\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        fileWriter.close();
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; 
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testBufferedWriter (&lt;span&gt;int&lt;/span&gt; lineNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         FileWriter fileWriter = &lt;span&gt;new&lt;/span&gt; FileWriter(&quot;./testBufferedWriter.txt&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         BufferedWriter bufferedWriter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BufferedWriter(fileWriter);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (--lineNum &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;             bufferedWriter.write(&quot;写入文件Data\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;        bufferedWriter.close();
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;************************ NIO ***************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testNewOutputStream (&lt;span&gt;int&lt;/span&gt; lineNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;         OutputStream outputStream = Files.newOutputStream(Paths.get(&quot;./testNewOutputStream.txt&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (--lineNum &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;             outputStream.write(&quot;写入文件Data\n&quot;&lt;span&gt;.getBytes());
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;        outputStream.close();
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; 
&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testNewBufferedWriter (&lt;span&gt;int&lt;/span&gt; lineNum) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         BufferedWriter newBufferedReader = Files.newBufferedWriter(Paths.get(&quot;./testNewBufferedWriter.txt&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (--lineNum &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             newBufferedReader.write(&quot;写入文件Data\n&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        newBufferedReader.close();
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt; 
&lt;span&gt;145&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main (String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;多次测试时可清空result.txt文件&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;         FileWriter fileWriter = &lt;span&gt;new&lt;/span&gt; FileWriter(&quot;./Result.txt&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;        testDriver();
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;测试结果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/609124/201808/609124-20180824204619486-720079896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，写入行数超过20W以上时，FileOutputStream和NewOutputStream耗费时间远远超出其他4个类。为了清晰，让我们放大其他4个类的图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/609124/201808/609124-20180824210252410-2139283594.png&quot; alt=&quot;&quot; width=&quot;763&quot; height=&quot;426&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出，这4个类中，BufferWriter和NewBufferedWriter所耗费时间更少，但总体差别不是很大。&lt;/p&gt;
&lt;p&gt;让我们再来看看，写入26W行数据以下时的情况：&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2018.cnblogs.com/blog/609124/201808/609124-20180824210305736-863532696.png&quot; alt=&quot;&quot; width=&quot;719&quot; height=&quot;427&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 可以看出，在数据量较小的情况下，这4个类所耗费时间的差异并不是很大，在更小的数据量下，它们的效率几乎没有差别。&lt;/p&gt;
&lt;h2&gt;后记&lt;/h2&gt;
&lt;p&gt;从以上分析可知（注意横坐标写入行数是指数级增加的），各个类的时间复杂度大致为O(k)，其中不同的类的k不同，导致了最终巨大的差异。&lt;/p&gt;
&lt;p&gt;这里只给出了测试结果，并未分析其底层实现原理，欢迎评论区留言。&lt;/p&gt;
&lt;p&gt;另外，我没有在其他机器测试，有兴趣的小伙伴可以将自己的测试结果发出来，共同进步^_^&lt;/p&gt;
&lt;h2&gt;附件&lt;/h2&gt;
&lt;p&gt;本次测试数据结果(若看不清，可以下载到本地看)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/609124/201808/609124-20180824214613073-650515128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 24 Aug 2018 13:48:00 +0000</pubDate>
<dc:creator>xiaoxi666</dc:creator>
<og:description>前言 众所周知，Java中有多种针对文件的操作类，以面向字节流和字符流可分为两大类，这里以写入为例： 面向字节流的：FileOutputStream 和 BufferedOutputStre</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoxi666/p/9531893.html</dc:identifier>
</item>
</channel>
</rss>