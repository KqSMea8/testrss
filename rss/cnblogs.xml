<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JAVAEE——BOS物流项目05：OCUpload、POI、pinyin4J、重构分页代码、分区添加、combobox - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/8457864.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/8457864.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1&lt;span&gt;、实现区域导入功能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n OCUpload&lt;span&gt;一键上传插件使用&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n &lt;span&gt;将文件上传到&lt;/span&gt;Action&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n POI&lt;span&gt;简介&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n &lt;span&gt;使用&lt;/span&gt;POI&lt;span&gt;解析&lt;/span&gt;&lt;span&gt;Excel&lt;/span&gt;&lt;span&gt;文件&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n 完成数据库操作&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n &lt;span&gt;使用&lt;/span&gt;pinyin4J&lt;span&gt;生成简码和城市编码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;span&gt;、区域分页查询&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n 页面调整&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n 服务端实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;span&gt;、重构分页代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n BaseAction&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n &lt;span&gt;子类&lt;/span&gt;Action&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;span&gt;、分区添加功能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n 什么是分区&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n &lt;span&gt;页面调整（&lt;/span&gt;combobox&lt;span&gt;使用）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;18&quot;&gt;n 服务端实现&lt;/p&gt;



&lt;h2&gt;2.1 &lt;strong&gt;jquery OCUpload&lt;span&gt;一键上传插件使用&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;OCUpload&lt;span&gt;（&lt;/span&gt;&lt;span&gt;One Click Upload&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一步：将&lt;/span&gt;js&lt;span&gt;文件引入页面&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;${pageContext.request.contextPath }/js/jquery-1.8.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;${pageContext.request.contextPath }/js/jquery.ocupload-1.1.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步：在页面中提供任意一个元素&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002259720-45890030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三步：调用插件提供的&lt;/span&gt;upload&lt;span&gt;方法，动态修改&lt;/span&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;span&gt;页面元素&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;页面加载完成后，调用插件的upload方法，动态修改了HTML页面元素&lt;/span&gt;
        $(&quot;#myButton&quot;&lt;span&gt;).upload({
            action:&lt;/span&gt;'xxx.action'&lt;span&gt;,
            name:&lt;/span&gt;'myFile'&lt;span&gt;
        });
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002328336-2033546582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;2.2 &lt;strong&gt;在服务端接收上传的文件&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;Action&lt;span&gt;中提供一个&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;类型的属性，名称和上传的文件输入框名称一致&lt;/span&gt;&lt;span&gt;regionFile&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@Scope(&lt;/span&gt;&quot;prototype&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RegionAction &lt;span&gt;extends&lt;/span&gt; BaseAction&amp;lt;Region&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性驱动，接收上传的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; File regionFile;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRegionFile(File regionFile) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.regionFile =&lt;span&gt; regionFile;
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 区域导入
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String importXls(){
        System.out.println(regionFile);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.3 &lt;strong&gt;apache POI&lt;span&gt;技术&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Apache POI&lt;span&gt;是&lt;/span&gt;&lt;a href=&quot;http://baike.baidu.com/view/7044910.htm&quot;&gt;&lt;span&gt;Apache&lt;span&gt;软件基金会&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的开放源码函式库，&lt;/span&gt;POI&lt;span&gt;提供&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;给&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;程序对&lt;/span&gt;&lt;span&gt;Microsoft Office&lt;/span&gt;&lt;span&gt;格式档案读和写的功能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;下载开发包：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002457346-290760237.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002508443-2137866822.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;解压上面的&lt;/span&gt;zip&lt;span&gt;文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002501333-687984859.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;在项目中引入&lt;/span&gt;POI&lt;span&gt;的依赖：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;POI&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; test1() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; FileNotFoundException, IOException{
        String filePath &lt;/span&gt;= &quot;C:\\Users\\zhaoqx\\Desktop\\BOS项目(黑马32期)\\BOS-day05\\资料\\区域导入测试数据.xls&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;包装一个Excel文件对象&lt;/span&gt;
        HSSFWorkbook workbook = &lt;span&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span&gt;new&lt;/span&gt; FileInputStream(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(filePath)));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取文件中第一个Sheet标签页&lt;/span&gt;
        HSSFSheet hssfSheet = workbook.getSheetAt(0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历标签页中所有的行&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Row row : hssfSheet) {
            System.out.println();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Cell cell : row) {
                String value &lt;/span&gt;=&lt;span&gt; cell.getStringCellValue();
                System.out.print(value &lt;/span&gt;+ &quot; &quot;&lt;span&gt;);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2.4 &lt;strong&gt;pinyin4J&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002550744-1547511801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入pinyin4J的依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.belerweb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pinyin4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.5.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test1(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;河北省    石家庄市    桥西区&lt;/span&gt;
        String province = &quot;河北省&quot;&lt;span&gt;;
        String city &lt;/span&gt;= &quot;石家庄市&quot;&lt;span&gt;;
        String district &lt;/span&gt;= &quot;桥西区&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;简码----&amp;gt;&amp;gt;HBSJZQX&lt;/span&gt;
&lt;span&gt;        
        province &lt;/span&gt;= province.substring(0, province.length() - 1&lt;span&gt;);
        city &lt;/span&gt;= city.substring(0, city.length() - 1&lt;span&gt;);
        district &lt;/span&gt;= district.substring(0, district.length() - 1&lt;span&gt;);
        
        String info &lt;/span&gt;= province + city +&lt;span&gt; district;
        
        String[] headByString &lt;/span&gt;=&lt;span&gt; PinYin4jUtils.getHeadByString(info);
        String shortcode &lt;/span&gt;=&lt;span&gt; StringUtils.join(headByString);
        System.out.println(shortcode);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;城市编码----&amp;gt;&amp;gt;shijiazhuang&lt;/span&gt;
        String citycode = PinYin4jUtils.hanziToPinyin(city, &quot;&quot;&lt;span&gt;);
        System.out.println(citycode);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt; 利用之前已经写好的pageQuery&lt;/p&gt;


&lt;p&gt;&lt;span&gt;将重复分代码统一抽取到&lt;/span&gt;BaseAction&lt;span&gt;中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002720191-1816550656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002743200-695912653.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002749994-81525931.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002758794-25856604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;区域范围很大，对区域进行细分产生分区&lt;/p&gt;

&lt;h2&gt;5.1 &lt;strong&gt;easyUI combobox&lt;span&gt;下拉框使用&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;制作一个&lt;/span&gt;json&lt;span&gt;文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002810219-1065164892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;data-options&lt;/span&gt;&lt;span&gt;=&quot;url:'${pageContext.request.contextPath }/json/combobox_data.json',
            valueField:'id',
            textField:'name'&quot;&lt;/span&gt;&lt;span&gt; 
            class&lt;/span&gt;&lt;span&gt;=&quot;easyui-combobox&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002835335-456795845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002838285-816143691.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;5.2 &lt;strong&gt;&lt;span&gt;使用&lt;/span&gt;combobox&lt;span&gt;展示区域数据&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;页面：&lt;/span&gt;WEB-INF/pages/base/subarea.jsp&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002843202-12345654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;第一步：修改页面中&lt;/span&gt;combobox&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002849655-999644695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002857338-808721883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;添加获取&lt;/span&gt;name&lt;span&gt;的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002901354-5861518.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002912255-1464846666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;第二步：在&lt;/span&gt;RegionAction&lt;span&gt;中提供&lt;/span&gt;&lt;span&gt;listajax&lt;/span&gt;&lt;span&gt;方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002916485-1355406230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第三步：在&lt;/span&gt;RegionDao&lt;span&gt;中扩展方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002927549-1562431013.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;第四步：为添加窗口中保存按钮绑定事件&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002934509-153723177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002943717-1485406898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;5.3 &lt;strong&gt;服务端实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;创建分区对应的&lt;/span&gt;Action&lt;span&gt;、&lt;/span&gt;&lt;span&gt;Service&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;Dao&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;将&lt;/span&gt;Java&lt;span&gt;对象转为&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;过程中，因为对象之间有相互引用关系，会发生死循环问题，解决方式，排除其中属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201802/1135185-20180222002950991-888050684.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 21 Feb 2018 16:36:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/8457864.html</dc:identifier>
</item>
<item>
<title>区块链开发：以太坊网络 - 宁生信</title>
<link>http://www.cnblogs.com/gregoryli/p/8457838.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gregoryli/p/8457838.html</guid>
<description>&lt;h2 id=&quot;区块链开发以太坊网络&quot;&gt;区块链开发：以太坊网络&lt;/h2&gt;
&lt;h2 id=&quot;一geth&quot;&gt;一、geth&lt;/h2&gt;
&lt;p&gt;Geth 又名Go Ethereum. 是以太坊协议的三种实现之一，由Go语言开发，完全开源的项目。Geth 可以被安装在很多操作系统上，包括Windows、Linux、Mac的OSX、Android或者IOS系统&lt;/p&gt;
&lt;p&gt;Geth官网：&lt;a href=&quot;https://geth.ethereum.org/&quot; class=&quot;uri&quot;&gt;https://geth.ethereum.org/&lt;/a&gt;&lt;br/&gt;Geth的Github地址：&lt;a href=&quot;https://github.com/ethereum/go-ethereum&quot; class=&quot;uri&quot;&gt;https://github.com/ethereum/go-ethereum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu安装geth客户端：&lt;br/&gt;官方教程：&lt;a href=&quot;https://github.com/ethereum/go-ethereum/wiki/Installation-Instructions-for-Ubuntu&quot; class=&quot;uri&quot;&gt;https://github.com/ethereum/go-ethereum/wiki/Installation-Instructions-for-Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装方法一：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;sudo apt-get install software-properties-common
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update
sudo apt-get install ethereum&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;系统联网执行后，即完成了安装以太坊客户端，其中包括geth,bootnode, evm, disasm, rlpdump,ethtest&lt;/p&gt;
&lt;p&gt;此时如果输入Geth命令，会出现启动以太坊启动的画面&lt;/p&gt;
&lt;p&gt;安装方法二：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;git clone https://github.com/ethereum/go-ethereum
sudo apt-get install -y build-essential golang
cd go-ethereum
make geth

greg@greg:~$ geth version
Geth
Version: 1.7.3-stable
Git Commit: 4bb3c89d44e372e6a9ab85a8be0c9345265c763a
Architecture: amd64
Protocol Versions: [63 62]
Network Id: 1
Go Version: go1.9
Operating System: linux
GOPATH=/home/greg/go
GOROOT=/home/greg/local/go&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二以太坊查看网络状态&quot;&gt;二、以太坊查看网络状态&lt;/h2&gt;
&lt;p&gt;attach：Start an interactive JavaScript environment (connect to node) 启动交互式JavaScript环境（连接到node）&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;打开geth --testnet
greg@greg:~/.ethereum$ geth attach ipc://${HOME}/.ethereum/testnet/geth.ipc
Welcome to the Geth JavaScript console!

instance: Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9
 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0


查看链接状态
net.listening
net.peerCount
查看自己的伙伴的网络信息
admin.peers
查看自己的网络信息
admin.nodeInfo

打开.bashrc写入
alias gat='geth attach ipc://${HOME}/.ethereum/testnet/geth.ipc'&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三以太坊构建本地私有网络&quot;&gt;三、以太坊构建本地私有网络&lt;/h2&gt;
&lt;h3 id=&quot;编辑创世区块&quot;&gt;1.编辑创世区块&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;greg@greg:~$ mkdir ethprivate
greg@greg:~$ cd ethprivate/
greg@greg:~/ethprivate$ vim genesis.json
greg@greg:~/ethprivate$ vim genesis.json
greg@greg:~/ethprivate$ cat genesis.json 
{
    &quot;nonce&quot;: &quot;0x0000000000000042&quot;,     
    &quot;timestamp&quot;: &quot;0x00&quot;,
    &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;extraData&quot;: &quot;0x00&quot;,     
    &quot;gasLimit&quot;: &quot;0x8000000&quot;,     
    &quot;difficulty&quot;: &quot;0x400&quot;,
    &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;,     
    &quot;alloc&quot;: { }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;genesis（创世）区块是区块链的起点，是它的第一块区块，0号区块，唯一一个没有前任的区块。这个协议确保了没有其他节点会和你的节点的区块链版本一致，除非它们的创世区块和你的一模一样。通过这种方法，你就可以创建任意多的私有区块链。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Mixhash
一个256位的哈希值，和nonce配合，一起用来证明在区块链上已经做了足够的计算量（工作证明）。这个nonce 和 mixhash 的组成，必须满足一个在黄皮书中所描述的数学上的条件，黄皮书 4.3.4。
Nonce
一个64位的哈希值，和mixhash配合，一起用来证明在区块链上已经做了足够的计算量（工作证明）
Difficulty
定义挖矿的目标，可以用上一个区块的难度值和时间戳计算出来，值越高，矿工越难挖到区块
Alloc 预先填入一些钱包和余额
Coinbase
160位的钱包地址。在创世区块中可以被定义成任何的地址，因为当每挖到一个区块的时候，这个值会变成矿工的etherbase地址
Timestamp  一个unix的time()函数的输出值，时间戳
extraData  32字节长度，可以为私有链留下一些信息，如你的姓名等，用以证明这个私有链是你创建的
gasLimit   当前链，一个区块所能消耗的gas上限

私有链中会使用到的命令行参数
--nodiscover
添加这个参数，确保没有人能发现你的节点。不然的话，可能有人无意中会链接到你的私有区块链。
--maxpeers 0
使用maxpeers 0,如果你不希望其他人连接到您的测试链。当然，您也可以调整这个数,如果你知道有多少同伴会连接你的节点。
--rpc
在你的节点上激活RPC接口。这参数在geth中默认启用。
--rpcapi &quot;db,eth,net,web3&quot;
这个命令描述哪些接口可以通过RPC来访问，默认情况下，geth开启的是web3接口。
--rpcport &quot;8080&quot;
将端口号设置成8000以上的任何一个你网络中打开的端口。默认是8080。
--rpccorsdomain http://chriseth.github.io/browser-solidity/
设置可以连接到你的节点的url地址，以执行RPC客户端的任务。最好不要使用通配符 * ,这样将允许任何url都可以链接到你的RPC实例。
--datadir &quot;/home/TestChain1&quot;
私有链的数据目录，确保与公共以太坊链的数据目录区分开来。
--port &quot;30303&quot;
这是“网络监听的端口”,您可以用它手动的和你的同伴相连。
--identity &quot;TestnetMainNode&quot;
为你的节点设置一个ID。用于和你们的一系列同伴进行区分。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;初始化创世区块&quot;&gt;2.初始化创世区块&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;greg@greg:~/ethprivate$ geth --datadir &quot;./&quot; init genesis.json
WARN [02-21|23:48:06] No etherbase set and no accounts found as default 
INFO [02-21|23:48:06] Allocated cache and file handles         database=/home/greg/ethprivate/geth/chaindata cache=16 handles=16
Fatal: Failed to write genesis block: genesis has no chain configuration
greg@greg:~/ethprivate$ ls
genesis.json  geth  keystore
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时当前目录下面会新增出两个文件夹geth和keystore&lt;/p&gt;
&lt;h5 id=&quot;geth中保存的是区块链的相关数据&quot;&gt;geth中保存的是区块链的相关数据&lt;/h5&gt;
&lt;h5 id=&quot;keystore中保存的是该链条中的用户信息&quot;&gt;keystore中保存的是该链条中的用户信息&lt;/h5&gt;
&lt;p&gt;每次当你想要使用你自定义的私有链时，你都需要先使用geth来运行以上的命令来启动它。&lt;/p&gt;
&lt;h3 id=&quot;创建自己的私有链条&quot;&gt;3.创建自己的私有链条&lt;/h3&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;创建自己的私有链条，同时记录日志输出到geth.log
greg@greg:~/ethprivate$ geth --datadir &quot;./&quot; --nodiscover console 2&amp;gt;&amp;gt;geth.log
Welcome to the Geth JavaScript console!

instance: Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9
 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0
在自己的私有链条上创建用户
&amp;gt; eth.accounts
[]
&amp;gt; personal.newAccount(&quot;123456&quot;)
&quot;0xe158bf2c29ca283c7bdc99880e36985d9f7d23f8&quot;
&amp;gt; eth.accounts
[&quot;0xe158bf2c29ca283c7bdc99880e36985d9f7d23f8&quot;]
&amp;gt; personal.newAccount(&quot;abcdef&quot;)
&quot;0x8cd642b5f69a24fd3d05786dfe0eb3f44dc8bb33&quot;
&amp;gt; eth.accounts
[&quot;0xe158bf2c29ca283c7bdc99880e36985d9f7d23f8&quot;, &quot;0x8cd642b5f69a24fd3d05786dfe0eb3f44dc8bb33&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入命令&lt;code&gt;personal.newAccount(&quot;123456&quot;)&lt;/code&gt;, 该命令将创造一个新的用户，该用户的密码是123456&lt;/p&gt;
&lt;p&gt;再次输入命令 &lt;code&gt;eth.accounts&lt;/code&gt;, 我们会发现一个新的用户被创建了出来，这就代表我们已经创建了一个账户，重复&lt;code&gt;personal.newAccount()&lt;/code&gt; 和&lt;code&gt;eth.accounts&lt;/code&gt; 我们可以创建若干个账户出来&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 16:09:00 +0000</pubDate>
<dc:creator>宁生信</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gregoryli/p/8457838.html</dc:identifier>
</item>
<item>
<title>springMvc+swagger整合例子 - 喝着啤酒写bug</title>
<link>http://www.cnblogs.com/cq-jiang/p/8457770.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cq-jiang/p/8457770.html</guid>
<description>&lt;p&gt;　　Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API与接口方法，参数等保存同步，大大减少了接口开发人员的工作量.这个例子是我本地运行正常的，完整demo在文章最后。&lt;/p&gt;
&lt;h2&gt;　　第一步：在pom.xml引入相关jar &lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.springfox&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springfox-swagger2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.springfox&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springfox-swagger-ui&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.8.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.6.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-annotations&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.6.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;　　第二步：配置spring-servlet.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 激活@controller模式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置包扫描位置（会在此包下扫描@controller控制器） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.scan,com.bean&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  swagger静态文件路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;mapping&lt;/span&gt;&lt;span&gt;=&quot;/swagger/**&quot;&lt;/span&gt;&lt;span&gt; location&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/swagger/&quot;&lt;/span&gt;&lt;span&gt; cache-period&lt;/span&gt;&lt;span&gt;=&quot;31556926&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:default-servlet-handler &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.scan.config.SwaggerConfig&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;　　第三步：编写SwaggerConfig&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.scan.config;
   
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.base.Predicate;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.config.annotation.EnableWebMvc;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; 

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; springfox.documentation.service.ApiInfo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; springfox.documentation.service.Contact;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; springfox.documentation.spi.DocumentationType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; springfox.documentation.spring.web.plugins.Docket;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; springfox.documentation.swagger2.annotations.EnableSwagger2;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; com.google.common.base.Predicates.or;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; com.google.common.collect.Lists.newArrayList; 
 
@Configuration
@EnableSwagger2
@ComponentScan(basePackages &lt;/span&gt;= {&quot;com.scan.controller&quot;&lt;span&gt;})   
@EnableWebMvc
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SwaggerConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebMvcConfigurationSupport {

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Docket customDocket() {
        &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo());
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ApiInfo apiInfo() {
        Contact contact &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Contact(&quot;老王&quot;, &quot;https://www.baidu.me&quot;, &quot;baidu_666@icloud.com&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ApiInfo(&quot;Blog前台API接口&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大标题 title&lt;/span&gt;
                &quot;Swagger测试demo&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小标题&lt;/span&gt;
                &quot;0.0.1&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;版本&lt;/span&gt;
                &quot;www.baidu.com&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;termsOfServiceUrl&lt;/span&gt;
                contact,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;作者&lt;/span&gt;
                &quot;Blog&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;链接显示文字&lt;/span&gt;
                &quot;https://www.baidu.me&quot;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;网站链接&lt;/span&gt;
&lt;span&gt;        );
    }
    
      
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;　　第四步：控制层的配置&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;/userController&quot;&lt;span&gt;)
@Api(tags &lt;/span&gt;= &quot;二：用户信息&quot;&lt;span&gt;) //swagger分类标题注解
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {

    @RequestMapping(value &lt;/span&gt;= &quot;/listCompound&quot;, method =&lt;span&gt; RequestMethod.GET)
    @ResponseBody&lt;br/&gt;　　//swagger返回值注解
    @ApiResponses(value &lt;/span&gt;=&lt;span&gt; {
            @ApiResponse(code &lt;/span&gt;= 500, message = &quot;系统错误&quot;&lt;span&gt;),
            @ApiResponse(code &lt;/span&gt;= 200, message = &quot;0 成功,其它为错误,返回格式：{code:0,data[{}]},data中的属性参照下方Model&quot;, response = UserVo.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;) })
    @ApiOperation(httpMethod &lt;/span&gt;= &quot;GET&quot;, value = &quot;个人信息&quot;&lt;span&gt;)//swagger 当前接口注解
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String listCompound(
            @ApiParam(required &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;, name = &quot;start&quot;, value = &quot;start&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; start,
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; limit,
            @ApiParam(required &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;, name = &quot;userName&quot;, value = &quot;名称模糊查询&quot;&lt;span&gt;) String userName) {
        List&lt;/span&gt;&amp;lt;UserVo&amp;gt; data = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;UserVo&amp;gt;&lt;span&gt;();
        String msg &lt;/span&gt;= data.size() &amp;gt; 0 ? &quot;&quot; : &quot;没有查询到相关记录&quot;&lt;span&gt;;
        Result result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Result();
        result.setMsg(msg);
        result.setCode(&lt;/span&gt;0&lt;span&gt;);
        result.setData(data);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; JSONObject.toJSONString(result);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第五步：&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;下载swaggerUi&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;,将下载后的文件解压，将dist目录下的文件，复制到webapp下的swagger目录中(这个目录的名字自定义，但要和spring-servert.xml中(&amp;lt;mvc:resources mapping=&quot;/swagger/**&quot; location=&quot;/WEB-INF/swagger/&quot;) 的名称要一致,修改index.html中文档加载的地址.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;window.onload = function() {
  
  // Build a system
  const ui = SwaggerUIBundle({
    //url: &quot;http://petstore.swagger.io/v2/swagger.json&quot;,
    url:&quot;http://127.0.0.1:8080/swagger-spring/v2/api-docs.do&quot;,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: &quot;StandaloneLayout&quot;
  })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果以上配置正确，在浏览器中输入http://127.0.0.1:8080/swagger-spring/swagger/index.html，将会出现如下界面:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1128579/201802/1128579-20180221231154224-1032829212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 　　 &lt;strong&gt;1、与模型相关的注解,用在bean上面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　@ApiModel：用在bean上，对模型类做注释；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　@ApiModelProperty：用在属性上，对属性做注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;2、与接口相关的注解&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　@Api：用在controller上，对controller进行注释；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　@ApiOperation：用在API方法上，对该API做注释，说明API的作用；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　@ApiImplicitParams：用来包含API的一组参数注解，可以简单的理解为参数注解的集合声明； &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　&lt;strong&gt;　@ApiImplicitParam：用在@ApiImplicitParams注解中，也可以单独使用，说明一个请求参数的各个方面，该注解包含的常用选项有：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　paramType：参数所放置的地方，包含query、header、path、body以及form，最常用的是前四个。&lt;/p&gt;
&lt;p&gt;　　　　　　name：参数名；&lt;/p&gt;
&lt;p&gt;　　　　　　dataType：参数类型，可以是基础数据类型，也可以是一个class；&lt;/p&gt;
&lt;p&gt;　　　　　　required：参数是否必须传；&lt;/p&gt;
&lt;p&gt;　　　　　　value：参数的注释，说明参数的意义；&lt;/p&gt;
&lt;p&gt;　　　　　　defaultValue：参数的默认值；&lt;/p&gt;

&lt;p&gt;　　　 &lt;strong&gt;@ApiResponses：通常用来包含接口的一组响应注解，可以简单的理解为响应注解的集合声明；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　 @ApiResponse：用在@ApiResponses中，一般用于表达一个响应信息&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　code：即httpCode，例如400 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　message：信息，例如&quot;操作成功&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　response = UserVo.class  这里UserVo是一个配置了&lt;/strong&gt;@ApiModel注解的对像，该是对像属性已配置 &lt;strong&gt;@ApiModelProperty,swagger可以通过这些配置，生　成接口返回值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　注意事项:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为了在swagger-ui上看到输出，至少需要两个注解：@Api和@ApiOperation&lt;/li&gt;
&lt;li&gt;即使只有一个@ApiResponse，也需要使用@ApiResponses包住&lt;/li&gt;
&lt;li&gt;对于@ApiImplicitParam的paramType：query、form域中的值需要使用@RequestParam获取， header域中的值需要使用@RequestHeader来获取，path域中的值需要使用@PathVariable来获取，body域中的值使用@RequestBody来获取，否则可能出错；而且如果paramType是body，name就不能是body，否则有问题，与官方文档中的“If paramType is &quot;body&quot;, the name should be &quot;body&quot;不符。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jlq023/spring_swaggerDemo&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;完整demo下载地址:https://github.com/jlq023/spring_swaggerDemo&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 15:46:00 +0000</pubDate>
<dc:creator>喝着啤酒写bug</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cq-jiang/p/8457770.html</dc:identifier>
</item>
<item>
<title>xBIM WeXplorer xViewer 基本应用 - 在 水 一 方</title>
<link>http://www.cnblogs.com/w2011/p/8457805.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w2011/p/8457805.html</guid>
<description>&lt;h3&gt;   目录&lt;/h3&gt;
&lt;h4&gt;    基础&lt;/h4&gt;
&lt;h4&gt;     高级应用&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（一）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（二）&lt;/li&gt;
&lt;li&gt;xBIM 综合使用案例与 ASP.NET MVC 集成（三）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;   在本案例中、我们将如何创建最基本的模型查看器。除展示BIM模型外、不会做其他操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello building!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/xbim-viewer.debug.bundle.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;canvas &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;viewer&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;500&quot;&lt;/span&gt;&lt;span&gt; height&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; viewer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; xViewer(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;viewer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        viewer.load(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data/SampleHouse.wexbim&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        viewer.start();
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      我们只要引用了xbim-viewer.debug.bundle.js 库，常见xView 对象传递&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;元素的&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;并启动。&lt;span&gt;只需确保从Web服务器运行，而不仅仅是本地文件，因为xViewer使用AJAX获取wexBIM数据，并且一些浏览器甚至在本地HTML文件上施加CORS限制。&lt;/span&gt;&lt;span&gt;另外请确保您不要使用低于11的IE，因为您需要支持WebGL。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;       如果我们在应用程序需要部署的话，&lt;span&gt;&lt;span&gt;我们已经提到&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;xbim-viewer.debug.bundle.js&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;包含&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;xbim-viewer.js&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;有两个依赖库一起捆绑&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;GL-matrix.js&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;和&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;支持WebGL utils.js&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;span&gt;。从文件的名称就可以看出事试用版。&lt;span&gt;如果您下载此库，它包含用于不同类型部署的多个文件。&lt;/span&gt;&lt;span&gt;软件包是独立的，并以缩小版和调试版发布。&lt;/span&gt;&lt;span&gt;如果您的部署更合理，则还可以引用单独的库。&lt;/span&gt;&lt;span&gt;这些是明智的组合:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/xbim-viewer.debug.bundle.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用于调试捆绑版本（如果您选择了IDE，也会在VS中为您添加智能感知支持）或&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/xbim-viewer.min.bundle.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;对于缩小版本（这可能是您的发布选择）或&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/gl-matrix.min.js.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/webgl-utils.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/xbim-viewer.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它们全部分开。&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 15:45:00 +0000</pubDate>
<dc:creator>在 水 一 方</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w2011/p/8457805.html</dc:identifier>
</item>
<item>
<title>centos-安装python3.6环境并配置虚拟环境 - 北门吹雪</title>
<link>http://www.cnblogs.com/2bjiujiu/p/8457790.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/2bjiujiu/p/8457790.html</guid>
<description>&lt;p&gt;&lt;span&gt;python3.6下载地址：&lt;a href=&quot;https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz&quot;&gt;https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;linux&lt;/strong&gt;&lt;strong&gt;下python&lt;/strong&gt;&lt;strong&gt;环境配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;统一目录：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;源码存放位置 $HOME/tools&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;安装目录： /application&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装python&lt;/strong&gt;&lt;strong&gt;环境：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　1. &lt;/span&gt;&lt;span&gt;下载&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;# 创建下载目录
mkdir $HOME/tools 
# 切换到tools统一管理源码目录
cd $HOME/tools 
wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　2. 解压&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;tar -xf Python-3.6.4.tgz
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　3. 进入源码包&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;cd $HOME/tools/Python-3.6.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　4. 配置，编译，安装&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;./configure --enable-optimizations --prefix=/application/python-3.6.4
# --enable-optimizations 稳定性优化参数
# --prefix 指定安装路径
# 编译和安装
make &amp;amp;&amp;amp; make install
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　5. 创建软链接&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;ln -s /application/python-3.6.4 /application/python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　6. 把python加入环境变量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;echo 'export PATH=&quot;/application/python/bin:$PATH&quot;' &amp;gt;&amp;gt; /etc/profile
# 注意多个软件加入环境变量中间以 : 隔开&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　7. 启动python解释器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;. /etc/profile
python3
# linux系统中默认为python命令为启动python2解释器，python3启动对应的python3.x版本解释器
# 至此，python环境安装完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;centos下如何给该3.6.4版本安装第三方库？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;pip3
# 查看已经安装的第三方库
pip3 list
# pip3 install django           python3安装Django程序，可以通过 == 指定软件包版本
# pip3 和 pip 本质是一样的，只是这个pip3指定给安装的python3版本安装软件包&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;有时我们安装Django&lt;/strong&gt;&lt;strong&gt;时候，下载太慢，可不可以利用国内网速呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       么问题，通过阿里云源安装&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;pip3 install django -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com

# 不知看官们是否发现一个问题，就是每次安装软件包时候都要 -i 敲大量的重复参数，累不？
# 不累不累 ^_^&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何一本万利解决掉楼上这个问题呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. 在家目录下创建一个 .pip 文件夹&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
mkdir $HOME/.pip -P
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　2. 然后在这个目录下创建 pip.conf 文件，并添加点内容&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
echo -e &quot;[global]\ntrusted-host=mirrors.aliyun.com\nindex-url=http://mirrors.aliyun.com/pypi/simple/&quot; &amp;gt; $HOME/.pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;以上是linux平台下的操作秀，window小伙伴不要羡慕了，献上一计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　直接使用pycharm不就得了，解放时间解放智商，何乐而不为？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　# 我可生气了　＜＾＞&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. windows下创建&lt;strong&gt;%APPDATA%&lt;/strong&gt;\pip\pip.ini文件来配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　# %HOMEPATH% 是什么东东？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　在资源管理器中，不是有个文件路径输入框么，直接输入 &lt;strong&gt;%APPDATA%&lt;/strong&gt;&lt;strong&gt;，然后呢，会跳转到一个目录，然后在这个目录下创建一个&lt;/strong&gt;&lt;strong&gt;pip&lt;/strong&gt;&lt;strong&gt;文件夹，进入这个&lt;/strong&gt;&lt;strong&gt;pip&lt;/strong&gt;&lt;strong&gt;文件夹呢，再创建一个&lt;/strong&gt;&lt;strong&gt;pip.ini&lt;/strong&gt;&lt;strong&gt;文件，写入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[global]
trusted-host=mirrors.aliyun.com
index-url=http://mirrors.aliyun.com/pypi/simple/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;完事了，再试试pip安装软件，快不快？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　# ？？？？？？？？？？ ^_^ ……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;centos如何对python安装虚拟化环境？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. 安装虚拟化库&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
pip3 install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　2. 创建虚拟环境管理目录.pyenv&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
mkdir $HOME/.pyenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;#  $HOME 表示当前用户家目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. &lt;/span&gt;&lt;span&gt;在 $HOME/.bashrc添加内容&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
cat &amp;gt;&amp;gt;$HOME/.bashrc&amp;lt;&amp;lt;beimenchuixue
# 使用Distribute和pip方式替代以前setuptools和easy_install
export VIRTUALENV_USE_DISTRIBUTE=1
# 指定虚拟环境路径
export WORKON_HOME=$HOME/.pyenv
# 指定python虚拟根基
export VIRTUALENVWRAPPER_PYTHON=/application/python/bin/python3
# 指定 vituralenvwrapper虚拟 shell环境
if [ -e /application/python/bin/virtualenvwrapper.sh ];then
source /application/python/bin/virtualenvwrapper.sh
 fi
# 虚拟环境pip安装根基
export PIP_VIRTUALENV_BASE=$WORKON_HOME
# pip是否遵守虚拟环境
export PIP_RESPECT_VIRTUALENV=true
&amp;lt;&amp;lt;beimenchuixue
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4. &lt;span&gt;让改动生效&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
. $HOME/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　5. 获得帮助信息&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
virtualenvwrapper –help
# 如果出现帮助信息，至此centos上虚拟环境安装完成
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这个虚拟化包安装的常用命名&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. &lt;/span&gt;&lt;span&gt;mkvirtualenv [环境名]                        # 创建基本虚拟环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. --python=                                         # 虚拟环境指定python版本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. &lt;/span&gt;&lt;span&gt;rmvirtualenv [环境名]                        # 删除虚拟环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4. &lt;/span&gt;&lt;span&gt;workon [环境名]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　5. &lt;/span&gt;&lt;span&gt;deactivate                                         # 退出虚拟环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　6. workon                                              # 列出虚拟环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;以上命令难记又难理解，一般我是这样设置，易读并容易理解写入别名&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　mkvirtualenv　　--&amp;gt;　　mkenv&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　rmvirtualenv　　--&amp;gt;　　rmenv&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　deactivate　　　 --&amp;gt;　　outenv&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
sed -i &quot;9i # only want to easy use and read\n\
# you also can set what you like\n\
alias mkenv='mkvirtualenv'\n\
alias rmenv='rmvirtualenv'\n\
alias outenv='deactivate'&quot; $HOME/.bashrc

# 这些配置谁执行谁生效，对应当前登录用户
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　1. 让别名生效&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
. $HOME/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　2. 测试&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
mkenv test            # 创建虚拟环境test，并直接进入

outenv                  # 退出虚拟环境

workon                 # 检查

rmenv test            # 删除test虚拟环境

workon                 # 检查
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　# 看官又想知道window下如何创建虚拟化环境，嘻嘻，建议直接使用pycharm，创建项目的是既可以自动创建虚拟环境，可以节省时间，又可以节省少量的智商&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;唉，上面的步骤我看不懂啊，别急，下面有一键从0开始安装的脚本，直接回车按enter键执行就可以了，一键安装，剩下时间还可以逛逛b站看看动画，岂不美哉，美滋滋&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;githup: https://github.com/beimenchuixue/shells&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
#!/bin/sh
# author: beimenchuixue
# email: 422083556@qq.com
# blog: http://www.cnblogs.com/2bjiujiu/

download_to=&quot;$HOME/tools&quot;
py_version=&quot;3.6.4&quot;
install_path=&quot;/application&quot;
yilai_bao=&quot;zlib-devel gcc gcc-c++&quot;
env_path=&quot;/etc/profile&quot;
add_path=&quot;/application/python/bin&quot;
vitrualenv_path=&quot;$HOME/.pyenv&quot;
user_env_path=&quot;$HOME/.bashrc&quot;

. /etc/init.d/functions

sure_ok() {
    [ $1 -eq 0 ] &amp;amp;&amp;amp; {
        action &quot;$2 is&quot; /bin/true
    } || {
        action &quot;$2 is&quot; /bin/false
        exit $1
    }
}

install_yilai() {
    yum install -y $yilai_bao
    sure_ok $? &quot;python yilai_bao install&quot;
}
# install_yilai

down_python() {
    [ -d $download_to ] || {
        mkdir $download_to -p
        action &quot;init download path is&quot; /bin/true
    }
    cd $download_to
    yum install -y wget &amp;amp;&amp;gt; /dev/null
    echo &quot;Foreign sities may be slow, please waitting&quot;
    wget -q https://www.python.org/ftp/python/${py_version}/Python-${py_version}.tgz &amp;amp;&amp;gt; /dev/null
    sure_ok $? 'down python-$py_version'
}
# down_python

jie_ya() {
    cd $download_to
    [ -f Python-${py_version}.tgz ] &amp;amp;&amp;amp; {
        tar -xf Python-${py_version}.tgz
    } || {
        down_python
        tar -xf Python-${py_version}.tgz
    }
    sure_ok $? &quot;python jie ya&quot;
}
# jie_ya

go_configure() {
    cd $download_to/Python-${py_version}
    ./configure --enable-optimizations --prefix=${install_path}/Python-${py_version} &amp;amp;&amp;gt; /dev/null
    sure_ok $? &quot;python configure&quot;  
}
# go_configure

go_make() {
    cd $download_to/Python-${py_version}
    echo &quot;may be slow, please wait...&quot;
    make &amp;amp;&amp;gt; /dev/null
    sure_ok $? &quot;python- make&quot;
}
# go_make

go_make_install() {
    cd $download_to/Python-${py_version}
    echo &quot;also need some time, please wait...&quot;
    make install &amp;amp;&amp;gt; /dev/null
    sure_ok $? &quot;python make install&quot;
}
# go_make_install

create_soft_link() {
    ln -s ${install_path}/Python-${py_version} ${install_path}/python
    sure_ok $? &quot;python create soft link&quot;
}
# create_soft_link

go_add_path() {
    linse_num=`sed -n '/export PATH=/=' $env_path`
    [ -z &quot;$linse_num&quot; ] &amp;amp;&amp;amp; {
        echo &quot;export PATH=\&quot;$add_path:$PATH\&quot;&quot; &amp;gt;&amp;gt; $env_path
        sure_ok $? &quot;python add path&quot;
    } || {
        change_data=$( echo `sed -n '/export PATH=/p' $env_path`| awk -F '[ &quot;]' -v v=$add_path  '{print $1,$2&quot;\&quot;&quot;$2$3&quot;:&quot;v&quot;\&quot;&quot;}')
        sed -i &quot;${linse_num}c $change_data&quot; $env_path
        . $env_path
        sure_ok $? &quot;python add path&quot;
    }   
}
# go_add_path

go_aliyun_pip(){
    [ -d $HOME/.pip ] || {
        mkdir $HOME/.pip -p
        sure_ok $? &quot;init .pip dir&quot;
    }
    cd $HOME/.pip
    echo -e &quot;[global]\ntrusted-host=mirrors.aliyun.com\nindex-url=http://mirrors.aliyun.com/pypi/simple/&quot; &amp;gt; pip.conf
    sure_ok $? &quot;python go aliyun pip&quot;
}
# go_aliyun_pip

go_install_vitualenv() {
    . $env_path
    pip3 install virtualenvwrapper &amp;gt;&amp;gt; /dev/null
    sure_ok $? &quot;python install virtualenv&quot;
}
# go_install_vitualenv

go_setting_vitualenv() {
    [ -d $vitrualenv_path ] || {
        mkdir $vitrualenv_path -p
        sure_ok $? &quot;python mkdir $vitrualenv_path&quot;
    }
   cat&amp;gt;&amp;gt;$user_env_path&amp;lt;&amp;lt;jia
export VIRTUALENV_USE_DISTRIBUTE=1
export WORKON_HOME=$vitrualenv_path
export VIRTUALENVWRAPPER_PYTHON=$add_path/python3
if [ -e $add_path/virtualenvwrapper.sh ];then
    source $add_path/virtualenvwrapper.sh
fi
export PIP_VIRTUALENV_BASE=\$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
jia
    sure_ok $? &quot;python setting virtualenv&quot;
}
# go_setting_vitualenv

person_virtualenv_alias() {
    sed -i &quot;9i # only want to easy use and read\n\
# you also can set what you like\n\
alias mkenv='mkvirtualenv'\n\
alias rmenv='rmvirtualenv'\n\
alias outenv='deactivate'&quot; $user_env_path
    sure_ok $? &quot;python vituralenv person setting&quot;
}
# person_virtualenv_alais

beimenchuixue_main() {
    install_yilai
    down_python
    jie_ya
    go_configure
    go_make
    go_make_install
    create_soft_link
    go_add_path
    go_aliyun_pip
    go_install_vitualenv
    go_setting_vitualenv
    person_virtualenv_alias
}

beimenchuixue_main
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 15:34:00 +0000</pubDate>
<dc:creator>北门吹雪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/2bjiujiu/p/8457790.html</dc:identifier>
</item>
<item>
<title>【SSH框架】之Spring系列（一） - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8457785.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8457785.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;微信公众号：compassblog&lt;/p&gt;
&lt;p&gt;欢迎关注、转发，互相学习，共同进步！&lt;/p&gt;
&lt;p&gt;有任何问题，请后台留言联系！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1、前言&lt;/h3&gt;
&lt;p&gt;前面更新过几篇关于 Struts2 框架和 Hibernate 框架的文章，但鉴于这两种框架在今天的主流开发中已经很少用了，所以关于这两种框架的更新权当兴趣，有时间也还会更新的。现在主流开发中代替这两个框架的是 SpringMVC 和 MyBatis 等等，接下来主要精力集中于 Spring、SpringMVC、Spring Boot 等等，特别是 Spring Boot 框架，当然肯定也会有其他方面的内容，知无不写，写无不尽。&lt;/p&gt;
&lt;h3&gt;2、Spring 框架概述&lt;/h3&gt;
&lt;p&gt;（1）、Spring 框架在三层架构中的位置&lt;/p&gt;
&lt;p&gt;Spring 框架在三层架构中的位置在【&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5MTE0ODcwNQ==&amp;amp;mid=2247483975&amp;amp;idx=1&amp;amp;sn=24f28cdc3399c0d295a5ceb209383e10&amp;amp;chksm=fe322189c945a89f0c2723de0c7c1ef48cbd218e14ed2c8ea0a9c7c4da241737011bc7cf66d7&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;【SSH框架】之Hibernate系列（一）&lt;/a&gt;】这篇文章中已经提到过，主要描述与下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3R4VBiavfDxvRd8ricTDcbRfexcPJJ0o5koNSPJmssnFTGSYVUGm9eib5smcugmbJvcm2NOGPSS4CQQia9uNmI0dhg/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5015015015015015&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;666&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）、Spring 是什么&lt;/p&gt;
&lt;p&gt;Spring 是一个轻量级的 Java 开源框架，兴起于2003年，它分层架构的特点为 J2EE 应用程序开发提供集成的框架。Spring 的核心是控制反转（IOC）和面向切面（AOP），是一个一站式的框架。&lt;/p&gt;
&lt;p&gt;（3）、Spring 框架的优势与功能（一站式）&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Spring 相当于一个容器，可以将所有对象创建和依赖关系维护，交给 Spring 管理 &lt;br/&gt;AOP 编程的支持，容器中装什么对象就有什么功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能声明式事务的支持只需要通过配置就可以完成对事务的管理，而无需手动编程，使得程序的测试更为方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Spring 不仅不排斥各种优秀的开源框架，如：Struts、Hibernate、MyBatis等，还能帮其他框架管理对象，降低 JavaEE API 的使用难度。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Spring 对 JavaEE 中的 API 如 JDBC、JavaMail等提供了封装，使这些 API 应用难度大大降低。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Spring 支持 JUnit 测试支持，可以通过注解方便的测试 Spring 程序方便集成各种优秀框架。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3、搭建 Spring 开发环境并完成第一个测试实例&lt;/h3&gt;
&lt;p&gt;（1）、新建一个 web 项目，导入 Spring 所需要的基本包，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3R4VBiavfDxvRd8ricTDcbRfexcPJJ0o5ksibx7mQiaRqJNMtcbTPUpWK1kHAfQOHuRPzaZjA7VAX6XCEqPJwo5CnQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7351694915254238&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;472&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）、创建一个 Bean 对象，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;package com.spring.bean;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Student {&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）、在 src 下新建配置文件 applicationContext.xml，将注册对象写入容器，代码如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;applicationContext.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot; &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd &quot;&amp;gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）、书写测试类 TestDemo.java，代码如下：&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;java language-java hljs&quot; readability=&quot;5&quot;&gt;package com.spring.test;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.junit.Test;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.context.ApplicationContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import com.spring.bean.Student;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;TestDemo {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;test&lt;span class=&quot;hljs-params&quot;&gt;(){&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）、使用 JUnit4 进行测试，结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3R4VBiavfDxvRd8ricTDcbRfexcPJJ0o5kOxSLe6efUkSsuvz6odTo19Fiar8wUrAKoE6DYjsHSSzKA0Khq8auwyQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.2641509433962264&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3R4VBiavfDxvRd8ricTDcbRfexcPJJ0o5kHVCCWblYIsxx1f0WK2evBVZC26fxcJL8XvjfDAqoBmibb1FEH8le10w/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.2824561403508772&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本项目运行环境：&lt;/strong&gt;jdk1.7&lt;/p&gt;
&lt;h3&gt;4、Spring 配置详解&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&amp;lt;!-- Bean元素:使用该元素描述需要spring容器管理的对象&lt;br/&gt;class属性:被管理对象的完整类名.&lt;br/&gt;name属性:给被管理的对象起个名字.获得对象时根据该名称获得对象.  &lt;br/&gt;可以重复.可以使用特殊字符.&lt;br/&gt;id属性: 与name属性一模一样. &lt;br/&gt;名称不可重复.不能使用特殊字符.&lt;br/&gt;结论: 尽量使用name属性.&lt;br/&gt;--&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean  &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stu&quot; &lt;span class=&quot;hljs-attr&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.spring.bean.Student&quot; &amp;gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;5、Spring 框架的思想&lt;/h3&gt;
&lt;p&gt;（1）、IOC：Inverse Of Control，即控制反转，将对象创建的方式交给了 Spring 容器；&lt;/p&gt;
&lt;p&gt;（2）、DI：Dependency Injection，即依赖注入，IOC 的实现需要 DI 支持。&lt;/p&gt;
&lt;h3&gt;6、Spring 属性注入&lt;/h3&gt;
&lt;p&gt;（1）、set方法注入：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean  &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stu&quot; &lt;span class=&quot;hljs-attr&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.spring.bean.Student&quot; &amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）、构造函数注入：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stu1&quot; &lt;span class=&quot;hljs-attr&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.spring.bean.Student&quot; &amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注微信公众号compassblog，后台回复 “Spring系列一” 获取本项目源码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;您可能还喜欢：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本系列后期仍会持续更新，欢迎关注！&lt;/p&gt;

&lt;p&gt;如果你认为这篇文章有用，欢迎转发分享给你的好友！&lt;/p&gt;

&lt;p&gt;本号文章可以任意转载，转载请注明出处！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;扫码关注微信公众号，了解更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3R4VBiavfDxuP6hBA0uiayPYfoqQ9fvsibmVarqGdicZMqAGFhJalcWg78yg9aJicVFibDqjlPx679hdNQlzPBZA0rfA/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 21 Feb 2018 15:31:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8457785.html</dc:identifier>
</item>
<item>
<title>nginx + tomcat实现负载均衡 - 代码风云</title>
<link>http://www.cnblogs.com/cjh-notes/p/8457727.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjh-notes/p/8457727.html</guid>
<description>&lt;p&gt;&lt;span&gt;作者Mr.Chen，转载请注明博客出处：&lt;a href=&quot;http://www.cnblogs.com/cjh-notes/&quot;&gt;http://www.cnblogs.com/cjh-notes/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;负载均衡就是流量分发，优选软件解决方案，成本低效果好。&lt;/p&gt;

&lt;h2&gt;第一步：下载安装nginx和tomcat&lt;/h2&gt;
&lt;p&gt;安装方法可以看这里&lt;a href=&quot;http://www.cnblogs.com/cjh-notes/p/7868262.html&quot;&gt;http://www.cnblogs.com/cjh-notes/p/7868262.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps：如果是纯测试可以下载两个不同版本的tomcat方便查看效果&lt;/p&gt;

&lt;h2&gt;第二步：配置tomcat&lt;/h2&gt;
&lt;p&gt;复制一个节点，修改配置文件，要修改的地方有三处，vi全局替换即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
%s/&lt;span&gt;8005&lt;/span&gt;/&lt;span&gt;8006&lt;/span&gt;/&lt;span&gt;g

&lt;/span&gt;%s/&lt;span&gt;8080&lt;/span&gt;/&lt;span&gt;8081&lt;/span&gt;/&lt;span&gt;g

&lt;/span&gt;%s/&lt;span&gt;8009&lt;/span&gt;/&lt;span&gt;8010&lt;/span&gt;/g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;接着启动节点服务器，访问正常：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1283057/201802/1283057-20180221231428115-164727867.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1283057/201802/1283057-20180221231505200-1032145071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;第三步：配置nginx&lt;/h2&gt;
&lt;p&gt;配置很简单，在http模块中添加upstream并修改代理转发，附上配置文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
upstream backserver {

    server 127.0.0.1:8080;

    server 127.0.0.1:8081;

}

 

server {

    listen 80;

    server_name 39.108.182.210;

    root /usr/share/nginx/html;



    location / {

        proxy_pass http://backserver;

    }
 

}    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若有兴趣做进一步了解首选官方文档：&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_upstream_module.html%23example&quot;&gt;http://nginx.org/en/docs/http/ngx_http_upstream_module.html#example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;最后一步：测试&lt;/h2&gt;
&lt;p&gt;直接输入ip或域名访问（不带端口），每刷新一次，发现页面在tomcat7和tomcat8的首页间切换，测试通过～&lt;/p&gt;


&lt;h2&gt;nginx负载均衡有几种常用方式：&lt;/h2&gt;
&lt;h3&gt;1、轮询&lt;/h3&gt;
&lt;p&gt;按时间顺序逐一分配，这是默认的方式，&lt;span&gt;上面的测试结果呈现了该方式的效果&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2、weight&lt;/h3&gt;
&lt;p&gt;指定被访问的几率，用于节点服务器性能不均的情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
upstream backserver {

    server 192.168.0.1 weight=2;

    server 192.168.0.2 weight=8;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;3、fair（第三方模块）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;智能的轮询，按响应时间来分配，完全可以替代以上两种模式&lt;/p&gt;
&lt;p&gt;还没用过，日后再更新～&lt;/p&gt;
&lt;h3&gt;4、&lt;span&gt;iphash&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;请求按ip的hash结果分配，访客每次访问的都是同一个节点，解决session同步最快最简单的方法，当然缺点也很明显&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
upstream backserver {

    ip_hash;

    server 192.168.0.1;

    server 192.168.0.2;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 21 Feb 2018 15:12:00 +0000</pubDate>
<dc:creator>代码风云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjh-notes/p/8457727.html</dc:identifier>
</item>
<item>
<title>撸一撸Spring Cloud Ribbon的原理 - 白色的海</title>
<link>http://www.cnblogs.com/kongxianghai/p/8445030.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kongxianghai/p/8445030.html</guid>
<description>&lt;p&gt;说起负载均衡一般都会想到服务端的负载均衡，常用产品包括LBS硬件或云服务、Nginx等，都是耳熟能详的产品。&lt;/p&gt;
&lt;p&gt;而Spring Cloud提供了让服务调用端具备负载均衡能力的Ribbon，通过和Eureka的紧密结合，不用在服务集群内再架设负载均衡服务，很大程度简化了服务集群内的架构。&lt;/p&gt;
&lt;p&gt;具体也不想多写虚的介绍，反正哪里都能看得到相关的介绍。&lt;/p&gt;
&lt;p&gt;直接开撸代码，通过代码来看Ribbon是如何实现的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/166781/201802/166781-20180214012425859-1316261402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;详解：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.RibbonAutoConfiguration配置生成RibbonLoadBalancerClient实例。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码位置：&lt;/p&gt;
&lt;p&gt;spring-cloud-netflix-core-1.3.5.RELEASE.jar&lt;br/&gt;org.springframework.cloud.netflix.ribbon&lt;br/&gt;RibbonAutoConfiguration.class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@ConditionalOnClass({ IClient.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, RestTemplate.&lt;span&gt;class&lt;/span&gt;, AsyncRestTemplate.&lt;span&gt;class&lt;/span&gt;, Ribbon.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
@RibbonClients
@AutoConfigureAfter(name &lt;/span&gt;= &quot;org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration&quot;&lt;span&gt;)
&lt;span&gt;@AutoConfigureBefore({LoadBalancerAutoConfiguration.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, AsyncLoadBalancerAutoConfiguration.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
@EnableConfigurationProperties(RibbonEagerLoadProperties.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RibbonAutoConfiguration {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;
    @Bean
    @ConditionalOnMissingBean(LoadBalancerClient.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&lt;span&gt; LoadBalancerClient&lt;/span&gt; loadBalancerClient() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt;&lt;span&gt; RibbonLoadBalancerClient&lt;/span&gt;(springClientFactory());
    }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先看配置条件项，RibbonAutoConfiguration配置必须在LoadBalancerAutoConfiguration配置前执行，因为在LoadBalancerAutoConfiguration配置中会使用RibbonLoadBalancerClient实例。&lt;/p&gt;
&lt;p&gt;RibbonLoadBalancerClient继承自LoadBalancerClient接口，是负载均衡客户端，也是负载均衡策略的调用方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.LoadBalancerInterceptorConfig配置生成：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;1).负载均衡拦截器LoadBalancerInterceptor实例&lt;br/&gt;包含：&lt;br/&gt;  LoadBalancerClient实现类的RibbonLoadBalancerClient实例&lt;br/&gt;  负载均衡的请求创建工厂LoadBalancerRequestFactory:实例&lt;br/&gt;2).RestTemplate自定义的RestTemplateCustomizer实例&lt;/p&gt;
&lt;p&gt;代码位置：&lt;/p&gt;
&lt;p&gt;spring-cloud-commons-1.2.4.RELEASE.jar&lt;br/&gt;org.springframework.cloud.client.loadbalancer&lt;br/&gt;LoadBalancerAutoConfiguration.class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
&lt;span&gt;@ConditionalOnClass(RestTemplate.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;@ConditionalOnBean(LoadBalancerClient.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;
@EnableConfigurationProperties(LoadBalancerRetryProperties.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoadBalancerAutoConfiguration {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  略&lt;/span&gt;
&lt;span&gt;
    @Bean
    @ConditionalOnMissingBean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LoadBalancerRequestFactory loadBalancerRequestFactory(
            LoadBalancerClient loadBalancerClient) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LoadBalancerRequestFactory(loadBalancerClient, transformers);
    }

    @Configuration
    @ConditionalOnMissingClass(&lt;/span&gt;&quot;org.springframework.retry.support.RetryTemplate&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptorConfig {
        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&lt;span&gt; LoadBalancerInterceptor&lt;/span&gt; ribbonInterceptor(
                &lt;span&gt;LoadBalancerClient loadBalancerClient&lt;/span&gt;,
                &lt;span&gt;LoadBalancerRequestFactory requestFactory&lt;/span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt;&lt;span&gt; LoadBalancerInterceptor(loadBalancerClient, requestFactory)&lt;/span&gt;;
        }

        @Bean
        @ConditionalOnMissingBean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&lt;span&gt; RestTemplateCustomizer&lt;/span&gt; restTemplateCustomizer(
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptor loadBalancerInterceptor) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt;&lt;span&gt; RestTemplateCustomizer()&lt;/span&gt; {
                @Override
                &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; customize(RestTemplate restTemplate) {
                    List&lt;/span&gt;&amp;lt;ClientHttpRequestInterceptor&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(
                            restTemplate.getInterceptors());
                    list.add(loadBalancerInterceptor);
                    restTemplate.setInterceptors(list);
                }
            };
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  略&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先看配置条件项：&lt;/p&gt;
&lt;p&gt;要求在项目环境中必须要有RestTemplate类。&lt;/p&gt;
&lt;p&gt;要求必须要有LoadBalancerClient接口的实现类的实例，也就是上一步生成的RibbonLoadBalancerClient。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.通过上面一步创建的RestTemplateCustomizer配置所有RestTemplate实例，就是将负载均衡拦截器设置给RestTemplate实例。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@ConditionalOnClass(RestTemplate.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@ConditionalOnBean(LoadBalancerClient.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@EnableConfigurationProperties(LoadBalancerRetryProperties.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoadBalancerAutoConfiguration {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SmartInitializingSingleton loadBalancedRestTemplateInitializer(
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; List&amp;lt;RestTemplateCustomizer&amp;gt;&lt;span&gt; customizers) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmartInitializingSingleton() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; afterSingletonsInstantiated() {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (RestTemplate restTemplate : LoadBalancerAutoConfiguration.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.restTemplates) {
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;&lt;span&gt; (RestTemplateCustomizer customizer : customizers) {
                        &lt;span&gt;customizer.customize(restTemplate);&lt;/span&gt;
                    }&lt;/span&gt;
                }
            }
        };
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;
    @Configuration
    @ConditionalOnMissingClass(&lt;/span&gt;&quot;org.springframework.retry.support.RetryTemplate&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptorConfig {
        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptor ribbonInterceptor(
                LoadBalancerClient loadBalancerClient,
                LoadBalancerRequestFactory requestFactory) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptor(loadBalancerClient, requestFactory);
        }

        @Bean
        @ConditionalOnMissingBean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestTemplateCustomizer restTemplateCustomizer(
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptor loadBalancerInterceptor) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestTemplateCustomizer() {
                @Override
                &lt;/span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; customize(RestTemplate restTemplate) {&lt;/span&gt;
                    &lt;span&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;ClientHttpRequestInterceptor&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;
                            &lt;span&gt;restTemplate.getInterceptors());&lt;/span&gt;
                    &lt;span&gt;list.add(loadBalancerInterceptor);&lt;/span&gt;
                    &lt;span&gt;restTemplate.setInterceptors(list);&lt;/span&gt;
                }
            };
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;restTemplate.setInterceptors(list)这个地方就是注入负载均衡拦截器的地方LoadBalancerInterceptor。&lt;/p&gt;
&lt;p&gt;从这个地方实际上也可以猜出来，RestTemplate可以通过注入的拦截器来构建相应的请求实现负载均衡。&lt;/p&gt;
&lt;p&gt;也能看出来可以自定义拦截器实现其他目的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.RibbonClientConfiguration配置生成ZoneAwareLoadBalancer实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码位置：&lt;/p&gt;
&lt;p&gt;spring-cloud-netflix-core-1.3.5.RELEASE.jar&lt;br/&gt;org.springframework.cloud.netflix.ribbon&lt;br/&gt;RibbonClientConfiguration.class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
@SuppressWarnings(&quot;deprecation&quot;&lt;span&gt;)
@Configuration
@EnableConfigurationProperties
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Order is important here, last should be the default, first should be optional
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; see &lt;/span&gt;&lt;span&gt;https://github.com/spring-cloud/spring-cloud-netflix/issues/2086&lt;/span&gt;&lt;span&gt;#issuecomment-316281653&lt;/span&gt;
@Import({OkHttpRibbonConfiguration.&lt;span&gt;class&lt;/span&gt;, RestClientRibbonConfiguration.&lt;span&gt;class&lt;/span&gt;, HttpClientRibbonConfiguration.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RibbonClientConfiguration {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;
    @Bean
    @ConditionalOnMissingBean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&lt;span&gt; ILoadBalancer&lt;/span&gt; ribbonLoadBalancer(IClientConfig config,
            ServerList&lt;/span&gt;&amp;lt;Server&amp;gt; serverList, ServerListFilter&amp;lt;Server&amp;gt;&lt;span&gt; serverListFilter,
            IRule rule, IPing ping, ServerListUpdater serverListUpdater) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.propertiesFactory.isSet(ILoadBalancer.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, name)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.propertiesFactory.get(ILoadBalancer.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, config, name);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ZoneAwareLoadBalancer&amp;lt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(config, rule, ping, serverList,&lt;/span&gt;
                &lt;span&gt;serverListFilter, serverListUpdater);&lt;/span&gt;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ZoneAwareLoadBalancer继承自ILoadBalancer接口，该接口有一个方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Choose a server from load balancer.
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key An object that the load balancer may use to determine which server to return. null if 
     *         the load balancer does not use this parameter.
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; server chosen
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Server chooseServer(Object key);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ZoneAwareLoadBalancer就是一个具体的负载均衡实现类，也是默认的负载均衡类，通过对chooseServer方法的实现选取某个服务实例。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;拦截&amp;amp;请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/166781/201802/166781-20180217154849593-520024459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.使用RestTemplate进行Get、Post等各种请求，都是通过doExecute方法实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码位置：&lt;strong&gt;&lt;span&gt;&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;spring-web-4.3.12.RELEASE.jar&lt;br/&gt;org.springframework.web.client&lt;br/&gt;RestTemplate.class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RestTemplate &lt;span&gt;extends&lt;/span&gt; InterceptingHttpAccessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; RestOperations {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;

    &lt;span&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt;&lt;span&gt; T &lt;span&gt;doExecute&lt;/span&gt;(URI url, HttpMethod method, RequestCallback requestCallback,
            ResponseExtractor&lt;/span&gt;&amp;lt;T&amp;gt; responseExtractor) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; RestClientException {

        Assert.notNull(url, &lt;/span&gt;&quot;'url' must not be null&quot;&lt;span&gt;);
        Assert.notNull(method, &lt;/span&gt;&quot;'method' must not be null&quot;&lt;span&gt;);
        ClientHttpResponse response &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;span&gt;ClientHttpRequest request &lt;/span&gt;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt; createRequest(url, method)&lt;/span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (requestCallback != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                requestCallback.doWithRequest(request);
            }
            &lt;span&gt;response &lt;/span&gt;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt; request.execute();&lt;/span&gt;
            handleResponse(url, method, response);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (responseExtractor != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; responseExtractor.extractData(response);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException ex) {
            String resource &lt;/span&gt;=&lt;span&gt; url.toString();
            String query &lt;/span&gt;=&lt;span&gt; url.getRawQuery();
            resource &lt;/span&gt;= (query != &lt;span&gt;null&lt;/span&gt; ? resource.substring(0, resource.indexOf('?'&lt;span&gt;)) : resource);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResourceAccessException(&quot;I/O error on &quot; + method.name() +
                    &quot; request for \&quot;&quot; + resource + &quot;\&quot;: &quot; +&lt;span&gt; ex.getMessage(), ex);
        }
        &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (response != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                response.close();
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;支持的各种http请求方法最终都是调用doExecute方法，该方法内调用创建方法创建请求实例，并执行请求得到响应对象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.生成请求实例创建工厂&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上一步代码中，调用createRequest方法创建请求实例，这个方法是定义在父类中。&lt;/p&gt;
&lt;p&gt;先整理出主要的继承关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/166781/201802/166781-20180217162438624-511848339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; createRequest方法实际是定义在HttpAccessor抽象类中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HttpAccessor {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ClientHttpRequestFactory requestFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;&lt;span&gt; SimpleClientHttpRequestFactory&lt;/span&gt;();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRequestFactory(ClientHttpRequestFactory requestFactory) {
        Assert.notNull(requestFactory, &lt;/span&gt;&quot;ClientHttpRequestFactory must not be null&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.requestFactory =&lt;span&gt; requestFactory;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ClientHttpRequestFactory getRequestFactory() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.requestFactory;
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; ClientHttpRequest &lt;span&gt;createRequest&lt;/span&gt;(URI url, HttpMethod method) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        ClientHttpRequest request &lt;/span&gt;=&lt;span&gt;&lt;span&gt; getRequestFactory()&lt;/span&gt;.createRequest(url, method);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isDebugEnabled()) {
            logger.debug(&lt;/span&gt;&quot;Created &quot; + method.name() + &quot; request for \&quot;&quot; + url + &quot;\&quot;&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; request;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在createRequest方法中调用getRequestFactory方法获得请求实例创建工厂，实际上getRequestFactory并不是当前HttpAccessor类中定义的，而是在子类InterceptingHttpAccessor中定义的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InterceptingHttpAccessor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpAccessor {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;ClientHttpRequestInterceptor&amp;gt; interceptors = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setInterceptors(List&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt; interceptors) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.interceptors =&lt;span&gt; interceptors;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt; getInterceptors() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; interceptors;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ClientHttpRequestFactory &lt;span&gt;getRequestFactory&lt;/span&gt;() {
        &lt;span&gt;ClientHttpRequestFactory delegate &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= &lt;span&gt;super&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.getRequestFactory()&lt;/span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;&lt;span&gt;CollectionUtils.isEmpty(getInterceptors())&lt;/span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt;&lt;span&gt; InterceptingClientHttpRequestFactory&lt;/span&gt;(delegate, getInterceptors());
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; delegate;
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里做了个小动作，首先还是通过HttpAccessor类创建并获得SimpleClientHttpRequestFactory工厂，这个工厂主要就是在没有拦截器的时候创建基本请求实例。&lt;/p&gt;
&lt;p&gt;其次，在有拦截器注入的情况下，创建InterceptingClientHttpRequestFactory工厂，该工厂就是创建带拦截器的请求实例，因为注入了负载均衡拦截器，所以这里就从InterceptingClientHttpRequestFactory工厂创建。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.通过工厂创建请求实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建实例就看工厂的createRequest方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InterceptingClientHttpRequestFactory &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractClientHttpRequestFactoryWrapper {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; List&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt; interceptors;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; InterceptingClientHttpRequestFactory(ClientHttpRequestFactory requestFactory,
            List&lt;/span&gt;&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt; interceptors) {

        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(requestFactory);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.interceptors = (interceptors != &lt;span&gt;null&lt;/span&gt; ? interceptors : Collections.&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt;emptyList());
    }


    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ClientHttpRequest &lt;span&gt;createRequest&lt;/span&gt;(URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;InterceptingClientHttpRequest&lt;/span&gt;(requestFactory, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.interceptors, uri, httpMethod);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是new了个InterceptingClientHttpRequest实例，并且把拦截器、基本请求实例创建工厂注进去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.请求实例调用配置阶段注入的负载均衡拦截器的拦截方法intercept&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可从第1步看出，创建完请求实例后，通过执行请求实例的execute方法执行请求。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ClientHttpRequest request =&lt;span&gt; createRequest(url, method);
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (requestCallback != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    requestCallback.doWithRequest(request);
}
response &lt;/span&gt;= &lt;span&gt;request.execute();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际请求实例是InterceptingClientHttpRequest，execute实际是在它的父类中。&lt;/p&gt;
&lt;p&gt;类定义位置：&lt;/p&gt;
&lt;p&gt;spring-web-4.3.12.RELEASE.jar&lt;br/&gt;org.springframework.http.client&lt;br/&gt;InterceptingClientHttpRequest.class&lt;/p&gt;
&lt;p&gt;看一下它们的继承关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/166781/201802/166781-20180217232147015-1280396031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 在execute方法中实际调用了子类实现的executeInternal方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AbstractClientHttpRequest &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ClientHttpRequest {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; HttpHeaders headers = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpHeaders();

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; executed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; HttpHeaders getHeaders() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.executed ? HttpHeaders.readOnlyHttpHeaders(&lt;span&gt;this&lt;/span&gt;.headers) : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.headers);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; OutputStream getBody() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        assertNotExecuted();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getBodyInternal(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.headers);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ClientHttpResponse &lt;span&gt;execute&lt;/span&gt;() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        assertNotExecuted();
        ClientHttpResponse result &lt;/span&gt;= &lt;span&gt;executeInternal&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.headers);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.executed = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; assertNotExecuted() {
        Assert.state(&lt;/span&gt;!&lt;span&gt;this&lt;/span&gt;.executed, &quot;ClientHttpRequest already executed&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; OutputStream getBodyInternal(HttpHeaders headers) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException;

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; ClientHttpResponse executeInternal(HttpHeaders headers) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实就是InterceptingClientHttpRequest类的executeInternal方法，其中，又调用了一个执行器InterceptingRequestExecution的execute，通关判断如果有拦截器注入进来过，就调用拦截器的intercept方法。&lt;/p&gt;
&lt;p&gt;这里的拦截器实际上就是在配置阶段注入进RestTemplate实例的负载均衡拦截器LoadBalancerInterceptor实例，可参考上面配置阶段的第2步。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; InterceptingClientHttpRequest &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractBufferingClientHttpRequest {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ClientHttpResponse &lt;span&gt;executeInternal&lt;/span&gt;(HttpHeaders headers, &lt;span&gt;byte&lt;/span&gt;[] bufferedOutput) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        InterceptingRequestExecution requestExecution &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InterceptingRequestExecution();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;requestExecution.execute&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, bufferedOutput);
    }


    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InterceptingRequestExecution &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ClientHttpRequestExecution {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Iterator&amp;lt;ClientHttpRequestInterceptor&amp;gt;&lt;span&gt; iterator;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; InterceptingRequestExecution() {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iterator =&lt;span&gt; interceptors.iterator();
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ClientHttpResponse execute(HttpRequest request, &lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.iterator.hasNext()) {
                ClientHttpRequestInterceptor nextInterceptor &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.iterator.next();
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;nextInterceptor.intercept(request, body, &lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                ClientHttpRequest delegate &lt;/span&gt;=&lt;span&gt; requestFactory.createRequest(request.getURI(), request.getMethod());
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;span&gt; entry : request.getHeaders().entrySet()) {
                    List&lt;/span&gt;&amp;lt;String&amp;gt; values =&lt;span&gt; entry.getValue();
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String value : values) {
                        delegate.getHeaders().add(entry.getKey(), value);
                    }
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (body.length &amp;gt; 0&lt;span&gt;) {
                    StreamUtils.copy(body, delegate.getBody());
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; delegate.execute();
            }
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.负载均衡拦截器调用负载均衡客户端&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在负载均衡拦截器LoadBalancerInterceptor类的intercept方法中，又调用了负载均衡客户端LoadBalancerClient实现类的execute方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoadBalancerInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ClientHttpRequestInterceptor {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; LoadBalancerClient loadBalancer;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; LoadBalancerRequestFactory requestFactory;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptor(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loadBalancer =&lt;span&gt; loadBalancer;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.requestFactory =&lt;span&gt; requestFactory;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LoadBalancerInterceptor(LoadBalancerClient loadBalancer) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for backwards compatibility&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;(loadBalancer, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LoadBalancerRequestFactory(loadBalancer));
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ClientHttpResponse &lt;span&gt;intercept&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; HttpRequest request, &lt;span&gt;final&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] body,
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; ClientHttpRequestExecution execution) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; URI originalUri =&lt;span&gt; request.getURI();
        String serviceName &lt;/span&gt;=&lt;span&gt; originalUri.getHost();
        Assert.state(serviceName &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;, &quot;Request URI does not contain a valid hostname: &quot; +&lt;span&gt; originalUri);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;&lt;span&gt;.loadBalancer.execute&lt;/span&gt;(serviceName, requestFactory.createRequest(request, body, execution));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在配置阶段的第1步，可以看到实现类是RibbonLoadBalancerClient。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.负载均衡客户端调用负载均衡策略选取目标服务实例并发起请求&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在RibbonLoadBalancerClient的第一个execute方法以及getServer方法中可以看到，实际上是通过ILoadBalancer的负载均衡器实现类作的chooseServer方法选取一个服务，交给接下来的请求对象发起一个请求。&lt;/p&gt;
&lt;p&gt;这里的负载均衡实现类默认是ZoneAwareLoadBalancer区域感知负载均衡器实例，其内部通过均衡策略选择一个服务。&lt;/p&gt;
&lt;p&gt;ZoneAwareLoadBalancer的创建可以参考配置阶段的第4步。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RibbonLoadBalancerClient &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; LoadBalancerClient {
&lt;/span&gt;&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T execute(String serviceId, LoadBalancerRequest&amp;lt;T&amp;gt; request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        ILoadBalancer loadBalancer &lt;/span&gt;=&lt;span&gt;&lt;span&gt; getLoadBalancer(serviceId)&lt;/span&gt;;
        Server server &lt;/span&gt;=&lt;span&gt;&lt;span&gt; getServer(loadBalancer)&lt;/span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (server == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&quot;No instances available for &quot; +&lt;span&gt; serviceId);
        }
        RibbonServer ribbonServer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RibbonServer(serviceId, server, isSecure(server,
                serviceId), serverIntrospector(serviceId).getMetadata(server));

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;&lt;span&gt; execute(serviceId, ribbonServer, request)&lt;/span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T execute(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&amp;lt;T&amp;gt; request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        Server server &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(serviceInstance &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; RibbonServer) {
            server &lt;/span&gt;=&lt;span&gt; ((RibbonServer)serviceInstance).getServer();
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (server == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&quot;No instances available for &quot; +&lt;span&gt; serviceId);
        }

        RibbonLoadBalancerContext context &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.clientFactory
                .getLoadBalancerContext(serviceId);
        RibbonStatsRecorder statsRecorder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RibbonStatsRecorder(context, server);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;span&gt;T returnVal &lt;/span&gt;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&lt;span&gt; request.apply(serviceInstance)&lt;/span&gt;;
            statsRecorder.recordStats(returnVal);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnVal;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; catch IOException and rethrow so RestTemplate behaves correctly&lt;/span&gt;
        &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException ex) {
            statsRecorder.recordStats(ex);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
            statsRecorder.recordStats(ex);
            ReflectionUtils.rethrowRuntimeException(ex);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
       
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略 &lt;/span&gt;

    &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Server getServer(ILoadBalancer loadBalancer) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (loadBalancer == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;loadBalancer.chooseServer(&quot;default&quot;);&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO: better handling of key&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ILoadBalancer getLoadBalancer(String serviceId) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.clientFactory.getLoadBalancer(serviceId);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RibbonServer &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ServiceInstance {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String serviceId;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Server server;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; secure;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;String, String&amp;gt;&lt;span&gt; metadata;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RibbonServer(String serviceId, Server server) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(serviceId, server, &lt;span&gt;false&lt;/span&gt;, Collections.&amp;lt;String, String&amp;gt;&lt;span&gt; emptyMap());
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; RibbonServer(String serviceId, Server server, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; secure,
                Map&lt;/span&gt;&amp;lt;String, String&amp;gt;&lt;span&gt; metadata) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.serviceId =&lt;span&gt; serviceId;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.server =&lt;span&gt; server;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.secure =&lt;span&gt; secure;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.metadata =&lt;span&gt; metadata;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 略&lt;/span&gt;
&lt;span&gt;    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;代码撸完，总结下。&lt;/p&gt;
&lt;p&gt;普通使用RestTemplate请求其他服务时，内部使用的就是常规的http请求实例发送请求。&lt;/p&gt;
&lt;p&gt;为RestTemplate增加了@LoanBalanced 注解后，实际上通过配置，为RestTemplate注入负载均衡拦截器，让负载均衡器选择根据其对应的策略选择合适的服务后，再发送请求。&lt;/p&gt;

&lt;p&gt;End&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 14:42:00 +0000</pubDate>
<dc:creator>白色的海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kongxianghai/p/8445030.html</dc:identifier>
</item>
<item>
<title>插上腾飞的翅膀：为asp.net core添加protobuf支持 - 月亮光光</title>
<link>http://www.cnblogs.com/Mutuduxf/p/8457011.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mutuduxf/p/8457011.html</guid>
<description>&lt;p&gt;通过NuGet获取Zaabee.AspNetCoreProtobuf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Install-Package Zaabee.AspNetCoreProtobuf&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Startup.cs文件中修改ConfigureServices方法&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc(options =&amp;gt; { options.AddProtobufSupport(); });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;搞掂……这时候你就可以通过application/x-protobuf的content-type来让asp.net core使用protobuf来进行序列化/反序列化。&lt;/p&gt;
&lt;h2 id=&quot;测试代码&quot;&gt;测试代码&lt;/h2&gt;
&lt;p&gt;在asp.net core项目中添加以下DTO&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[ProtoContract]
public class TestDto
{
    [ProtoMember(1)] public Guid Id { get; set; }
    [ProtoMember(2)] public string Name { get; set; }
    [ProtoMember(3)] public DateTime CreateTime { get; set; }
    [ProtoMember(4)] public List&amp;lt;TestDto&amp;gt; Kids { get; set; }
    [ProtoMember(5)] public long Tag { get; set; }
    [ProtoMember(6)] public TestEnum Enum { get; set; }
}

public enum TestEnum
{
    Apple,
    Banana,
    Pear
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建一个XUnit项目，通过Nuget引用Microsoft.AspNetCore.TestHost，建立一个测试类&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class AspNetCoreProtobufTest
{
    private readonly TestServer _server;
    private readonly HttpClient _client;

    public AspNetCoreProtobufTest()
    {
        _server = new TestServer(
            new WebHostBuilder()
                .UseKestrel()
                .UseStartup&amp;lt;Startup&amp;gt;());
        _client = _server.CreateClient();
    }

    [Fact]
    public void Test()
    {
        // HTTP Post with Protobuf Response Body
        _client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(&quot;application/x-protobuf&quot;));

        var dtos = GetDtos();
        var stream = new MemoryStream();
        ProtoBuf.Serializer.Serialize(stream, dtos);

        HttpContent httpContent = new StreamContent(stream);

        // HTTP POST with Protobuf Request Body
        var responseForPost = _client.PostAsync(&quot;api/Values&quot;, httpContent);

        var result = ProtoBuf.Serializer.Deserialize&amp;lt;List&amp;lt;TestDto&amp;gt;&amp;gt;(
            responseForPost.Result.Content.ReadAsStreamAsync().Result);

        Assert.True(CompareDtos(dtos,result));
    }

    private static bool CompareDtos(List&amp;lt;TestDto&amp;gt; lstOne, List&amp;lt;TestDto&amp;gt; lstTwo)
    {
        lstOne = lstOne ?? new List&amp;lt;TestDto&amp;gt;();
        lstTwo = lstTwo ?? new List&amp;lt;TestDto&amp;gt;();

        if (lstOne.Count != lstTwo.Count) return false;

        for (var i = 0; i &amp;lt; lstOne.Count; i++)
        {
            var dtoOne = lstOne[i];
            var dtoTwo = lstTwo[i];
            if (dtoOne.Id != dtoTwo.Id || dtoOne.CreateTime != dtoTwo.CreateTime || dtoOne.Enum != dtoTwo.Enum ||
                dtoOne.Name != dtoTwo.Name || dtoOne.Tag != dtoTwo.Tag || !CompareDtos(dtoOne.Kids, dtoTwo.Kids))
                return false;
        }

        return true;
    }

    private static List&amp;lt;TestDto&amp;gt; GetDtos()
    {
        return new List&amp;lt;TestDto&amp;gt;
        {
            new TestDto
            {
                Id = Guid.NewGuid(),
                Tag = long.MaxValue,
                CreateTime = DateTime.Now,
                Name = &quot;0&quot;,
                Enum = TestEnum.Apple,
                Kids = new List&amp;lt;TestDto&amp;gt;
                {
                    new TestDto
                    {
                        Id = Guid.NewGuid(),
                        Tag = long.MaxValue - 1,
                        CreateTime = DateTime.Now,
                        Name = &quot;00&quot;,
                        Enum = TestEnum.Banana
                    },
                    new TestDto
                    {
                        Id = Guid.NewGuid(),
                        Tag = long.MaxValue - 2,
                        CreateTime = DateTime.Now,
                        Name = &quot;01&quot;,
                        Enum = TestEnum.Pear
                    }
                }
            },
            new TestDto
            {
                Id = Guid.NewGuid(),
                Tag = long.MaxValue - 3,
                CreateTime = DateTime.Now,
                Name = &quot;1&quot;,
                Enum = TestEnum.Apple,
                Kids = new List&amp;lt;TestDto&amp;gt;
                {
                    new TestDto
                    {
                        Id = Guid.NewGuid(),
                        Tag = long.MaxValue - 4,
                        CreateTime = DateTime.Now,
                        Name = &quot;10&quot;,
                        Enum = TestEnum.Banana
                    },
                    new TestDto
                    {
                        Id = Guid.NewGuid(),
                        Tag = long.MaxValue - 5,
                        CreateTime = DateTime.Now,
                        Name = &quot;11&quot;,
                        Enum = TestEnum.Pear
                    }
                }
            }
        };
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;为什么要用protobuf&quot;&gt;为什么要用protobuf？&lt;/h2&gt;
&lt;p&gt;因为快……在我们这边使用业务数据的测试中，protobuf的序列化/反序列化性能大概是Json.net的三倍，序列化后的体积大概只有Json的二分之一，这可以在相当程度上提高webapi的吞吐性能。&lt;/p&gt;
&lt;p&gt;另外就是Json对于浮点数的处理存在精度丢失，因为JS的number类型的安全整数是53位。当我们使用雪花算法来提供全局递增ID时会因为精度丢失导致重复主键。而且情况不仅如此，由于同样原因传递DateTime类型也会因为毫秒不一致导致时间匹配错误。一般的解决方法是使用字符串传递，不过这毕竟属于偏方并没有从根源上解决问题，因此我们还是直接使用protobuf来处理。&lt;/p&gt;
&lt;h2 id=&quot;protobuf的缺点&quot;&gt;protobuf的缺点&lt;/h2&gt;
&lt;p&gt;DTO层必须引用protobuf-net来添加特性，这在一定程度上导致了代码的侵入。基本上DTO属于POCO，依赖第三方包的话总觉得有点不贞洁……另外就是protobuf序列化后的数据不具有可视化，因此如果是使用消息队列或者请求监控的地方，就要综合考虑protobuf是否适合使用场景。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;asp.net core是基于中间件方式来实现，其自带默认的JsonFormater（基于Json.net），asp.net core会根据content type来选择对应的Formater来处理对象的序列化，当中包括InputFormatter（反序列化）和OutputFormatter（序列化）。因此除了protobuf，我们还可以添加或者替换其它的序列化方式，例如使用Jil来代替Json.net来提高Json性能。&lt;/p&gt;
&lt;p&gt;以上实现以及Demo和测试的源代码已放到&lt;a href=&quot;https://github.com/Mutuduxf/Zaabee.AspNetCoreProtobuf&quot;&gt;GitHub&lt;/a&gt;上。&lt;/p&gt;
&lt;p&gt;最后给大家拜个晚年，祝大家新年快乐~&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 10:22:00 +0000</pubDate>
<dc:creator>月亮光光</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mutuduxf/p/8457011.html</dc:identifier>
</item>
<item>
<title>【深度学习】L1正则化和L2正则化 - Madcola</title>
<link>http://www.cnblogs.com/skyfsm/p/8456968.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyfsm/p/8456968.html</guid>
<description>&lt;p&gt;在机器学习中，我们非常关心模型的预测能力，即模型在新数据上的表现，而不希望过拟合现象的的发生，我们通常使用正则化（regularization）技术来防止过拟合情况。正则化是机器学习中通过显式的控制模型复杂度来避免模型过拟合、确保泛化能力的一种有效方式。如果将模型原始的假设空间比作“天空”，那么天空飞翔的“鸟”就是模型可能收敛到的一个个最优解。在施加了模型正则化后，就好比将原假设空间（“天空”）缩小到一定的空间范围（“笼子”），这样一来，可能得到的最优解能搜索的假设空间也变得相对有限。有限空间自然对应复杂度不太高的模型，也自然对应了有限的模型表达能力。这就是“正则化有效防止模型过拟合的”一种直观解析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1093303/201802/1093303-20180221174015826-824922748.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;l2正则化&quot;&gt;L2正则化&lt;/h2&gt;
&lt;p&gt;在深度学习中，用的比较多的正则化技术是L2正则化，其形式是在原先的损失函数后边再加多一项：&lt;span class=&quot;math inline&quot;&gt;\(\frac{1}{2}\lambda\theta_{i}^2\)&lt;/span&gt;，那加上L2正则项的损失函数就可以表示为：&lt;span class=&quot;math inline&quot;&gt;\(L(\theta)=L(\theta)+\lambda\sum_{i}^{n}\theta_{i}^2\)&lt;/span&gt;，其中&lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt;就是网络层的待学习的参数，&lt;span class=&quot;math inline&quot;&gt;\(\lambda\)&lt;/span&gt;则控制正则项的大小，较大的取值将较大程度约束模型复杂度，反之亦然。&lt;/p&gt;
&lt;p&gt;L2约束通常对稀疏的有尖峰的权重向量施加大的惩罚，而偏好于均匀的参数。这样的效果是鼓励神经单元利用上层的所有输入，而不是部分输入。所以L2正则项加入之后，权重的绝对值大小就会整体倾向于减少，尤其不会出现特别大的值（比如噪声），即网络偏向于学习比较小的权重。所以L2正则化在深度学习中还有个名字叫做“权重衰减”（weight decay），也有一种理解这种衰减是对权值的一种惩罚，所以有些书里把L2正则化的这一项叫做惩罚项（penalty）。&lt;/p&gt;
&lt;p&gt;我们通过一个例子形象理解一下L2正则化的作用，考虑一个只有两个参数&lt;span class=&quot;math inline&quot;&gt;\(w_{1}\)&lt;/span&gt;和&lt;span class=&quot;math inline&quot;&gt;\(w_{2}\)&lt;/span&gt;的模型，其损失函数曲面如下图所示。从a可以看出，最小值所在是一条线，整个曲面看起来就像是一个山脊。那么这样的山脊曲面就会对应无数个参数组合，单纯使用梯度下降法难以得到确定解。但是这样的目标函数若加上一项&lt;span class=&quot;math inline&quot;&gt;\(0.1\times(w_{1}^2+w_{2}^2)\)&lt;/span&gt;，则曲面就会变成b图的曲面，最小值所在的位置就会从一条山岭变成一个山谷了,此时我们搜索该目标函数的最小值就比先前容易了，所以L2正则化在机器学习中也叫做“岭回归”（ridge regression）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1093303/201802/1093303-20180221174027599-1004937268.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;l1正则化&quot;&gt;L1正则化&lt;/h2&gt;
&lt;p&gt;L1正则化的形式是：&lt;span class=&quot;math inline&quot;&gt;\(\lambda|\theta_{i}|\)&lt;/span&gt;,与目标函数结合后的形式就是：&lt;span class=&quot;math inline&quot;&gt;\(L(\theta)=L(\theta)+\lambda\sum_{i}^{n}|\theta_{i}|\)&lt;/span&gt;。需注意，L1 正则化除了和L2正则化一样可以约束数量级外，L1正则化还能起到使参数更加稀疏的作用，稀疏化的结果使优化后的参数一部分为0，另一部分为非零实值。非零实值的那部分参数可起到选择重要参数或特征维度的作用，同时可起到去除噪声的效果。此外，L1正则化和L2正则化可以联合使用：&lt;span class=&quot;math inline&quot;&gt;\(\lambda_{1}|\theta_{i}|+\frac{1}{2}\lambda_{2}\theta_{i}^2\)&lt;/span&gt;。这种形式也被称为“Elastic网络正则化”。&lt;/p&gt;
&lt;h2 id=&quot;正则化对偏导的影响&quot;&gt;正则化对偏导的影响&lt;/h2&gt;
&lt;p&gt;对于L2正则化：&lt;span class=&quot;math inline&quot;&gt;\(C=C_{0}+\frac{\lambda}{2n}\sum_{i}\omega_{i}^2\)&lt;/span&gt;，相比于未加正则化之前,权重的偏导多了一项&lt;span class=&quot;math inline&quot;&gt;\(\frac{\lambda}{n}\omega\)&lt;/span&gt;，偏置的偏导没变化，那么在梯度下降时&lt;span class=&quot;math inline&quot;&gt;\(\omega\)&lt;/span&gt;的更新变为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1093303/201802/1093303-20180221174039841-1960887716.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出&lt;span class=&quot;math inline&quot;&gt;\(\omega\)&lt;/span&gt;的系数使得权重下降加速，因此L2正则也称weight decay(caffe中损失层的weight_decay参数与此有关)。对于随机梯度下降(对一个mini-batch中的所有x的偏导求平均)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1093303/201802/1093303-20180221174050281-1300633515.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于L1正则化：&lt;span class=&quot;math inline&quot;&gt;\(C=C_{0}+\frac{\lambda}{n}\sum_{i}|\omega_{i}|\)&lt;/span&gt;，梯度下降的更新为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1093303/201802/1093303-20180221174101712-99095034.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;符号函数在&lt;span class=&quot;math inline&quot;&gt;\(\omega\)&lt;/span&gt;大于0时为1，小于0时为-1，在&lt;span class=&quot;math inline&quot;&gt;\(\omega=0\)&lt;/span&gt;时&lt;span class=&quot;math inline&quot;&gt;\(|\omega|\)&lt;/span&gt;没有导数，因此可令sgn(0)=0，在0处不使用L1正则化。&lt;br/&gt;相比于L2，有所不同：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;L1减少的是一个常量，L2减少的是权重的固定比例&lt;/li&gt;
&lt;li&gt;孰快孰慢取决于权重本身的大小，权重刚大时可能L2快，较小时L1快&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实践中L2正则化通常优于L1正则化。&lt;/p&gt;
</description>
<pubDate>Wed, 21 Feb 2018 09:44:00 +0000</pubDate>
<dc:creator>Madcola</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyfsm/p/8456968.html</dc:identifier>
</item>
</channel>
</rss>