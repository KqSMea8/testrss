<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>8596 最长上升子序列（优先做） - J.double</title>
<link>http://www.cnblogs.com/double891/p/7860067.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/double891/p/7860067.html</guid>
<description>&lt;center&gt;

&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;时间限制:300MS  内存限制:1000K&lt;br/&gt;提交次数:255 通过次数:118&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;题型: 编程题   语言: G++;GCC;VC&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;

&lt;pre&gt;
A numeric sequence of ai is ordered if a1 &amp;lt; a2 &amp;lt; ... &amp;lt; aN. 
Let the subsequence of the given numeric sequence (a1, a2, ..., aN) be any sequence (ai1, ai2, ..., aiK),
where 1 &amp;lt;= i1 &amp;lt; i2 &amp;lt; ... &amp;lt; iK &amp;lt;= N. 
For example, sequence (1, 7, 3, 5, 9, 4, 8) has ordered subsequences, e. g., (1, 7), (3, 4, 8) and many others. 
All longest ordered subsequences are of length 4, e. g., (1, 3, 5, 8). 

Your program, when given the numeric sequence, must find the length of its longest ordered subsequence. 
&lt;/pre&gt;

&lt;div readability=&quot;12&quot;&gt;

&lt;pre&gt;
There are several test cases (less than 100 test cases).

Every test case includes two lines. 

The first line contains the length of sequence N. 
The second line contains the elements of sequence: N integers in the
  range from 0 to 10000 each, separated by spaces. 1 &amp;lt;= N &amp;lt;= 1000 

When N is 0, it indicates test to end. 
&lt;/pre&gt;&lt;/div&gt;

&lt;div readability=&quot;8&quot;&gt;

&lt;pre&gt;
Output must contain a single integer for every test case. It's the length of the longest
  ordered subsequence of the given sequence. 
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;

&lt;pre&gt;
7
1 7 3 5 9 4 8
6
1 8 3 6 5 9
5
1 2 3 4 5
0
&lt;/pre&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;

&lt;pre&gt;
4
4
5
&lt;/pre&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;

&lt;pre&gt;
一，对输入字符串的处理

注意：这道题和其他题的输入输出不同,这题是接收多组数据而非单组,以0来判别结束。
大家在接受数据的时候，不要用(c=getchar())!='\n'诸如此类一个字符一个字符接受，
然后判断是否是回车符号来结束一行的输入，这样的方式在你本机运行不会有问题，
但OJ系统中会有错误，无法输出结果，因为测试平台行末并非'\n'字符。
这里接受数据用scanf的%d或%s，或cin等，会自动判别结束字符的，你就不要在你程序
里专门去判别或吸收回车字符。

对于最后一组数据输入为0表示结束，只要判断接受的第一个字符是否为0且字符串长度
为1就结束，无须去处理回车字符。

输入的序列可以用整型数组或字符串数组保存。


二，算法的动态规划思想

考虑采用动态规划算法，针对每个元素，以该元素结尾的最长有序子序列作为子问题，
计算出每个子问题的最大长度用“表”记录下来。先写出递推关系式再编程实现。

设f(i)表示：从左向右扫描过来直到以a[i]元素结尾的序列，可获得的最长上升
子序列的长度，且最长上升子序列包含a[i]元素（1&amp;lt;=i&amp;lt;=n）。

（这里大家思考一下，为何要这样假设子问题和子问题最优解f(i)？
有同学问：为何最长上升子序列要包含a[i]元素（1&amp;lt;=i&amp;lt;=n）？
因为你所设的子问题要和更下一级子问题关联起来。如果长度为i序列的最长上升
子序列中没有规定包含a[i]元素，那如何和其前缀的最长上升子序列问题关联起来
呢？因为你没法确认你前缀的最长上升子序列最后一个字符在哪里？上升子序列的
边界在哪不知道的话，很难和更小规模的子问题联系起来，显然是比较麻烦的。）

f(i)是从f(1),f(2), ……到f(i-1)中找最大的一个值，再加1，或者就是1。
这主要得看a[i]这个元素能否加入到之前已经获得的最长上升子序列当中去，
如果能加入，是之前已获得的最长上升子序列长度加1；
如果不能加入，就开始一个新的上升子序列，长度为1。
最后，所要求的整个序列的最长上升子序列长度为 max{ f(i): 1&amp;lt;=i&amp;lt;=n }

f(i)的递推公式如下：
（1）f(i) = 1              当i=1;
（2）f(i) = max{f(j)+1}    当i&amp;gt;1, 对某个前面的j(1&amp;lt;=j&amp;lt;i), 有a[j]&amp;lt;a[i]];
（3）f(i) = 1              当i&amp;gt;1, 对任意j(1&amp;lt;=j&amp;lt;i), 都有a[j]&amp;gt;=a[i]

例子，对于序列：4  2  6  3  1  5  2
   i = 1  2  3  4  5  6  7
a[i] = 4  2  6  3  1  5  2
f(i) = 1  1  2  2  1  3  2

这里max{f(i)}=3为原问题所求的最长上升子序列的长度。

效率分析：
f(i)的计算不超过O(n)，因此，整个算法为O(n^2)。

&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;我的代码实现：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 1001
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; a[N],f[N];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; min(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; min1=f[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(min1&amp;gt;f[i])min1=&lt;span&gt;f[i];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; min1;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; max(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; max1=f[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(max1&amp;lt;f[i])max1=&lt;span&gt;f[i];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; max1;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Longest(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     f[&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(a[i]&amp;lt;min(i-&lt;span&gt;1&lt;/span&gt;))f[i]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;i;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(a[j]&amp;gt;a[i])&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                    if((f[i]&amp;lt;(max(j)+1)))f[i]=max(j)+1;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处max(j)当中的j已经更新到最后一个，会把前面的a[j]&amp;gt;a[i]的带进来，所以是不对的  &lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(f[i]&amp;lt;(f[j]+&lt;span&gt;1&lt;/span&gt;))f[i]=f[j]+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n)){
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(n==&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;a[i]);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         f[i]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    Longest(n);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,max(n));
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 19 Nov 2017 07:57:00 +0000</pubDate>
<dc:creator>J.double</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/double891/p/7860067.html</dc:identifier>
</item>
<item>
<title>Json字符串解析原理、超大json对象的解析 - &amp;nbsp;</title>
<link>http://www.cnblogs.com/xcr1234/p/7860069.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xcr1234/p/7860069.html</guid>
<description>&lt;p&gt;&lt;span&gt;附上完整的代码：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://pan.baidu.com/s/1dEDmGz3&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1dEDmGz3&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（入口类是Json）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;JSON：JavaScript 对象表示法（JavaScript Object Notation）。&lt;/p&gt;&lt;p&gt;JSON 是存储和交换文本信息的语法。类似 XML。&lt;/p&gt;&lt;p&gt;JSON 比 XML 更小、更快，更易解析。&lt;/p&gt;&lt;p&gt;在JSON中，分为6种对象：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数字（整数或浮点数）&lt;/li&gt;
&lt;li&gt;字符串（在双引号中）&lt;/li&gt;
&lt;li&gt;逻辑值（true 或 false）&lt;/li&gt;
&lt;li&gt;数组（JsonArray）&lt;/li&gt;
&lt;li&gt;对象（JsonObject）&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JsonObject其实就是一个HashMap，JsonArray其实就是一个ArrayList.&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; JsonObject &lt;span&gt;extends&lt;/span&gt; HashMap&amp;lt;String,Object&amp;gt;&lt;span&gt; {

}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; JsonArray &lt;span&gt;extends&lt;/span&gt; ArrayList&amp;lt;Object&amp;gt;&lt;span&gt; {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以这个字符串为例：&lt;/p&gt;
&lt;p&gt;{“success”:true,”id”:-10.5,”employees”:[{“firstName”:”Bill”,”lastName”:”Gates”},{“firstName”:”George”,”lastName”:”Bush”},{“firstName”:”Thomas”,”lastName”:”Carter”}]}&lt;/p&gt;
&lt;p&gt;我们保证在只扫描一次整个的情况下，就将json结构解析成功。&lt;/p&gt;

&lt;p&gt;传统的解析策略通常是通过词法分析，将json分为一个个的token，而这些token有着自己的类型和值；再通过语法分析构建一棵抽象语法树，进一步处理。比如&quot;&quot;是一种，true/false又是一种。&lt;/p&gt;
&lt;p&gt;其实根本不需要这么复杂。依我看来，json的token只有五种：true/false/null（归为一种，因为它们是固定值）、number、string、object、array。也不用特别在意start和end的Token区分，比如 { 符号和 } 符号。从一个 { 符号开始，到下一个它对应的 } 符号都是属于同一个json object的。这里的 { 与 } 、[ 与 ] 符号都是一一对应的。&lt;br/&gt;我设计了一个nextObject()方法，它可以解析出json字符串中的下一个对象，然后在适当的时候装配即可。&lt;/p&gt;

&lt;h2&gt;提取字符&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isSpace(&lt;span&gt;char&lt;/span&gt;&lt;span&gt; c){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; c == ' ' || c == '\r' || c == '\n'&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法得到当前字符，忽略空格、换行符&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;&lt;span&gt; getChar(){
        &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; json.charAt(pos);
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(isSpace(c)){
            pos&lt;/span&gt;++&lt;span&gt;;
            c &lt;/span&gt;=&lt;span&gt; getCurrentChar();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; c;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面方法是消耗掉所有空白字符，直到读取到一个非空白字符，isSpace方法用于判断一个字符是否属于空白字符，pos表示当前指针指向的那个字符。也就是说，DFA从起始状态开始，若读到一个空字符，会在起始状态不断循环，直到遇到非空字符，状态转移情况如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/765365/201711/765365-20171119154926765-1982206330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;根据提取到的字符，转入不同的解析方法中，&lt;/p&gt;
&lt;p&gt;例如字符是t，说明值可能是true，只需检查后面三个字符，如果是r、u、e，则可以直接返回true。&lt;/p&gt;
&lt;p&gt;字符是f，说明值可能是false，只需检查后面四个字符，如果是a、l、s、e，则可以直接返回false。&lt;/p&gt;
&lt;p&gt;碰到 \”，说明是字符串，在下一个\”出现之前，把扫描出来的字符都当成字符串中的字符，放到一个StringBuilder中去。&lt;/p&gt;
&lt;p&gt;碰到 [ 符号，说明是数组了，就需要new一个JsonArray，在下一个 ] 符号出现之前，调用nextObject方法，把解析到的对象都放到这个JsonArray里面去。&lt;/p&gt;
&lt;p&gt;碰到 { 符号，说明是JsonObject，就new一个JsonObject，这里每次需要连续调用两次nextObject，第一次结果作为key，第二次结果作为value。放到JsonObject中去。&lt;/p&gt;
&lt;h2&gt;解析boolean、null值&lt;/h2&gt;
&lt;p&gt;这类值的字符串只有固定的三种true、false、null，是最好解析的。在扫描到第一个字符为t、f、n时，只需检测后续字符是否符合固定值就可以了。checkChars方法实现了这个功能，chars是固定的序列，如果检测通过则返回true，否则返回false。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; checkChars(&lt;span&gt;char&lt;/span&gt;&lt;span&gt; ...chars){
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;char&lt;/span&gt;&lt;span&gt; ch : chars){
            &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c = getCurrentCharNext();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前字符，包括空格、换行符。将指针指向下一个字符&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(Character.toLowerCase(ch) !=&lt;span&gt; Character.toLowerCase(c)){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果是true,就是`checkChars('t','r','u','e')`&lt;/p&gt;
&lt;h2 id=&quot;解析数字&quot;&gt;解析数字&lt;/h2&gt;
&lt;p&gt;解析数字的实现是&lt;code&gt;parseNumber&lt;/code&gt;方法，我们先new一个StringBuilder，向后扫描只要碰到0-9或者+-小数点，就添加到这个StringBuilder当中去，否则就StringBuilder.toString，将这个字符串转换成数字。&lt;/p&gt;
&lt;p&gt;如果包含小数点，就用double，否则就用integer。&lt;/p&gt;

&lt;h2 id=&quot;解析字符串&quot;&gt;解析字符串&lt;/h2&gt;
&lt;p&gt;在json中字符串都是以双引号”开头，再以双引号”结尾的。当扫描到双引号”时，new一个StringBuilder，然后在下一个双引号”出现之前的每一个字符都需要添加到这个StringBuilder中去。需要注意的一点，字符串中是可能出现转义字符的。因此在扫描到一个字符为斜杠\时，需要取出下一个字符进行特殊处理。&lt;/p&gt;

&lt;h2 id=&quot;解析jsonobject&quot;&gt;解析JsonObject&lt;/h2&gt;
&lt;p&gt;连续调用两次nextObject，第一次结果作为key，第二次结果作为value。放到JsonObject中去。&lt;br/&gt;注意逗号和冒号的处理。&lt;/p&gt;
&lt;h2 id=&quot;jsonarray的解析&quot;&gt;JsonArray的解析&lt;/h2&gt;
&lt;p&gt; 在下一个 ] 符号出现之前，递归调用nextObject方法，把解析到的对象都放到这个JsonArray里面去。&lt;/p&gt;


&lt;p&gt;由于nextObject只返回一个对象，我们用nextObject方法处理整个json字符串。那么nextObject方法就会得到你需要的JsonObject。&lt;/p&gt;


&lt;p&gt;参考 &lt;a href=&quot;http://blog.csdn.net/dxiaolai/article/details/76359332&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/dxiaolai/article/details/76359332&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在大数据量的json场景下，不必将整个json字符串全部解析成json object后再处理，而是通过迭代器模式我们可以在解析字符串的同时使用对象。这样可以大大的提高程序的执行效率。&lt;/p&gt;
&lt;p&gt;扩展ObjectParser类，使其成为一个迭代器，&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ObjectParser &lt;span&gt;implements&lt;/span&gt; Iterator&amp;lt;Object&amp;gt;&lt;span&gt;{

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object next(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nextObject();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasNext(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; pos &amp;lt;&lt;span&gt; json.length();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; remove() {

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以边解析边使用对象了。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ObjectParser parser = &lt;span&gt;new&lt;/span&gt; ObjectParser (&quot;json&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(parser.hasNext()){
    Object object &lt;/span&gt;=&lt;span&gt; parser.next();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;超大的json串，通常是以流的方式提供，我们不必要一次性将流字节全部读入内存，而是可以逐字符的解析。每次读取若干个字符，解析成对象；实现方式是使用&lt;code&gt;BuffererReader&lt;/code&gt;，修改getChar等方法，每次读字符时从&lt;code&gt;BuffererReader&lt;/code&gt;中读取。配合上面的迭代器模式，可考虑将一个BuffererReader封装成Iterator&amp;lt;Object&amp;gt;。&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 07:57:00 +0000</pubDate>
<dc:creator>&amp;amp;nbsp;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xcr1234/p/7860069.html</dc:identifier>
</item>
<item>
<title>你所学习的设计模式到底有什么用？到底怎么用？ - LinkinStar</title>
<link>http://www.cnblogs.com/linkstar/p/7859980.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linkstar/p/7859980.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;经过大约两个月的磨蹭，我终于是把设计模式打下来了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体详细在：&lt;/span&gt;&lt;a title=&quot;http://www.cnblogs.com/linkstar/category/1087887.html&quot; href=&quot;http://www.cnblogs.com/linkstar/category/1087887.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.cnblogs.com/linkstar/category/1087887.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么当我学习完成之后，所想到的第一件事，也就是你们标题上面所看到的一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;学设计模式到底有啥用啊？在我学习完成之后为了写这个总结也是抓耳挠腮了一遍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以在此需要对学习进行一个总结，这也是一个个人的总结，如果有不对的地方也请原谅&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;普遍的目的&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我所能想到的普遍的目的有下面几个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、别人都说要学，别人都说好，所以我要学&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、面试会被问，所以必须学&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、读源码时看到别人在用，不学看不懂源码为什么这样写&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、我刚好看到一本设计模式的书，嗯不错，我想学学&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;是不是看上去都直戳你的心，好像确实是这样的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过我可以这么说，无论你出于哪一种目的去学习，只要去学习总比不学要好，至于学了有没有用，那就是你看下去的原因咯&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;设计模式的作用&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;从书上摘话给你们看看&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;帮助我们将应用组织成容易了解，容易维护，具有弹性的架构，建立可维护的OO系统，要诀在于随时想到系统以后可能需要的变化以及应付变化的原则。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这么复杂的解释肯定是不愿意看了，我用我的话来总结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、设计模式能让专业人之间交流方便，如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员A：这里我用了XXX设计模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员B：那我大致了解你程序的设计思路了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、易维护&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;项目经理：今天客户有这样一个需求…&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员：明白了，这里我使用了XXX设计模式，所以改起来很快&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、设计模式是编程经验的总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员A：B，你怎么想到要这样去构建你的代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员B：在我学习了XXX设计模式之后，好像自然而然就感觉这样写能避免一些问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、学习设计模式并不是必须的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员A：B，你这段代码使用的是XXX设计模式对吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序员B：不好意思，我没有学习过设计模式，但是我的经验告诉我是这样写的&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上面就是我总结的设计模式的作用，我想聪明的你应该能理解我所表达的意思&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;设计模式到底怎么用&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我想很多人关心这个问题，确实我很关心，不然总感觉自己学习完成之后，跟没有学没什么区别&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我不想和别人说的一样：“设计模式是一种思想，是一种经验，你写多了自然就明白了”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我不否认，但是我觉得不是干货，听了总很难过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以我总结了我自己的用法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、如果你处于黄金级别（下面有提到）&lt;/span&gt;&lt;span&gt;&lt;strong&gt;请在优化代码的时候再使用设计模式！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的理解是这样的，首先在此，你对设计模式的理解并不是很深入，如果直接拿来用，可能会导致很多问题。所以你在写代码的时候，宁可忘记你学过设计模式，然后你自己去写。当你写完了之后，你需要对你的代码进行优化，那么这个时候你就需要尝试去找问题了。在你的代码中是否有很多重复片段，是否有很多冗长的代码，一个类的职责是否过多，如果客户提出修改你的代码是否能进行维护和修改。此时你如果你发现有地方需要进行优化，而优化的方式有所参考的话，你就可以进行使用了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样的好处是，你明显能感觉到使用设计模式前后，你代码的变化，以及这个设计模式的好处，在以后的工作中就有经验了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然不好的地方是，明显很累嘛，但是前期吃点苦，我觉得踩踩坑也没什么不好的。&lt;em&gt;当然如果你是高手，那当这条没看到~&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、&lt;strong&gt;请使用设计模式的专有命名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如说，在一个地方你需要使用工厂模式，那么你就在工厂类的名字后面加Factory，其他的设计模式也是类似的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个是为了你自己以后维护的方便，一个是为了别人协同工作的时候阅读你代码的方便，这样你们交流就有了共同的语言&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、&lt;strong&gt;明白设计模式的作用，参考别人代码中去使用会很有效&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你在使用一个设计模式前，请明白这个设计模式的作用是什么&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再者，如：当你看到MyBatis源码中产生SqlSession对象使用工厂模式，那么你先去想为什么它要这么做，这样做的好处是什么，你的业务是否也是和他相同的状况呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当你了解了环境之后，你使用设计模式会变得非常有效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、&lt;strong&gt;设计模式多用于复杂系统，方法设计，负责业务逻辑，增加代码可维护性方面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你学习了这么多东西，你肯定会说，我在实际中也没见到什么人在他的代码中使用设计模式呀。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确实在实际的项目中，其实如果不是非常复杂的项目基本上用不到设计模式，也没有什么特别的必要，很多时候，设计模式会出现在上面所说的情况下，所以你也不需要奇怪。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;渐渐的你有一天就会明白它的存在。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;学习设计模式的几个阶段&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、青铜：刚开始学编程不久，听说过什么是设计模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、白银：有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己却不知道&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、黄金：学习过了设计模式，发现，哇，原来我已经在使用了，并且发现了一些新的模式挺好用的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、铂金：阅读了很多别人写的源码，在其中看到别人设计模式精彩的使用所以学习了下来&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、钻石：代码写着写着，自己都没有意识到使用了设计模式，就熟练的写了下去&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;学习的时间&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这个也只是我个人认为的比较好的学习时间，仅供参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;面向对象思想扎实，且对于程序设计有自己认识看法的时候&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;能熟练使用别人的框架做一些简单的项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有过至少一个自己的完整项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想进一步提升自己代码认识水平能力的时候&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;学习的方式&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、首先通过书本，或者博客，了解熟知常见的设计模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、自己尝试写出关于这个设计模式的例子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、尝试在别人的代码中找到这样的设计模式进行学习&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、积累&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;正所谓“不积跬步,无以至千里”学习是一个积累的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之后这个设计模式这个分类讲慢慢整理我在阅读源码中所遇到的设计模式。争取不断更咯~&lt;/span&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt;作者：LinkinStar&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转载请注明出处：&lt;a href=&quot;http://www.cnblogs.com/linkstar/p/7859980.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/linkstar/p/7859980.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 07:55:00 +0000</pubDate>
<dc:creator>LinkinStar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linkstar/p/7859980.html</dc:identifier>
</item>
<item>
<title>fragmentTabHost 使用示例 - huansky</title>
<link>http://www.cnblogs.com/huansky/p/7859830.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huansky/p/7859830.html</guid>
<description>&lt;p&gt;目前我们看微信的底部，有四个导航栏，那我们应该来怎么实现类似的导航栏呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/916005/201711/916005-20171119144929749-1883826264.png&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;612&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在 android 4.0 的时候，推出了一个新的工具，fragmentTabHost 。&lt;/p&gt;
&lt;p&gt;fragmentTabHost  可以自己自定义底部的样式，你可以自由添加图标或者文字，都可以。那我们怎么来使用呢？&lt;/p&gt;
&lt;p&gt;首先我们来看 MainActivity；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AppCompatActivity {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; FragmentTabHost fragmentTabHost;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String texts[] = { &quot;首页&quot;, &quot;通讯录&quot;, &quot;发现&quot;, &quot;我&quot;, &quot;更多&quot;&lt;span&gt; };
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; imageButton[] =&lt;span&gt; { R.drawable.bt_home_selector,
            R.drawable.bt_home_selector, R.drawable.bt_home_selector,R.drawable.bt_home_selector ,R.drawable.bt_home_selector};
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Class fragmentArray[] = {FragmentPage1.&lt;span&gt;class&lt;/span&gt;,FragmentPage2.&lt;span&gt;class&lt;/span&gt;,FragmentPage3.&lt;span&gt;class&lt;/span&gt;,FragmentPage4.&lt;span&gt;class&lt;/span&gt;,FragmentPage5.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;};

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化tabhost&lt;/span&gt;
        fragmentTabHost =&lt;span&gt; (FragmentTabHost) findViewById(android.R.id.tabhost);
        fragmentTabHost.setup(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, getSupportFragmentManager(),
                R.id.maincontent);

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; texts.length; i++&lt;span&gt;) {
            TabHost.TabSpec spec&lt;/span&gt;=&lt;span&gt;fragmentTabHost.newTabSpec(texts[i]).setIndicator(getView(i));

            fragmentTabHost.addTab(spec, fragmentArray[i], &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置背景(必须在addTab之后，由于需要子节点（底部菜单按钮）否则会出现空指针异常)&lt;/span&gt;
&lt;span&gt;            fragmentTabHost.getTabWidget().getChildAt(i).setBackgroundResource(R.drawable.bt_selector);
        }

    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; View getView(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得布局实例&lt;/span&gt;
        View view=View.inflate(MainActivity.&lt;span&gt;this&lt;/span&gt;, R.layout.tab_item_view, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得布局对象&lt;/span&gt;
        ImageView imageView=&lt;span&gt;(ImageView) view.findViewById(R.id.image);
        TextView textView&lt;/span&gt;=&lt;span&gt;(TextView) view.findViewById(R.id.text);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置图标&lt;/span&gt;
&lt;span&gt;        imageView.setImageResource(imageButton[i]);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置标题&lt;/span&gt;
&lt;span&gt;        textView.setText(texts[i]);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; view;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在 fragmentTabHost.setup 函数中，我们需要传入三个参数，一个是上下文内容Context，一个是FragmentManager,第三个是放置fragment的容器的id;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;注意容器必须是 FrameLayout 类型，因为内部定义的类型就是这个。内部会根据id来进行初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;fragmentTabHost.newTabSpec(texts[i]) 是定义 tag 的,方便后续根据 tag 来查找具体的 fragment。tag 就是&lt;/span&gt; texts[i] 中的值；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;setIndicator(getView(i)) 是为每一个 fragment 指定一个 view 指示器，这个 view 我们可以自己定义,具体引用就是 getView 函数。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;addtab 函数则将 fragment 和 tag 联系在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在 getView 中，我们可以自己自定义一个 itemView 来作为 tab 的样式，这个就不具体展开了，看看函数就懂。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后我们再来简单看看 fragment 怎么写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FragmentPage1 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Fragment {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; View onCreateView(LayoutInflater inflater,
                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; inflater.inflate(R.layout.fragment_1, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下去我们看下具体的布局文件：&lt;/p&gt;
&lt;p&gt;首先是整体的布局：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;LinearLayout &lt;/span&gt;&lt;span&gt;xmlns:android&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:tools&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;fill_parent&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;fill_parent&quot;&lt;/span&gt;&lt;span&gt;
    android:orientation&lt;/span&gt;&lt;span&gt;=&quot;vertical&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 存放主要页面内容 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;FrameLayout
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/maincontent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;fill_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;0dp&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_weight&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;FrameLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 底层菜单 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;android.support.v4.app.FragmentTabHost
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@android:id/tabhost&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;fill_parent&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:background&lt;/span&gt;&lt;span&gt;=&quot;@drawable/ic_launcher&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;FrameLayout
            &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@android:id/tabcontent&quot;&lt;/span&gt;&lt;span&gt;
            android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;0dp&quot;&lt;/span&gt;&lt;span&gt;
            android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;0dp&quot;&lt;/span&gt;&lt;span&gt;
            android:layout_weight&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;FrameLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;android.support.v4.app.FragmentTabHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;LinearLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;接下去是 tab 的itemview 的布局：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;LinearLayout &lt;/span&gt;&lt;span&gt;xmlns:android&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:tools&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
    android:gravity&lt;/span&gt;&lt;span&gt;=&quot;center_horizontal&quot;&lt;/span&gt;&lt;span&gt;
    android:orientation&lt;/span&gt;&lt;span&gt;=&quot;vertical&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ImageView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/image&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/text&quot;&lt;/span&gt;&lt;span&gt;
        android:padding&lt;/span&gt;&lt;span&gt;=&quot;2dp&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:textColor&lt;/span&gt;&lt;span&gt;=&quot;@android:color/white&quot;&lt;/span&gt;
        &lt;span&gt;/&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;LinearLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;最后就是fragment 的布局：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RelativeLayout &lt;/span&gt;&lt;span&gt;xmlns:android&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:tools&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;fill_parent&quot;&lt;/span&gt;&lt;span&gt;
    android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;fill_parent&quot;&lt;/span&gt;
    &lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextView
        &lt;/span&gt;&lt;span&gt;android:id&lt;/span&gt;&lt;span&gt;=&quot;@+id/text&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_width&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_height&lt;/span&gt;&lt;span&gt;=&quot;wrap_content&quot;&lt;/span&gt;&lt;span&gt;
        android:layout_centerInParent&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;
        android:text&lt;/span&gt;&lt;span&gt;=&quot;我是第一个Fragment&quot;&lt;/span&gt;&lt;span&gt;
        android:textSize&lt;/span&gt;&lt;span&gt;=&quot;20dp&quot;&lt;/span&gt;
        &lt;span&gt;/&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;RelativeLayout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 好了，到这里，我们就基本讲完了。&lt;/p&gt;
&lt;p&gt;附上源码：&lt;a href=&quot;https://github.com/huanshen/Learn-Android/tree/master/fragmentTabHost&quot; target=&quot;_blank&quot;&gt;https://github.com/huanshen/Learn-Android/tree/master/fragmentTabHost&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 07:12:00 +0000</pubDate>
<dc:creator>huansky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huansky/p/7859830.html</dc:identifier>
</item>
<item>
<title>浅谈Verilog HDL代码编写风格 - NingHeChuan</title>
<link>http://www.cnblogs.com/ninghechuan/p/7859690.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ninghechuan/p/7859690.html</guid>
<description>&lt;p&gt;         消失了好久，没有写文章，也没有做笔记，因为最近再赶一个比赛，时间很紧，昨天周六终于结束了，所以趁着周末这会儿有时间，写点东西，记录下来。首先我学习FPGA才一年多，我知道自己没有资格谈论一些比较深层次的问题，对于这个行业来说可能我才是一直脚踩在门外面。所以这篇文章是写给一些刚开始学习FPGA、Verilog HDL的同学，我看过一些大神写的代码，然后尽量模仿大神写法，经过好几个大神的影响和自己的习惯摸索，最终算是总结出了一套自己的代码书写风格，当然我的代码风格还是一直在进化中。现在将自己的一些经验总结出来，希望对刚开始学习FPGA的朋友有所帮助。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         首先，第一我还是要强调的是编辑器的作用，工欲善其事，必先利其器。之前整理过一篇，如何高效的编写Verilog HDL——菜鸟篇，点击查看。其中我介绍了使用notepad++的一些小技巧，当然还有很多网友使用gvim编辑器，对gVim编辑器，我也了解了很多，虽然上手比较麻烦，但是一劳永逸，我之后也是打算学习该编辑器的使用的，目前，时间比较紧，所以就暂且先用notepad++吧。熟悉verilog的人都知道，Verilog HDL设计其实使用20%的语法就可以设计出90%以上的电路，其中最长用的便是always块了，用软件自带的IDE的话编写效率其实是很差的。所以说一个好的顺手的编辑器至关重要，对于我们这些苦逼的技术工作者来说，经常看电脑屏幕一看就是一整天，然后还天天看，所以用Notepad++更换主题可以更好的为革命保护视力，&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　点击设置——语言格式设置，可设置编辑器主题&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141843156-1859312305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　这里我选择的是如图所示的主题，我比较喜欢这个比较暗的颜色，&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141848702-2118706473.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　最终呈现的效果便如下图所示，是不是看起来很舒服呢！&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141854077-1212389437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         第二、代码的端口命名、内部寄存器的命名。下图是我们最近做的项目，可以看出在端口众多的情况下，端口的命名有多重要，基本上从信号的命名就可以直接联想到该信号的作用，同理，内部使用寄存器的命名也是如此。对于使用的系统时钟命令最好是用clk+后缀，加上时钟的频率。这样不仅自己看起来方便，别人看起来也方便。因为很多情况下，不同开发板的晶振是不一样的，但是编写者知道，其他人就未必知道了。我还真见过always@(posedge A or negedge B)这样写的人的，当然他也是刚开始学习了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         复位信号也直观只要，我习惯上写的而是rst+后缀，高电平有效还是低电平有效，rst_n（低电平有效negedge），rst_p（高电平有效posedge），我看过一些书上的复位信号命名的是clr，其实这两种命名的方法根本没有区别，一般情况下，我们复位都是将寄存器置数为0，也相当于清零，但也不排除，复位是给置数的情况，所以我习惯上使用rst_n来复位，及低电平复位。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　其他的信号也就类似的，总结下来上就是，给信号起一目了然的名字，尽量使用缩写，不要信号的名字太长，信号的名字和功能作用中间用下划线隔开，要习惯性的给信号后面编写注释，给你编写的代码块做注释，给你编写的模块做注释，请记住你的代码不是给你一个人写的。&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141904171-137095978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         第三、代码的工整。从上图中可以看到，我在定义端口的时候是直接定义在module内部的，很多人的写法是先在module内部定义一遍端口，然后再module下面再写一遍input/output定义，其实这两种方式都可以，那么我为什么选择直接写在module内部呢，，，因为我懒啊。在编写代码的时候多用空格和TAB，把定义的信号对齐，这样写出代码是很漂亮的，每一段代码之间应该用分隔线隔开，这样整体看起来很清晰。&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141931437-1492773434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         模块端口的实例化也是，这样的代码自己看着漂亮，别人看着也舒服，而且从顶往下看都会很明了。&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141936171-427736294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;        第四、在设计中多实用时序逻辑，尤其是直接需要输出的端口。在我最近做的那个项目里，我使用了一些组合逻辑来做控制，但是后来发现这样会有一个弊端，每次系统上电的时候会有一段不稳定时间，在这段时间里，我的那几个控制模块就无规则的在乱启动，即使是在复位的情况下，这样可能会引起一些麻烦造成系统的不稳定，如果采用是时序逻辑的话，就完全可以避免这个问题了，在系统上电的时候，复位低有效，等上电稳定后，将复位键变为高电平。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;       第五、如果一个工程里，同一个宏定义需要在多个文件里调用的话，建议使用调用文件。比如我在写VGA驱动的时候，行扫描、场扫描和各种颜色的定义参数需要在多个模块中使用，所以可在模块内部直接写如下图所示部分，把”`define”定义放在一个单独的文件里面，”parameter”参数定义肯定必须是在模块内部了，检查重复定义。&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141941031-1464601705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1057546/201711/1057546-20171119141945671-1225819803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　第六、使用异步复位、同步置数的设计思想（可以了解一下异步复位、同步释放），而且一个always块里，尽量值操作一个寄存器。一个模块的代码不要写的太多，使用模块化设计，而且在顶层文件里尽量不了写代码，为了在检查RTL图的时候比较方便明了的看出各个模块之间的连线图。模块内部不应该使用内部使用，同一个模块内的时钟应该是同一个时钟驱动下的，如果要使用别的时钟进行驱动的话，必须使用时钟使能而不是时钟触发，保持所有always块是同一个时钟上升沿触发，如果确实要使用内部时钟 门控时钟 或内部的复位信号 将它们放在顶层将这些信号的产生放在顶层的一个独立模块 这样所有的子模块分别使用单一的时钟和复位信号。对于使用if——else if——else或case语句必须把所有的情况都写上，避免生成锁存器。最重要的第一点，寄存器类型的数据应该有复位，我不习惯使用initial语句进行初始化，一般都是用异步复位来为维持系统的稳定。还有平时写代码的时候尽量不要使用for循环，当然有些必要的时候也是可以用的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第七、如果你遇到实在不好解决的设计，那么这个时候，你就可以考虑一下状态机了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;         我能想到的目前就只有这么多了，还有什么是我没有想到了和我做的可以留言告诉我。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/1057546/201706/1057546-20170611114905559-478053885.jpg&quot; alt=&quot;&quot; width=&quot;289&quot; height=&quot;289&quot;/&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：NingHeChuan（宁河川）&lt;/p&gt;
&lt;p&gt;个人微信订阅号：开源FPGANingHeChuan&lt;/p&gt;
&lt;p&gt;如果你想及时收到个人撰写的博文推送，可以扫描左边二维码（或者长按识别二维码）关注个人微信订阅号&lt;/p&gt;
&lt;p&gt;知乎ID：&lt;a href=&quot;https://www.zhihu.com/people/zhu-he-chuan/activities&quot; target=&quot;_blank&quot;&gt;NingHeChuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微博ID：&lt;a href=&quot;http://weibo.com/6059461073/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&amp;amp;is_all=1&quot; target=&quot;_blank&quot;&gt;NingHeChuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 浅谈Verilog HDL代码编写风格&quot; href=&quot;http://www.cnblogs.com/ninghechuan/p/7859690.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/ninghechuan/p/7859690.html&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 06:24:00 +0000</pubDate>
<dc:creator>NingHeChuan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ninghechuan/p/7859690.html</dc:identifier>
</item>
<item>
<title>Fis3迁移至Webpack实战 - cpselvis</title>
<link>http://www.cnblogs.com/cpselvis/p/7859665.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cpselvis/p/7859665.html</guid>
<description>&lt;p&gt;Webpack从2015年9月第一个版本横空初始至今已逾2载。它的出现，颠覆了一大批主流构建如Ant、Grunt和Gulp等等。腾讯NOW直播&lt;a href=&quot;https://ivweb.io/&quot;&gt;IVWEB团队&lt;/a&gt;之前一直采用Fis构建，本篇文章主要介绍从Fis迁移到webpack遇到的问题和背后的黑科技，内容包括inline-resource、多页面构建、资源压缩、文件hash、文件目录规则等等。&lt;/p&gt;
&lt;h3 id=&quot;为什么要迁移至webpack&quot;&gt;为什么要迁移至webpack?&lt;/h3&gt;
&lt;p&gt;有两个层面的原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先webpack的社区生态火爆，插件齐全并且维护更新的很频繁，遇到了问题，比较容易解决。&lt;/li&gt;
&lt;li&gt;webpack里面有happypack多实例构建方案、code spliting按需加载文件等方案, 可以有效的进行打包构建持续优化, 这些在Fis里面是缺少的。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;区分构建的开发or生产环境&quot;&gt;区分构建的开发or生产环境？&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;  &lt;span class=&quot;st&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;dev&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;cross-env NODE_ENV=dev nodemon --watch webpack.config.js --exec &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;webpack-dev-server --config webpack.config.js --env development&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; --progress --colors&quot;&lt;/span&gt;,
    &lt;span class=&quot;st&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;webpack --config webpack.config.js --env production --progress --colors&quot;&lt;/span&gt;,
    &lt;span class=&quot;kw&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;,&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过在package.json中注入环境变量的方式，注入NODE_ENV=dev代表开发环境，默认为生产环境。这里使用cross-env的原因是：windows下 在package.json中直接使用 NODE_ENV=dev 不生效，需写成 set NODE_ENV=dev，cross-env的写法兼容各个操作系统。&lt;/p&gt;
&lt;h3 id=&quot;资源内联-inline-resource&quot;&gt;资源内联 (inline-resource)&lt;/h3&gt;
&lt;p&gt;inline-resource的好处是可以减少css,js等的请求数，同时html加载的时候即可同时加载了这些内联的css、js等静态资源，可以有效的减少白屏或者页面闪动的问题。&lt;/p&gt;
&lt;p&gt;这里的内联分为2种，一种是静态的html片段,css,js等，这些资源一开始就存在项目的某个目录下；另一种是构建过程中动态生成的css,js文件。&lt;/p&gt;
&lt;p&gt;对于html的内联，写法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;  &lt;span class=&quot;ot&quot;&gt;${require&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;('raw&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;-&lt;/span&gt;loader!../src/assets/inline/meta.html&lt;span class=&quot;st&quot;&gt;')}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于js的内联，需要增加babel-loader将ES6的语法进行转换，避免浏览器直接解析导致报错。写法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;${require&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;('raw&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;-&lt;/span&gt;loader!babel-loader!../src/node_modules/@tencent/report-whitelist/lib/index.js&lt;span class=&quot;st&quot;&gt;')}&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：不能将html-loader和html-webpack-plugin同时使用，html-loader会导致默认的ejs模板引擎语法解析实效，造成 ${} 和 &amp;lt;% = %&amp;gt;等语法不生效&lt;/p&gt;
&lt;p&gt;上面讲述了如何内联静态的资源文件，那么如何内联构建过程中动态生成的资源文件呢？这里需要借助html-webpack-inline-source-plugin来增强html-webpack-plugin的功能。比如：将构建过程中生成的css文件inline到html模板里面去。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; HtmlWebpackInlineSourcePlugin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'html-webpack-inline-source-plugin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;inlineSource&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; isDev &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.css$'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/template/index.tmpl.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'activity.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackInlineSourcePlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段代码，html-webpack-plugin本身并不具备inlineSource的属性。引入了html-webpack-inline-source-plugin之后，就可以通过inlineSource属性来匹配哪些文件需要动态的内联进html模板文件中了。&lt;/p&gt;
&lt;h3 id=&quot;多页面构建&quot;&gt;多页面构建&lt;/h3&gt;
&lt;p&gt;多页面构建，或者称为通配(wildcards)构建。即需要构建的页面数量是不确定的，可能A业务有3张页面，B业务有5张页面。因此，我们不能把entry写死了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;entry&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/pages/activity/init.js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;co&quot;&gt;// 深海寻宝活动首页&lt;/span&gt;
  my&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/pages/my-reward/init.js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;co&quot;&gt;// 我的奖励&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./src/pages/exchange/init.js'&lt;/span&gt;             &lt;span class=&quot;co&quot;&gt;// 线下兑换奖品&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为什么上面的写法不可取呢？很明显：上面的写法把entry写死了，这并不通用。后面如果产品需求发生改变，需要新增一张页面，就需要手动修改构建脚本。我们需要的entry是：'./src/pages/**/init.js'，它能够像一些linux的命令，具备匹配某个规则的所有结果的能力。这里的思路是借助&lt;strong&gt;glob&lt;/strong&gt;，达到动态entry的目的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;entry&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;glob&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sync&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./src/pages/**/init.js'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在webpack构建中，一个页面需要一个与之对应的HtmlWebpackPlugin实例，N个页面需要N个与之对应的HtmlWebpackPlugin。此处需要动态的设置HtmlWebpackPlugin的实例个数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; newEntry &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;entry&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((index) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; entry &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;entry&lt;/span&gt;[index]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;entry&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\/(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;*)\/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;init.js/&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; pageName &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; match &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; match[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    newEntry[pageName] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;plugins&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;inlineSource&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; isDev &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.css$'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/template/index.tmpl.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;.html`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [pageName]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; newEntry&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;htmlcss和js压缩&quot;&gt;html、css和js压缩&lt;/h3&gt;
&lt;p&gt;对于html文件里面的内容压缩可以通过给html-webpack-plugin设置minify参数，html-webpack-plugin的压缩配置其实是直接集成了 html-minifier，因此minify的参数设置可以直接参考html-minifier的文档。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;plugins&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;inlineSource&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; isDev &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.css$'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; __dirname &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/template/index.tmpl.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;.html`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [pageName]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;minify&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;minifyJS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;co&quot;&gt;// 仅压缩内联在html里面的js&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;minifyCSS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;co&quot;&gt;// 仅压缩内联在html里面的css&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;html5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;co&quot;&gt;// 以html5的文档格式解析html的模板文件&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;removeComments&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// 不删除Html文件里面的注释&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;collapseWhitespace&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 删除空格&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;preserveLineBreaks&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 删除换行&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置了上面的minify参数后，看到生成的html文件的内容全部在1行上，需要注意的是：minifyJS和minifyCSS只会压缩内联在这个html文件的css和js内容，对于单独的css文件和js文件并不会压缩。 那么打包出来的css和js文件如何压缩呢？&lt;/p&gt;
&lt;p&gt;对于css文件压缩，直接开启css-loader的压缩参数参数minimize为true即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    test: /\.scss$/,
    use: ExtractTextPlugin.extract({
        fallback: 'style-loader',
        use: [
            {
                loader: &quot;css-loader&quot;,
                options: {               // 设置css-loader的minimize参数为true
                  minimize: true
                }
            },
            {
                loader: &quot;sass-loader&quot;
            }
        ]
    })
},&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;css-loader开启压缩可能会报错 Module build failed: BrowserlistError: unkonwn version 61 and _chr，解决办法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;npm&lt;/span&gt; i caniuse-db —save    &lt;span class=&quot;co&quot;&gt;#更新caniuse-db到最新版本&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于js文件的压缩，可以通过引入 webpack 内置的 UglifyJsPlugin：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; webpack &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'webpack'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
plugins&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    ...
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;optimize&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;UglifyJsPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    ...
]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;文件hash&quot;&gt;文件Hash&lt;/h3&gt;
&lt;p&gt;每次功能发布上线，都需要重新构建一次源代码，生成一个新的文件版本列表。此处文件Hash的方式就是一种版本管理的方式，发布时替换有变化的版本的文件，达到增量更新的效果。此处Hash策略是：根据文件内容进行hash，取8位。&lt;/p&gt;
&lt;p&gt;JS文件:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;output&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name]_[chunkhash:8].js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// 进行js脚本hash&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'public/'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; isDev &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt; : cdnUrl &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Css文件:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;plugins&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;CleanWebpackPlugin&lt;/span&gt;([&lt;span class=&quot;st&quot;&gt;'./public'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    new &lt;span class=&quot;at&quot;&gt;ExtractTextPlugin&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'[name]_[contenthash:8].css'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// css文件hash&lt;/span&gt;
    new &lt;span class=&quot;va&quot;&gt;webpack&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;optimize&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;UglifyJsPlugin&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    ...
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Img文件:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;rules&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;gif&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'file-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'[name]_[hash:8].[ext]'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// img文件hash&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    ...
]    &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;多终端适配&quot;&gt;多终端适配&lt;/h3&gt;
&lt;p&gt;开发过程中，不同分辨率的浏览器适配是个让前端开发者头疼的问题。手淘的rem方案完美解决了这个问题，它的核心思想是页面加载时动态设置body的font-size值和rem和px转换的单位。&lt;/p&gt;
&lt;p&gt;为了不改变编程习惯，开发过程中仍然使用px单位来作为基础布局长度单位，以750px宽度的视觉稿作为基准，设置rem和px的转换单位为1rem=75px。那么px2rem如何集成进webpack中呢？首先增加css的解析&lt;a href=&quot;https://www.npmjs.com/package/px2rem-loader&quot;&gt;px2rem-loader&lt;/a&gt;，然后在html头部引入&lt;a href=&quot;https://github.com/amfe/lib-flexible&quot;&gt;lib-flexible&lt;/a&gt;文件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;scss&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ExtractTextPlugin&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extract&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px2rem-loader&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 增加px2rem-loader，并且设置rem单位为75px&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;remUnit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;75&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;sass-loader&quot;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;其它feature&quot;&gt;其它feature&lt;/h3&gt;
&lt;p&gt;由于篇幅原因，关于webpack的打包优化将会用另外一篇文章介绍，敬请期待～&lt;/p&gt;
&lt;h3 id=&quot;参考文档&quot;&gt;参考文档&lt;/h3&gt;
&lt;h2 id=&quot;打个广告&quot;&gt;打个广告&lt;/h2&gt;
</description>
<pubDate>Sun, 19 Nov 2017 06:08:00 +0000</pubDate>
<dc:creator>cpselvis</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cpselvis/p/7859665.html</dc:identifier>
</item>
<item>
<title>在著名出版社出版书，你也行——记录我写书出版的经历和体会 - hsm_computer</title>
<link>http://www.cnblogs.com/JavaArchitect/p/7859622.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JavaArchitect/p/7859622.html</guid>
<description>&lt;p&gt;    在技术面试中，如果你能“随意”地对面试官说，关于java（或其它）方面，我在xx出版社出了xx书，那么一些不明就里的面试官就会用“膜拜”的眼光看着你了，他们会认为你在这方面很牛，这能大大提升你通过面试的可能，甚至都可能不问技术问题直接让过了。&lt;/p&gt;
&lt;p&gt;    大多数人认为出版书很难，在做之前我也这样认为。在这篇文章里我将向大家分享写书出版的步骤，读完后大家一定会感觉到，只要肯坚持，一点都不难。&lt;/p&gt;


&lt;p&gt;     计算机行业，国内有四个比较著名的出版社，电子工业出版社、机械工业出版社、人民邮电出版社和清华出版社，当然还有些其它的。其实在四大出版社出书的难度一点也不比其它出版社高。   &lt;/p&gt;

&lt;p&gt;    建议大家直接和出版社的编辑联系，有些图书出版公司可能会起到中介的作用，从中帮大家牵头联系编辑，但还是建议自己直接联系编辑。&lt;/p&gt;
&lt;p&gt;    我们就以人民邮电出版社为例，在他们的官网上，http://www.ptpress.com.cn/p/z/1498629678412.html，我们能看到有“投稿咨询”一栏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119103633609-60072788.png&quot; alt=&quot;&quot; width=&quot;418&quot; height=&quot;131&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    点进去以后，一般就能看到投稿的方式，其它出版社也可以用类似的方式看到投稿邮箱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119104047234-537763962.png&quot; alt=&quot;&quot; width=&quot;507&quot; height=&quot;311&quot;/&gt;&lt;/p&gt;


&lt;p&gt;    写之前大家可以想好这本书的主要内容，并写《图书大纲》和《本书特色》，大纲其实就是目录，得列到3级目录，比如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119104344609-626042893.png&quot; alt=&quot;&quot; width=&quot;325&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    通过大纲，我们能整理列出本书的主要内容，通过《本书特色》，大家能想一下这本书和别的同类书相比，有哪些吸引人的地方。&lt;/p&gt;
&lt;p&gt;    大多数出版社会要求作者根据大纲和特色填写一份《选题申请表》。编辑会用这个向他们的领导申请选题，一旦批下来，就会给这本书分配一个CIP编号，当这本书最终出版号，会再分配一个通用的ISBN号。&lt;/p&gt;
&lt;p&gt;    申请到CIP号后，出版社的编辑就会和大家签订合同，有些作者会先把书写好，再找出版社，不建议这样做，推荐的做法是签订好以后再写，而且每写好一个章节后，给编辑审阅，边写边改，这样不会出大的方向性问题。如果一次性把书稿给编辑，当然也行，但万一写的内容不符出版要求，那就得大改了。&lt;/p&gt;


&lt;p&gt;    这个大家非常关心的问题，稿酬有两种结算方式，一种是按页算，一次性付清，结算后再印时，就不再另外给了，如果大家预估销量一般，可以采用这种方式。&lt;/p&gt;
&lt;p&gt;    另一种是版税，新手作者一般在6%到8%，资深作者可以到10%以上，目前往往是按“实际销售册数”计算。&lt;/p&gt;
&lt;p&gt;    比如一本书50元，订合同时版税是6%，第一次印刷是3000册，但实际就卖了2000册，那么拿到手的就是50*6%*2000，也就6千元，按版税支付的话，如果图书热卖，或印刷次数多，实际拿到手的钱就比按页算的多了。&lt;/p&gt;
&lt;p&gt;    其实对于新手作者而言，别对稿酬抱太大希望，更别指望靠这个发财。以我最近写的 &lt;a href=&quot;https://baike.baidu.com/item/Java%20Web%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/22038502&quot;&gt;java web轻量级开发面试教程&lt;/a&gt; 为例，300页左右的书，前后投入7个月，这书69（就按70算），版税是8%，印刷2500测，目前卖了1600册，预计2500能卖完，那么稿酬也就14000，平摊到每个月也就2000，要知道我平均一天要写2个小时，一个月至少60个小时，论小时算，一个小时也就30多，钱真不多。&lt;/p&gt;
&lt;p&gt;    但出书毕竟是名利双收的事情，不少人还会出钱找渠道出书，这至少还能拿到钱。况且，当大家变成大神后，在写几本书积累完经验后，就能以“写畅销书”为目的。按目前一次印刷3000为例，就少算5次印刷吧（畅销书有的可以是10次印刷），每本书70元，以10%的版税算这样稿酬就有10万多了。这只是钱的部分，畅销书的作者们一般都是在行业内非常出名（可能是先出名再写书，也有可能出书积累人气），他们可以就凭此找到非常好的工作。这些书就是他们的摇钱树了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119114617359-141818309.png&quot; alt=&quot;&quot; width=&quot;315&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;


&lt;p&gt;     谈完钱，我们来说下要干的活。图书一般分如下三种。&lt;/p&gt;
&lt;p&gt;    1 案例类，比如最近有不少Python案例书，它们一般是分10多个章节，其中用1到2个章节介绍概念、开发环境和基础知识，后面是一章一个案例，先写代码再写说明。&lt;/p&gt;
&lt;p&gt;     这种比较适合新手作者，因为大家都是开发人员，准备代码难度不大，在文字部分只要把代码介绍清楚就行。&lt;/p&gt;
&lt;p&gt;    2 算法架构这种偏重理论类的书。目前有不少机器学习和高并发架构的书，其中会用案例介绍些算法，通过一些代码介绍案例。这种书一般是大神级的人写的，他们往往能在一个领域专研很深入，然后有针对性地介绍一些常见的算法和框架。新手作者不建议涉及这类领域。&lt;/p&gt;
&lt;p&gt;    3 经验浓缩类型，我的书&lt;a href=&quot;https://baike.baidu.com/item/Java%20Web%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/22038502&quot;&gt;java web轻量级开发面试教程&lt;/a&gt;可以自夸下，是这种类型。再容我冒昧地高攀一下，李刚老师的疯狂系列图书我个人认为也是这种类型的。&lt;/p&gt;
&lt;p&gt;    如果大家在某个行业有一定的沉浸，可以尝试写这类书，但还是这句话，新手作者可能技能上达到了，但这种书措辞上比较难把握，建议新手作者通过一些书变熟练后再写。 &lt;/p&gt;

&lt;p&gt;    从数量来看，我好歹也算“资深”作者了。    我的书至少能保证字字原创，很少大段引用别人的文字，因为原创，所以自己体会多，至少能保证不误人子弟，但如果在措辞描述上（更重要是销量上），离开孙卫琴李刚大神们，尚有一段距离，本人尚有自知之明。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119115921140-2005380403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    根据一路走来的经历，我有如下深刻的感触：&lt;/p&gt;
&lt;p&gt;    1 一定得坚持，而且越往后写，放弃的冲动就越大。&lt;/p&gt;
&lt;p&gt;    刚开始写的时候，大家其实信心都很足，但写好一个章节后，会收到编辑不少修改意见，往往第一个章节得大改，不少作者由于受不了来来回回反复的修改，再加上工作一忙，就放弃了。&lt;/p&gt;
&lt;p&gt;    其实要写完一本书，能力写作能力都次要的，这可以锻炼，但更关键是靠坚持。&lt;/p&gt;
&lt;p&gt;    我写书后，一般6点起来，吃完饭6点半，写2个小时，到8点半去公司。晚上有时候写1个小时，周末一天写，一天放松，大概写了6个月完稿，1个月修改录视频。说实在这个工作强度不算大，更何况这是为自己干活。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119121037640-16108788.png&quot; alt=&quot;&quot; width=&quot;397&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    2 关于文笔能力&lt;/p&gt;
&lt;p&gt;    写计算机图书毕竟不是参加作文竞赛，但最低要求是能把作者讲清楚就行。能不能把内容写清楚是能力问题，而愿不愿意写清楚是态度问题。&lt;/p&gt;
&lt;p&gt;    写书时，把代码或案例或远离解释清楚，并不难，但不能因为最近事多就大段抄录JDK文档上的内容，更不能得过且过地用些文字来敷衍读者。我一般写好后，会通读几遍，首先保证语法没问题，第二站在读者角度思考，确认这个话读者能理解。&lt;/p&gt;
&lt;p&gt;    3 如何提升书的质量&lt;/p&gt;
&lt;p&gt;    首先当然要避免抄袭。其次，为了提升质量，也应当尽量避免大段应用别人的文字，如果要引用，可以在自己理解的基础上在别人原文的基础上改写一遍。 &lt;/p&gt;
&lt;p&gt;    这样，你的书里就大多数是原创的。质量不好的书，读起来就像一个老师在讲台上自顾自地讲课，也不根据底下学生的程度讲，更没互动，而一本好的书，读起来就像作者通过文字和大家娓娓而谈，从中能感受到作者的思路和用心。&lt;/p&gt;
&lt;p&gt;    具体而言，如果要写出好书（也是畅销书），首先内容上要有所选取，不能恨不得一下子都灌输给读者，应当根据读者群的接受能力精心挑选内容，并用心组织文字，这样能让读者有种“挠在痒处”的感觉。其次不能有任何糊弄读者的心思（自然就更没有糊弄读者的举动了），比如不能用大段没营养的文字来骗篇幅，不能贴些毫无意义的代码来展示所谓的专业性。&lt;/p&gt;
&lt;p&gt;    用心还未必写出好书，但不用心一定写不出好书。谋事在人，成事在天，一本书如果要畅销的话，除了作者得用心外，有事情还得带点运行成分。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/1226172/201711/1226172-20171119134759671-1996509756.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    如果大家在这方面有什么问题，都可以来问我。&lt;/p&gt;



</description>
<pubDate>Sun, 19 Nov 2017 05:50:00 +0000</pubDate>
<dc:creator>hsm_computer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JavaArchitect/p/7859622.html</dc:identifier>
</item>
<item>
<title>关于闭包 的多样菜谱 - 孤竹孙</title>
<link>http://www.cnblogs.com/miumiu2017/p/7859613.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/miumiu2017/p/7859613.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;闭包(closure)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;闭包是python的一个非常有趣有用的设施, 因为有区别于简易plain逻辑,所&lt;span&gt;以&lt;/span&gt;比较绕.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面,我给大家上几盘菜,把我的建立理解的过程,展现给大家.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;定义：外部函数里面有一个内部函数，内部函数使用到了外部函数的变量，并且外部函数将这个内部函数作为返回值返回，那么这个内部函数我们称之为闭包.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;注意1:内部函数作为返回值返回( 返回值是函数对象,是不带()的 ) .&lt;/p&gt;
&lt;p&gt;注意2:函数的嵌套.调用外部函数时,通过外部函数的return,进入内部函数.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，&lt;br/&gt;就把这个临时变量绑定给了内部函数，之后,外部函数结束。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;运用函数,一定要考虑参数和变量&lt;/span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; 有无参数和变量?参数和变量有无变化?参数和变量是否进行内外传递?&lt;/p&gt;
&lt;p&gt;所以,当闭包遇到参数,注定是一场有趣的旅行.&lt;/p&gt;

&lt;p&gt;举个小菜 1:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(外部函数无参, 内部函数无参)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello():
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; world():
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;这是world函数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; world
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; a =&lt;span&gt; hello()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; a()&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;这是world函数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个小菜 2:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(外部函数有参数, 内部函数无参数)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; hello(*&lt;span&gt;args):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     a = 1
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; world():
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         sum =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; args:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             sum +=&lt;span&gt; x
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; world
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; a = hello(100, 200, 300&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(a())&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt;600&lt;br/&gt;内部函数引用了外部函数的参数.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个小菜 3:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意:外部函数有参数;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　内部函数也有参数,&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　内部函数引用外部函数中的变量.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写一个闭包，让你生成不同的二元一次方程, y = a*x+b&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello(a, b):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func(x):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; a*x +&lt;span&gt; b
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; func
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 外部函数内部,使用闭包(含有参数),使不同功能(函数)的参数进行分离. &lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; func1 = hello(3, 2)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 就是3x+2&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; func2 = hello(5, 3)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 就是5x+3&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 闭包使用了外部函数的参数(变量),自己也有形参(变量)&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(func1(1&lt;span&gt;))&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt;5
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(func2(2&lt;span&gt;))&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt;13
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(hello(10, 2)(3))&lt;br/&gt;　　&amp;gt;&amp;gt;&amp;gt;32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嗯...觉得还好理解,很有意思吧. &lt;/p&gt;
&lt;p&gt;下面,给大家一道特色菜,请坐稳啊~&lt;/p&gt;

&lt;p&gt;举个特色菜1:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;(注意1:内部函数放进列表,被return.&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     fns =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(1, 4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt;&lt;span&gt; pingfang():
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; x*&lt;span&gt;x
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        fns.append(pingfang)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fns
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; f1, f2, f3, =&lt;span&gt; hello()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f1())
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f2())
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(f3())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大家先目测,心算一下结果如何? &lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;1　　&amp;gt;&amp;gt;&amp;gt;4　　&amp;gt;&amp;gt;&amp;gt;9　　??&lt;/p&gt;
&lt;p&gt;正确答案是:&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;9　　&amp;gt;&amp;gt;&amp;gt;9　　&amp;gt;&amp;gt;&amp;gt;9　　!!&lt;/p&gt;
&lt;p&gt;这是为什么呢?&lt;/p&gt;
&lt;p&gt;# 关键在于在调用f1() f2() f3()时, 变量x的值是怎样的!&lt;/p&gt;
&lt;p&gt;请大家看我的注释代码:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; (&lt;strong&gt;注意2:外部函数无参,有变量;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;　　　  内部函数无参,引用外部函数中的变量.&lt;/strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 闭包特例,内部函数放进列表返回.&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     fns =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(1, 6&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt;&lt;span&gt; pingfang():
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; x*&lt;span&gt;x
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        fns.append(pingfang)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fns
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把函数pingfang对象存放在列表中&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 看下结果.是个列表,内是函数对象.&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(hello())  #&amp;gt;&amp;gt;&amp;gt;[&amp;lt;function hello.&amp;lt;locals&amp;gt;.pingfang at 0x0000022312F2DF28&amp;gt;, &amp;lt;function hello.&amp;lt;locals&amp;gt;.pingfang at 0x0000022312F350D0&amp;gt;, &amp;lt;function hello.&amp;lt;locals&amp;gt;.pingfang at 0x0000022312F351E0&amp;gt;]&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; # 注意这里的函数对象是!!!  [&amp;lt;function hello.&amp;lt;locals&amp;gt;.pingfang ...]
&lt;span&gt;13&lt;/span&gt; f1, f2, f3=&lt;span&gt; hello()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 此时进行拆包(包指的是,列表/字典/元组)&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拆包时,先hello(),拆包将列表内的元素,赋值给f1, f2, f3.&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f1())
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f2())
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f3())
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 请注意,pingfang函数无参,但引用外部函数的变量.&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 关键在于在调用f1() f2() f3()时,变量x的值是怎样的呢?&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 之前,先有f1, f2, f3= hello()了,此时x保存的是range结构跑完之后的x=5.之后,拆给f1, f2, f3,因为闭包引用外部的变量x,所以每次调用都是x=5.所以,每次print都是9.&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 看明白了吗?写博客好费时间啊..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时,多说一句:&lt;/p&gt;
&lt;p&gt;闭包的执行是延迟执行，所以要注意使用的外部函数的变量是否还是之前你认为的那个值，因为它很有可能改变.&lt;/p&gt;

&lt;p&gt;额...因为存在''外部函数-内部函数-各自参数/变量''的模式,&lt;/p&gt;
&lt;p&gt;闭包的故事还没完啊...&lt;/p&gt;

&lt;p&gt;再举个特色菜2:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;(外部函数无参,有变量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;内部函数有参,有变量)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请复制代码,验证结果.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_6bce1c75-9b5f-45fb-bd64-791974519a76&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6bce1c75-9b5f-45fb-bd64-791974519a76&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6bce1c75-9b5f-45fb-bd64-791974519a76&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     fns =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(1, 4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt; pingfang(y=&lt;span&gt;x):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; y*&lt;span&gt;y    
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        fns.append(pingfang)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fns
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; f1, f2, f3=&lt;span&gt; hello()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f1())
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f2())
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f3())
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;1
&lt;span&gt;17&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;4
&lt;span&gt;18&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;9
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注意,本次pingfang带有形参,且pingfang函数的return y*y,每次不同.&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return pingfang函数组成的列表,而每一次append的都是不同的函数对象,故每次调用--&amp;gt;当次的return y*y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;点我试一试?&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;enm,yummy,yummy!&lt;/p&gt;
&lt;p&gt;因为难嚼难理解,所以看起来,好像很好吃的样子啊...那好吧,再来一道~&lt;/p&gt;

&lt;p&gt;再举个特色菜3:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;(外部函数无参,有变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;内部函数有参,有变量,并再嵌套一层有参的函数)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关键在于函数的传参路径,变量的引用路径.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请复制代码,验证结果.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b88b518e-5df6-4e67-841f-295978095f9b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b88b518e-5df6-4e67-841f-295978095f9b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b88b518e-5df6-4e67-841f-295978095f9b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     fns =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(1, 4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt;&lt;span&gt; pingfang(y):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;def&lt;/span&gt;&lt;span&gt; haha():
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; y*&lt;span&gt;y
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; haha
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        fns.append(pingfang(x))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fns.append(pingfang)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; TypeError: pingfang() missing 1 required positional argument: 'y'&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fns
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(hello())&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 同样是把函数pingfang对象存放在列表中,内是函数对象.&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; &amp;gt;&amp;gt;&amp;gt;[&amp;lt;function hello.&amp;lt;locals&amp;gt;.pingfang.&amp;lt;locals&amp;gt;.haha at 0x0000016547F050D0&amp;gt;,...]&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; !!注意是 function hello.&amp;lt;locals&amp;gt;.pingfang.&amp;lt;locals&amp;gt;.haha  请联系到特色菜1中print(hello())的函数对象,看出两者的区别和共同性.&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; f1, f2, f3 =&lt;span&gt; hello()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f1())
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(f2())
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(f3())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;看看有何妨? 请文末留言交流~&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;咳咳,码了这么代码和注释,耗费很长时间啊,希望对您理解闭包(closure)有所帮助.&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 05:48:00 +0000</pubDate>
<dc:creator>孤竹孙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/miumiu2017/p/7859613.html</dc:identifier>
</item>
<item>
<title>随机产生20个单词 - 血夜之末</title>
<link>http://www.cnblogs.com/Tiancheng-Duan/p/7724794.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tiancheng-Duan/p/7724794.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;随机产生20个单词&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;一、问题来源：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　老师给了一份专业单词word，说第二天要全背下来。错了就五十遍啊五十遍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后，有人提出要做一个产生随机单词的Demo，来测试自己。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　老师表示呵呵，做出来的就可以不用听写。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　顿时，我就表示，是可忍，孰不可忍啊。这是在侮辱我们啊。这票我干了，不能让人看低了。我这么做绝对不是为了逃避五十遍，真的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;二、问题思考：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　&lt;span&gt;　写Demo之前，先思考一下这个程序的逻辑。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先，我要导入数据，然后将数据转化为便于使用的数据类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　导入数据方面，我选择了直接复制，然后以字符串的形式保存在一个数组内。当然，如果在实际使用中更方便。直接将服务器端传输的JSON数据转化就OK了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　数据转换方面，我原本想着使用正则去识别。然而我发现WebStorm直接将空格和回车都转化出来了。那就方便了。建立一个函数trans来将字符串a转化为我们需要的Object数组。当然你也可以转化为字符串数组。但是我认为转化为Object数组后更易于理解与使用，也更符合逻辑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在这之后就是从数组中挑选20个Object出来，显示出来。这涉及到两个问题，首先如何挑选，其次如何显示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　显示问题，太简单了。直接做一个按钮的监听事件，每一次点击都重新选取。记得每次选取前要初始化，即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下面就是这个Demo的最大看点，如何选取20不重复的随机数。当然这个问题，解决方法很多。常用的办法有这两种。（假设源数据数量为count）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一、建立一个大小为count的数组a，存储的数据从min到max。然后，利用random()方法产生一个随机数randomnumber，从数组a中抽取a[randomnumber]，保存在数组b中。之后每次抽取随机数randomnumber，都在数组b中遍历，是否存在。不过不存在就添加。直到数组b的length达到20。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　二、建立一个大小为count的数组a，存储的数据从min到max。然后，利用random()方法产生一个随机数randomnumber，从数组a中抽取a[randomnumber]，保存在数组b中，同时将数组a中的a[randomnumber]删除。直到数组b的length达到20。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上述方法中有一些JS才有的方法，可以加快效率。比如数组的Indexof()方法来查找元素等等。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　当然，我的方法和上面有所不同。（否则我也不会这么膨胀）方法如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　建立一个大小为count的数组a，存储的数据从min到max。然后，利用random()方法产生一个随机数randomnumber，从数组a中抽取a[randomnumber]，保存在数组b中。与此同时，令数组c中c[randomnumber]=1。这样每次产生随机数后，只有在if(!c[randomnumber])条件成立，才向数组b内添加a[randomnumber]，同时，数组计数器+1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　虽然描写看起来更麻烦一些，但是这样就避免了查询已产生随机数的循环遍历的资源消耗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;三、完整代码：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;zh-cn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;random-words(20)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;jquery-v1.12.4.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    let a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;continue\t继续。程序设计中跳出当次循环的关键字。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;break\t终止。程序设计中终止循环的关键字。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;next\t下一个。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;function\t函数。程序设计中定义函数的关键字。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;return\t返回。程序设计中函数返回数据的关键字。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true\t真的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false\t假的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;var\t定义变量关键字。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int\t整型。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boolean\t布尔型。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float\t浮点型数值。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;double\t双精度数值。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class\t类。定义类的关键字。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;public\t公有的。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;private\t私有的。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;static\t静态的。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;super\t超级。代指面向对象编程中父级类。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;this\t这个。一般指当前对象。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;window\t窗口。DOM中的浏览器窗口对象。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;document\t文档。DOM中的文档对象。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width\t宽度\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height\t高度\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first\t第一个。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;last\t最后的。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parent\t父亲，父级。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;append\t追加。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;before\t之前\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;after\t之后\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;focus\t焦点。CSS中的伪类名称，常用于设计控件获得焦点时的效果\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hover\t悬停。CSS中的伪类名称，常用于设计鼠标经过效果\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select\t选择。HTML中的下拉框标签名\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox\t复选框\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit\t提交\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;reset\t重置\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;click\t单击事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keyup\t键盘松开事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keydown\t键盘按下事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mouseup\t鼠标松开或者弹起事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mousedown\t鼠标按下事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;empty\t空的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remove\t移除\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;array\t数组\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;show\t显示\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hide\t隐藏\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;animate\t动画。jQuery中的自定义动画方法。\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;event\t事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;replace\t替换\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;join\t数组方法之一，将元素合并成字符串\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;split\t字符串方法之一，将字符串切割成数组\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;splice\t数组方法之一，可增、删、改元素\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;underline\t下划线\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fixed\t定位元素的样式属性值之一，固定定位\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;position\t定位元素的样式属性名\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;align\t对齐方式\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;background\t设置元素背景的属性名\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display\t显示\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;solid\t边框线条样式值之一，实线类型\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clear\t清除，清理\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;element\t元素\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;home\t家，或首页\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;middle\t中间的，垂直居中样式值\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;center\t水平居中\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button\t按钮\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden\t被隐藏的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;important\t重要的，提升样式的优先级\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin\t元素外边距属性名\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;object\t对象\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;transform\t变换，设置CSS3变换的样式属性名称\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;relative\t相对的，定位属性值之一的相对定位\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;arguments\t参数集合，LESS混合中或者JS函数中代表参数集合\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;method\t方法\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;action\t动作，表单form的属性之一\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;number\t数字或数值，JavaScript中的数据类型之一\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;translate\t平移，用于设置元素的位置\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;padding\t元素内间距属性名\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;source\t来源\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;control\t控制或控件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;video\t视频，H5新增播放视频的标签名\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default\t默认的，缺省的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container\t容器\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content\t内容\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;textarea\t文本输入域的标签名称\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;current\t当前的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;visited\t已经访问过的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inner\t内部的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outer\t外部的\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;client\t客户端\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;location\t位置，定位\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;instance\t实例\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prototype\t原型对象\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;property\t属性\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;constructor\t构造函数\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;innerWidth\t内部宽度\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prepend\t在元素内部前置插入元素\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trigger\t主动触发事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;triggerHandler\t主动触发事件，但不触发浏览器默认事件\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fadeIn\t淡入动画方法\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fadeOut\t淡出动画方法\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;currentTarget\t总是指向事件监听目标对象\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;focusin\t元素获得焦点时触发事件的方法\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        .container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;            border     &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px solid #333333&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            padding    &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;            background &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sandybrown&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        .top-container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;        .headtitle&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 24px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;            text-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        .ebuttom&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            text-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; lightgrey&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            box-shadow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0px 1px 1px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; 
&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        .but-container&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; &lt;span&gt;        .content&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;480px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 18px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt; &lt;span&gt;        .word&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;20%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            text-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;        .explain&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt; &lt;span&gt;            text-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt; &lt;span&gt;        .title&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt; &lt;span&gt;        .content&amp;gt;.explain&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt; &lt;span&gt;            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt; 
&lt;span&gt;180&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;top-container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;headtitle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;专业单词测试&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ebuttom&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;changewordlist()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;产生随机单词&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;h2 class=&quot;word&quot;&amp;gt;单词&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;div class=&quot;explain&quot;&amp;gt;解释&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;but-container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;title word&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;单词&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;title explain&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;解释&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt; 
&lt;span&gt;191&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt; 
&lt;span&gt;193&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt; &lt;span&gt;    let wordsBase &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array();
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;    let count&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;    let wordlistf&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array();
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;     * 用于将基础的字符串转换为需要的Object数组
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;     * @ps 由于我们是通过\n来分解字符串，而字符串最后有一个/n，所以length得减一。
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;     * a [string]
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;     * return Array
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; trans( a )
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; 
&lt;span&gt;206&lt;/span&gt; &lt;span&gt;        let wordesArray &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; a.split( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; 
&lt;span&gt;208&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt;( let i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; wordesArray.length &lt;/span&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; &lt;span&gt;            let wordArray &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; wordesArray[ i ].split( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;            let word &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; wordArray[ &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; ];
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;            let explain &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; wordArray[ &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ];
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; &lt;span&gt;            let wordBase &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; &lt;span&gt;                word: word,
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;                explain: explain
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;            wordsBase.push( wordBase );
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wordsBase;
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; &lt;span&gt;    wordsBase&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;trans(a);
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; 
&lt;span&gt;223&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; &lt;span&gt;     *  用于从min到max中输出count个不重复随机数字。
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;     * @param count number
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;     * @param min   number
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;     * @param max number
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;229&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; norepeatRandom( count, min, max )
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &lt;span&gt;        let resultArray &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        resultArray.length = 20;&lt;/span&gt;
&lt;span&gt;233&lt;/span&gt; &lt;span&gt;        let markArray &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        markArray.length = 100;&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        console.log(1,resultArray.length,markArray.length);&lt;/span&gt;
&lt;span&gt;236&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;确保可以取到max&lt;/span&gt;
&lt;span&gt;237&lt;/span&gt; &lt;span&gt;        let range &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; max &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; min &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt;( let i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; count; )
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; &lt;span&gt;            let randomnumber &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (range &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; Math.random() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; min) &lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;( &lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;markArray[ randomnumber ] )
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; &lt;span&gt;                resultArray[ i ] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; randomnumber;
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; &lt;span&gt;                markArray[ randomnumber ] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;                i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; resultArray;
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; 
&lt;span&gt;251&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; &lt;span&gt;     *  用于从Object数组wordlist中获取数组randomlist中数字指向的Object元素，并且组成新的数组，返回。
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; &lt;span&gt;     * @param wordlist Array
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt; &lt;span&gt;     * @param randomlist   Array
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; randomArray( wordlist,randomlist )
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt; &lt;span&gt;        let wordlist20&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[];
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(let i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;randomlist.length;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;            wordlist20[i]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wordlist[randomlist[i]];
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; &lt;span&gt;            wordlist20[i]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wordlist[randomlist[i]];
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wordlist20;
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; 
&lt;span&gt;266&lt;/span&gt; 
&lt;span&gt;267&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt; &lt;span&gt;     * 点击产生新的随机单词list
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt; &lt;span&gt;     * @param e 获取单击事件
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;271&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; changewordlist( e )
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; &lt;span&gt;        e &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; window.event;
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt; &lt;span&gt;        wordlistf&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;randomArray( wordsBase,norepeatRandom( &lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;99&lt;/span&gt;&lt;span&gt; ) );
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; &lt;span&gt;        let count&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt; &lt;span&gt;        let $contentinit&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.container&amp;gt;.content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;($contentinit.length){
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt; &lt;span&gt;            console.log($contentinit);
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt; &lt;span&gt;            $contentinit.remove();
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt; 
&lt;span&gt;282&lt;/span&gt; 
&lt;span&gt;283&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.container&amp;gt;.but-container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).after( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;div class=\&quot;content\&quot;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(let i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;count;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;285&lt;/span&gt; &lt;span&gt;            let wordf&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wordlistf[i].word;
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt; &lt;span&gt;            let explainf&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wordlistf[i].explain;
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt; &lt;span&gt;            let $content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.container&amp;gt;.content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt; &lt;span&gt;            $content.append( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;div class=\&quot;word\&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;wordf&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;
&lt;span&gt;289&lt;/span&gt;                              &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t\t\t&amp;lt;div class=\&quot;explain\&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;explainf&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            $content.append( &quot;&amp;lt;div class=\&quot;word\&quot;&amp;gt;单词&amp;lt;/div&amp;gt;\n&quot; +&lt;/span&gt;
&lt;span&gt;291&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                             &quot;\t\t\t&amp;lt;div class=\&quot;explain\&quot;&amp;gt;解释&amp;lt;/div&amp;gt;&quot;);&lt;/span&gt;
&lt;span&gt;292&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;295&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;296&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 四、题后思考：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;那么问题来了。在之前问题思考中，有一个JS的index()方法，来实现这个算法。那么到底哪个算法会节省系统资源呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　之后我想写一个相关的测试函数，运算时间方面，完全可以在测试函数的开头与结尾都获取一个时间戳，通过两者的差值就可以算出这个算法的运行时间。那么内存、运算量等相信也可以通过一些方法解决。但是如何提高这个测试函数的通用性，也就是如何让这个测试函数可以测试多个类型的算法呢，毕竟不同的算法有着不同的参数，有时候还需要调用个函数等等。所以这个思考分为两个部分，一个是这个算法的性能测试，一个是测试函数的拓展。&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 19 Nov 2017 05:37:00 +0000</pubDate>
<dc:creator>血夜之末</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tiancheng-Duan/p/7724794.html</dc:identifier>
</item>
<item>
<title>学会WCF之试错法——数据传输 - 甜橙很酸</title>
<link>http://www.cnblogs.com/hdwgxz/p/7859574.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hdwgxz/p/7859574.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据传输&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务契约&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[ServiceContract]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IService
    {
        [OperationContract]
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; GetData(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value);

        [OperationContract]
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; GetString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value);

        [OperationContract]
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Upload(Request request);
    }

    [MessageContract]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Request
    {
        [MessageHeader(MustUnderstand &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [MessageBodyMember(Order &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Stream Content {&lt;span&gt;get&lt;/span&gt;;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall, ConcurrencyMode =&lt;span&gt; ConcurrencyMode.Reentrant)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Service : IService
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetData(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Thread.Sleep(120000);&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You entered: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Thread.Sleep(120000);&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You entered: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Upload(Request request)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                StreamReader sr &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StreamReader(request.Content, Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GB2312&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                StreamWriter sw &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StreamWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + request.FileName + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GB2312&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;sr.EndOfStream)
                {
                    sw.WriteLine(sr.ReadLine());
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Thread.Sleep(5000);&lt;/span&gt;
&lt;span&gt;                }
                sr.Close();
                sw.Close();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            { }
            
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;system.serviceModel&amp;gt;
    &amp;lt;services&amp;gt;
      &amp;lt;service name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WCF_Find_Error_Lib.Service&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;endpoint address=&lt;span&gt;&quot;&quot;&lt;/span&gt; binding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; contract=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WCF_Find_Error_Lib.IService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
          &amp;lt;identity&amp;gt;
            &amp;lt;dns value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
          &amp;lt;/identity&amp;gt;
        &amp;lt;/endpoint&amp;gt;
        &amp;lt;host&amp;gt;
          &amp;lt;baseAddresses&amp;gt;
            &amp;lt;add baseAddress=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost/S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
          &amp;lt;/baseAddresses&amp;gt;
        &amp;lt;/host&amp;gt;
      &amp;lt;/service&amp;gt;
    &amp;lt;/services&amp;gt;
    &amp;lt;behaviors&amp;gt;
      &amp;lt;serviceBehaviors&amp;gt;
        &amp;lt;behavior&amp;gt;
          &amp;lt;serviceMetadata httpGetEnabled=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; httpsGetEnabled=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
          &amp;lt;serviceDebug includeExceptionDetailInFaults=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;False&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
        &amp;lt;/behavior&amp;gt;
      &amp;lt;/serviceBehaviors&amp;gt;
    &amp;lt;/behaviors&amp;gt;
  &amp;lt;/system.serviceModel&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;客户端代理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceProxy
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetData(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; ret = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            ServiceClient client &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceClient();
                ret &lt;/span&gt;=&lt;span&gt; client.GetData(value);
                client.Close();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (client != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    client.Abort();
                }
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; ret = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            ServiceClient client &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceClient();
                ret &lt;/span&gt;=&lt;span&gt; client.GetString(value);
                client.Close();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (client != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    client.Abort();
                }
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Upload(Request request)
        {
            ServiceClient client &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceClient();
                client.Upload(request);
                client.Close();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (client != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    client.Abort();
                }
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
            }
        }

    }


    [ServiceContractAttribute(ConfigurationName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IService
    {

        [System.ServiceModel.OperationContractAttribute(Action &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://tempuri.org/IService/GetData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ReplyAction = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://tempuri.org/IService/GetDataResponse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; GetData(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value);

        [System.ServiceModel.OperationContractAttribute(Action &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://tempuri.org/IService/GetString&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ReplyAction = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://tempuri.org/IService/GetStringResponse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; GetString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value);

        [System.ServiceModel.OperationContractAttribute(Action &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://tempuri.org/IService/Upload&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ReplyAction = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://tempuri.org/IService/UploadResponse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Upload(Request request);
    }
    [MessageContract]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Request
    {
        [MessageHeader(MustUnderstand &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [MessageBodyMember(Order &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Stream Content { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}
    [ServiceBehavior(InstanceContextMode &lt;/span&gt;= InstanceContextMode.PerCall, ConcurrencyMode =&lt;span&gt; ConcurrencyMode.Reentrant)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ServiceClient : System.ServiceModel.ClientBase&amp;lt;IService&amp;gt;&lt;span&gt;, IService
    {

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ServiceClient()
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetData(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Channel.GetData(value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Channel.GetString(value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Upload(Request request) 
        {
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.Channel.Upload(request);
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;客户端配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system.serviceModel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;endpoint &lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;=&quot;http://localhost/S&quot;&lt;/span&gt;&lt;span&gt; binding&lt;/span&gt;&lt;span&gt;=&quot;basicHttpBinding&quot;&lt;/span&gt;&lt;span&gt;
          bindingConfiguration&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; contract&lt;/span&gt;&lt;span&gt;=&quot;IService&quot;&lt;/span&gt;&lt;span&gt;
          name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system.serviceModel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;配置参数：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MaxBufferPoolSize&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;从通道接收消息的消息缓冲区管理器分配并供其使用的最大内存量&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;BasicHttpBinding.MaxBufferPoolSize&lt;span&gt;默认值为&lt;/span&gt; &lt;span&gt;524288&lt;/span&gt; &lt;span&gt;个字节。&lt;/span&gt;&lt;span&gt;WSHttpBindingBase.MaxBufferPoolSize&lt;/span&gt;&lt;span&gt;默认值为&lt;/span&gt; &lt;span&gt;65,536&lt;/span&gt;&lt;span&gt;个字节&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，配置它可提高性能。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MaxBufferSize&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;从通道接收消息的缓冲区最大大小&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;默认值为&lt;/span&gt; 65,536 &lt;span&gt;个字节。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MaxReceivedMessageSize&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;此绑定配置的通道上接收的消息&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;的最大值，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;默认值为&lt;/span&gt; 65,536 &lt;span&gt;个字节。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TransferMode&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;指示是通过缓冲处理还是流处理来发送消息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;默认情况下，&lt;/span&gt;HTTP&lt;span&gt;、&lt;/span&gt;&lt;span&gt;TCP/IP&lt;/span&gt; &lt;span&gt;和命名管道传输协议使用缓冲消息传输&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XmlDictionaryReaderQuotas.MaxStringContentLength&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：读取器返回最大字符串长度，默认为&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;8192&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 &lt;span&gt;文件编码引起的错误&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;问题描述：&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端向服务端传输数据时，假如是一个文本文件，接口参数是&lt;/span&gt;Stream，那么服务端使用StreamReader或StreamWrite时，不指定编码，服务运行在win7 及更新的操作系统上，默认的编码方式为Unicode，如果文本文件含义中文，那么服务端接收的内容出现乱码。而且服务端接收到的文件大小大于客户端传输的文件大小。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;em&gt;&lt;span&gt;服务端配置&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;绑定配置如下，其他不变&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;170000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;启动服务，报错，可见单独配置&lt;/span&gt;maxBufferSize是不行的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119131448593-1232402639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;修改配置如下，可正常运行：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;服务端&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;170000&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;170000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;客户端配置&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;调用接口&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                ServiceProxy proxy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceProxy();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string s = proxy.GetData(1);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(s);&lt;/span&gt;
                Request r = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Request 
                {
                    Content &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FileStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\CSBMTEMP.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileMode.Open),
                    FileName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CSBMTEMP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                };
                proxy.Upload(r);
                Console.Read();
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;catch (CommunicationException ex)
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
            &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {

            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;异常信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119131624812-1683376486.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先检查文件的大小，发现文件大小没有超过配置的最大值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119131649843-41237122.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将服务端配置按如下修改，也就是增大&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;的值。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;1700000&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;1700000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;运行客户端程序，发现服务端接收到文件为&lt;/span&gt;338K&lt;span&gt;，远大于客户端上传文件大小，&lt;/span&gt;&lt;span&gt;打开文件，看到乱码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119131737281-1575882360.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;解决方法&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将服务端&lt;/span&gt;Upload&lt;span&gt;方法修改一下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;StreamReader sr = new StreamReader(request.Content,Encoding.Default);&lt;/p&gt;
&lt;p&gt;StreamWriter sw = new StreamWriter(&quot;E:\\&quot; + request.FileName + &quot;.txt&quot;, false, Encoding.Default);&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面那两行代码添加编码方式为&lt;/span&gt;Encoding.Default&lt;span&gt;，或者使用&lt;/span&gt;&lt;span&gt;Encoding.GetEncoding(&quot;GB2312&quot;)&lt;/span&gt;&lt;span&gt;这种编码方式。使用后者更好，因为明确地指出编码方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;启动服务，运行客户端上传文件，成功且无乱码。文件大小也和客户端上传的相同。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 maxBufferSize&lt;span&gt;与&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;的设置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面&lt;/span&gt;&lt;span&gt;服务端&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;设置为&lt;/span&gt;&lt;span&gt;1700000&lt;/span&gt;&lt;span&gt;，远大于所传文件大小，那么将其改为&lt;/span&gt;&lt;span&gt;167936&lt;/span&gt;&lt;span&gt;会如何呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改上面两个参数为&lt;/span&gt;167936&lt;span&gt;，运行程序。结果报错：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119131844343-1339895873.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么，难道上传文件的数据会比这个大吗？是的，这只是消息的一部分内容。从客户端本地&lt;/span&gt;CLR&lt;span&gt;类型来看，其传递的参数是一个对象：&lt;/span&gt;Request&lt;span&gt;，它包含了两字段，&lt;/span&gt;Stream&lt;span&gt;类型的&lt;/span&gt;Content&lt;span&gt;和&lt;/span&gt;string&lt;span&gt;类型的&lt;/span&gt;&lt;span&gt;FileName&lt;/span&gt;&lt;span&gt;。但这只是其中一部分原因。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经测试，若&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;设置为大于上传文件的二倍时，上传成功。由于默认采用缓冲处理模式（&lt;/span&gt;&lt;span&gt;TransferMode .Buffered&lt;/span&gt;&lt;span&gt;），缓冲处理是将消息全部缓存下来以后才对消息进行处理，猜想，缓存消息所需空间，加上处理消息也需要空间，那么两者的和就是二倍的传入消息大小。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;若换成流传输模式&lt;/span&gt;(&lt;span&gt;客户端不使用流模式，很奇怪的测试，不过依然通过&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务端配置变为：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端配置不变，即：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端调用接口，服务端报错。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132010312-1488393758.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端配置不变，服务端配置变为：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;170000&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;170000&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端调用接口，正常将文件传输到服务器。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;再次将服务端&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;修改为小于文件长度：&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;150000&lt;/em&gt;&lt;/strong&gt;&lt;span&gt;，调用接口，可正常传输文件，但是只上传了文件的一半左右。继续将&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;调小为&lt;/span&gt;1000000&lt;span&gt;，发现只上传了&lt;/span&gt;&lt;span&gt;8K&lt;/span&gt;&lt;span&gt;左右。结论是：当&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;设置小于消息大小的时候，程序正常运行，但是服务端无法接收客户端上传的全部数据。然而，如何准确地估计消息大小是个难题。最稳妥的办法是将上面那两个参数配置为消息体的最大值的二倍，另外从客户端设置上传消息的大小很多时候也是必要的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;将绑定换成&lt;/span&gt;netTcpBinding&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务端配置&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;NetTcpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;17936&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;17936&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;显然&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;设置小于客户端发送的消息大小&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;采用默认的缓冲机制而并非流机制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端捕获异常：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132141109-1693371337.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上面的异常中看不出是什么原因造成的，不过看下&lt;/span&gt;_remoteStackTraceString&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Server stack trace:&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.StreamConnection.Read(Byte[] buffer, Int32 offset, Int32 size, TimeSpan timeout)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.SessionConnectionReader.Receive(TimeSpan timeout)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.SynchronizedMessageSource.Receive(TimeSpan timeout)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.TransportDuplexSessionChannel.Receive(TimeSpan timeout)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.TransportDuplexSessionChannel.TryReceive(TimeSpan timeout, Message&amp;amp; message)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Dispatcher.DuplexChannelBinder.Request(Message message, TimeSpan timeout)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.ServiceChannel.Call(String action, Boolean oneway, ProxyOperationRuntime operation, Object[] ins, Object[] outs, TimeSpan timeout)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.ServiceChannelProxy.InvokeService(IMethodCallMessage methodCall, ProxyOperationRuntime operation)&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;在&lt;/span&gt; System.ServiceModel.Channels.ServiceChannelProxy.Invoke(IMessage message)&lt;/p&gt;

&lt;p&gt;Exception rethrown at [0]:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上面&lt;/span&gt;StreamConnection.Read&lt;span&gt;，&lt;/span&gt;&lt;span&gt;SessionConnectionReader.Receive&lt;/span&gt;&lt;span&gt;大概猜测是&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;设置引起的，由于套接字连接终止，在服务端无法捕获这类异常。将参数调大就没有这个问题了，数据可正常上传。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;那么采用&lt;/span&gt;netTcpBinding&lt;span&gt;是比较安全的，因为一旦设置的过小，会抛异常而不会出现数据不完整（只上传一部分）的情况。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当数据传输过程中服务关闭或网络中断抛异常：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132215546-699284112.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;貌似与&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;这两个参数设置不正确所抛异常一样，而且&lt;/span&gt;_remoteStackTraceString&lt;span&gt;也与其一样，真是让人迷惑啊！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;绑定配置变换为：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;NetTcpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;79360&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;79360&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端配置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;NetTcpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端调用报错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132323546-1599790576.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改客户端配置为：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;NetTcpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132400281-1315059540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这次是由于&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;这两个参数设置小了的原因。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3 对于字符串传输的限制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;服务端配置：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;220000&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;220000&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;service &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;WCF_Find_Error_Lib.Service&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;endpoint &lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; 
                  binding&lt;/span&gt;&lt;span&gt;=&quot;basicHttpBinding&quot;&lt;/span&gt;&lt;span&gt;
                  contract&lt;/span&gt;&lt;span&gt;=&quot;WCF_Find_Error_Lib.IService&quot;&lt;/span&gt;&lt;span&gt; 
                  bindingConfiguration&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;identity&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dns &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;localhost&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;identity&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;endpoint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;baseAddresses&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;add &lt;/span&gt;&lt;span&gt;baseAddress&lt;/span&gt;&lt;span&gt;=&quot;http://localhost/S&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;baseAddresses&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;services&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端配置：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;system.serviceModel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bindings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;endpoint &lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;=&quot;http://localhost/S&quot;&lt;/span&gt;&lt;span&gt; binding&lt;/span&gt;&lt;span&gt;=&quot;basicHttpBinding&quot;&lt;/span&gt;&lt;span&gt;
          bindingConfiguration&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; contract&lt;/span&gt;&lt;span&gt;=&quot;IService&quot;&lt;/span&gt;&lt;span&gt;
          name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;system.serviceModel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;客户端调用：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ServiceProxy proxy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceProxy();
StreamReader sr &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StreamReader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\CSBMTEMP.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Encoding.Default);
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; str =&lt;span&gt; sr.ReadToEnd();
sr.Close();
proxy.GetString(str);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;运行客户端报错：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132554218-490412979.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;错误消息为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;格式化程序尝试对消息反序列化时引发异常&lt;/span&gt;: &lt;span&gt;对操作“&lt;/span&gt;&lt;span&gt;GetString&lt;/span&gt;&lt;span&gt;”的请求消息正文进行反序列化时出现错误。读取&lt;/span&gt; &lt;span&gt;XML&lt;/span&gt; &lt;span&gt;数据时，超出最大字符串内容长度配额&lt;/span&gt; &lt;span&gt;(8192)&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么看一下传入的字符串大小为&lt;/span&gt;238367&lt;span&gt;个字符，因此修改服务端配置文件，而保持客户端配置不变&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; maxBufferSize&lt;/span&gt;&lt;span&gt;=&quot;220000&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;220000&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;readerQuotas &lt;/span&gt;&lt;span&gt;maxStringContentLength&lt;/span&gt;&lt;span&gt;=&quot;240000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;运行客户端程序，依然报错信息如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132643515-1822421840.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此次是因为服务端&lt;/span&gt;maxBufferSize&lt;span&gt;和&lt;/span&gt;&lt;span&gt;maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;设置小了，将其设置为&lt;/span&gt;&lt;span&gt;270000&lt;/span&gt;&lt;span&gt;，客户端保持不变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端抛异常：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132708937-379475305.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务端参数已经设置的比较大了，但是依然报错，发现客户端没有设置&lt;/span&gt;maxStringContentLength&lt;span&gt;这个参数，更改客户端配置，服务端保持不变：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;readerQuotas &lt;/span&gt;&lt;span&gt;maxStringContentLength&lt;/span&gt;&lt;span&gt;=&quot;240000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;运行客户端，依然报错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024858/201711/1024858-20171119132818249-1028644986.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;发现服务端&lt;/span&gt;maxReceivedMessageSize&lt;span&gt;没有设置，更改客户端配置，服务端保持不变，&lt;/span&gt;&lt;span&gt;至此信息被正确接收。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;binding &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;BasicHttpBinding_IService&quot;&lt;/span&gt;&lt;span&gt; sendTimeout&lt;/span&gt;&lt;span&gt;=&quot;00:00:10&quot;&lt;/span&gt;&lt;span&gt; transferMode&lt;/span&gt;&lt;span&gt;=&quot;Streamed&quot;&lt;/span&gt;&lt;span&gt; maxReceivedMessageSize&lt;/span&gt;&lt;span&gt;=&quot;270000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;readerQuotas &lt;/span&gt;&lt;span&gt;maxStringContentLength&lt;/span&gt;&lt;span&gt;=&quot;240000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;binding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;basicHttpBinding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;通过上述测试，发现：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;当客户端配置不正确或服务端配置不正确时，异常可在客户端捕获，但捕获的异常信息相同，即客户端与服务端因同一类参数配置不正确所引发的异常信息一样，无法通过异常信息分辨出是由于客户端配置不正确还是由于服务端配置不正确引起的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;一般地，对于使用&lt;/span&gt;basicHttpBinding&lt;span&gt;的服务，当由于配置不正确，抛出异常时，可以通过捕获的异常查看是哪个参数配置不正确，但是使用&lt;/span&gt;&lt;span&gt;netTcpBinding&lt;/span&gt;&lt;span&gt;的服务则无法通过客户端捕获的异常分辨是哪个参数配置的不正确。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;客户端与服务端配置不一致时，可正常运行服务，但不一定得到正确的结果。某些资料建议将客户端和服务端配置设置为相同，不失为一种简单的办法，但忽略了配置参数的含义，建议深入理解各个参数的含义，合理配置。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4）&lt;strong&gt;&lt;span&gt;多个参数配置不正确时，抛出的异常信息中会选则性地指出某个参数设置不正确，而不是将所有配置不正确的参数都指出来。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 05:33:00 +0000</pubDate>
<dc:creator>甜橙很酸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hdwgxz/p/7859574.html</dc:identifier>
</item>
</channel>
</rss>