<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用ASP.NET Core支持GraphQL -- 较为原始的方法 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/9691323.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/9691323.html</guid>
<description>&lt;p&gt;下面是GraphQL的定义： &lt;br/&gt;GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。&lt;/p&gt;
&lt;p&gt;GraphQL由Facebook开发，始于2012年，2015年公开。&lt;/p&gt;
&lt;p&gt;GraphQL牛逼之处是它可以让客户端精确的查询它们想要的，不附加额外的东西，这样的话就很容易让客户端随着API的演进去使用。&lt;/p&gt;
&lt;h3&gt;例子&lt;/h3&gt;
&lt;p&gt;下面是一个简单的例子，这是一个GraphQL的查询：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
  person  &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
    name
    email
  &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而这个查询的响应结果是：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
  &lt;span class=&quot;str&quot;&gt;&quot;data&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
    &lt;span class=&quot;str&quot;&gt;&quot;person&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
      &lt;span class=&quot;str&quot;&gt;&quot;name&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;Dave&quot;&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt;
      &lt;span class=&quot;str&quot;&gt;&quot;email&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;331335713@qq.com&quot;&lt;span class=&quot;pln&quot;&gt;
    &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
  &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到响应结果和查询请求的内容结构几乎是完全一样的。如果你需要person其它的信息，例如parents，那么在查询中加上这个属性即可：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
  person  &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
    name
    email
    parents &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
      name
    &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
  &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它的响应会像这样：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
  &lt;span class=&quot;str&quot;&gt;&quot;data&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
    &lt;span class=&quot;str&quot;&gt;&quot;person&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
      &lt;span class=&quot;str&quot;&gt;&quot;name&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;Dave&quot;&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt;
      &lt;span class=&quot;str&quot;&gt;&quot;email&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;331335713@qq.com&quot;&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt;
      &lt;span class=&quot;str&quot;&gt;&quot;parents&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;pun&quot;&gt;[&lt;span class=&quot;pln&quot;&gt;
        &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
          &lt;span class=&quot;str&quot;&gt;&quot;name&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;Nick&quot;&lt;span class=&quot;pln&quot;&gt;
        &lt;span class=&quot;pun&quot;&gt;},&lt;span class=&quot;pln&quot;&gt;
        &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
          &lt;span class=&quot;str&quot;&gt;&quot;name&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;AJ&quot;&lt;span class=&quot;pln&quot;&gt;
        &lt;span class=&quot;pun&quot;&gt;},&lt;span class=&quot;pln&quot;&gt;
        &lt;span class=&quot;pun&quot;&gt;{&lt;span class=&quot;pln&quot;&gt;
          &lt;span class=&quot;str&quot;&gt;&quot;name&quot;&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;str&quot;&gt;&quot;Brian&quot;&lt;span class=&quot;pln&quot;&gt;
        &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
      &lt;span class=&quot;pun&quot;&gt;]&lt;span class=&quot;pln&quot;&gt;
    &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
  &lt;span class=&quot;pun&quot;&gt;}&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;GraphQL的查询通常会被发送到一个特定的GraphQL端点。在这个端点，会处理请求查询并返回GraphQL对象结果。&lt;/p&gt;
&lt;h3&gt;建立项目&lt;/h3&gt;
&lt;p&gt;下面我们就在ASP.NET Core中实现这个功能，首先建立项目： &lt;br/&gt;使用dotnet cli 在命令行输入：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;dotnet &lt;span class=&quot;kwd&quot;&gt;new&lt;span class=&quot;pln&quot;&gt; web &lt;span class=&quot;pun&quot;&gt;--&lt;span class=&quot;pln&quot;&gt;name graph&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样会建立一个ASP.NET Core 的空项目。项目结构如图： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba604df000135e802640215.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;建立Model&lt;/h3&gt;
&lt;p&gt;然后建立一个Person 的Model： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba605510001bf8903750292.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;建立Repository&lt;/h3&gt;
&lt;p&gt;下面建立用于查询Person的Repository，首先是接口： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba605cc0001079e03400286.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后是具体的Repository，里面带有一些写死的数据： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba60788000150aa06860936.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;添加GraphQL库&lt;/h3&gt;
&lt;p&gt;通过dotnet cli添加GraphQL这个库：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;dotnet add &lt;span class=&quot;kwd&quot;&gt;package&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;GraphQL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装成功后，在项目文件里会有显示： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba608150001cf2a04980313.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;建立GraphQL中间件&lt;/h3&gt;
&lt;p&gt;首先我需要一个GraphQL特定的Person类型类，它要包含映射到Person类的字段： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba6101d000148f705130358.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;br/&gt;该类需要继承于ObjectGraphType&amp;lt; Person&amp;gt;。&lt;/p&gt;
&lt;p&gt;然后我还需要一个查询类，它里面包含对GraphQL实现的细节： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba610c1000122ec07690528.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;br/&gt;该类需要继承于 ObjectGraphType。在这里，我把所有请求查询的字段映射到了PersonRepository的调用上。&lt;/p&gt;
&lt;p&gt;最后是中间件： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba61173000150b307900827.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba611940001506d08030206.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;br/&gt;该类的意思就是，当请求地址是&quot;/graphql&quot;开头时，就会尝试读取请求的body。然后建立一个Schema对象，它的query字段的值就是PersonQuery的实例，而PersonQuery的实例又需要PersonRepository作为参数。 &lt;br/&gt;最后建立一个DocumentExecuter来对这个schema进行查询，结果以JSON格式返回。&lt;/p&gt;
&lt;h3&gt;注册Repository，使用中间件&lt;/h3&gt;
&lt;p&gt;别忘了在Startup.cs里注册Repository和在管道里调用我们的中间件： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba6130500015b7706220370.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;


&lt;p&gt;运行ASP.NET Core项目：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;dotnet watch run&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://img.mukewang.com/5ba6134f0001237c06940143.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开POSTMAN，首先按id查询一个Person： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba613f400011a1205730532.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;br/&gt;Cool，没问题。&lt;/p&gt;
&lt;p&gt;再来一个带Parents的查询： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba614470001564705570629.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后再查询所有的Person吧： &lt;br/&gt;&lt;img src=&quot;http://img.mukewang.com/5ba6148b000108b305800863.png&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意这里的查询写的是persons而不是person，这个要和PersonQuery类里面的定义一致。&lt;/p&gt;


&lt;p&gt;这只不过是使用ASP.NET Core支持GraphQL的一个原始手动实现而已。 &lt;br/&gt;.NET Core有很多支持GraphQL的很方便库，例如graphql-dotnet：&lt;a href=&quot;https://github.com/graphql-dotnet/graphql-dotnet&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/graphql-dotnet/graphql-dotnet&lt;/a&gt;。 &lt;br/&gt;实际项目中还是需要使用这些库的。&lt;/p&gt;

</description>
<pubDate>Sat, 22 Sep 2018 23:27:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<og:description>GraphQL简介 下面是GraphQL的定义： GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/9691323.html</dc:identifier>
</item>
<item>
<title>POI解析Excel之应用反射等技术实现动态读取 - WindsJune</title>
<link>http://www.cnblogs.com/wind-june/p/9690743.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wind-june/p/9690743.html</guid>
<description>&lt;h2&gt; 目录树&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;技术选型&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;问题分析&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;技术要点及难点分析&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;源码分析&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;测试用例&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Tip：因为产品提的需求我都开发完了，进行了项目提测；前天老大走过来说：你用spring-boot开发一个解析Excel的jar包.....详细对话如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A：世生，你用spring-boot开发一个解析Excel的jar包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;B：为什么不在原来的项目上进行开发呢？(很纳闷，这个东西不是一般用于前端上传数据的嘛，这是后端层，咋搞这个)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A：因为xxxx这个需求有比较多的数据需要初始化，这个jar是作为一个上线的数据初始化脚本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;B：嗯，好的&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;技术选型&lt;/h2&gt;
&lt;p&gt; 　　&lt;span&gt;毕竟是第一次写解析Excel代码，问了度娘说是有两种方式可以做到。一是利用&lt;strong&gt;wso2的&lt;/strong&gt;&lt;strong&gt;jxl&lt;/strong&gt;解析&lt;strong&gt;，&lt;/strong&gt;二是利用&lt;strong&gt;apache的poi&lt;/strong&gt;解析；我去maven repository官网搜索了这两个jar包，对比了下jml的最新版本是2.6.12竟然是2011.05月更新的，而poi的最新版本是4.0.x是2018.08更新的；个人觉得jml最新版本都是2011.05更新的,相对于apache的poi包来说更不靠谱；不断持续更新的开源项目或者开源jar包不管是bug还是兼容性相对来说是越来越好。所以最终选定用apache大佬的poi进行开发。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;问题分析&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　解析Excel的关键点是在于从Excel表格中读取数据到内存(解析Excel)，然后可能是校验数据、通过业务逻辑分析数据、最终持久化到数据库中；其实这其中最重要的不是解析Excel，而是将解析出的数据持久化到数据库中以备有用之需。而解析Excel的这块功能只能算是一个Util类，不能与业务代码耦合一起；然后我看到很多的Excel解析相关的代码都是在解析数据中混淆业务代码逻辑，其实这些都是不可取的，这会导致解析Excel逻辑与业务逻辑相耦合也就是冗杂、代码重用率低、可扩展性低等问题。因为之前在做项目的时候遇到过一个问题：我负责的模块是一个中间模块(通讯采用Dubbo)，其他系统要依赖我这个接口进行请求的转发可我调用其他系统返回的结果对象却各个都不同，我叫其他系统负责人说要统一调用接口返回的对象，但是其他系统的负责人都不是同一个人执行起来效率太低了，在历经一个星期都无果的情况下我只能撒下自己的杀手锏了；在这种极端条件下最终我不管其他数据的接口返回的对象是什么，我直接用Object接收返回类型，通过反射获取决定请求成功与否的属性值(欣慰的是当时必传属性值倒是一样的)。通过这种方法我可以少些很多的代码（当时其他系统有15+），不然的话每调用不同系统的接口我都需要进行逻辑判断或者是干脆对于调用他们不同的系统我采用不同接口进行转发，但选用这种方法却便利多了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以上问题分析及一个场景的描述很好理解，但是通过Object接收返回信息得这个场景事实上却有所欠佳；返回对象不同的这个问题最好的处理方案就是统一接口，我那个方案是在需求推动但别人无法及时配合的极端条件下使用的，是没办法中的办法，但这也是一个没有办法中的一个最优的处理方案，兼容性比较强。以下我就用图来分析这两种情况的比较：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;1.非动态模式&lt;/strong&gt;：将Excel数据加载到内存与业务代码逻辑混合，数据在解析期间交叉传递。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;弊端&lt;/strong&gt;：每新增一个需要解析的Excel，解析Excel代码块就需要重新开发，代码复用率底下、可扩展性也低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485316/201809/1485316-20180922225520585-1837859525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;2.动态模式&lt;/strong&gt;：将Excel数据加载到内存与业务代码逻辑分开；Excel数据加载到内存之后才将数据传递给业务代码逻辑处理，解析Excel与业务代码之间分开；&lt;strong&gt;优点&lt;/strong&gt;：将解析Excel的这部分代码封装为一个ExcelUtil，代码复用率明显提高，而且解析与业务代码间实行解耦，可扩展性增强。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485316/201809/1485316-20180922225525601-328639097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;技术要点及难点分析&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　要实现动态解析，实现解析与业务代码逻辑相解耦；那么我们不难会想起一个Java的一个关键技术-Reflection(反射原理)，Python、Ruby等是动态语言而理论上Java是一门静态语言，但是Java引入了Reflection技术实现了动态性。反射原理我们都比较熟悉，就是在运行期间动态获取类的所有属性及其方法，可以对这些数据进行相关的操作。以上动态解析Excel的实现就需要用到Java这项的高级技术了，通过这项技术可以实现动态解析、解析与业务逻辑解耦等。为了实现动态解析的目的我应用了Java反射技术，但是在开发的过程我发现反射执行一行数据结束的时候如何保存呢？换句话说就是：解析的时候一行的Excel数据封装后就是一个bean，一个Excel表格就是多个bean 即“beans”；如果我们直接将反射执行后的结果保存至List中，当解析整个Excel结束后我们会发现，整个List里面的对象的值完全一样的？what？这是什么原因导致的呢？这就是类似于：Object obj=new Object()，我们每次解析都只是把 obj 放在List中，List中的每一个对象都是同一个 obj(引用不变，实例也不变)，所以自然也就相同了；因为当一个类执行反射的时候其实它的运行时状态只有一个，也就是类似于只有一个实例，而传统的解析Excel是解析出一条数据就new一个对象进行封装数据，然后将bean存放至List。然而有什么方法能够解决这一类问题呢？那就是Object 的native clone()方法了，clone()这个大佬是比较牛逼的一个人物，在不创建对象的情况下将属性值复制给另一个对象，具体实现需要实现Cloneable接口并重写clone()。而解决这个问题的方式就是在每解析完一行Excel数据的时候，反射调用该对象的clone方法。动态解析&lt;/span&gt;&lt;span&gt;具体实现应用了&lt;span&gt;&lt;em&gt;&lt;strong&gt;Apache POI、 LRUCache(LRU缓存)、Reflection(反射)、java的Clone等技术&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;。如果以上技术没有了解过的朋友可以去自行了解，这里不加赘述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;前提条件&lt;/strong&gt;：因为要实现动态解析，动态设置值，那么我们在反射执行set操作的时候就需要知道相应的setMethod()，那么我们可以在Excel规定第一行就是属性字段，并且字段名称跟bean的名称一样，读取的时候先把第一行的数据放在一个String []数组中。具体实现请参照以下源码。我已经把相关代码打包成Jar，需要的朋友可以自行下载；&lt;/span&gt;&lt;span&gt;Jar包下载&lt;a title=&quot;Jar&quot; href=&quot;https://pan.baidu.com/s/1fKCCh54S3ZtHfv66T2pk2w&quot; target=&quot;_blank&quot;&gt;链接：https://pan.baidu.com/s/1fKCCh54S3ZtHfv66T2pk2w 密码：nur8&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;使用方法&lt;/strong&gt;：新建bean用于存储Excel数据信息，每个属性需要有get、set操作，属性与Excel首行相同，最重要的一点是要&lt;strong&gt;&lt;em&gt;实现Clonesble接口重写clone方法&lt;/em&gt;&lt;/strong&gt;。在new ReadExcelUtil 的时候只需要将对象类型与Excel文件路径传入构造函数即可，然后调用 ReadExcelUtil的getObjectList即可得到解析后的所有对象。至于这个对象你可以用任何的对象，你可以换成Teacher、OrderInfo、UserInfo......但是前面提到的：Excel第一行的属性字段需要与bean的属性字段一致，否则无法调用目标方法，具体可参见ReflectionInitValue的方法。&lt;span&gt;&lt;em&gt;&lt;strong&gt;具体实现请参见：文章末尾的Test类测试。&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt; 源码分析&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;前提条件&lt;/strong&gt;：引入Apache POI 的Maven仓库坐标，我这里使用的是3.25版本的。&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/org.apache.poi/poi &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.15&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;poi-ooxml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.15&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;主要类&lt;/strong&gt;：Common.java、&lt;strong&gt;&lt;span&gt;LRUCache.java&lt;/span&gt;&lt;/strong&gt;、LRUCacheException.java、ResolveFileException.java、&lt;strong&gt;&lt;span&gt;ReadExcelUtil.java、ReflectionInitValue.java、&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;Student、Test&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Common.java：基础常量池，主要用于反射执行Method方法时判断Method的参数类型的常量。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.common;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; :cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; :1.1.0
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * @date :2018年9月20日 下午6:33:54
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * @comments :解析Excel公共类常量类
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Common {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String OFFICE_EXCEL_2003_POSTFIX_xls = &quot;xls&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String OFFICE_EXCEL_2010_POSTFIX_xlsx = &quot;xlsx&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_long =&quot;long&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_boolean =&quot;boolean&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_int =&quot;int&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_float =&quot;float&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_double =&quot;double&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_Long =&quot;class java.lang.Long&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DATA_TYPE_Integer =&quot;class java.lang.Integer&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;&lt;li&gt;&lt;span&gt;LRUCacheException.java；LRU缓存自定义异常类。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.exceptions;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Creater: cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Date: 2018/9/21
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Time: 10:04
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * Description: No Description
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LRUCacheException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt;  Exception{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * 错误码
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String errorCode;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     * 错误描述
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String errorMessage;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LRUCacheException(String errorCode, String errorMessage) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorCode =&lt;span&gt; errorCode;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorMessage =&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LRUCacheException(String message) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(message);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorMessage =&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getErrorCode() {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; errorCode;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setErrorCode(String errorCode) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorCode =&lt;span&gt; errorCode;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getErrorMessage() {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setErrorMessage(String errorMessage) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorMessage =&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;span&gt;ResolveFileException.java；解析Excel自定义异常类。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.exceptions;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * Creater: cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Date: 2018/9/20
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Time: 19:44
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Description: 解析Excel的公共异常类
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ResolveFileException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; RuntimeException{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 错误码
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String errorCode;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * 错误描述
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String errorMessage;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ResolveFileException(String errorCode, String errorMessage) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorCode =&lt;span&gt; errorCode;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorMessage =&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ResolveFileException(String message) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(message);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorMessage =&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getErrorCode() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; errorCode;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setErrorCode(String errorCode) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorCode =&lt;span&gt; errorCode;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getErrorMessage() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setErrorMessage(String errorMessage) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.errorMessage =&lt;span&gt; errorMessage;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;&lt;li&gt;&lt;span&gt;LRUCache.java：LRU缓存池，主要用于不同线程反射获取的Methods，减少相同线程反射执行次数，减轻应用的负载、提高执行效率。我这里是基于LinkedHashMap实现的LRU缓存，你也可以用数组或者其他方式实现该算法。以下代码逻辑如果不能理解的可以先去了解LinkedHashSet的源码。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.common;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.exceptions.LRUCacheException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedHashMap;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Creater: cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * Date: 2018/9/20
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * Time: 19:44
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * Description: LinkedHashMap实现LRU缓存不同线程反射获取的Method方法
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LRUCache {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;  &lt;span&gt;static&lt;/span&gt;  &lt;span&gt;final&lt;/span&gt; Logger LOGGER=LoggerFactory.getLogger(LRUCache.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓存容量&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; cacheSize = 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;Integer,Method[]&amp;gt; cacheMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;Integer, Method[]&amp;gt;((&lt;span&gt;int&lt;/span&gt;) Math.ceil(cacheSize / 0.75f) + 1, 0.75f, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; removeEldestEntry(Map.Entry&amp;lt;Integer,Method[]&amp;gt;&lt;span&gt; eldest){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;  size()&amp;gt;&lt;span&gt; cacheSize;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;     * 设置缓存
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; methods
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; boolean
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; set (Integer key,Method [] methods) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; LRUCacheException {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;               cacheMap.put(key,methods);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e ){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;               &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; LRUCacheException(&quot;Set LRU缓存异常！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;     * 获取缓存的Method
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; Method
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Method[] get(Integer key) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; LRUCacheException {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         Method[] methods=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             methods=&lt;span&gt;cacheMap.get(key);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e ){
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; LRUCacheException(&quot;Get LRU缓存异常！{}&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; methods;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;&lt;li&gt;&lt;span&gt;ReadExcelUtil.java；解析Excel数据工具类(将Excel加载到内存)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.resolver;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.common.Common;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.exceptions.ResolveFileException;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFCell;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFRow;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFSheet;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFCell;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFRow;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFSheet;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.xssf.usermodel.XSSFWorkbook;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationTargetException;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; :cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; :1.1.0
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt; * @date :2018年9月20日 下午6:13:43
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt; * @comments :
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReadExcelUtil {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(ReadExcelUtil.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;  Map&amp;lt;Integer,String []&amp;gt; fieldsMap=&lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;Object&amp;gt; objectsList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Object object=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;  String path =&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;Object&amp;gt;&lt;span&gt; getObjectsList() {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.objectsList;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; ReadExcelUtil(Object object,String path) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, IOException {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.object=&lt;span&gt;object;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.path=&lt;span&gt;path;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        readExcel();
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;     * 添加Object到List中
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; object
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; addListObject(Object object){
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; isSucceed=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.objectsList.add(object);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  isSucceed;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;     * 读取excel,判断是xls结尾(2010之前)；还是xlsx结尾(2010以后)的Excel
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; readExcel() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isEmpty(path)) {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 截取后缀名，判断是xls还是xlsx&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             String postfix = path.substring(path.lastIndexOf(&quot;.&quot;) + 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;StringUtils.isEmpty(postfix)) {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Common.OFFICE_EXCEL_2003_POSTFIX_xls.equals(postfix)) {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; readXls();
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Common.OFFICE_EXCEL_2010_POSTFIX_xlsx.equals(postfix)) {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; readXlsx();
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 LOGGER.error(&quot;文件后缀名有误！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;文件后缀名有误！&quot; + &quot;[&quot; + path + &quot;]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;     * 读取xls(2010)之后的Excel
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;  &lt;span&gt;boolean&lt;/span&gt; readXlsx() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         File file = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(path);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         InputStream is = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(file);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         XSSFWorkbook xssfWorkbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XSSFWorkbook(is);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历sheet页&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; numSheet = 0; numSheet &amp;lt; xssfWorkbook.getNumberOfSheets(); numSheet++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             XSSFSheet xssfSheet =&lt;span&gt; xssfWorkbook.getSheetAt(numSheet);
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             String [] fields=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (xssfSheet == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环行&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; rowNum = 0; rowNum &amp;lt;= xssfSheet.getLastRowNum(); rowNum++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 XSSFRow xssfRow =&lt;span&gt; xssfSheet.getRow(rowNum);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; cloumns=&lt;span&gt;xssfRow.getLastCellNum();
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; i=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一行的所有属性&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (rowNum == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                     fields=&lt;span&gt;getFields(xssfRow,cloumns);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;                    fieldsMap.put(numSheet,fields);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历数据,反射set值&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (i&amp;lt;&lt;span&gt;cloumns){
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                     XSSFCell field=&lt;span&gt;xssfRow.getCell(i);
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                     String value=&lt;span&gt;getValue(field);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;                        ReflectionInitValue.setValue(object,fields[i],value);
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                     }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e ){
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ResolveFileException(e.getMessage());
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                     i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过反射执行clone复制对象&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;                 Object result=ReflectionInitValue.invokeClone(object,&quot;clone&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.addListObject(result);
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(object.toString());&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; 
&lt;span&gt;140&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;     * 读取xls(2010)之前的Excel
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IOException
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; readXls() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, ResolveFileException {
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;         InputStream is = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(path);
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;         HSSFWorkbook hssfWorkbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HSSFWorkbook(is);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历sheet页&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; numSheet = 0; numSheet &amp;lt; hssfWorkbook.getNumberOfSheets(); numSheet++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;             HSSFSheet hssfSheet =&lt;span&gt; hssfWorkbook.getSheetAt(numSheet);
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;             String[] fields = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (hssfSheet == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环行Row&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; rowNum = 0; rowNum &amp;lt;= hssfSheet.getLastRowNum(); rowNum++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;                 HSSFRow hssfRow =&lt;span&gt; hssfSheet.getRow(rowNum);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; cloumns=&lt;span&gt;hssfRow.getLastCellNum();
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; i=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一行的所有属性&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (rowNum == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取属性字段&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;                     fields=&lt;span&gt;getFields(hssfRow,cloumns);
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;                    fieldsMap.put(numSheet,fields);
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历数据,反射set值&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (i&amp;lt;&lt;span&gt;cloumns){
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;                     HSSFCell field=&lt;span&gt;hssfRow.getCell(i);
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;                     String value=&lt;span&gt;getValue(field);
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;                        ReflectionInitValue.setValue(object,fields[i],value);
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;                     }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e ){
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ResolveFileException(e.getMessage());
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;                     i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过反射执行clone复制对象&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;                 Object result=ReflectionInitValue.invokeClone(object,&quot;clone&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.addListObject(result);
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; 
&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt; &lt;span&gt;     * xlsx -根据数据类型，获取单元格的值
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; xssfRow
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;     @SuppressWarnings({ &quot;static-access&quot;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String getValue(XSSFCell xssfRow) {
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;         String value=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (xssfRow.getCellType() ==&lt;span&gt; xssfRow.CELL_TYPE_BOOLEAN) {
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回布尔类型的值&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;                 value=String.valueOf(xssfRow.getBooleanCellValue()).replace(&quot; &quot;,&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (xssfRow.getCellType() ==&lt;span&gt; xssfRow.CELL_TYPE_NUMERIC) {
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回数值类型的值&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;                 value= String.valueOf(xssfRow.getNumericCellValue()).replace(&quot; &quot;,&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回字符串类型的值&lt;/span&gt;
&lt;span&gt;204&lt;/span&gt;                 value= String.valueOf(xssfRow.getStringCellValue()).replace(&quot; &quot;,&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单元格为空，不处理&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;             value=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;             LOGGER.error(&quot;单元格为空！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; 
&lt;span&gt;214&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt; &lt;span&gt;     * xls-根据数据类型，获取单元格的值
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; hssfCell
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt;     @SuppressWarnings({ &quot;static-access&quot;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String getValue(HSSFCell hssfCell) {
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;         String value=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (hssfCell.getCellType() ==&lt;span&gt; hssfCell.CELL_TYPE_BOOLEAN) {
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回布尔类型的值&lt;/span&gt;
&lt;span&gt;225&lt;/span&gt;                 value=String.valueOf(hssfCell.getBooleanCellValue()).replaceAll(&quot; &quot;,&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (hssfCell.getCellType() ==&lt;span&gt; hssfCell.CELL_TYPE_NUMERIC) {
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回数值类型的值&lt;/span&gt;
&lt;span&gt;228&lt;/span&gt;                 value=String.valueOf(hssfCell.getNumericCellValue()).replaceAll(&quot; &quot;,&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回字符串类型的值&lt;/span&gt;
&lt;span&gt;231&lt;/span&gt;                 value=String.valueOf(hssfCell.getStringCellValue()).replaceAll(&quot; &quot;,&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单元格为空，不处理&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt;             value=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;             LOGGER.error(&quot;单元格为空！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; 
&lt;span&gt;241&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;242&lt;/span&gt; &lt;span&gt;     * xls Excel文件类型获取属性（2010之前）
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; cloumns
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String[]
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;246&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;  &lt;span&gt;static&lt;/span&gt; String[] getFields (HSSFRow hssfRow,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; cloumns){
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;         String [] fields=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; String[cloumns];
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (i&amp;lt;&lt;span&gt;cloumns){
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;                 HSSFCell field=&lt;span&gt;hssfRow.getCell(i);
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;                 String value=&lt;span&gt;getValue(field);
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;                 fields[i]=&lt;span&gt;value.trim();
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;                 i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;         }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e){
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;获取属性集失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  fields;
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; 
&lt;span&gt;262&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;263&lt;/span&gt; &lt;span&gt;     * xlsx Excel文件类型获取属性（2010之后）
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; cloumns
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String[]
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;267&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;  &lt;span&gt;static&lt;/span&gt; String[] getFields(XSSFRow xssfRow,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; cloumns){
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;         String [] fields=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; String[cloumns];
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (i&amp;lt;&lt;span&gt;cloumns){
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt;                 XSSFCell field=&lt;span&gt;xssfRow.getCell(i);
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt;                 String value=&lt;span&gt;getValue(field);
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt;                 fields[i]=&lt;span&gt;value.trim();
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt;                 i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt;         }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e ){
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;获取属性集失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  fields;
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt; 
&lt;span&gt;283&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;ReflectionInitValue.java；&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.resolver;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.common.Common;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.common.LRUCache;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.exceptions.LRUCacheException;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.exceptions.ResolveFileException;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationTargetException;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Type;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt; * Creater: cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt; * Date: 2018/9/21
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt; * Time: 9:54
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt; * Description: No Description
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ReflectionInitValue {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; threadHashCodeKey=&lt;span&gt;Thread.currentThread().toString().hashCode();
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;     * 通过反射动态将Excel读取的信息设置到对应的bean中
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; object-存储对象bean
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key-属性参数名
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value-属性值
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setValue(Object object, String key, String value) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; LRUCacheException {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         String methodName = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         String paramType = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         Method[] methods = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (LRUCache.get(threadHashCodeKey) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             Class&amp;lt;?&amp;gt; clazz =&lt;span&gt; object.getClass();
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             methods =&lt;span&gt; clazz.getDeclaredMethods();
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;            LRUCache.set(threadHashCodeKey, methods);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             methods =&lt;span&gt; LRUCache.get(threadHashCodeKey);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Method method : methods) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             methodName =&lt;span&gt; method.getName();
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (methodName.startsWith(&quot;set&quot;) &amp;amp;&amp;amp; methodName.toLowerCase().equals(&quot;set&quot; +&lt;span&gt; key.toLowerCase())) {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;                 Type[] types =&lt;span&gt; method.getGenericParameterTypes();
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Type type : types) {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;                     paramType =&lt;span&gt; type.toString();
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据参数类型转化value，并进行set操作&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;                     excuteInvokeSetvalue(object, method, paramType, value, 0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该属性已经执行setValue操作，无需循环&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;     * 初始化对象bean
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; object
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; initBeans(Object object) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ResolveFileException, LRUCacheException {
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Class&amp;lt;?&amp;gt; clazz = object.getClass();&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;         String methodName = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         String paramType = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         Method[] methods =&lt;span&gt; LRUCache.get(threadHashCodeKey);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Method method : methods) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 methodName =&lt;span&gt; method.getName();
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (methodName.startsWith(&quot;set&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                     Type[] types =&lt;span&gt; method.getGenericParameterTypes();
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Type type : types) {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                         paramType =&lt;span&gt; type.getClass().getName();
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据参数类型转化value，并进行set初始化属性值&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;                     excuteInvokeSetvalue(object, method, paramType, &quot;&quot;, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;初始化bean错误！Method:[ &quot; + methodName + &quot; ]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;     * 根据参数类型转化value，并进行set操作
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; object-存储对象bean
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; method-执行的set对应属性的方法
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; paramType-属性参数类型
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value-属性值
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; operationType-操作类型(0-设置属性，1-初始化bean)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; excuteInvokeSetvalue(Object object, Method method, String paramType, String value,
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                                              &lt;span&gt;int&lt;/span&gt;&lt;span&gt; operationType){
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (paramType) {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_long: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性long&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.contains(&quot;.&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                         value=value.substring(0,value.lastIndexOf(&quot;.&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                     Long temp = Long.valueOf(operationType == 0 &amp;amp;&amp;amp; value !=&lt;span&gt;null&lt;/span&gt; ? value : &quot;0&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_boolean: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性boolean&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;                     &lt;span&gt;boolean&lt;/span&gt; temp = (operationType == 0 ? (Boolean.valueOf(value != &lt;span&gt;null&lt;/span&gt; ? value:&quot;false&quot;)) : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_int: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性int&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.contains(&quot;.&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                         value=value.substring(0,value.lastIndexOf(&quot;.&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; temp = Integer.valueOf(operationType == 0 &amp;amp;&amp;amp; value!=&lt;span&gt;null&lt;/span&gt; ? value : &quot;0&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_float: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性float&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.contains(&quot;.&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                         value=value.substring(0,value.lastIndexOf(&quot;.&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                     &lt;span&gt;float&lt;/span&gt; temp = Float.valueOf(operationType == 0 &amp;amp;&amp;amp; value !=&lt;span&gt;null&lt;/span&gt; ? value : &quot;0&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_double: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性double&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;                     &lt;span&gt;double&lt;/span&gt; temp = Double.valueOf(operationType == 0 &amp;amp;&amp;amp; value !=&lt;span&gt;null&lt;/span&gt; ? value : &quot;0&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_Long: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性Long&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.contains(&quot;.&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                         value=value.substring(0,value.lastIndexOf(&quot;.&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                     Long temp = Long.valueOf(operationType == 0 &amp;amp;&amp;amp; value!=&lt;span&gt;null&lt;/span&gt; ? value : &quot;0&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; Common.DATA_TYPE_Integer: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性Integer&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.contains(&quot;.&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                         value=value.substring(0,value.lastIndexOf(&quot;.&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; temp = Integer.valueOf(operationType == 0 &amp;amp;&amp;amp; value!=&lt;span&gt;null&lt;/span&gt; ? value : &quot;0&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;                    method.invoke(object, temp);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数属性String&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value.contains(&quot;.&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;                         value=value.substring(0,value.lastIndexOf(&quot;.&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;                     method.invoke(object, operationType == 0 ? value : &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; 
&lt;span&gt;157&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( IllegalAccessException e ) {
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;invoke方法错误！[Method:&quot; + method.getName() + &quot; [value:&quot; + value + &quot; ]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( InvocationTargetException e ) {
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;invoke方法错误！[Method:&quot; + method.getName() + &quot; [value:&quot; + value + &quot; ]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;字段属性错误！[Method:&quot; + method.getName() + &quot; [value:&quot; + value + &quot; ]&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; 
&lt;span&gt;165&lt;/span&gt; 
&lt;span&gt;166&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; 
&lt;span&gt;168&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; object
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; methodName
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; ResolveFileException
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Object invokeClone (Object object,String methodName){
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;         Class clazz=&lt;span&gt;object.getClass();
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;             Method method=&lt;span&gt;clazz.getMethod(methodName);
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             Object result=&lt;span&gt;method.invoke(object);
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  result;
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;         }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; ( Exception e ){
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ResolveFileException(&quot;解析Excel，反射执行set操作异常！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; 
&lt;span&gt;185&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; 
&lt;span&gt;187&lt;/span&gt; 
&lt;span&gt;188&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;span&gt;Student.java；用于存储数据信息得bean。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.hdbs.beans;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; :WindsJune/博客园：WindsJune
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; :1.1.0
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt; * @date :2018年9月20日 下午6:05:57
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt; * @comments :
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Student &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Cloneable{
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;     * id
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;     * 学号
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String no;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;     * 姓名
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;     * 学院
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String age;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;     * 成绩
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; score;
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;     * 地址
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String adress;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;Student&amp;gt; studentsList=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; 
&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getNo() {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; no;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setNo(String no) {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.no =&lt;span&gt; no;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAge() {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(String age) {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;&lt;span&gt; getScore() {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; score;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setScore(&lt;span&gt;float&lt;/span&gt;&lt;span&gt; score) {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.score =&lt;span&gt; score;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getAdress() {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; adress;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAdress(String adress) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.adress =&lt;span&gt; adress;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt;&lt;span&gt; getStudentsList() {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentsList;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Object clone() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; CloneNotSupportedException{
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.clone();
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Student{&quot; +
&lt;span&gt;102&lt;/span&gt;                 &quot;id=&quot; + id +
&lt;span&gt;103&lt;/span&gt;                 &quot;, no='&quot; + no + '\'' +
&lt;span&gt;104&lt;/span&gt;                 &quot;, name='&quot; + name + '\'' +
&lt;span&gt;105&lt;/span&gt;                 &quot;, age='&quot; + age + '\'' +
&lt;span&gt;106&lt;/span&gt;                 &quot;, score=&quot; + score +
&lt;span&gt;107&lt;/span&gt;                 &quot;, adress='&quot; + adress + '\'' +
&lt;span&gt;108&lt;/span&gt;                 '}'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Test.java&lt;/strong&gt;；测试方法，在new ReadExcelUtil 的时候只需要将对象类型与Excel文件路径传入构造函数即可，然后调用 ReadExcelUtil的getObjectList即可得到解析后的所有对象。至于这个对象你可以用任何的对象，你可以换成Teacher、OrderInfo、UserInfo......但是前面提到的：Excel第一行的属性字段需要与bean的属性字段一致，否则无法调用目标方法，具体可参见ReflectionInitValue的方法。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; hello;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.beans.Student;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.hdbs.resolver.ReadExcelUtil;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0.0
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt;  cnblogs-WindsJune
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @date    2018年9月23日 上午1:16:34
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         Student student=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         String filePath=&quot;E:/test.xlsx&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             ReadExcelUtil readExcelUtil=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReadExcelUtil(student,filePath);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             List&amp;lt;Object&amp;gt; list=&lt;span&gt;readExcelUtil.getObjectsList();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Object object:list){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 Student test=&lt;span&gt;(Student) object;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                System.out.println(test.toString());
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;表格规范：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485316/201809/1485316-20180923013241744-1236227958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;执行结果：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485316/201809/1485316-20180923013515027-998474696.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img id=&quot;uploading_image_44940&quot; src=&quot;https://common.cnblogs.com/images/loading.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;uploading_image_45591&quot; src=&quot;https://common.cnblogs.com/images/loading.gif&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 22 Sep 2018 18:13:00 +0000</pubDate>
<dc:creator>WindsJune</dc:creator>
<og:description>要实现Excel动态解析，实现解析与业务代码逻辑相解耦；那么我们不难会想起一个Java的一个关键技术-Reflection(反射原理)，Python、Ruby等是动态语言而理论上Java是一门静态语言</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wind-june/p/9690743.html</dc:identifier>
</item>
<item>
<title>java实现任务调度 - 冰魄秋雨</title>
<link>http://www.cnblogs.com/skyice/p/9691736.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyice/p/9691736.html</guid>
<description>&lt;p&gt;最近的一个小项目是做一个简单的数据仓库，需要将其他数据库的数据抽取出来，并通过而出抽取成页面需要的数据，以空间换时间的方式，让后端报表查询更快。&lt;br/&gt;因为在抽取的过程中，有一定的先后顺序，需要做一个任务调度器，某一优先级的会先执行，然后会进入下一个优先级的队列任务中。&lt;br/&gt;先定义了一个Map的集合，key是优先级，value是任务的集合，某一个优先级内的任务是并发执行的，而不同优先级是串行执行的，前一个优先级执行完之后，后面的才会执行。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ConcurrentHashMap&amp;lt;Integer/* 优先级. */, List&amp;lt;BaseTask&amp;gt;/* 任务集合. */&amp;gt; tasks = new ConcurrentHashMap&amp;lt;&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个调度管理有一个演进的过程，我先说第一个，这个是比较好理解的。&lt;br/&gt;第一个版本：&lt;br/&gt;首先对tasks集合中的key进行一个排序，我定义的是数字越小就有限执行，则进行遍历key值，并取出某个优先级的任务队列，执行任务队列的任务。任务的执行交给线程池去执行，在遍历内部，需要不断的检查这个队列中的任务是否都执行了，没有则一直等待否则进入到下个队列，任务执行的时候可能会抛出异常，但是不管任务是否异常，都将任务状态设置已执行。&lt;br/&gt;下面是其核心代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void run() {
    //对key值进行排序
    Enumeration&amp;lt;Integer&amp;gt; keys = tasks.keys();
    List&amp;lt;Integer&amp;gt; prioritys = new ArrayList&amp;lt;&amp;gt;();
    while (keys.hasMoreElements()) {
      prioritys.add(keys.nextElement());
    }
    Collections.sort(prioritys);//升序
    //对key进行遍历，执行某个某个优先级的任务队列
    for (Integer priority : prioritys) {
      List&amp;lt;BaseTask&amp;gt; taskList = tasks.get(priority);
      if (taskList.isEmpty()) {
        continue;
      }
      logger.info(&quot;execute priority {} task &quot;, taskList.get(0).priority);
      for (BaseTask task : taskList) {
        executor.execute(() -&amp;gt; {
          try {
            task.doTask();
          } catch (Exception e) {
            e.printStackTrace();
          }
        });//线程中执行任务
      }
      while (true) {//等待所有线程都执行完成之后执行下一个任务队列
        boolean finish = true;
        for (BaseTask t : taskList) {
          if (!t.finish) {
            finish = false;
          }
        }
        if (finish) {//当前任务都执行完毕
          break;
        }
        Misc.sleep(1000);//Thread.sleep(1000)
      }
      Misc.sleep(1000);
    }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关键代码很好理解，在任务执行之前，需要对所有任务都初始化，初始化的时候给出每个任务的优先级和任务名称，任务抽象类如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public abstract class BaseTask {
  public String taskName;//任务名称
  public Integer priority; //优先级
  public boolean finish; //任务完成？
  /**
   * 执行的任务
   */
  public abstract void doTask(Date date) throws Exception;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一个版本的思路很简单。&lt;br/&gt;第二个版本稍微有一点点复杂。这里主要介绍该版本的内容，后续将代码的链接附上。&lt;br/&gt;程序是由SpringBoot搭建起来的，定时器是Spring内置的轻量级的Quartz，使用Aop方式拦截异常，使用注解的方式在任务初始化时设置任务的初始变量。使用EventBus解耦程序，其中程序简单实现邮件发送功能(该功能还需要自己配置参数)，以上这些至少需要简单的了解一下。&lt;br/&gt;程序的思路：在整个队列执行过程中会有多个管道，某个队列上的管道任务执行完成，可以直接进行到下一个队列中执行，也设置了等待某一个队列上的所有任务都执行完成才执行当前任务。在某个队列任务中会标识某些任务是一队的，其他的为另一队，当这一队任务执行完成，就可以到下一个队列中去，不需要等待另一队。&lt;br/&gt;这里会先初始化每个队列的每个队的条件，这个条件就是每个队的任务数，执行完成减1，当为0时，就进入下一个队列中。&lt;br/&gt;分四个步骤进行完成：&lt;br/&gt;1.bean的初始化&lt;br/&gt;2.条件的设置&lt;br/&gt;3.任务的执行&lt;br/&gt;4.任务异常和任务执行完成之后通知检查是否执行下一个队列的任务&lt;/p&gt;
&lt;h4 id=&quot;bean的初始化&quot;&gt;1.bean的初始化&lt;/h4&gt;
&lt;p&gt;1.创建注解类&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Documented
public @interface TaskAnnotation {

  int priority() default 0;//优先级
  String taskName() default &quot;&quot;;//任务名称
  TaskQueueEnum[] queueName() default {};//队列名称
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.实现BeanPostProcessor，该接口是中有两个方法postProcessBeforeInitialization和postProcessAfterInitialization，分别是bean初始化之前和bean初始化之后做的事情。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    Annotation[] annotations = bean.getClass().getAnnotations();//获取类上的注解
    if (ArrayUtils.isEmpty(annotations)) {//注解为空时直接返回(不能返回空，否则bean不会被加载)
        return bean;
    }
    for (Annotation annotation : annotations) {
        if (annotation.annotationType().equals(TaskAnnotation.class)) {
          TaskAnnotation taskAnnotation = (TaskAnnotation) annotation;//强转
           try {
            Field[] fields = target.getClass().getFields();//需要通过反射将值进行修改，下面的操作仅仅是对象的引用
            if (!ArrayUtils.isEmpty(fields)) {
              for (Field f : fields) {
                f.setAccessible(true);
                if (f.getName().equals(&quot;priority&quot;)) {
                  f.set(target, taskAnnotation.priority());
                }
            }
          }
     }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面需要注意的一点是需要通过反射的机制给bean设置值，不能直接调用bean的方式set值，否则bean的值是空的。&lt;br/&gt;上面的代码通过实现BeanPostProcessor后置处理器，处理任务上的注解，完成对任务的初始化的。&lt;/p&gt;
&lt;h4 id=&quot;条件的初始化&quot;&gt;2.条件的初始化&lt;/h4&gt;
&lt;p&gt;创建条件类，提供初始化的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public abstract class BaseTask {

  public int nextPriority;//子级节点的优先级

  public String taskName;//任务名称

  public Integer priority; //优先级

  public String queueName;//队列名称

  public boolean finish; //任务完成？

  public boolean allExecute;

  /**
   * 执行的任务
   */
  public abstract void doTask(Date date) throws Exception;

    //任务完成之后，通过eventBus发送通知，是否需要执行下一个队列
  public void notifyExecuteTaskMsg(EventBus eventBus, Date date) {
    EventNotifyExecuteTaskMsg msg = new EventNotifyExecuteTaskMsg();
    msg.setDate(date);
    msg.setNextPriority(nextPriority);
    msg.setQueueName(queueName);
    msg.setPriority(priority);
    msg.setTaskName(taskName);
    eventBus.post(msg);
  }
}

public class TaskExecuteCondition {

  private ConcurrentHashMap&amp;lt;String, AtomicInteger&amp;gt; executeMap = new ConcurrentHashMap&amp;lt;&amp;gt;();

  /**
   * 初始化，每个队列进行分组，每个组的任务数量放入map集合中.
   */
  public void init(ConcurrentHashMap&amp;lt;Integer, List&amp;lt;BaseTask&amp;gt;&amp;gt; tasks) {
    Enumeration&amp;lt;Integer&amp;gt; keys = tasks.keys();
    List&amp;lt;Integer&amp;gt; prioritys = new ArrayList&amp;lt;&amp;gt;();
    while (keys.hasMoreElements()) {
      prioritys.add(keys.nextElement());
    }
    Collections.sort(prioritys);//升序
    for (Integer priority : prioritys) {
      List&amp;lt;BaseTask&amp;gt; list = tasks.get(priority);
      if (list.isEmpty()) {
        continue;
      }
      //对每个队列进行分组
      Map&amp;lt;String, List&amp;lt;BaseTask&amp;gt;&amp;gt; collect = list.stream()
          .collect(Collectors.groupingBy(x -&amp;gt; x.queueName, Collectors.toList()));
      for (Entry&amp;lt;String, List&amp;lt;BaseTask&amp;gt;&amp;gt; entry : collect.entrySet()) {
        for (BaseTask task : entry.getValue()) {
          addCondition(task.priority, task.queueName);
        }
      }
    }
  }

  /**
   * 执行任务完成，条件减1
   */
  public boolean executeTask(Integer priority, String queueName) {
    String name = this.getQueue(priority, queueName);
    AtomicInteger count = executeMap.get(name);
    int sum = count.decrementAndGet();
    if (sum == 0) {
      return true;
    }
    return false;
  }

  /**
   * 对个某个队列的条件
   */
  public int getCondition(Integer priority, String queueName) {
    String name = this.getQueue(priority, queueName);
    return executeMap.get(name).get();
  }

  private void addCondition(Integer priority, String queueName) {
    String name = this.getQueue(priority, queueName);
    AtomicInteger count = executeMap.get(name);
    if (count == null) {
      count = new AtomicInteger(0);
      executeMap.put(name, count);
    }
    count.incrementAndGet();
  }

  private void addCondition(Integer priority, String queueName, int sum) {
    String name = this.getQueue(priority, queueName);
    AtomicInteger count = executeMap.get(name);
    if (count == null) {
      count = new AtomicInteger(sum);
      executeMap.put(name, count);
    } else {
      count.set(sum);
    }
  }


  private String getQueue(Integer priority, String queueName) {
    return priority + queueName;
  }

  /**
   * 清除队列
   */
  public void clear() {
    this.executeMap.clear();
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;任务的执行&quot;&gt;3.任务的执行&lt;/h4&gt;
&lt;p&gt;任务执行类提供run方法，执行第一个队列，并提供获取下一个队列优先级方法，执行某个队列某个组的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class ScheduleTask {
  private static final Logger logger = LoggerFactory.getLogger(ScheduleTask.class);
  
  public ConcurrentHashMap&amp;lt;Integer/* 优先级. */, List&amp;lt;BaseTask&amp;gt;/* 任务集合. */&amp;gt; tasks = new ConcurrentHashMap&amp;lt;&amp;gt;();

  @Autowired
  private ThreadPoolTaskExecutor executor;//线程池
    //任务会先执行第一队列的任务.
  public void run(Date date) {
    Enumeration&amp;lt;Integer&amp;gt; keys = tasks.keys();
    List&amp;lt;Integer&amp;gt; prioritys = new ArrayList&amp;lt;&amp;gt;();
    while (keys.hasMoreElements()) {
      prioritys.add(keys.nextElement());
    }
    Collections.sort(prioritys);//升序
    Integer priority = prioritys.get(0);
    executeTask(priority, date);//执行第一行的任务.
  }
    //获取下一个队列的优先级
  public Integer nextPriority(Integer priority) {
    Enumeration&amp;lt;Integer&amp;gt; keys = tasks.keys();
    List&amp;lt;Integer&amp;gt; prioritys = new ArrayList&amp;lt;&amp;gt;();
    while (keys.hasMoreElements()) {
      prioritys.add(keys.nextElement());
    }
    Collections.sort(prioritys);//升序
    for (Integer pri : prioritys) {
      if (priority &amp;lt; pri) {
        return pri;
      }
    }
    return null;//没有下一个队列
  }

  public void executeTask(Integer priority) {
    List&amp;lt;BaseTask&amp;gt; list = tasks.get(priority);
    if (list.isEmpty()) {
      return;
    }
    for (BaseTask task : list) {
      execute(task);
    }
  }
 //执行某个队列的某个组
  public void executeTask(Integer priority, String queueName) {
    List&amp;lt;BaseTask&amp;gt; list = this.tasks.get(priority);
    list = list.stream().filter(task -&amp;gt; queueName.equals(task.queueName))
        .collect(Collectors.toList());
    if (list.isEmpty()) {
      return;
    }
    for (BaseTask task : list) {
      execute(task);
    }
  }

  public void execute(BaseTask task) {
    executor.execute(() -&amp;gt; {
      try {
        task.doTask(date);//
      } catch (Exception e) {//异常处理已经Aop拦截处理
      }
    });//线程中执行任务
  }

  /**
   * 增加任务
   */
  public void addTask(BaseTask task) {
    List&amp;lt;BaseTask&amp;gt; baseTasks = tasks.get(task.priority);
    if (baseTasks == null) {
      baseTasks = new ArrayList&amp;lt;&amp;gt;();
      List&amp;lt;BaseTask&amp;gt; putIfAbsent = tasks.putIfAbsent(task.priority, baseTasks);
      if (putIfAbsent != null) {
        baseTasks = putIfAbsent;
      }
    }
    baseTasks.add(task);
  }

  /**
   * 将任务结束标识重新设置
   */
  public void finishTask() {
    tasks.forEach((key, value) -&amp;gt; {
      for (BaseTask task : value) {
        task.finish = false;
      }
    });
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;任务异常和任务执行完成之后通知检查是否执行下一个队列的任务&quot;&gt;4.任务异常和任务执行完成之后通知检查是否执行下一个队列的任务&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;public class EventNotifyExecuteTaskListener {
  private static final Logger logger = LoggerFactory .getLogger(EventNotifyExecuteTaskListener.class);
  @Autowired
  private ScheduleTask scheduleTask;

  @Autowired
  private TaskExecuteCondition condition;

  @Subscribe
  public void executeTask(EventNotifyExecuteTaskMsg msg) {
  //当前队列的某组内容是否都执行完成
    boolean success = condition.executeTask(msg.getPriority(), msg.getQueueName());
    if (success) {
      Integer nextPriority = scheduleTask.nextPriority(msg.getPriority());
      if (nextPriority != null) {
        scheduleTask.executeTask(nextPriority, msg.getQueueName(), msg.getDate());//执行下一个队列
      } else {//执行完成，重置任务标识
        scheduleTask.finishTask();
        logger.info(&quot;CoreTask end!&quot;);
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;整个思路介绍到这里，那么接下来是整个项目中出现的一些问题&lt;br/&gt;1.BeanPostProcessor与Aop一起使用时，postProcessAfterInitialization调用之后获取的bean分为不同的了，一个是jdk原生实体对象，一种是Aop注解下的类会被cglib代理，生成带有后缀的对象，如果通过这个对象时反射获取类的注解，字段和方法，就获取不到，在代码中，需要将其转化一下，将cgLib代理之后的类转化为不带后缀的对象。&lt;br/&gt;2.postProcessAfterInitialization的参数bean不能直接设置值，就是如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; TaskAnnotation taskAnnotation = (TaskAnnotation) annotation;//强转
 BaseTask baseTask = (BaseTask) bean;//强转
 baseTask.priority = taskAnnotation.priority();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在使用对象时，其中对象的字段时为空的，并需要通过反射的方式去设置字段的值。&lt;br/&gt;上面仅仅只是个人的想法，如果有更好的方式，或者有某些地方可以进行改进的，我们可以共同探讨一下。&lt;/p&gt;
&lt;p&gt;链接地址：https://github.com/wangice/task-scheduler&lt;br/&gt;程序中使用了一个公共包：https://github.com/wangice/misc&lt;/p&gt;
</description>
<pubDate>Sat, 22 Sep 2018 17:12:00 +0000</pubDate>
<dc:creator>冰魄秋雨</dc:creator>
<og:description>最近的一个小项目是做一个简单的数据仓库，需要将其他数据库的数据抽取出来，并通过而出抽取成页面需要的数据，以空间换时间的方式，让后端报表查询更快。 因为在抽取的过程中，有一定的先后顺序，需要做一个任务调</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyice/p/9691736.html</dc:identifier>
</item>
<item>
<title>翻译：使用红外传感器与Arduino进行简单动作与手势检测 - 张高兴</title>
<link>http://www.cnblogs.com/zhanggaoxing/p/9691672.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanggaoxing/p/9691672.html</guid>
<description>&lt;p&gt;&lt;em&gt;译注：昨天看 Adruino 的 Twitter 推了这篇项目，第一眼就觉得非常有趣，翻译给大家看看。文中的红外传感器比较高级，和淘宝上5块钱的那种只能输出0和1的不一样， TPA81 是可以输出温度的，还是8个连续点。 MLX90614 可以输出一点的温度，还卖将近三十，可以想象 TPA81 的价格……而且淘宝上并没有卖 TPA81 的，可见国内还没有仿的。文章也给出了另一个解决方案，使用8个 HC-SR505 来替代，这就便宜了很多。我想了一下，如果要只是实现像文章那样的增减手势，3个 HC-SR505 即可，只不过检测没那么精准罢了。只可惜手头没有3个 HC-SR505 ，没法尝试了哈哈😂。关于最后一个巨长的代码示例，大部分都是 OLED 的字符定义，挑着看即可。&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;原文：&lt;a href=&quot;https://create.arduino.cc/projecthub/electropeak/easy-motion-and-gesture-detection-by-pir-sensor-arduino-101fcc&quot;&gt;Easy Motion and Gesture Detection by PIR Sensor &amp;amp; Arduino&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将展示如何使用简单的原件，如红外传感器与 Arduino Nano ，去制作手势检测器。在本文的末尾，你可以学到：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;解释红外传感器的应用及其工作原理&lt;/li&gt;
&lt;li&gt;使用 TPA81 传感器&lt;/li&gt;
&lt;li&gt;使用红外传感器检测动作和手势&lt;/li&gt;
&lt;li&gt;制作一个炫酷的检测器来增加或减少你的扬声器音量&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000753490-604089197.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;材料&quot;&gt;材料&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Arduino Nano R3&lt;/td&gt;
&lt;td&gt;x1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;8像素热电堆阵列传感器 TPA81&lt;/td&gt;
&lt;td&gt;x1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;红外动作传感器 HC-SR505&lt;/td&gt;
&lt;td&gt;x8&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0.96inch SPI 128X64 OLED&lt;/td&gt;
&lt;td&gt;x1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;面包板&lt;/td&gt;
&lt;td&gt;x1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;杜邦线&lt;/td&gt;
&lt;td&gt;若干&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Arduino IDE&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;被动红外传感器它是如何工作的&quot;&gt;被动红外传感器：它是如何工作的？&lt;/h2&gt;
&lt;p&gt;被动式红外传感器（Passive Infrared，PIR）是一种电子传感器，用于测量其视场中的物体辐射的红外线。它们最常用于基于 PIR 的动作检测器。所有温度高于绝对零度的物体都以辐射的形式发出热能。通常，这种辐射对人眼是不可见的，因为它以红外波长辐射，但它可以通过特殊的电子设备进行检测。&lt;/p&gt;
&lt;p&gt;被动在这里指的是，红外传感器不产生或向外辐射能量。它们完全是通过检测物体发出或反射的红外辐射来工作的。他们不检测或测量热量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000808033-1338932792.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;TPA81 是一个热电堆阵列（Thermopile Array），检测波长在2-22μm之间的红外线。这是辐射热的波长。热释电传感器（Pyro-electric Sensor），通常用于防盗报警，打开外部灯光，检测特定波段红外线。这些传感器只能检测热量的变化，因此它们为动作探测器。虽然在机器人技术中很有用，但它们的应用受到限制，因为它们不能检测和测量静态热源的温度。另一种类型的传感器是热电堆阵列。这些用于非接触式红外温度计。它们的探测角度或视场（FOV）非常宽，约为100°，需要遮挡物或透镜，或者通常两者都需要，来获得更加有效的视场，大约为12°。有些具有内置透镜。最近，一些热电堆阵列传感器，内置了电子元件和硅透镜，变得流行起来，像 TPA81 。TPA81 内有八个热电堆排列成一排，可以同时测量8个相邻点的温度，还可以使用伺服电机来控制模块去热成像。 TPA81 可以探测2米范围内的蜡烛火焰，并且不受环境光的影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000814344-432956894.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红外传感器类似于只能看到温暖的东西的相机。所以 TPA81 是一个具有8像素分辨率的热成像仪，当然，人体总是散发热量的。现在，如果我们用一个控制器来控制红外传感器，并且为红外传感器定义一些手势，那么我们可以做一个简单的手势检测器。&lt;/p&gt;
&lt;p&gt;在这个项目中，我们决定使用红外传感器和 Arduino 制作手势检测器。我们使用 TPA81 作为红外传感器，但是它有点贵，所以如果你想省钱，你可以使用8个 HC-SR505 作为红外传感器（不使用透镜）。 TPA81 支持 I2C 协议，与 Arduino Nano 兼容。这个炫酷的项目帮助你了解图像处理和手势检测的基础。我们开始吧。&lt;/p&gt;
&lt;h2 id=&quot;电路&quot;&gt;电路&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000823834-174557003.jpg&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;使用 TPA81&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;如果你不使用 TPA81 ，则应该将8个单个的 HC-SR505 连接到 Arduino ，并逐个读取它们。这样你可以省点钱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000831784-1412767569.jpg&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;使用 HC-SR505&lt;/small&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;对于第一个电路（使用 TPA81），你可以把代码复制到 Arduino IDE 中。但首先必须要添加库，然后再上传代码。从下面的链接下载 &lt;a href=&quot;https://halckemy.s3.amazonaws.com/uploads/attachments/586174/TPA81-master.zip&quot;&gt;TPA81 库&lt;/a&gt;。如果这是你第一次使用 Arduino ，不要担心。只需遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;转到&lt;a href=&quot;http://www.cnblogs.com/zhanggaoxing/p/www.arduino.cc/en/Main/Software&quot; class=&quot;uri&quot;&gt;www.arduino.cc/en/Main/Software&lt;/a&gt;，下载你的操作系统对应的软件。按照指令安装。&lt;/li&gt;
&lt;li&gt;运行 Arduino IDE 并删除默认的代码，然后将下面的代码复制到 IDE 中。&lt;/li&gt;
&lt;li&gt;导航到菜单栏，依次点击“项目”-“加载库”-“添加 .ZIP 库”&lt;/li&gt;
&lt;li&gt;在“工具”菜单栏中选中 Arduino Nano 开发板&lt;/li&gt;
&lt;li&gt;将 Arduino 连接到 PC 并在“工具”中设置好 COM 端口。&lt;/li&gt;
&lt;li&gt;点击上传按钮&lt;/li&gt;
&lt;li&gt;一切准备就绪&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;#include &quot;Wire.h&quot;
#include &quot;TPA81.h&quot;
// Create new TPA81 instance
TPA81 tpa;
void setup() {
 Serial.begin(9600);
 // You need to begin the Wire library to use TPA81 library
 Wire.begin();
}
void loop() {
 // Print temperature light
 Serial.print(tpa.getAmbient());
 Serial.print(&quot; &quot;);
 // Print all temperature point
 for (int i = 1; i &amp;lt;= 8; i++)
 {
   Serial.print(tpa.getPoint(i));
   Serial.print(&quot; &quot;);
 }
Serial.println(&quot; &quot;);
 delay(100);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000841184-503142717.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行此代码后，打开 Arduino IDE 中的串口监视器，查看 TPA81 的8个阵列温度。每一行中的第一个数字是总温度。现在把你的手放在传感器前面，看看你身体的温度。要定义手势，你应该知道你的手的温度，并且把它设定为一个偏移量。我们把它设置为29度。上传下一个代码，然后把手放在传感器前移动。&lt;/p&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;#include &quot;Wire.h&quot;
#include &quot;TPA81.h&quot;
// Create new TPA81 instance
TPA81 tpa;
void setup() {
 Serial.begin(9600);
 // You need to begin the Wire library to use TPA81 library
 Wire.begin();
}
void loop() {
 // Print temperature light
 Serial.print(tpa.getAmbient());
 Serial.print(&quot; &quot;);
 // Print all temperature point
 for (int i = 1; i &amp;lt;= 8; i++) { if (tpa.getPoint(i)&amp;gt;29)
   Serial.print(&quot;#  &quot;);
   else
   Serial.print(&quot;.  &quot;);
 }
Serial.println(&quot; &quot;);
 delay(100);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000848980-204320229.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们编写了一种算法来检测一个简单的手势，比如增加或减少播放器的音量。你可以复制下面的代码并尝试它。&lt;/p&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;#include &quot;Wire.h&quot;
#include &quot;TPA81.h&quot;
#include &quot;ssd1306.h&quot;
#include &quot;DHT.h&quot;
// Create new TPA81 instance
TPA81 tpa;
#define VCCSTATE SSD1306_SWITCHCAPVCC
#define WIDTH     128
#define HEIGHT     64
#define PAGES       8
#define OLED_RST    9 
#define OLED_DC     8
#define OLED_CS    10
#define SPI_MOSI   11    /* connect to the DIN pin of OLED */
#define SPI_SCK    13 
uint8_t oled_buf[WIDTH * HEIGHT / 8];
int gesture[8][20];
int tgesture[8];
int sum=0;
int sflag; // standby flag
int gcount;
int c;
int ex;
int vol=5;
const uint8_t v1 [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v2 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v3 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v4 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v5 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v6 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v7 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x1f, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x0f, 0x83, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v8 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0x87, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x1f, 0x87, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x0f, 0x83, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v9 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0x87, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x1f, 0x87, 0xf1, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x0f, 0x83, 0xe0, 0xf8, 0x3e, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v10 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0x87, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x1f, 0x87, 0xf1, 0xfc, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x0f, 0x83, 0xe0, 0xf8, 0x3e, 0x0f, 0x80, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const uint8_t v11 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 
   0x00, 0x0c, 0x31, 0xc6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 
   0x00, 0x0c, 0x67, 0xe6, 0x0c, 0x61, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xf0, 0x00, 
   0x00, 0x06, 0x66, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x06, 0x6c, 0x36, 0x0c, 0x61, 0xce, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x06, 0x4c, 0x36, 0x0c, 0x61, 0xb6, 0x3e, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x02, 0xcc, 0x36, 0x0c, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x03, 0xc6, 0x36, 0x06, 0x61, 0xb6, 0x30, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x03, 0x87, 0xe7, 0xe7, 0xe1, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x01, 0x81, 0xc7, 0xe3, 0x81, 0x86, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0xf9, 0x88, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf9, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0x87, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf8, 0x66, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0xf8, 0xc4, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x0f, 0xf9, 0x8c, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0xf8, 0x18, 0x00, 0x00, 0x3e, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x78, 0x30, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x38, 0x60, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x07, 0xc3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x00, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x1f, 0x0f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x3f, 0x8f, 0xe3, 0xf8, 0xfe, 0x7f, 0x1f, 0xc7, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xf0, 0x00, 
   0x00, 0x3f, 0x8f, 0xc3, 0xf8, 0xfc, 0x7f, 0x1f, 0x87, 0xf1, 0xfc, 0x7f, 0x1f, 0xc7, 0xe0, 0x00, 
   0x00, 0x1f, 0x07, 0xc1, 0xf0, 0x7c, 0x3e, 0x0f, 0x83, 0xe0, 0xf8, 0x3e, 0x0f, 0x83, 0xe0, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
void dsply(int input){
 int n1,n2;
 if (input&amp;lt;10){ SSD1306_char3216(10, 25, '0', oled_buf);
 switch(input) 
 { case 0 : SSD1306_char3216(26, 25, '0', oled_buf); break; 
 case 1 : SSD1306_char3216(26, 25, '1', oled_buf); break; 
 case 2 : SSD1306_char3216(26, 25, '2', oled_buf); break; 
 case 3 : SSD1306_char3216(26, 25, '3', oled_buf); break; 
 case 4 : SSD1306_char3216(26, 25, '4', oled_buf); break; 
 case 5 : SSD1306_char3216(26, 25, '5', oled_buf); break; 
 case 6 : SSD1306_char3216(26, 25, '6', oled_buf); break; 
 case 7 : SSD1306_char3216(26, 25, '7', oled_buf); break;
 case 8 : SSD1306_char3216(26, 25, '8', oled_buf); break; 
 case 9 : SSD1306_char3216(26, 25, '9', oled_buf); break; } } 
 else
 { n1=input/10;
 n2=input%10;
 switch(n1) { 
   case 0 : SSD1306_char3216(10, 25, '0', oled_buf); break; 
   case 1 : SSD1306_char3216(10, 25, '1', oled_buf); break; 
   case 2 : SSD1306_char3216(10, 25, '2', oled_buf); break; 
   case 3 : SSD1306_char3216(10, 25, '3', oled_buf); break; 
   case 4 : SSD1306_char3216(10, 25, '4', oled_buf); break; 
   case 5 : SSD1306_char3216(10, 25, '5', oled_buf); break; 
   case 6 : SSD1306_char3216(10, 25, '6', oled_buf); break; 
   case 7 : SSD1306_char3216(10, 25, '7', oled_buf); break; 
   case 8 : SSD1306_char3216(10, 25, '8', oled_buf); break; 
   case 9 : SSD1306_char3216(10, 25, '9', oled_buf); break; } 
   switch(n2) { 
     case 0 : SSD1306_char3216(26, 25, '0', oled_buf); break; 
     case 1 : SSD1306_char3216(26, 25, '1', oled_buf); break; 
     case 2 : SSD1306_char3216(26, 25, '2', oled_buf); break; 
     case 3 : SSD1306_char3216(26, 25, '3', oled_buf); break; 
     case 4 : SSD1306_char3216(26, 25, '4', oled_buf); break; 
     case 5 : SSD1306_char3216(26, 25, '5', oled_buf); break; 
     case 6 : SSD1306_char3216(26, 25, '6', oled_buf); break; 
     case 7 : SSD1306_char3216(26, 25, '7', oled_buf); break; 
     case 8 : SSD1306_char3216(26, 25, '8', oled_buf); break; 
     case 9 : SSD1306_char3216(26, 25, '9', oled_buf); break; }
     } }
void setup() {
 Serial.begin(9600);
 Wire.begin();
 SSD1306_begin();
 SSD1306_clear(oled_buf);
}
void loop() {
 for (int i = 0; i &amp;lt;= 7; i++) // reading 8 pixel { if (tpa.getPoint(i)&amp;gt;29)
   {Serial.print(&quot;#&quot;);
   Serial.print(&quot; &quot;);
   gesture[i][0]=1;}
   else
   {Serial.print(&quot;.&quot;);
   Serial.print(&quot; &quot;);
   gesture[i][0]=0;}
 }
 for (int y = 0; y&amp;lt;=7; y++){sum+=gesture[y][0];} Serial.println(sum);   // sum of 8 pixel
 Serial.println(&quot; &quot;);delay(100);   // speed of reading
 //////////////////////////////////////////////////////////////////////////////////////standby
 if (sum==8){sflag=1; Serial.println(&quot;standby&quot;);}
 else {sum=0;}
 //////////////////////////////////////////////////////////////////////////////////////progress
 if (sflag==1 &amp;amp;&amp;amp; sum!=8){
   Serial.println(&quot;start gesture&quot;);
   gcount=0;
   c=0;
   sum=0;
   while (sum&amp;lt;8)
     {sum=0;
      for (int i = 0; i &amp;lt;= 7; i++) { if (tpa.getPoint(i)&amp;gt;29)
        {Serial.print(&quot;#&quot;);
         Serial.print(&quot; &quot;);
         gesture[i][gcount]=1;}
      else
        {Serial.print(&quot;.&quot;);
         Serial.print(&quot; &quot;);
         gesture[i][gcount]=0;}
       }
       for (int y = 0; y&amp;lt;=7; y++) {sum+=gesture[y][gcount];delay(5);} // sum of 8 pixel
       Serial.println(&quot; &quot;); delay(50); // speed of reading
       gcount++; // lentgh of gesture
       }
     Serial.print(&quot;sum : &quot;); Serial.println(sum);  
     Serial.print(&quot;lentgh of gesture : &quot;); Serial.println(gcount);
     delay(5);
     for (int c=0; c&amp;lt;=7; c++){
       for (int z=0; z&amp;lt;=gcount; z++)
         {tgesture[c]+=gesture[c][z];delay(5);}
       Serial.println(&quot;processing&quot;);}
     tgesture[0]+= tgesture[1];
     tgesture[2]+= tgesture[3];
     tgesture[4]+= tgesture[5];
     tgesture[6]+= tgesture[7];
     tgesture[0]+= tgesture[2];
     tgesture[4]+= tgesture[6];
     if (tgesture[0]&amp;lt;tgesture[4])
        { vol+=(gcount/2);     Serial.print(&quot;volume up&quot;);}
     if (tgesture[4]&amp;lt;tgesture[0])
        {vol-=(gcount/2);   Serial.print(&quot;volume down&quot;);}
   sflag=0;
   }
   sum=0; 
   SSD1306_clear(oled_buf);
   switch (vol)
   { case 1 : SSD1306_bitmap(0, 0,v1, 128, 64, oled_buf); break; 
     case 2 : SSD1306_bitmap(0, 0,v2, 128, 64, oled_buf); break; 
     case 3 : SSD1306_bitmap(0, 0,v3, 128, 64, oled_buf); break; 
     case 4 : SSD1306_bitmap(0, 0,v4, 128, 64, oled_buf); break; 
     case 5 : SSD1306_bitmap(0, 0,v5, 128, 64, oled_buf); break; 
     case 6 : SSD1306_bitmap(0, 0,v6, 128, 64, oled_buf); break; 
     case 7 : SSD1306_bitmap(0, 0,v7, 128, 64, oled_buf); break; 
     case 8 : SSD1306_bitmap(0, 0,v8, 128, 64, oled_buf); break; 
     case 9 : SSD1306_bitmap(0, 0,v9, 128, 64, oled_buf); break; 
     case 10 : SSD1306_bitmap(0, 0,v10, 128, 64, oled_buf); break;
     case 11 : SSD1306_bitmap(0, 0,v11, 128, 64, oled_buf); break;  }
   SSD1306_display(oled_buf);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1085877/201809/1085877-20180923000902813-1455264959.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;下一步是什么&quot;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;使用上述方法，你可以扩展代码以检测其他手势，如 tapping, dragging, dropping, stretching （译注：这些在软件开发中常见的事件我词穷了，尴尬……）等。然后定义命令，以便在检测到这些动作和手势时执行某些任务。&lt;/p&gt;
</description>
<pubDate>Sat, 22 Sep 2018 16:10:00 +0000</pubDate>
<dc:creator>张高兴</dc:creator>
<og:description>_译注：昨天看 Adruino 的 Twitter 推了这篇项目，第一眼就觉得非常有趣，翻译给大家看看。文中的红外传感器比较高级，和淘宝上5块钱的那种只能输出0和1的不一样， TPA81 是可以输出温</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanggaoxing/p/9691672.html</dc:identifier>
</item>
<item>
<title>.NET Core微服务之基于Steeltoe使用Hystrix熔断保护与监控 - Edison Chou</title>
<link>http://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_hystrix.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_hystrix.html</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;/em&gt;此篇已加入&lt;a title=&quot;find more ?&quot; href=&quot;https://www.cnblogs.com/edisonchou/p/dotnetcore_microservice_foundation_blogs_index.html&quot; target=&quot;_blank&quot;&gt;.NET Core微服务基础系列文章索引&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5.8395061728395&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;=&amp;gt; &lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;Steeltoe目录快速导航&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_eureka.html&quot; target=&quot;_blank&quot;&gt;基于Steeltoe使用Spring Cloud Eureka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_zuul.html&quot; target=&quot;_blank&quot;&gt;基于Steeltoe使用Spring Cloud Zuul&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. 基于Steeltoe使用Spring Cloud Hystrix&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201806/381412-20180609153247367-189536304.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在微服务架构中，我们将系统拆分为很多个服务，各个服务之间通过注册与订阅的方式相互依赖，由于各个服务都是在各自的进程中运行，就有可能由于网络原因或者服务自身的问题导致调用故障或延迟，随着服务的积压，可能会导致服务崩溃。为了解决这一系列的问题，断路器等一系列服务保护机制出现了。&lt;/p&gt;
&lt;p&gt;　　断路器本身是一种开关保护机制，用于在电路上保护线路过载，当线路中有电器发生短路时，断路器能够及时切断故障电路，防止发生过载、发热甚至起火等严重后果。&lt;/p&gt;
&lt;p&gt;　　针对上述问题，Spring Cloud Hystrix 实现了断路器、线路隔离等一系列服务保护功能。它也是基于 Netflix 的开源框架 Hystrix 实现的，该框架的目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix 具备服务降级、服务熔断、线程和信号隔离、请求缓存、请求合并以及服务监控等强大功能。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922154122234-1621447801.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.1 准备工作&lt;/h2&gt;
&lt;p&gt;　　这里仍然基于&lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_eureka.html&quot; target=&quot;_blank&quot;&gt;第一篇&lt;/a&gt;的示例进行修改，各个项目的角色如下表所示：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;微服务项目名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;项目微服务中的角色&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;eureka-service　　&lt;/td&gt;
&lt;td&gt;服务发现&amp;amp;注册（Spring Boot）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;zuul-service　　&lt;/td&gt;
&lt;td&gt;API网关 （Spring Boot）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;agent-service　　&lt;/td&gt;
&lt;td&gt;服务提供者 （ASP.NET Core）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;client-service　　&lt;/td&gt;
&lt;td&gt;服务提供者 （ASP.NET Core）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;premium-service　　&lt;/td&gt;
&lt;td&gt;服务提供者&amp;amp;&lt;strong&gt;服务消费者 &lt;/strong&gt;（ASP.NET Core）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　所有相关服务注册到Eureka之后的服务列表：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922155306815-1343414517.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里仍然假设premium-service要调用client-service的接口，我们想要模拟的效果就是针对client-service的调用进行熔断保护。&lt;/p&gt;
&lt;p&gt;　　要使用Hystrix，需要对服务添加依赖包：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PM&amp;gt; Install-Package Steeltoe.CircuitBreaker.HystrixCore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2.2 为PremiumService添加Hystrix相关类与配置&lt;/h2&gt;
&lt;p&gt;　　（1）增加一个HystrixCommand : ClientServiceCommand&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ClientServiceCommand : &lt;strong&gt;HystrixCommand&lt;/strong&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
    {
        IClientService _clientService;
        ILogger&lt;/span&gt;&amp;lt;ClientServiceCommand&amp;gt;&lt;span&gt; _logger;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _clientId;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ClientServiceCommand(IHystrixCommandOptions options, IClientService clientService, 
            ILogger&lt;/span&gt;&amp;lt;ClientServiceCommand&amp;gt; logger) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {
            _clientService &lt;/span&gt;=&lt;span&gt; clientService;
            _logger &lt;/span&gt;=&lt;span&gt; logger;
            IsFallbackUserDefined &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; GetClientName(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; clientId)
        {
            _clientId &lt;/span&gt;=&lt;span&gt; clientId;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; ExecuteAsync();
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; RunAsync()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _clientService.GetClientName(_clientId);
            _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Run: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, result);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; RunFallbackAsync()
        {
            _logger.LogInformation(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RunFallback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; Task.FromResult&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sorry, the service is unavaliable now. Please try again later.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　根据Steeltoe官方文档说明，每个Command都必须继承HystrixCommand或HystrixCommand&amp;lt;T&amp;gt;，然后实现这个RunAsync方法与RunFallbackAsync方法。可以看出，RunAsync方法是实现原有业务逻辑，而RunFallbackAsync方法则是受保护降级后的方法，这里简单地输出了一句提示信息“Service is unavaiable. Please try again later.”。&lt;/p&gt;
&lt;p&gt;　　另外，Steeltoe提供了一个快速的HystrixCommand的写法，见下面这个示例代码，全部在构造函数里面搞定：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloWorldCommand : HystrixCommand&amp;lt;string&amp;gt;&lt;span&gt;
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HelloWorldCommand(string name)
        : base(HystrixCommandGroupKeyDefault.AsKey(&lt;/span&gt;&quot;HelloWorldGroup&quot;&lt;span&gt;),
                () &lt;/span&gt;=&amp;gt; { &lt;span&gt;return&lt;/span&gt; &quot;Hello&quot; +&lt;span&gt; name; },
                () &lt;/span&gt;=&amp;gt; { &lt;span&gt;return&lt;/span&gt; &quot;Hello&quot; + name + &quot; via fallback&quot;&lt;span&gt;; })
    {
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　但是，这里不得不吐槽一下，在Java中对HystrixCommand的封装是注解级别，工作量小的不是真的不是太多，见下例Java代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MovieController {
    ......

    @HystrixCommand(fallbackMethod &lt;/span&gt;= &quot;findByIdFallback&quot;&lt;span&gt;)
    @GetMapping(value &lt;/span&gt;= &quot;/user/{id}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findById(@PathVariable Long id) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; restTemplate.getForObject(&quot;http://user-service/&quot; + id, User.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User findByIdFallback(Long id){
        User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user.setId(&lt;/span&gt;-1L&lt;span&gt;);
        user.setUsername(&lt;/span&gt;&quot;Default User&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（2）改写Controller，使用ClientServiceCommand类替换原有ClientService&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [ApiController]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValuesController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ClientServiceCommand _clientServiceCommand;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ILogger&amp;lt;ValuesController&amp;gt;&lt;span&gt; _logger;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ValuesController(ClientServiceCommand clientServiceCommand, ILogger&amp;lt;ValuesController&amp;gt;&lt;span&gt; logger)
        {
            _clientServiceCommand &lt;/span&gt;=&lt;span&gt; clientServiceCommand;
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }

        ......

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET api/values/5&lt;/span&gt;
        [HttpGet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; Get(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            _logger&lt;/span&gt;?.LogInformation($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/values/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt;&lt;strong&gt; _clientServiceCommand&lt;/strong&gt;.GetClientName(id);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里不再直接使用ClientService实例，改为使用ClientServiceCommand实例，实际上是一个代理模式的应用。&lt;/p&gt;
&lt;p&gt;　　（3）在启动类中添加Hystrix相关配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Startup(IConfiguration configuration)
        {
            Configuration &lt;/span&gt;=&lt;span&gt; configuration;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IConfiguration Configuration { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Discovery Client service&lt;/span&gt;
&lt;span&gt;            services.AddDiscoveryClient(Configuration);
            services.AddSingleton&lt;/span&gt;&amp;lt;IClientService, ClientService&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Hystrix Command&lt;/span&gt;
            &lt;strong&gt;services.AddHystrixCommand&amp;lt;ClientServiceCommand&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClientService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;, Configuration);&lt;/strong&gt;

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseMvc();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Discovery Client service&lt;/span&gt;
&lt;span&gt;            app.UseDiscoveryClient();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.3 快速验证　　&lt;/h2&gt;
&lt;p&gt;　　（1）同时启动所有微服务，然后访问PremiumService的相关接口，正常情况下，能够正常返回调用ClientService接口的结果&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922161015840-1950749482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）关闭ClientService，然后再次PremiumService的相关接口，这时会返回受保护降级后的Fallback结果&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922160952015-906146994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;em&gt;摘抄一句蟋蟀的话：&lt;/em&gt;&lt;/strong&gt;在实际应用中，我们需要对 Hystrix 断路器进行监控，比如熔断请求有多少等等，Spring Cloud 中的实现有 Turbine 进行收集，数据展示的话使用 Hystrix Dashboard。&lt;/p&gt;
&lt;h2&gt;3.1 快速构建一个Hystrix Dashboard服务&lt;/h2&gt;
&lt;p&gt;　　（1）创建一个Spring Boot项目：这里版本是Spring Boot 1.5.15.RELEASE，Spring Cloud Edgware.SR3&lt;/p&gt;
&lt;p&gt;　　（2）pom.xml中添加相关依赖包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-hystrix-dashboard&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（3）启动类中添加EnableHystrixDashboard注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
&lt;strong&gt;@EnableHystrixDashboard
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DashboardServiceApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(DashboardServiceApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（4）必要的配置（application.yml）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: &lt;/span&gt;5010&lt;span&gt;

spring:
  application:
    name: hystrix&lt;/span&gt;-dashboard-service
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.2 快速在ASP.NET Core中集成Hystrix Metrics&lt;/h2&gt;
&lt;p&gt;　　（1）安装Hystrix Dashboard相关包&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PM&amp;gt;Install-Package Steeltoe.CircuitBreaker.Hystrix.MetricsEventsCore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　（2）改写PremiumService启动类添加相关的Metrics配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
    {
        ......

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Discovery Client service&lt;/span&gt;
&lt;span&gt;            services.AddDiscoveryClient(Configuration);
            services.AddSingleton&lt;/span&gt;&amp;lt;IClientService, ClientService&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Hystrix Command&lt;/span&gt;
            services.AddHystrixCommand&amp;lt;ClientServiceCommand&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClientService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Configuration);

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Hystrix Metrics to container&lt;/span&gt;
&lt;span&gt;&lt;strong&gt;            services.AddHystrixMetricsStream(Configuration)&lt;/strong&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Discovery Client service&lt;/span&gt;
&lt;span&gt;            app.UseDiscoveryClient();

            app.UseMvc();
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Start Hystrix metrics stream service&lt;/span&gt;
&lt;span&gt;&lt;strong&gt;            app.UseHystrixMetricsStream();&lt;/strong&gt;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（3）启动Premium-Service，查看URL：http://localhost:8030/hystrix/hystrix.stream&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922165527839-1781480508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图中我们会看到不断实时刷新的 Hystrix 指标监控数据了，但显示并不友好，我咋知道这些指标是啥玩意儿啊！因此，还是让我们在仪表盘中来看看吧。&lt;/p&gt;
&lt;h2&gt;3.3 快速验证&lt;/h2&gt;
&lt;p&gt;　　（1）启动Hystrix Dashboard服务，输入URL：http://localhost:8030/hystrix/hystrix.stream，然后点击按钮“Monitor Stream”&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922170448861-615633009.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）由于ClientServiceCommand尚未起任何作用，所以第一次得到的数据如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922170631310-1734155301.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）多次请求ClientService，然后关闭ClientService，再多次请求，这时熔断保护已启动&lt;/p&gt;
&lt;p&gt;　　（4）再次查看Hystrix Dashboard，可以看到以下数据：触发了3次熔断保护&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180922170910285-1543840080.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　关于Hystrix Dashboard的仪表盘数据属性说明，可以参考下面这张图（From 园友寻找风口的猪 的《&lt;a href=&quot;https://www.cnblogs.com/happyflyingpig/p/8372485.html&quot; target=&quot;_blank&quot;&gt;Hystrix Dashboard仪表盘&lt;/a&gt;》）：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1254583/201801/1254583-20180128220443600-243457834.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　本文简单介绍了一下Spring Cloud Hystrix这个熔断保护组件，并演示了如何基于Steeltoe OSS使用Hystrix实现熔断保护，并基于Hystrix Dashboard演示了如何收集和可视化地查看ASP.NET Core的熔断监控数据。对于Steeltoe OSS提供的Hystrix的组件的使用，相对于Java的Hystrix的注解封装，代码量稍微大一些。另外，关于Hystrix的一些更高级的使用，本文没有涉及，有兴趣的原有可以自行查看官方文档学习。&lt;/p&gt;

&lt;p&gt;　　Click =&amp;gt; &lt;a href=&quot;https://github.com/EdisonChou/Microservice.PoC.Steeltoe/tree/master/src/Chapter2-CircuitBreaker&quot; target=&quot;_blank&quot;&gt;https://github.com/EdisonChou/Microservice.PoC.Steeltoe/tree/master/src/Chapter2-CircuitBreaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Steeltoe官方文档：《&lt;a href=&quot;http://steeltoe.io/docs/&quot; target=&quot;_blank&quot;&gt;Steeltoe Doc&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;Steeltoe官方示例：&lt;a href=&quot;https://github.com/SteeltoeOSS/Samples&quot; target=&quot;_blank&quot;&gt;https://github.com/SteeltoeOSS/Samples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蟋蟀，《&lt;a href=&quot;https://www.cnblogs.com/xishuai/p/steeltoe-and-spring-cloud-eureka-config-hystrix.html&quot; target=&quot;_blank&quot;&gt;.NET Core 微服务架构 Steeltoe的使用&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;周立，《&lt;a href=&quot;https://book.douban.com/subject/30278673/&quot; target=&quot;_blank&quot;&gt;Spring Cloud与Docker 微服务架构实战&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;Sunday_Xiao，《&lt;a href=&quot;https://www.cnblogs.com/liao-xx/p/7358056.html&quot; target=&quot;_blank&quot;&gt;服务熔断保护：Spring Cloud Hystrix&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;寻找风口的猪 的《&lt;a href=&quot;https://www.cnblogs.com/happyflyingpig/p/8372485.html&quot; target=&quot;_blank&quot;&gt;Hystrix Dashboard仪表盘&lt;/a&gt;》&lt;/p&gt;

&lt;div id=&quot;Copyright&quot; readability=&quot;8.2242990654206&quot;&gt;
&lt;p&gt;作者：&lt;a title=&quot;author&quot; href=&quot;http://www.edisonchou.cn&quot; target=&quot;_blank&quot;&gt;周旭龙&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a title=&quot;from&quot; href=&quot;http://edisonchou.cnblogs.com&quot; target=&quot;_blank&quot;&gt;http://edisonchou.cnblogs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 22 Sep 2018 16:03:00 +0000</pubDate>
<dc:creator>Edison Chou</dc:creator>
<og:description>Tip: 此篇已加入.NET Core微服务基础系列文章索引 =&gt; Steeltoe目录快速导航： 1. 基于Steeltoe使用Spring Cloud Eureka 2. 基于St</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_hystrix.html</dc:identifier>
</item>
<item>
<title>Caffe2源码解析 - jicanghai</title>
<link>http://www.cnblogs.com/jicanghai/p/9691621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jicanghai/p/9691621.html</guid>
<description>&lt;p&gt;上一篇文章对Caffe2中的core模块进行了简单拆解&lt;a href=&quot;https://www.cnblogs.com/jicanghai/p/9689726.html&quot;&gt;Caffe2源码解析之core&lt;/a&gt;，本篇给出其它模块的拆解，目的是大致了解每个模块的内容和目标，进一步理解Caffe2的整体框架。内容不多，略做整理如下。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;core&lt;/li&gt;
&lt;li&gt;proto
&lt;ul&gt;&lt;li&gt;caffe2.proto&lt;/li&gt;
&lt;li&gt;hsm.proto&lt;/li&gt;
&lt;li&gt;metanet.proto&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;cuda_rtc&lt;/li&gt;
&lt;li&gt;db&lt;/li&gt;
&lt;li&gt;distributed&lt;/li&gt;
&lt;li&gt;ideep&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;mkl&lt;/li&gt;
&lt;li&gt;mobile&lt;/li&gt;
&lt;li&gt;mpi&lt;/li&gt;
&lt;li&gt;observers&lt;/li&gt;
&lt;li&gt;onnx&lt;/li&gt;
&lt;li&gt;operators&lt;/li&gt;
&lt;li&gt;opt&lt;/li&gt;
&lt;li&gt;perfkernels&lt;/li&gt;
&lt;li&gt;predictor&lt;/li&gt;
&lt;li&gt;queue&lt;/li&gt;
&lt;li&gt;sgd&lt;/li&gt;
&lt;li&gt;transform&lt;/li&gt;
&lt;li&gt;util&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;contrib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参见&lt;a href=&quot;https://www.cnblogs.com/jicanghai/p/9689726.html&quot;&gt;Caffe2源码解析之core&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;包含了Caffe2中常用的protobuf定义，非常重要。我们按照所在文件进行介绍&lt;/p&gt;
&lt;h2 id=&quot;caffe2.proto&quot;&gt;caffe2.proto&lt;/h2&gt;
&lt;p&gt;首先是TensorProto，它表示张量序列化后的结果，包括了张量的维度、数据类型、数据值、名称、所在设备等信息，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message TensorProto {
    repeated int64 dims = 1;
    optional DataType data_type = 2 [default = FLOAT];
    repeated float float_data = 3 [packed = true];
    repeated int32 int32_data = 4 [packed = true];
    optional bytes byte_data = 5;
    repeated bytes string_data = 6;
    repeated double double_data = 9 [packed = true];
    repeated int64 int64_data = 10 [packed = true];
    optional string name = 7;
    
    //张量序列化之前所在的设备
    optional DeviceOption device_detail = 8;
    //张量在chunks中的位置
    message Segment {
        required int64 begin = 1;
        required int64 end = 2;
    }
    optional Segment segment = 11;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在core模块中讲到，Caffe2为了支持低精度的模型训练，设计了qtensor，当时没有详细介绍它的本质，实际上qtensor是对原张量进行了归一化，即减去bias再除以scale，然后对结果进行低精度表示，节省存储空间。因此在qtensor的序列化结果中，需要对归一化的参数进行记录，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message QTensorProto {
    repeated int64 dims = 1;
    required int32 precision = 2;
    required double scale = 3;
    required double bias = 4;
    required bool is_signed = 5;
    repeated int32 data = 6 [packed = true];
    optional string name = 7;
    optional TensorProto.DataType data_type = 8 [default = INT32];
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于多个Tensor，可以使用TensorProto的复数版本，TensorProtos来存储。当然这只针对较小的张量，如果张量比较大，建议使用DB存储。&lt;/p&gt;
&lt;p&gt;对于张量的形状，也有一个结构来表示，TensorShape。记得在Tensorflow中，对于张量形状的某些维度，在运行前可能并不是完全知道，因此这里在TensorShape的定义中，会添加参数对未知张量维度做处理。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message TensorShape {
    repeated int64 dims = 1;
    optional TensorProto.DataType data_type = 2 [default = FLOAT];
    repeated int32 unknown_dims = 3;
    optional bool unknown_shape = 4 [default = false];
    optional string name = 5;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数用于对操作的描述（详见下文的OperatorDef定义），一个命名的参数要么包含单个的浮点型、整型或者字符串数据，要么包含上述类型的数组，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message Argument {
    optional string name = 1;
    optional float f = 2;
    optional int64 i = 3;
    optional bytes s = 4;
    optional NetDef n = 8;
    repeated float floats = 5;
    repeated int64 ints = 6;
    repeated bytes strings = 7;
    repeated NetDef nets = 9;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;目前Caffe2支持的设备类型：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;enum DeviceType {
    CPU = 0;
    CUDA = 1;
    MKLDNN = 2;
    OPENGL = 3;
    OPENCL = 4;
    IDEEP = 5;
    HIP = 6;
    COMPILE_TIME_MAX_DEVICE_TYPES = 7;
    ONLY_FOR_TEST = 20901701;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;目前Caffe2对于不同设备的描述proto还都是一致的，如果某个设备没有包含其中的某个字段，那么这个字段将被忽略。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message DeviceOption {
    optional int32 device_type = 1 [default = 0]; //0 is CPU
    optional int32 cuda_gpu_id = 2;
    optional uint32 random_seed = 3;
    optional string node_name = 4;
    optional int32 numa_node_id = 5;
    repeated string extra_info = 6;
    optional int32 hip_gpu_id = 7;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来是操作的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message OperatorDef {
    repeated string input = 1; //输入的blob名称
    repeated string output = 2; //输出的blob名称
    optional string name = 3;
    optional string type = 4; //操作的类型，从操作注册器中创建操作对象时，需要这个信息
    optional string type = 4;
    repeated Argument arg = 5;
    optional DeviceOption device_option = 6; //操作运行所需要的设备
    
    //对于当前操作来说，如果对于指定的运行设备有多个计算引擎，这里可以指定一个具体的实现引擎。如果用户指定了一个引擎，但这个引擎在Caffe2的二进制包中并不存在，那么使用默认引擎
    optional string engine = 7;
    
    //控制输入，与Tensorflow中的控制输入类似，表达运行的先后顺序，而不是数据的输入。它仅在调度时被Net类使用
    repeated string control_input = 8;
    
    //is_gradient_op参数仅在形状推断（shape inference，与Tensorflow中类似）时使用，没有运行时的作用
    optional bool is_gradient_op = 9 [default = false];
    optional string debug_info = 10;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来NetDef的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message NetDef {
    optional string name = 1;
    repeated OperatorDef op = 2;
    optional string type = 3; //network的执行方式，默认是simple
    optional DeviceOption device_option = 5; //整个net上所有操作的设备信息，在这里设置可以避免给每个操作单独设置
    repeated Argument arg = 6; //参数，包括num_workers，即当图被并行执行的时候，worker的数量
    
    repeated string external_input = 7;
    repeated string external_output = 8;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Caffe2中也可以像Tensorflow那样进行迭代计算，它使用了一个结构叫做ExecutionStep，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message ExecutionStep {
    optional string name = 1;
    
    //ExecutionStep要么可以包含一个substep的集合，要么可以包含一些要运行的network的名称，但两者不能同时被设置
    repeated ExecutionStep substep = 2;
    repeated string network = 3;
    
    //当前的迭代需要运行的轮次，substeps和networks需要被顺序执行，每次执行被视为一轮迭代
    optional int64 num_iter = 4;
    
    //迭代执行结束的判断条件
    optional string criteria_network = 5;
    
    //如果这个字段被设置，那么就周期性的执行
    optional int64 run_every_ms = 11;
    
    //对于sub-steps，是顺序执行还是并行执行
    optional bool concurrent_substeps = 6;
    
    //一个用来判断当前执行是否需要终结的标志
    optional string should_stop_blob = 9;
    
    //如果为真，则当前执行仅执行一次，注意仅当should_stop_blob有效时才有效
    optional bool only_once = 10;
    
    //是否为当前执行构建一个子workspace
    optional bool create_workspace = 12;
    
    //子执行的并行度
    optional int32 num_concurrent_instances = 13;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果说一个ExecutionStep是一次迭代执行，那么Plan就是一个完整的执行计划，后者包含前者：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message PlanDef {
    optional string name = 1;
    repeated NetDef netowrk = 2;
    repeated ExecutionStep execution_step = 3;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于那些内部并不是Tensor的Blob，Caffe2定义了如下的结构：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message BlobProto {
    optional string name = 1;
    optional string type = 2;
    optional TensorProto tensor = 3;
    optional bytes content = 4;
    optional QTensorProto qtensor = 5;
    optional int32 content_num_chunks = 6;
    optional int32 content_chunk_id = 7;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，是对DBReader进行序列化的对象：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message DBReaderProto {
    optional string name = 1;
    optional string source = 2;
    optional string db_type = 3;
    optional string key = 4;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hsm.proto&quot;&gt;hsm.proto&lt;/h2&gt;
&lt;p&gt;Word2Vec是早年Google提出的一个模型，目的是根据语料库获得词嵌入（embedding）。其中为了提高训练的速度提出了两种技术，一种是负采样（Negative Sampling），另外一种就是Hierarchical Softmax。因此，Caffe2专门设计了一个HSM操作，这个文件里包含的就是与之相关的proto，我们仅给出proto名称，含义比较显然：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message NodeProto;
message TreeProto;
message HierarchyProto;
message PathProto;
message PathNodeProto;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;MetaNetDef，顾名思义，包含了NetDef的元数据。其结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message MetaNetDef {
    repeated BlobMap blobs = 1;
    repeated NetsMap nets = 2;
    optional ModelInfo modelInfo = 3;
    repeated PlanMap plans = 4;
    repeated StringMap applicationSpecificInfo = 5;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，对应的xxMap结构很简单，都是键值对，ModelInfo相对比较复杂，我们看下详细的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;message ModelInfo {
    optional string project = 1;
    optional string modelClass = 2;
    optional string version = 3;
    optional string predictorTtype = 4;
    optional string modelId = 5;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;cuda核生成相关的辅助代码。&lt;/p&gt;

&lt;p&gt;在Caffe2的执行过程中，需要重复使用和共享的参数，会被记录在一个db当中。在core模块中我们介绍过，db就是一个kv存储，这里包含了4种Caffe2中会用到的db，如下：&lt;/p&gt;
&lt;p&gt;graph TB db--&amp;gt;|派生|LevelDB db--&amp;gt;|派生|LMDB db--&amp;gt;|派生|ProtoDB db--&amp;gt;|派生|ZmqDB&lt;/p&gt;

&lt;p&gt;Caffe2的分布式实现，依赖外部存储来保存共享的参数。常用的外部存储包括文件和redis。&lt;/p&gt;
&lt;p&gt;外部存储的句柄用StoreHandler来表示，它包含了以下的核心API：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class StoreHandler {
  public:
    virtual void set(...) = 0;
    virtual std::string get(...) = 0;
    virtual int64_t add(...) = 0;
    virtual bool check(...) = 0;
    virtual void wait(...) = 0;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对应到计算图中，就有4个对store操作的op与之对应，如下：&lt;/p&gt;
&lt;p&gt;graph TB Operator--&amp;gt;|派生|StoreSetOp Operator--&amp;gt;|派生|StoreGetOp Operator--&amp;gt;|派生|StoreAddOp Operator--&amp;gt;|派生|StoreWaitOp&lt;/p&gt;
&lt;p&gt;刚才提到了，常用的存储方式为文件存储和redis存储，对应有两种存储句柄：&lt;/p&gt;
&lt;p&gt;graph TB StoreHandler--&amp;gt;|派生|RedisStoreHandler StoreHandler--&amp;gt;|派生|FileStoreHandler&lt;/p&gt;
&lt;p&gt;另外，还有两个创建存储的操作，如下：&lt;/p&gt;
&lt;p&gt;graph TB Operator--&amp;gt;|派生|FileStoreHandlerCreateOp Operator--&amp;gt;|派生|RedisStoreHandler&lt;/p&gt;

&lt;p&gt;目前还不清楚具体含义。&lt;/p&gt;

&lt;p&gt;关于图像的操作，其中最重要的是对于图像读取的操作，ImageInputOp，它继承自PrefetchOperator，包含了图像读取的一系列功能。&lt;/p&gt;

&lt;p&gt;MKL全称是Intel Math Kernel Library，是英特尔提供的数学核心库，它对大量的数学过程进行了处理器级别的优化。这里包括了MKL相关的操作定义。注意，Tensorflow中也用到了MKL去优化数学运算，只不过它是在图优化的过程中，将MKL作为一种图优化遍历被引入，而Caffe2中将MKL直接融入到了操作内部。&lt;/p&gt;

&lt;p&gt;针对移动平台的特殊处理，具体还没看。&lt;/p&gt;

&lt;p&gt;Caffe2中的分布式计算，通过mpi实现。mpi的核心作用是在不同机器上的分布式进程中，进行数据传输和消息同步。针对mpi中的核心操作，比如Broadcast，Reduce等，Caffe2都给出了对应的操作来执行，具体如下：&lt;/p&gt;
&lt;p&gt;graph TB Operator--&amp;gt;|派生|MPICreateCommonWorldOp Operator--&amp;gt;|派生|MPIBroadcastOp Operator--&amp;gt;|派生|MPIReduceOp Operator--&amp;gt;|派生|MPIAllgatherOp Operator--&amp;gt;|派生|MPIAllreduceOp Operator--&amp;gt;|派生|MPISendTensorOp Operator--&amp;gt;|派生|MPIReceiveTensorOp&lt;/p&gt;

&lt;p&gt;给出了4种不同观察器的定义，如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;operator_attaching_net_observer，负责给net中的每一个operator添加观察器；&lt;/li&gt;
&lt;li&gt;profile_observer，负责对每个操作或整张图的执行消耗进行观察；&lt;/li&gt;
&lt;li&gt;runcnt_observer，负责对每个操作或者整张图的运行次数进行观察；&lt;/li&gt;
&lt;li&gt;time_observer，负责对每个操作或者整张图的运行时间进行观察；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前还不清楚。&lt;/p&gt;

&lt;p&gt;操作的具体定义放在这里，代码量巨大，没来得及细看。&lt;/p&gt;

&lt;p&gt;优化相关的类和函数，与Tensorflow一样，Caffe2也是通过对图遍历的方式实施优化，所有的优化遍历类必须继承自OptimizationPass，它的具体定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class OptimizationPass {
  public:
    OptimizationPass(NNModule* nn) : nn_(nn) {}
    virtual void run() = 0;
    virtual ~OptimizationPass(){}
    
  protected:
    NNModule* nn_;
};
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;性能优化相关的kernel。&lt;/p&gt;

&lt;p&gt;一个predictor就是一个参数都确定好了的net。在深度学习中，我们通常会把待学习的模型表示为net，然后通过迭代的图计算，确定模型参数，将net转换为predictor。下面我们看下predictor的结构：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Predictor {
  public:
    Predictor(const NetDef&amp;amp; init_net, const NetDef&amp;amp; run_net, Workspace* parent = nullptr, bool run_init = true, int optimization = 1);
    Predictor(PredictorConfig config);
    
    //以下是对()的重载，给定输入得到输出
    bool operator()(const TensorMap&amp;amp; inputs, TensorList* outputs);
    bool operator()(const TensorMap&amp;amp; inputs, TensorList* outputs);
    bool operator()(const TensorMap&amp;amp; inputs, TensorMap* outputs);
    
    const NetDef&amp;amp; def() const {
        return *config_.predict_net;
    };
    
    Workspace* ws(){
        return config_.ws.get();
    };
    const std::vector&amp;lt;std::string&amp;gt;&amp;amp; input_names() const {
        return config_.input_names;
    }
    const std::vector&amp;lt;std::string&amp;gt;&amp;amp; output_names() const {
        return config_.output_names;
    }
  private:
    bool run_map_workspace(const TensorMap&amp;amp; inputs);
    PredictorConfig config_;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，Predictor类最重要的一个私有数据成员是config_，我们看下PredictorConfig的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;struct PredictorConfig {
    std::shared_ptr&amp;lt;PredictorParameters&amp;gt; parameters;
    std::shared_ptr&amp;lt;NetDef&amp;gt; predict_net;
    std::vector&amp;lt;std::string&amp;gt; input_names;
    std::vector&amp;lt;std::string&amp;gt; output_names;
    std::vector&amp;lt;std::string&amp;gt; parameter_names;
    std::shared_ptr&amp;lt;Workspace&amp;gt; ws;
};
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;与Tensorflow类似，Caffe2也利用队列对多个线程进行同步，比如在多线程读取输入数据的时候。对队列的所有动作都必须通过“操作”来完成，因此Caffe2又定义了队列相关的操作。&lt;/p&gt;
&lt;p&gt;先来看下BlobsQueue的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class BlobsQueue : public std::enable_shared_from_this&amp;lt;BlobsQueue&amp;gt; {
  public:
    bool blockingRead(...);
    bool blockingWrite(...);
    void close();
  private:
    size_t numBlobs_;
    std::mutex mutex_;
    std::condition_variable cv_;
    int64_t reader_{0};
    int64_t writer_{0};
    std::vector&amp;lt;std::vector&amp;lt;Blob*&amp;gt;&amp;gt; queue_; //核心队列数据
    const std::string name_;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意看其中的数据元素queue_，它就是BlobsQueue的核心队列数据。&lt;/p&gt;
&lt;p&gt;另外，BlobsQueue，也可以被看做是一种db，因此Caffe2定义了BlobQueueDB：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class BlobsQueueDB : public DB {
  public:
    BlobsQueueDB(...);
    void Close() override {}
    unique_ptr&amp;lt;Cursor&amp;gt; NetCursor() override{...}
    unique_ptr&amp;lt;Transaction&amp;gt; NewTransaction() override {...}
  private:
    std::shared_ptr&amp;lt;BlobsQueue&amp;gt; queue_;
    int key_blob_index_;
    int value_blob_index_;
    float timeout_secs_;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外，Caffe2还针对BlobsQueue提出了提出了对队列进行处理的“操作”，把常用的队列处理方式，如入队、出队等，抽象为操作：&lt;/p&gt;
&lt;p&gt;graph TB Operator--&amp;gt;|派生|CreateBlobsQueueOp Operator--&amp;gt;|派生|EnqueueBlobsOp Operator--&amp;gt;|派生|DequeueBlobsOp Operator--&amp;gt;|派生|CloseBlobsQueueOp Operator--&amp;gt;|派生|SafeEnqueueBlobsOp Operator--&amp;gt;|派生|SafeDequeueBlobsOp Operator--&amp;gt;|派生|WeightedSampleDequeueBlobsOp&lt;/p&gt;
&lt;p&gt;另外，为了能支持一次多数据入队，Caffe2设计了RebatchingQueue类，它的简要结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class RebatchingQueue {
  public:
    bool enqueueOne(...);
    bool enqueueMany(...);
    bool dequeue(...);
  private:
    std::vector&amp;lt;std::vector&amp;lt;TensorCPU&amp;gt;&amp;gt; queue_;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与BlobsQueue最大的区别有两点，第一，核心数据queue_中存储的是TensorCPU而不是Blob*，第二，拥有EnqueueOne和EnqueueMany两种入队操作。&lt;/p&gt;
&lt;p&gt;与BlobsQueue类似，Caffe2也为RebatchingQueue准备了对其进行处理的“操作”，与BlobsQueue类似，这里不再赘述。&lt;/p&gt;

&lt;p&gt;包含了与随机梯度下降有关的操作。基本上可以根据文件名猜测含义，这里仅列出文件名前缀，感兴趣的读者可以查阅源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;adadelta_op
adagrad_op
adam_op
clip_tensor_op
fp16_momentum_sgd_op
fp32_momentum_sgd_op
ftrl_op
gftrl_op
iter_op
lars_op
learning_rate_adaption_op
learning_rate_functors
learning_rate_op
momentum_sgd_op
rmsprop_op
wngrad_op
yellowfin_op
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有机会可以仔细研读下其中的细节。&lt;/p&gt;

&lt;p&gt;根据core模块的内容我们知道，这里包含的是对图进行变换的方法。主要包括4种：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//公共子项消除，CSE，与Tensorflow类似
common_subexpression_elimination

//对卷积操作进行变换，提高效率
conv_to_nnpack_transform

//模式替换，允许你使用简单的接口定义模式替换规则，只需定义一模式子图和一个替换子图，在原图中寻找模式子图，然后替换为替换子图即可
pattern_net_transform

//单个操作的原地转换
single_op_transform
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这些类形成了如下的继承体系：&lt;/p&gt;
&lt;p&gt;graph TB Transform--&amp;gt;|派生|CommonSubexpressionEliminationTransform Transform--&amp;gt;|派生|SingleOpTransform Transform--&amp;gt;|派生|PatternNetTransform SingleOpTransform--&amp;gt;|派生|ConvToNNPackTransform&lt;/p&gt;

&lt;p&gt;应用类和函数，比较琐碎，暂时没有细看。&lt;/p&gt;

&lt;p&gt;通过前面的介绍我们了解到，Caffe2的核心代码是用&quot;C++&quot;实现的，为了方便在python中进行调用，需要一个工具，帮助python调用&quot;C++&quot;代码。这样的工具有很多，比如boost.python, swig，ctypes，pybind11等。Caffe2选择了pybind11，因为它对&quot;C++&quot;11支持的比较好，而且API比较简单。而Tensorflow中python前端调用&quot;C++&quot;后端使用的是swig，其实swig对&quot;C++&quot;11也能支持。两种设计选择的优劣目前的知识我们还不好评判。&lt;/p&gt;
&lt;p&gt;具体的接口文件，是_import_c_extention.py，它首先会尝试载入gpu版本的Caffe2后端，如果失败了，会尝试载入CPU版本。其中，对于CPU后端的导入是通过如下的语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from caffe2.python.caffe2_pybind11_state import *
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此，在编译完成后，caffe2/python目录下会生成一个名为caffe2_pybind11_state.so的文件，是包含了Caffe2的&quot;C++&quot;后端的动态链接库，可以被python载入。&lt;/p&gt;

&lt;p&gt;同Tensorflow的contrib文件夹一样，包含了第三方贡献的、未正式加入Caffe2的模块，这里面大部分代码是用python开发的。随着版本迭代，经测试稳定后，这些模块会逐渐加入Caffe2的python模块。&lt;/p&gt;

&lt;p&gt;看过Tensorflow和Caffe2的核心代码之后，讲一讲自己的感受。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;代码模块性，Tensorflow代码的模块性做的非常好，基础框架、运行时、图表示、图优化、op、kernel都区分的清清楚楚，而Caffe2的代码显得有些混杂，操作到处都是，给代码阅读带来了一点障碍。&lt;/li&gt;
&lt;li&gt;代码规范性，Tensorflow代码的规范性要好很多，虽然核心代码是多个作者完成的，但代码风格非常统一，文件头的协议也非常一致。反观Caffe2的代码，协议混乱，代码风格不统一，东拼西凑的感觉比较强烈，代码在形式上的美感不足。&lt;/li&gt;
&lt;li&gt;架构合理性，Tensorflow的野心很大，它的终极目标是变成一个全新的、面向数据流图计算的编程语言。这种编程语言基于op原语，利用op和kernel将编译期和运行期明确的区分开来，同时，它对于同一个数据流图的多线程并行执行机制，也像极了CPU流水线处理机制，因此，应该说，深度神经网络只是Tensorflow的一个副产品，它的真实价值远不止于此。反观Caffe2，很多设计有些短视了（比如用redis为中介做分布式执行），在提供更多灵活性的同时，也限制了它的高度。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然，以上只是个人的一些猜测，随着理解的深入，我也会及时回来修正自己的观点，也欢迎大家来讨论。&lt;/p&gt;
&lt;p&gt;最后，我在github上新建了一个repo，&lt;a href=&quot;https://github.com/tengkz/pytorch_notes&quot;&gt;pytorch_notes&lt;/a&gt;，欢迎大家点星星。&lt;/p&gt;
</description>
<pubDate>Sat, 22 Sep 2018 15:33:00 +0000</pubDate>
<dc:creator>jicanghai</dc:creator>
<og:description>写在前面 上一篇文章对Caffe2中的core模块进行了简单拆解</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jicanghai/p/9691621.html</dc:identifier>
</item>
<item>
<title>HRMS(人力资源管理系统)-从单机应用到SaaS应用-架构分析(功能性、非功能性、关键约束)-下篇 - 何戈洲</title>
<link>http://www.cnblogs.com/hegezhou_hot/p/9691597.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hegezhou_hot/p/9691597.html</guid>
<description>&lt;h2&gt;&lt;span&gt;一、开篇&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;      &lt;span&gt;上一篇&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/hegezhou_hot/p/9682677.html&quot;&gt;&lt;span&gt;HRMS(人力资源管理系统)-从单机应用到SaaS应用-架构分析(功能性、非功能性、关键约束)-上篇&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;》&lt;/span&gt;&lt;span&gt;我们详细分析了在架构分析过程中我们需要注意的内容，架构过程的方法论及实践经验，以更好的指导我们在具体架构落地&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt;本篇主将具体结合HRMS系统进行架构概要分析，按照上篇的理论指导，开展具体的架构分析过程实践，通过分析找到关键功能、关键非功能性需求（关键质量及约束）等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;strong&gt;&lt;span&gt;在阐述具体的架构工作方法之前，请大家先查看以下三方面的内容：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     &lt;strong&gt;&lt;span&gt;1、HRMS系统的介绍？（涵盖哪些功能？价值和作用是什么？行业什么情况？）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      请阅读&lt;span&gt;《&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.cnblogs.com/hegezhou_hot/p/9655146.html&quot;&gt;&lt;span&gt;HRMS(人力资源管理系统)-从单机应用到SaaS应用-系统介绍&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;strong&gt;2、本章分析的内容将围绕4类企业代表的业务场景，（区分不同规模企业的关注点，规模将决定系统的设计方案）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      本篇将围绕4类企业代表来阐述不同规模企业对于HRMS的需求及应用&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;    &lt;strong&gt;  A、100人以下的中小企业&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;      B、500人以下的大中型企业&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;      C、1000人以上的集团化大企业&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;      D、全球类型的公司体系（几万人）&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;strong&gt;3、架构师在设计该系统时的职责及具备的核心能力是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      请阅读&lt;span&gt;《&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://www.cnblogs.com/hegezhou_hot/category/260425.html&quot;&gt;&lt;span&gt;系统架构系列-开篇介绍&lt;/span&gt;&lt;/a&gt;&lt;span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;一、架构准备阶段主要做什么？&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;       架构准备阶段主要是围绕系统的全方位的需求分析来开展相关准备工作的，这里的需求涵盖功能性及非功能性2大类需求，非功能性需求又涵盖质量属性及约束两项内容，我们在实际的分析过程中需要重点考虑业务功能、质量属性及约束等内容，具体可采取表格方式进行梳理，借助科学的方法找出来哪些是关键功能、哪些是关键质量需求、哪些是关键约束。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231423433-1981925489.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231424045-1177897833.png&quot; alt=&quot;image&quot; width=&quot;648&quot; height=&quot;562&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键功能、关键质量属性及关键约束等内容对于架构设计的实际影响有哪些呢？在这里我们梳理成表格来呈现这样大家有一个比较直观的感受：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231424570-219322036.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231425337-1110056535.png&quot; alt=&quot;image&quot; width=&quot;862&quot; height=&quot;512&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;架构是围绕需求来开展的，在对需求综合分析的过程中，我们将需求划分为3个层次：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;业务级需求：&lt;/strong&gt;包含客户或出资者要达到的业务目标、预期投资、工期要求，以及要符合哪些标准、对哪些遗留系统进行整合等约束条件；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;用户级需求：&lt;/strong&gt;用户使用系统来辅助完成哪些工作。对质量要求如何。用户群及所处的使用环境方面有何特殊要求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;开发级需求：&lt;/strong&gt;开发人员需要实现什么。开发期间、维护期间有何质量考虑。开发团队的哪些情况会反过来影响架构。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于此三类需求弄清楚之后，就可以形成一个初步的需求列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　一方面为了满足上述3类需求，同时还考虑到影响架构设计3个维度方面的内容，我们采取ADMEMS的需求类型及需求层次的二维矩阵表，来进行结构化的梳理，这样更直观也更清晰，我这里先将考虑的维度放在这，后面关于HRMS系统的需求分析的过程中我将按照该方法进行整理&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231425821-1865413022.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231426362-636063072.png&quot; alt=&quot;image&quot; width=&quot;862&quot; height=&quot;583&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们了解了需求的层次、需求的类型，知道了他们对于架构的影响，也熟悉了解了他们之间的关联关系，那接下来对我们来说最重要的就是理清思路，如何把需求全方位的陈列出来，利用需求层次及需求分类罗列整理。HRMS系统非常的复杂，功能较多，应用的场景及类型也比较繁多，所以&lt;span&gt;最好的方式就是把需求列清晰：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231426801-1108804992.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231427351-601601044.png&quot; alt=&quot;image&quot; width=&quot;854&quot; height=&quot;369&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过需求的结构化整理，需要从这些需求中找到关键功能、关键质量及关键约束，并将关键质量、关键约束转化为衍生的设计需求：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231427861-1415421224.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231428342-109666116.png&quot; alt=&quot;image&quot; width=&quot;866&quot; height=&quot;392&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、&lt;span&gt;&lt;span&gt;确定业务功能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键的业务功能包含如下四个方面：1.核心功能；2.必做功能；3.高风险功能；4.独特功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如何区别这四个方面，实际上是靠经验和感觉。它们之间实际上是有重叠部分的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;核心功能：业务层接口所反映的功能。如，HRMS系统中，前面说的8大业务内容都属于核心功能；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;必做功能：必做功能实际上是以客户为背景的，简单来说就是愿景；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;高风险功能：顾名思义，哪些功能操作可能会涉及到安全和隐私等问题；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;独特功能：实际是上诉三个功能的补集，看看还有哪些没有覆盖到的，却又很关键的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　架构师在设计阶段要考虑到“关键功能”所占有的比例，没有明确的标准，一般遵循：功能少的系统比例高一些，功能多的系统比例少一些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、梳理非功能性需求涵盖质量及约束需求，将这些质量及约束背后的衍生需求梳理清晰：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231429051-102757752.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231429636-1813021108.png&quot; alt=&quot;image&quot; width=&quot;813&quot; height=&quot;365&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于质量要求这块的内容涵盖的范围非常的广泛，涵盖：1.性能  2. 安全性 3.持续可用性 4.可靠性 5.鲁棒性 6.易用性 7.可测试性 8.可重用性 9.可维护性 10.可扩展性 11.可移植性 12 可互操作性等。我们在做HRMS系统架构设计时考虑的质量属性里面也不需要把每一个指标都做上去。这些指标之间是相互影响的。其影响关系如下（+表示促进  －表示影响  空白表示无明显作用）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231430220-130477692.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231430694-743749551.png&quot; alt=&quot;image&quot; width=&quot;800&quot; height=&quot;521&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当出现多个质量属性出现互斥的时候，必须要权衡以哪个为主，那相应的另外一个质量属性就会弱化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在架构设计中，对非功能性需求的重视程度，也会影响架构设计的好与劣；但也要平衡过渡设计和适可而止的关系。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、如何找出关键的功能性、非功能性需求、关键约束？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231431185-140006916.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231431658-926050818.png&quot; alt=&quot;image&quot; width=&quot;863&quot; height=&quot;287&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、找到系统的关键功能（系统具体是做什么的？）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;我们可以采取职责链模式来梳理关键功能：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231432220-580821737.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231432851-413535960.png&quot; alt=&quot;image&quot; width=&quot;796&quot; height=&quot;440&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模拟不同类型的用户如何通过系统实现业务需求的过程，借助系统化的思维模拟跟踪各环节，梳理清晰后即可得出清晰的职责链，这样便可以找出各链上的关键功能点，这些关键点即是关键功能。借助职责链模式来梳理核心功能，确认系统中存在必要功能、HRMS系统中的8大业务模块，这里再强调下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180916092836257-511135340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面8项属于核心功能。除此之外，还应该会有&lt;span&gt;&lt;span&gt;&lt;strong&gt;流程管理、权限管理等功能，辅助及支撑系统运行的基础功能&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、&lt;span&gt;&lt;strong&gt;确定关键质量的5大原则（找出关键质量属性）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231433259-239936963.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231433785-1948153381.png&quot; alt=&quot;image&quot; width=&quot;696&quot; height=&quot;384&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Ø分类合适+必要扩充&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;       &lt;span&gt;&lt;strong&gt;针对质量分类进行细化及分解&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231434269-888382319.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231435406-1979934474.png&quot; alt=&quot;image&quot; width=&quot;702&quot; height=&quot;275&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Ø考虑多方涉众&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;       用户不仅关注功能，同时也需要质量，用户关注的质量可能包括易用性、性能、持续可用性、鲁棒性等，&lt;span&gt;客户不一定是最终用户，比如超市销售系统的客户是超市老板，但最终用户可能是收银员或上货员，他们所关注的质量属性可能不一致。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Ø检查性思维&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;       随时检查各个质量属性，看看每一项是否确实算不上“关键质量”，从而防止遗漏关键需求。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;Ø识别矛盾+划定优先级&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;       &lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231436728-418743086.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231437347-147465856.png&quot; alt=&quot;image&quot; width=&quot;666&quot; height=&quot;324&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;确定这些质量属性之间的矛盾关系，明确以哪些质量属性为主。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Ø严格程度符合领域与规模特点&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;       严格程度符合领域与规模特点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       关键质量属性个数根据项目、产品、平台不同而不一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;       诸如：银行项目（注重安全性、易用性）;互联网服务项目（注重持续可用性、易用性、性能、可靠性等）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;3、找出关键约束并将这些约束转化为功能或质量需求&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231437804-1077444843.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231438257-74900071.png&quot; alt=&quot;image&quot; width=&quot;852&quot; height=&quot;431&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;首先，按照4类约束进行罗列（尽可能全面）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其次、分析约束面向的功能、质量方面的转化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;最后、确定这些约束转化后的功能、质量是否重要&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4、•第1步：需求结构化；•第2步：分析约束影响；•第3步：确定关键质量；•第4步：确定关键功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231438865-301100028.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231439414-769594333.png&quot; alt=&quot;image&quot; width=&quot;693&quot; height=&quot;424&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;三、HRMS系统的关键功能、关键质量指标及约束&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;无论&lt;span&gt;上一篇&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/hegezhou_hot/p/9682677.html&quot;&gt;&lt;span&gt;HRMS(人力资源管理系统)-从单机应用到SaaS应用-架构分析(功能性、非功能性、关键约束)-上篇&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;》&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;介绍的，还是本篇前面介绍的内容基本上都是理论偏多一些，当然其中有一些具体的原则及操作方法，可能大家还不清楚具体的如何下手，如果真来一个项目，我该怎么循序渐进、由浅入深呢？下面我们就以HRMS为例来简单说明，我们来具体实际操作一下大家就会有比较清晰的认识了，希望大家能够掌握其中的精髓。需要多实践和总结。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.1、梳理出需求层次及需求类型（形成表格）&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在前面我们描述了4类企业类别，在梳理需求前，我这边根据实际情况将企业划分为4类：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;    &lt;strong&gt;  A、100人以下的中小企业&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;      B、500人以下的大中型企业&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;      C、1000人以上的集团化大企业&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;      D、全球类型的公司体系（几万人）&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们可直观看出上述按照企业的规模、人员数量来进行的划分，因为我们都知道在系统架构设计时，一般来说规模及数量对于架构的影响是决定性的，所以这里先基于这个维度来对企业分类。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;3.1.1 业务级需求&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;       前面我们罗列的HRMS系统的功能，我这里不在重复罗列，我认为这8项是基础业务级需求，上述的4类企业都需要提供这些功能。&lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;（具体请参考上面的HRMS系统功能图）&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;       同时为了区分不同规模、人员数量企业的差异性，我这边又整理了几方面的需求内容，模拟甲方提出：&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;       注意事项：（前面规模较小的公司个性化的功能，后面规模较大的企业默认会有这些功能，所以很多内容我没有重复列出）&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;   A、100人以下的中小企业（单个企业内部使用）&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;不同的用户看到的内容不同、可以单独管理各自内部的事宜&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;业务审批流程，支持自定义&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;与邮件系统、OA、财务系统等集成&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;LInux环境、java语言、内外网均可使用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;需要提供app与pc端服务接入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;数据统计及分析&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    B、500人以下的大中型企业（多个公司内使用）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;支持多分公司管理模式（不同分公司看到的模块及数据不同，相互隔离，总部能看到）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;各分公司主要是作为业务拓展，按照总部的管理流程及制度来执行&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;功能优化及升级，由总部统一规划及实施，各地可以提需求&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;硬件及软件环境由总部统一管理及维护&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;采取云端部署模式，部署前需各地提出相关需求&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;支持wap、微信等服务接入&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;大数据跟踪（指导各部门的人力资源及管理优化）&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;     C、1000人以上的集团化大企业（业务拆分模式的集团化公司）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;大集团公司下设多个小集团公司，各集团公司的业务不同和垂直化分公司的管理模式不同，需要系统支持该类型的配置管理&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;信息流转及上报的业务线需要跨多个公司及职级，业务线不能乱。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;各集团子公司自定义内部的管理体系，总公司制定统一工作要求并给予指导&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;总公司及各子公司均有信息中心，各自建设内部的信息化，最终通过总公司信息中心进行统筹&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;科学决策及指导（人才战略）&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;     D、全球类型的公司体系（几万人）（跨国公司）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;不同国家分公司的内部管理系统的功能模块不同&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;系统支持各地国家当地的语言&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;总部、分公司及下属部门间的信息联动及共享支持，可按层级设置汇报线及审批流&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HRMS系统接入的第三方系统略有不同（OA、ERP等）,根据不同国家的公司情况，各公司统筹，对于总公司统筹的服务，各分公司按要求使用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;企业指挥舱（内部+外部）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;3.1.2 质量属性&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;A、开发期质量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231439913-1551947297.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231440443-81273001.png&quot; alt=&quot;image&quot; width=&quot;854&quot; height=&quot;333&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       一般来说，甲方不会是专业的软件公司，如果是默认甲方会内部自主提出相应的需求提出具体的设计规划方案，这其中便会考虑系统的质量要求，对于开发过程中的质量要求一般需要在架构设计时主动考虑，提供相应的问题来咨询或为甲方提供专业的建议及咨询。对于甲方确认的内容可重点关注，对于甲方没有主动提出的，需要我们根据行业经验做好判断来落实。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基于前面模拟提出的个性化的需求，我们来综合梳理下开发期的质量要求：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;\&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;=100人&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;=500人&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;=1000人&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;=10000人&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可扩展性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;暂时可不考虑&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可重用性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;不是特别强烈（重用性方面主要是针对基础组件方面需要考虑）&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可测试性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;易理解性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可维护性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可移植性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;暂时可不考虑&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;需考虑，但非必须&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;必备&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;基于上面的分析，我们已基本确认了不同规模的企业的HRMS系统需要考虑的质量属性略有不同。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;B、运行期质量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231441187-718412295.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231441836-155582997.png&quot; alt=&quot;image&quot; width=&quot;858&quot; height=&quot;420&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;针对运行期的质量考虑，主要是基于用户使用过程中的各类场景来展开进行分析，提取出上述几类质量属性方面的要点：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;&lt;strong&gt;\&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;=100人&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;=500人&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;=1000人&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;=10000人&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;100人，数据量较小，暂时可不考虑&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;500人使用时性能也不需要特别的考虑，业务量及数据量都不会太大&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;一般&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;安全性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;内网部署，非外网隔离，安全性级别（高）&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;易用性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;需考虑，要求较低&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;一般&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;一般&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;持续可用性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;要求不高，上班期间使用&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;一般&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可伸缩性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;暂时可不考虑&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;暂时可不考虑&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;一般&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;互操作性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;需考虑（但要求不高）&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;需考虑，涉及到多个子公司，需要考虑差异性的互操作性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;一般&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;可靠性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot;&gt;
&lt;p&gt;高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;鲁棒性&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;204&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;需考虑（要求不高）&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;188&quot;&gt;
&lt;p&gt;需考虑（一般）&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;196&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;172&quot;&gt;
&lt;p&gt;较高&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;相对于开发期的质量属性来说，运行期的质量属性更多、更复杂、更重要，所以我们需要特别重视。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;3.1.3 系统约束&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;基于前面列出的应用需求，我们综合4类企业的约束，形成统一的约束清单：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;约束类型&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;759&quot;&gt;
&lt;p&gt;具体说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;业务环境约束&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;759&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;上线时间：3个月&lt;/p&gt;
&lt;p&gt;预算限制：性价比高&lt;/p&gt;
&lt;p&gt;集成环境：公司内部OA、邮件等系统与外部社保系统等连接&lt;/p&gt;
&lt;p&gt;政策及法规：受制于人力资源管理相应的办法&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.5&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;使用环境约束&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;759&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;何阶层用户：员工、HR、高管等&lt;/p&gt;
&lt;p&gt;年龄段和偏好：覆盖22岁~65岁&lt;/p&gt;
&lt;p&gt;多个国家：（多语言支持）&lt;/p&gt;
&lt;p&gt;是否存在网络较弱或延迟情况：会存在，所以需要考虑信息的临时存储及恢复&lt;/p&gt;
&lt;p&gt;设备移动的情况下：需要提供移动端设备访问&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;开发环境约束&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;759&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;技术水平：团队技术水平高,掌握java语言&lt;/p&gt;
&lt;p&gt;城市分布：多个城市&lt;/p&gt;
&lt;p&gt;磨合程度：一般&lt;/p&gt;
&lt;p&gt;开发管理程度：较高&lt;/p&gt;
&lt;p&gt;源代码保密：高&lt;/p&gt;
&lt;p&gt;网络环境：良好&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td width=&quot;133&quot;&gt;
&lt;p&gt;技术环境约束&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;759&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;技术平台：Java、Linux&lt;/p&gt;
&lt;p&gt;中间件：Spring cloud、Redis等&lt;/p&gt;
&lt;p&gt;编程语言的流行度：主流&lt;/p&gt;
&lt;p&gt;认同度：高&lt;/p&gt;
&lt;p&gt;优缺点：应用语言，性能问题需要考虑&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;       上面我们系统化的梳理了系统的业务功能、质量属性及约束内容，下面我们采取需求层次-需求类型二维矩阵来找出关键功能、关键质量属性及关键约束。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.2、确定关键功能、关键质量属性及关键约束&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;      在确定关键功能、质量属性及约束之前，我想再限定和说明个前提，以便大家更好的理解，我们需要开发一个SaaS版本的系统，全方位的支持上述4类企业的需求，过程中我们作为一个企业，&lt;span&gt;&lt;span&gt;&lt;strong&gt;需要考虑成本、商业模式、企业未来的战略及盈利等方面的内容&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;       所以基于这些约束及现状，我们可以梳理得出以下的关键功能及质量、约束的表格。作为后续我们做概要架构的前提和基础。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231442461-1786081897.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231443072-1360641835.png&quot; alt=&quot;image&quot; width=&quot;858&quot; height=&quot;470&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上表的具体的推演过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A、确定组织级的功能、质量、约束等内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231443578-1278420757.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231444059-1078658198.png&quot; alt=&quot;image&quot; width=&quot;850&quot; height=&quot;466&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;B、确定用户级的功能、质量、约束等内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231444571-487674015.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231445058-1591294747.png&quot; alt=&quot;image&quot; width=&quot;859&quot; height=&quot;471&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;C、确定开发级的质量及约束等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231445545-1019946050.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231446058-409134752.png&quot; alt=&quot;image&quot; width=&quot;848&quot; height=&quot;465&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;D、将约束衍生为质量属性及功能、将质量属性衍生为功能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231446637-1958634093.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231447290-1601098328.png&quot; alt=&quot;image&quot; width=&quot;846&quot; height=&quot;464&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;将关键约束衍生为功能：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231447841-2006386860.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231448392-88924312.png&quot; alt=&quot;image&quot; width=&quot;843&quot; height=&quot;462&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据功能提炼出非功能性需求：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231449225-2082238835.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180922231449784-1329267119.png&quot; alt=&quot;image&quot; width=&quot;839&quot; height=&quot;460&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;E、形成统一的二维表（形成关键结果）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;（如上表）&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;F、总结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       通过上述的几个环节，我们把不同类型的约束转化为质量属性及功能需求，最终我们形成了最终的需求二维矩阵，这将为我们的架构指明方向，后续我们再做架构的设计及规划的时候就能够做到有的放矢，不会走错方向。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;四、更多信息&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于更多的系统架构方面的知识，我已建立了交流群，相关资料会第一时间在群里分享，欢迎大家入群互相学习交流：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;微信群：（扫码入群-名额有限）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180920183644567-807539114.png&quot;&gt;&lt;img title=&quot;1537187479(1)&quot; src=&quot;https://img2018.cnblogs.com/blog/46256/201809/46256-20180920183645208-1180188038.png&quot; alt=&quot;1537187479(1)&quot; width=&quot;309&quot; height=&quot;409&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 22 Sep 2018 15:16:00 +0000</pubDate>
<dc:creator>何戈洲</dc:creator>
<og:description>一、开篇 上一篇《HRMS(人力资源管理系统)-从单机应用到SaaS应用-架构分析(功能性、非功能性、关键约束)-上篇》我们详细分析了在架构分析过程中我们需要注意的内容，架构过程的方法论及实践经验，以</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hegezhou_hot/p/9691597.html</dc:identifier>
</item>
<item>
<title>移动端H5混合开发设置复盘与总结 - buoge</title>
<link>http://www.cnblogs.com/buoge/p/9691573.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buoge/p/9691573.html</guid>
<description>&lt;p&gt;此篇接上一篇：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;移动端H5混合开发，Touch触控，拖拽，长按, 滑屏 实现方案&lt;br/&gt;https://www.cnblogs.com/buoge/p/9346699.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;app 场布设置已经上线了，用户可以通过手机端嵌入的h5网页进行场布设置，原来只能在pc端浏览器，还得带上个笔记本电脑很是不方便，这个功能很好的解决了目前设置不顺畅的问题。上线后得到大家的认可，提升了业务效率，这一个多月的辛苦开发还是值得的，接下来是对自己这一段时间开发过程的一个总结。&lt;/p&gt;
&lt;p&gt;整体开发基于H5+Css3+Jquery,前端这个组合略显过时，不过我就这个用的熟悉，先做完再说&lt;/p&gt;
&lt;h3 id=&quot;前后端开发混合开发&quot;&gt;前后端开发混合开发&lt;/h3&gt;
&lt;p&gt;功能前端和后端是一起开发的，好处是自己灵活定制不需要沟通成本，但是缺点也有前后端切换需要切换大脑思维的上下文，一会再写JS一会回去写Java不利于思维发挥和深入思考&lt;/p&gt;
&lt;p&gt;后端开发过程中还好有现成的方法可以调用，所以并没有耗费太多时间，大部分时间在前端开发上，假如后端也要做那才真是入水两腿泥&lt;/p&gt;
&lt;p&gt;总结：后续在有类似开发，不要大包大榄，专注一端去做，这样高效省心，专注前端和专注后台分工开发速度快了，效率高了，遇到难题有时间和情景去深入思考，所以尽可能把任务分开下&lt;/p&gt;
&lt;h3 id=&quot;android-ios-与h5-互相调用的问题&quot;&gt;android iOS 与h5 互相调用的问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;H5调用相机图片方向有问题：拍照是竖屏，展示成横屏，上传上去展示也是横屏&lt;/strong&gt;&lt;br/&gt;这两个帖子讲的很清楚，我就不展开了，思路就是利用 exif.js 判断方向，然后用CanvasApi从新生成base64&lt;br/&gt;格式的图片&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;H5拍照应用开发经历的那些坑儿&lt;br/&gt;http://www.yuuuuc.me/problems-with-html5-file-api-while-uploading-images/&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;利用exif.js解决ios手机上传竖拍照片旋转90度问题&lt;br/&gt;https://blog.csdn.net/linlzk/article/details/48652635&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源码放在了这里：&lt;br/&gt;https://github.com/buoge/gist/blob/master/FrontEnd/FixH5Oritention.html&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相册调用去摄像头，图片大小限制&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Android 有api去除摄像头相机拍照的选项&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;iOS 没法直接去除，只能通过环境判断，动态触发自定义函数，直接跳转到相册，选择完成后返回base64数据&lt;br/&gt;客户端直接使用base64类型的数据判断文件大小，展示，最终上传到服务端也是base64方式的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;        // 前端    
        function selectDeviceImg(){
            console.log('selectDeviceImg');
            if (window.webkit) { // iOS
                window.webkit.messageHandlers.Photo.postMessage(null);
            } else { // Android and others
                $(&quot;#file_head&quot;).trigger(&quot;click&quot;);
            }
        }
        
        // 服务端是这样子的
        @ResponseBody
        @RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)
        public Result uploadImage(@RequestParam(required = true) String imageBase64,
                                  @RequestParam(required = true) String projectId) {
                                  ...
                                }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;h5与native交互方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Android 通过WebView对象自定义的AndroidObjec注入到页面，页面调用AndroidObjec&lt;/li&gt;
&lt;li&gt;iOS 实现机制类似，也是在UIWebView里面创建了一个对象，页面上直接给这个对象发送消息&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;  // 假如在iOS中 
  if (window.webkit) {
       // iOS post message 的方式
       window.webkit.messageHandlers.Signature.postMessage(null);
    } else if (typeof AndroidJSObj != &quot;undefined&quot;) { 
        // AndroidObjec 方式  
        AndroidJSObj.getSignature();
    }   &lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;URL拦截的实现思路：Android和iOS的webview都在监听url的调转事件，拦截到后，不做跳转，&lt;br/&gt;直接执行本地的逻辑，在实现语音播放的时候用到这个技巧，这个技巧本来是做页面跳转时使用的，&lt;br/&gt;客户端拦截到url跳转到对应的 Controller或是Activity,如果是浏览器h5直接跳转到对应的html页面&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;另外一种WebViewJavascriptBridge的库: https://github.com/marcuswestin/WebViewJavascriptBridge 1万多个start经过实战考研，后续项目中可以使用这个提升效率&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;浏览器返回问题history&quot;&gt;浏览器返回问题：history&lt;/h3&gt;
&lt;p&gt;页面中有一个功能就是上传图片，这个功能会覆盖现有页面的背景，上传页面是一个html,完事后直接location.href跳转到了另一个，现在整个页面嵌入在app里面有返回按钮，但现在不想让页面返回到上传页面，&lt;br/&gt;试了 location.replace 也不管用，这个方法在移动端不好用，而且还存在另一个问题就是在iOS需要点击两次返回按钮才能退出webview。&lt;/p&gt;
&lt;p&gt;这个功能上也调试了好久，最后也是让客户端处理了，监听页面返回在指定页面点击返回键直接推出&lt;/p&gt;
&lt;p&gt;总结：嵌套h5的时候尽量使用单页面的布局方式，方便管理，或是用react,vue这种都有对应的路由插件，这里也暴露了前端技能二把刀，遇到这种叼酸的bug就搞不定&lt;/p&gt;
&lt;h3 id=&quot;屏幕像素与真实像素转换&quot;&gt;屏幕像素与真实像素转换&lt;/h3&gt;
&lt;p&gt;之前一个帖子写过，背景是充满屏幕的，场布上是有点位的，长按可以添加点位，点位的定位算法就比较重要：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心就是：计算点位在原始图片的left,top位置，在不同分辨率上等比展示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设备分辨率： 300&lt;em&gt;600&lt;br/&gt;图片分辨率： 600&lt;/em&gt;1200&lt;/p&gt;
&lt;p&gt;点在屏幕上的位置是（left,top）：（30,60）&lt;br/&gt;对应到图片上原始像素就是（left,top）：(60,120)&lt;/p&gt;
&lt;p&gt;在另外一个设备分辨率是： 200*400的话&lt;br/&gt;图片上原始像素：（60，120），存在数据库，前端展示会返回&lt;br/&gt;在此设备上对应的位置就是：（20，40）&lt;/p&gt;
&lt;p&gt;我这里为了方便演绎参数值经过调整，大概意思就是这样&lt;/p&gt;
&lt;h3 id=&quot;网络异常的处理loading...成功失败&quot;&gt;网络异常的处理，loading...,成功失败&lt;/h3&gt;
&lt;p&gt;所有Ajax请求刚开始的时候没有使用一个统一的异常处理，请求开始加loading...,出错或网络异常，取消loading,提示业务异常或网络异常，这块应该提早规划，再有类似需求一定注意&lt;/p&gt;
&lt;h3 id=&quot;网页认证授权的问题&quot;&gt;网页认证授权的问题&lt;/h3&gt;
&lt;p&gt;ajax api 的认证方式是目前考虑到3种：&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;自己按照一定规则md5计算出来的，根据时间戳算一个不可逆的签名，客户端算好，调用h5传给页面，发送ajax时放在header里面（目前是这种）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;我之前实现过一种思路是使用md5和base64一起算好之后放在cookie里面，页面发送的时候带上cookie,计算过程任然在客户端，客户端计算完成调用h5的js函数，然后在发起ajax请求，由服务器验证，验证通过返回json&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;OAuth2 标准不解释了，这个服务暂时还没有自己搭建过倒是用过别人的，后续也会单独学习这块把这个技能点补充上来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;关于移动前端开发效率&quot;&gt;关于移动前端开发效率&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Jquery 为主的开发方式还可以在优化&lt;/strong&gt;&lt;br/&gt;Jquery 效率比起 mvvm 的vue,react 代码效率要低，但是比较简单，目前代码已经接近2000行功能再要叠加肯定是要混乱起来，改不好改，修不好修，除了我每人敢动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;css3 与前端工程实践的积累不足&lt;/strong&gt;&lt;br/&gt;在浏览器返回，手机相册选取，样式兼容性展示显示出很多力不从心的感觉，只能是大家一起协作解决，或是workaround 用曲线救国的方式实现，这块其实没办法，主力没有在前端，只能遇到问题多总结，多去实践才行&lt;/p&gt;
&lt;h3 id=&quot;移动端触控库选择&quot;&gt;移动端触控库选择&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;hammer.js 做手势交互和点击，长按的操作简直太棒，这个库1024！&lt;/li&gt;
&lt;li&gt;其实回过头来讲，js开发库不该用jquery应该用 zepto.js,它本身是为移动端而生，jquery 在移动端点击事件处理有很多问题，好些时候不能响应，只能用touchstart,touchend来触发，但是使用touch事件会发生很多误操作和无触碰，体验不是很好&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;ui-框架和样式库的选择&quot;&gt;UI 框架和样式库的选择&lt;/h3&gt;
&lt;p&gt;前面说过css不是很溜，不希望自己花时间在前端样式上，所以寻找一个合适的UI库是尤为重要的，这里我选择的是&lt;strong&gt;mui&lt;/strong&gt; https://github.com/dcloudio/mui/&lt;br/&gt;&lt;strong&gt;Bootstrap4&lt;/strong&gt; 一些基础样式&lt;br/&gt;&lt;strong&gt;iconfont&lt;/strong&gt; 免费的icon&lt;/p&gt;
&lt;p&gt;** 模态弹层layui **&lt;br/&gt;使用的 layer.js的移动版非常好用，解决了移动端模态弹层的问题，推荐大家使用：&lt;br/&gt;https://layer.layui.com/mobile/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tmpl&lt;/strong&gt;&lt;br/&gt;前端模板老组件了，虽然比起mvvm逊色不少，好在够用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;滚动穿透&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这里有一些详细的解释，其实在模态弹窗那里也没有解决滑动穿透的问题&lt;br/&gt;https://uedsky.com/2016-06/mobile-modal-scroll/&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;** 点击300毫秒延迟问题 **&lt;br/&gt;在iOS端尤为强烈，这里放两个链接解释下，缘由，解决方案很多自行搜索&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;* 为啥会有300毫秒延迟？
 https://thx.github.io/mobile/300ms-click-delay
 https://stackoverflow.com/questions/12238587/eliminate-300ms-delay-on-click-events-in-mobile-safari&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;动态播放音频的问题&quot;&gt;动态播放音频的问题&lt;/h3&gt;
&lt;p&gt;H5页面动态播放音频，在iOS一直没有弄好，可能是页面动态添加音视频的缘故，动态播放一直有问题，从测试结果来看是我们自己的音频文件服务器不稳定导致的，无法动态预览mp3语音文件，只能通过调用原生app的方法播放声音&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;但音频播放问题&lt;br/&gt;https://www.ibm.com/developerworks/cn/web/wa-ioshtml5/index.html&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;下面是几个播放音频比较好的库个人十分推荐howler.js后续有类似需求也会直接使用这个库&lt;br/&gt;https://github.com/goldfire/howler.js#examples&lt;br/&gt;https://github.com/mediaelement/mediaelement&lt;br/&gt;https://github.com/CreateJS/SoundJS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;上线时间点&quot;&gt;上线时间点&lt;/h3&gt;
&lt;p&gt;本来说是8月15号上线，延期到8月底上线，但是由于我弄了两天发布脚本，研究了一天的部署环境，没有尽早提测，但是感觉主要是没有沟通到位，我从其他处得知这次功能要在月底一次发版，我就没在意，没有继续推进这个事，又在打磨一些细节，一个是调试音视频播放，一个是调试window.hostory接口尝试解决页面返回的问题，最后没解决和客户端协商解决，因此耽误了时间，下次在商谈好时间节点后要尽量按照时间节点来进行活动安排，时间点关键点要多沟通，上还是不能上，还是延期上都要有个明确的结论。&lt;/p&gt;
</description>
<pubDate>Sat, 22 Sep 2018 15:05:00 +0000</pubDate>
<dc:creator>buoge</dc:creator>
<og:description>此篇接上一篇： 移动端H5混合开发，Touch触控，拖拽，长按, 滑屏 实现方案 https://www.cnblogs.com/buoge/p/9346699.html app 场布设置已经上线了，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buoge/p/9691573.html</dc:identifier>
</item>
<item>
<title>访问Hsql .data数据库文件 - Code_Dog</title>
<link>http://www.cnblogs.com/dongjh/p/9691566.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongjh/p/9691566.html</guid>
<description>&lt;h2&gt;一、Hsql简介：&lt;/h2&gt;
&lt;p&gt;hsql数据库是一款纯Java编写的免费数据库，许可是BSD-style的协议。 仅一个hsqldb.jar文件就包括了数据库引擎，数据库驱动，还有其他用户界面操作等内容。下载地址：https://sourceforge.net/projects/hsqldb/files/hsqldb/。&lt;span&gt;其中hsqldb-2.4.x 开头的需要jdk8及以上，低于这个版本的比如hsqldb-2.2.9 jdk7可以用。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、Hsql文件结构：&lt;/h2&gt;
&lt;p&gt;数据库会包含如下文件:&lt;br/&gt;• finedb.properties&lt;br/&gt;• finedb.script&lt;br/&gt;• finedb.log&lt;br/&gt;• finedb.data&lt;br/&gt;• finedb.backup&lt;br/&gt;finedb.properties 文件包含关于数据库的一般设置。&lt;br/&gt;finedb.script 文件包含表和其它数据库,插入没有缓存表的数据。&lt;br/&gt;finedb.log 文件包含当前数据库的变更。&lt;br/&gt;finedb.data 文件包含缓存表的数据。&lt;br/&gt;finedb.backup 文件是最近持久化状态的表的数据文件的压缩备份文件&lt;br/&gt;&lt;span&gt;如果数据库没有缓存表，finedb.data finedb.backup文件将不会存在，数据也可能存在finedb.script文件中&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;三、访问过程：&lt;/h2&gt;
&lt;p&gt;1.把下载的jar包..\hsqldb-2.2.9\hsqldb\lib\hsqldb.jar放到hsql目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922221828267-1486227259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.把jar包添加到classpath环境变量中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922222117850-1440769695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.创建data目录把需要访问的文件放到此目录。&lt;span&gt;也可以自己创建新的数据库文件，在命令行进入data文件夹输入命令：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;D:\hsqldb\data&amp;gt;java org.hsqldb.Server -database finedb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922222152410-391556337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;span&gt;创建system.properties文件，dbname和port是随便指定的，&lt;span&gt;finedb的名字是要与需要访问的数据文件名字保持一致&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922222515346-751029461.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.打开命令窗口，进入当前文件夹输入服务端命令：java org.hsqldb.Server。提示成功数据库说明已经成功启动并连到.data文件了，如果提示sql有问题可以去finedb.script中修改脚本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922222831074-740622087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.打开另外一个命令窗口，进入当前文件夹输入客户端命令：java org.hsqldb.util.DatabaseManagerSwing会弹出窗口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922223508991-2026758220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922223448972-499886767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7.setting name随便写，URL中输入jdbc:hsqldb:hsql://localhost:8001/fineReportdb就可以成功连上db了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/442973/201809/442973-20180922223755048-877524627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;四、用代码访问Hsql数据库：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
     &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.Connection;

     &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.DriverManager;

     &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.ResultSet;

     &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.SQLException;

     &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.sql.Statement;

 

     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConnetcHsqlDb {

          &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {

               String url &lt;/span&gt;= &quot;jdbc:hsqldb:hsql://localhost:8001/fineReportdb&quot;&lt;span&gt;;

               String user &lt;/span&gt;= &quot;SA&quot;&lt;span&gt;;

               String password &lt;/span&gt;= &quot;&quot;&lt;span&gt;;

               &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {

                    Class.forName(&lt;/span&gt;&quot;org.hsqldb.jdbcDriver&quot;&lt;span&gt;);

                    Connection conn &lt;/span&gt;=&lt;span&gt; DriverManager.getConnection(url, user, password);

                    Statement state &lt;/span&gt;=&lt;span&gt; conn.createStatement();

                    ResultSet rs &lt;/span&gt;= state.executeQuery(&quot;SELECT FIRSTNAME,LASTNAME FROM customer&quot;&lt;span&gt;);

                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (rs.next()) {

                         System.out.print(rs.getString(&lt;/span&gt;&quot;FIRSTNAME&quot;) + &quot; &quot;&lt;span&gt;);

                         System.out.print(rs.getString(&lt;/span&gt;&quot;LASTNAME&quot;) + &quot; &quot;&lt;span&gt;);

                         System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);

                    }

               } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ClassNotFoundException e) {

                    e.printStackTrace();

               } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (SQLException e) {

                    e.printStackTrace();

               }

          }

     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 22 Sep 2018 15:02:00 +0000</pubDate>
<dc:creator>Code_Dog</dc:creator>
<og:description>一、Hsql简介： hsql数据库是一款纯Java编写的免费数据库，许可是BSD-style的协议。 仅一个hsqldb.jar文件就包括了数据库引擎，数据库驱动，还有其他用户界面操作等内容。下载地址</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongjh/p/9691566.html</dc:identifier>
</item>
<item>
<title>Python 列表详细使用 - |旧市拾荒|</title>
<link>http://www.cnblogs.com/xiaoyh/p/9689596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoyh/p/9689596.html</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;使用“=”直接将一个列表赋值给变量即可创建列表对象&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list = ['a', 'b', 'mpilgrim', 'z', 'example']&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list = []                              #创建空列表&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;26&quot;&gt;
&lt;p&gt;也可以使用list()函数将元组、range对象、字符串或其他类型的可迭代对象类型的数据转换为列表。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list = list((3,5,7,9,11))&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list&lt;br/&gt;&lt;span&gt;[3, 5, 7, 9, 11]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; list(range(1,10,2))&lt;br/&gt;&lt;span&gt;[1, 3, 5, 7, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; list('hello world')&lt;br/&gt;&lt;span&gt;['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = list()                            #创建空列表&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;当不再使用时，使用&lt;span&gt;del命令&lt;/span&gt;删除整个列表，如果列表对象所指向的值不再有其他对象指向，Python将同时删除该值。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; del a_list&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list&lt;br/&gt;&lt;span&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;File &quot;&amp;lt;pyshell#6&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;a_list&lt;/span&gt;&lt;br/&gt;&lt;span&gt;NameError: name 'a_list' is not defined&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;可以使用“+”运算符将元素添加到列表中。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3,4,5]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = aList + [7]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 7]&lt;/span&gt;&lt;br/&gt;严格意义上来讲，这并不是真的为列表添加元素，&lt;span&gt;而是创建了一个新列表&lt;/span&gt;，并将原列表中的元素和新元素依次复制到新列表的内存空间。由于涉及大量元素的复制，&lt;span&gt;该操作速度较慢&lt;/span&gt;，在涉及大量元素添加时不建议使用该方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;使用列表对象的append()方法在当前列表&lt;span&gt;尾部&lt;/span&gt;追加元素，&lt;span&gt;原地修改列表&lt;/span&gt;，是真正意义上的在列表尾部添加元素，&lt;span&gt;速度较快。&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.append(9)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 7, 9]&lt;/span&gt;&lt;br/&gt;所谓“原地”，是指&lt;span&gt;不改变列表在内存中的首地址。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;Python采用的是基于&lt;span&gt;值的自动内存管理方式&lt;/span&gt;，当为对象修改值时，并不是真的直接修改变量的值，而是使变量指向新的值，这对于Python所有类型的变量都是一样的。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a) 　　                         #返回对象的内存地址&lt;br/&gt;&lt;span&gt;20230752&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a)&lt;br/&gt;&lt;span&gt;20338208&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span&gt;列表中包含的是元素值的引用，而不是直接包含元素值。&lt;/span&gt;&lt;br/&gt;如果是直接修改序列变量的值，则与Python普通变量的情况是一样的&lt;br/&gt;如果是通过&lt;span&gt;下标&lt;/span&gt;来修改序列中元素的值或通过&lt;span&gt;可变序列对象自身提供的方法&lt;/span&gt;来增加和删除元素时，序列对象在内存中的起始地址是不变的，仅仅是被改变值的元素地址发生变化，也就是所谓的“&lt;span&gt;原地操作&lt;/span&gt;”。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,4]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; b = [1,2,3]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a == b&lt;br/&gt;&lt;span&gt;False&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)&lt;br/&gt;&lt;span&gt;False&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a[0]) == id(b[0])&lt;br/&gt;&lt;span&gt;True&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a)&lt;br/&gt;&lt;span&gt;25289752&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a.append(4)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a)&lt;br/&gt;&lt;span&gt;25289752&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a.remove(3)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;br/&gt;&lt;span&gt;[1, 2, 4]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a)&lt;br/&gt;&lt;span&gt;25289752&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a[0] = 5&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;br/&gt;&lt;span&gt;[5, 2, 4]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a)&lt;br/&gt;&lt;span&gt;25289752&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;25&quot;&gt;
&lt;p&gt;使用列表对象的extend()方法可以将另一个迭代对象的所有元素添加至该列表对象&lt;span&gt;尾部&lt;/span&gt;。通过extend()方法来增加列表元素也不改变其内存首地址，属于&lt;span&gt;原地操作。&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a.extend([7,8,9])&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;br/&gt;&lt;span&gt;[5, 2, 4, 7, 8, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(a)&lt;br/&gt;&lt;span&gt;25289752&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.extend([11,13])&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 7, 9, 11, 13]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.extend((15,17))&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;24&quot;&gt;
&lt;p&gt;使用列表对象的insert()方法将元素添加至列表的&lt;span&gt;指定位置。&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.insert(3, 6)                    #在下标为3的位置插入元素6&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;应&lt;span&gt;尽量从列表尾部进行元素的增加与删除操作。&lt;/span&gt;&lt;br/&gt;列表的insert()可以在列表的任意位置插入元素，但由于列表的自动内存管理功能，&lt;span&gt;insert()方法会引起插入位置之后所有元素的移动&lt;/span&gt;，这会影响处理速度。&lt;br/&gt;类似的还有后面介绍的remove()方法以及使用pop()函数弹出列表非尾部元素和使用del命令删除列表非尾部元素的情况。&lt;br/&gt;import time&lt;/p&gt;
&lt;p&gt;def Insert():&lt;br/&gt;a = []&lt;br/&gt;for i in range(10000):&lt;br/&gt;a.insert(0, i)&lt;/p&gt;
&lt;p&gt;def Append():&lt;br/&gt;a = []&lt;br/&gt;for i in range(10000):&lt;br/&gt;a.append(i)&lt;/p&gt;
&lt;p&gt;start = time.time()&lt;br/&gt;for i in range(10):&lt;br/&gt;Insert()&lt;br/&gt;print('Insert:', time.time()-start)&lt;/p&gt;
&lt;p&gt;start = time.time()&lt;br/&gt;for i in range(10):&lt;br/&gt;Append()&lt;br/&gt;print('Append:', time.time()-start)&lt;br/&gt;上面代码运行结果如下：&lt;br/&gt;&lt;span&gt;Insert: 0.578000068665&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Append: 0.0309998989105&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;34&quot;&gt;
&lt;p&gt;使用乘法来扩展列表对象，将列表与整数相乘，生成一个新列表，新列表是原列表中元素的重复。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3,5,7]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList = aList&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(aList)&lt;br/&gt;&lt;span&gt;57091464&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(bList)&lt;br/&gt;&lt;span&gt;57091464&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = aList*3&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 5, 7, 3, 5, 7, 3, 5, 7]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList&lt;br/&gt;&lt;span&gt;[3,5,7]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(aList)&lt;br/&gt;&lt;span&gt;57092680&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(bList)&lt;br/&gt;&lt;span&gt;57091464&lt;/span&gt;&lt;br/&gt;当使用*运算符将包含列表的列表重复并创建新列表时，并不是复制子列表值，而是&lt;span&gt;复制已有元素的引用&lt;/span&gt;。因此，当修改其中一个值时，相应的引用也会被修改。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [[None] * 2] * 3&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[[None, None], [None, None], [None, None]]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x[0][0] = 5&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[[5, None], [5, None], [5, None]]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [[1,2,3]] * 3&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x[0][0] = 10&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[[10, 2, 3], [10, 2, 3], [10, 2, 3]]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;使用del命令删除列表中的&lt;span&gt;指定位置&lt;/span&gt;上的元素。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list = [3,5,7,9,11]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; del a_list[1]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list&lt;br/&gt;&lt;span&gt;[3, 7, 9, 11]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;使用列表的pop()方法删除并返回指定位置（默认为最后一个）上的元素，如果给定的索引超出了列表的范围则抛出异常。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list = list((3,5,7,9,11))&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list.pop()&lt;br/&gt;&lt;span&gt;11&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list&lt;br/&gt;&lt;span&gt;[3, 5, 7, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list.pop(1)&lt;br/&gt;&lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list&lt;br/&gt;&lt;span&gt;[3, 7, 9]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;44&quot;&gt;
&lt;p&gt;使用列表对象的remove()方法删除&lt;span&gt;首次出现&lt;/span&gt;的指定元素，如果列表中不存在要删除的元素，则抛出异常。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list = [3,5,7,9,7,11]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list.remove(7)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; a_list&lt;br/&gt;&lt;span&gt;[3, 5, 9, 7, 11]&lt;/span&gt;&lt;br/&gt;代码编写好后必须要经过反复测试，不能满足于几次测试结果正确。例如，下面的代码成功地删除了列表中的重复元素，执行结果是完全正确的。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [1,2,1,2,1,2,1,2,1]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for i in x:&lt;br/&gt;           if i == 1:&lt;br/&gt;               x.remove(i)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[2, 2, 2, 2]&lt;/span&gt;&lt;br/&gt;然而，上面这段代码的逻辑是错误的。同样的代码，仅仅是所处理的数据发生了一点变化，然而当循环结束后却发现并没有把所有的“1”都删除，只是删除了一部分。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [1,2,1,2,1,1,1]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for i in x:&lt;br/&gt;　　    if i == 1:&lt;br/&gt;               x.remove(i)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[2, 2, 1]&lt;/span&gt;&lt;br/&gt;两组数据的本质区别在于，第一组数据中没有连续的“1”，而第二组数据中存在连续的“1”。出现这个问题的原因是&lt;span&gt;列表的自动内存管理功能。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在删除列表元素时，Python会自动对列表内存进行收缩并移动列表元素以保证所有元素之间没有空隙，增加列表元素时也会自动扩展内存并对元素进行移动以保证元素之间没有空隙。&lt;/span&gt;每当插入或删除一个元素之后，该元素位置后面所有元素的索引就都改变了。&lt;br/&gt;正确的代码：&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [1,2,1,2,1,1,1]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for i in x[::]:                          #切片&lt;br/&gt;           if i == 1:&lt;br/&gt;               x.remove(i)&lt;br/&gt;或者：&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [1,2,1,2,1,1,1]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(len(x)-1,-1,-1):                                    #从后往前删&lt;br/&gt;           if x[i]==1:&lt;br/&gt;              del x[i]&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;使用下标直接访问列表元素，如果指定下标不存在，则抛出异常。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[3]&lt;br/&gt;&lt;span&gt;6&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[3] = 5.5&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 5.5, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[15]&lt;br/&gt;&lt;span&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;File &quot;&amp;lt;pyshell#34&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;aList[15]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;IndexError: list index out of range&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;使用列表对象的index()方法获取指定元素首次出现的下标，若列表对象中不存在指定元素，则抛出异常。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 5.5, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.index(7)&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.index(100)&lt;br/&gt;&lt;span&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;File &quot;&amp;lt;pyshell#36&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;aList.index(100)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ValueError: 100 is not in list&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;使用列表对象的count()方法统计指定元素在列表对象中出现的次数。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 5, 5.5, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.count(7)&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.count(0)&lt;br/&gt;&lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.count(8)&lt;br/&gt;&lt;span&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;切片适用于列表、元组、字符串、range对象等类型，但作用于列表时功能最强大。可以使用切片来截取列表中的任何部分，得到一个新列表，也可以通过切片来修改和删除列表中部分元素，甚至可以通过切片操作为列表对象增加元素。&lt;br/&gt;切片使用2个冒号分隔的3个数字来完成：&lt;br/&gt;第一个数字表示切片开始位置（默认为0）。&lt;br/&gt;第二个数字表示切片截止（但不包含）位置（默认为列表长度）。&lt;br/&gt;第三个数字表示切片的步长（默认为1），当步长省略时可以顺便省略最后一个冒号。&lt;br/&gt;切片操作不会因为下标越界而抛出异常，而是简单地在列表尾部截断或者返回一个空列表，代码具有更强的健壮性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;55&quot;&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[::]                             #返回包含所有元素的新列表&lt;br/&gt;&lt;span&gt;[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[::-1]                           #逆序的所有元素&lt;br/&gt;&lt;span&gt;[17, 15, 13, 11, 9, 7, 6, 5, 4, 3]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[::2]                            #偶数位置，隔一个取一个&lt;br/&gt;&lt;span&gt;[3, 5, 7, 11, 15]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[1::2]                           #奇数位置，隔一个取一个&lt;br/&gt;&lt;span&gt;[4, 6, 9, 13, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[3::]                            #从下标3开始的所有元素&lt;br/&gt;&lt;span&gt;[6, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[3:6]                             #下标在[3, 6)之间的所有元素&lt;br/&gt;&lt;span&gt;[6, 7, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[0:100:1]                       #前100个元素，自动截断&lt;br/&gt;&lt;span&gt;[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[100:]                            #下标100之后的所有元素，自动截断&lt;br/&gt;&lt;span&gt;[]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[100]                             #直接使用下标访问会发生越界&lt;br/&gt;&lt;span&gt;IndexError: list index out of range&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;30&quot;&gt;
&lt;p&gt;可以使用切片来原地修改列表内容&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 5, 7]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[len(aList):] = [9]                       #在尾部追加元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 5, 7, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[:3] = [1, 2, 3]                            #替换前3个元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[1, 2, 3, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[:3] = []                                        #删除前3个元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = list(range(10))&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[::2] = [0]*5                                  #替换偶数位置上的元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[0, 1, 0, 3, 0, 5, 0, 7, 0, 9]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList[::2] = [0]*3                                    #切片不连续，两个元素个数必须一样多&lt;br/&gt;&lt;span&gt;ValueError: attempt to assign sequence of size 3 to extended slice of size 5&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;使用del与切片结合来删除列表元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3,5,7,9,11]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; del aList[:3]                                    #删除前3个元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[9, 11]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3,5,7,9,11]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; del aList[::2]                              #删除偶数位置上的元素&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[5, 9]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;切片返回的是列表元素的浅复制&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 5, 7]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList = aList                                    #bList与aList指向同一个内存&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList&lt;br/&gt;&lt;span&gt;[3, 5, 7]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList[1] = 8                                    #修改其中一个对象会影响另一个&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 8, 7]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList == bList                                #两个列表的元素完全一样&lt;br/&gt;&lt;span&gt;True&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList is bList                                 #两个列表是同一个对象&lt;br/&gt;&lt;span&gt;True&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(aList)                                        #内存地址相同&lt;br/&gt;&lt;span&gt;19061816&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(bList)&lt;br/&gt;&lt;span&gt;19061816&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;所谓浅复制，是指生成一个新的列表，并且把原列表中所有元素的引用都复制到新列表中。&lt;/span&gt;如果原列表中只包含整数、实数、复数等基本类型或元组、字符串这样的不可变类型的数据，一般是没有问题的。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 5, 7]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList = aList[::]                              #切片，浅复制&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList == bList                              #两个列表的元素完全一样&lt;br/&gt;&lt;span&gt;True&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList is bList                                  #但不是同一个对象&lt;br/&gt;&lt;span&gt;False&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; id(aList) == id(bList)                      #内存地址不一样&lt;br/&gt;&lt;span&gt;False&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList[1] = 8                                    #修改其中一个不会影响另一个&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList&lt;br/&gt;&lt;span&gt;[3, 8, 7]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 5, 7]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;19&quot;&gt;
&lt;p&gt;如果原列表中包含列表之类的可变数据类型，由于浅复制时只是把子列表的引用复制到新列表中，这样的话修改任何一个都会影响另外一个。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x = [1, 2, [3,4]]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; y = x[:]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x[0] = 5&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[5, 2, [3, 4]]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;br/&gt;&lt;span&gt;[1, 2, [3, 4]]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x[2].append(6)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br/&gt;&lt;span&gt;[5, 2, [3, 4, 6]]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;br/&gt;&lt;span&gt;[1, 2, [3, 4, 6]]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;38&quot;&gt;
&lt;p&gt;使用列表对象的sort()方法进行原地排序，支持多种不同的排序方法。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; import random&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; random.shuffle(aList)&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[3, 4, 15, 11, 9, 17, 13, 6, 7, 5]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.sort()                                 #默认是升序排序&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.sort(reverse = True)              #降序排序&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[17, 15, 13, 11, 9, 7, 6, 5, 4, 3]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.sort(key = lambda x:len(str(x)))                                   #按转换成字符串的长度排序&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[9, 7, 6, 5, 4, 3, 17, 15, 13, 11]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;30&quot;&gt;
&lt;p&gt;使用内置函数sorted()对列表进行排序并返回新列表&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[9, 7, 6, 5, 4, 3, 17, 15, 13, 11]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; sorted(aList)                                                      #升序排序&lt;br/&gt;&lt;span&gt;[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; sorted(aList,reverse = True)                                       #降序排序&lt;br/&gt;&lt;span&gt;[17, 15, 13, 11, 9, 7, 6, 5, 4, 3]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;18&quot;&gt;
&lt;p&gt;使用列表对象的reverse()方法将元素原地逆序&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList.reverse()&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList&lt;br/&gt;&lt;span&gt;[17, 15, 13, 11, 9, 7, 6, 5, 4, 3]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;22&quot;&gt;
&lt;p&gt;使用内置函数reversed()对列表元素进行逆序排列并返回迭代对象&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; newList = reversed(aList)                                          #返回reversed对象&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; list(newList)                                                               #把reversed对象转换成列表&lt;br/&gt;&lt;span&gt;[17, 15, 13, 11, 9, 7, 6, 5, 4, 3]&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for i in newList:&lt;br/&gt;           print(i, end=' ')                                             #这里没有输出内容&lt;br/&gt;                                                                               #迭代对象已遍历结束&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; newList = reversed(aList)                               #重新创建reversed对象&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for i in newList:&lt;br/&gt;           print(i, end=' ')&lt;br/&gt;&lt;span&gt;17 15 13 11 9 7 6 5 4 3&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;len(列表)：返回列表中的元素个数，同样适用于元组、字典、集合、字符串等。&lt;br/&gt;max(列表)、 min(列表)：返回列表中的最大或最小元素，同样适用于元组、字典、集合、range对象等。&lt;br/&gt;sum(列表)：对列表的元素进行求和运算，对非数值型列表运算需要指定start参数，同样适用于元组、range。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; sum(range(1, 11))                                     #sum()函数的start参数默认为0&lt;br/&gt;&lt;span&gt;55&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; sum(range(1, 11), 5)                                 #指定start参数为5，等价于5+sum(range(1,11))&lt;br/&gt;&lt;span&gt;60&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; sum([[1, 2], [3], [4]], [])                                #这个操作占用空间较大，慎用&lt;br/&gt;&lt;span&gt;[1, 2, 3, 4]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;zip()函数返回可迭代的zip对象。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; aList = [1, 2, 3]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; bList = [4, 5, 6]&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; cList = zip(a, b)                                       #返回zip对象&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; cList&lt;br/&gt;&lt;span&gt;&amp;lt;zip object at 0x0000000003728908&amp;gt;&lt;/span&gt;&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; list(cList)                                                  #把zip对象转换成列表&lt;br/&gt;&lt;span&gt;[(1, 4), (2, 5), (3, 6)]&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;enumerate(列表):枚举列表元素，返回枚举对象，其中每个元素为包含下标和值的元组。该函数对元组、字符串同样有效。&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; for item in enumerate('abcdef'):&lt;br/&gt;           print(item)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(0, 'a')&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(1, 'b')&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(2, 'c')&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(3, 'd')&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(4, 'e')&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(5, 'f')&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 22 Sep 2018 15:00:00 +0000</pubDate>
<dc:creator>|旧市拾荒|</dc:creator>
<og:description>1. 列表 列表是Python中内置有序、可变序列，列表的所有元素放在一对中括号“[]”中，并使用逗号分隔开； 当列表元素增加或删除时，列表对象自动进行扩展或收缩内存，保证元素之间没有缝隙； 在Pyt</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoyh/p/9689596.html</dc:identifier>
</item>
</channel>
</rss>