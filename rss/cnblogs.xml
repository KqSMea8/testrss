<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>超出JavaScript安全整数限制的数字计算-BigInt - wangmeijian</title>
<link>http://www.cnblogs.com/wangmeijian/p/9217352.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangmeijian/p/9217352.html</guid>
<description>&lt;p&gt;JavaScript中的基本数据类Number是双精度浮点数，它可以表示的最大安全范围是正负9007199254740991，也就是2的53次方减一，在浏览器控制台分别输入Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER可查看对应的最大/小值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
const max =&lt;span&gt; Number.MAX_SAFE_INTEGER;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 9_007_199_254_740_991&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注意：为了便于阅读，我使用下划线作为分隔符将这些数字分组为千位数。数字文字分隔符提案对普通的JavaScript数字文字使用正确。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将这个最大值加一，可以得到预期的结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
max + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 9_007_199_254_740_992 ✅&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;但是，如果我们再次增加它，结果不再可以完全表示为JavaScript &lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
max + 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 9_007_199_254_740_992 ❌&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们会发现max+1和max+2的结果一样。&lt;span&gt;&lt;span&gt;只要我们在JavaScript中获得这个特定的值，就无法判断它是否准确。&lt;/span&gt;&lt;span&gt;对安全整数范围以外的整数（即从&lt;/span&gt;&lt;/span&gt;&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;&lt;span&gt;到&lt;/span&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;span&gt;&lt;span&gt;）的&lt;/span&gt;&lt;span&gt;任何计算&lt;/span&gt;&lt;span&gt;可能会失去精度。&lt;/span&gt;&lt;span&gt;出于这个原因，我们只能依靠安全范围内的数字整数值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;是JavaScript中的一个新的原始类型，可以用&lt;/span&gt;任意精度&lt;span&gt;&lt;span&gt;表示整数&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;，即使超出JavaScript &lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的安全整数限制，也可以安全地存储和操作大整数&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;chrome 67+开始支持BigInt，本文所有demo都是基于chrome 67。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要创建一个&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;，在数字后面添加n后缀即可，&lt;/span&gt;&lt;span&gt;&lt;span&gt;例如，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;123&lt;/code&gt;&lt;span&gt;变成&lt;/span&gt;&lt;code&gt;123n&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;全局&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt(number)&lt;/code&gt;&lt;span&gt;函数可以用来将Number转换&lt;/span&gt;&lt;span&gt;成&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;换句话说，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt(123) === 123n&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;让我们用这两种技术来解决我们之前遇到的问题：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
BigInt(Number.MAX_SAFE_INTEGER) +&lt;span&gt; 2n;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 9_007_199_254_740_993n ✅&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们将两个&lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;相乘&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1234567890123456789 * 123&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 151851850485185200000 ❌&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看上面两个数字，末尾分别是9和3，9*3=27，然而结果末尾却是000，明显是错误的，&lt;span&gt;让我们用&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;代替：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1234567890123456789n *&lt;span&gt; 123n;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 151851850485185185047n ✅&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这次我们得到了正确的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的安全整数限制&lt;/span&gt;&lt;span&gt;不适用于&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;因此，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;我们可以执行正确的整数运算而不必担心失去精度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;是JavaScript语言中的一个原始类型。&lt;/span&gt;&lt;span&gt;因此，可以使用&lt;/span&gt;&lt;/span&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;span&gt;&lt;span&gt;操作符&lt;/span&gt;&lt;span&gt;检测到这种类型&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;typeof&lt;/span&gt; 123&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 'number'&lt;/span&gt;
&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; 123n;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 'bigint'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;因为&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;s是一个单独的类型，所以a &lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;永远不会等于a &lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;，例如 &lt;/span&gt;&lt;code&gt;42n !== 42&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;要比较a &lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;和a &lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;&lt;span&gt;，在比较之前将其中&lt;/span&gt;&lt;span&gt;一个&lt;/span&gt;&lt;span&gt;转换为另一个的类型或使用abstract equal（&lt;/span&gt;&lt;/span&gt;&lt;code&gt;==&lt;/code&gt;&lt;span&gt;）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;devsite-code-button-wrapper&quot; readability=&quot;28&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
42n === BigInt(42&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → true&lt;/span&gt;
42n == 42&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当强制转换为布尔型（使用&lt;/span&gt;&lt;code&gt;if&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;||&lt;/code&gt;&lt;span&gt;，或&lt;/span&gt;&lt;code&gt;Boolean(int)&lt;/code&gt;&lt;span&gt;），&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;按照和Number相同的逻辑转换&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (0n) {
  console.log(&lt;/span&gt;'if'&lt;span&gt;);
} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
  console.log(&lt;/span&gt;'else'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → logs 'else', because `0n` is falsy.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;运算符&lt;/h3&gt;
&lt;p&gt;BigInt支持最常见的运算符，二元运算符+、-、*、**、/、%都正常工作，按位操作&lt;code&gt;|&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;span&gt;， &lt;/span&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;和Number是一样的&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
(7 + 6 - 5) * 4 ** 3 / 2 % 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 1&lt;/span&gt;
(7n + 6n - 5n) * 4n ** 3n / 2n %&lt;span&gt; 3n;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 1n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;一元运算符&lt;/span&gt;&lt;code&gt;-&lt;/code&gt;&lt;span&gt;可以用来表示一个负值&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;，例如&lt;/span&gt;&lt;code&gt;-42n&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;一元&lt;/span&gt;&lt;/span&gt;&lt;code&gt;+&lt;/code&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;不支持的，因为它会破坏asm.js代码，在asm.js中&lt;/span&gt;&lt;code&gt;+x&lt;/code&gt;&lt;span&gt;总是抛出&lt;/span&gt;&lt;span&gt;异常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;另外一个问题是，不允许在&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;之间混合运算&lt;/span&gt;&lt;span&gt;。看看&lt;/span&gt;&lt;span&gt;这个例子：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
BigInt(Number.MAX_SAFE_INTEGER) + 2.5&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → ?? 🤔&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;结果应该是什么？&lt;/span&gt;&lt;span&gt;这里没有好的答案。&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;不能表示小数，并且 &lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;不能表示&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;超出安全整数限制的数字。&lt;/span&gt;&lt;span&gt;因此，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;Number&lt;/code&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;之间&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;混合操作会&lt;/span&gt;&lt;span&gt;导致&lt;/span&gt;&lt;/span&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;span&gt;异常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个规则的唯一例外是比较运算符，比如&lt;/span&gt;&lt;code&gt;===&lt;/code&gt;&lt;span&gt;（如前所述） &lt;/span&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;span&gt;，并且&lt;/span&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;span&gt;- 因为它们返回布尔值，所以不存在精度损失的风险。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1 +&lt;span&gt; 1n;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → TypeError&lt;/span&gt;
123 &amp;lt;&lt;span&gt; 124n;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;全局&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;构造函数与构造函数&lt;/span&gt;&lt;code&gt;Number类似&lt;/code&gt;&lt;span&gt;：将其参数转换为&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;（如前所述）。&lt;/span&gt;&lt;span&gt;如果转换失败，它抛出一个&lt;/span&gt;&lt;/span&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;span&gt;或 &lt;/span&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;span&gt;异常。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
BigInt(123&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 123n&lt;/span&gt;
BigInt(1.5&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → RangeError&lt;/span&gt;
BigInt('1.5'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → SyntaxError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;两个库函数启用将&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;值&lt;/span&gt;&lt;span&gt;封装&lt;/span&gt;&lt;span&gt;为有符号或无符号整数，限于特定的位数。&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt.asIntN(width, value)&lt;/code&gt;&lt;span&gt;将一个&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;值&lt;/span&gt;&lt;span&gt;包装&lt;/span&gt;&lt;span&gt;为一个 &lt;/span&gt;&lt;/span&gt;&lt;code&gt;width&lt;/code&gt;&lt;span&gt;-digit二进制有符号整数，并将&lt;/span&gt;&lt;code&gt;BigInt.asUintN(width, value)&lt;/code&gt;&lt;span&gt;一个&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;值&lt;/span&gt;&lt;span&gt;包装&lt;/span&gt;&lt;span&gt;为一个&lt;/span&gt;&lt;/span&gt;&lt;code&gt;width&lt;/code&gt;&lt;span&gt;&lt;span&gt;-digit二进制无符号整数。&lt;/span&gt;&lt;span&gt;例如，如果您正在执行64位算术，则可以使用这些API来保持适当的范围：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Highest possible BigInt value that can be represented as a&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; signed 64-bit integer.&lt;/span&gt;
const max = 2n ** (64n - 1n) -&lt;span&gt; 1n;
BigInt.asIntN(&lt;/span&gt;64&lt;span&gt;, max);
→ 9223372036854775807n
BigInt.asIntN(&lt;/span&gt;64, max +&lt;span&gt; 1n);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → -9223372036854775808n&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   ^ negative because of overflow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;请注意，只要我们传递&lt;/span&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;超过64位整数范围的值（例如，绝对数值为63位+符号为1位）&lt;/span&gt;&lt;span&gt;，就会发生溢出&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;span&gt;&lt;span&gt;可以准确地表示64位有符号和无符号整数，这些常用于其他编程语言。&lt;/span&gt;&lt;span&gt;两种新类型的数组风格，&lt;/span&gt;&lt;/span&gt;&lt;code&gt;BigInt64Array&lt;/code&gt;&lt;span&gt;并且 &lt;/span&gt;&lt;code&gt;BigUint64Array&lt;/code&gt;&lt;span&gt;更容易有效地表示和操作这些值的列表：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
const view = &lt;span&gt;new&lt;/span&gt; BigInt64Array(4&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → [0n, 0n, 0n, 0n]&lt;/span&gt;
&lt;span&gt;view.length;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 4&lt;/span&gt;
view[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 0n&lt;/span&gt;
view[0] =&lt;span&gt; 42n;
view[&lt;/span&gt;0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 42n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;BigInt64Array&lt;/code&gt;&lt;span&gt;确保其值是64位有符号的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Highest possible BigInt value that can be represented as a&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; signed 64-bit integer.&lt;/span&gt;
const max = 2n ** (64n - 1n) -&lt;span&gt; 1n;
view[&lt;/span&gt;0] =&lt;span&gt; max;
view[&lt;/span&gt;0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → 9_223_372_036_854_775_807n&lt;/span&gt;
view[0] = max +&lt;span&gt; 1n;
view[&lt;/span&gt;0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; → -9_223_372_036_854_775_808n&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   ^ negative because of overflow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;BigUint64Array确保这些值是&lt;/code&gt;&lt;span&gt;64位无符号的。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 23 Jun 2018 15:23:00 +0000</pubDate>
<dc:creator>wangmeijian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangmeijian/p/9217352.html</dc:identifier>
</item>
<item>
<title>Python3 与 C# 面向对象之～继承与多态 - 鲲逸鹏</title>
<link>http://www.cnblogs.com/dotnetcrazy/p/9219226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dotnetcrazy/p/9219226.html</guid>
<description>&lt;p&gt;Python的多继承最好是当C#或者Java里面的接口使用，这样结构不会混乱(&lt;strong&gt;特殊情况除外&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;来个例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;飞的方法&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;跑的方法&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;鸭子会飞也会跑&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和C#一样，Python的 &lt;strong&gt;父类构造函数不会被继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实从资源角度也不应该被继承，如果有1w个子类，那每个子类里面都有一个父类方法，想想这是多么浪费的一件事情？&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;2.3.CSharp继承&quot;&gt;2.3.CSharp继承&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9219226.html#2.3.CSharp继承&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下课后，小明认真思考总结，然后对照Python写下了C#版的继承：&lt;/p&gt;
&lt;p&gt;定义一个人类&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//People&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Age: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//People&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Age: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义一个学生类&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#region 属性&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 学校&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;School&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 班级&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StrClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 学号&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StrNum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endregion&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#region 构造函数&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 调用父类构造函数&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;name&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;age&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;School&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrNum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;cp&quot;&gt;#endregion&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// new-隐藏&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Student&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Age: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; School: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;School&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; strClass: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; strNum: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// override-覆盖&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Student&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Age: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; School: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;School&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; strClass: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; strNum: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;北京大学&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;01001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;3-多态&quot;&gt;3 多态&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9219226.html#3-多态&quot;&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;3.1.Python&quot;&gt;3.1.Python&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9219226.html#3.1.Python&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;说多态之前说说类型判断，以前我们用&lt;code&gt;type()&lt;/code&gt; or &lt;code&gt;isinstance()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;判断一个变量和另一个变量是否是同一个类型&lt;/strong&gt;==&amp;gt; &lt;code&gt;type(a)==type(b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;判断一个变量是否是某个类型&lt;/strong&gt;==&amp;gt; &lt;code&gt;type(a)==A&lt;/code&gt; or &lt;code&gt;isinstance(a,A)&lt;/code&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 23 Jun 2018 15:21:00 +0000</pubDate>
<dc:creator>鲲逸鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dotnetcrazy/p/9219226.html</dc:identifier>
</item>
<item>
<title>轻松搭建CAS 5.x系列(2)-搭建HTTPS的SSO SERVER端 - 自助土豆</title>
<link>http://www.cnblogs.com/jpeanut/p/9219235.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jpeanut/p/9219235.html</guid>
<description>&lt;p&gt;&lt;span&gt;概要说明&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;CAS要求，必须使用HTTPS的服务，否则就只等实现登录，无法实现单点登录。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;科普下HTTPS，网站有HTTP和HTTPS两种协议。HTTP是浏览器到网站之间是明文传输，比如你输入帐号名和密码点击登录，那帐号名和密码在中间传输过程中有泄漏的风险。HTTPS是浏览器和网站之间加密传输，使用的非对称加密方式，所以非常安全。目前各大网站的登录基本都是用了HTTPS服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上一篇文章《轻松搭建CAS系列(1)-使用cas overlay搭建SSO SERVER 服务端》中，我们搭建了HTTP的CAS SERVER，在登录画面中有2个错误提示，其中一个就是使用了非加密协议的错误。本文就是来解决这个问题的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180623231942480-1498926354.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;操作步骤&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;1. 设置域名&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SSL证书是基于域名的，如果您有自己的域名，请将域名指向到您的测试服务器。如果您没有自己的域名，那自己模拟个域名吧，暂且使用 cas.example.org 。在测试的电脑上，设置hosts将该域名指向到当前服务器。具体设置方式如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开文件C:\Windows\System32\drivers\etc\hosts添加如下行&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;    cas.example.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;2. 生成SSL证书&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果是正式对外的话，需要购买正式的SSL证书，阿里云和腾讯云都有。本文只是用于测试，只需要本地生成个SSL证书即可。购买的证书和自己生成证书的差别么，其一没那么的安全，其二浏览器不识别，访问时会有安全警告。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生成证书的步骤是&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;d:\
cd 
D:\casoverlay
keytool &lt;/span&gt;-genkey -alias cas -keyalg RSA -keysize &lt;span&gt;2048&lt;/span&gt; -keypass changeit -storepass changeit -keystore casexample.keystore -dname &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CN=http://cas.example.org/,OU=casexample.com,O=casexample,L=casexample,ST=casexample,C=CN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -deststoretype pkcs12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180623231904398-1691521018.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3. Tomcat开启HTTPS服务，导入证书&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Tomcat默认情况下是打开HTTP服务的，HTTPS的服务是需要手动开发的，具体打开步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开文件D:\casoverlay\apache-tomcat-8.5.31\conf\server.xml，增加如下配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Connector &lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;=&quot;8443&quot;&lt;/span&gt;&lt;span&gt; protocol&lt;/span&gt;&lt;span&gt;=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;&lt;/span&gt;&lt;span&gt;
maxThreads&lt;/span&gt;&lt;span&gt;=&quot;150&quot;&lt;/span&gt;&lt;span&gt; SSLEnabled&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SSLHostConfig&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Certificate &lt;/span&gt;&lt;span&gt;certificateKeystoreFile&lt;/span&gt;&lt;span&gt;=&quot;D:/casoverlay/casexample.keystore&quot;&lt;/span&gt;&lt;span&gt;
　　　　　　certificateKeystorePassword&lt;/span&gt;&lt;span&gt;=&quot;changeit&quot;&lt;/span&gt;&lt;span&gt;
　　　　　　type&lt;/span&gt;&lt;span&gt;=&quot;RSA&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;SSLHostConfig&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Connector&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;4. 启动Tomcat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行D:\casoverlay\apache-tomcat-8.5.31\bin\startup.bat&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5. 访问CAS服务并登录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://cas.example.org:8443/cas&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180623231712709-915306580.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;可以看到安全的错误提示已经没有了&lt;/span&gt;&lt;br/&gt;&lt;span&gt;输入帐号名和密码：casuser/Mellon&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180623231734902-2043158679.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;恭喜您，HTTPS的CAS服务器已经搭建好了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，大家想更多CAS了解的话，可以来[CAS中文文档站点](http://www.cassso-china.cn)（http://www.cassso-china.cn）来瞅瞅。&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180623231805477-342975938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 23 Jun 2018 15:20:00 +0000</pubDate>
<dc:creator>自助土豆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jpeanut/p/9219235.html</dc:identifier>
</item>
<item>
<title>django2+uwsgi+nginx上线部署到服务器Ubuntu16.04（最新最详细版） - 雪落忆海</title>
<link>http://www.cnblogs.com/xuepangzi/p/9219207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuepangzi/p/9219207.html</guid>
<description>&lt;h2&gt;1.打开Terminal终端，执行以下命令，将项目所需要的依赖包，都记录到一个文件内备用。&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip freeze &amp;gt;requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623134242464-797442444.png&quot; alt=&quot;&quot; width=&quot;702&quot; height=&quot;508&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.将项目文件夹→右键→添加压缩文件，压缩为zip包&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623135049096-856334713.png&quot; alt=&quot;&quot; width=&quot;256&quot; height=&quot;209&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623135116036-1246920084.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.准备软件&lt;/h2&gt;
&lt;h3&gt;1.xshell（用于远程操作服务器）&lt;/h3&gt;
&lt;h3&gt;2.FileZilla（用于从客户端将项目包上传到服务器）&lt;/h3&gt;
&lt;h3&gt;3.Navicat 12 （用于同步数据库）&lt;/h3&gt;
&lt;h2&gt;4.环境&lt;/h2&gt;
&lt;h3&gt;云服务器/云主机：京东云&lt;/h3&gt;
&lt;p&gt;（云服务还是要选大厂的，我也试过一些比较小的厂的云服务，不说是哪家了，哇，简直是坑啊，各种报错各种什么都安不上。友情提醒，云服务还是要在腾讯云、阿里云、百度云、金山云、京东云、网易云这些里面选用吧。国外的像亚马逊啊，虽然云计算的技术上可能领先于国内云，价格也更加公道，但是，有些事，大家应该懂得，所以，贵是贵了点，还是选国内的吧。）&lt;/p&gt;
&lt;h3&gt;系统：Ubuntu16.04 64位&lt;/h3&gt;


&lt;h2&gt;1.使用xshell链接云服务器/云主机系统（云服务器和云主机在这里概念差不多可以等同，后面都叫云服务器）&lt;/h2&gt;
&lt;h3&gt;1.打开xshell→【文件】→【新建】，输入你云服务器的公网ip&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623140905642-76262972.png&quot; alt=&quot;&quot; width=&quot;537&quot; height=&quot;362&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2.选择刚刚建立的会话，然后点【连接】&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623141507204-714737708.png&quot; alt=&quot;&quot; width=&quot;434&quot; height=&quot;265&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.输入登录用户名：root&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623141724609-412508524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4.输入登录密码&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623141813765-359166225.png&quot; alt=&quot;&quot; width=&quot;325&quot; height=&quot;294&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5.连接成功&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623142011642-1970847485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.新建用户ubuntu&lt;/h2&gt;
&lt;h3&gt;1.执行命令&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;adduser ubuntu
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置密码&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;确认密码&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;设置姓&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;设置名&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;设置电话&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;设置家庭电话&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;除了密码以为，其他的这些信息用处不大&lt;/span&gt;
y+&lt;span&gt;回车
cd &lt;/span&gt;/home &lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换到家目录下&lt;/span&gt;
ls &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看家目录下的目录，可以看到ubuntu的目录已经建立&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623142457081-490345573.png&quot; alt=&quot;&quot; width=&quot;581&quot; height=&quot;364&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.切换用户ubuntu&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623162102185-58813571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.给普通用户ubuntu添加权限&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换回root用户&lt;/span&gt;
&lt;span&gt;su root
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输入root登录密码&lt;/span&gt;
chmod u+w /etc/sudoers &lt;span&gt;#&lt;/span&gt;&lt;span&gt;给sudoers增加写权利&lt;/span&gt;
vim /etc/sudoers&lt;span&gt;#&lt;/span&gt;&lt;span&gt;编辑sudoers，在找到这行 root ALL=(ALL) ALL,在他下面添加ubuntu     ALL=(ALL)     NOPASSWD: ALL&lt;/span&gt;
chmod u-w /etc/sudoers&lt;span&gt;#&lt;/span&gt;&lt;span&gt;取消sudoers的写权利&lt;/span&gt;
su ubuntu &lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换会ubuntu用户&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;vim编辑器常用命令&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;英文输入法模式下，i键进入编辑模式，可以通过上下左右键移动光标，进行编辑内容&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;英文输入法模式下，Esc键 退出编辑模式，输入:wq 保存并退出，输入q不保存退出，输入q！强行退出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1.安装mysql数据库&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
sudo apt-get install mysql-server -&lt;span&gt;y
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置密码：（不显示，请将密码设置的与客户端上数据库密码一致，方便使用）&lt;/span&gt;
sudo apt-get install mysql-&lt;span&gt;client
sudo apt&lt;/span&gt;-get install libmysqlclient-dev -y
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.配置远程连接权限&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
su root &lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换root用户&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;root 登录密码&lt;/span&gt;
vim /etc/mysql/mysql.conf.d/&lt;span&gt;mysqld.cnf 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 英文输入环境下，敲 i 键，进入插入模式&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;上下左右键移动光标，注释掉 bind-address = 127.0.0.1&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;英文输入环境下，敲Esc键，输入:wq 保存退出&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql -u root -&lt;span&gt;p
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输入密码（不显示），登录mysql&lt;/span&gt;
&lt;span&gt;
GRANT ALL PRIVILEGES ON &lt;/span&gt;*.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; WITH GRANT OPTION;

flush privileges;

quit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;用Navicat链接服务器数据库，如果报错：&lt;/span&gt;
fuser -k 3306/&lt;span&gt;tcp
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将客户端数据库通过数据传输，传输到服务器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 3.使用Navicat 12 同步数据库&lt;/h2&gt;
&lt;h3&gt;1.创立连接&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623165028784-774702742.png&quot; alt=&quot;&quot; width=&quot;578&quot; height=&quot;273&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.建立本地连接&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623174830292-68845992.png&quot; alt=&quot;&quot; width=&quot;393&quot; height=&quot;314&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.建立服务器链接&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623180634775-603410850.png&quot; alt=&quot;&quot; width=&quot;398&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4.传输数据库&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623180836413-1879713441.png&quot; alt=&quot;&quot; width=&quot;490&quot; height=&quot;366&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623181021295-996474341.png&quot; alt=&quot;&quot; width=&quot;528&quot; height=&quot;233&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点击【开始】等待传完100%&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623181147435-64158653.png&quot; alt=&quot;&quot; width=&quot;513&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5.查看一下数据库是否上传成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysql -u root -&lt;span&gt;p
show databases;&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看所有数据库&lt;/span&gt;
quit &lt;span&gt;#&lt;/span&gt;&lt;span&gt;退出数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623181609075-1531134333.png&quot; alt=&quot;&quot; width=&quot;469&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.取消远程连接数据库权限&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
vim /etc/mysql/mysql.conf.d/&lt;span&gt;mysqld.cnf
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 英文输入环境下，敲 i 键，进入插入模式&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;上下左右键移动光标，去掉 bind-address = 127.0.0.1这行的注释&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;英文输入环境下，敲Esc键，输入:wq 保存退出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
su ubuntu &lt;span&gt;#&lt;/span&gt;&lt;span&gt;切换回ubuntu用户&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.使用FileZilla上传项目zip包&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623184011853-1771264764.png&quot; alt=&quot;&quot; width=&quot;642&quot; height=&quot;347&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623184333409-1652795715.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.解压项目zip包&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo apt install unzip
unzip xueyiwang.zip &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623184646318-1444821949.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
sudo add-apt-repository ppa:fkrull/deadsnakes &lt;span&gt;#&lt;/span&gt;&lt;span&gt;然后会提示你敲击回车键&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;回车&lt;/span&gt;
sudo apt-get install python-software-properties -&lt;span&gt;y
sudo apt&lt;/span&gt;-&lt;span&gt;get update
sudo apt&lt;/span&gt;-get install python3.6-dev python3.6-venv -&lt;span&gt;y

sudo apt install python&lt;/span&gt;-pip -y
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1.安装依赖包&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
python3.6 -&lt;span&gt;m venv env36
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在当前目录下，创建一个python3.6的虚拟环境，取名为env36，目前自带虚拟环境只支持到3.6.2&lt;/span&gt;
&lt;span&gt;
. env36&lt;/span&gt;/bin/&lt;span&gt;activate
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;进入虚拟环境&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;退出虚拟环境 deactivate&lt;/span&gt;
&lt;span&gt;

cd xueyiwang
pip3 install &lt;/span&gt;-&lt;span&gt;r requirments.txt
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;安装相关依赖包，其中requirments.txt，是在客户端时，通过pip freeze &amp;gt; requirments.txt获得&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;这个过程也许需要多等一会，比较low一点的云服务就慢一些，亲身体验，bat里，百度的最慢&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;有可能pip要升级，如果版本过时，会提示用户更新命令的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623185611419-971429142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.修改settings.py&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd xueyiwang
vim settings.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623205114831-229203786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;进入settings.py文件中，点击i键，变为编辑模式&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;通过上下左右键移动光标&lt;/span&gt;
ALLOWED_HOSTS = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;公网ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在最底追加&lt;/span&gt;
STATIC_ROOT=os.path.join(BASE_DIR,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;static/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;然后敲Esc键，输入:wq 保存退出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623205325211-995779645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623205441016-156692188.png&quot; alt=&quot;&quot; width=&quot;476&quot; height=&quot;249&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.测试运行项目&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd ..
python manage.py runserver &lt;/span&gt;0.0.0.0:8000 
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;浏览器访问：公网ip+8000 &lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;发现啥都有啦！&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;ctrl+c退出项目运行状态&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623205929816-213880925.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623211447834-465758912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;1.安装&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
cd ~&lt;span&gt;
pip3 install uwsgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623210903839-1310433230.png&quot; alt=&quot;&quot; width=&quot;632&quot; height=&quot;177&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.检测是否安装成功&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd xueyiwang
uwsgi &lt;/span&gt;--http :8000 --&lt;span&gt;module xueyiwang.wsgi

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过uwsgi启动项目，这一步必须在项目目录下操作执行&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;ctrl+C键关闭项目服务状态&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;fuser -k 8000/tcp&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;关闭8000端口占用&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;浏览器访问公网ip+8000 仍然可以正常访问，证明uwsgi安装成功&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623211135689-533425742.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623211447834-465758912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;1.安装nginx&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd ..
sudo apt install nginx &lt;/span&gt;-y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623211803937-659375878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.配置uwsgi与nginx连接&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd xueyiwang
cp &lt;/span&gt;/etc/nginx/uwsgi_params .   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在项目目录下执行，注意后面这个点儿别落下 &lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;回到~目录下&lt;/span&gt;
cd ..
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623212028846-1084149613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.配置uwsgi.ini&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;vim uwsgi.ini
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;进入uwsgi.ini，然后在英文输入下敲i键，进入插入模式，将以下内容填充进去（通过敲i键进入插入模式这一步不能省略，不然粘贴进去的内容会部分丢失）&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;然后在英文输入下，Esc键，然后输入冒号wq+回车，保存退出。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[uwsgi]
chdir&lt;/span&gt;=/home/ubuntu/&lt;span&gt;xueyiwang
module&lt;/span&gt;=&lt;span&gt;xueyiwang.wsgi:application
home&lt;/span&gt;=/home/ubuntu/&lt;span&gt;env36
master&lt;/span&gt;=&lt;span&gt;true
processes&lt;/span&gt;=10&lt;span&gt;
socket&lt;/span&gt;=:8001&lt;span&gt;
chmod&lt;/span&gt;-socket = 666&lt;span&gt;
vacuum&lt;/span&gt;=true
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623222103984-642795592.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.配置nginx&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;cd 到项目目录下&lt;/span&gt;
&lt;span&gt;vim xueyiwang_nginx.conf
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;新建进入了nginx.conf文件&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;在英文输入法下，敲i键，进入可插入模式&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;粘贴以下内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;upstream django {
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; server unix:/root/xueyiwang/xueyiwang.sock; # for a file socket&lt;/span&gt;
    server 127.0.0.1:8001; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; for a web port socket (we'll use this first)&lt;/span&gt;
&lt;span&gt;}
 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; configuration of the server&lt;/span&gt;
&lt;span&gt;server {
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; the port your site will be served on&lt;/span&gt;
    listen      8000&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; the domain name it will serve for&lt;/span&gt;
    server_name .example.com; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; substitute your machine's IP address or FQDN&lt;/span&gt;
    charset     utf-8&lt;span&gt;;
 
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; max upload size&lt;/span&gt;
    client_max_body_size 75M;   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; adjust to taste&lt;/span&gt;
 
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Django media&lt;/span&gt;
    location /&lt;span&gt;media  {
        alias &lt;/span&gt;/home/ubuntu/xueyiwang/media;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; your Django project's media files - amend as required&lt;/span&gt;
&lt;span&gt;    }
 
    location &lt;/span&gt;/&lt;span&gt;static {
        alias &lt;/span&gt;/home/ubuntu/xueyiwang/static; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; your Django project's static files - amend as required&lt;/span&gt;
&lt;span&gt;    }
 
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Finally, send all non-media requests to the Django server.&lt;/span&gt;
    location /&lt;span&gt; {
        uwsgi_pass  django;
        include   &lt;/span&gt;/home/ubuntu/xueyiwang/uwsgi_params; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; the uwsgi_params file you installed&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623223717060-430233636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.建立软链接&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 sudo ln -s /home/ubuntu/xueyiwang/xueyiwang_nginx.conf /etc/nginx/sites-enabled/ 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623223941052-2077107900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6.手机静态文件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;cd 到项目目录下执行&lt;/span&gt;
&lt;span&gt;python manage.py collectstatic
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623224614708-1798780172.png&quot; alt=&quot;&quot; width=&quot;460&quot; height=&quot;91&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623224820306-378752426.png&quot; alt=&quot;&quot; width=&quot;465&quot; height=&quot;169&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 7.最后测试&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;修改settings.py中&lt;/span&gt;
DEBUG =&lt;span&gt; False
cd &lt;/span&gt;~&lt;span&gt;
sudo service nginx restart
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;重启nginx&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;启动uwsgi&lt;/span&gt;
uwsgi --&lt;span&gt;ini uwsgi.ini
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;浏览器访问http://公网ip:8000 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623225514772-1636872031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623225555677-841363224.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;浏览器访问公网ip+:8000 可以看到，能够正常访问，静态文件和媒体文件都在，说明nginx代理正常。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623225749819-1368589141.png&quot; alt=&quot;&quot; width=&quot;636&quot; height=&quot;428&quot;/&gt;&lt;/p&gt;




&lt;h2&gt;跟着一步一步做下来，应该都可以部署项目成功啦吧？如果遇到了什么报错，可以加我微信来问我^_^。&lt;/h2&gt;
&lt;h3&gt;赞赏5元&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623230451092-317915110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;我的微信&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180623230556006-163076398.png&quot; alt=&quot;&quot; width=&quot;295&quot; height=&quot;287&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 23 Jun 2018 15:07:00 +0000</pubDate>
<dc:creator>雪落忆海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuepangzi/p/9219207.html</dc:identifier>
</item>
<item>
<title>使用Nexus搭建私有Nuget仓库 - 编程玩家</title>
<link>http://www.cnblogs.com/Erik_Xu/p/9211471.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Erik_Xu/p/9211471.html</guid>
<description>&lt;p&gt;　　Nuget是ASP .NET Gallery的一员，是免费、开源的包管理工具，专注于在.Net / .Net Core应用开发过程中第三方组件库的管理，相对于传统单纯的dll引用要方便、科学得多。其中&lt;a href=&quot;https://www.nuget.org/&quot; target=&quot;_blank&quot;&gt;nuget.org&lt;/a&gt;是最著名的Nuget公开库，但是企业内部开发的（业务）公共组件不可能都往公开库上传，所以，企业内部需要一个私有的Nuget仓库来支持。虽然微软有提供的Nuget Server，但Nuget Server用起来并不那么顺手，或者说感觉有点low。因此，本文将介绍Nexus搭建的Nuget仓库，希望能给大家多一个选择。&lt;/p&gt;


&lt;p&gt;安装环境&lt;/p&gt;
&lt;p&gt;Centos 7+, docker&lt;/p&gt;

&lt;h2&gt;1. 设置分区&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果有数据盘需要挂载，可以先设置分区，没有可跳过此步骤。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mkdir -p /opt/nexus -- 创建存放nexus数据的目录&lt;/p&gt;
&lt;p&gt;fdisk -l  -- 查看硬盘信息，确定需要挂载的硬盘信息&lt;/p&gt;
&lt;p&gt;mkfs.ext4 /dev/xvde -- 格式化硬盘&lt;/p&gt;
&lt;p&gt;mount /dev/xvde /opt/nexus 挂载磁盘&lt;/p&gt;
&lt;p&gt;blkid --查看硬盘信息&lt;/p&gt;
&lt;p&gt;vim /etc/fstab --将新分区的blkid写入/etc/fstab，内容参考：&lt;/p&gt;
&lt;p&gt;UUID={uuid} /opt/nexus ext4 defaults 0 0&lt;/p&gt;
&lt;p&gt;保存退出，并重启机器。&lt;/p&gt;

&lt;h2&gt;2. 禁止SELINNUX&lt;/h2&gt;
&lt;p&gt;sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config&lt;/p&gt;
&lt;p&gt;重启机器。&lt;/p&gt;

&lt;h2&gt;3. 安装docker&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果已安装的docker，可跳过此步骤。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;yum update&lt;/p&gt;
&lt;p&gt;yum install -y docker&lt;/p&gt;
&lt;p&gt;systemctl enable docker&lt;/p&gt;
&lt;p&gt;systemctl start docker&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623171822939-31015521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4. 拉取Nexus的镜像&lt;/h2&gt;
&lt;p&gt;docker pull sonatype/nexus3:3.12.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623181812897-1365958559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;镜像详细说明：&lt;a href=&quot;https://hub.docker.com/r/sonatype/nexus3/&quot; target=&quot;_blank&quot;&gt;https://hub.docker.com/r/sonatype/nexus3/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;5. 运行Nexus并把数据持久化到虚拟机或挂载的分区&lt;/h2&gt;
&lt;p&gt;mkdir /opt/nexus &amp;amp;&amp;amp; chown -R 200 /opt/nexus&lt;/p&gt;
&lt;p&gt;docker run -d -p 8081:8081 --name nexus -v /opt/nexus:/nexus-data sonatype/nexus3:3.12.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623181957445-1780796761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;稍等片刻，可能是几分钟，通过http://serverip:8081就能访问Nexus了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623182404557-1510790425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;1. 默认帐号&lt;/h2&gt;
&lt;p&gt;Nexus的默认管理员帐号：&lt;strong&gt;&lt;em&gt;admin&lt;/em&gt;&lt;/strong&gt;，密码：&lt;em&gt;&lt;strong&gt;admin123&lt;/strong&gt;&lt;/em&gt;。点击界面右上角可以登录。&lt;/p&gt;

&lt;p&gt;登录完后，可以看到一个设置按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623182827406-1808958623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;点击Repositories，查看内置的默认仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623182901876-327023899.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2. 仓库说明&lt;/h2&gt;
&lt;p&gt;　　其实Nexus默认已经创建好了Nuget的仓库，并且是创建了3个不同类型的仓库：nuget-group，nuget-hosted，nuget.org-proxy。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a. nuget.org-proxy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　类型是proxy，表示代理仓库。我们向它请求包(package)的时候，如果本地有，它就从本地提供，如果本地没有，它会从nuget.org下载到本地，然后给我提供这个包。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b. nuget-hosted&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　类型是hosted，表示托管仓库。我们一般把自己开发的包上传到该仓库中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c. nuget-group&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　类型是group，表示仓库组，它结合了nuget.org-proxy和nuget-hosted，能对外提供上述两者中的包。&lt;/p&gt;

&lt;p&gt;　　简而言之，nuget-hosted负责包上传，nuget.org-proxy负责代理包，nuget-group负责提供包。&lt;/p&gt;


&lt;h2&gt;1. 下载Nuget&lt;/h2&gt;
&lt;p&gt;到&lt;a href=&quot;https://www.nuget.org/downloads&quot; target=&quot;_blank&quot;&gt;https://www.nuget.org/downloads&lt;/a&gt;下载最新推荐的nuget.exe。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623214213621-232992047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2. 添加Nuget Realms&lt;/h2&gt;
&lt;p&gt;因为Nexus认证Nuget是通过Realms来认证，因此，要添加Nuget Realms。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623214702986-993780021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3. 准备Package&lt;/h2&gt;
&lt;p&gt;编写DLL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623215117305-1569193911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;设置DLL信息（可选）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623215256985-1061328947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;打包dll&lt;/p&gt;
&lt;p&gt;方法一：使用控制台&lt;/p&gt;
&lt;p&gt;dotnet pack -c Release&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623215453140-1396715371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;方法二：使用Visual Studio&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623215539901-680731350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4. 上传Package&lt;/h2&gt;
&lt;p&gt;指令模板：nuget push {dll}.nupkg {apiKey} -source {http://customsource/}&lt;/p&gt;
&lt;p&gt;例如，我这里是：D:\nuget push E:\WorkPlace\vs2017\Test\ErikDll\ErikDll\bin\Release\ErikDll.1.0.0.nupkg eb0497e8-5519-3f22-8e9f-f2eae720feb5 -source http://192.168.132.137:8081/repository/nuget-hosted/&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623224514097-1737055329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Nexus上也能看到上传的package：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623224618201-1956657597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其中，apiKey的获取方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623224210399-180578399.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623224231736-659432790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;5. 使用Package&lt;/h2&gt;
&lt;h2&gt;1. 打开Visual Studio的Nuget管理器，进行设置&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623225210183-453568789.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2. 添加私有Nuget仓库地址&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623225355065-133688289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3. 添加Package&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623225556246-38639313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4. 调用结果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623225908030-983820009.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201806/182190-20180623225951062-899480111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 23 Jun 2018 15:03:00 +0000</pubDate>
<dc:creator>编程玩家</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Erik_Xu/p/9211471.html</dc:identifier>
</item>
<item>
<title>【Java】关于Spring框架的总结 （一） - 小铁Winner</title>
<link>http://www.cnblogs.com/xiaotie666/p/LiujinSpringSummary.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaotie666/p/LiujinSpringSummary.html</guid>
<description>&lt;p&gt;本文总结一些关于Spring框架的理解，注意点及基础操作。如果有不对的地方，欢迎批评和建议。大家一起努力吧！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623195035194-1999958899.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring 致力于 Java EE 应用的各种解决方案，而不是仅仅专注于某一层的方案，可以说， Spring 是企业应用开发的“一站式”选择，Spring 贯穿表现层、业务层、持久层。然而，Spring 并不想取代那些已有的框架，而是以高度的开发性与它们无缝整合。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;Spring框架结构&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623195336322-1032091705.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Spring框架由大约20个功能模块组成。这些模块被分成六个部分，分别是 Core Container、Data Access/Integration、Web、AOP（Aspect Oriented Programming）、Instrumentation 及 Test。&lt;/p&gt;
&lt;ul class=&quot;ibm-bullet-list&quot;&gt;&lt;li&gt;&lt;strong&gt;Spring Core&lt;/strong&gt;：是框架的最基础部分。核心容器的主要组件是 &lt;code&gt;BeanFactory&lt;/code&gt;，它是工厂模式的实现。&lt;code&gt;BeanFactory&lt;/code&gt; 使用&lt;em&gt;控制反转&lt;/em&gt; （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Context&lt;/strong&gt;：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring JDBC：&lt;/strong&gt;提供了 JDBC 的抽象层，简化了 JDBC 编码，同时使代码更健壮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring DAO&lt;/strong&gt;：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring ORM&lt;/strong&gt;：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Web 模块&lt;/strong&gt;：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring MVC 框架&lt;/strong&gt;：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;Spring IoC&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;控制反转（Inversion of Control，IoC），也称为依赖注入（Dependency Injection，DI），是面向对象编程中的一种设计理念，用来降低程序代码之间的耦合度。控制反转模式（也称作依赖注入）的基本概念是：不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器 （在 Spring 框架中是 IOC 容器） 负责将这些联系在一起。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;IoC 实现思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;IoC 实现步骤&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.下载Spring并添加到项目中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring 的运行依赖于 commons-logging 组件，需要将相关的 jar 文件随 Spring 的 jar 文件一并导入。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623211853616-893113855.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.创建持久化类、数据访问层接口及实现类和业务逻辑层接口及实现类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里的持久化类必须提供公有的 setter 方法，以便 Spring 调用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.编写 Spring 配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在项目的 classpath 根路径下创建 applicationContext.xml 文件。&lt;/p&gt;
&lt;p&gt;在 Spring 配置文件中，使用&amp;lt;bean&amp;gt;元素来定义 Bean（也可称为组件）的实例。这个元素有两个常用属性：&lt;/p&gt;
&lt;p&gt;id：表示定义的 Bean 实例的名称。&lt;/p&gt;
&lt;p&gt;class：表示定义的 Bean 实例的类型。&lt;/p&gt;
&lt;p&gt;在其作用域中使用子元素 &amp;lt;property&amp;gt; 为属性赋值。这个元素有两个常用属性：&lt;/p&gt;
&lt;p&gt;name：表示该 Bean 实例属性的名称。&lt;/p&gt;
&lt;p&gt;value：为该属性赋值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623210132792-120940872.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.编写代码通过Spring获取目标类的实例。 &lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;N100F6&quot; class=&quot;ibm-h3&quot;&gt;1）使用 BeanFactory 接口获取目标类实例&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
BeanFactory factory = &lt;span&gt;new&lt;/span&gt; XMLBeanFactory(&lt;span&gt;new&lt;/span&gt; FileInputSteam(&quot;mybean.xml&quot;&lt;span&gt;));
MyBean mybean &lt;/span&gt;= (MyBean) factory.getBean(&quot;mybean&quot;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为 &lt;code&gt;org.springframework.beans.factory.BeanFactory&lt;/code&gt; 是一个简单接口，所以可以针对各种底层存储方法实现。最常用的 &lt;code&gt;BeanFactory&lt;/code&gt; 定义是 &lt;code&gt;XmlBeanFactory&lt;/code&gt;，它根据 XML 文件中的定义装入 bean。&lt;/p&gt;
&lt;p&gt;在 XML 文件中定义的 Bean 是被消极加载的，这意味在需要 bean 之前，bean 本身不会被初始化。要从 &lt;code&gt;BeanFactory&lt;/code&gt; 检索 bean，只需调用 &lt;code&gt;getBean()&lt;/code&gt; 方法，传入将要检索的 bean 的名称即可。&lt;/p&gt;

&lt;p&gt;每个 bean 的定义都可以是 POJO （用类名和 JavaBean 初始化属性定义） 或 &lt;code&gt;FactoryBean&lt;/code&gt;。&lt;code&gt;FactoryBean&lt;/code&gt; 接口为使用 Spring 框架构建的应用程序添加了一个间接的级别。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt; 2）使用 ApplicationContext 接口获取目标类实例&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ApplicationContext 接口负责读取 Spring 配置文件，管理对象的加载，生成，维护 Bean 对象与 Bean 对象之间的依赖关系，负责 Bean 的生命周期等。ClassPathXmlApplicationContext 是 ApplicationContext 接口的实现类，用于从 classpath 路径中读取 Spring 配置文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623204831208-1366769968.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;面向切面编程（Aspect Oriented Programming，AOP）是软件编程思想发展到一定阶段的产物，是对面向对象编程（Object Oriented Programming，OOP）的有益补充。AOP 的功能完全集成到了 Spring 事务管理、日志和其他各种特性的上下文中。面向切面编程，简单地来说就是在不改变原程序的基础上为代码段增加新的功能，对代码段进行增强处理。它的设计思想来源于代理设计模式。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切面&lt;/strong&gt;（Aspect）：一个模块化的横切逻辑（或称横切关注点），可能会横切多个对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接点&lt;/strong&gt;（Join Point）：程序执行中的某个具体的执行点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;增强处理&lt;/strong&gt;（Advice）：切面在某个特定连接点上执行的代码逻辑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切入点&lt;/strong&gt;（Pointcut）：对连接点的特征进行描述，可以使用正则表达式。增强处理和一个切入点表达式相关联，并在与这个切入点匹配的某个连接点上运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标对象&lt;/strong&gt;（Target object）：被一个或多个切面增强的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AOP代理&lt;/strong&gt;（AOP proxy）：由AOP框架所创建的对象，实现执行增强处理方法等功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;织入&lt;/strong&gt;（Weaving）：将增强处理连接到应用程序中的类型或对象上的过程。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;AOP实现思路（这里使用简单的日志记录增强操作进行演示）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1.在项目中添加 Spring AOP 相关的 jar 文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623221203184-486043787.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）创建增强类，编写前置增强和后置增强实现日志功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;把需要增强的代码提取到增强类中。这里使用日志记录方法进行演示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623222118139-1977766921.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3）编写 Spring 配置文件，对业务方法进行增强处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;在 &amp;lt;Bean&amp;gt; 元素中需要添加 aop 的名称空间，以导入与AOP相关的标签。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&lt;strong&gt;&lt;span&gt;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     http://www.springframework.org/schema/tx
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     http://www.springframework.org/schema/tx/spring-tx.xsd
&lt;/span&gt;&lt;span&gt;10 &lt;span&gt;&lt;strong&gt;     http://www.springframework.org/schema/aop 
&lt;/strong&gt;&lt;/span&gt;11&lt;/span&gt; &lt;span&gt;&lt;strong&gt;     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     http://www.springframework.org/schema/context
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;下面是对增强的配置代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422798/201806/1422798-20180623224129377-916893961.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;与 AOP 相关的配置都放在 &amp;lt;aop:config&amp;gt; 元素中，如配置切入点的标签 &amp;lt;aop:pointcut&amp;gt;。&lt;/p&gt;
&lt;p&gt;如图中配置所示，在 &amp;lt;aop:config&amp;gt; 中使用 &amp;lt;aop:aspect&amp;gt; 引用包含增强方法的Bean。分别通过 &amp;lt;aop:before&amp;gt; 和 &amp;lt;aop:after-returning&amp;gt; 将方法声明为前置增强和后置增强。&lt;/p&gt;
&lt;p&gt;&amp;lt;aop:pointcut&amp;gt; 的 expression 属性可以配置切入点表达式。&lt;/p&gt;
&lt;p&gt;上述配置为AOP配置代码片段，其中expression部分为定义切点的表达式部分，如下：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;execution(* cn.zdpz.service..*.*(..))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表达式结构表示如下&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;标识符&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;execution()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;表达式的主体&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;center&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;第一个“*”符号&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;表示返回值的类型任意&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;cn.zdpz.service&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;AOP 所切的服务的包名，即，需要进行横切的业务类&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;包名后面的“..”&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;表示当前包及子包&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;第二个“*”&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;表示类名，*即所有类&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;.*(..)&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;表示任何方法名，括号表示参数，两个点表示任何参数类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;官方文档关于表达式结构介绍&lt;/p&gt;
&lt;p&gt;execution(&amp;lt;修饰符模式&amp;gt;?&amp;lt;返回类型模式&amp;gt;&amp;lt;方法名模式&amp;gt;(&amp;lt;参数模式&amp;gt;)&amp;lt;异常模式&amp;gt;?)&lt;/p&gt;
&lt;p&gt;4）编写代码，获取带有增强处理的业务对象。&lt;/p&gt;

</description>
<pubDate>Sat, 23 Jun 2018 15:03:00 +0000</pubDate>
<dc:creator>小铁Winner</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaotie666/p/LiujinSpringSummary.html</dc:identifier>
</item>
<item>
<title>.NET Core 控制台应用程序使用异步（Async）Main方法 - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/9219085.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/9219085.html</guid>
<description>&lt;p&gt;C# 7.1 及以上的版本允许我们使用异步的Main方法。&lt;/p&gt;
&lt;h2 id=&quot;一.新建一个控制台应用程序&quot;&gt;一.新建一个控制台应用程序&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201806/668104-20180623221919061-2144532843.png&quot; alt=&quot;1529762562337&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二.异步main方法&quot;&gt;二.异步Main方法&lt;/h2&gt;
&lt;p&gt;我们直接将Main方法改为如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;static async Task Main(string[] args)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201806/668104-20180623221918625-1004453446.png&quot; alt=&quot;1529762747510&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到报错了，提示我们是C# 7.1 的特性。我们有两种方法可以解决，其实最后都是殊途同归，只是操作不一样而已。&lt;/p&gt;
&lt;h3 id=&quot;第一种方法-修改csproj文件&quot;&gt;1.第一种方法-修改csproj文件&lt;/h3&gt;
&lt;p&gt;打开项目的csproj文件，添加如下代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Condition=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;'$(Configuration)|$(Platform)'=='Debug|AnyCPU'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;7.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201806/668104-20180623221918264-459327577.png&quot; alt=&quot;1529762909659&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;第二种方法-通过vs更改项目属性&quot;&gt;2.第二种方法-通过vs更改项目属性&lt;/h3&gt;
&lt;p&gt;在“解决方案管理器”界面中，选中项目，然后 右键-&amp;gt;属性 -&amp;gt; Build&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201806/668104-20180623221917877-1755653577.png&quot; alt=&quot;1529763028967&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在弹出的界面中选中 &lt;code&gt;C# 7.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201806/668104-20180623221917426-617317112.png&quot; alt=&quot;1529763064679&quot;/&gt;&lt;/p&gt;
&lt;p&gt;经过上面的更改以后，将不会报错了。&lt;/p&gt;
&lt;h2 id=&quot;三.验证&quot;&gt;三.验证&lt;/h2&gt;
&lt;p&gt;我们在Main方法中，加入如下代码，获取百度首页的html：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;class Program
{
    static async Task Main(string[] args)
    {
        var client = new HttpClient();
        var result = await client.GetStringAsync(&quot;https://www.baidu.com/&quot;);
        Console.WriteLine(result);
        Console.ReadKey();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后运行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201806/668104-20180623221916934-114493397.png&quot; alt=&quot;1529763181795&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本文所用代码：&lt;a href=&quot;https://github.com/stulzq/BlogDemos/tree/master/AsyncConsoleApp&quot; class=&quot;uri&quot;&gt;https://github.com/stulzq/BlogDemos/tree/master/AsyncConsoleApp&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 23 Jun 2018 14:20:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/9219085.html</dc:identifier>
</item>
<item>
<title>python之函数 - cherry小樱桃</title>
<link>http://www.cnblogs.com/surewing/p/9219067.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/surewing/p/9219067.html</guid>
<description>&lt;p&gt;标签（空格分隔）： 函数&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;现在老板要求你写一个监控程序，24小时全年无休的监控你们公司的网站服务器的系统的状况，当CPU、memory、disk等指标的使用量超过阀值时即发邮件警报&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;你会采取如下的方法：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221027089-518163020.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.上述代码是实现了功能但是重复代码太多了：不易维护，如果日后需要修改发邮件的代码，就会很麻烦，每个地方都要遍历一遍；&lt;/p&gt;
&lt;p&gt;3.因此只需要把重复的代码提取出来，放在一个公共的地方，起一个名字，以后谁想用这段代码，就通过这个名字调用就行了，如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221050144-1787128263.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221105060-1352975681.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221117688-1295281908.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;例如：如下的一个简单的函数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; syhi():&lt;span class=&quot;co&quot;&gt;#the name of def&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)
syhi()&lt;span class=&quot;co&quot;&gt;# 调用函数&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;备注：函数名是指向内存这段代码的地址，只有加上括号是执行内存里面的具体的内容；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;另一种内容是带参数的函数：例如当你想用同一个函数，但是有些地方又是不一样的，这时候怎么办呢，就使用参数；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;
b&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
c&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;a&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;b
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(c)
&lt;span class=&quot;co&quot;&gt;#另一种是函数的形式：&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; calc(x,y)
    res&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;y
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;co&quot;&gt;# return the result&lt;/span&gt;
c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;calc(a,b)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(c)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;放了参数的函数在调用的时候一定要传参数，不然会报错的；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;函数的特性：减少重复代码，使程序变的可扩展，使程序变得易于维护；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;函数的默认参数&quot;&gt;函数的默认参数&lt;/h2&gt;
&lt;p&gt;1.形参：&lt;br/&gt;只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元，因此，形参只在函数内部有效，函数调用结束返回主调用函数后则不能再使用该形参变量；&lt;br/&gt;2.实参：&lt;br/&gt;实参可以是常量，变量，表达式，函数等，无论实参是何种类型的量，在进行函数调用的时，他们都必须有确定的值，以便把这些值传给形参，因此应预先用赋值，输入等办法使参数获得确定值；&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221551174-829857669.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;形参就是一把椅子，放在这里，占个位子而已，只到有人调用，赋值的时候才会分配内存单元，在调用结束，既可释放；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;实参，就是实实在在存在，什么类型都接受；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;3.默认参数：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; stu_resgister(name,age,country,course):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----学生注册信息-----&quot;&lt;/span&gt;)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'姓名：'&lt;/span&gt;,name)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'年龄：'&lt;/span&gt;,age)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'国家：'&lt;/span&gt;,country)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'课程：'&lt;/span&gt;,course)
stu_resgister(&lt;span class=&quot;st&quot;&gt;'王了'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'python_devops'&lt;/span&gt;)
stu_resgister(&lt;span class=&quot;st&quot;&gt;'王了2'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'python_devops'&lt;/span&gt;)
stu_resgister(&lt;span class=&quot;st&quot;&gt;'王了3'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'linux'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上述我们可以：把国家设置为默认：&lt;/p&gt;
&lt;pre class=&quot;pyhthon&quot;&gt;
&lt;code&gt;def stu_resgister(name,age,course,country='china'):
....
stu_resgister('王了3',24,'linux')
stu_resgister('王了1',24,'linux',Korean) #可以修改值&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在调用时候就是默认是：China了&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;如果修改：def stu_resgister(name,age,country='china',course):铁律就是：默认参数必须要放到位置参数的后边；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221607550-570893234.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;关键参数&quot;&gt;关键参数：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221618557-1933234270.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;非固定参数&quot;&gt;非固定参数&lt;/h2&gt;
&lt;p&gt;例如：写个报警函数，以前发送给1个人：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; send_alert(msg,user):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'坏了'&lt;/span&gt;)
send_alert(&lt;span class=&quot;st&quot;&gt;'赶快'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoA'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要给10个人发送呢，这里我们要调用10次；那有没有什么好的方法呢；其实很简单：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; send_alert(msg,&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;user):
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; user:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'坏了'&lt;/span&gt;,u)
send_alert(&lt;span class=&quot;st&quot;&gt;'赶快'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoA'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaob'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoC'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoD'&lt;/span&gt;)&lt;span class=&quot;co&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;'xiaoA'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaob'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoC'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoD'&lt;/span&gt;这些会打包发给user&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.如果参数中出现了，形参中出现了&lt;em&gt;，那么传递的参数就是可变的，不是固定了，传过来的参数打包元组；一般是：&lt;/em&gt;args&lt;br/&gt;2.方式二：*args是打包的元组，那么我是不是可以自己打包，列表和元组：例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;send_alert(&lt;span class=&quot;st&quot;&gt;'赶快'&lt;/span&gt;,[&lt;span class=&quot;st&quot;&gt;'xiaoA'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaob'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoC'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'xiaoD'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果上边传的话，def send_alert(msg,&lt;em&gt;user):里面的&lt;/em&gt;user会把：['xiaoA','xiaob','xiaoC','xiaoD']当成元祖的第一个元素(['xiaoA','xiaob','xiaoC','xiaoD'],)这样是不是打包了一次，之后，后边又打包了一次，所以这是不对的；如果按照上述传，在列表的前面加上*['xiaoA','xiaob','xiaoC','xiaoD']就可以了，这样他会直接把自己打包的传给user，('xiaoA','xiaob','xiaoC','xiaoD')&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;非固定参数的另一种形式：一种是上述的元组的形式，一种是字典的形式：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func(name,&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,args,kwargs)
func(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'nv'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'tester'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：wang (22, 'nv', 'tester') {}&lt;br/&gt;后边有个空的字典，按照常理来说应该有些参数会放到字典里面，只是我们还没有get到这个放到里面的点，**kwargs接收的是关键字参数，指定参数名的，未定义的关键字参数；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func(name,&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,args,kwargs)
func(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'nv'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'tester'&lt;/span&gt;,addr&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'henan'&lt;/span&gt;,num&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;12341234&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：wang (22, 'nv', 'tester') {'addr': 'henan', 'num': 12341234}&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func(name,&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,args,kwargs)

d&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;st&quot;&gt;'degree'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'primary school'&lt;/span&gt;}
func(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,d)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果为：&lt;br/&gt;wang ({'degree': 'primary school'},) {}&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func(name,&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,args,kwargs)

d&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;st&quot;&gt;'degree'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'primary school'&lt;/span&gt;}
func(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;d)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果为：&lt;br/&gt;wang () {'degree': 'primary school'}&lt;/p&gt;
&lt;h2 id=&quot;函数的返回值&quot;&gt;函数的返回值：&lt;/h2&gt;
&lt;p&gt;这里形象的解释一下函数：函数就是把一堆代码，打包放在那里，比如说一个发邮件的功能，然后这个功能被调用，说到这里大家应该会想知道，我们调了，但是调的一个结果是啥？有没有成功？如果成功，干A事情，如果不成功做B的事情；&lt;/p&gt;
&lt;p&gt;返回值的定义：函数外部的代码要想获得函数的执行结果，就可以在函数里用return语句把结果返回；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; stu_info(name,age,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'python'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;姓名&quot;&lt;/span&gt;,name)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;年龄&quot;&lt;/span&gt;,age)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;国籍&quot;&lt;/span&gt;,country)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;课程&quot;&lt;/span&gt;,course)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#这里任何东西都可以，是你想要的结果&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; true
stu_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;stu_info(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;34&lt;/span&gt;,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'全栈开发'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; stu_status:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ok'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'not ok '&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有写返回值，默认返回的是什么呢？以前的我们的代码也没有写过return都可以使用的，那以前的有返回值吗？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; stu_info(name,age,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'python'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;姓名&quot;&lt;/span&gt;,name)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;年龄&quot;&lt;/span&gt;,age)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;国籍&quot;&lt;/span&gt;,country)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;课程&quot;&lt;/span&gt;,course)
stu_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;stu_info(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;34&lt;/span&gt;,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'全栈开发'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(stu_status)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;姓名 wang&lt;br/&gt;年龄 34&lt;br/&gt;国籍 CN&lt;br/&gt;课程 全栈开发&lt;br/&gt;None&lt;br/&gt;其实：默认返回了None&lt;br/&gt;一般带return就是为了函数的执行的结果，函数的执行的结果，一般在函数执行完毕的时候，但是看如下的代码呢？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; stu_info(name,age,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'python'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;姓名&quot;&lt;/span&gt;,name)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;年龄&quot;&lt;/span&gt;,age)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;国籍&quot;&lt;/span&gt;,country)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;课程&quot;&lt;/span&gt;,course)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'乐乐123'&lt;/span&gt;)
stu_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;stu_info(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;34&lt;/span&gt;,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'全栈开发'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(stu_status)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你说上述的执行代码结果是什么？结果最后是None，还是：乐乐123&lt;br/&gt;答：上述的执行结果：&lt;br/&gt;姓名 wang&lt;br/&gt;年龄 34&lt;br/&gt;国籍 CN&lt;br/&gt;课程 全栈开发&lt;br/&gt;None&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;记住：函数只要碰到：return，就是函数的结束；如果未指定的return，那么这个函数的返回值为None;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; stu_info(name,age,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'python'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;姓名&quot;&lt;/span&gt;,name)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;年龄&quot;&lt;/span&gt;,age)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;国籍&quot;&lt;/span&gt;,country)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;课程&quot;&lt;/span&gt;,course)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'乐乐123'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
stu_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;stu_info(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;34&lt;/span&gt;,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'全栈开发'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(stu_status)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个程序呢？是返回的是：None还是1呢？&lt;br/&gt;答案是：&lt;br/&gt;姓名 wang&lt;br/&gt;年龄 34&lt;br/&gt;国籍 CN&lt;br/&gt;课程 全栈开发&lt;br/&gt;None&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;还是那句话，函数只要碰到：return，就是函数的结束；&lt;br/&gt;还有一个问题：函数的return是只能返回一个值呢，还是可以有多个值？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; stu_info(name,age,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'python'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'china'&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;姓名&quot;&lt;/span&gt;,name)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;年龄&quot;&lt;/span&gt;,age)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;国籍&quot;&lt;/span&gt;,country)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;课程&quot;&lt;/span&gt;,course)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; name,age
stu_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;stu_info(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;34&lt;/span&gt;,course&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'全栈开发'&lt;/span&gt;,country&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'CN'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(stu_status)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果为：&lt;br/&gt;姓名 wang&lt;br/&gt;年龄 34&lt;br/&gt;国籍 CN&lt;br/&gt;课程 全栈开发&lt;br/&gt;('wang', 34)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;这里记住：函数的返回永远且只能返回一个，如果想返回多个值，要使用,号，他会把这多个值，变成一个元组，如果：return [name,age],他的结果是：['wang',34]&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;局部变量&quot;&gt;局部变量：&lt;/h2&gt;
&lt;p&gt;例如:我现在函数的外边定义了一个变量，然后再函数里面修改这个变量，函数外边和里面的变量有什么区别；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name)
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;B&lt;br/&gt;A&lt;br/&gt;这是为什么呢？&lt;br/&gt;so：这就涉及到了，我们接下来要说的局部变量了，你在函数里面定义的变量就叫做局部变量；还以上述的代码为例：（具体原因我写在注释里面了）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#这里定义了一个变量&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#这里你以为修改n了上边的变量，其实不是的，只是你又定义了一个name变量而已，这是两个完全独立的变量；&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name)
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果上述表达还不清楚，我们可以进一步查看他的内存地址：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;B 6759424&lt;br/&gt;A 2475104&lt;br/&gt;通过上述大家可以看到内存地址是不一样的，这里应该明白了吧，这里是两个变量，只不过是名字一样而已；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;因此说：局部变量是不能够修改全局变量的，这里的改不是改，是上述的原理是，新建；&lt;/li&gt;
&lt;li&gt;同样是上述的代码，如果把局部变量消除了，函数还能打印这个name吗？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;co&quot;&gt;#name='B'&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;A 30524512&lt;br/&gt;A 30524512&lt;br/&gt;so：当函数局部没有对应的变量的时候，是可以调用全局变量的，但是当局部有对应的变量的时候，优先使用自己的局变量；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;按照上述的理论反推：如果里面的能够调用外边的全局，那么外边的能够调用函数里面的局部变量吗？&lt;br/&gt;答案：不能；&lt;br/&gt;如果能的话，我们在第一次的代码中，就表现出来了：如果可以的话，那么如下代码的最后一个词print就应该是里面的B；但是如下代码：是报错的：NameError: name 'name' is not defined&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#name='A'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;函数里面修改全局变量&quot;&gt;函数里面修改全局变量：&lt;/h2&gt;
&lt;p&gt;我想在函数里面修改全局变量，但是怎么修改呢？根据以上的讲解，我在函数里面修改全局的就相当于，新建了一个变量，只是名字一样而已；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;那么我要修改全局怎么办呢？&lt;br/&gt;这里加个新的知识点：global,global name&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; name
    name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;B 4326927360&lt;br/&gt;B 4326927360&lt;br/&gt;所以说global就是在函数里面，修改全局变量；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;如下代码呢？是否可行，把name修改放在global之前&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; name
    
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(name,&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;(name))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;SyntaxError: name 'name' is assigned to before global declaration&lt;br/&gt;答案是不行的，不能把局部变量放在修改global之前；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;但是以实际的开发经验而言，不建议使用global，因为这个全局变量可能会所有的人用，你自己的修改了，但是一旦运行，你的改了，实际是没有改的；一般情况下不用，只需要知道就可以了；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;函数里面修改列表数据&quot;&gt;函数里面修改列表数据&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;我们之前只是修改了字符串，现在看看别的类型能不能行？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'li2'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'qian3'&lt;/span&gt;]
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'li2'&lt;/span&gt;]
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(names)
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(names)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;['wang', 'li2']['wang', 'li2', 'qian3']&lt;br/&gt;那就说明和我们之前的字符串的是一样的逻辑，&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;如果我对上述的代码的names执行的是删除的操作呢？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'li2'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'qian3'&lt;/span&gt;]
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;kw&quot;&gt;del&lt;/span&gt; names[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(names)
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(names)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大家感觉执行结果是怎样的？&lt;br/&gt;执行结果：&lt;br/&gt;['wang', 'li2']['wang', 'li2']&lt;br/&gt;以及如下的代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'li2'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'qian3'&lt;/span&gt;]
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;kw&quot;&gt;del&lt;/span&gt; names[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]
    names[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'wanghaha'&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(names)
func()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(names)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;['wang', 'wanghaha']['wang', 'wanghaha']&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;按照我们以前的理论来说：函数的内部的变量是局部变量，是不能修改的，修改就是相当于新建一个变量，可以上述的两段代码都可以修改，这是为什么呢？&lt;br/&gt;解析：&lt;br/&gt;1.第一次我们：在函数中：names=['wang','li2']的时候是不能修改的，因为你是对列表的整体进行重新赋值，列表的整体是一个内存地址，所以这里就不能对全局进行修改；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;del names[2]&lt;br/&gt;names[1]='wanghaha'这就可以了，这是因为，你不是对整体，这是对列表的中的一个元素进行操作，列表的其中一个元素又是有一个独立的内存地址；&lt;br/&gt;3.整体的内存地址不能被修改，只能被引用；&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;所以什么样的不可以被修改：字符串，数组，其余都可以；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;函数的嵌套&quot;&gt;函数的嵌套：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;什么是嵌套，就是函数里面在搞一个函数；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'xiao A'&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func2():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'xiao B'&lt;/span&gt;)
func()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.然后问题：我执行完之后打印的是什么；&lt;br/&gt;执行结果：&lt;br/&gt;xiao A&lt;br/&gt;2.看到上述的结果，有人会有疑问为什么呢？只有：一个执行了呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;这里记住一句话，任何函数在定义完成之后，都要去通过函数的名字去调用它，如果不去调用它，是不会执行的；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'xiao A'&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func2():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'xiao B'&lt;/span&gt;)
    func2()
func()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;xiao A&lt;br/&gt;xiao B&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;函数内部可以在定义函数，要想执行，一定要被调用才能执行&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;82&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'xiao A'&lt;/span&gt;,age)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func2():
        age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;67&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'xiao B'&lt;/span&gt;,age)
    func2()
func()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;xiao A 82&lt;br/&gt;xiao B 67&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;73&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(age)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func2():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(age)
    func2()
func()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;73&lt;br/&gt;73&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;上述结果可以看到：函数的变量在执行的时候，会先找寻自己的函数的变量，如果自己没有他会往上边父类的函数中查找，如果上边没有，他会去找全局变量；&lt;br/&gt;如下的代码呢？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func2():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(age)
    age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;
    func2()
func()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;12&lt;br/&gt;解析上述结果：&lt;br/&gt;先执行：func,然后age=12,然后执行：func2就是会使用age=12&lt;/p&gt;
&lt;h2 id=&quot;函数-作用域&quot;&gt;函数-作用域：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;python 中函数就是一个作用域（javascript类似）,作用域就是判断变量属于你，还是属于我；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func():
    age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fun2():
        age&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;84&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mim'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;这里给大家强调一个句话：代码定义完成后，他的作用域已经生成，作用域的关系，就是一层一层的向上查找；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;匿名函数&quot;&gt;匿名函数：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; calc(x,y)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;y&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下的一段代码和上边的代码是一样的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y:x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;y&lt;span class=&quot;co&quot;&gt;#声明了一个匿名函数；&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;但是匿名函数没有名字怎么调用呢？以前我们说过函数只有通过：函数名()这种形式被调用；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;没有名字就不能被调用，现在只是一个函数而已；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y : x&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;y)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&amp;lt; function &amp;lt; lambda&amp;gt; at 0x101bcae18&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;如果真想调用就把这个函数给他赋值给一个变量，然后在调用&lt;br/&gt;例如：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;func&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y : x&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;y
func(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：9&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; calc(x,y):
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;y:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;y
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;y&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要实现上述代码的逻辑使用匿名函数可以吗？这里记住匿名函数不支持使用if，else，for循环等复杂的逻辑的，不过上述的代码我们使用匿名函数+三元运算符是可以实现的；&lt;br/&gt;例如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y:x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;y &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;y &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:x&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;y&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;记住匿名函数就是把多行代码，变为一行；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;匿名函数的作用：&lt;br/&gt;需求如下：[0,1,2,3,4,5,6,7,8,9]把列表里面的数字都变为自身相乘，你应该怎么操作？&lt;br/&gt;下边我们使用普通函数来实现该需求：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; index,i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(data):
    data[index]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;怎样通过匿名实现呢？我们可以通过map()来实现&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; f2(n):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; n&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;n
我们可以使用map(函数，参数)来实现
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;x,data)))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;高阶函数&quot;&gt;高阶函数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;定义：&lt;br/&gt;一个函数可以接收另一个函数作为参数，这种函数就称为高阶函数；&lt;br/&gt;只需要满足一下两个条件就是高阶函数：&lt;br/&gt;1.接受一个或多个函数作为输入&lt;br/&gt;2.return返回另外一个函数&lt;br/&gt;例如：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; add(x,y,f):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; f(x)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;f(y)
res &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;add(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(res)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func2(x,y):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;,x,y
res&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;func2(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述就是返回的时候返回了一个函数，他也是一个高阶函数；&lt;br/&gt;总结：&lt;br/&gt;高阶函数：主要满足：上述的1.2.两个条件都是高阶函数；&lt;/p&gt;
&lt;h2 id=&quot;递归&quot;&gt;递归：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;简单的定义：递归就是在函数的执行过程中调用自己；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; recrusion(n):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(n)
    recrusion(n&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;)
recrusion(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果为：从1 一直到998，后边还有报错，具体如下信息：&lt;br/&gt;1...&lt;br/&gt;994&lt;br/&gt;995&lt;br/&gt;996&lt;br/&gt;997&lt;br/&gt;998Traceback (most recent call last):&lt;br/&gt;RecursionError: maximum recursion depth exceeded while calling a Python object&lt;br/&gt;为什么产生，如上的结果：打印1，然后再函数里面有调用自己参数是2，依次往下推，产生了一个死循环；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;但是为什么会有报错呢？&lt;br/&gt;1.maximum recursion depth exceeded while calling a Python object，就是在调用的时候，不断的循环，超过了最大限制的次数，python就会报错，这里我们可以查看python的最大的递归限制：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; sys
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sys.getrecursionlimit())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果是：&lt;br/&gt;1000&lt;br/&gt;所以：以上的递归报错是因为，达到了递归的一个最大的限制；&lt;br/&gt;python的最大限制的值是可以修改的：通过如上的命令：&lt;br/&gt;sys.setrecursionlimit(1500)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;为什么python会限制1000次呢？&lt;br/&gt;因为：你递归1000次的时候，前面的999个还是存在的函数，是要占用一定的内存的，如果不限制，无限制的执行下去，电脑系统很快会被撑爆了，所以这里python增加了限制；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;递归与栈的关系&quot;&gt;　递归与栈的关系：&lt;/h2&gt;
&lt;p&gt;在Python中，递归限制最多层次，本质的原因是什么？&lt;br/&gt;1.本质的原因是因为：计算机中，函数的调用是通过栈这种数据结构来实现的，在Python中不存在这种东西，栈就是类似手抢弹壳，栈的数据结构就像个弹壳一样，里面的子弹就像数据一样，栈就像一个弹壳，他和函数有什么关系？因为函数本身在执行过程中，是占有内存空间的，就是存在栈中的，你每次执行函数就像往弹壳里面压子弹一样，很快就达到了限制，如果放的多了，就会有个问题，叫栈溢出，Python解释器帮你封装了这部分东西，我们不需要关心这个；&lt;br/&gt;2.每当进行一次函数调用，就会增加一个栈帧，每当函数返回，栈就会减少一层栈帧，由于栈的大小不是无限次的，所以递归调用的次数过多，会导致栈溢出；&lt;/p&gt;
&lt;h3 id=&quot;递归的作用&quot;&gt;递归的作用：&lt;/h3&gt;
&lt;p&gt;现在有个需求：10/2,直到除到0为止；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; cacl(n):
    v&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(n&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(v)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; v&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Done'&lt;/span&gt;
    cacl(v)
cacl(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么如下的代码呢？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; cacl(n):
    v&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(n&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(v)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; v&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Done'&lt;/span&gt;
    cacl(v)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(v)
cacl(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;5&lt;br/&gt;2&lt;br/&gt;1&lt;br/&gt;0&lt;br/&gt;1&lt;br/&gt;2&lt;br/&gt;5&lt;br/&gt;为什么print(v)放在递归调用函数的后边就出现了1，2，5&lt;br/&gt;因为当是0的时候，最里层的函数结束了，结束后会返回到之前调用它的位置，即上一层，上一层打印的是2，再就是5，再就是10，即最外层的函数；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;总结：这个递归就是要一层一层的进去，还要一层一层的出来；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221836574-1422574585.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;总结：&lt;br/&gt;1.通过上边的例子：我们可以看到递归必须有一个明确的结束条件，不然就是一个死循环；&lt;br/&gt;2.每次进入更深一层递归时，问题规模相比上次递归都应有所减少&lt;br/&gt;3.递归的执行效果不高，递归层次多会导致栈溢出；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;递归有什么作用呢？&lt;br/&gt;1.可以用于解决很多算法问题，把复杂的问题分成一个个小问题，--解决&lt;br/&gt;2.比如求：斐波那契数列，汉诺塔，多级评论树，二分查找，求阶乘，用递归求斐波那契数列，汉诺塔，对于初学者来说，可能理解起来不是太容易，所以，我们用阶乘和二分查找来给大家演示；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;递归作用&quot;&gt;递归作用：&lt;/h2&gt;
&lt;h3 id=&quot;求任何大于1的自然数n阶乘表示方法例如4的阶乘&quot;&gt;求任何大于1的自然数n阶乘表示方法：例如：4的阶乘；&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; jie(n):
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; n&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; n&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;jie(n&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(jie(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果是：&lt;br/&gt;24&lt;/p&gt;
&lt;h3 id=&quot;尾递归的优化&quot;&gt;尾递归的优化，&lt;/h3&gt;
&lt;p&gt;递归的效率低，有没有什么优化的方式呢？&lt;br/&gt;这里通过一个方式叫：尾递归&lt;br/&gt;答案：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; cal(n):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(n)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; cal(n&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;)
cal(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上述的代码：就是一个尾递归的例子；&lt;br/&gt;1.此时死循环了，但是该函数的结果是：当前return结果，没有必要在保留上次函数的结果，这就是在函数的尾部就直接返回，就是不用每次函数递归执行结果都要保留在栈里面，这种只需要保留当前的结果就好了，如果是1000次的调用，我们只用到了最后一个词的调用，其余的都直接返回了，就是类似一个弹壳，里面放一个子弹，打出一个子弹，这样就能提高效率了；&lt;br/&gt;2.尾递归的优化，并不是所有的语言都支持，C语言支持，Python里面不支持尾递归；Java不支持；&lt;/p&gt;
&lt;h2 id=&quot;函数的内置方法&quot;&gt;函数的内置方法：&lt;/h2&gt;
&lt;p&gt;问题：在Python里面我们可以使用len()的方法，等等；&lt;br/&gt;答：函数要使用是不是要先定义，len()要调用,是不是也要是有定义的；答案就是Python解释器定义好的；&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202550/201806/1202550-20180623221854481-2080636638.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;1.abs()取绝对值；&lt;br/&gt;2.dict()把一个数据转换成字典&lt;br/&gt;3.help()帮助&lt;br/&gt;4.min()从列表里面取最小的数&lt;br/&gt;5.max()取最大值&lt;br/&gt;6.all()判断可循环的数据，是否是全部为真，只要有个是false就是false，空列表的话返回的是True；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;pre class=&quot;pyhton&quot;&gt;
&lt;code&gt;a=[1,2,3]
all(a)# True
a.append(0)
all(a)# 执行结果为False&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7.bool()判断是否False或者True&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;co&quot;&gt;# 执行结果：False&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.any()可循环的数列有一个是真就是真，&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;any&lt;/span&gt;([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;span class=&quot;co&quot;&gt;#执行结果：True&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;any&lt;/span&gt;([&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;span class=&quot;co&quot;&gt;#执行结果：False&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9.dirI()打印当前程序中所有存在的变量，有些是Python解释器自带的；&lt;br/&gt;10.hex()把一个数转成16进制&lt;br/&gt;11.slice()切片，slice(start,stop[,step])用处不大，自行研究&lt;br/&gt;12.divmod()求整除（x//y,x%y）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;divmod&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;co&quot;&gt;# 执行结果：3,1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;13.sorted()&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;l&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;55&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;]
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;sorted&lt;/span&gt;(l))
d&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{}
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;):
    d[i]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;-50&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(d) &lt;span class=&quot;co&quot;&gt;#结果是乱序的,如果想排序怎么办呢？变成列表呗&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(d.items())
&lt;span class=&quot;co&quot;&gt;#如果想按照values排序呢？&lt;/span&gt;
d2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;d.items()
&lt;span class=&quot;co&quot;&gt;#这样排序不知道是values还是key&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;sorted&lt;/span&gt;(d.items()))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;sorted&lt;/span&gt;(d.items(),key&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]))
d[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;399&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;sorted&lt;/span&gt;(d.items(),key&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;],reverse&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是sorted()一些列子，大家自行研究己试试&lt;br/&gt;14.ascii()是不是ASCII编码，没有什么作用&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abc中卫'&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;ascii&lt;/span&gt;(a))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;'abc\u4e2d\u536b'&lt;br/&gt;15.oct()变成八进制&lt;br/&gt;16.eval()把zi'fu字符串转换成为公式；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;f&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'1+3/2'&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#我想做的是，把这个字符串读出来，做成公式，这里我们可以通过eval&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;eval&lt;/span&gt;(f))
code &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;if 3&amp;gt;5:&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    print('3 bigger 5')&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;else:&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    print('dddd')&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;eval&lt;/span&gt;(code))&lt;span class=&quot;co&quot;&gt;#查看报错我们得出结论eval能做的事情只能是处理单行的代码&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;17.exec()这个和eval()作用是一样的,exec能处理多行&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;code &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'3 bigger 5'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'dddd'&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;exec&lt;/span&gt;(code))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;dddd&lt;br/&gt;None&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;exec()和eval()的区别：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;code &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; foo():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'run foo'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1234&lt;/span&gt;
foo()
&lt;span class=&quot;co&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;exec&lt;/span&gt;(code))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;run foo&lt;br/&gt;None&lt;br/&gt;这里看到exec是拿不到返回值的，eval是可以的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;res&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'1+2+3'&lt;/span&gt;)
res2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'1+2+3+4'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(res,res2)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;6 None&lt;br/&gt;18.ord()&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;)&lt;span class=&quot;co&quot;&gt;#返回a在ascci码对应的位置；97&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;98&lt;/span&gt;)&lt;span class=&quot;co&quot;&gt;#根据值查找ascii对应的内容：b&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;19.sum()求和&lt;br/&gt;20.bytearray(),直接修改字符串内容，原内存地址修改，不是开辟一个内存空间；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;s&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'43'&lt;/span&gt;
s[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;88&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;TypeError: 'str' object does not support item assignment&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;我们要想修改字符串怎么办呢？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;s&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abcd中国'&lt;/span&gt;
s&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;bytearray&lt;/span&gt;(s,encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)
s[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;98&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(s[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])
s[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;65&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(s[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;98&lt;br/&gt;65&lt;br/&gt;21.map()接收两个参数，一个是函数，一个是序列；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;x ,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;])
a&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;x ,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;[1, 4, 9, 16, 25]&lt;br/&gt;22.filter()把符合条件的值过滤出来，快速从一个列表里面找到你想要的值；当这个：lambda x:x&amp;gt;3为True，就从列表里面拿出来结果来，如下的代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;])))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;[4, 5, 6, 7]&lt;br/&gt;23.reduce(),map(),filter()被称为三剑客，reduce()，Python2有，Python3放到别的地方了，functiontools里面了；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; functools
&lt;span class=&quot;co&quot;&gt;#所有的值加起来；&lt;/span&gt;
functools.&lt;span class=&quot;bu&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y:x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;y,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6677&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;])
functools.&lt;span class=&quot;bu&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y:x&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;y,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6677&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;])
functools.&lt;span class=&quot;bu&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x,y:x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;y,[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6677&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;],&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;co&quot;&gt;#有索引值，从哪里开始的&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;24.pow()求多少次方&lt;br/&gt;25.print()打印&lt;br/&gt;help(print)&lt;br/&gt;print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;s&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hey,myname is alex&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;,from shandong'&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(s)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(s,end&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;','&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(s,sep&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'niniou'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'hellowor'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'niuniu'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'douniu'&lt;/span&gt;,sep&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'--&amp;gt;'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;hey,myname is alex&lt;br/&gt;,from shandong&lt;br/&gt;hey,myname is alex&lt;br/&gt;,from shandong,hey,myname is alex&lt;br/&gt;,from shandong&lt;br/&gt;niniou hellowor&lt;br/&gt;niuniu--&amp;gt;douniu&lt;br/&gt;通过上述的执行结果可以看到，print的一些方法的用处；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;print 最后是有换行的；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;26.callable()判断一个东西是否可调用；&lt;br/&gt;27.vars()打印当前的所有的变量和变量的值&lt;br/&gt;28.locals()打印函数的所有的局部变量&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; f():
    n&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;locals&lt;/span&gt;())
f()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;29.round()保留几位小数；&lt;br/&gt;30.hash()把字符创变为数字；&lt;/p&gt;
&lt;h2 id=&quot;函数的进阶&quot;&gt;函数的进阶：&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;名称空间&lt;br/&gt;1.又名name space，顾明思议，就是存放名字地方，存什么名字？举例说明：x=1,1存放在内存中，那么名字x存放在哪里呢？名称空间是存放名字x与1绑定关系的地方；&lt;br/&gt;名称空间的共有3种，分别如下：&lt;br/&gt;1.locals:是函数内的名称空间，包括局部变量和形参&lt;br/&gt;2.globals：全局变量，函数定义所在模块的名字空间&lt;br/&gt;3.builtins:内置模块的名字空间；&lt;br/&gt;不同变量的作用域不同，就是由这个变量所在的命名空间决定的&lt;br/&gt;作用域即范围：&lt;/li&gt;
&lt;li&gt;全局范围：全局存活，全局有效&lt;/li&gt;
&lt;li&gt;局部范围：临时存活，局部有效&lt;br/&gt;查看作用域的方法：globals(),locals()&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;闭包的定义：&lt;br/&gt;个人总结：&lt;br/&gt;闭包：就是内部函数使用了外部函数的变量，同时外部函数的返回值是内层的函数的内存地址，在我们调用外部函数的时候，其实得出的结果是内部函数的内存地址，这种内部函数和外部函数的相互使用，纠缠的关系，就叫做闭包；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fun1():
    n&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fun2():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(n)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; fun2
f&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fun1()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f)
f()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;&amp;lt; function func..func2 at 0x103dc7158&amp;gt;&lt;br/&gt;10&lt;br/&gt;从上述的代码可以看出：&lt;br/&gt;print(f)其实打印的结果是：fun2的内存地址，而f()实际打印的是fun1的局部变量；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;上述案例的分析：&lt;br/&gt;这里代码的最终执行的是fun2,打印的是确实fun1的局部变量，理论在fun1()这个函数调用以后，内部的变量就应该释放掉，这样我们打印的n就应该是不存在的，但是执行的时候是存在的；这个和之前学的函数调用之后，局部变量就释放了，这个理论是有矛盾的，以前说过，局部变量临时有效，执行就有，不执行就没有，但是为什么释放了，为什么还能用呢，这就是闭包，闭包就是为了解释这种现象；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;装饰器&quot;&gt;装饰器&lt;/h2&gt;
&lt;p&gt;你是一家视频网站的后端开发工程师，你们网站有以下几个版块&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;视频刚上线初期，为了吸引用户，你们采取了免费政策，所有视频免费观看，迅速吸引了一大批用户，免费一段时间后，想收费得先让其进行用户认证，认证通过后，再判定这个用户是否是VIP付费会员就可以了，是VIP就让看，不是VIP就不让看就行了呗。 你觉得这个需求很是简单，因为要对多个版块进行认证，那应该把认证功能提取出来单独写个模块，然后每个版块里调用 就可以了，于是就开始了 。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#用户登录了把这里改为True&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; login():
    _username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面的用户名、&lt;/span&gt;
    _password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abc123'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面存的用户名&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; user_status
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
        username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user:&quot;&lt;/span&gt;)
        password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; username&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_username &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_password:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;please login&quot;&lt;/span&gt;)
            user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;the wrong usernam or password&quot;&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;用户已经登录验证通过 &quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love():
    login()&lt;span class=&quot;co&quot;&gt;#执行之前加上验证&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife():
    login()&lt;span class=&quot;co&quot;&gt;#执行之前加上验证&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)
Love()
CityLife()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果现在有很多模块需要加认证模块，你的代码虽然实现了功能，但是需要更改需要加认证的各个模块的代码，这直接违反了软件开发中的一个原则“开放-封闭”原则，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即：&lt;br/&gt;封闭：已实现的功能代码块不应该被修改&lt;br/&gt;开放：对现有功能的扩展开放；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;如何在不改原有功能代码的情况下加上认证功能呢？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;依然记得：我们以前学习的高阶函数，就是把一个函数当做一个参数传给另外一个函数，当时说，有一天，你会用到它的，没想到这时这个知识点突然从脑子里蹦出来了，我只需要写个认证方法，每次调用需要验证的功能时，直接把这个功能的函数名当做一个参数传给我的验证模块不就行了么？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; login(func):
    _username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面的用户名、&lt;/span&gt;
    _password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abc123'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面存的用户名&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; user_status
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
        username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user:&quot;&lt;/span&gt;)
        password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; username&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_username &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_password:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;please login&quot;&lt;/span&gt;)
            user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;the wrong usernam or password&quot;&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;用户已经登录验证通过 &quot;&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:
        func()&lt;span class=&quot;co&quot;&gt;#只要通过了就调用相应的功能；&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)
login(Love)&lt;span class=&quot;co&quot;&gt;#把需要认证的模块当做参数传给login()&lt;/span&gt;
login(CityLife)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;br/&gt;user:wang&lt;br/&gt;password:abc123&lt;br/&gt;please login&lt;br/&gt;----爱情片----&lt;br/&gt;用户已经登录验证通过&lt;br/&gt;----都市生活----&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;问题：上述功能实现了，有没有什么不妥的地方？你功能是实现了，但是你又犯了一个大忌，什么大忌？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;你改变了调用方式呀，想一想，现在没每个需要认证的模块，都必须调用你的login()方法，并把自己的函数名传给你，人家之前可不是这么调用的，试想，如果有100个模块需要认证，那这100个模块都得更改调用方式，这么多模块肯定不止是一个人写的，让每个人再去修改调用方式才能加上认证，你会被骂死的。。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;还记的我们之前学习的匿名函数吗？&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; plus(n):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; n&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;
 
plus2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x:x&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实这两个的效果是一样的；&lt;br/&gt;这里我们给lambda x:x+1起了个名字叫plus2，是不是相当于def plus2(x) ?&lt;/p&gt;
&lt;p&gt;答案：是的&lt;/p&gt;
&lt;p&gt;这里只想告诉我们，给函数赋值变量名就像def func_name是一样的效果，如下面的plus(n)函数，你调用时可以用plus名，还可以再起个其它名字，如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;calc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; plus
 
calc(n)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;你明白我想传达什么意思了么？&lt;br/&gt;如下：之前我们写的需要认证的代码：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;login(Love)&lt;span class=&quot;co&quot;&gt;#把需要认证的模块当做参数传给login()&lt;/span&gt;
login(CityLife)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你之所改变了调用方式，是因为用户每次调用时需要执行login(CityLife)，类似的。其实稍一改就可以了呀&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;Love&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;login(Love)&lt;span class=&quot;co&quot;&gt;#把需要认证的模块当做参数传给login(),然后在赋值给自己的模块的名字；&lt;/span&gt;
CityLife&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;login(CityLife)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样以来，其它人调用Love时，其实相当于调用了login(Love), 通过login里的验证后，就会自动调用Love的功能。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;Love&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;login(Love) &lt;span class=&quot;co&quot;&gt;#你在这里相当于把Love这个函数替换了&lt;/span&gt;
CityLife&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;login(CityLife)&lt;span class=&quot;co&quot;&gt;#你在这里相当于把CityLife这个函数替换了&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#那用户调用时依然可以写&lt;/span&gt;
Love()
CityLife()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是上述代码有一个问题：还不等用户调用Love(),这里的：Love=login(Love)，都已经执行完了，怎样才能实现，当用户掉用的时候才会执行呢？&lt;br/&gt;1.之前我们有学过：函数的嵌套，现在我们可以在login函数里面增加一个inner()然后让login(func)返回的是，inner的内存地址，这样我们在Love=login(Love)的时候，就得到的结果其实就是inner的内存地址，然后用户在调用Love()的时候，才会真的去验证这个认证需求；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; login(func):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; inner():&lt;span class=&quot;co&quot;&gt;#定义一个内部函数&lt;/span&gt;
        _username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面的用户名、&lt;/span&gt;
        _password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abc123'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面存的用户名&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; user_status
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
            username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user:&quot;&lt;/span&gt;)
            password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; username&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_username &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_password:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;please login&quot;&lt;/span&gt;)
                user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;the wrong usernam or password&quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;用户已经登录验证通过 &quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:
            func()&lt;span class=&quot;co&quot;&gt;#只要通过了就调用相应的功能；&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; inner&lt;span class=&quot;co&quot;&gt;#在调用login（func）这个函数的时候，返回的是inner的一个内存地址；&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)
Love&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;login(Love)&lt;span class=&quot;co&quot;&gt;#把需要认证的模块当做参数传给login()，当login(Love)其实得到的是inner的一个内存地址&lt;/span&gt;
CityLife&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;login(CityLife)&lt;span class=&quot;co&quot;&gt;#把需要认证的模块当做参数传给login()，当login(Love)其实得到的是inner的一个内存地址&lt;/span&gt;
Love()&lt;span class=&quot;co&quot;&gt;#相当于inner()&lt;/span&gt;
CityLife()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果所有的都要按照上述的代码写，会很冗余，python针对这种情况有自己专门的书写格式：&lt;a href=&quot;mailto:在需要认证的函数上边加一行@login&quot;&gt;在需要认证的函数上边加一行@login&lt;/a&gt;，其实是和：Love=login(Love)效果是一样的；所以代码可以这么写：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; login(func):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; inner():&lt;span class=&quot;co&quot;&gt;#定义一个内部函数&lt;/span&gt;
        _username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面的用户名、&lt;/span&gt;
        _password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abc123'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面存的用户名&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; user_status
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
            username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user:&quot;&lt;/span&gt;)
            password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; username&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_username &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_password:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;please login&quot;&lt;/span&gt;)
                user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;the wrong usernam or password&quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;用户已经登录验证通过 &quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:
            func()&lt;span class=&quot;co&quot;&gt;#只要通过了就调用相应的功能；&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; inner&lt;span class=&quot;co&quot;&gt;#在调用login（func）这个函数的时候，返回的是inner的一个内存地址；&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)
&lt;span class=&quot;at&quot;&gt;@login&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#认证的装饰器&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)
&lt;span class=&quot;at&quot;&gt;@login&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#认证的装饰器&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)
Love()
CityLife()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们给函数传入参数：Love('beijing')；&lt;br/&gt;TypeError: inner() takes 0 positional arguments but 1 was given；&lt;br/&gt;如上述的结果会报错：why?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;这里大家思考一下：我们在第一次调用：Love的时候，是不是相当于Love=login(Love),结果相当于inner的内存地址，第二次：Love()的时候，才是相当于走了inner()函数的调用，但是我们可以看出inner()里面没有传入参数，所以会报错的；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;如果要支持，传入参数：也不是不可以这里直接稍微修改一下就可以了：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; login(func):
    
    
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; inner(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):&lt;span class=&quot;co&quot;&gt;#定义一个内部函数并且添加参数&lt;/span&gt;
        
        
        
        _username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面的用户名、&lt;/span&gt;
        _password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'abc123'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#假如这是DB里面存的用户名&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; user_status
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
            username&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user:&quot;&lt;/span&gt;)
            password&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; username&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_username &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; password&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;_password:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;please login&quot;&lt;/span&gt;)
                user_status&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;the wrong usernam or password&quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;用户已经登录验证通过 &quot;&lt;/span&gt;)
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:
            
            
            
            func(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs)&lt;span class=&quot;co&quot;&gt;#只要通过了就调用相应的功能，添加参数,传到相应的版块；&lt;/span&gt;
            
            
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; inner&lt;span class=&quot;co&quot;&gt;#在调用login（func）这个函数的时候，返回的是inner的一个内存地址；&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)
&lt;span class=&quot;at&quot;&gt;@login&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#认证的装饰器&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love(arg):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)
&lt;span class=&quot;at&quot;&gt;@login&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;#认证的装饰器&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife(arg):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)
    
Love(&lt;span class=&quot;st&quot;&gt;'beijing'&lt;/span&gt;)

CityLife(&lt;span class=&quot;st&quot;&gt;'shanghai'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果用户需求是：&lt;br/&gt;增加对QQ，微博，等登录的验证：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;user_status &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; login(auth_type):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; auth(func):
        &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; inner(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args, &lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):  &lt;span class=&quot;co&quot;&gt;# 定义一个内部函数并且添加参数&lt;/span&gt;

            _username &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'wang'&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# 假如这是DB里面的用户名、&lt;/span&gt;
            _password &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'abc123'&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# 假如这是DB里面存的用户名&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;global&lt;/span&gt; user_status
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;:
                username &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;user:&quot;&lt;/span&gt;)
                password &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;)
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; username &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; _username &lt;span class=&quot;op&quot;&gt;and&lt;/span&gt; password &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; _password:
                    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;please login&quot;&lt;/span&gt;)
                    user_status &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;the wrong usernam or password&quot;&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;用户已经登录验证通过 &quot;&lt;/span&gt;)
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; user_status &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;:
                func(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args, &lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs)  &lt;span class=&quot;co&quot;&gt;# 只要通过了就调用相应的功能，添加参数,传到相应的版块；&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; inner  &lt;span class=&quot;co&quot;&gt;# 在调用login（func）这个函数的时候，返回的是inner的一个内存地址；&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; auth



&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; home():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---首页----&quot;&lt;/span&gt;)


&lt;span class=&quot;at&quot;&gt;@login&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'qq'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 认证的装饰器&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; Love(arg):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----爱情片----&quot;&lt;/span&gt;)


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; KongBu():
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----恐怖片----&quot;&lt;/span&gt;)


&lt;span class=&quot;at&quot;&gt;@login&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'weibo'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 认证的装饰器&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; CityLife(arg):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;----都市生活----&quot;&lt;/span&gt;)


Love(&lt;span class=&quot;st&quot;&gt;'beijing'&lt;/span&gt;)

CityLife(&lt;span class=&quot;st&quot;&gt;'shanghai'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 23 Jun 2018 14:14:00 +0000</pubDate>
<dc:creator>cherry小樱桃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/surewing/p/9219067.html</dc:identifier>
</item>
<item>
<title>View 渲染 - Aseven</title>
<link>http://www.cnblogs.com/skm-blog/p/9219064.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skm-blog/p/9219064.html</guid>
<description>&lt;p&gt;在Spring MVC 中，controllers不负责具体的页面渲染，仅仅是调用业务逻辑并返回model数据给view层，至于view层具体怎么展现，由专门的view层具体负责，这就是MVC模式，业务层与展示层是松耦合的。那么，Spring MVC是如何解耦合请求处理逻辑和页面渲染的呢？&lt;/p&gt;
&lt;h4 id=&quot;h&quot;&gt;视图解析器&lt;/h4&gt;
&lt;p&gt;请求进入DispathServlet后，通过HandlerMapping找到对应的HandlerExecutionChain，&lt;br/&gt;最后交由HandlerAdapter来执行最终Handler【也就是Controller中的Action】，最终得到ModelAndView，然后再次交给DispatchServlet来处理，并执行render方法处理渲染逻辑，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;render(&lt;span class=&quot;hljs-params&quot;&gt;ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2        Locale locale =&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3                (&lt;span class=&quot;hljs-keyword&quot;&gt;this.localeResolver != &lt;span class=&quot;hljs-literal&quot;&gt;null ? &lt;span class=&quot;hljs-keyword&quot;&gt;this.localeResolver.resolveLocale(request) : request.getLocale());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4        response.setLocale(locale);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6        View view;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7        String viewName = mv.getViewName();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8        &lt;span class=&quot;hljs-keyword&quot;&gt;if (viewName != &lt;span class=&quot;hljs-literal&quot;&gt;null) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9            &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1    &lt;span class=&quot;hljs-keyword&quot;&gt;protected View resolveViewName(String viewName, &lt;span class=&quot;hljs-meta&quot;&gt;@Nullable Map&amp;lt;String, Object&amp;gt; model,&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2            Locale locale, HttpServletRequest request) throws Exception {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4        &lt;span class=&quot;hljs-keyword&quot;&gt;if (&lt;span class=&quot;hljs-keyword&quot;&gt;this.viewResolvers != &lt;span class=&quot;hljs-literal&quot;&gt;null) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5            &lt;span class=&quot;hljs-keyword&quot;&gt;for (ViewResolver viewResolver : &lt;span class=&quot;hljs-keyword&quot;&gt;this.viewResolvers) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Spring MVC其实就是通过遍历ViewResolvers这种视图解析器集合，根据视图名来找到找到真正的物理视图【view页面】，对于普通的JSP页面，最常用到的view resolver就是InternalResourceViewResolver，它有两个属性，一个是匹配物理view的前缀，一个是后缀。前缀一般就是view页面的路径位置，后缀就是文件的格式，而前缀后缀之间的就是逻辑view名称。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&amp;lt;bean &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prefix&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/WEB-INF/views/&quot; /&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;suffix&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;.jsp&quot; /&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比如按照上面的配置，如果controller返回的逻辑view名称是home的话，InternalResourceViewResolver会根据这个逻辑view名home找到其对应的实际物理view：/WEB-INF/views/home.jsp。&lt;/p&gt;
&lt;p&gt;下面我们在看下视图解析器的定义如下，就一个方法resolveViewName，根据视图名称和Local对象得到最终的View视图&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;ViewResolver {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2    &lt;span class=&quot;hljs-meta&quot;&gt;@Nullable&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3    &lt;span class=&quot;hljs-function&quot;&gt;View &lt;span class=&quot;hljs-title&quot;&gt;resolveViewName&lt;span class=&quot;hljs-params&quot;&gt;(String viewName, Locale locale) &lt;span class=&quot;hljs-keyword&quot;&gt;throws Exception;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h-1&quot;&gt;视图渲染&lt;/h4&gt;
&lt;p&gt;如上，通过视图解析器ViewResolver 最终会得到视图View，然后会通过调用View对象的render方法来真正执行视图渲染的逻辑，View对象的定义如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface &lt;span class=&quot;hljs-title&quot;&gt;View {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3    String SELECTED_CONTENT_TYPE = View.class.getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.selectedContentType&quot;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;render&lt;span class=&quot;hljs-params&quot;&gt;(@Nullable Map&amp;lt;String, ?&amp;gt; model, HttpServletRequest request, HttpServletResponse response)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7            &lt;span class=&quot;hljs-keyword&quot;&gt;throws Exception;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;9}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不同的实现类有不同的视图效果：&lt;/p&gt;
&lt;p&gt;1、VelocityView是用来和Velocity框架结合生成页面视图&lt;/p&gt;
&lt;p&gt;2、FreeMarkerView是用来和FreeMarker框架结合生成页面视图&lt;/p&gt;
&lt;p&gt;3、JstlView是用来生成jstl页面&lt;/p&gt;
&lt;p&gt;4、RedirectView是生成页面跳转视图的。&lt;/p&gt;
&lt;p&gt;看下View的实现逻辑AbstractView源码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1    public &lt;span class=&quot;hljs-keyword&quot;&gt;void render(@Nullable &lt;span class=&quot;hljs-built_in&quot;&gt;Map&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String, ?&amp;gt; model, HttpServletRequest request,&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2            HttpServletResponse response) throws Exception {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实就根据ModelAndView和Request中的数据，加载视图，然后写入到Response中（先设置ContentType），最后输出给用户。&lt;/p&gt;

&lt;blockquote readability=&quot;5.0091743119266&quot;&gt;
&lt;p&gt;微信公众号：宋坤明&lt;br/&gt;更多精彩请参考 完整版系列 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3MDQyODI1OA==&amp;amp;mid=2247483766&amp;amp;idx=1&amp;amp;sn=4746b214390cb6ce9b8bde7291f09ed3&amp;amp;chksm=fceedf7bcb99566d93c416407e24e695e2ff6ae783620a22dee2e8d46516f6db4223d7d6e68b&amp;amp;scene=21#wechat_redirect&quot;&gt;请参考此博文&lt;/a&gt; 也可以直接关注我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img title=&quot;图注:宋坤明公众号&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5DXUjepfcKRBbZzRKpcVaHZARuA0bhZFMfC3EWiaLOj8qRSiaVjibl4OUibVZOo0AY8XFtuzibZdjAksafUp2CiafvxA/0?wx_fmt=jpeg&quot; alt=&quot;图注:宋坤明公众号&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 23 Jun 2018 14:13:00 +0000</pubDate>
<dc:creator>Aseven</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skm-blog/p/9219064.html</dc:identifier>
</item>
<item>
<title>Java并发编程笔记之LinkedBlockingQueue源码探究 - 狂小黑</title>
<link>http://www.cnblogs.com/huangjuncong/p/9218194.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangjuncong/p/9218194.html</guid>
<description>&lt;p&gt;LinkedBlockingQueue的实现是使用独占锁实现的阻塞队列。首先看一下LinkedBlockingQueue 的类图结构，如下图所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201806/1202638-20180623164633973-1616080179.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;如类图所示：LinkedBlockingQueue是使用单向链表实现，有两个Node分别来存放首尾节点，并且里面有个初始值为0 的原子变量count，它用来记录队列元素个数。&lt;/p&gt;
&lt;p&gt;另外里面有两个ReentrantLock的实例，分别用来控制元素入队和出队的原子性，其中takeLock用来控制同时只有一个线程可以从队列获取元素，其他线程必须等待，&lt;/p&gt;
&lt;p&gt;putLock控制同时只能有一个线程可以获取锁去添加元素，其他线程必须等待。另外notEmpty 和 notFull 是信号量，内部分别有一个条件队列用来存放进队和出队的时候被阻塞的线程，&lt;/p&gt;
&lt;p&gt;说白了，这其实就是一个生产者 -  消费者模型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们首先看一下独占锁的源码，如下所示：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　/*&lt;/span&gt;&lt;span&gt;* 执行take, poll等操作时候需要获取该锁 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; final ReentrantLock takeLock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* 当队列为空时候执行出队操作（比如take）的线程会被放入这个条件队列进行等待 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; final Condition notEmpty =&lt;span&gt; takeLock.newCondition();

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* 执行put, offer等操作时候需要获取该锁&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; final ReentrantLock putLock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*当队列满时候执行进队操作（比如put)的线程会被放入这个条件队列进行等待 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; final Condition notFull =&lt;span&gt; putLock.newCondition();

 　　&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* 当前队列元素个数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; final AtomicInteger count = &lt;span&gt;new&lt;/span&gt; AtomicInteger(&lt;span&gt;0&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;接着我们要进入LinkedBlockingQueue 无参构造函数，源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt;   MAX_VALUE = &lt;span&gt;0x7fffffff&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LinkedBlockingQueue() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(Integer.MAX_VALUE);
}

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; LinkedBlockingQueue(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; capacity) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (capacity &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalArgumentException();
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.capacity =&lt;span&gt; capacity;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化首尾节点,指向哨兵节点&lt;/span&gt;
    last = head = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;E&amp;gt;(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
　}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从源码中可以看到，默认队列的容量为0x7fffffff; 用户也可以自己指定容量，所以一定程度上 LinkedBlockingQueue 可以说是有界阻塞队列。&lt;/p&gt;

&lt;p&gt;接下来我们主要看LinkedBlockingQueue 的几个主要方法的源码，如下：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1.offer操作，向队列尾部插入一个元素，如果队列有空闲容量则插入成功后返回true，如果队列已满则丢弃当前元素然后返回false，如果 e元素为null，则抛出空指针异常(NullPointerException )，还有一点就是，该方法是非阻塞的。源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean offer(E e) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;（1）空元素抛空指针异常&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (e == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2) 如果当前队列满了则丢弃将要放入的元素，然后返回false&lt;/span&gt;
        final AtomicInteger count = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() ==&lt;span&gt; capacity)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(3) 构造新节点，获取putLock独占锁&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; c = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        Node&lt;/span&gt;&amp;lt;E&amp;gt; node = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt;(e);
        final ReentrantLock putLock &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.putLock;
        putLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(4)如果队列不满则进队列，并递增元素计数&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() &amp;lt;&lt;span&gt; capacity) {
                enqueue(node);
                c &lt;/span&gt;=&lt;span&gt; count.getAndIncrement();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(5)&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (c + &lt;span&gt;1&lt;/span&gt; &amp;lt;&lt;span&gt; capacity)
                    notFull.signal();
            }
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(6)释放锁&lt;/span&gt;
&lt;span&gt;            putLock.unlock();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(7)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (c == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            signalNotEmpty();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(8)&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; c &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; enqueue(Node&amp;lt;E&amp;gt;&lt;span&gt; node) {   
 last &lt;/span&gt;= last.next =&lt;span&gt; node;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码（2）判断的是如果当前队列已满则丢弃当前元素并返回false。&lt;/p&gt;
&lt;p&gt;代码（3）获取到putLock锁，当前线程获取到该锁后，则其他调用put 和 offer 的线程将会被阻塞（阻塞的线程被放到 putLock 锁的 AQS 阻塞队列）。&lt;/p&gt;
&lt;p&gt;代码（4）这里又重新判断了一下当前队列是否满了，这是因为在执行代码（2）和获取到putLock锁期间，有可能其他线程通过put 或者 offer方法想队列里面添加了新的元素。重新判断队列确实不满则新元素入队，并递增计数器。&lt;/p&gt;
&lt;p&gt;代码（5）判断的是如果新元素入队后还有空闲空间，则唤醒notFull的条件队列里面因为调用了notFull 的 await 操作（比如执行put方法而队列满了的时候）而被阻塞的一个线程，因为队列现在有空闲，所以这里可以提前唤醒一个入队线程。&lt;/p&gt;
&lt;p&gt;代码（6）则释放获取的putLock锁，这里要注意锁的释放一定要在finally里面做，因为即使try块抛出异常了，finally也是会被执行到的。另外释放锁后其他因为调用put和offer而被阻塞的线程将会有一个获取到改锁。&lt;/p&gt;
&lt;p&gt;代码（7）c == 0说明在执行代码（6）释放锁的时候队列里面至少有一个元素，队列里面有元素则执行signalNotEmpty，signalNotEmpty的源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; signalNotEmpty() {
        final ReentrantLock takeLock &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
        takeLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            notEmpty.signal();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            takeLock.unlock();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面代码可以看到其作用是激活notEmpty 的条件队列中因为调用notEmpty的await方法（比如调用 take 方法并且队列为空的时候）而被阻塞的一个线程，这里也说明了调用条件变量的方法前，要首先获取对应的锁。&lt;/p&gt;
&lt;p&gt;offer的总结：offer方法中通过使用putLock锁保证了在队尾新增元素的原子性和队列元素个数的比较和递增操作的原子性。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;2.put操作，向队列尾部插入一个元素，如果队列有空闲则插入后直接返回true,如果队列已经满则阻塞当前线程知道队列有空闲插入成功后返回true，如果在阻塞的时候被其他线程设置了中断标志，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;则被阻塞线程会抛出InterruptedException 异常而返回，另外如果 e 元素为 null 则抛出 NullPointerException 异常。源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; put(E e) throws InterruptedException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;（1）空元素抛空指针异常&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (e == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2) 构建新节点，并获取独占锁putLock&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; c = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        Node&lt;/span&gt;&amp;lt;E&amp;gt; node = &lt;span&gt;new&lt;/span&gt; Node&amp;lt;E&amp;gt;&lt;span&gt;(e);
        final ReentrantLock putLock &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.putLock;
        final AtomicInteger count &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
        putLock.lockInterruptibly();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(3)如果队列满则等待&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() ==&lt;span&gt; capacity) {
                notFull.&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt;();
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;（4）进队列并递增计数&lt;/span&gt;
&lt;span&gt;            enqueue(node);
            c &lt;/span&gt;=&lt;span&gt; count.getAndIncrement();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(5)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (c + &lt;span&gt;1&lt;/span&gt; &amp;lt;&lt;span&gt; capacity)
                notFull.signal();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(6)&lt;/span&gt;
&lt;span&gt;            putLock.unlock();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(7)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (c == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            signalNotEmpty();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码（2）中使用 putLock.lockInterruptibly() 获取独占锁，相比 offer 方法中这个获取独占锁方法意味着可以被中断，具体说是当前线程在获取锁的过程中，如果被其它线程设置了中断标志则当前线程会抛出 InterruptedException 异常，&lt;/p&gt;
&lt;p&gt;所以put操作在获取 锁过程中是可被中断的。&lt;/p&gt;
&lt;p&gt;代码（3）如果当前队列已经满，则notFull 的 await() 把当前线程放入 notFull 的条件队列，当前线程被阻塞挂起并释放获取到的 putLock 锁，由于putLock锁被释放了，所以现在其他线程就有机会获取到putLock锁了。&lt;/p&gt;
&lt;p&gt;代码（3）判断队列是否为空为何使用 while 循环而不是 if 语句呢？&lt;/p&gt;
&lt;p&gt;这是因为考虑到当前线程被虚假唤醒的问题，也就是其它线程没有调用 notFull 的 singal 方法时候，notFull.await() 在某种情况下会自动返回。&lt;/p&gt;
&lt;p&gt;如果使用if语句简单判断一下，那么虚假唤醒后会执行代码（4），元素入队，并且递增计数器，而这时候队列已经是满了的，导致队列元素个数大于了队列设置的容量，导致程序出错。&lt;/p&gt;
&lt;p&gt;而使用使用 while 循环假如 notFull.await() 被虚假唤醒了，那么循环在检查一下当前队列是否是满的，如果是则再次进行等待。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;3.poll操作，从队列头部获取并移除一个元素，如果队列为空则返回 null，该方法是不阻塞的。源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt;&lt;span&gt; E poll() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)队列为空则返回null&lt;/span&gt;
        final AtomicInteger count = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2)获取独占锁&lt;/span&gt;
        E x = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        final ReentrantLock takeLock &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
        takeLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(3)队列不空则出队并递减计数&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.1&lt;/span&gt;
                x = dequeue();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.2&lt;/span&gt;
                c = count.getAndDecrement();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.3
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(4)&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (c &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                    notEmpty.signal();
            }
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(5)&lt;/span&gt;
&lt;span&gt;            takeLock.unlock();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(6)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (c ==&lt;span&gt; capacity)
            signalNotFull();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(7)返回&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
    }
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; E dequeue() {
        Node&lt;/span&gt;&amp;lt;E&amp;gt; h =&lt;span&gt; head;
        Node&lt;/span&gt;&amp;lt;E&amp;gt; first =&lt;span&gt; h.next;
        h.next &lt;/span&gt;= h; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; help GC&lt;/span&gt;
        head =&lt;span&gt; first;
        E x &lt;/span&gt;=&lt;span&gt; first.item;
        first.item &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码(1) 如果当前队列为空，则直接返回 null。&lt;/p&gt;
&lt;p&gt;代码（2）获取独占锁 takeLock，当前线程获取该锁后，其它线程在调用 poll 或者 take 方法会被阻塞挂起。&lt;/p&gt;
&lt;p&gt;代码 (3) 如果当前队列不为空则进行出队操作，然后递减计数器。&lt;/p&gt;
&lt;p&gt;代码（4）如果 c&amp;gt;1 则说明当前线程移除掉队列里面的一个元素后队列不为空（c 是删除元素前队列元素个数），那么这时候就可以激活因为调用 poll 或者 take 方法而被阻塞到notEmpty 的条件队列里面的一个线程。&lt;/p&gt;
&lt;p&gt;代码（5）释放锁，一定要在finally里面释放锁。&lt;/p&gt;
&lt;p&gt;代码（6）说明当前线程移除队头元素前当前队列是满的，移除队头元素后队列当前至少有一个空闲位置，那么这时候就可以调用signalNotFull激活因为调用put 或者 offer 而被阻塞放到 notFull 的条件队列里的一个线程，signalNotFull 源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; signalNotFull() {
          final ReentrantLock putLock &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.putLock;
          putLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
          &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
              notFull.signal();
          } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
              putLock.unlock();
          }
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;poll 代码逻辑比较简单，值得注意的是获取元素时候只操作了队列的头节点。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　&lt;strong&gt;　4.peek 操作，获取队列头部元素但是不从队列里面移除，如果队列为空则返回 null，该方法是不阻塞的。源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt;&lt;span&gt; E peek() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2)&lt;/span&gt;
        final ReentrantLock takeLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
        takeLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Node&lt;/span&gt;&amp;lt;E&amp;gt; first =&lt;span&gt; head.next;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(3)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (first == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(4)&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; first.item;
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(5)&lt;/span&gt;
&lt;span&gt;            takeLock.unlock();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到代码（3）这里还是需要判断下 first 是否为 null 的，不能直接执行代码（4）。&lt;/p&gt;
&lt;p&gt;正常情况下执行到代码（2）说明队列不为空，但是代码（1）和（2）不是原子性操作，也就是在执行代码（1）判断队列不为空后，&lt;/p&gt;
&lt;p&gt;在代码（2）获取到锁前，有可能其他线程执行了poll 或者 take 操作导致队列变为了空，然后当前线程获取锁后，直接执行 first.item 会抛出空指针异常。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　&lt;strong&gt;5.take 操作，获取当前队列头部元素并从队列里面移除，如果队列为空则阻塞调用线程。如果队列为空则阻塞当前线程知道队列不为空，然后返回元素，如果在阻塞的时候被其他线程设置了中断标志，则被阻塞线程会抛出InterruptedException 异常而返回。源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt;&lt;span&gt; E take() throws InterruptedException {
        E x;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        final AtomicInteger count &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)获取锁&lt;/span&gt;
        final ReentrantLock takeLock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.takeLock;
        takeLock.lockInterruptibly();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2)当前队列为空则阻塞挂起&lt;/span&gt;
            &lt;span&gt;while&lt;/span&gt; (count.&lt;span&gt;get&lt;/span&gt;() == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
                notEmpty.&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt;();
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(3)出队并递减计数&lt;/span&gt;
            x =&lt;span&gt; dequeue();
            c &lt;/span&gt;=&lt;span&gt; count.getAndDecrement();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(4)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (c &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                notEmpty.signal();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(5)&lt;/span&gt;
&lt;span&gt;            takeLock.unlock();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(6)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (c ==&lt;span&gt; capacity)
            signalNotFull();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(7)&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码（1）当前线程获取到独占锁，其他调用take 或者 poll的线程将会被阻塞挂起。&lt;/p&gt;
&lt;p&gt;代码（2）如果队列为空则阻塞挂起当前线程，并把当前线程放入 notEmpty 的条件队列。&lt;/p&gt;
&lt;p&gt;代码（3）进行出队操作并递减计数。&lt;/p&gt;
&lt;p&gt;代码（4）如果 c &amp;gt; 1 说明当前队列不为空，则唤醒notEmpty 的条件队列的条件队列里面的一个因为调用 take 或者 poll 而被阻塞的线程。&lt;/p&gt;
&lt;p&gt;代码（5）释放锁。&lt;/p&gt;
&lt;p&gt;代码（6）如果 c == capacity 则说明当前队列至少有一个空闲位置，则激活条件变量 notFull 的条件队列里面的一个因为调用 put 或者 offer 而被阻塞的线程。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;6.remove操作，删除队列里面指定元素，有则删除返回 true，没有则返回 false，源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean remove(Object o) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;（1）双重加锁&lt;/span&gt;
&lt;span&gt;    fullyLock();
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;（2)遍历队列找则删除返回true&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (Node&amp;lt;E&amp;gt; trail = head, p =&lt;span&gt; trail.next;
             p &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
             trail &lt;/span&gt;= p, p =&lt;span&gt; p.next) {
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(3)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (o.equals(p.item)) {
                unlink(p, trail);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(4)找不到返回false&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(5)解锁&lt;/span&gt;
&lt;span&gt;        fullyUnlock();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码（1）通过fullyLock获取双重锁，当前线程获取后，其他线程进行入队或者出队的操作就会被阻塞挂起。双重锁方法fullyLock的源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; fullyLock() {
    putLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
    takeLock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码（2）遍历队列寻找要删除的元素，找不到则直接返回false,找到则执行unlink操作，unlink的源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　void&lt;/span&gt; unlink(Node&amp;lt;E&amp;gt; p, Node&amp;lt;E&amp;gt;&lt;span&gt; trail) {
      p.item &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      trail.next &lt;/span&gt;=&lt;span&gt; p.next;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (last ==&lt;span&gt; p)
          last &lt;/span&gt;=&lt;span&gt; trail;
      如果当前队列满，删除后，也不忘记唤醒等待的线程
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (count.getAndDecrement() ==&lt;span&gt; capacity)
          notFull.signal();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;可以看到删除元素后，如果发现当前队列有空闲空间，则唤醒 notFull 的条件队列中一个因为调 用 put 或者 offer 方法而被阻塞的线程。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;代码（5）调用 fullyUnlock 方法使用与加锁顺序相反的顺序释放双重锁，源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; fullyUnlock() {
    takeLock.unlock();
    putLock.unlock();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　&lt;strong&gt;7.size操作，获取当前队列元素个数。源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size() {
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; count.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;总结：由于在操作出队入队的时候操作Count的时候加了锁，因此相比ConcurrentLinkedQueue 的size方法比较准确。&lt;/p&gt;
&lt;p&gt;最后用一张图来加深LinkedBlockingQueue的理解，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201806/1202638-20180623222605680-777972835.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;因此我们要思考一个问题：为何 ConcurrentLinkedQueue 中需要遍历链表来获取 size 而不适用一个原子变量呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为使用原子变量保存队列元素个数需要保证入队出队操作和操作原子变量是原子操作，而ConcurrentLinkedQueue 是使用 CAS 无锁算法的，所以无法做到这个。&lt;/p&gt;
</description>
<pubDate>Sat, 23 Jun 2018 13:45:00 +0000</pubDate>
<dc:creator>狂小黑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangjuncong/p/9218194.html</dc:identifier>
</item>
</channel>
</rss>