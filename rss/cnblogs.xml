<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>VIM学习总结 - banananana</title>
<link>http://www.cnblogs.com/George1994/p/9195370.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/George1994/p/9195370.html</guid>
<description>&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到下一个单词的开头（标点符号也算是一个单词，以下均如此）&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到下一个单词的结尾&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到上一个单词的开头&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到本行最开头，包括空格&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到本行最开头的字符处，不包括空行（和上面不一样）&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block md-focus-container&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;$&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span md-focus&quot;&gt;&lt;span&gt;移动光标到本行的字符结尾处，不包括空行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标至行尾并处于“追加”状态，直接编辑&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到屏幕（非整个文件）的首行的首个字母&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到屏幕的中间一行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到屏幕的尾行的首个字母处&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;gg&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到文档首行的首个字母处&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;G&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到文档尾行的首个字母处&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;:n&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;跳至第n行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;ctrl + f &lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;向下翻页 同 page down&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;ctrl + b&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;向上翻页 同 page up&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;ctrl + d&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;向下翻半页&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;ctrl + u&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;向上翻半页&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;ctrl + e&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;向下翻一行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;ctrl + y&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;向上翻一行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;转到上一个空行的起始位置处&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;转到下一个空行的起始位置处&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;''&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到上一个标记处,&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;'.&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到上一次的修改行&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;`.&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span contenteditable=&quot;true&quot; class=&quot;td-span&quot;&gt;&lt;span&gt;移动光标到上一次的修改点&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;md-end-block&quot;&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;</description>
<pubDate>Mon, 18 Jun 2018 07:50:00 +0000</pubDate>
<dc:creator>banananana</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/George1994/p/9195370.html</dc:identifier>
</item>
<item>
<title>轻松搭建CAS系列(1)-使用cas overlay搭建服务端 - 自助土豆</title>
<link>http://www.cnblogs.com/jpeanut/p/9170472.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jpeanut/p/9170472.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;概要说明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;cas的服务端搭建有两种常用的方式：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  1. 基于源码的基础上构建出来的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  2. 使用WAR overlay的方式来安装&lt;/span&gt;&lt;br/&gt;&lt;span&gt;官方推荐使用第二种，配置管理方便，以后升级也容易。本文就是使用第二种方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装步骤 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 安装GIT &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;自行到 &lt;a href=&quot;https://www.git-scm.com/download/&quot;&gt;https://www.git-scm.com/download/&lt;/a&gt; 下载后安装 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;2. 创建CAS的工作目录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; d:\casoverlay 
cd d:\casoverlay 
d:&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180611230257126-901204177.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.下载CAS Overlay&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;git clone -b &lt;span&gt;5.1&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/apereo/cas-overlay-template.git&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180611230320152-1097773822.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时，d:\casoverlay\ 下有个 cas-overlay-template 目录 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;4. 打包cas war&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd cas-overlay-&lt;span&gt;template 
build package&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180611230343854-1040341449.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看到build success说明打包成功了 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;打包的目录在 D:\casoverlay\cas-overlay-template\target\cas &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;5. 下载tomcat &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;下载地址 &lt;a href=&quot;https://tomcat.apache.org/download-80.cgi&quot;&gt;https://tomcat.apache.org/download-80.cgi&lt;/a&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;下载后，解压到 d:\casoverlay &lt;/span&gt;&lt;br/&gt;&lt;span&gt;（记得要下载JDK哦） &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;6. 部署cas war &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;将 D:\casoverlay\cas-overlay-template\target\ 的cas目录 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;复制到 D:\casoverlay\apache-tomcat-8.5.31\webapps &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;7. 启动tomcat &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;执行tomcat的登录命令 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;双击执行文件 D:\casoverlay\apache-tomcat-8.5.31\bin\startup.bat &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;8. 打开浏览器 &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;访问连接： &lt;a href=&quot;http://127.0.0.1:8080/cas/login&quot;&gt;http://127.0.0.1:8080/cas/login&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180611230403635-801866633.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输入帐号名密码： casuser/Mellon ，点击登录 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180611230422645-2022424907.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看到这个登录成功画面的话，恭喜您，CAS的第一步搭建已完成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外，大家对CAS想更多了解的话，可以来我的&lt;a href=&quot;http://www.cassso-china.cn/&quot; target=&quot;_blank&quot;&gt;CAS中文文档站点&lt;/a&gt;（&lt;a href=&quot;http://www.cassso-china.cn/&quot; target=&quot;_blank&quot;&gt;http://www.cassso-china.cn&lt;/a&gt;）来瞅瞅。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/205313/201806/205313-20180610143528384-1819804285.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 18 Jun 2018 07:48:00 +0000</pubDate>
<dc:creator>自助土豆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jpeanut/p/9170472.html</dc:identifier>
</item>
<item>
<title>Python安装与专属IDE_Pycharm安装配置、永久激活，赠汉化版！ - Q1622479435</title>
<link>http://www.cnblogs.com/Q1622479435/p/9195357.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Q1622479435/p/9195357.html</guid>
<description>&lt;p&gt;我是首先写pycharm教程，后来考虑到大家会装不会使用，我又写了一些基础使用教程，然后再写这个Python安装的。总共花费了87分钟，确实有点辛苦，所以这些简单的我都会用太多的话去解释了。实在看不懂，文末有视频教程。以及包，此文长度比较长，很正经，偏离了我搞笑写手的风格了。如果有不对的地方欢迎指出，请不要喷，谢谢！&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-ff5a2a9f158d63d1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;Python安装&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-2b8ea88a2429b5b8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;一、官网下载&lt;/p&gt;
&lt;p&gt;二、跟着步骤走一直点击next，就是这么简单。&lt;/p&gt;
&lt;p&gt;安装Pycharm&lt;/p&gt;
&lt;p&gt;一、下载Pycharm&lt;/p&gt;
&lt;p&gt;多余的话不说，pycharm是唯一一款专门为Python打造的IDE(编程工具)。&lt;/p&gt;
&lt;p&gt;1、进入Pycharm官网，如下图所示，点击立即下载Pycharm。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-cdd78a080caa82e9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;二、Pycharm的安装、配置、激活&lt;/p&gt;
&lt;p&gt;1、运行下载好的安装包，一路点下去直到完成安装。&lt;/p&gt;
&lt;p&gt;2、点击我们已经完成下载的Pycharm运行，如下界面所示，看到图中红色箭头所指滑条下滑，最后点Accept（接受）到下一步。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-ff367410facecf5a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;3、下一步会出现激活Pycharm界面，学生可填写自己所在大学信息，通过该校邮箱完成申请，显然只是针对学生，那么我的教程就失去意义了，选择Activation code让所有人都可以使用。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-fc6882f3facde7e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;由于此版本是收费版，这个时候需要安装一个破解包致永久使用，包在文末。&lt;/p&gt;
&lt;p&gt;下载此包后， 把它放到你安装pycharm的电脑本地的安装目录bin下。然后记得就该 vmoptions结尾的启动文件若下面所示:&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-92c1d9cc1096b071?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-a680323c472d186d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;重启IDE，pycharm&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-408a7d1607cabd97?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-016572d5dff7cc00?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;是不是感到一脸懵逼......其实，你可以用QQ上的那个提取图片文字的功能解决，或者文末有第二种方法。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-3805d8ce13c5ade4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-76a21116ce21c98e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;番外篇：pycharm初级使用方法&lt;/p&gt;
&lt;p&gt;第一步：打开pycharm后出现以下画面，创建Pycharm存放Python项目的文件目录，点击Create New Project。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-e2daa2b6ab3e0849?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-ef0959bbc7836104?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-a653d7ab8d945450?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;Pycharm配置完成。&lt;/p&gt;
&lt;p&gt;让Pycharm自动添加.py文件的编码，避免每次都要打上&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-14f44f40432b9d72?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;Pycharm运行至下图所示，点击File接着按顺序点击settings-&amp;gt;Editor-&amp;gt;File and Code Tempaltes。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-edd3092f550a9a40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;完成后得到这个界面&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-9cb5793952908830?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;界面：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-91d357e2c8e40d80?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;使用Pycharm开始我们的Python程序员之路，第一行代码hello world&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-ba347856dd06d7d9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;创建好文件夹后创建python文件，把python文件放到刚创建的文件夹的下，点击Python File输入一个文件名，然后点击python文件就创建完成了。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-15ea6349e950f38c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;接着做：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-8e185c84883ddf4f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;完成：&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;&lt;img class=&quot;uploaded-img&quot; src=&quot;https://upload-images.jianshu.io/upload_images/12604875-af3a6be28e504242?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; width=&quot;auto&quot; height=&quot;auto&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;小编推荐一个学Python的学习裙【 二二七，四三五，四五零 】，无论你是大牛还是小白，是想转行还是想入行都可以来了解一起进步一起学习！裙内有开发工具，很多干货和技术资料分享！希望新手少走弯路&lt;/p&gt;
</description>
<pubDate>Mon, 18 Jun 2018 07:47:00 +0000</pubDate>
<dc:creator>Q1622479435</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Q1622479435/p/9195357.html</dc:identifier>
</item>
<item>
<title>伟大软件的简易3步骤 - Jerry Tian</title>
<link>http://www.cnblogs.com/JerryTian/p/OOAD.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JerryTian/p/OOAD.html</guid>
<description>&lt;p&gt;好久没有更新了，不找原因和借口。博客还是要定时总结更新，下面是之前总结的读书内容，很早之前都编辑好了，一直躺在随笔中没有发布出来，发出来，激励自己，不断前进。。。&lt;/p&gt;
&lt;p&gt;关于OOAD：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;伟大软件的简易&lt;/strong&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;确认你的软件做客户要它做的事。&lt;/li&gt;
&lt;li&gt;运用基本的OO原则来增加软件的灵活性&lt;/li&gt;
&lt;li&gt;努力实现可维护、可重用的设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;关于需求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的需求确保你的系统如客户预期的那样运作。&lt;/p&gt;
&lt;p&gt;确认需求涵盖了系统的所有用例。&lt;/p&gt;
&lt;p&gt;运用用例找出客户忘了告诉你的事。&lt;/p&gt;
&lt;p&gt;用例将揭露任何不完整、遗漏的需求，你可能需要将它们加到你的系统中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于OO&lt;/strong&gt;&lt;strong&gt;原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将变化之处封装起来&lt;/p&gt;
&lt;p&gt;对接口编程，而不是实现&lt;/p&gt;
&lt;p&gt;应用程序的每一个类只有一个理由改变&lt;/p&gt;
&lt;p&gt;类是关于行为与功能的。&lt;/p&gt;
&lt;p&gt;类应该允许为扩展而开放，禁止为修改而关闭（OCP）&lt;/p&gt;
&lt;p&gt;通过将共同之处抽取出来并置于单一地方来避免重复的程序代码（DRY）&lt;/p&gt;
&lt;p&gt;系统里的每一个对象都应该具有单一的职责，所有对象的服务都应该聚焦在实现该职责上（SRP）&lt;/p&gt;
&lt;p&gt;子类型必须能够替换其基类型（LSP）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于分析与设计：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计良好的软件容易改变和扩展&lt;/p&gt;
&lt;p&gt;使用封装与继承这样的基本OO原则来确保你的软件有灵活性。&lt;/p&gt;
&lt;p&gt;如果设计没有灵活性，就改变它！别与坏设计妥协，即使那是你自己的坏设计，要改就是要改。&lt;/p&gt;
&lt;p&gt;确保你的每一个类都具有内聚性&lt;/p&gt;
&lt;p&gt;每一个类都应该聚焦在把一件事情做得很好上。&lt;/p&gt;
&lt;p&gt;随着软件的设计生命周期的展开，要持续努力提高内聚性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决大问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;聆听客户，找出他们要你构建什么&lt;/p&gt;
&lt;p&gt;用户客户理解的语言组合功能列表&lt;/p&gt;
&lt;p&gt;确认你的功能是客户真正想要的东西&lt;/p&gt;
&lt;p&gt;运用用例图（以及用例）创建系统的蓝图&lt;/p&gt;
&lt;p&gt;将大系统分解成许多较小的部分&lt;/p&gt;
&lt;p&gt;将设计模式运用到系统中较小的部分&lt;/p&gt;
&lt;p&gt;运用基本的OOAD原则为每一个较小的部分设计程序&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;编程实践：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;契约式编程为你与软件用户同意遵守的软件行为建立一个共同的协议。&lt;/p&gt;
&lt;p&gt;防御性编程不信任其它软件，进行广泛的错误及数据检查以确保其它软件不会给你不良的或不安全的信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开发方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用例驱动开发在进行应用程序的任何其它事情之前先取出系统的单一用例，并且聚焦在实现整个用例的程序代码上，包括它所有的场景。&lt;/p&gt;
&lt;p&gt;功能驱动开发在进行应用程序的任何其它事情之前先把焦点放在单一功能上，并且为该功能的所有行为编码。&lt;/p&gt;
&lt;p&gt;测试驱动开发在为功能编码之前先为功能型片段编写测试场景，接着编写软件以通过所有测试。&lt;/p&gt;
&lt;p&gt;良好的软件开发通常在开发周期的不同阶段，结合所有这些开发模型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;软件生命周期&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;功能列表  用例图  分解问题  需求 领域分析         初步设计                     实现                               交付&lt;/p&gt;
&lt;p&gt;------------------------------------------+----------------------------------------------------------------------+-〉&lt;/p&gt;
&lt;p&gt;   1.确认你的软件做客户要它做的事         |2.运用基本的OO原则来增加软件的灵活性 | 3.努力实现可维护、可重用的设计&lt;/p&gt;

</description>
<pubDate>Mon, 18 Jun 2018 07:18:00 +0000</pubDate>
<dc:creator>Jerry Tian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JerryTian/p/OOAD.html</dc:identifier>
</item>
<item>
<title>Vue.js 2.x：组件的定义和注册（详细的图文教程） - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/9195261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/9195261.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;https://www.cnblogs.com/smyhvae/p/9195261.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;h3 id=&quot;什么是组件&quot;&gt;什么是组件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;组件&lt;/strong&gt;： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可。&lt;/p&gt;
&lt;h3 id=&quot;模块化和组件化的区别&quot;&gt;模块化和组件化的区别&lt;/h3&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;模块化：是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;组件化：是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;全局组件的定义和注册&quot;&gt;全局组件的定义和注册&lt;/h2&gt;
&lt;p&gt;组件&lt;code&gt;Component&lt;/code&gt;是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。&lt;/p&gt;
&lt;p&gt;全局组件的定义和注册有三种方式，我们接下来讲一讲。&lt;/p&gt;
&lt;h3 id=&quot;写法一&quot;&gt;写法一&lt;/h3&gt;
&lt;p&gt;写法一：使用Vue.extend方法定义组件，使用 Vue.component方法注册组件。&lt;/p&gt;
&lt;p&gt;代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 如果要使用组件，直接把组件的名称，以 HTML 标签的形式，引入到页面中，即可 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;account&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/account&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//第一步：使用 Vue.extend 定义组件&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; myAccount &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;登录页面&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;注册页面&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 通过 template 属性，指定了组件要展示的HTML结构。template 是 Vue 中的关键字，不能改。&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//第二步：使用 Vue.component 注册组件&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// Vue.component('组件的名称', 创建出来的组件模板对象)&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'account'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; myAccount)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//第一个参数是组件的名称（标签名），第二个参数是模板对象&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，在注册组件时，第一个参数是标签名，第二个参数是组件的定义。&lt;/p&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180422_2230.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180422_2223.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，注意两点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意1&lt;/strong&gt;、红框部分，要保证二者的名字是一致的。如果在注册时，组件的名称是&lt;strong&gt;驼峰命名&lt;/strong&gt;，比如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'myComponent'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; myAccount)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//第一个参数是组件的名称（标签名），第二个参数是模板对象&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么，在标签中使用组件时，需要把大写的驼峰改为小写的字母，同时两个单词之间使用&lt;code&gt;-&lt;/code&gt;进行连接：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;my-component&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/my-component&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Vue.component('my')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意2&lt;/strong&gt;、绿框部分，一定要用一个大的根元素（例如&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;）包裹起来。如果我写成下面这样，就没有预期的效果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;            template: '&amp;lt;h2&amp;gt;登录页面&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;注册页面&amp;lt;/h3&amp;gt;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果如下：（并非预期的效果）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180422_2232.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;写法二&quot;&gt;写法二&lt;/h3&gt;
&lt;p&gt;写法二：Vue.component方法定义、注册组件（一步到位）。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;account&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/account&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//定义、注册组件：第一个参数是组件的名称（标签名），第二个参数是组件的定义&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'account'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;登录页面&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;注册页面&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// template 是 Vue 中的关键字，不能改。&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180422_2251.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，同样注意两点：&lt;/p&gt;
&lt;p&gt;1、红框部分，要保证二者的名字是一致的。&lt;/p&gt;
&lt;p&gt;2、绿框部分，一定要用一个大的根元素（例如&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;）包裹起来。如果我写成下面这样，就没有预期的效果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;            template: '&amp;lt;h2&amp;gt;登录页面&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;注册页面&amp;lt;/h3&amp;gt;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果如下：（并非预期的效果）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180422_2232.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;写法三&quot;&gt;写法三&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;上面的写法一、写法二并不是很智能，因为在定义模板的时候，没有智能提示和高亮，容易出错。我们不妨来看看写法三。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写法三：将组件内容定义到template标签中去。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 定义模板 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;template&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myAccount&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;登录页面&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;注册页面&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 使用组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;account&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/account&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//定义、注册组件&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'account'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#myAccount'&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// template 是 Vue 中的关键字，不能改。&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180422_2256.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写法三其实和方法二差不多，无非是把绿框部分的内容，单独放在了&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;标签中而已，这样有利于 html 标签的书写。&lt;/p&gt;
&lt;h2 id=&quot;使用components定义私有组件&quot;&gt;使用components定义私有组件&lt;/h2&gt;
&lt;p&gt;我们在上一段中定义的是&lt;strong&gt;全局组件&lt;/strong&gt;，这样做的时候，多个Vue实例都可以使用这个组件。&lt;/p&gt;
&lt;p&gt;我们还可以在一个Vue实例的内部定义&lt;strong&gt;私有组件&lt;/strong&gt;，这样做的时候，只有当前这个Vue实例才可以使用这个组件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 使用Vue实例内部的私有组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;my-login&amp;gt;&amp;lt;/my-login&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 定义、注册Vue实例内部的私有组件&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;myLogin&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;这是私有的login组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180617_1809.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，我们还可以把&lt;strong&gt;模板的定义&lt;/strong&gt;存放在&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;标签中，这样的话，模板里的html标签就可以出现智能提示和高亮，避免出错。如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 定义模板 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;template&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;loginTmp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;这是私有的login组件&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 调用Vue实例内部的私有组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;my-login&amp;gt;&amp;lt;/my-login&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 定义、注册Vue实例内部的私有组件&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;myLogin&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#loginTmp'&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果不变。&lt;/p&gt;
&lt;h2 id=&quot;为组件添加-data-和-methods&quot;&gt;为组件添加 data 和 methods&lt;/h2&gt;
&lt;p&gt;既然组件是一个页面，那么，页面中可能会有一些功能要&lt;strong&gt;动态展示&lt;/strong&gt;。因此，我们有必要为组件添加 data 和 methods。&lt;/p&gt;
&lt;p&gt;代码举例如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 定义组件的模板 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;template&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myAccount&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 在组件的模板中，调用本组件中的data --&amp;gt;&lt;/span&gt;
            {{myData}}
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-on:click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;登录1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;登录页面&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;注册页面&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 第一次调用组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;account&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/account&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 第二次调用组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;account&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/account&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//定义、注册组件&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'account'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#myAccount'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//组件中的 data&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//【注意】组件中的data，不再是对象，而是一个方法（否则报错）；而且这个方法内部，还必须返回一个对象才行&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 组件中 的data 数据,使用方式,和实例中的 data 使用方式完全一样!!!&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;myData&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'smyhvae'&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//组件中的 method&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'login操作'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码所示，我们在&lt;code&gt;account&lt;/code&gt;组件中添加的data 和 methods，其&lt;strong&gt;作用域&lt;/strong&gt;只限于&lt;code&gt;account&lt;/code&gt;组件里，保证独立性。&lt;/p&gt;
&lt;p&gt;注意，在为组件添加数据时，data不再是对象了，而是function，而且要通过 return的形式进行返回；否则，页面上是无法看到效果的。通过 function返回对象的形式来定义data，作用是：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;上方代码中，组件&lt;code&gt;&amp;lt;account&amp;gt;&lt;/code&gt;被调用了两次（不像根组件那样只能调用一次），但是每个组件里的数据 myData是&lt;strong&gt;各自独立&lt;/strong&gt;的，不产生冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;换而言之，通过函数返回对象的目的，是为了让每个组件都有自己&lt;strong&gt;独立的数据存储&lt;/strong&gt;，而不应该共享一套数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;为什么组件的data必须是一个function&quot;&gt;为什么组件的data必须是一个function&lt;/h3&gt;
&lt;p&gt;我们先来看下面这样的例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 第一次调用组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;counter&amp;gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 第二次调用组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;counter&amp;gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 定义模板 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;template&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;tmpl&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;让count加1&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;increment&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{{count}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dataObj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// 这是一个计数器的组件, 身上有个按钮,每当点击按钮,让 data 中的 count 值 +1&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#tmpl'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; dataObj &lt;span class=&quot;co&quot;&gt;//当我们return全局的dataObj的时候，子组件们会共享这个dataObj&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;increment&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// 创建 Vue 实例，得到 ViewModel&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180617_1925.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的例子中，将组件&lt;code&gt;&amp;lt;counter&amp;gt;&lt;/code&gt;调用了两次，由于&lt;code&gt;dataObj&lt;/code&gt;是&lt;strong&gt;全局对象&lt;/strong&gt;，导致两个组件实例都可以&lt;strong&gt;共享&lt;/strong&gt;这个&lt;code&gt;dataObj&lt;/code&gt;数据。于是，我们点击任何一个组件实例的按钮，都可以让&lt;code&gt;count&lt;/code&gt;数据加1。&lt;/p&gt;
&lt;p&gt;现在问题来了，如果我们想让组件&lt;code&gt;&amp;lt;counter&amp;gt;&lt;/code&gt;的两个实例去单独操作&lt;code&gt;count&lt;/code&gt;数据，应该怎么做呢？我们应该修改 data中 return出去的内容：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;counter&amp;gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;counter&amp;gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;counter&amp;gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;template&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;tmpl&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;让count加1&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;increment&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{{count}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dataObj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;// 这是一个计数器的组件, 身上有个按钮,每当点击按钮,让 data 中的 count 值 +1&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'counter'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#tmpl'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// return dataObj //当我们return全局的dataObj的时候，这个dataObj是共享的&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 【重要】return一个**新开辟**的对象数据&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;increment&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// 创建 Vue 实例，得到 ViewModel&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180617_1935.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，每当我们创建一个新的组件实例时，就会调用data函数，data函数里会return一个&lt;strong&gt;新开辟&lt;/strong&gt;的对象数据。这样做，就可以保证每个组件实例有&lt;strong&gt;独立的数据存储&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;组件的切换&quot;&gt;组件的切换&lt;/h2&gt;
&lt;h3 id=&quot;使用v-if和v-else结合flag进行切换&quot;&gt;使用v-if和v-else结合flag进行切换&lt;/h3&gt;
&lt;p&gt;代码举例：（登录组件/注册组件，二选一）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 温馨提示：`.prevent`可以阻止超链接的默认事件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;flag=true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;登录&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;flag=false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;注册&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 登录组件/注册组件，同时只显示一个 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;login&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-if=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/login&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;register&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; v-else=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/register&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;登录组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'register'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;注册组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// 创建 Vue 实例，得到 ViewModel&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180617_1957.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用vue提供的component标签实现组件切换&quot;&gt;使用Vue提供的&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;标签实现组件切换&lt;/h3&gt;
&lt;p&gt;上面的例子中，我们是通过flag的值来进行组件的切换。但是，flag的值只可能有两种情况，也就是说，v-if和v-else只能进行两个组件之间的切换。&lt;/p&gt;
&lt;p&gt;那如何实现三个甚至三个以上的组件切换呢？这里，我们可以用到Vue提供的&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;标签。&lt;/p&gt;
&lt;p&gt;我们先来看一下&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;标签的用法。&lt;/p&gt;
&lt;p&gt;基于上面的代码，如果我想让login组件显示出来，借助&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;标签可以这样做：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Vue提供了 component ,来展示对应名称的组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 【重要】component 是一个占位符, `:is` 属性,可以用来指定要展示的组件名称。这里，我们让 login 组件显示出来 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :is=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;'login'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/component&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 组件名称是 字符串&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;登录组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'register'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;注册组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// 创建 Vue 实例，得到 ViewModel&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;comName&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 当前 component 中的 :is 绑定的组件的名称&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，提取关键代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;&amp;lt;component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :is=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;'login'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/component&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我想让register组件显示出来，借助&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;标签可以这样做：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Vue提供了 component ,来展示对应名称的组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 【重要】component 是一个占位符, `:is` 属性,可以用来指定要展示的组件名称 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :is=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;'register'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/component&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 组件名称是 字符串&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;登录组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'register'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;注册组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// 创建 Vue 实例，得到 ViewModel&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;comName&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 当前 component 中的 :is 绑定的组件的名称&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，提取关键代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;&amp;lt;component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :is=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;'register'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/component&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此，如果要实现组件之间的切换，我们可以给&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;标签里的is属性值设置为变量即可，来看看代码实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现组件切换&lt;/strong&gt;的完整代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;vue2.5.16.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 点击按钮后，设置变量`comName`为不同的值，代表着后面的component里显示不同的组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;comName='login'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;登录&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;@click.prevent&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;comName='register'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;注册&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Vue提供了 component ,来展示对应名称的组件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 此处的`comName`是变量，变量值为组件名称 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; :is=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;comName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/component&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 组件名称是 字符串&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;登录组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;component&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'register'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;h3&amp;gt;注册组件&amp;lt;/h3&amp;gt;'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;co&quot;&gt;// 创建 Vue 实例，得到 ViewModel&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#app'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;comName&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'login'&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 当前 component 中的 :is 绑定的组件的名称&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180617_1957.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 18 Jun 2018 07:11:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/9195261.html</dc:identifier>
</item>
<item>
<title>指针和引用（2）指针常量与常量指针 - ysyouaremyall</title>
<link>http://www.cnblogs.com/ys99/p/9194936.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ys99/p/9194936.html</guid>
<description>&lt;h2&gt;1.知识点&lt;/h2&gt;
&lt;h3&gt;1.1指针常量——指针类型的常量&lt;/h3&gt;
&lt;p&gt;（1）指针常量本质是常量，指针用来说明常量的类型，表示该常量是一个指针类型的常量。&lt;/p&gt;
&lt;p&gt;（2）在指针常量中，指针的值不可变，即始终指向同一个地址。&lt;/p&gt;
&lt;p&gt;（3）但指针所指向的地址的值是可以通过*p来改变的。&lt;/p&gt;
&lt;p&gt;用法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;技巧：
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)读法：从左到右读，前面的是修饰词，后面的是主语
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如先出现指针（*），后出现常量（const），所以是指针常量
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2)哪个东西不可变：直接看const后边是什么就什么不可变
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;const后边是指针（p）,所以是指针本身的值不可变。&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt;, b = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; p = &amp;amp;&lt;span&gt;a;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; *p = &lt;span&gt;30&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2常量指针——指向常量的指针&lt;/h3&gt;
&lt;p&gt;（1）常量指针本质上是一个指针，常量表示指针指向的内容，说明指针指向的是一个“常量”。&lt;/p&gt;
&lt;p&gt;（2）在常量指针中，指针指向的内容是不可变的，不可以通过*p来改变，但变量（指针指向的地址）可以通过自身赋值改变。&lt;/p&gt;
&lt;p&gt;（3）另指针指向的地址是可以变的，即指向其他地址。&lt;/p&gt;
&lt;p&gt;用法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;技巧：&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(1)读法：从左到右读，前面的是修饰词，后面的是主语&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如下先出现常量（const）,然后出现指针（*），所以是常量指针&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(2)哪个东西不可变：直接看const后边是什么就什么不可变&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如下const后面是*p,所以是指针指向的地址的值不可变（只限定了不可以通过*p来改变）&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt;, b = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; *p = &amp;amp;a;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不可以通过*p改变a的值&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; p = &amp;amp;b;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指针的地址是可以变的&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; a = &lt;span&gt;30&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以通过变量本身改变值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.3const int 与int consts是等价的&lt;/h3&gt;
&lt;p&gt;const int *p==int const *p&lt;/p&gt;
&lt;h2&gt;2.面试题&lt;/h2&gt;
&lt;h3&gt;2.1指针常量和常量指针的常见错误&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[]) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; m = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; n = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *ptr1 = &amp;amp;&lt;span&gt;m;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; ptr2 = &amp;amp;&lt;span&gt;m;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     ptr1 = &amp;amp;&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     ptr2 = &amp;amp;&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     *ptr1 = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     *ptr2 = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; *ptr3 = &amp;amp;&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *ptr4 = &amp;amp;&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;const&lt;/span&gt;&lt;span&gt; ptr5;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     ptr5 = &amp;amp;&lt;span&gt;m;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; ptr6 = &amp;amp;&lt;span&gt;m;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     *ptr6 = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     ptr6 = &amp;amp;&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    getchar();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案解析：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[]) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; m = &lt;span&gt;10&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确，变量&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; n = &lt;span&gt;20&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确，常量&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *ptr1 = &amp;amp;m;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确，常量指针，指向的地址的内容不可变&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; ptr2 = &amp;amp;m;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确，指针常量，指针指向不可变，是常量所以必须赋初值&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     ptr1 = &amp;amp;n;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     ptr2 = &amp;amp;n;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，指针常量，指针的指向不可变&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     *ptr1 = &lt;span&gt;3&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，常量指针，指针指向的地址的内容不可变&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     *ptr2 = &lt;span&gt;4&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; *ptr3 = &amp;amp;n;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，不能将常量的地址赋值给普通指针，常量地址只能赋值给常量指针&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *ptr4 = &amp;amp;n;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;const&lt;/span&gt; ptr5;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，指针常量是常量，所有常量在定义时都必须赋初值&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     ptr5 = &amp;amp;m;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，应该定义时直接赋初值&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; ptr6 = &amp;amp;m;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;正确，同时包含指针常量和常量指针的性质&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     *ptr6 = &lt;span&gt;5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，不符合常量指针的性质&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     ptr6 = &amp;amp;n;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，不符合指针常量的性质&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    getchar();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2指针常量用作函数参数&lt;/h3&gt;
&lt;p&gt;写出程序的输出结果，并说明在函数exchange2中将参数声明为const的意义，是否可以将const修饰符放在*之前。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; exchange1(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     a =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     b =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; exchange2(&lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt; * &lt;span&gt;const&lt;/span&gt;&lt;span&gt; b) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; temp = *&lt;span&gt;a;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     *a = *&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     *b =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[]) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; m = &lt;span&gt;10&lt;/span&gt;, n = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    exchange1(m, n);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;n=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt;&lt;span&gt; endl;　　//输出:m=10;n=20
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     exchange2(&amp;amp;m, &amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;n=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt;&lt;span&gt; endl;　　//输出:m=20,n=10
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    getchar();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案：第一行输出的是：m=10,n=20;第二行输出是：m=20,n=10.&lt;/p&gt;
&lt;p&gt;解析：exchange1按值传递，函数中a,b值交换与m,n无任何联系，故无法改变m,n的值；exchange2中传入m,n的地址，通过解引用可以在函数内部改变m,n的值。在函数exhange2的参数中，const的作用是将指针声明为指针常量，防止指针a和b在使用过程中意外发生改变（改变将会报错）。如果将const放在*之前，指针a和b变成常量指针，无法修改指针指向的内容，从而无法实现交换m和n的目的。&lt;/p&gt;
&lt;h3&gt;2.3指针常量和字符串常量的冲突&lt;/h3&gt;
&lt;p&gt;请写出下面程序的运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;const&lt;/span&gt; str=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   *str=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;   cout&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;  getchar();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;          
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案1（其实有问题，看下面说明，）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
   &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;const&lt;/span&gt; str=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，为了修改str的值应该去掉const&lt;/span&gt;
   *str=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，根据字符串赋值规则应该改为str=&quot;orange&quot;&lt;/span&gt;
   cout&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span&gt;endl;
   getchar();
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;          
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：（1）一个字符串返回的是首字母的地址，故*str的值为'a'.&lt;/p&gt;
&lt;p&gt;（2）字符串常量是存储在常量区，而常量的值不可以修改，所以在VC编译器中下面的语句是编译不过去的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;char&lt;/span&gt; *str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最正确的语句应该是（因为字符串常量本身是常量，不应该赋值给一个普通指针，这意味着通过指针可以改变常量的值，前后矛盾，上面语句在一些地方能通过编译，其实是由于历史遗留问题）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）字符串正确赋值给变量应该是给str,因为字符串返回的其实是字符串的首地址，所以应该赋值给指针str，而不是*str，该指针指向首地址。&lt;/p&gt;
&lt;p&gt;综上最正确的答案应该如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;常量指针，指向的内容不可变&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;    str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;oragne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指针的指向是可变的&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;    cout&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;   getchar();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;          
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 18 Jun 2018 05:01:00 +0000</pubDate>
<dc:creator>ysyouaremyall</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ys99/p/9194936.html</dc:identifier>
</item>
<item>
<title>python3开发进阶-Django视图（View）的常见用法 - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/9194917.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/9194917.html</guid>
<description>&lt;p&gt;阅读目录&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ManyQian/p/9194917.html#duoduo1&quot;&gt;简述Django的View(视图)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ManyQian/p/9194917.html#duoduo2&quot;&gt;CBV和FBV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ManyQian/p/9194917.html#duoduo3&quot;&gt;Request对象和Response对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ManyQian/p/9194917.html#duoduo4&quot;&gt;Django组件（render,redirect）详解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2/&gt;
&lt;h2&gt;一、简述Django的View（视图）&lt;/h2&gt;
&lt;p&gt;　　一个视图函数（类），简称视图，是一个简单的Python 函数（类），它接受Web请求并且返回Web响应。&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-2&quot; class=&quot;yiyi-st&quot;&gt;响应可以是一张网页的HTML内容，一个重定向，一个404错误，一个XML文档，或者一张图片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-2&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-3&quot; class=&quot;yiyi-st&quot;&gt;无论视图本身包含什么逻辑，都要返回响应。&lt;span id=&quot;yiyi-4&quot; class=&quot;yiyi-st&quot;&gt;代码写在哪里也无所谓，只要它在你当前项目目录下面。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-2&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-3&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-4&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-5&quot; class=&quot;yiyi-st&quot;&gt;除此之外没有更多的要求了——可以说“没有什么神奇的地方”。&lt;span id=&quot;yiyi-6&quot; class=&quot;yiyi-st&quot;&gt;为了将代码放在某处，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-2&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-3&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-4&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-5&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-6&quot; class=&quot;yiyi-st&quot;&gt;大家约定成俗将视图放置在项目（project）或应用程序（app）目录中的名为&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;views.py&lt;/span&gt;&lt;/tt&gt;的文件中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;1、一个简单的视图&lt;/h4&gt;
&lt;div class=&quot;gtx-body&quot; readability=&quot;33.5&quot;&gt;下面是一个以HTML文档的形式返回当前日期和时间的视图：
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpResponse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; current_datetime(request):
    time &lt;/span&gt;=&lt;span&gt; datetime.datetime.now()
    html &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; time
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;让我们来逐行解释下上面的代码：&lt;/p&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p class=&quot;first&quot;&gt;&lt;span id=&quot;yiyi-9&quot; class=&quot;yiyi-st&quot;&gt;首先，我们从 &lt;tt class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django.http&lt;/span&gt;&lt;/tt&gt;模块导入了&lt;tt class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;HttpResponse&lt;/span&gt;&lt;/tt&gt;类，以及Python的&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;datetime&lt;/span&gt;&lt;/tt&gt;库。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p class=&quot;first&quot;&gt;&lt;span id=&quot;yiyi-10&quot; class=&quot;yiyi-st&quot;&gt;接着，我们定义了&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;current_datetime&lt;/span&gt;&lt;/tt&gt;函数。&lt;span id=&quot;yiyi-11&quot; class=&quot;yiyi-st&quot;&gt;它就是视图函数。&lt;span id=&quot;yiyi-12&quot; class=&quot;yiyi-st&quot;&gt;每个视图函数都使用&lt;tt class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;HttpRequest&lt;/span&gt;&lt;/tt&gt;对象作为第一个参数，并且通常称之为&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;request&lt;/span&gt;&lt;/tt&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-13&quot; class=&quot;yiyi-st&quot;&gt;注意，视图函数的名称并不重要；&lt;span id=&quot;yiyi-14&quot; class=&quot;yiyi-st&quot;&gt;不需要用一个统一的命名方式来命名，以便让Django识别它。&lt;span id=&quot;yiyi-15&quot; class=&quot;yiyi-st&quot;&gt;我们将其命名为&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;current_datetime&lt;/span&gt;&lt;/tt&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-13&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-14&quot; class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-15&quot; class=&quot;yiyi-st&quot;&gt;是因为这个名称能够比较准确地反映出它实现的功能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p class=&quot;first&quot;&gt;&lt;span id=&quot;yiyi-16&quot; class=&quot;yiyi-st&quot;&gt;这个视图会返回一个&lt;tt class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;HttpResponse&lt;/span&gt;&lt;/tt&gt;对象，其中包含生成的响应。&lt;span id=&quot;yiyi-17&quot; class=&quot;yiyi-st&quot;&gt;每个视图函数都负责返回一个&lt;tt class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;HttpResponse&lt;/span&gt;&lt;/tt&gt;对象。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Django使用请求和响应对象来通过系统传递状态。&lt;/p&gt;
&lt;p&gt;当浏览器向服务端请求一个页面时，Django创建一个HttpRequest对象，该对象包含关于请求的元数据。然后，Django加载相应的视图，&lt;/p&gt;
&lt;p&gt;将这个HttpRequest对象作为第一个参数传递给视图函数。&lt;/p&gt;
&lt;p&gt;每个视图负责返回一个HttpResponse对象。&lt;/p&gt;

&lt;h2&gt;二、CBV(class base view)和FBV(function base view)&lt;/h2&gt;
&lt;p&gt;我们之前写过的都是基于函数的view，就叫FBV。还可以把view写成基于类的。&lt;/p&gt;
&lt;p&gt;就拿我们之前写过的添加班级为例：&lt;/p&gt;
&lt;h4&gt;1、FBV版：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; FBV版添加班级&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_grade(request):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        grade_name &lt;/span&gt;= request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        models.Grades.objects.create(name&lt;/span&gt;=&lt;span&gt;grade_name)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/grade_list/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_grade.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2、CBV版：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; CBV版添加班级&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; django.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; View

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AddGrade(View):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self, request):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_grade.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; post(self, request):
        grade_name &lt;/span&gt;= request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grade_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        models.Grades.objects.create(name&lt;/span&gt;=&lt;span&gt;grade_name)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/grade_list/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;使用CBV时，urls.py中也做对应的修改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; urls.py中&lt;/span&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^add_grade/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.AddGrade.as_view()),   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这里要注意调用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3、给视图加装饰器（后续更新）&lt;/h4&gt;

&lt;h2&gt;三、Request对象和Response对象&lt;/h2&gt;
&lt;h4&gt;1、request对象&lt;/h4&gt;
&lt;p&gt;当一个页面被请求时，Django就会创建一个包含本次请求原信息的HttpRequest对象。&lt;br/&gt;Django会将这个对象自动传递给响应的视图函数，一般视图函数约定俗成地使用 request 参数承接这个对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.11/ref/request-response/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;请求相关的常用值&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;path_info&lt;/strong&gt;     返回用户访问url，不包括域名&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;method        &lt;/strong&gt;请求中使用的HTTP方法的字符串表示，全大写表示。&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;GET              &lt;/strong&gt;包含所有HTTP  GET参数的类字典对象&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;POST           &lt;/strong&gt;包含所有HTTP POST参数的类字典对象&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;body            &lt;/strong&gt;请求体，byte类型 request.POST的数据就是从body里面提取到的&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;属性&lt;/h4&gt;
&lt;p&gt;所有的属性应该被认为是只读的，除非另有说明。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ef6153d7-1714-47c4-b8de-c8cbf75fa865')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ef6153d7-1714-47c4-b8de-c8cbf75fa865&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ef6153d7-1714-47c4-b8de-c8cbf75fa865&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ef6153d7-1714-47c4-b8de-c8cbf75fa865',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ef6153d7-1714-47c4-b8de-c8cbf75fa865&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;属性：
　　django将请求报文中的请求行、头部信息、内容主体封装成 HttpRequest 类中的属性。
   除了特殊说明的之外，其他均为只读的。

0.HttpRequest.scheme
   表示请求方案的字符串（通常为http或https）

&lt;/span&gt;1&lt;span&gt;.HttpRequest.body

　　一个字符串，代表请求报文的主体。在处理非 HTTP 形式的报文时非常有用，例如：二进制图片、XML,Json等。

　　但是，如果要处理表单数据的时候，推荐还是使用 HttpRequest.POST 。

　　另外，我们还可以用 python 的类文件方法去操作它，详情参考 HttpRequest.read() 。

&lt;/span&gt;2&lt;span&gt;.HttpRequest.path

　　一个字符串，表示请求的路径组件（不含域名）。

　　例如：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/music/bands/the_beatles/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

3&lt;span&gt;.HttpRequest.method

　　一个字符串，表示请求使用的HTTP 方法。必须使用大写。

　　例如：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;、&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

4&lt;span&gt;.HttpRequest.encoding

　　一个字符串，表示提交的数据的编码方式（如果为 None 则表示使用 DEFAULT_CHARSET 的设置，默认为 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;）。
   这个属性是可写的，你可以修改它来修改访问表单数据使用的编码。
   接下来对属性的任何访问（例如从 GET 或 POST 中读取数据）将使用新的 encoding 值。
   如果你知道表单数据的编码不是 DEFAULT_CHARSET ，则使用它。

&lt;/span&gt;5&lt;span&gt;.HttpRequest.GET 

　　一个类似于字典的对象，包含 HTTP GET 的所有参数。详情请参考 QueryDict 对象。

&lt;/span&gt;6&lt;span&gt;.HttpRequest.POST

　　一个类似于字典的对象，如果请求中包含表单数据，则将这些数据封装成 QueryDict 对象。

　　POST 请求可以带有空的 POST 字典 —— 如果通过 HTTP POST 方法发送一个表单，但是表单中没有任何的数据，QueryDict 对象依然会被创建。
   因此，不应该使用 &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.POST  来检查使用的是否是POST 方法；应该使用 &lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 

　　另外：如果使用 POST 上传文件的话，文件信息将包含在 FILES 属性中。

 &lt;/span&gt;7&lt;span&gt;.HttpRequest.COOKIES

　　一个标准的Python 字典，包含所有的cookie。键和值都为字符串。

&lt;/span&gt;8&lt;span&gt;.HttpRequest.FILES

　　一个类似于字典的对象，包含所有的上传文件信息。
   FILES 中的每个键为&lt;/span&gt;&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&quot;&lt;/span&gt; /&amp;gt;&lt;span&gt; 中的name，值则为对应的数据。

　　注意，FILES 只有在请求的方法为POST 且提交的&lt;/span&gt;&amp;lt;form&amp;gt; 带有enctype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multipart/form-data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 的情况下才会
   包含数据。否则，FILES 将为一个空的类似于字典的对象。

&lt;/span&gt;9&lt;span&gt;.HttpRequest.META

 　　一个标准的Python 字典，包含所有的HTTP 首部。具体的头部信息取决于客户端和服务器，下面是一些示例：

    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。
    CONTENT_TYPE —— 请求的正文的MIME 类型。
    HTTP_ACCEPT —— 响应可接收的Content&lt;/span&gt;-&lt;span&gt;Type。
    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。
    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。
    HTTP_HOST —— 客服端发送的HTTP Host 头部。
    HTTP_REFERER —— Referring 页面。
    HTTP_USER_AGENT —— 客户端的user&lt;/span&gt;-&lt;span&gt;agent 字符串。
    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。
    REMOTE_ADDR —— 客户端的IP 地址。
    REMOTE_HOST —— 客户端的主机名。
    REMOTE_USER —— 服务器认证后的用户。
    REQUEST_METHOD —— 一个字符串，例如&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; 或&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;。
    SERVER_NAME —— 服务器的主机名。
    SERVER_PORT —— 服务器的端口（是一个字符串）。
 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，
    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。
    所以，一个叫做 X&lt;/span&gt;-&lt;span&gt;Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。
 
&lt;/span&gt;10&lt;span&gt;.HttpRequest.user

　　一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。

　　如果用户当前没有登录，user 将设置为 django.contrib.auth.models.AnonymousUser 的一个实例。你可以通过 is_authenticated() 区分它们。

    例如：

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; request.user.is_authenticated():
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Do something for logged-in users.&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Do something for anonymous users.&lt;/span&gt;
&lt;span&gt;     

     　　user 只有当Django 启用 AuthenticationMiddleware 中间件时才可用。

     &lt;/span&gt;-------------------------------------------------------------------------------------&lt;span&gt;

    匿名用户
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; models.AnonymousUser

    django.contrib.auth.models.AnonymousUser 类实现了django.contrib.auth.models.User 接口，但具有下面几个不同点：

    id 永远为None。
    username 永远为空字符串。
    get_username() 永远返回空字符串。
    is_staff 和 is_superuser 永远为False。
    is_active 永远为 False。
    groups 和 user_permissions 永远为空。
    is_anonymous() 返回True 而不是False。
    is_authenticated() 返回False 而不是True。
    set_password()、check_password()、save() 和delete() 引发 NotImplementedError。
    New &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; Django 1.8&lt;span&gt;:
    新增 AnonymousUser.get_username() 以更好地模拟 django.contrib.auth.models.User。

&lt;/span&gt;11&lt;span&gt;.HttpRequest.session

 　　一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。
    完整的细节参见会话的文档。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;request属性相关&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;上传文件示例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('162d95ce-37f7-413f-8923-5f818a7e0b65')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_162d95ce-37f7-413f-8923-5f818a7e0b65&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_162d95ce-37f7-413f-8923-5f818a7e0b65&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('162d95ce-37f7-413f-8923-5f818a7e0b65',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_162d95ce-37f7-413f-8923-5f818a7e0b65&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; upload(request):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    保存上传文件前，数据需要存放在某个位置。默认当上传文件小于2.5M时，django会将上传文件的全部内容读进内存。从内存读取一次，写磁盘一次。
    但当上传文件很大时，django会把上传文件写到临时文件中，然后存放到系统临时文件夹中。
    :param request: 
    :return: 
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从请求的FILES中获取上传文件的文件名，file为页面上type=files类型input的name属性值&lt;/span&gt;
        filename = request.FILES.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).name &lt;span&gt;#&lt;/span&gt;&lt;span&gt;我们用get方法比较稳妥&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在项目目录下新建一个文件&lt;/span&gt;
        with open(filename, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as f:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从上传的文件对象中一点一点读&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; request.FILES.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).chunks():  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;chunks后面指定每次读入的字节数量&lt;/span&gt;
                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写入本地文件&lt;/span&gt;
&lt;span&gt;                f.write(line)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;上传文件实例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;上传文件的注意事项：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果上传文件，views.py中应该从request.FILES中取上传的文件对象&lt;/li&gt;
&lt;li&gt;如果有上传文件，html文件中的form表单一定要加 enctype='multipart/form-data'&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;方法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6a2dced5-529c-4ce9-a1b5-13744600c996')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_6a2dced5-529c-4ce9-a1b5-13744600c996&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6a2dced5-529c-4ce9-a1b5-13744600c996&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6a2dced5-529c-4ce9-a1b5-13744600c996',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6a2dced5-529c-4ce9-a1b5-13744600c996&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;.HttpRequest.get_host()

　　根据从HTTP_X_FORWARDED_HOST（如果打开 USE_X_FORWARDED_HOST，默认为False）和 HTTP_HOST 头部信息返回请求的原始主机。
   如果这两个头部没有提供相应的值，则使用SERVER_NAME 和SERVER_PORT，在PEP &lt;/span&gt;3333&lt;span&gt; 中有详细描述。

　　USE_X_FORWARDED_HOST：一个布尔值，用于指定是否优先使用 X&lt;/span&gt;-Forwarded-&lt;span&gt;Host 首部，仅在代理设置了该首部的情况下，才可以被使用。

　　例如：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1:8000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

　　注意：当主机位于多个代理后面时，get_host() 方法将会失败。除非使用中间件重写代理的首部。

 

&lt;/span&gt;2&lt;span&gt;.HttpRequest.get_full_path()

　　返回 path，如果可以将加上查询字符串。

　　例如：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/music/bands/the_beatles/?print=true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

 

3.HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=&lt;span&gt;''&lt;/span&gt;, max_age=&lt;span&gt;None)

　　返回签名过的Cookie 对应的值，如果签名不再合法则返回django.core.signing.BadSignature。

　　如果提供 default 参数，将不会引发异常并返回 default 的值。

　　可选参数salt 可以用来对安全密钥强力攻击提供额外的保护。max_age 参数用于检查Cookie 对应的时间戳以确保Cookie 的时间不会超过max_age 秒。

        
        &lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;duoduo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, salt=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name-salt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;duoduo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 假设在设置cookie的时候使用的是相同的salt&lt;/span&gt;
        &amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;non-existing-cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        ...
        KeyError: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;non-existing-cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 没有相应的键时触发异常&lt;/span&gt;
        &amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;non-existing-cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, False)
        False
        &lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cookie-that-was-tampered-with&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        ...
        BadSignature: ...    
        &lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, max_age=60&lt;span&gt;)
        ...
        SignatureExpired: Signature age &lt;/span&gt;1677.3839159 &amp;gt; 60&lt;span&gt; seconds
        &lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; request.get_signed_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, False, max_age=60&lt;span&gt;)
        False
        复制代码
         


&lt;/span&gt;4&lt;span&gt;.HttpRequest.is_secure()

　　如果请求时是安全的，则返回True；即请求通是过 HTTPS 发起的。

 

&lt;/span&gt;5&lt;span&gt;.HttpRequest.is_ajax()

　　如果请求是通过XMLHttpRequest 发起的，则返回True，方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;XMLHttpRequest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;。

　　大部分现代的 JavaScript 库都会发送这个头部。如果你编写自己的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 is_ajax() 可以工作。

　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware， 
   你应该使用 vary_on_headers(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HTTP_X_REQUESTED_WITH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) 装饰你的视图以让响应能够正确地缓存。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;请求相关方法&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;注意：键值对的值是多个的时候,比如checkbox类型的input标签，select标签，需要用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
request.POST.getlist(&quot;hobby&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2、Response对象&lt;/h4&gt;
&lt;p&gt;与由Django自动创建的HttpRequest对象相比，HttpResponse对象是我们的职责范围了。我们写的每个视图都需要实例化，&lt;/p&gt;
&lt;p&gt;填充和返回一个HttpResponse。HttpResponse类位于django.http模块中。&lt;/p&gt;
&lt;h4&gt;使用&lt;/h4&gt;
&lt;p&gt;传递字符串&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
from django.http import HttpResponse
response = HttpResponse(&quot;Here's the text of the Web page.&quot;)
response = HttpResponse(&quot;Text only, please.&quot;, content_type=&quot;text/plain&quot;)&lt;br/&gt;#content_type 生成文档的类型
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置或删除响应头信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
response = HttpResponse()
response['Content-Type'] = 'text/html; charset=UTF-8'
del response['Content-Type']
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;属性&lt;/h4&gt;
&lt;p&gt;HttpResponse.content：响应内容&lt;/p&gt;
&lt;p&gt;HttpResponse.charset：响应内容的编码&lt;/p&gt;
&lt;p&gt;HttpResponse.status_code：响应的状态码&lt;/p&gt;
&lt;h4&gt;3、JsonResponse对象&lt;/h4&gt;
&lt;p&gt;JsonResponse是HttpResponse的子类，专门用来返回JSON格式数据的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
from django.http import JsonResponse
response = JsonResponse({'foo': 'bar'}) #正常直接跟字典类型
print(response.content)

b'{&quot;foo&quot;: &quot;bar&quot;}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认只能传递字典类型，如果要传递非字典类型需要设置一下safe关键字参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
response = JsonResponse([1, 2, 3], safe=False) &lt;br/&gt;#非字典类型需要设置safe关键字参数等于False
&lt;/pre&gt;&lt;/div&gt;
&lt;h2/&gt;
&lt;h2&gt;四、Django组件（render,redirect）详解&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.11/topics/http/shortcuts/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;render()&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/867021/201803/867021-20180329215116152-275073384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结合一个给定的模板和一个给定的上下文字典，并返回一个渲染后的 HttpResponse 对象。&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
参数：
     request： 用于生成响应的请求对象。

     template_name：要使用的模板的完整名称，可选的参数

     context：添加到模板上下文的一个字典。默认是一个空字典。如果字典中的某个值是可调用的，视图将在渲染模板之前调用它。

     content_type：生成的文档要使用的MIME类型。默认为 DEFAULT_CONTENT_TYPE 设置的值。默认为'text/html'

     status：响应的状态码。默认为200。&lt;p&gt;　　　useing: 用于加载模板的模板引擎的名称。&lt;/p&gt;&lt;p&gt;一个简单的例子：
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
from django.shortcuts import render

def my_view(request):
    # 视图的代码写在这里
    return render(request, 'myapp/index.html', {'foo': 'bar'})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码等于：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
from django.http import HttpResponse
from django.template import loader

def my_view(request):
    # 视图代码写在这里
    t = loader.get_template('myapp/index.html')
    c = {'foo': 'bar'}
    return HttpResponse(t.render(c, request)) #和上面方法效果一样，上面更简洁，常用上面方法
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;redirect()&lt;/h3&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-47&quot; class=&quot;yiyi-st&quot;&gt;参数可以是：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;&lt;span id=&quot;yiyi-101&quot; class=&quot;yiyi-st&quot;&gt;一个模型：将调用模型的&lt;tt class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get_absolute_url()&lt;/span&gt;&lt;/tt&gt; 函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;yiyi-102&quot; class=&quot;yiyi-st&quot;&gt;一个视图，可以带有参数：将使用&lt;tt class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;urlresolvers.reverse&lt;/span&gt;&lt;/tt&gt; 来反向解析名称&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;yiyi-103&quot; class=&quot;yiyi-st&quot;&gt;一个绝对的或相对的URL，将原封不动的作为重定向的位置。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span id=&quot;yiyi-48&quot; class=&quot;yiyi-st&quot;&gt;默认返回一个临时的重定向；&lt;span id=&quot;yiyi-49&quot; class=&quot;yiyi-st&quot;&gt;传递&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;permanent=True&lt;/span&gt;&lt;/tt&gt; 可以返回一个永久的重定向。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-90&quot; class=&quot;yiyi-st&quot;&gt;示例:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-51&quot; class=&quot;yiyi-st&quot;&gt;你可以用多种方式使用&lt;tt class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;redirect()&lt;/span&gt;&lt;/tt&gt; 函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传递一个具体的ORM对象（了解即可）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将调用具体ORM对象的&lt;tt class=&quot;xref py py-meth docutils literal&quot;&gt;get_absolute_url()&lt;/tt&gt; 方法来获取重定向的URL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
from django.shortcuts import redirect
 
def my_view(request):
    ...
    object = MyModel.objects.get(...)
    return redirect(object)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;传递一个视图的名称&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
def my_view(request):
    ...
    return redirect('some-view-name', foo='bar')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;传递要重定向到的一个具体的网址&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
def my_view(request):
    ...
    return redirect('/some/url/')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;当然也可以是一个完整的网址&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
def my_view(request):
    ...
    return redirect('https://www.cnblogs.com/ManyQian/')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认情况下，&lt;tt class=&quot;xref py py-func docutils literal&quot;&gt;redirect()&lt;/tt&gt; 返回一个临时重定向。&lt;span id=&quot;yiyi-59&quot; class=&quot;yiyi-st&quot;&gt;以上所有的形式都接收一个&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;permanent&lt;/span&gt;&lt;/tt&gt; 参数；&lt;span id=&quot;yiyi-60&quot; class=&quot;yiyi-st&quot;&gt;如果设置为&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;True&lt;/span&gt;&lt;/tt&gt;，将返回一个永久的重定向：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
def my_view(request):
    ...
    object = MyModel.objects.get(...)
    return redirect(object, permanent=True)　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;临时重定向（响应状态码：302）和永久重定向（响应状态码：301）对普通用户来说是没什么区别的，它主要面向的是搜索引擎的机器人。&lt;/p&gt;
&lt;p&gt;A页面临时重定向到B页面，那搜索引擎收录的就是A页面。&lt;/p&gt;
&lt;p&gt;A页面永久重定向到B页面，那搜索引擎收录的就是B页面。&lt;/p&gt;
</description>
<pubDate>Mon, 18 Jun 2018 04:48:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/9194917.html</dc:identifier>
</item>
<item>
<title>微软与开源干货对比篇_PHP和 ASP.NET在 Session实现和管理机制上差异 - 春春罗宾汉</title>
<link>http://www.cnblogs.com/zyczyc/p/9194816.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zyczyc/p/9194816.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;微软与开源干货对比篇_PHP和 ASP.NET在 Session实现和管理机制上差异&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;由于开发人员要靠工具吃饭，可能和开发工具、语言、环境呆的时间比和老婆孩子亲人在一起的时间还多，所以每个人或多或少对自己吃饭的工具在感性上带有宗教情结，在理性上又受屁股决定大脑利益左右，这种比较一般都容易遭人争议， 这些比较不带任何偏见和感情色彩，主要是自己工作中记录在有道云笔记的经验日记主要是给I自己学习备查用，写得多了就有参考价值分享出来给需要的人参考，如果有任何争议本人不作辩解。这只代表本人自己的理解印象。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Session篇：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;PHP默认使用文件存储session数据， asp.net 默认保存在IIS进程内存中&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1388231/201806/1388231-20180618030828224-706407096.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1388231/201806/1388231-20180618031121082-1303574998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1388231/201806/1388231-20180618030924580-715846563.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;PHP方式优点：&lt;/span&gt;稳定可靠不易丢失，nginx或apache服务器重启不影响session丢失，session稳定可靠。整过机制简易透明,用户可以直接删除session目录下的文件让session失效，可以方便地实现asp.net 很难实现的一些特殊需求，如需要在用户的请求或系统某些事件发生后要让指定的A用户session失效，然后必须强制从数据库读最新记录，假如有这一样矛盾的性能优化场景设计：假如用户表User有余额字段Balance, 要让用户A登录自己的后台看到自己的余额是最新的，而又不想每刷新一次面就请求一次数据库造成不必要的压力，最好的做法是把某用户的记录实体保存在Session当中，每次从Session中读取自己的余额字段显示，就不会给数据库造成压力，只有当余额字段 Balance变化后即时清除掉这用户的Seesion然后强制让他去读最新的数据库字段，但当其它事件发生时如：其它用户给A转账后要清除A的缓存，系统发生的退款、扣款、奖励到余额引起余额变化时要清除A的缓存，由于php的透明机制直接删除对应session文件就可以，但用iis就很麻烦了，由于微软偏向于session放在内存中，封闭成黑盒又没提供对应操作接口就悲剧了，只有通过其他办法曲线救国。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PHP方式缺点：&lt;/span&gt;性能欠佳不如保存在内存里快，而且产生大量的小文件，反复创建删除 这些小文件会造成磁盘碎片久而久之会拖慢整个磁盘的性能，产生大量文件句柄占用操作系统文件句柄，进而影响性能，网站访问量上升后是个悲剧，可能在一个目录下产生数百万个小文件，即时运行在linux这样一切皆文件思想的操作系统上也是非常影响文件系统性能，会严重拉低整个操作系统的磁盘性能。所以这个默认机制性能上不如IIS的默认存储在进程存储快。 那些神吹开源技术性能设计比windows先进的人自行打脸，最近深入了解lamp,lnmp后发现有很多过时的设计无法跟上时代，如php无法使用真正的数据库连接池等很多比原本想像来严重得多的问题，当然 般都会有第三方非主流折腾代替的方案，如使用memcache内存方式保存session在内存中也是可以的，但需要手工折腾一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP分布式session的支持：&lt;/strong&gt;在高并发多台服务器负载均衡的环境中，两台nginx 或apache要共享session 一般是把session保存在数据库中，然后不同的负载主机共连一个数据库来实现，数据库的性能和读写文件实际没有本质区别，稳定性依然强，但性能依然是弱点。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;ASP.NET方式优点：&lt;/span&gt;速度快，不用读写磁盘显然这是很自然的是&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ASP.NET方式缺点：&lt;/span&gt;很不稳定，不要说重启IIS网站这样的极端操作会丢失Session,就算是改动了配置文件 web.config或者变动了bin目录下的dll导致网站重新编译的操作都会重置内存导致Session丢失，这就是为什么在asp.net 开始调试期间常常遇到测试人员登录系统没几秒就可能session丢失的奇怪幻像，一般都是有程序员在频繁更新程序，只要更新一次就全面丢失一次session; 微软的解决方案也足够简单好用，使用一个独立的ASP.NET State Service状态服务进程来保存session信息，注意使用ASP.NET State Service后数据还是保存在内存中，只不过是一个独立的服务进程，默认通过监听tcpip=127.0.0.1:42424端口跨进程通信保存信息，&lt;/p&gt;
&lt;p&gt;这样就算IIS重启也不会导致用户登录session丢失，稳定性解决了，同时数据还是保存在内在中速度性能远高于php的文件存储方案。而且状态服务每台电脑都默认安装，只需要启动就行。方便性和性能已经甩下php不在一个级别了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ASP.NET分布式session的实现：&lt;/span&gt;在高并发多台服务器负载均衡的环境中，两台IIS要共享session非常简，只需要共同连接一台状态服务器就可以共享session,通过简单设置就可以让状态服务打开远程访问功能。当然asp.net也是支持把session保存到数据库的，但很少有人这样用没有太大的理由采用这种方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SESSION管理总结：&lt;/strong&gt;可以看到php和asp.net的session管理机制上走的两个不同的哲学方向，php稳定易于实现、偏爱对硬盘存储，微软asp.net偏爱内存里存储，实现难度要高于php,这是是商业软件和开源免费软件比较典型的特征，商业软件一般实现一个各方面都要优于免费一点东西，封装个黑盒给你直接用，但特殊的需求不方便搞。&lt;/p&gt;

</description>
<pubDate>Mon, 18 Jun 2018 03:55:00 +0000</pubDate>
<dc:creator>春春罗宾汉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zyczyc/p/9194816.html</dc:identifier>
</item>
<item>
<title>用R处理不平衡的数据 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9178592.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9178592.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.9811320754717&quot;&gt;
&lt;p&gt;本文来自&lt;a href=&quot;https://cloud.tencent.com/developer/translation&quot;&gt;云+社区翻译社&lt;/a&gt;，作者&lt;a href=&quot;https://cloud.tencent.com/developer/user/410635/activities&quot;&gt;ArrayZoneYour&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在分类问题当中，数据不平衡是指样本中某一类的样本数远大于其他的类别样本数。相比于多分类问题，样本不平衡的问题在二分类问题中的出现频率更高。举例来说，在银行或者金融的数据中，绝大多数信用卡的状态是正常的，只有少数的信用卡存在盗刷等异常现象。&lt;/p&gt;
&lt;p&gt;使用算法不能获得非平衡数据集中足以对少数类别做出准确预测所需的信息。所以建议使用平衡的分类数据集进行训练。&lt;/p&gt;
&lt;p&gt;在本文中，我们将讨论如何使用R来解决不平衡分类问题。&lt;/p&gt;
&lt;h2 id=&quot;数据集介绍&quot;&gt;数据集介绍&lt;/h2&gt;
&lt;p&gt;本文使用的数据集为信用卡交易数据集，总的交易信息量为284K条，共有31个信息列，其中包含492次信用卡盗刷（诈骗）信息。&lt;/p&gt;
&lt;h3 id=&quot;数据列&quot;&gt;数据列&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;: 该笔交易距离数据集中第一笔交易的时间（按秒计）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V1-V28&lt;/strong&gt;:用PCA获得的主成分变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Amount&lt;/strong&gt;:交易金额。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class&lt;/strong&gt;:应变量，值为1代表该条记录为盗刷记录，否则为0&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/5cl4aofn6d.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文概要&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对数据集进行探索性分析&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;检查非平衡数据&lt;/li&gt;
&lt;li&gt;检查每小时的交易笔数&lt;/li&gt;
&lt;li&gt;检查PCA变量的均值&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;数据切分&lt;/li&gt;
&lt;li&gt;在训练集上训练模型&lt;/li&gt;
&lt;li&gt;使用抽样的方法来构建平衡数据集&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;对数据集进行探索性分析&quot;&gt;对数据集进行探索性分析&lt;/h2&gt;
&lt;p&gt;下面让我们使用R来对数据集进行汇总并对其中的关键、显著的特征进行可视化。&lt;/p&gt;
&lt;h3 id=&quot;检查非平衡数据&quot;&gt;检查非平衡数据&lt;/h3&gt;
&lt;p&gt;通过下面的操作我们可以看到应变量的不平衡性：&lt;/p&gt;
&lt;p&gt;我们可以借助&lt;code&gt;dplyr&lt;/code&gt;包中的&lt;code&gt;group_by&lt;/code&gt;函数对&lt;code&gt;Class&lt;/code&gt;的值进行分组：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;library(dplyr)
creditcard_details$Class &amp;lt;- as.factor(creditcard_details$Class)
creditcardDF &amp;lt;- creditcard_details %&amp;gt;% group_by(Class) %&amp;gt;% summarize(Class_count = n())
print(head(creditcardDF))&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;# A tibble: 2 x 2
  Class Class_count
  &amp;lt;fct&amp;gt;       &amp;lt;int&amp;gt;
1 0          284315
2 1             492&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;ggplot&lt;/code&gt;可以看到每个类别数据所占的比例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/n0hg3cx4js.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;检查每小时的交易笔数&quot;&gt;检查每小时的交易笔数&lt;/h3&gt;
&lt;p&gt;要按填或者小时查看交易笔数，我们需要首先将日期标准化，并且根据每天的时间将一天划分为四等份。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/eu72imvp04.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图展示了两天的交易信息在各个时间段的分布情况。对比可以看到大部分的盗刷交易发生在13-18点。&lt;/p&gt;
&lt;h3 id=&quot;检查pca变量的均值&quot;&gt;检查PCA变量的均值&lt;/h3&gt;
&lt;p&gt;为了发现数据异常，我们计算了V1-V28变量的均值并检查了每个变量的方差。从下图可以看到异常的交易数据（蓝点）具有更大的方差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/dp936z6g50.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据切分&quot;&gt;数据切分&lt;/h2&gt;
&lt;p&gt;在预测问题的建模当中，数据需要被切分为训练集（占数据集的80%）和测试集（占数据集的20%）。在数据切分之后，我们需要进行特征缩放来标准化自变量的范围。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/kplbw55ktw.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;在训练集上训练模型&quot;&gt;在训练集上训练模型&lt;/h2&gt;
&lt;p&gt;在训练集上构建模型可以分为以下几步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在训练集上训练分类器。&lt;/li&gt;
&lt;li&gt;在测试集上进行预测。&lt;/li&gt;
&lt;li&gt;检测模型在非平衡数据上的预测输出。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过混淆矩阵我们可以得到模型在测试集上的准确率达到了99.9%，当然这是由于样本不均衡造成的。所以现在让我们忽略通过混淆矩阵得到的模型准确率。通过ROC曲线，我们得到在测试集上的准确率为78%，这比之前的99.9%要低得多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/t3suvu6xqd.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用抽样的方法来构建平衡数据集&quot;&gt;使用抽样的方法来构建平衡数据集&lt;/h3&gt;
&lt;p&gt;下面我们将使用不同的抽样方法来平衡给定的数据集，然后检查抽样后的数据集中正常和异常数据的条数，最终在平衡数据集上构建模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/gusi0hq6n4.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在处理之前，异常的记录有394条，正常的记录有227K条。&lt;/p&gt;
&lt;p&gt;在R中，ROSE和DMwR包可以帮助我们快速执行自己的采样策略。ROSE包基于采样方法和平滑的bootstrap方法来生成数据，它提供了良好的调用接口以帮助我们迅速完成任务。&lt;/p&gt;
&lt;p&gt;它支持以下采样方法：&lt;/p&gt;
&lt;h3 id=&quot;过采样oversampling&quot;&gt;过采样（Oversampling）&lt;/h3&gt;
&lt;p&gt;通过该方法可以让算法执行过采样。由于原始的数据集有227K条记录，该方法会对持续对样本量少的类别进行采样直至其数据量达到227K。此时数据集样本的总量将达到454K。该方法可以通过指定参数&lt;code&gt;method=&quot;over&quot;&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/3l4mmolk1y.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;欠采样undersampling&quot;&gt;欠采样（Undersampling）&lt;/h3&gt;
&lt;p&gt;这个方法与过采样方法相似，最终获得的数据集中正常记录和异常记录的数量也是相同的，不过欠采样是无放回的抽样，相应地在本文中的数据集上，由于异常记录过少，进行欠采样之后我们不能提取出样本中的关键信息。该方法可以通过指定参数&lt;code&gt;method=&quot;under&quot;&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/6ydes3auuy.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;both-sampling&quot;&gt;Both Sampling&lt;/h3&gt;
&lt;p&gt;这个方法是过采样和欠采样的结合。多数类使用的是无放回的欠采样，少数类使用的是又放回的过采样。该方法可以通过指定参数&lt;code&gt;method=&quot;both&quot;&lt;/code&gt;实现。&lt;/p&gt;
&lt;h3 id=&quot;rose-sampling&quot;&gt;ROSE Sampling&lt;/h3&gt;
&lt;p&gt;ROSE抽样方法利用合成的方法来生成数据，可以提供原始数据更好的估计。&lt;/p&gt;
&lt;h3 id=&quot;synthetic-minority-over-sampling-technique-smote-sampling&quot;&gt;Synthetic Minority Over-Sampling Technique (SMOTE) Sampling&lt;/h3&gt;
&lt;p&gt;此方法可以避免重复添加少数类样本至主数据集时可能发生的过拟合现象。举例来说，我们过采样之后一次获取的数据可能只是少数类数据的一个子集。在了解了这些方法之后，我们分别将这些方法应用到了原始数据集之上，之后统计的两类样本数如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/novgl2yuad.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用得到的平衡训练数据集再次对分类模型进行训练，在测试数据上进行预测。由于原始数据集是不平衡的，所以这里我们不再使用混淆矩阵计算得到的准确率作为模型评价指标，取而代之的是&lt;code&gt;roc.curve&lt;/code&gt;捕获得到的&lt;code&gt;roc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/410635/eno1ldkxji.png?imageView2/2/w/1620&quot; alt=&quot;aaaa&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;在本文的实验中，使用SMOTE采样方法得到的数据训练的模型性能最优。由于这些采样方法的variation不大，当它们与像随机森林这样鲁棒性很强的算法结合使用时可以得到非常高的数据准确率。&lt;/p&gt;
&lt;p&gt;在处理不平衡的数据集时，使用上面的所有采样方法在数据集中进行试验可以获得最适合数据集的采样方法。为了获得更好的结果，还可以使用一些先进的采样方法（如本文中提到的合成采样（SMOTE））进行试验。&lt;/p&gt;
&lt;p&gt;这些采样方法在Python中也可以很轻松地实现，如果想要参阅完整的代码，可以查阅下面提供的Github链接。&lt;/p&gt;
&lt;h2 id=&quot;训练数据集及代码&quot;&gt;训练数据集及代码&lt;/h2&gt;
&lt;blockquote readability=&quot;0.64864864864865&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/35972?fromSource=waitui&quot;&gt;如何从源安装R语言包？&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1007140?fromSource=waitui&quot;&gt;用R语言进行文本挖掘和主题建模&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1133912?fromSource=waitui&quot;&gt;协同过滤的R语言实现及改进&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1058304?fromSource=waitui&quot;&gt;用R解析Mahout用户推荐协同过滤算法(UserCF)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1142201?fromSource=waitui&quot; class=&quot;uri&quot;&gt;https://cloud.tencent.com/developer/article/1142201?fromSource=waitui&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 18 Jun 2018 03:41:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9178592.html</dc:identifier>
</item>
<item>
<title>图片优化 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/9183454.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/9183454.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　本文将详细介绍前端项目中的图片相关的优化方案&lt;/p&gt;

&lt;h3&gt;图片格式&lt;/h3&gt;
&lt;p&gt;　　目前在前端的开发中常用的图片格式有jpg、png、gif，png8、png24、png32、svg和webp&lt;/p&gt;
&lt;p&gt;【gif】&lt;/p&gt;
&lt;p&gt;　　gif是无损的，具有文件小、支持动画及透明的优点。但gif无法支持半透明，且仅支持8bit的索引色，即在整个图片中，只能存在256种不同的颜色&lt;/p&gt;
&lt;p&gt;　　但实际上，gif是一种逐渐被抛弃的图片格式。png格式的出现就是为了替代它&lt;/p&gt;
&lt;p&gt;　　由于gif支持动画的这个“一招鲜”的本领，在网络中仍然占有一席之地，主要用于一些小图标&lt;/p&gt;
&lt;p&gt;【jpg】&lt;/p&gt;
&lt;p&gt;　　jpg又称为jpeg，是有损的，但采用了直接色，保证了色彩的丰富性。jpg图片支持透明和半透明，所有空白区域填充白色&lt;/p&gt;
&lt;p&gt;　　jpg格式主要用于高清图、摄影图等大图&lt;/p&gt;
&lt;p&gt;【png8】&lt;/p&gt;
&lt;p&gt;　　png8是无损的，是png的索引色版本&lt;/p&gt;
&lt;p&gt;　　前面提到过，png是gif格式的替代者，在相同图片效果下，png8具有更小的文件体积，且支持透明度的调节&lt;/p&gt;
&lt;p&gt;　　但png8不支持半透明，也不支持动画&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/helper_ps_imgType1.png&quot; alt=&quot;png&quot; width=&quot;640&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p&gt;【png24】&lt;/p&gt;
&lt;p&gt;　　png24是无损的，是png的直接色版本。　&lt;/p&gt;
&lt;p&gt;　　png24支持透明，也支持半透明，但png有文件体积较大的缺点&lt;/p&gt;
&lt;p&gt;　　png24的目标是替换jpg。但一般而言，png24的文件大小是jpg的5倍之多，但显示效果却只有一点点提升&lt;/p&gt;
&lt;p&gt;【png32】&lt;/p&gt;
&lt;p&gt;　　png32是在png24的基础上，添加了8位的alpha通道信息，可以支持透明和半透明，且支持图层，辅助线等复杂数据的保存&lt;/p&gt;
&lt;p&gt;　　使用ps导出的透明的png24图片，实际上是阉割版的png32，因为只有32位的png图片才支持透明，阉割版是说导出的图片不支持图层&lt;/p&gt;
&lt;p&gt;【SVG】&lt;/p&gt;
&lt;p&gt;　　svg是无损的矢量图。svg与上面这些图片格式最大的不同是，上面的图片格式都是位图，而svg是矢量图，具有无论如何缩放都不会失真的优点&lt;/p&gt;
&lt;p&gt;　　svg格式非常适用于绘制logo、图标等　　&lt;/p&gt;
&lt;p&gt;　　但由于低版本浏览器支持不足，应用不广泛&lt;/p&gt;
&lt;p&gt;【webp】&lt;/p&gt;
&lt;p&gt;　　WebP 格式是 Google 于2010年发布的一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。它具有较优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都非常优秀、稳定和统一。目前，知名网站 Youtube 、Facebook、Ebay 等均有使用 WebP格式。&lt;/p&gt;
&lt;p&gt;　　WebP 集合了多种图片文件格式的特点，JPEG 适合压缩照片和其他细节丰富的图片，GIF 可以显示动态图片，PNG 支持透明图像，图片色彩非常丰富，而 WebP 则兼具上述优点，且较于它们还有更出色的地方。&lt;/p&gt;
&lt;p&gt;　　无损压缩后的 WebP 比 PNG 文件少了 45% 的文件大小，即使 PNG 文件经过其他压缩工具压缩后，WebP 还是可以减少 28% 的文件大小。此外，与 JPEG 相比，在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40%，而 WebP 在压缩方面比 JPEG 格式更优越&lt;/p&gt;
&lt;p&gt;　　但目前为止，webp只能在安卓系统下使用&lt;/p&gt;

&lt;h3&gt;PS保存&lt;/h3&gt;
&lt;p&gt;　　一般地，在对设计图进行修改前，首先要保留一份psd源文本，然后再在其副本上进行修改&lt;/p&gt;
&lt;p&gt;　　通过photoshop将设计图切成需要的素材时，涉及到图片格式的设置问题，应注意以下几点：&lt;/p&gt;
&lt;p&gt;　　1、当图片色彩丰富且无透明要求时，建议保存为jpg格式并选择合适的品质，一般为60-80&lt;/p&gt;
&lt;p&gt;　　2、当图片色彩不太丰富时无论有无透明要求，保存为PNG8格式(特点是只有256种颜色，文件本身比较小)，保存时选择无仿色，无杂边&lt;/p&gt;
&lt;p&gt;　　3、当图片有半透明要求时，保存PNG24格式(对图片不进行压缩，所有相对比较大)&lt;/p&gt;

&lt;h3&gt;懒加载&lt;/h3&gt;
&lt;p&gt;　　图片延迟加载也称为懒加载，延迟加载图片或符合某些条件时才加载某些图片，通常用于图片比较多的网页。可以减少请求数或者延迟请求数，优化性能&lt;/p&gt;
&lt;p&gt;【呈现形式】&lt;/p&gt;
&lt;p&gt;　　一般而言，有以下三种呈现形式&lt;/p&gt;
&lt;p&gt;　　1、延时加载，使用setTimeout或setInterval进行加载延迟，如果用户在加载前就离开，自然就不会进行加载&lt;/p&gt;
&lt;p&gt;　　2、条件加载，符合某些条件或者触发了某些条件才开始异步加载&lt;/p&gt;
&lt;p&gt;　　3、可视区域加载，仅仅加载用户可以看到的区域，这个主要监控滚动条实现，一般距离用户看到的底边很近的时候开始加载，这样能保证用户下拉时图片正好接上，不会有太长时间的停顿&lt;/p&gt;
&lt;p&gt;【基本步骤】&lt;/p&gt;
&lt;p&gt;　　1、待加载的图片默认加载一张占位图&lt;/p&gt;
&lt;p&gt;　　2、使用data-src属性保存真正地址&lt;/p&gt;
&lt;p&gt;　　3、当触发某些条件时，自动改变该区域的图片的src属性为真实的地址&lt;/p&gt;
&lt;p&gt;【可视区域加载】&lt;/p&gt;
&lt;p&gt;　　可视区域加载，是图片懒加载最常用的一种形式，涉及到的细节如下所示：&lt;/p&gt;
&lt;p&gt;　　1、判断可视区域&lt;/p&gt;
&lt;p&gt;　　图片顶部距离页面顶部的高度小于页面高度&lt;/p&gt;
&lt;p&gt;　　2、保存图片路径&lt;/p&gt;
&lt;p&gt;　　待加载的图片默认加载一张占位图，使用data-src属性保存真正的地址&lt;/p&gt;
&lt;p&gt;　　3、判断加载时机&lt;/p&gt;
&lt;p&gt;　　监听页面的scroll事件，收集当前进入页面的图片元素，给src赋值为真正的地址，给已加载的图片添加标记&lt;/p&gt;
&lt;p&gt;　　4、滚动性能提升&lt;/p&gt;
&lt;p&gt;　　使用函数节流优化滚动性能&lt;/p&gt;
&lt;p&gt;　　代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; oList = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; viewHeight =&lt;span&gt; oList.clientHeight
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; eles = document.querySelectorAll(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img[data-src]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; lazyLoad = () =&amp;gt;&lt;span&gt; {
  Array.prototype.forEach.call(eles, item &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; rect =&lt;span&gt; item.getBoundingClientRect()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rect.top &amp;lt;= viewHeight &amp;amp;&amp;amp; !&lt;span&gt;item.isLoaded) {
      item.isLoaded &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;
      &lt;span&gt;const&lt;/span&gt; oImg = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Image()
      oImg.onload &lt;/span&gt;= () =&amp;gt; { item.src =&lt;span&gt; oImg.src }
      oImg.src &lt;/span&gt;= item.getAttribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    }
  })
}
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; throttle = (fn, wait=&lt;span&gt;100&lt;/span&gt;) =&amp;gt;&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fn.timer) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;
    fn.timer &lt;/span&gt;= setTimeout(() =&amp;gt;&lt;span&gt; {
      fn.apply(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments)
      fn.timer &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
    }, wait)
  }
}
lazyLoad()
oList.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, throttle(lazyLoad))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　效果如下&lt;/p&gt;


&lt;h3&gt;懒加载进阶&lt;/h3&gt;
&lt;p&gt;　　上面代码的问题在于，每次调用getBoundingClientRect()方法时，都会触发回流，严重地影响性能&lt;/p&gt;
&lt;p&gt;　　可以使用Intersection Observer这一API来解决问题，可以异步观察目标元素与祖先元素或顶层文件的交集变化&lt;/p&gt;
&lt;p&gt;　　创建一个 IntersectionObserver对象并传入相应参数和回调用函数，该回调函数将会在target 元素和root的交集大小超过threshold规定的大小时候被执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
var options =&lt;span&gt; {
    root: document.querySelector('#scrollArea'&lt;span&gt;), 
    rootMargin: '0px'&lt;span&gt;, 
    threshold: 1.0&lt;span&gt;
}
var callback =&lt;span&gt; function(entries, observer) { 
    /* Content excerpted, show below */&lt;span&gt; 
};
var observer = new IntersectionObserver(callback, options);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果root参数指定为null或者不指定的时候默认使用浏览器视口做为root&lt;/p&gt;
&lt;p&gt;　　rootMargin表示root元素的外边距。该属性值是用作root元素和target发生交集时的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0&lt;/p&gt;
&lt;p&gt;　　threshold可以是单一的number也可以是number数组，target元素和root元素相交程度达到该值的时候，将会被执行&lt;/p&gt;
&lt;p&gt;　　如果只是想要探测当target元素的在root元素中的可见性超过50%的时候，可以指定该属性值为0.5。如果想要target元素在root元素的可见程度每多25%就执行一次回调，那么可以指定一个数组[0, 0.25, 0.5, 0.75, 1]。默认值是0(意味着只要有一个target像素出现在root元素中，回调函数将会被执行)。该值为1.0含义是当target完全出现在root元素时回调才会被执行&lt;/p&gt;
&lt;p&gt;　　为每个观察者配置一个目标&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
var target = document.querySelector('#listItem'&lt;span&gt;)
observer.observe(target)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当目标满足该IntersectionObserver指定的threshold值，回调被调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
var callback =&lt;span&gt; function(entries, observer) { 
    entries.forEach(entry =&amp;gt;&lt;span&gt; {
        entry.time;             
        entry.rootBounds;       
        entry.boundingClientRect;
        entry.intersectionRect;   
        entry.intersectionRatio;  
        entry.target;           
&lt;span&gt;    });
};&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　time： 可见性发生变化的时间，是一个高精度时间戳，单位为毫秒&lt;/p&gt;
&lt;p&gt;　　intersectionRatio： 目标元素的可见比例，即 intersectionRect 占 boundingClientRect 的比例，完全可见时为 1 ，完全不可见时小于等于 0&lt;/p&gt;
&lt;p&gt;　　boundingClientRect： 目标元素的矩形区域的信息&lt;/p&gt;
&lt;p&gt;　　intersectionRect： 目标元素与视口（或根元素）的交叉区域的信息&lt;/p&gt;
&lt;p&gt;　　rootBounds： 根元素的矩形区域的信息，getBoundingClientRect() 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null&lt;/p&gt;
&lt;p&gt;　　isIntersecting： 是否进入了视口，boolean 值&lt;/p&gt;
&lt;p&gt;　　target： 被观察的目标元素，是一个 DOM 节点对象&lt;/p&gt;
&lt;p&gt;　　代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; eles = document.querySelectorAll(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img[data-src]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; observer = &lt;span&gt;new&lt;/span&gt; IntersectionObserver( entries =&amp;gt;&lt;span&gt; {
  entries.forEach(entry &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (entry.intersectionRatio &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
      let oImg &lt;/span&gt;=&lt;span&gt; entry.target
      oImg.src &lt;/span&gt;= oImg.getAttribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
      observer.unobserve(oImg)
    }
  })
}, {
  root: document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
})
eles.forEach(item &lt;/span&gt;=&amp;gt; { observer.observe(item) })
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;预加载&lt;/h3&gt;
&lt;p&gt;　　预加载图片是提升用户体验的一个好办法，提前加载用户所需的图片，保证图片快速、无缝发布，使用户在浏览器网站时获得更好用户体验。常用于图片画廊等应用中&lt;/p&gt;
&lt;p&gt;【使用场景】&lt;/p&gt;
&lt;p&gt;　　以下几个场景中，可以使用图片预加载&lt;/p&gt;
&lt;p&gt;　　1、在首屏加载之前，缩短白屏时间&lt;/p&gt;
&lt;p&gt;　　2、在空闲时间为SPA的下一屏预加载&lt;/p&gt;
&lt;p&gt;　　3、预测用户操作，预先加载数据&lt;/p&gt;
&lt;p&gt;【三种思路】&lt;/p&gt;
&lt;p&gt;　　一般来说，实现预加载有三种思路：&lt;/p&gt;
&lt;p&gt;　　1、使用页面无用元素的背景图片来进行图片预加载&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;button&amp;gt;载入图片&amp;lt;/button&amp;gt;
&amp;lt;img src=&quot;img/test.png&quot; alt=&quot;测试&quot;&amp;gt;
&amp;lt;ul class=&quot;list&quot;&amp;gt;
    &amp;lt;li id=&quot;preload1&quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li id=&quot;preload2&quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li id=&quot;preload3&quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li id=&quot;preload4&quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;script&amp;gt;
var oBtn = document.getElementsByTagName('button')[0&lt;span&gt;];
var oImg0 = document.images[0&lt;span&gt;];
var array = [&quot;img/img1.gif&quot;,&quot;img/img2.gif&quot;,&quot;img/img3.gif&quot;,&quot;img/img4.gif&quot;&lt;span&gt;]
var iNow = -1&lt;span&gt;;
oBtn.onclick =&lt;span&gt; function(){
    iNow++&lt;span&gt;;
    iNow = iNow%4&lt;span&gt;;
    oImg0.src =&lt;span&gt; array[iNow];
}
function preLoadImg(){
    preload1.style.background = &quot;url('img/img1.gif')&quot;&lt;span&gt;;
    preload2.style.background = &quot;url('img/img2.gif')&quot;&lt;span&gt;;
    preload3.style.background = &quot;url('img/img3.gif')&quot;&lt;span&gt;;
    preload4.style.background = &quot;url('img/img4.gif')&quot;&lt;span&gt;;
}
window.onload =&lt;span&gt; function(){
    preLoadImg();    
}
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、通过new Image()或document.createElement('img')创建img标签，然后通过img的src属性来加载图片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&amp;lt;button&amp;gt;载入图片&amp;lt;/button&amp;gt;
&amp;lt;img src=&quot;img/test.png&quot; alt=&quot;测试&quot;&amp;gt;
&amp;lt;script&amp;gt;
var oBtn = document.getElementsByTagName('button')[0&lt;span&gt;];
var oImg0 = document.images[0&lt;span&gt;];
var array = [&quot;img/img1.gif&quot;,&quot;img/img2.gif&quot;,&quot;img/img3.gif&quot;,&quot;img/img4.gif&quot;&lt;span&gt;]
var iNow = -1&lt;span&gt;;
oBtn.onclick =&lt;span&gt; function(){
    iNow++&lt;span&gt;;
    iNow = iNow%4&lt;span&gt;;
    oImg0.src =&lt;span&gt; array[iNow];
}
var aImages =&lt;span&gt; [];
function preLoadImg(array){
    for(var i = 0, len = preLoadImg.arguments[0].length; i &amp;lt; len; i++&lt;span&gt;){
        aImages[i] = new&lt;span&gt; Image();
        aImages[i].src = preLoadImg.arguments[0&lt;span&gt;][i];
    }
}
window.onload =&lt;span&gt; function(){
    preLoadImg(array);    
}
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、通过XHR对象发送ajax请求来获取图片，但只能获取同域图片&lt;/p&gt;
&lt;p&gt;【onload和onerror】&lt;/p&gt;
&lt;p&gt;　　通过添加onload和onerror这两个事件钩子，可以实现图片在加载完成和加载失败时的函数回调。多个资源加载可以计算出大体进度，如3/10&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;button&amp;gt;载入图片&amp;lt;/button&amp;gt;
&amp;lt;img src=&quot;img/test.png&quot; alt=&quot;测试&quot;&amp;gt;
&amp;lt;script&amp;gt;
var oBtn = document.getElementsByTagName('button')[0&lt;span&gt;];
var oImg0 = document.images[0&lt;span&gt;];
var array = [&quot;img/img1.gif&quot;,&quot;img/img2.gif&quot;,&quot;img/img3.gif&quot;,&quot;img/img4.gif&quot;&lt;span&gt;]
var iNow = -1&lt;span&gt;;
oBtn.onclick =&lt;span&gt; function(){
    iNow++&lt;span&gt;;
    iNow = iNow%4&lt;span&gt;;
    oImg0.src =&lt;span&gt; array[iNow];
}
var iDown = 0&lt;span&gt;;
var oImage = new&lt;span&gt; Image();
function preLoadImg(arr){
    function loadImgTest(arr){
        iDown++&lt;span&gt;;
        if(iDown &amp;lt;&lt;span&gt; arr.length){
            preLoadImg(arr);
        }else&lt;span&gt;{
            alert('ok'&lt;span&gt;);
            oImg.onload = null&lt;span&gt;;
            oImg = null&lt;span&gt;;            
        }
    }
    oImage.onload =&lt;span&gt; function(){
        loadImgTest(arr);
    };
    oImage.onerror =&lt;span&gt; function(){
        loadImgTest(arr);
    };    
    oImage.src =&lt;span&gt; arr[iDown];
}
preLoadImg(array);
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将预加载写成一个通用的资源加载器，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
let isFunc =&lt;span&gt; function(f){
  return typeof f === 'function'&lt;span&gt;
}
function resLoader(config){
  this.option =&lt;span&gt; {
    resourceType: 'image'&lt;span&gt;,
    baseUrl: ''&lt;span&gt;,
    resources: [],
    onStart: null&lt;span&gt;,
    onProgress: null&lt;span&gt;,
    onComplete: null&lt;span&gt;
  }
  if&lt;span&gt;(config){
    for(i in&lt;span&gt; config){
      this.options[i] =&lt;span&gt; config[i]
    }
  } else&lt;span&gt; {
    alert('参数错误'&lt;span&gt;)
    return&lt;span&gt; 
  }
  // 加载器状态 0:未启动 1:正在加载 2:加载完毕
  this.status = 0
  this.total = this.option.resources.length || 0
  this.currentIndex = 0&lt;span&gt;
}
resLoader.prototype.start =&lt;span&gt; function(){
  this.status = 1&lt;span&gt;
  let _this = this&lt;span&gt;
  let baseUrl = this&lt;span&gt;.option.baseUrl
  for(var i = 0, l = this.option.resources.length; i &amp;lt; l; i++&lt;span&gt;){
    let r = this&lt;span&gt;.option.resources[i],
        url = ''
    if(r.indexOf('http://) === 0 || r.indexOf('https://') === 0){
      url =&lt;span&gt; r
    } else&lt;span&gt; {
      url = baseUrl +&lt;span&gt; r
    }
    let image = new&lt;span&gt; Image()
    image.onload =&lt;span&gt; function(){_this.loaded()}
    image.onerror =&lt;span&gt; function(){_this.loaded()}
    image.src =&lt;span&gt; url
  }
  if(isFunc(this&lt;span&gt;.option.onStart)){
    this.option.onStart(this&lt;span&gt;.total)
  }
}
resloader.prototype.loaded =&lt;span&gt; funtion(){
  if(isFunc(this&lt;span&gt;.option.onProgress)){
    this.option.onProgress(++this.currentIndex, this&lt;span&gt;.total)
  }
  if(this.currentIndex === this&lt;span&gt;.total){
    if(isFunc(this&lt;span&gt;.option.onComplete)){
      this.option.onComplete(this&lt;span&gt;.total)
    }
  }
} 
let loader = new&lt;span&gt; resLoader({
  resources: ['img1.png','img2.png','img3.png'&lt;span&gt;],
  onStart: function(total){
    console.log('start:' +&lt;span&gt; total)
  },
  onProgress: function(current, total){
    console.log(current+ '/' +&lt;span&gt; total)
    let percent = current/total*100&lt;span&gt;
  },
  onComplete: function(total){
    console.log('加载完毕:' + total + '个资源'&lt;span&gt;)
  }
})
loader.start()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Webp&lt;/h3&gt;
&lt;p&gt;　　在安卓下可以使用webp格式的图片，它具有更优的图像数据压缩算法，能带来更小的图片体积，同等画面质量下，体积比jpg、png少了25%以上，而且同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性&lt;/p&gt;
&lt;p&gt;【检测】&lt;/p&gt;
&lt;p&gt;　　是否支持webp格式的图片的检测方法如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; isSupportWebp = !![].map &amp;amp;&amp;amp; document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).toDataURL(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).indexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data:image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) === &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【七牛自动转换】&lt;/p&gt;
&lt;p&gt;　　七牛支持自动将其他格式的图片转换成webp格式的图片，只需添加在图片地址之后添加?imageView2/2/format/webp&lt;/p&gt;
&lt;p&gt;　　下面是详细代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 若该浏览器支持webp格式，则将返回webp图片的url，否则返回原url
 * @param {string} '&lt;/span&gt;&lt;span&gt;https://static.xiaohuochai.site/20180612030117.png&lt;/span&gt;&lt;span&gt;'
 * @return {string} '&lt;/span&gt;&lt;span&gt;https://static.xiaohuochai.site/20180612030117.png?imageView2/1/format/webp&lt;/span&gt;&lt;span&gt;'
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; getUrlWithWebp = url =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; isSupportWebp = !![].map &amp;amp;&amp;amp; document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).toDataURL(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).indexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data:image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) === &lt;span&gt;0&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isSupportWebp) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; `${url}?imageView2/&lt;span&gt;2&lt;/span&gt;/format/&lt;span&gt;webp`
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; url
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【pageSpeed】&lt;/p&gt;
&lt;p&gt;　　Google开发的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式&lt;/p&gt;
&lt;p&gt;　　以nginx为例，它的设置很简单&lt;/p&gt;
&lt;p&gt;　　1、在http模块开启pagespeed属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pagespeed on;
pagespeed FileCachePath &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/cache/ngx_pagespeed/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、在主机配置添加如下一行代码，就能启用这个特性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pagespeed EnableFilters convert_png_to_jpeg,convert_jpeg_to_webp;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;CDN&lt;/h3&gt;
&lt;p&gt;　　图片性能的最后一步就是分发了。所有资源都可以从使用 CDN 中受益&lt;/p&gt;
&lt;p&gt;　　CDN 可以降低从图片站点提供自适应和高性能图片的复杂度。大多数CDN都可以根据设备和浏览器进行尺寸调整、裁剪和确定最合适的格式，甚至更多 —— 压缩、检测像素密度、水印、人脸识别和允许后期处理。借助这些强大的功能和能够将参数附到 URL 中，使得提供以用户为中心的图片变得轻而易举了&lt;/p&gt;
&lt;p&gt;　　以七牛云为例，imageView2 提供简单快捷的图片格式转换、缩略、剪裁功能。只需要填写几个参数，即可对图片进行缩略操作，生成各种缩略图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 裁剪正中部分，等比缩小生成200x200缩略图&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;odum9helk.qnssl.com/resource/gogopher.jpg?imageView2/1/w/200/h/200

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 宽度固定为200px，高度等比缩小，生成200x133缩略图&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;odum9helk.qnssl.com/resource/gogopher.jpg?imageView2/2/w/200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Vue图片优化&lt;/h3&gt;
&lt;p&gt;　　下面来介绍一个VUE下的插件vue-lazyload，可以实现图片或背景图片的懒加载、使用webp图片等效果&lt;/p&gt;
&lt;p&gt;　　首先，使用npm安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install vue-lazyload -D
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【基础使用】&lt;/p&gt;
&lt;p&gt;　　在main.js中，使用该插件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
import Vue &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
import App &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;./App.vue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
import VueLazyload &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vue-lazyload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

Vue.use(VueLazyload)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; or with options&lt;/span&gt;
&lt;span&gt;Vue.use(VueLazyload, {
  preLoad: &lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;span&gt;,
  error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/error.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  loading: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/loading.gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  attempt: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
})

&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  components: {
    App
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在模板中使用v-lazy来保存图片的真实地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;ul&amp;gt;
  &amp;lt;li v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img in list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img.src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者使用v-lazy-container配合图片的data-src属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;div v-lazy-container=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{ selector: 'img', error: 'xxx.jpg', loading: 'xxx.jpg' }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img1.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img2.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img3.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;div v-lazy-container=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{ selector: 'img' }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img1.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-error=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img2.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-loading=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img3.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【参数说明】&lt;/p&gt;
&lt;p&gt;　　vue-lazyload相关配置的参数说明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;key    　　 描述    默认值    类型
preLoad    预加载的宽高比    &lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;span&gt;    Number
error      图片加载失败时使用的图片源    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    String
loading    图片加载的路径    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    String
attempt    尝试加载次数    &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;    Number
listenEvents    想让vue监听的事件    [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mousewheel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;resize&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;animationend&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;transitionend&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;touchmove&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]    
adapter    动态修改元素属性    { }    
filter     图像的SRC过滤器    { }    
lazyComponent    懒加载组件    &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　比如，可以使用如下的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(VueLazyload, {
  preLoad: &lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;span&gt;,
  error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/error.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  loading: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/loading.gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  attempt: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
  listenEvents: [ &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ]
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【动态修改图片的URL】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(vueLazy, {
    filter: {
      progressive (listener, options) {
          &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; isCDN = /qiniudn.com/
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isCDN.test(listener.src)) {
              listener.el.setAttribute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lazy-progressive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
              listener.loading &lt;/span&gt;= listener.src + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?imageView2/1/w/10/h/10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
          }
      },
      webp (listener, options) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!options.supportWebp) &lt;span&gt;return&lt;/span&gt;
          &lt;span&gt;const&lt;/span&gt; isCDN = /qiniudn.com/
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isCDN.test(listener.src)) {
              listener.src &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?imageView2/2/format/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
          }
      }
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【设置事件钩子】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(vueLazy, {
    adapter: {
        loaded ({ bindType, el, naturalHeight, naturalWidth, $parent, src, loading, error, Init }) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do something here
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; example for call LoadedHandler&lt;/span&gt;
&lt;span&gt;            LoadedHandler(el)
        },
        loading (listender, Init) {
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        error (listender, Init) {
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        }
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【使用IntersectionObserver】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(vueLazy, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; set observer to true&lt;/span&gt;
  observer: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; optional&lt;/span&gt;
&lt;span&gt;  observerOptions: {
    rootMargin: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    threshold: &lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【懒加载组件】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(VueLazyload, {
  lazyComponent: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;lazy-component @show=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mini-cover&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img.src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/lazy-component&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
  {
    ...
    methods: {
      handler (component) {
        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;this component is showing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
      }
    }

  }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件中为图片或背景图片使用懒加载】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  data () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      imgObj: {
        src: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/logo.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/error.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        loading: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/loading-spin.svg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
      },
      imgUrl: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/logo.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; String&lt;/span&gt;
&lt;span&gt;    }
  }
}
&lt;/span&gt;&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
     &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;div v-lazy:background-image=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;!-- with customer error and loading --&amp;gt;
     &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgObj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;div v-lazy:background-image=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgObj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;!-- Customer scrollable element --&amp;gt;
     &amp;lt;img v-lazy.container =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;div v-lazy:background-image.container=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;!-- srcset --&amp;gt;
    &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'img.400px.jpg'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-srcset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img.400px.jpg 400w, img.800px.jpg 800w, img.1200px.jpg 1200w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :data-srcset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl' + '?size=400 400w, ' + imgUrl + ' ?size=800 800w, ' + imgUrl +'/1200.jpg 1200w'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【CSS状态】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loaded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;style&amp;gt;&lt;span&gt;
  img[lazy&lt;/span&gt;=&lt;span&gt;loading] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  img[lazy&lt;/span&gt;=&lt;span&gt;error] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  img[lazy&lt;/span&gt;=&lt;span&gt;loaded] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
  or background-image
  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  .yourclass[lazy&lt;/span&gt;=&lt;span&gt;loading] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  .yourclass[lazy&lt;/span&gt;=&lt;span&gt;error] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  .yourclass[lazy&lt;/span&gt;=&lt;span&gt;loaded] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
&lt;/span&gt;&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面是&lt;a href=&quot;https://www.xiaohuochai.cc/&quot; target=&quot;_blank&quot;&gt;前端小站&lt;/a&gt;中vue-lazyload插件的使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; main.js&lt;/span&gt;
import VueLazyload &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vue-lazyload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

Vue.use(VueLazyload, {
  loading: require(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./assets/imgs/loading.gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
  listenEvents: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
  filter: {
    webp(listener, options) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!options.supportWebp) &lt;span&gt;return&lt;/span&gt;
      &lt;span&gt;const&lt;/span&gt; isCDN = /xiaohuochai.site/
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isCDN.test(listener.src)) {
        listener.src &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?imageView2/2/format/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
      }
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; homeCategory.vue&lt;/span&gt;
&amp;lt;ul v-lazy:background-image=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;require('@/assets/imgs/match-bg.jpg')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 17 Jun 2018 21:27:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/9183454.html</dc:identifier>
</item>
</channel>
</rss>