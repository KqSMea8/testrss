<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>js中的继承 - 阿龙丶along</title>
<link>http://www.cnblogs.com/alongup/p/9271397.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alongup/p/9271397.html</guid>
<description>&lt;p&gt;　　JS虽然不像是JAVA那种强类型的语言，但也有着与JAVA类型的继承属性，那么JS中的继承是如何实现的呢？&lt;/p&gt;
&lt;h3&gt;一、构造函数继承&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;在构造函数中，同样属于两个新创建的函数，也是不相等的
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    function Fn(name){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.show =&lt;span&gt; function(){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             alert(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; obj1 = &lt;span&gt;new&lt;/span&gt; Fn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AAA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; obj2 = &lt;span&gt;new&lt;/span&gt; Fn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BBB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     console.log(obj1.show==obj2.show);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    此时可以看出构造函数的多次创建会产生多个相同函数，造成冗余太多。
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    利用原型prototype解决。首先观察prototype是什么东西
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    function Fn(){}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    console.log(Fn.prototype);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;constructor表示当前的函数属于谁
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__proto__  ==  [[prototype]]，书面用语，表示原型指针&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; fn1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Fn();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; fn2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Fn();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     Fn.prototype.show =&lt;span&gt; function(){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         alert(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     console.log(fn1.show==fn2.show);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ture&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     
&lt;span&gt;28&lt;/span&gt;     此时，任何一个对象的原型上都有了show方法，由此得出，构造函数Fn.prototype身上的添加的方法，相当于添加到了所有的Fn身上。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、call和applay继承&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function Father(skill){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.skill =&lt;span&gt; skill;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.show =&lt;span&gt; function(){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             alert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我会&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.skill);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; father = &lt;span&gt;new&lt;/span&gt; Father(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;绝世木匠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    function Son(abc){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的this指向函数Son的实例化对象
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将Father里面的this改变成指向Son的实例化对象，当相遇将father里面所有的属性和方法都复制到了son身上
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Father.call(this,abc);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承结束，call适合固定参数的继承
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Father.apply(this,arguments);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承结束，apply适合不定参数的继承&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    father.show()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; son = &lt;span&gt;new&lt;/span&gt; Son(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;一般木匠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     son.show();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;三、原型链继承(demo)&lt;/h3&gt;
&lt;p&gt;　　这个的么实现一个一个简单的拖拽，a-&amp;gt;b的一个继承。把a的功能继承给b。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:&lt;br/&gt;1&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;drag1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;2&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;drag2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CSS:&lt;br/&gt;1&lt;/span&gt; *{margin: &lt;span&gt;0&lt;/span&gt;;padding: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#drag1{width: 100px;height: 100px;background: red;position: absolute;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; #drag2{width: 100px;height: 100px;background: black;position: absolute;left: 500px;}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; JS: &lt;br/&gt;1&lt;/span&gt; &lt;span&gt;function Drag(){}
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Drag.prototype=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;            constructor:Drag,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            init:function(id){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele=&lt;span&gt;document.getElementById(id);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.cliW=document.documentElement.clientWidth||&lt;span&gt;document.body.clientWidth;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.cliH=document.documentElement.clientHeight||&lt;span&gt;document.body.clientHeight;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; that=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele.onmousedown=&lt;span&gt;function(e){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; e=&lt;span&gt;event&lt;/span&gt;||window.&lt;span&gt;event&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     that.disX=&lt;span&gt;e.offsetX;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     that.disY=&lt;span&gt;e.offsetY;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     document.onmousemove=&lt;span&gt;function(e){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; e=&lt;span&gt;event&lt;/span&gt;||window.&lt;span&gt;event&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                        that.move(e);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     that.ele.onmouseup=&lt;span&gt;function(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         document.onmousemove=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                }        
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            move:function(e){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.x=e.clientX-&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.disX;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.y=e.clientY-&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.disY;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.x=&lt;span&gt;this&lt;/span&gt;.x&amp;lt;&lt;span&gt;0&lt;/span&gt;?&lt;span&gt;this&lt;/span&gt;.x=&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.x;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.y=&lt;span&gt;this&lt;/span&gt;.y&amp;lt;&lt;span&gt;0&lt;/span&gt;?&lt;span&gt;this&lt;/span&gt;.y=&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.y;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.x=&lt;span&gt;this&lt;/span&gt;.x&amp;gt;&lt;span&gt;this&lt;/span&gt;.cliW-&lt;span&gt;this&lt;/span&gt;.ele.offsetWidth?&lt;span&gt;this&lt;/span&gt;.x=&lt;span&gt;this&lt;/span&gt;.cliW-&lt;span&gt;this&lt;/span&gt;.ele.offsetWidth:&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.x;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.y=&lt;span&gt;this&lt;/span&gt;.y&amp;gt;&lt;span&gt;this&lt;/span&gt;.cliH-&lt;span&gt;this&lt;/span&gt;.ele.offsetHeight?&lt;span&gt;this&lt;/span&gt;.y=&lt;span&gt;this&lt;/span&gt;.cliH-&lt;span&gt;this&lt;/span&gt;.ele.offsetHeight:&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.y;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele.style.left=&lt;span&gt;this&lt;/span&gt;.x+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele.style.top=&lt;span&gt;this&lt;/span&gt;.y+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Drag().init(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;drag1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        function ChidrenDrag(){}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         ChidrenDrag.prototype=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Drag()
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; ChidrenDrag().init(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;drag2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;四、混合继承&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;function Father(skill,id){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.skill =&lt;span&gt; skill;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     Father.prototype.show =&lt;span&gt; function(){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         alert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是father,这是我的技能&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.skill);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    function Son(){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         Father.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,arguments);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不做son的原型即成father的原型，此时会报错：son.show is not a function&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     Son.prototype =&lt;span&gt; Father.prototype;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为，如果不让son的原型等于father的原型，son使用apply是继承不到原型上的方法
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;但这是一种错误的原型继承示例，如果使用这种方式，会导致修改son原型上的show方法时，会把father身上的show也修改
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;内存的堆和栈机制&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     Son.prototype.show =&lt;span&gt; function(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         alert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是son,这是我的技能&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.skill);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; father = &lt;span&gt;new&lt;/span&gt; Father(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;专家级铁匠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;father&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; son = &lt;span&gt;new&lt;/span&gt; Son(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;熟练级铁匠&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;son&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    father.show();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    son.show();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    上面的示例应该修改成以下形式：
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    以上红色的代码应改成：
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Father.prototype){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         Son.prototype[i] =&lt;span&gt; Father.prototype[i];
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历father的原型身上的所有方法，依次拷贝给son的原型，这种方式称为深拷贝&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     这种继承方式叫做混合继承，用到了for-in继承，cell和apple继承。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;五、Es6的class继承（demo）&lt;/h3&gt;
&lt;p&gt;　　这个demo的功能和原型链继承的demo功能一样，a-&amp;gt;b的继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HTML:
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;drag1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;2&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;drag2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CSS:
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; *{margin: &lt;span&gt;0&lt;/span&gt;;padding: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; #drag1{width: 100px;height: 100px;background: red;position: absolute;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; #drag2{width: 100px;height: 100px;background: black;position: absolute;left: 500px;}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; JS:&lt;br/&gt;1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Drag{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;            constructor(id){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele=&lt;span&gt;document.getElementById(id);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.init();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            init(){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; that=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele.onmousedown=&lt;span&gt;function(e){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; e=&lt;span&gt;event&lt;/span&gt;||window.&lt;span&gt;event&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     that.disX=&lt;span&gt;e.offsetX;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     that.disY=&lt;span&gt;e.offsetY;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     document.onmousemove=&lt;span&gt;function(e){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; e=&lt;span&gt;event&lt;/span&gt;||window.&lt;span&gt;event&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                        that.move(e);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     that.ele.onmouseup=&lt;span&gt;function(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         document.onmousemove=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         that.ele.onmouseup=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            move(e){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele.style.left=e.clientX-&lt;span&gt;this&lt;/span&gt;.disX+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.ele.style.top=e.clientY-&lt;span&gt;this&lt;/span&gt;.disY+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Drag(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;drag1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExtendsDrag extends Drag{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            constructor(id){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                super(id);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; ExtendsDrag(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;drag2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　我总结的这几种继承方法.两个demo继承的方法大家最好在编译器上跑一下，看看。这样才能更深刻的去理解。尤其是原型链的继承，js作为一个面向对象的编程语言，还是很常用的。&lt;/p&gt;


</description>
<pubDate>Thu, 05 Jul 2018 15:32:00 +0000</pubDate>
<dc:creator>阿龙丶along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alongup/p/9271397.html</dc:identifier>
</item>
<item>
<title>python3进阶开发-第一个仿博客园的项目（1） - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/9271324.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/9271324.html</guid>
<description>&lt;p&gt;首先我们要设计一下表结构：&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表) --------》一对一    -----------》Blog(博客信息表)&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表) ---------》一对多    -----------》Article UpDown(点赞表)&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表) ---------》一对多    -----------》Article Comment(评论表)&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表)----------》一对多    -----------》Article(文章)&lt;/p&gt;
&lt;p&gt;Blog(博客信息表)    ----------------》 一对多   -----------》Category(个人博客文章分类表) &lt;/p&gt;
&lt;p&gt;Blog(博客信息表)    ----------------》一对多   ------------》Tag(标签表)&lt;/p&gt;
&lt;p&gt;Category(个人博客文章分类表)--》 一对多 -------------》Article(文章表)&lt;/p&gt;
&lt;p&gt;Tag(标签表)  --------------------------》多对多  -------------》Article(文章表)&lt;/p&gt;
&lt;p&gt;Article(文章表) ------------------------》一对一  -------------》ArticleDetail(文章详情表)&lt;/p&gt;
&lt;p&gt;Article(文章表) ------------------------》一对多  --------------》Article UpDown(点赞表)&lt;/p&gt;
&lt;p&gt;Article(文章表) ------------------------》一对多 ---------------》Article Comment(评论表)&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your models here.&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AbstractUser

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo(AbstractUser):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    用户信息表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    phone &lt;/span&gt;= models.CharField(max_length=11, null=True, unique=&lt;span&gt;True)
    avatar &lt;/span&gt;= models.FileField(upload_to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatars/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, default=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatars/default.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    blog &lt;/span&gt;= models.OneToOneField(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Blog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.username

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Blog(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    博客信息
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=64)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 个人博客标题&lt;/span&gt;
    theme = models.CharField(max_length=32)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 博客主题&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.title

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博客&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Category(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    个人博客文章分类
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=32)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分类标题&lt;/span&gt;
    blog = models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Blog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 外键关联博客，一个博客站点可以有多个分类&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}-{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(self.blog.title, self.title)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章分类&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Tag(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    标签
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=32)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 标签名&lt;/span&gt;
    blog = models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Blog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 所属博客&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.title

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;标签&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Article(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    文章
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=50)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文章标题&lt;/span&gt;
    desc = models.CharField(max_length=255)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文章描述&lt;/span&gt;
    create_time = models.DateTimeField(auto_now_add=True)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建时间&lt;/span&gt;
    category = models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)

    user &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    tags &lt;/span&gt;=&lt;span&gt; models.ManyToManyField(
        to&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        through&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article2Tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        through_fields&lt;/span&gt;=(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    )

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.title

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArticleDetail(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    文章详情表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    content &lt;/span&gt;=&lt;span&gt; models.TextField()
    article &lt;/span&gt;= models.OneToOneField(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章详情&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Article2Tag(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    文章和标签的多对多关系表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    article &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    tag &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}-{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(self.article, self.tag)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        unique_together &lt;/span&gt;= ((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),)
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章-标签&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArticleUpDown(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    点赞表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    user &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)
    article &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)
    is_up &lt;/span&gt;= models.BooleanField(default=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        unique_together &lt;/span&gt;= ((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),)
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点赞&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Comment(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    评论表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    article &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    user &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    content &lt;/span&gt;= models.CharField(max_length=255)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 评论内容&lt;/span&gt;
    create_time = models.DateTimeField(auto_now_add=&lt;span&gt;True)
    parent_comment &lt;/span&gt;= models.ForeignKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.content

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;评论&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;= verbose_name
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 05 Jul 2018 15:15:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/9271324.html</dc:identifier>
</item>
<item>
<title>.NET CORE+CENTOS部署+supervisor守护 - j郏</title>
<link>http://www.cnblogs.com/JoinLet/p/9271297.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JoinLet/p/9271297.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;一、安装.NetCore和发布项目&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、要开始安装.NET，您需要注册微软签名密钥并添加微软产品提要。这只需要每台机器做一次。打开命令提示符并运行以下命令&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc&lt;br/&gt;sudo sh -c 'echo -e &quot;[packages-microsoft-com-prod]\nname=packages-microsoft-com-prod \nbaseurl= https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &amp;gt; /etc/yum.repos.d/dotnetdev.repo'&lt;br/&gt;2、更新 yum:&lt;br/&gt;sudo yum update&lt;p&gt;3、安装依赖：
&lt;/p&gt;&lt;/pre&gt;
&lt;pre readability=&quot;14.857142857143&quot;&gt;
sudo yum install libunwind libicu&lt;br/&gt;4、安装.Net Core Sdk:&lt;br/&gt;(1)、先查看skd都有哪些版本&lt;br/&gt;sudo yum search dotnet-sdk&lt;p&gt;&lt;em&gt;（2）安装：&lt;br/&gt;sudo yum install dotnet-sdk-2.1.200.x86_64&lt;br/&gt;5、查看是否安装成功：&lt;br/&gt;dotnet --version&lt;br/&gt;6、创建项目&lt;br/&gt;dotnet new mvc WebDev&lt;br/&gt;7、运行项目&lt;br/&gt;dotnet run，这里就可以访问了，默认使用 http://localhost:5000&lt;br/&gt;如果执行成功，可以进行下面的步骤&lt;br/&gt;8、发布项目：&lt;br/&gt;dotnet publish 默认项目会发布到./bin/Debug/netcoreapp2.1/publish（netcoreapp2.1是我sdk的版本） 目录下&lt;br/&gt;9、进入到发布目录，执行命令：&lt;br/&gt;dotnete WebDev.dll,就会执行成功，直接访问  &lt;/em&gt;&lt;em&gt;http://localhost:5000 ，说明发布成功&lt;br/&gt;&lt;span&gt;二、安装nignx：&lt;/span&gt;&lt;br/&gt;curl -o  nginx.rpm &lt;a href=&quot;http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm&quot;&gt;http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm&lt;/a&gt;&lt;br/&gt;rpm -ivh nginx.rpm&lt;br/&gt;yum install nginx&lt;br/&gt;输入：&lt;strong&gt;systemctl start nginx&lt;/strong&gt;    来启动nginx。&lt;br/&gt;输入：&lt;strong&gt;systemctl enable nginx   来设置nginx的开机启动（linux宕机、重启会自动运行nginx不需要连上去输入命令）。&lt;br/&gt;&lt;/strong&gt;&lt;span&gt;三、配置防火墙：&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;命令：firewall-cmd --zone=public --add-port=80/tcp --permanent&lt;/strong&gt;（开放80端口）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;命令：systemctl restart firewalld&lt;/strong&gt;（重启防火墙以使配置即时生效）&lt;br/&gt;四、配置nginx对ASP.NET Core应用的转发&lt;br/&gt;修改 &lt;strong&gt;/etc/nginx/conf.d/default.conf &lt;/strong&gt;文件&lt;br/&gt;将文件内容替换为&lt;br/&gt;server {&lt;br/&gt;listen 80;&lt;br/&gt;location / {&lt;br/&gt;proxy_pass &lt;a&gt;http://localhost:5000;&lt;/a&gt;&lt;br/&gt;proxy_http_version 1.1;&lt;br/&gt;proxy_set_header Upgrade $http_upgrade;&lt;br/&gt;proxy_set_header Connection keep-alive;&lt;br/&gt;proxy_set_header Host $host;&lt;br/&gt;proxy_cache_bypass $http_upgrade;&lt;br/&gt;}&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
&lt;em&gt;执行：&lt;strong&gt;nginx –s reload &lt;/strong&gt;使其即时生效&lt;p&gt;&lt;strong&gt;命令：dotnet&lt;/strong&gt;&lt;/p&gt;&lt;/em&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em&gt;/bin/Debug/netcoreapp2.1/publish/&lt;/em&gt;&lt;em readability=&quot;1&quot;&gt;&lt;strong readability=&quot;2&quot;&gt;WebApplication1.dll&lt;p&gt;到这里，.NetCore 部署已经完成；&lt;br/&gt;&lt;/p&gt;&lt;/strong&gt;&lt;/em&gt;
&lt;/pre&gt;

&lt;p&gt;supervisor的介绍详见：&lt;a href=&quot;https://www.cnblogs.com/zhangfeistudio/p/shi-yongsupervisor-shi-xiandotnet-cheng-xu-hou-tai.html&quot;&gt;https://www.studyscript.com/Post/index/id/3038.html&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;安装supervisor&quot;&gt;1、安装supervisor&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#yum install python-setuptools  &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p id=&quot;生成supervisor配置文件&quot;&gt;2、生成supervisor配置文件&lt;/p&gt;
&lt;p&gt;　建立目录，并赋予所有者可读、可写、可执行（700）权限&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#mkdir -m 700 -p /etc/supervisor&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、创建配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#echo_supervisord_conf &amp;gt; /etc/supervisor/supervisord.conf&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、修改配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#vim /etc/supervisor/supervisord.conf&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  在文件最后加上&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;[include]&lt;br/&gt;files=/etc/supervisor/conf.d/*.conf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建进程配置文件&quot;&gt;5、创建进程配置文件&lt;/h2&gt;
&lt;p&gt;　　5.1创建进程配置文件存放目录&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;　　#mkdir -m 700 /etc/supervisor/conf.d&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　5.2、创建进程配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;　　#vim /etc/supervisor/conf.d/IO_Spider_WebAPI.conf&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　编辑内容&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;[program:IO_Spider_WebAPI]&lt;br/&gt;command=/bin/bash -c &quot;dotnet xxgk.dll&quot;&lt;br/&gt;directory=/home/zhangfei/IO_Spider/WebAPI/&lt;br/&gt;autorestart=true&lt;br/&gt;stderr_logfile=/var/log/IO_Spider_WebAPI.error.log&lt;br/&gt;stdout_logfile=/var/log/IO_Spider_WebAPI.stdout.log&lt;br/&gt;environment=ASPNETCORE_ENVIRONMENT=Development&lt;br/&gt;user=root&lt;br/&gt;stopsignal=INT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6、创建supervisor自启动服务&lt;/p&gt;
&lt;p&gt;　　6.1、创建服务文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;　　#vim /lib/systemd/system/supervisor.service&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　6.2、编辑内容&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;[Unit]&lt;br/&gt;Description=supervisor&lt;br/&gt;[Service]&lt;br/&gt;Type=forking&lt;br/&gt;ExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.conf&lt;br/&gt;ExecStop=/usr/bin/supervisorctl shutdown&lt;br/&gt;ExecReload=/usr/bin/supervisorctl reload&lt;br/&gt;KillMode=process&lt;br/&gt;Restart=on-failure&lt;br/&gt;RestartSec=42s&lt;br/&gt;[Install]&lt;br/&gt;WantedBy=multi-user.target&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7、赋权&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#chmod 754 /lib/systemd/system/supervisor.service&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;8、设置开机自启动&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#systemctl &lt;span class=&quot;hljs-selector-tag&quot;&gt;enable &lt;span class=&quot;hljs-selector-tag&quot;&gt;supervisor&lt;span class=&quot;hljs-selector-class&quot;&gt;.service&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;9、运行服务&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#systemctl &lt;span class=&quot;hljs-selector-tag&quot;&gt;start &lt;span class=&quot;hljs-selector-tag&quot;&gt;supervisor&lt;span class=&quot;hljs-selector-class&quot;&gt;.service&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;10、查看进程执行情况&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#supervisorctl&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;11、进入supervisor提示符之后输入“status”查看，或者&lt;em id=&quot;__mceDel&quot;&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#supervisorctl status&lt;/span&gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;strong/&gt;&lt;/em&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt; &lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 05 Jul 2018 15:05:00 +0000</pubDate>
<dc:creator>j郏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JoinLet/p/9271297.html</dc:identifier>
</item>
<item>
<title>TensorFlow学习笔记（七）Tonser Board - 左手十字</title>
<link>http://www.cnblogs.com/zuoshoushizi/p/9265993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuoshoushizi/p/9265993.html</guid>
<description>&lt;p&gt;　　为了更好的管理、调试和优化神经网络的训练过程，TensorFlow提供了一个可视化工具TensorBoard。TensorBoard可以有效的展示TensorFlow在运行过程中的计算图。、各种指标随着时间变化的趋势以及训练中使用到的腿昂等信息&lt;/p&gt;
&lt;h3&gt;　  一、TensorBoard简介&lt;/h3&gt;
&lt;h3&gt;　　二、TensorBoard计算图可视化&lt;/h3&gt;
&lt;h3&gt;　　　　1、命名空间与TensorBoard图上节点&lt;/h3&gt;
&lt;h3&gt;　　　　2、节点信息&lt;/h3&gt;
&lt;h3&gt;　　　　3、监控指标可视化&lt;/h3&gt;

&lt;p&gt;　　　TensorBoard是 TensorFlow的可视化工具，它可以通过TensorFlow程序运行过程中输出的日志文件可视化TensorFlow的运行状态。TB与TF跑在不同分进程中。TB自动读取最新的TF日志文件，呈现当前TF的最新状态。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义一个简单的计算图，实现向量的加法&lt;/span&gt;
input1 = tf.constant([1.0,2.0,3.0],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
input2 &lt;/span&gt;= tf.Variable(tf.random_uniform([3]),name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
output &lt;/span&gt;= tf.add_n([input1,input2],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成一个写日志的writer，并将当前TF计算图写入日志&lt;/span&gt;
writer = tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,graph=&lt;span&gt;tf.get_default_graph())
writer.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过命令tensorboard --logdir=path/to/log 来启动tensorboard&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1224905/201807/1224905-20180705111218671-1602078338.png&quot; alt=&quot;&quot; width=&quot;965&quot; height=&quot;520&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;　　　　1、命名空间与TensorBoard图上节点&lt;/h2&gt;
&lt;p&gt;　　　为了更好的组织可视化效果图上的计算节点，TB支持通过TF命名空间来整理可视化效果图上的节点。TensorFlow提供了两个命名空间函数tf.variable_scope和tf.name_scope。两者基本是等价的。唯一的区别是在使用tf.get_variable上有所不同。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf

with tf.variable_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在命名空间foo下，获取变量“bar”。得到变量 foo/bar&lt;/span&gt;
    a = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a.name)

with tf.variable_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在命名空间foo下，获取变量“bar”。得到变量 bar/bar.此时bar/bar和foo/bar并不冲突&lt;/span&gt;
    b = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(b.name)

with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.Variable 会受到tf.name_scope影响。变量名为“b_1/Variable:0”&lt;/span&gt;
    a = tf.Variable([1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a.name)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.get_variable 不会受到tf.name_scope影响。变量名为“b:0”，没有加上name_scope的前缀&lt;/span&gt;
    b = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(b.name)
with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.Variable 会受到tf.name_scope影响。变量名为“b/Variable:0”&lt;/span&gt;
    a = tf.Variable([1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a.name)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.get_variable 不会受到tf.name_scope影响。变量名也为“b:0”，没有加上name_scope的前缀&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;会报错重复声明&lt;/span&gt;
    b = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(b.name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改进上一节的样例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf

with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inout1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    input1 &lt;/span&gt;= tf.constant([1.0,2.0,3.0],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    intput2 &lt;/span&gt;= tf.Variable(tf.random_uniform([3]),name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
output &lt;/span&gt;= tf.add_n([input1,intput2],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

writer &lt;/span&gt;= tf.summary.FileWriter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,tf.get_default_graph())
writer.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可视化TensorFlow（五）中的样例程序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;加载mnsit_inference.py中定义的变量和函数&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; integerad_mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mnsit_inference1
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置神经网络的参数&lt;/span&gt;
BATCH_SIZE = 100&lt;span&gt;
LR_BASE &lt;/span&gt;= 0.8&lt;span&gt;
LR_DECAY &lt;/span&gt;= 0.99&lt;span&gt;
REGULARAZTION_RATE &lt;/span&gt;= 0.0001&lt;span&gt;
TRANING_STEPS &lt;/span&gt;= 30000&lt;span&gt;
MOVING_AVERAGE_DECAY &lt;/span&gt;= 0.99
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;模型保存的文件名和路径&lt;/span&gt;
MODEL_SAVE_PATH = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/model/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
MODEL_SAVE_NAME &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;model.ckpt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


INPUT_NODE &lt;/span&gt;= 784&lt;span&gt;
OUTPUT_NODE &lt;/span&gt;=10&lt;span&gt;
LAYER_NODE &lt;/span&gt;= 500

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; train(mnsit):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义输入和输出的placeholder,将处理输入数据的计算都放在“input”&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        x &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,mnsit_inference1.INPUT_NODE],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x_input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        y_ &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,mnsit_inference1.OUTPUT_NODE],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y_input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    regularizer &lt;/span&gt;=&lt;span&gt; tf.contrib.layers.l2_regularizer(REGULARAZTION_RATE)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;直接使用mnsit_inference中定义的前向传播过程&lt;/span&gt;
    y =&lt;span&gt; mnsit_inference1.inference(x,regularizer)
    global_step &lt;/span&gt;= tf.Variable(0,trainable=&lt;span&gt;False)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将处理滑动平均相关的计算都放在moving_average命名空间下&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;moving_average&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        variable_average &lt;/span&gt;=&lt;span&gt; tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY,global_step)
        variable_average_op &lt;/span&gt;=&lt;span&gt; variable_average.apply(tf.trainable_variables())
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将计算loss相关的计算都放在loss_func命名空间下&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loss_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        cross_entropy &lt;/span&gt;= tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.argmax(y_,1),logits=&lt;span&gt;y)
        cross_entropy_mean &lt;/span&gt;=&lt;span&gt; tf.reduce_mean(cross_entropy)
        loss &lt;/span&gt;= cross_entropy_mean + tf.add_n(tf.get_collection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;losses&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义学习率、优化方法等放在“train_step”下&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train_step&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        learning_rate &lt;/span&gt;= tf.train.exponential_decay(LR_BASE,global_step,mnsit.train.num_examples/&lt;span&gt;BATCH_SIZE,LR_DECAY)
        train_step &lt;/span&gt;= tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=&lt;span&gt;global_step)
        with tf.control_dependencies([train_step,variable_average_op]):
            train_op &lt;/span&gt;= tf.no_op(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化TF的持久化类&lt;/span&gt;
    saver =&lt;span&gt; tf.train.Saver()
    with tf.Session() as sess:
        tf.initialize_all_variables().run()
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(TRANING_STEPS):
            xs,ys &lt;/span&gt;=&lt;span&gt; mnsit.train.next_batch(BATCH_SIZE)
            _,loss_value,step &lt;/span&gt;= sess.run([train_op,loss,global_step],feed_dict=&lt;span&gt;{x:xs,y_:ys})
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;每1000轮保存一次模型&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; i % 1000 ==&lt;span&gt; 0:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;After {0} training steps,loss on training batch is {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(step,loss_value))
                saver.save(sess,os.path.join(MODEL_SAVE_PATH,MODEL_SAVE_NAME),global_step&lt;/span&gt;=&lt;span&gt;global_step)
    writer &lt;/span&gt;= tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,tf.get_default_graph())
    writer.close()
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(argv =&lt;span&gt; None):
    mnsit &lt;/span&gt;= input_data.read_data_sets(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mnist_set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,one_hot=&lt;span&gt;True)
    train(mnsit)
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    tf.app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成的TB可视化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1224905/201807/1224905-20180705204916795-1075388752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　　　除了手动的通过TensorFlow的命名空间来调整TensorBoard的可视化效果图，TensorFlow也会智能的调整可视化效果图上的节点。TB将TF分成了主图和辅助图。左侧的Graph为主图，右侧的Auxiliary Nodes为辅助图。TF会主动把连接表较多的点列出来放在辅助图中。&lt;/p&gt;
&lt;p&gt;　　　　除了自动的方式，TF也支持手动的方式来调整可视化效果。&lt;/p&gt;

&lt;h2&gt;　　　　2、节点信息&lt;/h2&gt;
&lt;p&gt;　　除了展示TF计算图的结构，TB还可以展示TF计算图上每个节点的基本信息以及运行是所消耗的时间以及空间。&lt;/p&gt;
&lt;p&gt;　　调整上面代码中迭代训练的部分，展示每次迭代TF计算节点运行时间和消耗的内存。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    with tf.Session() as sess:
        tf.initialize_all_variables().run()
        writer &lt;/span&gt;= tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,tf.get_default_graph())
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(TRANING_STEPS):

            xs,ys &lt;/span&gt;=&lt;span&gt; mnsit.train.next_batch(BATCH_SIZE)
            _,loss_value,step &lt;/span&gt;= sess.run([train_op,loss,global_step],feed_dict=&lt;span&gt;{x:xs,y_:ys})
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;每1000轮记录一次运行状态&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; i % 1000 ==&lt;span&gt; 0:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置运行是需要记录的信息&lt;/span&gt;
                run_options =tf.RunOptions(trace_level =&lt;span&gt; tf.RunOptions.FULL_TRACE)
                run_metadata &lt;/span&gt;=&lt;span&gt; tf.RunMetadata()
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将配置信息和记录运行是的元信息传入运行过程&lt;/span&gt;
                _,loss_value,step = sess.run([train_op,loss,global_step],feed_dict={x:xs,y_:ys},options=run_options,run_metadata=&lt;span&gt;run_metadata)
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将节点在运行是的信息写入日志&lt;/span&gt;
                writer.add_run_metadata(run_metadata,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;step-%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;i)
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;After {0} training steps,loss on training batch is {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(step,loss_value))
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                 _,loss_value,step &lt;/span&gt;= sess.run([train_op,loss,global_step],feed_dict=&lt;span&gt;{x:xs,y_:ys})
    writer.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;　　　　3、监控指标可视化&lt;/h2&gt;
&lt;p&gt;　　TB除了可视化TF的计算图，还可以可视化TF运行程序中各种有助于了解运行程序状态的监控指标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data
SUMMARY_DIR &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
BATCH_SIZE &lt;/span&gt;=100&lt;span&gt;
TRAIN_STEPS &lt;/span&gt;=30000

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; variable_summaries(var,name):
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summaries&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        tf.summary.histogram(name,var)
        mean &lt;/span&gt;=&lt;span&gt; tf.reduce_mean(var)
        tf.summary.scalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mean/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;name,mean)
        stddev &lt;/span&gt;= tf.sqrt(tf.reduce_mean(tf.square(var-&lt;span&gt;mean)))
        tf.summary.scalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stddev/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;name,stddev)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成一层全连接层神经网络&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; nn_layer(input_tensor,input_dim,output_dim,layer_name,act=&lt;span&gt; tf.nn.relu):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将同一层神经网络放在一个统一的空间&lt;/span&gt;
&lt;span&gt;    with tf.name_scope(layer_name):
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;weights&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            weights &lt;/span&gt;= tf.Variable(tf.truncated_normal([input_dim,output_dim],stddev=0.1&lt;span&gt;))
            variable_summaries(weights,layer_name&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/weights&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;biases&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            biases &lt;/span&gt;= tf.Variable(tf.constant(0.0,shape=&lt;span&gt;[output_dim]))
            variable_summaries(biases,layer_name&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/biases&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wx_plus_b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            preactivate &lt;/span&gt;= tf.matmul(input_tensor,weights)+&lt;span&gt;biases
            tf.summary.histogram(layer_name&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/pre_activations&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,preactivate)
            activations &lt;/span&gt;=&lt;span&gt; act(preactivate)
            tf.summary.histogram(layer_name&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/activations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,activations)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; activations
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(_):
    mnsit &lt;/span&gt;= input_data.read_data_sets(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mnist_set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,one_hot=&lt;span&gt;True)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        x &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,784],name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x_input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        y_ &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,10],name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y_input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_reshape&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        image_shaped_input &lt;/span&gt;= tf.reshape(x,[-1,28,28,1&lt;span&gt;])
        tf.summary.image(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,image_shaped_input,10&lt;span&gt;)
    hidden1 &lt;/span&gt;= nn_layer(x,784,500,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;layer1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    y &lt;/span&gt;= nn_layer(hidden1,500,10,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;layer2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cross_entropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        cross_entropy &lt;/span&gt;= tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_,logits=&lt;span&gt;y))
        tf.summary.scalar(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cross_entropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,cross_entropy)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        train_op &lt;/span&gt;= tf.train.AdamOptimizer(0.001&lt;span&gt;).minimize(cross_entropy)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;correct_prediction&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
            correct_prediction &lt;/span&gt;= tf.equal(tf.arg_max(y,1),tf.argmax(y_,1&lt;span&gt;))
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
            accuracy &lt;/span&gt;=&lt;span&gt; tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
            tf.summary.scalar(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,accuracy)
    merged &lt;/span&gt;=&lt;span&gt; tf.summary.merge_all()

    with tf.Session() as sess :
        summary_writer &lt;/span&gt;=&lt;span&gt; tf.summary.FileWriter(SUMMARY_DIR,sess.graph)
        tf.global_variables_initializer().run()
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(TRAIN_STEPS):
            xs,ys &lt;/span&gt;=&lt;span&gt; mnsit.train.next_batch(BATCH_SIZE)
            summary,_ &lt;/span&gt;= sess.run([merged,train_op],feed_dict=&lt;span&gt;{x:xs,y_:ys})
            summary_writer.add_summary(summary,i)
    summary_writer.close()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    tf.app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1224905/201807/1224905-20180705223132596-659682278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 05 Jul 2018 14:39:00 +0000</pubDate>
<dc:creator>左手十字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuoshoushizi/p/9265993.html</dc:identifier>
</item>
<item>
<title>CentOS7.5之MongoDB4.0安装与CRUD基本操作 - FrankDeng</title>
<link>http://www.cnblogs.com/frankdeng/p/9158075.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/frankdeng/p/9158075.html</guid>
<description>&lt;h2&gt;一 MongoDB简介&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MongoDB中的记录是一个文档，它是由字段和值对组成的数据结构。&lt;/span&gt;&lt;span&gt;MongoDB文档类似于JSON对象。&lt;/span&gt;&lt;span&gt;字段的值可以包括其他文档，数组和文档数组。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;二 MongoDB下载安装&lt;/h2&gt;
&lt;h3&gt;2.1 下载地址：&lt;/h3&gt;
&lt;p&gt;      &lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot; target=&quot;_blank&quot;&gt;https://www.mongodb.com/download-center?jmp=nav#community&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MongoDB的版本偶数版本为稳定版，奇数版本为开发版。&lt;/li&gt;
&lt;li&gt;MongoDB对于32位系统支持不佳，所以3.2版本以后没有再对32位系统的支持。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201807/1385722-20180705102348397-2028161543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.2 下载安装&lt;/h3&gt;
&lt;p&gt;下载完安装包，并解压 &lt;strong&gt;tgz&lt;/strong&gt;（以下演示的是 64 位 Linux上的安装） 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
curl -O https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.0.0.tgz    # 下载&lt;/span&gt;
tar -zxvf mongodb-linux-x86_64-rhel70-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.tgz                                   # 解压
mv  mongodb&lt;/span&gt;-linux-x86_64-rhel70-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt; /usr/local/mongodb                          # 将解压包拷贝到指定目录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 &lt;strong&gt;PATH&lt;/strong&gt; 路径中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export PATH=&amp;lt;mongodb-install-directory&amp;gt;/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;mongodb-install-directory&amp;gt;&lt;/strong&gt; 为你 MongoDB 的安装路径。如本文的 &lt;strong&gt;/usr/local/mongodb&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3&gt;2.3 bin目录结构&lt;/h3&gt;
&lt;p&gt;bsondump: binary-json,二进制文件,选择性导出bson文件&lt;/p&gt;
&lt;p&gt;mongo: 客户端&lt;/p&gt;
&lt;p&gt;mongod: 服务端&lt;/p&gt;
&lt;p&gt;mongodump: 整体导出数据库（二进制）&lt;/p&gt;
&lt;p&gt;mongoexport：导出易识别的json文档&lt;/p&gt;
&lt;p&gt;mongoimport：导入json文档&lt;/p&gt;
&lt;p&gt;mongorestore：数据库整体导入&lt;/p&gt;
&lt;p&gt;mongos&lt;span&gt;：&lt;/span&gt; &lt;span&gt;路由器（分片）&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.4 创建数据库目录&lt;/h3&gt;
&lt;p&gt;MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。&lt;/p&gt;
&lt;p&gt;以下实例中我们将data目录创建于MongoDB安装目录下。&lt;/p&gt;
&lt;p&gt;注意：/data/db 是 MongoDB 默认的启动的数据库路径(--dbpath)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@node21 mongodb]$  mkdir -p data&lt;span&gt;
[root@node21 mongodb]$  mkdir &lt;/span&gt;-p log/mongodb.log
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;2.5 运行 MongoDB 服务&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;你可以再命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。     注意：如果你的数据库目录不是/data/db，可以通过 --dbpath 来指定。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@node21 mongodb]$ ./bin/mongod --dbpath ./data/  --logpath ./log/mongodb.log --port 27017 --fork&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释:       dbpath 数据存储目录           logpath 日志存储文件          port 运行端口(默认27017)          fork 后台静默运行&lt;/p&gt;
&lt;p&gt;查看MongoDB运行进程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@node21 mongodb]# ps aux |grep mongod
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.6 后台管理 Shell&lt;/h3&gt;
&lt;p&gt;如果你需要进入MongoDB后台管理，你需要先打开mongodb装目录的下的bin目录，然后执行mongo命令文件。MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）：   &lt;span class=&quot;pln&quot;&gt;$ cd &lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;usr&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;kwd&quot;&gt;local&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mongodb&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@node21 mongodb]# ./bin/&lt;span&gt;mongo
MongoDB shell version v4.&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
connecting to: mongodb:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:27017&lt;/span&gt;
MongoDB server version: &lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
Welcome to the MongoDB shell.&lt;br/&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.7 基本概念解释&lt;/h3&gt;
&lt;div class=&quot;Section0&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;术语&lt;strong&gt;/&lt;/strong&gt;概念&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot; align=&quot;center&quot;&gt;解释&lt;strong&gt;/&lt;/strong&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;database&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据库&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;collection&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据库表/集合&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;document&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据记录行/文档&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;field&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据字段/域&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;index&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;索引&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;primary key&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot; readability=&quot;6&quot;&gt;
&lt;p class=&quot;15&quot;&gt;主键,MongoDB自动将_id字段设置为主键&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2.8 Shell help 帮助解释&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--help –h&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;返回基本帮助和用法文本&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--version&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;返回MongoDB的版本&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--config&amp;lt;文件名&amp;gt; -f&amp;lt;文件名&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定包含运行时配置的配置文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--verbose -v&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;增加发送到控制台日志的数量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--quiet&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;减少发送到控制台日志的数量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--port&amp;lt;端口&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定mongod的端口，默认27017&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--bind_ip&amp;lt;端口&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定id地址&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--maxConns&amp;lt;编号&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定链接的最大数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--logpath&amp;lt;路径&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定日志文件的路径&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--auth&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;启用远程主机的身份验证&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--dbpath&amp;lt;路径&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定数据库实例的路径&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--nohttpinterface&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;禁用HTTP接口&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--nojournal&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;禁用日志&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--noprealloc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;禁止预分配数据文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--repair&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;在所有数据库上运行修复程序&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;2.9 MongoDB 数据类型&lt;/h3&gt;
&lt;p&gt;下表为MongoDB中常用的几种数据类型。&lt;/p&gt;
&lt;table class=&quot;reference&quot;&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr&gt;&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;布尔值。用于存储布尔值（真/假）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Double&lt;/td&gt;
&lt;td&gt;双精度浮点值。用于存储浮点值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Min/Max keys&lt;/td&gt;
&lt;td&gt;将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;用于将数组或列表或多个值存储为一个键。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Timestamp&lt;/td&gt;
&lt;td&gt;时间戳。记录文档修改或添加的具体时间。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;用于内嵌文档。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;用于创建空值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Symbol&lt;/td&gt;
&lt;td&gt;符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Object ID&lt;/td&gt;
&lt;td&gt;对象 ID。用于创建文档的 ID。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Binary Data&lt;/td&gt;
&lt;td&gt;二进制数据。用于存储二进制数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Code&lt;/td&gt;
&lt;td&gt;代码类型。用于在文档中存储 JavaScript 代码。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Regular expression&lt;/td&gt;
&lt;td&gt;正则表达式类型。用于存储正则表达式。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;ObjectId&lt;/strong&gt;&lt;/span&gt; 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前 4 个字节表示创建 &lt;strong&gt;unix&lt;/strong&gt;时间戳,格林尼治时间 &lt;strong&gt;UTC&lt;/strong&gt; 时间，比北京时间早了 8 个小时&lt;/li&gt;
&lt;li&gt;接下来的 3 个字节是机器标识码&lt;/li&gt;
&lt;li&gt;紧接的两个字节由进程 id 组成 PID&lt;/li&gt;
&lt;li&gt;最后三个字节是随机数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2013/10/2875754375-5a19268f0fd9b_articlex.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象&lt;/p&gt;
&lt;p&gt;由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;var&lt;span class=&quot;pln&quot;&gt; newObject &lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;ObjectId&lt;span class=&quot;pun&quot;&gt;()&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt; newObject&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;getTimestamp&lt;span class=&quot;pun&quot;&gt;()&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;typ&quot;&gt;ISODate&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;2018-07-05T07:21:10Z&quot;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ObjectId 转为字符串&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt; newObject&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;str
&lt;span class=&quot;lit&quot;&gt;5a1919e63df83ce79df8b38f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;&lt;strong&gt;三 Mongodb&lt;/strong&gt;入门命令&lt;/h2&gt;
&lt;h3&gt;3.1 基本查看命令&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;show dbs 查看当前的数据库
use databaseName 选库
show tables/collections 查看当前库下的collection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;Section0&quot; readability=&quot;12&quot;&gt;
&lt;h3 class=&quot;15&quot;&gt;3.2 库和&lt;strong&gt;集合&lt;/strong&gt;的操作&lt;/h3&gt;
&lt;p&gt;db    查看当前所处的数据库，在mongodb中,库是隐式创建,你可以use 一个不存在的库, 然后在该库下创建collection,即可创建库&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section1&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;db.dropDatabase();    删除database，&lt;span&gt;把当前所用的库给删除了&lt;/span&gt;, &lt;span&gt;即使里面有数据也会删除&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section2&quot; readability=&quot;68&quot;&gt;
&lt;p&gt;db.createCollection(‘collectionName’)，  创建collection，collection也是允许隐式创建的&lt;/p&gt;
&lt;p&gt;db.collectionName.insert(document); 在集合(表)中插入具体数据的时候会自动创建&lt;/p&gt;
&lt;p&gt;db.collectionName.drop() ,   删除collection&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;测试隐式创建&lt;/span&gt;：往不存在的students表中插入数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; show dbs
admin &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.000GB
config &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.000GB
local &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.000GB
&lt;/span&gt;&amp;gt;&lt;span&gt; use admin
 switched to db admin
&lt;/span&gt;&amp;gt; db.students.insert({name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zhangsan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,age:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
WriteResult({ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nInserted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&amp;gt;&lt;span&gt; show tables
students&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除当前库里的students表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; db. students. drop()  &lt;br/&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;四&lt;/span&gt; &lt;strong&gt;Mongodb&lt;/strong&gt;基本增删改查&lt;/h2&gt;
&lt;h3&gt;4.1 增加数据&lt;/h3&gt;
&lt;p&gt;mongodb存储的是文档,文档是json格式的对象,我们向数据库存储数据的时候可以使用insert方法,数据格式要以js对象格式进行存储:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：&lt;span&gt;db.collectionName.insert(document);&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
db.students.insert({name:'zhangsan',age:'20'&lt;span&gt;})   &lt;/span&gt;&lt;span&gt;向当前&lt;/span&gt;students&lt;span&gt;表里插入数据&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以以多种方法对文档进行存储:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.1.2 增加单篇文档 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;span&gt;db.collectionName.insert({title:&quot;nice  day&quot;});&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.1.3 增加单个文档,并且指定_id&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;span&gt;db.collectionName.insert({_id:8,age:78,name:&quot;lisi&quot;});&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;_id 是我们在插入数据的时候,mongodb自动给文档添加的一个属性,如果我们不需要系统分配_id ,可以在添加数据的时候手动设置,覆盖原有_id ,虽然_id 的类型可以自由指定,但是在同一个集合当中必须唯一,如果插入重复的值,系统会抛出异常.&lt;/p&gt;
&lt;p&gt;这个_id 的名称是固定的,它可以是Mongodb支持的任何数据类型,默认是ObjectId,在关系型数据库中,主键通常是数值型的,并且可以设置自增,而Mongodb的主键,原生不支持自增主键.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section3&quot; readability=&quot;31.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;4.1.4 增加多个文档 &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.students.insert( [{time:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;friday&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,value:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},{_id:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,gender:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;QQ&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以以数组的方式,一次性向集合插入多个数据;  同时应该注意的是,由于mongodb采用的是&lt;span&gt;J&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;he&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;,所以我们可以根据js特性,将文档作为值赋给变量然后进行操作:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
j = {name : 'isi'}; &lt;br/&gt;t = {name : 'wangwu’&lt;span&gt;};
db.students.insert([j,t]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.1.5 save和insert的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;save和insert都可以进行数据的插入和增加,但是也有一些异同:&lt;/p&gt;
&lt;p&gt;对于已存在数据&lt;span&gt;{ &lt;/span&gt;_id:1,  &quot;name&quot;:&quot;n1&quot; }，再次进行插入操作时，insert({_id  :  1,  &quot;name&quot;  :&quot;n2&quot;}) 会报主键重复的错误提示 save({  _id:1,  &quot;  name  &quot;:&quot;n2&quot;}) &lt;span&gt;会把&lt;/span&gt;n1&lt;span&gt;修改为&lt;/span&gt;n2&lt;span&gt;。&lt;/span&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section4&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;相同点：&lt;/span&gt;&lt;span&gt;若新增的数据中没有主键时，会增加一条记录。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不同点：&lt;span&gt;主键冲突时&lt;/span&gt;:insert 会报错，save会自增_i d 主键插入&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;4.2 查询操作&lt;/h3&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.2.1 find()&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section5&quot; readability=&quot;40.5&quot;&gt;
&lt;p&gt;无条件的普通查询方式很简单,可以直接使用&lt;/p&gt;
&lt;p&gt;db.collectionName.find(&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;一次可以查出指定集合中的所有数据 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var &lt;/span&gt;i = &lt;span&gt;1&lt;/span&gt;;&lt;span&gt;1&lt;/span&gt;&amp;lt;&lt;span&gt;5&lt;/span&gt;;i++) { db.students.save({x:&lt;span&gt;i&lt;/span&gt;,y:&lt;span&gt;i+1&lt;/span&gt;&lt;span&gt;}) }  
db.students.find();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果出现显示不全的现象,可以使用&quot;it&quot;命令,继续显示下面的数据. 当然,我们还可以按照条件进行查询操作&lt;/p&gt;
&lt;p&gt;语法: db.collection.find(&lt;span&gt;查询表达式&lt;/span&gt;,&lt;span&gt;查询的列&lt;/span&gt;)&lt;span&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例1:  db.students.find({},{gendre:1})&lt;/p&gt;
&lt;p&gt;查询所有文档,的gender&lt;span&gt;属性&lt;/span&gt; (_id属性默认总是查出来)&lt;/p&gt;
&lt;p&gt;例2:  db.students.find({},{gender:1,  _id:0})&lt;/p&gt;
&lt;p&gt;查询所有文档的gender属性,且不查询_id属性&lt;/p&gt;
&lt;p&gt;此处的0表示的是false,不查询   &lt;/p&gt;
&lt;p&gt;例3: db.students.find({gender:’male’},{name:1,_id:0&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section6&quot; readability=&quot;78.5&quot;&gt;
&lt;p&gt;查询所有gender属性值为male的文档中的name属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.2 findOne()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;findOne()和find()函数一样,只是findOne()返回的是查询结果中的第一条数据,或者返回null. &lt;/p&gt;
&lt;h3&gt;4.3 删除操作&lt;/h3&gt;
&lt;p&gt;语法: db.collectionName.remove(&lt;span&gt;查询表达式&lt;/span&gt;,  &lt;span&gt;选项&lt;/span&gt;);&lt;/p&gt;
&lt;p&gt;选项是指 &lt;span&gt;{&lt;/span&gt;justOne:true/false},是否只删一行, 默认为false   &lt;span&gt;注意&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1: 查询表达式依然是个json对象&lt;/p&gt;
&lt;p&gt;2: 查询表达式匹配的行,将被删掉.&lt;/p&gt;
&lt;p&gt;3: 如果查询表达式为空对象{},collections中的所有文档将被删掉. &lt;/p&gt;
&lt;p&gt;例1： db.students.remove({sn:'001'});&lt;/p&gt;
&lt;p&gt;删除stu表中sn属性值为'001'的文档 &lt;/p&gt;
&lt;p&gt;例2：  db.students.remove({gender:'m'},true);&lt;/p&gt;
&lt;p&gt;删除stu表中gender属性为m的文档,只删除1行.&lt;/p&gt;
&lt;h3&gt;4.4 修改操作&lt;/h3&gt;
&lt;p&gt;语法: db.collection.update(&lt;span&gt;查询表达式&lt;/span&gt;,&lt;span&gt;新值&lt;/span&gt;,&lt;span&gt;选项&lt;/span&gt;); &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
*改哪几行? ---&lt;span&gt; 查询表达式
&lt;/span&gt;*改成什么样? --&lt;span&gt; 新值 或 赋值表达式
&lt;/span&gt;*操作选项 -----&lt;span&gt; 可选参数
 upsert:如果要更新的那条记录没有找到，是否插入一条新纪录，默认为false&lt;br/&gt;multi  :是否更新满足条件的多条的记录,默认为false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;multi :是否更新满足条件的多条的记录，false：只更新第一条，true:更新多条，默认为false &lt;/p&gt;
&lt;p&gt;例：db.news.update({name:'QQ'},{name:'MSN'});&lt;/p&gt;
&lt;p&gt;是指选中news表中,name值为QQ的文档,并把其文档值改为{name:&quot;MSN&quot;},&lt;/p&gt;
&lt;p&gt;结果: 文档中的其他列也不见了,改后只有_id和name列了.即是新文档直接覆盖了旧文档,而不是修改.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.4.1 修改操作中的关键字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是想修改文档的某列,可以用$set关键字 &lt;/p&gt;
&lt;p&gt;例：db.collectionName.update(query,{$set:{name:’QQ’}})&lt;/p&gt;
&lt;p&gt;修改时的赋值表达式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$set 修改某列的值&lt;/li&gt;
&lt;li&gt;$unset 删除某个列&lt;/li&gt;
&lt;li&gt;$inc 增长某个列&lt;/li&gt;
&lt;li&gt;$rename 重新命名某列&lt;/li&gt;
&lt;li&gt;$setOnInsert 当upsert为true时,并且发生了insert操作时,可以补充的字段.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;$inc&lt;/strong&gt;实例&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;按照指定的步长增长某个列;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;  db.students.insert({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,size:&lt;span&gt;10&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&amp;gt;&lt;span&gt;  db.students.find()
{  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  ObjectId(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5003b6135af21ff428dafbe6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;10&lt;/span&gt;&lt;span&gt;  }
&lt;/span&gt;&amp;gt;  db.students.update({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$inc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;2&lt;/span&gt;&lt;span&gt;}})
&lt;/span&gt;&amp;gt;&lt;span&gt;  db.stdentsu.find()
{  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  ObjectId(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5003b6135af21ff428dafbe6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;12&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Section7&quot; readability=&quot;64.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;$unset&lt;/strong&gt;实例 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;gt;db.students.find({_id:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;})
{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;3&lt;/span&gt;  ,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;18&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;gt;  db.students.update({_id:&lt;span&gt;3&lt;/span&gt;},{$unset:{age:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}})
WriteResult({  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nMatched&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nUpserted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nModified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  })
&lt;/span&gt;&amp;gt;  db.students.update({_id:&lt;span&gt;3&lt;/span&gt;},{$unset:{age:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}})
WriteResult({  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nMatched&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;1&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nUpserted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nModified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;1&lt;/span&gt;&lt;span&gt;  })
&lt;/span&gt;&amp;gt;  db.students.find({_id:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;})
{  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;3&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;$rename&lt;/strong&gt;实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
-&amp;gt;db.students.insert({name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lisi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,age:&lt;span&gt;12&lt;/span&gt;,sex:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,height:&lt;span&gt;123&lt;/span&gt;,area:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;haidian&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;});
&lt;/span&gt;-&amp;gt;db.students.update({name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lisi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;},{$&lt;span&gt;set&lt;/span&gt;:{area:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;chaoyang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;},$unset:{height:&lt;span&gt;1&lt;/span&gt;},$inc:{age:&lt;span&gt;1&lt;/span&gt;},$rename:{sex:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}});
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.4.2 Option选项的作用&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法： {upsert:true/false,multi:true/false}&lt;/p&gt;
&lt;p&gt;upsert:是指没有匹配的行,则直接插入该行 &lt;/p&gt;
&lt;p&gt;例:db.stu.update({name:'wuyong'},{$set:{name:'junshiwuyong'}},{upsert:true});&lt;/p&gt;
&lt;p&gt;如果有name='wuyong'的文档,将被修改,如果没有,将添加此新文档&lt;/p&gt;
&lt;p&gt;例:db.news.update({_id:99},{x:123,y:234},{upsert:true});&lt;/p&gt;
&lt;p&gt;没有_id=99的文档被修改,因此直接插入该文档&lt;/p&gt;
&lt;p&gt;multi: 是指修改多行(即使查询表达式命中多行,默认也只改1行,如果想改多行,可以用此选项) &lt;/p&gt;
&lt;p&gt;例:db.news.update({age:21},{$set:{age:22}},{multi:true});&lt;/p&gt;
&lt;p&gt;则把news中所有age=21的文档,都修改&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;4.5 &lt;/strong&gt;查询表达式&lt;/h3&gt;
&lt;p&gt;我们无论在修改删除还是查询的过程中,都需要传入查询表达式对目标数据进行查询,表达式有很多种&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:  最简单的查询表达式
{filed:value}  ,是指查询field列的值为value的文档

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;:  $ne：!=&lt;span&gt;
{field:{$ne:value}} db.stu.find({age:{$ne:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;}}) 作用--&lt;span&gt;查age列的值 不等于16的文档

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:$gt:大于
$lt:小于
$gte:大于或等于
$lte:小于或等于

&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;:  $&lt;span&gt;in&lt;/span&gt;&lt;span&gt;：[]
查询某列的值在范围内的文档
db.goods.find({cat_id:{$&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;:[&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;&lt;span&gt;]}}

&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;:  $nin：not  &lt;span&gt;in&lt;/span&gt;&lt;span&gt;
查询某列不在范围内的文档
$nin:[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;:  $exists
语法:  {field:{$exists:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;}}
作用:  查询出含有field字段的文档

&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:用正则表达式查询  以”诺基亚”开头的商品
例:db.goods.find({goods_name:&lt;/span&gt;/诺基亚.*/},{goods_name:&lt;span&gt;1&lt;/span&gt;});
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Section8&quot; readability=&quot;58.5&quot;&gt;
&lt;h2&gt;&lt;span&gt;五&lt;/span&gt; &lt;span&gt;游标操作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;通俗的说,游标不是查询结果,而是查询的返回资源,或者接口，通过这个接口,&lt;span&gt;你可以逐条对数据进行读取；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;声明游标&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  cursor  =  db.collectioName.find(query,projection); &lt;br/&gt;cursor.hasNext()  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断游标是否已经取到尽头  &lt;br/&gt;cursor.next()  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出游标的下1个单元&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用while来循环游标 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;  &lt;span&gt;var&lt;/span&gt;  mycursor  =  db.bar.find({_id:{$lte:&lt;span&gt;5&lt;/span&gt;&lt;span&gt;}})
&lt;/span&gt;&amp;gt;  &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(mycursor.hasNext())  { printjson(mycursor.next());}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;游标还有一个迭代函数,允许我们自定义回调函数来逐个处理每个单元. &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cursor.forEach(回调函数);
&lt;/span&gt;&amp;gt;  &lt;span&gt;var&lt;/span&gt;  gettitle  =&lt;span&gt;  function(obj)  {print(obj.goods_name)}
&lt;/span&gt;&amp;gt;  &lt;span&gt;var&lt;/span&gt;  cursor  =&lt;span&gt;  db.goods.find();
&lt;/span&gt;&amp;gt;  cursor.forEach(gettitle);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;游标在分页中的应用&lt;/p&gt;
&lt;p&gt;比如查到10000行,跳过100页,取10行,一般地,我们假设每页N行, 当前是page页,&lt;span&gt;就需要跳过前&lt;/span&gt; (page-1)*N 行, 再取N行.&lt;/p&gt;
&lt;p&gt;在mongo中,分页是用skip(), limit()函数来实现的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果中,跳过前9995行&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt;  mycursor  =  db.bar.find().skip(&lt;span&gt;9995&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询第901页,每页10条&lt;/span&gt;
则是  &lt;span&gt;var&lt;/span&gt;  mytcursor  =  db.bar.find().skip(&lt;span&gt;9000&lt;/span&gt;).limit(&lt;span&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;六&lt;/span&gt; &lt;strong&gt;group&lt;/strong&gt;分组&lt;/h2&gt;
&lt;p&gt;mongodb支持聚合运算;&lt;/p&gt;
&lt;p&gt;在goods表中插入数据 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.goods.insert([
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;&lt;span&gt;},
])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们所处的是mysql数据库,我们可以这样查询每个类下面的商品平均价格 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt;  avg(price)  &lt;span&gt;from&lt;/span&gt;  goods  group  by  cat_id;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Section9&quot; readability=&quot;54.025362318841&quot;&gt;
&lt;p&gt;但如果在mongodb下,我们如何查询分组内的平均值呢? 我们需要使用mongodb的聚合运算   &lt;a href=&quot;https://docs.mongodb.com/manual/aggregation/%20&quot; target=&quot;_blank&quot;&gt;https://docs.mongodb.com/manual/aggregation/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.goods.aggregate([
{$match:{}},
{$group:{_id:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$cat_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,avg:{$avg:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}}}
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中,$match表示匹配的条件,$group表示分组的条件,$avg表示求平均值. 当然,指令还有很多,我们还可以使用limit,sort等操作 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.goods.aggregate([
{$match:{}},
{$group:{_id:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$cat_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,avg:{$avg:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}}},
{$limit:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;}
]);

db.goods.aggregate([
{$match:{}},
{$sort:{price:&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;}}
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;七&lt;/span&gt; &lt;strong&gt;MapReduce&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 class=&quot;15&quot;&gt;7.1 &lt;strong&gt;MapReduce&lt;/strong&gt;原理&lt;/h3&gt;
&lt;p&gt;随着大数据兴起,MapReduce的概念也越来越火,通常的概念是用于大规模数据集(1TB)的并行运算,实际上就是传统关系型数据库的group概念的延伸.&lt;/p&gt;
&lt;p&gt;MapReduce之所以能够流行,是因为数据的大,当数据过大的时候,单个服务器无法承载,facebook,微软等等的数据中心都是分布在世界各地的,&lt;span&gt;我们所需&lt;/span&gt;        要的数据很可能分布在不同的服务器甚至世界各地.在这时候,我们就无法使用group操作了.&lt;/p&gt;
&lt;p&gt;MapReduce通俗的讲,最大的优点就是可以支持分布式的group &lt;/p&gt;
&lt;p&gt;而MapReduce的操作即分为map和reduce两步;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
map ---&amp;gt;&lt;span&gt; 映 射
reduce &lt;/span&gt;---&amp;gt; 减少,规约,回归
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;15&quot;&gt;7.2 &lt;strong&gt;MapReduce&lt;/strong&gt;统计价格&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按照cat_id  分配  price,把price数据映射到一个数组上 var  map  =  function(){&lt;/span&gt;
emit(&lt;span&gt;this&lt;/span&gt;.cat_id  ,  &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.price)
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将映射好的数组进行操作&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt;  reduce  =  function(cat_id,number){ &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  Array.avg(number)
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将统计的数据映射到res表当中db.goods.mapReduce(map,reduce,{out:'res'})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们使用mapReduce功能实现地震数据的统计&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;7.3 下载并导入地震信息&lt;/h3&gt;
&lt;p&gt;在国家地震科学数据共享中心下载过去一年的地震数据  &lt;a href=&quot;http://data.earthquake.cn/sjfw/index.html?PAGEID=datasourcelist&amp;amp;dt=40280d0453e414e40153e44861dd0003&quot; target=&quot;_blank&quot;&gt;http://data.earthquake.cn/sjfw/index.html?PAGEID=datasourcelist&amp;amp;dt=40280d0453e414e40153e44861dd0003&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将数据保存为csv格式,导入到mongodb数据库中，使用mongoimport&lt;/p&gt;
&lt;p&gt;-d : 指明导入文件存放在哪个数据库&lt;/p&gt;
&lt;p&gt;-c : 指明导入文件存放在哪个集合&lt;/p&gt;
&lt;p&gt;--type：指明要导入的文件格式。&lt;/p&gt;
&lt;p&gt;--headerline：指明不导入第一行，csv格式的文件第一行为列名。&lt;/p&gt;
&lt;p&gt;--file：指明要导入的文件路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./bin/mongoimport  -d  test  -c  dz  --type  csv  --file  /usr/local/src/dz.csv  --headerline
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7.4 按照经纬度统计数据&lt;/h3&gt;
&lt;p&gt;我们规约的时候按照经纬度的5*5方格进行分组,如果在此方格内存在地震,则地震+1 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  map  =&lt;span&gt;  function(){
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  jd  =  parseInt(&lt;span&gt;this&lt;/span&gt;.jd/&lt;span&gt;5&lt;/span&gt;)*&lt;span&gt;5&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt;  wd  =  parseInt(&lt;span&gt;this&lt;/span&gt;.wd/&lt;span&gt;5&lt;/span&gt;)*&lt;span&gt;5&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt;  area  =  jd  +  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  +&lt;span&gt;  wd;
emit(area,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果该区域有地震,则统计为1&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  reduce  =  function(area,nums){ &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  Array.sum(nums);
}
db.dz.mapReduce(map,reduce,{&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dzrs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功获取区间范围内的地震次数,此时我们要将数据导出为json,做成热力图;&lt;/p&gt;
&lt;h3&gt;7.5 热力图&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;使&lt;/span&gt;&lt;span&gt;用&lt;/span&gt;&lt;span&gt;百&lt;/span&gt;&lt;span&gt;度&lt;/span&gt;&lt;span&gt;地&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;开&lt;/span&gt;&lt;span&gt;放&lt;/span&gt;&lt;span&gt;平&lt;/span&gt;&lt;span&gt;台&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;热&lt;/span&gt;&lt;span&gt;力&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;api   &lt;a href=&quot;http://lbsyun.baidu.com/index.php?title=jspopular&quot; target=&quot;_blank&quot;&gt;http://lbsyun.baidu.com/index.php?title=jspopular&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;填入密钥,生成热力图&lt;/p&gt;
&lt;h3&gt;7.6 展示地震数据&lt;/h3&gt;
&lt;p&gt;转化地震数据为规定的json格式 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  course  =  db.dzrs.find(); &lt;br/&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;  row; &lt;br/&gt;course.forEach(function(obj){
     row  &lt;/span&gt;=  obj._id.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;br/&gt;db.reli.insert({lng:parseInt(row[&lt;span&gt;1&lt;/span&gt;])+&lt;span&gt;2.5&lt;/span&gt;,lat:parseInt(row[&lt;span&gt;0&lt;/span&gt;])+&lt;span&gt;2.5&lt;/span&gt;&lt;span&gt;,count:obj.value})
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导出json &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./bin/mongoexport  -d  test  -c  reli  -o  /usr/local/src/reli.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将json数据放入热力图当中并配置热力图相关选项.&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:37:00 +0000</pubDate>
<dc:creator>FrankDeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/frankdeng/p/9158075.html</dc:identifier>
</item>
<item>
<title>.Net Core开发日志——Peachpie - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9270680.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9270680.html</guid>
<description>&lt;p&gt;.Net Core的生态圈随着开源社区的力量不断注入至其中，正在变得越来越强盛，并且不时得就出现些有意思的项目，比如Peachpie，它使得PHP的代码迁移到.Net Core项目变得可能。&lt;/p&gt;
&lt;p&gt;从创建简单的入门程序开始可以更容易地体会其特性。&lt;/p&gt;
&lt;p&gt;首先安装Peachpie的模板：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;dotnet new -i Peachpie.Templates::*&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着创建项目：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;dotnet new web -lang PHP -o helloPHP&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后切换目录至Server文件夹运行程序：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;cd Server
dotnet run&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后通过浏览器访问http://localhost:5004/：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180705214519038-296612311.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Peachpie的运行机制很简单，将PHP文件编译成.Net平台的dll文件，这样就可以如同普通的.Net代码库一般被其它程序调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180705215119925-53573476.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;它包含三个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编译器(peach.exe或者Peachpie.NET.Sdk)，将PHP文件编译成.Net程序集&lt;/li&gt;
&lt;li&gt;运行时(Peachpie.Runtime.dll)，提供程序运行时所需的功能&lt;/li&gt;
&lt;li&gt;代码库(Peachpie.Library.dll)，包含PHP的函数，类及其它的实现&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;再回到开始的入门程序代码探究一番，可以发现关键点在于Website目录下的Website.msbuildproj文件中：&lt;/p&gt;
&lt;pre class=&quot;msbuild&quot;&gt;
&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Library&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;AssemblyName&amp;gt;helloPHP&amp;lt;/AssemblyName&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&quot;**/*.php&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;DotNetCliToolReference Include=&quot;Peachpie.Compiler.Tools&quot; Version=&quot;0.9.0-*&quot; /&amp;gt;
    &amp;lt;PackageReference Include=&quot;Peachpie.NET.Sdk&quot; Version=&quot;0.9.0-*&quot; PrivateAssets=&quot;Build&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Peachpie.Compiler.Tools与Peachpie.NET.Sdk两者的作用下，包含index.php文件在内的所有PHP文件都最终会被编译成一个dll文件。&lt;/p&gt;
&lt;p&gt;用使用这个dll文件也很简单，在Startup类的Configure方法里这样调用一下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;app.UsePhp(new PhpRequestOptions(scriptAssemblyName: &quot;helloPHP&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行在ASP.Net中的PHP站点便诞生了。&lt;/p&gt;
&lt;p&gt;Peachpie项目整体还在开发阶段，但不影响其已经能完成些惊人的工作，例如，其&lt;a href=&quot;https://www.peachpie.io/&quot;&gt;官方网站&lt;/a&gt;虽是构建在WordPress上，但已经被Peachpie编译成可以在ASP.NET中运行。仅凭以下的图你一定不会想到这个网站是PHP写成的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180705221720714-198852985.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在它的&lt;a href=&quot;https://www.peachpie.io/2018/03/peachpie-on-peachpie.html&quot;&gt;博客&lt;/a&gt;中可以看到关于此事的更详细信息。&lt;/p&gt;
&lt;p&gt;如果你对PHP代码迁移到.Net平台这件事感兴趣的话，可以访问其在Github上的&lt;a href=&quot;https://github.com/peachpiecompiler/peachpie&quot;&gt;仓库&lt;/a&gt;，若是能为它添砖加瓦的话，那是再好不过了。&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:27:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9270680.html</dc:identifier>
</item>
<item>
<title>常见的web攻击手段 - 智享</title>
<link>http://www.cnblogs.com/zhixiang-org-cn/p/9270831.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhixiang-org-cn/p/9270831.html</guid>
<description>

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;当用户在表达输入一段数据后，提交给服务端进行持久化。如果此用户输入的是一段脚本语言，而服务端&lt;/p&gt;
&lt;p&gt;用户输入的数据没有经过转码、校验等就存入了数据库，在其他页面需要展示此数据时，就会执行此用户输入的语言。简单来说，JS的强大不用我来解释吧&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;
&lt;p&gt;对用户输入的信息进行转义，例如&amp;lt;&amp;gt;'等等特殊字符。当然，其实很多前端框架也支持这么做，快查一查你使用的框架支持么。&lt;/p&gt;



&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;如果A银行存在CRSF漏洞，有用户在登陆完A银行后没有退出，A银行的cookie信息保存在浏览器。然后呢，用户不小心进入了恶意网站，&lt;/p&gt;
&lt;p&gt;此网站识别出了用户客户端存在A银行的信息，那么恶意网站就可以根据此cookie去请求A银行的转账接口，那么A银行会误认为是用户进行操作从而使恶意网站得逞。&lt;/p&gt;

&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;
&lt;p&gt;假如我们的网站是A银行，为了防止用户信息泄露，我们应该做这三件事：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将cookie设置为HttpOnly，让恶意网站无法通过脚本获取到cookie&lt;/li&gt;
&lt;li&gt;所有增删改以及需要验证权限的请求都应该携带token&lt;/li&gt;
&lt;li&gt;Http头中有一个Referer属性，此属性表示请求Url地址，验证每一个请求的Referer是不是由自己系统发起的&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;用户输入的信息带有 delete 、drop等危害性十足的sql，就像用户登录时输入了用户名 “aaa;drop table user”,那么在我们没有任何防御措施的情况下就会变为“select * from user where username='aaa';drop table user”。然后呢，表就没了，你说尴不尴尬？&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;

&lt;ol&gt;&lt;li&gt;使用原生jdbc时要使用PreparedStatement 而不要使用Statement，&lt;/li&gt;
&lt;li&gt;使用orm框架，像MyBatis、Hibernate等框架都对sql注入进行了很好的预防&lt;/li&gt;
&lt;li&gt;密码任何时候都不要使用明文存放，避免攻击者直接获取用户信息&lt;/li&gt;
&lt;li&gt;后台发生错误时不要直接返回异常信息，避免对服务器信息的泄露。建议对异常进行封装，返回可控的异常信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;没有对用户上传的文件做校验，恶意用户长时间上传超大文件占用系统资源，上传可执行脚本获取获取服务器信息&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;

&lt;ol&gt;&lt;li&gt;对用户上传做限流，每个用户每天最多上传多少内容。&lt;/li&gt;
&lt;li&gt;对文件类型进行判断，不能通过后缀名判断，而要通过判断魔数（文件起始的几个字节）来判断，很多文件类型的魔数是不变的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;1.攻击者提前控制大量计算机，并在某一时刻指挥大量计算机同时对某一服务器进行访问来达到瘫痪主机的目的。&lt;/p&gt;
&lt;p&gt;2.相信大家都知道TCP三次握手的机制，（如不了解请参考文章底部补充）攻击者利用此机制对服务器返回的ACK确认包不回应，这样服务器就会存在大量的等待列表，不断重试，等待队列满了以后不再接受TCP连接，从而阻挡了正常用户的使用&lt;/p&gt;
&lt;p&gt;3.攻击者向DNS服务器发送海量的域名解析请求，DNS首先查缓存，如果缓存不存在的话会去递归调用上级服务器查询，直到查询到全球13台根服务器为止，当解析请求过多时正常用户访问就会出现DNS解析超时问题&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;
&lt;p&gt;使用缓存，当缓存中存在时就直接取出，不要频繁的连接数据库。&lt;/p&gt;
&lt;p&gt;缩短 SYN Timeout时间，即缩短从接受到SYN报文到确定这个报文无效并丢弃该连接的时间。&lt;/p&gt;
&lt;p&gt;限制源ip每秒发起的DNS请求等&lt;/p&gt;



&lt;p&gt;首先，请求端（客户端）发送一个包含SYN标志的TCP报文，SYN即同步（Synchronize），同步报文会指明客户端使用的端口以及TCP连接的初始序号；&lt;/p&gt;
&lt;p&gt;第二步，服务器在收到客户端的SYN报文，将返回一个SYN+ACK的报文，表示客户端的请求被接受，同时TCP序号被加一，ACK即确认（Acknowledgment）。&lt;/p&gt;
&lt;p&gt;第三步，客户端也返回一个确认报文ACK给服务器端，同样TCP序列号被加一，到此一个TCP连接完成。&lt;/p&gt;



&lt;p&gt;写这篇文章的目的呢，其实不是说让大家通过这篇文章成为一个安全高手或者怎么的，只是想让大家了解一下这些常见的攻击手段。当你知道了这些攻击手段后看一下你手中的项目是否需要预防一下，毕竟未雨绸缪总是比临阵磨枪好的多，不是吗？&lt;/p&gt;


&lt;p&gt;本文出自&lt;a href=&quot;https://zhixiang.org.cn/#/blog/read/132e85fd-c3bf-4e78-acfd-0c73523f95a3&quot; target=&quot;_blank&quot;&gt;https://zhixiang.org.cn/#/blog/read/132e85fd-c3bf-4e78-acfd-0c73523f95a3&lt;/a&gt;,转载请保留。&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:21:00 +0000</pubDate>
<dc:creator>智享</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhixiang-org-cn/p/9270831.html</dc:identifier>
</item>
<item>
<title>API网关模式 - .NET西安社区</title>
<link>http://www.cnblogs.com/xiandnc/p/9270365.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiandnc/p/9270365.html</guid>
<description>&lt;h2&gt;什么是网关&lt;/h2&gt;
&lt;p&gt;    网关一词来源于计算机网络中的定义，网关(Gateway)又称网间连接器、协议转换器。网关的准确定义是： 两个计算机程序或系统之间的连接，网关作为两个程序之间的门户，允许它们通过不同计算机之间的协议通信来共享信息。顾名思义API网关就是API之间相互调用的关卡和屏障。&lt;/p&gt;
&lt;h2&gt;API之间为什么需要网关&lt;/h2&gt;
&lt;p&gt;    试想一下我们在实现一个非常庞大的业务系统，分为不同的业务domain和子系统，各个domain和子系统提供处理业务的API，不同系统之间以API的方式进行数据交互。通常情况下我们可能会将所有实现业务功能的API集成到一起（API Center）给不同的Channel的Portal提供数据处理的能力。当有一天我们的系统需要与第三方发生交互，我们既需要暴露给外部系统调用的公开API，同时也需要调用外部的API实现自身的业务需求。此时我们将会考虑很多的问题，比如：服务之间访问的授权和认证，安全和性能的监控，缓存和日志的处理，超时的Retry，负载和熔断的处理，查询请求的聚合等等一系列的问题。此时你需要一个可以集中处理所有可能在服务调用之间需要处理的一切事情，就像是小区的物业和安保一样，需要对小区所有的业主处理职责范围内的一切事情。&lt;/p&gt;
&lt;p&gt;    这是通常情况下API网关需要帮我们处理的事情，随着系统业务的不断复杂化，我们的系统越越庞大，API的交互越来越错综复杂。此时我们可能会考虑将这个庞大的系统拆分成多个细小的domain，分别提供各自domain的API。这便是时下最流行的话题：&lt;a href=&quot;https://www.martinfowler.com/articles/microservices.html&quot; target=&quot;_blank&quot;&gt;微服务&lt;/a&gt;。当我们的系统演进到微服务的架构时，API网关将是系统必不可少的关键部分。在微服务体系结构中，客户端应用程序通常需要使用多个微服务的功能。客户端如果直接消费某服务，那通常情况下将需要处理和协调用多个微服务endpoint。当应用程序引入新的微服务或更新现有微服务时会发生什么?试想一下如果你的应用程序有许多微服务，那么处理和协调来自客户端如此多的endpoint的请求，那对系统来说是一场噩梦，而且由于客户端应用程序将与这些endpoint产生耦合，这将会使我们的系统边的混乱不堪。&lt;/p&gt;
&lt;p&gt;    因此，我们需要一个中间层或间接层(Gateway)来处理不同client对API的请求，这将会使得我们的应用程序处理起来非常方便。如果没有API网关，客户端应用程序必须直接向微服务发送请求，这就会产生很多混乱的问题，比如：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;耦合:&lt;/span&gt;&lt;/strong&gt; &lt;/span&gt;如果没有API网关，客户端的应用程序将与内部微服务间耦合。客户端序需要知道实现业务需求的API分散在服务中的哪些部分，当我们开发和重构内部服务时，将会影响到客户端应用程序，并且很难维护，因为客户端应用程序需要跟踪多个服务的endpoint&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;多次请求:&lt;/span&gt;&lt;/strong&gt;客户端应用程序中的一个页面可能需要多次调用多个服务来完成某个功能，这可能导致客户端和服务器之间的多次往返请求，增加了显著的延迟。我们知道在中间级别处理的聚合可以提高客户端应用程序的性能和用户体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;安全问题&lt;/span&gt;&lt;/strong&gt;:如果没有网关，所有的服务都必须公开给“外部世界”，这使得攻击面比隐藏内部服务更大，而这些服务不是客户端应用程序直接使用的。攻击面越小应用程序就越安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;横切关注点:&lt;/span&gt;&lt;/strong&gt;每个公开发布的服务都必须处理诸如授权、SSL等问题。在许多情况下这些关注点可以在一个层中处理，这样内部服务就可以简化，这让我想起了&lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot; target=&quot;_blank&quot;&gt;面向切面的编程（AOP）&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;什么是网关模式&lt;/h2&gt;
&lt;p&gt;    当我们在使用多个客户端应用程序设计和构建大型或复杂的基于微服务的应用程序时，可以考虑使用API网关，这是为某些微服务组提供单一入口点的服务，它类似于面向对象设计的Facade（外观类）模式，但在微服务中它是系统的一部分。API网关模式的一个变体也称为“Backend for front-end”(BFF)，因为你可能会根据每个客户端应用程序的不同需求创建多个API网关。因此API网关位于客户端应用程序和微服务之间，它充当反向代理将请求从客户端路由到服务，它还可以提供额外的横切特性，如身份验证、SSL终止和缓存。&lt;/p&gt;
&lt;p&gt;下面的图显示了自定义API网关如何适合于基于微服务的体系结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1413706/201807/1413706-20180705212033912-631410600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在上面的示例中，API网关将作为自定义Web API或ASP.NET WebHost服务的一个容器运行&lt;/p&gt;
&lt;p&gt;    在该图中需要强调的是我们将使用一个面向多个不同客户端的自定义API网关服务。这可能是一个重要的风险，因为你的API网关服务将根据客户端需求的不断增长和发展，最终由于这些不同的需求，它将变得臃肿不堪，实际上它可能非常类似于单片应用程序或单片服务。这就是为什么我们非常推荐将API网关拆分为多个服务或多个更小的API网关。&lt;/p&gt;
&lt;p&gt;    在使用API网关模式时我们也要非常小心，通常使用单个API网关聚合应用程序的所有内部微服务不是一个好的实践，因为一旦这样做了它就充当一个整体聚合器或协调器并通过耦合所有微服务来违反微服务自治。因此&lt;strong&gt;&lt;span&gt;API网关应该基于业务边界和客户端应用程序进行隔离，而不是作为所有内部微服务的单一聚合器&lt;/span&gt;&lt;/strong&gt;。当把API网关层分解为多个API网关时, 如果你的应用程序有多个客户端, 这可以是一个主要的枢纽来识别多个API的网关类型，这样你就可以有不同的外观类来应对每个客户端的需求。这是我们称之为“Backend for front-end”的模式(BFF)，其中每个API网关可以为每个客户端提供不同的API，甚至可能基于客户端的特定需求实现特定的适配器代码，该代码在下面调用多个内部微服务，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1413706/201807/1413706-20180705213314451-1867486404.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图展示了一个带有多个细粒度API网关的简化体系结构，在这种情况下识别每个API GateWay的边界纯粹是基于BFF的模式，因此只是基于每个客户端提供各自所需的API，但在较大的应用程序也应该更进一步，以创建基于业务边界的网关作为第二设计衡量因素。&lt;/p&gt;
&lt;h2&gt;API网关模式中的主要特性 &lt;/h2&gt;
&lt;p&gt;  API网关可以根据产品的不同提供多种特性，它可能提供更丰富或更简单的特性，但是对于任何API网关来说，最重要和基本的特性是以下设计方式：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;反向代理或网关路由：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;API网关提供反向代理，将请求(通常是Http请求)重新定向或路由到内部微服务的端点。网关为客户端应用程序提供一个endpoint或URL，然后在内部将请求映射到一组内部微服务。这个路由特性有助于从微服务的方式来解耦客户端，而且也很方便在单一API和客户端之间实现网关的控制，这样的话你可以添加新的API作为新的microservices同时仍然使用遗留单一的API，直到它在未来被分成许多microservices。因为API的网关的存在，客户端应用程序不会注意到所使用的API实现为内部microservices或单一的API，当在演进和和重构我们的单一API到 microservices的过程中因为有了API网关路由的存在，才不会带来Client请求的URI的变化。想了解更多网关路由的东西请&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-routing&quot; target=&quot;_blank&quot;&gt;戳这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;请求聚合：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;作为网关模式的一部分，你可以将针对多个内部微服务的多个客户端请求(通常是Http请求)聚合到单个客户端请求中。当客户端页面需要调用来自多个微服务的数据时，这种模式特别方便。使用这种方法客户端将发送一个请求到API网关，然后网关将负责发送多个请求来获取内部microservices然后聚合结果再发送回客户端。这种设计模式的主要优点和目标是减少客户端应用程序和后端API之间的隔阂，对于微服务所在的数据中心之外的远程应用程序来说这一点尤为重要，比如移动应用程序或来自客户端远程浏览器中的Javascript的SPA应用程序的请求。对于在服务器环境中执行请求的常规web应用程序(如ASP)，这种模式并不重要，因为延迟比远程客户机应用程序要小得多。是否能够执行此聚合取决于你使用的API网关产品，然而在许多情况下，在API网关的范围内创建聚合微服务将会更加的灵活，所以你也可以在代码中定义聚合(即c#代码)。想了解更多请求聚合的东西请&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation&quot; target=&quot;_blank&quot;&gt;戳这里。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;横切关注点或网关卸载：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;根据每个API网关产品提供的特性，你可以将功能从单个微服务转移到网关，通过将横切关注点合并到一层来简化每个微服务的实现。这对于可以在每个内部微服务(如以下功能)中正确实现的复杂的特殊功能来说特别方便。&lt;/p&gt;
&lt;p&gt;身份验证和授权&lt;br/&gt;服务发现集成&lt;br/&gt;响应缓存&lt;br/&gt;重试策略，断路器和QoS。&lt;br/&gt;速度限制和节流&lt;br/&gt;负载平衡&lt;br/&gt;日志记录、跟踪、相关性&lt;br/&gt;头文件、查询字符串和声明转换&lt;br/&gt;IP白名单&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;根据每个实现API网关产品可以提供更多的横切关注点，但这些都是最常见的特性。例如Azure API管理提供了这些特性中的大部分，以及许多对商业API非常有用的高级特性。但是对于更简单的方法，像Ocelot这样的轻量级API网关是相当灵活的，因为你可以将它部署到你所选择的环境和你的微服务。有关网关卸载模式的更多信息请&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-offloading&quot; target=&quot;_blank&quot;&gt;戳这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt; 本篇文章主要是介绍了API的网关模式的特性，文章是来自微软官方博客并加入了自己的一点理解。译文来自：&lt;a href=&quot;https://blogs.msdn.microsoft.com/cesardelatorre/2018/05/15/designing-and-implementing-api-gateways-with-ocelot-in-a-microservices-and-container-based-architecture/&quot; target=&quot;_blank&quot;&gt;https://blogs.msdn.microsoft.com/cesardelatorre/2018/05/15/designing-and-implementing-api-gateways-with-ocelot-in-a-microservices-and-container-based-architecture/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;API Gateway&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://microservices.io/patterns/apigateway.html&quot;&gt;http://microservices.io/patterns/apigateway.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/microservices/gateway&quot;&gt;https://docs.microsoft.com/en-us/azure/architecture/microservices/gateway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aggregation and composition pattern&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://microservices.io/patterns/data/api-composition.html&quot;&gt;http://microservices.io/patterns/data/api-composition.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:20:00 +0000</pubDate>
<dc:creator>.NET西安社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiandnc/p/9270365.html</dc:identifier>
</item>
<item>
<title>JS中some()和every()和join()和concat()和pop(),push(),shift(),unshfit()和map()和filter() - saucxs</title>
<link>http://www.cnblogs.com/chengxs/p/9256570.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengxs/p/9256570.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、Array&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、some()和every()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;some()&lt;/strong&gt;是对数组中每一项运行指定函数，如果该函数对&lt;strong&gt;任一项返回true&lt;/strong&gt;，则返回true。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;every()&lt;/strong&gt;是对数组中的每一项运行给定函数，如果该函数对&lt;strong&gt;每一项返回true&lt;/strong&gt;,则返回true。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; array = [1,3,5,7,9,11,13,15,17&lt;span&gt;]
undefined
array.some(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(item,index){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; item&amp;gt;9&lt;span&gt;
})
&lt;/span&gt;&lt;span&gt;//true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回 true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; array = [1,3,5,7,9,11,13,15,17&lt;span&gt;]
undefined
array.every(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(item,index){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; item&amp;gt;9&lt;span&gt;
})
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回 false&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、join()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;join() 方法用于把数组中的所有元素放入一个字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; arr =[4,5,34,3453,3453,33,&quot;哈哈哈哈&quot;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 = arr.join(&quot;&quot;&lt;span&gt;);
console.log(arr2);
console.log(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(arr2)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;
console.log(&lt;span&gt;typeof&lt;/span&gt;(arr));   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;
&lt;span&gt;//45343453345333哈哈哈哈
&lt;/span&gt;&lt;span&gt;//string
&lt;/span&gt;//object
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 输出：&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;//45343453345333哈哈哈哈
&lt;span&gt;//string
//object&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3、concat()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接2个以及更多的数组，返回一个新数组。&lt;/strong&gt;该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; arr = &lt;span&gt;new&lt;/span&gt; Array(3&lt;span&gt;)
arr[&lt;/span&gt;0] = &quot;George&quot;&lt;span&gt;
arr[&lt;/span&gt;1] = &quot;John&quot;&lt;span&gt;
arr[&lt;/span&gt;2] = &quot;Thomas&quot;
 
&lt;span&gt;var&lt;/span&gt; arr2 = &lt;span&gt;new&lt;/span&gt; Array(3&lt;span&gt;)
arr2[&lt;/span&gt;0] = &quot;James&quot;&lt;span&gt;
arr2[&lt;/span&gt;1] = &quot;Adrew&quot;

&lt;span&gt;var&lt;/span&gt; array3 =&lt;span&gt; arr.concat(arr2);
console.log(array3);
console.log(arr);
console.log(arr2);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;(6) [&quot;George&quot;, &quot;John&quot;, &quot;Thomas&quot;, &quot;James&quot;, &quot;Adrew&quot;, empty]&lt;br/&gt;(3) [&quot;George&quot;, &quot;John&quot;, &quot;Thomas&quot;]&lt;br/&gt;(3) [&quot;James&quot;, &quot;Adrew&quot;, empty]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、pop()和push()和shift()和unshift()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;会改变数组的本身的长度及内容。&lt;/p&gt;
&lt;p&gt;不同的是&lt;strong&gt; push()、pop()&lt;/strong&gt; 是从数组的&lt;strong&gt;尾部进行增减&lt;/strong&gt;，&lt;strong&gt;unshift()、shift()&lt;/strong&gt; 是从数组的&lt;strong&gt;头部进行增减&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(1)push()是对尾部添加若干元素，unshift()是对头部添加若干元素，返回数组新长度&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; arr = [1, 2&lt;span&gt;];
arr.push(&lt;/span&gt;3,4&lt;span&gt;);
console.log(arr);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4]&lt;/span&gt;
&lt;span&gt;
arr.unshift(&lt;/span&gt;0,0.5&lt;span&gt;);  
console.log(arr);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[0,0.5,1,2,3,4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2)pop()从数组的尾部&lt;strong&gt;&lt;em&gt;删除1个元素(删且只删除1个)&lt;/em&gt;&lt;/strong&gt;，并返回 &lt;strong&gt;被删除的元素&lt;/strong&gt;；空数组是继续删除，不报错，但返回undefined；而shift()是对头部删除1个元素（只删除1个）。。。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接上面数组arr&lt;/span&gt;
arr.pop()   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回4&lt;/span&gt;
console.log(arr);  &lt;span&gt;//&lt;/span&gt;&lt;span readability=&quot;5&quot;&gt;[0, 0.5, 1, 2, 3]&lt;p&gt;arr.shift()  //返回0&lt;br/&gt;console.log(arr)    //[0.5,1,2,3]&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5、map()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt;“映射”，也就是原数组被“映射”成对应新数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; data = [1, 2, 3, 4&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; array = data.map(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (item) {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; item *&lt;span&gt; item;
});&lt;br/&gt;console.log(array)  //[1,4,9,16]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：[1,4,9,16]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; users =&lt;span&gt; [
  {name: &lt;/span&gt;&quot;张含韵&quot;, &quot;email&quot;: &quot;zhang@email.com&quot;,&quot;age&quot;:&quot;18&quot;&lt;span&gt;},
  {name: &lt;/span&gt;&quot;江一燕&quot;,   &quot;email&quot;: &quot;jiang@email.com&quot;,&quot;age&quot;:&quot;34&quot;&lt;span&gt;},
  {name: &lt;/span&gt;&quot;李小璐&quot;,  &quot;email&quot;: &quot;li@email.com&quot;,&quot;age&quot;:&quot;28&quot;&lt;span&gt;}
];

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; emailsAge = users.map(&lt;span&gt;function&lt;/span&gt; (item) { &lt;span&gt;return&lt;/span&gt; {email:item.email,age:item.age}});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;object-properties-section-separator&quot;&gt;&lt;span class=&quot;object-value-object value&quot;&gt;&lt;span class=&quot;object-properties-preview&quot;&gt;[{&lt;span class=&quot;name&quot;&gt;email: &lt;span class=&quot;object-value-string&quot;&gt;&quot;zhang@email.com&quot;, &lt;span class=&quot;name&quot;&gt;age: &lt;span class=&quot;object-value-string&quot;&gt;&quot;18&quot;},&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;object-properties-section-separator&quot;&gt;&lt;span class=&quot;object-value-object value&quot;&gt;&lt;span class=&quot;object-properties-preview&quot;&gt;{&lt;span class=&quot;name&quot;&gt;email: &lt;span class=&quot;object-value-string&quot;&gt;&quot;jiang@email.com&quot;, &lt;span class=&quot;name&quot;&gt;age: &lt;span class=&quot;object-value-string&quot;&gt;&quot;34&quot;},&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;object-properties-section-separator&quot;&gt;&lt;span class=&quot;object-value-object value&quot;&gt;&lt;span class=&quot;object-properties-preview&quot;&gt;{&lt;span class=&quot;name&quot;&gt;email: &lt;span class=&quot;object-value-string&quot;&gt;&quot;li@email.com&quot;, &lt;span class=&quot;name&quot;&gt;age: &lt;span class=&quot;object-value-string&quot;&gt;&quot;28&quot;}]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;object-properties-section-separator&quot;&gt;&lt;span class=&quot;object-value-object value&quot;&gt;&lt;span class=&quot;object-properties-preview&quot;&gt;&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;object-value-string&quot;&gt;&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;object-value-string&quot;&gt;6、filter()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
filter()方法用于把&lt;code&gt;Array&lt;/code&gt;的某些元素过滤掉，然后返回剩下的元素，并创建一个包含所有通过测试的元素的新数组。
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; isBigEnough(element) {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; element &amp;gt;= 10&lt;span&gt;;
 }
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; filtered = [12, 5, 8, 130, 44&lt;span&gt;].filter(isBigEnough); 
console.log(filtered);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[ 12, 130, 44 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：[12,130,44]&lt;/p&gt;
&lt;p&gt;功能(1)：一个&lt;code&gt;Array&lt;/code&gt;中，删掉偶数，只保留奇数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; arr = [1, 2, 4, 5, 6, 9, 10, 15&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num = arr.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (x) {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x % 2 !== 0&lt;span&gt;;
});&lt;br/&gt;console.log(num)  //[1,5,9,15]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;功能(2):把&lt;code&gt;Array&lt;/code&gt;中的空字符串删掉&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; arr = ['A', '', 'B', &lt;span&gt;null&lt;/span&gt;, undefined, 'C', '  '&lt;span&gt;];
 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; string = arr.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (s) {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; s &amp;amp;&amp;amp; s.trim(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注意：IE9以下的版本没有trim()方法&lt;/span&gt;
&lt;span&gt; });
 console.log(string); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ['A', 'B', 'C']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;功能(3):可以巧妙地去除&lt;code&gt;Array&lt;/code&gt;的重复元素，&lt;/p&gt;
&lt;p&gt;注意：去除重复元素依靠的是&lt;code&gt;indexOf&lt;/code&gt;总是返回第一个元素的位置，后续的重复元素位置与&lt;code&gt;indexOf&lt;/code&gt;返回的位置不相等，因此被&lt;code&gt;filter&lt;/code&gt;滤掉了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  r, arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'&lt;span&gt;];
r &lt;/span&gt;= arr.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (element, index, self) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.indexOf(element) ===&lt;span&gt; index;
});
console.log(r.toString()); //apple,strawberry,banana,pear,orange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 05 Jul 2018 14:08:00 +0000</pubDate>
<dc:creator>saucxs</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengxs/p/9256570.html</dc:identifier>
</item>
<item>
<title>基于傅里叶变换的音频重采样算法 (附完整c代码) - cpuimage</title>
<link>http://www.cnblogs.com/cpuimage/p/9270739.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cpuimage/p/9270739.html</guid>
<description>&lt;p&gt;前面有提到音频采样算法：&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/cpuimage/p/8886729.html&quot;&gt;WebRTC 音频采样算法 附完整C++示例代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl04_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/cpuimage/p/8654297.html&quot;&gt;简洁明了的插值音频重采样算法例子 (附完整C代码)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;近段时间有不少朋友给我写过邮件，说了一些他们使用的情况和问题。&lt;/p&gt;
&lt;p&gt;坦白讲，我精力有限，但一般都会抽空回复一下。&lt;/p&gt;
&lt;p&gt;大多数情况，阅读一下代码就能解决的问题，&lt;/p&gt;
&lt;p&gt;也是要尝试一下的。&lt;/p&gt;
&lt;p&gt;没准，你就解决了呢？&lt;/p&gt;
&lt;p&gt;WebRtc的采样算法本身就考虑到它的自身应用场景，&lt;/p&gt;
&lt;p&gt;所以它会有一些局限性，例如不支持任意采样率等等。&lt;/p&gt;
&lt;p&gt;而简洁插值的这个算法，&lt;/p&gt;
&lt;p&gt;我个人也一直在使用，因为简洁明了，简单粗暴。&lt;/p&gt;
&lt;p&gt;我自然也就没有进一步去细究采样算法，&lt;/p&gt;
&lt;p&gt;当然网上还有不少开源的采样算法也是极其不错的。&lt;/p&gt;
&lt;p&gt;一直也想抽时间再做一个兼顾简洁和质量的算法出来，不了了之。&lt;/p&gt;
&lt;p&gt;最近一直在死磕傅里叶变换，网上的资源看了一箩筐。&lt;/p&gt;
&lt;p&gt;徘徊到最后，毫无疑问FFTW3必须是你的首选，&lt;/p&gt;
&lt;p&gt;从岁数性能以及使用的概率来说，当之无愧的王者。&lt;/p&gt;
&lt;p&gt;当然也顺带整理一下，其他的一些FFT实现，各有优劣。&lt;/p&gt;
&lt;p&gt;用于学习，作为参考资料也是不二之选。&lt;/p&gt;
&lt;p&gt;有兴趣的小伙伴，可以参阅之.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/StockhamFFT&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/StockhamFFT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/uFFT&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/uFFT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/BluesteinCrz&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/BluesteinCrz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/fftw3&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/fftw3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然最佳的参考资料，还是fftw3,&lt;/p&gt;
&lt;p&gt;我的这个git做了以下工作：&lt;/p&gt;
&lt;p&gt;1.梳理调整目录结构&lt;/p&gt;
&lt;p&gt;2.移除一些影响阅读调试，让人头大的宏定义&lt;/p&gt;
&lt;p&gt;3.合并代码至fftw_api.c，移除一些不常用的代码&lt;/p&gt;
&lt;p&gt;注意:未经过严格测试验证&lt;/p&gt;
&lt;p&gt;也许这个git存在的意义在于方便众人阅读学习fftw的算法思路，&lt;/p&gt;
&lt;p&gt;以及调试,扣代码等等诸如此类的行为。&lt;/p&gt;
&lt;p&gt;所以有需要的同学可以，参考之。&lt;/p&gt;

&lt;p&gt;回到本次的主题，&lt;/p&gt;
&lt;p&gt;在以前做图像算法的时候，就一直在想一个问题，&lt;/p&gt;
&lt;p&gt;是否可以利用傅里叶变换的特性进行图像的重采样呢？&lt;/p&gt;
&lt;p&gt;这个一直是我心中的一个小石头，一直没放下。&lt;/p&gt;
&lt;p&gt;从理论上来说，可行的，只是估计最终质量并不能保证。&lt;/p&gt;
&lt;p&gt;最佳的尝试莫过于音频重采样，在很多时候，&lt;/p&gt;
&lt;p&gt;我们经常需要对一个音频进行傅里叶变换，然后进行上采样或下采样的操作。&lt;/p&gt;
&lt;p&gt;那是不是可以直接就在频域进行重采样呢？&lt;/p&gt;
&lt;p&gt;这样的做法是不是质量就能有所保障呢？&lt;/p&gt;
&lt;p&gt;事实证明，这是可行的。&lt;/p&gt;
&lt;p&gt;经过简单试验，基于傅里叶变换的音频重采样算法就这样出炉了。&lt;/p&gt;
&lt;p&gt;目前示例采用hsfft 这个开源傅里叶变换进行验证，&lt;/p&gt;
&lt;p&gt;没有采用fftw3的原因也很简单，因为fftw3编译器来有点麻烦。&lt;/p&gt;
&lt;p&gt;而hsfft的函数风格与fftw3类似，只是速度性能上不及fftw3而已。&lt;/p&gt;
&lt;p&gt;这样也符合我的要求，真正应用的时候再使用fftw3替换之即可，&lt;/p&gt;
&lt;p&gt;在验证思路的时候，没必要动用fftw3，&lt;/p&gt;
&lt;p&gt;这也是我为什么使用简洁重采样的原因之一。&lt;/p&gt;
&lt;p&gt;每个步骤都要有策略和方法，不必太过较真。&lt;/p&gt;
&lt;p&gt;如果特定情况下需要，我也可以上matlab,python,delphi,c#,c++等等。&lt;/p&gt;
&lt;p&gt;语言只是工具，关键还是思路和思想。&lt;/p&gt;
&lt;p&gt;贴上主要代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef MIN
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; MIN(a, b) ((a) &amp;lt; (b) ? (a) : (b))
&lt;span&gt;#endif&lt;/span&gt; 

&lt;span&gt;void&lt;/span&gt; FFTResample(&lt;span&gt;float&lt;/span&gt; *input, &lt;span&gt;float&lt;/span&gt; *output, &lt;span&gt;int&lt;/span&gt; sizeIn, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sizeOut) {
    fft_t &lt;/span&gt;*fftin = (fft_t *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(fft_t), sizeIn);
    fft_t &lt;/span&gt;*fftout = (fft_t *) &lt;span&gt;calloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(fft_t), sizeOut);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fftin == NULL || fftout ==&lt;span&gt; NULL) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (fftout)
            &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(fftout);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (fftin)
            &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(fftin);&lt;br/&gt;return;
    }
    fft_real_object fftPlan &lt;/span&gt;= fft_real_init(sizeIn, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    fft_r2c_exec(fftPlan, input, fftin);
    free_real_fft(fftPlan);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; halfIn = (sizeIn / &lt;span&gt;2&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; halfOut = (sizeOut / &lt;span&gt;2&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; MIN(halfIn, halfOut); ++&lt;span&gt;i) {
        fftout[i].re &lt;/span&gt;=&lt;span&gt; fftin[i].re;
        fftout[i].im &lt;/span&gt;=&lt;span&gt; fftin[i].im;
    }
    fft_real_object ifftPlan &lt;/span&gt;= fft_real_init(sizeOut, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    fft_c2r_exec(ifftPlan, fftout, output);
    free_real_fft(ifftPlan);
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; norm = &lt;span&gt;1&lt;/span&gt;.f /&lt;span&gt; sizeIn;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; sizeOut; ++&lt;span&gt;i) {
        output[i] &lt;/span&gt;= (output[i] *&lt;span&gt; norm);
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(fftout);
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(fftin);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算法非常简单，用一句时髦的语言来描述这个算法，就是“多退少补“。&lt;/p&gt;
&lt;p&gt;需要补课FFT的可以移步:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform&quot; target=&quot;_blank&quot;&gt;从多项式乘法到快速傅里叶变换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/fftResample&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/fftResample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;采用Cmake编译即可，示例代码也很简洁。&lt;/p&gt;
&lt;p&gt;不多做解释了~&lt;/p&gt;
&lt;p&gt;以上，权当抛砖引玉。&lt;/p&gt;
&lt;p&gt;若有其他相关问题或者需求也可以邮件联系俺探讨。&lt;/p&gt;
&lt;p&gt;邮箱地址是: &lt;br/&gt;gaozhihan@vip.qq.com&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:07:00 +0000</pubDate>
<dc:creator>cpuimage</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cpuimage/p/9270739.html</dc:identifier>
</item>
</channel>
</rss>