<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Web缓存（一） - HTTP协议缓存 - laixiangran</title>
<link>http://www.cnblogs.com/laixiangran/p/8971119.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laixiangran/p/8971119.html</guid>
<description>&lt;h2 id=&quot;为什么要使用-web-缓存&quot;&gt;为什么要使用 Web 缓存&lt;/h2&gt;
&lt;p&gt;Web缓存一般分为浏览器缓存、代理服务器缓存以及网关缓存，本文主要讲的是 &lt;strong&gt;浏览器缓存&lt;/strong&gt;，其它两种缓存大家自行去了解下。&lt;/p&gt;
&lt;p&gt;Web 缓存游走于服务器和客户端之间。这个服务器可能是源服务器（资源所驻留的服务器Add），数量可能是1个或多个；这个客户端也可能是1个或多个。Web 缓存就在服务器-客户端之间搞监控，监控请求，并且把请求输出的内容（例如html页面、 图片和文件）（统称为副本）另存一份；然后，如果下一个请求是相同的 URL，则直接请求保存的副本，而不是再次麻烦源服务器。&lt;/p&gt;
&lt;p&gt;使用缓存的2个主要原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;降低延迟：缓存离客户端更近，因此，从缓存请求内容比从源服务器所用时间更少，呈现速度更快，网站就显得更灵敏。&lt;/li&gt;
&lt;li&gt;降低网络传输：副本被重复使用，大大降低了用户的带宽使用，其实也是一种变相的省钱（如果流量要付费的话），同时保证了带宽请求在一个低水平上，更容易维护了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;试想现在的大型网站，随便一个页面都是一两百个请求，每天 pv 都是亿级别，如果没有缓存，用户体验会急剧下降（表现在等待请求的时间上）、同时服务器压力和网络带宽都面临严重的考验。&lt;/p&gt;
&lt;h2 id=&quot;浏览器缓存控制机制&quot;&gt;浏览器缓存控制机制&lt;/h2&gt;
&lt;p&gt;浏览器缓存控制机制有三种：HTML5离线存储和本地缓存、HTML Meta 标签、HTTP 协议缓存。&lt;/p&gt;
&lt;h3 id=&quot;html5离线存储和本地缓存&quot;&gt;HTML5离线存储和本地缓存&lt;/h3&gt;
&lt;p&gt;该种缓存机制是运用 HTMl5 新推出一些支持离线应用的 API 来进行数据的缓存，比如 appcache、sessionStorage、localStorage等等。&lt;/p&gt;
&lt;p&gt;appcache 通过定义一个描述文件（manifest file）来列出要下载和缓存的资源，manifest file 示例如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;er&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;MANIFEST&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;Comment&lt;/span&gt;

&lt;span class=&quot;er&quot;&gt;file.js&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;file.css&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在 html 中引用：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; manifest=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./xxx.manifest&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sessionStorage、localStorage 的基本用法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// localStorage 用法相似&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'laixiangran'&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// 存储数据&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'name'&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// 获取数据 'laixiangran'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文暂时就不详细介绍，后面我会单独介绍这块的内容。&lt;/p&gt;
&lt;h3 id=&quot;html-meta-标签&quot;&gt;HTML Meta 标签&lt;/h3&gt;
&lt;p&gt;使用 HTML Meta 标签，Web 开发者可以在 HTML 页面的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 节点中加入 &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 标签，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;META&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; HTTP-EQUIV=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Pragma&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; CONTENT=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。&lt;/p&gt;
&lt;p&gt;使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析 HTML 内容本身。&lt;/p&gt;
&lt;h3 id=&quot;http-协议缓存&quot;&gt;HTTP 协议缓存&lt;/h3&gt;
&lt;p&gt;HTTP 协议缓存是我们本文讲解的重点，它是通过 HTTP 头信息来控制缓存的，HTTP 头信息可以让你对浏览器和代理服务器如何处理你的副本进行更多的控制。他们在 HTML 代码中是看不见的，一般由 Web 服务器自动生成。但是，根据你使用的服务器，你可以在某种程度上进行控制。&lt;/p&gt;
&lt;h4 id=&quot;浏览器请求流程&quot;&gt;浏览器请求流程&lt;/h4&gt;
&lt;p&gt;浏览器第一次请求流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/82A227689435436FB3B6C5EEB59EA10E?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该流程比较简单了，浏览器在第一次请求的时候不存在缓存，直接从浏览器请求，等请求返回结果之后再根据 HTTP 头信息将数据缓存在内存或者硬盘中。&lt;/p&gt;
&lt;p&gt;浏览器再次请求时：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/008FECE013334763BE858CF5C9FE3CC4?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该流程就复杂多了，浏览器需要根据 HTTP 头信息来判断是否直接从缓存读取数据还是交由服务器来判断是否从缓存读取数据。&lt;/p&gt;
&lt;p&gt;几种状态码的区别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/611DAC7A01084EC6924132A7FA59F140?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们就从该流程中出现的 HTTP 状态码 200（from cache）和 304 来讲解 HTTP 协议缓存中的 HTTP 头信息。&lt;/p&gt;
&lt;h4 id=&quot;from-cache&quot;&gt;200（from cache）&lt;/h4&gt;
&lt;p&gt;这种 HTTP 状态码表示不访问服务器，直接从缓存（内存或者硬盘）读取数据。&lt;/p&gt;
&lt;p&gt;看两张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/E310174F05F14389906CBFD247378BE0?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/825C401A61384A3AB15435C605DAF500?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面两张图，我们会看到状态码有点不一样，分别是 &lt;code&gt;200（from memory cache）&lt;/code&gt; 以及 &lt;code&gt;200（from diks cache）&lt;/code&gt;，这两个的区别一个是从内存读取数据，一个是从硬盘读取数据，然后它们的先后顺序是先从内存读取，再从硬盘读取。这里我们就统称为 &lt;code&gt;200（from cache）&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;出现 &lt;code&gt;200（from cache）&lt;/code&gt; 这种情况，我们需要关注 &lt;code&gt;Expires&lt;/code&gt; 和 &lt;code&gt;Cache-control&lt;/code&gt; 这两种HTTP 头信息字段。&lt;/p&gt;
&lt;h5 id=&quot;expires&quot;&gt;Expires&lt;/h5&gt;
&lt;p&gt;Expires 的中文意思是“有效期”。显然，就是告诉浏览器缓存的有效期。如果过期，缓存会检查源服务器以确定文件是否改变了。&lt;/p&gt;
&lt;p&gt;Expires 头唯一的有效值是 HTTP 时间，其他值无效，不会去缓存的。注意：时间是格林威治时间（GMT），而不是本地时间。如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;er&quot;&gt;Expires:&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;Mon,&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;03:53:10&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;GMT&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;那么看我们上面的两张图中的 Expires，它都是到 2018-10-29 03:53:10 过期，而我们本次请求的时间 Date 是 2018-04-29 03：53：10，因此本次请求直接从缓存读取数据，返回 200（from cache）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管 Expires 头很有用，但它有一定的局限性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;因为牵扯到时间，Web 服务器端的时间必须和缓存的同步，否则很可能实现不了预期的结果 —— 缓存把过期的数据当成最新的数据，把最新的数据当作过期的数据。&lt;/li&gt;
&lt;li&gt;你很容易忘记给某内容设置了一个特定时间，如果返回内容的时候没有更新这个过期时间，则每个请求都是上访到服务器，反而增加了负载和响应时间。&lt;/li&gt;
&lt;li&gt;最后呢，Expires 是 HTTP 1.0 的东西，现在默认浏览器均默认使用 HTTP 1.1，所以它的作用基本忽略。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;cache-control&quot;&gt;Cache-Control&lt;/h5&gt;
&lt;p&gt;Cache-Control 与 Expires 的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存读取数据还是重新发请求到服务器读取数据。只不过 Cache-Control 的选择更多，设置更细致，如果同时设置的话，其优先级高于 Expires。&lt;/p&gt;
&lt;p&gt;Cache-Control 有用的响应头包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;max-age=[秒]：&lt;/strong&gt; 表示在这个时间范围内缓存是新鲜的无需更新。类似 Expires 时间，不过这个时间是相对的，而不是绝对的。也就是某次请求成功后多少秒内缓存是新鲜的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s-maxage=[秒]：&lt;/strong&gt; 类似 max-age, 除了仅应用于共享缓存（如代理）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public：&lt;/strong&gt; 标记认证的响应才能够被缓存。一般而言，需要认证 HTTP 请求内容会自动私有化（不会被缓存）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;privateN：&lt;/strong&gt; 允许缓存专门为某一个用户存储响应，比方说在浏览器中；共享缓存一般不会，例如在代理中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;no-cache：&lt;/strong&gt; 每次在释放缓存副本之前都强制发送请求给源服务器进行验证，这在确保认证有效性上很管用（和 public 结合使用）或者保证内容必须是即时的，不得无视缓存的所有优点，如国内的微博、twitter等的刷新显示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;no-store：&lt;/strong&gt; 强制缓存在任何情况下都不要保留任何副本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;must-revalidate：&lt;/strong&gt; 告诉缓存，我给你准备了一些关于新鲜度的信息，在表现的时候要严格遵循。HTTP 允许缓存在某些特定情况下返回过期数据，指定了这个属性，相对于告诉缓存，你必须严格遵循我的规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;proxy-revalidate：&lt;/strong&gt; 类似 must-revalidate，除了只能应用于代理缓存。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;er&quot;&gt;Cache-Control:&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;max-age=15811200&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;那么看我们上面的两张图中的 Cache-Control，它在当前请求成功后15811200秒内都是有效的，因此本次请求直接从缓存读取数据，返回 200（from cache）。如果从当前请求成功开始，过了15811200秒之后就会重新从服务器请求新数据。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;section&quot;&gt;304&lt;/h4&gt;
&lt;p&gt;当浏览器通过 &lt;code&gt;Expires&lt;/code&gt; 或者 &lt;code&gt;Cache-control&lt;/code&gt; 判断出缓存已经过期，那么就需要重新发送请求到服务器，让服务器判断当前缓存是否可以继续使用。&lt;/p&gt;
&lt;p&gt;当服务器判断该缓存已经失效，那么就会返回新数据，HTTP 状态码为 200；&lt;/p&gt;
&lt;p&gt;当浏览器判断该缓存还未失效，那么就会返回 HTTP 状态码为 304 (无需包体，节省流量)，告知浏览器继续使用缓存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/96A7266714F149AEB5E351D5E1E74A88?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么通过哪些 HTTP 头信息字段来判断是否返回 200 还是 304 呢？那么我们就请出接下来的主角： &lt;code&gt;Last-Modified/If-Modified-Since&lt;/code&gt; 及 &lt;code&gt;Etag/If-None-Match&lt;/code&gt;。这两个字段都需要配合 &lt;code&gt;Cache-Control&lt;/code&gt; 使用。&lt;/p&gt;
&lt;h5 id=&quot;last-modifiedif-modified-since&quot;&gt;Last-Modified/If-Modified-Since&lt;/h5&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Last-Modified：&lt;/strong&gt; 标示这个响应资源的最后修改时间。web 服务器在响应请求时，告诉浏览器资源的最后修改时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;If-Modified-Since：&lt;/strong&gt; 当资源过期时（使用 &lt;code&gt;Cache-Control&lt;/code&gt; 标识的 &lt;code&gt;max-age&lt;/code&gt;），发现资源具有 &lt;code&gt;Last-Modified&lt;/code&gt; 声明，则再次向 web 服务器请求时带上 If-Modified-Since，表示请求时间。web服务器收到请求后发现有 If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源有被改动过，则响应资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应 HTTP 304 (无需包体，节省流量)，告知浏览器继续使用缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;etagif-none-match&quot;&gt;Etag/If-None-Match&lt;/h5&gt;
&lt;p&gt;这是在 HTTP 1.1 中引入了一个新的验证器。&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Etag：&lt;/strong&gt; web 服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache 中，ETag 的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行 Hash 后得到的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;If-None-Match：&lt;/strong&gt; 当资源过期时（使用 &lt;code&gt;Cache-Control&lt;/code&gt; 标识的 &lt;code&gt;max-age&lt;/code&gt;），发现资源具有 Etage 声明，则再次向 web 服务器请求时带上 If-None-Match （Etag 的值）。web 服务器收到请求后发现有 If-None-Match 则与被请求资源的相应校验串进行比对，决定返回 200 或 304。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;etag-优先于-last-modified&quot;&gt;Etag 优先于 Last-Modified&lt;/h5&gt;
&lt;p&gt;你可能会觉得使用 Last-Modified 已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要 Etag（实体标识）呢？HTTP1.1 中 Etag 的出现主要是为了解决几个 Last-Modified 比较难解决的问题：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Last-Modified 标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Etag 是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。&lt;strong&gt;Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建支持缓存网站的小技巧&quot;&gt;创建支持缓存网站的小技巧&lt;/h2&gt;
&lt;p&gt;通过上面的介绍，我们知道 HTTP 协议缓存的机制，目的就是让你可以更灵活更细致的控制浏览器缓存，从而让你的网站的缓存更加友好，用户体验更完美。&lt;/p&gt;
&lt;p&gt;下面这些技巧也可以让你网站的缓存更加友好：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;保持URL稳定：&lt;/strong&gt; 这是缓存的金科玉律，如果你为不同页面，不同用户或不同网站提供相同的内容，他们应该使用相同的URL。 这是简单却非常行之有效的方法。例如，你的 HTML 中的某个引用地址是&quot;/index.html&quot;, 则要一直使用这个地址。&lt;/li&gt;
&lt;li&gt;不同地方的图片和其他元素 &lt;strong&gt;使用同一库&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于不经常改变的图片/页面启用缓存&lt;/strong&gt;，通过将 &lt;code&gt;Cache-Control: max-age&lt;/code&gt; 头信息的值设大一点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于定期更新的内容&lt;/strong&gt;通过指定 &lt;code&gt;max-age&lt;/code&gt; 或过期时间实现缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果资源改变了（尤其下载文件），改变其名字&lt;/strong&gt;。由于一般这种资源会有很长的过期时间，而服务器上一直是正确的版本；因此，链接这个下载资源的页面需要要比较短的过期时间。否则，会出现服务器的资源是新的，但页面被缓存了，其中的链接地址还是旧的，就会出现新旧版本冲突的可能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;万不得已不要变动文件：&lt;/strong&gt; 否则你要设置一个新的 &lt;code&gt;Last-Modified&lt;/code&gt; 值。另外，当你更新站点的时候，只要上传改动的那些文件，而不要把整个站点都覆盖过去。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cookie能不用就不用：&lt;/strong&gt; Cookie 难以被缓存，且大多情境下是没有必要的。如果你非得使用 Cookie，建议用在动态页面上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少SSL的使用：&lt;/strong&gt; 因为共享缓存不能存储认证页面，只在必要的时候使用，并且在 SSL 页面上减少图片的使用。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;SSL：全称 Secure Socket Layer – 安全套接层，为 Netscape 所研发，用以保障在 Internet 上数据传输之安全，利用数据加密 (Encryption) 技术，可确保数据在网络上的传输过程中不会被截取及窃听。目前一般通用的规格为 40 bit 的安全标准，美国则已推出 128 bit 的更高安全标准，但限制出境。只要 3.0 版本以上的 I.E. 或 Netscape 浏览器即可支持 SSL。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;使用 &lt;a href=&quot;http://redbot.org/&quot;&gt;REDbot&lt;/a&gt; 检查你的网站：&lt;/strong&gt; 可以帮助你应用本文所介绍的一些概念。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;REDbot：REDbot = RED + robot，是个机器人，检查 HTTP 资源，看他们如何会表现，指出常见的问题，并提出改进建议。虽然它属于 HTTP 一致性测试仪，但却可以找到不少 HTTP 相关问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;用户行为与缓存&quot;&gt;用户行为与缓存&lt;/h2&gt;
&lt;p&gt;用户的一些行为会影响到浏览器的缓存，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/E72342E7E6E4421F96C72CA147F738FC?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;完整流程图&quot;&gt;完整流程图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/6F1709A98BCE47789E7DCF9D0EC45C88?method=download&amp;amp;shareKey=a2938e7a9b944ebb680e5e8b8937ffef&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 07:32:00 +0000</pubDate>
<dc:creator>laixiangran</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laixiangran/p/8971119.html</dc:identifier>
</item>
<item>
<title>浅析JS异步执行机制 - 震灵</title>
<link>http://www.cnblogs.com/zhenlingcn/p/8971081.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenlingcn/p/8971081.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;JS异步执行机制具有非常重要的地位，尤其体现在回调函数和事件等方面。本文将针对JS异步执行机制进行一个简单的分析。&lt;/p&gt;
&lt;h3 id=&quot;从一份代码讲起&quot;&gt;从一份代码讲起&lt;/h3&gt;
&lt;p&gt;下面是两个经典的JS定时执行函数，这两个函数的区别相信对JS有一定基础的同学是十分清楚的。timeout仅仅只会执行一次，而interval则会执行多次。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (args) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'timeout'&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (args) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'interval'&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么再看一份代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (args) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'timeout'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (args) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'interval'&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两份代码是否存在区别呢？在setTimeout中递归调用貌似和setInterval一样，但是实际上由于JS异步执行机制的问题，导致这两个函数存在着一定的差异。&lt;/p&gt;
&lt;h3 id=&quot;如何理解js异步执行机制&quot;&gt;如何理解JS异步执行机制&lt;/h3&gt;
&lt;p&gt;JS是单线程程序，从而避免了并发访问的一系列问题。但也正是由于单线程这样一个机制，导致JS的异步执行并不能按照传统的多线程方式进行异步执行，所有的异步时间要插入到同一个队列中，依次在主线程中执行。&lt;br/&gt;&lt;img src=&quot;http://on2oj7i3h.bkt.clouddn.com/2018-04-29-14-28-40.png&quot; alt=&quot;2018-04-29-14-28-40&quot;/&gt;&lt;br/&gt;这里有一张图片，可以比较好的解释JS的异步执行机制。&lt;br/&gt;在浏览器中，一般情况下会存在三个线程，JS执行引擎，HTTP线程，事件触发线程。但是需要注意的是，所有的JS核心逻辑都需要在JS执行引擎线程中执行。&lt;br/&gt;例如我们可以使用下面这样一段代码发送AJAX请求&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; xmlReq &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createXMLHTTP&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//创建一个xmlhttprequest对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;testAsynRequest&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://127.0.0.1:5000/&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setRequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; jsonData &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'('&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;responseText&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;')'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;jsonData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;message&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;404&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Requested URL is not found.&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;403&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;status is &quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;status&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;xmlReq&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;testAsynRequest&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//1秒后调用回调函数&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务端代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Flask

app &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Flask(&lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt;)

&lt;span class=&quot;at&quot;&gt;@app.route&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/'&lt;/span&gt;, methods&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'POST'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;])
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello world'&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'__main__'&lt;/span&gt;:
    app.run()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码是否会输出hello world呢？经过测验，发现并不会输出HelloWorld，浏览器会进入假死状态。造成这种情况的原因正是JS异步回调单线程的运行机制。在发送HTTP请求以后，HTTP请求会启动一个线程进行发送，收到响应以后会，事件触发线程会将响应事件加入到等待队列中，等待JS引擎空闲后执行。&lt;br/&gt;但是由于while(true)导致JS引擎永远不存在空闲，从而导致响应事件一致无法触发。&lt;/p&gt;
&lt;h3 id=&quot;重新思考&quot;&gt;重新思考&lt;/h3&gt;
&lt;p&gt;通过一个简单的AJAX DEMO，可以简单了解了JS时间执行的一个流程。那么针对上面的那张图片，和最开始提出的settimeout的问题，JS又是如何调度和处理的呢？&lt;br/&gt;JS在定时器函数初始化以后就会开始执行定时任务，到达时间之后如果此时JS引擎空闲，则会直接执行定时任务，否则会将定时任务加入到等待队列中。&lt;br/&gt;对于加入到等待队列中的任务来说，会在JS引擎空闲的时候再不断进行执行。因此如果此时引擎并非空闲，那么setTimeout会等待一段时间后才能执行。&lt;br/&gt;对于setInterval来说，也是需要加入到等待队列中的，但是setInterval并不会因为加入到等待队列中而停止计时，此时如果到了第二个Interval，而第一个Interval还没有开始执行，那么此时队列中旧有存在两个Interval可能，如果这样累加下去，那么就可能会陷入大量Interval的累加，造成线程严重阻塞的问题，因此JS引擎做了一个&lt;strong&gt;轻度的优化&lt;/strong&gt;，如果队列中有Interval，那么这个Interval不会加入队列。但是如果Interval已经pop出队列开始执行，那么Interval将会加入队列。&lt;br/&gt;针对上面的分析，我们可以得出一个结论，&lt;strong&gt;相比于setTimeout函数递归调用，在JS中由于单线程的异步执行机制，setInterval执行的频率会更高&lt;/strong&gt;。因为setTimeout在执行完成以后才会开始下一轮定时任务，但是setInterval是持续执行定时任务，尤其是在setTimeout里的任务执行时间较长的时候，setInterval和setTimeout会有比较明显的频率差异。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 07:11:00 +0000</pubDate>
<dc:creator>震灵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenlingcn/p/8971081.html</dc:identifier>
</item>
<item>
<title>中间件——canal小记 - ZepheryWen</title>
<link>http://www.cnblogs.com/w1570631036/p/8971011.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w1570631036/p/8971011.html</guid>
<description>&lt;p&gt;接到个小需求，将mysql的部分数据增量同步到es，但是不仅仅是使用canal而已，整体的流程是mysql&amp;gt;&amp;gt;canal&amp;gt;&amp;gt;flume&amp;gt;&amp;gt;kafka&amp;gt;&amp;gt;es，说难倒也不难，只是做起来碰到的坑实在太多，特别是中间套了那么多中间件，出了故障找起来真的特别麻烦。&lt;/p&gt;
&lt;p&gt;先来了解一下MySQL的主从备份：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upyuncdn.wenzhihuai.com/20180421025107389573244.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上层来看，复制分成三步：&lt;br/&gt;master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events，可以通过show binlog events进行查看）；&lt;br/&gt;slave将master的binary log events拷贝到它的中继日志(relay log)；&lt;br/&gt;slave重做中继日志中的事件，将改变反映它自己的数据。&lt;/p&gt;
&lt;h2 id=&quot;问题一测试环境一切正常但是正式环境中这几个字段全为0不知道为什么&quot;&gt;问题一：测试环境一切正常，但是正式环境中，这几个字段全为0，不知道为什么&lt;/h2&gt;
&lt;p&gt;最后发现是沟通问题。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/2018042101385616022393.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;排查过程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;起初，怀疑是es的问题，会不会是string转为long中出现了问题，PUT了个，无异常，这种情况排除。&lt;/li&gt;
&lt;li&gt;再然后以为是代码有问题，可是想了下，rowData.getAfterColumnsList().forEach(column -&amp;gt; data.put(column.getName(), column.getValue()))这句不可能有什么其他的问题啊，而且测试环境中一切都是好好的。&lt;/li&gt;
&lt;li&gt;canal安装出错，重新查看了一次canal.properties和instance.properties，并没有发现配置错了啥，如果错了，那为什么只有那几个字段出现异常，其他的都是好好的，郁闷。而且，用测试环境的canal配置生产中的数据库，然后本地调试，结果依旧一样。可能问题出在mysql。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最后发现，居然是沟通问题。。。。测试环境中是从正式环境导入的，用的insert，可是在正式环境里，用的确实insert后update字段，之后发现居然还用delete，，，，晕。。。。之前明确问过了只更新insert的，人与人之间的信任在哪里。。。。&lt;/p&gt;
&lt;h2 id=&quot;问题二canal.properties中四种模式的差别&quot;&gt;问题二：canal.properties中四种模式的差别&lt;/h2&gt;
&lt;p&gt;简单的说，canal维护一份增量订阅和消费关系是依靠解析位点和消费位点的，目前提供了一下四种配置，一开始我也是懵的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;#canal.instance.global.spring.xml = classpath:spring/local-instance.xml
#canal.instance.global.spring.xml = classpath:spring/memory-instance.xml
canal.instance.global.spring.xml = classpath:spring/file-instance.xml
#canal.instance.global.spring.xml = classpath:spring/default-instance.xml&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;local-instance&lt;/strong&gt;&lt;br/&gt;我也不知道啥。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;memory-instance&lt;/strong&gt;&lt;br/&gt;所有的组件(parser , sink , store)都选择了内存版模式，记录位点的都选择了memory模式，重启后又会回到初始位点进行解析&lt;br/&gt;特点：速度最快，依赖最少(不需要zookeeper)&lt;br/&gt;场景：一般应用在quickstart，或者是出现问题后，进行数据分析的场景，不应该将其应用于生产环境。&lt;br/&gt;个人建议是调试的时候使用该模式，即新增数据的时候，客户端能马上捕获到改日志，但是由于位点一直都是canal启动的时候最新的，不适用与生产环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;file-instance&lt;/strong&gt;&lt;br/&gt;所有的组件(parser , sink , store)都选择了基于file持久化模式，注意，不支持HA机制.&lt;br/&gt;特点：支持单机持久化&lt;br/&gt;场景：生产环境，无HA需求，简单可用.&lt;br/&gt;采用该模式的时候，如果关闭了canal，会在destination中生成一个meta.dat，用来记录关键信息。如果想要启动canal之后马上订阅最新的位点，需要把该文件删掉。&lt;br/&gt;&lt;em&gt;{&quot;clientDatas&quot;:[{&quot;clientIdentity&quot;:{&quot;clientId&quot;:1001,&quot;destination&quot;:&quot;example&quot;,&quot;filter&quot;:&quot;.&lt;/em&gt;\..&quot;},&quot;cursor&quot;:{&quot;identity&quot;:{&quot;slaveId&quot;:-1,&quot;sourceAddress&quot;:{&quot;address&quot;:&quot;192.168.6.71&quot;,&quot;port&quot;:3306}},&quot;postion&quot;:{&quot;included&quot;:false,&quot;journalName&quot;:&quot;binlog.008335&quot;,&quot;position&quot;:221691106,&quot;serverId&quot;:88888,&quot;timestamp&quot;:1524294834000}}}],&quot;destination&quot;:&quot;example&quot;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;default-instance&lt;/strong&gt;&lt;br/&gt;所有的组件(parser , sink , store)都选择了持久化模式，目前持久化的方式主要是写入zookeeper，保证数据集群共享。&lt;br/&gt;特点：支持HA&lt;br/&gt;场景：生产环境，集群化部署.&lt;br/&gt;该模式会记录集群中所有运行的节点，主要用与HA主备模式，节点中的数据如下，可以关闭某一个canal服务来查看running的变化信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upyuncdn.wenzhihuai.com/201804210425561692361189.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题三如果要订阅的是mysql的从库改怎么做&quot;&gt;问题三：如果要订阅的是mysql的从库改怎么做？&lt;/h2&gt;
&lt;p&gt;生产环境中的主库是不能随便重启的，所以订阅的话必须订阅mysql主从的从库，而从库中是默认下只将主库的操作写进中继日志，并写到自己的二进制日志的，所以需要让其成为canal的主库，必须让其将日志也写到自己的二进制日志里面。处理方法：修改/etc/my.cnf，增加一行log_slave_updates=1，重启数据库后就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upyuncdn.wenzhihuai.com/201804210451321357023546.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题四部分字段没有更新&quot;&gt;问题四：部分字段没有更新&lt;/h2&gt;
&lt;p&gt;最终版本是以mysql的id为es的主键，用canal同步到flume，再由flume到kafka，然后再由一个中间件写到es里面去，结果发现，一天之中，会有那么一段时间得出的结果少一丢丢，甚至是骤降，如图。不得不从头开始排查情况，canal到flume，加了canal的重试，以及发送到flume的重试机制，没有报错，所有数据正常发送。flume到kafka不敢怀疑，毕竟公司一直在用，怎么可能有问题。kafka到es的中间件？组长写的，而且一直在用，不可能==最后确认的是flume到kafka，kafka的parition处理速度不同，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upyuncdn.wenzhihuai.com/20180428015132288764661.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;check一下flume的文档，可以知道&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;8&quot;&gt;&lt;td&gt;defaultPartitionId&lt;/td&gt;
&lt;td&gt;Specifies a Kafka partition ID (integer) for all events in this channel to be sent to, unless overriden by partitionIdHeader. By default, if this property is not set, events will be distributed by the Kafka Producer’s partitioner - including by key if specified (or by a partitioner specified by kafka.partitioner.class).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;partitionIdHeader&lt;/td&gt;
&lt;td&gt;When set, the producer will take the value of the field named using the value of this property from the event header and send the message to the specified partition of the topic. If the value represents an invalid partition the event will not be accepted into the channel. If the header value is present then this setting overrides defaultPartitionId.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;大概意思是flume如果不自定义partitionIdHeader，那么消息将会被分布式kafka的partion处理，kafka本身的设置就是高吞吐量的消息系统，同一partion的消息是可以按照顺序发送的，但是多个partion就不确定了，如果需要将消息按照顺序发送，那么就必须要指定一个parition，即在flume的配置文件中添加：a1.channels.channel1.partitionIdHeader=1，指定parition即可。全部修改完之后，在kibana查看一下曲线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/201804290227121343830102.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用sql在数据库确认了下，终于一致了，不容易。。。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 07:07:00 +0000</pubDate>
<dc:creator>ZepheryWen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w1570631036/p/8971011.html</dc:identifier>
</item>
<item>
<title>Android POJO 转换器 —&gt; RapidOOO - 天天_byconan</title>
<link>http://www.cnblogs.com/tiantianbyconan/p/8971041.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiantianbyconan/p/8971041.html</guid>
<description>&lt;p&gt;博客搬迁至&lt;a href=&quot;https://blog.wangjiegulu.com&quot; class=&quot;uri&quot;&gt;https://blog.wangjiegulu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RSS订阅：&lt;a href=&quot;https://blog.wangjiegulu.com/feed.xml&quot; class=&quot;uri&quot;&gt;https://blog.wangjiegulu.com/feed.xml&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0.86206896551724&quot;&gt;
&lt;p&gt;&lt;strong&gt;原文链接&lt;/strong&gt;：&lt;a href=&quot;https://blog.wangjiegulu.com/2018/04/16/rapidooo-android-pojo-converter/&quot; class=&quot;uri&quot;&gt;https://blog.wangjiegulu.com/2018/04/16/rapidooo-android-pojo-converter/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android POJO 转换器:根据 POJO 类编译时自动生成支持扩展互相绑定的领域对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wangjiegulu/RapidOOO/blob/master/README_zh.md&quot;&gt;English Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&quot;https://github.com/wangjiegulu/RapidOOO&quot; class=&quot;uri&quot;&gt;https://github.com/wangjiegulu/RapidOOO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么使用-rapidooo&quot;&gt;为什么使用 RapidOOO？&lt;/h2&gt;
&lt;p&gt;我们在领域驱动设计中经常会在不同层级之间传递数据，例如 &lt;code&gt;VO&lt;/code&gt;, &lt;code&gt;PO&lt;/code&gt;, &lt;code&gt;DO&lt;/code&gt;, &lt;code&gt;DTO&lt;/code&gt;, &lt;code&gt;BO&lt;/code&gt;等。Android 的开发中也经常会遇到这些情况，比如在 &lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture&quot;&gt;Android-CleanArchitecture&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture/blob/master/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/mapper/UserModelDataMapper.java#L42&quot;&gt;UserModelDataMapper::transform&lt;/a&gt;, &lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture/blob/master/data/src/main/java/com/fernandocejas/android10/sample/data/entity/mapper/UserEntityDataMapper.java#L42&quot;&gt;UserEntityDataMapper::transform&lt;/a&gt; 等。手工地进行拷贝转换的过程不但繁琐，而且错误的风险比较大，在新增、删除字段时也增加了维护的成本。&lt;a href=&quot;http://dozer.sourceforge.net/documentation/about.html&quot;&gt;Dozer&lt;/a&gt; 可以很好地解决这个问题，但是在 Android 上可能就不太适用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RapidOOO 可以做到:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在编译时针对指定的初始 POJO，可以自动生成 Java 类（比如 &lt;code&gt;UserVO&lt;/code&gt;, &lt;code&gt;UserBO&lt;/code&gt; 等），非反射。&lt;/li&gt;
&lt;li&gt;可以在生成的 POJO 类中增加配置，添加新的字段（比如通过 User 中的 &lt;code&gt;gender&lt;/code&gt; 在生成的 POJO（UserVO） 中扩展出一个 &lt;code&gt;genderDesc&lt;/code&gt; 字段，并且与原来的 &lt;code&gt;gender&lt;/code&gt; 类共存并进行双向绑定）&lt;/li&gt;
&lt;li&gt;字段进行转换时可以通过指定 &lt;code&gt;conversionMethodName&lt;/code&gt;, &lt;code&gt;inverseConversionMethodName&lt;/code&gt; 等方法来进行特殊的转换，类似 &lt;code&gt;Databinding&lt;/code&gt; 中的 &lt;code&gt;@BindingMethod&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;链式的 POJO 生成，如从 &lt;code&gt;User&lt;/code&gt; 生成 &lt;code&gt;UserDO&lt;/code&gt;, 从 &lt;code&gt;UserDO&lt;/code&gt; 生成 &lt;code&gt;UserBO&lt;/code&gt;, 从 &lt;code&gt;UserBO&lt;/code&gt; 生成 &lt;code&gt;UserVO&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;生成类中自动生成转换方法 &lt;code&gt;UserBo.create(User user)&lt;/code&gt;, &lt;code&gt;userBo.toUser()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;支持 POJO &lt;code&gt;继承&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;支持对象池（比如 &lt;code&gt;android.support.v4.util.Pools&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;怎么使用&quot;&gt;怎么使用？&lt;/h2&gt;
&lt;p&gt;Gradle &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Crapidooo&quot;&gt;Check Newest Version&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;implementation &quot;com.github.wangjiegulu:rapidooo-api:x.x.x&quot;
annotationProcessor &quot;com.github.wangjiegulu:rapidooo-compiler:x.x.x&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下通过两个例子来说明:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User POJO:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; User &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Serializable {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long userId;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String nickname;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer age;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer gender;
    &lt;span class=&quot;co&quot;&gt;// getter setter&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pet POJO:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Pet {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long petId;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String petName;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; isCat;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; delete;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean isDog;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean clear;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; User owner;
    &lt;span class=&quot;co&quot;&gt;// getter  settter&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;pojo-转换为-bo&quot;&gt;POJO 转换为 BO&lt;/h3&gt;
&lt;p&gt;创建 &lt;code&gt;BOGenerator&lt;/code&gt; 类，配置以下注解:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOOs&lt;/span&gt;(suffix = BOGenerator.&lt;span class=&quot;fu&quot;&gt;BO_SUFFIX&lt;/span&gt;, ooos = {
        &lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(id = &lt;span class=&quot;st&quot;&gt;&quot;user_bo_id&quot;&lt;/span&gt;, from = User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, suffix = BOGenerator.&lt;span class=&quot;fu&quot;&gt;BO_SUFFIX_USER&lt;/span&gt;),
        &lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(from = Pet.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, conversion = {
                &lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
                        fieldName = &lt;span class=&quot;st&quot;&gt;&quot;owner&quot;&lt;/span&gt;,
                        targetTypeId = &lt;span class=&quot;st&quot;&gt;&quot;user_bo_id&quot;&lt;/span&gt;,
                        targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;ownerUser&quot;&lt;/span&gt;,
                        replace = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
                )
        })
})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BOGenerator {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String BO_SUFFIX = &lt;span class=&quot;st&quot;&gt;&quot;BO&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String BO_SUFFIX_USER = &lt;span class=&quot;st&quot;&gt;&quot;_BO&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里使用 &lt;code&gt;@OOOs&lt;/code&gt; 注解来进行转换的配置，通过 &lt;code&gt;@OOO&lt;/code&gt; 注解来显示地指定需要转换成哪些类。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(id = &lt;span class=&quot;st&quot;&gt;&quot;user_bo_id&quot;&lt;/span&gt;, from = User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, suffix = BOGenerator.&lt;span class=&quot;fu&quot;&gt;BO_SUFFIX_USER&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上表示一个类的转换:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;id:&lt;/strong&gt;表示本地转换的 id，可以为任意字符串（需唯一），默认不设置 id。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;from:&lt;/strong&gt;表示转换源，从 &lt;code&gt;User&lt;/code&gt; 转换，必填。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;suffix:&lt;/strong&gt;表示生成的 POJO 类的名字后缀，这里是 &lt;code&gt;_BO&lt;/code&gt;，所以生成的类名为 &lt;code&gt;User_BO&lt;/code&gt;，默认使用 &lt;code&gt;@OOOs&lt;/code&gt; 中的 &lt;code&gt;suffix&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(from = Pet.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, conversion = {
      &lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
              fieldName = &lt;span class=&quot;st&quot;&gt;&quot;owner&quot;&lt;/span&gt;,
              targetTypeId = &lt;span class=&quot;st&quot;&gt;&quot;user_bo_id&quot;&lt;/span&gt;,
              targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;ownerUser&quot;&lt;/span&gt;,
              replace = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
      )
})&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上也表示一个类的转换，但是可以通过 &lt;code&gt;@OOOConversion&lt;/code&gt; 来新增一个字段:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;fieldName:&lt;/strong&gt;指定新的字段是从转换源 POJO 的哪个字段派生出来的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;targetTypeId:&lt;/strong&gt;用来指定新的字段的类型id，需要与其它的 &lt;code&gt;@OOO&lt;/code&gt; 指定的 &lt;code&gt;id&lt;/code&gt; 一致；也可以通过 &lt;code&gt;targetType&lt;/code&gt; 来指定 Class 类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;targetFieldName:&lt;/strong&gt;指定新字段的名字，可以任意。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;replace:&lt;/strong&gt;新的字段是否替换原来的字段（&lt;strong&gt;fieldName&lt;/strong&gt;），如果 false，则共存。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后编译将会自动生成以下代码:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; User_BO &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Serializable {
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long userId;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String nickname;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer age;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer gender;

  &lt;span class=&quot;co&quot;&gt;// getter setter&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; User_BO &lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(User user) {
    User_BO user_BO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User_BO&lt;/span&gt;();
    user_BO.&lt;span class=&quot;fu&quot;&gt;userId&lt;/span&gt; = user.&lt;span class=&quot;fu&quot;&gt;getUserId&lt;/span&gt;();
    user_BO.&lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt; = user.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;();
    user_BO.&lt;span class=&quot;fu&quot;&gt;nickname&lt;/span&gt; = user.&lt;span class=&quot;fu&quot;&gt;getNickname&lt;/span&gt;();
    user_BO.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt; = user.&lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;();
    user_BO.&lt;span class=&quot;fu&quot;&gt;gender&lt;/span&gt; = user.&lt;span class=&quot;fu&quot;&gt;getGender&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; user_BO;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;toUser&lt;/span&gt;() {
    User user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;();
    user.&lt;span class=&quot;fu&quot;&gt;setUserId&lt;/span&gt;(userId);
    user.&lt;span class=&quot;fu&quot;&gt;setUsername&lt;/span&gt;(username);
    user.&lt;span class=&quot;fu&quot;&gt;setNickname&lt;/span&gt;(nickname);
    user.&lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(age);
    user.&lt;span class=&quot;fu&quot;&gt;setGender&lt;/span&gt;(gender);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; user;
  }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PetBO {
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long petId;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String petName;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; isCat;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; delete;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean isDog;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean clear;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; User_BO ownerUser;

  &lt;span class=&quot;co&quot;&gt;// getter setter&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; PetBO &lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(Pet pet) {
    PetBO petBO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PetBO&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;petId&lt;/span&gt; = pet.&lt;span class=&quot;fu&quot;&gt;getPetId&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;petName&lt;/span&gt; = pet.&lt;span class=&quot;fu&quot;&gt;getPetName&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;isCat&lt;/span&gt; = pet.&lt;span class=&quot;fu&quot;&gt;isCat&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;delete&lt;/span&gt; = pet.&lt;span class=&quot;fu&quot;&gt;isDelete&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;isDog&lt;/span&gt; = pet.&lt;span class=&quot;fu&quot;&gt;getDog&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;clear&lt;/span&gt; = pet.&lt;span class=&quot;fu&quot;&gt;getClear&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;ownerUser&lt;/span&gt; = User_BO.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(pet.&lt;span class=&quot;fu&quot;&gt;getOwner&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; petBO;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Pet &lt;span class=&quot;fu&quot;&gt;toPet&lt;/span&gt;() {
    Pet pet = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Pet&lt;/span&gt;();
    pet.&lt;span class=&quot;fu&quot;&gt;setPetId&lt;/span&gt;(petId);
    pet.&lt;span class=&quot;fu&quot;&gt;setPetName&lt;/span&gt;(petName);
    pet.&lt;span class=&quot;fu&quot;&gt;setCat&lt;/span&gt;(isCat);
    pet.&lt;span class=&quot;fu&quot;&gt;setDelete&lt;/span&gt;(delete);
    pet.&lt;span class=&quot;fu&quot;&gt;setDog&lt;/span&gt;(isDog);
    pet.&lt;span class=&quot;fu&quot;&gt;setClear&lt;/span&gt;(clear);
    pet.&lt;span class=&quot;fu&quot;&gt;setOwner&lt;/span&gt;(ownerUser.&lt;span class=&quot;fu&quot;&gt;toUser&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; pet;
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;bo-转换为-vo&quot;&gt;BO 转换为 VO&lt;/h3&gt;
&lt;p&gt;如下新建 &lt;code&gt;VOGenerator&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOOs&lt;/span&gt;(suffix = VOGenerator.&lt;span class=&quot;fu&quot;&gt;VO_SUFFIX&lt;/span&gt;, fromSuffix = BOGenerator.&lt;span class=&quot;fu&quot;&gt;BO_SUFFIX&lt;/span&gt;, ooosPackages = {
        VOGenerator.&lt;span class=&quot;fu&quot;&gt;PACKAGE_BO&lt;/span&gt;
}, ooos = {
        &lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(id = &lt;span class=&quot;st&quot;&gt;&quot;user_vo_id&quot;&lt;/span&gt;, from = User_BO.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;),
        &lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(from = User_BO.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/*, suffix = VOGenerator.VO_SUFFIX_USER*/&lt;/span&gt;,
                fromSuffix = BOGenerator.&lt;span class=&quot;fu&quot;&gt;BO_SUFFIX_USER&lt;/span&gt;,
                conversion = {
                        &lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
                                fieldName = &lt;span class=&quot;st&quot;&gt;&quot;gender&quot;&lt;/span&gt;,
                                targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;genderDesc&quot;&lt;/span&gt;,
                                targetType = String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                                conversionMethodName = &lt;span class=&quot;st&quot;&gt;&quot;conversionGender&quot;&lt;/span&gt;,
                                inverseConversionMethodName = &lt;span class=&quot;st&quot;&gt;&quot;inverseConversionGender&quot;&lt;/span&gt;,
                                replace = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
                        ),
                        &lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
                                fieldName = &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;,
                                targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;ageDes&quot;&lt;/span&gt;,
                                targetType = String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                                conversionMethodName = &lt;span class=&quot;st&quot;&gt;&quot;conversionAge&quot;&lt;/span&gt;,
                                conversionMethodClass = AgeConversion.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                                replace = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
                        )
                }
        ),
        &lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(from = PetBO.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                conversion = {
                        &lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
                                fieldName = &lt;span class=&quot;st&quot;&gt;&quot;ownerUser&quot;&lt;/span&gt;,
                                targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;ownerUser&quot;&lt;/span&gt;,
                                targetTypeId = &lt;span class=&quot;st&quot;&gt;&quot;user_vo_id&quot;&lt;/span&gt;,
                                replace = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
                        )
                }
        )
})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; VOGenerator {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String VO_SUFFIX = &lt;span class=&quot;st&quot;&gt;&quot;VO&quot;&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;//    public static final String VO_SUFFIX_USER = &quot;_VO&quot;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String PACKAGE_BO = &lt;span class=&quot;st&quot;&gt;&quot;com.wangjiegulu.rapidooo.depmodule.bll.xbo&quot;&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;conversionGender&lt;/span&gt;(Integer gender) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == gender) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;unknown&quot;&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (gender) {
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;female&quot;&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;male&quot;&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;unknown&quot;&lt;/span&gt;;
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Integer &lt;span class=&quot;fu&quot;&gt;inverseConversionGender&lt;/span&gt;(String genderDesc) {
        &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (genderDesc) {
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;male&quot;&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;female&quot;&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还是通过 &lt;code&gt;@OOOs&lt;/code&gt; 注解来指定要生成的类，但这里使用了 &lt;code&gt;ooosPackages&lt;/code&gt; 来指定哪些包下面的类需要进行转换。&lt;/p&gt;
&lt;p&gt;转换源为上面生成的:&lt;code&gt;User_BO&lt;/code&gt; 和 &lt;code&gt;PetBO&lt;/code&gt;，生成的类名为 &lt;code&gt;UserVO&lt;/code&gt; 和 &lt;code&gt;PetVO&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;UserVO&lt;/code&gt; 中扩展了两个字段:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
       fieldName = &lt;span class=&quot;st&quot;&gt;&quot;gender&quot;&lt;/span&gt;,
       targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;genderDesc&quot;&lt;/span&gt;,
       targetType = String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
       conversionMethodName = &lt;span class=&quot;st&quot;&gt;&quot;conversionGender&quot;&lt;/span&gt;,
       inverseConversionMethodName = &lt;span class=&quot;st&quot;&gt;&quot;inverseConversionGender&quot;&lt;/span&gt;,
       replace = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从转换源的 &lt;code&gt;gender&lt;/code&gt; 字段扩展出 &lt;code&gt;genderDesc&lt;/code&gt; （用于在 View 上进行展示），类型为 &lt;code&gt;String&lt;/code&gt; ，并且 &lt;code&gt;replace = false&lt;/code&gt;（&lt;code&gt;gender&lt;/code&gt; 与 &lt;code&gt;genderDesc&lt;/code&gt; 共存）:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;conversionMethodName:&lt;/strong&gt;指定转换方法，从 &lt;code&gt;gender&lt;/code&gt; 转换为 &lt;code&gt;genderDesc&lt;/code&gt;。默认为不设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inverseConversionMethodName:&lt;/strong&gt;指定逆转换方法，从 &lt;code&gt;genderDesc&lt;/code&gt; 转换为 &lt;code&gt;gender&lt;/code&gt;。默认为不设置。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;code&gt;conversionMethodName&lt;/code&gt; 和 &lt;code&gt;inverseConversionMethodName&lt;/code&gt; 方法指定方法名字时，方法签名必须满足以下其一:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;public static [转换目标类型] conversionXxx([转换源字段类型] param)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static [转换目标类型] conversionXxx([转换源 class 类型] param1, [转换源字段类型] param2)&lt;/code&gt;&lt;br/&gt;如上面 &lt;code&gt;gender&lt;/code&gt; 和 &lt;code&gt;genderDesc&lt;/code&gt; 的转换:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static String conversionGender(UserVO userVO, Integer gender)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static Integer inverseConversionGender(String genderDesc)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;通过设置以上两个方法，&lt;code&gt;gender&lt;/code&gt; 和 &lt;code&gt;genderDesc&lt;/code&gt; 两个字段会实现互相绑定，改变其中一个字段，另一个字段也会自动发生改变。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOOConversion&lt;/span&gt;(
       fieldName = &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;,
       targetFieldName = &lt;span class=&quot;st&quot;&gt;&quot;ageDes&quot;&lt;/span&gt;,
       targetType = String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
       conversionMethodName = &lt;span class=&quot;st&quot;&gt;&quot;conversionAge&quot;&lt;/span&gt;,
       conversionMethodClass = AgeConversion.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
       replace = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;UserVO&lt;/code&gt; 中还从转换源的 &lt;code&gt;age&lt;/code&gt; 扩展了一个 &lt;code&gt;ageDesc&lt;/code&gt; 属性（替换掉 &lt;code&gt;age&lt;/code&gt; 字段，不共存），并指定了 &lt;code&gt;conversionMethodName&lt;/code&gt;，但是转换方法并不在 &lt;code&gt;VOGenerator&lt;/code&gt; 类中，而是在 &lt;code&gt;AgeConversion&lt;/code&gt; 类中，所以需要显示地进行指定 &lt;code&gt;conversionMethodClass&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;conversionMethodClass:&lt;/strong&gt;转换方法所在的 Class，默认不设置则表示在当前的 &lt;code&gt;Generator&lt;/code&gt; 类中。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另外 &lt;code&gt;PetVO&lt;/code&gt; 扩展了一个 &lt;code&gt;ownerUser&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最后编译生成的代码如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserVO &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Serializable {
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long userId;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String nickname;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String ageDes;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer gender;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String genderDesc;

  &lt;span class=&quot;co&quot;&gt;// getter setter&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setGender&lt;/span&gt;(Integer gender) {
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;gender&lt;/span&gt; = gender;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;genderDesc&lt;/span&gt; = VOGenerator.&lt;span class=&quot;fu&quot;&gt;conversionGender&lt;/span&gt;(gender);
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setGenderDesc&lt;/span&gt;(String genderDesc) {
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;genderDesc&lt;/span&gt; = genderDesc;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;gender&lt;/span&gt; = VOGenerator.&lt;span class=&quot;fu&quot;&gt;inverseConversionGender&lt;/span&gt;(genderDesc);
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; UserVO &lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(User_BO user_BO) {
    UserVO userVO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserVO&lt;/span&gt;();
    userVO.&lt;span class=&quot;fu&quot;&gt;userId&lt;/span&gt; = user_BO.&lt;span class=&quot;fu&quot;&gt;getUserId&lt;/span&gt;();
    userVO.&lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt; = user_BO.&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;();
    userVO.&lt;span class=&quot;fu&quot;&gt;nickname&lt;/span&gt; = user_BO.&lt;span class=&quot;fu&quot;&gt;getNickname&lt;/span&gt;();
    userVO.&lt;span class=&quot;fu&quot;&gt;ageDes&lt;/span&gt; = AgeConversion.&lt;span class=&quot;fu&quot;&gt;conversionAge&lt;/span&gt;(user_BO.&lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;());
    userVO.&lt;span class=&quot;fu&quot;&gt;gender&lt;/span&gt; = user_BO.&lt;span class=&quot;fu&quot;&gt;getGender&lt;/span&gt;();
    userVO.&lt;span class=&quot;fu&quot;&gt;genderDesc&lt;/span&gt; = VOGenerator.&lt;span class=&quot;fu&quot;&gt;conversionGender&lt;/span&gt;(user_BO.&lt;span class=&quot;fu&quot;&gt;getGender&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userVO;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User_BO &lt;span class=&quot;fu&quot;&gt;toUser_BO&lt;/span&gt;() {
    User_BO user_BO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User_BO&lt;/span&gt;();
    user_BO.&lt;span class=&quot;fu&quot;&gt;setUserId&lt;/span&gt;(userId);
    user_BO.&lt;span class=&quot;fu&quot;&gt;setUsername&lt;/span&gt;(username);
    user_BO.&lt;span class=&quot;fu&quot;&gt;setNickname&lt;/span&gt;(nickname);
    &lt;span class=&quot;co&quot;&gt;// Loss field:age, recommend to use `inverseConversionMethodName`.&lt;/span&gt;
    user_BO.&lt;span class=&quot;fu&quot;&gt;setGender&lt;/span&gt;(gender);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; user_BO;
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;以上 &lt;code&gt;User_BO&lt;/code&gt;，由于 &lt;code&gt;age&lt;/code&gt; 属性是 &lt;code&gt;replace&lt;/code&gt;，并且只设置了 &lt;code&gt;conversionMethodName&lt;/code&gt;，并没有设置 &lt;code&gt;inverseConversionMethodName&lt;/code&gt;，所以在 &lt;code&gt;toUser_BO()&lt;/code&gt; 方法进行逆转换时会丢失 &lt;code&gt;age&lt;/code&gt; 属性，所以推荐使用 &lt;code&gt;inverseConversionMethodName&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PetVO {
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long petId;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String petName;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; isCat;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; delete;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean isDog;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean clear;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; UserVO ownerUser;

  &lt;span class=&quot;co&quot;&gt;// getter setter&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; PetVO &lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(PetBO petBO) {
    PetVO petVO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PetVO&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;petId&lt;/span&gt; = petBO.&lt;span class=&quot;fu&quot;&gt;getPetId&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;petName&lt;/span&gt; = petBO.&lt;span class=&quot;fu&quot;&gt;getPetName&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;isCat&lt;/span&gt; = petBO.&lt;span class=&quot;fu&quot;&gt;isCat&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;delete&lt;/span&gt; = petBO.&lt;span class=&quot;fu&quot;&gt;isDelete&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;isDog&lt;/span&gt; = petBO.&lt;span class=&quot;fu&quot;&gt;getDog&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;clear&lt;/span&gt; = petBO.&lt;span class=&quot;fu&quot;&gt;getClear&lt;/span&gt;();
    petVO.&lt;span class=&quot;fu&quot;&gt;ownerUser&lt;/span&gt; = UserVO.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(petBO.&lt;span class=&quot;fu&quot;&gt;getOwnerUser&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; petVO;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; PetBO &lt;span class=&quot;fu&quot;&gt;toPetBO&lt;/span&gt;() {
    PetBO petBO = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PetBO&lt;/span&gt;();
    petBO.&lt;span class=&quot;fu&quot;&gt;setPetId&lt;/span&gt;(petId);
    petBO.&lt;span class=&quot;fu&quot;&gt;setPetName&lt;/span&gt;(petName);
    petBO.&lt;span class=&quot;fu&quot;&gt;setCat&lt;/span&gt;(isCat);
    petBO.&lt;span class=&quot;fu&quot;&gt;setDelete&lt;/span&gt;(delete);
    petBO.&lt;span class=&quot;fu&quot;&gt;setDog&lt;/span&gt;(isDog);
    petBO.&lt;span class=&quot;fu&quot;&gt;setClear&lt;/span&gt;(clear);
    petBO.&lt;span class=&quot;fu&quot;&gt;setOwnerUser&lt;/span&gt;(ownerUser.&lt;span class=&quot;fu&quot;&gt;toUser_BO&lt;/span&gt;());
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; petBO;
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;对象池的使用&quot;&gt;对象池的使用&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@OOOs&lt;/span&gt;(suffix = &lt;span class=&quot;st&quot;&gt;&quot;BO&quot;&lt;/span&gt;, ooos = {
        &lt;span class=&quot;fu&quot;&gt;@OOO&lt;/span&gt;(from = Pet.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, pool = &lt;span class=&quot;fu&quot;&gt;@OOOPool&lt;/span&gt;(
            acquireMethod = &lt;span class=&quot;st&quot;&gt;&quot;acquirePetBO&quot;&lt;/span&gt;, 
            releaseMethod = &lt;span class=&quot;st&quot;&gt;&quot;releasePetBO&quot;&lt;/span&gt;
        ))
})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ObjectPoolBOGenerator {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; Pools.&lt;span class=&quot;fu&quot;&gt;Pool&lt;/span&gt;&amp;lt;PetBO&amp;gt; petBOPool = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Pools.&lt;span class=&quot;fu&quot;&gt;SimplePool&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; PetBO &lt;span class=&quot;fu&quot;&gt;acquirePetBO&lt;/span&gt;() {
        PetBO petBO = petBOPool.&lt;span class=&quot;fu&quot;&gt;acquire&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == petBO ? &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PetBO&lt;/span&gt;() : petBO;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;releasePetBO&lt;/span&gt;(PetBO petBO) {
        petBOPool.&lt;span class=&quot;fu&quot;&gt;release&lt;/span&gt;(petBO);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码，通过添加 &lt;code&gt;@OOOPool&lt;/code&gt; 注解，并指定 &lt;code&gt;acquireMethod&lt;/code&gt; 和 &lt;code&gt;releaseMethod&lt;/code&gt; 两个方法来创建和回收相应的对象即可（这里使用了 Android Support 包中的 &lt;code&gt;Pools.SimplePool&lt;/code&gt; 来实现对象池）。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;Copyright 2018 Wang Jie

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 29 Apr 2018 06:53:00 +0000</pubDate>
<dc:creator>天天_byconan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiantianbyconan/p/8971041.html</dc:identifier>
</item>
<item>
<title>并发编程（一）：基础概述 - 三杯然诺</title>
<link>http://www.cnblogs.com/sbrn/p/8971040.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sbrn/p/8971040.html</guid>
<description>&lt;p&gt;  本篇博客主要讲述并发编程中的一些基础内容，并了解一下基本概念。&lt;/p&gt;

&lt;p&gt;  首先我们了解一下什么是并发？&lt;/p&gt;
&lt;p&gt;  同时拥有两个或者多个线程，如果程序在单核处理器上运行，多个线程将交替的换入或者换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态；如果运行在多核处理器上，此时，程序中的每个线程都将分配到一个处理器核上，因此可以同时运行。&lt;/p&gt;
&lt;p&gt;  什么又是高并发呢？&lt;/p&gt;
&lt;p&gt;  高并发是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。&lt;/p&gt;
&lt;p&gt;  小结：&lt;/p&gt;
&lt;p&gt;  并发是多个线程操作相同的资源，保证线程安全，合理使用资源；高并发是指服务能同时处理很多请求，提高程序性能。&lt;/p&gt;

&lt;p&gt;  我们都知道cpu有多级缓存机制，那么问题来了，为什么需要cpu cache？&lt;/p&gt;
&lt;p&gt;  cpu的频率太快了，快到主存跟不上，这样在处理器时钟周期内，cpu常常需要等待主存，浪费资源。所以cache的出现，是为了缓解cpu和内存之间速度的不匹配问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429100754163-758162352.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  cpu的多级缓存机制有两个显著的特点：乱序执行优化和缓存一致性。&lt;/p&gt;
&lt;p&gt;  乱序执行优化是处理器为提高运算速度而做出违背代码原有顺序的优化。例如我们呀计算a=10; b=200; result=a*b; 实际执行的结果可能如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429102145339-1300509812.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  缓存一致性：用于保证多个cpu cache之间缓存共享数据的一致，MESI是缓存一致性协议中的一个，MESI将cache line（cache与内存数据交换的最小单位）的状态分为modify、exclusive、shared、invalid，分别是修改、独占、共享和失效。&lt;/p&gt;
&lt;p&gt;  modify：当前cpu cache拥有最新数据，其他cpu拥有失效数据，虽然当前cpu中的数据和主存是不一致的，但是以当前cpu的数据为准&lt;/p&gt;
&lt;p&gt;  exclusive:只有当前cpu中有数据，其他cpu中没有该数据，当前cpu的数据和主存中的数据是一致的&lt;/p&gt;
&lt;p&gt;  shared：当前cpu和其他cpu中都有共同数据，并且和主存中的数据一致&lt;/p&gt;
&lt;p&gt;  invalid:当前cpu中的数据失效，数据应该从主存中获取，其他cpu可能有数据也可能没有数据，当前cpu的数据和主存被认为是不一致的；对于invalid而言，在MESI协议中采取的是写失效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429113122457-1884242167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  MESI协议中，每个cache的控制器不仅知道自己的操作（local read和local write），通过监听也知道其他cpu中的cache操作（remote read 和remote write），对于自己本地缓存有的数据，cpu仅需要发起local操作；否则发起remote操作，从主存中读取数据，cache控制器通过总线监听，仅能够知道其他cpu发起的remote操作，但是如果local操作会导致数据不一致性，cache控制器会通知其他cpu的cache控制器修改状态。&lt;/p&gt;
&lt;p&gt;  local read：读本地cache中的数据&lt;/p&gt;
&lt;p&gt;  local write：将数据写到本地cache&lt;/p&gt;
&lt;p&gt;  remote read: 读取内存中的数据&lt;/p&gt;
&lt;p&gt;  remote write：将数据写到主存。&lt;/p&gt;

&lt;p&gt;  MESI协议中cache line的数据状态有四种，引起数据状态转换的cpu cache的操作也有四种，所以共有16中状态转换，下面我们来简单看一个场景&lt;/p&gt;
&lt;p&gt;  最初的时候，所有cpu都没有数据，某一个CPU发生读操作，此时发生remote read来读取内存中的数据，数据从主存中读取到当前CPU的cache，状态为E（只有当前cpu有数据，且和主存一致），此时如果有其他CPU也读取数据，则状态修改为S（共享，多个cpu之间拥有相同的数据，并且和主存保持一致），如果其中某一个CPU发生数据修改，那么该CPU中数据状态改为M（拥有最新数据，和主存不一致，但是以单签cpu中的为准），并通知其他拥有该数据的cpu数据失效，其他cpu中的cache line状态修改为I（失效，和主存中的数据被认为不一致，数据不可用应该重新获取）&lt;/p&gt;
&lt;p&gt;  注意：cpu的cache控制器会监听总线上其他CPU的操作，所以可以知道其他CPU的行为（如其他CPU进行了RR等）&lt;/p&gt;
&lt;p&gt;  MESI协议是为了保证多个cpu cache中共享数据的一致性。&lt;/p&gt;

&lt;p&gt;  java内存模型和主机的内存是什么关系呢？&lt;/p&gt;
&lt;p&gt;  我们首先分别看一下，java内存模型和主机内存模型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429113709416-135091536.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  根据jvm的基础知识我们可以知道，堆区是线程共享的，栈区是线程独占的。&lt;/p&gt;

&lt;p&gt;  其实CPU中是有寄存器的存在的，寄存器拥有非常高的读写速度，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429114616487-2030994250.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  我们jvm的内存与计算机的内存的对应关系如下（堆和栈都是分布在主内存中）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429114743281-1454131681.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  有了对上图的理解，我们来看下java内存模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429142348379-1694371945.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  为了获取更好的性能虚拟机或硬件系统优先让工作内存存储于寄存器和高速缓存中，本地内存是java内存模型的抽象的概念，涵盖了寄存器告诉缓存等。&lt;/p&gt;
&lt;p&gt;  注意java内存模型和jvm内存模型的区别：java内存模型中线程的工作内存是cpu的寄存器和高速缓存的一个抽象描述，jvm内存模型是对内存的物理划分，只局限在内存而且只局限在jvm的内存。&lt;/p&gt;

&lt;p&gt;  java内存模型的同步操作与规则如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377586/201804/1377586-20180429143425358-1820130371.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  lock（锁定）：作用于主内存的变量，把一个变量标志为一个线程独占状态&lt;/p&gt;
&lt;p&gt;  unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定&lt;/p&gt;
&lt;p&gt;  read（读取）：作用于主内存的变量，把一个变量从主内存传输到线程的工作内存中，以便随后的load动作使用&lt;/p&gt;
&lt;p&gt;  load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量放入工作内存的变量副本中&lt;/p&gt;
&lt;p&gt;  use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎&lt;/p&gt;
&lt;p&gt;  assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量&lt;/p&gt;
&lt;p&gt;  store（存储）：作用于工作内存的变量，把工作内存中一个变量的值传送给主内存中，以便随后的write操作&lt;/p&gt;
&lt;p&gt;  write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中&lt;/p&gt;




</description>
<pubDate>Sun, 29 Apr 2018 06:51:00 +0000</pubDate>
<dc:creator>三杯然诺</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sbrn/p/8971040.html</dc:identifier>
</item>
<item>
<title>设计模式就该这么学：以微信订阅号来讲观察者模式(第三篇) - 骑白马的菜鸟</title>
<link>http://www.cnblogs.com/zishengY/p/8970961.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zishengY/p/8970961.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;继续《设计模式就该这么学》系列文章，今天以当前比较火的微信订阅号给大家介绍应用得比较多的一种设计模式——观察者模式，之后再来介绍java拉模型方式的内置设计模式实现，最后附带一个项目实际观察者应用的例子！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　&lt;strong&gt;《设计模式就该这么学》&lt;/strong&gt;系列文章:&lt;/p&gt;
&lt;blockquote readability=&quot;0.10153846153846&quot;&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/zishengY/p/8847110.html&quot;&gt;设计模式就该这么学：为什么要学设计模式？（开篇漫谈）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/zishengY/p/8885691.html&quot;&gt;设计模式就该这么学：要走心才能遵循设计模式五大原则(第二篇)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/zishengY/p/8869823.html&quot;&gt;设计模式就该这么学：以微信订阅号来讲观察者模式(第三篇)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/zishengY/p/7056948.html&quot;&gt;观察者模式实际应用：监听线程，意外退出线程后自动重启&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;一. 什么是观察者模式&lt;/h2&gt;
&lt;p&gt;以《Head First 设计模式》这本书中的定义：&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;观察者模式&lt;/strong&gt;：它定义了对象之间的一（Subject）对多（Observer）的依赖，这样一来，当一个对象（Subject）改变时，它的所有的依赖者都会收到通知并自动更新。　　　&lt;/p&gt;
&lt;p&gt;首先看下观察者模式的类图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/847059/201804/847059-20180423202855346-1414427259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;主题（Subject）接口&lt;/strong&gt;：对象使用此接口注册为观察者，或者把自己从观察者中移除。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察者（Observer）接口&lt;/strong&gt;：所有潜在的观察者都必须实现该接口，这个接口只有update一个方法，他就是在主题状态发生变化的时候被调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体主题（ConcreteSubject）类&lt;/strong&gt;：它是要实现Subject接口，除了注册（registerObserver）和撤销（removeObserver）外，它还有一个通知所有的观察者（notifyObservers）方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体观察者（ConcreteObserver）类&lt;/strong&gt;：它是要实现ObserverJ接口，并且要注册主题，以便接受更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;二、以微信订阅号来深入介绍观察者模式&lt;/h2&gt;
&lt;p&gt;看了上面定义及类图好像不太容易理解，微信订阅号我相信大家都不陌生，接下来就微信订阅号的例子来介绍下观察者模式。首先看下面一张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/847059/201804/847059-20180417203633978-892191362.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，微信订阅号就是我们的主题，用户就是观察者。他们在这个过程中扮演的角色及作用分别是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;订阅号就是主题，业务就是推送消息&lt;/li&gt;
&lt;li&gt;观察者想要接受推送消息，只需要订阅该主题即可&lt;/li&gt;
&lt;li&gt;当不再需要消息推送时，取消订阅号关注即可&lt;/li&gt;
&lt;li&gt;只要订阅号还在，观察者可以一直去进行关注&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; 接下来让我们通过一段示例，三位同事zhangsai、liyong、liujing订阅人民日报订阅号为例来介绍观察者模式（Obsever），代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、人民日报接口&lt;/span&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; PeoplesDaily
   {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加订阅者&lt;/span&gt;
       &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegisterObserver(Observer observer);
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消订阅&lt;/span&gt;
       &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RemoveObserver(Observer observer);
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送人民日报&lt;/span&gt;
       &lt;span&gt;void&lt;/span&gt;&lt;span&gt; notifyObservers();
   }
 
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、订阅者接口&lt;/span&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Observer
   {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有新的人民日报了就会被执行通知&lt;/span&gt;
       &lt;span&gt;void&lt;/span&gt;&lt;span&gt; update();
   }
 
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、人民日报&lt;/span&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PeopleNewsPaper &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; PeoplesDaily
   {
       &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Observer&amp;gt; subList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Observer&amp;gt;&lt;span&gt;();
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegisterObserver(Observer observer)
       {
           subList.Add(observer);
       }
 
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RemoveObserver(Observer observer)
       {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (subList.IndexOf(observer) &amp;gt;= 0&lt;span&gt;)
           {
               subList.Remove(observer);
           }
       }
 
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;推送人民日报消息了~~&lt;/span&gt;
       &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; notifyObservers()
       {
           &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Observer sub : subList)
           {
               sub.update();
           }
       }      
   }
 
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、订阅者&lt;/span&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; subHuman &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Observer
   {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅者的名字&lt;/span&gt;
       &lt;span&gt;private&lt;/span&gt;&lt;span&gt; string name;
 
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; subHuman(string f_name)
       {
           name &lt;/span&gt;=&lt;span&gt; f_name;
       }
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知订阅者有新人民日报推送消息了&lt;/span&gt;
       &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; update()
       {
           system.out.println(p_name &lt;/span&gt;+ &quot;!! 有新的人民日报消息了，请查收！&quot;&lt;span&gt;);
       }
        
   }

   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、测试开始订阅，和调用了&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main(string[] args)
        {
            PeopleNewsPaper paper &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PeopleNewsPaper();
            subHuman zhsangsai &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; subHuman(&quot;张赛&quot;&lt;span&gt;);
            subHuman liyong &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; subHuman(&quot;李勇&quot;&lt;span&gt;);
            subHuman liujin &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; subHuman(&quot;刘晶&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;张赛订阅人民日报&lt;/span&gt;
&lt;span&gt;            paper.RegisterObserver(zhsangsai);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;李勇订阅人民日报&lt;/span&gt;
&lt;span&gt;            paper.RegisterObserver(liyong);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;刘晶订阅人民日报&lt;/span&gt;
&lt;span&gt;            paper.RegisterObserver(liujin);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有新人民日报推送消息了&lt;/span&gt;
&lt;span&gt;            paper.notifyObservers();
            system.out.println(&lt;/span&gt;&quot;---------------发完人民日报了------------------&quot;&lt;span&gt;);
 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;张赛不想订了，取消人民日报&lt;/span&gt;
&lt;span&gt;            paper.RemoveObserver(zhsangsai);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;又有新人民日报了  就没有张赛的人民日报 了&lt;/span&gt;
&lt;span&gt;            paper.notifyObservers();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
张赛!! 有新的人民日报消息了，请查收！

李勇!! 有新的人民日报消息了，请查收！

刘晶!! 有新的人民日报消息了，请查收！

---------------发完人民日报了------------------
张赛!! 有新的人民日报消息了，请查收！

李勇!! 有新的人民日报消息了，请查收！
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;三、再来说设计模式的推拉模型&lt;/h2&gt;
&lt;p&gt;在观察者模式中，又分为推模型和拉模型两种方式。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;推模型&lt;/strong&gt;：主题对象向观察者推送主题的详细信息，不管观察者是否需要，每次有新的信息就会推送给它的所有的观察者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拉模型&lt;/strong&gt;：主题对象是根据观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而它们的区别在于：&lt;/p&gt;
&lt;p&gt;“推”的好处包括：&lt;br/&gt;1、高效。如果没有更新发生，不会有任何更新消息推送的动作，即每次消息推送都发生在确确实实的更新事件之后，所以这种推送是有意义的。&lt;br/&gt;2、实时。事件发生后的第一时间即可触发通知操作。&lt;br/&gt;“拉”的好处包括：&lt;br/&gt;1、如果观察者众多，那么主题要维护订阅者的列表臃肿，把订阅关系解脱到Observer去完成，什么时候要自己去拉数据就好了。&lt;br/&gt;2、Observer可以不理会它不关心的变更事件，只需要去获取自己感兴趣的事件即可。&lt;/p&gt;
&lt;p&gt;根据上面的描述，发现前面的例子就是典型的推模型，下面我先来介绍下java内置的拉模型设计模式实现，再给出一个拉模型的实例。&lt;/p&gt;
&lt;p&gt;在JAVA编程语言的java.util类库里面，提供了一个Observable类以及一个Observer接口，用来实现JAVA语言对观察者模式的支持。&lt;br/&gt;　　Observer接口：这个接口代表了观察者对象，它只定义了一个方法，即update()方法，每个观察者都要实现这个接口。当主题对象的状态发生变化时，主题对象的notifyObservers()方法就会调用这一方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Observer {
    &lt;span&gt;void&lt;/span&gt; update(Observable o, Object arg);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　Observable类：这个类代表了主体对象，主题对象可以有多个观察者，主题对象发生变化时，会调用Observable的notifyObservers()方法，此方法调用所有的具体观察者的update()方法，从而使所有的观察者都被通知更新自己&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; java.util;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Observable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; changed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Vector obs;


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Observable() {
        obs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Vector&amp;lt;&amp;gt;&lt;span&gt;();
    }
    
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个观察者&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addObserver(Observer o) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (o == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;obs.contains(o)) {
            obs.addElement(o);
        }
    }

   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除一个观察者&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteObserver(Observer o) {
        obs.removeElement(o);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; notifyObservers() {
        notifyObservers(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知所有的观察者&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; notifyObservers(Object arg) {

        Object[] arrLocal;

        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
          
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;changed)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            arrLocal &lt;/span&gt;=&lt;span&gt; obs.toArray();
            clearChanged();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用Observer类通知所有的观察者&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = arrLocal.length-1; i&amp;gt;=0; i--&lt;span&gt;)
            ((Observer)arrLocal[i]).update(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arg);
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteObservers() {
        obs.removeAllElements();
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setChanged() {
        changed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; clearChanged() {
        changed &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略......&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来再介绍我用java这种内置的观察者设计模式在项目中的一个实际应用，详细请看我的这篇博文：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/zishengY/p/7056948.html&quot;&gt;观察者模式实际应用：监听线程，意外退出线程后自动重启&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;这里只介绍下思路：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目场景&lt;/strong&gt;：用户那边会不定期的上传文件到一个ftp目录，我需要实现新上传的文件做一个自动检测，每次只要有文件新增，自动解析新增文件内容入库，并且要保证该功能的稳定性！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现思路&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1、监听器初始化创建：首先在tomcat启动的时候，利用监听器初始化创建一个监控文件新增线程，如下：　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ThreadStartUpListenser &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ServletContextListener
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监控文件新增线程&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; WatchFilePathTask r = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WatchFilePathTask();

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Log log = LogFactory.getLog(ThreadStartUpListenser.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; contextDestroyed(ServletContextEvent paramServletContextEvent)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; r.interrupt();&lt;/span&gt;
&lt;span&gt;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; contextInitialized(ServletContextEvent paramServletContextEvent)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将监控文件类添加为一个观察者，并启动一个线程&lt;/span&gt;
        ObserverListener listen = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ObserverListener();
        r.addObserver(listen);
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(r).start();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; r.start();&lt;/span&gt;
        log.info(&quot;ImportUserFromFileTask is started!&quot;&lt;span&gt;);
    }

}
     &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、&lt;strong&gt;主体对象&lt;/strong&gt;：即下面的监控文件新增类WatchFilePathTask ，每次有新文件进来，自动解析该文件，挂掉之后，调用动doBusiness()里面的notifyObservers()方法，伪代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承java内置观察者模式实现的Observable 类&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WatchFilePathTask &lt;span&gt;extends&lt;/span&gt; Observable &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Log log = LogFactory.getLog(WatchFilePathTask.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String FILE_PATH =&lt;span&gt; ConfigUtils.getInstance()
            .getValue(&lt;/span&gt;&quot;userfile_path&quot;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; WatchService watchService;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 此方法一经调用，立马可以通知观察者，在本例中是监听线程 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doBusiness()
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.setChanged();
        }
        notifyObservers();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run()
    {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里省略监控新增文件的方法&lt;/span&gt;
        }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e)
        {
            e.printStackTrace();
            
            doBusiness();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在抛出异常时调用，通知观察者，让其重启线程&lt;/span&gt;
&lt;span&gt;        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、&lt;strong&gt;观察者对象：&lt;/strong&gt;即上面出现的&lt;strong&gt;ObserverListener&lt;/strong&gt;类，当主题对象的的notifyObservers()方法被调用的时候，就会调用该类的update()方法，伪代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现java内置观察者模式实现的Observer接口，并且注册主题WatchFilePathTask,以便线程挂掉的时候，再重启这个线程&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ObserverListener &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Observer
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Log log = LogFactory.getLog(ObserverListener.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; o 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; arg 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(Observable o, Object arg)
    {
        log.info(&lt;/span&gt;&quot;WatchFilePathTask挂掉&quot;&lt;span&gt;);
        WatchFilePathTask run &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WatchFilePathTask();
        run.addObserver(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(run).start();
        log.info(&lt;/span&gt;&quot;WatchFilePathTask重启&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于这个例子更多详细实现，请查看我的这篇文章：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/zishengY/p/7056948.html&quot;&gt;观察者模式实际应用：监听线程，意外退出线程后自动重启&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;　　　&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt; 学习本就是一个不断模仿、练习、再到最后面自己原创的过程。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;虽然可能从来不能写出超越网上通类型同主题博文，但为什么还是要写？&lt;br/&gt;于自己而言，博文主要是自己总结。假设自己有观众，毕竟讲是最好的学（见下图）。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;于读者而言，笔者能在这个过程get到知识点，那就是双赢了。&lt;br/&gt;当然由于笔者能力有限，或许文中存在描述不正确，欢迎指正、补充！&lt;br/&gt;感谢您的阅读。如果本文对您有用，那么请点赞鼓励。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/847059/201804/847059-20180415130414994-55161475.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


</description>
<pubDate>Sun, 29 Apr 2018 06:11:00 +0000</pubDate>
<dc:creator>骑白马的菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zishengY/p/8970961.html</dc:identifier>
</item>
<item>
<title>【图文详解】Hadoop集群搭建（CentOs6.3） - py小杰</title>
<link>http://www.cnblogs.com/52mm/p/p9.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/52mm/p/p9.html</guid>
<description>&lt;p&gt;本文主要详细地描述了hadoop集群的搭建以及一些配置文件的说明，用于自己复习以及供新人学习，若有错误之处还请指出。&lt;/p&gt;
&lt;h2 id=&quot;前期准备&quot;&gt;前期准备&lt;/h2&gt;
&lt;p&gt;先给出我的集群架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YXFkkzR.png&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;-0.81859410430839&quot;&gt;&lt;li&gt;到hadoop官网下载好hadoop安装包&lt;a href=&quot;http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.6.5/hadoop-2.6.5.tar.gz&quot; class=&quot;uri&quot;&gt;http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.6.5/hadoop-2.6.5.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;装好四台虚拟机（我的四台虚拟机是CentOs6.3系统）&lt;/li&gt;
&lt;li&gt;四台虚拟机都装好jdk&lt;/li&gt;
&lt;li&gt;四台虚拟机都配好免密登录&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;四台虚拟机都配置好ip地址和主机名映射关系(以下是我的地址映射关系)&lt;/p&gt;
&lt;p&gt;vim /etc/hosts&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.25.13   mini1
192.168.25.14   mini2
192.168.25.15   mini3
192.168.25.16   mini4&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上步骤有不会的可查看我的其他几篇博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/52mm/p/p8.html&quot; title=&quot;Linux下的常用配置&quot;&gt;Linux下的常用配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/52mm/p/p5.html&quot; title=&quot;Linux下配置免密登录&quot;&gt;Linux下配置免密登录&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;1、将hadoop安装包上传到mini1上，解压后改名，并创建目录hadoopdata与hadoop目录平行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tar -zxvf hadoop-2.6.5.tar.gz -C /root/apps/
cd /root/apps/
mv hadoop-2.6.5 hadoop
mkdir hadoopdata&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XarBESg.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、进入hadoop配置文件目录下,可看到以下配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd hadoop/etc/hadoop/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/JDJbHV2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、修改hadoop-env.sh配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/J5JUjxd.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim hadoop-env.sh
#写上自己的JAVA_HOME&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4、修改core-site.xml配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TLCiJaM.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim core-site.xml

&amp;lt;configuration&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;hdfs://mini1:9000&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/root/apps/hadoopdata&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fs.defaultFS：hadoop使用什么文件系统
hdfs://mini1:9000：指定hadoop系统使用hdfs文件系统，并指明namenode为mini1，客户端访问端口为9000

hadoop.tmp.dir：hadoop文件存储目录

有2个参数可配置，但一般来说我们不做修改。
fs.checkpoint.period表示多长时间记录一次hdfs的镜像,默认是1小时。
fs.checkpoint.size表示镜像文件快大小，默认64M。

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;fs.checkpoint.period&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;3600&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;fs.checkpoint.size&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;67108864&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5、修改hdfs-site.xml(可不做任何配置，使用默认)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4Mhf8VG.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim hdfs-site.xml

&amp;lt;configuration&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/root/apps/hadoopdata/name&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.datanode.data.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/root/apps/hadoopdata/data&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;3&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dfs.namenode.name.dir：namenode节点的数据存放目录
dfs.datanode.data.dir：datanode节点的数据存放目录
dfs.replication：集群中hdfs保存数据的副本数&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6、更改mapred-site.xml.template的配置文件名，并进行配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/kvTCs3c.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/d5q427Z.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mv mapred-site.xml.template mapred-site.xml
vim mapred-site.xml

&amp;lt;configuration&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mapreduce.framework.name：使用yarn运行mapreduce程序&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7、修改yarn-site.xml配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6sQ0NMw.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim yarn-site.xml

&amp;lt;configuration&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.hostname&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;mini1&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yarn.resourcemanager.hostname：指定YARN的老大（ResourceManager）的地址
yarn.nodemanager.aux-services：指定reducer获取数据的方式&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8、修改slaves文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/l5jPXOM.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim slaves
# 在此文件下写入需要启动datanode和nodemanager的机器（往往datanode和nodemanager在一台机器上启动），一行代表一台机器。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9、将hadoop添加到环境变量，并重新加载环境变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/g1J8LjF.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/profile

export HADOOP_HOME=/itcast/hadoop-2.4.1
export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin

source /etc/profile&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Apache提供的hadoop本地库是32位的，而在64位的服务器上就会有问题，因此需要自己对源码进行编译64位的版本。&lt;/p&gt;
&lt;p&gt;自己编译比较麻烦,可以去网站：&lt;a href=&quot;http://dl.bintray.com/sequenceiq/sequenceiq-bin/&quot; class=&quot;uri&quot;&gt;http://dl.bintray.com/sequenceiq/sequenceiq-bin/&lt;/a&gt; 下载对应的编译版本。&lt;/p&gt;
&lt;p&gt;准备好64位的lib包后做以下操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#解压到已经安装好的hadoop安装目录的lib/native 和 lib目录下
tar -zxvf hadoop-native-64-2.6.0.tar -C hadoop/lib/native 
tar -zxvf hadoop-native-64-2.6.0.tar -C hadoop/lib
#配置环境变量 
vi /etc/profile 
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native  
export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot; 
source /etc/profile
#hadoop检测本地库
hadoop checknative –a &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;10、将hadoop和配置文件分别分发给另外三台机器（mini2，mini3，mini4）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scp -r /root/apps/hadoop mini2:/root/apps/
scp -r /root/apps/hadoop mini3:/root/apps/
scp -r /root/apps/hadoop mini4:/root/apps/

scp /etc/profile mini2:/etc/
scp /etc/profile mini3:/etc/
scp /etc/profile mini4:/etc/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;不要忘记三台机器都要重新加载一下配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;11、初始化HDFS&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hadoop  namenode  -format&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;12、批量启动/停止&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#批量启动hdfs
start-dfs.sh
#批量停止hdfs
stop-dfs.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XK2m0gS.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Dajy9aH.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/IHiohYr.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8jB8AqJ.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#批量启动yarn
strat-yarn.sh
#批量停止yarn
stop-yarn.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ClFjKM8.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YAXYCu5.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/viR7pWe.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TC3U5Is.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#单独启动或停止hdfs，yarn
hadoop-daemon.sh start namenode     hadoop-daemon.sh stop namenode
hadoop-daemon.sh start datanode     hadoop-daemon.sh stop datanode

hadoop-daemon.sh start resourcemanager  hadoop-daemon.sh stop resourcemanager
hadoop-daemon.sh start nodemanager      hadoop-daemon.sh stop nodemanager&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;官网提供的版本本地库是32位的，在64位主机环境下无法执行。需要下载hadoop源码进行编译。&lt;/li&gt;
&lt;li&gt;自己编译参考&lt;a href=&quot;https://jingyan.baidu.com/article/ce436649fea8533772afd365.html&quot; class=&quot;uri&quot;&gt;https://jingyan.baidu.com/article/ce436649fea8533772afd365.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;配置文件&lt;code&gt;hdfs-site.xml&lt;/code&gt;可不做任何配置，使用默认即可&lt;/li&gt;
&lt;li&gt;集群中每台机器都要记得修改&lt;code&gt;/etc/hosts&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;集群中所有的机器配置环境变量后不要忘记source一下（因为本文的环境变量文件是通过scp命令传给各台机器的，很容易忘记source）&lt;/li&gt;
&lt;li&gt;配置免密登录的时候不要忘记本机也配置上（将mini1的公钥发给mini1）（ssh-copy-id mini1）&lt;/li&gt;
&lt;li&gt;如果哪台机器启动出错，可查看相应机器下的日志文件，根据错误信息百度查询解决方法（/root/apps/hadoop/logs/）(查看.log结尾的日志文件)&lt;/li&gt;
&lt;li&gt;严格按照上述流程安装（包括目录创建以及目录的位置），可顺利完成集群的搭建&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;集群中各个端口&quot;&gt;集群中各个端口&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rdb9a4W.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;更多配置文件信息参考：&lt;a href=&quot;https://blog.csdn.net/cuitaixiong/article/details/51591410&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/cuitaixiong/article/details/51591410&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;作者：py小杰&lt;/p&gt;
&lt;p&gt;博客地址：&lt;a href=&quot;http://www.cnblogs.com/52mm/&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/52mm/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 05:45:00 +0000</pubDate>
<dc:creator>py小杰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/52mm/p/p9.html</dc:identifier>
</item>
<item>
<title>Qt与FFmpeg联合开发指南（二）——解码（2）：封装和界面设计 - 冷豪</title>
<link>http://www.cnblogs.com/learnhow/p/8970893.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/learnhow/p/8970893.html</guid>
<description>&lt;p&gt;与解码相关的主要代码在上一篇博客中已经做了介绍，本篇我们会先讨论一下如何控制解码速度再提供一个我个人的封装思路。最后回归到界面设计环节重点看一下如何保证播放器界面在缩放和拖动的过程中保证视频画面的宽高比例。&lt;/p&gt;
&lt;p&gt;一、解码速度&lt;/p&gt;
&lt;p&gt;播放器播放媒体文件的时候播放进度需要我们自己控制。基本的控制方法有两种：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;根据FPS控制视频的播放帧率，让音频跟随。&lt;/li&gt;
&lt;li&gt;控制音频的播放解码速度，让视频跟随。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;媒体文件在编码的时候，正常情况下视频数据和音频输出是交替写入的。换句话说，解码每一帧视频数据伴随需要播放的音频数据也应该被解码。所以，方案一的实现就比较简单和直接。但是在有些情况下也可能会出现音视频编码不同步的问题，大部分情况是视频提前于音频。万一遇到这样的情况，如果需要让我们的播放器带有一定纠错功能就必须采用第二种方案。方案二的设计思路是当遇到音频数据时正常播放，遇到视频数据时先缓冲起来，再根据pts参数同步。&lt;/p&gt;
&lt;p&gt;方案一&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;QTime t;
QIODevice ioDevice;
t.restart();
AVPacket &lt;/span&gt;*pkt =&lt;span&gt; readPacket();
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pkt-&amp;gt;stream_index == videoIndex) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前为视频帧，计算视频播放每帧的间隔时间（1000/fps） - 解码消耗的时间（毫秒） = 实际解码间隔时间interval&lt;/span&gt;
&lt;span&gt;    codecPacket(pkt);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; el =&lt;span&gt; t.elapsed();
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; interval = &lt;span&gt;1000&lt;/span&gt; / fps - el &amp;gt; &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;1000&lt;/span&gt; / fps - el : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    QThread::msleep(interval);
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (pkt-&amp;gt;stream_index == audioIndex) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前为音频帧，直接让Qt的音频播放器播放&lt;/span&gt;
&lt;span&gt;    codecPacket(pkt);
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; data[&lt;span&gt;10000&lt;/span&gt;] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; toPCM(data);
    ioDevice&lt;/span&gt;-&amp;gt;&lt;span&gt;write(data, len);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方案二&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
AVPacket *pkt =&lt;span&gt; readPacket();

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pkt-&amp;gt;stream_index ==&lt;span&gt; audioIndex) {
    codecPacket(pkt);
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; data[AUDIO_IODEVICE_WRITE_SIZE] = { &lt;span&gt;0&lt;/span&gt;&lt;span&gt; };
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; toPCM(data);
    ioDevice&lt;/span&gt;-&amp;gt;&lt;span&gt;write(data, len);
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (pkt-&amp;gt;stream_index ==&lt;span&gt; videoIndex) {
    videoPacketList.push_back(pkt);
}

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (videoPacketList.size() &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; videoPts &amp;lt;&lt;span&gt; audioPts) {
    AVPacket &lt;/span&gt;*pkt =&lt;span&gt; videoPacketList.front();
    videoPacketList.pop_front();
    codecPacket(pkt);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方案遇到的另外一个问题是我们如何获取videoPts和audioPts这两个值。我个人的解决思路是在解码环节进行，即，每次对pkt进行一次解码就根据pkt的stream_index值分别记录解码后的AVFrame的pts。不过音频的pts和视频的pts不能直接比较。我们还需要根据各自的AVRational做一次换算。算法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;AVRational r;
frame&lt;/span&gt;-&amp;gt;pts * (&lt;span&gt;double&lt;/span&gt;)r.num / (&lt;span&gt;double&lt;/span&gt;)r.den;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二、封装思路讨论&lt;/p&gt;
&lt;p&gt;代码封装实际是一个见仁见智的工作，可能不同的人对代码结构的理解不同，实现的封装方式也会存在差异。包括我们的解决方案到底针对哪些需求也会按照不同的思路做封装。在这里插一句题外话，大家认为程序开发到底是一种什么样的工作性质？是仅仅为了实现客户的需求吗？如果你只能理解到这一层，那恐怕还远远不够！客户需求只能算是抛给你的一个问题，而你反馈给客户的应该是一套合理的解决方案。从这个观点出发我们进行再抽象，程序开发应该是一种从问题空间到解空间的映射。既然如此，我们就不能将自己的工作仅仅停留在功能实现这个层面，我们还应该提供更好的解决思路——最佳实践。&lt;/p&gt;
&lt;p&gt;基本上，如果我们只需要设计一个简单的播放器。大概需要三个模块的支持：&lt;/p&gt;
&lt;p&gt;界面模块（av_player）：包括了界面的样式和基础互动功能&lt;/p&gt;
&lt;p&gt;解码模块（Decoder）：这个部分主要通过对FFmpeg的功能二次封装，并对外提供接口支持&lt;/p&gt;
&lt;p&gt;播放器模块（PlayerWidget）：负责界面和解码模块的连接，界面中嵌入播放器模块，视频显示和音频播放都由播放器模块独立负责。&lt;/p&gt;
&lt;p&gt;下面看一下我设计的解码模块对外提供的接口：Decoder.h&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; Decoder : &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; QThread
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    Decoder();
    &lt;/span&gt;&lt;span&gt;virtual&lt;/span&gt; ~&lt;span&gt;Decoder();
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; open(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;filename);

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; close();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从文件中读取一个压缩报文&lt;/span&gt;
    AVPacket*&lt;span&gt; readPacket();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解码报文并释放空间，返回值为当前解码报文的pts时间（毫秒）&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; codecPacket(AVPacket*&lt;span&gt; pkt);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将解码帧Frame转码为RGB或PCM&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; toRGB(&lt;span&gt;char&lt;/span&gt; *outData, &lt;span&gt;int&lt;/span&gt; outWidth, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; outHeight);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; toPCM(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;outData);
    
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; durationMsec; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件时长&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; fps; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 视频FPS&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; srcWidth; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 视频宽度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; srcHeight; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 视频高度&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; videoIndex; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 视频通道&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; audioIndex; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 音频通道&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; sampleRate; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 音频采样率&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; channels; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声道&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; sampleSize; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 样本位数&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; endFlag; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线程结束标志&lt;/span&gt;
    &lt;span&gt;bool&lt;/span&gt; pauseFlag; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线程暂停标志
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录当前的音视频所处在的pts时间戳（毫秒）&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; videoPts;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; audioPts;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录音视频的编解码格式&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sampleFmt;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pixFmt;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; default: CD音质（16bit 44100Hz stereo）                              &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; dstSampleRate = &lt;span&gt;44100&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 采样率&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; dstSampleSize = &lt;span&gt;16&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 采样大小&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; dstChannels = &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通道数
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线程启动的代理方法&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;&lt;span&gt; start();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 音频输出&lt;/span&gt;
    QAudioOutput *audioOutput =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; run();
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    QMutex mtx;
    AVFormatContext &lt;/span&gt;*pFormatCtx =&lt;span&gt; NULL;

    SwsContext &lt;/span&gt;*videoSwsCtx =&lt;span&gt; NULL;
    AVFrame &lt;/span&gt;*yuv =&lt;span&gt; NULL;

    SwrContext &lt;/span&gt;*audioSwrCtx =&lt;span&gt; NULL;
    AVFrame &lt;/span&gt;*pcm =&lt;span&gt; NULL;
    QIODevice &lt;/span&gt;*ioDevice =&lt;span&gt; NULL;

    std::list&lt;/span&gt;&amp;lt;AVPacket*&amp;gt;&lt;span&gt; videoPacketList;

    AVInputTypeEnum avType &lt;/span&gt;=&lt;span&gt; AVInputTypeEnum::NOTYPE;
    QString fileName;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;乍一看很复杂，我们稍微理一下思路。首先Decoder继承了QThread，并重写了start()方法。重写的好处是，在对调用者完全透明的情况下，我们可以在这个函数中做一些初始化工作。在设计模式中，它数据代理模式。其他方法介绍：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bool open(const char *filename)：开发多媒体文件&lt;/li&gt;
&lt;li&gt;void close()：关闭和析构所有编码，这个步骤在音视频编解码的开发中非常重要&lt;/li&gt;
&lt;li&gt;AVPacket* readPacket()：读取一帧数据并返回&lt;/li&gt;
&lt;li&gt;int codecPacket(AVPacket* pkt)：解码之前读取到的一帧数据，返回该帧数据表示的pts值并将传入的pkt析构释放内存空间&lt;/li&gt;
&lt;li&gt;int toRGB(char *outData, int outWidth, int outHeight)：转码视频帧，将yuv转换为rgb&lt;/li&gt;
&lt;li&gt;int toPCM(char *outData)：转码音频帧&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;播放器模块：PlayerWidget.h&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt; PlayerWidget : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QOpenGLWidget
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    PlayerWidget(Decoder &lt;/span&gt;*dec, QWidget *parent, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; interval);
    &lt;/span&gt;&lt;span&gt;virtual&lt;/span&gt; ~&lt;span&gt;PlayerWidget();
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; default: 720p 25fps                                                  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; videoWidth = &lt;span&gt;720&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; videoHeight = &lt;span&gt;480&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; m_interval = &lt;span&gt;40&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; default: CD音质（16bit 44100Hz stereo）                              &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**********************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; sampleRate = &lt;span&gt;44100&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 采样率&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; sampleSize = &lt;span&gt;16&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 采样大小&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; channels = &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通道数&lt;/span&gt;
&lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; timerEvent(QTimerEvent *&lt;span&gt;e);
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; paintEvent(QPaintEvent *&lt;span&gt;e);
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    Decoder &lt;/span&gt;*decoder =&lt;span&gt; NULL;
    QAudioOutput &lt;/span&gt;*&lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
    QIODevice &lt;/span&gt;*&lt;span&gt;io;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个模块继承自QOpenGLWidget，并包含了QAudioOutput。这两个Qt类分别代表了视频播放和音频播放。&lt;/p&gt;
&lt;p&gt;界面模块：在这个模块中有一个重要的工作就是当我们在播放视频的时候放大和缩小播放器窗口如何保证视频画面依然保持正确的宽高比，为此我写了一个静态函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; AspectRatio {
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; width;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; height;
};

&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; AspectRatio* fitRatio(&lt;span&gt;int&lt;/span&gt; outWidth, &lt;span&gt;int&lt;/span&gt; outHeight, &lt;span&gt;int&lt;/span&gt; inWidth, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; inHeight) {
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; r1 = ((&lt;span&gt;double&lt;/span&gt;)outWidth / (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)outHeight);
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; r2 = ((&lt;span&gt;double&lt;/span&gt;)inWidth / (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)inHeight);
    AspectRatio &lt;/span&gt;*ar = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AspectRatio;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (r1 &amp;gt;&lt;span&gt; r2) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; newWidth = (&lt;span&gt;double&lt;/span&gt;)(outHeight * inWidth) / (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)inHeight;
        ar&lt;/span&gt;-&amp;gt;width =&lt;span&gt; newWidth;
        ar&lt;/span&gt;-&amp;gt;height =&lt;span&gt; outHeight;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ar;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; newHeight = (&lt;span&gt;double&lt;/span&gt;)(inHeight * outWidth) / (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;)inWidth;
        ar&lt;/span&gt;-&amp;gt;width =&lt;span&gt; outWidth;
        ar&lt;/span&gt;-&amp;gt;height =&lt;span&gt; newHeight;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ar;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后附上我自己设计的播放器界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/871676/201804/871676-20180429133121887-1218453119.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目源码：https://gitee.com/learnhow/ffmpeg_studio/tree/master/_64bit/src/av_player&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 05:34:00 +0000</pubDate>
<dc:creator>冷豪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/learnhow/p/8970893.html</dc:identifier>
</item>
<item>
<title>CRM客户关系管理系统（三） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8964951.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8964951.html</guid>
<description>&lt;h2&gt;第四章、kingadmin开发设计&lt;/h2&gt;
&lt;h3&gt; &lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1.kingadmin设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;自定义admin注册model的写法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;crm/admin.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerAdmin(admin.ModelAdmin):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示&lt;/span&gt;
    list_display = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consult_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;过滤&lt;/span&gt;
    list_filter = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;搜索，consultant是外键，必须加“__字段名”&lt;/span&gt;
    search_fields = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant__name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

admin.site.register(models.CustomerInfo,CustomerAdmin)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后台显示&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180427223539479-2041147007.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是后台显示的样子，如果我们想让前端也显示类似这样的页面该怎么做呢？这就需要照django自带的admin写法，自己自定义个kingadmin（模仿admin）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;kingadmin&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）创建app kingadmin&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python manage.py startapp kingadmin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加到settings的INSTALL_APPS里面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;crm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为想让kingadmin app以后可以直接移植到其它项目中，所以在kingadmin目录下单独创建templates/kingadmin和static目录，把之前的静态文件和模板拷贝进去&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180427230621456-1352364794.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2） settings里面设置kingadmin静态文件和templates路径&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
STATIC_URL = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/static/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
STATICFILES_DIRS &lt;/span&gt;=&lt;span&gt; (
    os.path.join(BASE_DIR, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;statics&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    os.path.join(BASE_DIR, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin/statics&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),  
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180427225813787-693400021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）PerfectCRM/url.py添加路由分发&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
urlpatterns =&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^kingadmin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （5）kingamdin/urls.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/urls.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; kingadmin &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^login/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.acc_login,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^logout/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.acc_logout,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（6）kingamdin/views.py&lt;/p&gt;
&lt;p&gt; 登录界面也单独创建&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180427232405078-95086572.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/views.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render,redirect
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth &lt;span&gt;import&lt;/span&gt;&lt;span&gt; authenticate,login,logout

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; acc_login(request):
    error_msg &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; request.method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        username &lt;/span&gt;= request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,None)
        password &lt;/span&gt;= request.POST.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,None)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;user是一个对象&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;验证&lt;/span&gt;
        user = authenticate(username=username,password=&lt;span&gt;password)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; user:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;登录（已生成session）&lt;/span&gt;
&lt;span&gt;            login(request, user)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果有next值就获取next值，没有就跳转到首页&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; redirect(request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;next&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'/kingadmin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            error_msg &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin/login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error_msg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:error_msg})


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; acc_logout(request):
    logout(request)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/login/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（7）kingamdin/urls.py&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;添加登录后跳转到“app_index.html”页面&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
urlpatterns =&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.app_index,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app_index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^login/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.acc_login,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^logout/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.acc_logout,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;logout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]
    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（8）kingadmin/views.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; app_index(request):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin/app_index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（9）kingadmin/app_index.html&lt;/p&gt;
&lt;p&gt; kingadmin/index.html中添加block right-content-container&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180427233922583-533987278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_fbab3253-9452-465e-b248-5ed1b279a4f1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;king/index.html&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; app_index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#templates/kingadmin/app_index.html#}

{% extends 'kingadmin/index.html' %}

{% block right-content-container %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;page-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;APPS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
{% endblock %}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180428001826094-426345257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.2.kingadmin自动发现及注册功能开发&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 想让app_index.html页面像后台一样显示所有&lt;span&gt;&lt;strong&gt;&lt;span&gt;注册&lt;/span&gt;的app以及下面的表名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180427232725760-1488494144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;（1）kingadmin/app_setup.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/app_setup.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; conf

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; kingadmin_auto_discover():
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; app_name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; conf.settings.INSTALLED_APPS:
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;去每个app下面执行kingadmin.py文件&lt;/span&gt;
            mod = &lt;span&gt;__import__&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s.kingadmin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;app_name)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;打印每个app已注册的model名字&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(mod.kingadmin)
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; ImportError:
            &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）crm/kingadmin.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; crm/kingadmin.py&lt;/span&gt;


&lt;span&gt;from&lt;/span&gt; kingadmin.sites &lt;span&gt;import&lt;/span&gt;&lt;span&gt; site
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; crm &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;crm kingadmin....&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注册model&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consult_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    list_filter &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    search_fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant__name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

site.register(models.CustomerInfo,CustomerAdmin)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）student/kingadmin.py&lt;/p&gt;
&lt;p&gt;创建app student&lt;/p&gt;
&lt;p&gt;student/models.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; student/models.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test(models.Model):
    name &lt;/span&gt;= models.CharField(max_length=64)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;student/kingadmin.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; student/kingadmin.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; student &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; kingadmin.sites &lt;span&gt;import&lt;/span&gt;&lt;span&gt; site

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;student kingadmin.....&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注册model&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

site.register(models.Test,TestAdmin)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）kingadmin/views.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/views.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; kingadmin &lt;span&gt;import&lt;/span&gt;&lt;span&gt; app_setup
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;程序已启动就自动执行&lt;/span&gt;
app_setup.kingadmin_auto_discover()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;程序一启动，会执行每个app下面的kingadmin.py，注册全局的字典&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;from django import conf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;conf.settings.INSTALL_APPS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;动态获取settings里面所有添加的app名字&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;运行程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180428013520257-39268894.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）返回全局字典&lt;/p&gt;
&lt;p&gt;我们想要的字典格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180428015924322-600990865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改sites.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/sites.py&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminSite(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.enable_admins &lt;/span&gt;=&lt;span&gt; {}

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;两个参数，一个表名，一个自定义的admin类&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; register(self,model_class,admin_class=&lt;span&gt;None):
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;注册admin表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print('register',model_class,admin_class)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取app名字&lt;/span&gt;
        app_name =&lt;span&gt; model_class._meta.app_label
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取表名&lt;/span&gt;
        model_name =&lt;span&gt; model_class._meta.model_name

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; app_name &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.enable_admins:
            self.enable_admins[app_name] &lt;/span&gt;=&lt;span&gt; {}
        self.enable_admins[app_name][model_name] &lt;/span&gt;=&lt;span&gt; admin_class


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化，就可以调用register方法&lt;/span&gt;
site = AdminSite()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;kingamdin/views.py中打印看看&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; kingadmin &lt;span&gt;import&lt;/span&gt;&lt;span&gt; app_setup
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;程序已启动就自动执行&lt;/span&gt;
&lt;span&gt;app_setup.kingadmin_auto_discover()

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; kingadmin.sites &lt;span&gt;import&lt;/span&gt;&lt;span&gt; site
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;site&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,site.enable_admins)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180428020236438-2059501959.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （6）前端页面显示&lt;/p&gt;
&lt;p&gt; kingamdin/views.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; app_index(request):

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin/app_index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;site&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:site})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;kingadmin/templates/app_index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#templates/kingadmin/app_index.html#}

{% extends 'kingadmin/index.html' %}

{% block right-content-container %}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;page-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;APPS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% for app_name,app_tables in site.enable_admins.items %}
        {{ app_name }}{{ app_tables }}

    {% endfor %}

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


{% endblock %}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180428020910026-170934002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;&lt;strong&gt;4.3.kingadmin model obj list页面开发&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;把前端页面做成表格的格式，跟admin后台显示一样&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bootstrap table:  https://v3.bootcss.com/css/#tables&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180428021237119-815024405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（1）kingadmin/app_index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#templates/kingadmin/app_index.html#}

{% extends 'kingadmin/index.html' %}

{% block right-content-container %}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;page-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;APPS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% for app_name,app_tables in site.enable_admins.items %}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ app_name }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                {% for model_name in app_tables  %}
                    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;{% url 'table_obj_list' app_name model_name %}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ model_name }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ADD&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Change&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                {% endfor %}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


{% endblock %}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）crm/kingadmin.py注册三个model&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注册model&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consult_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    list_filter &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    search_fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant__name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

site.register(models.CustomerInfo,CustomerAdmin)
site.register(models.Role)
site.register(models.Menus)
site.register(models.UserProfile)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（3）kingadmin/url.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
urlpatterns =&lt;span&gt; [
        url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^(\w+)/(\w+)/$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.table_obj_list,name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table_obj_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（4）kingadmin/sites.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminSite(object):
    .
    .
    .
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; register(self,model_class,admin_class=&lt;span&gt;None):
        .
        .
        .
         &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取app名字&lt;/span&gt;
        app_name =&lt;span&gt; model_class._meta.app_label
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取表名&lt;/span&gt;
        model_name =&lt;span&gt; model_class._meta.model_name
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;把model_class赋值给了admin_class,然后在视图中可以通过admin_class找到对应的model类（表名字）&lt;/span&gt;
        admin_class.model =&lt;span&gt; model_class
        .
        .
        .    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时运行发现会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429120332962-511838051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;是因为我们在注册model的时候，有的写了自定义的model类，有的没写，而我们都统一的赋值，导致那些没写自定义model类（空的）赋值的时候就会报NoneType错误&lt;/p&gt;

&lt;p&gt;django自带的自定义admin类的写法继承了ModelAdmin，那注册的时候为什么有的没写自定义admin类没有报错呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429120643504-1520364771.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是因为继承的ModelAdmin帮我们写了（里面其实都定义为空了），我们模仿django admin的写法，也写个父类。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429120910047-1576426933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）kingadmin/admin_base.py&lt;/p&gt;
&lt;p&gt;新建个admin_base.py，写个父类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/admin_base.py&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseKingAdmin(object):

    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（6）crm/kingadmin.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1ab22821-0296-4947-b459-5192c2de88f8')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_1ab22821-0296-4947-b459-5192c2de88f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1ab22821-0296-4947-b459-5192c2de88f8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1ab22821-0296-4947-b459-5192c2de88f8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1ab22821-0296-4947-b459-5192c2de88f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; crm/kingadmin.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; kingadmin.sites &lt;span&gt;import&lt;/span&gt;&lt;span&gt; site
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; crm &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; kingadmin.admin_base &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseKingAdmin

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print('crm kingadmin....')&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注册model&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerAdmin(BaseKingAdmin):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consult_content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    list_filter &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    search_fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;contact&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;consultant__name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

site.register(models.CustomerInfo,CustomerAdmin)
site.register(models.Role)
site.register(models.Menus)
site.register(models.UserProfile)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;crm/kingadmin.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;继承BaseKingAdmin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429121420628-1484685775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （7）kingadmin/sites.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3f58d8b1-dd10-4df3-a83a-e63830408f8d')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_3f58d8b1-dd10-4df3-a83a-e63830408f8d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3f58d8b1-dd10-4df3-a83a-e63830408f8d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3f58d8b1-dd10-4df3-a83a-e63830408f8d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3f58d8b1-dd10-4df3-a83a-e63830408f8d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/sites.py&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; kingadmin.admin_base &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseKingAdmin

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminSite(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.enable_admins &lt;/span&gt;=&lt;span&gt; {}

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;两个参数，一个表名，一个自定义的admin类&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; register(self,model_class,admin_class=&lt;span&gt;BaseKingAdmin):
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;注册admin表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print('register',model_class,admin_class)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取app名字&lt;/span&gt;
        app_name =&lt;span&gt; model_class._meta.app_label
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取表名&lt;/span&gt;
        model_name =&lt;span&gt; model_class._meta.model_name
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;把model_class赋值给了admin_class,然后在视图中可以通过admin_class找到对应的model类（表名字）&lt;/span&gt;
        admin_class.model =&lt;span&gt; model_class
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; app_name &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.enable_admins:
            self.enable_admins[app_name] &lt;/span&gt;=&lt;span&gt; {}
        self.enable_admins[app_name][model_name] &lt;/span&gt;=&lt;span&gt; admin_class


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化，就可以调用register方法&lt;/span&gt;
site = AdminSite()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;kingadmin/sites.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429122815859-1694280044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现在运行程序，就正常了，访问：http://127.0.0.1:8000/kingadmin/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429123240504-429447111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（8）取出model里面的值&lt;/p&gt;
&lt;p&gt;kingadmin/views.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@login_required
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; table_obj_list(request, app_name, model_name):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;取出指定model里的数据返回给前端&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;拿到admin_class后，通过它找到拿到model&lt;/span&gt;
    admin_class =&lt;span&gt; site.enable_admins[app_name][model_name]
    querysets &lt;/span&gt;=&lt;span&gt; admin_class.model.objects.all()

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;kingadmin/table_obj_list.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;querysets&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:querysets})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（9）templates/kingadmin/table_obj_list.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#kingadmin/templates/kingadmin/table_obj_list.html#}

{% extends 'kingadmin/index.html' %}

{% block right-content-container %}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;page-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;app&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{ querysets }}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

{% endblock %}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;现在拿到的是一个对象，但是有个问题就是：没注册三个model里面得到值是一样&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429130102688-44392079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429130136419-387597715.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429130151278-1767118784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429130230731-1899963846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;因为没注册的三个mdoel都共享同一个BaseKingAdmin内存对象（三个model内存地址一样）,我们只需要实例化就可以了（实例化后就都有单独的内存空间了）&lt;/p&gt;
&lt;p&gt;修改kingadmin/sites.py&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180429131253773-1160552286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/sites.py&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; kingadmin.admin_base &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BaseKingAdmin

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminSite(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.enable_admins &lt;/span&gt;=&lt;span&gt; {}

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;两个参数，一个表名，一个自定义的admin类&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; register(self,model_class,admin_class=&lt;span&gt;None):
        &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;注册admin表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print('register',model_class,admin_class)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取app名字&lt;/span&gt;
        app_name =&lt;span&gt; model_class._meta.app_label
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取表名&lt;/span&gt;
        model_name =&lt;span&gt; model_class._meta.model_name
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;把model_class赋值给了admin_class,然后在视图中可以通过admin_class找到对应的model类（表名字）&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; admin_class:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实例化，如果没写注册的类，就用BaseKingAdmin&lt;/span&gt;
            admin_class =&lt;span&gt; BaseKingAdmin()
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果写了注册的类，就实例化自己&lt;/span&gt;
            admin_class =&lt;span&gt; admin_class()
        admin_class.model &lt;/span&gt;=&lt;span&gt; model_class
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; app_name &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; self.enable_admins:
            self.enable_admins[app_name] &lt;/span&gt;=&lt;span&gt; {}
        self.enable_admins[app_name][model_name] &lt;/span&gt;=&lt;span&gt; admin_class

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化，就可以调用register方法&lt;/span&gt;
site = AdminSite()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 现在就可以取出对应model的数据了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;本章节代码同步 &lt;a href=&quot;https://github.com/derek-zhang123/PerfectCRM&quot;&gt;github下载&lt;/a&gt;  （commit5 &lt;span&gt;&lt;a class=&quot;message&quot; title=&quot;num3 kingadmin注册功能和model list页面开发&quot; href=&quot;https://github.com/derek-zhang123/PerfectCRM/commit/4e412b6bdb67a2a26ba91f478bd96870e60a1c95&quot; data-pjax=&quot;true&quot;&gt;&lt;span&gt;num3 kingadmin注册功能和model list页面开发&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 29 Apr 2018 05:31:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8964951.html</dc:identifier>
</item>
<item>
<title>用tensorlayer导入Slim模型迁移学习 - zengfanlin</title>
<link>http://www.cnblogs.com/zengfanlin/p/8970868.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zengfanlin/p/8970868.html</guid>
<description>&lt;p&gt;　　上一篇博客【&lt;a href=&quot;http://www.cnblogs.com/zengfanlin/p/8886701.html&quot; target=&quot;_blank&quot;&gt;用tensorflow迁移学习猫狗分类&lt;/a&gt;】笔者讲到用tensorlayer的【&lt;a href=&quot;https://github.com/tensorlayer/tensorlayer/blob/master/example/tutorial_vgg16.py&quot; target=&quot;_blank&quot;&gt;VGG16模型&lt;/a&gt;】迁移学习图像分类，那麽问题来了，tensorlayer没提供的模型怎么办呢？别担心，tensorlayer提供了tensorflow中的【&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim&quot; target=&quot;_blank&quot;&gt;slim模型&lt;/a&gt;】导入功能，代码例子在&lt;a href=&quot;https://github.com/tensorlayer/tensorlayer/blob/master/example/tutorial_inceptionV3_tfslim.py&quot; target=&quot;_blank&quot;&gt;tutorial_inceptionV3_tfslim&lt;/a&gt;。&lt;br/&gt;　　那么什么是slim？slim到底有什么用？&lt;br/&gt;slim是一个使构建，训练，评估神经网络变得简单的库。它可以消除原生tensorflow里面很多重复的模板性的代码，让代码更紧凑，更具备可读性。另外slim提供了很多计算机视觉方面的著名模型（VGG, AlexNet等），我们不仅可以直接使用，甚至能以各种方式进行扩展。（笔者注：总之功能跟tensorlayer差不多嘛）更多介绍可以看这篇文章：【&lt;a href=&quot;https://blog.csdn.net/mao_xiao_feng/article/details/73409975&quot; target=&quot;_blank&quot;&gt;Tensorflow】辅助工具篇——tensorflow slim(TF-Slim)介绍&lt;/a&gt;】&lt;br/&gt;　　要进行迁移学习，首先需要slim模型代码以及预训练好的权重参数，这些谷歌都有提供&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim&quot; target=&quot;_blank&quot;&gt;下载&lt;/a&gt;，可以看到主页下面有各个模型以及在imagenet训练集下的参数地址。&lt;br/&gt;&lt;img src=&quot;https://www.angtk.com/image/show/mdimg-2018-04-AOL3y6EQ5ae02ac64b77f.jpg&quot; alt=&quot;&quot; width=&quot;932&quot; height=&quot;606&quot;/&gt;&lt;br/&gt;列表还列出了各个模型的top1、top5的正确率，模型很多了。&lt;br/&gt;　　好了我们下载Inception-ResNet-v2以及inception_resnet_v2_2016_08_30.tar.gz，py文件和解压出来的.ckpt文件放到项目根目录下面。至于为什么不用tensorlayer例子提供的Inception V3？因为Inception-ResNet-v2正确率高啊。（哈哈真正原因最后来讲）。&lt;br/&gt;　　我们依旧进行猫狗分类，按照教程导入模型修改num_classes再导入训练数据，直接训练是会报错的，因为最后的Logits层几个参数在恢复时维度不匹配。&lt;br/&gt;最后几个参数是不能恢复了，笔者也没有找到选择性恢复.ckpt参数的tensorflow方法。怎么办呢？幸好群里面有位朋友提供了一个方法，参见【&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33657264&quot; target=&quot;_blank&quot;&gt;Tensorflow 迁移学习&lt;/a&gt;】：&lt;br/&gt;&lt;img src=&quot;https://www.angtk.com/image/show/mdimg-2018-04-17mdYHL15ae02b5d494da.png&quot; alt=&quot;&quot; width=&quot;1097&quot; height=&quot;697&quot;/&gt;&lt;br/&gt;主要思想是：先把所有.ckpt参数恢复成npz格式，再选择恢复npz中的参数，恢复npz中的参数就跟前一篇博客操作一样的了。&lt;br/&gt;所以整个过程分两步走：&lt;br/&gt;1.将参数恢复然后保存为npz格式：&lt;br/&gt;　　下面是具体代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; recordutil &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; from tensorflow.contrib.slim.python.slim.nets.resnet_v2 import resnet_v2_152&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; from tensorflow.contrib.slim.python.slim.nets.vgg import vgg_16&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; skimage
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; skimage.io
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; skimage.transform
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorlayer.layers &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; from scipy.misc import imread, imresize&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; from tensorflow.contrib.slim.python.slim.nets.alexnet import alexnet_v2&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; inception_resnet_v2 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; (inception_resnet_v2_arg_scope, inception_resnet_v2)
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; scipy.misc &lt;span&gt;import&lt;/span&gt;&lt;span&gt; imread, imresize
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorflow.python.ops &lt;span&gt;import&lt;/span&gt;&lt;span&gt; variables
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorlayer as tl

slim &lt;/span&gt;=&lt;span&gt; tf.contrib.slim
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; data.imagenet_classes &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;raise&lt;/span&gt;&lt;span&gt; Exception(
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} / download the file from: https://github.com/zsdonghao/tensorlayer/tree/master/example/data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(e))

n_epoch &lt;/span&gt;= 200&lt;span&gt;
learning_rate &lt;/span&gt;= 0.0001&lt;span&gt;
print_freq &lt;/span&gt;= 2&lt;span&gt;
batch_size &lt;/span&gt;= 32
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;# InceptionV3 / All TF-Slim nets can be merged into TensorLayer&lt;/span&gt;
x = tf.placeholder(tf.float32, shape=[None, 299, 299, 3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出&lt;/span&gt;
y_ = tf.placeholder(tf.int32, shape=[None, ], name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
net_in &lt;/span&gt;= tl.layers.InputLayer(x, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_layer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
with slim.arg_scope(inception_resnet_v2_arg_scope()):
network &lt;/span&gt;=&lt;span&gt; tl.layers.SlimNetsLayer(
prev_layer&lt;/span&gt;=&lt;span&gt;net_in,
slim_layer&lt;/span&gt;=&lt;span&gt;inception_resnet_v2,
slim_args&lt;/span&gt;=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;num_classes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 1001&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_training&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,
},
name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;InceptionResnetV2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; &amp;lt;-- the name should be the same with the ckpt model&lt;/span&gt;
&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; network = fc_layers(net_cnn)&lt;/span&gt;
sess =&lt;span&gt; tf.InteractiveSession()
network.print_params(False)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; network.print_layers()&lt;/span&gt;
saver =&lt;span&gt; tf.train.Saver()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加载预训练的参数&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; tl.files.assign_params(sess, npz, network)&lt;/span&gt;
&lt;span&gt;
tl.layers.initialize_global_variables(sess)

saver.restore(sess, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inception_resnet_v2.ckpt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Model Restored&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
all_params &lt;/span&gt;=&lt;span&gt; sess.run(network.all_params)
np.savez(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_resnet_v2.npz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, params=&lt;span&gt;all_params)
sess.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　执行成功之后，我们得到模型所有的908个参数。&lt;br/&gt;2.部分恢复npz参数然后训练模型：&lt;br/&gt;　　首先我们修改模型最后一层参数，由于进行的是2分类学习，所以做如下修改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;with slim.arg_scope(inception_resnet_v2_arg_scope()):
network &lt;/span&gt;=&lt;span&gt; tl.layers.SlimNetsLayer(
prev_layer&lt;/span&gt;=&lt;span&gt;net_in,
slim_layer&lt;/span&gt;=&lt;span&gt;inception_resnet_v2,
slim_args&lt;/span&gt;=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;num_classes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: 2&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_training&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,
},
name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;InceptionResnetV2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; &amp;lt;-- the name should be the same with the ckpt model&lt;/span&gt;
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　num_classes改为2，is_training为True。&lt;br/&gt;　　接着定义输入输出以及损失函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
sess =&lt;span&gt; tf.InteractiveSession()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; saver = tf.train.Saver()&lt;/span&gt;
y =&lt;span&gt; network.outputs
y_op &lt;/span&gt;= tf.argmax(tf.nn.softmax(y), 1&lt;span&gt;)
cost &lt;/span&gt;= tl.cost.cross_entropy(y, y_, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
correct_prediction &lt;/span&gt;= tf.equal(tf.cast(tf.argmax(y, 1&lt;span&gt;), tf.float32), tf.cast(y_, tf.float32))
acc &lt;/span&gt;= tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　下面是定义训练参数，我们只训练最后一层的参数，打印参数出来我们看到：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
[TL] param 900: InceptionResnetV2/AuxLogits/Conv2d_2a_5x5/weights:0 (5, 5, 128, 768&lt;span&gt;) float32_ref
[TL] param &lt;/span&gt;901: InceptionResnetV2/AuxLogits/Conv2d_2a_5x5/BatchNorm/beta:0 (768&lt;span&gt;,) float32_ref
[TL] param &lt;/span&gt;902: InceptionResnetV2/AuxLogits/Conv2d_2a_5x5/BatchNorm/moving_mean:0 (768&lt;span&gt;,) float32_ref
[TL] param &lt;/span&gt;903: InceptionResnetV2/AuxLogits/Conv2d_2a_5x5/BatchNorm/moving_variance:0 (768&lt;span&gt;,) float32_ref
[TL] param &lt;/span&gt;904: InceptionResnetV2/AuxLogits/Logits/weights:0 (768, 2&lt;span&gt;) float32_ref
[TL] param &lt;/span&gt;905: InceptionResnetV2/AuxLogits/Logits/biases:0 (2&lt;span&gt;,) float32_ref
[TL] param &lt;/span&gt;906: InceptionResnetV2/Logits/Logits/weights:0 (1536, 2&lt;span&gt;) float32_ref
[TL] param &lt;/span&gt;907: InceptionResnetV2/Logits/Logits/biases:0 (2&lt;span&gt;,) float32_ref
[TL] num of params: &lt;/span&gt;56940900
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　从param 904开始训练就行了，参数恢复到param 903&lt;br/&gt;　　下面是训练函数以及恢复部分参数，加载样本数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义 optimizer&lt;/span&gt;
train_params = network.all_params[904&lt;span&gt;:]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;训练参数:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, train_params)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; # 加载预训练的参数&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; tl.files.assign_params(sess, params, network)&lt;/span&gt;
train_op = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost, var_list=&lt;span&gt;train_params)
img, label &lt;/span&gt;= read_and_decode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\001-Python\\train299.tfrecords&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用shuffle_batch可以随机打乱输入&lt;/span&gt;
X_train, y_train =&lt;span&gt; tf.train.shuffle_batch([img, label],
batch_size&lt;/span&gt;=batch_size, capacity=200&lt;span&gt;,
min_after_dequeue&lt;/span&gt;=100&lt;span&gt;)
tl.layers.initialize_global_variables(sess)
params &lt;/span&gt;= tl.files.load_npz(&lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;inception_resnet_v2.npz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
params &lt;/span&gt;= params[0:904&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;当前参数大小：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, len(params))
tl.files.assign_params(sess, params&lt;/span&gt;=params, network=network)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　下面依旧是训练模型的代码，跟上一篇一样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; # 训练模型&lt;/span&gt;
coord =&lt;span&gt; tf.train.Coordinator()
threads &lt;/span&gt;= tf.train.start_queue_runners(sess=sess, coord=&lt;span&gt;coord)
step &lt;/span&gt;=&lt;span&gt; 0
filelist &lt;/span&gt;=&lt;span&gt; getfilelist()
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; epoch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(n_epoch):
start_time &lt;/span&gt;=&lt;span&gt; time.time()
val, l &lt;/span&gt;= sess.run([X_train, y_train])&lt;span&gt;#&lt;/span&gt;&lt;span&gt;next_data(filelist, batch_size) #&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; X_train_a, y_train_a &lt;span&gt;in&lt;/span&gt; tl.iterate.minibatches(val, l, batch_size, shuffle=&lt;span&gt;True):
sess.run(train_op, feed_dict&lt;/span&gt;=&lt;span&gt;{x: X_train_a, y_: y_train_a})
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; epoch + 1 == 1 &lt;span&gt;or&lt;/span&gt; (epoch + 1) % print_freq ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Epoch %d of %d took %fs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (epoch + 1, n_epoch, time.time() -&lt;span&gt; start_time))
train_loss, train_acc, n_batch &lt;/span&gt;=&lt;span&gt; 0, 0, 0
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; X_train_a, y_train_a &lt;span&gt;in&lt;/span&gt; tl.iterate.minibatches(val, l, batch_size, shuffle=&lt;span&gt;True):
err, ac &lt;/span&gt;= sess.run([cost, acc], feed_dict=&lt;span&gt;{x: X_train_a, y_: y_train_a})
train_loss &lt;/span&gt;+=&lt;span&gt; err
train_acc &lt;/span&gt;+=&lt;span&gt; ac
n_batch &lt;/span&gt;+= 1
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; train loss: %f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (train_loss /&lt;span&gt; n_batch))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; train acc: %f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (train_acc /&lt;span&gt; n_batch))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; tl.files.save_npz(network.all_params, name='model_vgg_16_2.npz', sess=sess)&lt;/span&gt;
&lt;span&gt;coord.request_stop()
coord.join(threads)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　batchsize为20训练200代，部分结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Epoch 156 of 200 took 12&lt;span&gt;.568609s
train loss: &lt;/span&gt;0.382517&lt;span&gt;
train acc: &lt;/span&gt;0.950000&lt;span&gt;
Epoch &lt;/span&gt;158 of 200 took 12&lt;span&gt;.457161s
train loss: &lt;/span&gt;0.382509&lt;span&gt;
train acc: &lt;/span&gt;0.850000&lt;span&gt;
Epoch &lt;/span&gt;160 of 200 took 12&lt;span&gt;.385407s
train loss: &lt;/span&gt;0.320393&lt;span&gt;
train acc: &lt;/span&gt;1.000000&lt;span&gt;
Epoch &lt;/span&gt;162 of 200 took 12&lt;span&gt;.489218s
train loss: &lt;/span&gt;0.480686&lt;span&gt;
train acc: &lt;/span&gt;0.700000&lt;span&gt;
Epoch &lt;/span&gt;164 of 200 took 12&lt;span&gt;.388841s
train loss: &lt;/span&gt;0.329189&lt;span&gt;
train acc: &lt;/span&gt;0.850000&lt;span&gt;
Epoch &lt;/span&gt;166 of 200 took 12&lt;span&gt;.446472s
train loss: &lt;/span&gt;0.379127&lt;span&gt;
train acc: &lt;/span&gt;0.900000&lt;span&gt;
Epoch &lt;/span&gt;168 of 200 took 12&lt;span&gt;.888571s
train loss: &lt;/span&gt;0.365938&lt;span&gt;
train acc: &lt;/span&gt;0.900000&lt;span&gt;
Epoch &lt;/span&gt;170 of 200 took 12&lt;span&gt;.850605s
train loss: &lt;/span&gt;0.353434&lt;span&gt;
train acc: &lt;/span&gt;0.850000&lt;span&gt;
Epoch &lt;/span&gt;172 of 200 took 12&lt;span&gt;.855129s
train loss: &lt;/span&gt;0.315443&lt;span&gt;
train acc: &lt;/span&gt;0.950000&lt;span&gt;
Epoch &lt;/span&gt;174 of 200 took 12&lt;span&gt;.906666s
train loss: &lt;/span&gt;0.460817&lt;span&gt;
train acc: &lt;/span&gt;0.750000&lt;span&gt;
Epoch &lt;/span&gt;176 of 200 took 12&lt;span&gt;.830738s
train loss: &lt;/span&gt;0.421025&lt;span&gt;
train acc: &lt;/span&gt;0.900000&lt;span&gt;
Epoch &lt;/span&gt;178 of 200 took 12&lt;span&gt;.852572s
train loss: &lt;/span&gt;0.418784&lt;span&gt;
train acc: &lt;/span&gt;0.800000&lt;span&gt;
Epoch &lt;/span&gt;180 of 200 took 12&lt;span&gt;.951322s
train loss: &lt;/span&gt;0.316057&lt;span&gt;
train acc: &lt;/span&gt;0.950000&lt;span&gt;
Epoch &lt;/span&gt;182 of 200 took 12&lt;span&gt;.866213s
train loss: &lt;/span&gt;0.363328&lt;span&gt;
train acc: &lt;/span&gt;0.900000&lt;span&gt;
Epoch &lt;/span&gt;184 of 200 took 13&lt;span&gt;.012520s
train loss: &lt;/span&gt;0.379462&lt;span&gt;
train acc: &lt;/span&gt;0.850000&lt;span&gt;
Epoch &lt;/span&gt;186 of 200 took 12&lt;span&gt;.934583s
train loss: &lt;/span&gt;0.472857&lt;span&gt;
train acc: &lt;/span&gt;0.750000&lt;span&gt;
Epoch &lt;/span&gt;188 of 200 took 13&lt;span&gt;.038168s
train loss: &lt;/span&gt;0.236005&lt;span&gt;
train acc: &lt;/span&gt;1.000000&lt;span&gt;
Epoch &lt;/span&gt;190 of 200 took 13&lt;span&gt;.056378s
train loss: &lt;/span&gt;0.266042&lt;span&gt;
train acc: &lt;/span&gt;0.950000&lt;span&gt;
Epoch &lt;/span&gt;192 of 200 took 13&lt;span&gt;.016137s
train loss: &lt;/span&gt;0.255430&lt;span&gt;
train acc: &lt;/span&gt;0.950000&lt;span&gt;
Epoch &lt;/span&gt;194 of 200 took 13&lt;span&gt;.013147s
train loss: &lt;/span&gt;0.422342&lt;span&gt;
train acc: &lt;/span&gt;0.900000&lt;span&gt;
Epoch &lt;/span&gt;196 of 200 took 12&lt;span&gt;.980659s
train loss: &lt;/span&gt;0.353984&lt;span&gt;
train acc: &lt;/span&gt;0.900000&lt;span&gt;
Epoch &lt;/span&gt;198 of 200 took 13&lt;span&gt;.033676s
train loss: &lt;/span&gt;0.320018&lt;span&gt;
train acc: &lt;/span&gt;0.950000&lt;span&gt;
Epoch &lt;/span&gt;200 of 200 took 12&lt;span&gt;.945982s
train loss: &lt;/span&gt;0.288049&lt;span&gt;
train acc: &lt;/span&gt;0.950000
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;　　好了，迁移学习Inception-ResNet-v2结束。&lt;br/&gt;　　作者说SlimNetsLayer是能导入任何Slim Model的。笔者已经验证过导入Inception-ResNet-v2和VGG16成功，Inception V3导入后训练了两三天，正确率一直在10到70之间波动（跟笔者的心情一样不稳定），笔者一直找不出原因，心累，希望哪位朋友再去验证一下Inception V3咯。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 05:14:00 +0000</pubDate>
<dc:creator>zengfanlin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zengfanlin/p/8970868.html</dc:identifier>
</item>
</channel>
</rss>