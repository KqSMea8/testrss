<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>linux配置wifi连接并通过ssh代理开启socks代理 - lanyuliuyun</title>
<link>http://www.cnblogs.com/lanyuliuyun/p/8528899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lanyuliuyun/p/8528899.html</guid>
<description>&lt;p&gt;1, 命令行配置连接wifi&lt;br/&gt;具体我是用的cubieboard2上Debian主机，其中配置wifi的命令行有wpa_cli，具体用法步骤如下。&lt;br/&gt;wpa_cli 命令行执行需要root权限，详细用法请见 wpa_cli -h&lt;br/&gt;1) 先查看由哪些wifi热点可用，如下&lt;br/&gt;&lt;span&gt;&lt;em&gt;root@cubieboard2:~# wpa_cli scan&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;root@cubieboard2:~# wpa_cli scan_result&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Selected interface 'wlan2'&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;bssid / frequency / signal level / flags / ssid&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;58:6a:b1:29:d7:f1    2437    -45    [ESS]    i-hangzhou&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;... &amp;lt;其他&amp;gt; ...&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;root@cubieboard2:~# wpa_cli scan_results | grep &lt;span&gt;&lt;em&gt;Air-xihu&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;58:6a:b1:29:d7:f2    2437    -47    [ESS]    Air-xihu&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;3c:8c:40:d7:40:f2    2437    -64    [ESS]    Air-xihu&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;root@cubieboard2:~#&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2) 选择一个热点并进行连接配置&lt;br/&gt;此处使用的无线网卡接口名为 wlan2 ，此处选择 Air-xihu 这个热点，命令如下&lt;br/&gt;&lt;em&gt;&lt;span&gt;wpa_cli -i wlan2 add_network                                # 为这个热点新增一个network，记住其命令返回值供后用，此处为1&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;wpa_cli -i wlan2 set_network 1 ssid &quot;Air-xihu&quot;    # 配置热点的SSID&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;wpa_cli -i wlan2 set_network 1 key_mgmt NONE                # 由于是没有密码，是通过手机短信来认证的，此处指定key模式为NONE&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;wpa_cli -i wlan2 enable_network 1                           # 使能激活这个network&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;wpa_cli -i wlan2 select_network 1                           # 选用这个network进行通信，并禁用其他&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;dhclient wlan2                                              # 在无线网卡接口上发起dhcp请求，获取IP地址&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;上面的命令行 set_network ssid 步骤可能会报 FAIL 先不用管&lt;/p&gt;&lt;p&gt;3) 查看连接结果，如下&lt;br/&gt;&lt;em&gt;&lt;span&gt;root@cubieboard2:~# wpa_cli status&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;Selected interface 'wlan2'&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;bssid=58:6a:b1:29:d7:f2&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;ssid=Air-xihu&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;id=1&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;mode=station&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;pairwise_cipher=NONE&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;group_cipher=NONE&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;key_mgmt=NONE&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;wpa_state=COMPLETED&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;ip_address=29.114.71.34&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;address=c8:e7:d8:cb:e9:66&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;root@cubieboard2:~#&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;wpa_state 是 COMPLETED ，并且已经获取到IP地址，表明wifi热点连接成功&lt;/p&gt;&lt;p&gt;2, 开启ssh的socks代理&lt;br/&gt;1) 如果使用xshell作为终端工具，可以在会话属性 -&amp;gt; SSH -&amp;gt; 隧道，添加配置一个socks代理，其他终端工具类似。&lt;br/&gt;2) 如果直接使用ssh命令行，则可通过 &lt;span&gt;ssh -fC2qTnN -D 8080 &amp;lt;ip:port&amp;gt;&lt;/span&gt; 开启一个socks代理，其中&lt;br/&gt;    -f 表示后台运行&lt;br/&gt;    -C 表示启用压缩，可以不开启&lt;br/&gt;    -2 表示启用第二版ssh协议&lt;br/&gt;    -q 表示静默模式&lt;br/&gt;    -T 表示禁用交互shell&lt;br/&gt;    -n 表示将stdin重定向到 /dev/null ，即不接受控制台输入&lt;br/&gt;    -N 表示不执行远端命令&lt;br/&gt;    -D 表示开启本地socks代理端口转发，后端的端口为本地监听端口，当前支持socks4/socks5&lt;/p&gt;
&lt;p&gt;后续在浏览器中配置使用刚才开启的socks代理即可，本篇博文即是通过代理发布&lt;/p&gt;
&lt;p&gt;~~~ end ~~~&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 07:52:00 +0000</pubDate>
<dc:creator>lanyuliuyun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lanyuliuyun/p/8528899.html</dc:identifier>
</item>
<item>
<title>如何高效的使用PowerShell备份数据库 - DB乐之者</title>
<link>http://www.cnblogs.com/wenBlog/p/8528810.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenBlog/p/8528810.html</guid>
<description>&lt;h3&gt;初始脚本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Get-SqlDatabase -ServerInstance localhost |&lt;span&gt;
Where { $_.Name &lt;/span&gt;-ne &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tempdb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; } |&lt;span&gt;
Backup&lt;/span&gt;-SqlDatabase
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;使用上面的命令我们就能每天备份数据库到指定路径去。当然，这只是一个实例，加入打算备份每一个数据库在备份在各自的数据库实例的服务器上，又该如何修改上面的语句那？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目的是批量备份多个实例的数据库，注意这里需要提前把数据库实例存储在一个地方，然后循环遍历出来，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;foreach&lt;/span&gt; $RegisteredSQLs IN dir -recurse SQLSERVER:\SQLRegistration\&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Database Engine Server Group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;\Host\ | &lt;span&gt;where&lt;/span&gt; {$_.Mode -ne &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;} )
  {
  Get&lt;/span&gt;-SqlDatabase -ServerInstance $RegisteredSQLs.Name |&lt;span&gt;
  Where { $_.Name &lt;/span&gt;-ne &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tempdb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; } |&lt;span&gt;
  Backup&lt;/span&gt;-&lt;span&gt;SqlDatabase
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;代码可是真心简短。当然这不足以促使你用PS来替代现有的数据库备份，只是提供了一个一次性备份数据库的简便方式。对于数据库的常规备份来说，你或许不会特别担心，因为这些备份可能由系统管理员或者SAN来负责。假如你的工作中包含了备份数据库，那么使用PowerShell来备份数据库就是一种值得使用的方式了，尤其是当你数据库服务器上都有PowerShell的时候。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;这是PowerShell最为重要的技巧之一&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;接下来，考虑当需要一次性备份数据库时，大多数时候我遇到的备份都是只备份部分数据库，因此按需求从一个列表中备份数据库是一个不错的方式。型号ps有一个叫做Out-GridView的命令，方便我们做这样的操作。上面的脚本中使用where子句，这里我们可以使用Out-GridView -PassThru代替where，并保证结尾用一个“|”来结束。代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Get-SqlDatabase -ServerInstance localhost |&lt;span&gt;
Out&lt;/span&gt;-GridView -PassThru |&lt;span&gt;
Backup&lt;/span&gt;-SqlDatabase
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对我而言-PassThru 参数是个非常有用的命令参数。方便我们仅仅通过一个参数修改完成命令。上面的脚本中这个参数其实就是数据库名称。进一步而言也可能是数据表，SQL Server Agent Jobs,CSV 文件等等。&lt;/p&gt;
&lt;h4&gt;Out-GridView 如何使用&lt;/h4&gt;
&lt;p&gt;下面这个例子使用了Out-GridView 命令，这个场景下，我选择三个数据库，然后会只备份我选择的三个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31311.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;另一个很有用的功能就是过滤。如果使用了过滤栏，将会查询每一个展示名字中包含我输入的文字的数据库。为了精确查找，我们可以点击“Add Criteria”来选择过滤的字段，这样就能只过滤数据库的名字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31312.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接下来点击DW词条，会展示数据库查询后的结果，并高亮选中行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31313.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一旦点击ok，将会看到4个数据库被自动备份。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31314.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;PowerShell 变得更容易&lt;/h4&gt;
&lt;p&gt;如果你已经相信PS至少对于热备份是更简便的备份方式，我接下来在提供几个备份选项。再次返回最上面的备份例子中，如在备份指令后添加一个-CompressionOption参数，然后空格会显示几个可选参数，如on、off、default等，如图: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31315.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意：这是在PowerShell ISE中，其他的编辑器可能会有不同的弹出参数的的触发。比如我尝试了在PowerShell console 中需要用“Crtl”+空格键才会触发。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  Get-SqlDatabase -ServerInstance localhost |&lt;span&gt;
  Out&lt;/span&gt;-GridView -PassThru |&lt;span&gt;
  Backup&lt;/span&gt;-SqlDatabase -CompressionOption On
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过这个指定可以压缩备份结果，减少不必要的空间。&lt;/p&gt;
&lt;h4&gt;有趣的脚本参数和实践&lt;/h4&gt;
&lt;p&gt;这里先要介绍一下-Script ，在备份语句的最后添加这个参数将会允许输出指令，不必等到实际执行的时候。这就让我们可以不用等到备份完成就可以看到脚本。如下图所示，其实我们的PS脚本就是封装了T-SQL脚本而已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31316.png&quot; alt=&quot;&quot; width=&quot;1369&quot; height=&quot;272&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;更多备份参数&lt;/h4&gt;

&lt;p&gt;让我们看看这个指令其他的可选参数。如果我想能够了解更多信息可以使用Get-Help指令。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Get-Help -Full Backup-SqlDatabase
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以找到-ShowWindow 选项，这个参数会弹出帮助文件在一个独立窗口中。使用搜索来方便查找有用的参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Get-Help -ShowWindow Backup-SqlDatabase
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;-BackupAction&lt;/h5&gt;
&lt;p&gt;使用这个参数可以选择备份数据库、文件或者是日志。默认为完整备份数据库，因此如果你不指定那就为完整备份。如果打算做一个差异备份，使用-Incremental 参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31317.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(注意这个可选中没有差异备份，因为差异备份用的是独立参数-Incremental )&lt;/p&gt;
&lt;h5&gt;-DatabaseFile &amp;amp; –DatabaseFileGroup&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;Backup-SqlDatabase 指令还能够备份单一数据文件或者文件组。如果选择Files作为-BackupAction 参数的可选项，你会需要增加-DatabaseFile或者 -DatabaseFileGroup ，根据数据文件或者文件组名称来备份。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;-BackupFile&lt;/h5&gt;
&lt;p&gt;现在，你已经选择了备份的类型以及备份内容。默认情况是备份为.bak后缀的文件。这是附加备份这样可以不删除文件的情况下附加备份，相应的空间占用会越来越大。这个时候你可以用-BackupFile 参数来修改路径，或者直接备份到Azure存储。&lt;/p&gt;
&lt;p&gt;如果需要找到默认备份实例的默认备份路径，可以执行下面的命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
(Get-Item sqlserver:\sql\localhost\default\).BackupDirectory
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;对于备份文件的名字我一般采用日期模式，这样确保文件不会充满。使用下面来获得名字：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Get-Date -UFormat %Y%m%d%H%M
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;综上，我们需要添加一个循环所有备份语句指令，以便于我们可以修改备份文件名字。详细代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;# 备份素有数据库并提供包含文件和日期的文件名 *&amp;gt;&lt;span&gt;
Get&lt;/span&gt;-SqlDatabase -ServerInstance localhost |&lt;span&gt;
Where { $_.Name &lt;/span&gt;-ne &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tempdb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; } | &lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;{
Backup&lt;/span&gt;-SqlDatabase -DatabaseObject $_ -CompressionOption On -BackupFile &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$($_.NAME)_db_$(Get-Date -UFormat %Y%m%d%H%M).bak&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -Script}
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;-ServerInstance &amp;amp; -Database&lt;/h5&gt;
&lt;p&gt;我们没有提供-ServerInstance &amp;amp; -Database 两个参数，因为例子中使用了Get-SqlDatabase 指令已经传递了包含数据库对象的数组，$_包含了这些参数被以属性的方式保存。Backup-SqlDatabase 指令使用了-DatabaseObject 参数默认去使用。&lt;/p&gt;
&lt;p&gt;如果打算备份一个数据库，你可以使用下面的方式而不去调用Get-SqlDatabase。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Backup-SqlDatabase -ServerInstance localhost -Database msdb
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;-PassThru&lt;/h5&gt;
&lt;p&gt;这里要说一下pipeline，是否已经在pS中遇到过，并且调试进程。你可以使用-PassThru 参数来看一下管道。这也是提供一个机会来看我们发出命令参数被编译为什么？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Backup-SqlDatabase -ServerInstance localhost -Database msdb -Script -PassThru;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31318.jpg&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;h5&gt; &lt;/h5&gt;
&lt;h4&gt;SQL Provider&lt;/h4&gt;
&lt;p&gt;最后一个选项就是你可以在SQL Server PowerShell Provider中运行这个命令。能够通过打开PowerShell ISE 得到SQL Provider,然后运行导入模块 Import-Module SqlServer 或者在数据库节点中右击数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31319.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里，您可以通过输入backup-sqldatabase和想要备份的数据库的名称来备份一个数据库。如果您需要在备份完成后启动其他任务，则此选项可能是有益的。或者使用下面的代码样例来备份这个实例中的所有数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.sqlservercentral.com/Images/31320.png&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;381&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you choose to use the ISE, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell&quot;&gt;VS Code&lt;/a&gt; (or another rich PowerShell editor) to get to the SQL Provider you will want to start out like this&lt;/p&gt;
&lt;p&gt;如果你选择使用ISE获得SQLProvider,执行下面指令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
Import-Module SqlServer;

CD SQLSERVER:\SQL\localhost\default\Databases\
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;我希望利用PS来备份数据库的指令Backup-SqlDatabase cmdlet 能够给大家提供便利。提供给大家一个比起T-sql更便捷的方式。同时可以用它来输出T-sql语句。&lt;/p&gt;
&lt;p&gt;本文中显示的所有代码都是使用SqlServer PowerShell模块完成的，该模块使用SSMS 2016(16.5+)，而我的机器运行的是PowerShell的5.1版本。除此之外我还测试了2012 在PS3.0也是可行的。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 07:36:00 +0000</pubDate>
<dc:creator>DB乐之者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenBlog/p/8528810.html</dc:identifier>
</item>
<item>
<title>【视频编解码·学习笔记】9. 熵编码算法：指数哥伦布编解码程序 - Simon_Ace</title>
<link>http://www.cnblogs.com/shuofxz/p/8528803.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shuofxz/p/8528803.html</guid>
<description>&lt;h3 id=&quot;一解码程序&quot;&gt;一、解码程序：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;整体思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在数据流中从左向右读取每一个二进制数据&lt;/li&gt;
&lt;li&gt;记录前缀连零的个数&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;，遇到1停止记录。并提取后缀信息位（信息位长度与前缀0个数相同）&lt;/li&gt;
&lt;li&gt;将后缀二进制转换成十进制数&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;解码数值：&lt;span class=&quot;math inline&quot;&gt;\(decodeNum = 2^m - 1 + k\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;重复步骤1-4，直到数据序列结束&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;新建一个VS工程，定义数据类型：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; UINT8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义一个数组用来存储待解码的数据：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;UINT8 strArray[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;] = { &lt;span class=&quot;bn&quot;&gt;0xA6&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x98&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0xE2&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x04&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x8A&lt;/span&gt; };&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;提取每一位二进制函数&quot;&gt;1. 提取每一位二进制函数：&lt;/h4&gt;
&lt;p&gt;需要三个参数：待解码数据序列buf，解码到第几个字节bytePosition，第几位bitPosition （都是从左向右数的，每个字节自第一位bitPosition=0，最后一位bitPosition=7）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; get_bit_at_position(UINT8 *buf, UINT8 &amp;amp;bytePosition, UINT8 &amp;amp;bitPosition)
{
    UINT8 mask = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, val = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;// mask用来表示提取第几位的数据，eg:0001 0000，表示提取第5位的数据&lt;/span&gt;
    mask = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; - bitPosition);
    &lt;span class=&quot;co&quot;&gt;// 将当前字节数据与mask进行按位与运算，只保留那一位上的数据，整体数据!=0表明那一位数据为1&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// val保存bytePosition上，第bitPosition的值&lt;/span&gt;
    val = ((buf[bytePosition] &amp;amp; mask) != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
    &lt;span class=&quot;co&quot;&gt;// 如果读到字节末尾，修改两个Position的值&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++bitPosition &amp;gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)
    {
        bytePosition++;
        bitPosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; val;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;解码部分&quot;&gt;2. 解码部分：&lt;/h4&gt;
&lt;p&gt;参照公式：&lt;span class=&quot;math inline&quot;&gt;\(decodeNum = 2^m - 1 + k\)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;为前面0的个数，&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;为后缀二进制对应十进制的值&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; get_uev_code_num(UINT8 *buf, UINT8 &amp;amp;bytePosition, UINT8 &amp;amp;bitPosition)
{
    assert(bitPosition &amp;lt; &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;);
    UINT8 val = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, prefixZeroCount = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;     &lt;span class=&quot;co&quot;&gt;//存储每一位的数值； 前缀0的个数&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; prefix = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, surfix = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, decodeNum = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    
    &lt;span class=&quot;co&quot;&gt;//统计前缀0的个数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)
    {
        val = get_bit_at_position(buf, bytePosition, bitPosition);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (val == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        {
            prefixZeroCount++;
        }
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
        {
            &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;co&quot;&gt;// 表示计算公式中 2^m - 1 部分&lt;/span&gt;
    prefix = (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; prefixZeroCount) - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;// 计算后缀中二进制转十进制部分 k&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (size_t i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; prefixZeroCount; i++)
    {
        val = get_bit_at_position(buf, bytePosition, bitPosition);
        surfix += val*(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (prefixZeroCount - i - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;));
    }

    decodeNum = prefix + surfix;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; decodeNum;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;修改主函数&quot;&gt;3. 修改主函数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])
{
    UINT8 strArray[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;] = { &lt;span class=&quot;bn&quot;&gt;0xA6&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x43&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x98&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0xE2&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x04&lt;/span&gt;, &lt;span class=&quot;bn&quot;&gt;0x8A&lt;/span&gt; };
    UINT8 bytePosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, bitPosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;// 保存bit数据长度&lt;/span&gt;
    UINT8 dataLengthInBits = &lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(strArray) * &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;;

    &lt;span class=&quot;co&quot;&gt;// 保存解码后的数据&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; decodeNum = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; ((bytePosition * &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; + bitPosition) &amp;lt; dataLengthInBits)
    {
        decodeNum = get_uev_code_num(strArray, bytePosition, bitPosition);
        printf(&lt;span class=&quot;st&quot;&gt;&quot;ExpColumb codeNum = &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;, decodeNum);
    }

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下：&lt;br/&gt;&lt;img src=&quot;http://ouei1rgxt.bkt.clouddn.com/18-2-25/62429530.jpg&quot; alt=&quot;1 解码结果&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;二编码程序&quot;&gt;二、编码程序：&lt;/h3&gt;
&lt;p&gt;定义待编码数组，及编码后存储的数组：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;UINT8 oriNumArray[&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;] = { &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; };    &lt;span class=&quot;co&quot;&gt;// 带编码数组&lt;/span&gt;
UINT8 encodeArray[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;] = { &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; };   &lt;span class=&quot;co&quot;&gt;// 存储指数哥伦布编码后的结果&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;整体思路：&lt;/strong&gt;&lt;br/&gt;以codeNum = 13为例，&lt;br/&gt;① 前缀0的个数：&lt;span class=&quot;math inline&quot;&gt;\(prefixLen = floor[log_2(codeNum+1)] = 3\)&lt;/span&gt;；&lt;br/&gt;② 中间添加一个 1&lt;br/&gt;③ 后缀部分的二进制：&lt;span class=&quot;math inline&quot;&gt;\(codeNum+1-2^{prefixLen} = 14-8 = 6 = b(1 1 0)\)&lt;/span&gt;&lt;br/&gt;因此13的指数哥伦布编码码字为0 0 0 1 1 1 0。&lt;/p&gt;
&lt;h4 id=&quot;编码部分&quot;&gt;1. 编码部分：&lt;/h4&gt;
&lt;p&gt;与解码部分相同，使用了bytePosition和bitPosition表示写入位置。&lt;br/&gt;【使用按位或的方式，按位写入每一位数据】&lt;br/&gt;例如：该写某一字节code的第五位，这一个字节为 1101 0000，要在第五位上写入1（0同理），&lt;br/&gt;创建一个mask -&amp;gt; 0000 1000，将code这个字节与mask进行按位或运算，即可将1写入到第五位上&lt;br/&gt;code | mask = 1101 1000&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; encode_uev_array(UINT8 *encodeArray, UINT8 codeNum, UINT8 &amp;amp;bytePosition, UINT8 &amp;amp;bitPosition)
{
    &lt;span class=&quot;co&quot;&gt;// 前缀0&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; preZeroLen = floor(log(codeNum + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) / log(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;));
    bitPosition = bitPosition + preZeroLen;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (bitPosition &amp;gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)
    {
        bytePosition++;
        bitPosition = bitPosition % &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;;
    }

    &lt;span class=&quot;co&quot;&gt;// 中间1&lt;/span&gt;
    UINT8 mask = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; - bitPosition);
    encodeArray[bytePosition] = encodeArray[bytePosition] | mask;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++bitPosition &amp;gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)
    {
        bytePosition++;
        bitPosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }

    &lt;span class=&quot;co&quot;&gt;// 后缀二进制&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; surDecNum = codeNum + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; - pow(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, preZeroLen);
    dec_to_bin(encodeArray, surDecNum, bytePosition, bitPosition, preZeroLen);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;十进制转二进制&quot;&gt;2. 十进制转二进制：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; dec_to_bin(UINT8 *encodeArray, UINT8 decNum, UINT8 &amp;amp;bytePosition, UINT8 &amp;amp;bitPosition, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; preZeroLen)
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (preZeroLen == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
    }
    &lt;span class=&quot;co&quot;&gt;// 转换二进制用的mask&lt;/span&gt;
    UINT8 maskBin = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (preZeroLen - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;co&quot;&gt;// 按位写数据用的mask&lt;/span&gt;
    UINT8 maskVal;
    UINT8 val = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;

    &lt;span class=&quot;co&quot;&gt;// 写入二进制后缀&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (size_t i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; preZeroLen; i++)
    {
        val = (decNum &amp;amp; maskBin ? &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);

        maskVal = val &amp;lt;&amp;lt; (&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; - bitPosition);
        encodeArray[bytePosition] = encodeArray[bytePosition] | maskVal;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (++bitPosition &amp;gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)
        {
            bytePosition++;
            bitPosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
        maskBin = maskBin &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;主函数&quot;&gt;3. 主函数：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;UINT8 encodeArray[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;] = { &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; };
UINT8 bytePosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, bitPosition = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
UINT8 oriNumArray[&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;] = { &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; };
UINT8 oriNumLen = &lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(oriNumArray) / &lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(UINT8);

&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (size_t i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; oriNumLen; i++)
{
    encode_uev_array(encodeArray, oriNumArray[i], bytePosition, bitPosition);
    printf(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;, bitPosition);*/
}

&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (size_t k = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;; k++)
{
    printf(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%x&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; &quot;&lt;/span&gt;, encodeArray[k]);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下，与第一部分中待解码数组中数据相同，证明编解码部分程序能正确执行。&lt;br/&gt;&lt;img src=&quot;http://ouei1rgxt.bkt.clouddn.com/18-3-8/54943661.jpg&quot; alt=&quot;2&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 07:35:00 +0000</pubDate>
<dc:creator>Simon_Ace</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shuofxz/p/8528803.html</dc:identifier>
</item>
<item>
<title>如何让window.open()以post请求方式调用（巧妙解法） - 半城枫叶半城雨丶</title>
<link>http://www.cnblogs.com/xinde123/p/8528777.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xinde123/p/8528777.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题由来：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在公司遇到一个线上bug，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; url = 'http://106.75.31.215:8012/onlinePreview?url=' +&lt;span&gt; encodeURIComponent(fileUrl);

window.open(url, &lt;/span&gt;&quot;_blank&quot;, &quot;height=&quot; +&lt;span&gt; winHeight
            &lt;/span&gt;+ &quot;,top=80,left=80,toolbar=no, menubar=no, scrollbars=yes, resizable=yes&quot;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于 fileUrl 是多张图片的 url 拼装而来，在这里我们使用get请求方式调的后台图片预览接口，发现后台报错 请求头过长。&lt;/p&gt;
&lt;p&gt;特此查了下  &lt;/p&gt;
&lt;p&gt;在IE8 下的URL地址总长度为：4076，超过该长度会自动忽略后面的内容；&lt;/p&gt;
&lt;p&gt;在firefox 25下的URL地址总长度可以达到:7530，超过该长度会访问错误；&lt;/p&gt;
&lt;p&gt;在chrome 29.0.1547.62 的最大总长度达到:7675，超过该长度会访问错误；&lt;/p&gt;
&lt;p&gt;尴尬。。。我们这有一万多的字符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;解决思路：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换post请求啊，不能忍啊，因为post请求理论上没有请求数据的长度限制，但是没这么搞过啊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;解决方案：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好像以前只在form表单里接触过post调用，那么能不能让window.open()先打开一个隐藏的form表单呢？然后把请求数据塞进去，而偷偷的自动提交，不久可以了么。机智啊&lt;/p&gt;
&lt;p&gt;实施如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; winHeight = window.document.documentElement.clientHeight-10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; url = 'http://106.75.31.215:8012/picturesPreview'&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; formStr = '&amp;lt;form style=&quot;visibility:hidden;&quot; method=&quot;POST&quot; action=&quot;' + url + '&quot;&amp;gt;' +
                        '&amp;lt;input type=&quot;hidden&quot; name=&quot;urls&quot; value=&quot;' + encodeURIComponent(urls) + '&quot; /&amp;gt;' +
                        '&amp;lt;input type=&quot;hidden&quot; name=&quot;currentUrl&quot; value=&quot;' + encodeURIComponent(fileUrl) + '&quot; /&amp;gt;'+
                        '&amp;lt;/form&amp;gt;'&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; win = window.open(&quot;&quot;, &quot;_blank&quot;, &quot;height=&quot; +&lt;span&gt; winHeight
                        &lt;/span&gt;+ &quot;,top=80,left=80,toolbar=no, menubar=no, scrollbars=yes, resizable=yes&quot;&lt;span&gt;);
win.document.body.innerHTML &lt;/span&gt;=&lt;span&gt; formStr;
win.document.forms[&lt;/span&gt;0].submit();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经测试，可以跑通，完美解决。 &lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 07:32:00 +0000</pubDate>
<dc:creator>半城枫叶半城雨丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xinde123/p/8528777.html</dc:identifier>
</item>
<item>
<title>教我徒弟Android开发入门（三） - Stars-one</title>
<link>http://www.cnblogs.com/kexing/p/8528714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kexing/p/8528714.html</guid>
<description>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;老实说，我有点不知道该讲什么了，希望看过的人能给我提提意见，感激不尽。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;本期知识点：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;长按事件，&lt;span&gt;log的简单使用&lt;/span&gt;，双击退出程序功能的实现&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;正文：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;上一期我们了解到点击事件其实就是让控件绑定一个监听器，之后在监听器中写上相关的处理代码，如弹出Toast弹窗啊等等，长按事件与点击事件十分类似，过程实现的也是几乎一样的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;问题来了，竟然是一样的，那么之前在点击事件中说的五种设置监听器的方法在长按事件中能否也能实现呢？答案是可以的，限于时间，我就不一一测试了，以之前点击事件，直接实现了一个onlongclick接口，之后为控件绑定监听器，复写监听器中的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308144659958-1359952265.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308144838637-412491814.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308144854278-1850165571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308145040669-1246229034.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上面的图片很好的展示了我们的效果，不知道大家是不是注意到了，我们使用的Toast弹窗就是被用来当做检查测试来使用的，这里我们的代码还比较少，用Toast没有什么问题，但是，日后，可能我们写的代码很多，也很复杂，测试的时候出现了bug，我们用Toast去检查的话是不是很头疼？所以接下来向大家简单的介绍一下Log的使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Log的使用其实很简单，&lt;span&gt;我们只需要打上Log，之后按下tab键就会像Toast那样补全代码&lt;/span&gt;，我电脑不知道最近怎么了，按下tab键无法补全代码，不过，大家的电脑应该是可以的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我在长按事件中添加了图片中的代码，&lt;span&gt;Log.d里面接收两个String参数，第一个是Tag（标识），第二个则是内容&lt;/span&gt;，一般使用的时候，我们可以在当前的activity中声明一个静态String常量，之后调用Log的时候，Tag就直接使用该常量即可，如下面的例子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private static final TAG = “MainActivity”;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308145840178-1249016963.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要怎么样去查看呢？打开Android Monitor，就会出现一个面板，之后，我们就在模拟器中进行相关的操作，返回查看就会显示消息了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308150311317-1282996285.png&quot; alt=&quot;&quot; width=&quot;1128&quot; height=&quot;604&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308150437577-2142235929.png&quot; alt=&quot;&quot; width=&quot;1115&quot; height=&quot;597&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 我们在许多APP都有双击退出程序的功能，这个功能想必大家应该也有兴趣吧，所以来讲解一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Activity中有一个方法名为onBackPressed，如名字可以知道就是当我们按下返回键时候就会调用此方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现的思路，当按下返回键时，弹出一个Toast，提示用户需要再按一次才可以退出程序，用户如果在两秒内再次按下了返回键就退出程序，否则不退出程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308151341760-1745934006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308151519616-1087583520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308152102786-412330322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里我们还需要在onDestroy加上System.exit(0);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代表着完全退出，如果不加的程序就会报错&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180308152342304-316633066.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 08 Mar 2018 07:25:00 +0000</pubDate>
<dc:creator>Stars-one</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kexing/p/8528714.html</dc:identifier>
</item>
<item>
<title>设计模式 创建型-工厂模式 - b0b0</title>
<link>http://www.cnblogs.com/hbb0b0/p/8528709.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hbb0b0/p/8528709.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;工厂模式是为创建对象提供接口，以便把创建对象的具体过程隔离起来，封装变化，提高创建的通用性。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;分类&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;工厂模式包含以下三种分类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;简单工厂&lt;/li&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;抽象工厂&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;简单工厂&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;简单工厂又叫静态工厂方法（Static Factory Method），它是把产品的创建移到统一的工厂方法中去，而不是把产品创建依赖具体产品使用new来创建。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;类图如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/47642/201803/47642-20180308150540300-1177344113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;场景：我们需要生产共享单车，目前市场上有膜拜单车与小黄车两种产品可供选择。市场上有家代理生产自行车工厂就叫 SimpleBikeFactory,只要给它单车标签，他就会按要求生产膜拜单车或小黄车。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如果那天要生产小绿车， SimpleBikeFactory 只要调整他中的逻辑，就可以满足需要了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; hbb0b0.DesignPattern
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自行车接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IBike
    {

    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 膜拜单车
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoBike : IBike
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MoBike()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MoBike&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 小黄车
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OfOBike : IBike
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OfOBike()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OfOBike&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 简单单车生产工厂
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IBike GetBike(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; bikeName)
        {
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (bikeName)
            {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoBike();
                
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OfOBike();
                    
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoBike();
                    
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; hbb0b0.DesignPattern.SimpleFactory
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SimpleFactoryApp
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleFactoryApp : IMain
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Test()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建膜拜单车&lt;/span&gt;
            IBike moBike = SimpleBikeFactory.GetBike(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建小黄车&lt;/span&gt;
            IBike ofoBike = SimpleBikeFactory.GetBike(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt;本来生产单车的代码&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;小黄车 OfOBike ofoBike =new OfOBike();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;膜拜单车 MoBike moBike = new MoBike();&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;现在把生产单车对具体单车的依赖移到了静态工厂方法，封装了创建单车的变化，避免了创建单车代码分散到各个地方，便于单车创建逻辑的维护与修改。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;.net&lt;/strong&gt; &lt;strong&gt;中的使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Encoding 中的 GetEncoding方法就是简单工厂，它就是根据传入标识来确定生成那种Encoding。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/47642/201803/47642-20180308150618089-254408616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;工厂方法模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;为创建对象定义一个接口，让子类来决定哪一个类需要进行实例化，工厂模式允许一个类把实例化过程委托给子类。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;类图&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/47642/201803/47642-20180308150628734-1662713638.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; hbb0b0.DesignPattern.FactoryMethod
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 单车接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IBike
    {
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 膜拜单车
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoBike:IBike
    {
    }
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 小黄车
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OfOBike:IBike
    {
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 单车工厂接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取单车
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        IBike GetBike();
    }
   &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 膜拜单车工厂
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoBikeFactory : IBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IBike GetBike()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoBike();
        }
    }
   &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 小黄车工厂
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OfOBikeFactory : IBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IBike GetBike()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OfOBike();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; hbb0b0.DesignPattern.AbstractFactory
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractFactoryApp : IMain
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Test()
        {

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生产膜拜系列产品：单车与电动车&lt;/span&gt;
            IBikeFactory moFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoBikeFactory();
            
            IBike moBike&lt;/span&gt;=&lt;span&gt;  moFactory.GetBike();
            IElectricBike moElectric &lt;/span&gt;=&lt;span&gt;  moFactory.GetElectricBike();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生产小黄车系列产品：单车与电动车&lt;/span&gt;
            IBikeFactory ofoFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OfOBikeFactory();
            IBike ofoBike &lt;/span&gt;=&lt;span&gt; ofoFactory.GetBike();
            IElectricBike ofoElectric &lt;/span&gt;=&lt;span&gt; ofoFactory.GetElectricBike();

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;.net 使用工厂模式&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/47642/201803/47642-20180308150644341-1380717763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;抽象工厂：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;定义为创建相关或具有依赖关系的对象族提供一个接口，而无需分别为这些对象指定具体的类。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;抽象工厂允许客户使用抽象的接口来创建一组相关产品，而不需要知道或关心实际生产出的具体产品是什么。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/47642/201803/47642-20180308150715145-294556961.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; hbb0b0.DesignPattern.AbstractFactory
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 电动车接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IElectricBike
    {
    }

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 抽象工厂
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; （提供多种产品）
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取自行车接口
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        IBike GetBike();

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取电动车接口
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        IElectricBike GetElectricBike();
    }
}
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 膜拜自行车工厂
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MoBikeFactory : IBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IBike GetBike()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoBike();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IElectricBike GetElectricBike()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoElectricBike();
        }
    }
}
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小黄车自行车工厂&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OfOBikeFactory : IBikeFactory
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IBike GetBike()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OfOBike();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IElectricBike GetElectricBike()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OfOElectricBike();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;使用&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; hbb0b0.DesignPattern.AbstractFactory
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractFactoryApp : IMain
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Test()
        {

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生产膜拜系列产品：单车与电动车&lt;/span&gt;
            IBikeFactory moFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MoBikeFactory();
            
            IBike moBike&lt;/span&gt;=&lt;span&gt;  moFactory.GetBike();
            IElectricBike moElectric &lt;/span&gt;=&lt;span&gt;  moFactory.GetElectricBike();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生产小黄车系列产品：单车与电动车&lt;/span&gt;
            IBikeFactory ofoFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OfOBikeFactory();
            IBike ofoBike &lt;/span&gt;=&lt;span&gt; ofoFactory.GetBike();
            IElectricBike ofoElectric &lt;/span&gt;=&lt;span&gt; ofoFactory.GetElectricBike();

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;.net&lt;/strong&gt; &lt;strong&gt;应用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/47642/201803/47642-20180308150739659-761216314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;三者区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;简单工厂模式：是把产品创建统移到统一的工厂方法中去，从而解耦了产品的创建依赖具体的产品。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;工厂模式：为创建对象定义一个接口，而由子类决定产品的创建。对象的创建是在子类中完成。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;抽象工厂模式：为某一系列或具有依赖关系的产品创建定义接口，而不需要分别为各个产品的创建指定具体的类。工厂模式只提供单一产品，抽象工厂是对工厂模式的升级，抽象工厂是在工厂模式的基础上提供一系列或具有依赖关系的商品。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;

</description>
<pubDate>Thu, 08 Mar 2018 07:24:00 +0000</pubDate>
<dc:creator>b0b0</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hbb0b0/p/8528709.html</dc:identifier>
</item>
<item>
<title>javascript中的内存管理和垃圾回收 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8528677.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8528677.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　不管什么程序语言，内存生命周期基本是一致的：首先，分配需要的内存；然后，使用分配到的内存；最后，释放其内存。而对于第三个步骤，何时释放内存及释放哪些变量的内存，则需要使用垃圾回收机制。本文将详细介绍javascript中的内存管理和垃圾回收&lt;/p&gt;

&lt;h3&gt;分配内存&lt;/h3&gt;
&lt;p&gt;　　为了不让程序员费心分配内存，JavaScript 在定义变量时就完成了内存分配&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; n = &lt;span&gt;123&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给数值变量分配内存&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;azerty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给字符串分配内存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; o =&lt;span&gt; {a: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,b: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;}; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给对象及其包含的值分配内存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　有些函数调用结果是分配对象内存&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; d = &lt;span&gt;new&lt;/span&gt; Date(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分配一个 Date 对象&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; e = document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分配一个 DOM 元素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　有些方法分配新变量或者新对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ouais ouais&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nan nan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a2 = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;generation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nan nan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a3 =&lt;span&gt; a.concat(a2); 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 新数组有四个元素，是 a 连接 a2 的结果&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【存储方式】&lt;/p&gt;
&lt;p&gt;　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中&lt;/p&gt;
&lt;p&gt;　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/JS_ECMA_grammer_stackAndHeap.gif&quot; alt=&quot;stackAndHeap&quot; width=&quot;311&quot; height=&quot;390&quot;/&gt;&lt;/div&gt;

&lt;h3&gt;使用内存&lt;/h3&gt;
&lt;p&gt;　　使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;console.log(a);// 读取内存中的值&lt;br/&gt;a = 2; // 写入内存
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;释放内存&lt;/h3&gt;
&lt;p&gt;　　大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”&lt;/p&gt;
&lt;p&gt;　　Javascript内嵌了垃圾收集器，用来跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。垃圾收集器会按照固定的时间间隔，或代码执行中预定的收集时间，周期性地执行这一操作&lt;/p&gt;
&lt;p&gt;　　局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈(或堆)内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直到函数执行结束。此时，局部变量就没有存在的必要了。因此可以释放它们的内存以供将来使用。在这种情况下，很容易判断变量是否还有存在的必要；但并非所有情况下都这么容易就能得出结论&lt;/p&gt;
&lt;p&gt;　　垃圾收集器必须跟踪哪个变量有用哪个变量无用，对于不再有用的变量打上标记，以备将来收回其所占用的内存。用于标识无用变量的策略通常有标记清除和引用计数两种&lt;/p&gt;

&lt;h3&gt;引用计数&lt;/h3&gt;
&lt;p&gt;　　引用计数是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收&lt;/p&gt;
&lt;p&gt;　　下面代码中，两个对象a、b被创建，一个作为另一个的属性被引用，另一个被分配给变量o&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; o ={ a: {b:&lt;span&gt;2&lt;/span&gt;}}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　o2引用了o&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; o2 = o;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　“这个对象”的原始引用o被o2替换了&lt;/p&gt;

&lt;p&gt;　　现在，“这个对象”有两个引用了，一个是o2，一个是oa&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; oa = o2.a;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最初的对象现在已经是零引用了，然而它的属性a的对象还在被oa引用，所以还不能回收&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
o2 = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　a属性的那个对象现在也是零引用了，它可以被垃圾回收了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
oa = &lt;span&gt;null&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【循环引用】&lt;/p&gt;
&lt;p&gt;　　Netscape Navigator3.0是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题——循环引用&lt;/p&gt;
&lt;p&gt;　　引用计数算法有个限制：无法处理循环引用。在下面的例子中，两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function f(){
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; o =&lt;span&gt; {};
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; o2 =&lt;span&gt; {};
  o.a &lt;/span&gt;= o2; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; o 引用 o2&lt;/span&gt;
  o2.a = o; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; o2 引用 o&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;azerty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
}
f();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【IE低版本】&lt;/p&gt;
&lt;p&gt;　　IE8-浏览器中，有一部分对象并不是原生javascript对象，例如，其BOM和DOM中的对象就是使用c++以COM(component Object Model 组件对象模型)对象的形式实现，而COM对象的垃圾回收机制采用的就是引用计数策略。该方式常常造成对象被循环引用时内存发生泄漏&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function f(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; element = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;some_element&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; myObject = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
    myObject.element &lt;/span&gt;=&lt;span&gt; element;
    element.someObject &lt;/span&gt;=&lt;span&gt; myObject;
}
fn()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个例子在一个DOM元素(element)与一个原生javascript对象(myObject)之间创建了循环引用。其中，变量myObject有一个名为element的属性指向element对象，而变量element也有一个属性名为someObject的属性指向myObject。由于存在这个循环引用，即使将例子中的DOM从页面中移除，它也永远不会被回收&lt;/p&gt;
&lt;p&gt;　　为了避免类似这样的循环引用，最好是在不使用它们的时候手工断开原生javascript和DOM元素之间的连接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
myObject.element = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
element.someObject &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存&lt;/p&gt;
&lt;p&gt;　　为了解决此问题，IE9把BOM和DOM对象都转换成了真正的javascript对象&lt;/p&gt;

&lt;h3&gt;标记清除&lt;/h3&gt;
&lt;p&gt;　　javascript中最常用的垃圾收集算法是标记清除(mark-and-sweep)，这个算法把“对象是否不再需要”简化定义为“对象是否可以到达”。如果对象不可到达，对象将被垃圾回收机制回收&lt;/p&gt;
&lt;p&gt;　　大多数浏览器实现使用的都是标记清除式的垃圾收集策略，只不过垃圾收集的时间互有不同&lt;/p&gt;
&lt;p&gt;　　这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以到达的对象和所有不能到达的对象&lt;/p&gt;
&lt;p&gt;　　该算法称为标记清除，是因为分为标记(mark)和清除(sweep)两个阶段&lt;/p&gt;
&lt;p&gt;　　在标记阶段，垃圾回收器会从根对象开始遍历，每一个可以从根对象访问到的对象都会被添加一个标识，于是这个对象就被标识为可到达对象&lt;/p&gt;
&lt;p&gt;　　在清除阶段，垃圾回收器会对内存从头到尾进行线性遍历，如果发现有对象没有被标识为可到达对象，那么就将此对象占用的内存回收，并且将原来标记为可到达对象的标识清除，以便进行下一次垃圾回收操作&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/JS_garbageCollection1.png&quot; alt=&quot;garbageCollection1&quot; width=&quot;434&quot; height=&quot;502&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　在标记阶段，从根对象1可以访问到B，从B又可以访问到E，那么B和E都是可到达对象，同样的道理，F、G、J和K都是可到达对象。在回收阶段，所有未标记为可到达的对象都会被垃圾回收器回收&lt;/p&gt;
&lt;p&gt;【循环引用】&lt;/p&gt;
&lt;p&gt;　　使用标记清除算法，循环引用不再是问题，上面的示例中，函数调用返回之后，两个对象从全局对象出发无法获取。因此，他们将会被垃圾回收器回收&lt;/p&gt;

&lt;h3&gt;性能问题&lt;/h3&gt;
&lt;p&gt;　　垃圾收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大的。在这种情况下，确定垃圾收集时间间隔是一个非常重要的问题&lt;/p&gt;
&lt;p&gt;　　IE的垃圾收集器是根据内存分配量运行的。具体一点说，就是256个变量，4096个对象(或数组)字面量和数组元素(slot)或者64kb的字符串。达到上述任何一个临界值，垃圾收集器就会运行&lt;/p&gt;
&lt;p&gt;　　这种实现方式的问题在于，如果一个脚本中包含那么多变量，那么该脚本很可能会在其生命周期中一直保有那么多的变量。而这样一来，垃圾收集器就不得不频繁地运行。结果，由此引发的严重性能问题促使IE7重写了其垃圾收集例程&lt;/p&gt;
&lt;p&gt;　　IE7的javascript引擎的垃圾收集例程改变了工作方式：触发垃圾收集的变量分配、字面量和数组元素的临界值被调整为动态修正。IE7中的各项临界值在初始时与IE6相等。如果垃圾收集例程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会加倍。如果例程回收了85%的内存分配量，则将各种临界值重置回默认值。这样，极大地提升了IE在运行包含大量javascript的页面时的性能&lt;/p&gt;
&lt;p&gt;　　事实上，在有的浏览器中可以触发垃圾收集过程。在IE中，调用window.CollectGarbage()方法会立即执行垃圾收集&lt;/p&gt;

&lt;h3&gt;优化内存占用&lt;/h3&gt;
&lt;p&gt;　　使用具备垃圾收集机制的javascript的主要问题在于：分配给web浏览器的可用内存数量通常要比分配给桌面应用程序的少，目的是防止运行javascript的网页耗尽全部系统内存而导致系统崩溃。内存限制问题不仅会影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量&lt;/p&gt;
&lt;p&gt;　　因此，确保占用最少的内存可以让页面获得更好的性能。而优化内存占用的最佳方式是：为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为null来释放其引用，这种做法叫解除引用(dereferencing)。这一做法适用于大多数全局变量和全局对象的属性，局部变量会在它们离开执行环境时自动被解除引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function createPerson(name){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; localPerson = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
    localPerson.name &lt;/span&gt;=&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; localPerson;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; globalPerson = createPerson(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
globalPerson &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　不过，要注意的是，解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收&lt;/p&gt;

</description>
<pubDate>Thu, 08 Mar 2018 07:21:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8528677.html</dc:identifier>
</item>
<item>
<title>Redis进阶实践之十五 Redis-cli命令行工具使用详解第二部分（结束） - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8527770.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8527770.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;           今天继续redis-cli使用的介绍，上一篇文章写了一部分，写到第9个小节，今天就来完成第二部分。话不多说，开始我们今天的讲解。如果要想看第一篇文章，地址如下：&lt;a href=&quot;http://www.cnblogs.com/PatrickLiu/p/8508975.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/PatrickLiu/p/8508975.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、使用详解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;          上篇文章写到第9个小节，今天直接按着以上的序号，继续来写&lt;/p&gt;&lt;p&gt;          &lt;span&gt;&lt;strong&gt;10、特殊的操作模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                    到目前为止，我们看到了redis-cli的两种主要模式。&lt;/p&gt;&lt;p&gt;                         1、命令行执行Redis命令。&lt;/p&gt;&lt;p&gt;                         2、交互式的“REPL-like”用法。&lt;/p&gt;&lt;p&gt;        　　      然而，CLI执行与Redis相关的其他辅助任务，这些任务将在下一节中介绍：&lt;/p&gt;&lt;p&gt;                         1、监控工具显示有关Redis服务器的连续统计信息。&lt;/p&gt;&lt;p&gt;                         2、扫描Redis数据库查找非常大的key。&lt;/p&gt;&lt;p&gt;                         3、与模式匹配的key空间扫描仪。&lt;/p&gt;&lt;p&gt;                         4、作为Pub/Sub客户订阅频道。&lt;/p&gt;&lt;p&gt;                         5、监视Redis实例中执行的命令。&lt;/p&gt;&lt;p&gt;                         6、以不同方式检查Redis服务器的延迟。&lt;/p&gt;&lt;p&gt;                         7、检查本地计算机的调度程序延迟。&lt;/p&gt;&lt;p&gt;                         8、从远程Redis服务器传输RDB备份到本地。&lt;/p&gt;&lt;p&gt;                         9、扮演Redis从节点的角色，展现从节点所接受的东西。&lt;/p&gt;&lt;p&gt;                        10、模拟LRU工作负载以显示有关按键命中的统计信息。&lt;/p&gt;&lt;p&gt;                        11、Lua调试器的客户端。&lt;/p&gt;&lt;p&gt;                  &lt;span&gt;&lt;strong&gt;10.1、连续统计模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                             这可能是redis-cli的最不常用的功能之一，并且对于实时监控Redis实例来说是非常有用。要启用此模式，使用--stat选项。 在这种模式下，CLI的行为非常清晰的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                            $ redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --&lt;span&gt;stat
                            &lt;/span&gt;------- data ------ --------------------- load -------------------- - child -&lt;span&gt;
                            keys       mem      clients blocked requests            connections
                            &lt;/span&gt;&lt;span&gt;506&lt;/span&gt;        &lt;span&gt;1015&lt;/span&gt;.00K &lt;span&gt;1&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;24&lt;/span&gt; (+&lt;span&gt;0&lt;/span&gt;)             &lt;span&gt;7&lt;/span&gt;
                            &lt;span&gt;506&lt;/span&gt;        &lt;span&gt;1015&lt;/span&gt;.00K &lt;span&gt;1&lt;/span&gt;       &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;25&lt;/span&gt; (+&lt;span&gt;1&lt;/span&gt;)             &lt;span&gt;7&lt;/span&gt;
                            &lt;span&gt;506&lt;/span&gt;        &lt;span&gt;3.40M&lt;/span&gt;    &lt;span&gt;51&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;60461&lt;/span&gt; (+&lt;span&gt;60436&lt;/span&gt;)      &lt;span&gt;57&lt;/span&gt;
                            &lt;span&gt;506&lt;/span&gt;        &lt;span&gt;3.40M&lt;/span&gt;    &lt;span&gt;51&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;146425&lt;/span&gt; (+&lt;span&gt;85964&lt;/span&gt;)     &lt;span&gt;107&lt;/span&gt;
                            &lt;span&gt;507&lt;/span&gt;        &lt;span&gt;3.40M&lt;/span&gt;    &lt;span&gt;51&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;233844&lt;/span&gt; (+&lt;span&gt;87419&lt;/span&gt;)     &lt;span&gt;157&lt;/span&gt;
                            &lt;span&gt;507&lt;/span&gt;        &lt;span&gt;3.40M&lt;/span&gt;    &lt;span&gt;51&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;321715&lt;/span&gt; (+&lt;span&gt;87871&lt;/span&gt;)     &lt;span&gt;207&lt;/span&gt;
                            &lt;span&gt;508&lt;/span&gt;        &lt;span&gt;3.40M&lt;/span&gt;    &lt;span&gt;51&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;408642&lt;/span&gt; (+&lt;span&gt;86927&lt;/span&gt;)     &lt;span&gt;257&lt;/span&gt;
                            &lt;span&gt;508&lt;/span&gt;        &lt;span&gt;3.40M&lt;/span&gt;    &lt;span&gt;51&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;       &lt;span&gt;497038&lt;/span&gt; (+&lt;span&gt;88396&lt;/span&gt;)     &lt;span&gt;257&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                          在这种模式下，每秒都会打印一条新的数据行，其中包含有用信息和旧数据点之间的差异。 您可以轻松了解内存使用情况，客户端的链接等情况。&lt;/p&gt;&lt;p&gt;                          在这种情况下，-i &amp;lt;interval&amp;gt;选项的作用就是修改输出新数据行的频率。 默认值是一秒。&lt;/p&gt;&lt;p&gt;    &lt;span&gt;&lt;strong&gt;             10.2、大键扫描&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                            在这种特殊模式下，redis-cli可用作key空间容量大小的分析器。 它扫描占据比较大空间的key的数据集合，并能提供有关数据集组成的数据类型的信息。 该模式使用--bigkeys 选项启用，并生成十分详细的输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
                          [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --&lt;span&gt;bigkeys

                           # Scanning the entire keyspace to find biggest keys &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; well &lt;span&gt;as&lt;/span&gt;&lt;span&gt; average sizes per key type.
                           # 扫描整个键的空间以查找最大键以及每种键类型的平均大小。
                           # You can use &lt;/span&gt;-i &lt;span&gt;0.1&lt;/span&gt; to sleep &lt;span&gt;0.1&lt;/span&gt; sec per &lt;span&gt;100&lt;/span&gt;&lt;span&gt; SCAN commands (not usually needed).
                           # 您可以使用&lt;/span&gt;-i &lt;span&gt;0&lt;/span&gt;&lt;span&gt;.1来每100次SCAN命令休息0.1秒（通常不需要）。

                           [&lt;/span&gt;&lt;span&gt;00.00&lt;/span&gt;%] Biggest &lt;span&gt;string&lt;/span&gt; found so far &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; with &lt;span&gt;1&lt;/span&gt;&lt;span&gt; bytes
                           [&lt;/span&gt;&lt;span&gt;00.00&lt;/span&gt;%] Biggest &lt;span&gt;string&lt;/span&gt; found so far &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; with &lt;span&gt;25&lt;/span&gt;&lt;span&gt; bytes

                           &lt;/span&gt;-------- summary -------&lt;span&gt;

                          Sampled &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; keys &lt;span&gt;in&lt;/span&gt; the keyspace!&lt;span&gt;
                          Total key length &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; bytes &lt;span&gt;is&lt;/span&gt; &lt;span&gt;20&lt;/span&gt; (avg len &lt;span&gt;4.00&lt;/span&gt;&lt;span&gt;)

                          Biggest &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; found &lt;span&gt;'&lt;/span&gt;&lt;span&gt;foo1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; has &lt;span&gt;25&lt;/span&gt;&lt;span&gt; bytes

                          &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; strings with &lt;span&gt;35&lt;/span&gt; bytes (&lt;span&gt;100.00&lt;/span&gt;% of keys, avg size &lt;span&gt;7.00&lt;/span&gt;&lt;span&gt;)
                          &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; lists with &lt;span&gt;0&lt;/span&gt; items (&lt;span&gt;00.00&lt;/span&gt;% of keys, avg size &lt;span&gt;0.00&lt;/span&gt;&lt;span&gt;)
                          &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; sets with &lt;span&gt;0&lt;/span&gt; members (&lt;span&gt;00.00&lt;/span&gt;% of keys, avg size &lt;span&gt;0.00&lt;/span&gt;&lt;span&gt;)
                          &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; hashs with &lt;span&gt;0&lt;/span&gt; fields (&lt;span&gt;00.00&lt;/span&gt;% of keys, avg size &lt;span&gt;0.00&lt;/span&gt;&lt;span&gt;)
                          &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; zsets with &lt;span&gt;0&lt;/span&gt; members (&lt;span&gt;00.00&lt;/span&gt;% of keys, avg size &lt;span&gt;0.00&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                            在输出的第一部分中，报告每个大于前一个较大键（相同类型）的新键。 摘要部分提供有关Redis实例内数据的一般统计信息。&lt;/p&gt;&lt;p&gt;                            该程序使用 SCAN 命令，因此它可以在不影响客户端操作的情况下在繁忙的服务器上执行，不过也可以使用-i选项来限制所请求的每100个键的扫描过程的秒数。 例如，-i 0.1会减慢程序的执行速度，但也会大幅减轻服务器上的负载。&lt;/p&gt;&lt;p&gt;                            请注意，摘要还会以更清晰的形式反映每次发现的最大键。 如果针对一个非常大的数据集运行，最初的输出只是提供一些有趣的信息ASAP。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;                 10.3、获取键的列表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                              还可以扫描密钥空间，再次以不阻塞Redis服务器的方式（当您使用诸如 KEYS * 之类的命令时会发生这种情况），并打印所有键的名称，或者使用特定模式进行过滤。 此模式与 --bigkeys 选项一样，使用SCAN命令，如果数据集正在发生更改，键就可能会多次反映更改，但如果从迭代开始以来就存在该键，那么该键也不会丢失。由于它使用这个选项的命令叫做--scan。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
                        [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --scan | more -&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
                         name
                         age
                         aaa
                         myset
                         myhash
                         address
                         myzset
                         rlist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                             请注意，使用 head -8 仅用于打印输出所有数据的前8行。&lt;/p&gt;&lt;p&gt;                             scan命令可以配合 --pattern 选项使用模式匹配进行扫描&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
                      [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --scan --pattern &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                       age
                       aaa
                       address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;           &lt;br/&gt;                            根据键的名称，通过使用wc命令可以使管道输出针对特定种类对象的计数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
                      [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --scan --pattern &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                      age
                      aaa
                      address

                      [root@linux redis]# redis&lt;/span&gt;-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --scan --pattern &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; | wc -&lt;span&gt;l
                      &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;                               wc -l 这个选项的 -l,横杠后面是英文字母 L 的小写，不是数字 1。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;                10.4、发布/订阅模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                              只需使用PUBLISH命令，CLI就能够在 Redis Pub/Sub通道中发布消息。这是预期的，因为PUBLISH命令与其他任何命令非常相似，使用简单。订阅频道为了接收消息使用了特殊的方法 - 在这种情况下，我们需要阻止和等待消息，此方法是作为redis-cli中的特殊模式实现的。 与其他特殊模式不同，此模式不是通过使用特殊选项启用的，而是通过使用SUBSCRIBE或PSUBSCRIBE命令启用的，无论是交互模式还是非交互模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;非系统级通用通道&lt;/span&gt;
                        [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; psubscribe &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                        Reading messages... (press Ctrl&lt;/span&gt;-&lt;span&gt;C to quit)
                        &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;1&lt;/span&gt;

                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单一通道&lt;/span&gt;
                        [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt;&lt;span&gt; psubscribe mychannel
                        Reading messages... (press Ctrl&lt;/span&gt;-&lt;span&gt;C to quit)
                        &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;                             ’*’ 带有单引号的星号表示非系统发布的消息通道，可以接受来自任何用户定义通道的信息，当然也可以输入具体名称的通道，比如：mychannel，我们针对具体名称的通道发布信息，必须制定通道名称，否则无效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                             * 单独星号，没有单引号包含的，会显示系统当前所有发布的通道，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                       [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; psubscribe *&lt;span&gt;
                        Reading messages... (press Ctrl&lt;/span&gt;-&lt;span&gt;C to quit)
                        &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;datas&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;1&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;2&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis-benchmark&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;3&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis-cli&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;4&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis.conf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;5&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis-sentinel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;6&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis-server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;7&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redis-trib.rb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;8&lt;/span&gt;
                        &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;psubscribe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sentinel.conf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                        &lt;span&gt;3&lt;/span&gt;) (integer) &lt;span&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                                 阅读消息，消息显示我们输入了 Pub/Sub 模式。 当其他客户端在某个频道发布某条消息时（例如，您可以使用redis-cli PUBLISH mychannel mymessage），Pub/Sub模式中的CLI将显示如下内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
                         [root@linux redis]#  redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt;&lt;span&gt; publish mychannel mymessage
                         (integer) &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

                         显示内容：
                         &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pmessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                         &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                         &lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mychannel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                         &lt;span&gt;4&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mymessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                                  这对调试 发布/订阅 的问题非常有用。要退出发布/订阅模式只需处理CTRL-C。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;                  10.5、监视在Redis中执行的命令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                                与 Pub/Sub 模式类似，使用MONITOR模式后，将自动输入监控模式。它将打印Redis实例收到的所有命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                          [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt;&lt;span&gt; monitor
                          OK
                          &lt;/span&gt;&lt;span&gt;1520321617.017015&lt;/span&gt; [&lt;span&gt;0&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;34984&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;publish&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mych&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mymessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                          &lt;span&gt;1520321654.339150&lt;/span&gt; [&lt;span&gt;0&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;34986&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                                请注意，可以使用管道输出，因此您可以使用诸如grep等工具监视特定模式。&lt;/p&gt;&lt;p&gt;                 &lt;span&gt;&lt;strong&gt;10.6、 监视Redis实例的延迟&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                             Redis经常用于延迟非常严重的环境中。延迟涉及应用程序中的多个动态的部分，从客户端库到网络堆栈，再到Redis实例本身。&lt;/p&gt;&lt;p&gt;                             CLI有多种功能用于研究Redis实例的延迟并了解延迟的最大值，平均值和分布。&lt;/p&gt;&lt;p&gt;                             基本的延迟检查工具是 --latency 选项。 使用此选项，CLI运行一个循环，将PING命令发送到Redis实例，并测量获得答复的时间。这种情况每秒发生100次，统计信息在控制台中实时更新：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                       [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --&lt;span&gt;latency
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;3&lt;/span&gt;, avg: &lt;span&gt;0.28&lt;/span&gt; (&lt;span&gt;1051&lt;/span&gt; samples)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                              统计数据以毫秒计数。通常情况下，由于系统内核调度程序运行redis-cli本身所导致的延迟，所以一个非常快的实例的平均延迟往往被高估了一点，所以0.19以上的平均延迟可能是0.01或更少。然而，这通常不是一个大问题，因为我们对几毫秒或更长时间的事件才感兴趣。&lt;/p&gt;&lt;p&gt;                              有时候，研究平均延迟期的最大值和平均值如何随时间发展是有用的。--latency-history选项用于此目的：它的工作方式与--latency完全相同，但每15秒（默认情况下）一个全新的采样会话从头开始：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
                      [root@linux ~]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --latency-&lt;span&gt;history
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;6&lt;/span&gt;, avg: &lt;span&gt;0.35&lt;/span&gt; (&lt;span&gt;1230&lt;/span&gt; samples) -- &lt;span&gt;15.00&lt;/span&gt;&lt;span&gt; seconds range
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;3&lt;/span&gt;, avg: &lt;span&gt;0.34&lt;/span&gt; (&lt;span&gt;1277&lt;/span&gt; samples) -- &lt;span&gt;15.01&lt;/span&gt;&lt;span&gt; seconds range
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;6&lt;/span&gt;, avg: &lt;span&gt;0.30&lt;/span&gt; (&lt;span&gt;1272&lt;/span&gt; samples) -- &lt;span&gt;15.00&lt;/span&gt;&lt;span&gt; seconds range
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;2&lt;/span&gt;, avg: &lt;span&gt;0.33&lt;/span&gt; (&lt;span&gt;1289&lt;/span&gt; samples) -- &lt;span&gt;15.00&lt;/span&gt;&lt;span&gt; seconds range
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;4&lt;/span&gt;, avg: &lt;span&gt;0.36&lt;/span&gt; (&lt;span&gt;1312&lt;/span&gt; samples) -- &lt;span&gt;15.01&lt;/span&gt;&lt;span&gt; seconds range
                       min: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, max: &lt;span&gt;1&lt;/span&gt;, avg: &lt;span&gt;0.24&lt;/span&gt; (&lt;span&gt;67&lt;/span&gt; samples)^C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                             您可以使用-i &amp;lt;interval&amp;gt;选项更改采样会话的时间间隔步长。&lt;/p&gt;&lt;p&gt;                             最先进的延迟研究工具，对于没有经验的用户来说也有点难解释明白，因此使用彩色终端显示一系列延迟是一种能力。您将看到一个彩色输出，指示不同样本的百分比，以及不同的ASCII字符表示不同的延迟数字。 使用 --latency-dist 选项启用此模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
                        [root@linux ~]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --latency-&lt;span&gt;dist
                        &lt;/span&gt;---------------------------------------------&lt;span&gt;
                        . &lt;/span&gt;- * #          .&lt;span&gt;01&lt;/span&gt; .&lt;span&gt;125&lt;/span&gt; .&lt;span&gt;25&lt;/span&gt; .&lt;span&gt;5&lt;/span&gt;&lt;span&gt; milliseconds
                        &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,...,&lt;span&gt;9&lt;/span&gt;      &lt;span&gt;from&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; to &lt;span&gt;9&lt;/span&gt;&lt;span&gt;     milliseconds
                        A,B,C,D,E        &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;  milliseconds
                        F,G,H,I,J        .&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,.&lt;span&gt;2&lt;/span&gt;,.&lt;span&gt;3&lt;/span&gt;,.&lt;span&gt;4&lt;/span&gt;,.&lt;span&gt;5&lt;/span&gt;&lt;span&gt;       seconds
                        K,L,M,N,O,P,Q,&lt;/span&gt;?  &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;60&lt;/span&gt;,&amp;gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds
                        From &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; to &lt;span&gt;100&lt;/span&gt;%&lt;span&gt;:                    
                        &lt;/span&gt;---------------------------------------------&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?&lt;span&gt;
                        .&lt;/span&gt;-*#123456789ABCDEFGHIJKLMNOPQ?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                              在redis-cli中还有另一个非常不寻常的延迟工具。它不会检查Redis实例的延迟，而是检查运行redis-cli的计算机的延迟。你可能会问什么延迟？ 内核调度程序固有的延迟，管理虚拟化实例的程序的延迟等等。&lt;/p&gt;&lt;p&gt;                              我们称之为内部延迟，因为它对大多数程序员来说是不透明的。 如果您的Redis实例延迟不佳，任何微不足道的事情都有可能是造成延迟的罪魁祸首，那么通过在运行Redis服务器的系统中直接在此特殊模式下运行redis-cli，可以检查系统的最佳性能。&lt;/p&gt;&lt;p&gt;                              通过测量内部延迟，您知道这是基准，Redis无法超越您的系统。为了在此模式下运行CLI，请使用--intrinsic-latency &amp;lt;test-time&amp;gt;。 测试的时间以秒为单位，并指定redis-cli多少秒可以检查一次当前正在运行的系统的延迟。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                      [root@linux ~]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --intrinsic-latency &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
                       Max latency so far: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; microseconds.
                       Max latency so far: &lt;/span&gt;&lt;span&gt;88&lt;/span&gt;&lt;span&gt; microseconds.
                       Max latency so far: &lt;/span&gt;&lt;span&gt;120&lt;/span&gt;&lt;span&gt; microseconds.
                       Max latency so far: &lt;/span&gt;&lt;span&gt;950&lt;/span&gt;&lt;span&gt; microseconds.
                       Max latency so far: &lt;/span&gt;&lt;span&gt;1192&lt;/span&gt;&lt;span&gt; microseconds.
                       Max latency so far: &lt;/span&gt;&lt;span&gt;1830&lt;/span&gt;&lt;span&gt; microseconds.
                       Max latency so far: &lt;/span&gt;&lt;span&gt;2107&lt;/span&gt;&lt;span&gt; microseconds.

                      &lt;/span&gt;&lt;span&gt;32993317&lt;/span&gt; total runs (avg latency: &lt;span&gt;0.1515&lt;/span&gt; microseconds / &lt;span&gt;151.55&lt;/span&gt;&lt;span&gt; nanoseconds per run).
                      Worst run took 13903x longer than the average latency.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;                             重要提示：必须在要运行Redis服务器的计算机上执行此命令，而不是在不同的主机上执行此命令。 它甚至不连接到Redis实例，只在本地执行测试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                             在上述情况下，我的系统不可能比最糟延迟2107微秒的情况更好，所以我可以期望某些查询在不到1毫秒的时间内运行。&lt;/p&gt;&lt;p&gt;                  &lt;span&gt;&lt;strong&gt;10.7、远程备份RDB文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                              在Redis复制的第一次同步期间，主设备和从设备以RDB文件的形式交换整个数据集。redis-cli利用此功能来提供远程备份功能，该功能允许将RDB文件从任何Redis实例传输到运行redis-cli的本地计算机。要使用此模式，请使用--rdb &amp;lt;dest-filename&amp;gt;选项调用CLI：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                      [root@linux ~]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --rdb /tmp/&lt;span&gt;dump.rdb
                      SYNC sent to master, writing &lt;/span&gt;&lt;span&gt;534&lt;/span&gt; bytes to &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/dump.rdb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                      Transfer finished with success.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                           这是确保您拥有Redis实例的灾难恢复RDB备份文件的简单而有效的方法。 但是，在脚本或cron作业中使用此选项时，请确保检查命令的返回值。如果它不为零，则发生错误，如下例所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                      [root@linux ~]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --rdb /tmp/&lt;span&gt;dump.rdb
                      SYNC sent to master, writing &lt;/span&gt;&lt;span&gt;534&lt;/span&gt; bytes to &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/dump.rdb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                      Transfer finished with success.
                      [root@linux &lt;/span&gt;~]# echo $?
                       &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       &lt;span&gt;&lt;strong&gt;        10.8、从模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                           CLI的从属模式是一种高级功能，可用于Redis开发人员和调试操作。它允许检查主站发送到复制流中的从站以便将写入传播到其副本。选项名称简单--slave。示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                      [root@linux ~]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.129&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --&lt;span&gt;slave
                      SYNC with master, discarding &lt;/span&gt;&lt;span&gt;535&lt;/span&gt;&lt;span&gt; bytes of bulk transfer...
                      SYNC done. Logging commands &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; master.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                           该命令首先丢弃第一个同步的RDB文件，然后以CSV格式记录每个收到的命令。&lt;/p&gt;&lt;p&gt;                           如果您认为某些命令未在您的从站中正确复制，这也是检查发生了什么事情的好方法，对于改进错误报告也是有用的信息。&lt;/p&gt;&lt;p&gt;       &lt;span&gt;&lt;strong&gt;        10.9、执行LRU模拟&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                           Redis通常用作LRU驱逐的缓存。根据键（key）的数量和为缓存分配的内存量（通过maxmemory指令指定），缓存命中和未命中的数量将会改变。有时，模拟命中率对正确配置缓存非常有用。&lt;/p&gt;&lt;p&gt;                          CLI有一个特殊模式，它在请求模式中使用80-20％幂律分布来执行对GET和SET操作的模拟。这意味着20％的键将被80％的时间用来请求，这是缓存场景中的普遍存在的定律。&lt;/p&gt;&lt;p&gt;                          从理论上来讲，基于给定的请求分布和Redis内存开销，可以用数学公式分析并计算命中率。 但是，Redis可以配置为不同的LRU设置（样本数量），并且LRU的实现（在Redis中近似）在不同版本之间也会有很大的变化。类似地，每个键的内存容量在各个版本之间也可能会有所不同。这就是为什么创建这个工具的原因：它的主要动机是测试Redis的LRU实现的质量，但现在也可用于测试给定版本的行为与您为部署考虑的设置的关系。&lt;/p&gt;&lt;p&gt;                          为了使用此模式，您需要指定测试中的键的数量。您还需要为maxmemory设置一个有意义值的作为第一次尝试。&lt;/p&gt;&lt;p&gt;                         &lt;span&gt;重要注意事项：在Redis配置中配置maxmemory设置至关重要：如果没有最大内存使用量上限，则由于所有键均可存储在内存中，因此命中率最终将为100％。 或者，如果您指定的键太多而没有最大内存，则最终将使用所有计算机RAM。 还需要配置适当的maxmemory策略，大部分时间是allkeys-lru。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                          在以下示例中，我配置了最大内存限制是100MB，并使用1000万个键对LRU进行了模拟。&lt;/p&gt;&lt;p&gt;                         警告：测试使用流水线并会给服务器带来压力，请勿将其用于生产实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                    [root@linux redis]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --lru-test &lt;span&gt;10000000&lt;/span&gt;
                    &lt;span&gt;156000&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;4552&lt;/span&gt; (&lt;span&gt;2.92&lt;/span&gt;%) | Misses: &lt;span&gt;151448&lt;/span&gt; (&lt;span&gt;97.08&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;153750&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;12906&lt;/span&gt; (&lt;span&gt;8.39&lt;/span&gt;%) | Misses: &lt;span&gt;140844&lt;/span&gt; (&lt;span&gt;91.61&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;159250&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;21811&lt;/span&gt; (&lt;span&gt;13.70&lt;/span&gt;%) | Misses: &lt;span&gt;137439&lt;/span&gt; (&lt;span&gt;86.30&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;151000&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;27615&lt;/span&gt; (&lt;span&gt;18.29&lt;/span&gt;%) | Misses: &lt;span&gt;123385&lt;/span&gt; (&lt;span&gt;81.71&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;145000&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;32791&lt;/span&gt; (&lt;span&gt;22.61&lt;/span&gt;%) | Misses: &lt;span&gt;112209&lt;/span&gt; (&lt;span&gt;77.39&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;157750&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;42178&lt;/span&gt; (&lt;span&gt;26.74&lt;/span&gt;%) | Misses: &lt;span&gt;115572&lt;/span&gt; (&lt;span&gt;73.26&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;154500&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;47418&lt;/span&gt; (&lt;span&gt;30.69&lt;/span&gt;%) | Misses: &lt;span&gt;107082&lt;/span&gt; (&lt;span&gt;69.31&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;151250&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;51636&lt;/span&gt; (&lt;span&gt;34.14&lt;/span&gt;%) | Misses: &lt;span&gt;99614&lt;/span&gt; (&lt;span&gt;65.86&lt;/span&gt;%)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                         该程序每秒显示统计信息。 如您所见，在第一秒钟内缓存开始被填充。 丢失率稍后稳定在我们可以预期的实际数字中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                    &lt;span&gt;120750&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;48774&lt;/span&gt; (&lt;span&gt;40.39&lt;/span&gt;%) | Misses: &lt;span&gt;71976&lt;/span&gt; (&lt;span&gt;59.61&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;122500&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;49052&lt;/span&gt; (&lt;span&gt;40.04&lt;/span&gt;%) | Misses: &lt;span&gt;73448&lt;/span&gt; (&lt;span&gt;59.96&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;127000&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;50870&lt;/span&gt; (&lt;span&gt;40.06&lt;/span&gt;%) | Misses: &lt;span&gt;76130&lt;/span&gt; (&lt;span&gt;59.94&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;124250&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;50147&lt;/span&gt; (&lt;span&gt;40.36&lt;/span&gt;%) | Misses: &lt;span&gt;74103&lt;/span&gt; (&lt;span&gt;59.64&lt;/span&gt;%)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                         对于我们的用例来说，59％的丢失率可能是不可接受的。所以我们知道100MB内存是不够的。让我们试试500MB字节。几分钟后，我们会看到输出稳定到以下数字：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                    &lt;span&gt;140000&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;135376&lt;/span&gt; (&lt;span&gt;96.70&lt;/span&gt;%) | Misses: &lt;span&gt;4624&lt;/span&gt; (&lt;span&gt;3.30&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;141250&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;136523&lt;/span&gt; (&lt;span&gt;96.65&lt;/span&gt;%) | Misses: &lt;span&gt;4727&lt;/span&gt; (&lt;span&gt;3.35&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;140250&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;135457&lt;/span&gt; (&lt;span&gt;96.58&lt;/span&gt;%) | Misses: &lt;span&gt;4793&lt;/span&gt; (&lt;span&gt;3.42&lt;/span&gt;%&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;140500&lt;/span&gt; Gets/sec | Hits: &lt;span&gt;135947&lt;/span&gt; (&lt;span&gt;96.76&lt;/span&gt;%) | Misses: &lt;span&gt;4553&lt;/span&gt; (&lt;span&gt;3.24&lt;/span&gt;%)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;           &lt;br/&gt;                        因此我们知道在500MB的情况下，我们的键数量支持足够多（1000万）和分布也很合理（80-20方式）。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;          好了，今天就写到这里了，终于把redis-cli的使用细节写完了，翻译起来也挺耗时间的，有的时候可能翻译的不准确，也请大家指出。继续努力，不能松懈。如果想看原文，地址如下：https://redis.io/topics/rediscli。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 04:54:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8527770.html</dc:identifier>
</item>
<item>
<title>Hibernate【映射】知识要点 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8527718.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8527718.html</guid>
<description>&lt;p&gt;前面的我们使用的是一个表的操作，但我们实际的开发中不可能只使用一个表的...因此，本博文主要讲解关联映射&lt;/p&gt;

&lt;p&gt;需求分析：当用户购买商品，用户可能有多个地址。&lt;/p&gt;
&lt;h2 id=&quot;数据库表&quot;&gt;数据库表&lt;/h2&gt;
&lt;p&gt;我们一般如下图一样设计数据库表，&lt;strong&gt;一般我们不会在User表设计多个列来保存地址的。因为每个用户的地址个数都不一的，会造成数据冗余&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;创建两张数据表，一张保存着用户的信息，一张保存着地址的信息。地址表使用外键来引用用户表&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506183004430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;实体&quot;&gt;实体&lt;/h2&gt;
&lt;p&gt;由于地址只是使用String类型来保存着，那么我们直接使用一个User对象就可以了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; User {
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String password;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;String&amp;gt; address;

    &lt;span class=&quot;co&quot;&gt;//各种setter和getter&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;映射文件&quot;&gt;映射文件&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!--在domain包下--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.domain&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--主键映射--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--普通字段映射--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;             Set：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                name： 映射集合的名称&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                table：集合的属性要映射到哪张表(address)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;             key：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                column：指定要映射的表（address）中的外键列&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                element：要映射的表的其他字段&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                    类型一定要指定！&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;set&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;element&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addr&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.domain;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {

        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;

        User user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;();
        user.&lt;span class=&quot;fu&quot;&gt;setUsername&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;123&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;setPassword&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;1234&quot;&lt;/span&gt;);
        user.&lt;span class=&quot;fu&quot;&gt;getAddress&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;广州&quot;&lt;/span&gt;);


        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载User的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(user);
        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506194759357?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;list集合映射配置&quot;&gt;List集合映射配置&lt;/h2&gt;
&lt;p&gt;既然我们现在已经会了如何配置Set集合了，List集合又怎么配置呢？？&lt;/p&gt;
&lt;p&gt;想一下，List集合和Set集合有什么区别...&lt;strong&gt;List集合是有序的，因此要多配置一个列来维护数据的有序性！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;&amp;lt;list&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--index是关键字，不能使用！！！！--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;list-index&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;indexNum&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/list-index&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;element&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addr&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;map集合映射配置&quot;&gt;Map集合映射配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Map集合和Collection集合的区别就是键值对模型，那么在配置的时候多一个key即可！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;map&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user_id&quot;&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;map-key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/map-key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;element&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;addr&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/map&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506200102937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上面我们讲解了集合映射是怎么配置的，那&lt;strong&gt;集合装载的元素有没有可能是对象呢？？而不是简单的String类型..&lt;/strong&gt;那个就太多了！一般地，我们集合装载的都是对象，而不是简单的String，如果我们的&lt;strong&gt;装载在集合的数据有很多类型，那么String就不能用了&lt;/strong&gt;！...&lt;/p&gt;
&lt;p&gt;需求：部门与员工之间的关系&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;一个部门有多个员工; 【一对多】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多个员工，属于一个部门 【多对一】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;设计数据库表&quot;&gt;设计数据库表&lt;/h2&gt;
&lt;p&gt;员工表应该使用一个外键来记住部门表。这样才可以维护员工和部门之间的关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506201254047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计实体&quot;&gt;设计实体&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;部门实体要使用一个集合来记住所有的员工，员工要使用一个对象引用着部门&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506201441878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.domain;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.HashSet;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Set;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Dept {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id ;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;Employee&amp;gt; set = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String deptName;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDeptName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; deptName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDeptName&lt;/span&gt;(String deptName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;deptName&lt;/span&gt; = deptName;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Set&amp;lt;Employee&amp;gt; &lt;span class=&quot;fu&quot;&gt;getSet&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; set;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSet&lt;/span&gt;(Set&amp;lt;Employee&amp;gt; set) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt; = set;
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Employee.java&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.domain;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Employee {


    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String empName;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; salary;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Dept dept;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Dept &lt;span class=&quot;fu&quot;&gt;getDept&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; dept;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDept&lt;/span&gt;(Dept dept) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dept&lt;/span&gt; = dept;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getEmpName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; empName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setEmpName&lt;/span&gt;(String empName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;empName&lt;/span&gt; = empName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getSalary&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; salary;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSalary&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; salary) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;salary&lt;/span&gt; = salary;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;映射分析&quot;&gt;映射分析&lt;/h2&gt;
&lt;p&gt;我们在写映射配置文件之前，分析一下怎么写。&lt;strong&gt;以部门映射配置文件为例&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;现在使用了一个Set集合来维护与员工的关系，Set集合的类型是员工对象...因此在映射文件中需要以下几点&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;映射集合属性的名称(employees)&lt;/li&gt;
&lt;li&gt;映射集合对应的数据表(employee)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对应的数据表的外键字段(dept_id)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合中的元素类型(Employee)【通过这个类型，Hibernate就可以找到对应类型的映射文件，从而得到对应的信息！】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506202145425?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;部门映射配置文件&quot;&gt;&lt;strong&gt;部门映射配置文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!--在domain包下--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.domain&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Dept&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dept&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--普通字段映射--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;deptName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;deptname&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--维护关系的是Set集合，对应employee表--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;set&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;  cascade=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;save-update&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;set&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;employee&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--employee的外键列是dept_no--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dept_no&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--一个部门对应多个员工，集合的类型是Employee--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;one-to-many&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Employee&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/one-to-many&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3 id=&quot;员工映射配置文件&quot;&gt;&lt;strong&gt;员工映射配置文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!--在domain包下--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.domain&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Employee&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;employee&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--普通字段数据--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;empName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;empName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;salary&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;salary&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--Hibernate这个标签可看成在当前表中设置一个外键dept_no--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;many-to-one&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dept&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Dept&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dept_no&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/many-to-one&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3 id=&quot;在一的一方测试&quot;&gt;在“一”的一方测试&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.domain;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {

        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Dept dept = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Dept&lt;/span&gt;();
        dept.&lt;span class=&quot;fu&quot;&gt;setDeptName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开发部&quot;&lt;/span&gt;);

        Employee zs = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Employee&lt;/span&gt;();
        zs.&lt;span class=&quot;fu&quot;&gt;setEmpName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;张珊&quot;&lt;/span&gt;);
        zs.&lt;span class=&quot;fu&quot;&gt;setSalary&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1111&lt;/span&gt;);
        Employee ls = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Employee&lt;/span&gt;();
        ls.&lt;span class=&quot;fu&quot;&gt;setEmpName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;李四&quot;&lt;/span&gt;);
        ls.&lt;span class=&quot;fu&quot;&gt;setSalary&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2222&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//添加关系&lt;/span&gt;
        dept.&lt;span class=&quot;fu&quot;&gt;getSet&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(zs);
        dept.&lt;span class=&quot;fu&quot;&gt;getSet&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(ls);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载User的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Dept.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Employee.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();


        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(dept);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(zs);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(ls);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Hibernate执行了5条SQL语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506210047568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;在多的一方测试&quot;&gt;在“多”的一方测试&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.domain;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {

        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Dept dept = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Dept&lt;/span&gt;();
        dept.&lt;span class=&quot;fu&quot;&gt;setDeptName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开发部&quot;&lt;/span&gt;);

        Employee zs = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Employee&lt;/span&gt;();
        zs.&lt;span class=&quot;fu&quot;&gt;setEmpName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;张珊&quot;&lt;/span&gt;);
        zs.&lt;span class=&quot;fu&quot;&gt;setSalary&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1111&lt;/span&gt;);
        Employee ls = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Employee&lt;/span&gt;();
        ls.&lt;span class=&quot;fu&quot;&gt;setEmpName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;李四&quot;&lt;/span&gt;);
        ls.&lt;span class=&quot;fu&quot;&gt;setSalary&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2222&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//维护关系&lt;/span&gt;
        zs.&lt;span class=&quot;fu&quot;&gt;setDept&lt;/span&gt;(dept);
        ls.&lt;span class=&quot;fu&quot;&gt;setDept&lt;/span&gt;(dept);



        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载User的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Dept.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Employee.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();


        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(dept);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(zs);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(ls);



        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Hibernate执行了3条SQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170506210313226?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一对多和多对一总结&quot;&gt;一对多和多对一总结&lt;/h2&gt;
&lt;p&gt;在一对多与多对一的关联关系中，&lt;strong&gt;保存数据最好的通过多的一方来维护关系，这样可以减少update语句的生成，从而提高hibernate的执行效率！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;配置一对多与多对一， 这种叫“双向关联”&lt;/li&gt;
&lt;li&gt;只配置一对多， 叫“单项一对多”&lt;/li&gt;
&lt;li&gt;只配置多对一， 叫“单项多对一”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;值得注意是：&lt;strong&gt;配置了哪一方，哪一方才有维护关联关系的权限！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;当我在部门中不配置员工的关联关系了，那么在操作部门的时候就不能得到员工的数据了【也就是：在保存部门时，不能同时保存员工的数据】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需求：&lt;strong&gt;一个项目由多个员工开发，一个员工开发多个项目&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计数据库表-1&quot;&gt;设计数据库表&lt;/h2&gt;
&lt;p&gt;一般地，&lt;strong&gt;如果是多对多的映射，我们都会使用一张中间表来保存它们的关联关系&lt;/strong&gt;....&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507135440970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计实体-1&quot;&gt;设计实体&lt;/h2&gt;
&lt;p&gt;我们在设计实体的时候，一般是&lt;strong&gt;核心数据表对应一个JavaBean实体【中间表并不是核心数据表】&lt;/strong&gt;，那么我们将会设计两个JavaBean对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507135605092?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;project.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.many2many;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.HashSet;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Set;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/7.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Project {
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; projectId;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String projectName;

    &lt;span class=&quot;co&quot;&gt;//使用Set集合与developer实体维护关系&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;Developer&amp;gt; developers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getProjectId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; projectId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setProjectId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; projectId) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;projectId&lt;/span&gt; = projectId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getProjectName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; projectName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setProjectName&lt;/span&gt;(String projectName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;projectName&lt;/span&gt; = projectName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Set&amp;lt;Developer&amp;gt; &lt;span class=&quot;fu&quot;&gt;getDevelopers&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; developers;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDevelopers&lt;/span&gt;(Set&amp;lt;Developer&amp;gt; developers) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;developers&lt;/span&gt; = developers;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;developer.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.many2many;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.HashSet;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Set;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/7.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Developer {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; developerId;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String developerName;

    &lt;span class=&quot;co&quot;&gt;//使用Set集合来维护与Project关系&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;Project&amp;gt; projects = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getDeveloperId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; developerId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDeveloperId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; developerId) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;developerId&lt;/span&gt; = developerId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDeveloperName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; developerName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDeveloperName&lt;/span&gt;(String developerName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;developerName&lt;/span&gt; = developerName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Set&amp;lt;Project&amp;gt; &lt;span class=&quot;fu&quot;&gt;getProjects&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; projects;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setProjects&lt;/span&gt;(Set&amp;lt;Project&amp;gt; projects) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;projects&lt;/span&gt; = projects;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;映射配置文件&quot;&gt;映射配置文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;以项目映射文件为例：&lt;/strong&gt;我们不急着写，首先来&lt;strong&gt;分析一下关键点&lt;/strong&gt;......想要在多对多映射中产生正确的关联关系，下面几步必不可少：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;配置映射集合的属性(developers)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射集合对应的中间表(developer_project)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间表的外键字段(project_id)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合元素的类型(Developer)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间表另外的外键字段(developer_id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Project和Developer的映射文件都需要这几个关键步骤&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;project映射文件&quot;&gt;&lt;strong&gt;Project映射文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!--在domain包下--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.many2many&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Project&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Project&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;projectId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;projectId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;projectName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;projectName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射多对多的关系--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--Set的属性名称为developers，对应developer_project表--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;set&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developers&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developer_project&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--对应developer_project表的外键列--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;project_id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--集合的类型和developer_project表的另一个外键列--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;many-to-many&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developer_id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Developer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/many-to-many&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3 id=&quot;developer映射文件&quot;&gt;&lt;strong&gt;Developer映射文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!--在domain包下--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.many2many&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Developer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Developer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developerId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developerId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developerName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developerName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射多对多的关系--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--Set的属性名称为developers，对应developer_project表--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;set&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;projects&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developer_project&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--对应developer_project表的外键列--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;developer_id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--集合的类型和developer_project表的另一个外键列--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;many-to-many&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;project_id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Project&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/many-to-many&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.many2many;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App2 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {


        &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        *     Project   Developer&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;              电商系统&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                             曹吉&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                             王春&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;               OA系统&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                             王春&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                             老张&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;            */&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Developer cj = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Developer&lt;/span&gt;();
        Developer wc = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Developer&lt;/span&gt;();
        Developer lz = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Developer&lt;/span&gt;();
        Project ds = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Project&lt;/span&gt;();
        Project oa = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Project&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置对象的数据&lt;/span&gt;
        cj.&lt;span class=&quot;fu&quot;&gt;setDeveloperName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;曹吉&quot;&lt;/span&gt;);
        wc.&lt;span class=&quot;fu&quot;&gt;setDeveloperName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;王春&quot;&lt;/span&gt;);
        lz.&lt;span class=&quot;fu&quot;&gt;setDeveloperName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;老张&quot;&lt;/span&gt;);

        oa.&lt;span class=&quot;fu&quot;&gt;setProjectName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;OA系统&quot;&lt;/span&gt;);
        ds.&lt;span class=&quot;fu&quot;&gt;setProjectName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;电商系统&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//使用Project来关联数据【在多对多中，一样的】&lt;/span&gt;
        oa.&lt;span class=&quot;fu&quot;&gt;getDevelopers&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(wc);
        oa.&lt;span class=&quot;fu&quot;&gt;getDevelopers&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(lz);

        ds.&lt;span class=&quot;fu&quot;&gt;getDevelopers&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(cj);
        ds.&lt;span class=&quot;fu&quot;&gt;getDevelopers&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(wc);


        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载User的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Developer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Project.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();


        &lt;span class=&quot;co&quot;&gt;//在Project映射文件中设置级联保存了&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(oa);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(ds);


        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行了9条SQL语句，数据库中的记录也是正确的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507142744044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;需求：&lt;strong&gt;用户与身份证信息..一个用户对应一个身份证&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据库表设计&quot;&gt;数据库表设计&lt;/h2&gt;
&lt;p&gt;对于数据库表设计我们有两种方式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一种：&lt;strong&gt;在身份证的数据表中设置一个外键来维护用户的关系，这个外键也应该是唯一的【一个用户对应一张身份证】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二种：&lt;strong&gt;在身份证的数据表中使用主键+外键的方式来维护用户的关系。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507143348236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计实体-2&quot;&gt;设计实体&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;idCard.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.one2one;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/7.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; IdCard {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; idCardId;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String idCardName;

    &lt;span class=&quot;co&quot;&gt;//维护与用户之间的关系&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; User user ;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getIdCardId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; idCardId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setIdCardId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; idCardId) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;idCardId&lt;/span&gt; = idCardId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getIdCardName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; idCardName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setIdCardName&lt;/span&gt;(String idCardName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;idCardName&lt;/span&gt; = idCardName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;getUser&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; user;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUser&lt;/span&gt;(User user) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;user&lt;/span&gt; = user;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;User.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.one2one;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/7.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; User {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; userId;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String userName;

    &lt;span class=&quot;co&quot;&gt;//维护与身份证一对一的关系&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; IdCard idCard ;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getUserId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUserId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; userId) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;userId&lt;/span&gt; = userId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getUserName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUserName&lt;/span&gt;(String userName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;userName&lt;/span&gt; = userName;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; IdCard &lt;span class=&quot;fu&quot;&gt;getIdCard&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; idCard;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setIdCard&lt;/span&gt;(IdCard idCard) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;idCard&lt;/span&gt; = idCard;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;第一种方式映射文件&quot;&gt;第一种方式映射文件&lt;/h2&gt;
&lt;p&gt;我们有两种方式来设计数据库中的表实现一对一的关系，首先我们来挑比较熟悉的外键方式来写映射文件&lt;/p&gt;
&lt;h3 id=&quot;user映射文件&quot;&gt;&lt;strong&gt;user映射文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.one2one&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            User是没有外键字段的表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                一对一的关系的属性名称name是idCard&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                类型是IdCard&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;one-to-one&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCard&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IdCard&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/one-to-one&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;idcard映射文件&quot;&gt;&lt;strong&gt;idCard映射文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.one2one&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IdCard&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IdCard&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--idCart是有外键的表，要把字段映射成外键，用的是manyToOne--&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            外键的属性name是user&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            对应表的字段是userId&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            属性的类型是User&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            该字段需要唯一性 unique&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;many-to-one&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; unique=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; cascade=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;save-update&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/many-to-one&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-1&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;要使用IdCart来维护User的关联关系。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;如果使用User来维护idCart的关联关系，idCart的外键列是为NULL的，因为重头到尾我们都没有给它赋值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;而使用IdCart来维护User，是外键值是根据User的主键id来生成的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.one2one;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App3 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {

        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        User user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;();
        IdCard idCard = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;IdCard&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置对象的数据&lt;/span&gt;
        user.&lt;span class=&quot;fu&quot;&gt;setUserName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;你好&quot;&lt;/span&gt;);
        idCard.&lt;span class=&quot;fu&quot;&gt;setIdCardName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;身份证001&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//一对一关联数据&lt;/span&gt;
        idCard.&lt;span class=&quot;fu&quot;&gt;setUser&lt;/span&gt;(user);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载User的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(IdCard.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//保存对象的数据,idCard配置文件使用级联保存&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(idCard);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507151043707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;第二种方式映射文件&quot;&gt;第二种方式映射文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;因为IdCart使用userId作为了主键，因此需要在JavaBean中配置多一个属性UserId...其他的都不用变&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; userId;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getUserId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; userId;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUserId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; userId) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;userId&lt;/span&gt; = userId;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Hibernate入门篇讲解配置的时候，在generator节点下还有一个属性没有讲解，也就是foreign属性...现在来填坑了..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507144234428?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;idcard映射文件-1&quot;&gt;&lt;strong&gt;idCard映射文件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;idCart的映射文件主要在于:&lt;strong&gt;将主键也映射成外键来使用，这就需要用到foreign属性值了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;&amp;lt;one-to-one&amp;gt;&lt;/code&gt;标签来配置基于主键的映射&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.one2one2.one2one&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IdCard&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IdCard&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                做主键的同时也做外键&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                外键的类型名称为user&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;foreign&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;param&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;property&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;user&lt;span class=&quot;kw&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCardId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCartId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;



        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            有外键的一方：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                基于主键映射，使用oneToOne&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                constrained=&quot;true&quot;  指定在主键上添加外键约束&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;one-to-one&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; constrained=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/one-to-one&amp;gt;&lt;/span&gt;




    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;user映射文件-1&quot;&gt;&lt;strong&gt;user映射文件&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.one2one2.one2one&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            User是没有外键字段的表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            一对一的关系的属性名称name是idCard&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            类型是IdCard&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;one-to-one&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;idCard&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IdCard&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/one-to-one&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-2&quot;&gt;测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.one2one2.one2one;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App4 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {

        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        User user = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;User&lt;/span&gt;();
        IdCard idCard = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;IdCard&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置对象的数据&lt;/span&gt;
        user.&lt;span class=&quot;fu&quot;&gt;setUserName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;你好3&quot;&lt;/span&gt;);
        idCard.&lt;span class=&quot;fu&quot;&gt;setIdCardName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;身份证003&quot;&lt;/span&gt;);
        idCard.&lt;span class=&quot;fu&quot;&gt;setIdCardId&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4235&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//一对一关联数据&lt;/span&gt;
        idCard.&lt;span class=&quot;fu&quot;&gt;setUser&lt;/span&gt;(user);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载User的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(User.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(IdCard.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//保存对象的数据,idCard配置文件使用级联保存&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(idCard);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507153516391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Java主要的类主要有两种方式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;组合关系，组合关系对应的就是组件映射&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承关系，继承关系对应的就是继承映射&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;组件映射实际上就是将组合关系的数据映射成一张表&lt;/strong&gt;，组件类和被包含的组件类&lt;strong&gt;映射成一张表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的时候，两个类的关系明显不是继承关系，但两个类的亲密程度很高，&lt;strong&gt;在一个类里边需要用到另外一个类...那么就在类中定义一个变量来维护另一个类的关系，这种就叫组合关系！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需求：&lt;strong&gt;汽车和轮子&lt;/strong&gt;。汽车需要用到轮子，但是轮子的爸爸不可能是汽车吧？&lt;/p&gt;
&lt;h2 id=&quot;设计数据库&quot;&gt;设计数据库&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507192909337?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计实体-3&quot;&gt;设计实体&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Wheel.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Wheel {
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;  count;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; size;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getCount&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; count;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setCount&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; count) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;count&lt;/span&gt; = count;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getSize&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; size;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; size) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt; = size;
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Car.java，使用变量维护Wheel&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/7.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Car {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Wheel wheel;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Wheel &lt;span class=&quot;fu&quot;&gt;getWheel&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; wheel;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setWheel&lt;/span&gt;(Wheel wheel) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;wheel&lt;/span&gt; = wheel;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;映射表&quot;&gt;映射表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用了一个新标签&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;&lt;/strong&gt;，组件映射标签。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.aa&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Car&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Car&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射普通字段--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            映射组件字段&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wheel&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-3&quot;&gt;测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by ozc on 2017/5/6.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App5 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {


        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Wheel wheel = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Wheel&lt;/span&gt;();
        Car car = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Car&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置属性&lt;/span&gt;
        wheel.&lt;span class=&quot;fu&quot;&gt;setCount&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;43&lt;/span&gt;);
        wheel.&lt;span class=&quot;fu&quot;&gt;setSize&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;);
        car.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;宝马&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//维护关系&lt;/span&gt;
        car.&lt;span class=&quot;fu&quot;&gt;setWheel&lt;/span&gt;(wheel);
        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

 
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Car.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(car);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170507194106588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;

&lt;p&gt;需求：&lt;strong&gt;动物、猫、猴子。猫继承着动物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统方式继承的特点就是：&lt;strong&gt;有多少个子类就写多少个配置文件.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;表结构&quot;&gt;表结构&lt;/h2&gt;
&lt;p&gt;我们的表应该是这样的：&lt;strong&gt;id和name从Animal中继承，catchMouse是子类的具体行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508121927876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;实体-1&quot;&gt;实体&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Animal.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 动物类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Animal {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
    
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
    }
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Cat.java继承着Animail&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Cat &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Animal{

    &lt;span class=&quot;co&quot;&gt;// 抓老鼠&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String catchMouse;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getCatchMouse&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; catchMouse;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setCatchMouse&lt;/span&gt;(String catchMouse) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;catchMouse&lt;/span&gt; = catchMouse;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;映射文件-1&quot;&gt;映射文件&lt;/h2&gt;
&lt;p&gt;简单继承的映射文件很好写，&lt;strong&gt;在属性上，直接写父类的属性就可以&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;但是也有致命的缺点：&lt;strong&gt;如果子类有很多，就需要写很多的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.aa&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Cat&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cat&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--映射主键--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            映射普通字段&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            父类的属性直接引用就行了，比如name属性，直接写就行了！&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;catchMouse&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;catchMouse&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-4&quot;&gt;测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App5 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {


        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Cat cat = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cat&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置属性&lt;/span&gt;

        cat.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大花猫&quot;&lt;/span&gt;);
        cat.&lt;span class=&quot;fu&quot;&gt;setCatchMouse&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;捉大老鼠&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

    
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Cat.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(cat);
        
        &lt;span class=&quot;co&quot;&gt;//如果取数据时候Animal父类接收的话，需要给出Anmail的全名&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508123153942?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;前面我们采用的是：&lt;strong&gt;每个子类都需要写成一个配置文件，映射成一张表&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;如果子类的结构很简单，只比父类多几个属性。就像上面的例子...我们可以&lt;strong&gt;将所有的子类都映射成一张表中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是呢，这样是&lt;strong&gt;不符合数据库设计规范的&lt;/strong&gt;.....因为表中的数据&lt;strong&gt;可能是猫，可能是猴子...&lt;/strong&gt;这明显是不合适的...&lt;/p&gt;
&lt;p&gt;由于表中可能&lt;strong&gt;存在猫，存在猴子，为了区分是什么类型的&lt;/strong&gt;。我们需要使用&lt;strong&gt;鉴别器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们了解一下...&lt;/p&gt;
&lt;h2 id=&quot;数据表&quot;&gt;数据表&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508123920161?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;实体-2&quot;&gt;实体&lt;/h2&gt;
&lt;p&gt;实体和上面雷同，只多了一个猴子的实体表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monkey.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Monkey &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Animal {
    
    &lt;span class=&quot;co&quot;&gt;// 吃香蕉&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String eatBanana;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getEatBanana&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eatBanana;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setEatBanana&lt;/span&gt;(String eatBanana) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;eatBanana&lt;/span&gt; = eatBanana;
    }
    
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;映射文件-2&quot;&gt;映射文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用了subClass这个节点和鉴别器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC 
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    继承映射， 所有的子类都映射到一张表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cn.itcast.e_extends2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Animal&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;t_animal&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 指定鉴别器字段(区分不同的子类) --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;discriminator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;type_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/discriminator&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            子类：猫&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                每个子类都用subclass节点映射&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                注意：一定要指定鉴别器字段，否则报错！&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                鉴别器字段：作用是在数据库中区别每一个子类的信息， 就是一个列&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            discriminator-value=&quot;cat_&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                指定鉴别器字段,即type_字段的值&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                如果不指定，默认为当前子类的全名&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         --&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;kw&quot;&gt;&amp;lt;subclass&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Cat&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; discriminator-value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cat_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;catchMouse&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;kw&quot;&gt;&amp;lt;/subclass&amp;gt;&lt;/span&gt;
         
         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            子类：猴子&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;          --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;&amp;lt;subclass&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Monkey&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; discriminator-value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;monkey_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;eatBanana&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;&amp;lt;/subclass&amp;gt;&lt;/span&gt;
        
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
    

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-5&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;加载的是Animal父类的映射文件。保存的是cat和monkey。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App5 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {


        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Cat cat = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cat&lt;/span&gt;();
        Monkey monkey = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Monkey&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置属性&lt;/span&gt;
        cat.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大花猫&quot;&lt;/span&gt;);
        cat.&lt;span class=&quot;fu&quot;&gt;setCatchMouse&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;小老鼠&quot;&lt;/span&gt;);
        monkey.&lt;span class=&quot;fu&quot;&gt;setEatBanana&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;吃香蕉&quot;&lt;/span&gt;);
        monkey.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大猴子&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载Animal的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Animal.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(cat);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(monkey);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508124841449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;父类和子类都各对应一张表。那么就有三张表了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种结构看起来是完全面向对象，但是&lt;strong&gt;表之间的结构会很复杂，插入一条子类的信息，需要两条SQL&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据表设计&quot;&gt;数据表设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508125511546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;映射文件-3&quot;&gt;映射文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用到了&lt;code&gt;&amp;lt;joined-subclass &amp;gt;&lt;/code&gt;这个节点&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.aa&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Animal&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;t_animal&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;native&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            Animal下的子类映射成一张表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                指定子类的类型，对应的表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                指定子类的外键字段【需要对应Animal】&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                指定子类的普通属性&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;joined-subclass&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Cat&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cat_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--key对应的是外键字段--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;animal_id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;catchMouse&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/joined-subclass&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;joined-subclass&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Monkey&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;monkey_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!--key对应的是外键字段--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;key&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; column=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;animal_id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;eatBanana&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/joined-subclass&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-6&quot;&gt;测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App5 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {


        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Cat cat = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cat&lt;/span&gt;();
        Monkey monkey = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Monkey&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置属性&lt;/span&gt;
        cat.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大花猫&quot;&lt;/span&gt;);
        cat.&lt;span class=&quot;fu&quot;&gt;setCatchMouse&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;小老鼠&quot;&lt;/span&gt;);
        monkey.&lt;span class=&quot;fu&quot;&gt;setEatBanana&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;吃香蕉&quot;&lt;/span&gt;);
        monkey.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大猴子&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载类对应的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Animal.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(cat);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(monkey);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;每保存一个子类对象需要两条SQL语句！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508130601284?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;使用过了一张表保存所有子类的数据，这不符合数据库设计规范&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个子类、父类都拥有一张表..表结构太过于繁琐..添加信息时，过多的SQL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们即将使用的是：&lt;strong&gt;每个子类映射成一张表，父类不对应表&lt;/strong&gt;...这和我们&lt;strong&gt;传统方式继承是一样的。只不过在hbm.xml文件中使用了&lt;code&gt;&amp;lt;union-subclass&amp;gt;&lt;/code&gt;这个节点，由于有了这个节点，我们就不需要每个子类都写一个配置文件了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据库表设计-1&quot;&gt;数据库表设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508131322772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;映射文件-4&quot;&gt;映射文件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;想要父类不映射成数据库表，只要在class中配置为abstract即可&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用了union-subclass节点，主键就不能采用自动增长策略了。我们改成UUID即可。当然啦，对应的实体id类型要改成String&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng.aa&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        想要父类不映射成表，设置成abstract&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;class&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Animal&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; abstract=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            如果使用了union-subclass节点，那么主键生成策略不能是自增长，我们改成uuid即可&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;generator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            将子类的信息都映射成一张表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                给出属性的名称&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                属性对应的数据库表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                普通字段&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;union-subclass&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Cat&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cat_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;catchMouse&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/union-subclass&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;union-subclass&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Monkey&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; table=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;monkey_&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;eatBanana&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/union-subclass&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试-7&quot;&gt;测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package zhongfucheng.aa;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.hibernate.SessionFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.Transaction;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.cfg.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.hibernate.classic.Session;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App5 {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {


        &lt;span class=&quot;co&quot;&gt;//创建对象&lt;/span&gt;
        Cat cat = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Cat&lt;/span&gt;();
        Monkey monkey = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Monkey&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//设置属性&lt;/span&gt;
        cat.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大花猫&quot;&lt;/span&gt;);
        cat.&lt;span class=&quot;fu&quot;&gt;setCatchMouse&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;小老鼠&quot;&lt;/span&gt;);
        monkey.&lt;span class=&quot;fu&quot;&gt;setEatBanana&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;吃香蕉&quot;&lt;/span&gt;);
        monkey.&lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;大猴子&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//获取加载配置管理类&lt;/span&gt;
        Configuration configuration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Configuration();

        &lt;span class=&quot;co&quot;&gt;//加载类对应的映射文件！&lt;/span&gt;
        configuration.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addClass&lt;/span&gt;(Animal.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//创建Session工厂对象&lt;/span&gt;
        SessionFactory factory = configuration.&lt;span class=&quot;fu&quot;&gt;buildSessionFactory&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//得到Session对象&lt;/span&gt;
        Session session = factory.&lt;span class=&quot;fu&quot;&gt;openSession&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//使用Hibernate操作数据库，都要开启事务,得到事务对象&lt;/span&gt;
        Transaction transaction = session.&lt;span class=&quot;fu&quot;&gt;getTransaction&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//开启事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;begin&lt;/span&gt;();

        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(cat);
        session.&lt;span class=&quot;fu&quot;&gt;save&lt;/span&gt;(monkey);

        &lt;span class=&quot;co&quot;&gt;//提交事务&lt;/span&gt;
        transaction.&lt;span class=&quot;fu&quot;&gt;commit&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//关闭Session&lt;/span&gt;
        session.&lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;();


    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170508131936196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件映射和继承映射总结&quot;&gt;组件映射和继承映射总结&lt;/h2&gt;
&lt;p&gt;由于我们的&lt;strong&gt;传统继承映射每个子类都对应一个配置文件，这样十分麻烦&lt;/strong&gt;。因此&lt;strong&gt;.hbm.xml就给出了几个节点供我们使用&lt;/strong&gt;，分别有以下的情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;子类父类共有一张表&lt;code&gt;subclass&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;不符合数据库设计规范&lt;/li&gt;
&lt;li&gt;需要使用鉴别器&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;子类、父类都有自己的表&lt;code&gt;joined-subclass&lt;/code&gt;，那么就是三张表
&lt;ul&gt;&lt;li&gt;表的结构太过繁琐&lt;/li&gt;
&lt;li&gt;插入数据时要生成SQL至少就要两条&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子类拥有自己的表、父类不对应表【推荐】&lt;code&gt;union-subclass&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;父类不对应表要使用abstract来修饰&lt;/li&gt;
&lt;li&gt;主键的id不能使用自增长策略，修改成UUID就好了。对应的JavaBean的id设置成String就好&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 08 Mar 2018 04:36:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8527718.html</dc:identifier>
</item>
<item>
<title>SDP（10）：文本式大数据运算环境-MongoDB-Engine功能设计 - 雪川大虫</title>
<link>http://www.cnblogs.com/tiger-xc/p/8527681.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiger-xc/p/8527681.html</guid>
<description>&lt;p&gt;&lt;span&gt;    为了让前面规划的互联网+数据平台能有效对电子商务数据进行管理及实现大数据统计功能，必须在平台上再增加一个MongDB-Engine：数据平台用户通过传入一种Context来指示MongoDB-Engine运算。与前面JDBC-Engine和Cassandra-Engine通过文本式传递指令不同的是：MangoDB没有一套像SQL或CQL这样的文本式编程语言。但MangoDB基本上都是通过Bson类型的参数进行运算的，Bson是个java interface：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * An interface for types that are able to render themselves into a {@code BsonDocument}.
 *
 * @since 3.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Bson {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Render the filter into a BsonDocument.
     *
     * @param documentClass the document class in scope for the collection.  This parameter may be ignored, but it may be used to alter
     *                      the structure of the returned {@code BsonDocument} based on some knowledge of the document class.
     * @param codecRegistry the codec registry.  This parameter may be ignored, but it may be used to look up {@code Codec} instances for
     *                      the document class or any other related class.
     * @param &amp;lt;TDocument&amp;gt; the type of the document class
     * @return the BsonDocument
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &amp;lt;TDocument&amp;gt; BsonDocument toBsonDocument(Class&amp;lt;TDocument&amp;gt;&lt;span&gt; documentClass, CodecRegistry codecRegistry);
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;任何实现Bson的类型都可以通过toBsonDocument来进行Bson到Document的转换。下面是Filter类型的例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;   &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final &lt;span&gt;class&lt;/span&gt; OperatorFilter&amp;lt;TItem&amp;gt;&lt;span&gt; implements Bson {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; final String operatorName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; final String fieldName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; final TItem value;

        OperatorFilter(final String operatorName, final String fieldName, final TItem value) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.operatorName = notNull(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;operatorName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, operatorName);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fieldName = notNull(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fieldName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, fieldName);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;TDocument&amp;gt; BsonDocument toBsonDocument(final Class&amp;lt;TDocument&amp;gt;&lt;span&gt; documentClass, final CodecRegistry codecRegistry) {
            BsonDocumentWriter writer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; BsonDocumentWriter(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BsonDocument());

            writer.writeStartDocument();
            writer.writeName(fieldName);
            writer.writeStartDocument();
            writer.writeName(operatorName);
            encodeValue(writer, value, codecRegistry);
            writer.writeEndDocument();
            writer.writeEndDocument();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; writer.getDocument();
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; operatorFilterToString(fieldName, operatorName, value);
        }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于MongoDB-Engine，我们需要实现下面这几大类功能才能满足平台要求，包括：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;count
disctinct
aggregate
mapReduce
bulkWrite
insert
delete
replace
update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;具体函数细节和功能描述如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;112&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  count:
   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Counts the number of documents in the collection.
   * @return a Observable with a single element indicating the number of documents
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def count(): SingleObservable[Long] &lt;/span&gt;=&lt;span&gt; observeLong(wrapped.count(_: SingleResultCallback[java.lang.Long]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Counts the number of documents in the collection according to the given options.
   * @param filter  the query filter
   * @param options the options describing the count
   * @return a Observable with a single element indicating the number of documents
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def count(filter: Bson, options: CountOptions): SingleObservable[Long] &lt;/span&gt;=&lt;span&gt;
    observeLong(wrapped.count(filter, options, _: SingleResultCallback[java.lang.Long]))

&lt;span&gt;  distinct:
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Gets the distinct values of the specified field name.
   * @param fieldName the field name
   * @tparam C       the target type of the observable.
   * @return a Observable emitting the sequence of distinct values
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def distinct[C](fieldName: String)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; ct: ClassTag[C]): DistinctObservable[C] =&lt;span&gt;
    DistinctObservable(wrapped.distinct(fieldName, ct))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Gets the distinct values of the specified field name.
   * @param fieldName the field name
   * @param filter  the query filter
   * @tparam C       the target type of the observable.
   * @return a Observable emitting the sequence of distinct values
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def distinct[C](fieldName: String, filter: Bson)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; ct: ClassTag[C]): DistinctObservable[C] =&lt;span&gt;
    DistinctObservable(wrapped.distinct(fieldName, filter, ct))
  
&lt;span&gt;  find:
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Finds all documents in the collection.
   * @tparam C   the target document type of the observable.
   * @return the find Observable
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def find[C]()(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; e: C DefaultsTo TResult, ct: ClassTag[C]): FindObservable[C] =&lt;span&gt;
    FindObservable(wrapped.find[C](ct))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Finds all documents in the collection.
   * @param filter the query filter
   * @tparam C    the target document type of the observable.
   * @return the find Observable
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def find[C](filter: Bson)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; e: C DefaultsTo TResult, ct: ClassTag[C]): FindObservable[C] =&lt;span&gt;
    FindObservable(wrapped.find(filter, ct))

&lt;span&gt;  aggregate:
   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Aggregates documents according to the specified aggregation pipeline.
   * @param pipeline the aggregate pipeline
   * @return a Observable containing the result of the aggregation operation
   *         [[&lt;/span&gt;&lt;span&gt;http://docs.mongodb.org/manual/aggregation/&lt;/span&gt;&lt;span&gt; Aggregation]]
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def aggregate[C](pipeline: Seq[Bson])(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; e: C DefaultsTo TResult, ct: ClassTag[C]): AggregateObservable[C] =&lt;span&gt;
    AggregateObservable(wrapped.aggregate[C](pipeline.asJava, ct))

  &lt;span&gt;mapReduce:
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Aggregates documents according to the specified map-reduce function.
   * @param mapFunction    A JavaScript function that associates or &quot;maps&quot; a value with a key and emits the key and value pair.
   * @param reduceFunction A JavaScript function that &quot;reduces&quot; to a single object all the values associated with a particular key.
   * @tparam C            the target document type of the observable.
   * @return a Observable containing the result of the map-reduce operation
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def mapReduce[C](mapFunction: String, reduceFunction: String)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; e: C DefaultsTo TResult, ct: ClassTag[C]): MapReduceObservable[C] =&lt;span&gt;
    MapReduceObservable(wrapped.mapReduce(mapFunction, reduceFunction, ct))

&lt;span&gt;  bulkWrite:
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Executes a mix of inserts, updates, replaces, and deletes.
   * @param requests the writes to execute
   * @return a Observable with a single element the BulkWriteResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def bulkWrite(requests: Seq[_ &lt;/span&gt;&amp;lt;: WriteModel[_ &amp;lt;: TResult]]): SingleObservable[BulkWriteResult] =&lt;span&gt;
    observe(wrapped.bulkWrite(
      requests.asJava.asInstanceOf[util.List[_ &lt;/span&gt;&amp;lt;: WriteModel[_ &amp;lt;&lt;span&gt;: TResult]]],
      _: SingleResultCallback[BulkWriteResult]
    ))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Executes a mix of inserts, updates, replaces, and deletes.
   * @param requests the writes to execute
   * @param options  the options to apply to the bulk write operation
   * @return a Observable with a single element the BulkWriteResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def bulkWrite(requests: Seq[_ &lt;/span&gt;&amp;lt;: WriteModel[_ &amp;lt;: TResult]], options: BulkWriteOptions): SingleObservable[BulkWriteResult] =&lt;span&gt;
    observe(wrapped.bulkWrite(
      requests.asJava.asInstanceOf[util.List[_ &lt;/span&gt;&amp;lt;: WriteModel[_ &amp;lt;&lt;span&gt;: TResult]]],
      options,
      _: SingleResultCallback[BulkWriteResult]
    ))
  
  &lt;span&gt;insert:
   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Inserts the provided document. If the document is missing an identifier, the driver should generate one.
   * @param document the document to insert
   * @return a Observable with a single element indicating when the operation has completed or with either a
   *         com.mongodb.DuplicateKeyException or com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def insertOne(document: TResult): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt; observeCompleted(wrapped.insertOne(document, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Inserts the provided document. If the document is missing an identifier, the driver should generate one.
   * @param document the document to insert
   * @param options  the options to apply to the operation
   * @return a Observable with a single element indicating when the operation has completed or with either a
   *         com.mongodb.DuplicateKeyException or com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def insertOne(document: TResult, options: InsertOneOptions): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.insertOne(document, options, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API. However, when talking with 
   * server 2.6, using this method will be faster due to constraints in the bulk API related to error handling.
   * @param documents the documents to insert
   * @return a Observable with a single element indicating when the operation has completed or with either a
   *         com.mongodb.DuplicateKeyException or com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def insertMany(documents: Seq[_ &lt;/span&gt;&amp;lt;: TResult]): SingleObservable[Completed] =&lt;span&gt;
    observeCompleted(wrapped.insertMany(documents.asJava, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Inserts a batch of documents. The preferred way to perform bulk inserts is to use the BulkWrite API. However, when talking with 
   * server 2.6, using this method will be faster due to constraints in the bulk API related to error handling.
   * @param documents the documents to insert
   * @param options   the options to apply to the operation
   * @return a Observable with a single element indicating when the operation has completed or with either a
   *         com.mongodb.DuplicateKeyException or com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def insertMany(documents: Seq[_ &lt;/span&gt;&amp;lt;: TResult], options: InsertManyOptions): SingleObservable[Completed] =&lt;span&gt;
    observeCompleted(wrapped.insertMany(documents.asJava, options, _: SingleResultCallback[Void]))

&lt;span&gt;  delete:
   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Removes at most one document from the collection that matches the given filter.  If no documents match, the collection is not
   * modified.
   * @param filter the query filter to apply the the delete operation
   * @return a Observable with a single element the DeleteResult or with an com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def deleteOne(filter: Bson): SingleObservable[DeleteResult] &lt;/span&gt;=&lt;span&gt; observe(wrapped.deleteOne(filter, _: SingleResultCallback[DeleteResult]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Removes at most one document from the collection that matches the given filter.  If no documents match, the collection is not
   * modified.
   * @param filter the query filter to apply the the delete operation
   * @param options the options to apply to the delete operation
   * @return a Observable with a single element the DeleteResult or with an com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def deleteOne(filter: Bson, options: DeleteOptions): SingleObservable[DeleteResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.deleteOne(filter, options, _: SingleResultCallback[DeleteResult]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Removes all documents from the collection that match the given query filter.  If no documents match, the collection is not modified.
   * @param filter the query filter to apply the the delete operation
   * @return a Observable with a single element the DeleteResult or with an com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def deleteMany(filter: Bson): SingleObservable[DeleteResult] &lt;/span&gt;=&lt;span&gt; observe(wrapped.deleteMany(filter, _: SingleResultCallback[DeleteResult]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Removes all documents from the collection that match the given query filter.  If no documents match, the collection is not modified.
   * @param filter the query filter to apply the the delete operation
   * @param options the options to apply to the delete operation
   * @return a Observable with a single element the DeleteResult or with an com.mongodb.MongoException
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def deleteMany(filter: Bson, options: DeleteOptions): SingleObservable[DeleteResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.deleteMany(filter, options, _: SingleResultCallback[DeleteResult]))
 
&lt;span&gt;  replace:
   &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Replace a document in the collection according to the specified arguments.
   * [[&lt;/span&gt;&lt;span&gt;http://docs.mongodb.org/manual/tutorial/modify-documents/&lt;/span&gt;&lt;span&gt;#replace-the-document Replace]]
   * @param filter      the query filter to apply the the replace operation
   * @param replacement the replacement document
   * @return a Observable with a single element the UpdateResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def replaceOne(filter: Bson, replacement: TResult): SingleObservable[UpdateResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.replaceOne(filter, replacement, _: SingleResultCallback[UpdateResult]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Replace a document in the collection according to the specified arguments.
   * @param filter      the query filter to apply the the replace operation
   * @param replacement the replacement document
   * @param options     the options to apply to the replace operation
   * @return a Observable with a single element the UpdateResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def replaceOne(filter: Bson, replacement: TResult, options: UpdateOptions): SingleObservable[UpdateResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.replaceOne(filter, replacement, options, _: SingleResultCallback[UpdateResult]))

  update:
   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Update a single document in the collection according to the specified arguments.
   * @param filter  a document describing the query filter, which may not be null. This can be of any type for which a `Codec` is
   *                registered
   * @param update  a document describing the update, which may not be null. The update to apply must include only update operators. This
   *                can be of any type for which a `Codec` is registered
   * @return a Observable with a single element the UpdateResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def updateOne(filter: Bson, update: Bson): SingleObservable[UpdateResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.updateOne(filter, update, _: SingleResultCallback[UpdateResult]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Update a single document in the collection according to the specified arguments.
   * @param filter  a document describing the query filter, which may not be null. This can be of any type for which a `Codec` is
   *                registered
   * @param update  a document describing the update, which may not be null. The update to apply must include only update operators. This
   *                can be of any type for which a `Codec` is registered
   * @param options the options to apply to the update operation
   * @return a Observable with a single element the UpdateResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def updateOne(filter: Bson, update: Bson, options: UpdateOptions): SingleObservable[UpdateResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.updateOne(filter, update, options, _: SingleResultCallback[UpdateResult]))
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Update documents in the collection according to the specified arguments.
   * @param filter  a document describing the query filter, which may not be null. This can be of any type for which a `Codec` is
   *                registered
   * @param update  a document describing the update, which may not be null. The update to apply must include only update operators. This
   *                can be of any type for which a `Codec` is registered
   * @return a Observable with a single element the UpdateResult
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def updateMany(filter: Bson, update: Bson): SingleObservable[UpdateResult] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.updateMany(filter, update, _: SingleResultCallback[UpdateResult]))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到：函数传入参数大致两个类型：Bson、XXOptions。我们还需要适度增加一些数据库管理功能，包括：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  createCollection
  listCollection
  dropCollection
  createIndex
  dropIndex
  createView&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;具体函数细节和功能描述如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;dropCollection
 &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drops this collection from the Database.
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def drop(): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt; observeCompleted(wrapped.drop(_: SingleResultCallback[Void]))

&lt;span&gt;createIndex
  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * @param key     an object describing the index key(s), which may not be null. This can be of any type for which a `Codec` is
   *                registered
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def createIndex(key: Bson): SingleObservable[String] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.createIndex(key, _: SingleResultCallback[String]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * @param key     an object describing the index key(s), which may not be null. This can be of any type for which a `Codec` is
   *                registered
   * @param options the options for the index
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def createIndex(key: Bson, options: IndexOptions): SingleObservable[String] &lt;/span&gt;=&lt;span&gt;
    observe(wrapped.createIndex(key, options, _: SingleResultCallback[String]))
  
 &lt;span&gt; dropIndex
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drops the given index.
   * @param indexName the name of the index to remove
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def dropIndex(indexName: String): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt; observeCompleted(wrapped.dropIndex(indexName, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drops the given index.
   * @param indexName the name of the index to remove
   * @param dropIndexOptions options to use when dropping indexes
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def dropIndex(indexName: String, dropIndexOptions: DropIndexOptions): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.dropIndex(indexName, dropIndexOptions, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drops the index given the keys used to create it.
   * @param keys the keys of the index to remove
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def dropIndex(keys: Bson): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt; observeCompleted(wrapped.dropIndex(keys, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drops the index given the keys used to create it.
   * @param keys the keys of the index to remove
   * @param dropIndexOptions options to use when dropping indexes
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def dropIndex(keys: Bson, dropIndexOptions: DropIndexOptions): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.dropIndex(keys, dropIndexOptions, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drop all the indexes on this collection, except for the default on _id.
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def dropIndexes(): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.dropIndexes(_: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Drop all the indexes on this collection, except for the default on _id.
   * @param dropIndexOptions options to use when dropping indexes
   * @return a Observable with a single element indicating when the operation has completed
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def dropIndexes(dropIndexOptions: DropIndexOptions): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.dropIndexes(dropIndexOptions, _: SingleResultCallback[Void]))

&lt;span&gt;  listCollection
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Finds all the collections in this database.
   * @tparam TResult the target document type of the iterable.
   * @return the fluent list collections interface
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def listCollections[TResult]()(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; e: TResult DefaultsTo Document, ct: ClassTag[TResult]): ListCollectionsObservable[TResult] =&lt;span&gt; ListCollectionsObservable(wrapped.listCollections(ct))

 &lt;span&gt;createCollection
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Create a new collection with the given name.
   * @param collectionName the name for the new collection to create
   * @return a Observable identifying when the collection has been created
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def createCollection(collectionName: String): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.createCollection(collectionName, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Create a new collection with the selected options
   * @param collectionName the name for the new collection to create
   * @param options        various options for creating the collection
   * @return a Observable identifying when the collection has been created
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def createCollection(collectionName: String, options: CreateCollectionOptions): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.createCollection(collectionName, options, _: SingleResultCallback[Void]))

 &lt;span&gt; createView
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Creates a view with the given name, backing collection/view name, and aggregation pipeline that defines the view.
   * @param viewName the name of the view to create
   * @param viewOn   the backing collection/view for the view
   * @param pipeline the pipeline that defines the view
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def createView(viewName: String, viewOn: String, pipeline: Seq[Bson]): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.createView(viewName, viewOn, pipeline.asJava, _: SingleResultCallback[Void]))

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * Creates a view with the given name, backing collection/view name, aggregation pipeline, and options that defines the view.
   * @param viewName          the name of the view to create
   * @param viewOn            the backing collection/view for the view
   * @param pipeline          the pipeline that defines the view
   * @param createViewOptions various options for creating the view
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  def createView(viewName: String, viewOn: String, pipeline: Seq[Bson], createViewOptions: CreateViewOptions): SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
    observeCompleted(wrapped.createView(viewName, viewOn, pipeline.asJava, createViewOptions, _: SingleResultCallback[Void]))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面就是根据以上需求分析初步做出的功能框架设计方案：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import org.bson.conversions.Bson
import org.mongodb.scala._

trait MGOCommands

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOCommands  {
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Count(filter: Option[Bson], options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Distict(fieldName: String, filter: Option[Bson]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Find(filter: Option[Bson]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Aggregate(pipeLine: Seq[Bson]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapReduce(mapFunction: String, reduceFunction: String) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Insert(newdocs: Seq[Document], options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Delete(filter: Bson, options: Option[Any], onlyOne: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Replace(filter: Bson, replacement: Document, options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Update(filter: Bson, update: Bson, options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BulkWrite(commands: Seq[MGOCommands], options: Option[Any]) extends MGOCommands
}

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOAdmins {
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DropCollection(collName: String) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateCollection(collName: String, options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ListCollection(dbName: String) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateView(viewName: String, viewOn: String, pipeline: Seq[Bson], options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateIndex(filter: Option[Bson], options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DropIndexByName(indexName: String, options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DropIndexByKey(key: Bson, options: Option[Any]) extends MGOCommands
  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DropAllIndexes(options: Option[Any]) extends MGOCommands
}

&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MGOContext (
     dbName: String,
     collName: String,
     action: MGOCommands &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
) { ctx &lt;/span&gt;=&amp;gt;&lt;span&gt;
  def setDbName(name: String): MGOContext &lt;/span&gt;= ctx.copy(dbName =&lt;span&gt; name)
  def setCollName(name: String): MGOContext &lt;/span&gt;= ctx.copy(collName =&lt;span&gt; name)
  def setCommand(cmd: MGOCommands): MGOContext &lt;/span&gt;= ctx.copy(action =&lt;span&gt; cmd)
}
&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOContext {
  def apply(db: String, coll: String) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(db,coll)
  def apply(db: String, coll: String, command: MGOCommands) &lt;/span&gt;=
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(db,coll,command)

}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 08 Mar 2018 04:32:00 +0000</pubDate>
<dc:creator>雪川大虫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiger-xc/p/8527681.html</dc:identifier>
</item>
</channel>
</rss>