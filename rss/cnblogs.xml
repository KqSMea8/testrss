<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>了解一下RabbitMQ - palapala</title>
<link>http://www.cnblogs.com/ssskkk/p/9653330.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ssskkk/p/9653330.html</guid>
<description>&lt;h3&gt;RabbitMQ概述&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;RabbitMQ是遵从AMQP协议的 通信协议都设计到报文交互，换句话说RabbitMQ就是AMQP协议的Erlang的实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AMQP说到底还是一个通信协议从low-level层面举例来说，AMQP本身是应用层的协议，其填充于TCP协议的数据部分。&lt;/p&gt;
&lt;p&gt;从high-level层面来说，AMQP是通过协议命令进行交互的。命令类似HTTP中的方法(GET PUT POST DELETE等)。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;信道(Channel)在AMQP是一个很重要的概念，大多数操作都是在信道这个层面展开的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们完全可以用Connection就能完成信道的工作，为什么还要引入信道？&lt;/p&gt;
&lt;p&gt;试想:一个程序中有很多个线程需要从RabbitMQ中消费消息，或者生产消息，那么必然需要建立很多个Connection，也就是多个TCP连接。&lt;/p&gt;
&lt;p&gt;建立和销毁TCP连接开销很昂贵。&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/ssskkk/p/9703926.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;所以RabbitMQ采用类似NIO的做法，选择TCP连接复用&lt;/span&gt;&lt;/a&gt;。&lt;/span&gt;不仅可以减少性能开销，同时也便于管理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1341698/201810/1341698-20181027165459597-92515605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;发布订阅模式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;广播模式 topic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　所谓广播指的是一条消息将被所有的消费者进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直连模式 director&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　直连模式的特点主要就是routingkey的使用，如果现在该消息就要求指定一个具备有指定Routingkey的操作者进行处理，那么只需要两个的Routingkey匹配即可。&lt;/p&gt;
&lt;p&gt;　　可以将Routingkey比喻一个唯一标记，这样就可以将消息准确的推送到消费者手中了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主题模式 fanout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;主题模式类似于广播模式与直连模式的整合操作，所有的消费者都可以接收到主题信息，但是如果要想进行正确的处理，则一定需要有一个合适的Routingkey完成操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1341698/201810/1341698-20181031002005120-501485546.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;交换器相当于投递包裹的邮箱，Routingkey相当于包裹的地址，BindingKey相当于包裹的目的地。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当填写在包裹上的地址和要投递的地址相匹配时，那么这个包裹就会正确投递到目的地，最后这个目的地的主人(队列)可以保留这个包裹。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果填写地址出错，邮递员不能正确的投递到目的地，包裹可能被退回给寄件人，也有可能被丢弃。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;RabbitMQ官方文档和API都把Routingkey和BingdingKey都看做Routingkey下面代码中红色部分 就都当Routingkey使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;消息生产者&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessageProducer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String EXCHANGE_NAME =&quot;com.sunkun.topic&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String HOST=&quot;192.168.1.105&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PORT=5672&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ConnectionFactory factory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConnectionFactory();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立一个连接工厂&lt;/span&gt;
&lt;span&gt;        factory.setHost(HOST);
        factory.setPort(PORT);
        factory.setUsername(&lt;/span&gt;&quot;sunkun&quot;&lt;span&gt;);
        factory.setPassword(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;factory.setVirtualHost(virtualHost) 使用虚拟主机的最大好处 可以区分不同用户的操作空间  每一个虚拟主机有一个自己的空间管理&lt;/span&gt;
        Connection conn = factory.newConnection();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个新的RabbitMQ的连接&lt;/span&gt;
        Channel channel = conn.createChannel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个通讯的通道
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义该通道要使用的队列名称 此时队列已经创建过了
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数 队列名称（这个队列可能存在也可能不存在）
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数 是否持久保存
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三个参数 此队列是否为专用的队列信息
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第四个参数 是否允许自动删除
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;channel.queueDeclare(QUENE_NAME, true, false, true,null);&lt;/span&gt;
        channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; start =&lt;span&gt; System.currentTimeMillis();
        System.out.println(&lt;/span&gt;&quot;消息开始&quot;+&lt;span&gt;start);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;1000;i++&lt;span&gt;){
            String message &lt;/span&gt;= &quot;sk - &quot;+&lt;span&gt;i;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i%2==0&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MessageProperties.PERSISTENT_TEXT_PLAIN 消息持久化&lt;/span&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;                channel.basicPublish(EXCHANGE_NAME, &quot;sk1&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());//进行消息发送
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;            }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;span&gt;&lt;strong&gt;&lt;span&gt;                channel.basicPublish(EXCHANGE_NAME, &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&quot;sk2&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());//进行消息发送
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;            }

        }
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; end =&lt;span&gt; System.currentTimeMillis();
        System.out.println(&lt;/span&gt;&quot;消息花费时间&quot;+(end-&lt;span&gt;start));
        channel.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;消息消费者&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessageConsumer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String EXCHANGE_NAME =&quot;com.sunkun.topic&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String HOST=&quot;192.168.1.105&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; PORT=15672&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ConnectionFactory factory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ConnectionFactory();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;建立一个连接工厂&lt;/span&gt;
&lt;span&gt;        factory.setHost(HOST);
        factory.setPort(PORT);
        factory.setUsername(&lt;/span&gt;&quot;sunkun&quot;&lt;span&gt;);
        factory.setPassword(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;);
        Connection conn &lt;/span&gt;= factory.newConnection();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个新的RabbitMQ的连接&lt;/span&gt;
        Channel channel = conn.createChannel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个通讯的通道&lt;/span&gt;
        channel.exchangeDeclare(EXCHANGE_NAME, &quot;topic&quot;&lt;span&gt;);
        String queueName &lt;/span&gt;= channel.queueDeclare().getQueue();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过通道获取一个队列名称&lt;/span&gt;
      &lt;span&gt;&lt;strong&gt;&lt;span&gt;  channel.queueBind(queueName, EXCHANGE_NAME, &quot;sk2&quot;);//进行绑定处理
        &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在RabbitMQ里面，所有的消费者信息是通过一个回调方法完成的&lt;/span&gt;
        Consumer consumer = &lt;span&gt;new&lt;/span&gt; DefaultConsumer(channel){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要复写指定的方法实现消息处理&lt;/span&gt;
&lt;span&gt;            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleDelivery(String consumerTag, Envelope envelope,
                    BasicProperties properties, &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] body) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
                String message &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(body);
                System.out.println(&lt;/span&gt;&quot;消费者sk2:&quot;+message);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以启动多个消费者&lt;/span&gt;
                &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.handleDelivery(consumerTag, envelope, properties, body);
            }
        };
        channel.basicConsume(queueName,consumer);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;RabbitMQ如何保证消息的可靠性&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1)持久化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持久化可以提高RabbitMQ的可靠性，防止在异常情况(重启，关闭，宕机)下的数据丢失。&lt;/p&gt;
&lt;p&gt;持久化可分为三个部分：交换器的持久化，队列的持久化和消息的持久化。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;交换器的持久化：&lt;/span&gt;是通过声明交换器时将druable参数设置为true来实现的。如果交换器不设置持久化，那么在RabbitMQ重启之后相关的交换器元数据会丢失，不过消息不会丢失，只是不能将消息发送到这个交换器中了。&lt;/p&gt;
&lt;p&gt;对于一个长期使用的交换器来说，建议其置为持久化。&lt;span&gt;(消息不直接往队列发，往exchange发送 可以实现广播模式)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;队列的持久化：&lt;/span&gt;是通过声明队列时将durable参数置为true实现的。如果队列不设置持久化，那么在RabbitMQ服务重启之后，相关队列的元数据会丢失，此时数据也会丢失。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;消息的持久化：&lt;/span&gt;因为队列的持久化能保证其本身的元数据不会因为异常情况而丢失，但是不能保证内部存储的消息不会丢失。要确保消息不会丢失，需求将其设置为持久化。&lt;/p&gt;
&lt;p&gt;通过将消息的投递模式(&lt;span&gt;MessageProperties.PERSISTENT_TEXT_PLAIN&lt;/span&gt;)即可实现消息的持久化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.51cto.com/server110/1920371&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;RabbitMQ的集群本身不带有所谓的HA机制以及负载均衡机制&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲镜像队列&lt;/p&gt;
&lt;p&gt;在持久化的消息正确存入到RabbitMQ之后 还需要一段时间(虽然时间很短，但不可忽视)才能存入磁盘中，如果这段时间发生了宕机，消息保存还没来得及落盘，那么这些消息将会丢失。&lt;/p&gt;
&lt;p&gt;这里可以引入RabbitMQ的镜像队列机制，相当于配置了副本，如果主节点(master)在此特殊时间内挂掉，可以自动切换到从节点(Slave)，在实际生产环境中的关键业务队列都会设置镜像队列。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;提醒：&lt;/span&gt;&lt;strong&gt;所谓的镜像队列只是进行数据的副本而已&lt;/strong&gt;，在所谓的RabbitMQ集群里面并不支持HA机制以及所谓的负载均衡，如果说现在一台主机挂掉了，那么其他主机肯定无法进行合理读取的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果想要安全的使用RabbitMQ就要继续追加负载均衡组件，列如HAProxy LVS等等，如果要保证负载均衡组件的高可用，还应该继续追加KeepAlive组件(就像tomcat实现负载均衡 需要nginx一样)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)生产者确认&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除上面两个问题外 我们还遇到一个新问题：当消息的生产者将消息发送出去之后，消息到底有没有正确的到达服务器呢？&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果消息到达服务器之前就丢失，那么持久化也解决不了问题，因为消息就没有到达服务器，何谈持久化呢。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通常会有两种方法解决此问题一时事物机制，只有消息被成功接收，事物才能提交成功，否则便可在捕获异常之后进行事物回滚，于此同时可以进行消息重发。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;但使用事物机制会大大降低RabbitMQ的性能，我们一般采取发送方确认机制。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;发送方确认机制：&lt;/span&gt;生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID(从1开始)，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;一旦消息被投递到所有的匹配队列之后，RabbitMQ就会发送一个确认给生产者(包含消息的唯一ID)，这就使得生产者知晓消息已经到达目的地了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果消息和队列是持久化的，那么消息确认会在消息写入磁盘后发出。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 16:18:00 +0000</pubDate>
<dc:creator>palapala</dc:creator>
<og:description>RabbitMQ概述 RabbitMQ是遵从AMQP协议的 通信协议都设计到报文交互，换句话说RabbitMQ就是AMQP协议的Erlang的实现。 AMQP说到底还是一个通信协议从low-level</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ssskkk/p/9653330.html</dc:identifier>
</item>
<item>
<title>c语言数字图像处理（八）：噪声模型及均值滤波器 - GoleBeetle</title>
<link>http://www.cnblogs.com/GoldBeetle/p/9880362.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GoldBeetle/p/9880362.html</guid>
<description>&lt;h2&gt;图像退化/复原过程模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030221950238-1520686594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;高斯噪声&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;PDF（概率密度函数）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030222103687-2089532584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;生成高斯随机数序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法可参考&amp;lt;http://www.doc.ic.ac.uk/~wl/papers/07/csur07dt.pdf&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; gaussrand()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; V1, V2, S;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; phase = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; X;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(phase == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; U1 = (&lt;span&gt;double&lt;/span&gt;)rand() /&lt;span&gt; RAND_MAX;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; U2 = (&lt;span&gt;double&lt;/span&gt;)rand() /&lt;span&gt; RAND_MAX;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;             V1 = &lt;span&gt;2&lt;/span&gt; * U1 - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             V2 = &lt;span&gt;2&lt;/span&gt; * U2 - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             S = V1 * V1 + V2 *&lt;span&gt; V2;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             } &lt;span&gt;while&lt;/span&gt;(S &amp;gt;= &lt;span&gt;1&lt;/span&gt; || S == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         X = V1 * sqrt(-&lt;span&gt;2&lt;/span&gt; * log(S) /&lt;span&gt; S);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         X = V2 * sqrt(-&lt;span&gt;2&lt;/span&gt; * log(S) /&lt;span&gt; S);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     phase = &lt;span&gt;1&lt;/span&gt; -&lt;span&gt; phase;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; X * &lt;span&gt;50&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;生成高斯噪声图及直方图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030223149723-929811103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面给一幅图添加高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; add_gaussian_noise(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    srand(time(NULL));
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             out_array[i][j] = in_array[i][j] + (&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)gaussrand();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;原图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030223320122-1299687415.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030223349119-1959139929.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;椒盐噪声&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225357070-886720778.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加椒盐噪声（胡椒噪声和盐粒噪声概率分别为5%)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; add_salt_pepper_noise(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    srand(time(NULL));
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; noise_p;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             noise_p = rand() % &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (noise_p == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; temp = rand() % &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (temp)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                     out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 out_array[i][j] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225604532-6935466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;均值滤波器&lt;/h2&gt;
&lt;h3&gt;算术均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225709352-1270587338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; is_in_array(&lt;span&gt;short&lt;/span&gt; x, &lt;span&gt;short&lt;/span&gt; y, &lt;span&gt;short&lt;/span&gt; height, &lt;span&gt;short&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (x &amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x &amp;lt; width &amp;amp;&amp;amp; y &amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt;&lt;span&gt; height)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * element
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * v0  v1  v2
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * v3  v4  v5
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * v6  v7  v8
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Arithmetic Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 out_array[i][j] +=&lt;span&gt; value[k];
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             out_array[i][j] /= ARRAY_SIZE*&lt;span&gt;ARRAY_SIZE;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;处理高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225856717-1551344922.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;处理椒盐噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030225935707-1473044259.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结论：算术平均滤波对于高斯噪声和椒盐噪声都有一定的效果，但是同时会平滑图像&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;几何均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231013185-399950712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Geometric Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; product = &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 product *=&lt;span&gt; value[k];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             product = pow(product, &lt;span&gt;1.0&lt;/span&gt; / &lt;span&gt;9.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             out_array[i][j] = (&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)product;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几何均值滤波器与算术均值滤波器相比，丢失的图像细节更少&lt;/p&gt;
&lt;h3&gt;谐波均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231336830-991646977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Harmonic Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 sum += &lt;span&gt;1.0&lt;/span&gt; /&lt;span&gt; value[k];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             out_array[i][j] = (&lt;span&gt;short&lt;/span&gt;)(&lt;span&gt;9.0&lt;/span&gt; /&lt;span&gt; sum);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;处理高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231431714-1041938807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;处理椒盐噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030231845395-131116029.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对盐粒噪声效果较好，不适用于胡椒噪声，善于处理高斯噪声&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;逆谐波均值滤波器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232344575-1147228269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q为滤波器的阶数，Q为正时，消除胡椒噪声，Q为负时消除盐粒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q=0为算术均值滤波器，Q=-1谐波均值滤波器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; filtering(&lt;span&gt;short&lt;/span&gt;** in_array, &lt;span&gt;short&lt;/span&gt;** out_array, &lt;span&gt;long&lt;/span&gt; height, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; width)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; value[&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; height; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; width; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             value[&lt;span&gt;0&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             value[&lt;span&gt;1&lt;/span&gt;] = is_in_array(j, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             value[&lt;span&gt;2&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i-&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i-&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             value[&lt;span&gt;3&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             value[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; in_array[i][j];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             value[&lt;span&gt;5&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i, height, width) ? in_array[i][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             value[&lt;span&gt;6&lt;/span&gt;] = is_in_array(j-&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j-&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             value[&lt;span&gt;7&lt;/span&gt;] = is_in_array(j, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             value[&lt;span&gt;8&lt;/span&gt;] = is_in_array(j+&lt;span&gt;1&lt;/span&gt;, i+&lt;span&gt;1&lt;/span&gt;, height, width) ? in_array[i+&lt;span&gt;1&lt;/span&gt;][j+&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Contra-Harmonic Mean Filter &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; Q = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;double&lt;/span&gt; num = &lt;span&gt;0.0&lt;/span&gt;, den = &lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;; k &amp;lt; ARRAY_SIZE*ARRAY_SIZE; k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 num += pow(value[k], Q+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 den +=&lt;span&gt; pow(value[k], Q);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             out_array[i][j] = (&lt;span&gt;short&lt;/span&gt;)(num /&lt;span&gt; den);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;lt; &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (out_array[i][j] &amp;gt; &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 out_array[i][j] = &lt;span&gt;0xff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Q = 2 消除胡椒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232754984-289998330.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q = -2消除盐粒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232842977-1768946483.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Q = -2消除盐粒噪声后的图像使用Q = 2消除胡椒噪声&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030232954784-368093284.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再来一次&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030233031297-133397177.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;再来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1371185/201810/1371185-20181030233054185-1396689091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时椒盐噪声已经基本消除&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 15:33:00 +0000</pubDate>
<dc:creator>GoleBeetle</dc:creator>
<og:description>图像退化/复原过程模型 高斯噪声 PDF（概率密度函数） 生成高斯随机数序列 算法可参考&lt;http://www.doc.ic.ac.uk/~wl/papers/07/csur07dt.pdf&amp;g</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GoldBeetle/p/9880362.html</dc:identifier>
</item>
<item>
<title>基于Docker搭建Jumpserver堡垒机操作实践 - idaxia</title>
<link>http://www.cnblogs.com/tangqingsong/p/9880248.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tangqingsong/p/9880248.html</guid>
<description>&lt;h2 id=&quot;一背景&quot;&gt;一、背景&lt;/h2&gt;
&lt;p&gt;笔者最近想起此前公司使用过的堡垒机系统，觉得用的很方便，而现在的公司并没有搭建此类系统，想着以后说不定可以用上；而且最近也有点时间，因此来了搭建堡垒机系统的兴趣，在搭建过程中参考了比较多的文档，其中最详细的还是官方文档，地址如下所示：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://docs.jumpserver.org/zh/docs/&quot;&gt;Jumpserver 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;二操作概要&quot;&gt;二、操作概要&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;1. 系统运行
2. 配置入门
3. 测试验证&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三系统运行&quot;&gt;三、系统运行&lt;/h2&gt;
&lt;p&gt;在官方文档中安装堡垒机有很多种方法，这让笔者有些纠结，另外而且在不同系统中安装方法也不一致，不过正在徘徊不定时，发现一种通用的安装方法，便是采用docker进行安装，因此本文中笔者将以docker安装为例&lt;/p&gt;
&lt;h3 id=&quot;下载镜像&quot;&gt;3.1 下载镜像&lt;/h3&gt;
&lt;p&gt;在docker官方镜像库当中并没有收录jumpserver，因此下载镜像命令如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker pull registry.jumpserver.org/public/jumpserver:1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下载过程可能比较慢，笔者大约花费了14分钟才将其下载完成，下载完成后结果如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.0.0: Pulling from public/jumpserver
af4b0a2388c6: Pull complete
aa66a3d10fd2: Pull complete
1d4c6a27f2ac: Pull complete
2490267572de: Pull complete
b00f1599768d: Pull complete
398fc903cdc3: Pull complete
f8490bbfc09a: Pull complete
86d238b365f5: Pull complete
2cd3b1ef59b2: Pull complete
4a21434eeb73: Pull complete
ae8cf3e909e0: Pull complete
7c440776471a: Pull complete
0a5e895f91af: Pull complete
b86672241685: Pull complete
af16a4945f95: Pull complete
0374e723cd6c: Pull complete
e18b86849df9: Pull complete
648aa832cb74: Pull complete
b52364a5c704: Pull complete
Digest: sha256:0f26e439c492ac52cbc1926aa950a59730607c947c79557ab3da51bfc2c7b5d4
Status: Downloaded newer image for registry.jumpserver.org/public/jumpserver:1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行镜像&quot;&gt;3.2 运行镜像&lt;/h3&gt;
&lt;p&gt;下载之后笔者需要将下载下来的容器运行起来，为了防止80端口被宿主机其他进程所占用，因此将容器端口映射到宿主机的8011上，运行命令如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker run --name jms_server -d -p 8011:80 -p 2222:2222 registry.jumpserver.org/public/jumpserver:1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在参数当中因为有加入后台运行参数&lt;code&gt;-d&lt;/code&gt;，容器运行之后终端不会进入容器bash中，而且当命令执行成功之后，docker将会返回容器ID，如果返回信息则可能出现了异常错误，正常返回结果如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;4709a7d85af28bf05a63fb3e42541a41c30edda6668fd54a446cfab006c35b9e&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;运行检查&quot;&gt;3.3 运行检查&lt;/h3&gt;
&lt;p&gt;容器运行之后，笔者需要对其进行检测确保运行成功，检查方式有两个，首先观察容器是否正常运行，然后是检查堡垒机是否能被浏览器所访问&lt;/p&gt;
&lt;p&gt;首先通过如下命令可以查看当前正在运行的容器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;docker ps&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果容器正常运行将会出现刚在笔者所运行的堡垒机容器ID，正常返回结果参考如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CONTAINER ID        IMAGE                                             COMMAND               CREATED             STATUS              PORTS                                                   NAMES
4709a7d85af2        registry.jumpserver.org/public/jumpserver:1.0.0   &quot;/opt/start_jms.sh&quot;   8 minutes ago       Up 8 minutes        443/tcp, 0.0.0.0:2222-&amp;gt;2222/tcp, 0.0.0.0:8011-&amp;gt;80/tcp   jms_server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在返回结果当中可以看到之前docker返回的容器ID正处于运行状态，便可以确定容器运行正常，接着笔者还需要通过浏览器来检测是否运行成功，使用浏览器打开如下地址&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://127.0.0.1:8011/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当浏览器出现如下界面时，则基本代表成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四配置入门&quot;&gt;四、配置入门&lt;/h2&gt;
&lt;p&gt;在确定系统正常运行之后，接下来就可以对系统进行一些配置，堡垒机配置比较简单，下面的配置是将是使用堡垒机最为基础的一些配置，配置主要是添加一些资产进行管理，这便需要添加管理用户、系统普通用户、账户授权等操作。&lt;/p&gt;
&lt;h3 id=&quot;登录系统&quot;&gt;4.1 登录系统&lt;/h3&gt;
&lt;p&gt;在前面的检验运行的截图当中可以看到需要登录，而账号和密码笔者并没有在官方文档中所看到，笔者随手一尝试，发现用户名和密码分别是&lt;code&gt;admin&lt;/code&gt;与&lt;code&gt;admin&lt;/code&gt;，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;登录成功之后，进入系统看到的界面如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/3.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;管理用户&quot;&gt;4.2 管理用户&lt;/h3&gt;
&lt;p&gt;接下来笔者需要添加一些资产，添加资产的前提条件是有一个管理用户，这个管理用户是资产的最高权限账户，堡垒机之后会使用此账户来登录并管理资产，和获取一些统计信息，笔者在&lt;code&gt;资产管理&lt;/code&gt;-&amp;gt;&lt;code&gt;管理用户&lt;/code&gt;列表中点击&lt;code&gt;创建系统用户&lt;/code&gt;按钮，便来到了创建管理用户的页面，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/5.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在表单中可以看见必须填写用户名，和认证所用的密码或私钥，按照真实情况去填写，比如笔者的资产最高权限账户是&lt;code&gt;song&lt;/code&gt;，密码&lt;code&gt;123456Ab&lt;/code&gt;,那么就如实填写上去。&lt;/p&gt;
&lt;h3 id=&quot;资产管理&quot;&gt;4.3 资产管理&lt;/h3&gt;
&lt;p&gt;在添加管理用户之后，便可以添加资产了，添加资产也非常的简单，在资产列表点击&lt;code&gt;创建资产&lt;/code&gt;按钮，便来到了添加资产的页面，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/7.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加资产需要填写，资产的IP地址，以及ssh的端口号，以及选择资产的操作系统类型，并且选择用哪一个管理用户&lt;/p&gt;
&lt;h3 id=&quot;系统用户&quot;&gt;4.4 系统用户&lt;/h3&gt;
&lt;p&gt;在资产管理下还有一个系统用户管理，这个系统用户的使用场景是，有时候需要在很多个目标资产中创建一个普通账户，这时候肯定是十分麻烦；此时便可以通过堡垒机上的系统用户管理来创建一个系统用户；然后下发到目标资产中，这样一来就不需要去目标主机一个个登录然后去创建，因此非常方便，添加系统用户如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/6.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建系统用户需输入需要创建的账号，以及选择认证的方式，默认为秘钥方式，也可以将选择框选中去掉，通过密码来认证。&lt;/p&gt;
&lt;h2 id=&quot;五测试验证&quot;&gt;五、测试验证&lt;/h2&gt;
&lt;p&gt;在前面的配置步骤操作完毕后，便可以进行一些常规功能验证，以此来加深对jumpserver系统的了解，这些功能测试点有 资产连接测试、用户授权、Web终端、在线会话、命令记录等功能。&lt;/p&gt;
&lt;h3 id=&quot;连接测试&quot;&gt;5.1 连接测试&lt;/h3&gt;
&lt;p&gt;连接测试的目的是检查资产是否可以被堡垒机所访问，可以在资产列表点击资产名称，便可以进入资产详情页面，右侧有两个按钮，点击&lt;code&gt;刷新&lt;/code&gt;按钮，正确配置的参考效果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/8.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果能看到左侧的硬件信息发生了变更，就代表此前配置的管理用户没有问题，否则会弹出错误提示框；&lt;/p&gt;
&lt;h3 id=&quot;用户授权&quot;&gt;5.2 用户授权&lt;/h3&gt;
&lt;p&gt;当配置资产后，如果想在堡垒机中直接连接终端就还需要给用户授权，授权分为两个步骤，第一步是给web终端账户授权，在&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;终端管理&lt;/code&gt;,如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/9.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二步则是给用户自己本身授权，在&lt;code&gt;授权管理&lt;/code&gt;-&amp;gt;&lt;code&gt;资产权限&lt;/code&gt;-&amp;gt;&lt;code&gt;创建权限规则&lt;/code&gt;中做好相应配置，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/10.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;web终端&quot;&gt;5.3 web终端&lt;/h3&gt;
&lt;p&gt;当给用户授权之后，用户便可以&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;Web终端&lt;/code&gt;中与系统进行交互，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/11.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;在线会话&quot;&gt;5.4 在线会话&lt;/h3&gt;
&lt;p&gt;有些时候想看谁在操作服务器，可以很轻松的通过在线会话功能来查看当前有哪些用户在操作终端，在&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;在线会话&lt;/code&gt;列表中进行查看，如下图所示&lt;br/&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/12.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;命令记录&quot;&gt;5.5 命令记录&lt;/h3&gt;
&lt;p&gt;笔者觉得堡垒机最大的作用之一便是审计，如果想知道某个用户在系统中执行了那些命令，可以很方便的在&lt;code&gt;会话管理&lt;/code&gt;-&amp;gt;&lt;code&gt;命令记录&lt;/code&gt;中进行查看，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/jumpserver/13.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;六-图书推荐&quot;&gt;六、 图书推荐&lt;/h2&gt;
&lt;p&gt;如果对笔者的实战文章较为感兴趣，可以关注笔者新书《PHP Web安全开发实战》，现已在各大平台上架销售，封面如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tuchuang.songboy.net/xss2/19.png?1&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作者：汤青松&lt;/p&gt;
&lt;p&gt;微信：songboy8888&lt;/p&gt;
&lt;p&gt;日期：2018-10-30&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 15:00:00 +0000</pubDate>
<dc:creator>idaxia</dc:creator>
<og:description>一、背景 笔者最近想起此前公司使用过的堡垒机系统，觉得用的很方便，而现在的公司并没有搭建此类系统，想着以后说不定可以用上；而且最近也有点时间，因此来了搭建堡垒机系统的兴趣，在搭建过程中参考了比较多的文</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tangqingsong/p/9880248.html</dc:identifier>
</item>
<item>
<title>State模式（状态设计模式） - ---dgw博客</title>
<link>http://www.cnblogs.com/dgwblog/p/9880151.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dgwblog/p/9880151.html</guid>
<description>&lt;h4 id=&quot;state&quot;&gt;State？？？&lt;/h4&gt;
&lt;p&gt;State模式中，我们用类来表示状态。以类来表示状态后，我们就能通过切换类来方便地改变对象的状态。当需要增加新的状态时，如何修改代码这个问题也会很明确。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;直接用状态代替硬编码&lt;br/&gt;&lt;strong&gt;依赖于状态的处理&lt;/strong&gt;，来执行具体的操作&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;理清职责&quot;&gt;理清职责&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1160484/201810/1160484-20181030224122587-1486689058.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实现功能：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;·有一个金库
·金库与警报中心相连
·金库里有警铃和正常通话用的电话·金库里有时钟，监视着现在的时间
·白天的时间范围是9：00~16：59，晚上的时间范围是17：00~23：59和0：00~8：59
·金库只能在白天使用
·白天使用金库的话，会在警报中心留下记录
·晚上使用金库的话，会向警报中心发送紧急事态通知
·任何时候都可以使用警铃
·使用警铃的话，会向警报中心发送紧急事态通知
·任何时候都可以使用电话（但晚上只有留言电话）
·白天使用电话的话，会呼叫警报中心
·晚上用电话的话，会呼叫警报中心的留言电话
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;名字=======》》》》》说明&lt;br/&gt;State ||表示金库状态的接口&lt;br/&gt;DayState ||表示“白天”状态的类。它实现了State接口&lt;br/&gt;NightState ||表示“晚上”状态的类。它实现了State接口&lt;br/&gt;Context ||表示管理金库状态，并与警报中心联系的接口&lt;br/&gt;SafeFrame ||实现了Context接口。在它内部持有按钮和画面显示等UI信息&lt;br/&gt;Main || 测试程序行为的类&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用与不使用状态模式对比&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;不使用&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;使用金库时被调用的方法（）{
if（白天）{
向警报中心报告使用记录
]elseif（晚上）{
向警报中心报告紧急事态
警铃响起时被调用的方法（）{
向警报中心报告紧急事态
正常通话时被调用的方法（）{
if（白天）{
呼叫警报中心
}elseif（晚上）{
呼叫警报中心的留言电话
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;表示百天的状态的类{
使用金库时被调用的方法（）{
向警报中心报告使用记录
警铃响起时被调用的方法（）{
向警报中心报告紧急事态
正常通话时被调用的方法（）{
呼叫警报中心
表示晚上的状态的类{
使用金库时被调用的方法（）{
向警报中心报告紧急事态
警铃响起时被调用的方法（）{
向警报中心报告紧急事态
正常通话时被调用的方法（）{
呼叫警报中心的留言电话

- 相关设计模式

◆Singleton模式（第5章）Singleton 模式常常会出现在ConcreteState角色中。在示例程序中，我们就使用了Singleton模式。这是因为在表示状态的类中并没有定义任何实例字段（即表示实例的状态的字段）。
◆Flyweight模式（第20章）在表示状态的类中并没有定义任何实例字段。因此，有时我们可以使用Flyweight模式在多个Context 角色之间共享ConcreteState角色。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;uml&quot;&gt;UML&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1160484/201810/1160484-20181030224137718-1574074703.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;时序图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1160484/201810/1160484-20181030224141274-1741054210.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;DayState \NightState State&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;
public interface State {

    //设置时间
    void doclock(Context context, int hour);

    // 使用金库
    void doUse(Context context);

    // 按下警铃
    void doAlarm(Context context);

    // 正常通话
    void dophone(Context context);

}

public class NightState implements State {

    private NightState() {
    }

    private static NightState singleton = new NightState();

    public static State getInstance() {
        return (State) singleton;
    }

    @Override
    public void doclock(Context context, int hour) {
        if (hour &amp;gt;= 9 &amp;amp;&amp;amp; hour &amp;lt; 17) {
            context.changeState(DayState.getInstance());
        }
    }

    @Override
    public void doUse(Context context) {
        context.recordLog(&quot;使用金库[晚上]&quot;);
    }

    @Override
    public void doAlarm(Context context) {
        context.callSecurityCenter(&quot;按下警铃[晚上]&quot;);
    }

    @Override
    public void dophone(Context context) {
        context.recordLog(&quot;正常通话[晚上]&quot;);
    }

    @Override
    public String toString() {
        return &quot;DayState{晚上}&quot;;
    }

}

public class DayState implements State {

    /**
     * 这里使用单例模式，因为每次改变一次状态都会生成一次实例，非常浪费内存与时间
     */
    private DayState() {
    }

    private static DayState singleton = new DayState();


    public static State getInstance() {
        return singleton;
    }

    @Override
    public void doclock(Context context, int hour) {
        if (hour &amp;lt; 9 || hour &amp;gt;= 17) {
            context.changeState(NightState.getInstance());
        }

    }

    @Override
    public void doUse(Context context) {
        context.recordLog(&quot;使用金库[白天]&quot;);
    }

    @Override
    public void doAlarm(Context context) {
        context.callSecurityCenter(&quot;按下警铃[白天]&quot;);
    }

    @Override
    public void dophone(Context context) {
        context.recordLog(&quot;正常通话[白天]&quot;);
    }

    @Override
    public String toString() {
        return &quot;DayState{白天}&quot;;
    }
}


&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Context 、SateFrame 、MainT&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;···&lt;/p&gt;
&lt;p&gt;public class MainT {&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static void main(String[] args) {
    SateFrame frame = new SateFrame(&quot;Safe Smaple&quot;);

    // 24个小时制
    while (true){
        for (int i = 0; i &amp;lt; 24; i++) {
            frame.setClock(i);
            try {
                Thread.sleep(1000);
            }catch (InterruptedException e){
                e.printStackTrace();
            }

        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public interface Context {&lt;br/&gt;//设置时间&lt;br/&gt;void setClock(int hour);&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 改变状态
void changeState(State state);

// 联系警报中心
void callSecurityCenter(String msg);

// 在警报中心留下记录
void recordLog(String msg);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public class SateFrame extends Frame implements ActionListener,Context {&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 显示时间
private TextField textClock=new TextField(60);
// 显示警报中心的记录
private TextArea textScreen=new TextArea(10,60);
private Button buttonUse=new Button(&quot;使用金库&quot;);
private Button buttonALarm=new Button(&quot;按下警铃&quot;);
private Button buttonPhone=new Button(&quot;正常通话&quot;);
private Button buttonExit=new Button(&quot;退出&quot;);


// 初始状态为白天
private State state=DayState.getInstance();

public SateFrame(String title) throws HeadlessException {
    super(title);
    setBackground(Color.lightGray);
    setLayout(new BorderLayout());

    add(textClock,BorderLayout.NORTH);
    textClock.setEditable(false);

    add(textScreen,BorderLayout.CENTER);
    textScreen.setEditable(false);

    Panel panel = new Panel();
    panel.add(buttonUse);
    panel.add(buttonALarm);
    panel.add(buttonPhone);
    panel.add(buttonExit);

    add(panel,BorderLayout.SOUTH);
    pack();
    show();
    buttonUse.addActionListener(this);
    buttonALarm.addActionListener(this);
    buttonPhone.addActionListener(this);
    buttonExit.addActionListener(this);
}

/**
 * 可以看出这里的操作就简化很多了:
 * 基本只有业务逻辑代码：
 * 判断状态相关的代码可以直接由相关的状态代码实现，
 * 即为由类的状态代替了if else代码
 */

@Override
public void actionPerformed(ActionEvent e) {
    if(e.getSource()==buttonUse){
        state.doUse(this);
    }else if(e.getSource()==buttonALarm){
        state.doAlarm(this);
    }else if(e.getSource()==buttonPhone){
        state.dophone(this);
    }else if(e.getSource()==buttonExit){
        System.exit(0);
    }else{
        System.out.println(&quot;?&quot;);
    }
}

@Override
public void setClock(int hour) {
    String clockstring=&quot;现在时间是:&quot;;
    if(hour&amp;lt;10){
        clockstring+=&quot;0&quot;+hour+&quot;:00&quot;;
    }else{
        clockstring+=hour+&quot;:00&quot;;
    }
    System.out.println(clockstring);
    textClock.setText(clockstring);
    state.doclock(this,hour);
}

@Override
public void changeState(State state) {
    System.out.println(&quot;从&quot;+this.state+&quot;状态变为了&quot;+state+&quot;状态。&quot;);
    this.state=state;
}

@Override
public void callSecurityCenter(String msg) {
    textScreen.append(&quot;调用---&quot;+msg+&quot;\n&quot;);
}

@Override
public void recordLog(String msg) {
    textScreen.append(&quot;记录---&quot;+msg+&quot;\n&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;···&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:42:00 +0000</pubDate>
<dc:creator>---dgw博客</dc:creator>
<og:description>State？？？ State模式中，我们用类来表示状态。以类来表示状态后，我们就能通过切换类来方便地改变对象的状态。当需要增加新的状态时，如何修改代码这个问题也会很明确。 直接用状态代替硬编码 依赖于</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dgwblog/p/9880151.html</dc:identifier>
</item>
<item>
<title>sublime - PackageDev自定义语法高亮规则 - JeromeLong</title>
<link>http://www.cnblogs.com/JeromeLong/p/9880000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JeromeLong/p/9880000.html</guid>
<description>&lt;p&gt;这几天为sublime-syntax的语法简直伤透了脑筋，网上能找到的教程都非常浅显，而官方英文文档的一时半会看不懂，中文文档翻译又实在糟心，纠结到最后还是下决心将英文文档整个看了一遍，并翻译成了我能看懂的文字。就以此作为我的第一篇正式博客吧！&lt;/p&gt;
&lt;h3 id=&quot;使用步骤&quot;&gt;使用步骤&lt;/h3&gt;
&lt;h4 id=&quot;安装packagedev插件&quot;&gt;1.安装PackageDev插件&lt;/h4&gt;
&lt;h4 id=&quot;新建语法文件&quot;&gt;2.新建语法文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Tools | Packages | Package Development | New Syntax Definition&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;定义语法高亮规则&quot;&gt;3.定义语法高亮规则&lt;/h4&gt;
&lt;p&gt;见后文。&lt;/p&gt;
&lt;h4 id=&quot;保存文件&quot;&gt;4.保存文件&lt;/h4&gt;
&lt;p&gt;保存完点击 &lt;code&gt;Tools | Build System | Convert to&lt;/code&gt; 编译。&lt;br/&gt;(感觉好像可以不用这一步，直接保存在user文件夹下就行，因为新版本已支持.sublime-syntax后缀文件。当然我也没试过，只是猜想。)&lt;/p&gt;
&lt;h4 id=&quot;修改语法文件&quot;&gt;5.修改语法文件&lt;/h4&gt;
&lt;p&gt;修改并保存可直接产生效果，不用等状态栏100%。但最终要等100%才能退出sublime，以后会自动加载。&lt;/p&gt;
&lt;h3 id=&quot;语法规则&quot;&gt;语法规则&lt;/h3&gt;

&lt;pre&gt;
&lt;code&gt;name                -&amp;gt;  语法名称。可选，如果不写，将从文件名派生
file_extensions     -&amp;gt;  此语法应使用的文件扩展名
first_line_match    -&amp;gt;  没有可识别的扩展名时，将对文件第一行进行匹配识别
scope               -&amp;gt;  分配给文件中所有文本的默认scope
hidden              -&amp;gt;  隐藏的语法定义，不会显示在菜单中，但仍可以通过插件分配&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;contexts&quot;&gt;Contexts&lt;/h4&gt;
&lt;p&gt;Contexts中通常有多种匹配文本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+alt+shift+p -&amp;gt; 查看当前文本所使用的scope&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当内容能匹配多个context时，使用最左边的一个；当多种context在同一位置生效时，使用先定义的一个。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;push        -&amp;gt;  使用push入栈，将文本匹配切换到另一种context中，
            =&amp;gt;  剩下的将不再使用当前context，直到使用pop从栈中弹出
meta_scope  -&amp;gt;  为当前栈context的所有文本分配scope
pop         -&amp;gt;  从栈中弹出，继续使用之前的scope
main        -&amp;gt;  每个语法必须定义一个main context, 它应用于文本最开始的位置.&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;meta&quot;&gt;Meta&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;meta_scope              -&amp;gt;  为当前栈context的所有文本分配scope, 包括触发push和pop的文本
meta_content_scope      -&amp;gt;  同上,但是不应用于触发push和pop的文本
meta_include_prototype  -&amp;gt;  false, 阻止当前文本自动应用prototype匹配.
clear_scopes            -&amp;gt;  移除当前栈中应用的scope，可以是整数或true. 
                        =&amp;gt;  应用于meta_scope和meta_content_scope之前. 
                        =&amp;gt;  通常仅在将一种语法嵌入另一种语法时使用。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;meta 必须列在任何match或include之前。&lt;/p&gt;
&lt;h4 id=&quot;match&quot;&gt;Match&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;match               -&amp;gt;  用正则表达式来匹配文本。一次只针对一行文本匹配
                    =&amp;gt;  可以不使用'',但当正则中有# : - { [ 或 &amp;gt; 时必须用引号
scope               -&amp;gt;  分配给匹配文本的着色类型
captures            -&amp;gt;  group数字对scope的映射，将匹配的内容按gruop分别着色
push                -&amp;gt;  推入堆栈的context，可以是context名及其列表，或者内联的匿名context
pop                 -&amp;gt;  弹出堆栈中的当前context。此键唯一可接受的值是true
set                 -&amp;gt;  类似push，但先退出当前context，然后将给定的context推送到栈中
embed               -&amp;gt;  此键接受context名，类似push，但当escape时弹出所有嵌套的context。
                    =&amp;gt;  是将一种语法嵌入另一种语法的理想工具
    escape              -&amp;gt;  与embed配套使用，用于退出嵌入的context
                        =&amp;gt;  此内的所有反向引用与match中的group关联
    embed_scope         -&amp;gt;  为escape前match的所有文本分配scope
    escape_capture      -&amp;gt;  escape中group数字对scope的映射，0表示所有匹配文本&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;push, pop, set 和 embed互斥。&lt;/p&gt;
&lt;h4 id=&quot;include&quot;&gt;Include&lt;/h4&gt;
&lt;p&gt;用于将一个context的内容包含在另一个context中。&lt;/p&gt;
&lt;p&gt;例如注释，可以使用include将其包含在内，而不用将它的内容复制到每个context中。&lt;/p&gt;
&lt;p&gt;include的内容会被插入到当前位置，仍然可以通过调整插入位置来指定先后顺序。&lt;/p&gt;
&lt;p&gt;include的内容中定义的meta语句会被忽略。&lt;/p&gt;
&lt;h4 id=&quot;prototype&quot;&gt;prototype&lt;/h4&gt;
&lt;p&gt;对于诸如注释之类的元素，经常会用include来使它们在每个context中自动插入，但每次都写include太过繁琐。&lt;/p&gt;
&lt;p&gt;可以使用prototype来完成此操作，它自动将内容插入到每个context的顶部，除非在context顶部用&lt;code&gt;meta_include_prototype: false&lt;/code&gt;用标明。&lt;/p&gt;
&lt;h4 id=&quot;including-other-files&quot;&gt;Including Other Files&lt;/h4&gt;
&lt;p&gt;Sublime Syntax 支持一个语法嵌套另一个语法。&lt;br/&gt;例如HTML嵌套Javascript。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;main:
  - match: &amp;lt;script&amp;gt;
    push: Packages/JavaScript/JavaScript.sublime-syntax
    with_prototype:
      - match: (?=&amp;lt;/script&amp;gt;)
        pop: true

with_prototype      -&amp;gt;   类似prototype, 将匹配应用于上面引入的所有context中。 
                    =&amp;gt;   但是它会忽略meta_include_prototype设置。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处&lt;code&gt;(?=&amp;lt;/script&amp;gt;)&lt;/code&gt;，当匹配到上面的内容后跟&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;时将JS从栈中弹出，并按原HTML规则匹配&lt;/p&gt;
&lt;p&gt;虽然.sublime-syntax 和.tmLanguage语法都支持，但是在此不能混用。&lt;/p&gt;
&lt;p&gt;例2：HTML模板语言的实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scope: text.jinja
contexts:
  main:
    - match: &quot;&quot;
      push: &quot;Packages/HTML/HTML.sublime-syntax&quot;
      with_prototype:
        - match: &quot;{{&quot;
          push: expr

  expr:
    - match: &quot;}}&quot;
      pop: true
    - match: \b(if|else)\b
      scope: keyword.control&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与HTML中嵌入JavaScript不同的是，模板语言倾向于从内到外操作：默认使用HTML，只有某些特殊语句转义为模板语言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match: &quot;&quot;&lt;/code&gt; 默认匹配所有的文本，通过with_prototype语句，当遇到 &lt;code&gt;{{ ... }}&lt;/code&gt; 时使用新的匹配.&lt;/p&gt;
&lt;h4 id=&quot;variables&quot;&gt;Variables&lt;/h4&gt;
&lt;p&gt;几个正则表达式中有部分完全相同的情况并不少见，为避免重复，可以使用变量代替。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
contexts:
  main:
    - match: '\b{{ident}}\b'
      scope: keyword.control&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;变量必须在.sublime-syntax文件顶层定义，并通过&lt;code&gt;{{varname}}&lt;/code&gt;在正则表达式中引用。&lt;/p&gt;
&lt;p&gt;Variables may themselves include other variables. Note that any text that doesn't match {{[A-Za-z0-9_]+}} won't be considered as a variable, so regexes can still include literal {{ characers, for example.&lt;/p&gt;
&lt;h3 id=&quot;实例&quot;&gt;实例&lt;/h3&gt;
&lt;h4 id=&quot;嵌套循环匹配&quot;&gt;嵌套循环匹配&lt;/h4&gt;
&lt;p&gt;例：括号自动匹配, 高亮显示单独的闭括号&lt;code&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;contexts:
  main:
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.illegal.stray-bracket-end

  brackets:
    - match: \)
      pop: true
    - include: main&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;高级栈的使用&quot;&gt;高级栈的使用&lt;/h4&gt;
&lt;p&gt;例：匹配typedef的两种定义&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;typedef int coordinate_t;

typedef struct
{
    int x;
    int y;
} point_t;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;匹配代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;main:
  - match: \btypedef\b
    scope: keyword.control.c
    set: [typedef_after_typename, typename]

typename:
  - match: \bstruct\b
    set:
      - match: &quot;{&quot;
        set:
          - match: &quot;}&quot;
            pop: true
  - match: \b[A-Za-z_][A-Za-z_0-9]*\b
    pop: true

typedef_after_typename:
  - match: \b[A-Za-z_][A-Za-z_0-9]*\b
    scope: entity.name.type
    pop: true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;main中使用匹配将两个context推入堆栈，最右边的处于栈的最顶层，先匹配，当最右边弹出后，才开始匹配左边的。&lt;/p&gt;
&lt;p&gt;为了简洁起见，typename中使用了context的匿名写法。&lt;/p&gt;
&lt;h4 id=&quot;对正则表达式中group的引用&quot;&gt;对正则表达式中group的引用&lt;/h4&gt;
&lt;p&gt;例：PHP与 Heredocs语法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;contexts:
  main:
    - match: &amp;lt;&amp;lt;&amp;lt;([A-Za-z][A-Za-z0-9_]*)
      push: heredoc

  heredoc:
    - meta_scope: string.unquoted.heredoc
    - match: ^\1;
        pop: true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处使用了 &lt;code&gt;\1&lt;/code&gt; 符号代指之前匹配的group&lt;/p&gt;
&lt;h4 id=&quot;语法测试&quot;&gt;语法测试&lt;/h4&gt;
&lt;p&gt;可以定义一个语法测试文本来自动检测，而不需要手动通过&lt;code&gt;show_scope_name&lt;/code&gt;命令检测&lt;br/&gt;具体见官方文档。&lt;/p&gt;
&lt;h4 id=&quot;关于scope的语法容日后再行研究&quot;&gt;关于scope的语法容日后再行研究&lt;/h4&gt;
&lt;h3 id=&quot;引用&quot;&gt;引用:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sublimetext.info/en/latest/reference/syntaxdefs.html&quot;&gt;非官方文档（推荐）&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.sublimetext.com/docs/3/syntax.html&quot;&gt;官方文档&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://cache.baiducontent.com/c?m=9d78d513d9d441a84fece4355e498971192583743da7c71508c3923893735b30506695ac26520704a5d27d1716af3f4bea812172361420c6da9fdf5dddcac86e69ca3035000b873205d368b8cb3732c050d51facb81897adf04584afa29298040d910c526d8180cd0d4a52dd6e80033194b1983844024faded4133a208363e9f5241a14788a1793241d2bcca5d3cd42aa77610e7f573ef6006f253fa10416202e20da609223b2da50a62e8444a45d5bb03bc752e0674fc0ea4b9b6e7b755da81bb7085fbd6ee64c926b58ffdf90618360da4&amp;amp;p=8b2a971389df04ff57e69f646151&amp;amp;newp=8f71d116d9c15df613bd9b75065092695d0fc20e3ddcc44324b9d71fd325001c1b69e7bf24251a02d4c17a6005a44259eff43078341766dada9fca458ae7c43476c3&amp;amp;user=baidu&amp;amp;fm=sc&amp;amp;query=%25YAML+1.2+---+%23+See+http://www.sublimetext.com/docs/3/syntax.html&amp;amp;qid=8b1443cf000725e3&amp;amp;p1=13&quot;&gt;中文版百度快照&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:32:00 +0000</pubDate>
<dc:creator>JeromeLong</dc:creator>
<og:description>sublime - PackageDev自定义语法高亮规则</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JeromeLong/p/9880000.html</dc:identifier>
</item>
<item>
<title>AtCoder Tenka1 Programmer Beginner Contest 解题报告 - henry_y</title>
<link>http://www.cnblogs.com/henry-1202/p/9879994.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henry-1202/p/9879994.html</guid>
<description>&lt;p&gt;赛时写了ABC，D实在没啥思路，然后C又难调...然后就从写完AB时的32名掉到了150+名&lt;/p&gt;
&lt;p&gt;T_T&lt;/p&gt;
&lt;p&gt;码力不够，思维不行，我还是AFO吧&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tenka1-2018-beginner.contest.atcoder.jp/&quot; target=&quot;_blank&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A - Measure&lt;/h2&gt;
&lt;p&gt;sb模拟，奇数串倒着输出偶数串正着输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d56c8b3a-4fbe-4869-b1e9-5f29efc610d0')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_d56c8b3a-4fbe-4869-b1e9-5f29efc610d0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d56c8b3a-4fbe-4869-b1e9-5f29efc610d0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d56c8b3a-4fbe-4869-b1e9-5f29efc610d0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d56c8b3a-4fbe-4869-b1e9-5f29efc610d0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {
    
    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010

&lt;span&gt;char&lt;/span&gt;&lt;span&gt; s[ N ] ;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    scanf( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , s + &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len = strlen( s+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( len == &lt;span&gt;2&lt;/span&gt; ) puts( s + &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = len ; i ; i --&lt;span&gt; ) putchar( s[ i ] ) ;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;B - Exchange&lt;/h2&gt;
&lt;p&gt;还是模拟...按着题意的要求来就好，奇数一种情况偶数一种情况&lt;/p&gt;
&lt;p&gt;然后一边$+\frac{1}{2}$，一边$-\frac{1}{2}$就好&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('271a67be-57bf-464e-9ce9-98561f1e1530')&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_271a67be-57bf-464e-9ce9-98561f1e1530&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_271a67be-57bf-464e-9ce9-98561f1e1530&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('271a67be-57bf-464e-9ce9-98561f1e1530',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_271a67be-57bf-464e-9ce9-98561f1e1530&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {
    
    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010
&lt;span&gt;int&lt;/span&gt; a[ &lt;span&gt;3&lt;/span&gt;&lt;span&gt; ] , k ;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    in2( a[ &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; ] , a[ &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ] ) ; in1( k ) ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt;= k ; i ++&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( a[ i % &lt;span&gt;2&lt;/span&gt; ] % &lt;span&gt;2&lt;/span&gt; ) a[ i % &lt;span&gt;2&lt;/span&gt; ] --&lt;span&gt; ;
        a[ ( i &lt;/span&gt;% &lt;span&gt;2&lt;/span&gt; ) ^ &lt;span&gt;1&lt;/span&gt; ] += a[ i % &lt;span&gt;2&lt;/span&gt; ] / &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ;
        a[ i &lt;/span&gt;% &lt;span&gt;2&lt;/span&gt; ] -= a[ i % &lt;span&gt;2&lt;/span&gt; ] / &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ;
    }
    &lt;/span&gt;&lt;span&gt;out&lt;/span&gt;( a[ &lt;span&gt;1&lt;/span&gt; ] ) , putchar(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;) , outn( a[ &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ] ) ; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;C - Align&lt;/h2&gt;
&lt;p&gt;很恶心的分类讨论&lt;/p&gt;
&lt;p&gt;首先要知道一个结论，最中间的数一定是最大或者最小的，然后我们可以在旁边依次填入最大/次大/最小/次小的数&lt;/p&gt;
&lt;p&gt;对串的奇偶分开讨论（取mid的不同）&lt;/p&gt;
&lt;p&gt;然后对于中间填最大还是填最小也要分开讨论&lt;/p&gt;
&lt;p&gt;然后综合几种情况取个最优就行&lt;/p&gt;
&lt;p&gt;写的有点长，实际上应该不用这么多代码的QAQ&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('236f2e0e-5549-4756-a96f-68cf846a5419')&quot; readability=&quot;49&quot;&gt;&lt;img id=&quot;code_img_closed_236f2e0e-5549-4756-a96f-68cf846a5419&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_236f2e0e-5549-4756-a96f-68cf846a5419&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('236f2e0e-5549-4756-a96f-68cf846a5419',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_236f2e0e-5549-4756-a96f-68cf846a5419&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {
    
    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n ;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; b[ N ] ;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; a[ N ] ;
ll ans &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    in1( n ) ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i ++&lt;span&gt; ) in1( a[ i ] ) ;
    sort( a&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt; , a+n+&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ) ;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; l = &lt;span&gt;1&lt;/span&gt; , r = n , mid = ( l + r ) &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ; 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( n % &lt;span&gt;2&lt;/span&gt;&lt;span&gt; ) {
        b[ mid ] &lt;/span&gt;= a[ r --&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ mid + mid - i ] = a[ l ++&lt;span&gt; ] ;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ mid + mid - i ] = a[ r --&lt;span&gt; ] ;
        }
        ll sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) sum += abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
        ll t &lt;/span&gt;=&lt;span&gt; sum ;
        l &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;  , r =&lt;span&gt; n ;
        b[ mid ] &lt;/span&gt;= a[ l ++&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ mid + mid - i ] = a[ l ++&lt;span&gt; ] ;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ mid + mid - i ] = a[ r --&lt;span&gt; ] ;
        }
        sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++ ) sum += abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
        printf( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; , max( t , sum ) ) ;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    }
    b[ mid ] &lt;/span&gt;= a[ r --&lt;span&gt; ] ;
    b[ mid &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt; ] = a[ l ++&lt;span&gt; ] ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ r --&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ l ++&lt;span&gt; ] ;
    }
    ll sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , t = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++&lt;span&gt; ) {
        sum &lt;/span&gt;+= abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
    }
    t &lt;/span&gt;=&lt;span&gt; sum ;
    l &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; , r =&lt;span&gt; n ;
    b[ mid &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt; ] = a[ r --&lt;span&gt; ] ;
    b[ mid ] &lt;/span&gt;= a[ l ++&lt;span&gt; ] ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = mid - &lt;span&gt;1&lt;/span&gt; ; i ; i --&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( ( mid - i ) % &lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt; ) b[ i ] = a[ l ++ ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ r --&lt;span&gt; ] ;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; b[ i ] = a[ r -- ] , b[ n - i + &lt;span&gt;1&lt;/span&gt; ] = a[ l ++&lt;span&gt; ] ;
    }
    sum &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;2&lt;/span&gt; ; i &amp;lt;= n ; i ++&lt;span&gt; ) {
        sum &lt;/span&gt;+= abs( b[ i ] - b[ i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt; ] ) ;
    }
    printf( &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; , max( sum , t ) ) ; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;D - Crossing&lt;/h2&gt;
&lt;p&gt;写这题之前一定要先读懂题意&lt;/p&gt;
&lt;p&gt;我比赛时一直读错题意，到结束时脑子里想的还是错误的题意....然后就炸了&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;令k为所选子集的数量。&lt;/p&gt;
&lt;p&gt;任何两个子集的交集大小为1，并且为1,2，...，N中的任何一个元素也使用了两次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于选出来的子集的限制就是这样的&lt;/p&gt;
&lt;p&gt;我们不妨把这些子集抽象成点，交集抽象成边，于是$1-n$这些元素就是边的种类&lt;/p&gt;
&lt;p&gt;那么不难看出整个图有$\frac{k(k-1)}{2}$条边，并且边的数目要等于n&lt;/p&gt;
&lt;p&gt;于是可以枚举出来这个k先，qzz大佬好像推了一个式子$O(1)$求出了这个k，不过我数学比较菜就直接枚举了T_T&lt;/p&gt;
&lt;p&gt;然后如果这个k枚举不出来就说明无解（一个比较玄学的地方，我从1枚举到n来判会WA掉第一个点，其他都没问题，然后从1枚举到500就没问题，不知道是怎么回事）&lt;/p&gt;
&lt;p&gt;然后来连边&lt;/p&gt;
&lt;p&gt;因为每个元素要沟通两个子集&lt;/p&gt;
&lt;p&gt;所以类似于完全图那样连边就好&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt; k ; i ++&lt;span&gt; ) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt; ; j &amp;lt; k ; j ++&lt;span&gt; ) {
        x &lt;/span&gt;++&lt;span&gt; ;
        s[ i ].push_back( x ) ;
        s[ j ].push_back( x ) ;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就没了&lt;/p&gt;
&lt;p&gt;所以说这题的主要难度在于读懂题意T_T&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5f6a078a-f64b-4091-af25-f76b5706c369')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_5f6a078a-f64b-4091-af25-f76b5706c369&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5f6a078a-f64b-4091-af25-f76b5706c369&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5f6a078a-f64b-4091-af25-f76b5706c369',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5f6a078a-f64b-4091-af25-f76b5706c369&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; ll long long
&lt;span&gt;#define&lt;/span&gt; inf 0x3f3f3f3f 
&lt;span&gt;#define&lt;/span&gt; il inline 

&lt;span&gt;#define&lt;/span&gt; in1(a) a=read()
&lt;span&gt;#define&lt;/span&gt; in2(a,b) in1(a),in1(b)
&lt;span&gt;#define&lt;/span&gt; in3(a,b,c) in2(a,b),in1(c)
&lt;span&gt;#define&lt;/span&gt; in4(a,b,c,d) in2(a,b),in2(c,d)
&lt;span&gt;#define&lt;/span&gt; out(a) printf( &quot;%d&quot; , a ) 
&lt;span&gt;#define&lt;/span&gt; out_(a) printf( &quot; %d&quot; , a )
&lt;span&gt;#define&lt;/span&gt; outn(a) out(a),putchar('\n')

&lt;span&gt;#define&lt;/span&gt; I_int int &lt;span&gt;
inline I_int read() {

    I_int x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt; , f = &lt;span&gt;1&lt;/span&gt; ; &lt;span&gt;char&lt;/span&gt; c =&lt;span&gt; getchar() ;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || c &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( c == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) f = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;( c &amp;gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
        x &lt;/span&gt;= (x &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;) + (x &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;) + c - &lt;span&gt;48&lt;/span&gt;&lt;span&gt; ;
        c &lt;/span&gt;=&lt;span&gt; getchar() ;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x *&lt;span&gt; f ;
}
&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt; I_int

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std ;

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; N 100010

&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n , k ;

vector&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;s[N]; 

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    in1( n ) ;
    k &lt;/span&gt;= -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt; &lt;span&gt;500&lt;/span&gt; ; i ++&lt;span&gt; ) 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( i * ( i - &lt;span&gt;1&lt;/span&gt; ) / &lt;span&gt;2&lt;/span&gt; == n ) { k = i ; &lt;span&gt;break&lt;/span&gt;&lt;span&gt; ; }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( k == -&lt;span&gt;1&lt;/span&gt; ) { &lt;span&gt;return&lt;/span&gt; puts(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt; k ; i ++&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt; ; j &amp;lt; k ; j ++&lt;span&gt; ) {
            x &lt;/span&gt;++&lt;span&gt; ;
            s[ i ].push_back( x ) ;
            s[ j ].push_back( x ) ;
        }
    }
    puts(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); outn(k);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt; k ; i ++&lt;span&gt; ) {
        &lt;/span&gt;&lt;span&gt;out&lt;/span&gt;((&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)s[i].size());
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; s[ i ].size();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt; ; j &amp;lt; len ; j ++&lt;span&gt; ) {
            out_(s[i][j]);
        }
        putchar(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;还是太菜，还是要继续努力啊QAQ&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:16:00 +0000</pubDate>
<dc:creator>henry_y</dc:creator>
<og:description>赛时写了ABC，D实在没啥思路，然后C又难调...然后就从写完AB时的32名掉到了150+名 T_T 码力不够，思维不行，我还是AFO吧 比赛链接 A - Measure sb模拟，奇数串倒着输出偶数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/henry-1202/p/9879994.html</dc:identifier>
</item>
<item>
<title>连载《一个程序猿的生命周期》-《发展篇》- 24.你所掌握的技术，创造的价值会越来越低 - 一个程序猿的生命周期</title>
<link>http://www.cnblogs.com/blog470130547/p/9879969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blog470130547/p/9879969.html</guid>
<description>&lt;p&gt;&lt;span&gt;      最近HBATJ缩减（或停止）社会招聘的消息刷爆了IT圈，让一些计划进入大厂的iter悔恨没有早日进去，就像一座围城，外面的人想进去，里面的人想出来。尽管大厂进行了辟谣，但是应该尊重事实，因为我一个多月前参加阿里巴巴云栖大会，已经获知内部人士的消息，hc已经冻结。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;24&quot;&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220515448-806011219.png&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;180&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220705631-202610432.png&quot; alt=&quot;&quot; width=&quot;341&quot; height=&quot;180&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;     最近马化腾深夜在知乎上问：未来十年哪些基础科学突破会影响互联网科技产业？产业互联网和消费互联网融合创新，会带来哪些改变？如下图：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220857781-1881484435.png&quot; alt=&quot;&quot; width=&quot;470&quot; height=&quot;280&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;     春江水暖鸭先知，面对未来可能出现的寒冬，大老们也在焦虑。现在社会运行成本比较高，并且在没有可预见未来的情况下，招聘一个人的成本与创造的价值并非成正比。例如一个互联网创业公司，不断的在圆梦，如果上市了，给你超预期的薪水也值得，否则没有任何意义。再例如，像我们这样的传统制造业，还能够紧跟时代步伐的公司，招聘一个软件开发的应届生就要10K的月薪，老板也不是傻子，一定会考虑投入产出比。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      去上海参加工博会的时候，顺便见见群友。此兄搞了几年开发，碰到机遇后就出来单干了，在缺少人员的情况下，找了博客园里小有名气的博主到生产现场负责项目实施，此兄描述：小有名气的博主蒙圈了，根本不知道从哪开始实施......。时代在发生变化，用DOS时代理解PC机时代是不行的、用PC机时代理解互联网时代是不行的、用互联网时代理解物联网时代或智能时代是不行的......以此类推。以现在应用技术的发展情况，足以解决现在的领域问题，关键是如何结合落后领域的业务而产生新的价值，降低成本提高效率。就技术讨论技术 ，重复造轮子，而又没有任何创新可言，从改变社会的角度考虑，其实不具备意义。除做事外，只是学习，另当别论了。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;      现在很少做纯技术性的工作，仍然具有危机感。第一、自己并非不可取代。第二、做一些应用级的开发，已经失去了工作或人生的意义。有自己的软件框架，开源了一段时间，后来闭源了。在中国的整体环境下，开源的生态并不理想。因为有太多人不想付出就获得源代码，这和公司的整体意识有关系，一个技术人员也无权决定是否能够付出成本。单靠技术变现会越来越困难，因为一般性技术门槛越来越低，必须结合和解决现实中的业务场景问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      国内的互联网公司的大发展得益于开源世界的免费红利，但是最近一系列的事件，让HBATJ大厂也感到了危机。一是国际贸易战中以芯片制裁中兴通讯，前三季度亏损72.6亿元；二是Android系统的欧盟地区的手机和平板电脑每台要支付最高40美元的授权费；三是2019 年 1 月以后发布的 Oracle Java SE 8 公开更新，需要获取商用许可证。这些大厂门，哪个公司离的开这些产品呢！就像中国人口红利消失，房产、股市、P2P等，韭菜割了一茬又一茬，割的比长的还快，同样面临变革的问题。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;      你现在掌握的技术，创造的价值越来越低，说白了是没有创新的核心产品。市场催你要活着，公司催你要业务功能、项目催你要项目进度、家里催你要生活......。公司和个人同样面临着危机，理想与情怀也只能面对现实。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;      2016年12月30号写下的文字：&lt;/span&gt;&lt;br/&gt;&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/691334/201810/691334-20181030220939129-1128964864.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;260&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div readability=&quot;6.241134751773&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个程序猿的生命周期 微信平台&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;口   号：职业交流，职业规划；面对现实，用心去交流、感悟。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;公众号：iterlifetime&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;strong&gt;百木-ITer职业交流奋斗 群：141588103&lt;/strong&gt;   &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二维码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/691334/201606/691334-20160618075950167-974887453.jpg&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 30 Oct 2018 14:12:00 +0000</pubDate>
<dc:creator>一个程序猿的生命周期</dc:creator>
<og:description>最近HBATJ缩减（或停止）社会招聘的消息刷爆了IT圈，让一些计划进入大厂的iter悔恨没有早日进去，就像一座围城，外面的人想进去，里面的人想出来。尽管大厂进行了辟谣，但是应该尊重事实，因为我一个多月</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blog470130547/p/9879969.html</dc:identifier>
</item>
<item>
<title>这可能是最简单的Page Object库 - 虫师</title>
<link>http://www.cnblogs.com/fnng/p/9879882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fnng/p/9879882.html</guid>
<description>&lt;p&gt;做过web自动化测试的同学，对Page object设计模式应该不陌生。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/311516/201810/311516-20181030215701455-21147713.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page object库应该根据以下目标开发：&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Page object应该易于使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清晰的结构&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;只写测试，而不是基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在可能的情况下防止样板代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要自己管理浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在运行时选择浏览器，而不是在类级别。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要直接接触selenium。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这只是一种设计模式，只要遵循它有思想，不借助第三方库，我们一样可以实现这种设计模式。&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;baidu_page.py&lt;/code&gt; 文件，实现page层封装。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;
class BasePage:
    &quot;&quot;&quot;
   基础Page
   &quot;&quot;&quot;
   def __init__(self, driver):
        self.driver = driver

    def get(self, url):
        self.driver.get(url)

    def id_(self, id_):
        return self.driver.find_element_by_id(id_)

    def xpath(self, xpath):
        return self.driver.find_element_by_xpath(xpath)


class BaiduPage(BasePage):
    &quot;&quot;&quot;
   百度首页Page
   &quot;&quot;&quot;

   @property
   def search_box(self):
        return self.id_(&quot;kw&quot;)

    @property
   def search_button(self):
        return self.xpath(&quot;//*[@id='su']&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们本质上要将元素的定位和元素的操作分开，page层用来定义元素的定位。&lt;/p&gt;
&lt;p&gt;接下来创建，&lt;code&gt;test_baidu.py&lt;/code&gt;文件，用来实现自动化测试。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from selenium import webdriver
from baidu_page import BaiduPage

dr = webdriver.Chrome()
page = BaiduPage(dr)
page.get(&quot;https://www.baidu.com&quot;)
page.search_box.send_keys(&quot;page object&quot;)
page.search_button.click()

dr.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里你将看不到元素的定位，分层的好处就是，当元素的定位发生改变时，只需要维护好page层即可，对于测试用例来说不需要关心元素怎么定位，只要专心设计好用例即可。&lt;/p&gt;
&lt;p&gt;可是，Page层的编写并不太简便，本质上它的作用只是定义一些元素的定位。那我告诉你，只需要4行代码也可以实现上面baidu_page.py的功能，你会不会太简单了？&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from page_objects import PageObject, PageElement

class BaiduPage(PageObject):
    search_box = PageElement(css='#kw')
    search_button = PageElement(id_='su')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是的，就这么简单，专注于元素的定位的编写，几乎没有多月的东西。而且还可以添加超时时间哦！&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from page_objects import PageObject, PageElement

class BaiduPage(PageObject):
    search_box = PageElement(css='#kw', time_out=2)
    search_button = PageElement(id_='su', time_out=10)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样再也不用写恶心的显式等待了，是不是很爽！？&lt;/p&gt;
&lt;p&gt;定位一组元素也是非常简单的说。&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from page_objects import PageElements

class BaiduPage(PageObject):
    ……
    # 百度搜索结果
   search_result = PageElements(xpath=&quot;//div/h3/a&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;啥？ 项目地址？ 别急！别急！&lt;/p&gt;
&lt;p&gt;GitHub地址：&lt;br/&gt;https://github.com/defnngj/selenium_page_objects&lt;/p&gt;
&lt;p&gt;原项目已经不再维护，我阅读了原项目代码，虽然只有100多行，但设计非常精妙。可惜缺少元素的等待，这将有助于定位元素的稳定性，所以，在原有项目的基础上增加的该功能。&lt;/p&gt;
&lt;p&gt;下载安装:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ python setup.py install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过pip命令安装:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;$ pip install -i https://testpypi.python.org/pypi selenium-page-objects&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 30 Oct 2018 13:59:00 +0000</pubDate>
<dc:creator>虫师</dc:creator>
<og:description>这可能是最简单的Page Object库</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fnng/p/9879882.html</dc:identifier>
</item>
<item>
<title>基于OpenSSL的HTTPS通信C++实现 - 铁芒箕</title>
<link>http://www.cnblogs.com/bwar/p/9879893.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bwar/p/9879893.html</guid>
<description>&lt;p&gt;  HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。&lt;a href=&quot;https://github.com/Bwar/Nebula&quot;&gt;Nebula&lt;/a&gt;是一个为开发者提供一个快速开发高并发网络服务程序或搭建高并发分布式服务集群的高性能事件驱动网络框架。Nebula作为通用网络框架提供HTTPS支持十分重要，Nebula既可用作https服务器，又可用作https客户端。本文将结合Nebula框架的https实现详细讲述基于openssl的SSL编程。如果觉得本文对你有用，帮忙到Nebula的&lt;a href=&quot;https://github.com/Bwar/Nebula&quot;&gt;Github&lt;/a&gt;或&lt;a href=&quot;https://gitee.com/Bwar/Nebula&quot;&gt;码云&lt;/a&gt;给个star，谢谢。Nebula不仅是一个框架，还提供了一系列基于这个框架的应用，目标是打造一个高性能分布式服务集群解决方案。Nebula的主要应用领域：即时通讯（成功应用于一款&lt;a href=&quot;https://github.com/Bwar/Nebula/wiki/%E9%A6%96%E9%A1%B5&quot;&gt;IM&lt;/a&gt;）、消息推送平台、数据实时分析计算(&lt;a href=&quot;https://github.com/Bwar/Nebio&quot;&gt;成功案例&lt;/a&gt;)等，Bwar还计划基于Nebula开发爬虫应用。&lt;/p&gt;
&lt;h3 id=&quot;h3_1&quot;&gt;1. SSL加密通信&lt;/h3&gt;
&lt;p&gt;  HTTPS通信是在TCP通信层与HTTP应用层之间增加了SSL层，如果应用层不是HTTP协议也是可以使用SSL加密通信的，比如WebSocket协议WS的加上SSL层之后的WSS。Nebula框架可以通过更换Codec达到不修改代码变更通讯协议目的，Nebula增加SSL支持后，所有Nebula支持的通讯协议都有了SSL加密通讯支持，基于Nebula的业务代码无须做任何修改。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https_communication&quot; src=&quot;https://oscimg.oschina.net/oscnet/73a2c1617c996e553b18b3f3558e638c76c.jpg&quot; alt=&quot;https_communication&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  Socket连接建立后的SSL连接建立过程：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;ssl_communication&quot; src=&quot;https://oscimg.oschina.net/oscnet/7cb795766fac25cc3cff3e4a075311d6d3b.jpg&quot; alt=&quot;ssl_communication&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;h3_2&quot;&gt;2. OpenSSL API&lt;/h3&gt;
&lt;p&gt;  OpenSSL的API很多，但并不是都会被使用到，如果需要查看某个API的详细使用方法可以阅读&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/ssl/&quot;&gt;API文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;h4_3&quot;&gt;2.1 初始化OpenSSL&lt;/h4&gt;
&lt;p&gt;  OpenSSL在使用之前，必须进行相应的初始化工作。在建立SSL连接之前，要为Client和Server分别指定本次连接采用的协议及其版本，目前能够使用的协议版本包括SSLv2、SSLv3、SSLv2/v3和TLSv1.0。SSL连接若要正常建立，则要求Client和Server必须使用相互兼容的协议。   下面是Nebula框架SocketChannelSslImpl::SslInit()函数初始化OpenSSL的代码，根据OpenSSL的不同版本调用了不同的API进行初始化。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;if OPENSSL_VERSION_NUMBER &amp;gt;= 0x10100003L

    &lt;span class=&quot;hljs-keyword&quot;&gt;if (OPENSSL_init_ssl(OPENSSL_INIT_LOAD_CONFIG, &lt;span class=&quot;hljs-literal&quot;&gt;NULL) == &lt;span class=&quot;hljs-number&quot;&gt;0)
    {
        pLogger-&amp;gt;WriteLog(neb::Logger::ERROR, __FILE__, __LINE__, __FUNCTION__, &lt;span class=&quot;hljs-string&quot;&gt;&quot;OPENSSL_init_ssl() failed!&quot;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return(ERR_SSL_INIT);
    }

    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h4_4&quot;&gt;2.2 创建CTX&lt;/h4&gt;
&lt;p&gt;  CTX是SSL会话环境，建立连接时使用不同的协议，其CTX也不一样。创建CTX的相关OpenSSL函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;/&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h4_5&quot;&gt;2.3 创建SSL套接字&lt;/h4&gt;
&lt;p&gt;  在创建SSL套接字之前要先创建Socket套接字，建立TCP连接。创建SSL套接字相关函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;SSL *&lt;span class=&quot;hljs-title&quot;&gt;SSl_new&lt;span class=&quot;hljs-params&quot;&gt;(SSL_CTX *ctx);          &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h4_6&quot;&gt;2.4 完成SSL握手&lt;/h4&gt;
&lt;p&gt;  在这一步，我们需要在普通TCP连接的基础上，建立SSL连接。与普通流套接字建立连接的过程类似：Client使用函数SSL_connect()【类似于流套接字中用的connect()】发起握手，而Server使用函数SSL_ accept()【类似于流套接字中用的accept()】对握手进行响应，从而完成握手过程。两函数原型如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SSL_connect&lt;span class=&quot;hljs-params&quot;&gt;(SSL *ssl);
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SSL_accept&lt;span class=&quot;hljs-params&quot;&gt;(SSL *ssl);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  握手过程完成之后，Client通常会要求Server发送证书信息，以便对Server进行鉴别。其实现会用到以下两个函数:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;X509 *&lt;span class=&quot;hljs-title&quot;&gt;SSL_get_peer_certificate&lt;span class=&quot;hljs-params&quot;&gt;(SSL *ssl);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h4_7&quot;&gt;2.5 数据传输&lt;/h4&gt;
&lt;p&gt;  经过前面的一系列过程后，就可以进行安全的数据传输了。在数据传输阶段，需要使用SSL_read( )和SSL_write( )来代替普通流套接字所使用的read( )和write( )函数，以此完成对SSL套接字的读写操作,两个新函数的原型分别如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SSL_read&lt;span class=&quot;hljs-params&quot;&gt;(SSL *ssl,&lt;span class=&quot;hljs-keyword&quot;&gt;void *buf,&lt;span class=&quot;hljs-keyword&quot;&gt;int num);            &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h4_8&quot;&gt;2.6 会话结束&lt;/h4&gt;
&lt;p&gt;  当Client和Server之间的通信过程完成后，就使用以下函数来释放前面过程中申请的SSL资源：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SSL_shutdown&lt;span class=&quot;hljs-params&quot;&gt;(SSL *ssl);       &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h3_9&quot;&gt;3. SSL 和 TLS&lt;/h3&gt;
&lt;p&gt;  HTTPS 使用 SSL（Secure Socket Layer） 和 TLS（Transport LayerSecurity）这两个协议。 SSL 技术最初是由浏览器开发商网景通信公司率先倡导的，开发过 SSL3.0之前的版本。目前主导权已转移到 IETF（Internet Engineering Task Force，Internet 工程任务组）的手中。&lt;/p&gt;
&lt;p&gt;  IETF 以 SSL3.0 为基准，后又制定了 TLS1.0、TLS1.1 和 TLS1.2。TSL 是以SSL 为原型开发的协议，有时会统一称该协议为 SSL。当前主流的版本是SSL3.0 和 TLS1.0。&lt;/p&gt;
&lt;p&gt;  由于 SSL1.0 协议在设计之初被发现出了问题，就没有实际投入使用。SSL2.0 也被发现存在问题，所以很多浏览器直接废除了该协议版本。&lt;/p&gt;
&lt;h3 id=&quot;h3_10&quot;&gt;4. Nebula中的SSL通讯实现&lt;/h3&gt;
&lt;p&gt;  Nebula框架同时支持SSL服务端应用和SSL客户端应用，对openssl的初始化只需要初始化一次即可（SslInit()只需调用一次）。Nebula框架的SSL相关代码（包括客户端和服务端的实现）都封装在&lt;a href=&quot;https://github.com/Bwar/Nebula/blob/master/src/channel/SocketChannelSslImpl.hpp&quot;&gt;SocketChannelSslImpl&lt;/a&gt;这个类中。Nebula的SSL通信是基于异步非阻塞的socket通信，并且不使用openssl的BIO（因为没有必要，代码还更复杂了）。&lt;/p&gt;
&lt;p&gt;  SocketChannelSslImpl是&lt;a href=&quot;https://github.com/Bwar/Nebula/blob/master/src/channel/SocketChannelImpl.hpp&quot;&gt;SocketChannelImpl&lt;/a&gt;的派生类，在SocketChannelImpl常规TCP通信之上增加了SSL通信层，两个类的调用几乎没有差异。SocketChannelSslImpl类声明如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs C++&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;SocketChannelSslImpl : &lt;span class=&quot;hljs-keyword&quot;&gt;public SocketChannelImpl
{
&lt;span class=&quot;hljs-keyword&quot;&gt;public:
    SocketChannelSslImpl(SocketChannel* pSocketChannel, &lt;span class=&quot;hljs-built_in&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&amp;lt;NetLogger&amp;gt; pLogger, &lt;span class=&quot;hljs-keyword&quot;&gt;int iFd, uint32 ulSeq, ev_tstamp dKeepAlive = &lt;span class=&quot;hljs-number&quot;&gt;0.0);
    &lt;span class=&quot;hljs-keyword&quot;&gt;virtual ~SocketChannelSslImpl();

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslInit&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&amp;lt;NetLogger&amp;gt; pLogger);
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslServerCtxCreate&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&amp;lt;NetLogger&amp;gt; pLogger);
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslServerCertificate&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;shared_ptr&amp;lt;NetLogger&amp;gt; pLogger,
                &lt;span class=&quot;hljs-keyword&quot;&gt;const &lt;span class=&quot;hljs-built_in&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&amp;amp; strCertFile, &lt;span class=&quot;hljs-keyword&quot;&gt;const &lt;span class=&quot;hljs-built_in&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&amp;amp; strKeyFile);
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;SslFree&lt;span class=&quot;hljs-params&quot;&gt;();

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslClientCtxCreate&lt;span class=&quot;hljs-params&quot;&gt;();
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslCreateConnection&lt;span class=&quot;hljs-params&quot;&gt;();
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslHandshake&lt;span class=&quot;hljs-params&quot;&gt;();
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int &lt;span class=&quot;hljs-title&quot;&gt;SslShutdown&lt;span class=&quot;hljs-params&quot;&gt;();

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual &lt;span class=&quot;hljs-keyword&quot;&gt;bool &lt;span class=&quot;hljs-title&quot;&gt;Init&lt;span class=&quot;hljs-params&quot;&gt;(E_CODEC_TYPE eCodecType, &lt;span class=&quot;hljs-keyword&quot;&gt;bool bIsClient = &lt;span class=&quot;hljs-literal&quot;&gt;false) override;

    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  SocketChannelSslImpl类中带override关键字的方法都是覆盖基类SocketChannelImpl的同名方法，也是实现SSL通信与非SSL通信调用透明的关键。不带override关键字的方法都是SSL通信相关方法，这些方法里有openssl的函数调用。不带override的方法中有静态和非静态之分，静态方法在进程中只会被调用一次，与具体Channel对象无关。SocketChannel外部不需要调用非静态的ssl相关方法。&lt;/p&gt;
&lt;p&gt;  因为是非阻塞的socket，SSL_do_handshake()和SSL_write()、SSL_read()返回值并不完全能判断是否出错，还需要SSL_get_error()获取错误码。SSL_ERROR_WANT_READ和SSL_ERROR_WANT_WRITE都是正常的。&lt;/p&gt;
&lt;p&gt;  网上的大部分openssl例子程序是按顺序调用openssl函数简单实现同步ssl通信，在非阻塞IO应用中，ssl通信要复杂许多。SocketChannelSslImpl实现的是非阻塞的ssl通信，从该类的实现上看整个通信过程并非完全线性的。下面的SSL通信图更清晰地说明了Nebula框架中SSL通信是如何实现的：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;Nebula_ssl&quot; src=&quot;https://oscimg.oschina.net/oscnet/e6f58a56d4fbcf9dbc3c4a1d9c3fdbb970e.jpg&quot; alt=&quot;Nebula_ssl&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  SocketChannelSslImpl中的静态方法在进程生命期内只需调用一次，也可以理解成SSL_CTX_new()、SSL_CTX_free()等方法只需调用一次。更进一步理解SSL_CTX结构体在进程内只需要创建一次（在Nebula中分别为Server和Client各创建一个）就可以为所有SSL连接所用；当然，为每个SSL连接创建独立的SSL_CTX也没问题（Nebula 0.4中实测过为每个Client创建独立的SSL_CTX），但一般不这么做，因为这样会消耗更多的内存资源，并且效率也会更低。&lt;/p&gt;
&lt;p&gt;  建立SSL连接时，客户端调用SSL_connect()，服务端调用SSL_accept()，许多openssl的demo都是这么用的。Nebula中用的是SSL_do_handshake()，这个方法同时适用于客户端和服务端，在兼具client和server功能的服务更适合用SSL_do_handshake()。注意调用SSL_do_handshake()前，如果是client端需要先调用SSL_set_connect_state()，如果是server端则需要先调用SSL_set_accept_state()。非阻塞IO中，SSL_do_handshake()可能需要调用多次才能完成握手，具体调用时机需根据SSL_get_error()获取错误码SSL_ERROR_WANT_READ和SSL_ERROR_WANT_WRITE判断需监听读事件还是写事件，在对应事件触发时再次调用SSL_do_handshake()。详细实现请参考SocketChannelSslImpl的Send和Recv方法。&lt;/p&gt;
&lt;p&gt;  关闭SSL连接时先调用SSL_shutdown()正常关闭SSL层连接（非阻塞IO中SSL_shutdown()亦可能需要调用多次）再调用SSL_free()释放SSL连接资源，最后关闭socket连接。SSL_CTX无须释放。整个SSL通信顺利完成，Nebula 0.4在开多个终端用shell脚本死循环调用curl简单压测中SSL client和SSL server功能一切正常:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while :
&lt;span class=&quot;hljs-keyword&quot;&gt;do 
     curl -v -k -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type:application/json&quot; -X POST -d &lt;span class=&quot;hljs-string&quot;&gt;'{&quot;hello&quot;:&quot;nebula ssl test&quot;}' https://192.168.157.168:16003/test_ssl 
&lt;span class=&quot;hljs-keyword&quot;&gt;done
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  测试方法如下图：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;ssl_test&quot; src=&quot;https://oscimg.oschina.net/oscnet/2a0a60a927c7ca348df285e6299987aab10.jpg&quot; alt=&quot;ssl_test&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  查看资源使用情况，SSL Server端的内存使用一直在增长，疑似有内存泄漏，不过pmap -d查看某一项anon内存达到近18MB时不再增长，说明可能不是内存泄漏，只是部分内存被openssl当作cache使用了。这个问题网上没找到解决办法。从struct ssl_ctx_st结构体定义发现端倪，再从nginx源码中发现了SSL_CTX_remove_session()，于是在SSL_free()之前加上SSL_CTX_remove_session()。session复用可以提高SSL通信效率，不过Nebula暂时不需要。&lt;/p&gt;
&lt;p&gt;  这种测试方法把NebulaInterface作为SSL服务端，NebulaLogic作为SSL客户端，同时完成了Nebula框架SSL服务端和客户端功能测试，简单的压力测试。Nebula框架的SSL通信测试通过，也可以投入生产应用，在后续应用中肯定还会继续完善。openssl真的难用，难怪被吐槽那么多，或许不久之后的Nebula版本将用其他ssl库替换掉openssl。&lt;/p&gt;
&lt;h3 id=&quot;h3_11&quot;&gt;5. 结束&lt;/h3&gt;
&lt;p&gt;  加上SSL支持的Nebula框架测试通过，虽然不算太复杂，但过程还是蛮曲折，耗时也挺长。这里把Nebula使用openssl开发SSL通信分享出来，希望对准备使用openssl的开发者有用。如果觉得本文对你有用，别忘了到Nebula的&lt;a href=&quot;https://github.com/Bwar/Nebula&quot;&gt;Github&lt;/a&gt;或&lt;a href=&quot;https://gitee.com/Bwar/Nebula&quot;&gt;码云&lt;/a&gt;给个star，谢谢。&lt;/p&gt;
&lt;p&gt;&amp;lt;br/&amp;gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 13:58:00 +0000</pubDate>
<dc:creator>铁芒箕</dc:creator>
<og:description>HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。Nebula是一个为开发者提供一个快速开发高并</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bwar/p/9879893.html</dc:identifier>
</item>
<item>
<title>docker初体验，搭建自用的gitlab服务 - saucxs</title>
<link>http://www.cnblogs.com/chengxs/p/9879867.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengxs/p/9879867.html</guid>
<description>&lt;p&gt;一、前言&lt;/p&gt;
&lt;p&gt;git在如日中天的版本管理系统，现在如果不是工作在git版本管理系统下，几乎都不好意思给人打招呼。现在就有现成的互联网的git服务器提供给大家使用，例如号称程序的社交网络github。&lt;/p&gt;
&lt;p&gt;正好gitlab公司提供了gitlab社区版，gitlab安装方式又很多安装方式，最方便的使用docker方式安装，现在讲步骤记录下，希望对有需求的人有所帮助。&lt;/p&gt;

&lt;p&gt;二、docker安装&lt;/p&gt;
&lt;p&gt;首先是安装 docker 环境了。我是在 centos 7 的基础上安装的。根据&lt;span&gt;&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Finstallation%2Flinux%2Fdocker-ce%2Fcentos%2F&quot; target=&quot;_blank&quot;&gt;官网的指南&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、增加docker yum源&lt;/p&gt;
&lt;p&gt;新的docker yum源叫做docker-ce，如果第一次安装docker-ce需要设置docker-ce的yum源。用如下命令来增加docker-ce的yum源&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum-config-manager --enable docker-ce-edge
yum-config-manager --enable docker-ce-test&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29t_p10F0XMaXPQ3bHY4XfpA9k.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29opjxzURgmg49SHfeJHZNkXn7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29iZd6oaH1rOyR1f7xfTAmL1ix.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/295OqsIxNJVp-AiKZhcZP5gvfS.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、如果你之前安装过docker，删除旧版本的docker&lt;/p&gt;
&lt;p&gt;旧版本的 docker 的叫做 docker 或者 docker-engine，如果系统中已经安装旧版本，则需要删除。通过一下命令删除旧的 docker 版本。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;yum remove docker docker-common docker-selinux docker-engine&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;3、安装docker-ce&lt;/p&gt;
&lt;p&gt;首先我们检查一下所有有效的docker-ce的版本&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;yum list docker-ce --showduplicates | sort -r&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29rJoLTMU5ECr3OtfLe6Aot3OG.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们选择最新的额稳定版是18.06.1.ce。我们使用下面的命令安装该版本&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;yum install docker-ce-18.06.1.ce&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29D756w2mjkGvzOpWHnCOcB6Rc.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个安装时间比较长吧，静静等待，大约花费4min&lt;/p&gt;

&lt;p&gt;4、启动docker&lt;/p&gt;
&lt;p&gt;执行如下的命令启动 docker 的服务&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;systemctl start docker&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29j-zve62iL9z0A7wved-AW-FY.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行如下命令，查看docker信息&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;docker info&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29UmTQWd5CWjQ2OQxSK5ElB8Kj.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目前我没有修改docker配置，我觉得docker下载镜像速度还行，并没有网上说的很慢，暂时不修改运行目录和镜像仓库地址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;上述完成了docker安装。接下来安装gitlab&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;三、安装gitlab&lt;/p&gt;
&lt;p&gt;1、下载镜像&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;docker pull gitlab/gitlab-ce:latest&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29pRd2VO94EuBN7o6KYPPNHUBi.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;镜像有1g多，需要等待一段时间&lt;/p&gt;

&lt;p&gt;2、数据持久化保存&lt;/p&gt;
&lt;p&gt;因为docker容器的数据是不能持久化保存的。所以我们需要使用docker volume的方式将存储的数据映射到操作系统的目录中来。这样就算运行的容器奔溃了，我们从新启动一个新的容器。原来容器的数据还是不会丢失&lt;/p&gt;
&lt;p&gt;我们建立目录/home/databaken/gitlab来保存gitlab容器中的数据&lt;/p&gt;

&lt;p&gt;3、准备映射sshd&lt;/p&gt;
&lt;p&gt;在系统防火墙中打开HTTP和SSH访问，git是采用ssh协议来操作git仓库的，我们将主机的sshd的22端口映射到容器中去。将主机的sshd端口更改为15678.这里是centos7的更严格的安全机制，算是一个坑，按照下面步骤进行&lt;/p&gt;
&lt;p&gt;（1）编辑文件/etc/ssh/sshd_config，将其中的#port 22注释去掉，将数字22修改为15678&lt;/p&gt;
&lt;p&gt;（2）执行命令重启sshd服务&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;systemctl restart sshd&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29fATVh9N4KmZKrrdbox5urt1L.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）运行下面的命令是15678端口可以对外提供服务。否则无法远程的ssh登陆&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;semanage port &lt;span class=&quot;hljs-_&quot;&gt;-a -t ssh_port_t -p tcp 15678
firewall-cmd --permanent --add-port=15678/tcp
firewall-cmd --reload &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29lH_Xr6K64SAVN3Gv5OUognTY.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;告诉我firewall服务没有启动，使用下面命令启动防火墙命令&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;//运行防火墙服务
systemctl start firewalld.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29D0kvQsWUvoi2svHVfZ5IAM7X.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为之前乜有开启防火墙服务，这一启动，4个系统都无法访问，需要将80端口和443端口允许外网访问到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29jpJuHU8t6AvU8EgiZDocIy2H.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4、运行gitlab&lt;/p&gt;
&lt;p&gt;我把本地服务防火墙的22端口也放开&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mwcxs.top/static/upload/pics/2018/10/29ODrRsSmPpeAKbOIIImBz2Jhn.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后运行gitlab&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash hljs&quot;&gt;docker run \
    --publish 4433:443 --publish 9001:80 --publish 22:22 \
    --name gitlab \
    --volume /home/databaken/gitlabdata/config:/etc/gitlab \
    --volume /home/databaken/gitlabdata/logs:/var/&lt;span class=&quot;hljs-built_in&quot;&gt;log/gitlab \
    --volume /home/databaken/gitlabdata/data:/var/opt/gitlab \
    gitlab/gitlab-ce&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里把主机的 4433、9001、22 端口直接转发到容器，意思就是说：本地服务的4433端口，8080端口，22端口已经占用，访问本地服务的4433端口就是访问docker容器gitlab的443端口，访问本地服务的9001端口就是访问docker容器gitlab的80端口，访问本地服务的22端口就是访问docker容器gitlab的22端口。&lt;/p&gt;
&lt;p&gt;同时利用 --volume /home/databaken/gitlabdata/config:/etc/gitlab 、&lt;/p&gt;
&lt;p&gt; --volume /home/databaken/gitlabdata/logs:/var/log/gitlab 、 &lt;/p&gt;
&lt;p&gt;--volume /home/databaken/gitlabdata/data:/var/opt/gitlab &lt;/p&gt;
&lt;p&gt;这三个参数将 gitlab 的配置、数据和日志持久化到主机文件系统上来。&lt;/p&gt;

&lt;p&gt;按照道理，这个时候，你直接访问服务器的ip:9001，就可以访问到gitlab，糟糕的是自己服务器是1核1G运行内存，哈哈。。。。肯定是跑不起来gitlab，因为说gitlab要求最低是4G运行内存，虽然我尝试了swap，构建了2G的虚拟内存，但是gitlab跑起来还是，容器还是奔溃了。&lt;/p&gt;
&lt;p&gt;服务器运行内存太低，所以暂时不考虑跑gitlab。&lt;/p&gt;

&lt;p&gt;相应错误可以在&lt;a href=&quot;https://www.mwcxs.top/topic/item/45.html&quot; target=&quot;_blank&quot;&gt;https://www.mwcxs.top/topic/item/45.html&lt;/a&gt;查到。&lt;/p&gt;
&lt;p&gt; 与交流学习社区同步：&lt;a href=&quot;https://www.mwcxs.top/page/436.html&quot; target=&quot;_blank&quot;&gt;https://www.mwcxs.top/page/436.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 30 Oct 2018 13:54:00 +0000</pubDate>
<dc:creator>saucxs</dc:creator>
<og:description>一、前言 git在如日中天的版本管理系统，现在如果不是工作在git版本管理系统下，几乎都不好意思给人打招呼。现在就有现成的互联网的git服务器提供给大家使用，例如号称程序的社交网络github。 正好</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengxs/p/9879867.html</dc:identifier>
</item>
</channel>
</rss>