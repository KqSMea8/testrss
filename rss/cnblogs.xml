<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>拿来主义：layPage分页插件的使用 - 陈本布衣</title>
<link>http://www.cnblogs.com/chenbenbuyi/p/8836420.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenbenbuyi/p/8836420.html</guid>
<description>&lt;h3&gt;　　&lt;span&gt;布衣之谈&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;所谓插件，大概就是项目中可插可拔的比较小功能化的组件；这些功能组件若能力可及，自己也可以完成——也即自己造轮子，但翻看各种技术社区，相关领域的神人们&lt;span&gt;往往会&lt;/span&gt;有更好的实现方案贡献出来，这个时候你只需要满怀崇敬之心、感激之情，在遵循别人的使用约定的前提下拿过来应用在自己的项目中即可，省却了很多自造车轮的成本。就像苹果造机，虽名苹果，但其零部件全都是世界各地各个功能厂商共同贡献的结果。编程亦是此理，博主入编程的坑稍晚，但也越发的感觉到，在各种功能组件以及技术框架越来越普遍且适用的今天，正是依靠技术互助共享的精神力量，编程才变得越来越简单、快捷的。瞎哔哔了这么多，博主只想说，我虽没有造轮子的能力，但力所能及的，就是尽量将自己的技术积累以博客的形式记录、分享，自己成长为大菜鸟的同时，也期望能帮到更多的小菜鸟——造车轮子咱不会，但告诉别人如何使用，也算是功德一件。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;layPage分页插件使用&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　分页是项目中比价常见的功能，所以网上分页插件也很多，功能都大同小异，也都很好用，只是页面风格不同而已，在实际项目中根据自己项目的界面风格选择合适的一款就好。本篇主要介绍前端框架Layui中众多功能组件之一的分页组件——layPage的使用。废话已多说完毕，直接进入正题。页面插件的使用离不开js和css的支持，所以先去&lt;a href=&quot;http://www.layui.com/&quot; target=&quot;_blank&quot;&gt;官网下载&lt;/a&gt;压缩包，解压获取其中的js和css导入自己的前端页面。博主测试的页面因为同时引用了bootstrap的样式，和layui的样式有些冲突，会对插件的渲染效果有些微的影响。我们在使用第三方插件时，肯定先要根据官方文档结合&lt;a href=&quot;http://www.layui.com/demo/laypage.html&quot; target=&quot;_blank&quot;&gt;demo&lt;/a&gt;去学习,这些样例包含有各种样式可供选择，总有一款适合你——&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180414225255992-1764045773.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　结合官方的示例代码，我们就可以根据自己的界面效果来应用插件了。先上简单的前端页面——&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/layui/css/layui.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/bootstrap/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/jquery/jquery-1.12.4.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/layui/js/layui.all.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Themes/Default/js/test.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    .table th, .table td&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        text-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        vertical-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; middle!improtant&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    .container &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        width &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-green margin-bottom-40&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;layPage测试&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table table-bordered table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;序号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                                     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 表格数据加载 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;tab_list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 存放分页的容器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;layui&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;span&gt;上面的前端页面很简单，根据官方文档，我们需在合适的位置提供一个存放分页控件的 div 容器。然后是 js 页面——&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; $(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    initLayPage();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * 初始化layui分页
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initLayPage(pageConf) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;pageConf){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         pageConf =&lt;span&gt;{};
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         pageConf.pageSize = 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         pageConf.currentPage = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     $.post(&quot;/test/query&quot;, pageConf, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         layui.use(['laypage', 'layer'], &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; page =&lt;span&gt; layui.laypage;  
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            page.render({
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 elem: 'layui'&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                count: data.total,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                curr: pageConf.currentPage,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                limit: pageConf.pageSize,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 first:&quot;首页&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 last:&quot;尾页&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 layout: ['count', 'prev', 'page', 'next', 'limit', 'skip'&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 jump: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (obj, first) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;first) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         pageConf.currentPage =&lt;span&gt; obj.curr;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                         pageConf.pageSize =&lt;span&gt; obj.limit;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                        initLayPage(pageConf);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             fillTable(data.list,(pageConf.currentPage - 1) * pageConf.pageSize); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;页面填充&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充表格数据&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; fillTable(data,num) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; info = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     $.each(data, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (index, obj) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; id 很多时候并不是连续的，如果为了显示比较连续的记录数，可以这样根据当前页和每页条数动态的计算记录序号&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         index = index +num+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         info += '&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;' + index + '&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;' + obj.name + '&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;' + obj.age + '&amp;lt;/td&amp;gt;' +
&lt;span&gt;46&lt;/span&gt;             '&amp;lt;td style=&quot;text-align: center;&quot;&amp;gt;&amp;lt;button name=&quot;btnModify&quot; type=&quot;button&quot; class=&quot;btn btn-success btn-xs&quot; &amp;gt;修改&amp;lt;/button&amp;gt;' +
&lt;span&gt;47&lt;/span&gt;             '&amp;lt;button name=&quot;btnDelete&quot; type=&quot;button&quot; class=&quot;btn btn-danger btn-xs&quot; onclick=&quot;remove(' + obj.id + ')&quot;&amp;gt;删除&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     $(&quot;#tab_list&quot;&lt;span&gt;).html(info);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;对于上面的 js,咋一看有点懵，但我们看一下官方给出的基础参数选项就比较好理解了——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180414234002056-1632423083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;上面js 中要重点利用的就是切换分页的回调函数 jump ,该函数在分页或者每页显示条数发生改变时触发，函数返回两个参数：&lt;em&gt;obj&lt;/em&gt;（当前分页的所有选项值）、first（是否首次，一般用于初始加载的判断）。当分页发生改变时，可以根据obj获取到改变后的当前页或者每页显示条数，带着这些参数便可以继续发送ajax请求后台获取数据。对于一些溢出情况，layPage已经做了很好的封装，比如，每页显示20条时当前正在最后一页（5），当切换到每页40条的时候，总共只有3页了，那么layPage会自动计算并切换到当前的最后一页第3页，无需我们自己再去判断处理。下面就是博主做好的分页效果—&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180414234914135-1011124530.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;一切，就是这么简单，就像初恋般的感觉。。。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 15:56:00 +0000</pubDate>
<dc:creator>陈本布衣</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenbenbuyi/p/8836420.html</dc:identifier>
</item>
<item>
<title>【基础】在css中绘制三角形及相关应用 - 毛三十</title>
<link>http://www.cnblogs.com/ifat3/p/8837025.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ifat3/p/8837025.html</guid>
<description>&lt;h2 id=&quot;简言&quot;&gt;简言&lt;/h2&gt;
&lt;p&gt;本文简要阐述了用CSS边框的方法在页面上绘制三角形，包括几种典型的三角形绘制，还介绍了几个简单的应用场景。利用边框绘制三角形方法只是众多方案中的一种，大家根据项目实际，选用最适宜项目的方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/galdm3f2.jpg&quot; alt=&quot;CSS与三角形&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本原理&quot;&gt;1 基本原理&lt;/h2&gt;
&lt;p&gt;在CSS中，我们可以利用border-top、border-left、border-bottom、border-left四个属性来绘制三角形。实现的基本原理参见下面的演示代码及其运行结果。&lt;/p&gt;
&lt;h4 id=&quot;核心代码&quot;&gt;核心代码：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;运行结果&quot;&gt;运行结果：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/oujckrbe.jpg&quot; alt=&quot;边框基本原理&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/108&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从以上代码及运行结果不难想出绘制三角形的办法，我们只要将 &lt;code&gt;.box&lt;/code&gt; 的长度和宽度都设成0，就可以得到四个等腰三角形。再将不想保留的三角形边框颜色设置成透明色（即：&lt;code&gt;border-color : transparent&lt;/code&gt;）就可以隐藏掉不想保留的三角形。从而完成三角形的绘制。&lt;/p&gt;
&lt;h2 id=&quot;绘制三角形&quot;&gt;2 绘制三角形&lt;/h2&gt;
&lt;h3 id=&quot;等边三角形&quot;&gt;2.1 等边三角形&lt;/h3&gt;
&lt;p&gt;等边三角形（又称正三边形），为三边相等的三角形，其三个内角相等，均为60°，它是锐角三角形的一种。等边三角形也是最稳定的结构。&lt;/p&gt;
&lt;h4 id=&quot;尖角向上&quot;&gt;2.1.1 尖角向上：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-up&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/c4yb00g9.jpg&quot; alt=&quot;尖角向上等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/109&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;尖角向下&quot;&gt;2.1.2 尖角向下：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-down&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/y3ry0nms.jpg&quot; alt=&quot;尖角向下等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/110&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;尖角向左&quot;&gt;2.1.3 尖角向左：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-left&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/gwt7dtp0.jpg&quot; alt=&quot;尖角向左等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/111&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;尖角向右&quot;&gt;2.1.4 尖角向右：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/lj5ltbtm.jpg&quot; alt=&quot;尖角向右等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/112&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;等腰直角三角形&quot;&gt;2.2 等腰直角三角形&lt;/h3&gt;
&lt;p&gt;等腰直角三角形是特殊的等腰三角形，它的两底角相等，都是45°；它的两腰长度相等。&lt;/p&gt;
&lt;h4 id=&quot;左上直角&quot;&gt;2.2.1 左上直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-top-left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/bunrzsne.jpg&quot; alt=&quot;左上直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/113&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;右上直角&quot;&gt;2.2.2 右上直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-top-right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/c67pnnpj.jpg&quot; alt=&quot;右上直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/114&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;左下直角&quot;&gt;2.2.3 左下直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-bottom-left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/rkvltzdj.jpg&quot; alt=&quot;左下直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/115&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;右下直角&quot;&gt;2.2.4 右下直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-bottom-right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/jcsnzymg.jpg&quot; alt=&quot;右下直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/116&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关应用&quot;&gt;3 相关应用&lt;/h2&gt;
&lt;h3 id=&quot;弹出框popover组件&quot;&gt;3.1 弹出框(popover)组件&lt;/h3&gt;
&lt;p&gt;弹出框(popover)或提示框(tooltip)一般都会用到三角形，三角形明确并加强了指向作用。类似于Bootstrap的Popover和Tooltip组件都用到了边框三角形的实现方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/wzyi5whz.jpg&quot; alt=&quot;弹出框(popover)组件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/117&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述演示只是实现了顶部弹出框，其它方向弹出框参考上述实现方式即可。&lt;/p&gt;
&lt;h3 id=&quot;视频播放按钮&quot;&gt;3.2 视频播放按钮&lt;/h3&gt;
&lt;p&gt;视频播放按钮(Play button)可以采用边框三角形的实现方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/8ckjqjws.jpg&quot; alt=&quot;视频播放按钮组件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/118&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三角形的应用场景还有很多，比如下拉菜单(dropdown menu)中，或者是“顶”及“踩”按钮等。&lt;/p&gt;
&lt;p&gt;边框实现三角形只是众多方案之一，大家可以根据项目实际，选择小图标方案或选用SVG方案。&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 15:53:00 +0000</pubDate>
<dc:creator>毛三十</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ifat3/p/8837025.html</dc:identifier>
</item>
<item>
<title>关于jsp页面加载时报错500的问题 - 糖拌西红柿</title>
<link>http://www.cnblogs.com/TheGCC/p/8836997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TheGCC/p/8836997.html</guid>
<description>&lt;p&gt;先说一下，问题的发生，个人做了个小系统，成品以后运行了几次，没有问题，结果最后一次测试时，发现登陆页面报错了：&lt;/p&gt;
&lt;p&gt;    &lt;span&gt; &lt;span&gt;账号密码输入正确，经过后台登陆后，按理说是应该进入登陆成功后的jsp页面，然而结果却是：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201804/1368510-20180414233301808-85662811.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201804/1368510-20180414233311715-1440553911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;关于&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;报错，多是因为list的取值出问题，测试后发现我的登录后页面有段代码是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201804/1368510-20180414233529681-381600132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将&amp;lt;s:iterator&amp;gt;标签注释掉或者将里面的  begin  end 属性删掉，页面就能跳转成功！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;span&gt;在这里附上Strust2里的迭代标签  s:iterator  的使用方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          迭代标签&lt;/span&gt;：用于遍历集合(java.util.Collection)或者枚举值(java.util.Iterator)类型的对象,&lt;span&gt;&lt;span&gt;value属性&lt;/span&gt;&lt;/span&gt;表示集合或枚举对象,&lt;span&gt;&lt;span&gt;status属性&lt;/span&gt;&lt;/span&gt;表示当前循环的对象,在循环体内部可以引用该           对象的属性&lt;/p&gt;
&lt;p&gt;       &amp;lt;s:iterator value=&quot;userList&quot; status=&quot;user&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;         姓名：&amp;lt;s:property value=&quot;#user.userName&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;        年龄：&amp;lt;s:property value=&quot;#user.age&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;      &amp;lt;/s:iterator&amp;gt;&lt;/p&gt;
&lt;p&gt;               其中begin 和end 是用来控制数组中要迭代的个数，起始下标和结束下标。&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 15:52:00 +0000</pubDate>
<dc:creator>糖拌西红柿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TheGCC/p/8836997.html</dc:identifier>
</item>
<item>
<title>在CentOS 7+ 安装Kubernetes入门（单Master） - 编程玩家</title>
<link>http://www.cnblogs.com/Erik_Xu/p/8783789.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Erik_Xu/p/8783789.html</guid>
<description>&lt;p&gt;　　科学上网，科学上网，科学上网，重要的事情说三次。如果不会科学上网，这篇文章就没有看下去的意义。作为一个技术人员如果不愿意折腾，很难有所作为。作为一个单纯的技术人员，最好把心思放在技术上，做到真正的&lt;strong&gt;科学上网&lt;/strong&gt;。这里不会教如何科学上网，请大家自行摸索。&lt;/p&gt;


&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;配置&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;master&lt;/td&gt;
&lt;td&gt;CentOS 7&lt;/td&gt;
&lt;td&gt;4核2G内存&lt;/td&gt;
&lt;td&gt;192.168.132.132&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;node1&lt;/td&gt;
&lt;td&gt;CentOS 7&lt;/td&gt;
&lt;td&gt;2核2G内存&lt;/td&gt;
&lt;td&gt;192.168.132.130&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;




&lt;p&gt;1. 修改主机名为master。&lt;/p&gt;
&lt;p&gt;hostnamectl set-hostname master&lt;/p&gt;

&lt;p&gt;2. 关闭防火墙和selinux&lt;/p&gt;
&lt;p&gt;systemctl stop firewalld&lt;/p&gt;
&lt;p&gt;systemctl disable firewalld&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180410222539165-386012509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;vi /etc/selinux/config，将SELINUX=enforcing改为SELINUX=disabled，重启机器&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180410222616053-1743034981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.安装docker&lt;/p&gt;
&lt;p&gt;yum install -y docker&lt;/p&gt;
&lt;p&gt;systemctl enable docker &amp;amp;&amp;amp; systemctl start docker&lt;/p&gt;

&lt;p&gt;docker info查看docker信息，记录docker的版本，以及cgroup信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180410222844903-1887243170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Docker从1.13版本开始调整了默认的防火墙规则，禁用了iptables filter表中FOWARD链，这样会引起Kubernetes集群中跨Node的Pod无法通信，需要执行以下指令：&lt;/p&gt;
&lt;p&gt;systemctl stop docker &lt;/p&gt;
&lt;p&gt;iptables -P FORWARD ACCEPT&lt;/p&gt;
&lt;p&gt;systemctl start docker &lt;/p&gt;

&lt;p&gt;4. 设置net.bridge.bridge-nf-call-iptables&lt;/p&gt;
&lt;p&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/k8s.conf&lt;br/&gt;net.bridge.bridge-nf-call-ip6tables = 1&lt;br/&gt;net.bridge.bridge-nf-call-iptables = 1&lt;br/&gt;EOF&lt;br/&gt;sysctl --system&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180410223321164-151022626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://kubernetes.io/docs/setup/independent/install-kubeadm/&quot; target=&quot;_blank&quot;&gt;https://kubernetes.io/docs/setup/independent/install-kubeadm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. 挂代理（科学上网）&lt;/p&gt;
&lt;p&gt;export http_proxy=http://127.0.0.1:8118&lt;br/&gt;export https_proxy=http://127.0.0.1:8118&lt;br/&gt;export no_proxy=&quot;localhost, 192.168.132.132&quot;    #192.168.132.132为master主机IP&lt;/p&gt;

&lt;p&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysconfig/docker&lt;br/&gt;HTTP_PROXY='http://127.0.0.1:8118'&lt;br/&gt;HTTPS_PROXY='http://127.0.0.1:8118'&lt;br/&gt;EOF&lt;/p&gt;
&lt;p&gt;systemctl restart docker &lt;/p&gt;

&lt;p&gt;6. 安装kubeadm, kubelet, kubectl&lt;/p&gt;
&lt;p&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo&lt;br/&gt;[kubernetes]&lt;br/&gt;name=Kubernetes&lt;br/&gt;baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch&lt;br/&gt;enabled=1&lt;br/&gt;gpgcheck=1&lt;br/&gt;repo_gpgcheck=1&lt;br/&gt;gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg&lt;br/&gt;EOF&lt;/p&gt;

&lt;p&gt;yum install -y kubelet kubeadm kubectl&lt;br/&gt;systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet&lt;/p&gt;

&lt;p&gt; 7. 配置cgroup，使/etc/systemd/system/kubelet.service.d/10-kubeadm.conf中的cgroup的值和docker info中的cgroup一致。然后重启kubelet：&lt;/p&gt;
&lt;p&gt;systemctl daemon-reload&lt;br/&gt;systemctl restart kubelet&lt;/p&gt;

&lt;p&gt;8.更新yum获取最新的kubeadm&lt;/p&gt;
&lt;p&gt;yum update&lt;/p&gt;

&lt;p&gt;9. 关闭系统的Swap：&lt;/p&gt;
&lt;p&gt;swapoff -a&lt;/p&gt;

&lt;p&gt;10. kubeadm init，这里选用Calico的网络，因此设置--pod-network-cidr=192.168.0.0/16。&lt;/p&gt;
&lt;p&gt;kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=192.168.132.132&lt;/p&gt;

&lt;p&gt;漫长等待，下载镜像会比较耗时，如果长时间没反应，而且没有下载镜像的话，可以kubeadm reset，重启kubelet，再kubeadm init 。直到成功，看到以下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180411004019345-159422937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;记录下加入节点的指令：kubeadm join ...&lt;/p&gt;

&lt;p&gt;11. 设置kubelet config&lt;/p&gt;
&lt;p&gt;mkdir -p $HOME/.kube&lt;br/&gt;cp -i /etc/kubernetes/admin.conf $HOME/.kube/config&lt;br/&gt;chown $(id -u):$(id -g) $HOME/.kube/config&lt;/p&gt;

&lt;p&gt;export KUBECONFIG=/etc/kubernetes/admin.conf&lt;/p&gt;

&lt;p&gt;12. 安装网络，这里使用Calico。&lt;/p&gt;
&lt;p&gt;kubectl apply -f https://docs.projectcalico.org/v3.0/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180411202936445-399094582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;按照Master安装的1-9步骤进行安装。其中调整如下：&lt;/p&gt;
&lt;p&gt;1. 修改主机名为nodex（这里是node1）。&lt;/p&gt;
&lt;p&gt;hostnamectl set-hostname node1&lt;/p&gt;

&lt;p&gt;5. 挂代理（科学上网）&lt;/p&gt;
&lt;p&gt;export http_proxy=http://127.0.0.1:8118 &lt;br/&gt;export https_proxy=http://127.0.0.1:8118&lt;br/&gt;export no_proxy=&quot;localhost, 192.168.132.132, 192.168.132.130&quot;    #192.168.132.132为master主机IP，192.168.132.130为node1主机IP&lt;/p&gt;

&lt;p&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysconfig/docker&lt;br/&gt;HTTP_PROXY='http://127.0.0.1:8118'&lt;br/&gt;HTTPS_PROXY='http://127.0.0.1:8118'&lt;br/&gt;EOF&lt;/p&gt;
&lt;p&gt;systemctl restart docker &lt;/p&gt;

&lt;p&gt;10. 执行安装Master时输出的kubeadm join ...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180414222109247-948177202.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在Master上执行kubectl get nodes查看添加结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180414225555764-2039802599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;11. 给node打标签（可选）&lt;/p&gt;
&lt;p&gt;kubectl label node node1 kubernetes.io/role=node&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/182190/201804/182190-20180414230151554-1144401006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;补充说明：拉取镜像有时会比较耗时，请耐心等待，相同的镜像可以考虑从master拷贝。&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/independent/install-kubeadm/&quot; target=&quot;_blank&quot;&gt;https://kubernetes.io/docs/setup/independent/install-kubeadm/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/&quot; target=&quot;_blank&quot;&gt;https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brickyang.github.io/2017/01/14/CentOS-7-%E5%AE%89%E8%A3%85-Shadowsocks-%E5%AE%A2%E6%88%B7%E7%AB%AF/&quot; target=&quot;_blank&quot;&gt;https://brickyang.github.io/2017/01/14/CentOS-7-%E5%AE%89%E8%A3%85-Shadowsocks-%E5%AE%A2%E6%88%B7%E7%AB%AF/&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 15:05:00 +0000</pubDate>
<dc:creator>编程玩家</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Erik_Xu/p/8783789.html</dc:identifier>
</item>
<item>
<title>Spring Cloud学习笔记-007 - SKYER5217</title>
<link>http://www.cnblogs.com/skyer5217/p/8830096.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyer5217/p/8830096.html</guid>
<description>&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;声明式服务调用：Spring Cloud Feign&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　Feign基于Netflix Feign实现，整合了Spring Cloud Ribbon和Spring Cloud Hystrix，除了提供这两者的强大功能之外，它还提供了一种声明式的Web服务客户端定义方式。&lt;/p&gt;
&lt;p&gt;　　在使用Spring Cloud Ribbon时，通常都会利用它对RestTemplate的请求拦截来实现对依赖服务的接口调用，而RestTemplate已经实现了对HTTP请求的封装处理，形成了一套模板化的调用方法。在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口被多处调用，所以通常都会针对各个微服务自行封装一些客户端类来包装这些依赖服务的调用。Spring Cloud Feign在RestTemplate的基础上做了进一步的封装，由它来帮助我们定义和实现依赖服务接口的定义。在Spring Cloud Feign的实现下，我们只需创建一个接口并用注解的方式来配置它，即可完成对服务提供方的接口绑定，简化了在使用Spring Cloud Ribbon时自行封装服务调用客户端的开发量。&lt;/p&gt;
&lt;p&gt;1. 启动注册中心和demo-member实例，创建demo-customer-feign工程，骨架选择quickstart。&lt;/p&gt;
&lt;p&gt;2. 加入相关依赖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084215093-232041782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 编写启动类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084225421-1481568274.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 定义MemberService接口，通过@FeignClient注解指定服务名来绑定服务（注：这里的服务名不区分大小写），然后再使用Spring MVC的注解来绑定具体该服务提供的REST接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084236471-89871061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5. 创建MemberController来实现对Feign客户端的调用。使用@Autowired直接注入上面定义的MemberService实例，并在getMember方法中调用这个绑定了member-service服务接口的客户端来向该服务发起/member接口的调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084250700-26502544.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6. 在src/main/resources目录下创建application.yml文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084259947-912406704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7. 启动服务进行验证：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084309688-697732153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;参数绑定&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　现实系统中的各种业务接口要复杂很多，HTTP的各个位置会传入各种不同类型的参数，并且在返回请求响应的时候也可能是一个复杂的对象结构。&lt;/p&gt;
&lt;p&gt;1. 首先扩展一下服务提供方demo-member。增加下面这些接口定义，其中包含带有Request参数的请求、带有Header信息的请求、带有RequestBody的请求以及请求响应体重是一个对象的请求（注：User对象自定义，只有两个字段，String name和Integer age，此外，User中必须提供默认的构造方法，不然Spring Cloud Feign根据JSON字符串转换User对象时会抛出异常）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084348855-503801833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 然后在demo-customer-feign应用中实现上述新增的请求的绑定：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先在demo-customer-feign中创建与上述一样的User类。&lt;/li&gt;
&lt;li&gt;然后，在MemberService接口中增加对上述三个新增接口的绑定声明：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084428546-2122994976.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 最后，在MemberController中新增一个/getMember2接口，来对新增的声明进行调用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084445141-2111406834.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 启动项目，测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1062633/201804/1062633-20180414084457890-888123644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 14:49:00 +0000</pubDate>
<dc:creator>SKYER5217</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyer5217/p/8830096.html</dc:identifier>
</item>
<item>
<title>在Windows环境中使用Nginx, Consul, Consul Template搭建负载均衡和服务发现服务 - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/8835867.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/8835867.html</guid>
<description>&lt;h2 id=&quot;搭建负载均衡和服务发现服务的目的&quot;&gt;搭建负载均衡和服务发现服务的目的&lt;/h2&gt;
&lt;p&gt;随着网站业务的不断提升，单个服务器的性能越来越难满足客户的业务需求，所以很多情况下，需要使用多服务器实例和负载均衡器来满足业务需要。&lt;/p&gt;
&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;
&lt;h3 id=&quot;什么是nginx&quot;&gt;什么是Nginx&lt;/h3&gt;
&lt;p&gt;Nginx一款高性能的Web服务器，它既可以单独使用，也可以作为负载均衡器与其他Web服务器组合使用。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414214942846-1585132320.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;nginx安装&quot;&gt;Nginx安装&lt;/h3&gt;
&lt;p&gt;我们可用从Nginx官网上（&lt;a href=&quot;http://nginx.org/%EF%BC%89%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84Windows%E7%89%88%E6%9C%AC%E5%8E%8B%E7%BC%A9%E5%8C%85&quot; class=&quot;uri&quot;&gt;http://nginx.org/）下载最新的Windows版本压缩包&lt;/a&gt;。&lt;br/&gt;压缩包解压之后目录结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414215035112-724201581.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;nginx的配置&quot;&gt;Nginx的配置&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;events {
    worker_connections 1024;
}


http {
    upstream backend
    {
        server 127.0.0.1:91 weight=1;
        server 127.0.0.1:92 weight=1;
    }
    server 
    {
        location / {
            proxy_pass http://backend;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中upstream部分定义了对于HTTP请求的负载均衡。 当用户发送请求到http://backend的时候，Nginx会将这个请求转发到指定服务器IP列表中的一个。配置中的weight字段设置了指定服务器IP的权重，权重越高，转发的可能性越高。&lt;/p&gt;
&lt;h3 id=&quot;常见问题&quot;&gt;常见问题&lt;/h3&gt;
&lt;p&gt;Nginx默认会占用80端口，这个和IIS有冲突, 所以需要在nginx.conf中修改Nginx的默认端口&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;events {
    worker_connections 1024;
}


http {
    upstream backend
    {
        server 127.0.0.1:92 weight=1;
        server 127.0.0.1:93 weight=1;
    }
    server 
    {
        listen 81;
        server_name localhost;

        location / {
            proxy_pass http://backend;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;实例&quot;&gt;实例&lt;/h3&gt;
&lt;p&gt;当前网站有2个实例部署在IIS中，siteA IP 127.0.0.1:92, siteB IP 127.0.0.1:93。&lt;/p&gt;
&lt;p&gt;siteA和siteB都只有一个index.html页面。&lt;br/&gt;代码如下:&lt;/p&gt;
&lt;p&gt;siteA&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;title&amp;gt;Nginx Sample&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;This is site A&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;siteB&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;title&amp;gt;Nginx Sample&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;This is site B&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Nginx服务器使用81端口。 我们希望实现的效果是当用户访问http://127.0.0.1:81时，Nginx随机将请求转发到http://127.0.0.1:92或者http://127.0.0.1:93上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414220944136-1208337476.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;siteA网站的index.html页效果如下&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414221017012-2017599919.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;siteB网站的index.html页效果如下&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414221033396-1892501824.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实现步骤&lt;/p&gt;
&lt;p&gt;a. 首先我们修改Nginx的配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;events {
    worker_connections 1024;
}


http {
    upstream 127.0.0.1
    {
        server 127.0.0.1:91 weight=1;
        server 127.0.0.1:92 weight=1;
    }
    server 
    {
        listen 81;
        server_name localhost;

        location / {
            proxy_pass http://127.0.0.1;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;b. 在命令行启动NginX&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414221227920-145027885.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;c. 打开浏览器，输入http://127.0.0.1:81, 反复按F5刷新， 网站内容在siteA和siteB之间切换，这说明负载均衡已经成功启用。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414221246426-1561870559.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;consul&quot;&gt;Consul&lt;/h2&gt;
&lt;h3 id=&quot;什么是consul&quot;&gt;什么是Consul&lt;/h3&gt;
&lt;p&gt;Consul是一款用高性能服务注册/服务健康检查组件&lt;/p&gt;
&lt;h3 id=&quot;consul安装&quot;&gt;Consul安装&lt;/h3&gt;
&lt;p&gt;我们可以从官网(&lt;a href=&quot;https://www.consul.io/downloads.html&quot; class=&quot;uri&quot;&gt;https://www.consul.io/downloads.html&lt;/a&gt;) 中对应版本的32位或64位程序。下载之后就是一个可执行文件consul.exe&lt;/p&gt;
&lt;h3 id=&quot;如何启动consul&quot;&gt;如何启动Consul&lt;/h3&gt;
&lt;p&gt;使用命令consul agent -dev, consul就会已开发模式启动（&lt;strong&gt;开发模式不会启用持久化，程序关闭后所有配置会丢失&lt;/strong&gt;）&lt;/p&gt;
&lt;h3 id=&quot;consul服务后台&quot;&gt;Consul服务后台&lt;/h3&gt;
&lt;p&gt;Consul服务启动之后，我们可以访问，&lt;a href=&quot;http://localhost:8500&quot; class=&quot;uri&quot;&gt;http://localhost:8500&lt;/a&gt; 来访问Consul的管理后台，界面如下。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414221845184-1028038944.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这个管理后台中可以查看Consul注册的所有服务和所有主机节点。&lt;/p&gt;
&lt;h3 id=&quot;注册服务&quot;&gt;注册服务&lt;/h3&gt;
&lt;p&gt;Consul服务启动之后，我们可以调用一些相应的Api来注册服务(相关Api列表 &lt;a href=&quot;https://www.consul.io/api/index.html&quot; class=&quot;uri&quot;&gt;https://www.consul.io/api/index.html&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id=&quot;继续我们的实例&quot;&gt;继续我们的实例&lt;/h3&gt;
&lt;p&gt;现在我们尝试将之前的siteA, siteB注册到Consul中。&lt;/p&gt;
&lt;p&gt;a. 首先这里我们去下载一个Curl程序（&lt;a href=&quot;https://curl.haxx.se/&quot; class=&quot;uri&quot;&gt;https://curl.haxx.se/&lt;/a&gt;） 来调用Api(这里可以用POSTMAN代替)&lt;/p&gt;
&lt;p&gt;b. 创建2个json文件siteA.json, siteB.json。其内容如下&lt;/p&gt;
&lt;p&gt;siteA.json&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    &quot;ID&quot;:&quot;webA&quot;,
    &quot;Name&quot;:&quot;web&quot;,
    &quot;Tags&quot;:[],
    &quot;Address&quot;:&quot;127.0.0.1&quot;,
    &quot;Port&quot;:92,
    &quot;EnableTagOverride&quot;:false
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;siteB.json&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    &quot;ID&quot;:&quot;webB&quot;,
    &quot;Name&quot;:&quot;web&quot;,
    &quot;Tags&quot;:[],
    &quot;Address&quot;:&quot;127.0.0.1&quot;,
    &quot;Port&quot;:93,
    &quot;EnableTagOverride&quot;:false
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的Name就是服务名称，ID就是该服务的一个实例ID。&lt;/p&gt;
&lt;p&gt;c. 使用curl调用注册服务Api，将siteA和siteB注册到Consul中&lt;br/&gt;&lt;code&gt;curl --request PUT --data @siteA.json http://localhost:8500/v1/agent/service/register&lt;/code&gt;&lt;br/&gt;&lt;code&gt;curl --request PUT --data @siteB.json http://localhost:8500/v1/agent/service/register&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;d. 回到Consul管理页面，我们会发现服务列表中会出现一个名为web的服务，这个服务有2个实例&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414222227604-1251387678.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414222237940-711669521.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果看到以上结果，就说明2个Web服务实例注册成功了。&lt;/p&gt;
&lt;h3 id=&quot;添加服务健康检查&quot;&gt;添加服务健康检查&lt;/h3&gt;
&lt;p&gt;将服务注册到Consul之后，得到的第一个好处就是可以借助Consul对每个服务实例进行健康检查。&lt;/p&gt;
&lt;h3 id=&quot;继续修改我们的实例&quot;&gt;继续修改我们的实例&lt;/h3&gt;
&lt;p&gt;a. 关闭之前打开的Consul服务，新开一个命令行窗口，使用consul agent -dev重新开启一个新的Consul服务&lt;/p&gt;
&lt;p&gt;b. 在siteA和siteB网站目录中，分别添加一个healthcheck.html文件，其内容如下&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;title&amp;gt;Nginx Sample&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;This is health check page&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;c. 修改之前的siteA.json和siteB.json&lt;br/&gt;siteA.json&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    &quot;ID&quot;:&quot;webA&quot;,
    &quot;Name&quot;:&quot;web&quot;,
    &quot;Tags&quot;:[],
    &quot;Address&quot;:&quot;127.0.0.1&quot;,
    &quot;Port&quot;:92,
    &quot;Checks&quot;:[{
        &quot;http&quot;:&quot;http://127.0.0.1:92/healthcheck.html&quot;,
        &quot;interval&quot;:&quot;5s&quot;
    }],
    &quot;EnableTagOverride&quot;:false
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;siteB.json&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    &quot;ID&quot;:&quot;webB&quot;,
   &quot;Name&quot;:&quot;web&quot;,
    &quot;Tags&quot;:[],
    &quot;Address&quot;:&quot;127.0.0.1&quot;,
    &quot;Port&quot;:93,
    &quot;Checks&quot;:[{
        &quot;http&quot;:&quot;http://127.0.0.1:93/healthcheck.html&quot;,
        &quot;interval&quot;:&quot;5s&quot;
    }],
    &quot;EnableTagOverride&quot;:false
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;d. 重新使用curl调用注册服务Api, 将siteA和siteB注册到Consul中&lt;/p&gt;
&lt;p&gt;e. 打开siteA目录，将healthcheck.html改名为healthcheck1.html（这个操作相当于模拟siteA所在的服务器崩溃, consul请求不到healthcheck.html文件了）&lt;/p&gt;
&lt;p&gt;f. 回到Consul管理界面，我们看一下结果，它会显示webA检查失败&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414222735648-762322917.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;g. 将healthcheck1.html改名会healthcheck.html, 等待5秒后，返回consul界面中，webA已经变回检测通过状态。&lt;/p&gt;
&lt;h2 id=&quot;consul-template&quot;&gt;Consul Template&lt;/h2&gt;
&lt;h3 id=&quot;什么是consul-template&quot;&gt;什么是Consul Template&lt;/h3&gt;
&lt;p&gt;Consul Template是Consul的一个扩展组件，可以读取Consul中的服务配置，根据指定模板生成不同的配置文件。&lt;/p&gt;
&lt;p&gt;所以这里我们就可以组合使用Consul, Consul Template来动态生成Nginx的配置文件, 并自动重启Nginx。&lt;/p&gt;
&lt;h3 id=&quot;安装consul-template&quot;&gt;安装Consul Template&lt;/h3&gt;
&lt;p&gt;我们可以从官网（&lt;a href=&quot;https://releases.hashicorp.com/consul-template%EF%BC%89%E4%B8%AD%E4%B8%8B%E8%BD%BDconsul-template.exe&quot; class=&quot;uri&quot;&gt;https://releases.hashicorp.com/consul-template）中下载consul-template.exe&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动consul-template&quot;&gt;启动Consul Template&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;consul-template -consul-addr 127.0.0.1:8500 -template &quot;./2.tpl:./conf/nginx.conf:nginx -s reload&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里&lt;code&gt;-consul-addr&lt;/code&gt;参数是指定consul服务的地址, &lt;code&gt;-template&lt;/code&gt;是指定consul template使用的模板，生成的新文件地址，以及生成新文件之后的执行的命令。&lt;/p&gt;
&lt;h3 id=&quot;继续我们的案例&quot;&gt;继续我们的案例&lt;/h3&gt;
&lt;p&gt;现在我们添加一个新的siteC, ip为127.0.0.1:94, siteC中也只有index.html和healthcheck.html2个文件&lt;/p&gt;
&lt;p&gt;a. 创建2.tpl, 文件内容如下, 这里使用的是consul-template的模板语法（相应语法介绍可以查看https://github.com/hashicorp/consul-template）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;events {
    worker_connections 1024;
}


http {
   upstream 127.0.0.1{
        {{ range service &quot;web&quot; }}
    server {{ .Address }}:{{ .Port }} weight=1;{{ end }} 
    }
    server {
        listen       81;
        server_name  localhost;


        location / {
           proxy_pass http://127.0.0.1;
        }

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;b. 使用命令&lt;code&gt;consul-template -consul-addr 127.0.0.1:8500 -template &quot;2.tpl:conf/nginx.conf:nginx -s reload&quot;&lt;/code&gt; 启动consul-template&lt;/p&gt;
&lt;p&gt;c. 创建siteC.json, 使用curl将siteC注册到consul中, siteC.json内容如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    &quot;ID&quot;:&quot;webC&quot;,
    &quot;Name&quot;:&quot;web&quot;,
    &quot;Tags&quot;:[],
    &quot;Address&quot;:&quot;127.0.0.1&quot;,
    &quot;Port&quot;:94,
    &quot;Checks&quot;:[{
        &quot;http&quot;:&quot;http://127.0.0.1:94/healthcheck.html&quot;,
        &quot;interval&quot;:&quot;5s&quot;
    }],
    &quot;EnableTagOverride&quot;:false
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;d. 打开浏览器，输入http://localhost:81, 反复按F5刷新，你会发现siteC已经加入到了Nginx负载均衡配置中。d&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414223157442-1873910755.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;e. 然后我们进行一个测试，我们将siteA的healthcheck.html重命名为healthcheck1.html&lt;/p&gt;
&lt;p&gt;f. 回到刚才页面中继续按F5刷新，我们会发现现在只显示siteB和siteC的内容了，这是因为siteA已经被consul认定为不健康的服务，所以consul-template重新生成Nginx的配置文件，将siteA中配置文件中抹除，并重新启动了Nginx。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/65831/201804/65831-20180414223222806-2097252779.gif&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 14:38:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/8835867.html</dc:identifier>
</item>
<item>
<title>Linux 文件读写操作与磁盘挂载 - tp_16b</title>
<link>http://www.cnblogs.com/tp-16b/p/8810613.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tp-16b/p/8810613.html</guid>
<description>&lt;h3&gt;&lt;span&gt;文件读写&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;【&lt;span&gt;&lt;strong&gt;文件描述符&lt;/strong&gt;&lt;/span&gt;】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       Linux下，通常通过open打开一个文件，它然后返回给我们一个整数，通过这个整数便可以操作文件，这个整数我们称文件描述符（fd）。对应被打开的文件，它也是一种系统资源，那么fd打的能打开多少个文件呢？可以通过这两个命令查看&lt;/p&gt;
&lt;p&gt;        ulimit –n 　　　　//查看系统打开文件的数据&lt;/p&gt;
&lt;p&gt;        ulimit –n  数值   　//将打开文件修改为数值大小。&lt;/p&gt;
&lt;p&gt;什么决定系统到底能打开多少文件？&lt;/p&gt;
&lt;p&gt;      是一个叫&lt;strong&gt;file-max的配置文件&lt;/strong&gt;决定的。可以通过 &lt;strong&gt;cat  / proc/sys/fs/file_amx&lt;/strong&gt;  查看文件打开数目的最大值 （1G大小相当于可打开10万个文件）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;【open函数】&lt;/strong&gt;&lt;/span&gt;有两种&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;span&gt;&lt;strong&gt;①&lt;/strong&gt;int&lt;/span&gt; open(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* pathname , &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开文件名&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; flag)&lt;span&gt;&lt;strong&gt;&lt;span&gt; O_RDONLY&lt;/span&gt;&lt;/strong&gt;   //只读&lt;/span&gt;
           &lt;strong&gt;   O_WRONLY&lt;/strong&gt;   &lt;span&gt;//只写&lt;/span&gt;
&lt;span&gt;&lt;strong&gt;              O_RDWR&lt;/strong&gt;   &lt;span&gt;  //读写&lt;/span&gt;
              O_CREAT    &lt;span&gt;//打开的同时创建（如果文件存在就不创建）&lt;/span&gt;
              O_TRUNC    &lt;span&gt;//打开时清除文件内容&lt;br/&gt;　　　　　　　　&lt;span&gt; O_EXCL&lt;/span&gt;     //若O_CRETE和O_EXCL被设置且文件存在，open调用失败&lt;br/&gt;　　　　　　　　 &lt;span&gt;O_NDELAY&lt;/span&gt;   //延迟读写标记&lt;/span&gt;&lt;/span&gt;&lt;span&gt;
&lt;strong&gt;&lt;span&gt;②&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; open(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* pathname, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
               &lt;span&gt;int&lt;/span&gt; flags,       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 与前面相同&lt;/span&gt;
            mode_t mode);       &lt;strong&gt;&lt;span&gt;//文件存取&lt;/span&gt;&lt;/strong&gt;&lt;span readability=&quot;5&quot;&gt;&lt;strong&gt;权限标志&lt;/strong&gt; 如 666；&lt;p&gt;&lt;span&gt;注意：参数flag必须在O_RDONLY，O_WRONLY,O_RDWR中&lt;strong&gt;有且只能选取一个&lt;/strong&gt;，然后用&quot;|&quot;符合于其他标准组合（相当于或起来）。函数调用成功时返回打开的文件描述符，失败返回-1.&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;文件描述符分配规则：从小到大找到第一个没有被&lt;span&gt;分配&lt;/span&gt;使用的文件描述符。&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;查看该进程文件描述符： &lt;/span&gt;&lt;/span&gt;/proc/pid/&lt;span&gt;fd   （pid 当前进程标识符）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;【系统IO：read  write】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ssize_t int  =  size_t unsigned int&lt;/span&gt;
size_t write(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fd ,
        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;* buf,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;想写入的数据位置&lt;/span&gt;
        size_t len)         &lt;span&gt;//要写入&lt;/span&gt;&lt;span&gt;数据大小&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;返回实际写入的字节数，在合适的时机将数据从内核区写入磁盘&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
ssize_t read(&lt;span&gt;int&lt;/span&gt; fd,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;open打开的文件描述符&lt;/span&gt;
        &lt;span&gt;void&lt;/span&gt;* buf,      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户准备的缓存区&lt;/span&gt;
        size_t count)   &lt;span&gt;//&lt;/span&gt;&lt;span readability=&quot;2&quot;&gt;缓存区大小&lt;p&gt;&lt;span&gt;返回读取的字节数，（如果返回值为0，表示读取结束），顺序读写文件&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; read/write函数调用不仅可以用于普通文件，还适用于管道、流设备和设备文件。多个程序同时读写一份文件，会产生竞争问题，若希望按预定次序进行读写，则应使用文件锁。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定位文件的当前读写位置：off_t lseek(int fd, off_t offset, int whence)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
off_t lseek(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fd,
        off_t offset, 　　 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;偏移量&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; whence)   　  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;基准位置   有如下3个基准：&lt;/span&gt;
&lt;span&gt;                        　 SEEK_SET
                        　 SEEK_CUR
                      　　 SEEK_END
函数返回值：新定位的读写位置，失败返回-1.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413231137379-174996223.png&quot; alt=&quot;&quot; width=&quot;407&quot; height=&quot;90&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作用&lt;/strong&gt;：可以通过它来求得文件大小&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先写入一个文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0d0c4757-60e2-4997-81aa-2316580c6801')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_0d0c4757-60e2-4997-81aa-2316580c6801&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0d0c4757-60e2-4997-81aa-2316580c6801&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0d0c4757-60e2-4997-81aa-2316580c6801',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0d0c4757-60e2-4997-81aa-2316580c6801&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;stdlib.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;sys/types.h&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;unistd.h&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;sys/stat.h&amp;gt;
&lt;span&gt; 6&lt;/span&gt; #include &amp;lt;fcntl.h&amp;gt;  
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()  
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{  
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; file_size = &lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; fd=open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, O_RDWR);  
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {   
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         perror(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;open test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         exit(-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }   
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     lseek(fd, file_size-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, SEEK_END);  
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     write(fd,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    close(fd);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;lseek创建一文件&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;结果：得到了1M字节的.txt文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
tp@tp:~/Linux/&lt;span&gt;day3$ vim test.txt 
tp@tp:&lt;/span&gt;~/Linux/day3$ ls -&lt;span&gt;lh
total 24K
&lt;/span&gt;-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp  &lt;span&gt;479&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.cpp
&lt;/span&gt;-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp  &lt;span&gt;100&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt;&lt;span&gt; abc.txt
&lt;/span&gt;-rwxrwxr-x &lt;span&gt;1&lt;/span&gt; tp tp &lt;span&gt;8&lt;/span&gt;.7K Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt; a.&lt;span&gt;out&lt;/span&gt;
-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp  &lt;span&gt;414&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;&lt;span&gt; lseek.c
&lt;/span&gt;&lt;strong&gt;-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp    &lt;span&gt;0&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; test.txt&lt;/strong&gt;
tp@tp:&lt;/span&gt;~/Linux/&lt;span&gt;day3$ gcc lseek.c 
tp@tp:&lt;/span&gt;~/Linux/day3$ ./a.&lt;span&gt;out&lt;/span&gt;&lt;span&gt;
tp@tp:&lt;/span&gt;~/Linux/day3$ ls -&lt;span&gt;lh
total 28K
&lt;/span&gt;-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp  &lt;span&gt;479&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.cpp
&lt;/span&gt;-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp  &lt;span&gt;100&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;38&lt;/span&gt;&lt;span&gt; abc.txt
&lt;/span&gt;-rwxrwxr-x &lt;span&gt;1&lt;/span&gt; tp tp &lt;span&gt;8&lt;/span&gt;.7K Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; a.&lt;span&gt;out&lt;/span&gt;
-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp  &lt;span&gt;414&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;&lt;span&gt; lseek.c
&lt;/span&gt;&lt;strong&gt;-rw-rw-r-- &lt;span&gt;1&lt;/span&gt; tp tp &lt;span&gt;1.0M&lt;/span&gt; Apr &lt;span&gt;13&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; test.txt&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用lseek求文件大小&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('08313a14-4c73-458e-9988-948814f23865')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_08313a14-4c73-458e-9988-948814f23865&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_08313a14-4c73-458e-9988-948814f23865&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('08313a14-4c73-458e-9988-948814f23865',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_08313a14-4c73-458e-9988-948814f23865&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;stdlib.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;sys/types.h&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;unistd.h&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;sys/stat.h&amp;gt;
&lt;span&gt; 6&lt;/span&gt; #include &amp;lt;fcntl.h&amp;gt;  
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()  
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{  
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; fd=open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, O_RDWR);  
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {   
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         perror(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;open test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         exit(-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }   
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file size:%ld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,lseek(fd, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SEEK_END));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    close(fd);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;利用lseek获取文件大小&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tp@tp:~/Linux/&lt;span&gt;day3$ gcc lseek.c 
tp@tp:&lt;/span&gt;~/Linux/day3$ ./a.&lt;span&gt;out&lt;/span&gt;&lt;span&gt;
file size:&lt;/span&gt;&lt;span&gt;1048576&lt;/span&gt;&lt;span&gt;
tp@tp:&lt;/span&gt;~/Linux/day3$ du -&lt;span&gt;h test.txt 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;.0K    test.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;①ls –l 查看文件字符数　　②du –h 查看实际占用的物理磁盘块数&lt;/p&gt;
&lt;p&gt;来看看test.txt里面的内容：&lt;/p&gt;
&lt;p&gt;          &lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180414000913914-2145153370.png&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;142&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用od 命令来查看文件中不能直接显示在终端的字符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tp@tp:~/Linux/day3$ od -&lt;span&gt;s test.txt 
&lt;/span&gt;&lt;span&gt;0000000&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;
*
&lt;span&gt;3777760&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;12288&lt;/span&gt;
&lt;span&gt;4000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  注意到 有一个“*”存在，这其实就是&lt;strong&gt;空洞文件&lt;/strong&gt;，它&lt;strong&gt;指没有被实际写入文件的所有字节。这些字节由重复的 0 表示&lt;/strong&gt;。（据百度百科还是由于offset &amp;gt; 实际文件大小所致）同时，因为ls展现的是文件的逻辑大小，即在文件系统表现出来的大小，而du展现的是文件物理大小，也就是文件在磁盘上实际所占的block数；所以说，空洞文件在文件系统表现的还是和普通文件一样的，但是实际上文件系统并没有给他分配所表现出来的那么多空间，只是存放了有用的信息。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【dup命令】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;原型&lt;/strong&gt; 　　#include &amp;lt;unistd.h&amp;gt;
　　 　　&lt;span&gt;int&lt;/span&gt; dup(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; oldfd);
 　　　　&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; dup2(&lt;span&gt;int&lt;/span&gt; oldfd, &lt;span&gt;int&lt;/span&gt; newfd);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　dup用来复制oldfd所指的文件描述符。但返回的是最小且当前尚未被使用的文件描述符，若有错误则返回－1，错误代码存入errno中。返回的新文件描述符就会和oldfd指向同一个文件，共享所有的锁定，读写指针，和各项权限或标志位。&lt;br/&gt;       dup2可以用参数newfd指定新文件描述符的数值。若newfd已经被程序使用，系统就会将其关闭以释放该文件描述符；若newfd与oldfd相等，dup2将返回newfd，而不关闭它。dup2调用成功返回新的文件描述符，出错则返回－1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;文件描述符在PCB里面一张文件描述符表存着，且0，1，2 代表标准输入，标准输出，标准出错。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180414222734937-645059235.png&quot; alt=&quot;&quot; width=&quot;702&quot; height=&quot;295&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用：&lt;/strong&gt;结合前面的文件操作函数，可以实现“输出重定向”&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#include&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;sys/types.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;unistd.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;sys/stat.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;fcntl.h&amp;gt;

&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; fd; 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((fd = open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test1.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, O_RDWR|O_CREAT))== -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) 
    {   
        perror(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;open error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        exit(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    }   
    close(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭标准输出&lt;/span&gt;
    dup(fd);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;复制fd文件描述符返回到当前最小可用文件描述1（标准输出）
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时 1和fd指向同一个文件表&lt;strong&gt;（如上图）
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  dup2(fd, 1);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;和dup类似，不过它可以直接为oldfd指定成为newfd文件描述符数值&lt;/span&gt;
    close(fd);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭oldfd &lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gggggg\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;br/&gt;结果：&lt;br/&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180414222325980-1243519604.png&quot; alt=&quot;&quot; width=&quot;468&quot; height=&quot;94&quot;/&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;磁盘&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;磁盘分类：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　①IDE接口类型 　如hda，hdb,hdc. 等。 hda一般指第一块硬盘，IDE类型安装更方便&lt;/p&gt;
&lt;p&gt;　　　②SCSI (SARA)接口类型    linux下通常是此种类型的接口硬盘，如sda。 linux下，u盘、硬盘通常被识别为此种类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;区别：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;best-text mb-10&quot;&gt;
&lt;span&gt;           &lt;span&gt;&lt;span&gt;U盘和SARA硬盘的在Linux上面的文件名一般是 /dev/sd[a-p]。与IDE接口不同的是，SCSI/USB接口的磁盘没有固定的顺序，一般根据Linux内核检&lt;/span&gt;&lt;/span&gt;&lt;span&gt;测到磁盘的顺序检测。&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;相关命令：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　lsblk [选项] [设备]　   // 查看分区使用情况&lt;/p&gt;
&lt;p&gt;　　　df [选项] [查看文件名]　　//查看磁盘使用情况&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;自己挂载一块硬盘&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;             &lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413202231532-1731294211.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;184&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 进入虚拟机设置 按引导创建一块新硬盘&lt;/strong&gt;，如&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413172626655-1527085641.png&quot; alt=&quot;&quot; width=&quot;463&quot; height=&quot;244&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;然后重启虚拟机。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 分区  使用fdisk /dev/sdb&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　此时 lsblk ，查看到多了一个1G的硬盘（disk）&lt;/p&gt;
&lt;p&gt;　　   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413173754492-928841925.png&quot; alt=&quot;&quot; width=&quot;468&quot; height=&quot;117&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　然后 fdisk  /dev/sdb　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
tp@Bit:~$ &lt;strong&gt;sudo fdisk /dev/&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;sdb&lt;/strong&gt;
[sudo] password &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; tp: 

Welcome to fdisk (util&lt;/span&gt;-linux &lt;span&gt;2.30&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;).
Changes will remain &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; memory only, until you dec
Be careful before &lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; the write command.

Device does not contain a recognized partition ta
Created a &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DOS disklabel with disk identifier 

Command (m &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; help): m
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输入m 可以查看帮助，n：代表新创建分区，p：列出分区表，w：&lt;span&gt;把分区表写入硬盘并退出&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
Command (m &lt;span&gt;for&lt;/span&gt;&lt;span&gt; help):&lt;strong&gt; n&lt;/strong&gt;
Partition type
   p   primary (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; primary, &lt;span&gt;0&lt;/span&gt; extended, &lt;span&gt;4&lt;/span&gt; &lt;span&gt;free&lt;/span&gt;&lt;span&gt;)
   e   extended (container &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; logical partitions)
Select (&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; p):&lt;strong&gt; p&lt;/strong&gt;
Partition number (&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
First sector (&lt;/span&gt;&lt;span&gt;2048&lt;/span&gt;-&lt;span&gt;2097151&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt; &lt;span&gt;2048&lt;/span&gt;&lt;span&gt;): 
Last sector, &lt;/span&gt;+sectors or +size{K,M,G,T,P} (&lt;span&gt;2048&lt;/span&gt;-&lt;span&gt;2097151&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt; &lt;span&gt;2097151&lt;/span&gt;&lt;span&gt;): 

Created a &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; partition &lt;span&gt;1&lt;/span&gt; of type &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and of size &lt;span&gt;1023&lt;/span&gt;&lt;span&gt; MiB.

Command (m &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; help): &lt;strong&gt;w   &lt;/strong&gt;
The partition table has been altered.
Calling ioctl() to re&lt;/span&gt;-&lt;span&gt;read partition table.
Syncing disks.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. 格式化磁盘   mkfs  -t  ext4 /dev/sdb1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　此时，lsblk 一下 sdb下面就已创建了分区&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
tp@Bit:~&lt;span&gt;$ &lt;strong&gt;lsblk&lt;/strong&gt;
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;0&lt;/span&gt;   20G  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; disk 
└─sda1   &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0&lt;/span&gt;   20G  &lt;span&gt;0&lt;/span&gt; part /&lt;span&gt;
sdb      &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;    1G  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; disk 
└─&lt;strong&gt;sdb1   &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;8&lt;/span&gt;:&lt;span&gt;17&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt; 1023M  &lt;span&gt;0&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; part&lt;/strong&gt; 
sr0     &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt;.4G  &lt;span&gt;0&lt;/span&gt;&lt;span&gt; rom  
tp@Bit:&lt;/span&gt;~$&lt;strong&gt; sudo mkfs -t ext4 /dev/&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;sdb1&lt;/strong&gt;
mke2fs &lt;/span&gt;&lt;span&gt;1.43&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt; (&lt;span&gt;04&lt;/span&gt;-Aug-&lt;span&gt;2017&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;/dev/&lt;span&gt;sdb1 contains a ext4 file system
    created on Fri Apr &lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;18&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;&lt;span&gt;
Proceed anyway&lt;/span&gt;?&lt;span&gt; (y,N) y
Creating filesystem with &lt;/span&gt;&lt;span&gt;261888&lt;/span&gt; 4k blocks and &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; inodes
Filesystem UUID: fe547447&lt;/span&gt;-dd2e-423e-bd17-&lt;span&gt;af8078c09fb5
Superblock backups stored on blocks: 
    &lt;/span&gt;&lt;span&gt;32768&lt;/span&gt;, &lt;span&gt;98304&lt;/span&gt;, &lt;span&gt;163840&lt;/span&gt;, &lt;span&gt;229376&lt;/span&gt;&lt;span&gt;

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (&lt;/span&gt;&lt;span&gt;4096&lt;/span&gt;&lt;span&gt; blocks): done
Writing superblocks and filesystem accounting information: done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. 挂载  mount  [挂载目录] [被挂载目录]   （重启后挂载的硬盘会消失）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413191140990-787253684.png&quot; alt=&quot;&quot; width=&quot;416&quot; height=&quot;128&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此时，myDisk目录下出现lost+found 目录。 挂载成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 自动挂载   /etc/fstab      &lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;　　以上面的挂载方式，就可以为U盘，新插硬盘进行挂载了，但是当重启虚拟机以后，我们挂载的目录可能就找不到了，因为它没有添加到配置文件里面，所以不能像 &lt;strong&gt;/&lt;/strong&gt; 目录那样自动挂载。如要自动挂载的话，就还得为相应配置文件添加内容。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;/dev/sdb1　　　　/myDisk　　　ext4     defaults    &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;列选项：&lt;/span&gt;1.挂载目录&lt;br/&gt;　　　　2.被挂载点&lt;br/&gt;　　　　3.文件系统类型&lt;br/&gt;　　　　4.挂载选项&lt;br/&gt;　　　　5.设置是否使用dump备份，置0为不备份，置1，2为备份，但2的备份重要性比1小&lt;br/&gt;　　　　6.设置是否开机的时候使用fsck检验所挂载的磁盘，置0为不检验，置1，2为检验，但置2盘比置1的盘晚检验。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413195123513-1292668486.png&quot; alt=&quot;&quot; width=&quot;749&quot; height=&quot;93&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;df -h 一下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1272978/201804/1272978-20180413200229391-1396897024.png&quot; alt=&quot;&quot; width=&quot;471&quot; height=&quot;197&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 卸载    umount  [挂载目录] [被挂载目录]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　没配置，直接umount就可以了；配置了配置文件，将配置文件改回，再umount。 &lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 14:30:00 +0000</pubDate>
<dc:creator>tp_16b</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tp-16b/p/8810613.html</dc:identifier>
</item>
<item>
<title>项目版本与分支管理之阿里AoneFlow模式分析 - zhoulin-circle</title>
<link>http://www.cnblogs.com/zhoulin-circle/p/8835323.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoulin-circle/p/8835323.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在我前期的项目管理的经验中，一个项目需要维护多个产品及多个版本，这给版本与分支的管理增加了难度。前期没有重视，使得分支太多太乱，版本也没记录好，引发了很多的问题。在多种分支与版本的管理模式下，最终参考阿里的AoneBased模式来管理分支。在此做个总结并分享给大家，希望可以帮助大家找到适合自己项目的版本管理方式。&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;
&lt;p&gt;碰到一个较复杂的自研项目，既要做原始功能的研发，还要做产品的定制化开发。前期的版本管理大致为：&lt;/p&gt;
&lt;ul readability=&quot;9&quot;&gt;&lt;li&gt;1、共一个主干分支master&lt;/li&gt;
&lt;li&gt;2、N个特性分支==N个发布分支（特性分支开发完成后，直接转测，直接转为发布分支）&lt;/li&gt;
&lt;li&gt;3、不定期的更新主干分支&lt;br/&gt;产生的主要问题有&lt;/li&gt;
&lt;li&gt;1、主干分支常常跟不上线上环境的代码&lt;/li&gt;
&lt;li&gt;2、大量的合并突冲，集成测试不友好&lt;/li&gt;
&lt;li&gt;3、版本记录混乱，功能点不明确&lt;/li&gt;
&lt;li readability=&quot;21&quot;&gt;
&lt;p&gt;4、某功能突然要撤回时，要手动去注销对应代码&lt;br/&gt;总之产生的问题非常多，整个项目代码管理混乱，非常不利于维护。后整理思绪，先总结一些常见的版本管理模式。&lt;/p&gt;
&lt;h4 id=&quot;一trunkbased模式&quot;&gt;一、TrunkBased模式&lt;/h4&gt;
&lt;h4 id=&quot;组成&quot;&gt;组成&lt;/h4&gt;
&lt;p&gt;一个主干分支 + 多个发布分支&lt;/p&gt;
&lt;h4 id=&quot;使用流程&quot;&gt;使用流程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138408/201804/1138408-20180414205840337-1216919613.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每个发布分支在特定的提交点从主干分支中拉取出来，进行线上部署和Hotfix.&lt;/p&gt;
&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;
&lt;p&gt;多个团队或多个产品在同一个主干分支上并行开发时，发布的时候就是灾难了。需要频繁的集成和足够的测试覆盖。&lt;/p&gt;
&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;TrunkBased这种模试应该是比较常见的。但是其多是在主干分支上开发，虽能时该保持获取到最新的代码，但是非常不利于后期的维护。使用场景过于局限，适合版本维护比较单一，迭代周期比较长的的项目。比如公司官网，功能不复杂，大多都是维护下图片或动态，可以考虑这种版本管理模式。&lt;/p&gt;
&lt;h4 id=&quot;二oneflow模式&quot;&gt;二、OneFlow模式&lt;/h4&gt;
&lt;p&gt;此模式是TrunkBased的升级版，增加了Hotfix分支，采用多主干模式，一般是双主干（一个主干分支+一个主干发布分支）。OneFlow在TrunkBased模式演进中，做了一此改善，分离了主干分支和发布分支，有效的规避了一些问题。但是同样还不能满足多版本，多产品的并行开发。&lt;/p&gt;
&lt;h4 id=&quot;三gitflow模式&quot;&gt;三、GitFlow模式&lt;/h4&gt;
&lt;h4 id=&quot;组成-1&quot;&gt;组成&lt;/h4&gt;
&lt;p&gt;一个主干分支+一个开发分支+N个特性分支+N个发布分支+N个Hotfix分支&lt;/p&gt;
&lt;h4 id=&quot;使用流程-1&quot;&gt;使用流程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138408/201804/1138408-20180414205911958-1800214492.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从流程图可以看出，主干分支保持了与线上环境的代码同步，但又有主发布分支隔离了未测试的不稳定代码。每次项目有新需求时，从主干分支上拉取一个最新的特性分支进行开发。开发完成时合并到发布分支上进行集成与测试，发布成功后才合到主干分支中。&lt;/p&gt;
&lt;h4 id=&quot;小结-1&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;可以看出，GitFlow版本管理模式比较符合多版本的并行开发。所以它非常受一些很注重流程的公司青睐。但是，看似不错的模式在实现运用中也还是会出现问题。比如大量的合并冲突，集成测试不友好等。那么在如此情况下，阿里的AoneFlow模式就很好的改善了这些问题，接下来看。&lt;/p&gt;
&lt;h4 id=&quot;四aoneflow模式&quot;&gt;四、AoneFlow模式&lt;/h4&gt;
&lt;h4 id=&quot;组成-2&quot;&gt;组成&lt;/h4&gt;
&lt;p&gt;一个主干分支+N个特性分支+N个发布分支&lt;/p&gt;
&lt;h4 id=&quot;使用流程-2&quot;&gt;使用流程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138408/201804/1138408-20180414205933064-1210791280.png&quot;/&gt;&lt;br/&gt;从流程图可以看出，AoneFlow模式只有一个主干分支。每次有新需求时，从当前主干分支拉取一个特性分支。多个特性分支可同步开发，到发布时间节点时，根据不同的环境合并不同的分支。如测试环境发布分支，演式环境发布分支，线上环境发布分支等。成功发布后，发布分支的代码应合并到主干分支上。同样，每次合并到主干分支时要打上tag，做好记录。最后把发布分支上关联的特性分支删除。&lt;/p&gt;
&lt;h4 id=&quot;小结-2&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;AoneFlow模式可以看出，对于维护不同环境和不同版本的情况下非常适用，也不会产生多余的分支，主干分支与线上环境保持一致。当我们碰到有某个功能要撤销时，可以直接回滚到某次合 并记录中，去除某个发布分支，合并其余分支。利于可维护。整个流程简单有规则，轻松高效管理项目版本与分支。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过以上一系列的分析梳理，我在项目中碰到的版本管理问题得到了解决。相信大家也都能找到适合项目的管理方式。无论怎样，大小版本的记录是少不了的。想要做好一个项目的管理，让项目更好的可读可维护，我们需要做好很多细节的工作。每一个环节都寻找更优的方法。版本的管理只是其中的一部分，前路漫漫，作重而道远。欢迎各位大佬多多指点！&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 13:04:00 +0000</pubDate>
<dc:creator>zhoulin-circle</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhoulin-circle/p/8835323.html</dc:identifier>
</item>
<item>
<title>Python系列之 - 锁（GIL,Lock,Rlock,Event,信号量） - 慕沁</title>
<link>http://www.cnblogs.com/ls-2018/p/8835267.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ls-2018/p/8835267.html</guid>
<description>&lt;p&gt;python 的解释器，有很多种，但市场占有率99.9%的都是基于c语言编写的CPython.  在这个解释器里规定了GIL。&lt;/p&gt;
&lt;p&gt;In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)&lt;/p&gt;
&lt;p&gt;意思：无论有多少个cpu，python在执行时会淡定的在同一时刻只允许一个线程运行。（一个进程可以开多个线程，但线程只能同时运行一个）&lt;/p&gt;
&lt;p&gt;下面举例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; add():
    sum&lt;/span&gt;=&lt;span&gt;0
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000000&lt;span&gt;):
        sum&lt;/span&gt;+=&lt;span&gt;i
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,sum)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; mul():
    sum2&lt;/span&gt;=1
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1,100000&lt;span&gt;):
        sum2&lt;/span&gt;*=&lt;span&gt;i
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sum2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,sum2)
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading,time
start&lt;/span&gt;=&lt;span&gt;time.time()

t1&lt;/span&gt;=threading.Thread(target=&lt;span&gt;add)
t2&lt;/span&gt;=threading.Thread(target=&lt;span&gt;mul)

l&lt;/span&gt;=&lt;span&gt;[]
l.append(t1)
l.append(t2)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(time.ctime())
add()
mul()

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cost time %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(time.ctime()))
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;执行结果
Sat Apr &lt;/span&gt;14 20:10:39 2018&lt;span&gt;
sum &lt;/span&gt;49999995000000&lt;span&gt;
sum2 &lt;/span&gt;282422940796034787429342157802453551847&lt;span&gt;
cost time Sat Apr &lt;/span&gt;14 20:10:50 2018&lt;span&gt;

sum2太大，截取了一部分
可已看出串行需要11秒，（&lt;/span&gt;-_-我还开着一些别的软件，需要占用大量内存）
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;然后我们用多线程分别执行两个程序
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; add():
    sum&lt;/span&gt;=&lt;span&gt;0
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000000&lt;span&gt;):
        sum&lt;/span&gt;+=&lt;span&gt;i
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,sum)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; mul():
    sum2&lt;/span&gt;=1
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1,100000&lt;span&gt;):
        sum2&lt;/span&gt;*=&lt;span&gt;i
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sum2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,sum2)
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading,time
start&lt;/span&gt;=&lt;span&gt;time.time()

t1&lt;/span&gt;=threading.Thread(target=&lt;span&gt;add)
t2&lt;/span&gt;=threading.Thread(target=&lt;span&gt;mul)

l&lt;/span&gt;=&lt;span&gt;[]
l.append(t1)
l.append(t2)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(time.ctime())
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; l:
    t.start()
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; l:
    t.join()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cost time %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(time.ctime()))
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;执行结果：
Sat Apr &lt;/span&gt;14 20:14:51 2018&lt;span&gt;
sum &lt;/span&gt;49999995000000&lt;span&gt;
sum2 &lt;/span&gt;28242294079603478742934215780245355&lt;span&gt;
cost time Sat Apr &lt;/span&gt;14 20:15:01 2018&lt;span&gt;

可以看出执行速度加快了。
但是减少的时间不是很多。这是为什么呢？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;首先我们需要知道任务类型分两种：CPU密集型、IO密集型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;像上面的例子就是CPU密集型，需要大量的计算&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而另一种就是需要频繁的进行输入输出（一遇到IO,就切换）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着写一个IO密集型的例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; music():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin to listen %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;time.ctime())
    time.sleep(&lt;/span&gt;3&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stop to listen %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; time.ctime())

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; game():
  
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin to play game %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;time.ctime())
    time.sleep(&lt;/span&gt;5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stop to play game %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; time.ctime())

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    t1&lt;/span&gt;=  threading.Thread(target=&lt;span&gt;music)
    t2 &lt;/span&gt;= threading.Thread(target=&lt;span&gt;game)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ending&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;输出结果：
begin to listen Sat Apr &lt;/span&gt;14 20:23:03 2018&lt;span&gt;
begin to play game Sat Apr &lt;/span&gt;14 20:23:03 2018&lt;span&gt;
stop to listen Sat Apr &lt;/span&gt;14 20:23:06 2018&lt;span&gt;
stop to play game Sat Apr &lt;/span&gt;14 20:23:08 2018&lt;span&gt;
ending

Process finished with exit code 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; music():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin to listen %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;time.ctime())
    time.sleep(&lt;/span&gt;3&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stop to listen %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; time.ctime())

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; game():

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin to play game %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;time.ctime())
    time.sleep(&lt;/span&gt;5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stop to play game %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; time.ctime())

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    music()
    game()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; t1=  threading.Thread(target=music)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; t2 = threading.Thread(target=game)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; t1.start()&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; t2.start()&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; t1.join()&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; t2.join()&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ending&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;输出结果：
begin to listen Sat Apr &lt;/span&gt;14 20:24:44 2018&lt;span&gt;
stop to listen Sat Apr &lt;/span&gt;14 20:24:47 2018&lt;span&gt;
begin to play game Sat Apr &lt;/span&gt;14 20:24:47 2018&lt;span&gt;
stop to play game Sat Apr &lt;/span&gt;14 20:24:52 2018&lt;span&gt;
ending

Process finished with exit code 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显 对于IO密集型多线程的优势非常明显.&lt;/p&gt;

&lt;table border=&quot;10&quot; align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;ad6&quot;&gt;&lt;span&gt;同步锁Lock&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;多个线程都在同时操作同一个共享资源，所以造成了资源破坏，怎么办呢？(join会造成串行，失去所线程的意义)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; addNum():
    &lt;/span&gt;&lt;span&gt;global&lt;/span&gt; num &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在每个线程中都获取这个全局变量&lt;/span&gt;
    temp=&lt;span&gt;num
    time.sleep(&lt;/span&gt;0.0001&lt;span&gt;)
    num &lt;/span&gt;=temp-1 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;对此公共变量进行-1操作&lt;/span&gt;
num = 100  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设定一个共享变量&lt;/span&gt;
thread_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(100&lt;span&gt;):
    t &lt;/span&gt;= threading.Thread(target=&lt;span&gt;addNum)
    t.start()
    thread_list.append(t)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt; thread_list: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等待所有线程执行完毕&lt;/span&gt;
&lt;span&gt;    t.join()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;final num:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, num )
结果：
final num: &lt;/span&gt;87&lt;span&gt;

Process finished with exit code 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;线程之间竞争资源，谁抢到谁执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;我们可以通过同步锁来解决这种问题

R&lt;/span&gt;=&lt;span&gt;threading.Lock()
 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;###&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; sub():
    &lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; num
  &lt;span&gt;  R.acquire()
    temp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;=num-1
    time.sleep(0.1)
    num=temp
    R.release()&lt;br/&gt;# 即运行到此就变成了串行，本语言无力改变&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;table border=&quot;10&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;ad6&quot;&gt;&lt;span&gt;线程死锁和递归锁RLock&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; myThread(threading.Thread):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; doA(self):
        lockA.acquire()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        time.sleep(&lt;/span&gt;3&lt;span&gt;)
        &lt;span&gt;lockB.acquire()
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        lockB.release()
        lockA.release()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; doB(self):
        lockB.acquire()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        time.sleep(&lt;/span&gt;2&lt;span&gt;)
        &lt;span&gt;lockA.acquire()
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        lockA.release()
        lockB.release()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
        self.doA()
        self.doB()
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:

    lockA&lt;/span&gt;=&lt;span&gt;threading.Lock()
    lockB&lt;/span&gt;=&lt;span&gt;threading.Lock()
    threads&lt;/span&gt;=&lt;span&gt;[]
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
        threads.append(myThread())
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; threads:
        t.start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1338123/201804/1338123-20180414204011223-1097885875.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果就卡到这里了,?,Thread-1申请lockB|Thread-2申请lockB，但是两者都申请不到于是产生了死锁&lt;/p&gt;
&lt;p&gt;于是------当某个线程申请到一个锁，其余线程不能再申请。于是有了递归锁（其实就是内部维护了一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; myThread(threading.Thread):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; doA(self):
        R_lock.acquire()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        time.sleep(&lt;/span&gt;3&lt;span&gt;)
        R_lock.acquire()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        R_lock.release()
        R_lock.release()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; doB(self):
        R_lock.acquire()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        time.sleep(&lt;/span&gt;2&lt;span&gt;)
        R_lock.acquire()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(self.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gotlockA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time.ctime())
        R_lock.release()
        R_lock.release()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
        self.doA()
        self.doB()
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:

    R_lock &lt;/span&gt;=&lt;span&gt; threading.RLock()
    threads&lt;/span&gt;=&lt;span&gt;[]
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
        threads.append(myThread())
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; threads:
        t.start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1338123/201804/1338123-20180414204643371-2136466538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;table border=&quot;10&quot; align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;ad6&quot;&gt;&lt;span&gt;同步条件(Event)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
An event &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a simple synchronization object;the event represents an internal flag,
&lt;/span&gt;&lt;span&gt;and&lt;/span&gt; threads can wait &lt;span&gt;for&lt;/span&gt; the flag to be set, &lt;span&gt;or&lt;/span&gt; set &lt;span&gt;or&lt;/span&gt;&lt;span&gt; clear the flag themselves.&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;事件是一个简单的同步对象;事件表示一个内部标志，
线程可以等待设置标志，或设置或清除标志本身。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
event = threading.Event()
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;客户机线程可以等待设置标志。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; a client thread can wait for the flag to be set&lt;/span&gt;
&lt;span&gt;event.wait()&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
一个服务器线程可以设置或重置它。
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; a server thread can set or reset it&lt;/span&gt;
&lt;span&gt;event.set()
event.clear()&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;如果设置了标志，等待方法不会执行任何操作。
如果标记被清除，等待将阻塞直到它再次被设置。
任何数量的线程都可以等待相同的事件。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;If the flag &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; set, the wait method doesn’t do anything.
If the flag &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; cleared, wait will block until it becomes set again.
Any number of threads may wait &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the same event.


&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Boss(threading.Thread):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BOSS：今晚大家都要加班到22:00。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(event.isSet())
        event.set()
        time.sleep(&lt;/span&gt;5&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BOSS：&amp;lt;22:00&amp;gt;可以下班了。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(event.isSet())
        event.set()
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Worker(threading.Thread):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
        event.wait()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Worker：哎……命苦啊！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        time.sleep(&lt;/span&gt;1&lt;span&gt;)
        event.clear()
        event.wait()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Worker：OhYeah!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    event&lt;/span&gt;=&lt;span&gt;threading.Event()
    threads&lt;/span&gt;=&lt;span&gt;[]
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
        threads.append(Worker())
    threads.append(Boss())
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; threads:
        t.start()
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; threads:
        t.join()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1338123/201804/1338123-20180414205412617-509308122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;信号量用来控制线程并发数的，BoundedSemaphore或Semaphore管理一个内置的计数 器，每当调用acquire()时-1，调用release()时+1。&lt;/p&gt;
&lt;p&gt;      计数器不能小于0，当计数器为 0时，acquire()将阻塞线程至同步锁定状态，直到其他线程调用release()。(类似于停车位的概念)&lt;/p&gt;
&lt;p&gt;      BoundedSemaphore与Semaphore的唯一区别在于前者将在调用release()时检查计数 器的值是否超过了计数器的初始值，如果超过了将抛出一个异常。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; myThread(threading.Thread):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(self):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; semaphore.acquire():
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(self.name)
            time.sleep(&lt;/span&gt;5&lt;span&gt;)
            semaphore.release()
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    semaphore&lt;/span&gt;=threading.Semaphore(5&lt;span&gt;)
    thrs&lt;/span&gt;=&lt;span&gt;[]
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(100&lt;span&gt;):
        thrs.append(myThread())
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; thrs:
        t.start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1338123/201804/1338123-20180414205548051-1535868154.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 12:56:00 +0000</pubDate>
<dc:creator>慕沁</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ls-2018/p/8835267.html</dc:identifier>
</item>
<item>
<title>Spring(4)——面向切面编程（AOP模块） - 我没有三颗心脏</title>
<link>http://www.cnblogs.com/wmyskxz/p/8835243.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmyskxz/p/8835243.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-34e6864b15c793ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-aop-简介&quot;&gt;Spring AOP 简介&lt;/h2&gt;
&lt;p&gt;如果说 IoC 是 Spring 的核心，那么面向切面编程就是 Spring 最为重要的功能之一了，在数据库事务中切面编程被广泛使用。&lt;/p&gt;
&lt;h4 id=&quot;aop-即-aspect-oriented-program-面向切面编程&quot;&gt;AOP 即 Aspect Oriented Program 面向切面编程&lt;/h4&gt;
&lt;p&gt;首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;所谓的核心业务&lt;/strong&gt;，比如登陆，增加数据，删除数据都叫核心业务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所谓的周边功能&lt;/strong&gt;，比如性能统计，日志，事务管理等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;周边功能在 Spring 的面向切面编程AOP思想里，即被定义为切面&lt;/p&gt;
&lt;p&gt;在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 &quot;编织&quot; 在一起，这就叫AOP&lt;/p&gt;
&lt;h4 id=&quot;aop-的目的&quot;&gt;AOP 的目的&lt;/h4&gt;
&lt;p&gt;AOP能够将那些与业务无关，&lt;strong&gt;却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来&lt;/strong&gt;，便于&lt;strong&gt;减少系统的重复代码&lt;/strong&gt;，&lt;strong&gt;降低模块间的耦合度&lt;/strong&gt;，并&lt;strong&gt;有利于未来的可拓展性和可维护性&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;aop-当中的概念&quot;&gt;AOP 当中的概念：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;切入点（Pointcut）&lt;br/&gt;在哪些类，哪些方法上切入（&lt;strong&gt;where&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;通知（Advice）&lt;br/&gt;在方法执行的什么实际（&lt;strong&gt;when:&lt;/strong&gt;方法前/方法后/方法前后）做什么（&lt;strong&gt;what:&lt;/strong&gt;增强的功能）&lt;/li&gt;
&lt;li&gt;切面（Aspect）&lt;br/&gt;切面 = 切入点 + 通知，通俗点就是：&lt;strong&gt;在什么时机，什么地方，做什么增强！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;织入（Weaving）&lt;br/&gt;把切面加入到对象，并创建出代理对象的过程。（由 Spring 来完成）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;一个例子&quot;&gt;一个例子&lt;/h4&gt;
&lt;p&gt;为了更好的说明 AOP 的概念，我们来举一个实际中的例子来说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-8225b1537175bd8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中，包租婆的核心业务就是签合同，收房租，那么这就够了，灰色框起来的部分都是重复且边缘的事，交给中介商就好了，这就是 &lt;strong&gt;AOP 的一个思想：让关注点代码与业务代码分离！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;实际的代码&quot;&gt;实际的代码&lt;/h4&gt;
&lt;p&gt;我们来实际的用代码感受一下&lt;/p&gt;
&lt;p&gt;1.在 Package【pojo】下新建一个【Landlord】类（我百度翻译的包租婆的英文）：&lt;/p&gt;
&lt;pre class=&quot;jaba&quot;&gt;
&lt;code&gt;package pojo;

import org.springframework.stereotype.Component;

@Component(&quot;landlord&quot;)
public class Landlord {

    public void service() {
        // 仅仅只是实现了核心的业务功能
        System.out.println(&quot;签合同&quot;);
        System.out.println(&quot;收房租&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.在 Package【aspect】下新建一个中介商【Broker】类（我还是用的翻译...）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package aspect;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.After;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.Aspect;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.Before;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Broker {

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* pojo.Landlord.service())&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt;(){
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;带租客看房&quot;&lt;/span&gt;);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;谈价格&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@After&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* pojo.Landlord.service())&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt;(){
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;交钥匙&quot;&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.在 applicationContext.xml 中配置自动注入，并告诉 Spring IoC 容器去哪里扫描这两个 Bean：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&amp;gt;

    &amp;lt;context:component-scan base-package=&quot;aspect&quot; /&amp;gt;
    &amp;lt;context:component-scan base-package=&quot;pojo&quot; /&amp;gt;

    &amp;lt;aop:aspectj-autoproxy/&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.在 Package【test】下编写测试代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package test;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.ApplicationContext;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import pojo.Landlord;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TestSpring {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {

        ApplicationContext context =
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;applicationContext.xml&quot;&lt;/span&gt;);
        Landlord landlord = (Landlord) context.&lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;landlord&quot;&lt;/span&gt;, Landlord.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        landlord.&lt;span class=&quot;fu&quot;&gt;service&lt;/span&gt;();

    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.执行看到效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-a7dc802dcfd2f1a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个例子使用了一些注解，现在看不懂没有关系，但我们可以从上面可以看到，我们在 Landlord 的 service() 方法中仅仅实现了核心的业务代码，其余的关注点功能是根据我们设置的切面&lt;strong&gt;自动补全&lt;/strong&gt;的。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;使用注解来开发-spring-aop&quot;&gt;使用注解来开发 Spring AOP&lt;/h2&gt;
&lt;p&gt;使用注解的方式已经逐渐成为了主流，所以我们利用上面的例子来说明如何用注解来开发 Spring AOP&lt;/p&gt;
&lt;h4 id=&quot;第一步选择连接点&quot;&gt;第一步：选择连接点&lt;/h4&gt;
&lt;p&gt;Spring 是方法级别的 AOP 框架，我们主要也是以某个类额某个方法作为连接点，另一种说法就是：&lt;strong&gt;选择哪一个类的哪一方法用以增强功能。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    ....
    public void service() {
        // 仅仅只是实现了核心的业务功能
        System.out.println(&quot;签合同&quot;);
        System.out.println(&quot;收房租&quot;);
    }
    ....&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在这里就选择上述 Landlord 类中的 service() 方法作为连接点。&lt;/p&gt;
&lt;h4 id=&quot;第二步创建切面&quot;&gt;第二步：创建切面&lt;/h4&gt;
&lt;p&gt;选择好了连接点就可以创建切面了，我们可以把切面理解为一个拦截器，当程序运行到连接点的时候，被拦截下来，在开头加入了初始化的方法，在结尾也加入了销毁的方法而已，在 Spring 中只要使用 &lt;code&gt;@Aspect&lt;/code&gt; 注解一个类，那么 Spring IoC 容器就会认为这是一个切面了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package aspect;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Component
@Aspect
class Broker {

    @Before(&quot;execution(* pojo.Landlord.service())&quot;)
    public void before(){
        System.out.println(&quot;带租客看房&quot;);
        System.out.println(&quot;谈价格&quot;);
    }

    @After(&quot;execution(* pojo.Landlord.service())&quot;)
    public void after(){
        System.out.println(&quot;交钥匙&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt; 被定义为切面的类仍然是一个 Bean ，需要 &lt;code&gt;@Component&lt;/code&gt; 注解标注&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代码部分中在方法上面的注解看名字也能猜出个大概，下面来列举一下 Spring 中的 AspectJ 注解：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;@Before&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;前置通知，在连接点方法前调用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;@Around&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法，后面会讲&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;@After&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;后置通知，在连接点方法后调用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;@AfterReturning&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;@AfterThrowing&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;异常通知，当连接点方法异常时调用&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;有了上表，我们就知道 before() 方法是连接点方法调用前调用的方法，而 after() 方法则相反，这些注解中间使用了定义切点的正则式，也就是告诉 Spring AOP 需要拦截什么对象的什么方法，下面讲到。&lt;/p&gt;
&lt;h4 id=&quot;第三步定义切点&quot;&gt;第三步：定义切点&lt;/h4&gt;
&lt;p&gt;在上面的注解中定义了 execution 的正则表达式，Spring 通过这个正则表达式判断具体要拦截的是哪一个类的哪一个方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;execution(* pojo.Landlord.service())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;依次对这个表达式作出分析：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;execution：代表执行方法的时候会触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; ：代表任意返回类型的方法&lt;/li&gt;
&lt;li&gt;pojo.Landlord：代表类的全限定名&lt;/li&gt;
&lt;li&gt;service()：被拦截的方法名称&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过上面的表达式，Spring 就会知道应该拦截 pojo.Lnadlord 类下的 service() 方法。上面的演示类还好，如果多出都需要写这样的表达式难免会有些复杂，我们可以通过使用 &lt;code&gt;@Pointcut&lt;/code&gt; 注解来定义一个切点来避免这样的麻烦：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package aspect;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Component
@Aspect
class Broker {

    @Pointcut(&quot;execution(* pojo.Landlord.service())&quot;)
    public void lService() {
    }

    @Before(&quot;lService()&quot;)
    public void before() {
        System.out.println(&quot;带租客看房&quot;);
        System.out.println(&quot;谈价格&quot;);
    }

    @After(&quot;lService()&quot;)
    public void after() {
        System.out.println(&quot;交钥匙&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;第四步测试-aop&quot;&gt;第四步：测试 AOP&lt;/h4&gt;
&lt;p&gt;编写测试代码，但是我这里因为 JDK 版本不兼容出现了 BUG....（尴尬...）&lt;/p&gt;
&lt;p&gt;这就告诉我们：环境配置很重要...不然莫名其妙的 BUG 让你崩溃...&lt;/p&gt;
&lt;h4 id=&quot;环绕通知&quot;&gt;环绕通知&lt;/h4&gt;
&lt;p&gt;我们来探讨一下环绕通知，这是 Spring AOP 中最强大的通知，因为它集成了前置通知和后置通知，它保留了连接点原有的方法的功能，所以它及强大又灵活，让我们来看看：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package aspect;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

@Component
@Aspect
class Broker {

//  注释掉之前的 @Before 和 @After 注解以及对应的方法
//  @Before(&quot;execution(* pojo.Landlord.service())&quot;)
//  public void before() {
//      System.out.println(&quot;带租客看房&quot;);
//      System.out.println(&quot;谈价格&quot;);
//  }
//
//  @After(&quot;execution(* pojo.Landlord.service())&quot;)
//  public void after() {
//      System.out.println(&quot;交钥匙&quot;);
//  }

    //  使用 @Around 注解来同时完成前置和后置通知
    @Around(&quot;execution(* pojo.Landlord.service())&quot;)
    public void around(ProceedingJoinPoint joinPoint) {
        System.out.println(&quot;带租客看房&quot;);
        System.out.println(&quot;谈价格&quot;);

        try {
            joinPoint.proceed();
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }

        System.out.println(&quot;交钥匙&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行测试代码，结果仍然正确：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-176d8956fd7ee8fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;使用-xml-配置开发-spring-aop&quot;&gt;使用 XML 配置开发 Spring AOP&lt;/h2&gt;
&lt;p&gt;注解是很强大的东西，但基于 XML 的开发我们仍然需要了解，我们先来了解一下 AOP 中可以配置的元素：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:advisor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义 AOP 的通知其&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;一种很古老的方式，很少使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:aspect&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义一个切面&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:before&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义前置通知&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:after&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义后置通知&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:around&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义环绕通知&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:after-returning&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义返回通知&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:after-throwing&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义异常通知&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:config&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;顶层的 AOP 配置元素&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;AOP 的配置是以它为开始的&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:declare-parents&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;给通知引入新的额外接口，增强功能&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;code&gt;aop:pointcut&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义切点&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;有了之前通过注解来编写的经验，并且有了上面的表，我们将上面的例子改写成 XML 配置很容易（去掉所有的注解）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 装配 Bean--&amp;gt;
&amp;lt;bean name=&quot;landlord&quot; class=&quot;pojo.Landlord&quot;/&amp;gt;
&amp;lt;bean id=&quot;broker&quot; class=&quot;aspect.Broker&quot;/&amp;gt;

&amp;lt;!-- 配置AOP --&amp;gt;
&amp;lt;aop:config&amp;gt;
    &amp;lt;!-- where：在哪些地方（包.类.方法）做增加 --&amp;gt;
    &amp;lt;aop:pointcut id=&quot;landlordPoint&quot;
                  expression=&quot;execution(* pojo.Landlord.service())&quot;/&amp;gt;
    &amp;lt;!-- what:做什么增强 --&amp;gt;
    &amp;lt;aop:aspect id=&quot;logAspect&quot; ref=&quot;broker&quot;&amp;gt;
        &amp;lt;!-- when:在什么时机（方法前/后/前后） --&amp;gt;
        &amp;lt;aop:around pointcut-ref=&quot;landlordPoint&quot; method=&quot;around&quot;/&amp;gt;
    &amp;lt;/aop:aspect&amp;gt;
&amp;lt;/aop:config&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行测试程序，看到正确结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-176d8956fd7ee8fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0.88235294117647&quot;&gt;
&lt;p&gt;扩展阅读：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247483954&amp;amp;idx=1&amp;amp;sn=b34e385ed716edf6f58998ec329f9867&amp;amp;chksm=ebd74333dca0ca257a77c02ab458300ef982adff3cf37eb6d8d2f985f11df5cc07ef17f659d4#rd&quot;&gt;Spring【AOP模块】就这么简单&lt;/a&gt; 、 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/25522841&quot;&gt;关于 Spring AOP(AspectJ)你该知晓的一切（慎独读，有些深度...）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;《Java EE 互联网轻量级框架整合开发》&lt;/li&gt;
&lt;li&gt;《Java 实战（第四版）》&lt;/li&gt;
&lt;li&gt;万能的百度 and 万能的大脑&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;3.3290322580645&quot;&gt;
&lt;p&gt;欢迎转载，转载请注明出处！&lt;br/&gt;@我没有三颗心脏&lt;br/&gt;CSDN博客：&lt;a href=&quot;http://blog.csdn.net/qq939419061&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/qq939419061&lt;/a&gt;&lt;br/&gt;简书：&lt;a href=&quot;http://www.jianshu.com/u/a40d61a49221&quot; class=&quot;uri&quot;&gt;http://www.jianshu.com/u/a40d61a49221&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 14 Apr 2018 12:55:00 +0000</pubDate>
<dc:creator>我没有三颗心脏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wmyskxz/p/8835243.html</dc:identifier>
</item>
</channel>
</rss>