<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>游戏随笔之事件系统的设计 - zblade</title>
<link>http://www.cnblogs.com/zblade/p/8458322.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zblade/p/8458322.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　新的一年，新的开始，祝愿大家新春快乐！转载请标明出处：&lt;a href=&quot;http://www.cnblogs.com/zblade/&quot;&gt;http://www.cnblogs.com/zblade/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今天，开始写新的一年的博客了，我的博客更新的比较随意，也比较缓慢，哈哈。前段时间一直在看一些D3D11的博客，自己也在摸索各个API的使用，不过今天要写的是一篇游戏中的事件系统的设计，具体的事件系统的设计模式（观察者模式），我就不再赘述了，网上有很多相关资料，可以自行查阅学习了解一下相关的原理，比较简单易懂。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在游戏开发中，我们经常会和服务器进行信息的交互，比如玩家点击了商城里面的领取奖励的按钮，此时客户端会发送一个领取的协议给服务器，服务器校验通过后，会下发给客户端，客户端在收到消息后，会重新刷新一下相关的数据，那么这些数据的刷新怎么表现在UI上面呢，就需要我们通过事件系统来通知UI层进行相关的刷新操作了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最常见的事件系统，就是我上面说到的，将数据层和UI层进行分离，通过事件系统的调用来实现耦合的拆分。这在游戏中有较多的应用，那么，我们今天先说一下这种事件系统的设计模式吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、常见事件系统的设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　要设计一个事件系统，一般会暴露最常见的三个接口：Add/Remove/Trigger，分别负责事件的添加，移除和触发。依然用Lua来实现这样的一个接口，我们可以用几个table来实现一个基本的事件系统的三个接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;local&lt;/span&gt; events =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;local&lt;/span&gt; eventHandleId = &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;local&lt;/span&gt; eventHandles =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;设置两个内部函数操作增加和删除&lt;/span&gt;
&lt;span&gt;local&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; AddListener(name, listener)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; listeners =&lt;span&gt; events[name]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; listeners &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        listeners &lt;/span&gt;=&lt;span&gt; {}
        events[name] &lt;/span&gt;=&lt;span&gt; listeners
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

    &lt;span&gt;local&lt;/span&gt; handleId =&lt;span&gt; listeners[listener]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; handleId &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        handleId &lt;/span&gt;= eventHandleId + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        eventHandleId &lt;/span&gt;=&lt;span&gt; handleId
        &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;此处插入，用function来用作key值&lt;/span&gt;
        listeners[listener] =&lt;span&gt; handleId
        eventHandles[handleId] &lt;/span&gt;=&lt;span&gt; { name, listener }
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; handleId
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;local&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; RemoveListener(name, listener, handles)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; listeners =&lt;span&gt; events[name]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; listeners &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; listener &lt;span&gt;then&lt;/span&gt;
            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;该name下对应的所有都清空&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; _, handleId &lt;span&gt;in&lt;/span&gt; &lt;span&gt;pairs&lt;/span&gt;(listeners) &lt;span&gt;do&lt;/span&gt;&lt;span&gt;
                eventHandles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; handles &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                 handles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;end&lt;/span&gt;
            &lt;span&gt;end&lt;/span&gt;&lt;span&gt;
            events[name] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;特定对应的某个listner删除&lt;/span&gt;
            &lt;span&gt;local&lt;/span&gt; handleId =&lt;span&gt; listeners[listener]
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; handleId &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                listeners[listener] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;
                eventHandles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; handles &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                    handles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;end&lt;/span&gt;
            &lt;span&gt;end&lt;/span&gt;
        &lt;span&gt;end&lt;/span&gt;
    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;指定删除某个handleId对应的事件&lt;/span&gt;
&lt;span&gt;local&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; RemoveHandle(handleId)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; entry =&lt;span&gt; eventHandles[handleId]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; entry &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        RemoveListener(entry[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;], entry[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt; 
&lt;span&gt;local&lt;/span&gt; EventManager =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;增加&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Add(name, listener)
    AddListener(name, listener)
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;删除&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Remove(name, listener)
    RemoveListener(name, listener)
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;清空&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Clear()
    events &lt;/span&gt;=&lt;span&gt; {}
    eventHandles &lt;/span&gt;=&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;触发&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Dispatch(name, ...)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; listeners =&lt;span&gt; events[name]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; listeners &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; listener, _ &lt;span&gt;in&lt;/span&gt; &lt;span&gt;pairs&lt;/span&gt;(listeners) &lt;span&gt;do&lt;/span&gt;
            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;基于key值（实质为函数）来执行触发操作&lt;/span&gt;
&lt;span&gt;            listener(name, ...)
        &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　巧用lua中的table，我们可以实现一个最基本的事件系统，具体的原理可以参看lua代码来理解，不是很难。这是最基本的事件系统设计，在此基础上，我们可以进一步的优化我们的事件系统。我们在进行事件系统的注册、删除和触发的时候，并没有考虑到并发性。比如同时有多个消息过来，要求我们对同一个事件进行处理，这时候事件系统就需要考虑并发性的设计了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、处理并发性的事件系统设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    对于并发性的处理，许多常见的思路都给出了不同的处理办法，比如加锁就是一个比较好的处理办法。在执行触发的操作的时候，这是就对添加的函数进行滞后处理，这样可以避免在执行触发操作的时候，又塞入一个新的监听，造成触发隐藏问题。可以这样处理：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;local&lt;/span&gt; events =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;local&lt;/span&gt; eventHandleId = &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;local&lt;/span&gt; eventHandles =&lt;span&gt; {}

&lt;/span&gt;&lt;span&gt;local&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; AddListener(name, listener)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; listeners =&lt;span&gt; events[name]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; listeners &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;listeners不再是一个简单的table，通过多个标识符来标识&lt;/span&gt;
        listeners = { insert = {}, dirty = &lt;span&gt;false&lt;/span&gt;, executing = &lt;span&gt;false&lt;/span&gt;, destroyed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt; }
        events[name] &lt;/span&gt;=&lt;span&gt; listeners
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

    &lt;span&gt;local&lt;/span&gt; handleId = listeners[listener] &lt;span&gt;or&lt;/span&gt;&lt;span&gt; listeners.insert[listener]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; handleId &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        handleId &lt;/span&gt;= eventHandleId + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        eventHandleId &lt;/span&gt;=&lt;span&gt; handleId
        &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;如果在塞入的时候，该listeners正在被触发，则不执行立即塞入的操作，等下一个触发到来的时候执行&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; listeners.executing &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
            listeners.insert[listener] &lt;/span&gt;=&lt;span&gt; handleId
            listeners.dirty &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            listeners[listener] &lt;/span&gt;=&lt;span&gt; handleId
        &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;
        eventHandles[handleId] &lt;/span&gt;=&lt;span&gt; { name, listener }
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; handleId
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;local&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; RemoveListener(name, listener, handles)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; listeners =&lt;span&gt; events[name]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; listeners &lt;span&gt;then&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; listener &lt;span&gt;then&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; _, handleId &lt;span&gt;in&lt;/span&gt; &lt;span&gt;pairs&lt;/span&gt;(listeners) &lt;span&gt;do&lt;/span&gt;&lt;span&gt;
                eventHandles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; handles &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                    handles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;end&lt;/span&gt;
            &lt;span&gt;end&lt;/span&gt;
            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;标记其已经destroyed&lt;/span&gt;
            listeners.destroyed = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            events[name] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;
            &lt;span&gt;local&lt;/span&gt; handleId = listeners[listener] &lt;span&gt;or&lt;/span&gt;&lt;span&gt; listeners.insert[listener]
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; handleId &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                listeners[listener] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;
                listeners.insert[listener] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;
                eventHandles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; handles &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                    handles[handleId] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
                &lt;span&gt;end&lt;/span&gt;
            &lt;span&gt;end&lt;/span&gt;
        &lt;span&gt;end&lt;/span&gt;
    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;local&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; RemoveHandle(handleId)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; entry =&lt;span&gt; eventHandles[handleId]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; entry &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        RemoveListener(entry[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;], entry[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;local&lt;/span&gt; EventManager =&lt;span&gt; {}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Add(name, listener)
    AddListener(name, listener)
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Remove(name, listener)
    RemoveListener(name, listener)
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Clear()
    events &lt;/span&gt;=&lt;span&gt; {}
    eventHandles &lt;/span&gt;=&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt;&lt;span&gt; EventManager.Dispatch(name, ...)
    &lt;/span&gt;&lt;span&gt;local&lt;/span&gt; listeners =&lt;span&gt; events[name]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; listeners &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
        listeners.executing &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; listener, _ &lt;span&gt;in&lt;/span&gt; &lt;span&gt;pairs&lt;/span&gt;(listeners) &lt;span&gt;do&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;(listener) == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;then&lt;/span&gt;&lt;span&gt;
                listener(name, ...)
            &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
            &lt;span&gt;--&lt;/span&gt;&lt;span&gt;可能在执行listener的过程中回调执行了remove，所以需要检测一次是否退出&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; listeners.destroyed &lt;span&gt;then&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;
            &lt;span&gt;end&lt;/span&gt;
        &lt;span&gt;end&lt;/span&gt;
        &lt;span&gt;--&lt;/span&gt;&lt;span&gt;触发完后，再执行缓存的塞入检测&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; listeners.dirty &lt;span&gt;then&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; listener, handleId &lt;span&gt;in&lt;/span&gt; &lt;span&gt;pairs&lt;/span&gt;(listeners.insert) &lt;span&gt;do&lt;/span&gt;&lt;span&gt;
                listeners[listener] &lt;/span&gt;=&lt;span&gt; handleId
                listeners.insert[listener] &lt;/span&gt;= &lt;span&gt;nil&lt;/span&gt;
            &lt;span&gt;end&lt;/span&gt;&lt;span&gt;
            listeners.dirty &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
        &lt;span&gt;end&lt;/span&gt;&lt;span&gt;
        listeners.executing &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
    &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　　如果不用lua，改用c#来实现，则需要巧妙的运用c#中的链表来实现对应的操作，这儿我也给出一份c#链表的相关实现吧：）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EventListener
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;    name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Delegate  action;
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EventManger
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;EventListener&amp;gt;&amp;gt; listenList = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;EventListener&amp;gt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt; listenerStatus = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;EventListener&amp;gt;&amp;gt; addList = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;EventListener&amp;gt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;EventListener&amp;gt;&amp;gt; removeList = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;EventListener&amp;gt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找监听&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; EventListener GetListener(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name, Delegate action)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (action == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;EventListener&amp;gt; listEvent = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!listenList.TryGetValue(name, &lt;span&gt;out&lt;/span&gt; listEvent) || listEvent.Count &amp;lt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ls = listEvent.Find(l =&amp;gt; l.action.Method ==&lt;span&gt; action.Method);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ls;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加事件监听&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; EventListener AddEventListener(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name, Delegate action)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (action == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否已经有&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; listener =&lt;span&gt; GetListener(name, action);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (listener != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; listener;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new 可以用资源池代替&lt;/span&gt;
        listener = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EventListener();
        listener.name &lt;/span&gt;=&lt;span&gt; name;
        listener.action &lt;/span&gt;=&lt;span&gt; action;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次创建，则建立对应的dic&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;listenList.ContainsKey(name))
        {
            listenList.Add(name, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; List&amp;lt;EventListener&amp;gt;&lt;span&gt;());
            addList.Add(name, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; List&amp;lt;EventListener&amp;gt;&lt;span&gt;());
            removeList.Add(name, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; List&amp;lt;EventListener&amp;gt;&lt;span&gt;());
            listenerStatus.Add(name, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处于事件触发，则滞后处理&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (listenerStatus[name] &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            addList[name].Add(listener);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            listenList[name].Add(listener);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; listener;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除事件监听&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RemoveListener(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name, EventListener listener)
    {
        List&lt;/span&gt;&amp;lt;EventListener&amp;gt; deleteList = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(listenList.TryGetValue(name, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; deleteList))
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先删除addList中的监听&lt;/span&gt;
&lt;span&gt;            addList[name].Remove(listener);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(deleteList.Contains(listener))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果正在触发，则滞后&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (listenerStatus[name] &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    removeList[name].Add(listener);
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    deleteList.Remove(listener);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;归还到资源池去........&lt;/span&gt;
&lt;span&gt;                }
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件触发&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DispatchEvent(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;...............&lt;/span&gt;
        List&amp;lt;EventListener&amp;gt; ls = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(listenList.TryGetValue(name, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; ls))
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记正在触发&lt;/span&gt;
            listenerStatus[name]++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;            &lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; listener &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ls)
            {
                listener.action.DynamicInvoke(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; count = listenerStatus[name] - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            listenerStatus[name] &lt;/span&gt;=&lt;span&gt; count;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时执行滞后的增删操作&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(count &amp;lt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list =&lt;span&gt; addList[name];
                ls.AddRange(list);
                list.Clear();
                list &lt;/span&gt;=&lt;span&gt; removeList[name];
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; listener &lt;span&gt;in&lt;/span&gt;&lt;span&gt; list)
                    ls.Remove(listener);
                list.Clear();
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.......&lt;/span&gt;
&lt;span&gt;        }
    }



}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　用listenerStatus来标志是否处于事件触发的状态， 可以较为巧妙的避开同时对链表的操作，当然实际的应用在还会添加一些限定条件，判定条件，避免某些不符合常规的操作带来的风险，具体需要结合项目来进行相关的实现即可。好了，今天的文章就写到这儿，后续再继续更新 :D&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 22 Feb 2018 06:18:00 +0000</pubDate>
<dc:creator>zblade</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zblade/p/8458322.html</dc:identifier>
</item>
<item>
<title>Redis进阶实践之十一 Redis的Cluster集群搭建 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8458788.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8458788.html</guid>
<description>&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;     　　 本文档只对Redis的Cluster集群做简单的介绍，并没有对分布式系统的详细概念做深入的探讨。本文只是提供了有关如何设置集群、测试和操作集群的说明，而不涉及Redis集群规范中涵盖的细节，只是从用户的角度描述系统的行为。但是，本教程也试图从最终用户的角度来解释有关Redis Cluster的可用性和一致性特征的信息，并以简单易懂的方式讲解。&lt;/p&gt;&lt;p&gt;      　　请注意，本教程需要使用Redis 3.0版本或更高版本。&lt;/p&gt;&lt;p&gt;      　　如果您打算部署Redis的Cluster集群，即使不是严格的要求，我们也建议阅读更正式的规范。不过，从这篇文档开始，我们可以先使用Redis Cluster集群，然后再阅读规范也是一个不错的主意。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、Redis的Cluster模式介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;　　&lt;span&gt;&lt;strong&gt;1、Redis群集101&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;       　　　　Redis集群提供了一种运行Redis设备的方式，并且数据在多个Redis节点间也是自动分配的。Redis集群在分区期间也能提供一定程度的可用性，即在实际情况下能够在某些节点发生故障或无法通信时继续运行。 但是，如果发生较大故障（例如，大多数主站服务器不可用时），群集会停止运行。&lt;/p&gt;&lt;p&gt;     　　　　那么从实际角度而言，您使用Redis Cluster获得了什么？&lt;/p&gt;&lt;p&gt;     　　　　1、在多个节点之间自动分割数据集的能力。&lt;/p&gt;&lt;p&gt;     　　　　2、在节点子集遇到故障或无法与集群其余部分通信时继续运行的能力。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2、Redis群集TCP端口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;      　　　　每个Redis群集的节点都需要打开两个TCP连接。两个连接就需要两个端口，分别是用于为客户端提供服务的常规Redis TCP端口（例如6379）以及通过将10000添加到数据端口而获得的端口，因此示例中为16379。&lt;/p&gt;&lt;p&gt;     　　 　　第二个大号端口用于群集总线，即使用二进制协议的节点到节点通信通道。 节点使用群集总线进行故障检测，配置更新，故障转移授权等。 客户端不应尝试与群集总线端口通信，但始终使用正常的Redis命令端口，但请确保在防火墙中打开两个端口，否则Redis群集节点将无法通信。&lt;/p&gt;&lt;p&gt;     　　　　命令端口和集群总线端口偏移量是固定的，始终为10000。&lt;/p&gt;&lt;p&gt;     　　　　请注意，为了让Redis群集正常工作，您需要为每个节点：&lt;/p&gt;&lt;p&gt;       　　　　1、用于与客户端进行通信的普通客户端通信端口（通常为6379）对所有需要到达群集的客户端以及所有其他群集节点（使用客户端端口进行密钥迁移）都是开放的。&lt;/p&gt;&lt;p&gt;       　　　　2、集群总线端口（客户端端口+ 10000）必须可从所有其他集群节点访问。&lt;/p&gt;&lt;p&gt;    　　 　　如果您不打开这两个TCP端口，则您的群集将无法正常工作。&lt;/p&gt;&lt;p&gt;     　　　　集群总线使用不同的二进制协议进行节点到节点的数据交换，这更适合于使用很少的带宽和处理时间在节点之间交换信息。&lt;/p&gt;&lt;p&gt;     &lt;br/&gt;　　&lt;span&gt;&lt;strong&gt;3、Redis集群和Docker&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    　　　　目前，Redis群集不支持NAT地址环境，并且在IP地址或TCP端口被重新映射的一般环境中。&lt;/p&gt;&lt;p&gt;    　　　　Docker使用一种叫做端口映射的技术：Docker容器中运行的程序可能会暴露在与程序认为使用的端口不同的端口上。 这对于在同一服务器中同时使用相同端口运行多个容器很有用。&lt;/p&gt;&lt;p&gt;    　　　　为了使Docker与Redis Cluster兼容，您需要使用Docker的主机联网模式。 请查看Docker文档中的--net = host选项以获取更多信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　4、Redis集群数据分片&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;   　　　　 Redis集群没有使用一致的散列，而是一种不同的分片形式，其中每个 key 在概念上都是我们称之为散列槽的部分。&lt;/p&gt;&lt;p&gt;    　　　　Redis集群中有16384个散列槽，为了计算给定 key 的散列槽，我们简单地取16384模的CRC16。&lt;/p&gt;&lt;p&gt;   　　　　 Redis集群中的每个节点负责哈希槽的一个子集，例如，您可能有一个具有3个节点的集群，其中：&lt;/p&gt;&lt;p&gt;    　　　　　　 1、节点A包含从0到5500的散列槽。&lt;/p&gt;&lt;p&gt;     　　　　　　2、节点B包含从5501到11000的散列槽。&lt;/p&gt;&lt;p&gt;     　　　　　　3、节点C包含从11001到16383的散列槽。&lt;/p&gt;&lt;p&gt;    　　　　这允许轻松地添加和删除集群中的节点。例如，如果我想添加一个新节点D，我需要将节点A，B，C中的一些散列槽移动到D。同样，如果我想从集群中删除节点A，我可以只移动由A使用的散列槽到B和C，当节点A将为空时，我可以将它从群集中彻底删除。&lt;/p&gt;&lt;p&gt;     　　　　因为将散列槽从一个节点移动到另一个节点不需要停机操作，添加和移除节点或更改节点占用的散列槽的百分比也不需要任何停机时间。&lt;/p&gt;&lt;p&gt;     　　　　只要涉及单个命令执行（或整个事务或Lua脚本执行）的所有 key 都属于同一散列插槽，Redis群集就支持多个 key 操作。用户可以使用称为散列标签的概念强制多个 key 成为同一个散列槽的一部分。&lt;/p&gt;&lt;p&gt;     　　　　Hash标记记录在Redis集群规范文档中，但要点是如果在关键字{}括号内有一个子字符串，那么只有该花括号“{}”内部的内容被散列，例如 this{foo}key 和 another{foo}key 保证在同一散列槽中，并且可以在具有多个 key 作为参数的命令中一起使用。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　5、Redis集群之主从模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;   　　　　 为了在主服务器节点的子集失败或不能与大多数节点通信时保持可用，Redis集群使用主从模型，其中每个散列槽从1（主服务器本身）到N个副本（N -1个附加从节点）。&lt;/p&gt;&lt;p&gt;     　　　　在我们具有节点A，B，C的示例的群集中，如果节点B失败，则群集无法继续，因为我们没有办法再在5501-11000范围内提供散列槽。然而，当创建集群时（或稍后），我们为每个主服务器节点添加一个从服务器节点，以便最终集群由作为主服务器节点的A，B，C以及作为从服务器节点的A1，B1，C1组成，如果节点B发生故障，系统能够继续运行。节点B1复制B，并且B失败，则集群将促使节点B1作为新的主服务器节点并且将继续正确地操作。&lt;/p&gt;&lt;p&gt;    　　　　但请注意，如果节点B和B1在同一时间发生故障，则Redis群集无法继续运行。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　6、Redis集群一致性保证&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    　　　　Redis 集群无法保证很强的一致性。实际上，这意味着在某些情况下，Redis 集群可能会丢失系统向客户确认的写入。&lt;/p&gt;&lt;p&gt;    　　　　Redis集群可能会丢失写入的第一个原因是因为它使用异步复制。这意味着在写入期间会发生以下事情：&lt;/p&gt;&lt;p&gt;      　　　　　　1、你的客户端写给主服务器节点 B&lt;/p&gt;&lt;p&gt;      　　　　　　2、主服务器节点B向您的客户端回复确认。&lt;/p&gt;&lt;p&gt;      　　　　　　3、主服务器节点B将写入传播到它的从服务器B1，B2和B3。&lt;/p&gt;&lt;p&gt;     　　　　正如你可以看到主服务器节点 B 在回复客户端之前不等待B1，B2，B3的确认，因为这会对Redis造成严重的延迟损失，所以如果你的客户端写入了某些东西，主服务器节点 B 确认写入，就在将写入发送给它的从服务器节点存储之前系统崩溃了，其中一个从站（没有收到写入）可以提升为主站，永远丢失写入。&lt;/p&gt;&lt;p&gt;     　　　　这与大多数配置为每秒将数据刷新到磁盘的数据库所发生的情况非常相似，因为过去的经验与传统数据库系统有关，不会涉及分布式系统，因此您已经能够推断这种情况。同样，通过强制数据库在回复客户端之前刷新磁盘上的数据，这样可以提高一致性，但这通常会导致性能极低。这与Redis Cluster中的同步复制相当。&lt;/p&gt;&lt;p&gt;     　　　　基本上，性能和一致性之间需要权衡。&lt;/p&gt;&lt;p&gt;      　　　　Redis集群在绝对需要时也支持同步写入，通过WAIT命令实现，这使得丢失写入的可能性大大降低，但请注意，即使使用同步复制，Redis集群也不可能实现完全的一致性：总是有可能会发生故常，在无法接受写入的从设备被选为主设备的时候 。&lt;/p&gt;&lt;p&gt;     　　　　还有另一个值得注意的情况，Redis集群也将丢失数据的写入，这种情况发生在网络分区的时候，客户端与包含至少一个主服务器的少数实例隔离。&lt;/p&gt;&lt;p&gt;     　　　　以A，B，C，A1，B1，C1三个主站和三个从站组成的6个节点集群为例。还有一个客户，我们会调用Z1。&lt;/p&gt;&lt;p&gt;     　　　　分区发生后，可能在分区的一侧有A，C，A1，B1，C1，另一侧有B和Z1。&lt;/p&gt;&lt;p&gt;     　　　　Z1仍然能够写入B，它也会接受Z1的写入。如果分区在很短的时间内恢复，则群集将正常继续。但是，如果分区使用比较长的时间将B1提升为多数侧分区的主设备，则Z1发送给B的写入操作将丢失。&lt;/p&gt;&lt;p&gt;     　　　　请注意，Z1能够发送给B的写入量有一个最大窗口（maximum window）：如果分区多数侧有足够的时间选择一个从设备作为主设备，那么少数侧的每个主节点将停止接受写操作。&lt;/p&gt;&lt;p&gt;     　　　　这个时间值是Redis集群非常重要的配置指令，称为 node timeout (节点超时)。&lt;/p&gt;&lt;p&gt;     　　　　在节点超时过后，主节点被认为是失效的，并且可以被其副本之一替换。类似地，节点超时过后，主节点无法感知大多数其他主节点，它进入错误状态并停止接受写入。&lt;/p&gt;&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;7、Redis群集配置参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;     　　　　我们即将创建示例集群部署。在继续之前，让我们介绍一下Redis Cluster在redis.conf文件中引入的配置参数。有些命令的意思是显而易见的，有些命令在你阅读下面的解释后才会更加清晰。&lt;/p&gt;&lt;p&gt;       　　　　　　&lt;strong&gt;1、cluster-enabled &amp;lt;yes/no&amp;gt;&lt;/strong&gt;：如果想在特定的Redis实例中启用Redis群集支持就设置为yes。 否则，实例通常作为独立实例启动。&lt;/p&gt;&lt;p&gt;      　　　　　　 &lt;strong&gt;2、cluster-config-file &amp;lt;filename&amp;gt;&lt;/strong&gt;：请注意，尽管有此选项的名称，但这不是用户可编辑的配置文件，而是Redis群集节点每次发生更改时自动保留群集配置（基本上为状态）的文件，以便能够 在启动时重新读取它。 该文件列出了群集中其他节点，它们的状态，持久变量等等。 由于某些消息的接收，通常会将此文件重写并刷新到磁盘上。&lt;/p&gt;&lt;p&gt;       　　　　　　&lt;strong&gt;3、cluster-node-timeout &amp;lt;milliseconds&amp;gt;&lt;/strong&gt;：Redis群集节点可以不可用的最长时间，而不会将其视为失败。 如果主节点超过指定的时间不可达，它将由其从属设备进行故障切换。 此参数控制Redis群集中的其他重要事项。 值得注意的是，每个无法在指定时间内到达大多数主节点的节点将停止接受查询。&lt;/p&gt;&lt;p&gt;       　　　　　　&lt;strong&gt;4、cluster-slave-validity-factor &amp;lt;factor&amp;gt;&lt;/strong&gt;：如果设置为0，无论主设备和从设备之间的链路保持断开连接的时间长短，从设备都将尝试故障切换主设备。 如果该值为正值，则计算最大断开时间作为节点超时值乘以此选项提供的系数，如果该节点是从节点，则在主链路断开连接的时间超过指定的超时值时，它不会尝试启动故障切换。 例如，如果节点超时设置为5秒，并且有效因子设置为10，则与主设备断开连接超过50秒的从设备将不会尝试对其主设备进行故障切换。 请注意，如果没有从服务器节点能够对其进行故障转移，则任何非零值都可能导致Redis群集在主服务器出现故障后不可用。 在这种情况下，只有原始主节点重新加入集群时，集群才会返回可用。&lt;/p&gt;&lt;p&gt;       　　　　　　&lt;strong&gt;5、cluster-migration-barrier &amp;lt;count&amp;gt;&lt;/strong&gt;：主设备将保持连接的最小从设备数量，以便另一个从设备迁移到不受任何从设备覆盖的主设备。有关更多信息，请参阅本教程中有关副本迁移的相应部分。&lt;/p&gt;&lt;p&gt;      　　　　　　 &lt;strong&gt;6、cluster-require-full-coverage &amp;lt;yes / no&amp;gt;&lt;/strong&gt;：如果将其设置为yes，则默认情况下，如果key的空间的某个百分比未被任何节点覆盖，则集群停止接受写入。 如果该选项设置为no，则即使只处理关于keys子集的请求，群集仍将提供查询。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、创建和使用Redis群集&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;       　　注意：手动部署Redis群集，这对了解集群的操作细节方面是非常重要的。但是，如果想要启动群集并尽快运行（尽快），请跳过本节和下一节，直接使用create-cluster脚本直接创建Redis群集。&lt;/p&gt;&lt;p&gt;       　　要创建一个集群，我们需要做的第一件事是在集群模式下运行几个空的Redis实例。这就意味着群集不是使用普通的Redis实例创建的，因为需要配置特殊模式，以便Redis实例启用群集特定的功能和命令。&lt;/p&gt;&lt;p&gt;       　　以下是最小的Redis集群配置文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　port &lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
　　　　cluster&lt;/span&gt;-&lt;span&gt;enabled yes
　　　　cluster&lt;/span&gt;-config-&lt;span&gt;file nodes.conf
　　　　cluster&lt;/span&gt;-node-timeout &lt;span&gt;5000&lt;/span&gt;&lt;span&gt;
　　　　appendonly yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;       　　正如您所看到的那样，启用群集模就是使用 cluster-enabled 这个指令。 每个Redis的实例还包含存储此节点配置信息的文件的路径，默认情况下为nodes.conf。 这个文件内容永远不要人为地去修改，但是可以修改其名称，它仅在Redis集群实例启动时生成，并在每次需要时进行更新。&lt;/p&gt;&lt;p&gt;       　　请注意，按预期工作的最小群集需要至少包含三个主节点。 对于第一次测试，强烈建议启动一个由三个主服务器节点和三个从服务器节点组成的六个节点群集。我们通过以下步骤来一步一步的搭建Redis的Cluster集群环境。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       　　1、我们开始创建相关目录，主文件夹是redis-cluster，在此文件夹下建立6个子文件夹，名称分别是：7000,7001,7002,7003,7004,7005，该目录以我们将在任何给定目录内运行的实例的端口号命名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                             &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222124554093-2033094023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;                           &lt;strong&gt;然后创建6个子目录，如下图：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;                             &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222124650480-195599745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　　　mkdir redis-&lt;span&gt;cluster
　　　　　　cd redis&lt;/span&gt;-&lt;span&gt;cluster
　　　　　　mkdir &lt;/span&gt;&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;7001&lt;/span&gt; &lt;span&gt;7002&lt;/span&gt; &lt;span&gt;7003&lt;/span&gt; &lt;span&gt;7004&lt;/span&gt; &lt;span&gt;7005&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;                2、目录创建好以后，我们把Redis安装源文件里面配置文件redis.conf拷贝一份，存放在7000目录下，然后对其配置项进行修改，这个配置文件Redis.conf会作为其他Redis实例的配置文件的模板，并拷贝到其他目录。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                            &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222125253088-151857011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;    　　　　由于我们是做测试，并没有启动6个真正的物理节点，而是把6个Redis实例都部署在了同一台Linux服务器上，地址：192.168.127.130，为了区分Redis实例，我们是以不同的端口号来区分Redis实例的。然后我们修改Redis.conf的配置文件，修改项如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　　　　　bind &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定服务器IP地址&lt;/span&gt;
&lt;span&gt;
　　　　　　port &lt;/span&gt;&lt;span&gt;7000&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定端口号，必须修改，以此来区分Redis实例&lt;/span&gt;
&lt;span&gt;
　　　　　　daemonize yes  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后台运行&lt;/span&gt;
&lt;span&gt;
　　　　　　pidfile &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/run/redis-&lt;span&gt;7000&lt;/span&gt;.pid  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改pid进程文件名，以端口号命名&lt;/span&gt;
&lt;span&gt;
　　　　　　logfile &lt;/span&gt;/root/application/program/redis-cluster/&lt;span&gt;7000&lt;/span&gt;/redis.log  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改日志文件名称，以端口号为目录来区分&lt;/span&gt;
&lt;span&gt;
　　　　　　dir &lt;/span&gt;/root/application/program/redis-cluster/&lt;span&gt;7000&lt;/span&gt;/  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改数据文件存放地址，以端口号为目录名来区分&lt;/span&gt;
&lt;span&gt;
　　　　　　cluster&lt;/span&gt;-enabled yes  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;启用集群&lt;/span&gt;
&lt;span&gt;
　　　　　　cluster&lt;/span&gt;-config-file nodes-&lt;span&gt;7000&lt;/span&gt;.conf  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置每个节点的配置文件，同样以端口号为名称&lt;/span&gt;
&lt;span&gt;
　　　　　　cluster&lt;/span&gt;-node-timeout &lt;span&gt;15000&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置集群节点的超时时间，可改可不改&lt;/span&gt;
&lt;span&gt;
　　　　　　appendonly yes  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动AOF增量持久化策略&lt;/span&gt;
&lt;span&gt;
　　　　　  appendfsync always  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发生改变就记录日志&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    　　　&lt;span&gt;&lt;strong&gt;　3、7000目录下的Redis.conf配置文件修改后，分别拷贝到其他子目录，依次为：7001，7002，7003，7004，7005，根据上面的配置，我们只需修改和端口号有关的项目，在Linux系统下，我们通过命令：%s/7000/7001/g，：%s/7000/7002/g，：%s/7000/7002/g，：%s/7000/7003/g，：%s/7000/7004/g，：%s/7000/7005/g 分别进行全局替换，并保存，完成对其他子目录下的配置文件的修改。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　　　　　　　   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222130957355-1579167217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;    　　　　4、我们安装Redis的Cluster集群，需要使用Ruby命令，所以我们必须安装对Ruby的支持。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222131459882-1453452613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;                             &lt;span&gt;在此说明一下，以前的Redis版本下，需要安装Ruby和Rubygems，但是最新的版本不需要了，只要安装Ruby，Rubygems就会自动安装。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;                                &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222131734710-177806830.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　　　　　yum install ruby &lt;span&gt;//&lt;/span&gt;&lt;span&gt;安装ruby&lt;/span&gt;
　　　　　　　　yum install rubygems  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;安装rubygems，最新版本会自动安装&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;    　　　　5、我们安装完 Ruby 和 Rubygems 后，还需要继续安装Redis的Ruby接口程序。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　　　　gem install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　　　&lt;span&gt;安装Redis的ruby接口程序，可能会提示如下，错误：&lt;span class=&quot;postTitle2&quot;&gt;redis requires ruby version 2.2.2，怎么办呢？如果是第一次遇到这个问题，可能会困扰你一阵子，我这里也有解决方案，帮你解忧。地址如下：&lt;a href=&quot;http://www.cnblogs.com/PatrickLiu/p/8454579.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.cnblogs.com/PatrickLiu/p/8454579.html&lt;/span&gt;&lt;/a&gt;，&lt;/span&gt;按步骤执行就可以，一切顺利。&lt;/span&gt;&lt;br/&gt;　　　　　　　　&lt;br/&gt;&lt;span&gt;&lt;strong&gt;    　　　　6、开始启动我们6个Redis实例，并且要指定配置文件，这些配置文件分别在各自的子目录下面。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222132830144-34533514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　　　　　　　　　cd &lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
　　　　　　　　　　redis&lt;/span&gt;-&lt;span&gt;server redis.conf

　　　　　　　　　　cd &lt;/span&gt;&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
　　　　　　　　　　redis&lt;/span&gt;-&lt;span&gt;server redis.conf

　　　　　　　　　　cd &lt;/span&gt;&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
　　　　　　　　　　redis&lt;/span&gt;-&lt;span&gt;server redis.conf
　　　　
　　　　　　　　　　cd &lt;/span&gt;&lt;span&gt;7003&lt;/span&gt;&lt;span&gt;
　　　　　　　　　　redis&lt;/span&gt;-&lt;span&gt;server redis.conf

　　　　　　　　　　cd &lt;/span&gt;&lt;span&gt;7004&lt;/span&gt;&lt;span&gt;
　　　　　　　　　　redis&lt;/span&gt;-&lt;span&gt;server redis.conf

　　　　　　　　　　cd &lt;/span&gt;&lt;span&gt;7005&lt;/span&gt;&lt;span&gt;
　　　　　　　　　　redis&lt;/span&gt;-server redis.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;　　　　　　　　&lt;br/&gt;&lt;span&gt;&lt;strong&gt;    　　　　7、创建集群，执行redis-trib.rb脚本，这个脚本文件可以拷贝出来，我是把它放在这个目录：/root/application/program/redis/，当然在这个目录下，也有其他文件，比如redis-cli，redis-server等。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　　　　　ruby redis-trib.rb  create --replicas &lt;span&gt;1&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222133446173-110464053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;   　　　　　　　 我们有Redis集群命令行实用程序redis-trib的帮助，Ruby实用程序对实例执行特殊命令以创建新集群，检查或重新设置现有集群，等等。 redis-trib实用程序位于Redis源代码分发的src目录中，当然也可以拷贝到其他目录中，以方便使用。 您需要安装redis gem才能运行redis-trib。&lt;/p&gt;
&lt;p&gt;　　　　　　　　这里使用的命令是create，因为我们想创建一个新的集群。 选项--replicas 1 意味着我们需要为每个创建的主服务器节点创建一个从服务器节点。其他参数是我想用来创建新集群的实例的地址列表。&lt;/p&gt;&lt;p&gt;    　　　　　　  显然，我们要求的唯一设置是创建一个具有3个主站和3个从站的集群。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    　　　　8、 如果一切顺利，你会看到类似这样的消息： [OK] All 16384 slots covered， 这意味着至少有一个主实例服务于每个16384可用的插槽，成功创建了Redis的Cluster集群环境。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222134244222-172101482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;    　　　　9、分别登陆7000,7001,7002Redis的实例客户端，进行测试。效果如图：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  　　　　　　　　&lt;strong&gt;&lt;span&gt;1、登陆7000操作：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　　　　　　redis-cli -c -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;7000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;　　　　　　　　    　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222135718868-1101848627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;                            &lt;span&gt;&lt;strong&gt;2、登陆7001操作：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　　　　　　redis-cli -c -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;7001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222135838972-1695465768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;                            &lt;span&gt;&lt;strong&gt;3、登陆7002操作：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　　　　　　redis-cli -c -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.130&lt;/span&gt; -p &lt;span&gt;7002&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222135909218-1776634382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;    　　　　10、通过Cluster Nodes命令和Cluster Info命令来看看集群效果。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222135948068-358139492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;    　　　　11、在集群上通过增加数据来测试集群效果。直接看截图效果吧：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201802/1048776-20180222140033917-736142674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;    　　　　&lt;span&gt;每个Redis的节点都有一个ID值，此ID将被此特定redis实例永久使用，以便实例在集群上下文中具有唯一的名称。 每个节点都会记住使用此ID的每个其他节点，而不是通过IP或端口。IP地址和端口可能会发生变化，但唯一的节点标识符在节点的整个生命周期内都不会改变。 我们简单地称这个标识符为节点ID&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、使用创建群集脚本创建Redis群集&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    　　如果您不想通过如上所述手动配置和执行单个实例来创建Redis群集，则有一个更简单的系统可以代替以上操作（但您不会学到相同数量的操作细节）。&lt;/p&gt;&lt;p&gt;    　　只需在Redis发行版中检查 utils/create-cluster 目录即可。 里面有一个名为create-cluster的脚本（与其包含的目录名称相同），它是一个简单的bash脚本。 要启动具有3个主站和3个从站的6个节点群集，只需输入以下命令：&lt;br/&gt;        &lt;br/&gt;        　　 1、create-cluster start&lt;/p&gt;&lt;p&gt;        　　 2、create-cluster create&lt;/p&gt;&lt;p&gt;    　　当redis-trib实用程序希望您接受集群布局时，在步骤2中回复yes。&lt;/p&gt;&lt;p&gt;    　　您现在可以与群集交互，默认情况下，第一个节点将从端口30001开始。 完成后，停止群集：&lt;/p&gt;&lt;p&gt;        　　1、create-cluster stop.&lt;/p&gt;&lt;p&gt;    　　请阅读此目录中的自述文件以获取有关如何运行脚本的更多信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、测试故障转移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    　　注意：在此测试期间，应该运行一致性测试应用程序时打开选项卡。&lt;/p&gt;&lt;p&gt;    　　为了触发故障转移，我们可以做的最简单的事情（这也是分布式系统中可能发生的语义上最简单的故障）是使单个进程崩溃，在我们的当前的情况下就是单个主进程。&lt;/p&gt;&lt;p&gt;    　　我们可以识别一个集群并使用以下命令将其崩溃：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
          　　 $ redis-cli -p &lt;span&gt;7000&lt;/span&gt; cluster nodes |&lt;span&gt; grep master
          　　 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385482984082&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; connected &lt;span&gt;5960&lt;/span&gt;-&lt;span&gt;10921&lt;/span&gt;&lt;span&gt;
          　　 2938205e12de373867bf38f1ca29d31d0ddb3e46 &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385482983582&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; connected &lt;span&gt;11423&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt;&lt;span&gt;
          　　 97a3a64667477371c4479320d683e4c8db5858b1 :&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; myself,master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; connected &lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5959&lt;/span&gt; &lt;span&gt;10922&lt;/span&gt;-&lt;span&gt;11422&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    　　好吧，7000,7001和7002都是主服务器节点。 让我们用 DEBUG SEGFAULT 命令使节点7002崩溃：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        　　 $ redis-cli -p &lt;span&gt;7002&lt;/span&gt;&lt;span&gt; debug segfault
        　　 Error: Server closed the connection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    　　现在我们可以看一致性测试的输出以查看它报告的内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    　　　　&lt;span&gt;18849&lt;/span&gt; R (&lt;span&gt;0&lt;/span&gt; err) | &lt;span&gt;18849&lt;/span&gt; W (&lt;span&gt;0&lt;/span&gt; err) |
    　　　　&lt;span&gt;23151&lt;/span&gt; R (&lt;span&gt;0&lt;/span&gt; err) | &lt;span&gt;23151&lt;/span&gt; W (&lt;span&gt;0&lt;/span&gt; err) |
    　　　　&lt;span&gt;27302&lt;/span&gt; R (&lt;span&gt;0&lt;/span&gt; err) | &lt;span&gt;27302&lt;/span&gt; W (&lt;span&gt;0&lt;/span&gt; err) |&lt;span&gt;
    　　　　... many error warnings here ...
   
    　　　　&lt;/span&gt;&lt;span&gt;29659&lt;/span&gt; R (&lt;span&gt;578&lt;/span&gt; err) | &lt;span&gt;29660&lt;/span&gt; W (&lt;span&gt;577&lt;/span&gt; err) |
    　　　　&lt;span&gt;33749&lt;/span&gt; R (&lt;span&gt;578&lt;/span&gt; err) | &lt;span&gt;33750&lt;/span&gt; W (&lt;span&gt;577&lt;/span&gt; err) |
    　　　　&lt;span&gt;37918&lt;/span&gt; R (&lt;span&gt;578&lt;/span&gt; err) | &lt;span&gt;37919&lt;/span&gt; W (&lt;span&gt;577&lt;/span&gt; err) |
    　　　　&lt;span&gt;42077&lt;/span&gt; R (&lt;span&gt;578&lt;/span&gt; err) | &lt;span&gt;42078&lt;/span&gt; W (&lt;span&gt;577&lt;/span&gt; err) |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    　　　　正如您在故障转移期间所看到的，系统无法接受578次读取和577次写入，但是在数据库中未创建任何不一致。 这听起来可能会出乎意料，因为在本教程的第一部分中，我们声明Redis群集在故障转移期间可能会丢失写入，因为它使用异步复制。 我们没有说的是，这种情况不太可能发生，因为Redis会将答复发送给客户端，并将命令复制到从服务器，同时，因此会有一个非常小的窗口来丢失数据。 但是很难触发这一事实并不意味着这是不可能的，所以这不会改变Redis集群提供的一致性保证。&lt;/p&gt;&lt;p&gt;    　　　　现在我们可以检查故障转移后的群集设置（注意，在此期间，我重新启动了崩溃的实例，以便它重新加入作为从属群集）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    　　　　　　$ redis-cli -p &lt;span&gt;7000&lt;/span&gt;&lt;span&gt; cluster nodes
    　　　　　　3fc783611028b1707fd65345e763befb36454d73 &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt; slave 3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385503418521&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; connected
    　　　　　　a211e242fc6b22a9427fed61285e85892fa04e08 &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt; slave 97a3a64667477371c4479320d683e4c8db5858b1 &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385503419023&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; connected
    　　　　　　97a3a64667477371c4479320d683e4c8db5858b1 :&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; myself,master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; connected &lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5959&lt;/span&gt; &lt;span&gt;10922&lt;/span&gt;-&lt;span&gt;11422&lt;/span&gt;&lt;span&gt;
    　　　　　　3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385503419023&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; connected &lt;span&gt;11423&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt;&lt;span&gt;
    　　　　　　3e3a6cb0d9a9a87168e266b0a0b24026c0aae3f0 &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385503417005&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; connected &lt;span&gt;5960&lt;/span&gt;-&lt;span&gt;10921&lt;/span&gt;&lt;span&gt;
    　　　　　　2938205e12de373867bf38f1ca29d31d0ddb3e46 &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; slave 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1385503418016&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; connected
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    　　　　现在，主服务器节点正在端口7000,7001和7002上运行。以前是主服务器节点，即运行在端口7005上的Redis实例，现在是7002的从服务器节点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        　　　　Node ID
   　　　　　　 ip:port
   　　　　　　 flags: master, slave, myself, fail, ...
    　　　　　　&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; it &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a slave, the Node ID of the master
    　　　　　　Time of the last pending PING still waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; a reply.
       　　　　Time of the last PONG received.
        　　　 Configuration epoch &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt; node (see the Cluster specification).
       　　　　Status of the link to &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; node.
        　　　 Slots served...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;六、手动故障转移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    　　有时，强制进行故障转移并不会在主服务器上导致任何问题。例如，为了升级其中一个主节点的Redis进程，最好将其故障转移，以便将其转变为一个对可用性影响最小的从服务器。&lt;/p&gt;&lt;p&gt;    　　Redis Cluster使用CLUSTER FAILOVER命令支持手动故障转移，该命令必须在要故障转移的主服务器的一个从服务器上执行。&lt;/p&gt;&lt;p&gt;    　　手动故障转移是比较特殊的，并且与实际主控故障导致的故障转移相比更安全，因为它们是以避免数据丢失的方式发生，只有在系统确定新主服务器节点处理完全部来自旧主服务器节点的复制流后才将客户从原始主服务器节点切换到新主服务器节点。&lt;/p&gt;&lt;p&gt;    　　这是您在执行手动故障转移时在从服务器节点的日志中看到的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       　　＃接受用户的手动故障转移请求。
       　　＃已暂停的主服务器手动故障转移接收复制的偏移量：&lt;/span&gt;&lt;span&gt;347540&lt;/span&gt;&lt;span&gt;
       　　＃处理所有主服务器节点的复制流，手动故障转移可以开始。
       　　＃选举开始延迟0毫秒（等级＃&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;，偏移量347540）。
       　　＃为epoch 7545启动故障转移选举。
       　　＃故障转移选举胜出：我是新主人。

          # Manual failover user request accepted.
       　　# Received replication offset &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; paused master manual failover: &lt;span&gt;347540&lt;/span&gt;&lt;span&gt;
      　　 # All master replication stream processed, manual failover can start.
      　　 # Start of election delayed &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; milliseconds (rank #&lt;span&gt;0&lt;/span&gt;, offset &lt;span&gt;347540&lt;/span&gt;&lt;span&gt;).
       　　# Starting a failover election &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; epoch &lt;span&gt;7545&lt;/span&gt;&lt;span&gt;.
       　　# Failover election won: I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m the new master.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    　　基本上连接到我们正在故障转移的主服务器节点上的客户端都已停止工作。与此同时，主服务器节点将其复制偏移量发送给从服务器节点，该从服务器节点将等待达到其侧面的偏移量。当达到复制偏移量时，将启动故障转移，并向旧主服务器通知配置开关。 当旧主服务器节点上的客户端被解锁时，它们会被重定向到新主服务器。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;七、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;     　今天就写到这里了，关于Cluster的内容还没有写完，有关动态扩容的内容将在下一篇文章做详细介绍。这篇文章对很多东西没有做更细致的探讨，只是从用户的角度来简单说明一下如何搭建Redis的Cluster集群环境。革命尚未成功，我还需努力。&lt;/p&gt;
</description>
<pubDate>Thu, 22 Feb 2018 06:07:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8458788.html</dc:identifier>
</item>
<item>
<title>JavaWeb项目架构之NFS文件服务器 - 小柒2012</title>
<link>http://www.cnblogs.com/smallSevens/p/8458654.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smallSevens/p/8458654.html</guid>
<description>&lt;h2 id=&quot;nfs简介&quot;&gt;NFS简介&lt;/h2&gt;
&lt;p&gt;NFS（Network File System）即网络文件系统。&lt;/p&gt;
&lt;p&gt;主要功能：通过网络（局域网）让不同的主机系统之间可以共享文件或目录。&lt;/p&gt;
&lt;p&gt;主要用途：NFS网络文件系统一般被用来存储共享视频，图片，附件等静态资源文件。&lt;/p&gt;
&lt;h2 id=&quot;nfs存储服务&quot;&gt;NFS存储服务&lt;/h2&gt;
&lt;h5 id=&quot;无nfs文件共享存储&quot;&gt;无NFS文件共享存储&lt;/h5&gt;
&lt;p&gt;当用户A通过互联网上传文件时，经过负载均衡，随机或者定向分配到某个节点。但是当用户B去下载这个文件的时候，并不确定会向哪个节点发送请求，这样会导致用户存在一定几率下载不到的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109211/201802/109211-20180222132100285-117020490.png&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;有nfs文件共享存储&quot;&gt;有NFS文件共享存储&lt;/h5&gt;
&lt;p&gt;当用户A通过互联网上传文件时，经过负载均衡，无论发送到哪个节点都会被存储到NFS文件服务器。但是当用户B去下载这个文件的时候，任何节点都可以读取NFS文件服务器的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109211/201802/109211-20180222132107106-989453089.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;nfs服务的优缺点&quot;&gt;NFS服务的优缺点&lt;/h2&gt;
&lt;h4 id=&quot;优点&quot;&gt;优点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;简单容易上手&lt;/li&gt;
&lt;li&gt;方便部署非常快速，维护十分简单&lt;/li&gt;
&lt;li&gt;节省本地存储空间将常用的数据存放在一台服务器可以通过网络访问&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;在高并发下NFS效率/性能有限&lt;/li&gt;
&lt;li&gt;NFS的数据是明文的，对数据完整性不做验证&lt;/li&gt;
&lt;li&gt;多台机器挂载NFS服务器时，连接管理维护麻烦&lt;/li&gt;
&lt;li&gt;容易发生单点故障，如果服务端宕机，所有客户端将不能访问&lt;/li&gt;
&lt;li&gt;客户端没用用户认证机制，且数据是通过明文传送，安全性一般（一般建议在局域网内使用）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;rpc工作流程&quot;&gt;RPC工作流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109211/201802/109211-20180222132131221-269449227.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;NFS支持的功能非常多，不同的功能会有不同的服务来完成，很多服务都需要监听在一些端口，其中的很多端口并不是固定的。这些服务在启动时，都需要向rpcbind服务注册一个端口，rpcbind服务随机选取一个未被使用的端口予以分配。rpcbind服务监听在111端口，所以rpcbind的主要功能就是指定每个RPC service对应的port number，并且通知给客户端，让客户端连接到正确的端口上去。&lt;/p&gt;
&lt;p&gt;客户端向NFS服务器端请求的步骤：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;首先用户访问网站程序，由程序在NFS客户端上发出存取NFS文件的请求，这是NFS客户端的RPC服务就不通过网络向NFS服务器端的RPC服务的111端口发出NFS文件存取功能的查询请求，包括要实现的什么功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;NFS服务器端的RPC服务找到对应的已注册的NFS端口，通知NFS客户端的RPC服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;此时NFS客户端获取到正确的端口，并与NFS联机存取数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;NFS客户端把数据存取成功后，返回给客户端程序，告知用户存取结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：由于rpc service在启动时需要向rpcbind注册端口，所以rpcbind要先启动。另外若rpcbind重新启动，原来注册的数据也会不见，因此一但rpcbind重新启动，让所管理的服务因为需要重新启动以重新向rpcbind注册。&lt;/p&gt;
&lt;h2 id=&quot;nfs服务器端配置&quot;&gt;NFS服务器端配置&lt;/h2&gt;
&lt;p&gt;NFS服务器：192.168.1.180&lt;/p&gt;
&lt;h5 id=&quot;检查并安装nfs&quot;&gt;检查并安装NFS&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;[root@iZ2ze74fkxrls31tr2ia2fZ ~]# rpm -qa rpcbind nfs-utils
nfs-utils-1.3.0-0.48.el7_4.1.x86_64
rpcbind-0.2.0-42.el7.x86_64&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果没有，安装 NFS 服务器所需的软件包，实际上需要安装两个包nfs-utils(nfs服务主程序)和rpcbind(rpc主程序), 不过当使用yum安装nfs-utils时会把rpcbind一起安装上。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum install -y nfs-utils&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;配置说明&quot;&gt;配置说明&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;/etc/sysconfig/nfs #NFS的主配置文件
/etc/exports       #配置共享目录的文件&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;/etc/exports的配置格式：&lt;/p&gt;
&lt;p&gt;nfs共享目录 nfs客户端地址1（参1，参2.....） 客户端地址2（参1，参2...）&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;nfs共享目录：为nfs服务器要共享的实际目录，绝对目录。注意权限问题。&lt;/p&gt;
&lt;p&gt;nfs客户端地址：为nfs服务器授权可以访问的客户端的地址，可以是单独的ip地址或主机名，域名。也可以是整个网段。&lt;/p&gt;
&lt;p&gt;授权整个网段：eg：10.0.0.0/24&lt;/p&gt;
&lt;p&gt;文件配置实例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/data/fileserver 192.168.1.190(rw,sync,no_root_squash)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;若服务器端对/etc/exports文件进行了修改，可以通过exportfs命令重新加载服务而不需要重启服务。若重启服务需要重新向prcbind注册，而且对客户端的影响也很大，所以尽量使用exportfs命令来使配置文件生效。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;exportfs：
exportfs -ar      #重新导出所有的文件系统
exportfs -r       #导出某个文件系统
exportfs -au      #关闭导出的所有文件系统
exportfs -u       #关闭指定的导出的文件系统&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;相关参数-man-exports&quot;&gt;相关参数 （man exports）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;A. 选项：选项用来设置输出目录的访问权限、用户映射等。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;设置输出目录只读：ro&lt;/li&gt;
&lt;li&gt;设置输出目录读写：rw&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;B. 用户映射选项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;all_squash：将远程访问的所有普通用户及所属组都映射为匿名用户或用户组（nfsnobody）；&lt;/li&gt;
&lt;li&gt;no_all_squash：与all_squash取反（默认设置）；&lt;/li&gt;
&lt;li&gt;root_squash：将root用户及所属组都映射为匿名用户或用户组（默认设置）；&lt;/li&gt;
&lt;li&gt;no_root_squash：与rootsquash取反；&lt;/li&gt;
&lt;li&gt;anonuid=xxx：将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户（UID=xxx）；&lt;/li&gt;
&lt;li&gt;anongid=xxx：将远程访问的所有用户组都映射为匿名用户组账户，并指定该匿名用户组账户为本地用户组账户（GID=xxx）；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;C. 其它选项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;secure：限制客户端只能从小于1024的tcp/ip端口连接nfs服务器（默认设置）；&lt;/li&gt;
&lt;li&gt;insecure：允许客户端从大于1024的tcp/ip端口连接服务器；&lt;/li&gt;
&lt;li&gt;sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；&lt;/li&gt;
&lt;li&gt;async：将数据先保存在内存缓冲区中，必要时才写入磁盘；&lt;/li&gt;
&lt;li&gt;wdelay：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率（默认设置）；&lt;/li&gt;
&lt;li&gt;no_wdelay：若有写操作则立即执行，应与sync配合使用；&lt;/li&gt;
&lt;li&gt;subtree：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置)；&lt;/li&gt;
&lt;li&gt;no_subtree：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;启动nfs服务端上nfs服务&quot;&gt;启动NFS服务端上nfs服务&lt;/h5&gt;
&lt;p&gt;1、先为rpcbind和nfs做开机启动：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;systemctl enable rpcbind.service
systemctl enable nfs-server.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、然后分别启动rpcbind和nfs服务：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;systemctl start rpcbind.service
systemctl start nfs-server.service&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;查看服务是否启动&quot;&gt;查看服务是否启动&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;[root@iZ2ze74fkxrls31tr2ia2fZ ~]# rpcinfo -p
   program vers proto   port  service
    100000    4   tcp    111  portmapper
    100000    3   tcp    111  portmapper
    100000    2   tcp    111  portmapper
    100000    4   udp    111  portmapper
    100000    3   udp    111  portmapper
    100000    2   udp    111  portmapper
    100024    1   udp  47426  status
    100024    1   tcp  35379  status
    100005    1   udp  20048  mountd
    100005    1   tcp  20048  mountd
    100005    2   udp  20048  mountd
    100005    2   tcp  20048  mountd
    100005    3   udp  20048  mountd
    100005    3   tcp  20048  mountd
    100003    3   tcp   2049  nfs
    100003    4   tcp   2049  nfs
    100227    3   tcp   2049  nfs_acl
    100003    3   udp   2049  nfs
    100003    4   udp   2049  nfs
    100227    3   udp   2049  nfs_acl
    100021    1   udp  53046  nlockmgr
    100021    3   udp  53046  nlockmgr
    100021    4   udp  53046  nlockmgr
    100021    1   tcp  38280  nlockmgr
    100021    3   tcp  38280  nlockmgr
    100021    4   tcp  38280  nlockmgr&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用exportfs查看本机上已经共享的目录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;exportfs&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;nfs客户端配置&quot;&gt;NFS客户端配置&lt;/h2&gt;
&lt;p&gt;NFS客户端：192.168.1.190&lt;/p&gt;
&lt;h4 id=&quot;安装nfs并启动服务&quot;&gt;安装nfs，并启动服务。&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;yum install -y nfs-utils
systemctl enable rpcbind.service
systemctl start rpcbind.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;客户端不需要启动nfs服务，只需要启动rpcbind服务。&lt;/p&gt;
&lt;h5 id=&quot;检查-nfs-服务器端是否有目录共享&quot;&gt;检查 NFS 服务器端是否有目录共享&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;showmount -e 192.168.1.180&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;挂载远程服务&quot;&gt;挂载远程服务&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;mount -t nfs  192.168.1.180:/data/fileserver  /data/itstyle&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;查看挂载&quot;&gt;查看挂载&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;df -h&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;开机挂载编辑etcfstab&quot;&gt;开机挂载，编辑/etc/fstab&lt;/h5&gt;
&lt;p&gt;vim /etc/fstab 加入以下内容：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 设备文件  挂载点  文件系统类型  mount参数  dump参数  fsck顺序
192.168.1.180:/data/fileserver /data/itstyle nfs defaults,_netdev 0 0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;_netdev明确说明这是网络文件系统，避免网络启动前挂载出现错误。&lt;/p&gt;
&lt;p&gt;保存后，重新挂载 /etc/fstab 里面的内容。&lt;br/&gt;mount -a&lt;/p&gt;
</description>
<pubDate>Thu, 22 Feb 2018 05:22:00 +0000</pubDate>
<dc:creator>小柒2012</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smallSevens/p/8458654.html</dc:identifier>
</item>
<item>
<title>Material使用11 核心模块和共享模块、 如何使用@angular/material - NeverCtrl_C</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/8458605.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/8458605.html</guid>
<description>&lt;h2&gt;1 创建项目&lt;/h2&gt;
&lt;h3&gt;　　1.1 版本说明&lt;/h3&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222114554258-604566699.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222114621622-1102919321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　1.2 创建模块&lt;/h3&gt;
&lt;h4&gt;　　　　1.2.1 核心模块&lt;/h4&gt;
&lt;p&gt;　　　　　　该模块只加载一次，主要存放一些核心的组件及服务&lt;/p&gt;
&lt;p&gt;　　　　　　ng g m core&lt;/p&gt;
&lt;h5&gt;　　　　　　1.2.1.1 创建一些核心组件&lt;/h5&gt;
&lt;p&gt;　　　　　　　　页眉组件：header&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　ng g c core/header --module core&lt;/p&gt;
&lt;p&gt;　　　　　　　　内容组件：main&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　ng g c core/main --module core&lt;/p&gt;
&lt;p&gt;　　　　　　　　页脚组件：footer&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　ng g c core/footer --module core&lt;/p&gt;
&lt;p&gt;　　　　　　1.2.1.2 如何让核心模块只加载一次&lt;/p&gt;
&lt;p&gt;　　　　　　　　在核心模块对应类中的构造器中增添如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  constructor( @Optional() @SkipSelf() parent: CoreModule) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parent) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error('核心模块已经加载了，请勿重复加载'&lt;span&gt;);
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_21b038cf-84a1-4962-9535-87ba8e6058ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_21b038cf-84a1-4962-9535-87ba8e6058ed&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_21b038cf-84a1-4962-9535-87ba8e6058ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
import { NgModule,  SkipSelf, Optional } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import { HeaderComponent } from &lt;/span&gt;'./header/header.component'&lt;span&gt;;
import { MainComponent } from &lt;/span&gt;'./main/main.component'&lt;span&gt;;
import { FooterComponent } from &lt;/span&gt;'./footer/footer.component'&lt;span&gt;;


@NgModule({
  imports: [
    CommonModule
  ],
  declarations: [
    HeaderComponent,
    MainComponent,
    FooterComponent
  ],
  exports: [
    HeaderComponent,
    MainComponent,
    FooterComponent
  ]
})
export class CoreModule { 
  constructor( @Optional() @SkipSelf() parent: CoreModule) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parent) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error('核心模块已经加载了，请勿重复加载'&lt;span&gt;);
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　　　代码解释：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　@SkipSelf() -&amp;gt; 该注解的作用是告诉应用在进行依赖注入时要排除自身（即：不想从当前元素获取依赖），这样注入器就会从一个在自己 &lt;em&gt;上一级&lt;/em&gt; 的组件开始搜索一个CoreModule依赖；如果不添加时就会出现解析错误：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222121340247-140127886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　@Optional() -&amp;gt; 该注解的作用是保证依赖找不到时报错，当&lt;span&gt;CoreModule&lt;/span&gt;不存在时就进行了依赖注入就会报错；当无法确保依赖是否存在的情况下，而又为了避免抛出找不到依赖的错误情况，可以使用@Optional()注解，这样该依赖是可选的，此处我们是为了保证都次导入核心模块时不依赖注入&lt;span&gt;CoreModule；如果不添加就会出现实例找不到的错误：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222121429451-1152051000.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;　　　　1.2.2 共享模块&lt;/h4&gt;
&lt;p&gt;　　　　　　该模块可以多次加载，将一些公用的组件和模块放到该模块下并做导出操作&lt;/p&gt;
&lt;p&gt;　　　　　　ng g m shared&lt;/p&gt;
&lt;h3&gt;　　1.3 构建应用大体结构&lt;/h3&gt;
&lt;p&gt;　　　　利用flex布局实现三段式布局，&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool&quot; target=&quot;_blank&quot;&gt;flex布局详解&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;　　　　1.3.1 模块导入&lt;/h4&gt;
&lt;p&gt;　　　　　　在主模块中导入核心模块和共享模块&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222121650591-1974554381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　1.3.2 重构主组件　　　　　&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;site&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-header&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-main&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-footer&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　坑01：虽然已经在主模块中导入了核心模块，但是在主模块中的所有组件只可以用核心模块中导出的东西&lt;/p&gt;
&lt;p&gt;　　　　　　技巧01：在核心模块中导出主模块中需要用到的三个组件　　&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222122327205-467409128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc88fcd3-3931-4a7a-bbc7-0e55103e057b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc88fcd3-3931-4a7a-bbc7-0e55103e057b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc88fcd3-3931-4a7a-bbc7-0e55103e057b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
import { NgModule,  SkipSelf, Optional } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import { HeaderComponent } from &lt;/span&gt;'./header/header.component'&lt;span&gt;;
import { MainComponent } from &lt;/span&gt;'./main/main.component'&lt;span&gt;;
import { FooterComponent } from &lt;/span&gt;'./footer/footer.component'&lt;span&gt;;


@NgModule({
  imports: [
    CommonModule
  ],
  declarations: [
    HeaderComponent,
    MainComponent,
    FooterComponent
  ],
  exports: [
    HeaderComponent,
    MainComponent,
    FooterComponent
  ]
})
export class CoreModule { 
  constructor( @Optional() @SkipSelf() parent: CoreModule) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parent) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error('核心模块已经加载了，请勿重复加载'&lt;span&gt;);
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　1.3.3 添加全局样式&lt;/h4&gt;
&lt;p&gt;　　　　　　在全局样式中利用flex布局实现主组件的三段式布局&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;html, body, app-root, mat-sidenav-container, .site &lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;
}&lt;span&gt;

.site &lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;&lt;span&gt;
    flex-direction&lt;/span&gt;:&lt;span&gt; column&lt;/span&gt;;
}&lt;span&gt;

header &lt;/span&gt;{&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; skyblue&lt;/span&gt;;
}&lt;span&gt;

main &lt;/span&gt;{&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; grey&lt;/span&gt;;&lt;span&gt;
    flex&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;
}&lt;span&gt;

footer &lt;/span&gt;{&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; skyblue&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　1.3.4 效果展示&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222122606825-1617861716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2 @angular/material使用&lt;/h2&gt;
&lt;h3&gt;　　2.1 安装 material 和 cdk&lt;/h3&gt;
&lt;p&gt;　　　　@angular/cdk -&amp;gt; ng 对于 ui 组建的基础架构，是由 material 团队开发与维护的, 之所以会有 cdk 看样子是因为在开发 material 的时候随便抽象一个层次出来给大家用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save @angular/material @angular/cdk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　技巧01：推荐使用cnpm安装&lt;/p&gt;
&lt;h3&gt;　　2.2 安装 animations&lt;/h3&gt;
&lt;p&gt;　　　　一些 material 组件需要依赖 @angular/animations 来实现动画跳转&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install --save @angular/animations
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　技巧01：仅仅安装 @angular/animations 是没有用的，还需要在核心模块或者是主模块中导入&lt;code class=&quot;lang-ts docs-markdown-code&quot;&gt;BrowserAnimationsModule&lt;/code&gt;或者&lt;code class=&quot;lang-ts docs-markdown-code&quot;&gt;NoopAnimationsModule&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222123346642-137887328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_44d5ff98-3858-4c5a-a6ba-4949b64fc142&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_44d5ff98-3858-4c5a-a6ba-4949b64fc142&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_44d5ff98-3858-4c5a-a6ba-4949b64fc142&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
import { BrowserModule } from '@angular/platform-browser'&lt;span&gt;;
import { BrowserAnimationsModule } from &lt;/span&gt;'@angular/platform-browser/animations'&lt;span&gt;;
import { NgModule } from &lt;/span&gt;'@angular/core'&lt;span&gt;;


import { AppComponent } from &lt;/span&gt;'./app.component'&lt;span&gt;;
import { TestModule } from &lt;/span&gt;'./test/test.module'&lt;span&gt;;
import { CoreModule } from &lt;/span&gt;'./core/core.module'&lt;span&gt;;
import { SharedModule } from &lt;/span&gt;'./shared/shared.module'&lt;span&gt;;



@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    CoreModule,
    SharedModule,
    TestModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　2.3 引入material内置主题&lt;/h3&gt;
&lt;p&gt;　　　　在全局演示用利用 @import 引入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@import '~_@angular_material@5.2.2@@angular/material/prebuilt-themes/deeppurple-amber.css';&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　2.4 手势支持&lt;/h3&gt;
&lt;p&gt;　　　　由于material是一个支持多种设备终端的组件库，为了支持一些移动端设备material组件用到了HammerJS，如果没有HammerJS就可能出现某些移动端不能正常显示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cnpm install --save hammerjs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　技巧01：仅仅安装hammerjs还不行，还需要在核心模块或者主模块中引入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import 'hammerjs';&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222124859837-1592923979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_494b0835-3f85-4686-98ba-ff291941d784&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_494b0835-3f85-4686-98ba-ff291941d784&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_494b0835-3f85-4686-98ba-ff291941d784&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
import { NgModule,  SkipSelf, Optional } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import { BrowserAnimationsModule } from &lt;/span&gt;'@angular/platform-browser/animations'&lt;span&gt;;
import { HeaderComponent } from &lt;/span&gt;'./header/header.component'&lt;span&gt;;
import { MainComponent } from &lt;/span&gt;'./main/main.component'&lt;span&gt;;
import { FooterComponent } from &lt;/span&gt;'./footer/footer.component'&lt;span&gt;;

import &lt;/span&gt;'hammerjs'&lt;span&gt;;

@NgModule({
  imports: [
    CommonModule,
    BrowserAnimationsModule
  ],
  declarations: [
    HeaderComponent,
    MainComponent,
    FooterComponent
  ],
  exports: [
    HeaderComponent,
    MainComponent,
    FooterComponent
  ]
})
export class CoreModule { 
  constructor( @Optional() @SkipSelf() parent: CoreModule) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (parent) {
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error('核心模块已经加载了，请勿重复加载'&lt;span&gt;);
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;3 MatSidenavModule的使用&lt;/h2&gt;
&lt;h3&gt;　　3.1 导入MatSidenavModule&lt;/h3&gt;
&lt;p&gt;　　　　在共享模块中导入并导出MatSidenavModule&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222125206760-559843746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4211d363-9ec7-4976-befc-bb8c9944fb68&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4211d363-9ec7-4976-befc-bb8c9944fb68&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4211d363-9ec7-4976-befc-bb8c9944fb68&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
import { NgModule } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import  { 
  MatSidenavModule
} from &lt;/span&gt;'@angular/material'&lt;span&gt;;

@NgModule({
  imports: [
    CommonModule,
    MatSidenavModule
  ],
  declarations: [],
  exports: [
    MatSidenavModule
  ]
})
export class SharedModule { }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　3.2 使用MatSidenavModule中的组件&lt;/h3&gt;
&lt;p&gt;　　　　使用MatSidenavModule中的组件实现侧边栏效果&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222125436542-175224888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2b977494-af1b-4b04-b93f-eeca15627fb7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2b977494-af1b-4b04-b93f-eeca15627fb7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2b977494-af1b-4b04-b93f-eeca15627fb7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;mat-sidenav-container&amp;gt;
  &amp;lt;mat-sidenav #sidenav&amp;gt;
    &amp;lt;p&amp;gt;hello boy&amp;lt;/p&amp;gt;
  &amp;lt;/mat-sidenav&amp;gt;

  &amp;lt;div class=&quot;site&quot;&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;main&amp;gt;
      &amp;lt;button (click)=&quot;sidenav.open()&quot;&amp;gt;点击划出&amp;lt;/button&amp;gt;
      &amp;lt;app-main&amp;gt;&amp;lt;/app-main&amp;gt;
    &amp;lt;/main&amp;gt;
    &amp;lt;footer&amp;gt;
      &amp;lt;app-footer&amp;gt;&amp;lt;/app-footer&amp;gt;
    &amp;lt;/footer&amp;gt;
  &amp;lt;/div&amp;gt;
  
&amp;lt;/mat-sidenav-container&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　3.3 效果展示&lt;/h3&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057762/201802/1057762-20180222125605393-1848099679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　3.4 官方文档&lt;/h3&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://material.angular.io/guide/getting-started&quot; target=&quot;_blank&quot;&gt;点击前往&lt;/a&gt;&lt;/p&gt;




</description>
<pubDate>Thu, 22 Feb 2018 04:57:00 +0000</pubDate>
<dc:creator>NeverCtrl_C</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/8458605.html</dc:identifier>
</item>
<item>
<title>使用websocket实现在线聊天功能 - </title>
<link>http://www.cnblogs.com/baiyujing/p/8458567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baiyujing/p/8458567.html</guid>
<description>&lt;p&gt;　　很早以前为了快速达到效果，使用轮询实现了在线聊天功能，后来无意接触了socket,关于socket我的理解是进程间通信，首先要有服务器跟客户端，服务的启动监听某ip端口定位该进程，客户端开启socket分配ip端口连接服务端ip端口，于是两个进程间便可以通信了。下面简单画个图理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1230725/201802/1230725-20180222122909411-991918277.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　but，今天还是准备分享websocket的使用，先上效果，再贴代码。&lt;/p&gt;
&lt;p&gt;　　第一步启动socket服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1230725/201802/1230725-20180222123124221-1358773671.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后连接客户端连接服务器，加入聊天室，分别使用googel（白玉京，沈浪），火狐（楚留香），ie（李寻欢）进行测试，效果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1230725/201802/1230725-20180222123213701-757232260.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　*&lt;/p&gt;
&lt;p&gt;*****************断开一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1230725/201802/1230725-20180222123219073-568653691.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　******************断开一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1230725/201802/1230725-20180222123223660-1350319798.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　下面是本次测试源码。&lt;/p&gt;
&lt;p&gt;　　服务端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestWebSocketController : Controller
    {
        WebSocketServer server;
        List&lt;/span&gt;&amp;lt;SessionInfo&amp;gt; listSession = &lt;span&gt;new&lt;/span&gt; List&amp;lt;SessionInfo&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务启动&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Start()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ip = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.1.106&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; port = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1010&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            server &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebSocketServer();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!server.Setup(ip, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;.Parse(port)))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WebSocket服务启动Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新的会话连接&lt;/span&gt;
            server.NewSessionConnected +=&lt;span&gt; SessionConnected;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;会话关闭&lt;/span&gt;
            server.SessionClosed +=&lt;span&gt; SessionClosed;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新的消息接收&lt;/span&gt;
            server.NewMessageReceived +=&lt;span&gt; MessageReceived;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;server.Start())
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理监听失败消息&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 会话关闭
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;session&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SessionClosed(WebSocketSession session, SuperSocket.SocketBase.CloseReason value)
        {
            Debug.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;会话关闭，关闭原因：{0}  来自：{1}  时间:{2:HH:MM:ss}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, value, session.RemoteEndPoint, DateTime.Now);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;SendMsgToRemotePoint(SessionId, SessionId + &quot;已断开&quot;);&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; sessionRemove = listSession.FirstOrDefault(s =&amp;gt; s.SessionId ==&lt;span&gt; session.SessionID);
            listSession.Remove(sessionRemove);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 会话连接
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;session&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SessionConnected(WebSocketSession session)
        {
            Debug.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;新的会话连接  来自：{0} SessionID:{1}  时间:{2:HH:MM:ss}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, session.RemoteEndPoint, session.SessionID, DateTime.Now);
            listSession.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SessionInfo { SessionId = session.SessionID, EndPoint =&lt;span&gt; session.RemoteEndPoint.ToString() });
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 消息接收
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;session&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MessageReceived(WebSocketSession session, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反序列化消息内容&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; message = JsonConvert.DeserializeObject&amp;lt;MessageInfo&amp;gt;&lt;span&gt;(value);
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; listSession)
            {
                &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;发送消息&lt;/span&gt;
                SendMsg(item.SessionId, &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}发来消息：{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, message.Name, message.Message));
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 发送消息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;sessionId&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendMsg(&lt;span&gt;string&lt;/span&gt; sessionId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; appSession =&lt;span&gt; server.GetAppSessionByID(sessionId);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (appSession != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                appSession.Send(msg);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessageInfo
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SessionInfo
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SessionId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; EndPoint { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public string Name { get; set; }&lt;/span&gt;
&lt;span&gt;        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　客户端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@{
    ViewBag.Title &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&amp;lt;h2&amp;gt;Index&amp;lt;/h2&amp;gt;

&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../Scripts/jquery-1.8.2.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加入聊天室&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btnConnection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;离开聊天室&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btnDisConnection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtInput&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btnSend&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script language=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ws;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ws://192.168.1.106:1010&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#btnConnection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WebSocket&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window) {
            ws &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebSocket(url);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MozWebSocket&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; window) {
            ws &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MozWebSocket(url);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;浏览器版本过低，请升级您的浏览器&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册各类回调&lt;/span&gt;
        ws.onopen =&lt;span&gt; function () {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append($(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加入聊天室&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        ws.onclose &lt;/span&gt;=&lt;span&gt; function () {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append($(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;离开聊天室&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        ws.onerror &lt;/span&gt;=&lt;span&gt; function () {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据传输发生错误&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        ws.onmessage &lt;/span&gt;=&lt;span&gt; function (receiveMsg) {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(receiveMsg.data + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。&lt;/span&gt;
        window.onbeforeunload =&lt;span&gt; function () {
            ws.close();
        }
    });
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$(&quot;#btnDisConnection&quot;).click(function () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    $(&quot;#msg&quot;).append($(&quot;#txtName&quot;).val() + &quot;离开聊天室&amp;lt;br /&amp;gt;&quot;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    ws.close();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});&lt;/span&gt;
    $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#btnSend&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ws.readyState ==&lt;span&gt; WebSocket.OPEN) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{\&quot;name\&quot;:\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;,\&quot;message\&quot;:\&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtInput&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ws.send(message);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).text(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection is Closed!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;





</description>
<pubDate>Thu, 22 Feb 2018 04:40:00 +0000</pubDate>
<dc:creator>&lt;天上白玉京&gt;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baiyujing/p/8458567.html</dc:identifier>
</item>
<item>
<title>Google 搜索引擎语法 - 飞天小子</title>
<link>http://www.cnblogs.com/Zfc-Cjk/p/8458555.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Zfc-Cjk/p/8458555.html</guid>
<description>&lt;div readability=&quot;9.7637795275591&quot;&gt;Google Hack原理很简单，就是利用搜索引擎强大的搜索能力，来查找一些存在&lt;a href=&quot;https://www.exehack.net/tag/%E6%BC%8F%E6%B4%9E&quot;&gt;漏洞&lt;/a&gt;的网站。要利用Google来查找网站的漏洞自然要学会Google这个搜索引擎的语法了。下面先给大家讲解一下Google的语法&lt;/div&gt;
&lt;p&gt;(1)、介绍&lt;/p&gt;
&lt;p&gt;作为google爱好者的我，在讲google hacking前先对google介绍一下。&lt;/p&gt;
&lt;div readability=&quot;14.804347826087&quot;&gt;①、google介绍：Google成立于1997年,目前已经成为全球第一搜索公司。Google数据库存有42.8亿个Web文件;检索网页数量达24亿；支持多达132种语言；具有15000多台&lt;a href=&quot;https://www.exehack.net/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8&quot;&gt;服务器&lt;/a&gt;，200多条T3级宽带；通过采PageRank技术能够提供准确率极高的搜索结果；智能化的”手气不错”提供最符合要求的网站; “网页快照”可以从Google服务器里直接取出缓存的网页；独到的图片搜索功能；强大的新闻组搜索功能；提供二进制文件搜索功能，如.PDF .doc .swf等等；容量超大的Gmail服务；强大的桌面搜索；高清晰的google卫星地图；提供各种语言之间的翻译。&lt;/div&gt;
&lt;p&gt;②、google常见功能：&lt;/p&gt;
&lt;p&gt;A.汉语拼音输入检索：输入changsha(如图2-1)   注：拼音之间不可以有间隔&lt;/p&gt;
&lt;p&gt;图2-1  拼音检索长沙&lt;/p&gt;
&lt;p&gt;B.翻译功能：输入 fy 音乐(如图2-2)          注：翻译可直接写成fy&lt;/p&gt;
&lt;p&gt;图2-2  翻译 音乐&lt;/p&gt;
&lt;p&gt;C.天气查询：输入 changsha tq(如图2-3)     注：天气可直接写成tq&lt;/p&gt;
&lt;p&gt;图2-3 拼音查看长沙天气&lt;/p&gt;
&lt;p&gt;D.股票查询：输入 中国石化 gp(如图2-4)      注：股票可直接写成gp&lt;/p&gt;
&lt;p&gt;图2-4 查看中国石化股票&lt;/p&gt;
&lt;p&gt;E.邮政编码和区号查询：输入 qh  长沙(如图2-5) 注：区号可直接写成qh&lt;/p&gt;
&lt;p&gt;图2-5 查看长沙区号&lt;/p&gt;
&lt;p&gt;F.手机查询归属地查询：输入 13875876817(如图6) 注：直接输入号&lt;/p&gt;
&lt;p&gt;图2-6 查询收集归属地&lt;/p&gt;
&lt;p&gt;G.购物查询：输入potato(土豆)(如图2-7)         注：URL：froogle.google.com&lt;/p&gt;
&lt;p&gt;图2-7 选购土豆，有其价格、商店等信息&lt;/p&gt;
&lt;p&gt;H.条形码查询&lt;/p&gt;
&lt;p&gt;I.飞机航班查询&lt;/p&gt;
&lt;p&gt;J.检索工具栏&lt;/p&gt;
&lt;p&gt;K.google新闻&lt;/p&gt;
&lt;p&gt;L.网站排名&lt;/p&gt;
&lt;p&gt;(2)、语法&lt;/p&gt;
&lt;div readability=&quot;10.810888252149&quot;&gt;利用Google的语法我们可以做很多事情，2006年的时候网络上出现了几件大事，比较出名的有“魔兽铜须事件”，很多&lt;a href=&quot;https://www.exehack.net/tag/%E9%BB%91%E5%AE%A2&quot;&gt;黑客&lt;/a&gt;就是利用Google Hack技术找到了铜须的QQ号码、MSN、邮件地址等个人信息。目前黑客利用Google Hack技术来进行入侵或资料收集的时候主要有以下几点：&lt;/div&gt;
&lt;p&gt;①、在入侵之前，可以利用Google Hack技术进行信息收集，典型的有比如查找网站后台及网站的拓扑结构等等。&lt;/p&gt;
&lt;p&gt;②、当发现或者公布某个漏洞之后，利用Google Hack技术大量收集存在这个漏洞的主机或网站，典型的有许愿版暴库漏洞，利用Google Hack技术找到许愿版之后就暴库，最后得到Webshell。&lt;/p&gt;
&lt;p&gt;③、边入侵边搜索，因为我们的入侵过程是一个动态的，我们必须根据不同的情况来区分各种入侵的方法和技巧，而Google Hack技术可以非常好的完成这项任务。&lt;/p&gt;
&lt;p&gt;④、直接搜索网站的默认数据库文件，这个我们可以结合挖掘鸡这类工具来进行入侵和渗透，那么效果会更加明显。&lt;/p&gt;
&lt;p&gt;⑤、搜索别人留下来的后门或者比如通过WEB方式盗的QQ号码等纪录文件，和上面一样，也可以结合挖掘鸡来渗透。挖掘鸡这个工具我会在后面详细讲解的。&lt;/p&gt;
&lt;p&gt;踩点在入侵当中起着决定性的作用，也是决定入侵成败的最重要因素。它占据了整个入侵过程中90%以上的时间。FootPrinting要收集的信息一般主要有十个方面：(以网站为例)&lt;/p&gt;
&lt;p&gt;A.    网站注册信息&lt;/p&gt;
&lt;p&gt;B.    网管资料&lt;/p&gt;
&lt;p&gt;C.    共享资料&lt;/p&gt;
&lt;p&gt;D.    端口信息&lt;/p&gt;
&lt;p&gt;E.    FTP资源&lt;/p&gt;
&lt;p&gt;F.    网站拓扑结构&lt;/p&gt;
&lt;p&gt;G.    网站URL地址结构&lt;/p&gt;
&lt;p&gt;H.    网站系统版本&lt;/p&gt;
&lt;p&gt;I.    后台地址&lt;/p&gt;
&lt;p&gt;J.    弱口令&lt;/p&gt;
&lt;p&gt;下面还给大家提供Google的另外一些入口地址，对于特定的搜索很有好处&lt;/p&gt;
&lt;p&gt;哦，可以提高很多效率。&lt;/p&gt;
&lt;p&gt;http://www.google.com/microsoft                        微软风格入口&lt;/p&gt;
&lt;p&gt;http://www.google.com/mac                              MAC风格入口&lt;/p&gt;
&lt;p&gt;http://www.google.com/bsd                              BSD风格入口&lt;/p&gt;
&lt;p&gt;http://www.google.com/intl/xx-elmer                    宗教风格入口&lt;/p&gt;
&lt;div readability=&quot;6.4878048780488&quot;&gt;http://www.google.com/intl/xx-hacker                   &lt;a href=&quot;https://www.exehack.net/tag/%E9%BB%91%E5%AE%A2&quot;&gt;黑客&lt;/a&gt;专用入口&lt;/div&gt;
&lt;p&gt;http://www.google.com/custom?domains=域名              站内搜索地址&lt;/p&gt;
&lt;div readability=&quot;8.3647058823529&quot;&gt;http://www.google.com/custom?hl=zh-CN  中文&lt;a href=&quot;https://www.exehack.net/tag/%E9%BB%91%E5%AE%A2&quot;&gt;黑客&lt;/a&gt;专用信息和资料搜索地址&lt;/div&gt;
&lt;p&gt;http://www.google.com/custom?hl=en     英文黑客专用信息和资料搜索地址&lt;/p&gt;
&lt;p&gt;http://www.mytianwang.cn/                       国内FTP文件搜索引擎&lt;/p&gt;
&lt;p&gt;下面开始讲解我们的Google语法，google hack技术说白了就是结合google的语法和一些关键字来对网站进行的渗透的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;intext&lt;/strong&gt;&lt;/span&gt;:关键字。&lt;/p&gt;
&lt;p&gt;把网页正文中某个关键字做为搜索条件，然后搜索全世界网页正文中含有这些关键字的网页,allintext：关键字。功能相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;intitle&lt;/span&gt;&lt;/strong&gt;:关键字。&lt;/p&gt;
&lt;p&gt;把网页标题中某个关键字做为搜索条件，然后搜索全世界网页标题中含有这些关键字的网页,allintitle：关键字。功能相同。比如搜索网站后台，intitle:后台登陆，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;cache&lt;/span&gt;&lt;/strong&gt;:关键字。&lt;/p&gt;
&lt;div readability=&quot;8.4671052631579&quot;&gt;搜索含有关键字内容的cache。比如搜索北京大学网站&lt;a href=&quot;https://www.exehack.net/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8&quot;&gt;服务器&lt;/a&gt;中缓存的内容，cache:pku.edu.cn，结果如图2-12和图2-13所示。&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;define&lt;/span&gt;&lt;/strong&gt;:关键字。&lt;/p&gt;
&lt;p&gt;搜索关键字的定义。比如查找html的定义，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;filetype&lt;/span&gt;&lt;/strong&gt;:文件名.后缀名。&lt;/p&gt;
&lt;p&gt;搜索特定的文件。比如我要搜索信息安全方面的论文，我们输入“信息安全论文　filetype:doc”就可以找到了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;info&lt;/span&gt;&lt;/strong&gt;:关键字。&lt;/p&gt;
&lt;p&gt;这个语法用于搜索指定站点的一些基本信息。比如搜索北京大学网站的一些信息&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;inurl&lt;/strong&gt;&lt;/span&gt;:关键字。&lt;/p&gt;
&lt;p&gt;搜索含有关键字的URL地址。这个语法非常的重要，使用的也是最为频繁，我们还可以使用allinurl来更加精确的定位URL地址。比如搜索含有movie的URL地址，输入“inurl:movie”即可，那么找出来的大部分是电影网站&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;link&lt;/span&gt;&lt;/strong&gt;:关键字。&lt;/p&gt;
&lt;p&gt;查找与关键字做了链接的URL地址，利用它我们可能搜索到一些敏感信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;site&lt;/span&gt;&lt;/strong&gt;:域名。&lt;/p&gt;
&lt;p&gt;返回域名中所有的URL地址，它可以探测网站的拓扑结构进行，也是非常的重要，使用非常频繁。比如搜索北京大学所有学院的URL地址，我们输入“学院 site:pku.edu.cn”就可以搜索到它所有的学院&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;related:URL&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搜索与指定URL相关的页面。比如搜索与北京大学相关的网页，我们输入关键字“related:pku.edu.cn”即可看到&lt;/p&gt;
&lt;p&gt;stocks:搜索有关一家公司的股票市场信息&lt;/p&gt;
&lt;p&gt;insubject:搜索Google组的标题行&lt;/p&gt;
&lt;p&gt;msgid:搜索识别新闻组帖子的Google组信息标识符和字符串&lt;/p&gt;
&lt;p&gt;group:搜索Google组搜索词汇帖子的题目&lt;/p&gt;
&lt;p&gt;author:搜索新闻组帖子的作者&lt;/p&gt;
&lt;p&gt;bphonebook:仅搜索商业电话号码簿&lt;/p&gt;
&lt;p&gt;rphonebook:仅搜索住宅电话号码簿&lt;/p&gt;
&lt;p&gt;phonebook:搜索商业或者住宅电话号码簿&lt;/p&gt;
&lt;p&gt;daterange:搜索某个日期范围内Google做索引的网页&lt;/p&gt;
&lt;p&gt;inanchor:搜索一个HTML标记中的一个链接的文本表现形式&lt;/p&gt;
&lt;p&gt;不过需要注意以下几点:&lt;/p&gt;
&lt;p&gt;google搜索多个关键字时之间用间隔。空格表示逻辑与操作。&lt;/p&gt;
&lt;p&gt;google中-表示逻辑非操作。如 A-C表示搜索有A但没C的网页。&lt;/p&gt;
&lt;p&gt;google中OR表示逻辑或。如AORB表示搜索含有A的网页 B的网页和同时含A和B的网页。&lt;/p&gt;
&lt;p&gt;google中精确搜索用双引号，比如我们搜索脚本黑客和＂脚本黑客＂，两者之间的差别就是一个双引号，如图2-20所示，显示了他们搜索结果的差别。&lt;/p&gt;
&lt;p&gt;图2-20 显示了有引号与无引号之间的差别&lt;/p&gt;
&lt;p&gt;google中的通配符。*表示一连串字符，?代表单个字符。含有通配符的关键字要用引号。&lt;/p&gt;
&lt;p&gt;google对英文关键字的大小写不敏感。&lt;/p&gt;
&lt;p&gt;google对出现频率极高的英文单词做忽略处理。如 . com i www http等。如果要对忽略的关键字进行强制搜索，则需要在该关键字前加上明文的”+”号。&lt;/p&gt;
&lt;p&gt;google大部分常用英文符号(如问号，句号，逗号等)无法成为搜索关键字，加强制也不行。&lt;/p&gt;
&lt;p&gt;还有一点就是，可能大家都知道BAIDU的网页快照，其实Google也有这个功能&lt;/p&gt;
&lt;div readability=&quot;8.16&quot;&gt;的，他的URL地址是http://www.&lt;a href=&quot;https://www.exehack.net/tag/googles&quot;&gt;googles&lt;/a&gt;yndicatedsearch.com/u/berkeley，&lt;/div&gt;
&lt;p&gt;比如我们要快照北京大学，那么输入北京大学(pku.edu.cn)的网址就可以了&lt;/p&gt;
&lt;p&gt;附：谷歌镜像站（限制了流量，慎用）&lt;/p&gt;
&lt;div readability=&quot;6.5769230769231&quot;&gt;

&lt;p&gt;再附：全世界搜索引擎大集合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;http://www.baimin.com/world/557.htm&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 22 Feb 2018 04:33:00 +0000</pubDate>
<dc:creator>飞天小子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Zfc-Cjk/p/8458555.html</dc:identifier>
</item>
<item>
<title>约束5：外键约束 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/5485068.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/5485068.html</guid>
<description>&lt;p&gt;在关系型数据库中，表与表之间存在引用关系，也就是说，数据列C1引用其他表的数据列C2中存在的值，引用关系通过外键（Foreign Key ）约束实现。如果表（TableA）中的列C1被其他表引用，那么，我们把表（TableA）称作参考表，或引用表（Referenced Table），该列C1是其他表的参考列，或引用列（Referenced Column），对引用列执行Update 或 Delete 操作会受到很多限制。某些情况下，也把参考表称作父表，把引用父表的列称作子列，或外键列。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[&lt;/span&gt;&lt;span&gt; FOREIGN KEY &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;   
        &lt;span&gt;REFERENCES&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt; schema_name . &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; referenced_table_name &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( ref_column ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;   
        &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ON DELETE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;   
        &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，在数据列C1和C2之间创建外键约束，C1是引用列，C2列引用C1列的值，外键约束的特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果C2列的值不是NULL，那么C2列的值必须存在于C1列中，否则，系统返回违反外键约束的错误；&lt;/li&gt;
&lt;li&gt;外键约束可以创建在同一个表的不同列之间，这种引用类型称作自引用；&lt;/li&gt;
&lt;li&gt;外键约束可以引用单列，也可以引用多列；&lt;/li&gt;
&lt;li&gt;外键约束只能引用那些构成主键或唯一约束的数据列，或者唯一索引键列，也就是说，外键约束的引用列（单列或复合列）必须是唯一的；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一，外键约束的级联操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当引用列的值被更新（UPDATE或DELETE）时，子列会采取相应的动作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;默认行为是NO ACTION：如果子列引用父表的值，那么父表的更新操作被回滚，数据库抛出错误；&lt;/li&gt;
&lt;li&gt;级联操作（CASCADE）：当父表删除数据行A时，子表删除引用该数据行A的所有行；当父表更新数据行B时，子表把引用该数据行B的所有数据行都更新为新值；&lt;/li&gt;
&lt;li&gt;置空（SET NULL）：当父表更新数据行A时，子表把引用该数据行A的所有数据行都设置为NULL，该设置要求外键列必须可空（nullable）；&lt;/li&gt;
&lt;li&gt;设置默认值（SET DEFAULT）：当父表更新数据时，子表把引用该数据行的数据行都设置为外键列的默认值，该设置要求外键列必须有默认值定义，如果构成外键的某一个列，没有显式定义默认值，并且可为NULL，那么系统把NULL作为列的默认值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些级联操作是系统预定义的，不能更改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，手动更新外键&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在对引用列进行更新操作（Update 和 Delete）之前，必须禁用外键约束，然后手动更新，最后再次启用外键约束。手动更新外键，给用户提供了很大的灵活性，由用户保证外键约束的有效性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，查看外键列的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;span&gt;sys.foreign_keys&lt;/span&gt; 和 &lt;span&gt;sys.foreign_key_columns&lt;/span&gt; 这两个系统表获取外键约束的信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('51f4380f-479a-4764-91a9-c33dac23eb40')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_51f4380f-479a-4764-91a9-c33dac23eb40&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_51f4380f-479a-4764-91a9-c33dac23eb40&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('51f4380f-479a-4764-91a9-c33dac23eb40',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_51f4380f-479a-4764-91a9-c33dac23eb40&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; fk.&lt;span&gt;object_id&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; FK_Object_ID,
    fk.name &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; FK_name,
    pt.name &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentTable_Name,
    pc.name &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentTable_Column_Name,
    rt.name &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; ReferencedTable_Name,
    rc.name &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; ReferencedTable_Column_Name
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sys.foreign_keys fk &lt;span&gt;with&lt;/span&gt;&lt;span&gt;(nolock)
&lt;/span&gt;&lt;span&gt;inner&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; sys.foreign_key_columns fkc &lt;span&gt;with&lt;/span&gt;&lt;span&gt;(nolock)
    &lt;/span&gt;&lt;span&gt;on&lt;/span&gt; fk.&lt;span&gt;object_id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;fkc.constraint_object_id
&lt;/span&gt;&lt;span&gt;inner&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; sys.tables pt &lt;span&gt;with&lt;/span&gt;&lt;span&gt;(nolock)
    &lt;/span&gt;&lt;span&gt;on&lt;/span&gt; fkc.parent_object_id&lt;span&gt;=&lt;/span&gt;pt.&lt;span&gt;object_id&lt;/span&gt;
&lt;span&gt;inner&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; sys.columns pc &lt;span&gt;with&lt;/span&gt;&lt;span&gt;(nolock)
    &lt;/span&gt;&lt;span&gt;on&lt;/span&gt; fkc.parent_object_id&lt;span&gt;=&lt;/span&gt;pc.&lt;span&gt;object_id&lt;/span&gt; 
        &lt;span&gt;and&lt;/span&gt; fkc.parent_column_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;pc.column_id
&lt;/span&gt;&lt;span&gt;inner&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; sys.tables &lt;span&gt;as&lt;/span&gt; rt &lt;span&gt;with&lt;/span&gt;&lt;span&gt;(nolock)
    &lt;/span&gt;&lt;span&gt;on&lt;/span&gt; fkc.referenced_object_id&lt;span&gt;=&lt;/span&gt;rt.&lt;span&gt;object_id&lt;/span&gt;
&lt;span&gt;inner&lt;/span&gt; &lt;span&gt;join&lt;/span&gt; sys.columns rc &lt;span&gt;with&lt;/span&gt;&lt;span&gt;(nolock)
    &lt;/span&gt;&lt;span&gt;on&lt;/span&gt; fkc.referenced_object_id&lt;span&gt;=&lt;/span&gt;rc.&lt;span&gt;object_id&lt;/span&gt; 
        &lt;span&gt;and&lt;/span&gt; fkc.referenced_column_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;rc.column_id
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; rt.name&lt;span&gt;=&lt;/span&gt;N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Referenced_Table_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，禁用外键列&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;disable FK constraint&lt;/span&gt;
&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; ParentTable_name
&lt;/span&gt;&lt;span&gt;nocheck&lt;/span&gt; &lt;span&gt;constraint&lt;/span&gt; FK_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将外键 nocheck之后，可以使用 Delete 或 Update 命令更新数据，但是，当使用 Truncate 命令时，依然会报错&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Cannot truncate table 'xxx' because it is being referenced by a FOREIGN KEY constraint.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，启用外键列&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;enable FK constraint&lt;/span&gt;
&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; ParentTable_name
&lt;/span&gt;&lt;span&gt;check&lt;/span&gt; &lt;span&gt;constraint&lt;/span&gt; FK_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三，扩展引用完整性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统自定义的外键约束，由很多限制，例如，引用列和外键列必须在相同的服务器上，相同的数据库中，不支持跨数据库的外键约束。而外键约束，实际上，就是一列引用另外一列的值，这个功能可以由触发器来实现，用于扩展引用完整性。触发器的实现过程是：创建INSTEAD OF触发器，在插入数据之前，检查插入的数据是否存在于参考表中，如果存在，插入成功；如果不存在，回滚事务，抛出异常。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TRIGGER&lt;/span&gt;&lt;span&gt; schema_name.trigger_name   
&lt;/span&gt;&lt;span&gt;ON&lt;/span&gt;&lt;span&gt; table_name
INSTEAD &lt;/span&gt;&lt;span&gt;OF&lt;/span&gt; { &lt;span&gt;[&lt;/span&gt;&lt;span&gt; INSERT &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt; , &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt; UPDATE &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; }   
&lt;/span&gt;&lt;span&gt;AS&lt;/span&gt; { sql_statement  &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ; &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ,...n &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; } 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在DML触发器中，有两个特殊的系统表inserted和deleted，用于表示插入的新数据和删除的旧数据。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/triggers/use-the-inserted-and-deleted-tables&quot; data-linktype=&quot;relative-path&quot;&gt;Use the inserted and deleted Tables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;question-hyperlink&quot; href=&quot;http://stackoverflow.com/questions/483193/how-can-i-list-all-foreign-keys-referencing-a-given-table-in-sql-server&quot;&gt;How can I list all foreign keys referencing a given table in SQL Server?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 22 Feb 2018 04:19:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/5485068.html</dc:identifier>
</item>
<item>
<title>六、BeautifulSoup4------自动登录网站（手动版） - 酱紫酱</title>
<link>http://www.cnblogs.com/jiangzijiang/p/8456493.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiangzijiang/p/8456493.html</guid>
<description>&lt;p&gt;每天一个小实例：（按照教学视频上自动登录的网站，很容易就成功了。自已练习登录别的网站，问题不断）&lt;/p&gt;
&lt;p&gt;这个自己分析登录boss直聘。我用了一下午的时间，而且还是手动输入验证码，自动识别输入验证码的还没成功，果然是师傅领进门，修行看个人，以后要多练&lt;/p&gt;
&lt;p&gt;第一步、先访问网站，分析一下登录需要什么数据&lt;/p&gt;
&lt;p&gt;第二步、创建 Beautiful Soup 对象,指定解析器。提取出登录所用的数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
data =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;regionCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+86&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;account&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:账号,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:密码,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;captcha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:验证码,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;randomKey&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:验证码携带的randomKey
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三步、登录成功后，就可以做登录才可以做的事情，我想了想没什么可做的，就简单取点工作信息，这个不登录也行。我就是练习练习 Beautiful Soup&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_46153c50-6314-4967-8c67-09a021e12b21&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_46153c50-6314-4967-8c67-09a021e12b21&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_46153c50-6314-4967-8c67-09a021e12b21&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; bs4 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BeautifulSoup
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一步、先访问网站，分析一下登录需要什么数据&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; session = requests.Session()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果不用这步，requests访问要携带授权的cookies&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; bossUrl = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://login.zhipin.com/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; headers =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; response =session.get(url=bossUrl,headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第二步、创建 Beautiful Soup 对象,指定解析器。提取出登录所用的数据&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;下面的data中就是需要的数据&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; soup = BeautifulSoup(response.text,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取验证码的url&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; captchaUrl =soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;span .verifyimg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; img = requests.get(bossUrl + captchaUrl,headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取randomKey&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; randomKey = captchaUrl.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将验证码保存起来&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;captcha.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    f.write(img.content)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;输入验证码&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; captcha = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入验证码：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; data =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;regionCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+86&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;account&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:账号,
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:密码,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;captcha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:验证码,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;randomKey&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:验证码携带的randomKey
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; loginUrl = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://login.zhipin.com/login/account.json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; login = session.post(loginUrl,data=data,headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第三步、登录成功后，就可以做登录才可以做的事情，下面爬取得信息就算不登录也行，我就是练习练习&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; boss = session.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.zhipin.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; jobSoup =BeautifulSoup(boss.text,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; jobPrimary = jobSoup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.sub-li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; job &lt;span&gt;in&lt;/span&gt;&lt;span&gt; jobPrimary:
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     job_info = job.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).get_text()
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         job_text = job.find_all(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, class_=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;job-text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)[0].get_text()
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; :
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         job_text =&lt;span&gt;''&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(job_info,job_text)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;结果：我自己就是简单的提取一下数据，没有整理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f91cac27-a292-4a36-a428-4a33d1758502&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f91cac27-a292-4a36-a428-4a33d1758502&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f91cac27-a292-4a36-a428-4a33d1758502&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; D:\python.exe F:/django_test/spider/&lt;span&gt;captcha_test.py
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;请输入验证码：5n47
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 架构师30K - 45K  杭州3-&lt;span&gt;5年本科
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; web前端20K - 40K  北京3-&lt;span&gt;5年本科
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 测试开发20K -&lt;span&gt; 40K  杭州经验不限本科
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 销售运营23K - 24K  上海5-&lt;span&gt;10年本科
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 内容营销产品运营15K - 30K  北京5-&lt;span&gt;10年本科
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; Android22K - 44K  北京3-&lt;span&gt;5年本科
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; iOS(高P)38K - 58K  北京5-10年硕士
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;hr/&gt;
&lt;p&gt;和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;4.4545454545455&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;span&gt;lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.7707006369427&quot;&gt;&lt;td&gt;&lt;span&gt;BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持&lt;a href=&quot;http://www.w3school.com.cn/cssref/css_selectors.asp&quot; target=&quot;_blank&quot;&gt;CSS选择器&lt;/a&gt;、Python标准库中的HTML解析器，也支持 lxml 的 XML解器。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.9854368932039&quot;&gt;&lt;td readability=&quot;6.1359223300971&quot;&gt;
&lt;p&gt;&lt;span&gt;Beautiful Soup 3 目前已经停止开发，推荐现在的项目使用Beautiful Soup 4。使用 pip 安装即可：&lt;code&gt;pip install beautifulsoup4&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官方文档：&lt;a href=&quot;http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/&quot; target=&quot;_blank&quot;&gt;http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr/&gt;
&lt;p&gt;首先要先导入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 导入模块
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; bs4 import BeautifulSoup


html &lt;/span&gt;= html_doc = &lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&amp;lt;body&amp;gt;&lt;span&gt;
asdf
    &lt;/span&gt;&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;b&amp;gt;The Dormouse&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s story总共&amp;lt;/b&amp;gt;&lt;/span&gt;
        &amp;lt;h1&amp;gt;f&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;story&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;Once upon a time there were three little sisters; and their names were
    &lt;/span&gt;&amp;lt;a  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sister0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;link1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Els&amp;lt;span&amp;gt;f&amp;lt;/span&amp;gt;ie&amp;lt;/a&amp;gt;&lt;span&gt;,
    &lt;/span&gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://example.com/lacie&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sister&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;link2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Lacie&amp;lt;/a&amp;gt;&lt;span&gt; and
    &lt;/span&gt;&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://example.com/tillie&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sister&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;link3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Tillie&amp;lt;/a&amp;gt;&lt;span&gt;;
and they lived at the bottom of a well.&lt;/span&gt;&amp;lt;/div&amp;gt;&lt;span&gt;
ad&lt;/span&gt;&amp;lt;br/&amp;gt;&lt;span&gt;sf
&lt;/span&gt;&amp;lt;p &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;story&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;
#创建 Beautiful Soup 对象,指定解析器，如果不指定会出现警告
&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt; UserWarning: No parser was explicitly specified, so I&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m using the best.... &lt;/span&gt;
&lt;span&gt;
to &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;:

 BeautifulSoup(YOUR_MARKUP, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

  markup_type&lt;/span&gt;=&lt;span&gt;markup_type))
&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;soup = BeautifulSoup(html,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

#打开本地 HTML 文件的方式来创建对象
# soup &lt;/span&gt;= BeautifulSoup(open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

# 找到第一个a标签
tag1 &lt;/span&gt;= soup.find(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
# 找到所有的a标签
tag2 &lt;/span&gt;= soup.find_all(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
# 找到id＝link2的标签
tag3 &lt;/span&gt;= soup.&lt;span&gt;select&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#link2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;1.&lt;code&gt;find_all(name, attrs, recursive, text, **kwargs)获取匹配的所有标签&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_b9de4c1e-60e3-4353-8875-3ca7846c7a15&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b9de4c1e-60e3-4353-8875-3ca7846c7a15&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b9de4c1e-60e3-4353-8875-3ca7846c7a15&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; # tags = soup.find_all(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;# print(tags)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; # tags = soup.find_all(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,limit=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;# print(tags)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; # tags = soup.find_all(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, attrs={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sister&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, recursive=True, text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lacie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; # # tags = soup.find(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, class_=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sister&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, recursive=True, text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lacie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;# print(tags)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;# ####### 列表 #######
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; # v = soup.find_all(name=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;  
&lt;span&gt;16&lt;/span&gt; # v = soup.find_all(class_=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sister0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sister&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  
&lt;span&gt;19&lt;/span&gt; # v = soup.find_all(text=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tillie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; # print(v, type(v[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;  
&lt;span&gt;22&lt;/span&gt;  
&lt;span&gt;23&lt;/span&gt; # v = soup.find_all(id=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;link1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;link2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;  
&lt;span&gt;26&lt;/span&gt; # v = soup.find_all(href=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;link1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;link2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;  
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;# ####### 正则 #######
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;import re
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; # rep = re.compile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; # rep = re.compile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; # v = soup.find_all(name=&lt;span&gt;rep)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;  
&lt;span&gt;36&lt;/span&gt; # rep = re.compile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sister.*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; # v = soup.find_all(class_=&lt;span&gt;rep)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;  
&lt;span&gt;40&lt;/span&gt; # rep = re.compile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.oldboy.com/static/.*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; # v = soup.find_all(href=&lt;span&gt;rep)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;  
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;# ####### 方法筛选 #######
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;# def func(tag):
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; # &lt;span&gt;return&lt;/span&gt; tag.has_attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) and tag.has_attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; # v = soup.find_all(name=&lt;span&gt;func)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;# print(v)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;  
&lt;span&gt;50&lt;/span&gt;  
&lt;span&gt;51&lt;/span&gt; # ## &lt;span&gt;get&lt;/span&gt;&lt;span&gt;,获取标签属性
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; # tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; # v = tag.&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; # print(v)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2.find&lt;code&gt;(name, attrs, recursive, text, **kwargs)&lt;/code&gt;,获取匹配的第一个标签&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8b3b6bf2-4584-46f5-bcdd-378ad4100d03&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8b3b6bf2-4584-46f5-bcdd-378ad4100d03&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8b3b6bf2-4584-46f5-bcdd-378ad4100d03&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; tag = soup.find(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, attrs={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sister&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}, recursive=True, text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lacie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; tag = soup.find(text=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Lacie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(tag)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3. name，标签名称； attr，标签属性&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4abe9bd6-20fb-4bd1-be80-2576f1f681a8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4abe9bd6-20fb-4bd1-be80-2576f1f681a8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4abe9bd6-20fb-4bd1-be80-2576f1f681a8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;a标签&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag.name)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; attrs = tag.attrs    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag.attrs)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;{'class': ['sister0'], 'id': 'link1'}&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; tag.attrs = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:123} &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; tag.attrs[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;iiiii&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag.attrs)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;{'i': 123, 'id': 'iiiii'}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4.children,所有子标签&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_1c2af896-b615-4016-9669-eeeef67b92fc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1c2af896-b615-4016-9669-eeeef67b92fc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1c2af896-b615-4016-9669-eeeef67b92fc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;它返回的不是一个 list，不过我们可以通过遍历获取所有子节点。
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;我们打印输出 .children 看一下，可以发现它是一个 list 生成器对象
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; div = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,class_=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;story&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(div.children)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; children &lt;span&gt;in&lt;/span&gt;&lt;span&gt; div.children:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(children)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果：&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;Once upon a time there were three little sisters; and their names were
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;a class=&quot;sister0&quot; id=&quot;link1&quot;&amp;gt;Els&amp;lt;span&amp;gt;f&amp;lt;/span&amp;gt;ie&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt; and
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;and they lived at the bottom of a well.&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5.&lt;code&gt;descendants所有子子孙孙标签&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_8922fada-a0fb-4ee9-b0e3-70cc16933371&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8922fada-a0fb-4ee9-b0e3-70cc16933371&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8922fada-a0fb-4ee9-b0e3-70cc16933371&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; div = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,class_=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;story&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(div.descendants)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; children &lt;span&gt;in&lt;/span&gt;&lt;span&gt; div.descendants:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(children)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果：&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;Once upon a time there were three little sisters; and their names were
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;a class=&quot;sister0&quot; id=&quot;link1&quot;&amp;gt;Els&amp;lt;span&amp;gt;f&amp;lt;/span&amp;gt;ie&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;Els
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;span&amp;gt;f&amp;lt;/span&amp;gt;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;f
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;ie
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;Lacie
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt; and
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;Tillie
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;and they lived at the bottom of a well.&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;6.CSS选择器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这就是另一种与 find_all 方法有异曲同工之妙的查找方法.&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;写 CSS 时，标签名不加任何修饰，类名前加&lt;code&gt;.&lt;/code&gt;，id名前加&lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在这里我们也可以利用类似的方法来筛选元素，用到的方法是 &lt;code&gt;soup.select()&lt;/code&gt;，返回类型是 &lt;code&gt;list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d3f60eee-2c18-4cd6-a728-67754f71708c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d3f60eee-2c18-4cd6-a728-67754f71708c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d3f60eee-2c18-4cd6-a728-67754f71708c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过标签名查找&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过类名查找&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.sister&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过id查找&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#link1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;组合查找&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;   例如查找 div 标签中，id 等于 link1的内容，二者需要用空格分开&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div #link1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;属性查找&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;查找时还可以加入属性元素，属性需要用中括号括起来，不在同一节点的空格隔开
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;   注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a[class=&quot;sister&quot;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div a[class=&quot;sister&quot;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取内容以上的 select 方法返回的结果都是列表形式，&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以遍历形式输出，然后用 get_text() 方法来获取它的内容。&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; title &lt;span&gt;in&lt;/span&gt; soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(title.get_text())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 7.clear,将标签的所有子标签全部清空（保留标签名）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_f1c105bc-aeb4-4f7e-b7a9-63de5925dd91&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f1c105bc-aeb4-4f7e-b7a9-63de5925dd91&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f1c105bc-aeb4-4f7e-b7a9-63de5925dd91&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;tag.clear()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;结果：
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse's story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; 8. decompose,递归的删除所有的标签 &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_ee0e94fe-c8ff-40b5-8850-3043985133e3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ee0e94fe-c8ff-40b5-8850-3043985133e3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ee0e94fe-c8ff-40b5-8850-3043985133e3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;tag.decompose()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;结果：
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse's story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 9. decode,转换为字符串（含当前标签）；decode_contents（不含当前标签）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_dfeaeaa4-3bbd-4982-bcbb-bbaab24a0d39&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dfeaeaa4-3bbd-4982-bcbb-bbaab24a0d39&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dfeaeaa4-3bbd-4982-bcbb-bbaab24a0d39&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; v =&lt;span&gt; tag.decode()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(soup))
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(v))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;结果：
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;&amp;lt;class 'bs4.BeautifulSoup'&amp;gt;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;class 'str'&amp;gt;&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;10. encode,转换为字节（含当前标签）；encode_contents（不含当前标签）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_e0fecccb-1061-4288-94f1-a25b04dd1c9a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e0fecccb-1061-4288-94f1-a25b04dd1c9a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e0fecccb-1061-4288-94f1-a25b04dd1c9a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
v &lt;/span&gt;=&lt;span&gt; tag.encode()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(soup))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(type(v))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;11.has_attr,检查标签是否具有该属性 ;  get_text,获取标签内部文本内容; index,检查标签在某标签中的索引位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12.当前的关联标签&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_5c1fc2f1-c5f0-4460-8f5f-a01208d09b3d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5c1fc2f1-c5f0-4460-8f5f-a01208d09b3d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5c1fc2f1-c5f0-4460-8f5f-a01208d09b3d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt; soup.next
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; soup.next_element
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; soup.next_elements
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; soup.next_sibling
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; soup.next_siblings
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; tag.previous
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; tag.previous_element
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; tag.previous_elements
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; tag.previous_sibling
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; tag.previous_siblings
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt; tag.parent
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  tag.parents
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;13.查找某标签的关联标签&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dfd30214-dab4-4c7d-aba0-722d3fb2e3a9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dfd30214-dab4-4c7d-aba0-722d3fb2e3a9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dfd30214-dab4-4c7d-aba0-722d3fb2e3a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt; tag.find_next(...)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; tag.find_all_next(...)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; tag.find_next_sibling(...)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; tag.find_next_siblings(...)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; tag.find_previous(...)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; tag.find_all_previous(...)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; tag.find_previous_sibling(...)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; tag.find_previous_siblings(...)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; tag.find_parent(...)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; tag.find_parents(...)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt;  参数同find_all
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;14. 创建标签之间的关系&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_d55e0699-2e1c-4917-b422-754482d9bbd5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d55e0699-2e1c-4917-b422-754482d9bbd5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d55e0699-2e1c-4917-b422-754482d9bbd5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  tag = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; a = soup.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  tag.setup(previous_sibling=&lt;span&gt;a)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(tag.previous_sibling)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;15.创建标签&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_64a41c37-9982-4c80-a97a-fa21c1a78b2c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_64a41c37-9982-4c80-a97a-fa21c1a78b2c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_64a41c37-9982-4c80-a97a-fa21c1a78b2c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; bs4.element &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Tag
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; obj = Tag(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,attrs={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;qqq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;djj&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; obj.string =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果&amp;lt;a class=&quot;djj&quot; id=&quot;qqq&quot;&amp;gt;kv&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; 16.insert_after,insert_before 在当前标签后面或前面插入 ; append在当前标签内部追加一个标签;   insert在当前标签内部指定位置插入一个标签&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;17 wrap，将指定标签把当前标签包裹起来；unwrap，去掉当前标签，将保留其包裹的标签&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 22 Feb 2018 04:07:00 +0000</pubDate>
<dc:creator>酱紫酱</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiangzijiang/p/8456493.html</dc:identifier>
</item>
<item>
<title>Windows Server 2016-命令行Ntdsutil迁移FSMO角色 - Wenzhongxiang</title>
<link>http://www.cnblogs.com/wenzhongxiang/p/8458503.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenzhongxiang/p/8458503.html</guid>
<description>&lt;p&gt;上章节我们介绍了有关图形化界面迁移FSMO角色，进行本章节之前我们首先回顾一下FSMO的五种操作主机角色：架构主机角色（Schema Master）、域命名主机角色（Domain Naming Master）、RID 主机角色（RID Master）、PDC 模拟主机角色（PDC Emulator）和基础架构主机角色（Infrastructure Master）；不管是林范围主机角色还是域范围主机角色都必须是唯一。本章给大家介绍如何通过DOS命令Ntdsutil进行FSMO角色迁移的方法，希望可以帮到大家。&lt;/p&gt;
&lt;p&gt;1.通过命令行查看当前FSMO角色相关信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.查看有关Ntdsutil命令行帮忙信息：&lt;/p&gt;
&lt;pre class=&quot;brush:ps;toolbar:false&quot;&gt;
Ntdsutil 执行 Active Directory 域服务存储的数据库维护，&lt;br/&gt;帮助配置 AD LDS 通讯端口并查看安装在计算机上的&lt;br/&gt;AD LDS 实例。&lt;br/&gt;? - 显示这个帮助信息&lt;br/&gt;Activate Instance %s - 设置&quot;NTDS&quot;或特定的 AD LDS 实例 作为活动实例。&lt;br/&gt;Authoritative restore- 授权还原 DIT 数据库&lt;br/&gt;Change Service Account %s1 %s2 - 将 AD DS/LDS 服务帐户更改为用户名为 %s1，密码为 %s2。使用&quot;NULL&quot;表示空密码，* 表示从控制台输入密码。&lt;br/&gt;Configurable Settings- 管理可配置的设置&lt;br/&gt;DS Behavior - 查看和修改 AD DS/LDS 行为&lt;br/&gt;Files - 管理 AD DS/LDS 数据库文件&lt;br/&gt;Group Membership Evaluation- 评估给定用户或 组的令牌中的 SID。&lt;br/&gt;Help - 显示这个帮助信息&lt;br/&gt;IFM- IFM 媒体创建&lt;br/&gt;LDAP policies - 管理 LDAP 协议策略&lt;br/&gt;LDAP Port %d- 为 AD LDS 实例配置 LDAP 端口。&lt;br/&gt;List Instances - 列出该计算机上安装的&lt;br/&gt;所有 AD LDS 实例。&lt;br/&gt;Local Roles - 本地 RODC 角色管理&lt;br/&gt;Metadata cleanup - 清理不使用的服务器的对象&lt;br/&gt;Partition management - 管理目录分区&lt;br/&gt;Popups off - 禁用弹出&lt;br/&gt;Popups on- 启用弹出&lt;br/&gt;Quit - 退出实用工具&lt;br/&gt;Roles - 管理 NTDS 角色所有者令牌&lt;br/&gt;Security account management- 管理安全帐户数据库 - 复制&lt;br/&gt;SID 清理&lt;br/&gt;Semantic database analysis - 语法检查器&lt;br/&gt;Set DSRM Password - 重置目录服务还原模式&lt;br/&gt;Administrator 帐户密码&lt;br/&gt;Snapshot - 快照管理&lt;br/&gt;SSL Port %d - 为 AD LDS 实例配置 SSL 端口。
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;C:\Windows\system32\ntdsutil.exe: roles&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fsmo maintenance: ?&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush:ps;toolbar:false&quot;&gt;
? - 显示这个帮助信息&lt;br/&gt;Connections - 连接到一个特定 AD DC/LDS 实例&lt;br/&gt;Help - 显示这个帮助信息&lt;br/&gt;Quit - 返回到上一个菜单&lt;br/&gt;Seize infrastructure master- 在已连接的服务器上覆盖结构角色&lt;br/&gt;Seize naming master - 覆盖已连接的服务器上的命名主机角色&lt;br/&gt;Seize PDC- 在已连接的服务器上覆盖 PDC 角色&lt;br/&gt;Seize RID master - 在已连接的服务器上覆盖 RID 角色&lt;br/&gt;Seize schema master - 在已连接的服务器上覆盖架构角色&lt;br/&gt;Select operation target - 选择的站点，服务器，域，角色和命名上下文&lt;br/&gt;Transfer infrastructure master - 将已连接的服务器定为结构主机&lt;br/&gt;Transfer naming master - 使已连接的服务器成为命名主机&lt;br/&gt;Transfer PDC- 将已连接的服务器定为 PDC&lt;br/&gt;Transfer RID master - 将已连接的服务器定为 RID 主机&lt;br/&gt;Transfer schema master - 将已连接的服务器定为架构主机
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;fsmo maintenance: connections&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;server connections: ?&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush:ps;toolbar:false&quot;&gt;
? - 显示这个帮助信息&lt;br/&gt;Clear creds - 清除以前的连接凭据&lt;br/&gt;Connect to domain %s - 连接到 DNS 域名称&lt;br/&gt;Connect to server %s - 连接到服务器、DNS 名称[:端口号]&lt;br/&gt;Help - 显示这个帮助信息&lt;br/&gt;Info - 显示连接信息&lt;br/&gt;Quit - 返回到上一个菜单&lt;br/&gt;Set creds %s1 %s2 %s3- 将连接凭据设置为域 %s1、用户 %s2、密码 %s3。空密码使用&quot;NULL&quot;, 从控制台输入密码使用 *。
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.命令行迁移FSMO角色步骤如下：&lt;/p&gt;
&lt;p&gt;3.1.输入命令Ntdsutil&lt;/p&gt;
&lt;p&gt;3.2.输入命令Roles&lt;/p&gt;
&lt;p&gt;3.3.输入命令Connections&lt;/p&gt;
&lt;p&gt;3.4.输入命令Connect to server Major.azureyun.local 连接Major域控制器(要迁移到的域控)&lt;/p&gt;
&lt;p&gt;3.5.输入命令Quit&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.6.输入&lt;strong&gt;Transfer schema master&lt;/strong&gt;命令，&lt;strong&gt;转移架构主机&lt;/strong&gt;到Major.azureyun.local，根据弹窗提示确定是否将架构主机的角色传送到Major，这里选择&quot;是&quot;继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转移成功信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ5.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.7.输入&lt;strong&gt;Transfer RID master&lt;/strong&gt;命令，&lt;strong&gt;转移RID主机角色&lt;/strong&gt;到Major.azureyun.local，根据弹窗提示确定是否将RID主机的域角色传送到服务器Major，这里选择&quot;是&quot;继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传送成功信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.8.输入&lt;strong&gt;Transfer PDC&lt;/strong&gt;命令，&lt;strong&gt;转移PDC 模拟主机&lt;/strong&gt;角色到Major.azureyun.local，根据弹窗提示确定是否将主域控制器的域角色传送到服务器Major，这里选择&quot;是&quot;继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传送成功信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ9.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.9.输入&lt;strong&gt;Transfer naming master&lt;/strong&gt;命令，&lt;strong&gt;转移域命名主机&lt;/strong&gt;到Major.azureyun.local，根据弹窗提示确定是否将命名主机的角色传送到服务器Major，这里选择&quot;是&quot;继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ10.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传送成功信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ11.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.10.输入&lt;strong&gt;Transfer infrastructure master&lt;/strong&gt;命令，&lt;strong&gt;转移基础结构主机&lt;/strong&gt;到Major.azureyun.local，根据弹窗提示确定是否将结构主机的域角色传送到服务器Major，这里选择&quot;是&quot;继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ12.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传送成功信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ13.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.整个操作过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ14.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.通过&lt;strong&gt;netdom query fsmo&lt;/strong&gt;查看当前FSMO角色位置均为Major.azureyun.local:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022218_0353_WindowsServ15.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本次通过DOS命令Ntdsutil迁移FSMO角色成功。操作完成。&lt;/p&gt;

</description>
<pubDate>Thu, 22 Feb 2018 04:02:00 +0000</pubDate>
<dc:creator>Wenzhongxiang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenzhongxiang/p/8458503.html</dc:identifier>
</item>
<item>
<title>jQuery源码逐行分析学习02(第一部分：jQuery的一些变量和函数) - 智盦</title>
<link>http://www.cnblogs.com/cumtchj/p/8458408.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cumtchj/p/8458408.html</guid>
<description>&lt;p&gt;第一次尝试使用Office Word，方便程度大大超过网页在线编辑，不过初次使用，一些内容不甚熟悉，望各位大神见谅~&lt;/p&gt;
&lt;p&gt;在上次的文章中，把整个jQuery的结构进行了梳理，得到了整个jQuery的简化结构，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; (21 , 94) 定义了一些变量和函数 jQuery = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; (96 , 283&lt;span&gt;) 给JQ对象，添加一些方法和属性
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; (285 , 347&lt;span&gt;) extend : JQ的继承方法
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; (349 , 817&lt;span&gt;) jQuery.extend() : 扩展一些工具方法
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; (877 , 2856&lt;span&gt;) Sizzle : 复杂选择器的实现
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; (2880 , 3042&lt;span&gt;) Callbacks : 回调对象 : 对函数的统一管理
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; (3043 , 3183&lt;span&gt;) Deferred : 延迟对象 : 对异步的统一管理
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; (3184 , 3295&lt;span&gt;) support : 功能检测
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; (3308 , 3652&lt;span&gt;) data() : 数据缓存
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; (3653 , 3797&lt;span&gt;) queue() : 队列方法 : 执行顺序的管理
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; (3803 , 4299&lt;span&gt;) attr() prop() val() addClass()等 : 对元素属性的操作
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; (4300 , 5128&lt;span&gt;) on() trigger() : 事件操作的相关方法
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; (5140 , 6057&lt;span&gt;) DOM操作 : 添加 删除 获取 包装 DOM筛选
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; (6058 , 6620&lt;span&gt;) css() : 样式的操
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; (6621 , 7854&lt;span&gt;) 提交的数据和ajax() : ajax() load() getJSON()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; (7855 , 8584&lt;span&gt;) animate() : 运动的方法
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; (8585 , 8792&lt;span&gt;) offset() : 位置和尺寸的方法
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; (8804 , 8821&lt;span&gt;) JQ支持模块化的模式
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; (8826) window.jQuery = window.$ =&lt;span&gt; jQuery;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; })();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一次，我们将开始对jQuery源码进行逐行分解。&lt;/p&gt;
&lt;p&gt;首先从一开始的注释开始&lt;/p&gt;
&lt;p&gt;开始的注释包含了以下内容:jQuery版本,jQuery官网,sizzle官网,jQuery版权信息,软件许可以及更新时间&lt;/p&gt;
&lt;p&gt;接下来便开始了匿名自执行函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;(window,undefined){})(window);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先看下传参的作用:&lt;/p&gt;
&lt;p&gt;    window参数有两个作用：第一，在代码执行过程中，一些方法、属性都是通过树形结构联结的，传入window参数就相当于给程序指明了一个查找方向，这样提高了程序查找的效率；第二，传入window参数，这样便于后期对于代码压缩，在压缩过程中，window参数会变成一个压缩程序自动生成的变量代号，这样就便于压缩了。&lt;/p&gt;
&lt;p&gt;    undefined参数有一个作用：因为在这样大体量的程序中，像undefined这样的值很容易被篡改，所以在自执行匿名函数的参数中传入undefined，防止在程序过程中被无意篡改。&lt;/p&gt;

&lt;p&gt;接下来的注释中，有关于use strict的部分，在此做一下说明：在严格模式下,代码需要特别规范,稍有不规范就会报错,建议不要使用。举个例子：&lt;/p&gt;
&lt;p&gt;我们正常在声明赋值变量时，以下写法是正确的：   &lt;/p&gt;

&lt;p&gt;但是在use strict模式下就会报错，必须要是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; a=10;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;又比如关于八进制数，我们一般情况下，我们可以定义八进制数：     &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;var&lt;/span&gt; a=010;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在use strict模式下，这个八进制数是不支持的，就会报错。&lt;/p&gt;
&lt;p&gt;接下来从(23)行开始，定义了一些变量和一些函数&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;rootjQuery&lt;/span&gt;:该变量表示jQuery的根目录，在第(866)行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; rootjQuery=jQuery(document);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义该变量便于后期代码的可维护&lt;/p&gt;
&lt;p&gt;&lt;span&gt;readyList&lt;/span&gt;:该变量和DOM加载有关，和ready(fn)相关的一个变量&lt;/p&gt;
&lt;p&gt;&lt;span&gt;core_strundefined=typeof undefined&lt;/span&gt;,字符串形式的undefined&lt;/p&gt;
&lt;p&gt;在a==undefined和typeof a=='undefined'中,新版本浏览器没有差别，但是老版本浏览器可能前者无法判别，所以在此处，采用这种虽然难写一点但是保全的方式。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　location=window.location;&lt;/span&gt;将window下的location对象单独定义存储&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　document=window.document;&lt;/span&gt;将window下的document对象单独定义存储&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　docElem=document.documentElement;&lt;/span&gt;将document.element对象单独定义存储&lt;/p&gt;
&lt;p&gt;接下来&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;_jQuery=window.jQuery,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　_$=window.$,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这两个变量是用于防止和其他程序产生冲突的，很多程序在对外暴露接口的时候都会选择使用$符号，这样就难免发生冲突，此处就是解决了这样的冲突问题。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;class2type={}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;$.type(),这是用来判断类型的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　core_deletedIds=[]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个变量和缓存数据有关,一般在老版本中有用&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　core_version='2.0.3'&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个变量是该版本jQuery的版本号&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(52,58)core_concat=...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一些核心方法的存储，这其中包括了concat，push，slice，indexOf，toString，hasOwn，trim方法&lt;/p&gt;
&lt;p&gt;接下来定义了jQuery函数&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　jQuery=function(){}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　$() = jQuery()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面对这个结构分析一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; jQuery=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(selector,context){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; jQuery.fn.init(selector,context,rootjQuery);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但在第(283)行，出现了如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; (283)jQuery.fn.init.prototype=jQuery.fn;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jQuery.fn的初始化方法的原型就是jQuery.fn&lt;/p&gt;
&lt;p&gt;在普通写面向对象时     &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Aaa(){}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; Aaa.prototype.init=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; Aaa.prototype.css=&lt;span&gt;function&lt;/span&gt;(){};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用的时候：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a1=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Aaa();
a1.init();
a1.css();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们需要手动调用初始化方法，然后再去调用其他方法；&lt;/p&gt;
&lt;p&gt;在jQuery中，面向对象是这样的：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; jQuery(){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; jQuery.prototype.init();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt; }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  jQuery.prototype.init=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  jQuery.prototype.css=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;  jQuery.prototype.init.prototype=jQuery.prototype;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用的时候：    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;var&lt;/span&gt; a2=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; jQuery();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  a2.css();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就不需要再去调用初始化方法了，初始化方法在new对象的时候就已经被调用过了。&lt;/p&gt;
&lt;p&gt;接下来定义了一些匹配正则&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;(67)core_pnum=...&lt;/span&gt;这匹配数字的正则&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　core_rnotwhite=...&lt;/span&gt;这是匹配单词&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　rquickExpr=...&lt;/span&gt;匹配防止XSS注入,防止输入框输入病毒的正则，类似&amp;lt;p&amp;gt;aaa 或者#div    这样的形式&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　rsingleTag=...&lt;/span&gt;匹配独立空标签，例如&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;    这样的形式&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　rmsPrefix=...&lt;/span&gt;IE浏览器前缀&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　rdashAlpha=...&lt;/span&gt;转大小写    -l转成L这样的形式&lt;/p&gt;
&lt;p&gt;接下来&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; fcamelCase=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(all,letter){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; letter.toUpperCase();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转驼峰命名法的回调函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; completed=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         document.removeEventListener('DOMContentLoaded',completed,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         window.removeEventListener('load',completed,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;        jQuery.ready();
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DOM加载成功之后触发的回调函数&lt;/p&gt;

&lt;p&gt;感谢大家百忙之中来阅读我的博客~~&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;jQuery文件&quot; href=&quot;https://github.com/cumtchj/jQuery2.0.3&quot; target=&quot;_blank&quot;&gt;点击下载jQuery代码文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇传送门：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; title=&quot;jQuery源码逐行分析学习01(jQuery的框架结构简化)&quot; href=&quot;http://www.cnblogs.com/cumtchj/p/8438181.html&quot; target=&quot;_blank&quot;&gt;jQuery源码逐行分析学习01(jQuery的框架结构简化)&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 22 Feb 2018 03:30:00 +0000</pubDate>
<dc:creator>智盦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cumtchj/p/8458408.html</dc:identifier>
</item>
</channel>
</rss>