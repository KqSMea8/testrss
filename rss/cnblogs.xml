<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>ubuntu16.04编译安装mysql-boost-5.7.21并编译成php扩展测试与使用 - ghostwu</title>
<link>http://www.cnblogs.com/ghostwu/p/8485819.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ghostwu/p/8485819.html</guid>
<description>&lt;p&gt;我之前的文章已经改造了自定义MVC框架中的工具类（&lt;a href=&quot;http://www.cnblogs.com/ghostwu/p/8472125.html&quot; target=&quot;_blank&quot;&gt;验证码&lt;/a&gt;，&lt;a href=&quot;http://www.cnblogs.com/ghostwu/p/8477695.html&quot; target=&quot;_blank&quot;&gt;图片上传&lt;/a&gt;，&lt;a href=&quot;http://www.cnblogs.com/ghostwu/p/8482399.html&quot; target=&quot;_blank&quot;&gt;图像处理&lt;/a&gt;，&lt;a href=&quot;http://www.cnblogs.com/ghostwu/p/8476292.html&quot; target=&quot;_blank&quot;&gt;分页&lt;/a&gt;）4个类，接下来，就要改造模型类，模型类肯定要连接数据库，由于我的Ubuntu Linux是裸装的php(目前只编译了一个gd扩展），所以需要编译安装mysql，并把它编译成扩展，这里，我选用5.7版本带boost的源码包。搞了一个晚上，一边实施，一边做笔记。。。配置太多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、需要准备的库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1，cmake编译器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; cmake
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2，bison( Linux下C/C++语法分析器 )&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; bison
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;3，&lt;/span&gt;&lt;/span&gt;ncurses库，如果你有学过Linux系统编程游戏开发，可能听过或者使用这个库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; libncurses5-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4，gcc编译器，ubuntu16.04自带&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;5，&lt;/span&gt;Boost 1.59.0，这个库下载下来之后，要编译，安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz &lt;br/&gt;tar -zxvf boost_1_59_0.tar.gz -C /usr/local/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt;进入解压后的源码目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /usr/&lt;span&gt;local
cd boost_1_59_0&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果切换不进boost_1_59_0这个目录，自己记得修改用户和组以及权限【sudo chmod 755 boost_1_59_0/】&lt;/p&gt;
&lt;p&gt;&amp;gt;然后运行bootstrap.sh脚本并设置相关参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./bootstrap.&lt;span&gt;sh&lt;/span&gt; --with-libraries=all --with-toolset=&lt;span&gt;gcc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--with-libraries指定编译哪些boost库，all的话就是全部编译&lt;/p&gt;
&lt;p&gt;--with-toolset指定编译时使用哪种编译器&lt;/p&gt;
&lt;p&gt;&amp;gt;编译安装boost&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
./b2　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译boost &lt;/span&gt;
&lt;span&gt;sudo&lt;/span&gt; ./b2 &lt;span&gt;install&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将生成的库安装到/usr/local/lib目录下面，默认的头文件在/usr/local/include/boost目录下边。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt;判断boost库是否安装成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ghostwu@ghostwu:~/php/test$ &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; boost_test.c 
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; 
#include &lt;/span&gt;&amp;lt;iostream&amp;gt;&lt;span&gt; 
#include &lt;/span&gt;&amp;lt;boost/version.hpp&amp;gt;&lt;span&gt; 
#include &lt;/span&gt;&amp;lt;boost/timer.hpp&amp;gt;&lt;span&gt; 
using namespace std; 
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() 
{ 
    boost::timer t; 
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;max timespan: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; t.elapsed_max() / &lt;span&gt;3600&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; 
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;min timespan: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; t.elapsed_min() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; 
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;now time elapsed: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; t.elapsed() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; 
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boost version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; BOOST_VERSION &amp;lt;&amp;lt;&lt;span&gt;endl; 
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;boost lib version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; BOOST_LIB_VERSION &amp;lt;&amp;lt;&lt;span&gt;endl; 
    return &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译&amp;amp;执行:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ghostwu@ghostwu:~/php/test$ g++ boost_test.c -&lt;span&gt;o boost_test
ghostwu@ghostwu:&lt;/span&gt;~/php/test$ ./&lt;span&gt;boost_test 
max timespan: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.56205e+&lt;span&gt;09h
min timespan: 1e&lt;/span&gt;-&lt;span&gt;06s
now &lt;/span&gt;&lt;span&gt;time&lt;/span&gt; elapsed: &lt;span&gt;4&lt;/span&gt;.7e-&lt;span&gt;05s
boost version105900
boost lib version1_59&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示boost版本1.59&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、准备工作已经就绪，接下来开始编译安装mysql&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、添加Mysql用户&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;groupadd mysql
useradd &lt;/span&gt;-r -g mysql mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、创建Mysql安装程序的目录和数据文件的目录 以及用户和组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; /usr/local/&lt;span&gt;mysql57

&lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; ~/&lt;span&gt;mysql57_data
&lt;/span&gt;&lt;span&gt;chown&lt;/span&gt; -R mysql.mysql ~/mysql57_data/

&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;chown&lt;/span&gt; -R mysql.mysql /usr/local/mysql57/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3，配置mysql&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/&lt;span&gt;mysql57 \
&lt;/span&gt;-DMYSQL_DATADIR=/home/ghostwu/&lt;span&gt;mysql57_data \
&lt;/span&gt;-DWITH_BOOST=/usr/local/&lt;span&gt;boost_1_59_0 \
&lt;/span&gt;-DSYSCONFDIR=/&lt;span&gt;etc \
&lt;/span&gt;-DEXTRA_CHARSETS=all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用cmake配置mysql预编译参数： &lt;br/&gt;-DCMAKE_INSTALL_PREFIX：安装路径 &lt;br/&gt;-DMYSQL_DATADIR：数据存放目录 &lt;br/&gt;-DWITH_BOOST：boost源码路径 &lt;br/&gt;-DSYSCONFDIR：my.cnf配置文件目录 &lt;br/&gt;-DEFAULT_CHARSET：数据库默认字符编码 &lt;br/&gt;-DDEFAULT_COLLATION：默认排序规则 &lt;br/&gt;-DENABLED_LOCAL_INFILE：允许从本文件导入数据 &lt;br/&gt;-DEXTRA_CHARSETS：安装所有字符集 &lt;br/&gt;更多预编译配置参数请参考mysql官方文档说明：&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#cmake-general-options&quot; target=&quot;_blank&quot;&gt;http://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#cmake-general-options&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &amp;gt;make &amp;amp;&amp;amp; sudo make install&lt;/p&gt;
&lt;p&gt;&amp;gt;初始化数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; ./bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql57 --datadir=/home/ghostwu/mysql57_data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;临时密码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cat&lt;/span&gt; ~/.mysql_secret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拷贝服务启动文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; support-files/mysql.server /etc/init.d/mysqld
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/etc目录下创建my.cnf&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
port&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
socket&lt;/span&gt;&lt;span&gt;=/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;run&lt;span&gt;/&lt;/span&gt;mysqld&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysqld.sock
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;mysqld&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
port&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
socket&lt;/span&gt;&lt;span&gt;=/&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;run&lt;span&gt;/&lt;/span&gt;mysqld&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysqld.sock
pid&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;=/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;ghostwu&lt;span&gt;/&lt;/span&gt;mysql57_data&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysql.pid
basedir&lt;/span&gt;&lt;span&gt;=/&lt;/span&gt;usr&lt;span&gt;/&lt;/span&gt;local&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysql57
datadir&lt;/span&gt;&lt;span&gt;=/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;ghostwu&lt;span&gt;/&lt;/span&gt;mysql57_data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sudo mkdir -p /var/run/mysqld&lt;/p&gt;
&lt;p&gt;sudo chown mysql:mysql /var/run/mysqld&lt;/p&gt;
&lt;p&gt;启动服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/etc/init.d/mysqld start|stop|restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、如果临时密码太复杂登录不进去，怎么办？重新修改密码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;先关闭mysql服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
/etc/init.d/mysqld stop
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt;把路径切入到/usr/local/mysql57/bin，执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysqld_safe --skip-grant-tables &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt;mysql -p连接，用空密码连接&lt;/p&gt;
&lt;p&gt;然后更新密码:&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;code class=&quot;sql keyword&quot;&gt;update&lt;/code&gt; &lt;code class=&quot;sql plain&quot;&gt;mysql.&lt;/code&gt;&lt;code class=&quot;sql color2&quot;&gt;user&lt;/code&gt; &lt;code class=&quot;sql keyword&quot;&gt;set&lt;/code&gt; &lt;code class=&quot;sql plain&quot;&gt;authentication_string=&lt;/code&gt;&lt;code class=&quot;sql keyword&quot;&gt;password&lt;/code&gt;&lt;code class=&quot;sql plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;sql string&quot;&gt;'abc123'&lt;/code&gt;&lt;code class=&quot;sql plain&quot;&gt;)&lt;/code&gt; &lt;code class=&quot;sql keyword&quot;&gt;where&lt;/code&gt; &lt;code class=&quot;sql color2&quot;&gt;user&lt;/code&gt;&lt;code class=&quot;sql plain&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;sql string&quot;&gt;'root'&lt;/code&gt; &lt;code class=&quot;sql color1&quot;&gt;and&lt;/code&gt; &lt;code class=&quot;sql plain&quot;&gt;Host =&lt;/code&gt; &lt;code class=&quot;sql string&quot;&gt;'localhost'&lt;/code&gt;&lt;code class=&quot;sql plain&quot;&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;新版的mysql数据库下的user表中已经没有Password字段了，而是将加密后的用户密码存储于authentication_string字段&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;sql plain&quot;&gt;&amp;gt;flush&lt;/code&gt; &lt;code class=&quot;sql keyword&quot;&gt;privileges&lt;/code&gt;&lt;code class=&quot;sql plain&quot;&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;quit&lt;/p&gt;
&lt;p&gt;然后重启服务器，就可以用abc123这个密码登录了 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 四、把mysql编译为php的扩展&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有mysql扩展的时候，php调用mysql_connect报错，同时 用 -m参数 也找不到mysql扩展&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
ghostwu@ghostwu:~/php/senior_php$ /usr/local/php54/bin/php -&lt;span&gt;f db.php 
PHP Fatal error:  Call to undefined &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; mysql_connect() &lt;span&gt;in&lt;/span&gt; /home/ghostwu/php/senior_php/db.php on line &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
ghostwu@ghostwu:&lt;/span&gt;~/php/senior_php$ /usr/local/php54/bin/php -m | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; mysql
ghostwu@ghostwu:&lt;/span&gt;~/php/senior_php$ &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; db.php
&lt;/span&gt;&amp;lt;?&lt;span&gt;php
    $link &lt;/span&gt;= mysql_connect( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
    var_dump( $link );
&lt;/span&gt;?&amp;gt;&lt;span&gt;
ghostwu@ghostwu:&lt;/span&gt;~/php/senior_php$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 扩展安装步骤：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; /usr/local/php54/bin/&lt;span&gt;phpize
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ./configure --with-php-config=/usr/local/php54/bin/php-config --with-mysql=/usr/local/&lt;span&gt;mysql57
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;make&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在/usr/local/php54/lib/php.ini中启用mysql.so扩展: extension=mysql.so&lt;/p&gt;
&lt;p&gt;再次执行php(db.php)文件，如果出现下面这个错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
PHP Warning:  mysql_connect(): Can&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t connect to local MySQL server through socket &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;/tmp/mysql.sock&lt;span&gt;'&lt;/span&gt;&lt;span&gt; (2) in /home/ghostwu/php/senior_php/db.php on line 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请在php.ini文件下面这个配置中，告诉php mysql的socket文件路径&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ghostwu@ghostwu:~/php/senior_php$ &lt;span&gt;cat&lt;/span&gt; /usr/local/php54/lib/php.ini | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; mysql.default_socket
pdo_mysql.default_socket&lt;/span&gt;=&lt;span&gt;
mysql.default_socket &lt;/span&gt;= &lt;strong&gt;&lt;span&gt;/var/run/mysqld/mysqld.sock&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后执行数据库连接成功：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ghostwu@ghostwu:~/php/senior_php$ /usr/local/php54/bin/php -&lt;span&gt;f db.php 
resource(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;) of type (mysql link)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;各种参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jb51.net/article/101767.htm&quot; target=&quot;_blank&quot;&gt;http://www.jb51.net/article/101767.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/Lam7/p/6090989.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/Lam7/p/6090989.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/upHailin/article/details/69264389?locationNum=11&amp;amp;fps=1&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/upHailin/article/details/69264389?locationNum=11&amp;amp;fps=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u011573853/article/details/52682256&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/u011573853/article/details/52682256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/forest-wow/p/6642025.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/forest-wow/p/6642025.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;很重要的一项技能：  看日志，看日志，掌握调试方法， 我的mysql好几次启动不了，全部靠错误日志，找到问题所在!!!&lt;/p&gt;

</description>
<pubDate>Wed, 28 Feb 2018 15:40:00 +0000</pubDate>
<dc:creator>ghostwu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ghostwu/p/8485819.html</dc:identifier>
</item>
<item>
<title>C#委托与事件--简单笔记 - 大兄弟竹子</title>
<link>http://www.cnblogs.com/joeymary/p/8486358.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joeymary/p/8486358.html</guid>
<description>&lt;h2 id=&quot;委托&quot;&gt;委托&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;简单记录点东西 适合似懂非懂的朋友看看&lt;br/&gt;委托类型用来定义和响应应用程序中的回调。&lt;br/&gt;借此可以设计各种有面向对象特性的代码模式。下面要说的事件在我看来就是委托的一种实现，再深一步讲，利用委托加事件，是不是可以构建各种所谓的管道框架。&lt;br/&gt;如&lt;code&gt;ASP.NET WebAPI&lt;/code&gt;的管道模型，整个消息处理管道是通过一组有序的&lt;code&gt;HttpMessagHandler&lt;/code&gt; “首尾相连”而成，具体实现“串联”的是通过&lt;code&gt;DelegatingHandler&lt;/code&gt;这个类型来完成的。即是一组&lt;code&gt;委托链&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;最精华的内容您已看完&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;委托定义 public delegate int DeleName(int x);&lt;br/&gt;名称&lt;br/&gt;参数&lt;br/&gt;返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;委托简单示例&quot;&gt;1、委托简单示例&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt; DeleName del = M1;
 public int  M1(int i)
 {
       ...
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;入门理解1：委托是方法的类型，即委托=class，方法=new class()&lt;/p&gt;
&lt;p&gt;上面的方法名称M1只起到传递作用时，可以用匿名委托代替：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; DeleName del = delegate (int i)
 {
      ...
 }; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了用匿名委托，还可以用lamda表达式进行代替：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; DeleName del =  (int i)=&amp;gt;
 {
      ...
 }; &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;在这里也能看出lamda本质就是委托&quot;&gt;在这里也能看出lamda本质就是委托&lt;/h3&gt;
&lt;h2 id=&quot;泛型委托&quot;&gt;2、泛型委托&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt; public delegate void MyGenericDelegate1&amp;lt;T&amp;gt;(T arg);
 public delegate int MyGenericDelegate2&amp;lt;T,M&amp;gt;(T arg,M name);

  MyGenericDelegate1&amp;lt;int&amp;gt; intTarget = new MyGenericDelegate&amp;lt;int&amp;gt;(IntTarget);
  static void IntTarget(int arg) =&amp;gt; Console.WriteLine($&quot;IntTarget--&amp;gt; {++arg}&quot;);
  
  MyGenericDelegate2&amp;lt;int,string&amp;gt; intTarget1 = (int arg,string name) =&amp;gt;
  {
        return 1;
   };&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好处：封装为了复用&lt;/p&gt;
&lt;p&gt;看下上面两个委托的命名：MyGenericDelegate1 MyGenericDelegate2 纯粹为了取名而取名，此时我们可以不自己取名。&lt;br/&gt;怎么做呢，C#本身提供了两个泛型委托可以给我们使用，且可满足大多数场景。&lt;/p&gt;
&lt;h2 id=&quot;泛型action-和-func-委托&quot;&gt;3、泛型Action&amp;lt;&amp;gt; 和 Func&amp;lt;&amp;gt; 委托&lt;/h2&gt;
&lt;h3 id=&quot;可指向至多传递16个参数的方法&quot;&gt;（可指向至多传递16个参数的方法）&lt;/h3&gt;
&lt;p&gt;Action&amp;lt;&amp;gt;:无返回值： 定义 public delegate void Action&amp;lt;...&amp;gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        public static void Show()
        {
            // 使用Action&amp;lt;&amp;gt;委托来指向 DisplayMessage()
            Action&amp;lt;string, ConsoleColor, int&amp;gt; actionTarget = new Action&amp;lt;string, ConsoleColor, int&amp;gt;(DisplayMessage);
            actionTarget(&quot;actionTarget&quot;, ConsoleColor.Red, 5);
        }

        // Action&amp;lt;&amp;gt; 委托的一个目标
        private static void DisplayMessage(string msg, ConsoleColor txtColor, int printCount)
        {
            ...
        }
           &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Func&amp;lt;&amp;gt;:有返回值 public delegate TResult Func&amp;lt;..., out TResult&amp;gt; TResult:返回值类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; Func&amp;lt;int, int, int&amp;gt; funcTarget = new Func&amp;lt;int, int, int&amp;gt;(Add);
 
 funcTarget(1, 2);
    
 static int Add(int x, int y) =&amp;gt; x + y;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你觉得一个具有自定义名称的委托更有助于捕获问题范畴，那么构建自定义委托不过就是一行代码的事儿。&lt;/p&gt;
&lt;p&gt;注：Linq中就大量的用到了 Action&amp;lt;&amp;gt; 和 Func&amp;lt;&amp;gt;。&lt;/p&gt;
&lt;h2 id=&quot;事件&quot;&gt;4、事件&lt;/h2&gt;
&lt;p&gt;最简单的说法是：可以把事件看成是委托的一个实例。委托比作类：它定义了函数的签名（接受什么类型的参数 返回什么类型的值）事件比作委托new出来的一个实例，是具有该委托签名的具体函数。当然事件和实例也是有区别的：&lt;br/&gt;1、事件这个东西 能容纳很多个具体的函数(通过+= -= 增加删除)。&lt;br/&gt;2、事件有event关键字起到了保护作用不允许改变事件的引用。即在声明事件的类外部不能用=对事件对象赋值&lt;/p&gt;
&lt;h3 id=&quot;直接看看代码&quot;&gt;直接看看代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public delegate void HelloWorldDelegate(string name);

public class HelloWorldClass2
    {
        public event HelloWorldDelegate del;//！！！！event修饰了委托对象
        public void HelloWorld(string name)
        {
            //del = (n) =&amp;gt; { Console.WriteLine(n); };//在声明事件的类内部可以用=直接定义事件的引用（赋值）
            del(name);
        }
    }

 class Program
    { 
        static void Main(string[] args)
        { 
            HelloWorldClass2 h2 = new HelloWorldClass2();
            //h2.del = ByEnglish;//不允许改变事件的引用（不能用=赋值）
            h2.del += ByEnglish;//第一种
            //手工创建一个委托变量是最直接的方式。但是大多数情况下，我们并不依靠委托对象。我们可以使用C#提供的方法组转换的方法，它允许我们在调用以委托作为参数的方法时直接提供了与委托期望的签名想匹配的方法的名称（返回 void，参数 string），而不是创建委托对象。（所以一般直接用上面这种）
            HelloWorldDelegate de = ByChinese;
            h2.del += de;//第二种
            h2.HelloWorld(&quot;mary&quot;);
             
            Console.ReadLine();

        }

        static void ByEnglish(string name)
        {
            Console.WriteLine(&quot;hello,world&quot;+name);
        }

        static void ByChinese(string name)
        {
            Console.WriteLine(&quot;你好，世界&quot; + name);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;事件默认是个多播委托，什么是多播委托呢？就是上面的h2.del委托容纳的方法有多个，ByEnglish跟ByChinese，用+=可以继续往下延伸。&lt;/p&gt;
&lt;p&gt;委托和事件的区别在于，事件是个规约，委托是个实现（当然抽象上的委托也可以不是个具体的实现）。&lt;br/&gt;规约的含义是，我定义了这么个语法，你可以通过+=和-=把委托挂载到这个东西（事件）上，当发生这个事件的时候，我会确保这些委托都被得到调用。但是具体是怎么调用的，你不用关心。&lt;/p&gt;
&lt;p&gt;欢迎讨论~&lt;br/&gt;感谢阅读~&lt;/p&gt;
&lt;p&gt;个人公众号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/776708/201802/776708-20180228232816221-1020961047.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;http://www.cnblogs.com/joeymary/p/8486358.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/joeymary/p/8486358.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 28 Feb 2018 15:29:00 +0000</pubDate>
<dc:creator>大兄弟竹子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joeymary/p/8486358.html</dc:identifier>
</item>
<item>
<title>R语言-聚类与分类 - 月上贺兰</title>
<link>http://www.cnblogs.com/luhuajun/p/8484591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luhuajun/p/8484591.html</guid>
<description>&lt;p&gt;一.聚类:&lt;/p&gt;
&lt;p&gt;　一般步骤:&lt;/p&gt;
&lt;p&gt;　　1.选择合适的变量&lt;/p&gt;
&lt;p&gt;　　2.缩放数据&lt;/p&gt;
&lt;p&gt;　　3.寻找异常点&lt;/p&gt;
&lt;p&gt;　　4.计算距离&lt;/p&gt;
&lt;p&gt;　　5.选择聚类算法&lt;/p&gt;
&lt;p&gt;　　6.采用一种或多种聚类方法&lt;/p&gt;
&lt;p&gt;　　7.确定类的数目&lt;/p&gt;
&lt;p&gt;　　8.获得最终聚类的解决方案&lt;/p&gt;
&lt;p&gt;　　9.结果可视化&lt;/p&gt;
&lt;p&gt;　　10.解读类&lt;/p&gt;
&lt;p&gt;　　11.验证结果&lt;/p&gt;
&lt;p&gt;      1.层次聚类分析&lt;/p&gt;
&lt;p&gt;　　案例:采用flexclust的营养数据集作为参考&lt;/p&gt;
&lt;p&gt;　　　　1.基于5种营养标准的27类鱼,禽,肉的相同点和不同点是什么&lt;/p&gt;
&lt;p&gt;　　　　2.是否有一种办法把这些食物分成若干各类&lt;/p&gt;
&lt;p&gt;　　　　1.1计算距离&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; data(nutrient,package = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;flexclust&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; head(nutrient,4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; d &amp;lt;-&lt;span&gt; dist(nutrient)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; as.matrix(d)[1:4,1:4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228154154776-589097470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结论:观测的距离越大,异质性越大&lt;/p&gt;
&lt;p&gt;　　　　1.2平均联动聚类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; row.names(nutrient) &amp;lt;-&lt;span&gt; tolower(row.names(nutrient))
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; nutrient.scaled &amp;lt;-&lt;span&gt; scale(nutrient)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; d2 &amp;lt;-&lt;span&gt; dist(nutrient.scaled)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; fit.average &amp;lt;- hclust(d2,method = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;average&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; plot(fit.average,hang=-1,cex=.8,main=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Average Linkage Clustering&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228154453613-1682192922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结论:只能提供食物营养成分的相似性和相异性&lt;/p&gt;
&lt;p&gt;　　　　1.3获取聚类的个数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; library(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NbClust&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; devAskNewPage(ask =&lt;span&gt; T)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; nc &amp;lt;- NbClust(nutrient.scaled, distance=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;euclidean&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;               min.nc=2, max.nc=15, method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;average&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; table(nc$Best.n[1&lt;span&gt;,])
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; barplot(table(nc$Best.n[1&lt;span&gt;,]),
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         xlab = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Number of Clusters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,ylab = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Number of Criteria&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         main=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Number of Clusters chosen by 26 criteria&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228154702341-1005637259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结论:分别有4个投票数最多的聚类(2,3,5,15),从中选择一个更适合的聚类数&lt;/p&gt;
&lt;p&gt;　　　　1.4获取聚类的最终方案&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 聚类分配情况&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; clusters &amp;lt;- cutree(fit.average,k=5&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;table(clusters)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 描述聚类&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; aggregate(nutrient,by=list(clusters=&lt;span&gt;clusters),median)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; aggregate(as.data.frame(nutrient.scaled),by=list(clusters=&lt;span&gt;clusters),median)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; plot(fit.average,hang=-1,cex=.8,main=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Average Linkpage Clustering\n 5 Cluster Solution&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; rect.hclust(fit.average,k=5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228155102293-1433073387.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　　　结论:&lt;/p&gt;
&lt;p&gt;　　　　　　1.sardines canned形成自己的类,因为钙含量比较高&lt;/p&gt;
&lt;p&gt;　　　　　　2.beef heart也是单独的类,富含蛋白质和铁&lt;/p&gt;
&lt;p&gt;　　　　　　3.beef roast到pork simmered含有高能量和脂肪&lt;/p&gt;
&lt;p&gt;　　　　　　4.clams raw到clams canned含有较高的维生素&lt;/p&gt;
&lt;p&gt;　　　　　　5.mackerel canned到bluefish baked含有较低的铁&lt;/p&gt;
&lt;p&gt;　　2.划分聚类分析&lt;/p&gt;
&lt;p&gt;　　案例:采用rattle.data中的wine数据集进行分析&lt;/p&gt;
&lt;p&gt;　　　　1.葡萄酒数据的K均值聚类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用卵石图确定类的数量&lt;/span&gt;
wssplot &amp;lt;- function(data,nc=15,seed=1234&lt;span&gt;){
  wss &lt;/span&gt;&amp;lt;- (nrow(data)-1) * sum(apply(data,2&lt;span&gt;,var))
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i &lt;span&gt;in&lt;/span&gt; 2&lt;span&gt;:nc) {
    set.seed(seed)
    wss[i] &lt;/span&gt;&amp;lt;- sum(kmeans(data,centers =&lt;span&gt; i)$withinss)
  }
  plot(&lt;/span&gt;1:nc,wss,type = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,xlab = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Number of Clusters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,ylab = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Within groups sum of squares&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; data(wine,package = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rattle.data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;head(wine)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; df &amp;lt;- scale(wine[-1&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;wssplot(df)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;library(NbClust)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; set.seed(1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 确定聚类的数量&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; nc &amp;lt;- NbClust(df, min.nc=2, max.nc=15, method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kmeans&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; table(nc$Best.n[1&lt;span&gt;,])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; barplot(table(nc$Best.n[1&lt;span&gt;,]), 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         xlab=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Numer of Clusters&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ylab=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Number of Criteria&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         main=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Number of Clusters Chosen by 26 Criteria&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; set.seed(1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 进行k值聚类分析&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; fit.km &amp;lt;- kmeans(df, 3, nstart=25&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;fit.km$size
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;fit.km$centers                                               
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; aggregate(wine[-1], by=list(cluster=fit.km$cluster), mean)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228160531185-975827887.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结论:分3个聚类对数据有很好的拟合&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用兰德系数来量化类型变量和类之间的协议&lt;/span&gt;
ct.km &amp;lt;-&lt;span&gt; table(wine$Type,fit.km$cluster)
library(flexclust)
randIndex(ct.km)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228160837197-493281807.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:拟合结果优秀&lt;/p&gt;
&lt;p&gt;　　围绕中心点的分类:因为K均值聚类方法是基于均值的,所以对异常值较为敏感,更为稳健的方法是围绕中心点的划分,&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　 k均值聚类一般使用欧几里得距离,而PAM可以使用任意的距离来计算&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;library(cluster)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; set.seed(1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; fit.pam &amp;lt;- pam(wine[-1],k=3,stand =&lt;span&gt; T)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;fit.pam$medoids
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; clusplot(fit.pam,main = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Bivariate Cluster Plot&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; ct.pam &amp;lt;-&lt;span&gt; table(wine$Type,fit.pam$clustering)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; randIndex(ct.pam)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228163707424-1229283026.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228163723595-1947744554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:调整后的兰德指数从之前的0.9下降到0.7&lt;/p&gt;
&lt;p&gt;　　3.避免不存在的聚类&lt;/p&gt;
&lt;p&gt;　　3.1查看数据集&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;library(fMultivar)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; set.seed(1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; df &amp;lt;- rnorm2d(1000,rho=.5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; df &amp;lt;-&lt;span&gt; as.data.frame(df)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; plot(df,main=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Bivariate Normal Distribution with rho=0.5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228164341447-2136598948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:没有存在的类&lt;/p&gt;
&lt;p&gt;　　3.2计算聚类的个数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(NbClust)
nc &lt;/span&gt;&amp;lt;- NbClust(df,min.nc = 2,max.nc = 15,method = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;kmeans&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
dev.new()
barplot(table(nc$Best.n[&lt;/span&gt;1,]),xlab=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Numer of Clusters&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ylab=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Number of Criteria&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        main&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Number of Clusters Chosen by 26 Criteria&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228164502001-1761383155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:一共可分为3各类&lt;/p&gt;
&lt;p&gt;　　3.3聚类图像&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;library(ggplot2)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; fit2 &amp;lt;- pam(df,k=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; df$clustering &amp;lt;-&lt;span&gt; factor(fit2$clustering)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; ggplot(data = df,aes(x=V1,y=V2,color=clustering,shape=clustering))+
&lt;span&gt;5&lt;/span&gt;   geom_point()+
&lt;span&gt;6&lt;/span&gt;   ggtitle(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Clustering of Bivariate Normal Data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228164726562-1701025574.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结论:对于二元数据的PAM聚类分析,提取出2类&lt;/p&gt;
&lt;p&gt;　　3.4分析聚类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
plot(nc$All.index[,4],type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,ylab=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ccc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,xlab=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Number of Clusters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,col=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228165936749-588447571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结论:二元正态数据的CCC图,表明没有类存在,当CCC为负数并且对于两类或者是更多的类的递减&lt;/p&gt;
&lt;p&gt;二.分类&lt;/p&gt;
&lt;p&gt;　　使用机器学习来预测二分类结果&lt;/p&gt;
&lt;p&gt;　　案例分析:使用乳腺癌数据作为测试,训练集建立逻辑回归,决策时,条件推断树,随机森林,支持向量机等分类模型,测试集用于评估各个模型的有效性&lt;/p&gt;
&lt;p&gt;　　1.准备数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
loc &amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://archive.ics.uci.edu/ml/machine-learning-databases/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
ds  &lt;/span&gt;&amp;lt;- &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;breast-cancer-wisconsin/breast-cancer-wisconsin.data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
url &lt;/span&gt;&amp;lt;- paste(loc, ds, sep=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)

breast &lt;/span&gt;&amp;lt;- read.table(url, sep=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, header=FALSE, na.strings=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
names(breast) &lt;/span&gt;&amp;lt;- c(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clumpThickness&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizeUniformity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shapeUniformity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maginalAdhesion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
                   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;singleEpithelialCellSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bareNuclei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
                   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blandChromatin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;normalNucleoli&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mitosis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
df &lt;/span&gt;&amp;lt;- breast[-1&lt;span&gt;]
df$&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; &amp;lt;-factor(df$&lt;span&gt;class&lt;/span&gt;,levels = c(2,4),labels = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;begign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;malignant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
set.seed(&lt;/span&gt;1234&lt;span&gt;)
train &lt;/span&gt;&amp;lt;- sample(nrow(df),0.7*&lt;span&gt;nrow(df))
df.train &lt;/span&gt;&amp;lt;-&lt;span&gt; df[train,]
df.validate &lt;/span&gt;&amp;lt;- df[-&lt;span&gt;train,]
table(df.train$&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
table(df.validate$&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2.逻辑回归&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 拟合逻辑回归&lt;/span&gt;
fit.logit &amp;lt;- glm(&lt;span&gt;class&lt;/span&gt;~.,data=df.train,family =&lt;span&gt; binomial())
prob &lt;/span&gt;&amp;lt;- predict(fit.logit,df.validate,type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对训练集外的样本进行分类&lt;/span&gt;
logit.pred &amp;lt;- factor(prob&amp;gt;.5,levels = c(F,T),labels = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;benign&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;malignant&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 评估预测的准确性&lt;/span&gt;
logit.pref &amp;lt;- table(df.validate$&lt;span&gt;class&lt;/span&gt;,logit.pred,dnn = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Actual&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Predicted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
logit.pref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228225556909-1670877485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:正确分类的模型是97%&lt;/p&gt;
&lt;p&gt;　　3.决策树&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(rpart)
set.seed(&lt;/span&gt;1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成树&lt;/span&gt;
dtree &amp;lt;- rpart(&lt;span&gt;class&lt;/span&gt;~.,data = df.train,method = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,parms = list(split=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;information&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
plotcp(dtree)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 剪枝&lt;/span&gt;
dtree.pruned &amp;lt;- prune(dtree,cp=.0125&lt;span&gt;)
library(rpart.plot)
prp(dtree.pruned,type &lt;/span&gt;= 2,extra = 104,fallen.leaves = T,main=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;decision tree&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对训练集外的样本单元分类&lt;/span&gt;
dtree.pred &amp;lt;- predict(dtree.pruned,df.validate,type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
dtree.pref &lt;/span&gt;&amp;lt;- table(df.validate$&lt;span&gt;class&lt;/span&gt;,dtree.pred,dnn = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Actual&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Predict&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
dtree.pref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228225841599-420719443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228225816321-1799181415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　结论:验证的准确率96%&lt;/p&gt;
&lt;p&gt;　　4.条件推断树&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(party)
library(partykit)
fit.tree &lt;/span&gt;&amp;lt;- ctree(&lt;span&gt;class&lt;/span&gt;~.,data=&lt;span&gt;df.train)
plot(fit.tree,main&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Condition Inference Tree&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
ctree.pred &lt;/span&gt;&amp;lt;- predict(fit.tree,df.validate,type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
ctree.pref &lt;/span&gt;&amp;lt;- table(df.validate$&lt;span&gt;class&lt;/span&gt;,ctree.pred,dnn = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Actual&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Predicted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
ctree.pref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228230102019-1226374628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228230116641-2003977815.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:验证的准确率97%&lt;/p&gt;
&lt;p&gt;　　5.随机森林&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(randomForest)
set.seed(&lt;/span&gt;1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成森林&lt;/span&gt;
fit.forest &amp;lt;- randomForest(&lt;span&gt;class&lt;/span&gt;~.,data=df.train,na.action=na.roughfix,importance=&lt;span&gt;T)
importance(fit.forest,type&lt;/span&gt;=2&lt;span&gt;)
forest.pred &lt;/span&gt;&amp;lt;-&lt;span&gt; predict(fit.forest,df.validate)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对训练集外的样本点分类&lt;/span&gt;
forest.pref &amp;lt;- table(df.validate$&lt;span&gt;class&lt;/span&gt;,forest.pred,dnn = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Actual&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Predicted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
forest.pref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228230341309-1237709552.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:验证准确率在98%&lt;/p&gt;
&lt;p&gt;　　6.支持向量机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(e1071)
set.seed(&lt;/span&gt;1234&lt;span&gt;)
fit.svm &lt;/span&gt;&amp;lt;- svm(&lt;span&gt;class&lt;/span&gt;~.,data=&lt;span&gt;df.train)
svm.pred &lt;/span&gt;&amp;lt;-&lt;span&gt; predict(fit.svm,na.omit(df.validate))
svm.pref &lt;/span&gt;&amp;lt;- table(na.omit(df.validate)$&lt;span&gt;class&lt;/span&gt;,svm.pred,dnn = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Actual&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Predicted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
svm.pref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228230450294-2086957897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:验证准确率在96%&lt;/p&gt;
&lt;p&gt;　　7.带有RBF内核的支持向量机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
set.seed(1234&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过调整gamma和c来拟合模型&lt;/span&gt;
tuned &amp;lt;- tune.svm(&lt;span&gt;class&lt;/span&gt;~.,data=df.train,gamma = 10^(-6:1),cost = 10^(-10:10&lt;span&gt;))
tuned
fit.svm &lt;/span&gt;&amp;lt;- svm(&lt;span&gt;class&lt;/span&gt;~.,data=df.train,gamma=.01,cost=1&lt;span&gt;)
svm.pred &lt;/span&gt;&amp;lt;-&lt;span&gt; predict(fit.svm,na.omit(df.validate))
svm.pref &lt;/span&gt;&amp;lt;- table(na.omit(df.validate)$&lt;span&gt;class&lt;/span&gt;,svm.pred,dnn = c(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Actual&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Predicted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
svm.pref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228230752823-941204616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论验证的成功率有97%&lt;/p&gt;
&lt;p&gt;　　8.编写函数选择预测效果最好的解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
performance &amp;lt;- function(table,n=2&lt;span&gt;){
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!all(dim(table) == c(2,2&lt;span&gt;))){
    stop(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Must be a 2 * 2 table&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  }
  tn &lt;/span&gt;= table[1,1&lt;span&gt;]
  fp &lt;/span&gt;= table[1,2&lt;span&gt;]
  fn &lt;/span&gt;= table[2,1&lt;span&gt;]
  tp &lt;/span&gt;= table[2,2&lt;span&gt;]
  sensitivity &lt;/span&gt;= tp/(tp+&lt;span&gt;fn)
  specificity &lt;/span&gt;= tn/(tn+&lt;span&gt;fp)
  ppp &lt;/span&gt;= tp/(tp+&lt;span&gt;fp)
  npp &lt;/span&gt;= tn/(tn+&lt;span&gt;fn)
  hitrate &lt;/span&gt;= (tp+tn)/(tp+tn+fn+&lt;span&gt;fp)
  result &lt;/span&gt;&amp;lt;- paste(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sensitivity = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, round(sensitivity, n) ,
                  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nSpecificity = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, round(specificity, n),
                  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nPositive Predictive Value = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, round(ppp, n),
                  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nNegative Predictive Value = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, round(npp, n),
                  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nAccuracy = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, round(hitrate, n), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sep=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
  cat(result)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;performance(logit.pref)
performance(dtree.pref)
performance(ctree.pref)
performance(forest.pref)
performance(svm.pref)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228231103052-1405481094.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:从以上的分类器中,本案例随机森林的拟合度最优&lt;/p&gt;
&lt;p&gt;三.使用rattle进行数据挖掘&lt;/p&gt;
&lt;p&gt;　　案例:预测糖尿病&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;library(rattle)
rattle()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228231416582-809559820.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:设定好这些变量点击执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228231635435-27358119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　选择model选项卡,然后选择条件推断树作为预测模型,点击Draw生成图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228231803190-933171837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　通过Evalute选项卡来评估模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1173792/201802/1173792-20180228231909652-1520745333.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结论:只有35%的病人被成功鉴别,我们可以试试随机森林和支持向量机的匹配度是否更高&lt;/p&gt;

</description>
<pubDate>Wed, 28 Feb 2018 15:20:00 +0000</pubDate>
<dc:creator>月上贺兰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luhuajun/p/8484591.html</dc:identifier>
</item>
<item>
<title>Windows Server 2016-图形化备份域控制器 - Wenzhongxiang</title>
<link>http://www.cnblogs.com/wenzhongxiang/p/8486306.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenzhongxiang/p/8486306.html</guid>
<description>&lt;p&gt;上边几章节我们补充了有关Windows Server 2016系统层面的相关内容，本章切回Active Directory正题，继续围绕AD域相关内容进行不断梳理补充。Windows Server Backup由Microsoft管理控制台（MMC）管理单元，命令行工具和Windows PowerShell cmdlet组成，可为您的日常备份和恢复需求提供完整的解决方案。您可以使用Windows Server Backup备份完整的服务器（所有卷），选定的卷，系统状态或特定的文件或文件夹，并创建可用于裸机恢复的备份。您可以恢复卷，文件夹，文件，某些应用程序和系统状态。而且，如果发生像硬盘故障这样的灾难，您可以执行裸机恢复。（要做到这一点，您需要备份整个服务器或仅包含操作系统文件的卷和Windows恢复环境 - 这会将整个系统还原到旧系统或新硬盘上。）&lt;/p&gt;
&lt;p&gt;您可以使用Windows Server Backup为本地计算机或远程计算机创建和管理备份。而且，您可以安排备份自动运行。&lt;/p&gt;
&lt;p&gt;Windows Server Backup适用于需要基本备份解决方案（从小型企业到大型企业）的每个人，但它甚至适用于小型组织或非IT专业人员。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;9&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;您必须是管理员组或Backup Operators组的成员才能使用Windows Server Backup。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;某些备份或恢复任务必须在两台运行相同版本的Windows Server 2012或Windows Server 2012 R2的计算机上执行，而其他备份或恢复任务则可以在运行任一版本的计算机上执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;要执行系统状态或完整系统恢复，您必须使用正在恢复的Windows相同版本的备份。例如，您无法使用Windows Server 2012的备份来恢复运行Windows Server 2012 R2的计算机的系统状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;防火墙可能已启用。如果使用Windows Server Backup管理单元管理另一台计算机的备份，则与远程计算机的连接可能会受到影响，并且可以通过更改防火墙规则来解决。在本地计算机上工作时，您不受影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Windows Server Backup不支持从群集共享卷（CSV）备份数据或存储备份。（但是，您可以使用虚拟机中的Windows Server Backup备份虚拟机。）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;如果使用虚拟硬盘来存储备份，如果虚拟硬盘位于包含系统卷或临界卷的物理磁盘上，则可能会限制您可以恢复的内容。另外，如果虚拟卷在线，虚拟卷文件将从备份中排除。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果您是上一个备份功能（Ntbackup.exe）的当前用户，并计划切换到新的Windows Server Backup，则可能会受到以下问题和更改的影响：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;    升级到Windows Server 2012时，用于创建备份的设置不会升级。您将需要重新配置设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;    无法使用Windows Server Backup在需要2040 GB（或2 TB）以上的卷上备份文件和文件夹。但是，只要数据大小小于2 TB，您就可以执行文件或文件夹备份。例如，您可以从3 TB容量备份1.5 TB的数据。但是，使用备份的完整服务器或卷恢复将重新创建2 TB容量而不是3 TB容量。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;    只能在本地连接的磁盘上备份NTFS格式的卷。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;    您无法在磁带上存储备份。Windows Server Backup支持备份到外部和内部磁盘，光盘和可移动媒体（如DVD）和远程共享文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;    使用Windows Server Backup无法恢复使用Ntbackup.exe创建的备份(如2008低版本环境需要恢复，可下载08对应的ntbackup.exe版本)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、Windows Server Backup功能安装：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.1.打开服务服务器管理器，选择添加角色和功能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.2.下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.3.选择基于角色或基于功能的安装：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.4.选择从服务器池中选择服务器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.5.下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ5.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.6.在功能选项中勾选&quot;Windows Server Backup&quot;，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.7.选择安装继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.8.角色安装完成后，点击关闭完成安装：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.9.打开管理工具，我们查看到Windows Server Backup：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ9.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、执行域控制器系统备份：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.1.打开Windows Server Backup控制台，操作栏选择&quot;一次性备份&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ10.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.2.在备份选项界面选择&quot;其他选项&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ11.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.3.在选择备份配置栏选择&quot;自定义&quot;，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ12.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.4.在选择要备份的项界面选择&quot;添加项目&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ13.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.5.选择要备份的C盘、裸机恢复、系统状态、系统保留，点击确定：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ14.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.6.选择&quot;高级设置&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ15.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.7.在高级设置界面，切换到VSS设置界面，选择VSS完整备份，点击确定继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ16.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.8.下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ17.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.9.本次我们以远程共享文件夹，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ18.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.10.指定远程文件夹，输入共享位置，在访问控制栏勾选&quot;继承&quot;，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ19.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.11.确定备份信息，点击备份开始备份：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ20.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.12.备份完成，状态信息如下，点击关闭完成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ21.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.13.备份成功消息如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ22.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、设置域控制器备份计划：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.1.打开Windows Server Backup管理界面，右键本地备份—选择&quot;备份计划&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ23.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.2.下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ24.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.3.选择&quot;自定义&quot;，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ25.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.4.常规我们备份域控制器只需要备份系统状态即可，勾选&quot;系统状态&quot;，点击确定继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ26.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.5.确认备份的项，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ27.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.6.指定备份的时间段，可以选择每日一次备份并指定备份时间段，或者可以设置每日备份多次；这里选择每日零时一次备份，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ28.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.7.选择备份的目标类型，可根据实际情况选择的目标类型，这里选择&quot;备份到共享网络文件夹&quot;，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ29.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.9.弹出窗提示&quot;在将远程共享文件夹用作计划备份的存储目标时，每次备份会擦除前面的备份，你将只能使用最新的备份&quot;，点击确定继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ30.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.10.指定远程备份共享文件夹位置，访问控制权限选择继承，下一步继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ31.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.11.确定备份计划，点击完成继续：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ32.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.12.备份计划摘要，点击关闭完成备份计划设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ33.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.13.查看备份管理控制台，状态界面显示下次备份的时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.azureyun.com/wp-content/uploads/2018/02/022818_1456_WindowsServ34.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 28 Feb 2018 15:08:00 +0000</pubDate>
<dc:creator>Wenzhongxiang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenzhongxiang/p/8486306.html</dc:identifier>
</item>
<item>
<title>Spark DataFrame写入HBase的常用方式 - xingoo</title>
<link>http://www.cnblogs.com/xing901022/p/8486290.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xing901022/p/8486290.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Spark是目前最流行的分布式计算框架，而HBase则是在HDFS之上的列式分布式存储引擎，基于Spark做离线或者实时计算，数据结果保存在HBase中是目前很流行的做法。例如用户画像、单品画像、推荐系统等都可以用HBase作为存储媒介，供客户端使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此Spark如何向HBase中写数据就成为很重要的一个环节了。本文将会介绍三种写入的方式，其中一种还在期待中，暂且官网即可...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码在spark 2.2.0版本亲测&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第一种是最简单的使用方式了，就是基于RDD的分区，由于在spark中一个partition总是存储在一个excutor上，因此可以创建一个HBase连接，提交整个partition的内容。&lt;/p&gt;
&lt;p&gt;大致的代码是:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rdd.foreachPartition { records =&amp;gt;
    val config = HBaseConfiguration.create
    config.set(&quot;hbase.zookeeper.property.clientPort&quot;, &quot;2181&quot;)
    config.set(&quot;hbase.zookeeper.quorum&quot;, &quot;a1,a2,a3&quot;)
    val connection = ConnectionFactory.createConnection(config)
    val table = connection.getTable(TableName.valueOf(&quot;rec:user_rec&quot;))
    
    // 举个例子而已，真实的代码根据records来
    val list = new java.util.ArrayList[Put]
    for(i &amp;lt;- 0 until 10){
        val put = new Put(Bytes.toBytes(i.toString))
        put.addColumn(Bytes.toBytes(&quot;t&quot;), Bytes.toBytes(&quot;aaaa&quot;), Bytes.toBytes(&quot;1111&quot;))
        list.add(put)
    }
    // 批量提交
    table.put(list)
    // 分区数据写入HBase后关闭连接
    table.close()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样每次写的代码很多，显得不够友好，如果能跟dataframe保存parquet、csv之类的就好了。下面就看看怎么实现dataframe直接写入hbase吧！&lt;/p&gt;

&lt;p&gt;由于这个插件是hortonworks提供的，maven的中央仓库并没有直接可下载的版本。需要用户下载源码自己编译打包，如果有maven私库，可以上传到自己的maven私库里面。具体的步骤可以参考如下：&lt;/p&gt;
&lt;h2 id=&quot;下载源码编译上传&quot;&gt;2.1 下载源码、编译、上传&lt;/h2&gt;
&lt;p&gt;去官网github下载即可：&lt;a href=&quot;https://github.com/hortonworks-spark/shc&quot; class=&quot;uri&quot;&gt;https://github.com/hortonworks-spark/shc&lt;/a&gt;&lt;br/&gt;可以直接按照下面的readme说明来，也可以跟着我的笔记走。&lt;/p&gt;
&lt;p&gt;下载完成后，如果有自己的私库，可以修改shc中的distributionManagement。然后点击旁边的maven插件deploy发布工程，如果只想打成jar包，那就直接install就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/449064/201802/449064-20180228230312864-1054939503.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/449064/201802/449064-20180228230320636-1110084448.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;引入&quot;&gt;2.2 引入&lt;/h2&gt;
&lt;p&gt;在pom.xml中引入：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.hortonworks&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;shc-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.1.2-2.2-s_2.11-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;section&quot;&gt;2.3&lt;/h2&gt;
&lt;p&gt;首先创建应用程序，Application.scala&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;object Application {
    def main(args: Array[String]): Unit = {
        val spark = SparkSession.builder().master(&quot;local&quot;).appName(&quot;normal&quot;).getOrCreate()
        spark.sparkContext.setLogLevel(&quot;warn&quot;)
        val data = (0 to 255).map { i =&amp;gt;  HBaseRecord(i, &quot;extra&quot;)}

        val df:DataFrame = spark.createDataFrame(data)
        df.write
          .mode(SaveMode.Overwrite)
          .options(Map(HBaseTableCatalog.tableCatalog -&amp;gt; catalog))
          .format(&quot;org.apache.spark.sql.execution.datasources.hbase&quot;)
          .save()
    }
    def catalog = s&quot;&quot;&quot;{
                   |&quot;table&quot;:{&quot;namespace&quot;:&quot;rec&quot;, &quot;name&quot;:&quot;user_rec&quot;},
                   |&quot;rowkey&quot;:&quot;key&quot;,
                   |&quot;columns&quot;:{
                   |&quot;col0&quot;:{&quot;cf&quot;:&quot;rowkey&quot;, &quot;col&quot;:&quot;key&quot;, &quot;type&quot;:&quot;string&quot;},
                   |&quot;col1&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col1&quot;, &quot;type&quot;:&quot;boolean&quot;},
                   |&quot;col2&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col2&quot;, &quot;type&quot;:&quot;double&quot;},
                   |&quot;col3&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col3&quot;, &quot;type&quot;:&quot;float&quot;},
                   |&quot;col4&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col4&quot;, &quot;type&quot;:&quot;int&quot;},
                   |&quot;col5&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col5&quot;, &quot;type&quot;:&quot;bigint&quot;},
                   |&quot;col6&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col6&quot;, &quot;type&quot;:&quot;smallint&quot;},
                   |&quot;col7&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col7&quot;, &quot;type&quot;:&quot;string&quot;},
                   |&quot;col8&quot;:{&quot;cf&quot;:&quot;t&quot;, &quot;col&quot;:&quot;col8&quot;, &quot;type&quot;:&quot;tinyint&quot;}
                   |}
                   |}&quot;&quot;&quot;.stripMargin
}
case class HBaseRecord(
                  col0: String,
                  col1: Boolean,
                  col2: Double,
                  col3: Float,
                  col4: Int,
                  col5: Long,
                  col6: Short,
                  col7: String,
                  col8: Byte)

object HBaseRecord
{
  def apply(i: Int, t: String): HBaseRecord = {
    val s = s&quot;&quot;&quot;row${&quot;%03d&quot;.format(i)}&quot;&quot;&quot;
    HBaseRecord(s,
      i % 2 == 0,
      i.toDouble,
      i.toFloat,
      i,
      i.toLong,
      i.toShort,
      s&quot;String$i: $t&quot;,
      i.toByte)
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/449064/201802/449064-20180228230337685-1291145186.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后再resources目录下，添加hbase-site.xml、hdfs-site.xml、core-site.xml等配置文件。主要是获取Hbase中的一些连接地址。&lt;/p&gt;

&lt;p&gt;如果有浏览官网习惯的同学，一定会发现，HBase官网的版本已经到了3.0.0-SNAPSHOT，并且早就在2.0版本就增加了一个hbase-spark模块，使用的方法跟上面hortonworks一样，只是format的包名不同而已，猜想就是把hortonworks给拷贝过来了。&lt;/p&gt;
&lt;p&gt;另外Hbase-spark 2.0.0-alpha4目前已经公开在maven仓库中了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark&quot; class=&quot;uri&quot;&gt;http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过，内部的spark版本是1.6.0，太陈旧了！！！！真心等不起了...&lt;/p&gt;
&lt;p&gt;期待hbase-spark官方能快点提供正式版吧。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;hortonworks-spark/shc github：&lt;a href=&quot;https://github.com/hortonworks-spark/shc&quot; class=&quot;uri&quot;&gt;https://github.com/hortonworks-spark/shc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;maven仓库地址: &lt;a href=&quot;http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark&quot; class=&quot;uri&quot;&gt;http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hbase spark sql/ dataframe官方文档：&lt;a href=&quot;https://hbase.apache.org/book.html#_sparksql_dataframes&quot; class=&quot;uri&quot;&gt;https://hbase.apache.org/book.html#_sparksql_dataframes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Wed, 28 Feb 2018 15:05:00 +0000</pubDate>
<dc:creator>xingoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xing901022/p/8486290.html</dc:identifier>
</item>
<item>
<title>从flexible.js引入高德地图谈起的移动端适配 - baby格鲁特</title>
<link>http://www.cnblogs.com/ChengWuyi/p/8196647.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ChengWuyi/p/8196647.html</guid>
<description>&lt;p&gt;曾几何时，前端还仅仅是PC端的。随着移动时代的兴起，h5及css3的推陈出新。前端的领域慢慢的由传统的pc端转入了移动端，这也导致了前端这一职业在风口的一段时间出尽了风头。&lt;/p&gt;
&lt;p&gt;从开始的惶恐和无从下手，慢慢的到了有了统一的技术方案去落地实现。&lt;/p&gt;
&lt;p&gt;从手写不同尺寸的媒体查询css到以手淘的flexible.js来进行移动端的适配，虽然过程曲折，不过效果也是十分的显著，因为有了成熟的体系以后。什么东西就有据可寻，适配也就没那么困难了。&lt;/p&gt;
&lt;p&gt;但是，因为这次引入了高德地图，所以在适配上出现了一点意料之外的问题。&lt;/p&gt;
&lt;p&gt;首先，我要说下视口这个东西，因为手淘的这个方案是严重依赖视口这个概念的。&lt;/p&gt;
&lt;h2&gt;1.视口&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1视口的分类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ppk将视口分为三大类：布局视口，可视视口，理想视口&lt;/p&gt;
&lt;p&gt;那视口是什么呢？通俗点说就是就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，因为为了正常的显示PC端的网页，浏览器会将自己的layout viewport设置为一个较大的值，结果就是会出现左右的滚动条。当然viewport(visual viewport)也可能比浏览器的可视区域要小，比如有的手机自带的浏览器会有一个自带的黑色小边距。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/642545/201802/642545-20180228115114056-1073633362.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;布局视口和可视视口我们作基本了解即可。在实际工作中，我们需要接触和处理的更多是ideal viewport。&lt;/p&gt;
&lt;p&gt;而我们前端一直孜孜以求的移动端的适配。其实就是为了让用户的浏览器中呈现的是我们的理想视口&lt;/p&gt;
&lt;p&gt;ideal viewport并没有一个固定的尺寸，不同的设备拥有有不同的ideal viewport。&lt;/p&gt;
&lt;p&gt;早期移动端开发，对于终端设备适配问题只属于Android系列，有320pt的，有360pt的，有384pt的等等。但随着iPhone6，iPhone6+的出现，从此终端适配问题不再是Android系列了，也从这个时候让移动端适配全面进入到“杂屏”时代。有320pt的，有375pt(iphone x)的，有414pt(plus)的等等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://viewportsizes.com/&quot; target=&quot;_blank&quot;&gt;http://viewportsizes.com&lt;/a&gt;里面收集了众多设备的理想宽度。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.2 如何影响视口？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;既然viewport这么重要，那我们怎么去控制他为我所用呢？这个时候，就轮到meta标签出场了。&lt;/p&gt;
&lt;p&gt;先来一段我们在开发的时候最常用的一句话。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用下面的表格来解释一下content里面的属性&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;width&lt;/td&gt;
&lt;td&gt;设置&lt;em&gt;&lt;strong&gt;layout viewport&lt;/strong&gt;&lt;/em&gt;  的宽度，为一个正整数，或字符串&quot;width-device&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; height&lt;/td&gt;
&lt;td&gt; 设置&lt;em&gt;&lt;strong&gt;layout viewport&lt;/strong&gt;&lt;/em&gt;  的高度，这个属性对我们并不重要，几乎不使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; initial-scale&lt;/td&gt;
&lt;td&gt; 设置页面的初始缩放值，相对于&lt;em&gt;&lt;strong&gt;ideal viewport&lt;/strong&gt;&lt;/em&gt;进行缩放，为一个数字，可以带小数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; minimum-scale&lt;/td&gt;
&lt;td&gt; 允许用户的最小缩放值，为一个数字，可以带小数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; maximum-scale&lt;/td&gt;
&lt;td&gt; 允许用户的最大缩放值，为一个数字，可以带小数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; user-scalable&lt;/td&gt;
&lt;td&gt; 是否允许用户进行缩放，值为&quot;no&quot;或&quot;yes&quot;, no 代表不允许，yes代表允许&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;width=device-width，通过这个特殊值。我们将layout viewport =&amp;gt; ideal viewport&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 通过设置初始的缩放比率，我们也可以将layout viewport =&amp;gt; ideal viewport&lt;/p&gt;
&lt;p&gt;所以上面两种方式是殊途同归的。那么，为什么我们还要将两个都写上去呢？&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;答案：initial-scale=1.0&lt;/span&gt;是为了处理在 iphone、ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度，&lt;/p&gt;
&lt;p&gt;　　　width=device-width是为了处理在windows phone 上的IE 无论是竖屏还是横屏都把宽度设为竖屏时ideal viewport的宽度&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=400, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 如果出现了上面的这种怎么办呢？&lt;/p&gt;
&lt;p&gt;这个时候浏览器会取它们两个中较大的那个值。例如，当width=400，ideal viewport的宽度为320时，取的是400；当width=400， ideal viewport的宽度为480时，取的是ideal viewport的宽度。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总结起来就是“谁大谁先行“&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.引入高德后页面的表现&lt;/h2&gt;
&lt;p&gt;在vue的spa项目中引入高德以后，我们发现在不同的dpr下，地图的显示效果差距非常大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/642545/201802/642545-20180228112156882-1384989867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在dpr=3的时候，也就是plus的机型上，地图显得格外的小。几乎用肉眼是无法看清上面的字体。所以，这样说来，基于flexible的适配方法肯定是有问题的了。&lt;/p&gt;
&lt;p&gt;而出现这个问题的原因就是我们的viewport被缩放了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (!dpr &amp;amp;&amp;amp; !&lt;span&gt;scale) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isAndroid = win.navigator.appVersion.match(/android/&lt;span&gt;gi);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isIPhone = win.navigator.appVersion.match(/iphone/&lt;span&gt;gi);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; devicePixelRatio =&lt;span&gt; win.devicePixelRatio;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isIPhone) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (devicePixelRatio &amp;gt;= 3 &amp;amp;&amp;amp; (!dpr || dpr &amp;gt;= 3&lt;span&gt;)) {
        dpr &lt;/span&gt;= 3&lt;span&gt;;
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (devicePixelRatio &amp;gt;= 2 &amp;amp;&amp;amp; (!dpr || dpr &amp;gt;= 2&lt;span&gt;)){
        dpr &lt;/span&gt;= 2&lt;span&gt;;
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        dpr &lt;/span&gt;= 1&lt;span&gt;;
      }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 其他设备下，仍旧使用1倍的方案&lt;/span&gt;
      dpr = 1&lt;span&gt;;
    }
    scale &lt;/span&gt;= 1 /&lt;span&gt; dpr;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 通过上面的代码计算出了viewport缩放的比率。当处于iphone 6+plus的时候，scale = 0.333333333333....&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
metaEl.setAttribute('content', 'initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 最后写到页面上面的结果就是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 所以，iphone plus是414pt，通过flexible将viewport缩小了0.33333333333，我们将414/0.3333333333=1242.0000001242 &lt;/p&gt;
&lt;p&gt;而正好高德地图通过canvas绘制的画布的宽度也就是1242。&lt;/p&gt;
&lt;h2&gt; 3.如何解决这个问题&lt;/h2&gt;
&lt;p&gt;通过我的总结，处理这个问题的方法大致有三种&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 通过vue-router的路由守卫进行处理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47.5&quot;&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;span&gt;beforeMount() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$nextTick(() = &amp;gt;&lt;span&gt;{
        const dpr &lt;/span&gt;= document.documentElement.getAttribute('data-dpr') &lt;br/&gt;&lt;span&gt;        if&lt;/span&gt; (dpr &amp;gt; 1&lt;span&gt;) {
            window.tempViewport &lt;/span&gt;= document.querySelector('meta[name=&quot;viewport&quot;]').getAttribute('content'); &lt;br/&gt;　　　　　　　document.querySelector('meta[name=&quot;viewport&quot;]').setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'); &lt;br/&gt;window.tempDpr = dpr;&lt;br/&gt;　　　　　　  document.documentElement.setAttribute('data-dpr', 1&lt;span&gt;);
        }
    })
},
beforeRouteLeave(to, from, next) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.tempViewport) {
        document.querySelector(&lt;/span&gt;'meta[name=&quot;viewport&quot;]').setAttribute('content', window.tempViewport); &lt;br/&gt;&lt;span&gt;        delete&lt;/span&gt;&lt;span&gt; window.tempViewport;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.tempDpr) {
        document.documentElement.setAttribute(&lt;/span&gt;'data-dpr', window.tempDpr); &lt;p&gt;&lt;span&gt;        delete&lt;/span&gt;&lt;span&gt; window.tempDpr;
    }
    next()
},&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 不过这样的方式不是很好，因为页面在过渡的时候会出现一瞬间样式的变形。而且如果在当前有地图的页面有其他结构的话，其他结构也会错乱。&lt;/p&gt;
&lt;p&gt;Tips:如果不是SPA的应用，而且整屏页面是地图占满的情况下，这个方案还是可行的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 通过css scale属性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个方法在我试验了以后，也存在问题。虽然地图的大小是正常了，但是在地图上进行点标记的时候，会出现地图位置的偏移。&lt;/p&gt;
&lt;p&gt;Tips:如果仅仅是展示，而并没有任何交互的情况下，这个方式也是可行的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 通过设置dpr = 1 &lt;span&gt;（推荐）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过设置dpr=1，强制flexible布局对viewport不进行缩放。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;flexible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;initial-dpr=1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这样，最后写到页面上的meta标签就是这样的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既然viewport没有缩放了。高德地图通过canvas绘制的地图也就是按照我们的ideal viewport来进行处理了。&lt;/p&gt;
&lt;p&gt;不过这种方式会产生另外两个副作用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过缩放来处理的&quot;1px问题&quot;这里需要重新去处理了&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;通过dpr设置的不同dpr下的文本字号大小，可能会出现13px这样很奇葩的尺寸了&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第一个是适配中一个很经典的问题，我会放到随后去讲。而第二个问题只能暂时这样去处理了。&lt;/p&gt;
&lt;h2&gt;4.结尾&lt;/h2&gt;
&lt;p&gt;大漠对于这个问题的解释是：flexible已经完成自己的使命，该功成身退了。他推荐使用vw,vh标准的新布局方式。&lt;/p&gt;
&lt;p&gt;而到底用不用这套方案，作为前端的我们也是见仁见智了！&lt;/p&gt;
</description>
<pubDate>Wed, 28 Feb 2018 14:58:00 +0000</pubDate>
<dc:creator>baby格鲁特</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ChengWuyi/p/8196647.html</dc:identifier>
</item>
<item>
<title>真实场景的双目立体匹配（stereo matching）以及虚拟视点合成（virtual view synthsis）示例 - 一棹烟波</title>
<link>http://www.cnblogs.com/riddick/p/8486223.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/riddick/p/8486223.html</guid>
<description>&lt;p&gt;　　双目立体匹配一直是双目视觉的研究热点，双目相机拍摄同一场景的左、右两幅视点图像，运用立体匹配匹配算法获取视差图，进而获取深度图。而深度图的应用范围非常广泛，由于其能够记录场景中物体距离摄像机的距离，可以用以测量、三维重建、以及虚拟视点的合成等。&lt;/p&gt;
&lt;p&gt;　　之前有两篇博客简要讲过OpenCV3.4中的两种立体匹配算法效果比较：&lt;a href=&quot;http://www.cnblogs.com/riddick/p/8318997.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/riddick/p/8318997.html&lt;/a&gt; 。以及利用视差图合成新视点： &lt;a href=&quot;http://www.cnblogs.com/riddick/p/7355353.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/riddick/p/7355353.html&lt;/a&gt;。里面用到的匹配图像对是OpenCV自带校正好的图像对。而目前大多数立体匹配算法使用的都是标准测试平台提供的标准图像对，比如著名的有如下两个：&lt;br/&gt;　　MiddleBury: &lt;a href=&quot;http://vision.middlebury.edu/stereo/&quot; target=&quot;_blank&quot;&gt;http://vision.middlebury.edu/stereo/&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;　　KITTI：&lt;a href=&quot;http://www.cvlibs.net/datasets/kitti/eval_scene_flow.php?benchmark=stereo&quot; target=&quot;_blank&quot;&gt;http://www.cvlibs.net/datasets/kitti/eval_scene_flow.php?benchmark=stereo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　但是对于想自己尝试拍摄双目图片进行立体匹配获取深度图，进行三维重建等操作的童鞋来讲，要做的工作是比使用校正好的标准测试图像对要多的。因此博主觉得有必要从用双目相机拍摄图像开始，捋一捋这整个流程。&lt;/p&gt;
&lt;p&gt;　　主要分四个部分讲解：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;摄像机标定（包括内参和外参）&lt;/li&gt;
&lt;li&gt;双目图像的校正（包括畸变校正和立体校正）&lt;/li&gt;
&lt;li&gt;立体匹配算法获取视差图，以及深度图&lt;/li&gt;
&lt;li&gt;利用视差图，或者深度图进行虚拟视点的合成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　注：如果没有双目相机，可以使用单个相机平行移动拍摄，外参可以通过摄像机自标定算出。我用自己的手机拍摄，拍摄移动时尽量保证平行移动。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;一、摄像机标定&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;　　&lt;strong&gt;1.内参标定&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　摄像机内参反映的是摄像机坐标系到图像坐标系之间的投影关系。摄像机内参的标定使用张正友标定法，简单易操作，具体原理请拜读张正友的大作《A Flexible New Technique for Camera Calibration》。当然网上也会有很多资料可供查阅，MATLAB 有专门的摄像机标定工具包，OpenCV封装好的摄像机标定API等。使用OpenCV进行摄像机标定的可以参考我的第一篇博客：&lt;a href=&quot;http://www.cnblogs.com/riddick/p/6696858.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/riddick/p/6696858.html&lt;/a&gt;。里面提供有张正友标定法OpenCV实现的源代码git地址，仅供参考。&lt;/p&gt;
&lt;p&gt;　　摄像机的内参包括，fx, fy, cx, cy,以及畸变系数[k1,k2,p1,p2,k3]，详细就不赘述。我用手机对着电脑拍摄各个角度的棋盘格图像，棋盘格图像如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228213938315-676533070.png&quot; alt=&quot;&quot; width=&quot;378&quot; height=&quot;274&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用OpenCV3.4+VS2015对手机进行内参标定。标定结果如下，手机镜头不是鱼眼镜头，因此使用普通相机模型标定即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228214158544-650338225.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;231&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图像分辨率为：3968 x 2976。上面标定结果顺序依次为fx, fy, cx, cy,   k1, k2, p1, p2, k3， 保存到文件中供后续使用。&lt;/p&gt;
&lt;h3&gt;　　&lt;strong&gt;2.外参标定&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　摄像机外参反映的是摄像机坐标系和世界坐标系之间的旋转R和平移T关系。如果两个相机的内参均已知，并且知道各自与世界坐标系之间的R1、T1和R2，T2，就可以算出这两个相机之间的Rotation和Translation，也就找到了从一个相机坐标系到另一个相机坐标系之间的位置转换关系。摄像机外参标定也可以使用标定板，只是保证左、右两个相机同时拍摄同一个标定板的图像。外参一旦标定好，两个相机的结构就要保持固定，否则外参就会发生变化，需要重新进行外参标定。&lt;/p&gt;
&lt;p&gt;　　那么手机怎么保证拍摄同一个标定板图像并能够保持相对位置不变，这个是很难做到的，因为后续用来拍摄实际测试图像时，手机的位置肯定会发生变化。因此我使用外参自标定的方法，在拍摄实际场景的两张图像时，进行摄像机的外参自标定，从而获取当时两个摄像机位置之间的Rotation和Translation。&lt;/p&gt;
&lt;p&gt;　　比如：我拍摄这样两幅图像，以后用来进行立体匹配和虚拟视点合成的实验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228220514828-1154840526.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;375&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228220632095-232912529.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;375&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　① 利用摄像机内参进行畸变校正，手机的畸变程度都很小，校正后的两幅图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228220006004-1394865050.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;375&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228220033794-1301410772.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;375&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　② 将上面两幅畸变校正后的图作为输入，使用OpenCV中的光流法提取匹配特征点对，pts1和pts2，在图像中画出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228221935604-786641983.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;471&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228222036411-2123892186.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;468&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　③ 利用特征点对pts1和pts2，以及内参矩阵camK，解算出本质矩阵E：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    cv::Mat E =&lt;span&gt; cv::findEssentialMat(tmpPts1, tmpPts2, camK, CV_RANSAC);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　④  利用本质矩阵E解算出两个摄像机之间的Rotation和Translation，也就是两个摄像机之间的外参。以下是OpenCV中API函数实现的，具体请参见API文档：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    cv::Mat R1, R2;
    cv::decomposeEssentialMat(E, R1, R2, t);

    R &lt;/span&gt;=&lt;span&gt; R1.clone();
    t &lt;/span&gt;= -t.clone();
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;二、双目图像的校正&lt;/h2&gt;
&lt;h3&gt;　　1. 畸变校正&lt;/h3&gt;
&lt;p&gt;　　畸变校正前面已经介绍过，利用畸变系数进行畸变校正即可，下面说一下立体校正。&lt;/p&gt;
&lt;h3&gt;　　2. 立体校正&lt;/h3&gt;
&lt;p&gt;　　① 得到两个摄像机之间的 Rotation和Translation之后，要用下面的API对两幅图像进行立体对极线校正，这就需要算出两个相机做对极线校正需要的R和T，用R1,T1, R2, T2表示，以及透视投影矩阵P1，P2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
cv::stereoRectify(camK, D, camK, D, imgL.size(), R, -R*t,  R1, R2, P1, P2, Q);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　② 得到上述参数后，就可以使用下面的API进行对极线校正操作了，并将校正结果保存到本地：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
　　cv::initUndistortRectifyMap(P1(cv::Rect(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;)), D, R1, P1(cv::Rect(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)), imgL.size(), CV_32FC1, mapx, mapy);
    cv::remap(imgL, recImgL, mapx, mapy, CV_INTER_LINEAR);
    cv::imwrite(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data/recConyL.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, recImgL);

    cv::initUndistortRectifyMap(P2(cv::Rect(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;)), D, R2, P2(cv::Rect(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)), imgL.size(), CV_32FC1, mapx, mapy);
    cv::remap(imgR, recImgR, mapx, mapy, CV_INTER_LINEAR);
    cv::imwrite(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data/recConyR.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, recImgR);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　对极线校正结果如下所示，查看对极线校正结果是否准确，可以通过观察若干对应点是否在同一行上粗略估计得出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228223906967-1391628459.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;375&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1138496/201802/1138496-20180228223957476-341491386.jpg&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 未完待续&lt;/p&gt;
&lt;hr/&gt;

</description>
<pubDate>Wed, 28 Feb 2018 14:54:00 +0000</pubDate>
<dc:creator>一棹烟波</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/riddick/p/8486223.html</dc:identifier>
</item>
<item>
<title>[UWP]做个调皮的BusyIndicator - dino.c</title>
<link>http://www.cnblogs.com/dino623/p/BusyIndicator.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dino623/p/BusyIndicator.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;最近突然想要个BusyIndicator。做过WPF开发的程序员对BusyIndicator应该不陌生，&lt;a href=&quot;https://github.com/xceedsoftware/wpftoolkit/tree/master/ExtendedWPFToolkitSolution/Src/Xceed.Wpf.Toolkit/BusyIndicator&quot;&gt;Extended WPF Toolkit&lt;/a&gt; 提供了BusyIndicator的开源实现，Silverlight Toolkit也有一个，这次想要把这个控件移植到UWP中。&lt;/p&gt;
&lt;h2 id=&quot;先说点正经的&quot;&gt;2. 先说点正经的&lt;/h2&gt;
&lt;h3 id=&quot;busyindicator的功能&quot;&gt;2.1 BusyIndicator的功能&lt;/h3&gt;
&lt;p&gt;BusyIndicator的功能很简单，就是提示正在执行操作并遮挡不能被修改的内容。通常它派生自ContentControl并提供&lt;code&gt;public bool IsBusy{ get; set; }&lt;/code&gt;属性，当设置IsBusy=True时将Content.IsEnabled设置成False，并显示Overlay、BusyContent和一个ProgressBar。在Silverlight中，它的UI如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180228155216436-1444379714.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;移植&quot;&gt;2.2 移植&lt;/h3&gt;
&lt;p&gt;Extended WPF Toolkit和Silverlight Toolkit中的BusyIndicator实现基本一致，由于Silverlight和各个XAML平台的兼容性都比较好，我选择了Silverlight Toolkit中的BusyIndicator用于移植。事实证明这是个正确的选择，只改动了几行代码就完美移植成功了。&lt;/p&gt;
&lt;h3 id=&quot;改进&quot;&gt;2.3 改进&lt;/h3&gt;
&lt;p&gt;既然UWP有ProgressRing，我就不想用ProgressBar来展示Busy的状态。另外，虽然BusyIndicator的ControlTemplate已经够精简了，为了方便将来修改我再进一步简化了XAML，结果如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ContentControl&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding Content}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                ContentTemplate=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding ContentTemplate}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                ContentTransitions=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding ContentTransitions}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                HorizontalContentAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding HorizontalContentAlignment}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                VerticalContentAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding VerticalContentAlignment}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Rectangle&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;overlay&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding OverlayStyle}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ContentPresenter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;busycontent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Grid&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Auto&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;ProgressRing&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ProgressRing&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                      IsActive=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;True&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                      Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding ProgressRingStyle}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;ContentPresenter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding BusyContent}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          ContentTemplate=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{TemplateBinding BusyContentTemplate}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Grid.Row=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          FontSize=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;15&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Foreground=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlHighlightAccentBrush}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ContentPresenter&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和Silverlight/WPF不同的是，需要在ContentControl上绑定ContentTransitions属性。&lt;/p&gt;
&lt;p&gt;UWP可以使用VisualState.Setters代替VisualState.Storyboard，这简化了大量XAML，为什么微软早十年没想到这个做法。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Silverlight的BusyIndicator：&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualStateManager.VisualStateGroups&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualStateGroup&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;VisibilityStates&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Hidden&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Storyboard&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; BeginTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Duration=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.001&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;busycontent&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetProperty=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(UIElement.Visibility)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; KeyTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Visibility&amp;gt;&lt;/span&gt;Collapsed&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Visibility&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ObjectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; BeginTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Duration=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.001&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;overlay&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetProperty=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(UIElement.Visibility)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; KeyTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Visibility&amp;gt;&lt;/span&gt;Collapsed&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Visibility&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ObjectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Storyboard&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Visible&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Storyboard&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; BeginTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Duration=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.001&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;busycontent&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetProperty=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(UIElement.Visibility)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; KeyTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Visibility&amp;gt;&lt;/span&gt;Visible&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Visibility&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ObjectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; BeginTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Duration=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.001&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;overlay&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetProperty=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(UIElement.Visibility)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; KeyTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Visibility&amp;gt;&lt;/span&gt;Visible&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Visibility&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ObjectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Storyboard&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualStateGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualStateGroup&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;BusyStatusStates&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Idle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Storyboard&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; BeginTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Duration=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.001&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetProperty=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(Control.IsEnabled)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; KeyTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;sys:Boolean&amp;gt;&lt;/span&gt;True&lt;span class=&quot;kw&quot;&gt;&amp;lt;/sys:Boolean&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ObjectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Storyboard&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Busy&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Storyboard&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; BeginTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Duration=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.001&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Storyboard.TargetProperty=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;(Control.IsEnabled)&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; KeyTime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;sys:Boolean&amp;gt;&lt;/span&gt;False&lt;span class=&quot;kw&quot;&gt;&amp;lt;/sys:Boolean&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DiscreteObjectKeyFrame&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ObjectAnimationUsingKeyFrames&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Storyboard&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualStateGroup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualStateManager.VisualStateGroups&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;UWP的BusyIndicator&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualStateManager.VisualStateGroups&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualStateGroup&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;VisibilityStates&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Hidden&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState.Setters&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;overlay.(UIElement.Visibility)&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Collapsed&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;busycontent.(UIElement.Visibility)&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Collapsed&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState.Setters&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Visible&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualStateGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualStateGroup&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;BusyStatusStates&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Idle&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Busy&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;VisualState.Setters&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Target=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;content.(Control.IsEnabled)&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;False&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState.Setters&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualState&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualStateGroup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/VisualStateManager.VisualStateGroups&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;其它细节&quot;&gt;2.3 其它细节&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;BusyContent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Please wait...&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IsTabStop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;False&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;OverlayStyle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;Style&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; TargetType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Rectangle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Fill&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource ApplicationForegroundThemeBrush}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Opacity&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0.2&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ProgressRingStyle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;Style&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; TargetType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ProgressRing&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Height&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Width&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Margin&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;8,8,8,0&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;DisplayAfter&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;00:00:00.1&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;HorizontalAlignment&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Stretch&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;VerticalAlignment&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Stretch&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;HorizontalContentAlignment&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Stretch&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;Setter&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Property=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;VerticalContentAlignment&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Stretch&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是BusyIndicator DefaultStyle的Setters，有一些细节是实现模板化控件需要注意的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BusyContent&lt;/strong&gt;&lt;br/&gt;BusyContent没有在依赖属性定义中的PropertyMetadata给出默认值，而是在Setter中给出，这是模板化控件中依赖属性的最佳做法。PropertyMetadata的默认值应该尽量做到：值类型使用值类型的默认值，引用类型使用Null。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IsTabStop&lt;/strong&gt;&lt;br/&gt;已经不厌其烦地提醒过复合类型控件要将IsTabStop设置为False，以便在使用键盘导航时其内容可以直接获得焦点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OverlayStyle和ProgressRingStyle&lt;/strong&gt;&lt;br/&gt;复合类型控件通常都会像这样为里面某个元素提供Style的属性，代替提供一大堆OverlayBackground，OverlayOpacity等属性。为了使用户清楚这两个Style属性对应的TargetType，可以在BusyIndicator的类型声明上使用StyleTypedPropertyAttribute：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;[&lt;span class=&quot;fu&quot;&gt;StyleTypedProperty&lt;/span&gt;(Property = &lt;span class=&quot;st&quot;&gt;&quot;OverlayStyle&quot;&lt;/span&gt;, StyleTargetType = &lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt;(Rectangle))]
[&lt;span class=&quot;fu&quot;&gt;StyleTypedProperty&lt;/span&gt;(Property = &lt;span class=&quot;st&quot;&gt;&quot;ProgressRingStyle&quot;&lt;/span&gt;, StyleTargetType = &lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt;(ProgressRing))]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IsTabStop和StyleTypedPropertyAttribute的介绍都可见我另一篇文章：&lt;a href=&quot;http://www.cnblogs.com/dino623/p/TemplatedControlUI.html&quot;&gt;了解模板化控件(9)：UI指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HorizontalContentAlignment和VerticalContentAlignment&lt;/strong&gt;&lt;br/&gt;使用ContentControl时几乎每次都要设置HorizontalContentAlignment和VerticalContentAlignment为Stretch，SilverlightToolkit中BusyIndicator的作者就很清楚这点。&lt;/p&gt;
&lt;p&gt;这两个属性和BusyContent不同，并不是BusyIndicator定义的，而是从父类继承而来。像这种从父类继承而来的属性通常不会在构造函数中设置默认值，而是在DefaultStyle的Setter中设置默认值。&lt;/p&gt;
&lt;h3 id=&quot;运行效果&quot;&gt;2.4 运行效果&lt;/h3&gt;
&lt;p&gt;就这样一个BusyIndicator就移植成功了。由于代码部分基本没有改变（除了ProgressBarStyle改成ProgressRingStyle），应该不会出什么大问题。运行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180228221503614-816429547.gif&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;busyIndicatorSample:BusyIndicator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;BusyIndicator&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Login&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Button_Click&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Margin=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0,0,0,150&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/busyIndicatorSample:BusyIndicator&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; async &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Button_Click&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;object&lt;/span&gt; sender, RoutedEventArgs e)
{
    BusyIndicator.&lt;span class=&quot;fu&quot;&gt;IsBusy&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    await Task.&lt;span class=&quot;fu&quot;&gt;Delay&lt;/span&gt;(TimeSpan.&lt;span class=&quot;fu&quot;&gt;FromSeconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;));
    BusyIndicator.&lt;span class=&quot;fu&quot;&gt;IsBusy&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;来点调皮的&quot;&gt;3. 来点调皮的&lt;/h2&gt;
&lt;p&gt;突然来了点兴致，于是就派生出新的控件ExtendBusyIndicator并新增&lt;code&gt;public object BusyInformation{ get; set; }&lt;/code&gt;和&lt;code&gt;public object IdleInformation{ get; set; }&lt;/code&gt;两个属性，运行效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180228224245574-624096409.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;XAML:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;busyIndicatorSample:ExtendBusyIndicator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;BusyIndicator&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                                         Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;White&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;busyIndicatorSample:ExtendBusyIndicator.BusyInformation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;StackPanel&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;十年后&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;10 years later&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       Margin=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0,2,0,0&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/StackPanel&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/busyIndicatorSample:ExtendBusyIndicator.BusyInformation&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;busyIndicatorSample:ExtendBusyIndicator.IdleInformation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;StackPanel&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;这个网页终于加载完了&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;the Web page finally finished loading.&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       Margin=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0,2,0,0&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/StackPanel&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/busyIndicatorSample:ExtendBusyIndicator.IdleInformation&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Padding=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Transparent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Margin=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0,0,0,150&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            Click=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Button_Click&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;Image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Source=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logo1.png&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;               Width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;80&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/busyIndicatorSample:ExtendBusyIndicator&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;莓良心的&quot;&gt;4. 莓良心的&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180228222453445-1755781402.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;5. 结语&lt;/h2&gt;
&lt;p&gt;BusyIndicator十分实用，毕竟已经经过多年的考验而代码基本没有更改，应该可以使用在UWP的实际项目中。&lt;/p&gt;
&lt;p&gt;其实我个人不是很喜欢IsBusy就将Content.IsEnabled设置成False这么简单粗暴，因为这样内容会变成灰色。而且busyContent显示的过程应该是个透明度渐变的过程。这两个点使得执行很快的操作会令UI闪烁一下。而且ControlTemplate中ProgressRing和Overlay的父元素是一个叫busyContent的Grid，但BusyContent（注意大小些）是BusyIndicator的一个属性，内容是Busy状态下显示的文字内容，这样很容易让人混淆。幸运的是模板化控件最大的特色就是对修改UI是开放的，将来可以想办法修改。&lt;/p&gt;
&lt;p&gt;ExtendBusyIndicator就算了，闹着玩的。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;6. 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/xceedsoftware/wpftoolkit/tree/master/ExtendedWPFToolkitSolution/Src/Xceed.Wpf.Toolkit/BusyIndicator&quot;&gt;Extended WPF Toolkit&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://archive.codeplex.com/?p=silverlight&quot;&gt;Silverlight Toolkit - CodePlex Archive&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/telerik/UI-For-UWP/tree/master/Controls/Primitives/Primitives.UWP/BusyIndicator&quot;&gt;UWP BusyIndicator · telerik UI For UWP&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;7. 源码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DinoChan/BusyIndicatorSample&quot;&gt;BusyIndicatorSample&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 28 Feb 2018 14:45:00 +0000</pubDate>
<dc:creator>dino.c</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dino623/p/BusyIndicator.html</dc:identifier>
</item>
<item>
<title>02 Java类的加载机制 - nnngu</title>
<link>http://www.cnblogs.com/nnngu/p/8486213.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnngu/p/8486213.html</guid>
<description>&lt;h2 id=&quot;什么是类的加载&quot;&gt;1、什么是类的加载&lt;/h2&gt;
&lt;p&gt;类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并向程序员提供了访问方法区内的数据结构的接口。&lt;/p&gt;
&lt;p&gt;类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加载.class文件的方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;从本地系统中直接加载&lt;/li&gt;
&lt;li&gt;通过网络下载.class文件&lt;/li&gt;
&lt;li&gt;从zip，jar等归档文件中加载.class文件&lt;/li&gt;
&lt;li&gt;从专有数据库中提取.class文件&lt;/li&gt;
&lt;li&gt;将Java源文件动态编译为.class文件&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;类的生命周期&quot;&gt;2、类的生命周期&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/28/1519825844680.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。&lt;/p&gt;
&lt;h3 id=&quot;加载&quot;&gt;加载&lt;/h3&gt;
&lt;p&gt;查找并加载类的二进制数据，加载是类加载过程中的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过一个类的全限定名来获取其定义的二进制字节流。&lt;/li&gt;
&lt;li&gt;将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。&lt;/li&gt;
&lt;li&gt;在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;相对于其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。&lt;/p&gt;
&lt;p&gt;加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。&lt;/p&gt;
&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;验证：确保被加载的类的正确性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。&lt;/li&gt;
&lt;li&gt;元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。&lt;/li&gt;
&lt;li&gt;字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。&lt;/li&gt;
&lt;li&gt;符号引用验证：确保解析动作能正确执行。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;准备&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;准备：为类的静态变量分配内存，并将其初始化为默认值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。&lt;/li&gt;
&lt;li&gt;这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;假设一个类变量的定义为：&lt;code&gt;public static int value = 3;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么变量&lt;code&gt;value&lt;/code&gt;在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把&lt;code&gt;value&lt;/code&gt;赋值为3的指令是在程序编译后，存放于类构造器&amp;lt;clinit&amp;gt;() 方法之中的，所以把 &lt;code&gt;value&lt;/code&gt; 赋值为3的动作在初始化阶段才会执行。&lt;/p&gt;
&lt;h3 id=&quot;解析&quot;&gt;解析&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解析：把类中的符号引用转换为直接引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。&lt;/p&gt;
&lt;p&gt;直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;初始化&lt;/h3&gt;
&lt;p&gt;初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：&lt;/p&gt;
&lt;p&gt;①声明类变量是指定初始值&lt;br/&gt;②使用静态代码块为类变量指定初始值&lt;/p&gt;
&lt;p&gt;JVM初始化步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;假如这个类还没有被加载和连接，则程序先加载并连接该类&lt;/li&gt;
&lt;li&gt;假如该类的直接父类还没有被初始化，则先初始化其直接父类&lt;/li&gt;
&lt;li&gt;假如类中有初始化语句，则系统依次执行这些初始化语句&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;类加载器&quot;&gt;3、类加载器&lt;/h2&gt;
&lt;p&gt;类加载器的层次关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.github.com/nnngu/FigureBed/raw/master/2018/2/28/1519827544932.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;站在开发人员的角度来看，类加载器可以划分为以下三类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;启动类加载器：Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的。&lt;/li&gt;
&lt;li&gt;扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.开头的类），开发者可以直接使用扩展类加载器。&lt;/li&gt;
&lt;li&gt;应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;类的加载&quot;&gt;4、类的加载&lt;/h2&gt;
&lt;p&gt;类加载有三种方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;命令行启动应用时候由JVM初始化加载&lt;/li&gt;
&lt;li&gt;通过Class.forName()方法动态加载&lt;/li&gt;
&lt;li&gt;通过ClassLoader.loadClass()方法动态加载&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Class.forName()和ClassLoader.loadClass()区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Class.forName()：除了将类的.class文件加载到jvm中，还会执行类中的static块。&lt;/li&gt;
&lt;li&gt;ClassLoader.loadClass()：只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容，只有在调用newInstance() 才会去执行static块。&lt;/li&gt;
&lt;li&gt;Class.forName(name, initialize, loader) 带参函数也可控制是否加载static块。并且只有调用了newInstance() 方法采用调用构造函数，创建类的对象。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;双亲委派模型&quot;&gt;5、双亲委派模型&lt;/h2&gt;
&lt;p&gt;双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。&lt;/p&gt;
&lt;p&gt;双亲委派机制:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。&lt;/li&gt;
&lt;li&gt;当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。&lt;/li&gt;
&lt;li&gt;如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；&lt;/li&gt;
&lt;li&gt;若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;双亲委派模型意义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;系统类防止内存中出现多份同样的字节码&lt;/li&gt;
&lt;li&gt;保证Java程序安全稳定运行&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;本文永久更新地址：&lt;a href=&quot;https://github.com/nnngu/LearningNotes/blob/master/JVM/02%20Java%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.md&quot;&gt;https://github.com/nnngu/LearningNotes/blob/master/JVM/02%20Java%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.md&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 28 Feb 2018 14:41:00 +0000</pubDate>
<dc:creator>nnngu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnngu/p/8486213.html</dc:identifier>
</item>
<item>
<title>EntityFramework Core 2.0自定义标量函数两种方式 - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/8485697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/8485697.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;上一节我们讲完原始查询如何防止SQL注入问题同时并提供了几种方式。本节我们继续来讲讲EF Core 2.0中的新特性自定义标量函数。&lt;/p&gt;
&lt;h2&gt;自定义标量函数两种方式&lt;/h2&gt;
&lt;p&gt;在EF Core 2.0中我们可以将方法映射到数据库中的标量函数，我们可在LINQ中调用此方法并会被正确翻译成SQL语句，这为编写数据访问层的开发人员提供了一个很棒的功能来创建一个方法并在其上应用DbFunction特性即可。该属性会将静态CLR方法映射到数据库函数，以便可以在LINQ查询中使用此方法。默认情况下，数据库函数中的CLR静态方法名称必须相同，除非我们在DbFunctionAttribute中指定了不同的名称。自定义标量函数必须满足如下两个条件。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt; （1）函数必须是静态方法且在上下文中声明。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt; （2）只能作为参数标量值返回。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 自定义标量函数方式一&lt;/h3&gt;
&lt;p&gt; 我们可直接在上下文中定义一个静态方法，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [DbFunction]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ScalarFunction(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 自定义标量函数方式二&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ScalarFunction(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在OnModelCreating方法利用ModelBuilder中的HasDbFunction来调用上述方法，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt; modelBuilder.HasDbFunction(
            () &lt;/span&gt;=&amp;gt; ScalarFunction(&lt;span&gt;null&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意以上自定义标量函数的两种方式必须定义架构名称即Schema，否则在调用上述方法查询时将抛出【System.Data.SqlClient.SqlException:“'您自定义的函数名称' 不是可以识别的 内置函数名称。”】，也就是说我们无论是利用DbFunction特性还是HasDbFunction方法映射自定义标量函数也好都必须指定Schema，我们默认指定为dbo，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        [DbFunction(FunctionName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UdfFunction&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Schema = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ScalarFunction(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ScalarFunction(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        modelBuilder.HasDbFunction(
            () &lt;/span&gt;=&amp;gt; ScalarFunction(&lt;span&gt;null&lt;/span&gt;)).HasName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UdfFunction&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).HasSchema(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        或者
        modelBuilder.HasDbFunction(GetType()
            .GetMethod(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ScalarFunction&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), options =&amp;gt;&lt;span&gt;
            {
                options.HasName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UdfFunction&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                options.HasSchema(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述讲解了在EF Core 2.0中如何创建标量函数，讲了这么多，到底怎么用，或者说它的出现可以解决什么问题呢？下面我们首先来看一个例子。比如我们想查询每篇博客的评论数的均值，接下来我们会进行如下查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                  .AsNoTracking();

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = blogs.Select(b =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BlogDTO()
                {
                    Id &lt;/span&gt;=&lt;span&gt; b.Id,
                    Name &lt;/span&gt;=&lt;span&gt; b.Name,
                    Count &lt;/span&gt;= b.Posts.Count() &amp;gt; &lt;span&gt;0&lt;/span&gt; ? b.Posts.Average(d =&amp;gt; d.CommentCount) : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                }).ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180228220041941-133215634.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时将出现函数Average无法翻译成SQL，只能在内存中进行查询。在EF Core中如果您有详细查看过生成的SQL语句的话，您就能够明白，对于Min、Max、Average等LINQ函数，EF Core不支持翻译成远程SQL，只能在本地查询。此时我们再来看看进行此次查询总共耗时100ms，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180228221400667-247282085.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们再利用自定义标量函数查询试试。首先定义标量函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;? UdfAverage(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; blogId)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Exception();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  modelBuilder.HasDbFunction(
            () &lt;/span&gt;=&amp;gt; UdfAverage(&lt;span&gt;default&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;))).HasSchema(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们再来创建标量函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AddUdfHelper
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AddUdfToDatabase(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; DbContext context)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; transaction =&lt;span&gt; context.Database.BeginTransaction())
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    context.Database.ExecuteSqlCommand(
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IF OBJECT_ID('dbo.UdfAverage', N'FN') IS NOT NULL &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DROP FUNCTION dbo.UdfAverage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                    context.Database.ExecuteSqlCommand(
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CREATE FUNCTION UdfAverage (@blogId int)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                        &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;  RETURNS FLOAT
  AS
  BEGIN
  DECLARE @result AS FLOAT
  SELECT @result = AVG(CAST([CommentCount] AS FLOAT)) FROM dbo.Posts AS p
       WHERE p.BlogId = @blogId
  RETURN @result
  END&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    transaction.Commit();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
                }
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述标量函数理应在迁移时生成，现在我们首先在上下文构造函数中创建即在运行时创建。在数据库中函数中的标量函数中将生成UdfAverage函数，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180228221806718-1105656997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们再来调用创建的自定义标量函数，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; context.Blogs
                  .AsNoTracking();

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = blogs.Select(b =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BlogDTO()
                {
                    Id &lt;/span&gt;=&lt;span&gt; b.Id,
                    Name &lt;/span&gt;=&lt;span&gt; b.Name,
                    Count &lt;/span&gt;=&lt;span&gt; EFCoreDbContext.UdfAverage(b.Id)
                }).ToList();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们看看此此查询总共耗时77ms。相比上述未调用标量函数直接调用Average方法，不会翻译成SQL，所以在数据库中查询一次，然后加载到内存中再查询一次，效果显而易见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201802/589642-20180228222114364-1443465675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;总结 &lt;/h2&gt;
&lt;p&gt;本节我们详细讲解了EF Core  2.0中的自定义标量函数，若我们需要进行子查询返回标量值时此时创建自定义标量函数将成为首选，其性能比调用内置的APi然后在内存中进行查询而不会翻译成SQL的性能更好。精简的内容，简单的讲解，希望对阅读的您有所帮助，我们明天再会。&lt;/p&gt;
</description>
<pubDate>Wed, 28 Feb 2018 14:27:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/8485697.html</dc:identifier>
</item>
</channel>
</rss>