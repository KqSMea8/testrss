<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>2018 .NET开发者调查报告: .NET Core 是怎么样的状态 - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/8983695.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/8983695.html</guid>
<description>&lt;p&gt;4月28日，在公众号里发起《.NET Core 使用调查》，该调查为期一周，有近3300名开发者参与.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085051582-793889287.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085052364-1259431644.png&quot; alt=&quot;image&quot; width=&quot;479&quot; height=&quot;137&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;已经使用.net core  的人数只有44%，计划使用.net core 比例达到48%， 没有计划去使用.net core的比例只有8% ，相比一年前的数据有了大幅度改善。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085053062-274004701.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085053766-1303384344.png&quot; alt=&quot;image&quot; width=&quot;488&quot; height=&quot;252&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从.net 的框架分布来说.net fx 4.6和 .net core 2 两个比例已经超过了75%， 使用.net fx 4.0的用户还有20%， 不知道具体是什么原因还停留在 4.0，有可能还在使用winform，程序需要跑在Windows Xp/2003. 应当升级到4.6，经常听到很多人在抱怨招不到人，是不是也要反思下是不是自己使用的技术已经太落后，比如使用Webform技术的，大学里的学生肯定不会再去学习这么被淘汰的技术，更愿意去学习新的.net core技术。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085054370-745445894.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085054875-466429399.png&quot; alt=&quot;image&quot; width=&quot;485&quot; height=&quot;317&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从人员构成上，女性开发者是个稀有物种，只有1%的用户参与调查，我的公众号里女性用户比例是10%， 说明真正属于开发者的比例确实更低。从人员的从业时间来看，.net 开发者多集中26-36 岁之间，占有比率66%，21-25岁的开发者只有17%，说明.net 平台上新的开发者的补充情况不容乐观，这也是很多人在抱怨.net 开发者难找的原因，同时新的开发者更愿意接受开源跨平台的.net core技术，从分布来看，人员也并没有断层，在培训机构都在制造java的情况下，还是有很多同学选择了从事.net开发，更多的人应该是选择了.netcore,欢迎大家留言。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085055763-1644791544.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085056167-1616493329.png&quot; alt=&quot;image&quot; width=&quot;494&quot; height=&quot;316&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发的应用类型&lt;strong&gt;企业级应用 和互联网后端开发&lt;/strong&gt;超过 60%， 说明还是有大量的垂直领域的应用使用.net技术。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085056780-699881572.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085057361-791870955.png&quot; alt=&quot;image&quot; width=&quot;493&quot; height=&quot;187&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用的web服务器iis 依然占据 60%，nginx/apache/jexus 有40%的比率，这个也说明了前面大家 采用.net core 技术的，把目标平台选择了Linux系统，.net core作为.net framework的下一代平台，其中变化最大的就是ASP.NET Core, 当前ASP.NET Core 的大多数热点话题都是围绕它的跨平台体验，虽然这是一项巨大成就，但如果你是常规 ASP.NET 用户，编写了大量基本 .NET 4.x 代码，并打算继续使用熟悉的 IIS 和 Windows 环境,你也是可以进行升级的，最典型的应用就是nopCommerce：&lt;a title=&quot;https://github.com/nopSolutions/nopCommerce&quot; href=&quot;https://github.com/nopSolutions/nopCommerce&quot;&gt;https://github.com/nopSolutions/nopCommerce&lt;/a&gt; 去年12月就完成了迁移到asp.net core,但是他是跑在.NET Framework 4.6.1上的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085058176-1061819837.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085058774-739008062.png&quot; alt=&quot;image&quot; width=&quot;499&quot; height=&quot;198&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发工具的选择上超过了26%的用户选择使用VisualStudio code/VS for Mac/Rider，这些都是.net core平台的开发者。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085059560-1916362554.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085100273-204207966.png&quot; alt=&quot;image&quot; width=&quot;514&quot; height=&quot;193&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085100883-1243713917.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/510/201805/510-20180503085101383-1635200871.png&quot; alt=&quot;image&quot; width=&quot;517&quot; height=&quot;192&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;&lt;span&gt;&lt;span&gt;Web开发框架的选择上80%以上的用户都选择使用MVC 架构，这也说明了如果你的项目还在使用Webform等老技术，请尽快升级改造为mvc，即将面临成为稀有物种, ORM框架选择方面 Dapper 的使用比率非常，达到了25% 。&lt;/span&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;h6&gt;&lt;span&gt;&lt;span&gt;回顾 16年前的ASP.NET 团队在设计 ASP.NET 框架时，采用了ASP的大多数最佳实践，并在新框架中采用了这些做法。在此过程中，他们还引入了许多新内容，如编译代码和托管代码、自动回发和服务器控件。ASP.NET Core 采用同样的套路演进。ASP.NET常见最佳实践（如初始加载配置数据、依赖关系注入、NuGet 包、基于声明的身份验证和 Razor 改进）是ASP.NET Core的原生特性。&lt;/span&gt;&lt;span&gt;ASP.NET Core还具有不同的启动过程、更为模块化的请求响应中间件，以及用于定义控制器和视图的更为灵活的基础结构。&lt;/span&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;h6&gt;&lt;span&gt;&lt;span&gt;ASP.NET Core 还是跨平台框架，可方便你开发并在 Windows、macOS 和 Linux 上部署应用程序。这样一来，ASP.NET Core 会强制你编写更优质的代码，即默认强制实现关注点分离，当然你也可以通过自律实现此目标，自律的方式在非常少数的。对于任何形式的新项目（产品）的开发，ASP.NET Core 绝对是首选，.NET Core 2.0的API已经和.NET Framework 4.6.2对齐，.net core 2.1的功能上更加和.net fx 7.2对齐，性能更加强悍，是.net平台真正成为一个高性能跨平台的开发平台。&lt;/span&gt;&lt;/span&gt;&lt;/h6&gt;
</description>
<pubDate>Thu, 03 May 2018 23:28:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shanyou/p/8983695.html</dc:identifier>
</item>
<item>
<title>使用 Helm - 每天5分钟玩转 Docker 容器技术（163） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8983824.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8983824.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;Helm 安装成功后，可执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm search&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看当前可安装的 chart。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092806027-634870789.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个列表很长，这里只截取了一部分。大家不禁会问，这些 chart 都是从哪里来的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面说过，Helm 可以像 apt 和 yum 管理软件包一样管理 chart。apt 和 yum 的软件包存放在仓库中，同样的，Helm 也有仓库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092817252-1071910954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Helm 安装时已经默认配置好了两个仓库：&lt;/span&gt;&lt;code&gt;&lt;span&gt;stable&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;local&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;code&gt;&lt;span&gt;stable&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是官方仓库，&lt;/span&gt;&lt;code&gt;&lt;span&gt;local&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是用户存放自己开发的 chart 的本地仓库。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;helm search&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 会显示 chart 位于哪个仓库，比如 &lt;/span&gt;&lt;code&gt;&lt;span&gt;local/cool-chart&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;stable/acs-engine-autoscaler&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;用户可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm repo add&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 添加更多的仓库，比如企业的私有仓库，仓库的管理和维护方法请参考官网文档 &lt;/span&gt;&lt;a title=&quot;This link will take you away from steemit.com&quot; href=&quot;https://docs.helm.sh/&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;https://docs.helm.sh&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与 apt 和 yum 一样，helm 也支持关键字搜索：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092831422-1858040014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;包括 DESCRIPTION 在内的所有信息，只要跟关键字匹配，都会显示在结果列表中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装 chart 也很简单，执行如下命令可以安装 MySQL。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;helm install stable/mysql&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;如果看到如下报错，通常是因为 Tiller 服务器的权限不足。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092846878-1964544116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行如下命名添加权限：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl create serviceaccount --namespace kube-system tiller&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;kubectl patch deploy --namespace kube-system tiller-deploy -p '{&quot;spec&quot;:{&quot;template&quot;:{&quot;spec&quot;:{&quot;serviceAccount&quot;:&quot;tiller&quot;}}}}'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;然后再次执行&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;helm install stable/mysql&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092859068-205684054.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;输出分为三部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① chart 本次部署的描述信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 release 的名字，因为我们没用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;-n&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 参数指定，Helm 随机生成了一个，这里是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;fun-zorse&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;NAMESPACE&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 release 部署的 namespace，默认是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;default&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，也可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;--namespace&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 指定。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;STATUS&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;DEPLOYED&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，表示已经将 chart 部署到集群。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;② 当前 release 包含的资源：Service、Deployment、Secret 和 PersistentVolumeClaim，其名字都是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;fun-zorse-mysql&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，命名的格式为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ReleasName&lt;/span&gt;&lt;/code&gt;&lt;span&gt;-&lt;/span&gt;&lt;code&gt;&lt;span&gt;ChartName&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;③ &lt;/span&gt;&lt;code&gt;&lt;span&gt;NOTES&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 部分显示的是 release 的使用方法。比如如何访问 Service，如何获取数据库密码，以及如何连接数据库等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl get&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以查看组成 release 的各个对象：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092913907-1700998441.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为我们还没有准备 PersistentVolume，当前 release 还不可用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;helm list&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 显示已经部署的 release，&lt;/span&gt;&lt;code&gt;&lt;span&gt;helm delete&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以删除 release。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180503092924495-1494841645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Helm 的使用方法像极了 apt 和 yum，用 Helm 来管理 Kubernetes 应用非常方便。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;chart 是 Helm 的应用打包格式，下节我们详细介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 23:27:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8983824.html</dc:identifier>
</item>
<item>
<title>Spring Boot 多模块与 Maven 私有仓库 - 捷义</title>
<link>http://www.cnblogs.com/youclk/p/8978673.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youclk/p/8978673.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;系统复杂了，抽离单一职责的模块几乎是必须的；若需维护多个项目，抽离公用包上传私有仓库管理也几乎是必须的。其优点无需赘述，以下将记录操作过程。&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/youclk/1209395/o_3578d69d7e6296d6d4d4532ead6e0418%e5%89%af%e6%9c%ac.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;多模块拆分&quot;&gt;1. 多模块拆分&lt;/h2&gt;
&lt;p&gt;在.NET 中由于其统一性，实现上更自然一点。Spring Boot 通过 Maven 构建多模块工程也不麻烦，假如我的项目中包含以下几个包：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503080528306-250748878.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我需要将他们分别拆分成独立模块，首先要修改的是根目录下的 pom.xml，packaging 类型改为 pom，并添加 modules 节点:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;project&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.youclk.multi-package&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;api&lt;span class=&quot;kw&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;service&lt;span class=&quot;kw&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;dao&lt;span class=&quot;kw&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;kw&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.10.RELEASE&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;lombok&amp;gt;&lt;/span&gt;1.16.20&lt;span class=&quot;kw&quot;&gt;&amp;lt;/lombok&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${lombok}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后新建一个个 Module，将对应的代码移植过去：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503081444744-901506118.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是在启动模块的 pom.xml 中需要指定启动类：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt;com.youclk.multipackage.api.MultiApplication&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;ZIP&lt;span class=&quot;kw&quot;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统一升级版本命令：&lt;code&gt;mvn versions:set -DnewVersion=0.0.1-SNAPSHOT&lt;/code&gt;，到此差不多完成了，引用方式与普通的依赖包一致：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.youclk.multi-package&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;service&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;nexus3-私有仓库搭建&quot;&gt;2. Nexus3 私有仓库搭建&lt;/h2&gt;
&lt;p&gt;Docker 时代一切都变得异常简单，Compose 配置如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode yml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'3.5'&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;services:&lt;/span&gt;

  &lt;span class=&quot;fu&quot;&gt;nexus:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;image:&lt;/span&gt; sonatype/nexus3:3.10.0
    &lt;span class=&quot;fu&quot;&gt;networks:&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; proxy
      &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; youclk
    &lt;span class=&quot;fu&quot;&gt;volumes:&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;/mnt/nas/db/nexus-data:&lt;/span&gt;/nexus-data
    &lt;span class=&quot;fu&quot;&gt;deploy:&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;mode:&lt;/span&gt; replicated
      &lt;span class=&quot;fu&quot;&gt;labels:&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; com.df.notify=true
        &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; com.df.port=8081
        &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; com.df.serviceDomain=nexus.youclk.com
      &lt;span class=&quot;fu&quot;&gt;restart_policy:&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;condition:&lt;/span&gt; any
        &lt;span class=&quot;fu&quot;&gt;max_attempts:&lt;/span&gt; 3
      &lt;span class=&quot;fu&quot;&gt;update_config:&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;delay:&lt;/span&gt; 5s
        &lt;span class=&quot;fu&quot;&gt;order:&lt;/span&gt; start-first
      &lt;span class=&quot;fu&quot;&gt;resources:&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;limits:&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;cpus:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'0.50'&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;memory:&lt;/span&gt; 1g

&lt;span class=&quot;fu&quot;&gt;networks:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;proxy:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;external:&lt;/span&gt; true
  &lt;span class=&quot;fu&quot;&gt;youclk:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;external:&lt;/span&gt; true&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动过程需要一分钟左右：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503103928467-272800503.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503104005762-567461472.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是如果你的 ssl 是在负载均衡或者其他的反向代理之上，那么必须在 HTTP 头中指定 X-Forwarded-Proto 传输协议为 HTTPS，然后，就可以愉快地玩耍了。&lt;/p&gt;
&lt;h2 id=&quot;上传与引用&quot;&gt;3. 上传与引用&lt;/h2&gt;
&lt;h3 id=&quot;上传&quot;&gt;3.1 上传&lt;/h3&gt;
&lt;p&gt;首先需要在 Nexus 创建私有仓库，例如我的：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503142811432-259307366.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503144615080-1280274684.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其次在本地 maven 设置中添加 server 节点，idea 的话一般在 &lt;code&gt;~/.m2/settings.xml&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;sml&quot;&gt;
&lt;code&gt;&amp;lt;servers&amp;gt;
  &amp;lt;server&amp;gt;   
    &amp;lt;id&amp;gt;youclk&amp;lt;/id&amp;gt;   
    &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;
    &amp;lt;password&amp;gt;youclk&amp;lt;/password&amp;gt;   
  &amp;lt;/server&amp;gt;
&amp;lt;/servers&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;pom.xml 中添加上传地址：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Releases Repository&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://nexus.youclk.com/repository/youclk-releases/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Snapshot Repository&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://nexus.youclk.com/repository/youclk-snapshots/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后执行 &lt;code&gt;mvn clean deploy&lt;/code&gt; 便会上传至私有仓库，单独传包命令如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mvn&lt;/span&gt; deploy:deploy-file -DgroupId=com.youclk -DartifactId=utils -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -Dfile=target/utils-0.0.1-SNAPSHOT.jar -Durl=https://nexus.youclk.com/repository/youclk/ -DrepositoryId=youclk&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;管理和查看：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180503160641074-79210830.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;引用&quot;&gt;3.1 引用&lt;/h3&gt;
&lt;p&gt;Finally，最后的最后就是怎么使用啦~ 如果需要全局引用的话需要在 settings.xml 添加和激活仓库：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;kw&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrors&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;aliyun&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;central mirror&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.aliyun.com/mvn/repository&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;maven-public&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;private mirror&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://local-nexus.youclk.com/repository/maven-public/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrors&amp;gt;&lt;/span&gt; 
    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;admin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;youclk&lt;span class=&quot;kw&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;   
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;

     &lt;span class=&quot;kw&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;  
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;  
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;local private nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://local-nexus.youclk.com/repository/maven-public/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;  
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/releases&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;  
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;  
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;  
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;  
                
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;  
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;local private nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://local-nexus.youclk.com/repository/maven-public/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;  
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/releases&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;  
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;  
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;  
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;  
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;  

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;activeProfiles&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;activeProfile&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/activeProfile&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/activeProfiles&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过一般不推荐这么写，settings.xml 应该尽可能保持简洁，精简配置，此处留下代理和权限认证即可，其余的可以移植到 pom.xml 中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;aliyun&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;nexus&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://local-nexus.youclk.com/repository/maven-public/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
            http://maven.aliyun.com/nexus/content/groups/public/
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-public&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://local-nexus.youclk.com/repository/maven-public/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;最近开了个订阅号，都已经看到这儿了，再顺便关注一下呗~ 有刻，我们共同成长，祝近安:)&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801714/201805/801714-20180504015424584-1286454815.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 18:08:00 +0000</pubDate>
<dc:creator>捷义</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youclk/p/8978673.html</dc:identifier>
</item>
<item>
<title>如何在Visual Studio 2017中使用C# 7+语法 - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/8988706.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/8988706.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;之前不知看过哪位前辈的博文有点印象C# 7控制台开始支持执行异步方法，然后闲来无事，搞着，搞着没搞出来，然后就写了这篇博文，不喜勿喷，或许对您有帮助。&lt;/p&gt;
&lt;h2&gt;在Visual Studio 2017配置支持C# 7+语法&lt;/h2&gt;
&lt;p&gt;心想都VS2017了肯定是支持C# 7+语法，然后接着将控制台程序修改为异步，然后告知于我不行，尼玛这不是扯淡了么，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blog = &lt;span&gt;await&lt;/span&gt; context.Blogs.FindAsync(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
                blog.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.SaveChangesAsync();
            }
            Console.ReadKey();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201805/589642-20180504014245282-1269297265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后得知.NET Framework 4.7可以使用C# 7语法，心想难道是没装.NET Framework 4.7么，于是乎到如下地址下载.NET Framework 4.7(&lt;a title=&quot;安装.NET Framework 4.7&quot; href=&quot;https://www.microsoft.com/zh-CN/download/details.aspx?id=55170&quot; target=&quot;_blank&quot;&gt;https://www.microsoft.com/zh-CN/download/details.aspx?id=55170&lt;/a&gt;)，结果一安装，它告诉我安装了或更高版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201805/589642-20180504014657029-546251540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后一查找资料发现在Visual Studio 2017 Update 3就支持C# 7语法，那我现在Visual Studio 2017版本都已经超过这版本不知道多少了，然后一看恍然大悟：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201805/589642-20180504014907079-849494863.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，到了这里我的VS 2017已经支持C# 7语法了，看来是缺少什么设置了，那就看如下方案吧。&lt;/p&gt;
&lt;p&gt;（1）右键项目解决方案点击【属性】。&lt;/p&gt;
&lt;p&gt;（2）点击左侧Tab中的【生成】，出来的界面右下角有个【高级】点击进去，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201805/589642-20180504015227016-954919620.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原来是使用语言版本是最新主要版本【默认】，那不应该是最高版本，打开下拉列表，选择我们想要的版本吧，就可以愉快的玩耍了，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201805/589642-20180504015334599-33442661.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者我们手动编辑以.csproj的项目文件，找到如下内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;PropertyGroup Condition=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;PlatformTarget&amp;gt;AnyCPU&amp;lt;/PlatformTarget&amp;gt;
    &amp;lt;DebugSymbols&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/DebugSymbols&amp;gt;
    &amp;lt;DebugType&amp;gt;full&amp;lt;/DebugType&amp;gt;
    &amp;lt;Optimize&amp;gt;&lt;span&gt;false&lt;/span&gt;&amp;lt;/Optimize&amp;gt;
    &amp;lt;OutputPath&amp;gt;bin\Debug\&amp;lt;/OutputPath&amp;gt;
    &amp;lt;DefineConstants&amp;gt;DEBUG;TRACE&amp;lt;/DefineConstants&amp;gt;
    &amp;lt;ErrorReport&amp;gt;prompt&amp;lt;/ErrorReport&amp;gt;
    &amp;lt;WarningLevel&amp;gt;&lt;span&gt;4&lt;/span&gt;&amp;lt;/WarningLevel&amp;gt;
    &lt;span&gt;&amp;lt;LangVersion&amp;gt;default&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
  &amp;lt;/PropertyGroup&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将如上LangVersion修改我们对应的版本如：&amp;lt;LangVersion&amp;gt;7.2&amp;lt;/LangVersion&amp;gt;保存，然后生成解决方案就好使了。&lt;/p&gt;
&lt;h2&gt;总结 &lt;/h2&gt;
&lt;p&gt;理论上VS 2017不是应该使用最高C#语法版本么，但事实不是如此，所以如果您遇到这个问题，首先请确保您是否安装了.NET Framework 4.7，如果安装了就按照上述方法进行即可在控制台使用异步方法以及对应C# 7+语法。可能是我知道的太少，写出来或许对不知道的童鞋有些许帮助，早就知道的大佬们就跳过吧，我们下节再会。&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 18:05:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/8988706.html</dc:identifier>
</item>
<item>
<title>IndexedDB，FileSystem- 前端数据库，文件管理系统 - 轻风Blog</title>
<link>http://www.cnblogs.com/CrossGod/p/IndexedDB_fileSystem.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CrossGod/p/IndexedDB_fileSystem.html</guid>
<description>&lt;p&gt;每种用于制作异步请求的方法都会返回一个 IDBRequest 对象, 该对象通过事件回传给请求的应用程序 这种设计意味着任何数量的请求一次可以在任何数据库上活动.&lt;/p&gt;&lt;p&gt;在以下示例中, 我们异步打开数据库.注册各种事件处理程序以响应各种情况.&lt;/p&gt;&lt;div readability=&quot;359&quot;&gt;
&lt;p&gt;oldVersion 属性的 getter 返回数据库的先前版本.&lt;br/&gt;newVersion 属性的 getter 返回新版本数据库, 或 null 如果数据库被删除.&lt;br/&gt;事件按照构造事件中的定义构建.&lt;br/&gt;要在指定 oldVersion 和 newVersion 的目标上触发名为 e 的版本更改事件, 需要以下步骤：&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;让 event 成为使用 IDBVersionChangeEvent 创建事件的结果&lt;/li&gt;
&lt;li&gt;event 的 type 属性设置为 e.&lt;/li&gt;
&lt;li&gt;event 的 bubbles 和 cancelable 属性设置为 false.&lt;/li&gt;
&lt;li&gt;event 的 oldVersion 属性设置为 oldVersion.&lt;/li&gt;
&lt;li&gt;event 的 newVersion 属性设置为 newVersion.&lt;/li&gt;
&lt;li&gt;legacyOutputDidListenersThrowFlag 设置为 unset.&lt;/li&gt;
&lt;li&gt;dispatch event 的 taget 为 legacyOutputDidListenersThrowFlag.&lt;/li&gt;
&lt;li&gt;return legacyOutputDidListenersThrowFlag.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;该方法的返回值并不总是被使用.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;IDBFactory接口&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;数据库对象通过 IDBFactory 接口上的方法访问.实现此接口的单个 对象存在于支持索引DB操作的全局环境中.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;partial interface WindowOrWorkerGlobalScope {
[SameObject] readonly attribute IDBFactory indexedDB;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;indexedDB 属性为应用程序提供了访问索引数据库功能的机制.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b46ce164-22b8-4524-9512-57baba35b290&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b46ce164-22b8-4524-9512-57baba35b290&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b46ce164-22b8-4524-9512-57baba35b290&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface IDBFactory {
[NewObject] IDBOpenDBRequest open(DOMString name, 
optional [EnforceRange] unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; version);
[NewObject] IDBOpenDBRequest deleteDatabase(DOMString name);

&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; cmp(any first,  any second);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;也就是下面这个意思&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
request = indexedDB.open（name）,            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试使用当前版本打开指定数据库的连接, 如果数据库不存在, 则尝试重新创建，并且会触发更新事件.&lt;/span&gt;
request = indexedDB.open（name, version）,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试使用指定的版本打开指定数据库的连接.&lt;/span&gt;
                                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数据库已经存在一个较低的版本, 并且存在未响应versionchange事件的打开的连接, 则请求将被阻止, 直到它们全部关闭, 然后才会进行更新.&lt;/span&gt;
　　　　　　　　　　　　　　　　　　　　　　　　    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数据库已经存在更高版本, 则请求将失败.&lt;/span&gt;
request = indexedDB.deleteDatabase（name）,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试删除指定的数据库.如果数据库已经存在, 并且存在未响应的versionchange事件而打开的连接, 则请求将被阻止, 直到它们全部关闭.如果成功, 返回null.&lt;/span&gt;
request = indexedDB.cmp（key1, key2）,       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将两个值作为键进行比较.返回-1如果KEY1之前KEY2, 1个如果KEY2先KEY1, 和0, 如果密钥是相等的.&lt;/span&gt;
                                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果任一输入不是有效的键, 则抛出一个“ DataError” .DOMException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;IDBDatabase接口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;IDBDatabase 接口表示到数据库的连接.&lt;/p&gt;
&lt;p&gt;一个 IDBDatabase 对象不能被垃圾收集如果其相关联的连接的紧密挂起标志未设置, 它有一个或多个事件侦听器寄存器, 其类型为一个abort, error或versionchange.&lt;/p&gt;
&lt;p&gt;如果一个 IDBDatabase 对象被垃圾收集, 关联的连接必须关闭.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 定义&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_314efee3-078e-4ffe-9aa0-387f167a171b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_314efee3-078e-4ffe-9aa0-387f167a171b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_314efee3-078e-4ffe-9aa0-387f167a171b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface IDBDatabase : EventTarget {
readonly attribute DOMString name;
readonly attribute unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; version;
readonly attribute DOMStringList objectStoreNames;

[NewObject] IDBTransaction transaction((DOMString or sequence&lt;/span&gt;&amp;lt;DOMString&amp;gt;&lt;span&gt;) storeNames, 
optional IDBTransactionMode mode &lt;/span&gt;= &quot;readonly&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; close();

[NewObject] IDBObjectStore createObjectStore(DOMString name, 
optional IDBObjectStoreParameters options);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteObjectStore(DOMString name);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Event handlers:&lt;/span&gt;
&lt;span&gt;attribute EventHandler onabort;
attribute EventHandler onclose;
attribute EventHandler onerror;
attribute EventHandler onversionchange;
};

dictionary IDBObjectStoreParameters {
(DOMString or sequence&lt;/span&gt;&amp;lt;DOMString&amp;gt;)? keyPath = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; autoIncrement = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;也就是下面这个意思&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
connection.name，                                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回数据库的名称.&lt;/span&gt;
connection.version，                                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回数据库的版本.&lt;/span&gt;
connection.objectStoreNames，                                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回数据库中对象库的名称列表.&lt;/span&gt;
store = connection.createObjectStore(name [,  options])，           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用给定的名称和选项 创建一个新的对象存储并返回一个新 IDBObjectStore 对象.&lt;/span&gt;
                                                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;必须在更新事务中使用, 否则抛出“ InvalidStateError” DOMException&lt;/span&gt;
connection.deleteObjectStore(name)，                                &lt;span&gt;//必须在更新事务中使用，否则&lt;/span&gt;&lt;span&gt;抛出“ InvalidStateError” DOMException&lt;/span&gt;
transaction = connection.transaction(scope [,  mode = &quot;readonly&quot;])，&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回具有给定模式（ &quot;readonly&quot;或&quot;readwrite&quot;）和范围的新事务, 该范围可以是单个对象存储名称或名称数组..&lt;/span&gt;
connection.close()，                                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有正在运行的事务完成后关闭连接.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;IDBObjectStore 接口&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IDBObjectStore接口表示一个对象存储句柄。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;定义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_42997ad8-4096-4391-b1c1-0569b39f54ae&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_42997ad8-4096-4391-b1c1-0569b39f54ae&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_42997ad8-4096-4391-b1c1-0569b39f54ae&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface IDBObjectStore {
attribute DOMString name;
readonly attribute any keyPath;
readonly attribute DOMStringList indexNames;
[SameObject] readonly attribute IDBTransaction transaction;
readonly attribute &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; autoIncrement;

[NewObject] IDBRequest put(any value, optional any key);
[NewObject] IDBRequest add(any value, optional any key);
[NewObject] IDBRequest &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(any query);
[NewObject] IDBRequest clear();
[NewObject] IDBRequest get(any query);
[NewObject] IDBRequest getKey(any query);
[NewObject] IDBRequest getAll(optional any query,
optional [EnforceRange] unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; count);
[NewObject] IDBRequest getAllKeys(optional any query,
optional [EnforceRange] unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; count);
[NewObject] IDBRequest count(optional any query);

[NewObject] IDBRequest openCursor(optional any query,
optional IDBCursorDirection direction &lt;/span&gt;= &quot;next&quot;&lt;span&gt;);
[NewObject] IDBRequest openKeyCursor(optional any query,
optional IDBCursorDirection direction &lt;/span&gt;= &quot;next&quot;&lt;span&gt;);

IDBIndex index(DOMString name);

[NewObject] IDBIndex createIndex(DOMString name,
(DOMString or sequence&lt;/span&gt;&amp;lt;DOMString&amp;gt;&lt;span&gt;) keyPath,
optional IDBIndexParameters options);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteIndex(DOMString name);
};

dictionary IDBIndexParameters {
&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; unique = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; multiEntry = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;也就是下面这个意思&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
store.name，            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回 store 的名称。&lt;/span&gt;
store.name = newName，  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将 store 的名称更新为newName。如果未在更新事务中调用，则抛出“ InvalidStateError” DOMException&lt;/span&gt;
store.keyPath。         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回 store 的关键路径，如果没有，则返回null。&lt;/span&gt;
list.indexNames。       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回 store 索引名称的列表。&lt;/span&gt;
store.transaction。     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回关联的 transaction.&lt;/span&gt;
store.autoIncrement，   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果 store 有 keey generator, 则返回true,否则返回false.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加或更新记录在 store 给定 value 和 key。如果成功的话，request 的result将是key。&lt;/span&gt;
store.put(value [, key])，                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有,现有的记录与键将被替换,或者同add&lt;/span&gt;
store.add(value [, key])，                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果一个记录与键已经存在，请求将失败，&lt;/span&gt;
store.&lt;span&gt;delete&lt;/span&gt;(query)，                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除 store 内匹配给定定键值的记录,成功则返回undefined。&lt;/span&gt;
store.clear()，                                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除所有记录,成功则返回undefined。&lt;/span&gt;
store.get(query)，                                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配给定键或键范围中的检索值的第一个记录。&lt;/span&gt;&lt;span&gt;成功返回value，否则是undefined。&lt;/span&gt;
store.getKey(query)，                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上&lt;/span&gt;
store.getAll(query [, count]),                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上&lt;/span&gt;
store.getAllKeys(query [, count]),                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上&lt;/span&gt;
store.count(query)                                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果成功，请求的result将是对应的数量。&lt;/span&gt;
store.openKeyCursor([query [, direction = &quot;next&quot;]]),    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开一个光标，按方向排序。如果查询为空，在 store 内的所有记录都会匹配。 &lt;/span&gt;
                                                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果成功返回IDBCursorWithValue在第一个匹配指向记录，否则是null。&lt;/span&gt;
store.index(name)，                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回IDBIndex的索引名为name的store。&lt;/span&gt;
store.createIndex(name, keyPath [, options])，          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用给定名称，keyPath和options在store中 创建一个新索引并返回一个新索引，或者抛出一个“ InvalidStateError” DOMException。&lt;/span&gt;
store.deleteIndex(name)。                               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除在store里给定的name的index。或者抛出一个“ InvalidStateError” DOMException。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面我不常用我就。。。。。。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IDBIndex 接口（https://www.w3.org/TR/IndexedDB/#index-interface）&lt;/li&gt;
&lt;li&gt;IDBKeyRange 接口（https://www.w3.org/TR/IndexedDB/#keyrange）&lt;/li&gt;
&lt;li&gt;IDBCursor 接口（https://www.w3.org/TR/IndexedDB/#cursor-interface）&lt;/li&gt;
&lt;li&gt;IDBTransaction 接口（https://www.w3.org/TR/IndexedDB/#transaction）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
coditing.db.init=e=&amp;gt;&lt;span&gt;{
  let request&lt;/span&gt;=indexedDB.open(&quot;coditing.db&quot;&lt;span&gt;,getDBVersion());
  request.onerror&lt;/span&gt;=e=&amp;gt;{ coditing.os.message(&quot;coditing.db&quot;,&quot;error&quot;,&quot;init&quot;,&quot;indexedDB.open&quot;&lt;span&gt;) }
  request.onupgradeneeded&lt;/span&gt;=e=&amp;gt;&lt;span&gt;{
    coditing.db&lt;/span&gt;=&lt;span&gt;e.target.result;
    let db&lt;/span&gt;=&lt;span&gt;coditing.db;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!db.objectStoreNames.contains(&quot;user&quot;&lt;span&gt;)) {
      db.createObjectStore(&lt;/span&gt;&quot;user&quot;,{ keyPath: &quot;name&quot;,Value: &quot;value&quot;&lt;span&gt; });
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!db.objectStoreNames.contains(&quot;file&quot;&lt;span&gt;)) {
      db.createObjectStore(&lt;/span&gt;&quot;file&quot;,{ keyPath: &quot;fileHash&quot;,Instance: &quot;instance&quot;&lt;span&gt;});&lt;/span&gt;&lt;span&gt;
    }

    console.log(&lt;/span&gt;&quot;coditing.db version changed to &quot; +&lt;span&gt; db.version);
  };
  request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;{
    coditing.db&lt;/span&gt;=&lt;span&gt;e.target.result;
    let db&lt;/span&gt;=&lt;span&gt;coditing.db;


    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; This Part Define coditing.db methods &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; *_ Version is for Index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    db.add&lt;/span&gt;=async (store,target)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
      let request&lt;/span&gt;=db.transaction(store,&quot;readwrite&quot;&lt;span&gt;).objectStore(store).add(target);
      request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve();
      request.onerror&lt;/span&gt;=e=&amp;gt;reject(3&lt;span&gt;);
    });
    db.get&lt;/span&gt;=async (store,KeyPath)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
      let request&lt;/span&gt;=db.transaction(store,&quot;readwrite&quot;&lt;span&gt;).objectStore(store).get(KeyPath);
      request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve(e.target.result);
      request.onerror&lt;/span&gt;=e=&amp;gt;reject(2&lt;span&gt;);
    });
    db.getAll&lt;/span&gt;=async (store)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
      let request&lt;/span&gt;=db.transaction(store,&quot;readwrite&quot;&lt;span&gt;).objectStore(store).getAll();
      request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve(e.target.result);
      request.onerror&lt;/span&gt;=e=&amp;gt;reject(2&lt;span&gt;);
    });
    db.put&lt;/span&gt;=async (store,target)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
      let request&lt;/span&gt;=db.transaction(store,&quot;readwrite&quot;&lt;span&gt;).objectStore(store).put(target);
      request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve();
      request.onerror&lt;/span&gt;=e=&amp;gt;reject(3&lt;span&gt;);
    });
    db.change&lt;/span&gt;=async (store,KeyPath,which,newValue)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        let request&lt;/span&gt;=db.transaction(store,&quot;readwrite&quot;&lt;span&gt;).objectStore(store).get(KeyPath);
        request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;{
          let target&lt;/span&gt;=&lt;span&gt;e.target.result
          target[which]&lt;/span&gt;=&lt;span&gt;newValue;
          db.put(store,target).then(resolve).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(reject);
        }
        request.onerror&lt;/span&gt;=e=&amp;gt;reject(2&lt;span&gt;);
    });
    db.&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;=async (store,KeyPath)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
      let request&lt;/span&gt;=db.transaction(store,&quot;readwrite&quot;).objectStore(store).&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(KeyPath)
      request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve();
      request.onerror&lt;/span&gt;=e=&amp;gt;reject(3&lt;span&gt;);
    });

    db.clear&lt;/span&gt;=async (store)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(store) db.transaction(store,&quot;readwrite&quot;&lt;span&gt;).objectStore(store).clear();
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        db.close();
        let request&lt;/span&gt;=&lt;span&gt;indexedDB.deleteDatabase(db.name);
        request.onsuccess&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve();
        request.onerror&lt;/span&gt;=e=&amp;gt;reject(3&lt;span&gt;);
      }
    });
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Define coditing.db methods End &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;安全考虑&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;DNS欺骗攻击&lt;br/&gt;由于潜在的DNS欺骗攻击，不能保证声称在某个域中的主机确实来自该域。为了缓解这种情况，网页可以使用TLS。使用TLS的页面可以确保只有使用TLS的页面具有将它们标识为来自同一个域的证书才能访问其数据库。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;跨目录攻击&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;不同的作者共享一个主机名，例如托管内容的用户geocities.com，共享一组数据库。&lt;/p&gt;
&lt;p&gt;没有限制通过路径名访问的功能。因此，建议共享主机上的作者避免使用这些功能，因为其他作者读取数据并覆盖它们将是微不足道的。&lt;/p&gt;
&lt;p&gt;即使路径限制功能可用，通常的DOM脚本安全模型也会使绕过此保护并从任何路径访问数据变得微不足道。&lt;br/&gt;&lt;span&gt;&lt;strong&gt;实施风险&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;实施这些持久性存储功能的两个主要风险是让恶意站点从其他域中读取信息，并让恶意站点编写信息，然后从其他域中读取信息。&lt;/p&gt;
&lt;p&gt;让第三方网站读取不应从其域中读取的数据会导致信息泄露。例如，用户的一个域的购物愿望清单可能被另一个域用于定向广告; 或者文字处理站点存储的用户正在进行的工作中的机密文档可以由竞争公司的网站进行检查。&lt;/p&gt;
&lt;p&gt;让第三方网站将数据写入其他域的永久存储可能会导致信息欺骗，这同样危险。例如，一个敌对网站可能会将记录添加到用户的愿望清单中; 或恶意站点可以将用户的会话标识符设置为已知ID，然后该恶意站点可以使用该ID来跟踪用户在受害者站点上的行为。&lt;/p&gt;
&lt;p&gt;因此，严格遵循本规范中描述的原点模型对用户安全至关重要。&lt;/p&gt;
&lt;p&gt;如果使用起源或数据库名称来构建文件系统的持久性路径，则必须适当地转义它们以防止攻击者使用相对路径（例如）从其他源访问信息&quot;../&quot;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;持续存在风险&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;实际的实现会将数据保存到非易失性存储介质中。数据在被检索时会被存储和反序列化，但序列化格式的细节将是用户特定的。用户代理可能会随时间改变其序列化格式。例如，格式可能会更新以处理新的数据类型或提高性能。为了满足本规范的操作要求，实现必须以某种方式处理较旧的序列化格式。对旧数据的处理不当可能会导致安全问题。除了基本的序列化问题之外，序列化数据还可以编码在较新版本的用户代理中无效的假设。&lt;/p&gt;
&lt;p&gt;RegExp类型就是一个实际的例子。该StructuredSerializeForStorage操作允许序列化的RegExp对象。一个典型的用户代理会将一个正则表达式编译成本地机器指令，并假设传入的数据是如何传递的以及返回的结果如何。如果这个内部状态作为存储到数据库的数据的一部分被序列化，那么当内部表示后来被反序列化时可能会出现各种问题。例如，数据传入代码的手段可能已经改变。编译器输出中的安全错误可能已在用户代理更新中被识别和修复，但仍处于序列化内部状态。&lt;/p&gt;
&lt;p&gt;用户代理必须适当地识别和处理较旧的数据。一种方法是以序列化格式包含版本标识符，并在遇到较旧的数据时从脚本可见状态重建任何内部状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;FileSystem&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用Filesystem API 我们可以在一个有层次的文件夹结构体即文件系统中互动和组织.&lt;br/&gt;本地文件系统API包含了俩个不同的版本。异步API，对于一般的应用来说非常有用。同步API，特别为Web Worker设计(已放弃开发）。我们只讨论异步API。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该API分解成各种主题：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;读取和处理文件： &lt;/span&gt;&lt;code&gt;File&lt;/code&gt;&lt;span&gt;/ &lt;/span&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;FileList&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;FileReader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;创作和写作： &lt;/span&gt;&lt;code&gt;Blob()&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;FileWriter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;目录和文件系统访问： &lt;/span&gt;&lt;code&gt;DirectoryReader&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;FileEntry&lt;/code&gt;&lt;span&gt;/ &lt;/span&gt;&lt;code&gt;DirectoryEntry&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;code&gt;LocalFileSystem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;首先我们需要通过请求一个LocalFileSystem对象来得到HTML5文件系统的访问，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我写下这篇博客时只有Chrome支持这个API所以要加webkit前缀&lt;/span&gt;
window.requestFileSystem(type, size,successCallback[,errorCallback]）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面说明 requestFileSystem 参数的作用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
type,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件存储是否应该持久。可能的值是window.PERSISTENT(1)或者window.TEMPORARY(0)。/*&lt;/span&gt;
&lt;span&gt;　　TEMPORARY根据浏览器的判断，可以删除使用的数据（例如，如果需要更多空间）。
　　PERSISTENT除非用户或应用明确授权并且要求用户向您的应用授予配额，否则无法清除存储。
　　要使用PERSISTENT存储，您必须获得用户的许可才能存储持久数据。同样的限制不适用于TEMPORARY存储，因为浏览器可能会自行选择临时驱逐存储的数据。
　　要通过PERSISTENTFileSystem API 使用存储，要使用API navigator.webkitPersistentStorage.requestQuota 请求存储。&lt;/span&gt;*/&lt;span&gt;
size,&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;应用程序需要存储的大小（以字节(bytes)为单位）。&lt;/span&gt;
successCallback,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在成功请求文件系统时调用的回调。它的参数是一个FileSystem对象。&lt;/span&gt;
errorCallback,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于处理错误的可选回调或拒绝获取文件系统的请求。它的参数是一个FileError对象。&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如果您是第一次使用requestFileSystem()，则会为您的应用程序创建新的存储空间。
记住这个文件系统是沙盒的，这意味着一个Web应用程序无法访问另一个应用程序的文件，这一点很重要。
这也意味着您无法将文件读取/写入用户硬盘上的任意文件夹（例如“我的图片”，“我的文档”等）。
文件系统得到这些方法依赖于最初包含的document。所有的document或者web应用来自于同一个最初来源共享一个文件系统。
两个document或者应用来自于不同的来源完全不同并且不可联系。一个文件系统严格被限制访问一个应用，不能访问另外一个应用保存的数据。同时也对于其它的文件独立。&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;演示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;临时内存&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; onInitFs=fs=&amp;gt;console.log('Opened file system: ' +&lt;span&gt; fs.name);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; errorHandler=e=&amp;gt;&lt;span&gt;console.log(e);
window.requestFileSystem(window.TEMPORARY, &lt;/span&gt;5*1024*1024 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;5MB&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;, onInitFs, errorHandler);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者 永久内存&lt;/span&gt;
navigator.webkitPersistentStorage.requestQuota(2 * 1024 * 1024,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (grantedBytes) {
  window.webkitRequestFileSystem(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, grantedBytes,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (fs) {
    window.fs &lt;/span&gt;=&lt;span&gt; fs;
  },console.log);
},console.log);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里返回的 fs 就是一个 DOMFileSystem 对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　/*&lt;/span&gt;&lt;span&gt;
            DOMFileSystem extends Object,
            Otherwise:
              name,//是一个字符串对象http_127.0.0.1_3000:Persistent
              root；//是一个&lt;/span&gt;&lt;span&gt;DirectoryEntry对象&lt;br/&gt;　　　&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了方便我打字和你们理解，我直接把 fileSystem系列 的属性列出来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            Entry extends Object,
            Otherwise:
              name,//file or directory name like &quot;123&quot;
              fullPath,//path from the root like &quot;/123&quot;
              filesystem,//file system like &quot;DOMFileSystem {...}&quot;

              isFile,//true or false
              isDirectory,//true or false
              
              getMetadata(successCallback[,errorCallback]),//successCallback参数是Metadata对象
              getParent(successCallback[,errorCallback]),//successCallback参数是一个DirectoryEntry对象,root的返回值为它本身

              moveTo(Directory[,newName],successCallback[,errorCallback]),//successCallback参数是移动后的本身
              copyTo(Directory[,newName],successCallback[,errorCallback]),//successCallback参数是复制后的本身
              remove(successCallback[,errorCallback]),//删除文件或者文件夹 successCallback参数无 不能删除有内容的文件夹
              toURL();//转换成URL并且可以在网页中使用 样式filesystem:http://127.0.0.1:3000/persistent/123.txt
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            FileEntry extends Entry,
            Otherwise:
              file(successCallback[,errorCallback]),//successCallback参数是File对象 此文件对象是标准文件
              createWriter(successCallback[,errorCallback]);//successCallback参数是FileWriter对象
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            DirectoryEntry extends Entry,
            Otherwise:
              createReader(),//创建一个DirectoryReader可用于读取此目录中条目的对象。
              getDirectory(path,flag,successCallback[,errorCallback]),//successCallback参数是一个DirectoryEntry对象 flag{create:bool,exclusive:bool} exclusive表示之前是否存在
              getFile(&quot;name&quot;,flag,successCallback[,errorCallback]),//successCallback参数是一个File对象&lt;br/&gt;removeRecursively(successCallback[,errorCallback]);//彻底删除文件夹，包括内容####被标记为弃用###chrome仍然可以使用
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            DirectoryReader extends Object,
            Otherwise:
              readEntries(successCallback[,errorCallback]);//successCallback参数是一个数组。数组中的项目是FileEntry或者DirectoryEntry
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            Metadata extends Object,
            Otherwise:
              modificationTime,//一个带名字空对象，指示条目被修改的日期和时间 例如Wed May 02 2018 00:25:42 GMT+0800 (中国标准时间) {}
              size;//一个64位无符号整数，以字节为单位指示条目的大小
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;演示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了方便，下面我用 fs 表示我们申请到的 fileSystem&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;很显然，第一件我们需要做的事就是创建一些目录。虽然ROOT目录已经村存在，你不希望把所有的文件都保存在那里。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;文件夹使用DirectoryEntry对象来创建。在下面的例子中我们将在ROOT文件夹中创建一个文件夹：Documents&lt;/span&gt;
  fs.root.getDirectory('Documents', {create: &lt;span&gt;true&lt;/span&gt;}, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(dirEntry) {
  }, errorHandler);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建子目录与创建任何其他目录完全相同。但是，如果您尝试创建其直接父项不存在的目录，则API会引发错误。解决方案是按顺序创建每个目录，这对于使用异步API非常棘手。&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;以下代码通过在其父文件夹创建后递归添加每个子目录，在应用程序的FileSystem的根目录中创建新的层次结构（music/genres/jazz）。&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; path = 'music/genres/jazz/'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; createDir(rootDirEntry, folders) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Throw out './' or '/' and move on to prevent something like '/foo/.//bar'.&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (folders[0] == '.' || folders[0] == ''&lt;span&gt;) {
    folders &lt;/span&gt;= folders.slice(1&lt;span&gt;);
  }
  rootDirEntry.getDirectory(folders[&lt;/span&gt;0], {create: &lt;span&gt;true&lt;/span&gt;}, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(dirEntry) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Recursively add the new subfolder (if we still have another to create).&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (folders.length) {
      createDir(dirEntry, folders.slice(&lt;/span&gt;1&lt;span&gt;));
    }
  }, errorHandler);
};
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; onInitFs(fs) {
  createDir(fs.root, path.split(&lt;/span&gt;'/')); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; fs.root is a DirectoryEntry.&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;现在已经有了“music/genres/jazz”，我们可以将其完整路径传递给getDirectory()并创建新的子文件夹或文件。例如：&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;           ###需要注意###&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;create参数会重新创建文件，即便已经存在此文件&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;           ###需要注意###&lt;/span&gt;
window.requestFileSystem(window.TEMPORARY, 1024*1024, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(fs) {
  fs.root.getFile(&lt;/span&gt;'/music/genres/jazz/song.mp3', {create: &lt;span&gt;true&lt;/span&gt;}, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(fileEntry) {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }, errorHandler);
}, errorHandler);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接下来我们需要检查我们的文件系统。我们创建一个DirectoryReader对象，使用ReadEntries()方法来读取目录中的内容。&lt;/span&gt;
fs.root.getDirectory('Documents', {}, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(dirEntry){
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dirReader =&lt;span&gt; dirEntry.createReader();
  dirReader.readEntries(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(entries) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; entries.length; i++&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; entry =&lt;span&gt; entries[i];
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (entry.isDirectory){
        console.log(&lt;/span&gt;'Directory: ' +&lt;span&gt; entry.fullPath);
      }
      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (entry.isFile){
        console.log(&lt;/span&gt;'File: ' +&lt;span&gt; entry.fullPath);
      }
    }
  }, errorHandler);
}, errorHandler);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后有文件就要操作文件啦&lt;/p&gt;
&lt;p&gt;文件操作都是通过Blob的（File对象这里不讲，因为我们已经可以通过FileSystem产生文件了)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
            Blob extends Object,
            Otherwise:
              constructor(),//Blob([data],{type,endings});
              size,//大小,整型
              type,//类型,字符串
              Blob.slice([start,[ end ,[contentType]]]);//返回一个新的 Blob对象，包含了源 Blob对象中指定范围内的数据。
              //Blob构造器参数type举例:{type: &quot;text/plain;charset=utf-8&quot;}{type : 'application/json'} {type: &quot;application/octet-binary&quot;}
              //endings，默认值为&quot;transparent&quot;，用于指定包含行结束符\n的字符串如何被写入。 它是以下两个值中的一个：
              // &quot;native&quot;，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 &quot;transparent&quot;，代表会保持blob中保存的结束符不变 
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读写操作使用 FileReader 和 FileWriter(前面说了怎么获得)，我写下博客时[W3C File API: Writer(W3C Editor's Draft 07 March 2012)]目前并不适用，&lt;/p&gt;
&lt;p&gt;FileReader有接口定义(这个很清楚)(是已经确定的标准)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_ce24cf10-0e8f-4f55-bb7c-17de0a4a76e3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ce24cf10-0e8f-4f55-bb7c-17de0a4a76e3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ce24cf10-0e8f-4f55-bb7c-17de0a4a76e3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
[Constructor, Exposed=&lt;span&gt;(Window,Worker)]
interface FileReader: EventTarget {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; async read methods&lt;/span&gt;
  &lt;span&gt;void&lt;/span&gt;&lt;span&gt; readAsArrayBuffer(Blob blob);
  &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; readAsBinaryString(Blob blob);
  &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; readAsText(Blob blob, optional DOMString label);
  &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; readAsDataURL(Blob blob);

  &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; abort();

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; states&lt;/span&gt;
  const unsigned &lt;span&gt;short&lt;/span&gt; EMPTY = 0&lt;span&gt;;
  const unsigned &lt;/span&gt;&lt;span&gt;short&lt;/span&gt; LOADING = 1&lt;span&gt;;
  const unsigned &lt;/span&gt;&lt;span&gt;short&lt;/span&gt; DONE = 2&lt;span&gt;;


  readonly attribute unsigned &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; readyState;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; File or Blob data&lt;/span&gt;
  readonly attribute (DOMString or ArrayBuffer)?&lt;span&gt; result;

  readonly attribute DOMException&lt;/span&gt;?&lt;span&gt; error;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; event handler content attributes&lt;/span&gt;
&lt;span&gt;  attribute EventHandler onloadstart;
  attribute EventHandler onprogress;
  attribute EventHandler onload;
  attribute EventHandler onabort;
  attribute EventHandler onerror;
  attribute EventHandler onloadend;

};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;然后还是我的注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    
            FileReader extends EventTarget,
            Otherwise:
              EMPTY:0,
              WRITING:1,
              DONE:2,
              abort(),//中断读取操作,停止读取必须调用
            
              error,//最后一次出错的错误信息
              onloadstart,//读取操作开始时触发
              onprogress,//读取操作过程中触发
              onloadend,//读取操作完成时触发(不管成功还是失败)
              onload,//读取操作成功时触发
              onabort,//读取操作被中断时触发
              onerror,//读取操作失败时触发 
              readyState,//读取工作的状态(DONE、EMPTY、WRITING)
              result,//读取的内容(DOMString or ArrayBuffer)

              readAsArrayBuffer(Blob),//参数是File或者Blob 返回ArrayBuffer对象
              readAsBinaryString(Blob),//参数是File或者Blob 返回了字符串。。。。？？？
              readAsDataURL(Blob),//参数是File或者Blob 结果是 &quot;data:text/plain;base64,MTIz&quot; 这种东西
              readAsText(Blob[, encoding]);//参数是File或者Blob 还有编码默认为&quot;utf-8&quot;  结果是字符串
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    
            FileWriter extends EventTarget,
            Otherwise:
              INIT:0,
              WRITING:1,
              DONE:2,
              abort(),//中断写入操作,写完文件必须调用
            
              error,//最后一次出错的错误信息
              length,//文件长度(或在无权读取文件信息的情况下返回已写入的长度)
              onwritestart,//写入操作开始时触发
              onprogress,//写入操作过程中触发
              onwriteend,//写入操作完成时触发(不管成功还是失败)
              onwrite,//写入操作成功时触发
              onabort,//写入操作被中断时触发
              onerror,//写入操作失败时触发
              position,//当前写入操作所处的位置  
              readyState,//保存工作的状态(DONE、INIT、WRITING)

              seek(offset),//设置position属性为offset,字节偏移
              truncate(size),//在size处截断文件  
              write(Blob);/// 在position处写入blob数据 
      &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;260&quot;&gt;
&lt;pre&gt;
coditing.fs.init=e=&amp;gt;&lt;span&gt;{
  window.requestFileSystem  &lt;/span&gt;= window.requestFileSystem ||&lt;span&gt; window.webkitRequestFileSystem;
  navigator.webkitPersistentStorage.requestQuota(&lt;/span&gt;2 * 1024 * 1024,grantedBytes=&amp;gt;&lt;span&gt;{
    window.requestFileSystem(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, grantedBytes,requestFileSystemResult=&amp;gt;&lt;span&gt;{
      let fs&lt;/span&gt;=coditing.fs=&lt;span&gt;requestFileSystemResult;
      fs.Name&lt;/span&gt;=&quot;coditing-FS&quot;&lt;span&gt;;
      fs.resolveURL&lt;/span&gt;=window.resolveLocalFileSystemURL ||&lt;span&gt; window.webkitResolveLocalFileSystemURL;
      fs.root.__proto__.removeRecursively_ &lt;/span&gt;=&lt;span&gt; fs.root.__proto__.removeRecursively;
      fs.root.__proto__.removeRecursively&lt;/span&gt;=&lt;span&gt;function&lt;/span&gt;(successCallback=()=&amp;gt;{},errorCallback=()=&amp;gt;&lt;span&gt;{}){
        let solveOne&lt;/span&gt;=async(e,i)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;(e[i].isDirectory)?search(e[i]).then(()=&amp;gt;e[i].remove_(()=&amp;gt;resolve(i+1),reject)).&lt;span&gt;catch&lt;/span&gt;(reject):e[i].remove_(()=&amp;gt;resolve(i+1&lt;span&gt;),reject));
        let search&lt;/span&gt;=async Directory=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
          Directory.createReader().readEntries(e&lt;/span&gt;=&amp;gt;&lt;span&gt;{
            let solveNext&lt;/span&gt;=(e,i)=&amp;gt;(i&amp;lt;e.length)?solveOne(e,i).then(i=&amp;gt;solveNext(e,i)).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(console.log):resolve();
            solveNext(e,&lt;/span&gt;0&lt;span&gt;);
          });
        });
        search(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).then(&lt;span&gt;this&lt;/span&gt;.remove_(successCallback,(&lt;span&gt;this&lt;/span&gt;==fs.root)?successCallback:errorCallback)).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(errorCallback);
      };
      fs.root.__proto__.removeRecursively_ &lt;/span&gt;= fs.root.__proto__.removeRecursively_ ||&lt;span&gt; fs.root.__proto__.removeRecursively;
      fs.CurrentDirectory&lt;/span&gt;=&lt;span&gt;fs.root;
      fs.root.__proto__.getFile_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.getFile; 
      fs.root.__proto__.getDirectory_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.getDirectory;
      fs.root.__proto__.getParent_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.getParent;
      fs.root.__proto__.copyTo_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.copyTo;
      fs.root.__proto__.moveTo_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.moveTo;
      fs.root.__proto__.remove_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.remove;
      fs.root.__proto__.getMetadata_&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.getMetadata;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get file or Directory&lt;/span&gt;
      fs.root.__proto__.getFile=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;.getFile_(target, {create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;},resolve,reject))};
      fs.getFile&lt;/span&gt;=target=&amp;gt;&lt;span&gt;fs.root.__proto__.getFile.call(fs.CurrentDirectory,target);
      fs.root.__proto__.getDirectory&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(target, {create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;},resolve,reject))};
      fs.getDirectory&lt;/span&gt;=target=&amp;gt;&lt;span&gt;fs.root.__proto__.getDirectory.call(fs.CurrentDirectory,target);
      fs.root.__proto__.getParent&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getParent_(resolve,reject))};
      fs.getParent&lt;/span&gt;=target=&amp;gt;&lt;span&gt;fs.root.__proto__.getFile.call(fs.CurrentDirectory,target);
      fs.root.__proto__.copyTo&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(target,newName){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;(&lt;span&gt;typeof&lt;/span&gt;(target)!=&quot;string&quot;)?&lt;span&gt;this&lt;/span&gt;.copyTo_(target,newName,resolve,reject):(&lt;span&gt;this&lt;/span&gt;.isDirectory)?(&lt;span&gt;this&lt;/span&gt;.getDirectory_(target,{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},e=&amp;gt;&lt;span&gt;this&lt;/span&gt;.copyTo_(e,newName,resolve,reject),reject)):(&lt;span&gt;this&lt;/span&gt;.getParent_(e=&amp;gt;e.getDirectory_(target,{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},e=&amp;gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.copyTo_(e,newName,resolve,reject),reject),reject)))};
      fs.root.__proto__.moveTo&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(target,newName){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;(&lt;span&gt;typeof&lt;/span&gt;(target)!=&quot;string&quot;)?&lt;span&gt;this&lt;/span&gt;.moveTo_(target,newName,resolve,reject):(&lt;span&gt;this&lt;/span&gt;.isDirectory)?(&lt;span&gt;this&lt;/span&gt;.getDirectory_(target,{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},e=&amp;gt;&lt;span&gt;this&lt;/span&gt;.moveTo_(e,newName,resolve,reject),reject)):(&lt;span&gt;this&lt;/span&gt;.getParent_(e=&amp;gt;e.getDirectory_(target,{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},e=&amp;gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.moveTo_(e,newName,resolve,reject),reject),reject)))};
      fs.root.__proto__.remove&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.removeRecursively(resolve,reject))};
      fs.root.__proto__.getMetadata&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getMetadata_(resolve,reject))};
      let randomId&lt;/span&gt;=&lt;span&gt;Math.random();
      fs.root.getFile_(`###TemporaryFileForDefineFunction###${randomId}###`,{create:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;},e=&amp;gt;&lt;span&gt;{
        e.__proto__.copyTo_&lt;/span&gt;=&lt;span&gt;e.__proto__.copyTo;
        e.__proto__.moveTo_&lt;/span&gt;=&lt;span&gt;e.__proto__.moveTo;
        e.__proto__.remove_&lt;/span&gt;=&lt;span&gt;e.__proto__.remove;
        e.__proto__.getMetadata_&lt;/span&gt;=&lt;span&gt;e.__proto__.getMetadata;
        e.__proto__.copyTo&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.copyTo;
        e.__proto__.moveTo&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.moveTo;
        e.__proto__.remove&lt;/span&gt;=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.remove_(resolve,reject))};
        e.__proto__.getMetadata&lt;/span&gt;=&lt;span&gt;fs.root.__proto__.getMetadata;
        e.remove();
        },console.log);
      
      
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; This Part Define coditing.fs methods &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;get Memory Usage And Memory Quota&lt;/span&gt;
      fs.queryUsageAndQuota=async()=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;navigator.webkitPersistentStorage.queryUsageAndQuota((usage, quota)=&amp;gt;&lt;span&gt;resolve([usage,quota])));
      fs.df&lt;/span&gt;=&lt;span&gt;fs.queryUsageAndQuota;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;show or set current directory in fileSystem&lt;/span&gt;
      fs.root.__proto__.cd=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((target=='\\')||(target=='/')) resolve(fs.CurrentDirectory=&lt;span&gt;fs.root);
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;((target==&quot;..&quot;)||(target==&quot;../&quot;)||(target==&quot;..\\&quot;)) {&lt;span&gt;this&lt;/span&gt;.getParent_(CurrentDirectory=&amp;gt;resolve(fs.CurrentDirectory=&lt;span&gt;CurrentDirectory),reject)}
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.getDirectory_(target, {create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},CurrentDirectory=&amp;gt;resolve(fs.CurrentDirectory=&lt;span&gt;CurrentDirectory),reject);
      })};
      fs.cd&lt;/span&gt;=target=&amp;gt;&lt;span&gt;fs.root.__proto__.cd.call(fs.CurrentDirectory,target);
      fs.pwd&lt;/span&gt;=async()=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{resolve(fs.CurrentDirectory)});
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;list your files or directories in current directory&lt;/span&gt;
      fs.root.__proto__.ls=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(target, {create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},e=&amp;gt;&lt;span&gt;e.createReader().readEntries(resolve,reject),reject))};
      fs.ls&lt;/span&gt;=fs.dir=target=&amp;gt;&lt;span&gt;fs.root.__proto__.ls.call(fs.CurrentDirectory,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;show your files or directories in current directory like tree&lt;/span&gt;
      fs.root.__proto__.tree=async &lt;span&gt;function&lt;/span&gt;(){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        let Tree&lt;/span&gt;=[[],[],&lt;span&gt;this&lt;/span&gt;.name];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Files And Directory And This Directory Name&lt;/span&gt;
        Tree.__proto__.isArray=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        let search&lt;/span&gt;=async (TreeDirectory,Directory)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
          Directory.createReader().readEntries(e&lt;/span&gt;=&amp;gt;&lt;span&gt;{
          &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i=0;i&amp;lt;=e.length;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i==e.length) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; resolve();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(e[i].isDirectory){
              let NextDirectory&lt;/span&gt;=&lt;span&gt;[[],[],e[i].name];
              TreeDirectory[&lt;/span&gt;1&lt;span&gt;].push(NextDirectory);
              search(NextDirectory,e[i]).then(resolve).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(reject);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
              TreeDirectory[&lt;/span&gt;0&lt;span&gt;].push(e[i].name);
            }
          }
        },reject)});
        search(Tree,&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).then(()=&amp;gt;resolve(Tree)).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(reject);
      })};
      fs.tree&lt;/span&gt;=()=&amp;gt;&lt;span&gt;fs.root.__proto__.tree.call(fs.CurrentDirectory);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create a Directory&lt;/span&gt;
      fs.root.__proto__.md=fs.root.__proto__.mkdir=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(target, {create:&lt;span&gt;true&lt;/span&gt;,exclusive:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;},resolve,reject))};
      fs.md&lt;/span&gt;=fs.mkdir=target=&amp;gt;&lt;span&gt;fs.root.__proto__.md.call(fs.CurrentDirectory,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Create a file&lt;/span&gt;
      fs.root.__proto__.touch=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;this&lt;/span&gt;.getFile_(target, {create:&lt;span&gt;true&lt;/span&gt;,exclusive:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;},resolve,reject))};
      fs.touch&lt;/span&gt;=target=&amp;gt;&lt;span&gt;fs.root.__proto__.touch.call(fs.CurrentDirectory,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;copy  your file or directory&lt;/span&gt;
      fs.root.__proto__.cp=fs.root.__proto__.copy=async &lt;span&gt;function&lt;/span&gt;(source,target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        let sourceDelims&lt;/span&gt;=source.lastIndexOf('/'&lt;span&gt;);
        let targetDelims&lt;/span&gt;=target.lastIndexOf('/'&lt;span&gt;);
        let targetName&lt;/span&gt;=target.substr(targetDelims+1&lt;span&gt;);
        let find&lt;/span&gt;=(e,target,i)=&amp;gt;(i==e.length)?-1:(e[i].name==target)?i:find(e,target,i+1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(source.substr(0,sourceDelims),{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},sp=&amp;gt;{sp.createReader().readEntries(s=&amp;gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(target.substr(0,targetDelims),{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},tp=&amp;gt;{tp.createReader().readEntries(t=&amp;gt;&lt;span&gt;{
          let si&lt;/span&gt;=find(s,source.substr(sourceDelims+1),0&lt;span&gt;);
          let ti&lt;/span&gt;=find(t,targetName,0&lt;span&gt;);
          (si&lt;/span&gt;==-1)?reject(2):(ti==-1)?&lt;span&gt;s[si].copyTo_(tp,targetName,resolve,reject):s[si].copyTo_(t[ti],undefined,resolve,reject);
        },reject)},reject)},reject)},reject);})};
      fs.cp&lt;/span&gt;=fs.copy=(source,target)=&amp;gt;&lt;span&gt;fs.root.__proto__.cp.call(fs.CurrentDirectory,source,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;move and rename file or directory&lt;/span&gt;
      fs.root.__proto__.mv=fs.root.__proto__.move=async &lt;span&gt;function&lt;/span&gt;(source,target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        let sourceDelims&lt;/span&gt;=source.lastIndexOf('/'&lt;span&gt;);
        let targetDelims&lt;/span&gt;=target.lastIndexOf('/'&lt;span&gt;);
        let targetName&lt;/span&gt;=target.substr(targetDelims+1&lt;span&gt;);
        let find&lt;/span&gt;=(e,target,i)=&amp;gt;(i==e.length)?-1:(e[i].name==target)?i:find(e,target,i+1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(source.substr(0,sourceDelims),{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},sp=&amp;gt;{sp.createReader().readEntries(s=&amp;gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(target.substr(0,targetDelims),{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},tp=&amp;gt;{tp.createReader().readEntries(t=&amp;gt;&lt;span&gt;{
          let si&lt;/span&gt;=find(s,source.substr(sourceDelims+1),0&lt;span&gt;);
          let ti&lt;/span&gt;=find(t,targetName,0&lt;span&gt;);
          (si&lt;/span&gt;==-1)?reject(2):(ti==-1)?&lt;span&gt;s[si].moveTo_(tp,targetName,resolve,reject):s[si].moveTo_(t[ti],undefined,resolve,reject);
        },reject)},reject)},reject)},reject);})};
      fs.mv&lt;/span&gt;=fs.move=(source,target)=&amp;gt;&lt;span&gt;fs.root.__proto__.mv.call(fs.CurrentDirectory,source,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;delete file or directory&lt;/span&gt;
      fs.root.__proto__.rm=fs.root.__proto__.&lt;span&gt;delete&lt;/span&gt;=fs.root.__proto__.del=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        let targetDelims&lt;/span&gt;=target.lastIndexOf('/'&lt;span&gt;);
        let targetName&lt;/span&gt;=target.substr(targetDelims+1&lt;span&gt;);
        let find&lt;/span&gt;=(e,target,i)=&amp;gt;(i==e.length)?-1:(e[i].name==target)?i:find(e,target,i+1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getDirectory_(target.substr(0,targetDelims),{create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},tp=&amp;gt;{tp.createReader().readEntries(t=&amp;gt;&lt;span&gt;{
          let ti&lt;/span&gt;=find(t,targetName,0&lt;span&gt;);
          (ti&lt;/span&gt;==-1)?reject(2):t[ti].isDirectory?&lt;span&gt;t[ti].removeRecursively_(resolve,reject):t[ti].remove_(resolve,reject);
        },reject)},reject)})};
      fs.rm&lt;/span&gt;=fs.&lt;span&gt;delete&lt;/span&gt;=fs.del=target=&amp;gt;&lt;span&gt;fs.root.__proto__.rm.call(fs.CurrentDirectory,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;format fileSystem&lt;/span&gt;
      fs.mkfs=fs.format=async()=&amp;gt;{&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{fs.root.removeRecursively(resolve,reject)})};
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;find file&lt;/span&gt;
      fs.root.__proto__.find=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        let result&lt;/span&gt;=&lt;span&gt;[];
        let search&lt;/span&gt;=async(Directory)=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
          Directory.createReader().readEntries(e&lt;/span&gt;=&amp;gt;&lt;span&gt;{
          &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i=0;i&amp;lt;=e.length;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i==e.length) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; resolve();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(e[i].isDirectory){search(e[i]).then(resolve).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(reject)};
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(e[i].name==&lt;span&gt;target) result.push(e[i]);
          }
        },reject)});
        search(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).then(()=&amp;gt;resolve(result)).&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(reject);
      })};
      fs.find&lt;/span&gt;=target=&amp;gt;&lt;span&gt;fs.root.__proto__.find.call(fs.CurrentDirectory,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;show a file&lt;/span&gt;
      fs.root.__proto__.cat=fs.root.__proto__.type=async &lt;span&gt;function&lt;/span&gt;(target){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getFile_(target, {create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},e=&amp;gt;{e.file(e=&amp;gt;&lt;span&gt;{
          let reader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileReader();
          reader.readAsText(e);
          reader.onload&lt;/span&gt;=e=&amp;gt;&lt;span&gt;resolve(e.target.result);
        },reject)},reject)})};
      fs.cat&lt;/span&gt;=fs.type=target=&amp;gt;&lt;span&gt;fs.root.__proto__.cat.call(fs.CurrentDirectory,target);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;edit file&lt;/span&gt;
      fs.vim=fs.edit=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;write file&lt;/span&gt;
      fs.root.__proto__.write=async &lt;span&gt;function&lt;/span&gt;(target,data){&lt;span&gt;return&lt;/span&gt; await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getFile_(target, {create:&lt;span&gt;false&lt;/span&gt;,exclusive:&lt;span&gt;false&lt;/span&gt;},f=&amp;gt;{f.getMetadata_(d=&amp;gt;{f.createWriter(e=&amp;gt;&lt;span&gt;{
          e.seek(d.size);
          e.write(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Blob([data]));
          e.onwrite&lt;/span&gt;=&lt;span&gt;resolve;
          e.onwriteend&lt;/span&gt;=&lt;span&gt;e.abort;
          e.onerror&lt;/span&gt;=&lt;span&gt;reject;
        },reject)},reject)},reject)})};
      fs.write&lt;/span&gt;=(target,data)=&amp;gt;&lt;span&gt;fs.root.__proto__.write.call(fs.CurrentDirectory,target,data);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;get entry By URL&lt;/span&gt;
      fs.wget=async URL=&amp;gt;await &lt;span&gt;new&lt;/span&gt; Promise((resolve,reject)=&amp;gt;&lt;span&gt;fs.resolveURL(URL,resolve,reject));
    }, console.log)
  },console.log);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;coditing.os.message()；&lt;/span&gt;
  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Define coditing.fs methods End &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;虽然我们只能在chrome下使用某些API，但是可见未来的发展趋势：Web端将可以做到任何本地端能做到的事。期待更好的明天。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 03 May 2018 16:46:00 +0000</pubDate>
<dc:creator>轻风Blog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CrossGod/p/IndexedDB_fileSystem.html</dc:identifier>
</item>
<item>
<title>微信静默授权增加浏览器历史记录导致跳转死循环的解决方案 - wonyun</title>
<link>http://www.cnblogs.com/wonyun/p/8984183.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wonyun/p/8984183.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;最近做一个微信webapp单页应用项目，项目只需要获取用户的&lt;code&gt;openid&lt;/code&gt;；为了更好的用户体验，整个过程让用户无感知，我们采用静默授权的方式来获取openid；具体可以翻看微信开发者文档--&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140842&quot;&gt;微信网页授权&lt;/a&gt;部分。&lt;/p&gt;
&lt;p&gt;按照微信开发文档的步骤操作，很容易的就实现了获取openid的功能。到此你可能心中窃喜，so easy！如果你认为实现到此结束，那么很可能qa就会找上来，并且还现场给你演示问题来源现场（如下图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/408483/201805/408483-20180503110201951-1315768611.gif&quot; width=&quot;250&quot; height=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在授权后重定向的回调页面(例如上面例子的下单页面)点击返回，怎么点击都不能返回到正确的页面，一直在这里跳转死循环了，到底该如何解决呢？下面就给出一种实践方案。&lt;/p&gt;
&lt;h2 id=&quot;跳转死循环的原因&quot;&gt;跳转死循环的原因&lt;/h2&gt;
&lt;p&gt;跳转死循环的原因，稍加分析就能知道原因。项目中需要openid的页面会静默获取openid（一般建议在项目入口文件获取，然后缓存起来供其他页面使用）；&lt;/p&gt;
&lt;p&gt;比方说上面在下单页需要openid，这个时候当进入该页面时，就会重定向到微信获取授权页面：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://open.weixin.qq.com/connect/oauth2/authorizeappid=APPID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;response_type=code&amp;amp;scope=SCOPE&amp;amp;state=STATE#wechat_redirect&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;授权成功后会重定向到回调链接地址（上面例子中的下单页），并会带上code参数。我们在实现时是使用&lt;code&gt;location.replace&lt;/code&gt;将下单页历史记录替换为微信授权页面。&lt;/p&gt;
&lt;p&gt;总的来说，一次授权浏览器历史记录增加了1条记录。那么授权成功后浏览器历史记录到底是怎么样的呢？&lt;/p&gt;
&lt;p&gt;理论上，上述过程浏览器历史记录应该是下图所示的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/408483/201805/408483-20180503113418852-92384063.png&quot; width=&quot;600&quot; height=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是经过在微信里面测试，发现并不是这样的，而是如下图所示，怀疑是微信浏览器做了特殊处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/408483/201805/408483-20180504001400254-1155925143.png&quot; width=&quot;600&quot; height=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样在授权成功后的重定向页面点击微信返回按钮，即上例中从下单页点击返回，会返回到不带code参数的下单页也就是第一次进入时的下单页；然而页面不做特殊处理的话，它会跳转到微信授权页面再次进行授权后又会重定向到指定的回调页面即下单页，这样就会造成跳转死循环的问题，表象上一直停留在下单页，无法进入项目指定的其他页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/408483/201805/408483-20180504001837938-862241007.png&quot; width=&quot;400&quot; height=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;通过对整个过程的分析，我们可以知道如果不做任何处理，只是在下单页获取授权后url中携带的&lt;code&gt;code&lt;/code&gt;参数，就会出现这种死循环的问题，那么能否在授权页面指定的&lt;code&gt;redirect_uri&lt;/code&gt;页面(本例的下单页)做一下处理呢，满足某个条件就不在跳往到微信授权页？&lt;/p&gt;
&lt;p&gt;答案当然是可以的，一种实现方案可以是这样的：&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;指定一个用于授权成功后的回调链接&lt;strong&gt;redirect url&lt;/strong&gt;，域名得和前端业务域名一致，并且整个链接是需要在微信开发者后台配置的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在进入步骤1指定的页面后，前端需要获取url参数code和sessionStorage中的code值，根据二者code是否均有值来判断是否需要重定向的微信授权页面&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在步骤2中两种情况下的code值都为空时，前端使用&lt;strong&gt;location.replace(url)&lt;/strong&gt;方法来跳转到微信授权页面，授权成功后跳转到步骤1指定的回调页面。此时浏览器历史记录只增加了1条，即微信授权页面历史记录&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在步骤2设置的回调页面中，若url的code参数有值且sessionStorage获取的code值为null时，将url的code参数值存到sessionStorage中，然后&lt;strong&gt;history.back()&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在history.back()执行后，就又回到授权链接跳转之前的那个页面，即进入未跳转前的下单页。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;再次点击微信返回按钮，就可以正常返回了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体的代码实现部分如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getQueryParams&lt;/span&gt;()
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; code &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'code'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;params&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;code) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`https://open.weixin.qq.com/connect/oauth2/authorize?appid=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;yourAppId&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;&amp;amp;redirect_uri=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;href&lt;/span&gt;)&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;&amp;amp;response_type=code&amp;amp;scope=snsapi_base&amp;amp;state=1#wechat_redirect`&lt;/span&gt;
   &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(url)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;code)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;va&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setItem&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'code'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;params&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;code&lt;/span&gt;)
   &lt;span class=&quot;va&quot;&gt;history&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;back&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
</description>
<pubDate>Thu, 03 May 2018 16:27:00 +0000</pubDate>
<dc:creator>wonyun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wonyun/p/8984183.html</dc:identifier>
</item>
<item>
<title>Mego(04) - NET简单实现EXCEL导入导出 - CarefreeXT</title>
<link>http://www.cnblogs.com/CarefreeXT/p/8988264.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CarefreeXT/p/8988264.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;相信做过信息系统的朋友都会遇到EXCEL导入导出的相关开发，做过不少EXCEL导入导出后总结起来大致有如下几种方式实现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ADO.NET的OldDb或ODBC连接EXCEL使用DataTable来读取数据。&lt;/li&gt;
&lt;li&gt;Microsoft.Office.Interop.Excel用微软提供的组件操作WorkSheet对象。&lt;/li&gt;
&lt;li&gt;使用一些第三方的库比如Fast Excel、ExcelDataReader等等。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;今天要向大家介绍的更简单的方式来实现日常开发的各种EXCEL导入导出需求。&lt;/p&gt;
&lt;h2 id=&quot;简单导入&quot;&gt;简单导入&lt;/h2&gt;
&lt;p&gt;我们还是使用ADO.NET中的System.Data.OleDb做为底层，这种方式会很高效。先定义一个对象用来承载数据。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Product
{
    public int Id { get; set; }
    public string Code { get; set; }
    public string Name { get; set; }
    public int Category { get; set; }
    public bool IsValid { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;声明一个连接字符串模型如下&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;private const string conStr =
    @&quot;Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 12.0 Xml;HDR=YES'&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后声明一个访问EXCEL的上下文&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class ExcelContext : DbContext
{
    public ExcelContext(string filename)
        : base(string.Format(conStr, filename), &quot;System.Data.OleDb.Excel&quot;)
    {
        this.Configuration.EnableAutoConversionStorageTypes = true;
    }
    public DbSet&amp;lt;Product&amp;gt; Products { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到这里准备工作就完成了，然后我们就能从数据源提取数据如下所示：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new ExcelContext(&quot;sample.xls&quot;))
{
    var data = context.Products.ToArray();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只要两行代码就能获取数据转成NET的对象，如果这里有一个能访问业务数据库的上下文就能直接导入数据，例如下面的临时代码：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new OracleContext())
{
    context.Products.AddRange(data);
    context.Executor.Execute();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到此我们都以一个很简单的方式就能完成从EXCEL提取并向数据库导入数据的工作。&lt;/p&gt;
&lt;h2 id=&quot;万能导入&quot;&gt;万能导入&lt;/h2&gt;
&lt;p&gt;也许你会考虑到导入EXCEL的格式会很多，不能每次都来定义一个上下文和数据对象类，这里我们可以定义一种通用方式来读取EXCEL。&lt;br/&gt;我们还是利用上面的连接字符串再定义一个通用的数据上下文。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class AnonymouExcelContext : DbContext
{
    public AnonymouExcelContext(string filename)
        : base(string.Format(conStr, filename), &quot;System.Data.OleDb.Excel&quot;)
    {
        this.Configuration.EnableAutoConversionStorageTypes = true;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着我们利用C#的匿名对象来读取数据。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new ExcelContext(&quot;sample.xls&quot;))
{
    var item = new { Id = 1, Name = &quot;P&quot;, IsValid = false };
    var data = context.Set(item, &quot;Products&quot;).Where(a =&amp;gt; a.Id &amp;gt; 20).ToArray();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们先定义一个匿名对象，其实就是以匿名形式声明了将要导入数据的字段，使用匿名类型还一个好处就是可以进行LINQ操作，例如上面的代码。&lt;/p&gt;
&lt;h2 id=&quot;导出数据&quot;&gt;导出数据&lt;/h2&gt;
&lt;p&gt;导出EXCEL也是个比较麻烦的事，首先你需要写表头，然后再写入数据，可能在不同的场景下你需要重要写导出的代码这个在使用Microsoft.Office.Interop.Excel导出时特别严重。这里我们还是用上面的数据上下文来导出数据。&lt;br/&gt;首先我们先创建一些数据用于导出。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;Random r = new Random();
var products = Enumerable.Range(0, 1000).Select(i =&amp;gt; new Product()
{
    Id = i,
    Name = &quot;Product &quot; + i.ToString(),
    Category = r.Next(1, 10),
    Code = &quot;P&quot; + i.ToString(),
    IsValid = true
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们需要创建一个空白的EXCEL文件，这里不声明代码了。&lt;br/&gt;最后就是写入表头和内容：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new ExcelContext(filename))
{
    var operate = context.Database.Manager.CreateTable&amp;lt;Product&amp;gt;();
    context.Executor.Execute(operate);//创建表头
    context.Products.AddRange(products);
    context.Executor.Execute();//写入数据
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样的匿名对象也是同样可以如此操作，&lt;br/&gt;创建数据&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;Random r = new Random();
var items = Enumerable.Range(0, 1000).Select(i =&amp;gt; new
{
    Id = i,
    Name = &quot;Product &quot; + i.ToString(),
    Category = r.Next(1, 10),
    IsValid = true
}).ToArray();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;写入数据&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new ExcelContext(filename))
{
    var item = items[0];
    var operate = context.Database.Manager.CreateTable(item.GetType(),
        DbName.NameOnly(&quot;Sheet1$&quot;));
    context.Executor.Execute(operate);
    context.Set(item, &quot;[Sheet1$]&quot;).AddRange(items);
    context.Executor.Execute();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;复杂excel导入&quot;&gt;复杂EXCEL导入&lt;/h2&gt;
&lt;p&gt;通过上面的代码已经可以满足大多数的开发需求，不过业务需求永远无止境，不知道下面EXCEL导入案例大家是否有遇到。&lt;br/&gt;客户需要一次导入上万条订单加明细数据，在正式导入到数据库之前还要在系统界面上浏览确认及修改，确认无误后才发命令写入到数据库。（最麻烦的是这是个基于WEB的系统）。&lt;/p&gt;
&lt;p&gt;上传EXCEL是少不了的，但是浏览修改会麻烦一点，不过基于良好的用户体验需要把EXCEL保存在服务器的临时位置，然后分页向用户显示数据并提供修改功能，最后当用户确认后才提交到数据库。&lt;br/&gt;首先我们先创建一个相对复杂的数据上下文。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;internal class ComplexContext : DbContext
{
    public ComplexContext(string filename)
        : base(string.Format(conStr, filename), &quot;System.Data.OleDb.Excel&quot;)
    {
        this.Configuration.EnableAutoConversionStorageTypes = true;
    }
    public DbSet&amp;lt;Order&amp;gt; Orders { get; set; }
    public DbSet&amp;lt;OrderDetail&amp;gt; OrderDetails { get; set; }
    public DbSet&amp;lt;Customer&amp;gt; Customers { get; set; }
    public DbSet&amp;lt;Product&amp;gt; Products { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里忽略数据类的定义，这里的数据间关系是订单有多个明细，订单关系一个客户，明细关系一个产品，对于EXCEL而言这已经很复杂了。&lt;br/&gt;不过在这里你可以很容易的查询所有订单及订单明细，过滤加分页向用户显示数据，如下所示&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new ComplexContext(&quot;sample.xls&quot;))
{
    var query = from a in context.Orders.Include(a=&amp;gt;a.Details)
                where a.Id &amp;gt; 4
                select a;
    var items = query.Take(10).Skip(20).ToArray();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们直接上个图来证明下数据的正确性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1364581/201805/1364581-20180503233943450-954052158.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上代码都已上传&lt;a href=&quot;https://github.com/CarefreeXT/Mego_Samples/tree/master/ExcelImport&quot;&gt;Github&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以上都是基于&lt;a href=&quot;https://github.com/CarefreeXT/Mego&quot;&gt;Mego框架&lt;/a&gt;实现的对EXCEL操作，当然&lt;a href=&quot;https://github.com/CarefreeXT/Mego&quot;&gt;Mego&lt;/a&gt;还支持许多数据库，欢迎大家试用。&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 15:42:00 +0000</pubDate>
<dc:creator>CarefreeXT</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CarefreeXT/p/8988264.html</dc:identifier>
</item>
<item>
<title>线程的基本操作 - 大道方圆</title>
<link>http://www.cnblogs.com/xdecode/p/8988246.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xdecode/p/8988246.html</guid>
<description>&lt;h4&gt;目录&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;线程状态切换&lt;/li&gt;
&lt;li&gt;终止线程(stop)&lt;/li&gt;
&lt;li&gt;中断线程(interrupt)&lt;/li&gt;
&lt;li&gt;挂起(suspend) 和 继续执行(resume)&lt;/li&gt;
&lt;li&gt;等待线程结束(join) 和 谦让(yield)&lt;/li&gt;
&lt;li&gt;sleep&lt;/li&gt;
&lt;li&gt;线程优先级&lt;/li&gt;
&lt;li&gt;守护线程&lt;/li&gt;
&lt;li&gt;线程的同步操作(synchronized, wait, notify)&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;线程状态切换&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1285727/201804/1285727-20180425235510159-968925702.jpg&quot; alt=&quot;&quot; width=&quot;496&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;终止线程(stop)&lt;/h4&gt;
&lt;p&gt;不推荐使用Thread.stop(), 他会释放所有的monitor, 导致数据不一致.&lt;/p&gt;
&lt;p&gt;假设有一条数据库记录, 有两个字段ID, Name.&lt;/p&gt;
&lt;p&gt;为了保持同一条记录ID, Name一致, 会在读写该对象的时候加锁. &lt;/p&gt;
&lt;p&gt;线程A获取到锁, 开始写操作, 写完ID = 1, 还没写Name, 被强制stop了, 释放掉了锁.&lt;/p&gt;
&lt;p&gt;线程B拿到锁, 读取对象, 以为是线程安全的, 实际上数据是错的, 只有ID有值, Name为null.&lt;/p&gt;
&lt;h4&gt;中断线程(interrupt)&lt;/h4&gt;
&lt;p&gt;可以通过调用thread.interrupt()对线程进行中断操作.&lt;/p&gt;
&lt;p&gt;当线程收到interrupt信号后, 可能会有两种场景:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;线程处于运行状态 : 将isinterrupt置为true &lt;/li&gt;
&lt;li&gt;线程处于阻塞状态 : 抛出InterruptedException, isinterrupt为false.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;线程有两个可以判断是否中断的方法, 如下所示.&lt;/p&gt;
&lt;p&gt;使用静态Thread.interrupted, &lt;strong&gt;会清除当前中断状态&lt;/strong&gt;, 而thread.isInterrupted则不会清除状态.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 中断线程 &lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Thread.interrupt() 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否被中断 &lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; Thread.isInterrupted() 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断是否被中断，并清除当前中断状态isinterrupt&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; Thread.interrupted() 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;          &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;              &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Thread.currentThread().isInterrupted()) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                  System.out.println(&quot;Interruted!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                  &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;             Thread.yield();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt;      t1.interrupt();
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;挂起(suspend) 和 继续执行(resume)&lt;/h4&gt;
&lt;p&gt;@Deprecated不推荐使用, 原因是如果在多线程环境中, 假设多个线程调用线程A的suspend和resume.&lt;/p&gt;
&lt;p&gt;如果线程B先调用了threadA.suspend(), 线程C再调用threadA.resume(), 则没问题.&lt;/p&gt;
&lt;p&gt;如果线程B先调用了threadA.resume(), 线程C再调用threadA.suspend(), 这个时候将导致线程A处于冻结状态, 其持有的锁无法释放.&lt;/p&gt;
&lt;h4&gt;等待线程结束(join) 和 谦让(yield)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;yield&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以让当前线程暂停一下, 类似于sleep, 但是他不会阻塞该线程, 只是从运行状态切换为就绪状态.&lt;/p&gt;
&lt;p&gt;当yeild执行后, 优先级大于等于当前线程优先级的所有线程都会有竞争CPU执行的机会, 他自身也会参与竞争.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该操作会使得线程执行存在等待, 如果A线程调用B线程的join操作, 则A会等待B执行完成后, 才会继续往下执行.&lt;/p&gt;
&lt;p&gt;线程B执行完毕后, 系统会调用notifyAll()来通知所有等待线程.&lt;/p&gt;
&lt;p&gt;join也可以指定时间参数, 等待N秒后, 无论目标线程是否完成, 当前线程都会继续往下执行.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;join的本质, 处于等待状态&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;      &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(isAlive()){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;          wait(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;sleep&lt;/h4&gt;
&lt;p&gt;sleep相对容易理解, 他会使得&lt;strong&gt;当前Thread&lt;/strong&gt;进入阻塞状态, 同时不释放该线程占用的锁.&lt;/p&gt;
&lt;h4&gt;守护线程&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;在后台默默地完成一些系统性的服务，比如垃圾回收线程、JIT线程就可以理解为守护线程&lt;/li&gt;
&lt;li&gt;当一个Java应用内，只有守护线程时，Java虚拟机就会自然退出&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在一个大型系统中, 应当在new Thread的时候给他加上是否为守护线程, 以及线程名称.&lt;/p&gt;
&lt;p&gt;防止系统退出的时候, 出现一堆Thread未关闭阻塞退出.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         Thread t= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DaemonT(); 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         t.setName(&quot;DaemonT&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         t.setDaemon(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         t.start();
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;线程优先级&lt;/h4&gt;
&lt;p&gt;高优先级的线程更容易在竞争中获胜, 但并不是绝对的.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     Thread high=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HightPriority();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     LowPriority low=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LowPriority();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;high.setPriority(Thread.MAX_PRIORITY);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;low.setPriority(Thread.MIN_PRIORITY);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;low.start();
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     high.start();
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;线程的同步操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;synchronized&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;指定加锁对象：对给定对象加锁，进入同步代码前要获得给定对象的锁&lt;/li&gt;
&lt;li&gt;直接作用于实例方法：相当于对当前实例加锁，进入同步代码前要获得当前实例的锁&lt;/li&gt;
&lt;li&gt;直接作用于静态方法：相当于对当前类加锁，进入同步代码前要获得当前类的锁&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Object.wait 和 Object.notify notifyAll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三个方法都是&lt;strong&gt;Object对象&lt;/strong&gt;的方法, 需要在synchronized语句块内使用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使当前线程暂停执行并释放对象锁标示, 让其他线程可以进入synchronized数据块, 当前线程被放入对象等待池中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从对象的等待池中移走一个任意的线程并放到锁标志等待池中, 只有锁标志等待池中线程能够获取锁标志;&lt;/p&gt;
&lt;p&gt;如果锁标志等待池中没有线程，则notify()不起作用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notifyAll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从对象等待池中移走所有等待那个对象的线程并放到锁标志等待池中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SimpleWait {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; T1 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (lock) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 System.out.println(&quot;T1 start!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     System.out.println(&quot;T1 wait for lock!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    lock.wait();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2s后, T2释放锁, T1拿到锁才开始执行wait后的操作&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 System.out.println(&quot;T1 end!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;      &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; T2 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;  
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;         @Override
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (lock) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                  System.out.println(&quot;T2 start, notify others!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                 lock.notify();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                  System.out.println(&quot;T2 end!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                      Thread.sleep(2000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                  } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                     e.printStackTrace();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                 }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;  
&lt;span&gt;40&lt;/span&gt;      &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         T1 t1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; T1();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;          T2 t2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; T2();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;         t1.start();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;         t2.start();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1285727/201804/1285727-20180426002449582-1498477528.jpg&quot; alt=&quot;&quot; width=&quot;704&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下一篇博文我们将讲述Java内存模型&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 15:38:00 +0000</pubDate>
<dc:creator>大道方圆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xdecode/p/8988246.html</dc:identifier>
</item>
<item>
<title>百度编辑器上传视频音频的bug - 天高任鸟飞吧</title>
<link>http://www.cnblogs.com/beyonds/p/8988207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/beyonds/p/8988207.html</guid>
<description>&lt;p&gt;&lt;span&gt;前言：UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码，百度Ueditor &lt;span&gt;支持多种后台语言上传使用，&lt;/span&gt;&lt;span&gt;php,java,net,nodejs&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;官网没有提供&lt;/span&gt;nodejs &lt;span&gt;的后台配置，如果使用&lt;/span&gt;&lt;span&gt;koa&lt;/span&gt; &lt;span&gt;框架可以参考这个模块：&lt;/span&gt;&lt;a href=&quot;https://www.npmjs.com/package/ueditor-koa&quot;&gt;https://www.npmjs.com/package/ueditor-koa&lt;/a&gt;；上传图片，视频，音频等基本文件的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;百度Ueditor 下载地址：&lt;a href=&quot;http://ueditor.baidu.com/website/download.html&quot;&gt;&lt;span&gt;http://ueditor.baidu.com/website/download.html&lt;/span&gt;&lt;/a&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文不介绍ueditor 的具体用法配置，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;主要解决问题：&lt;span&gt;视频和音频上传显示不正确的问题&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;span&gt;前端问题，确保后台正确上传配置&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;第一个问题&lt;/span&gt;：上传视频不显示&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;     &lt;span&gt;首先我们来上传一个视频，如图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503225202174-1604136864.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt; 发现视频是成功上传了，说明后台已经成功返回数据了，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;点击确认后，发现视频并没有成功插入编辑器中，发现显示的是一张图片，并不是视频&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503225433822-644171912.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;　&lt;span&gt;打开控制器，审查元素看，插入的元素标签是&lt;/span&gt;img ,&lt;span&gt;不是&lt;/span&gt;&lt;span&gt;vidoe,&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503225548282-511742264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;到这一步，发现问题的所在了，接下来就是要解决问题了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt; &lt;span&gt;第一：找到&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;ueditor.config.js&lt;/span&gt; &lt;span&gt;这个文件，大概在&lt;/span&gt;&lt;span&gt;365&lt;/span&gt;&lt;span&gt;行这 个&lt;/span&gt; &lt;span&gt;whitList&lt;/span&gt; &lt;span&gt;属性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503230130733-589019899.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　　&lt;span&gt;在whitlList 的属性里面添加以下代码 &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  source: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  embed: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pluginspage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wmode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;play&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;autoplay&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;loop&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;allowscriptaccess&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;allowfullscreen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;controls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;preload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;  iframe: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;max-width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;max-height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;align&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;frameborder&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;allowfullscreen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] 
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;　   　&lt;span&gt;如图所示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503230349381-1420990483.png&quot; alt=&quot;&quot; width=&quot;1061&quot; height=&quot;272&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　   &lt;span&gt;&lt;span&gt;第二&lt;/span&gt; &lt;span&gt;、找到&lt;/span&gt;&lt;span&gt;ueditor.all.js&lt;/span&gt; &lt;span&gt;这文件  ，搜索这个&lt;/span&gt;&lt;span&gt;me.commands[&quot;insertvideo&quot;]&lt;/span&gt; &lt;span&gt;方法，大概在&lt;/span&gt;17780&lt;span&gt;行；找到&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503230611795-1630758021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  　&lt;span&gt;改为：&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;将&lt;/span&gt;image &lt;span&gt;改为&lt;/span&gt; &lt;span&gt;video&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503230706724-1649511596.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;,vi,len = videoObjs.length;i&amp;lt;len;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     vi =&lt;span&gt; videoObjs[i];
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     cl = (type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;upload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt;edui-upload-video video-js vjs-default-skin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;edui-faked-video&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     html.push(creatInsertStr( vi.url, vi.width || &lt;span&gt;420&lt;/span&gt;,  vi.height || &lt;span&gt;280&lt;/span&gt;, id + i, &lt;span&gt;null&lt;/span&gt;, cl, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;video&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　完成到一步，我们重新上传视频，这回应该可以正常显示视频&lt;/span&gt; &lt;span&gt;了&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503231132878-2110341532.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　 &lt;span&gt;我们&lt;span&gt;点击&lt;/span&gt;html &lt;span&gt;查看源码，似乎也正常，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503231220563-20251780.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;但是，再点击显示回来，发现视频又变图片了，但是图片也不显示（占位）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503231255898-2016804263.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;span&gt;发现bug,继续修改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;第三：在&lt;/span&gt;&lt;span&gt;ueditor.all.js&lt;/span&gt; &lt;span&gt;这文件找到 &lt;/span&gt;&lt;span&gt;me.commands[&quot;insertvideo&quot;] &lt;/span&gt;&lt;span&gt;方法，大概在&lt;/span&gt;17780&lt;span&gt;行；找到：注悉以下代码；如图所示&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503231503795-1791985030.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这样基本解决视频上传的问题了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　个人还有建议修改：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　在&lt;/span&gt;ueditor.all.js &lt;span&gt;这文件，找到&lt;/span&gt;UE.plugins['video'] &lt;span&gt;这个方法，大概在&lt;/span&gt;17632&lt;span&gt;行。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　将  去掉：type=&quot;application/x-shockwave-flash&quot; class=&quot; + classname + &quot;pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot;' &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503231619061-53715063.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;至此，视频的问题&lt;/span&gt;ok &lt;span&gt;了&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;第二个问题：&lt;span&gt;上传本地音频和上传音频不显示&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;&lt;span&gt;主要修改支持本地上传&lt;/span&gt;mp3 &lt;span&gt;音频问题&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;非常简单，本地上传音频也是&lt;/span&gt; &lt;span&gt;在上传视频面板那里上传，所以只需判断文件类型就可以了&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在 &lt;/span&gt;&lt;span&gt;ueditor.all.js &lt;/span&gt; &lt;span&gt;这文件 找到 &lt;/span&gt;&lt;span&gt;UE.plugins['video'] &lt;/span&gt; &lt;span&gt;这个方法，大概在&lt;/span&gt;17632&lt;span&gt;行。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;将原来的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503232137251-2140916426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;改为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503232159024-120358784.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;video&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;       &lt;span&gt;var&lt;/span&gt; ext = url.substr(url.lastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (ext == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ogv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) ext = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ogg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (ext == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mp3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;            str = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;audio&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + (id ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt; id=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + id + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : &lt;span&gt;''&lt;/span&gt;) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; class=&quot; audio-js&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + (align ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt; style=&quot;float:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + align + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : &lt;span&gt;''&lt;/span&gt;) +&lt;span&gt;'&lt;/span&gt;&lt;span&gt; controls preload=&quot;none&quot; width=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + width + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; height=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + height + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; src=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + url + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&quot; /&amp;gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;       } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;              str = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;video&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + (id ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt; id=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + id + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : &lt;span&gt;''&lt;/span&gt;) + (align ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt; style=&quot;float:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + align + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : &lt;span&gt;''&lt;/span&gt;) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;controls width=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + width + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; height=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + height + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; src=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + url + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; data-setup=&quot;{}&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;source src=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + url + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; type=&quot;video/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + ext + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot; /&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;      &lt;span&gt;break&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到这里修改ok ,&lt;span&gt;上传一个&lt;/span&gt;mp3 &lt;span&gt;文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1143388/201805/1143388-20180503232442509-567753139.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; 　　&lt;span&gt;至此，音频的本地上传也解决了，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　但是发现，内置的在线音频插入的音频地址都是报错的，不知道为什么了。有哪位大神能解决这问题，希望留言，跪谢&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;完结。。。。谢谢&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 03 May 2018 15:36:00 +0000</pubDate>
<dc:creator>天高任鸟飞吧</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/beyonds/p/8988207.html</dc:identifier>
</item>
<item>
<title>解决：MySQL 报错：1045 - Access denied for user 'root'@'localhost'(using password YES) - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8988148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8988148.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/163268d5a4749f27?w=5184&amp;amp;h=3456&amp;amp;f=jpeg&amp;amp;s=1131102&quot;/&gt;&lt;/p&gt;

&lt;p&gt;今年疯狂迷上了开源，只要看到好的开源项目，就会不顾一切一股脑扎进去研究，五一期间发现一个很好的关于众筹的开源项目，但不巧，这个项目竟然是 PHP 写的，没学过 PHP，自然对这个开源项目毫无头绪了，但我竟然为了这个项目，毅然决定入坑 PHP，于是就出事了...&lt;/p&gt;
&lt;p&gt;说时迟那时快， 2 小时入门 PHP，2 小时入门 ThinkPHP，鉴于我一直在研究 Java 的原因，所以不费吹灰之力就顺利入坑。通过了解，PHP 开发必备环境是 PHP、Apache、MySQL以及一个好用的 IDE ，IDE 还是很好找的，我选择了 JetBrains 的 PhpStorm，而其他环境就是集全部功能于一身的 WampServer 了，安装完准备建数据库建表，打开 Navicat ，错误开始...&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;MySQL 报错：1045- Access denied for user 'root'@'localhost'(using password YES)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/163266e593e0c0d0?w=483&amp;amp;h=135&amp;amp;f=png&amp;amp;s=6719&quot;/&gt;&lt;/p&gt;


&lt;p&gt;安装了 WampServer 这个集 PHP 开发环境于一身的神器后，里面的 MySQL 网页管理软件 phpMyAdmin 使得数据库的 root 用户权限发生改变，也可以说是由于两者的密码不一致导致密码错乱有了这个错误（我自己理解），因为 phpMyAdmin 安装完成后的默认密码是空的。&lt;/p&gt;

&lt;p&gt;直接充值密码即可解决数据这个报错问题。&lt;/p&gt;
&lt;p&gt;首先，停止掉数据的运行，这个我相信大家都可以做到了，可以直接从管理服务程序中停止，也可以直接在 cmd 命令窗口输入命令 net stop mysql 来停止。&lt;/p&gt;
&lt;p&gt;然后进入 MySQL 的安装路径，找到并打开 my.ini 文件，找到 [mysqld] 字段，在这个字段下面增加下面这个语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;skip_grant_tables&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;紧接着重启数据库，这个我相信大家也可以做到了，可以直接在管理服务程序中开启，也可以直接在 cmd 命令窗口中输入命令 net start mysql 来开启，进而在命令窗口执行一下命令，重置密码：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;update user set password='root' where user='root'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然，我是直接将密码重置为 root，反正这个密码大家自定义就好，不过要记住密码。&lt;/p&gt;
&lt;p&gt;最后就是再次停止数据库的运行，返回前面提到的 my.ini 文件去掉 skip_grant_tables 字段后保存，再次重启数据库就可以成功解决这个 MySQL 的报错了。&lt;/p&gt;

&lt;p&gt;我在第四部完美的解决了命令窗口启动进入数据的这种报错，然后当我重新进入 Navicat 打开本地建立的连接的时候，继续报同样的错误，也就是说错误并没有解决，很纳闷，为啥命令行可以顺利操作数据库不报错，进入 Navicat 客户端就报错呢？&lt;/p&gt;
&lt;p&gt;折腾半天，发现在 root 权限错乱而重置密码之后，在 Navicat 中已经建立的连接是不可逆的。&lt;/p&gt;
&lt;p&gt;折腾半天，发现解决办法也很简单，要么删除连接后重新建一个连接，当然，删除连接后并不会已经建立的数据库，要么重装 Navicat ，至于选哪一种，自行选择，我都试过，都可以成功解决 Navicat 报这个错误。&lt;/p&gt;

&lt;p&gt;当本地的错误完美解决之后，我打开 phpMyAdmin 网页，竟然报了一个与前面的错误很相似却又有异的错误，错误如下：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;1045- Access denied for user 'root'@'localhost'(using password NO)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;当我把本地的 phpMyAdmin 配置文件中的密码也设置为 MySQL 数据库的密码后，打开后还是继续报同样的错误，不断打开不断报错，又折腾半天，最后在 StackOverFlow 上找到了解决办法：直接清除浏览器的 Cookie 缓存就可以解决这个问题。也就是说，我本地的配置是没有任何错误的，而打开网页继续报错的原因是之前报错时浏览器已经把 phpMyAdmin 的登录密码缓存到了 Cookie之中。&lt;/p&gt;
&lt;p&gt;好了，所有问题完美解决，特此记录。&lt;/p&gt;
&lt;p&gt;解决完这个问题我们明白，如果遇到某些错误精心想想，而不是一股脑扎进错误之中研究错误，可能半小时就可以解决问题了，也不至于折腾一个半天后又折腾一个半天咯。&lt;/p&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;-----------------------------------------&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/3/163268c1e35f699c?w=258&amp;amp;h=258&amp;amp;f=jpeg&amp;amp;s=27341&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 May 2018 15:19:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8988148.html</dc:identifier>
</item>
</channel>
</rss>