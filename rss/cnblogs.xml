<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【.NET Core项目实战-统一认证平台】第四章 网关篇-数据库存储配置（2） - 金焰的世界</title>
<link>http://www.cnblogs.com/jackcao/p/9950305.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jackcao/p/9950305.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;上篇文章我们介绍了如何扩展Ocelot网关，并实现数据库存储，然后测试了网关的路由功能，一切都是那么顺利，但是有一个问题未解决，就是如果网关配置信息发生变更时如何生效？以及我使用其他数据库存储如何快速实现？本篇就这两个问题展开讲解，用到的文档及源码将会在GitHub上开源，每篇的源代码我将用分支的方式管理，本篇使用的分支为&lt;code&gt;course2&lt;/code&gt;。&lt;br/&gt;附文档及源码下载地址：[&lt;strong&gt;https://github.com/jinyancao/CtrAuthPlatform/tree/course2&lt;/strong&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上一篇我们实现了网关的配置信息从数据库中提取，项目发布时可以把我们已有的网关配置都设置好并启动，但是正式项目运行时，网关配置信息随时都有可能发生变更，那如何在不影响项目使用的基础上来更新配置信息呢？这篇我将介绍2种方式来实现网关的动态更新，一是后台服务定期提取最新的网关配置信息更新网关配置，二是网关对外提供安全接口，由我们需要更新时，调用此接口进行更新，下面就这两种方式，我们来看下如何实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、定时服务方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网关的灵活性是设计时必须考虑的，实现定时服务的方式我们需要配置是否开启和更新周期，所以我们需要扩展配置类&lt;code&gt;AhphOcelotConfiguration&lt;/code&gt;，增加是否启用服务和更新周期2个字段。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;namespace Ctr.AhphOcelot.Configuration
{
    /// &amp;lt;summary&amp;gt;
    /// 金焰的世界
    /// 2018-11-11
    /// 自定义配置信息
    /// &amp;lt;/summary&amp;gt;
    public class AhphOcelotConfiguration
    {
        /// &amp;lt;summary&amp;gt;
        /// 数据库连接字符串，使用不同数据库时自行修改,默认实现了SQLSERVER
        /// &amp;lt;/summary&amp;gt;
        public string DbConnectionStrings { get; set; }

        /// &amp;lt;summary&amp;gt;
        /// 金焰的世界
        /// 2018-11-12
        /// 是否启用定时器，默认不启动
        /// &amp;lt;/summary&amp;gt;
        public bool EnableTimer { get; set; } = false;

        /// &amp;lt;summary&amp;gt;
        /// 金焰的世界
        /// 2018-11.12
        /// 定时器周期，单位（毫秒），默认30分钟自动更新一次
        /// &amp;lt;/summary&amp;gt;
        public int TimerDelay { get; set; } = 30*60*1000;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置文件定义完成，那如何完成后台任务随着项目启动而一起启动呢？&lt;code&gt;IHostedService&lt;/code&gt;接口了解一下，我们可以通过实现这个接口，来完成我们后台任务，然后通过Ioc容器注入即可。&lt;/p&gt;
&lt;p&gt;新建&lt;code&gt;DbConfigurationPoller&lt;/code&gt;类，实现&lt;code&gt;IHostedService&lt;/code&gt;接口，详细代码如下。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using Microsoft.Extensions.Hosting;
using Ocelot.Configuration.Creator;
using Ocelot.Configuration.Repository;
using Ocelot.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Ctr.AhphOcelot.Configuration
{
    /// &amp;lt;summary&amp;gt;
    /// 金焰的世界
    /// 2018-11-12
    /// 数据库配置信息更新策略
    /// &amp;lt;/summary&amp;gt;
    public class DbConfigurationPoller : IHostedService, IDisposable
    {
        private readonly IOcelotLogger _logger;
        private readonly IFileConfigurationRepository _repo;
        private readonly AhphOcelotConfiguration _option;
        private Timer _timer;
        private bool _polling;
        private readonly IInternalConfigurationRepository _internalConfigRepo;
        private readonly IInternalConfigurationCreator _internalConfigCreator;
        public DbConfigurationPoller(IOcelotLoggerFactory factory,
            IFileConfigurationRepository repo,
            IInternalConfigurationRepository internalConfigRepo,
            IInternalConfigurationCreator internalConfigCreator, 
            AhphOcelotConfiguration option)
        {
            _internalConfigRepo = internalConfigRepo;
            _internalConfigCreator = internalConfigCreator;
            _logger = factory.CreateLogger&amp;lt;DbConfigurationPoller&amp;gt;();
            _repo = repo;
            _option = option;
        }

        public void Dispose()
        {
            _timer?.Dispose();
        }

        public Task StartAsync(CancellationToken cancellationToken)
        {
            if (_option.EnableTimer)
            {//判断是否启用自动更新
                _logger.LogInformation($&quot;{nameof(DbConfigurationPoller)} is starting.&quot;);
                _timer = new Timer(async x =&amp;gt;
                {
                    if (_polling)
                    {
                        return;
                    }
                    _polling = true;
                    await Poll();
                    _polling = false;
                }, null, _option.TimerDelay, _option.TimerDelay);
            }
            return Task.CompletedTask;
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            if (_option.EnableTimer)
            {//判断是否启用自动更新
                _logger.LogInformation($&quot;{nameof(DbConfigurationPoller)} is stopping.&quot;);
                _timer?.Change(Timeout.Infinite, 0);
            }
            return Task.CompletedTask;
        }

        private async Task Poll()
       {
            _logger.LogInformation(&quot;Started polling&quot;);

            var fileConfig = await _repo.Get();

            if (fileConfig.IsError)
            {
                _logger.LogWarning($&quot;error geting file config, errors are {string.Join(&quot;,&quot;, fileConfig.Errors.Select(x =&amp;gt; x.Message))}&quot;);
                return;
            }
            else
            {
                var config = await _internalConfigCreator.Create(fileConfig.Data);
                if (!config.IsError)
                {
                    _internalConfigRepo.AddOrReplace(config.Data);
                }
            }
            _logger.LogInformation(&quot;Finished polling&quot;);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;项目代码很清晰，就是项目启动时，判断配置文件是否开启定时任务，如果开启就根据启动定时任务去从数据库中提取最新的配置信息，然后更新到内部配置并生效，停止时关闭并释放定时器，然后再注册后台服务。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册后端服务
builder.Services.AddHostedService&amp;lt;DbConfigurationPoller&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在我们启动网关项目和测试服务项目，配置网关启用定时器，代码如下。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddOcelot().AddAhphOcelot(option=&amp;gt;
    {
       option.DbConnectionStrings = &quot;Server=.;Database=Ctr_AuthPlatform;User ID=sa;Password=bl123456;&quot;;
       option.EnableTimer = true; //启用定时任务
       option.TimerDelay = 10*000;//周期10秒
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动后使用网关地址访问&lt;code&gt;http://localhost:7777/ctr/values&lt;/code&gt;,可以得到正确地址。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1529926/201811/1529926-20181113074721233-27451443.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们在数据库执行网关路由修改命令，等10秒后再刷新页面，发现原来的路由失效，新的路由成功。&lt;/p&gt;
&lt;pre class=&quot;mssql&quot;&gt;
&lt;code&gt;UPDATE AhphReRoute SET UpstreamPathTemplate='/cjy/values' where ReRouteId=1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1529926/201811/1529926-20181113074748350-1373480812.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1529926/201811/1529926-20181113074756068-1119403495.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到这个结果是不是很激动，只要稍微改造下我们的网关项目就实现了网关配置信息的自动更新功能，剩下的就是根据我们项目后台管理界面配置好具体的网关信息即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、接口更新的方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于良好的网关设计，我们应该是可以随时控制网关启用哪种配置信息，这时我们就需要把网关的更新以接口的形式对外进行暴露，然后后台管理界面在我们配置好网关相关信息后，主动发起配置更新，并记录操作日志。&lt;/p&gt;
&lt;p&gt;我们再回顾下&lt;code&gt;Ocelot&lt;/code&gt;源码，看是否帮我们实现了这个接口，查找法&lt;code&gt;Ctrl+F&lt;/code&gt;搜索看有哪些地方注入了&lt;code&gt;IFileConfigurationRepository&lt;/code&gt;这个接口，惊喜的发现有个&lt;code&gt;FileConfigurationController&lt;/code&gt;控制器已经实现了网关配置信息预览和更新的相关方法，查看源码可以发现代码很简单，跟我们之前写的更新方式一模一样，那我们如何使用这个方法呢？&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Ocelot.Configuration.File;
using Ocelot.Configuration.Setter;

namespace Ocelot.Configuration
{
    using Repository;

    [Authorize]
    [Route(&quot;configuration&quot;)]
    public class FileConfigurationController : Controller
    {
        private readonly IFileConfigurationRepository _repo;
        private readonly IFileConfigurationSetter _setter;
        private readonly IServiceProvider _provider;

        public FileConfigurationController(IFileConfigurationRepository repo, IFileConfigurationSetter setter, IServiceProvider provider)
        {
            _repo = repo;
            _setter = setter;
            _provider = provider;
        }

        [HttpGet]
        public async Task&amp;lt;IActionResult&amp;gt; Get()
        {
            var response = await _repo.Get();

            if(response.IsError)
            {
                return new BadRequestObjectResult(response.Errors);
            }

            return new OkObjectResult(response.Data);
        }

        [HttpPost]
        public async Task&amp;lt;IActionResult&amp;gt; Post([FromBody]FileConfiguration fileConfiguration)
        {
            try
            {
                var response = await _setter.Set(fileConfiguration);

                if (response.IsError)
                {
                    return new BadRequestObjectResult(response.Errors);
                }

                return new OkObjectResult(fileConfiguration);
            }
            catch(Exception e)
            {
                return new BadRequestObjectResult($&quot;{e.Message}:{e.StackTrace}&quot;);
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从源码中可以发现控制器中增加了授权访问，防止非法请求来修改网关配置，Ocelot源码经过升级后，把不同的功能进行模块化，进一步增强项目的可配置性，减少冗余，管理源码被移到了&lt;a href=&quot;https://github.com/ThreeMammals/Ocelot.Administration&quot;&gt;Ocelot.Administration&lt;/a&gt;里，详细的源码也就5个文件组成，代码比较简单，就不单独讲解了，就是配置管理接口地址，并使用IdentityServcer4进行认证，正好也符合我们我们项目的技术路线，为了把网关配置接口和网关使用接口区分，我们需要配置不同的Scope进行区分，由于本篇使用的IdentityServer4会在后续篇幅有完整介绍，本篇就直接列出实现代码，不做详细的介绍。现在开始改造我们的网关代码，来集成后台管理接口，然后测试通过授权接口更改配置信息且立即生效。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    Action&amp;lt;IdentityServerAuthenticationOptions&amp;gt; options = o =&amp;gt;
    {
        o.Authority = &quot;http://localhost:6611&quot;; //IdentityServer地址
        o.RequireHttpsMetadata = false;
        o.ApiName = &quot;gateway_admin&quot;; //网关管理的名称，对应的为客户端授权的scope
    };
    services.AddOcelot().AddAhphOcelot(option =&amp;gt;
    {
        option.DbConnectionStrings = &quot;Server=.;Database=Ctr_AuthPlatform;User ID=sa;Password=bl123456;&quot;;
        //option.EnableTimer = true;//启用定时任务
        //option.TimerDelay = 10 * 000;//周期10秒
    }).AddAdministration(&quot;/CtrOcelot&quot;, options);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意，由于&lt;code&gt;Ocelot.Administration&lt;/code&gt;扩展使用的是&lt;code&gt;OcelotMiddlewareConfigurationDelegate&lt;/code&gt;中间件配置委托，所以我们扩展中间件&lt;code&gt;AhphOcelotMiddlewareExtensions&lt;/code&gt;需要增加扩展代码来应用此委托。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;private static async Task&amp;lt;IInternalConfiguration&amp;gt; CreateConfiguration(IApplicationBuilder builder)
{
    //提取文件配置信息
    var fileConfig = await builder.ApplicationServices.GetService&amp;lt;IFileConfigurationRepository&amp;gt;().Get();
    var internalConfigCreator = builder.ApplicationServices.GetService&amp;lt;IInternalConfigurationCreator&amp;gt;();
    var internalConfig = await internalConfigCreator.Create(fileConfig.Data);
    //如果配置文件错误直接抛出异常
    if (internalConfig.IsError)
    {
        ThrowToStopOcelotStarting(internalConfig);
    }
    //配置信息缓存，这块需要注意实现方式，因为后期我们需要改造下满足分布式架构,这篇不做讲解
    var internalConfigRepo = builder.ApplicationServices.GetService&amp;lt;IInternalConfigurationRepository&amp;gt;();
    internalConfigRepo.AddOrReplace(internalConfig.Data);
    //获取中间件配置委托(2018-11-12新增)
    var configurations = builder.ApplicationServices.GetServices&amp;lt;OcelotMiddlewareConfigurationDelegate&amp;gt;();
    foreach (var configuration in configurations)
    {
        await configuration(builder);
    }
    return GetOcelotConfigAndReturn(internalConfigRepo);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;新建&lt;code&gt;IdeitityServer&lt;/code&gt;认证服务，并配置服务端口&lt;code&gt;6666&lt;/code&gt;，并添加二个测试客户端，一个设置访问scope为&lt;code&gt;gateway_admin&lt;/code&gt;，另外一个设置为其他，来分别测试认证效果。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using IdentityServer4.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace Ctr.AuthPlatform.TestIds4
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddIdentityServer()
                .AddDeveloperSigningCredential()
                .AddInMemoryApiResources(Config.GetApiResources())
                .AddInMemoryClients(Config.GetClients());
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseIdentityServer();
        }
    }

    public class Config
    {
        // scopes define the API resources in your system
        public static IEnumerable&amp;lt;ApiResource&amp;gt; GetApiResources()
        {
            return new List&amp;lt;ApiResource&amp;gt;
            {
                new ApiResource(&quot;api1&quot;, &quot;My API&quot;),
                new ApiResource(&quot;gateway_admin&quot;, &quot;My admin API&quot;)
            };
        }

        // clients want to access resources (aka scopes)
        public static IEnumerable&amp;lt;Client&amp;gt; GetClients()
        {
            // client credentials client
            return new List&amp;lt;Client&amp;gt;
            {
                new Client
                {
                    ClientId = &quot;client1&quot;,
                    AllowedGrantTypes = GrantTypes.ClientCredentials,

                    ClientSecrets =
                    {
                        new Secret(&quot;secret1&quot;.Sha256())
                    },
                    AllowedScopes = { &quot;api1&quot; }
                },
                new Client
                {
                    ClientId = &quot;client2&quot;,
                    AllowedGrantTypes = GrantTypes.ClientCredentials,

                    ClientSecrets =
                    {
                        new Secret(&quot;secret2&quot;.Sha256())
                    },
                    AllowedScopes = { &quot;gateway_admin&quot; }
                }
            };
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置好认证服务器后，我们使用&lt;code&gt;PostMan&lt;/code&gt;来测试接口调用，首先使用有权限的&lt;code&gt;client2&lt;/code&gt;客户端，获取&lt;code&gt;access_token&lt;/code&gt;,然后使用此&lt;code&gt;access_token&lt;/code&gt;访问网关配置接口。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1529926/201811/1529926-20181113074827035-1797190248.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1529926/201811/1529926-20181113074836175-339163172.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问&lt;code&gt;http://localhost:7777/CtrOcelot/configuration&lt;/code&gt;可以得到我们数据库配置的结果。&lt;/p&gt;
&lt;p&gt;我们再使用POST的方式修改配置信息，使用PostMan测试如下，请求后返回状态200（成功），然后测试修改前和修改后路由地址，发现立即生效,可以分别访问&lt;code&gt;http://localhost:7777/cjy/values&lt;/code&gt;和&lt;code&gt;http://localhost:7777/cjy/values&lt;/code&gt;验证即可。然后使用&lt;code&gt;client1&lt;/code&gt;获取access_token,请求配置地址，提示401未授权，为预期结果，达到我们最终目的。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1529926/201811/1529926-20181113074851778-1848220224.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;到此，我们网关就实现了2个方式更新配置信息，大家可以根据实际项目的情况从中选择适合自己的一种方式使用即可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们实际项目应用过程中，经常会根据不同的项目类型选择不同的数据库，这时网关也要配合项目需求来适应不同数据库的切换，本节就以mysql为例讲解下我们的扩展网关怎么实现数据库的切换及应用，如果有其他数据库使用需求可以根据本节内容进行扩展。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.cnblogs.com/jackcao/p/9942561.html&quot;&gt;【.NET Core项目实战-统一认证平台】第三章 网关篇-数据库存储配置信息（1）&lt;/a&gt;中介绍了网关的数据库初步设计，里面有我的设计的概念模型，现在使用mysql数据库，直接生成mysql的物理模型，然后生成数据库脚本，详细的生成方式请见上一篇，一秒搞定。是不是有点小激动，原来可以这么方便。&lt;/p&gt;
&lt;p&gt;新建&lt;code&gt;MySqlFileConfigurationRepository&lt;/code&gt;实现&lt;code&gt;IFileConfigurationRepository&lt;/code&gt;接口，需要&lt;code&gt;NuGet&lt;/code&gt;中添加&lt;code&gt;MySql.Data.EntityFrameworkCore&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using Ctr.AhphOcelot.Configuration;
using Ctr.AhphOcelot.Model;
using Dapper;
using MySql.Data.MySqlClient;
using Ocelot.Configuration.File;
using Ocelot.Configuration.Repository;
using Ocelot.Responses;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace Ctr.AhphOcelot.DataBase.MySql
{
    /// &amp;lt;summary&amp;gt;
    /// 金焰的世界
    /// 2018-11-12
    /// 使用MySql来实现配置文件仓储接口
    /// &amp;lt;/summary&amp;gt;
    public class MySqlFileConfigurationRepository : IFileConfigurationRepository
    {
        private readonly AhphOcelotConfiguration _option;
        public MySqlFileConfigurationRepository(AhphOcelotConfiguration option)
        {
            _option = option;
        }

        /// &amp;lt;summary&amp;gt;
        /// 从数据库中获取配置信息
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public async Task&amp;lt;Response&amp;lt;FileConfiguration&amp;gt;&amp;gt; Get()
        {
            #region 提取配置信息
            var file = new FileConfiguration();
            //提取默认启用的路由配置信息
            string glbsql = &quot;select * from AhphGlobalConfiguration where IsDefault=1 and InfoStatus=1&quot;;
            //提取全局配置信息
            using (var connection = new MySqlConnection(_option.DbConnectionStrings))
            {
                var result = await connection.QueryFirstOrDefaultAsync&amp;lt;AhphGlobalConfiguration&amp;gt;(glbsql);
                if (result != null)
                {
                    var glb = new FileGlobalConfiguration();
                    //赋值全局信息
                    glb.BaseUrl = result.BaseUrl;
                    glb.DownstreamScheme = result.DownstreamScheme;
                    glb.RequestIdKey = result.RequestIdKey;
                    if (!String.IsNullOrEmpty(result.HttpHandlerOptions))
                    {
                        glb.HttpHandlerOptions = result.HttpHandlerOptions.ToObject&amp;lt;FileHttpHandlerOptions&amp;gt;();
                    }
                    if (!String.IsNullOrEmpty(result.LoadBalancerOptions))
                    {
                        glb.LoadBalancerOptions = result.LoadBalancerOptions.ToObject&amp;lt;FileLoadBalancerOptions&amp;gt;();
                    }
                    if (!String.IsNullOrEmpty(result.QoSOptions))
                    {
                        glb.QoSOptions = result.QoSOptions.ToObject&amp;lt;FileQoSOptions&amp;gt;();
                    }
                    if (!String.IsNullOrEmpty(result.ServiceDiscoveryProvider))
                    {
                        glb.ServiceDiscoveryProvider = result.ServiceDiscoveryProvider.ToObject&amp;lt;FileServiceDiscoveryProvider&amp;gt;();
                    }
                    file.GlobalConfiguration = glb;

                    //提取所有路由信息
                    string routesql = &quot;select T2.* from AhphConfigReRoutes T1 inner join AhphReRoute T2 on T1.ReRouteId=T2.ReRouteId where AhphId=@AhphId and InfoStatus=1&quot;;
                    var routeresult = (await connection.QueryAsync&amp;lt;AhphReRoute&amp;gt;(routesql, new { result.AhphId }))?.AsList();
                    if (routeresult != null &amp;amp;&amp;amp; routeresult.Count &amp;gt; 0)
                    {
                        var reroutelist = new List&amp;lt;FileReRoute&amp;gt;();
                        foreach (var model in routeresult)
                        {
                            var m = new FileReRoute();
                            if (!String.IsNullOrEmpty(model.AuthenticationOptions))
                            {
                                m.AuthenticationOptions = model.AuthenticationOptions.ToObject&amp;lt;FileAuthenticationOptions&amp;gt;();
                            }
                            if (!String.IsNullOrEmpty(model.CacheOptions))
                            {
                                m.FileCacheOptions = model.CacheOptions.ToObject&amp;lt;FileCacheOptions&amp;gt;();
                            }
                            if (!String.IsNullOrEmpty(model.DelegatingHandlers))
                            {
                                m.DelegatingHandlers = model.DelegatingHandlers.ToObject&amp;lt;List&amp;lt;string&amp;gt;&amp;gt;();
                            }
                            if (!String.IsNullOrEmpty(model.LoadBalancerOptions))
                            {
                                m.LoadBalancerOptions = model.LoadBalancerOptions.ToObject&amp;lt;FileLoadBalancerOptions&amp;gt;();
                            }
                            if (!String.IsNullOrEmpty(model.QoSOptions))
                            {
                                m.QoSOptions = model.QoSOptions.ToObject&amp;lt;FileQoSOptions&amp;gt;();
                            }
                            if (!String.IsNullOrEmpty(model.DownstreamHostAndPorts))
                            {
                                m.DownstreamHostAndPorts = model.DownstreamHostAndPorts.ToObject&amp;lt;List&amp;lt;FileHostAndPort&amp;gt;&amp;gt;();
                            }
                            //开始赋值
                            m.DownstreamPathTemplate = model.DownstreamPathTemplate;
                            m.DownstreamScheme = model.DownstreamScheme;
                            m.Key = model.RequestIdKey;
                            m.Priority = model.Priority ?? 0;
                            m.RequestIdKey = model.RequestIdKey;
                            m.ServiceName = model.ServiceName;
                            m.UpstreamHost = model.UpstreamHost;
                            m.UpstreamHttpMethod = model.UpstreamHttpMethod?.ToObject&amp;lt;List&amp;lt;string&amp;gt;&amp;gt;();
                            m.UpstreamPathTemplate = model.UpstreamPathTemplate;
                            reroutelist.Add(m);
                        }
                        file.ReRoutes = reroutelist;
                    }
                }
                else
                {
                    throw new Exception(&quot;未监测到任何可用的配置信息&quot;);
                }
            }
            #endregion
            if (file.ReRoutes == null || file.ReRoutes.Count == 0)
            {
                return new OkResponse&amp;lt;FileConfiguration&amp;gt;(null);
            }
            return new OkResponse&amp;lt;FileConfiguration&amp;gt;(file);
        }

        //由于数据库存储可不实现Set接口直接返回
        public async Task&amp;lt;Response&amp;gt; Set(FileConfiguration fileConfiguration)
        {
            return new OkResponse();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实现代码后如何扩展到我们的网关里呢？只需要在注入时增加一个扩展即可。在&lt;code&gt;ServiceCollectionExtensions&lt;/code&gt;类中增加如下代码。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 扩展使用Mysql存储。
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;builder&quot;&amp;gt;&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
public static IOcelotBuilder UseMySql(this IOcelotBuilder builder)
{
    builder.Services.AddSingleton&amp;lt;IFileConfigurationRepository, MySqlFileConfigurationRepository&amp;gt;();
    return builder;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后修改网关注入代码。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    Action&amp;lt;IdentityServerAuthenticationOptions&amp;gt; options = o =&amp;gt;
    {
        o.Authority = &quot;http://localhost:6611&quot;; //IdentityServer地址
        o.RequireHttpsMetadata = false;
        o.ApiName = &quot;gateway_admin&quot;; //网关管理的名称，对应的为客户端授权的scope
    };
    services.AddOcelot().AddAhphOcelot(option =&amp;gt;
                                       {
                                           option.DbConnectionStrings = &quot;Server=localhost;Database=Ctr_AuthPlatform;User ID=root;Password=bl123456;&quot;;
                                           //option.EnableTimer = true;//启用定时任务
                                           //option.TimerDelay = 10 * 000;//周期10秒
                                       })
        .UseMySql()
        .AddAdministration(&quot;/CtrOcelot&quot;, options);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后把mysql数据库插入sqlserver一样的路由测试信息，然后启动测试，可以得到我们预期的结果。为了方便大家测试，附mysql插入测试数据脚本如下。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;#插入全局测试信息
insert into AhphGlobalConfiguration(GatewayName,RequestIdKey,IsDefault,InfoStatus)
values('测试网关','test_gateway',1,1);

#插入路由分类测试信息
insert into AhphReRoutesItem(ItemName,InfoStatus) values('测试分类',1);

#插入路由测试信息 
insert into AhphReRoute values(1,1,'/ctr/values','[ &quot;GET&quot; ]','','http','/api/Values','[{&quot;Host&quot;: &quot;localhost&quot;,&quot;Port&quot;: 9000 }]','','','','','','','',0,1);

#插入网关关联表
insert into AhphConfigReRoutes values(1,1,1);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果想扩展其他数据库实现，直接参照此源码即可。&lt;/p&gt;

&lt;p&gt;本篇我们介绍了2种动态更新配置文件的方法，实现访问不同，各有利弊，正式使用时可以就实际情况选择即可，都能达到我们的预期目标，也介绍了Ocelot扩展组件的使用和IdentityServer4的基础入门信息。然后又扩展了我们mysql数据库的存储方式，增加到了我们网关的扩展里，随时可以根据项目实际情况进行切换。&lt;/p&gt;
&lt;p&gt;网关的存储篇已经全部介绍完毕，有兴趣的同学可以在此基础上继续拓展其他需求，下一篇我们将介绍使用redis来重写Ocelot里的所有缓存，为我们后续的网关应用打下基础。&lt;/p&gt;
</description>
<pubDate>Mon, 12 Nov 2018 23:49:00 +0000</pubDate>
<dc:creator>金焰的世界</dc:creator>
<og:description></og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jackcao/p/9950305.html</dc:identifier>
</item>
<item>
<title>Font Awesome矢量版，十六进制版，WPF字体使用 - MSDNER</title>
<link>http://www.cnblogs.com/bruceday/p/9950031.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bruceday/p/9950031.html</guid>
<description>&lt;p&gt;我之前在博客中介绍过&lt;a href=&quot;http://nopapp.com/Blog/Article/Font-Awesome-Hex&quot;&gt;几个矢量图库网站&lt;/a&gt;，在WPF程序中，一般接触到的矢量图标资源有XAML、SVG、字体这三种格式。XAML是标准格式就不说了，SVG并不是直接支持的，不过微软提供了&lt;a href=&quot;http://nopapp.com/Blog/Article/Font-Awesome-Hex&quot;&gt;Expression Design&lt;/a&gt;可以非常方便我们将其转换为XAML格式的资源。而对于字体，虽然WPF是直接支持的，但由于字体图标其特殊性，要将其显示为图标还是需要费点劲的。本文这里就以&lt;a href=&quot;http://nopapp.com/Blog/Article/Font-Awesome-Hex&quot;&gt;Font-Awesome&lt;/a&gt;为例，介绍一下如何在WPF中使用字体图标。&lt;/p&gt;&lt;div readability=&quot;225.90833728091&quot;&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use 500px&quot;&gt; fa-500px &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf26e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use address-book&quot;&gt; fa-address-book &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2b9;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use address-book-o&quot;&gt; fa-address-book-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2ba;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use address-card&quot;&gt; fa-address-card &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2bb;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use address-card-o&quot;&gt; fa-address-card-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2bc;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use adjust&quot;&gt; fa-adjust &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf042;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use adn&quot;&gt; fa-adn &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf170;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use align-center&quot;&gt; fa-align-center &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf037;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use align-justify&quot;&gt; fa-align-justify &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf039;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use align-left&quot;&gt; fa-align-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf036;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use align-right&quot;&gt; fa-align-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf038;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use amazon&quot;&gt; fa-amazon &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf270;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use ambulance&quot;&gt; fa-ambulance &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0f9;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.6&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use american-sign-language-interpreting&quot;&gt; fa-american-sign-language-interpreting &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2a3;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use anchor&quot;&gt; fa-anchor &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf13d;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use android&quot;&gt; fa-android &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf17b;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angellist&quot;&gt; fa-angellist &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf209;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-double-down&quot;&gt; fa-angle-double-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf103;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-double-left&quot;&gt; fa-angle-double-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf100;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-double-right&quot;&gt; fa-angle-double-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf101;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-double-up&quot;&gt; fa-angle-double-up &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf102;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-down&quot;&gt; fa-angle-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf107;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-left&quot;&gt; fa-angle-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf104;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-right&quot;&gt; fa-angle-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf105;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use angle-up&quot;&gt; fa-angle-up &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf106;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use apple&quot;&gt; fa-apple &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf179;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use archive&quot;&gt; fa-archive &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf187;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use area-chart&quot;&gt; fa-area-chart &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1fe;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-down&quot;&gt; fa-arrow-circle-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0ab;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-left&quot;&gt; fa-arrow-circle-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0a8;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-o-down&quot;&gt; fa-arrow-circle-o-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf01a;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.0&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-o-left&quot;&gt; fa-arrow-circle-o-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf190;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.0&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-o-right&quot;&gt; fa-arrow-circle-o-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf18e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-o-up&quot;&gt; fa-arrow-circle-o-up &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf01b;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-right&quot;&gt; fa-arrow-circle-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0a9;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-circle-up&quot;&gt; fa-arrow-circle-up &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0aa;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-down&quot;&gt; fa-arrow-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf063;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-left&quot;&gt; fa-arrow-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf060;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-right&quot;&gt; fa-arrow-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf061;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrow-up&quot;&gt; fa-arrow-up &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf062;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrows&quot;&gt; fa-arrows &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf047;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrows-alt&quot;&gt; fa-arrows-alt &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0b2;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrows-h&quot;&gt; fa-arrows-h &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf07e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use arrows-v&quot;&gt; fa-arrows-v &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf07d;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.6&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use asl-interpreting&quot;&gt; fa-asl-interpreting &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2a3;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.6&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use assistive-listening-systems&quot;&gt; fa-assistive-listening-systems&lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2a2;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use asterisk&quot;&gt; fa-asterisk &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf069;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use at&quot;&gt; fa-at &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1fa;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.6&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use audio-description&quot;&gt; fa-audio-description &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf29e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use automobile&quot;&gt; fa-automobile &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1b9;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use backward&quot;&gt; fa-backward &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf04a;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use balance-scale&quot;&gt; fa-balance-scale &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf24e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use ban&quot;&gt; fa-ban &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf05e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bandcamp&quot;&gt; fa-bandcamp &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2d5;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bank&quot;&gt; fa-bank &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf19c;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bar-chart&quot;&gt; fa-bar-chart &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf080;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bar-chart-o&quot;&gt; fa-bar-chart-o &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf080;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use barcode&quot;&gt; fa-barcode &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf02a;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bars&quot;&gt; fa-bars &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0c9;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bath&quot;&gt; fa-bath &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2cd;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.7&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bathtub&quot;&gt; fa-bathtub &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2cd;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery&quot;&gt; fa-battery &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf240;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-0&quot;&gt; fa-battery-0 &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf244;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-1&quot;&gt; fa-battery-1 &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf243;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-2&quot;&gt; fa-battery-2 &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf242;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-3&quot;&gt; fa-battery-3 &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf241;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-4&quot;&gt; fa-battery-4 &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf240;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-empty&quot;&gt; fa-battery-empty &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf244;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-full&quot;&gt; fa-battery-full &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf240;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-half&quot;&gt; fa-battery-half &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf242;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-quarter&quot;&gt; fa-battery-quarter &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf243;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use battery-three-quarters&quot;&gt; fa-battery-three-quarters &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf241;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.3&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bed&quot;&gt; fa-bed &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf236;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use beer&quot;&gt; fa-beer &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0fc;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use behance&quot;&gt; fa-behance &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1b4;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use behance-square&quot;&gt; fa-behance-square &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1b5;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bell&quot;&gt; fa-bell &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0f3;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bell-o&quot;&gt; fa-bell-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0a2;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bell-slash&quot;&gt; fa-bell-slash &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1f6;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bell-slash-o&quot;&gt; fa-bell-slash-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1f7;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bicycle&quot;&gt; fa-bicycle &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf206;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use binoculars&quot;&gt; fa-binoculars &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1e5;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use birthday-cake&quot;&gt; fa-birthday-cake &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1fd;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bitbucket&quot;&gt; fa-bitbucket &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf171;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bitbucket-square&quot;&gt; fa-bitbucket-square &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf172;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bitcoin&quot;&gt; fa-bitcoin &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf15a;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use black-tie&quot;&gt; fa-black-tie &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf27e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.6&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use blind&quot;&gt; fa-blind &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf29d;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.5&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bluetooth&quot;&gt; fa-bluetooth &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf293;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.5&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bluetooth-b&quot;&gt; fa-bluetooth-b &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf294;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bold&quot;&gt; fa-bold &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf032;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bolt&quot;&gt; fa-bolt &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0e7;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bomb&quot;&gt; fa-bomb &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1e2;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use book&quot;&gt; fa-book &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf02d;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bookmark&quot;&gt; fa-bookmark &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf02e;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bookmark-o&quot;&gt; fa-bookmark-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf097;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.6&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use braille&quot;&gt; fa-braille &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf2a1;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use briefcase&quot;&gt; fa-briefcase &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0b1;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use btc&quot;&gt; fa-btc &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf15a;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bug&quot;&gt; fa-bug &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf188;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use building&quot;&gt; fa-building &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1ad;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use building-o&quot;&gt; fa-building-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0f7;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bullhorn&quot;&gt; fa-bullhorn &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0a1;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bullseye&quot;&gt; fa-bullseye &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf140;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use bus&quot;&gt; fa-bus &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf207;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.3&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use buysellads&quot;&gt; fa-buysellads &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf20d;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use cab&quot;&gt; fa-cab &lt;span class=&quot;text-muted&quot;&gt;(alias) &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1ba;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.2&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calculator&quot;&gt; fa-calculator &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1ec;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calendar&quot;&gt; fa-calendar &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf073;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calendar-check-o&quot;&gt; fa-calendar-check-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf274;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calendar-minus-o&quot;&gt; fa-calendar-minus-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf272;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calendar-o&quot;&gt; fa-calendar-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf133;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calendar-plus-o&quot;&gt; fa-calendar-plus-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf271;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.4&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use calendar-times-o&quot;&gt; fa-calendar-times-o &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf273;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use camera&quot;&gt; fa-camera &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf030;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use camera-retro&quot;&gt; fa-camera-retro &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf083;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.1&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use car&quot;&gt; fa-car &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf1b9;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use caret-down&quot;&gt; fa-caret-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0d7;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use caret-left&quot;&gt; fa-caret-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0d9;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use caret-right&quot;&gt; fa-caret-right &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf0da;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use caret-square-o-down&quot;&gt; fa-caret-square-o-down &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf150;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;text-muted pull-right&quot;&gt;4.0&lt;/small&gt;&lt;span class=&quot;fa fa-fw&quot; title=&quot;Copy to use caret-square-o-left&quot;&gt; fa-caret-square-o-left &lt;span class=&quot;text-muted&quot;&gt;[&amp;amp;#xf191;]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Mon, 12 Nov 2018 16:24:00 +0000</pubDate>
<dc:creator>MSDNER</dc:creator>
<og:description>我之前在博客中介绍过几个矢量图库网站，在WPF程序中，一般接触到的矢量图标资源有XAML、SVG、字体这三种格式。XAML是标准格式就不说了，SVG并不是直接支持的，不过微软提供了Expression</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bruceday/p/9950031.html</dc:identifier>
</item>
<item>
<title>面试题-如何判断一个对象是不是数组类型 - Peer1029</title>
<link>http://www.cnblogs.com/peerless1029/p/9950005.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peerless1029/p/9950005.html</guid>
<description>&lt;p&gt;在前端面试中，我们经常会被问道，如何判断一个对象是不是数组类型，下面就这一点展开详细的描述，并总结一下共有几种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.我们首先回顾一下typeof操作符的用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181112230035730-1009733923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;操作符可以用来检测给定变量的数据类型，返回的值有以下几种：undefined，boolean，string，number，object，function&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.使用typeof来判断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181112230341938-1482084195.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们惊喜的发现：除了方法会返回function值之外，[]和{}都是返回的object值，所以无法通过typeof来区分对象还是数组，这种方法不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.根据构造函数来判断&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;instanceof操作符可以来表示实例是否属于某个构造函数创建的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181112231600242-756106940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图来看，obj1是构造函数Array的实例没问题，obj4也是构造函数的实例类型，显然obj4应该是对象数据类型，为什么会产生这种情况，obj4.__proto__=obj1，obj4改变了它的原型指向，草图如下：&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181112232818671-1658492047.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为改变了obj4的原型指向导致使用instanceof字符判断出obj4也为数组类型了，所以此方法也不可取。&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;使用原型对象判断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181112233355993-1144779359.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发现结果和使用instanceof字符一样，所以还是无法区[]是数组类型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.根据对象的class属性来判断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113000348503-1302976269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;class：每个对象的内部属性，记录创建对象时使用的类型名，一旦创建，无法修改。&lt;/p&gt;
&lt;p&gt;问题：数组类型等内置类型，重写了toString方法，直接调用数组对象的方法，不在返回class&lt;/p&gt;
&lt;p&gt;解决：使用call替换this为指定对象调用Object原型上的toString方法即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.Array.isArray直接判断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201811/1103967-20181113000316303-1718022525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;center&quot; readability=&quot;12.886627906977&quot;&gt;
&lt;p&gt;Array.isArray() 用于确定传递的值是否是一个 Array。如果对象是 Array，则为true; 否则为false.&lt;/p&gt;
&lt;p&gt;综上所述，判断一个对象是不是数组类型最可靠的方法是这两种: Object. prototype. toString. call(obj)===[ object Array]和Array. isArray(obj)。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;《JavaScript高级程序设计》  &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray&quot; target=&quot;_blank&quot;&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 12 Nov 2018 16:07:00 +0000</pubDate>
<dc:creator>Peer1029</dc:creator>
<og:description>在前端面试中，我们经常会被问道，如何判断一个对象是不是数组类型，下面就这一点展开详细的描述，并总结一下共有几种方法。 1.我们首先回顾一下typeof操作符的用法 操作符可以用来检测给定变量的数据类型</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/peerless1029/p/9950005.html</dc:identifier>
</item>
<item>
<title>HBase数据持久化之HRegion.flushcache即CF持久化 - letsfly</title>
<link>http://www.cnblogs.com/letsfly/p/9949999.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/letsfly/p/9949999.html</guid>
<description>&lt;p&gt;　　我们从HRegion.flushcache开始分析。由于这个过程还是比较复杂的，因此，在这一节，我们不会分析的太过详细，只是单单的介绍一下其大体流程，待大家有了整体的把握之后，我们将在下一节详细介绍其持久化的具体流程。&lt;/p&gt;
&lt;p&gt;　　为了尽可能严谨的描述整个流程，小编在讲解过程中会贴比较多的图来描述。&lt;/p&gt;
&lt;p&gt;　　好了，闲话不说，下面我们进入正题：&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;　　首先，让我们来到今天的入口方法HRegion.flushcache：下图的代码不少，但是，并没有我们今天要介绍的重点。此图只是用来表示我们今天要讲的方法。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235335904-796040259.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/38F3F90A13C84231AD9B8FD6578C10C1&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　其实，重点的入口方法是下图的框选方法internalFlushcache。由该方法名，我们就可以猜到该方法应该就是我们要找的方法。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235405120-1074097988.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/FEF78AF282A242C18C5D7E965F3167C8&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　接着，让我们追踪到该方法内部，看到其调用了下图所示的两个方法。如下图所框选的两个方法。他们都是我们今天要介绍的重量级方法。&lt;/p&gt;
&lt;p&gt;　　第一个方法主要实现的是内存快照的创建。(为简化描述，以后用方法一描述该方法)&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;　　第二个方法主要实现了将内存中的数据flush到磁盘上。（同理，用方法二描述该方法）&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235432939-1168025926.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/D3CF71943B2643F5AB145C6306F5CE82&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　下面，我们来到第一个方法，也就是HRegion.internalPrepareFlushCache。这个方法的内容很多，但是与我们今天流程相关并不是很多，如下图所示的代码：&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235454923-1395177616.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/3371A95559D2451FB991C948DA564156&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　这里，我们简单看一下WALUtil.writeFlushMarker，并不做深入讲解，因为后面的内容还很多，详情让我们放到下一节。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235516788-368576861.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/891D6281DEFE44A5A5606D8B0EB01222&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;　　接着，我们来到StoreFlusherImpl.prepare。下图所框选的方法比较重要，因为这是方法一的核心。它为当前的memstore创建了快照，并且调用了resetActive方法，重置了memstore中的active成员变量。大家可能不太清楚我为什么要强调这里的active成员变量。那么我们跳过这张图。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235539715-451442318.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/303B7D5D65F042C9B3745DF5D3D02359&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;　　来到DefaultMemStore.snapshot，看一下我特地为大家标注的。首先，根据当前的active创建ImmutableSegment，然后将刚刚创建的ImmutableSegment赋给成员变量snapshot，最后，调用resetActive重置了当前的active为MutableSegment。这里不是很难，就不详细介绍了，大家有兴趣可以追查一下源码。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235607232-1558402179.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/272FBD9E65FB475CA658AABEF0B58C96&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;　　接下来，让我们来到今天的另一个重量级方法HRegion.internalFlushCacheAndCommit，由于该方法比较长，内容比较多，这里我们仅介绍第一张图，也就是下图。如下图所示，我们框选了两个比较重要的变量prepareResult.storeFlushCtxs、prepareResult.committedFiles。大家可能会对他们有点陌生。没有关系，让我们在下面插一张图稍稍回顾一下&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235639500-728640795.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/13E20F74482D4C49B577F417E11A71A3&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;　　看了下图，你可能就恍然大悟了，这正是方法一为方法二调用做的必要准备。到这里，大家应该能够理解我这里为什么要将他们二者称之为两个重量级方法了。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235709983-731942372.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/88A86F0DE66F48098FA6D19DBBBB1072&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;　　接着，让我们继续往下走，来到HStore.StoreFlusherImpl.flushCache方法。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235732262-38783077.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/BEA7252F254E4EC38742E87CBB60170A&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;　　继续来到上图所示方法的具体调用，这里就实现了对快照的flush。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235752804-1558064310.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/1DE83F86D77A4061B8AA7EF1A6A23BC5&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;　　接着，我们来到今天所介绍的方法中最为复杂的方法。在下图，我框选的内容比较多，大家不要担心，我仅介绍其中与我们这一节紧密相关的后三个方法。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235825447-1327570994.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/79DA5F11880E4E0C94FB67BABB452FC1&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　首先，我们来到HStore.createWriterInTmp方法。在这个方法中，获取了familyTempDir路径。该路径是regionDir/.tmp/family.getNameAsString()。然后构建了StoreFileWriter。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235856621-961256911.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/AF92C68324CF4EA9B89F3D7BF75CCF4C&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　对于StoreFileWriter的构造方法是比较重要的，特别是其writer的构建，我在下图特别作了标示。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235917342-1793327568.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/42D7E602E5D444D794B9B89FEB4C089C&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;由于上图所示的方法比较重要，在这里，我再附一张图来说明上图所示的writer类型，这关乎后面两个方法的具体调用。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235939355-52890145.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/066A3D0D6232428FB6264E234370F31D&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;　　接着，我们来到StoreFlusher.performFlush。你可能会对我在下图标注的sink比较懵逼。但是仔细想一想，你可能就猜到了，这里的sink正是上面我们重点描述的HFileWriterImpl。也就是说下面调用的sink.append正是HFileWriterImpl.append。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181112235959559-465413730.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/23ECAF862C994D879A5EB05DE2B3BB70&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　下图所示正是HFileWriterImpl.append。这里我们就不详细叙述了，留待下一节具体分析。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181113000022684-836711880.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/1716216117D647BC88A8E0AABED4DF8F&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　接下来，就是真正的持久化方法：finalizeWriter。显然，在这里调用了writer.close。这里的writer类型是StoreFileWriter。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181113000047983-1363838288.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/1FA6D528BFFD48D6B04FA88A6ECCE345&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　继续往下走，来到StoreFileWriter.close。而这里的writer正是我们刚刚再三强调的HFileWriterImpl。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181113000110673-184131966.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/992E26C0BA7A4B2F9DF65129875D1016&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;　　在HFileWriterImpl.close方法中，将相关信息写入到输出流。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181113000135823-2139498987.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/5592AF23630840F0AAA31B3BB6C97CFE&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　在最后的finishClose方法中，也正如后面的图所示，最后调用了outputStream.close，完成了输出流的关闭。也就是说HStore中存储的CF信息flush到磁盘上。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/F78E23E4E10F4B0BAE48CCB68F1C8489&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181113000217750-1741497485.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/DE5409CB28B247A58BE629B5C56AB59C&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201811/1365945-20181113000229456-1269220677.png&quot; alt=&quot;&quot;/&gt;　　这一节描述的信息量还是很大的，还是希望大家耐心阅读。在后面的博文中，小编将做更为详细的描述。&lt;/div&gt;
&lt;p&gt;　　如果大家感觉不错,希望点一下下面的推荐。你的肯定是小编最大的动力。如果有疑问,也可以发送邮件至15935152719@163.com。&lt;/p&gt;
</description>
<pubDate>Mon, 12 Nov 2018 16:04:00 +0000</pubDate>
<dc:creator>letsfly</dc:creator>
<og:description>我们从HRegion.flushcache开始分析。由于这个过程还是比较复杂的，因此，在这一节，我们不会分析的太过详细，只是单单的介绍一下其大体流程，待大家有了整体的把握之后，我们将在下一节详细介绍其</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/letsfly/p/9949999.html</dc:identifier>
</item>
<item>
<title>数据溢出 - 随性者也</title>
<link>http://www.cnblogs.com/zhugaopeng/p/9949890.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhugaopeng/p/9949890.html</guid>
<description>&lt;p&gt;基本数据类型分两大类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;整型&lt;/li&gt;
&lt;li&gt;浮点型&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;整型包括char,short,int,long,long long&lt;/li&gt;
&lt;li&gt;除此之外，整型还有无符号类型unsigned ...&lt;/li&gt;
&lt;li&gt;浮点型包括float,double,long double&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;规则：&lt;/p&gt;&lt;p&gt;short至少16位，int至少和short一样长；&lt;/p&gt;&lt;p&gt;long至少32位，至少和int一样长；&lt;/p&gt;&lt;p&gt;long long至少64位，至少和long一样长。&lt;/p&gt;&lt;p&gt;float至少4个字节；&lt;/p&gt;&lt;p&gt;double至少6个字节，并且不少于float；&lt;/p&gt;&lt;p&gt;long double至少和double一样长。&lt;/p&gt;

&lt;p&gt;不同的系统环境，数据范围有所不同；32位/64位操作系统，数据范围也有所不同。&lt;/p&gt;&lt;p&gt;可以通过代码来确定不同的范围：&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;c语言定义了一系列的宏&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;limits.h&amp;gt;

int main()
{
    printf(&quot;max integer: %d\n&quot;, INT_MAX);
    printf(&quot;min integer: %d\n&quot;, INT_MIN);
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;C++ 数值极限&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;limits&amp;gt;

int main()
{
    std::cout &amp;lt;&amp;lt; numeric_limits&amp;lt;int&amp;gt;::max() &amp;lt;&amp;lt; endl;
    std::cout &amp;lt;&amp;lt; numeric_limits&amp;lt;int&amp;gt;::min() &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;介绍个亲身遇到的数据溢出的问题。&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数据压缩后还原导致溢出&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;int d = 0;
long value = d * 1000 + 10;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面一段代码就有发生数据溢出的可能。当变量d足够大时，再乘以1000就会溢出。结果可想而知，是一个相对小的数值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//可以这样改写，就不会出现问题
long value = (long)d * 1000 + 10;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;C/C++基本数据类型，每一种都有范围。在选择数据类型要注意合适的范围，否则会造成数据溢出，产生难以发现的bug。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 12 Nov 2018 15:23:00 +0000</pubDate>
<dc:creator>随性者也</dc:creator>
<og:description>基本数据类型 基本数据类型分两大类： 1. 整型 2. 浮点型 整型包括char,short,int,long,long long 除此之外，整型还有无符号类型unsigned ... 浮点型包括fl</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhugaopeng/p/9949890.html</dc:identifier>
</item>
<item>
<title>SCI软件使用方法总结-定位测量篇 - ZROSE</title>
<link>http://www.cnblogs.com/sx-software-zys/p/9949865.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sx-software-zys/p/9949865.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;SCI软件使用方法总结-定位测量篇&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、    流程图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个视觉项目的流程图的框架大体是：相机初始化、变量初始化、…、指令接受、IF条件判断、SWITCH分支、循环、结果输出；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、    算子块内部算子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定位测量：&lt;/strong&gt;载入图像、标定、确定ROI基准（通过一条直线的角度和两条直线的交点、或者一条直线和一个中心点）、找直线（圆、交点等）、找角度、找点等；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; A：标定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要是确定一个像素格代表的实际尺寸是多少，以便软件处理结果的表示（方法不完整，待补充）；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B：ROI模板定位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般方法：（1）在划定的区域找到一条直线，用来确定模板的角度；然后用灰度匹配、blob分析、直线交点等方法，确定一个点；这样一个点和一条直线就能确定一个平面（准确来说是确定一个坐标平面，用来确定当前平面的坐标信息），然后通过坐标转换，这样就能确定样品的实际位置；最后是用ROI基准设置功能完成定位，选择相应的直线角度和灰度匹配（或者blob分析、直线交点）所确定的点即可；&lt;/p&gt;
&lt;p&gt;                 （2）如果工件来料比较规则，没有角度的变化，也可以选用一个点来做定位点，不需要角度（这种情况较少），简称&lt;strong&gt;无角度定位&lt;/strong&gt;；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C：&lt;/strong&gt;如果是测量直线的长度以及距离，则直接在图像中找到相应的直线，然后用点（直线的中点）到直线的距离、直线到直线的距离、或者两条直线的交点到直线的距离来确定两条直线的距离（即一条线段的宽度，比如用两条长边的距离来求矩形的宽，用两条短边的距离来求矩形的长）；&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：使用找直线的算子的时候，设置中使用最多的是边缘强度（对比度）和搜索线个数（选择合适的数量可以减小误差，提高精度，一般设置在100~200&lt;/strong&gt;&lt;strong&gt;）；剔除距离和剔除比例是固定的，不用改变；边缘宽度一般不超过10&lt;/strong&gt;&lt;strong&gt;（会影响精度），投影宽度也基本不用改变，使用默认的数值就好！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Nov 2018 15:18:00 +0000</pubDate>
<dc:creator>ZROSE</dc:creator>
<og:description>SCI软件使用方法总结-定位测量篇 一、 流程图 一个视觉项目的流程图的框架大体是：相机初始化、变量初始化、…、指令接受、IF条件判断、SWITCH分支、循环、结果输出； 二、 算子块内部算子 定位测</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sx-software-zys/p/9949865.html</dc:identifier>
</item>
<item>
<title>一篇完全了解java关键字synchronized - 辰砂tj</title>
<link>http://www.cnblogs.com/tojian/p/9949767.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tojian/p/9949767.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;title: synchronized解析&lt;br/&gt;tags: java 锁&lt;br/&gt;author: 辰砂&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一总体概述图&quot;&gt;一、总体概述图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513801/201811/1513801-20181112225501788-42765647.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二实现原理&quot;&gt;二、实现原理&lt;/h2&gt;
&lt;h4 id=&quot;monitorenter&quot;&gt;monitorenter：&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;　　每个对象有一个monitor，即监视器，当且仅当monitor被占用时，这个monitor就被锁住了。线程执行monitorenter指令是为了尝试获取该monitor的所有权，过程为：&lt;br/&gt;　　1） 如果一个monitor的进入数为0，那么该线程直接进入monitor，并且将monitor进入数置为1，该线程成为该monitor的所有者；&lt;br/&gt;　　2） 如果该进程是已经占用该monitor，则直接进入，并且monitor进入数加1；&lt;br/&gt;　　3）如果该进程未占有该monitor，即monitor被其他线程所占有，那么该线程会被阻塞，直到该monitor的进入数变为0，此时该线程会再次尝试获取该monitor。&lt;br/&gt;　　&lt;/p&gt;
&lt;h4 id=&quot;monitorexit&quot;&gt;　monitorexit：&lt;br/&gt;&lt;/h4&gt;
&lt;p&gt;　　执行monitorexit指令的线程必须是已经拥有该monitor的线程，执行monitorexit指令后，该monitor的进入数减1，直到该monitor的进入数减为0，此时该线程不再是该monitor的所有者，其他被阻塞进入该monitor的线程可以尝试获取该monitor的所有权。&lt;br/&gt;　　这就是synchronized的实现原理。其实，wait/notify/notifyAll也是基于monitor对象实现的，这也是为什么只有在同步块中才能使用wait/notify/notifyAll方法。&lt;/p&gt;
&lt;p&gt;如果用synchronized修饰方法，会是怎样呢？我们用javap -verbose命令反编译下面的程序，其中-verbose表示输出堆栈大小、各方法的locals及args数，以及class文件的编译版本：&lt;br/&gt;我们发现在方法体内部没有monitorenter和monitorexit指令，但是注意我箭头表示的地方，有一个ACC_SYNCHRONIZED标志，JVM就是通过该标志来判断是否需要实现同步的，具体过程为：当线程执行该方法时，会先检查该方法是否标志了ACC_SYNCHRONIZED，如果标志了，线程需要先获取monitor，获取成功后才能调用方法，方法执行完后再释放monitor，在该线程调用方法期间，其他线程无法获取同一个monitor对象。其实本质上和synchronized块相同，只是同步方法是用一种隐式的方式来实现，而不是显式地通过字节码指令。&lt;/p&gt;
&lt;h2 id=&quot;三如何使用&quot;&gt;三、如何使用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 同步一个代码块&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void func() {
    synchronized (this) {
        // ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。&lt;/p&gt;
&lt;p&gt;对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class SynchronizedExample {

    public void func1() {
        synchronized (this) {
            for (int i = 0; i &amp;lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&amp;gt; e1.func1());
    executorService.execute(() -&amp;gt; e1.func1());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void main(String[] args) {
    SynchronizedExample e1 = new SynchronizedExample();
    SynchronizedExample e2 = new SynchronizedExample();
    ExecutorService executorService = Executors.newCachedThreadPool();
    executorService.execute(() -&amp;gt; e1.func1());
    executorService.execute(() -&amp;gt; e2.func1());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. 同步一个方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public synchronized void func () {
    // ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它和同步代码块一样，作用于同一个对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 同步一个类&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void func() {
    synchronized (SynchronizedExample.class) {
        // ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class SynchronizedExample {

    public void func2() {
        synchronized (SynchronizedExample.class) {
            for (int i = 0; i &amp;lt; 10; i++) {
                System.out.print(i + &quot; &quot;);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. 同步一个静态方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public synchronized static void fun() {
    // ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;作用于整个类。&lt;/p&gt;
&lt;h2 id=&quot;四优化&quot;&gt;四、优化&lt;/h2&gt;
&lt;p&gt;这里的锁优化主要是指虚拟机对 synchronized 的优化。&lt;/p&gt;
&lt;h3 id=&quot;自旋锁&quot;&gt;1.自旋锁&lt;/h3&gt;
&lt;p&gt;互斥同步的进入阻塞状态的开销都很大，应该尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。&lt;/p&gt;
&lt;p&gt;自选锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于共享数据的锁定状态很短的场景。&lt;/p&gt;
&lt;p&gt;在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。&lt;/p&gt;
&lt;h3 id=&quot;锁消除&quot;&gt;2.锁消除&lt;/h3&gt;
&lt;p&gt;锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。&lt;/p&gt;
&lt;p&gt;锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。&lt;/p&gt;
&lt;p&gt;对于一些看起来没有加锁的代码，其实隐式的加了很多锁。例如下面的字符串拼接代码就隐式加了锁：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static String concatString(String s1, String s2, String s3) {
    return s1 + s2 + s3;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;String 是一个不可变的类，编译器会对 String 的拼接自动优化。在 JDK 1.5 之前，会转化为 StringBuffer 对象的连续 append() 操作：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static String concatString(String s1, String s2, String s3) {
    StringBuffer sb = new StringBuffer();
    sb.append(s1);
    sb.append(s2);
    sb.append(s3);
    return sb.toString();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;每个 append() 方法中都有一个同步块。虚拟机观察变量 sb，很快就会发现它的动态作用域被限制在 concatString() 方法内部。也就是说，sb 的所有引用永远不会“逃逸”到 concatString() 方法之外，其他线程无法访问到它，因此可以进行消除。&lt;/p&gt;
&lt;h3 id=&quot;锁粗化&quot;&gt;3.锁粗化&lt;/h3&gt;
&lt;p&gt;如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。&lt;/p&gt;
&lt;p&gt;上一节的示例代码中连续的 append() 方法就属于这类情况。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。对于上一节的示例代码就是扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，这样只需要加锁一次就可以了。&lt;/p&gt;
&lt;h3 id=&quot;轻量级锁&quot;&gt;4.轻量级锁&lt;/h3&gt;
&lt;p&gt;JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。&lt;/p&gt;
&lt;p&gt;以下是 HotSpot 虚拟机对象头的内存布局，这些数据被称为 mark word。其中 tag bits 对应了五个状态，这些状态在右侧的 state 表格中给出，应该注意的是 state 表格不是存储在对象头中的。除了 marked for gc 状态，其它四个状态已经在前面介绍过了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513801/201811/1513801-20181112225524888-1002884409.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下图左侧是一个线程的虚拟机栈，其中有一部分称为 Lock Record 的区域，这是在轻量级锁运行过程创建的，用于存放锁对象的 Mark Word。而右侧就是一个锁对象，包含了 Mark Word 和其它信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513801/201811/1513801-20181112225535995-626801553.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;轻量级锁是相对于传统的重量级锁而言，它使用 CAS 操作来避免重量级锁使用互斥量的开销。对于绝大部分的锁，在整个同步周期内都是不存在竞争的，因此也就不需要都使用互斥量进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了再改用互斥量进行同步。&lt;/p&gt;
&lt;p&gt;当尝试获取一个锁对象时，如果锁对象标记为 0 01，说明锁对象的锁未锁定（unlocked）状态。此时虚拟机在当前线程栈中创建 Lock Record，然后使用 CAS 操作将对象的 Mark Word 更新为 Lock Record 指针。如果 CAS 操作成功了，那么线程就获取了该对象上的锁，并且对象的 Mark Word 的锁标记变为 00，表示该对象处于轻量级锁状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513801/201811/1513801-20181112225547985-1119977609.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果 CAS 操作失败了，虚拟机首先会检查对象的 Mark Word 是否指向当前线程的虚拟机栈，如果是的话说明当前线程已经拥有了这个锁对象，那就可以直接进入同步块继续执行，否则说明这个锁对象已经被其他线程线程抢占了。如果有两条以上的线程争用同一个锁，那轻量级锁就不再有效，要膨胀为重量级锁。&lt;/p&gt;
&lt;h3 id=&quot;偏向锁&quot;&gt;5.偏向锁&lt;/h3&gt;
&lt;p&gt;偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。&lt;/p&gt;
&lt;p&gt;当锁对象第一次被线程获得的时候，进入偏向状态，标记为 1 01。同时使用 CAS 操作将线程 ID 记录到 Mark Word 中，如果 CAS 操作成功，这个线程以后每次进入这个锁相关的同步块就不需要再进行任何同步操作。&lt;/p&gt;
&lt;p&gt;当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（Revoke Bias）后恢复到未锁定状态或者轻量级锁状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513801/201811/1513801-20181112225559515-1190198114.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;五和其他锁比较&quot;&gt;五、和其他锁比较&lt;/h2&gt;
&lt;h3 id=&quot;volatile和synchronized的区别&quot;&gt;1.volatile和synchronized的区别&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。&lt;/li&gt;
&lt;li&gt;volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的&lt;/li&gt;
&lt;li&gt;volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性&lt;/li&gt;
&lt;li&gt;volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。&lt;/li&gt;
&lt;li&gt;volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;synchronized-和-reentrantlock-比较&quot;&gt;2.synchronized 和 ReentrantLock 比较&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 锁的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等。目前来看它和 ReentrantLock 的性能基本持平了，因此性能因素不再是选择 ReentrantLock 的理由。synchronized 有更大的性能优化空间，应该优先考虑 synchronized。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ReentrantLock 多了一些高级功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 使用选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;参考 ：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CyC2018/CS-Notes&quot; class=&quot;uri&quot;&gt;https://github.com/CyC2018/CS-Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上优秀博客（自己以前笔记整理）&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1513801/201811/1513801-20181112225825784-1824772415.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Nov 2018 14:56:00 +0000</pubDate>
<dc:creator>辰砂tj</dc:creator>
<og:description>title: synchronized解析 tags: java 锁 author: 辰砂 一、总体概述图 二、实现原理 monitorenter： 每个对象有一个monitor，即监视器，当且仅当m</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tojian/p/9949767.html</dc:identifier>
</item>
<item>
<title>用canvas实现红心飘飘的动画效果 - nobody-junior</title>
<link>http://www.cnblogs.com/imgss/p/9949401.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imgss/p/9949401.html</guid>
<description>&lt;p&gt;两周前，项目里需要实现一个红心飘飘的点赞效果。抓耳挠腮了老半天，看了几篇大佬的文章，终于算是摸了个七七八八。不禁长叹一声，还是菜啊。先来看一下效果:(&lt;a href=&quot;https://imgss.github.io/demo/11.11/&quot;&gt;传送门进去点一波&lt;/a&gt;)&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1016471/201811/1016471-20181112222419915-1235328587.gif&quot; alt=&quot;kiss.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;一bezier曲线运动轨迹&quot;&gt;一、Bezier曲线运动轨迹&lt;/h3&gt;
&lt;p&gt;其实用大白话描述一下需求就是让一个红心图片沿着贝塞尔曲线的轨迹走，然后边走边消失。核心在于得到贝塞尔曲线上的一系列点。本文不会讲解贝塞尔曲线的原理，因为大佬们已经讲过了，而且讲的比我好。参考文章如下：&lt;/p&gt;
&lt;p&gt;其中第二篇文章讲到了生成二阶和三阶贝塞尔曲线可以使用canvas自带的方法：&lt;code&gt;quadraticCurveTo&lt;/code&gt;和&lt;code&gt;bezierCurveTo&lt;/code&gt;,而高阶的则先得到曲线上一系列的点，然后顺次连接这些点来拟合高阶的贝塞尔曲线。没错，我们要的就是这一系列的点，有了这些点，就可以控制红心的轨迹了。下面是我基于作者的BezierMarker.js写的一个demo,可以直观地看出高阶贝塞尔曲线上的点：&lt;/p&gt;
&lt;p&gt;上面100个曲线上的点坐标是由下面这段代码计算得出的：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;BezierMaker.prototype.bezier = function(t) { //贝塞尔公式调用
    var x = 0,
        y = 0,
        bezierCtrlNodesArr = this.bezierCtrlNodesArr,
        n = bezierCtrlNodesArr.length - 1,
        self = this
    bezierCtrlNodesArr.forEach(function(item, index) {
        if(!index) {
            x += item.x * Math.pow(( 1 - t ), n - index) * Math.pow(t, index) 
            y += item.y * Math.pow(( 1 - t ), n - index) * Math.pow(t, index) 
        } else {
            x += self.factorial(n) / self.factorial(index) / self.factorial(n - index) * item.x * Math.pow(( 1 - t ), n - index) * Math.pow(t, index) 
            y += self.factorial(n) / self.factorial(index) / self.factorial(n - index) * item.y * Math.pow(( 1 - t ), n - index) * Math.pow(t, index) 
        }
    })
    return {
        x: x,
        y: y
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法就是对贝塞尔公式的实现。以3阶贝塞尔公式为例(见下图)，它的方程需要四个控制点(P1,P2,P3,P4)和一个t值，就能计算出曲线上的某一点的坐标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?%7B%5Cmathbf%20%7BB%7D%7D%28t%29%3D%7B%5Cmathbf%20%7BP%7D%7D_%7B0%7D%281-t%29%5E%7B3%7D+3%7B%5Cmathbf%20%7BP%7D%7D_%7B1%7Dt%281-t%29%5E%7B2%7D+3%7B%5Cmathbf%20%7BP%7D%7D_%7B2%7Dt%5E%7B2%7D%281-t%29+%7B%5Cmathbf%20%7BP%7D%7D_%7B3%7Dt%5E%7B3%7D%7B%5Cmbox%7B%20%2C%20%7D%7Dt%5Cin%20%5B0%2C1%5D%25u3002&quot;/&gt;&lt;br/&gt;根据给定的&lt;code&gt;t&lt;/code&gt;值，结合控制点的坐标，算出相应&lt;code&gt;t&lt;/code&gt;值下的贝塞尔曲线上的点的坐标。拿下图(来自第一篇文章)来说，给定&lt;code&gt;t&lt;/code&gt;值为0.25,就可以得到B点的坐标&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.mukewang.com/5a5586280001d25202400100.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当将&lt;code&gt;t&lt;/code&gt;由0递增到1时，就可以得到100个曲线上的点，进而拟合出相应的曲线。当我们拿到这一系列点时，其实问题已经解决了一大半了。&lt;/p&gt;
&lt;h3 id=&quot;二使红心飘起来&quot;&gt;二、使红心飘起来&lt;/h3&gt;
&lt;p&gt;拿到拟合点数组后，绘制轨迹就是从数组中依次拿出坐标，并将红心图片绘制到相应的坐标上。并根据当前拟合点在曲线数组中的位置，改变图片的不透明度，就可以让红心飘起来了，上一部分代码，讲解见注释：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 生成随机数
function rnd () {
  let flag = Math.random() &amp;gt; 0.5 ? 1 : -1
  return 80 * Math.random() * flag
}

class FlyHeart {
  constructor (ctx, img) {
    this.ctx = ctx;
    this.img = heart;
    // 拿到红心的运动轨迹，一系列拟合点坐标
    this.bezierArr = new BezierMaker(ctx, [
      {x: 187, y: 245},
      {x: 170 + rnd(), y: 200},
      {x: 200 + rnd() , y: 120}, 
      {x: 140 + rnd(), y: 60}], 90).bezierArr //90表示拟合点的数量，rnd使红心的轨迹有一定的随机性
  }
  draw () {
    // 依次取出轨迹的每个点
    let position = this.bezierArr.shift();
    
    // 清除上次画的
    this.clear();
    
    if (position) {
      this.ctx.save()
      // 根据当前数组长度算出透明度
      this.ctx.globalAlpha = this.bezierArr.length / 30;
      this.ctx.drawImage(this.img, position.x , position.y, 20, 20);
      this.ctx.restore();
      this.prevPosition = position;
    }
  }
  // 清除上次画的
  clear () {
    if (this.prevPosition) {
      this.ctx.clearRect(this.prevPosition.x, this.prevPosition.y, 20, 20);
    }
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就是给body添加点击事件，当点击时，就新生成一个红心：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;  document.body.addEventListener('click', function() {
    heartArr.push(new FlyHeart(ctx, heart));
  })
  
  let heartArr = []
  const cvs = document.getElementById('cvs')
  const ctx = cvs.getContext('2d')
  const heart = document.getElementById('heart') //图片
  
  function draw () {
    if(heartArr.length) {
      for(let heart of heartArr) {
        heart.draw();
        if(heart.bezierArr.length === 0) {
          heart.clear();
          let index = heartArr.indexOf(heart)
          heartArr.splice(index, 1)
        }
      }
    }
    requestAnimationFrame(draw)
  }
  draw()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;三后记&quot;&gt;三、后记&lt;/h3&gt;
&lt;p&gt;当时看到这个需求的时候，真的是一筹莫展，看到n阶贝塞尔曲线时更是一头雾水，但是看不懂也要看，然后看着看着，看多了也就慢慢明白了。希望没浪费大家的时间，各位看官看完后有所收获（完）&lt;/p&gt;
</description>
<pubDate>Mon, 12 Nov 2018 14:54:00 +0000</pubDate>
<dc:creator>nobody-junior</dc:creator>
<og:description>两周前，项目里需要实现一个红心飘飘的点赞效果。抓耳挠腮了老半天，看了几篇大佬的文章，终于算是摸了个七七八八。不禁长叹一声，还是菜啊。先来看一下效果:(</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imgss/p/9949401.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core中使用GraphQL - 第八章  在GraphQL中处理一对多关系 - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/9949559.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/9949559.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201811/65831-20181112222346724-1486350176.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core中使用GraphQL - 目录&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;到目前为止我们一直在使用GraphQL操作单个实体。在本篇博文中，我们将使用GraphQL操作实体集合。&lt;/p&gt;
&lt;p&gt;这里我们使用的场景是处理一个顾客的所有订单，顾客和订单之间的关系是一对多。一个顾客可以有多个订单，相应的一个订单只属于一个顾客。&lt;/p&gt;
&lt;h3 id=&quot;数据库修改&quot;&gt;数据库修改&lt;/h3&gt;
&lt;p&gt;下面我们首先创建2个新的类&lt;code&gt;Customer&lt;/code&gt;和&lt;code&gt;Order&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;customer&quot;&gt;Customer&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Customer
{
    public int CustomerId { get; set; }
    public string Name { get; set; }
    public string BillingAddress { get; set; }
    public IEnumerable&amp;lt;Order&amp;gt; Orders { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;order&quot;&gt;Order&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Order
{
    public int OrderId { get; set; }
    public string Tag { get; set; }
    public DateTime CreatedAt { get; set; }

    public Customer Customer { get; set; }
    public int CustomerId { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们修改&lt;code&gt;ApplicationDbContext&lt;/code&gt;类，在&lt;code&gt;OnModelCreating&lt;/code&gt;配置一下表的主外键。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;modelBuilder.Entity&amp;lt;Customer&amp;gt;()
    .HasKey(p =&amp;gt; p.CustomerId);
modelBuilder.Entity&amp;lt;Customer&amp;gt;().HasMany(p =&amp;gt; p.Orders)
    .WithOne()
    .HasForeignKey(p =&amp;gt; p.CustomerId);

modelBuilder.Entity&amp;lt;Order&amp;gt;().HasKey(p =&amp;gt; p.OrderId);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后我们使用如下命令创建迁移并更新数据库&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dotnet ef migrations add OneToManyRelationship  
dotnet ef database update &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此数据库修改完成。&lt;/p&gt;
&lt;h3 id=&quot;添加graphql代码&quot;&gt;添加GraphQL代码&lt;/h3&gt;
&lt;p&gt;下面我们需要添加GraphQL针对&lt;code&gt;Customer&lt;/code&gt;和&lt;code&gt;Order&lt;/code&gt;表的字段配置。&lt;/p&gt;
&lt;h5 id=&quot;ordertype&quot;&gt;OrderType&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class OrderType: ObjectGraphType &amp;lt;Order&amp;gt; {  
    public OrderType(IDataStore dataStore) {
        Field(o =&amp;gt; o.Tag);
        Field(o =&amp;gt; o.CreatedAt);
        Field &amp;lt;CustomerType, Customer&amp;gt; ()
            .Name(&quot;Customer&quot;)
            .ResolveAsync(ctx =&amp;gt; {
                return dataStore.GetCustomerByIdAsync(ctx.Source.CustomerId);
            });
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;customertype.cs&quot;&gt;CustomerType.cs&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class CustomerType: ObjectGraphType &amp;lt;Customer&amp;gt; {  
    public CustomerType(IDataStore dataStore) {
        Field(c =&amp;gt; c.Name);
        Field(c =&amp;gt; c.BillingAddress);
        Field &amp;lt;ListGraphType&amp;lt;OrderType&amp;gt; , IEnumerable&amp;lt;Order&amp;gt;&amp;gt; ()
            .Name(&quot;Orders&quot;)
            .ResolveAsync(ctx =&amp;gt; {
                return dataStore.GetOrdersByCustomerIdAsync(ctx.Source.CustomerId);
            });
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了查询所有的顾客和订单，我们还需要暴露出2个新的节点。所以我们修改在&lt;code&gt;InventoryQuery&lt;/code&gt;构造函数中添加如下代码：&lt;/p&gt;
&lt;h5 id=&quot;inventoryquery&quot;&gt;InventoryQuery&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;Field&amp;lt;ListGraphType&amp;lt;OrderType&amp;gt;, IEnumerable&amp;lt;Order&amp;gt;&amp;gt;()  
    .Name(&quot;Orders&quot;)
    .ResolveAsync(ctx =&amp;gt;
    {
        return dataStore.GetOrdersAsync();
    });

Field&amp;lt;ListGraphType&amp;lt;CustomerType&amp;gt;, IEnumerable&amp;lt;Customer&amp;gt;&amp;gt;()  
    .Name(&quot;Customers&quot;)
    .ResolveAsync(ctx =&amp;gt;
    {
        return dataStore.GetCustomersAsync();
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们需要在&lt;code&gt;IDataStore&lt;/code&gt;中定义6个新的方法，并在&lt;code&gt;DataStore&lt;/code&gt;中实现它们。&lt;/p&gt;
&lt;h5 id=&quot;idatastore&quot;&gt;IDataStore&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;Order&amp;gt;&amp;gt; GetOrdersAsync();

Task&amp;lt;IEnumerable&amp;lt;Customer&amp;gt;&amp;gt; GetCustomersAsync();

Task&amp;lt;Customer&amp;gt; GetCustomerByIdAsync(int customerId);

Task&amp;lt;IEnumerable&amp;lt;Order&amp;gt;&amp;gt; GetOrdersByCustomerIdAsync(int customerId);

Task&amp;lt;Order&amp;gt; AddOrderAsync(Order order);

Task&amp;lt;Customer&amp;gt; AddCustomerAsync(Customer customer);&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;datastore&quot;&gt;DataStore&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public async Task&amp;lt;IEnumerable&amp;lt;Order&amp;gt;&amp;gt; GetOrdersAsync()
{
    return await _context.Orders
        .AsNoTracking()
        .ToListAsync();
}

public async Task&amp;lt;IEnumerable&amp;lt;Customer&amp;gt;&amp;gt; GetCustomersAsync()
{
    return await _context.Customers
        .AsNoTracking()
        .ToListAsync();
}

public async Task&amp;lt;Customer&amp;gt; GetCustomerByIdAsync(int customerId)
{
    return await _context.Customers
        .FindAsync(customerId);
}

public async Task&amp;lt;IEnumerable&amp;lt;Order&amp;gt;&amp;gt; GetOrdersByCustomerIdAsync(int customerId)
{
    return await _context.Orders
        .Where(o =&amp;gt; o.CustomerId == customerId)
        .ToListAsync();
}

public async Task&amp;lt;Order&amp;gt; AddOrderAsync(Order order)  
{
    var addedOrder = await _context.Orders.AddAsync(order);
    await _context.SaveChangesAsync();
    return addedOrder.Entity;
}

public async Task&amp;lt;Customer&amp;gt; AddCustomerAsync(Customer customer)  
{         
    var addedCustomer = await _context.Customers.AddAsync(customer);
    await _context.SaveChangesAsync();
    return addedCustomer.Entity;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加完以上代码之后，我们就需要定义添加订单和顾客的输入类型了。还记得在上一章中我们如何添加货物的么？我们添加了一个&lt;code&gt;ItemInputType&lt;/code&gt;类，定义了添加货物需要收集的字段，所以这里同理，我们也需要为订单和顾客定义对应的&lt;code&gt;InputObjectGraphType&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;orderinputtype&quot;&gt;OrderInputType&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class OrderInputType : InputObjectGraphType {  
    public OrderInputType()
    {
        Name = &quot;OrderInput&quot;;
        Field&amp;lt;NonNullGraphType&amp;lt;StringGraphType&amp;gt;&amp;gt;(&quot;tag&quot;);
        Field&amp;lt;NonNullGraphType&amp;lt;DateGraphType&amp;gt;&amp;gt;(&quot;createdAt&quot;);
        Field&amp;lt;NonNullGraphType&amp;lt;IntGraphType&amp;gt;&amp;gt;(&quot;customerId&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;customerinputtype&quot;&gt;CustomerInputType&lt;/h5&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class CustomerInputType : InputObjectGraphType {  
    public CustomerInputType()
    {
        Name = &quot;CustomerInput&quot;;
        Field&amp;lt;NonNullGraphType&amp;lt;StringGraphType&amp;gt;&amp;gt;(&quot;name&quot;);
        Field&amp;lt;NonNullGraphType&amp;lt;StringGraphType&amp;gt;&amp;gt;(&quot;billingAddress&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当前添加以上代码之后，我们还需要在&lt;code&gt;Startup&lt;/code&gt;类中注册这几个新类型&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)  
{ 
    ....
    ....
    services.AddScoped&amp;lt;CustomerType&amp;gt;();
    services.AddScoped&amp;lt;CustomerInputType&amp;gt;();
    services.AddScoped&amp;lt;OrderType&amp;gt;();
    services.AddScoped&amp;lt;OrderInputType&amp;gt;();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果现在启动项目，你会得到以下错误&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Failed to call Activator.CreateInstance. Type: chapter1.OrderType&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的问题是在&lt;code&gt;InventorySchema&lt;/code&gt;构造函数中的注入没起作用, 原因是&lt;code&gt;GraphQL&lt;/code&gt;在解决依赖的时候，只能处理一层, 这里&lt;code&gt;OrderType&lt;/code&gt;和&lt;code&gt;CustomerType&lt;/code&gt;是2层的关系。如果想解决这个问题，我们需要在&lt;code&gt;Startup&lt;/code&gt;中再注册一个依赖解决器。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.AddScoped&amp;lt;IDependencyResolver&amp;gt;(s =&amp;gt; 
    new FuncDependencyResolver(s.GetRequiredService));  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改完成之后我们还需要修改&lt;code&gt;InventorySchema&lt;/code&gt;, 在构造函数中将依赖解决器注入。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class InventorySchema: Schema {  
    public InventorySchema(IDependencyResolver resolver): base(resolver) {
        Query = resolver.Resolve&amp;lt;InventoryQuery&amp;gt;();
        Mutation = resolver.Resolve&amp;lt;InventoryMutation&amp;gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在再次启动项目，程序不报错了。&lt;/p&gt;
&lt;h3 id=&quot;最终效果&quot;&gt;最终效果&lt;/h3&gt;
&lt;p&gt;下面我们首先创建一个&lt;code&gt;Customer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201811/65831-20181112222412988-549830715.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们继续创建2个&lt;code&gt;Order&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201811/65831-20181112222419160-1458276502.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201811/65831-20181112222423456-1834692302.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后我们来查询一下刚才创建的数据是否存在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201811/65831-20181112222429836-2075628975.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据读取正确，这说明我们的数据添加成功了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lamondlu/GraphQL_Blogs/tree/master/Part%20VIII&quot;&gt;本文源代码： https://github.com/lamondlu/GraphQL_Blogs/tree/master/Part%20VIII&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Nov 2018 14:25:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<og:description>到目前为止我们一直在使用GraphQL操作单个实体。在本篇博文中，我们将使用GraphQL操作实体集合。这里我们使用的场景是处理一个顾客的所有订单，顾客和订单之间的关系是一对多。一个顾客可以有多个订单</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/9949559.html</dc:identifier>
</item>
<item>
<title>架构必经之路2 - 熔断机制 - jackson0714</title>
<link>http://www.cnblogs.com/jackson0714/p/Architecture2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jackson0714/p/Architecture2.html</guid>
<description>
&lt;div class=&quot;entrylistPostSummary&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;c_b_p_desc&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;项目中要做一个熔断机制，预防对第三方的接口调用压力太大。下面我介绍下项目中用到的熔断机制。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;1.熔断检测机制&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/414640/201811/414640-20181112205608845-1010708609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）请求call到backend后，首先判断熔断开关是否打开&lt;/p&gt;
&lt;p&gt;（2）如果熔断开关已打开，则表明当前请求不能被处理&lt;/p&gt;
&lt;p&gt;（3）如果熔断开关未打开，则判断时间窗口（判断统计错误率）是否已满&lt;/p&gt;
&lt;p&gt;（4）如果时间窗口（判断统计错误率）未满，则请求桶（redis) 中的请求数加1&lt;/p&gt;
&lt;p&gt;（5）如果返回的response 有异常，则失败桶（redis) 的失败数加1，如果返回的response没有异常，则成功桶（redis) 的成功数加1&lt;/p&gt;
&lt;p&gt;（6）如果时间窗口（判断统计错误率）已满，则开始判断是否需要熔断&lt;/p&gt;
&lt;h2&gt; 2.熔断算法&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/414640/201811/414640-20181112201704354-1097363952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;充要条件：&lt;/p&gt;
&lt;p&gt;（1）请求总数 &amp;gt; 设定值X&lt;/p&gt;
&lt;p&gt;（2）失败率 &amp;gt; 设定值Y&lt;/p&gt;
&lt;p&gt;请求总数可以从请求桶redis 中获取到&lt;/p&gt;
&lt;p&gt;失败率 = 失败数 ÷ 请求数 × 100%&lt;/p&gt;
&lt;p&gt;当请求总数大于一定值，且失败率大于一定值时，则表示请求失败数太多了，需要熔断API请求&lt;/p&gt;
&lt;h2&gt;3.统计失败率的时间窗口&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/414640/201811/414640-20181112201137366-1930217189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （1）每次请求，都会判断时间窗口是否已满（如5分钟），如果时间窗口已满，则重新开始计时，且清理请求数/成功数/失败数&lt;/p&gt;
&lt;p&gt; （2）第一次开始的起始时间默认为当前时间。&lt;/p&gt;
&lt;h2&gt;4.熔断持续时间&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/414640/201810/414640-20181029195005331-75025845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）如果出现问题，可以将所有请求链路熔断掉，熔断恢复时间可以假定为1分钟，可以根据不同的环境进行调整&lt;/p&gt;
&lt;p&gt;（2）熔断恢复时间没有根据环境来进行动态调整，比如网络差的时候，持续了很长时间网络都很差，这个时候，可以动态递增熔断时间&lt;/p&gt;
&lt;h2&gt;5.手动熔断&lt;/h2&gt;
&lt;p&gt;因为熔断是通过统计单位时间内的失败率来判断是否需要熔断的，而有时候我们需要快速切断请求链路，比如充值请求量太大的时候，导致很多订单都被退款，这个时候我们可以先熔断获取套餐接口，这样用户就拿不到套餐，就不能充值了。&lt;/p&gt;
&lt;h2&gt;6.总熔断检测开关&lt;/h2&gt;
&lt;p&gt;有时候我们不需要熔断检测，这个时候我们就需要一个总开关，打开总开关，则进行熔断检测，关闭总开关，则不进行熔断检测。&lt;/p&gt;
&lt;h2&gt;7.查看当前熔断的状态&lt;/h2&gt;
&lt;p&gt;我们做了熔断检测，但是需要check下是否work了，可以check下以下参数&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/414640/201811/414640-20181112204243481-857589079.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;line&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span class=&quot;html-tag&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;line&quot;&gt;&lt;span class=&quot;html-tag&quot;&gt;8.还有哪些可以优化的？有哪些不足？以及您是否遇到熔断的坑？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;html-tag&quot;&gt;欢迎留言一起探讨熔断机制~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;MySignature&quot; readability=&quot;9.030303030303&quot;&gt;
&lt;p&gt;&lt;br/&gt;作　　者：&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/jackson0714/&quot; target=&quot;_blank&quot;&gt;Jackson0714&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;出　　处：&lt;a href=&quot;http://www.cnblogs.com/jackson0714/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/jackson0714/&lt;/a&gt;&lt;br/&gt;关于作者：专注于微软平台的项目开发。如有问题或建议，请多多赐教！&lt;br/&gt;版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;br/&gt;特此声明：所有评论和私信都会在第一时间回复。也欢迎园子的大大们指正错误，共同进步。或者&lt;a href=&quot;http://msg.cnblogs.com/msg/send/jackson0714&quot;&gt;直接私信&lt;/a&gt;我&lt;br/&gt;声援博主：如果您觉得文章对您有帮助，可以点击文章右下角&lt;strong&gt;&lt;span&gt;【&lt;a id=&quot;post-up&quot; onclick=&quot;votePost(5111347,'Digg')&quot; href=&quot;javascript:void(0);&quot;&gt;推荐&lt;/a&gt;】&lt;/span&gt;&lt;/strong&gt;一下。您的鼓励是作者坚持原创和持续写作的最大动力！&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 12 Nov 2018 13:03:00 +0000</pubDate>
<dc:creator>jackson0714</dc:creator>
<og:description>架构之旅1 - 扣减库存 架构之旅2 - 熔断机制 项目中要做一个熔断机制，预防对第三方的接口调用压力太大。下面我介绍下项目中用到的熔断机制。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jackson0714/p/Architecture2.html</dc:identifier>
</item>
</channel>
</rss>