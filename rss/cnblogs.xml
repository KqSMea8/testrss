<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Chromium CEF 2623 -- 支持 xp 的最后一个版本源码下载和编译步骤 - hejiangyuan</title>
<link>http://www.cnblogs.com/luckbird/p/CEF_2623_Compile.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luckbird/p/CEF_2623_Compile.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;因为项目需要在客户端中内嵌浏览器，需要支持 xp 操作系统和播放视频，但 CEF 2623 以后的版本已经不支持 xp 操作系统，也不再提供 2623 版本的二进制发布包下载，只好自己手动编译。编译结果要求达到：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可以在 xp 及以上操作系统运行&lt;/li&gt;
&lt;li&gt;可以播放 mp4 视频&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在参考了很多文档，反复尝试很多次以后，终于编译成功并在项目中投入使用了。&lt;/p&gt;
&lt;p&gt;因为直接从 CEF 代码库 2623 分支获取的代码编译会报错，需要进行多处修改才能编译成功。 这里把修改好的源码分享出来，只要根据下面的操作步骤配置编译环境，下载解压源代码直接编译应该就可以成功。&lt;/p&gt;
&lt;p&gt;总的操作步骤是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;安装编译环境&lt;/li&gt;
&lt;li&gt;下载源码压缩包解压&lt;/li&gt;
&lt;li&gt;编译得到 CEF 的二进制发布包&lt;/li&gt;
&lt;li&gt;有了二进制发布包以后，就可以再轻松的编译各种版本的 dll（各种版本 vs, x86, 64, 静态, 动态）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;安装编译环境&quot;&gt;安装编译环境：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;OS: Win7 64bit 以上系统, 至少8G内存，60G以上硬盘，最好是SSD&lt;/li&gt;
&lt;li&gt;Visual Studio: VS2015u3 + Win10.0.14393 SDK + Ninja&lt;/li&gt;
&lt;li&gt;Python 2.7+&lt;/li&gt;
&lt;li&gt;安装VS2015u3的时候，默认是不会安装Win10.0.14393 SDK的，需要手动勾选；&lt;/li&gt;
&lt;li&gt;安装python后需要将python的执行环境加入到环境变量中；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;下载源码&quot;&gt;下载源码&lt;/h2&gt;
&lt;h2 id=&quot;编译&quot;&gt;编译&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;编译前需要保证磁盘空间至少 60G 的可用空间，最后编译完我用了 54.8G(而且只是编译 Release)如果 Release 和 Debug 同时编译，可能需要准备 120G 的空间&lt;/li&gt;
&lt;li&gt;编辑 E:\cef\automate\build_cef_2623.bat 文件，根据需要编译的版本（Releae 或 Debug），打开或屏蔽相应的行，然后保存&lt;/li&gt;
&lt;li&gt;进入命令行模式，切换到 E:\cef\automate 目录， 执行 build_cef_2623.bat 即开始编译&lt;/li&gt;
&lt;li&gt;编译大概需要 4 个小时，编译过程中大部分时间，命令行窗口不会有变化，详细日志会写入 E:\cef\2623 文件夹，Release 版本大概日志写到 400 M 就快编译完了&lt;/li&gt;
&lt;li&gt;编译完成后的二进制发布包在 E:\cef\2623\chromium\src\cef\binary_distrib 文件夹可以找到&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;根据二进制发布包编译-dll&quot;&gt;根据二进制发布包编译 dll&lt;/h2&gt;
&lt;p&gt;后续会把 vs2015 x86 环境下编译好的动态库 dll 发上来，如果你用的也是 vs2015 x86 可以直接使用&lt;/p&gt;
&lt;p&gt;如果有问题可以加 QQ 群讨论，群号：599320555&lt;/p&gt;
&lt;p&gt;转载请注明来自博客园 TerryHe 的微博 &lt;a href=&quot;https://www.cnblogs.com/luckbird/p/CEF_2623_Compile.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/luckbird/p/CEF_2623_Compile.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;几篇参考文档&quot;&gt;几篇参考文档&lt;/h2&gt;
</description>
<pubDate>Tue, 07 Aug 2018 15:52:00 +0000</pubDate>
<dc:creator>hejiangyuan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luckbird/p/CEF_2623_Compile.html</dc:identifier>
</item>
<item>
<title>JAVAEE——宜立方商城13：订单系统实现、订单生成、Mycat数据库分片 - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/9440242.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/9440242.html</guid>
<description>&lt;p&gt;1、订单系统实现&lt;/p&gt;
&lt;p&gt;2、订单生成&lt;/p&gt;
&lt;p&gt;3、Mycat数据库分片&lt;/p&gt;


&lt;h2&gt;2.1. 功能分析&lt;/h2&gt;
&lt;p&gt;1、&lt;span&gt;在购物车页面点击&lt;/span&gt;“去结算”按钮，跳转到订单确认页面&lt;/p&gt;
&lt;p&gt;a) 必须要求用户登录&lt;/p&gt;
&lt;p&gt;b) 使用拦截器实现。&lt;/p&gt;
&lt;p&gt;c) 如果用户未登录跳转到登录页面。&lt;/p&gt;
&lt;p&gt;d) 如果用户已经登录，放行。展示确认页面。&lt;/p&gt;
&lt;p&gt;e) &lt;span&gt;判断&lt;/span&gt;cookie&lt;span&gt;中是否有购物车数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;f) 如果有同步到服务端。&lt;/p&gt;
&lt;p&gt;2、订单确认页面中选择收货地址，选择支付方式，确认商品列表。&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;根据用户&lt;/span&gt;id&lt;span&gt;查询收货地址列表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) 展示支付方式列表。&lt;/p&gt;
&lt;p&gt;c) 从购物车中取商品列表，从服务端取购物车列表。&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;订单确认页面点击&lt;/span&gt;“提交”，生成订单。&lt;/p&gt;
&lt;p&gt;4、展示订单生成完成，或者跳转到支付页面。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2&gt;2.2. 工程搭建&lt;/h2&gt;
&lt;p&gt;E3-order&lt;/p&gt;
&lt;p&gt;  |--E3-order-interface&lt;span&gt;（&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  |--E3-order-service&lt;span&gt;（&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;E3-order-web&lt;span&gt;（&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.3. 展示订单确认页面&lt;/h2&gt;
&lt;h3&gt;2.3.1. 功能分析&lt;/h3&gt;
&lt;p&gt;1、&lt;span&gt;根据&lt;/span&gt;id&lt;span&gt;查询用户的收货地址列表（使用静态数据）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、从购物车中取商品列表，展示到页面。调用购物车服务查询。&lt;/p&gt;

&lt;h3&gt;2.3.2. Dao&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;直接从&lt;/span&gt;redis&lt;span&gt;中取购车商品列表。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;2.3.3. Service&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;收货地址静态数据，没有&lt;/span&gt;server&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调用购物车的&lt;/span&gt;service&lt;span&gt;查询购物车商品列表。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;2.3.4. Controller&lt;/h3&gt;
&lt;p&gt;引用购物车服务&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232416413-313539393.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232422202-2092165365.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/order/order-cart&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参数：没有参数&lt;/p&gt;
&lt;p&gt;返回值：逻辑视图&lt;/p&gt;

&lt;p&gt;Controller&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderCartController {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CartService cartService;
    
    @RequestMapping(&lt;/span&gt;&quot;/order/order-cart&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String showOrderCart(HttpServletRequest request) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取用户信息&lt;/span&gt;
        TbUser user = (TbUser) request.getAttribute(&quot;user&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取购物车商品列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; cartService.getCartList(user.getId());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把商品列表传递给jsp&lt;/span&gt;
        request.setAttribute(&quot;cartList&quot;&lt;span&gt;, cartList);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回逻辑视图&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;order-cart&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;2.4. 登录拦截器&lt;/span&gt; &lt;/p&gt;
&lt;h3&gt;2.4.1. 功能分析&lt;/h3&gt;
&lt;p&gt;1、&lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中取&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;如果没有取到，没有登录，跳转到&lt;/span&gt;sso&lt;span&gt;系统的登录页面。拦截&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;如果取到&lt;/span&gt;token&lt;span&gt;。判断登录是否过期，需要调用&lt;/span&gt;&lt;span&gt;sso&lt;/span&gt;&lt;span&gt;系统的服务，根据&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;取用户信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、如果没有取到用户信息，登录已经过期，重新登录。跳转到登录页面。拦截&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;如果取到用户信息，用户已经是登录状态，把用户信息保存到&lt;/span&gt;request&lt;span&gt;中。放行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;span&gt;判断&lt;/span&gt;cookie&lt;span&gt;中是否有购物车信息，如果有合并购物车&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;2.4.2. 拦截器实现&lt;/h3&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 用户登录判断拦截器
 * &amp;lt;p&amp;gt;Title: LoginInterceptor&amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;Company: www.itcast.cn&amp;lt;/p&amp;gt; 
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerInterceptor {

    @Value(&lt;/span&gt;&quot;${COOKIE_TOKEN_KEY}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String COOKIE_TOKEN_KEY;
    @Value(&lt;/span&gt;&quot;${COOKIE_CART_KEY}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String COOKIE_CART_KEY;
    @Value(&lt;/span&gt;&quot;${SSO_URL}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String SSO_URL;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CartService cartService;
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、从cookie中取token&lt;/span&gt;
        String token =&lt;span&gt; CookieUtils.getCookieValue(request, COOKIE_TOKEN_KEY);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、如果没有取到，没有登录，跳转到sso系统的登录页面。拦截&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isBlank(token)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转到登录页面&lt;/span&gt;
            response.sendRedirect(SSO_URL + &quot;/page/login?redirect=&quot; +&lt;span&gt; request.getRequestURL());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、如果取到token。判断登录是否过期，需要调用sso系统的服务，根据token取用户信息&lt;/span&gt;
        E3Result e3Result =&lt;span&gt; userService.getUserByToken(token);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、如果没有取到用户信息，登录已经过期，重新登录。跳转到登录页面。拦截&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (e3Result.getStatus() != 200&lt;span&gt;) {
            response.sendRedirect(SSO_URL &lt;/span&gt;+ &quot;/page/login?redirect=&quot; +&lt;span&gt; request.getRequestURL());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、如果取到用户信息，用户已经是登录状态，把用户信息保存到request中。放行&lt;/span&gt;
        TbUser user =&lt;span&gt; (TbUser) e3Result.getData();
        request.setAttribute(&lt;/span&gt;&quot;user&quot;&lt;span&gt;, user);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、判断cookie中是否有购物车信息，如果有合并购物车&lt;/span&gt;
        String json = CookieUtils.getCookieValue(request, COOKIE_CART_KEY, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(json)) {
            cartService.mergeCart(user.getId(), JsonUtils.jsonToList(json, TbItem.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除cookie中的购物车数据&lt;/span&gt;
            CookieUtils.setCookie(request, response, COOKIE_CART_KEY, &quot;&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;放行&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;2.4.3. Springmvc&lt;/span&gt;&lt;span&gt;配置&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 拦截器配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.e3mall.order.interceptor.LoginInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.4.4. &lt;span&gt;实现&lt;/span&gt;sso&lt;span&gt;系统的回调&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232510825-481994230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.5. 提交订单&lt;/h2&gt;
&lt;h3&gt;2.5.1. 功能分析&lt;/h3&gt;
&lt;p&gt;1、&lt;span&gt;在订单确认页面点击&lt;/span&gt;“提交订单”按钮生成订单。&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/order/create&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、参数：提交的是表单的数据。保存的数据：订单、订单明细、配送地址。&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;向&lt;/span&gt;tb_order&lt;span&gt;中插入记录。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;订单号需要手动生成。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;要求订单号不能重复。&lt;/p&gt;
&lt;p&gt;订单号可读性号。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以使用&lt;/span&gt;redis&lt;span&gt;的&lt;/span&gt;&lt;span&gt;incr&lt;/span&gt;&lt;span&gt;命令生成订单号。订单号需要一个初始值。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Payment&lt;span&gt;：表单数据&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;payment_type&lt;span&gt;：表单数据&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;user_id&lt;span&gt;：用户信息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;buyer_nick&lt;span&gt;：用户名&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;其他字段&lt;/span&gt;null&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;b) &lt;span&gt;向&lt;/span&gt;tb_order_item&lt;span&gt;订单明细表插入数据。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Id&lt;span&gt;：使用&lt;/span&gt;&lt;span&gt;incr&lt;/span&gt;&lt;span&gt;生成&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;order_id&lt;span&gt;：生成的订单号&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;其他的都是表单中的数据。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;c) tb_order_shipping&lt;span&gt;，订单配送信息&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;order_id&lt;span&gt;：生成的订单号&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;其他字段都是表单中的数据。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;d) &lt;span&gt;使用&lt;/span&gt;pojo&lt;span&gt;接收表单的数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以扩展&lt;/span&gt;TbOrder&lt;span&gt;，在子类中添加两个属性一个是商品明细列表，一个是配送信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把&lt;/span&gt;pojo&lt;span&gt;放到&lt;/span&gt;e3-order-interface&lt;span&gt;工程中。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderInfo &lt;span&gt;extends&lt;/span&gt; TbOrder &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;TbOrderItem&amp;gt;&lt;span&gt; orderItems;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbOrderShipping orderShipping;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;TbOrderItem&amp;gt;&lt;span&gt; getOrderItems() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderItems;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setOrderItems(List&amp;lt;TbOrderItem&amp;gt;&lt;span&gt; orderItems) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.orderItems =&lt;span&gt; orderItems;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TbOrderShipping getOrderShipping() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; orderShipping;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setOrderShipping(TbOrderShipping orderShipping) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.orderShipping =&lt;span&gt; orderShipping;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;业务逻辑： &lt;/p&gt;
&lt;p&gt;1、接收表单的数据&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;生成订单&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;3、向订单表插入数据。&lt;/p&gt;
&lt;p&gt;4、向订单明细表插入数据&lt;/p&gt;
&lt;p&gt;5、向订单物流表插入数据。&lt;/p&gt;
&lt;p&gt;6、返回e3Result&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;返回值：e3Result&lt;/p&gt;

&lt;h3&gt;2.5.2. Dao&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;可以使用逆向工程。&lt;/p&gt;

&lt;h3&gt;2.5.3. Service&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;参数：&lt;/span&gt;OrderInfo&lt;/p&gt;
&lt;p&gt;返回值：e3Result&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OrderServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; OrderService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbOrderMapper orderMapper;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbOrderItemMapper orderItemMapper;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbOrderShippingMapper orderShippingMapper;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JedisClient jedisClient;
    
    @Value(&lt;/span&gt;&quot;${ORDER_GEN_KEY}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ORDER_GEN_KEY;
    @Value(&lt;/span&gt;&quot;${ORDER_ID_BEGIN}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ORDER_ID_BEGIN;
    @Value(&lt;/span&gt;&quot;${ORDER_ITEM_ID_GEN_KEY}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ORDER_ITEM_ID_GEN_KEY;
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; e3Result createOrder(OrderInfo orderInfo) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、接收表单的数据
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、生成订单id&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;jedisClient.exists(ORDER_GEN_KEY)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置初始值&lt;/span&gt;
&lt;span&gt;            jedisClient.set(ORDER_GEN_KEY, ORDER_ID_BEGIN);
        }
        String orderId &lt;/span&gt;=&lt;span&gt; jedisClient.incr(ORDER_GEN_KEY).toString();
        orderInfo.setOrderId(orderId);
        orderInfo.setPostFee(&lt;/span&gt;&quot;0&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、未付款，2、已付款，3、未发货，4、已发货，5、交易成功，6、交易关闭&lt;/span&gt;
        orderInfo.setStatus(1&lt;span&gt;);
        Date date &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        orderInfo.setCreateTime(date);
        orderInfo.setUpdateTime(date);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、向订单表插入数据。&lt;/span&gt;
&lt;span&gt;        orderMapper.insert(orderInfo);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、向订单明细表插入数据&lt;/span&gt;
        List&amp;lt;TbOrderItem&amp;gt; orderItems =&lt;span&gt; orderInfo.getOrderItems();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbOrderItem tbOrderItem : orderItems) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成明细id&lt;/span&gt;
            Long orderItemId =&lt;span&gt; jedisClient.incr(ORDER_ITEM_ID_GEN_KEY);
            tbOrderItem.setId(orderItemId.toString());
            tbOrderItem.setOrderId(orderId);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入数据&lt;/span&gt;
&lt;span&gt;            orderItemMapper.insert(tbOrderItem);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、向订单物流表插入数据。&lt;/span&gt;
        TbOrderShipping orderShipping =&lt;span&gt; orderInfo.getOrderShipping();
        orderShipping.setOrderId(orderId);
        orderShipping.setCreated(date);
        orderShipping.setUpdated(date);
        orderShippingMapper.insert(orderShipping);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、返回e3Result。&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e3Result.ok(orderId);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;  &lt;/p&gt;
&lt;h3&gt;2.5.4. Controller&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/order/create&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：使用&lt;/span&gt;OrderInfo&lt;span&gt;接收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回值：逻辑视图。&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;接收表单提交的数据&lt;/span&gt;OrderInfo&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、补全用户信息。&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;调用&lt;/span&gt;Service&lt;span&gt;创建订单。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、返回逻辑视图展示成功页面&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;需要&lt;/span&gt;Service&lt;span&gt;返回订单号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) 当前日期加三天。&lt;/p&gt;

&lt;p&gt;在拦截器中添加用户处理逻辑：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232555576-2078921098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
@RequestMapping(value=&quot;/order/create&quot;, method=&lt;span&gt;RequestMethod.POST)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String createOrder(OrderInfo orderInfo, HttpServletRequest request) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、接收表单提交的数据OrderInfo。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、补全用户信息。&lt;/span&gt;
        TbUser user = (TbUser) request.getAttribute(&quot;user&quot;&lt;span&gt;);
        orderInfo.setUserId(user.getId());
        orderInfo.setBuyerNick(user.getUsername());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、调用Service创建订单。&lt;/span&gt;
        e3Result result =&lt;span&gt; orderService.createOrder(orderInfo);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取订单号&lt;/span&gt;
        String orderId =&lt;span&gt; result.getData().toString();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a)需要Service返回订单号&lt;/span&gt;
        request.setAttribute(&quot;orderId&quot;&lt;span&gt;, orderId);
        request.setAttribute(&lt;/span&gt;&quot;payment&quot;&lt;span&gt;, orderInfo.getPayment());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; b)当前日期加三天。&lt;/span&gt;
        DateTime dateTime = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DateTime();
        dateTime &lt;/span&gt;= dateTime.plusDays(3&lt;span&gt;);
        request.setAttribute(&lt;/span&gt;&quot;date&quot;, dateTime.toString(&quot;yyyy-MM-dd&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、返回逻辑视图展示成功页面&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;3. &lt;/span&gt;&lt;strong&gt;Mycat数据库分片&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;如今随着互联网的发展，数据的量级也是撑指数的增长，从&lt;/span&gt;GB&lt;span&gt;到&lt;/span&gt;&lt;span&gt;TB&lt;/span&gt;&lt;span&gt;到&lt;/span&gt;&lt;span&gt;PB&lt;/span&gt;&lt;span&gt;。对数据的各种操作也是愈加的困难，传统的关系性数据库已经无法满足快速查询与插入数据的需求。这个时候&lt;/span&gt;&lt;span&gt;NoSQL&lt;/span&gt;&lt;span&gt;的出现暂时解决了这一危机。它通过降低数据的安全性，减少对事务的支持，减少对复杂查询的支持，来获取性能上的提升。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，在有些场合&lt;/span&gt;NoSQL&lt;span&gt;一些折衷是无法满足使用场景的，就比如有些使用场景是绝对要有事务与安全指标的。这个时候&lt;/span&gt;&lt;span&gt;NoSQL&lt;/span&gt;&lt;span&gt;肯定是无法满足的，所以还是需要使用关系性数据库。如果使用关系型数据库解决海量存储的问题呢？此时就需要做数据库集群，为了提高查询性能将一个数据库的数据分散到不同的数据库中存储。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.1 &lt;strong&gt;什么是数据库分片&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;简单来说，就是指通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主机）上面，以达到分散单台设备负载的效果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据的切分（&lt;/span&gt;Sharding&lt;span&gt;）根据其切分规则的类型，可以分为两种切分模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）&lt;span&gt;一种是按照不同的表（或者&lt;/span&gt;Schema&lt;span&gt;）来切分到不同的数据库（主机）之上，这种切可以称之为数据的垂直（纵向）切分&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232730682-523586110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;

&lt;p&gt;（2）另外一种则是根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库（主机）上面，这种切分称之为数据的水平（横向）切分。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232737063-602592971.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;1.2 &lt;strong&gt;如何实现数据库分片&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当数据库分片后，数据由一个数据库分散到多个数据库中。此时系统要查询时需要切换不同的数据库进行查询，那么系统如何知道要查询的数据在哪个数据库中？当添加一条记录时要向哪个数据库中插入呢？这些问题处理起来都是非常的麻烦。&lt;/p&gt;
&lt;p&gt;这种情况下可以使用一个数据库中间件mycat&lt;span&gt;来解决相关的问题。接下来了解一下什么是&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.1 &lt;strong&gt;&lt;span&gt;什么是&lt;/span&gt;Mycat&lt;span&gt;？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Mycat &lt;span&gt;背后是阿里曾经开源的知名产品——&lt;/span&gt;&lt;span&gt;Cobar&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;Cobar&lt;/span&gt; &lt;span&gt;的核心功能和优势是&lt;/span&gt; &lt;span&gt;MySQL&lt;/span&gt; &lt;span&gt;数据库分片，此产品曾经广为流传，据说最早的发起者对&lt;/span&gt; &lt;span&gt;Mysql&lt;/span&gt; &lt;span&gt;很精通，后来从阿里跳槽了，阿里随后开源的&lt;/span&gt; &lt;span&gt;Cobar&lt;/span&gt;&lt;span&gt;，并维持到&lt;/span&gt; &lt;span&gt;2013&lt;/span&gt; &lt;span&gt;年年初，然后，就没有然后了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Cobar &lt;span&gt;的思路和实现路径的确不错。基于&lt;/span&gt; &lt;span&gt;Java&lt;/span&gt; &lt;span&gt;开发的，实现了&lt;/span&gt; &lt;span&gt;MySQL&lt;/span&gt; &lt;span&gt;公开的二进制传输协议，巧妙地将自己伪装成一个&lt;/span&gt; &lt;span&gt;MySQL Server&lt;/span&gt;&lt;span&gt;，目前市面上绝大多数&lt;/span&gt; &lt;span&gt;MySQL&lt;/span&gt; &lt;span&gt;客户端工具和应用都能兼容。比自己实现一个新的数据库协议要明智的多，因为生态环境在哪里摆着。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Mycat &lt;span&gt;是基于&lt;/span&gt; &lt;span&gt;cobar&lt;/span&gt; &lt;span&gt;演变而来，对&lt;/span&gt; &lt;span&gt;cobar&lt;/span&gt; &lt;span&gt;的代码进行了彻底的重构，使用&lt;/span&gt; &lt;span&gt;NIO&lt;/span&gt; &lt;span&gt;重构了网络模块，并且优化了&lt;/span&gt; &lt;span&gt;Buffer&lt;/span&gt; &lt;span&gt;内核，增强了聚合，&lt;/span&gt;&lt;span&gt;Join&lt;/span&gt; &lt;span&gt;等基本特性，同时兼容绝大多数数据库成为通用的数据库中间件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单的说，&lt;/span&gt;MyCAT&lt;span&gt;就是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;·一个新颖的数据库中间件产品支持&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;集群，或者&lt;/span&gt;&lt;span&gt;mariadb cluster&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;提供高可用性数据分片集群。你可以像使用&lt;/span&gt;mysql&lt;span&gt;一样使用&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;。对于开发人员来说根本感觉不到&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;的存在。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232837400-1674830267.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;2.2 &lt;strong&gt;Mycat&lt;span&gt;支持的数据库&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232848966-1691805970.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3 &lt;strong&gt;Mycat&lt;span&gt;的分片策略&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807232854580-1128526213.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;2.4 &lt;strong&gt;概念说明&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;2.4.1 &lt;strong&gt;&lt;span&gt;逻辑库&lt;/span&gt;(schema) &lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;前面一节讲了数据库中间件，通常对实际应用来说，并不需要知道中间件的存在，业务开发人员只需要知道数据库的概念，所以数据库中间件可以被看做是一个或多个数据库集群构成的逻辑库。&lt;/p&gt;
&lt;h3&gt;2.4.2 &lt;strong&gt;&lt;span&gt;逻辑表（&lt;/span&gt;table&lt;span&gt;）：&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;既然有逻辑库，那么就会有逻辑表，分布式数据库中，对应用来说，读写数据的表就是逻辑表。逻辑表，可以是数据切分后，分布在一个或多个分片库中，也可以不做数据切分，不分片，只有一个表构成。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分片表：是指那些原有的很大数据的表，需要切分到多个数据库的表，这样，每个分片都有一部分数据，所有分片构成了完整的数据。&lt;/span&gt; &lt;span&gt;总而言之就是需要进行分片的表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;非分片表：一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.4.3 &lt;strong&gt;&lt;span&gt;分片节点&lt;/span&gt;(dataNode)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点（&lt;/span&gt;dataNode&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.4.4 &lt;strong&gt;&lt;span&gt;节点主机&lt;/span&gt;(dataHost)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;数据切分后，每个分片节点（&lt;/span&gt;dataNode&lt;span&gt;）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（&lt;/span&gt;&lt;span&gt;dataNode&lt;/span&gt;&lt;span&gt;）所在的机器就是节点主机（&lt;/span&gt;&lt;span&gt;dataHost&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;为了规避单节点主机并发数限制，尽量将读写压力高的分片节点（&lt;/span&gt;&lt;span&gt;dataNode&lt;/span&gt;&lt;span&gt;）均衡的放在不同的节点主机（&lt;/span&gt;&lt;span&gt;dataHost&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.4.5 &lt;strong&gt;&lt;span&gt;分片规则&lt;/span&gt;(rule)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;前面讲了数据切分，一个大表被分成若干个分片表，就需要一定的规则，这样按照某种业务规则把数据分到某个分片的规则就是分片规则，数据切分选择合适的分片规则非常重要，将极大的避免后续数据处理的难度。&lt;/p&gt;

&lt;h2&gt;3.1 &lt;strong&gt;安装环境&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1、jdk&lt;span&gt;：要求&lt;/span&gt;&lt;span&gt;jdk&lt;/span&gt;&lt;span&gt;必须是&lt;/span&gt;&lt;span&gt;1.7&lt;/span&gt;&lt;span&gt;及以上版本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、Mysql&lt;span&gt;：推荐&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;5.5&lt;/span&gt;&lt;span&gt;以上版本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、Mycat&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mycat&lt;span&gt;的官方网站：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mycat.org.cn/&quot;&gt;&lt;span&gt;http://www.mycat.org.cn/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MyCATApache/Mycat-download&quot;&gt;&lt;span&gt;https://github.com/MyCATApache/Mycat-download&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;3.2 &lt;strong&gt;安装步骤&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Mycat&lt;span&gt;有&lt;/span&gt;&lt;span&gt;windows&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;多种版本。本教程为&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;安装步骤，&lt;/span&gt;&lt;span&gt;windows&lt;/span&gt;&lt;span&gt;基本相同。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一步：下载&lt;/span&gt;Mycat-server-xxxx-linux.tar.gz&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二步：将压缩包解压缩。建议将&lt;/span&gt;mycat&lt;span&gt;放到&lt;/span&gt;&lt;span&gt;/usr/local/mycat&lt;/span&gt;&lt;span&gt;目录下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三步：进入&lt;/span&gt;mycat&lt;span&gt;目录，启动&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;./mycat start&lt;/p&gt;
&lt;p&gt;停止：&lt;/p&gt;
&lt;p&gt;./mycat stop&lt;/p&gt;
&lt;p&gt;mycat &lt;span&gt;支持的命令&lt;/span&gt;&lt;span&gt;{ console | start | stop | restart | status | dump }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mycat&lt;span&gt;的默认端口号为：&lt;/span&gt;&lt;span&gt;8066&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;4.1 &lt;strong&gt;需求&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;把商品表分片存储到三个数据节点上。&lt;/p&gt;

&lt;h2&gt;4.2 &lt;strong&gt;安装环境分析&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;两台&lt;/span&gt;mysql&lt;span&gt;数据库服务器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Host1&lt;span&gt;：&lt;/span&gt;&lt;span&gt;192.168.25.134&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Host2&lt;span&gt;：&lt;/span&gt;&lt;span&gt;192.168.25.166&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;host1&lt;span&gt;环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作系统版本&lt;/span&gt; : centos6.4&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库版本&lt;/span&gt; : mysql-5.6&lt;/p&gt;
&lt;p&gt;mycat&lt;span&gt;版本 ：&lt;/span&gt;&lt;span&gt;1.4 release&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库名&lt;/span&gt; : db1&lt;span&gt;、&lt;/span&gt;&lt;span&gt;db3&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;mysql&lt;span&gt;节点&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作系统版本&lt;/span&gt; : centos6.4&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库版本&lt;/span&gt; : mysql-5.6&lt;/p&gt;
&lt;p&gt;mycat&lt;span&gt;版本 ：&lt;/span&gt;&lt;span&gt;1.4 release&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据库名&lt;/span&gt; : db2&lt;/p&gt;

&lt;p&gt;MyCat&lt;span&gt;安装到节点&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;上（需要安装&lt;/span&gt;&lt;span&gt;jdk&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;4.3 &lt;strong&gt;&lt;span&gt;配置&lt;/span&gt;schema.xml&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;4.3.1 &lt;strong&gt;Schema.xml&lt;span&gt;介绍&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Schema.xml&lt;span&gt;作为&lt;/span&gt;&lt;span&gt;MyCat&lt;/span&gt;&lt;span&gt;中重要的配置文件之一，管理着&lt;/span&gt;&lt;span&gt;MyCat&lt;/span&gt;&lt;span&gt;的逻辑库、表、分片规则、&lt;/span&gt;&lt;span&gt;DataNode&lt;/span&gt;&lt;span&gt;以及&lt;/span&gt;&lt;span&gt;DataSource&lt;/span&gt;&lt;span&gt;。弄懂这些配置，是正确使用&lt;/span&gt;&lt;span&gt;MyCat&lt;/span&gt;&lt;span&gt;的前提。这里就一层层对该文件进行解析。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;schema &lt;span&gt;标签用于定义&lt;/span&gt;&lt;span&gt;MyCat&lt;/span&gt;&lt;span&gt;实例中的逻辑库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Table &lt;span&gt;标签定义了&lt;/span&gt;&lt;span&gt;MyCat&lt;/span&gt;&lt;span&gt;中的逻辑表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dataNode &lt;span&gt;标签定义了&lt;/span&gt;&lt;span&gt;MyCat&lt;/span&gt;&lt;span&gt;中的数据节点，也就是我们通常说所的数据分片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dataHost&lt;span&gt;标签在&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;逻辑库中也是作为最底层的标签存在，直接定义了具体的数据库实例、读写分离配置和心跳语句。&lt;/span&gt;&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;710&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;注意：若是&lt;span&gt;LINUX&lt;/span&gt;&lt;span&gt;版本的&lt;/span&gt;&lt;span&gt;MYSQL&lt;/span&gt;&lt;span&gt;，则需要设置为&lt;/span&gt;&lt;span&gt;Mysql&lt;/span&gt;&lt;span&gt;大小写不敏感，否则可能会发生表找不到的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在&lt;span&gt;MySQL&lt;/span&gt;&lt;span&gt;的配置文件中&lt;/span&gt;&lt;span&gt;/etc/my.cnf [mysqld]&lt;/span&gt; &lt;span&gt;中增加一行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;lower_case_table_names=1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;4.3.2 &lt;strong&gt;Schema.xml&lt;span&gt;配置&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mycat:schema &lt;/span&gt;&lt;span&gt;xmlns:mycat&lt;/span&gt;&lt;span&gt;=&quot;http://org.opencloudb/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;schema &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;e3mall&quot;&lt;/span&gt;&lt;span&gt; checkSQLschema&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; sqlMaxLimit&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; auto sharding by id (long) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;tb_item&quot;&lt;/span&gt;&lt;span&gt; dataNode&lt;/span&gt;&lt;span&gt;=&quot;dn1,dn2,dn3&quot;&lt;/span&gt;&lt;span&gt; rule&lt;/span&gt;&lt;span&gt;=&quot;auto-sharding-long&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;schema&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataNode &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dn1&quot;&lt;/span&gt;&lt;span&gt; dataHost&lt;/span&gt;&lt;span&gt;=&quot;localhost1&quot;&lt;/span&gt;&lt;span&gt; database&lt;/span&gt;&lt;span&gt;=&quot;db1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataNode &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dn2&quot;&lt;/span&gt;&lt;span&gt; dataHost&lt;/span&gt;&lt;span&gt;=&quot;localhost2&quot;&lt;/span&gt;&lt;span&gt; database&lt;/span&gt;&lt;span&gt;=&quot;db2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataNode &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dn3&quot;&lt;/span&gt;&lt;span&gt; dataHost&lt;/span&gt;&lt;span&gt;=&quot;localhost1&quot;&lt;/span&gt;&lt;span&gt; database&lt;/span&gt;&lt;span&gt;=&quot;db3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataHost &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;localhost1&quot;&lt;/span&gt;&lt;span&gt; maxCon&lt;/span&gt;&lt;span&gt;=&quot;1000&quot;&lt;/span&gt;&lt;span&gt; minCon&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; balance&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
                writeType&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; dbType&lt;/span&gt;&lt;span&gt;=&quot;mysql&quot;&lt;/span&gt;&lt;span&gt; dbDriver&lt;/span&gt;&lt;span&gt;=&quot;native&quot;&lt;/span&gt;&lt;span&gt; switchType&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;  slaveThreshold&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;heartbeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;select user()&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;heartbeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; can have multi write hosts &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;writeHost &lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;=&quot;hostM1&quot;&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;=&quot;192.168.25.134:3306&quot;&lt;/span&gt;&lt;span&gt; user&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt;
                        password&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; can have multi read hosts &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;writeHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataHost &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;localhost2&quot;&lt;/span&gt;&lt;span&gt; maxCon&lt;/span&gt;&lt;span&gt;=&quot;1000&quot;&lt;/span&gt;&lt;span&gt; minCon&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; balance&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;
                writeType&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; dbType&lt;/span&gt;&lt;span&gt;=&quot;mysql&quot;&lt;/span&gt;&lt;span&gt; dbDriver&lt;/span&gt;&lt;span&gt;=&quot;native&quot;&lt;/span&gt;&lt;span&gt; switchType&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;  slaveThreshold&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;heartbeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;select user()&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;heartbeat&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; can have multi write hosts &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;writeHost &lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;=&quot;hostM1&quot;&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;=&quot;192.168.25.166:3306&quot;&lt;/span&gt;&lt;span&gt; user&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt;
                        password&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; can have multi read hosts &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;writeHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataHost&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mycat:schema&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.4 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;配置&lt;/span&gt;server.xml&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;4.4.1 &lt;strong&gt;Server.xml&lt;span&gt;介绍&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;server.xml&lt;span&gt;几乎保存了所有&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;需要的系统配置信息。最常用的是在此配置用户名、密码及权限。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4.4.2 &lt;strong&gt;Server.xml&lt;span&gt;配置&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;user &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;schemas&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;e3mall&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;readOnly&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.5 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;配置&lt;/span&gt;rule.xml&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;rule.xml&lt;span&gt;里面就定义了我们对表进行拆分所涉及到的规则定义。我们可以灵活的对表使用不同的分片算法，或者对表使用相同的算法但具体的参数不同。这个文件里面主要有&lt;/span&gt;&lt;span&gt;tableRule&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;这两个标签。在具体使用过程中可以按照需求添加&lt;/span&gt;&lt;span&gt;tableRule&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;和&lt;/span&gt;function&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此配置文件可以不用修改，使用默认即可。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;4.6 &lt;strong&gt;测试分片&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;4.6.1 &lt;strong&gt;创建表&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;配置完毕后，重新启动&lt;/span&gt;mycat&lt;span&gt;。使用&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;客户端连接&lt;/span&gt;&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;，创建表。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; Table structure for tb_item&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt; ----------------------------&lt;/span&gt;
&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `tb_item`;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `tb_item` (
  `id` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品id，同时也是商品编号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `title` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品标题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `sell_point` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;500&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品卖点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `price` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品价格，单位为：分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `num` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;库存数量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `barcode` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;30&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品条形码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;500&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品图片&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `cid` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;所属类目，叶子类目&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `status` &lt;/span&gt;&lt;span&gt;tinyint&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品状态，1-正常，2-下架，3-删除&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `created` &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `updated` &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;更新时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; `cid` (`cid`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; `status` (`status`),
  &lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; `updated` (`updated`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8 COMMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.6.2 &lt;/span&gt;&lt;strong&gt;插入数据&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;将此文件中的数据插入到数据库：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180807233013591-407261492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;4.6.3 &lt;strong&gt;分片测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;由于配置的分片规则为&lt;/span&gt;“auto-sharding-long”，所以&lt;span&gt;mycat&lt;/span&gt;&lt;span&gt;会根据此规则自动分片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个&lt;/span&gt;datanode&lt;span&gt;中保存一定数量的数据。根据&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;进行分片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经测试&lt;/span&gt;id&lt;span&gt;范围为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Datanode1&lt;span&gt;：&lt;/span&gt;&lt;span&gt;1~5000000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Datanode2&lt;span&gt;：&lt;/span&gt;&lt;span&gt;5000000~10000000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Datanode3&lt;span&gt;：&lt;/span&gt;&lt;span&gt;10000001~15000000&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当&lt;/span&gt;15000000&lt;span&gt;以上的&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;插入时报错：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[Err] 1064 - can't find any valid datanode :TB_ITEM -&amp;gt; ID -&amp;gt; 15000001&lt;/p&gt;
&lt;p&gt;此时需要添加节点了。&lt;/p&gt;
</description>
<pubDate>Tue, 07 Aug 2018 15:31:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/9440242.html</dc:identifier>
</item>
<item>
<title>AspNetCore+Swagger 生成Model 描述 - 乐途</title>
<link>http://www.cnblogs.com/szlblog/p/9440243.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/szlblog/p/9440243.html</guid>
<description>&lt;h2&gt; 前言：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本篇文章实现是基于上一篇文章，进下补充：多余的就不多说了，只是为了实现Model的描述生成：有兴趣的可以结合上一篇的进行实现：如有更好的办法希望可以告知谢谢大家！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上一篇文章地址： &lt;a href=&quot;https://www.cnblogs.com/szlblog/p/8068311.html&quot;&gt;&lt;span&gt;https://www.cnblogs.com/szlblog/p/8068311.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt; 内容：&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;1、：首先根据上一篇文章我们创建&lt;/span&gt;AspNetCoreApi&lt;span&gt;的项目，&lt;/span&gt;&lt;span&gt;OrderServices&lt;/span&gt; &lt;span&gt;如下如所示：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232322024-521974344.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;2、：创建&lt;/span&gt;Core&lt;span&gt;的类库项目并添加&lt;/span&gt;&lt;span&gt;Users&lt;/span&gt;&lt;span&gt;类如下图所示：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232444348-1824264559.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;打开类库的属性：修改输出项：如图所示&lt;/span&gt;：&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232502567-1560367159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;点击生成后会自动创建&lt;/span&gt; BusinessBll.xml &lt;span&gt;文档：&lt;/span&gt;&lt;span&gt;BusinessBll.xml&lt;/span&gt; &lt;span&gt;属性修改如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232524451-1977564534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;Users&lt;span&gt;类中内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; BusinessBll
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户类
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Users
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户ID
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户编号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 密码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Pwd { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户基本信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; UserInfo userInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户的基本信息
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 地址信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Address { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; } 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户编号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Phone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; } 
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt; 3、：&lt;span&gt;在控制器&lt;/span&gt;ValuesController &lt;span&gt;的&lt;/span&gt;Post &lt;span&gt;方法用引用进行引用，如下图所示：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232632358-300103894.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;4、：在&lt;/span&gt;Startup&lt;span&gt;类中进行引用：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;项目生成后：会有两个XML&lt;span&gt;文档：所以要使用两个XML文档，如下图所示&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　第一个是Web &lt;span&gt;项目生成的&lt;span&gt;SwaggerDesc.xml&lt;span&gt;文档内容如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　第二个文档是类库项目生成的 BusinessBll.xml &lt;span&gt;文档&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232830280-194205545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、：&lt;span&gt;运行项目：结果如下图所示：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180807232908320-436029842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;有不足之处&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;希望大家指出相互学习，&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;                             本文&lt;span&gt;&lt;strong&gt;原创：&lt;/strong&gt;转载请注明出处 谢谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 07 Aug 2018 15:31:00 +0000</pubDate>
<dc:creator>乐途</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/szlblog/p/9440243.html</dc:identifier>
</item>
<item>
<title>数据库之架构：主备+分库？主从+读写分离？ - 尜尜人物</title>
<link>http://www.cnblogs.com/littlecharacter/p/9084291.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littlecharacter/p/9084291.html</guid>
<description>&lt;ol&gt;&lt;li&gt;&lt;span&gt;高可用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;高性能&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;一致性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;扩展性&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;span&gt;方案一：主备架构，只有主库提供读写服务，备库冗余作故障转移用&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201807/955136-20180726220519333-204643999.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://vip:3306/xxdb&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;高可用分析：&lt;/strong&gt;高可用，主库挂了，keepalive（只是一种工具）会自动切换到备库。这个过程对业务层是透明的，无需修改代码或配置。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;高性能分析：&lt;/strong&gt;读写都操作主库，很容易产生瓶颈。大部分互联网应用读多写少，读会先成为瓶颈，进而影响写性能。另外，备库只是单纯的备份，资源利用率50%，这点方案二可解决。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;一致性分析：&lt;/strong&gt;读写都操作主库，不存在数据一致性问题。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;扩展性分析：&lt;/strong&gt;无法通过加从库来扩展读性能，进而提高整体性能。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;可落地分析：&lt;/strong&gt;两点影响落地使用。第一，性能一般，这点可以通过建立高效的索引和引入缓存来增加读性能，进而提高性能。这也是通用的方案。第二，扩展性差，这点可以通过&lt;strong&gt;&lt;a href=&quot;https://www.cnblogs.com/littlecharacter/p/9342129.html&quot; target=&quot;_blank&quot;&gt;分库分表&lt;/a&gt;&lt;/strong&gt;来扩展。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;方案二：双主架构，两个主库同时提供服务，负载均衡&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201807/955136-20180726220751485-1957339512.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;jdbc:mysql://vip:3306/xxdb&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;高可用分析：&lt;/strong&gt;高可用，一个主库挂了，不影响另一台主库提供服务。这个过程对业务层是透明的，无需修改代码或配置。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;高性能分析：&lt;/strong&gt;读写性能相比于方案一都得到提升，提升一倍。&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;一致性分析：&lt;/strong&gt;存在数据一致性问题。请看，&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;一致性解决方案&lt;/a&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;扩展性分析：&lt;/strong&gt;当然可以扩展成三主循环，但笔者不建议（会多一层&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;数据同步&lt;/a&gt;&lt;/strong&gt;，这样同步的时间会更长）。如果非得在数据库架构层面扩展的话，扩展为方案四。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可落地分析：&lt;/strong&gt;两点影响落地使用。第一，数据一致性问题，&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;一致性解决方案&lt;/a&gt;&lt;/strong&gt;可解决问题&lt;strong&gt;。&lt;/strong&gt;第二，主键冲突问题，ID统一地由分布式ID生成服务来生成可解决问题。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;方案三：主从架构，一主多从，读写分离&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201807/955136-20180726221051131-308922608.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://master-ip:3306/xxdb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://slave1-ip:3306/xxdb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://slave2-ip:3306/xxdb&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;高可用分析：&lt;/strong&gt;主库单点，从库高可用。一旦主库挂了，写服务也就无法提供。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;高性能分析：&lt;/strong&gt;大部分互联网应用读多写少，读会先成为瓶颈，进而影响整体性能。读的性能提高了，整体性能也提高了。另外，主库可以不用索引，线上从库和线下从库也可以建立不同的索引（线上从库如果有多个还是要建立相同的索引，不然得不偿失；线下从库是平时开发人员排查线上问题时查的库，可以建更多的索引）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;一致性分析：&lt;/strong&gt;存在数据一致性问题。请看，&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;一致性解决方案&lt;/a&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;扩展性分析：&lt;/strong&gt;可以通过加从库来扩展读性能，进而提高整体性能。（带来的问题是，从库越多需要从主库拉取binlog日志的端就越多，进而影响主库的性能，并且&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;数据同步&lt;/a&gt;&lt;/strong&gt;完成的时间也会更长）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可落地分析：&lt;/strong&gt;两点影响落地使用。第一，数据一致性问题，&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;一致性解决方案&lt;/a&gt;&lt;/strong&gt;可解决问题&lt;strong&gt;。&lt;/strong&gt;第二，主库单点问题，笔者暂时没想到很好的解决方案。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;注：思考一个问题，一台从库挂了会怎样？读写分离之读的负载均衡策略怎么容错？&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;方案四：双主+主从架构，看似完美的方案&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201807/955136-20180726221444793-662718571.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://vip:3306/xxdb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://slave1-ip:3306/xxdb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;jdbc:mysql://slave2-ip:3306/xxdb&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;高可用分析：&lt;/strong&gt;高可用。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;高性能分析：&lt;/strong&gt;高性能。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;一致性分析：&lt;/strong&gt;存在数据一致性问题。请看，&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;一致性解决方案&lt;/a&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;扩展性分析：&lt;/strong&gt;可以通过加从库来扩展读性能，进而提高整体性能。（带来的问题&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m2&quot;&gt;同方案二&lt;/a&gt;&lt;/strong&gt;）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;可落地分析：&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m2&quot;&gt;同方案二&lt;/a&gt;&lt;/strong&gt;，但&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m1&quot;&gt;数据同步&lt;/a&gt;&lt;/strong&gt;又多了一层，数据延迟更严重&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;第一类：主库和从库一致性解决方案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201807/955136-20180727213418280-1930709441.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：图中圈出的是数据同步的地方，数据同步（从库从主库拉取binlog日志，再执行一遍）是需要时间的，这个同步时间内主库和从库的数据会存在不一致的情况。如果同步过程中有读请求，那么读到的就是从库中的老数据。如下图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180802172847620-380680852.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;既然知道了数据不一致性产生的原因，有下面几个解决方案供参考：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;直接忽略，如果业务允许延时存在，那么就不去管它。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;强制读主，采用&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m3&quot;&gt;主备架构&lt;/a&gt;&lt;/strong&gt;方案，读写都走主库。用缓存来扩展数据库读性能 。有一点需要知道：如果缓存挂了，可能会产生雪崩现象，不过一般分布式缓存都是高可用的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180802172143153-443159996.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;选择读主，写操作时根据库+表+业务特征生成一个key放到Cache里并设置超时时间（大于等于主从数据同步时间）。读请求时，同样的方式生成key先去查Cache，再判断是否命中。若命中，则读主库，否则读从库。代价是多了一次缓存读写，基本可以忽略。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180802175043114-702506515.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;半同步复制，等主从同步完成，写请求才返回。就是大家常说的“半同步复制”semi-sync。这可以利用数据库原生功能，实现比较简单。代价是写请求时延增长，吞吐量降低。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;数据库中间件，引入开源（mycat等）或自研的数据库中间层。个人理解，思路同&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9084291.html#m5&quot;&gt;选择读主&lt;/a&gt;。&lt;/strong&gt;数据库中间件的成本比较高，并且还多引入了一层。&lt;strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180802180602083-1526025202.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;第二类：DB和缓存一致性解决方案&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180802190351707-2134900217.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先来看一下常用的缓存使用方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一步：淘汰缓存；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二步：写入数据库；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三步：读取缓存？返回：读取数据库；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第四步：读取数据库后写入缓存。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果按照这种方式，图一，不会产生DB和缓存不一致问题；图二，会产生DB和缓存不一致问题，即4.read先于3.sync执行。&lt;/span&gt;&lt;span&gt;如果不做处理，缓存里的数据可能一直是脏数据。解决方式如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180802191911475-1332840848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;架构演变&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;架构演变一：方案一 -&amp;gt; 方案一+分库分表 -&amp;gt; 方案二+分库分表 -&amp;gt; 方案四+分库分表；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;架构演变二：方案一 -&amp;gt; 方案一+分库分表 -&amp;gt; 方案三+分库分表 -&amp;gt; 方案四+分库分表；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;架构演变三：方案一 -&amp;gt; 方案二 -&amp;gt; 方案四 -&amp;gt; 方案四+分库分表；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;架构演变四：方案一 -&amp;gt; 方案三 -&amp;gt; 方案四 -&amp;gt; 方案四+分库分表；&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;个人见解&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;加缓存和索引是通用的提升数据库性能的方式；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;分库分表带来的好处是巨大的，但同样也会带来一些问题，详见&lt;strong&gt;&lt;a id=&quot;post_title_link_9342129&quot; href=&quot;https://www.cnblogs.com/littlecharacter/p/9342129.html&quot;&gt;数据库之分库分表-垂直？水平？&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;不管是主备+分库分表还是主从+读写分离+分库分表，都要考虑具体的业务场景。&lt;/span&gt;&lt;span&gt;58到家发展四年，绝大部分的数据库架构还是采用方案一和方案一+分库分表，只有极少部分用方案三+读写分离+分库分表。另外，阿里云提供的数据库云服务也都是主备方案，要想主从+读写分离需要二次架构。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;记住一句话：不考虑业务场景的架构都是耍流氓。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 07 Aug 2018 15:30:00 +0000</pubDate>
<dc:creator>尜尜人物</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littlecharacter/p/9084291.html</dc:identifier>
</item>
<item>
<title>SocketIo+SpringMvc实现文件的上传下载 - charlyFeng</title>
<link>http://www.cnblogs.com/charlypage/p/9440226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/charlypage/p/9440226.html</guid>
<description>&lt;p&gt;socketIo不仅可以用来做聊天工具,也可以实现局域网(当然你如果有外网也可用外网)内实现文件的上传和下载,下面是代码的效果演示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1373932/201808/1373932-20180807232151828-2141167808.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;GIT地址: https://github.com/fengcharly/sockeio-springMvcUpload.git&lt;/p&gt;
&lt;h2 id=&quot;部分代码如下&quot;&gt;部分代码如下:&lt;/h2&gt;
&lt;h5 id=&quot;服务端的代码&quot;&gt;服务端的代码:&lt;/h5&gt;
&lt;p&gt;ChuanServer:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.channels.FileChannel;

public class ChuanServer {
    public static void protServer(String po) throws IOException {
              int port = Integer.parseInt(po);
        ServerSocket serverSocket = new ServerSocket(port);
        while (true) {
            final Socket clientSocket = serverSocket.accept();

            new Thread() {
                @Override
                public void run() {
                    try {
                        BufferedReader br = new BufferedReader(
                                new InputStreamReader(clientSocket.getInputStream(), &quot;GBK&quot;)
                        );

                        InputStream is = clientSocket.getInputStream();

                        PrintStream pr = new PrintStream(
                                clientSocket.getOutputStream()
                        );

                        pr.println(&quot;我是服务端&quot;);

                        String str = br.readLine();
                        System.out.println(&quot;br.readLine():&quot; + str);
                        System.out.println(&quot;服务端来接收了!!&quot;);
                        out(is, str);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }.start();


        }

    }


    public static void out(InputStream is, String str) throws IOException {
        FileOutputStream fo = new FileOutputStream(&quot;C:\\Users\\Administrator\\Desktop\\upload\\&quot; + str);

        BufferedInputStream bi = new BufferedInputStream(is);
        BufferedOutputStream bo = new BufferedOutputStream(fo);
        int len = 0;
        while ((len=bi.read())!=-1){
            bo.write(len);
        }

        bi.close();
        bo.close();


    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;这里我固定了上传后保存的路径为cusersadministratordesktopupload&quot;&gt;这里我固定了上传后保存的路径为:&quot;C:\Users\Administrator\Desktop\upload\&quot;&lt;/h4&gt;
&lt;p&gt;PortController:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import socket.ChuanServer;
import java.io.IOException;

@Controller
public class PortController {
    @RequestMapping(&quot;/port&quot;)
    public  String port(String port,Model model){
        model.addAttribute(&quot;port&quot;,port);
        try {
            ChuanServer.protServer(port);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return &quot;success&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;再来看下上传的客户端的代码&quot;&gt;再来看下上传的客户端的代码:&lt;/h5&gt;
&lt;p&gt;UpLoadController:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Controller
@RequestMapping(&quot;/&quot;)
public class UpLoadController {

    @Autowired
    private UpService upService;


    private String zhuan=&quot;&quot;;

    @RequestMapping(&quot;/upload&quot;)
    public String upload(@RequestParam(value = &quot;file&quot;, required = false) MultipartFile file,
                         HttpServletRequest request, @RequestParam(&quot;iphost&quot;) String iphost,@RequestParam(&quot;port&quot;) String port,Model model) throws IOException {

        String fileName = file.getOriginalFilename();

        InputStream is = file.getInputStream();

        upService.upload(fileName,is,iphost,port);
        return &quot;success&quot;;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;UpServiceImpl:&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Service
public class UpServiceImpl  implements UpService {

    @Override
    public void upload(String fileName, InputStream is, String iphost, String port) {
        getClientSocket(is, fileName, iphost, port);
    }

//建立socket通信

    public void getClientSocket(InputStream is, String fileName, String iphost, String port) {
        int po = Integer.parseInt(port);
        try {
            Socket socket = new Socket(iphost, po);
            BufferedReader br = new BufferedReader(
                    new InputStreamReader(socket.getInputStream(), &quot;UTF-8&quot;)
            );

            PrintStream pr = new PrintStream(
                    socket.getOutputStream()
            );

            OutputStream os = socket.getOutputStream();

            System.out.println(&quot;客户端给你传文件了!&quot;);
            System.out.println(&quot;文件名为:&quot; + fileName);

            //读取服务器返回的消息
            String str = br.readLine();
            System.out.println(&quot;服务器发来的消息为:&quot; + str);


            pr.println(fileName);


            in(is, os);
            pr.close();
            br.close();
            System.out.println(&quot;客户端已关闭&quot;);

        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    //上传文本
    public static void in(InputStream is, OutputStream os) throws IOException {
        //BIO
        BufferedInputStream bi = new BufferedInputStream(is);
        BufferedOutputStream bo = new BufferedOutputStream(os);
        int len = 0;
        while ((len=bi.read())!=-1){
            bo.write(len);
            System.out.println(len);
        }

        bi.close();
        bo.close();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;这里相应的访问路径为&quot;&gt;这里相应的访问路径为:&lt;/h5&gt;
&lt;p&gt;服务端:http://localhost:8080/&lt;/p&gt;
&lt;p&gt;客户端:http://localhost:8082/upload&lt;/p&gt;
&lt;p&gt;完整项目GIT地址:&lt;/p&gt;
&lt;p&gt;注意: https://github.com/fengcharly/sockeio-springMvcUpload.git&lt;/p&gt;
&lt;p&gt;传输过程中的我们用的是系统提供的BufferedInputStream和BufferedOutputStream缓冲流来传输文件,相对而言传输小文件比较合适,大文件比较慢,可以进一步优化,传输过程中传输速度如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1373932/201808/1373932-20180807232249184-1002900820.gif&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 07 Aug 2018 15:27:00 +0000</pubDate>
<dc:creator>charlyFeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/charlypage/p/9440226.html</dc:identifier>
</item>
<item>
<title>前端 - 曾经我爱的义无反顾 - 郭菊锋</title>
<link>http://www.cnblogs.com/padding1015/p/9439884.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/padding1015/p/9439884.html</guid>
<description>&lt;h3&gt;&lt;span&gt;感慨了几千字废话的本文背景：&lt;/span&gt;&lt;/h3&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　大学毕业后这一年，我很明白作为前端小白所有的东西都要开始学、从头学，所以一年的时间都在埋头恶补。因为在大三开始就有意识的学习html+css布局，大四接过多个布局的项目，所以正式工作时，是以学javascript为入口开始提升，学了scss学pug，学了gulp搭webpack，学了小程序学vue......&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　好像自己一直都在急匆匆的和时间塞跑，但是最关键，也是最重要的，我没有停下来享受每一步的高效。只是像一个狗熊掰玉米似得，捡芝麻扔西瓜，用到西瓜再去找西瓜。没有去做复盘，也没有去做总结，更没有去做反思。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　这段时间又一次遇到了走入职场以来的第N次变故。一个很有前瞻性和远见性的，对我来说很好的技术leader离职了，留下我们这些虾兵蟹将天天的空空然对着电脑发呆。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　这种感觉就好像，一个孤独的人在荒无人烟的迷雾小路上奔跑，没有人给自己带路，只有自己埋头痛跑，但跑了一阵抬头时，才猛然发现已不知自己在什么地方，（面试的时候别人问自己）也不知道路上遇到了什么风景。更不知道接下来自己应该往那个方向跑、还要不要跑？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　加上刚好前段时间自己面试了n家技术岗又频频遭拒，颇受打击。独自走在正午12点北京中关村的大街上，真的是站在十字路口不知道该往哪个方向走。迷茫，彷徨，怀疑。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　明明这一年自己比别人还要努力的学习，为什么收效甚微？自己进步慢也就算了，更折磨人的是，整个前端的大环境还在迅猛的变化！新思想如涨潮的浪接二连三，新技术如雨后春笋层出不穷... ... 根本没有喘息的机会！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　当初毅然决然的转行又是不是错的呢？这条路上我能不能成功呢？我还该不该坚持下去？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　消极下来的我开始自暴自弃，止步不前。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　这是最可怕的，如果没有了方向，如果开始怀疑自己的努力。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　可悲的是，任凭我怎么在人生的黑暗里挣扎，我也只能自我救赎。连最亲最近的人都没有可以理解、帮助的。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　我只能自己停下来好好思考人生了。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3&gt;&lt;span&gt;为什么选择做前端&lt;/span&gt;&lt;/h3&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　当很多人知道我是设计专业的时候，就会很好奇地问我为什么同一个问题：为什么要像一个傻逼一样放弃自己的专业搞什么流行玩跨界？还是压上了自己的前程和身家性命。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　其实我自己也思考过，在我大三下选择毕设课题的时候我就开始在思考这个未来方向的问题。最终让我决定头也不回的走向前端的原因有两个：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　【归根到底还是毕业的自己想走捷径，决定前端好混，现在看清了又知道自己没能力了，就开始后悔，垃圾。】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 设计艰难，起步低&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　设计艰难相对我自己来说，我虽然学了八年美术，基础底子很强，但是我这个人缺乏创意，缺乏想象力，如果让我做美术生做艺术研究还可以，做设计要事实出新稿想新意我是做不到的。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　但不可否认的是，我想象力没那么差劲，只是因为眼界窄，乡巴佬什么也没见过，让我怎么想想高大上的海报效果？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　现在站在局外人的角度，理智分析，之所以错觉上感觉自己设计感很差。是对自己当时的处境非常不了解，对自己的了解不够全面，因此也没有一个改变自己的计划，就好像现在深处前端瓶颈，不知道该如何前进的自己一模一样。但凡当初对自己的处境有丁点前瞻性地认识，坚持下来，培养自己的长处（软件玩的溜就用软件作图），补齐自己的短处（没有设计感没有美感要培养啊），没准现在敢说自己是一个设计师了。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　如果让现在的我告诉自己坚持设计，因为不是我审美差而是我没有天赋又没有努力，大学都在煲剧要不就兼职根本没把心思放在学习上，课堂作业随便做。典型的差生还不努力。曾经动画设计参加全国大赛也拿过校一等奖的，还是因为自己的剧本被老师发掘然后逼着我做的作品，所以没有差，只有不努力，不认真对待。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　当初目光短浅急于求成，面对找工作养家糊口的压力，怕自己找不到实习找不到工作，就不再坚持设计而是选了好入门一点并且自己有项目经验的前端。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　对于我来说，前端比设计好混。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;2. 前端好混，见效快&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　前端好混不是说现在这个行业这个环境，而是当时相对于我的两个选择来说，我自己在哪个领域更加得心应手：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　之所以觉得前端对于我来说更简单（当时傻逼，别见笑），也是有几点说服自己的理由：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;strong&gt;　　自我感觉的天赋：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　说起这个就有必要追朔一把历史，当初作为一个从河北农村到浙江上学的土包子，初中开始就没再接触过电脑，高中上的美术专业学校不会学习计算机，连查分都是老师代操作。知道大学开学要靠计算机后，入学前暑假自己在家里拿硬纸板画键盘练习打字，借其他高中学校学生的计算机书来读，不过入学后不出意料的计算机基础还是没考及格。后来按学校要求重修计算机，自己去图书馆看书，去网吧练习计算机操作，愣是考了98高分过线。极大的鼓舞了士气。可把自己牛逼坏了。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　但是现在想想当时考的都是类似ctrl+c ctrl+v，右键新建-保存这一类的东西，才明白自己当时没考满分真的是窝囊。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　大一下班学期，因为自己设计专业的缘故买了自己全家的第一台电脑，因为设计课学photoshop自己玩的比谁都溜，所有人都来向我请教，更加迷惑了我以为自己很聪明狠了不起的心。要知道他们可是浙江省的学子啊，他们高中计算机都是必修课。。。。（我也不知道我当初为什么会这么自不量力，自我满足，真能自嗨！）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　从小到大一直相信这一句话: 祸兮福所倚，我当初计算机基础挂科后我就有预感，我再靠一次会有不一样的收获。后来事实也印证了我这份感受，也是因为计算机基础挂科，我们就必需选修网页设计课。而这一门通识课，就是教的dreamweaver，也就是我和前端结下深厚友谊的起步。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　包括后来我因为早半年比同班同学接触dreamweaver，导致必修网页设计课、asp编程语言的时候，我的成绩在班里名列前茅。要知道我们都是学设计的啊，自己代码课牛逼真的是被同学仰视的啊！在美术生眼里，计算机学院穿着拖鞋裤衩带着厚眼镜胡子拉碴，但是张口闭口代码编程的小哥哥真的都是神啊（事实上他们都不是那样的，都是干干净净文质彬彬的小帅哥额）！原谅我小小的虚荣心吧，我也想当神。甚至一度想，转专业到计算机学院去。。。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　接触过前端的都知道，&lt;strong&gt;前端入门简单，&lt;/strong&gt;几行css就能实现自己设计图的效果让我有很大的错觉。觉得，嗷吆，，还不错哦！于是对前端产生了很大的兴趣。对于当时的我来说，是真的兴趣而不是骗骗面试官随便说的。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　后来也是因为自己极大的兴趣，各种代码课都积极学习，潜心钻研，还不满足的去图书馆找课外书，自己做demo，接项目，以至于关于代码的专业成绩一直在班级名列前茅，提到班里代码好的同学们第一想到的就是我，才在专业老师接到数信学院老师的外包项目时，同学们推荐了我，也才会在班主任朋友找她揪同学去给外边企业做网站时选择了我。种种的一切，让我和前端结缘。这些项目作为我的一个敲门砖，也是我走上不归路的一大原因。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　任何事物，都是有因果联系的。现在回想起来，一切的这些阴差阳错，成就了今天的我。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　但殊不知，这些所谓成功的背后都是因为自己当时的勤学苦练啊。自己也是只看到了收获，忘记了室友们在空调房刷剧自己却跑去图书馆借书而流出的汗水。完全是因为勤能补拙。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　四年本科求学路上，除了兼职挣学费、然后拿着学费应付专业老师作业，除了刷剧支持奔跑吧兄弟，除了关心李晨范冰冰爱情，除了远程“参加”黄晓明baby婚礼，除了守护我的异地恋、除了网吧守卫我方防御塔以外！我是真的把很大的重心都放在研究前端css，研究怎么把自己的设计稿变成网页上去了。没错，这段就是讽刺，我大学四年真的浪费掉了。如果大学学四年前端，出来后我自己就造框架了！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　但事实也确实是我把中心放在了写网页上。最后毕业设计到我们那一年，好巧不巧的有网页设计选题，我选啥？我当然选网页，剩下几个选题：做动画（老师嫌弃我），拍电影（我自己嫌弃我自己），做二维动画（不是我的爱好不是我的菜）。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　强势分析了一波如上的因果后，就可以得出，自己选择前端的另一个原因：自己大学的时候接触代码，并且在班级乃至系列“傲视群雄”（哎，别提多煞笔），加之项目加持，简历上写的好看。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　至于别的原因，就是不太重要的其一是自己的好奇心，好奇网页是怎么做成的，代码是怎么发布的，我们是怎么看到的效果。对这一行业饱含求知欲。对未知的憧憬和渴望麻醉了我那本来就不爱思考的大脑。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　还很有冲击力的是，心机的我在招聘网上对比过两个行业的薪资。无非前端钱相对来说多，纠其根本是目光短浅。现在才知道，前端起步高，上升难。而设计起步虽然平稳，但是上升很快。经验不是白积累的，有了作品很好说话。不像前端，拿着作品过去，还要被问底层原理。。。心痛！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　总之，各种机缘巧合吧，我顺着自己世界时代的潮流，一步一步走自己最想走的那一步，没有任何规划，走到了现在这个鬼样子。但凡我当时有点远见，坚持一下设计，没准我现在会在设计的社区里，写文章感叹自己为什么没有选前端，而是做苦逼的设计（设计师别打我）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果说我现在后悔了肯定是会后悔，因为我看到那些美到爆的设计图我也会想如果当初自己坚持一下说不定也可以做出来这样的人间精品。后悔归后悔，既然你选择了前端，也不能再变了。如果这条路上再闯不出一个头破血流，也对不起自己放弃的设计。成功这条路上，没有什么天赋不天赋的加持，后天培养和发奋才是王道。我只是没有静下心来沉淀自己。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　写到这里突然想问自己：&lt;/span&gt;&lt;span&gt;成功对于我来说是什么？竟没有一个答案。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;span&gt;为什么现在坚持不下去了？&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　那么，当初自己学习新知识的时候真的就跟打了鸡血一样。为什么现在萎了？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　最近处于低迷期，晚上看电视白天上班犯困，领导走了也不知道自己该干嘛。学习计划算有也算没有，是因为列的计划要不然是不去做要不然就是30%后换另一个去做，感学了觉没用，急于求成。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;总结一批：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　当初打鸡血的原因&lt;/strong&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　有压力：毕业压力刺激、家庭困境压迫&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　有兴趣：很多东西都不知道，css简单实现布局很有趣，各种新知识很好奇&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　开心学习： 不知道要学那么多东西，html+css学的很开心，笔记做得很详细&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　无检验有成就感： 自己学的，只是表面上实现，没人问我怎么实现自己也不关心。只是看到自己做的很有成就感，不管内部原理工作机制。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　荣耀： 所有的同学都要向我请教作业问题，甚至抄我的代码。我当老师助手了可以&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　静心： 就想着学好了实现项目、实现自己的要的页面。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　现在萎靡的原因：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　无压力：工作稳定安逸、家庭美满，和谐幸福&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　无兴趣：基本工作项目都能应付，来回也就那么几件事，啰嗦、麻烦，没意思。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　痛苦： 一直在学一直在学，学了语言不算还有成千上万的库和框架推陈出新&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　有检验强烈的挫败感：明明是自己亲手独立承担的项目，为什么问原理自己都不知道？&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　丢人： 面试一问三不知真的很丢人。工作中还要改bug解决难题到深夜。学了那么多为什么还是什么都不会，什么都解决补了？！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;　　心乱： 就想着赶紧学了跳槽。学习是着急的事吗？！&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span&gt;知道了原因就要&lt;strong&gt;解决问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt; &lt;span&gt;现在颓废主要是拉锯战皮了，针对这一点要去快乐的学习。不要跟拉开的工一样，张弛有度才能持久。玩也不要责备自己，不然把弦儿蹦的太紧反倒对自己长期发展不利。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; &lt;span&gt;要该吃吃该喝喝该玩玩，但是真正该认真学习做项目的时候一定打起100%精神来，一定要认真对待，写好自己的每一行代码。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; &lt;span&gt;不要怀疑自己，面试有答不上来很正常。记住自己不会的这个范围或者点，正好可以查漏补缺，就当考试一样对待，曾经最会应付考试了不是吗？！&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; &lt;span&gt;平时要有意识地学原理知识，不要只停留在不会了查api的知其然不知其所以然的境地。做出的效果究竟是哪几个关键代码起的作用要搞明白。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; &lt;span&gt;不要急于求成，今天做的计划就尽善尽美的做完，但是不要列的太多，一扫而过费时间还记不住，就没什么意义。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;justify&quot;&gt; &lt;span&gt;站起来继续走，但是要吃好喝好休息好，学的时候做好背好，最后才能收获好。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span&gt;制定计划&lt;/span&gt;&lt;/h3&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;我还没想好，下文吧。。。其实就是想发发牢骚，记录一下现在的状态。也好给后边的计划一个分析的资料。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;2018-08-07  22:22:23&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 07 Aug 2018 14:18:00 +0000</pubDate>
<dc:creator>郭菊锋</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/padding1015/p/9439884.html</dc:identifier>
</item>
<item>
<title>【WebSocket】---实现游戏公告案例 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9438954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9438954.html</guid>
<description>&lt;p&gt;实现功能：游戏管理里发布游戏公告，其它游戏玩家页面能够马上接受到游戏公告信息。&lt;/p&gt;
&lt;p&gt;下面直接上代码案例，这里主要展示关键代码，案例源码后期我会上传到gitHub。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、案例&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;1、pom.xml文件&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;主要是添加springBoot和webSocket相关jar包，和一些辅助工具jar包(注意我采用的是springBoot2.1.0版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('505ee011-59f6-4440-94f3-78f8af2a1f15')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_505ee011-59f6-4440-94f3-78f8af2a1f15&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_505ee011-59f6-4440-94f3-78f8af2a1f15&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('505ee011-59f6-4440-94f3-78f8af2a1f15',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_505ee011-59f6-4440-94f3-78f8af2a1f15&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.jincou.websocket&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;websocketstudy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;websocketstudy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.0.BUILD-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;springboot和websocket整合包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;辅助包&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.webjars&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;webjars-locator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.32-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.webjars&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;sockjs-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.webjars&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;stomp-websocket&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.3.3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.webjars&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;bootstrap&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.webjars&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jquery&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring Snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://repo.spring.io/snapshot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-milestones&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring Milestones&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://repo.spring.io/milestone&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring Snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://repo.spring.io/snapshot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-milestones&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring Milestones&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://repo.spring.io/milestone&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;2、WebSocketConfig&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt; 这个是websocket配置中心，配置一些核心配置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.messaging.simp.config.MessageBrokerRegistry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.socket.config.annotation.StompEndpointRegistry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

&lt;span&gt;@Configuration
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注解用于开启使用STOMP协议来传输基于代理（MessageBroker）的消息，这时候控制器（controller）开始支持@MessageMapping,就像是使用@requestMapping一样。&lt;/span&gt;
&lt;span&gt;@EnableWebSocketMessageBroker
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WebSocketConfig &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; WebSocketMessageBrokerConfigurer {


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 注册端点，发布或者订阅消息的时候需要连接此端点
     * setAllowedOrigins 非必须，*表示允许其他域进行连接
     * withSockJS  表示开始sockejs支持
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; registerStompEndpoints(StompEndpointRegistry registry) {

        registry.addEndpoint(&lt;/span&gt;&quot;/&lt;span&gt;endpoint-websocket&lt;/span&gt;&quot;).setAllowedOrigins(&quot;*&quot;&lt;span&gt;).withSockJS();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 配置消息代理(中介)
     * enableSimpleBroker 服务端推送给客户端的路径前缀
     * setApplicationDestinationPrefixes  客户端发送数据给服务器端的一个前缀
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureMessageBroker(MessageBrokerRegistry registry) {

        registry.enableSimpleBroker(&lt;/span&gt;&quot;&lt;span&gt;/topic&lt;/span&gt;&quot;&lt;span&gt;);
        registry.setApplicationDestinationPrefixes(&lt;/span&gt;&quot;&lt;span&gt;/app&lt;/span&gt;&quot;&lt;span&gt;);

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;3、GameInfoController&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  管理员发布公告消息对应的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 *模拟游戏公告
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GameInfoController {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@MessageMapping和@RequestMapping功能类似，用于设置URL映射地址，浏览器向服务器发起请求，需要通过该地址。
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果服务器接受到了消息，就会对订阅了@SendTo括号中的地址传送消息。&lt;/span&gt;
    &lt;span&gt;@MessageMapping&lt;/span&gt;(&quot;/gonggao/chat&quot;&lt;span&gt;)
    &lt;span&gt;@SendTo(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;/topic/game_chat&quot;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OutMessage gameInfo(InMessage message){

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OutMessage(message.getContent());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;4、管理员页面和用户页面&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt; admin页面和user页面唯一的区别就是管理员多一个发送公告的权限，其它都一样，user1和user2完全一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）admin.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5ead0c90-9cb2-4318-b516-00c6fc5c655c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5ead0c90-9cb2-4318-b516-00c6fc5c655c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5ead0c90-9cb2-4318-b516-00c6fc5c655c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5ead0c90-9cb2-4318-b516-00c6fc5c655c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5ead0c90-9cb2-4318-b516-00c6fc5c655c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello WebSocket&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/gonggao/main.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/jquery/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/sockjs-client/sockjs.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/stomp-websocket/stomp.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/gonggao/app.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: #ff0000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Seems your browser doesn't support Javascript! Websocket relies on Javascript being
    enabled. Please enable
    Javascript and reload this page!&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;main-content&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-inline&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;connect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;建立连接通道:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Connect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;disconnect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; disabled&lt;/span&gt;&lt;span&gt;=&quot;disabled&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Disconnect
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-inline&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;发布新公告&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入...&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;send&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;发布&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;conversation&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;table table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;游戏公告内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;notice&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;admin.html&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（2）user1.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4d8f4d92-44b7-4fc2-915a-438f530d002c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_4d8f4d92-44b7-4fc2-915a-438f530d002c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4d8f4d92-44b7-4fc2-915a-438f530d002c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4d8f4d92-44b7-4fc2-915a-438f530d002c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4d8f4d92-44b7-4fc2-915a-438f530d002c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello WebSocket&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/gonggao/main.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/jquery/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/sockjs-client/sockjs.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/stomp-websocket/stomp.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/gonggao/app.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: #ff0000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Seems your browser doesn't support Javascript! Websocket relies on Javascript being
    enabled. Please enable
    Javascript and reload this page!&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;main-content&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-inline&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;connect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;建立连接通道:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Connect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;disconnect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; disabled&lt;/span&gt;&lt;span&gt;=&quot;disabled&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Disconnect
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;conversation&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;table table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;游戏公告内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;notice&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;user1.html&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; (3）user2.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('74158e78-447a-425c-b8c7-901f3e26a09e')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_74158e78-447a-425c-b8c7-901f3e26a09e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_74158e78-447a-425c-b8c7-901f3e26a09e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('74158e78-447a-425c-b8c7-901f3e26a09e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_74158e78-447a-425c-b8c7-901f3e26a09e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello WebSocket&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/gonggao/main.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/jquery/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/sockjs-client/sockjs.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/webjars/stomp-websocket/stomp.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/gonggao/app.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: #ff0000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Seems your browser doesn't support Javascript! Websocket relies on Javascript being
    enabled. Please enable
    Javascript and reload this page!&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;main-content&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-inline&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;connect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;建立连接通道:&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;connect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Connect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;disconnect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; disabled&lt;/span&gt;&lt;span&gt;=&quot;disabled&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Disconnect
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;conversation&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;table table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;游戏公告内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;notice&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;user2.html&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;5.app.js&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  这个是客户端连接websocket的核心，通过html的点击事件来完成。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; stompClient = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个方法仅仅是用来改变样式，不是核心&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setConnected(connected) {
    $(&lt;/span&gt;&quot;#connect&quot;).prop(&quot;disabled&quot;&lt;span&gt;, connected);
    $(&lt;/span&gt;&quot;#disconnect&quot;).prop(&quot;disabled&quot;, !&lt;span&gt;connected);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (connected) {
        $(&lt;/span&gt;&quot;#conversation&quot;&lt;span&gt;).show();
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        $(&lt;/span&gt;&quot;#conversation&quot;&lt;span&gt;).hide();
    }
    $(&lt;/span&gt;&quot;#notice&quot;).html(&quot;&quot;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、建立连接（先连接服务端配置文件中的基站，建立连接，然后订阅服务器目录消息&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; connect() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、连接SockJS的endpoint是“endpoint-websocket”，与后台代码中注册的endpoint要一样。&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; socket = &lt;span&gt;new&lt;/span&gt; SockJS('/endpoint-websocket'&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、用stom进行包装，规范协议&lt;/span&gt;
    stompClient =&lt;span&gt; Stomp.over(socket);
    stompClient.connect({}, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (frame) {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、建立通讯&lt;/span&gt;
        setConnected(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        console.log(&lt;/span&gt;'Connected: ' +&lt;span&gt; frame);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、通过stompClient.subscribe（）订阅服务器的目标是'/topic/game_chat'发送过来的地址，与@SendTo中的地址对应。&lt;/span&gt;
        stompClient.subscribe('/topic/game_chat', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (result) {
            console.info(result)
            showContent(JSON.parse(result.body));
        });
    });
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、关闭连接&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; disconnect() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (stompClient !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        stompClient.disconnect();
    }
    setConnected(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
    console.log(&lt;/span&gt;&quot;Disconnected&quot;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、游戏管理员发送公告信息（这个也是游戏用户所没有功能，其它都一样）&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sendName() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、通过stompClient.send 向/app/gonggao/chat 目标 发送消息,这个是在控制器的@messageMapping 中定义的。(/app为前缀，配置里配置）&lt;/span&gt;
    stompClient.send(&quot;/app/gonggao/chat&quot;, {}, JSON.stringify({'content': $(&quot;#content&quot;&lt;span&gt;).val()}));
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、订阅的消息显示在客户端指定位置&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; showContent(body) {
    $(&lt;/span&gt;&quot;#notice&quot;).append(&quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&quot; + body.content + &quot;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&quot;+&lt;span&gt;new&lt;/span&gt; Date(body.time).toLocaleString()+&quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;&lt;span&gt;);
}


$(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    $(&lt;/span&gt;&quot;form&quot;).on('submit', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
        e.preventDefault();
    });
    $( &lt;/span&gt;&quot;#connect&quot; ).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { connect(); });
    $( &lt;/span&gt;&quot;#disconnect&quot; ).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { disconnect(); });
    $( &lt;/span&gt;&quot;#send&quot; ).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { sendName(); });
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;6、查看运行结果&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180807200620125-1637294460.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;7、小总结&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;  首先很明显看的出，websocket最大的优点，就是可以服务端主动向客户端发送消息，而此前http只能是客户端向服务端发送请求。&lt;/p&gt;
&lt;p&gt;   gitHub源码等我有关其它案例一起整理好后，再来留地址。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;想太多，做太少，中间的落差就是烦恼。想没有烦恼，要么别想，要么多做。中校【19】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 07 Aug 2018 13:44:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9438954.html</dc:identifier>
</item>
<item>
<title>SpringBoot之Mybatis操作中使用Redis做缓存 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/9439381.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/9439381.html</guid>
<description>&lt;p&gt;上一博客学习了SpringBoot集成Redis,今天这篇博客学习下Mybatis操作中使用Redis做缓存。这里其实主要学习几个注解：@CachePut、@Cacheable、@CacheEvict、@CacheConfig。&lt;/p&gt;
&lt;p&gt;一、基础知识&lt;/p&gt;
&lt;p&gt;@Cacheable&lt;/p&gt;
&lt;p&gt;@Cacheable 的作用 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;解释&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;value&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的名称，在 spring 配置文件中定义，必须指定至少一个&lt;/td&gt;
&lt;td&gt;例如:&lt;br/&gt;@Cacheable(value=”mycache”)&lt;br/&gt;@Cacheable(value={”cache1”,”cache2”}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;key&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合&lt;/td&gt;
&lt;td&gt;@Cacheable(value=”testcache”,key=”#userName”)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;condition&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存&lt;/td&gt;
&lt;td&gt;@Cacheable(value=”testcache”,condition=”#userName.length()&amp;gt;2”)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; @CachePut&lt;/p&gt;
&lt;p&gt;@CachePut 的作用 主要针对方法配置，能够根据&lt;span&gt;方法的返回值&lt;/span&gt;对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用，在其他地方写的是根据&lt;span&gt;方法的请求参数&lt;/span&gt;对其结果进行缓存,实际是按方法返回值进行缓存的,这里我就遇到了一个坑，我开始的时候是在Mybatis的Mapper层进行缓存的，如下面的代码。但是缓存到Redis的是Null值，今天看了一博友的博客，交流了一下，才知道它缓存的是方法的返回值，如果把下面update的返回值该为int，在redis中保存的是int类型，报的错误是int无法转换成User对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    @CachePut(value=&quot;user&quot;,key = &quot;#p0.id&quot;&lt;span&gt;)
    @Update({&lt;/span&gt;&quot;UPDATE user SET name=#{name},age=#{age} WHERE id =#{id}&quot;&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; update(User user);
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;解释&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;value&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的名称，在 spring 配置文件中定义，必须指定至少一个&lt;/td&gt;
&lt;td&gt;@CachePut(value=”my cache”)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;key&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合&lt;/td&gt;
&lt;td&gt;@CachePut(value=”testcache”,key=”#userName”)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;condition&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存&lt;/td&gt;
&lt;td&gt;@CachePut(value=”testcache”,condition=”#userName.length()&amp;gt;2”)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; @CachEvict&lt;/p&gt;
&lt;p&gt; @CachEvict 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;解释&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;14&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;value&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的名称，在 spring 配置文件中定义，必须指定至少一个&lt;/td&gt;
&lt;td&gt;@CacheEvict(value=”my cache”)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;key&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合&lt;/td&gt;
&lt;td&gt;@CacheEvict(value=”testcache”,key=”#userName”)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;condition&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存&lt;/td&gt;
&lt;td&gt;@CacheEvict(value=”testcache”,condition=”#userName.length()&amp;gt;2”)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;allEntries&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存&lt;/td&gt;
&lt;td&gt;@CachEvict(value=”testcache”,allEntries=true)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;beforeInvocation&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存&lt;/td&gt;
&lt;td&gt;@CachEvict(value=”testcache”，beforeInvocation=true)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;@CacheConfig&lt;/p&gt;
&lt;p&gt;所有的@Cacheable()里面都有一个value＝“xxx”的属性，这显然如果方法多了，写起来也是挺累的，如果可以一次性声明完 那就省事了，有了@CacheConfig这个配置，@CacheConfig is a class-level annotation that allows to share the cache names，如果你在你的方法写别的名字，那么依然以方法的名字为准。&lt;/p&gt;
&lt;p&gt;二、实例&lt;/p&gt;
&lt;p&gt;还是在上一博客demo的基础上进行修改，原本是在Mybatis的Mapper层上增加cache注解，但由于update返回值为void,所以这里又增加了一services层,mapper层算是DAO层。这里使用了@CacheConfig注解指定类级别的value属性,如果在方法上定义就以方法为主，就近原则。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.services;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cache.annotation.CacheConfig;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cache.annotation.CacheEvict;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cache.annotation.CachePut;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cache.annotation.Cacheable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.model.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.write.mapper.WriteUserMapper;


@Service
@CacheConfig(cacheNames&lt;/span&gt;=&quot;user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserServices {
    
    @Autowired 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; WriteUserMapper writeUserMapper;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; getAll()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; writeUserMapper.getAll();
    }
    
    @Cacheable(key &lt;/span&gt;= &quot;#p0&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getOne(String id)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; writeUserMapper.getOne(id);
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; insert(User user)
    {
        writeUserMapper.insert(user);
    }
    
    @CachePut(value&lt;/span&gt;=&quot;user&quot;,key = &quot;#p0.id&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User update(User user)
    {
        writeUserMapper.update(user);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
    }
    
    @CacheEvict(value&lt;/span&gt;=&quot;user&quot;,key =&quot;#p0&quot;,allEntries=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; delete(String id)
    {
        writeUserMapper.delete(id);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UserController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_e5f2e8f7-430e-4b15-a8c8-74b23855e4cf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e5f2e8f7-430e-4b15-a8c8-74b23855e4cf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e5f2e8f7-430e-4b15-a8c8-74b23855e4cf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.redis.core.RedisTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.redis.core.StringRedisTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.PathVariable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.model.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.model.UserSexEnum;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.read.mapper.ReadUserMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.services.UserServices;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.write.mapper.WriteUserMapper;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; io.lettuce.core.dynamic.annotation.Param;

@Controller
@RequestMapping(&lt;/span&gt;&quot;/user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; WriteUserMapper userMapperWrite;
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ReadUserMapper userMapperRead;
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; StringRedisTemplate stringRedisTemplate;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; RedisTemplate&amp;lt;String, Serializable&amp;gt;&lt;span&gt; redisCacheTemplate;
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserServices userServices;
    
    @RequestMapping(value &lt;/span&gt;= &quot;/alluser.do&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getallusers(Model model) {
       List&lt;/span&gt;&amp;lt;User&amp;gt; users=&lt;span&gt;userServices.getAll();
       model.addAttribute(&lt;/span&gt;&quot;users&quot;&lt;span&gt;, users);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       stringRedisTemplate.opsForValue().set(&quot;keytest&quot;, &quot;cuiyw&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       final String keytest = stringRedisTemplate.opsForValue().get(&quot;keytest&quot;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       model.addAttribute(&quot;keytest&quot;, keytest);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       String key = &quot;1857XXXX040&quot;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       redisCacheTemplate.opsForValue().set(key, new User(key, &quot;cuiyw&quot;, 18, UserSexEnum.MAN));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 对应 String（字符串）
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       final User user = (User) redisCacheTemplate.opsForValue().get(key);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       model.addAttribute(&quot;user&quot;, user);&lt;/span&gt;
       &lt;span&gt;return&lt;/span&gt; &quot;userlist&quot;&lt;span&gt;;
    }
    @RequestMapping(value &lt;/span&gt;= &quot;/insert.do&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String adduser(Model model) {
       User user&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
       user.setName(&lt;/span&gt;&quot;cuiyw&quot;&lt;span&gt;);
       user.setAge(&lt;/span&gt;27&lt;span&gt;);    
       userServices.insert(user);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       List&amp;lt;User&amp;gt; users=userMapperWrite.getAll();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       model.addAttribute(&quot;users&quot;, users);&lt;/span&gt;
       &lt;span&gt;return&lt;/span&gt; &quot;forward:/user/alluser.do&quot;&lt;span&gt;;  

    }
    @RequestMapping(value &lt;/span&gt;= &quot;/getuserbyid.do/{id}&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ModelAndView GetUserById(@PathVariable(&quot;id&quot;&lt;span&gt;) String id) {
       System.out.println(id);
       User user&lt;/span&gt;=&lt;span&gt;userServices.getOne(id);
       System.out.println(user.toString());
       ModelAndView modelAndView &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ModelAndView(&quot;userlist&quot;&lt;span&gt;); 
      

       modelAndView.addObject(&lt;/span&gt;&quot;user&quot;&lt;span&gt;, user);
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;  

    }
    @RequestMapping(value &lt;/span&gt;= &quot;/deleteuserbyid.do/{id}&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String DeleteUserById(@PathVariable(&quot;id&quot;&lt;span&gt;) String id) {
        userServices.delete(id);
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;forward:/user/alluser.do&quot;&lt;span&gt;;  
      

    }
    @RequestMapping(value &lt;/span&gt;= &quot;/updateuserbyid.do/{id}&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String UpdateUserByid(@PathVariable(&quot;id&quot;&lt;span&gt;) String id) {
        User user&lt;/span&gt;=&lt;span&gt;userServices.getOne(id);
        System.out.println(user.toString());
        user.setAge(&lt;/span&gt;28&lt;span&gt;);
        System.out.println(user.toString());
        userServices.update(user);
         System.out.println(user.toString());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;forward:/user/alluser.do&quot;&lt;span&gt;;  

       
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这里先输入http://localhost:8080/user/getuserbyid.do/17通过getOne()方法在redis中缓存一个user。通过redis-cli可以看到user::17已在redis中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733213/201808/733213-20180807212204755-373588315.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 然后通过update()方法输入http://localhost:8080/user/updateuserbyid.do/17修改user,此时年龄改为了28，数据库的值也会变了。然后多次使用http://localhost:8080/user/updateuserbyid.do/17这个url刷新浏览器，此时是不会报错的，如果是在mapper中使用@Cacheput时由于保存的是null就会导致报错。&lt;/p&gt;
&lt;p&gt;最后通过delete()方法输入http://localhost:8080/user/deleteuserbyid.do/17删除redis和数据库中的user对象.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733213/201808/733213-20180807213234284-1369218492.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，基本把这4个注解大致了解了一下，这里还有一个地方需要补充，就是如果按照上面运行还是不行的，它依然找不到UserServices,在UserController中找不到这个类，还需要在main方法上面@ComponentScan注解加上扫描com.example.services。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages={&quot;com.example.config&quot;,&quot;com.example.demo&quot;,&quot;com.example.services&quot;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后来一碗鸡汤，记录下今天看抖音听到的一句话，还挺有道理。&lt;/p&gt;
&lt;p&gt;为什么大多数人宁愿吃生活的苦，而不愿意吃学习的苦?因为学习的苦需要自己主动去吃，而生活的苦你躺着它就来了。&lt;/p&gt;

</description>
<pubDate>Tue, 07 Aug 2018 13:43:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/9439381.html</dc:identifier>
</item>
<item>
<title>使用递归解决斐波那契数列的性能问题 - .智子</title>
<link>http://www.cnblogs.com/mlw1814011067/p/9439651.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mlw1814011067/p/9439651.html</guid>
<description>&lt;p&gt;我们知道斐波那契数列（也称作兔子数列）  1,1,2,3,5,8,13,21,34。。。。。&lt;/p&gt;
&lt;p&gt;前两位数固定是1，之后每一位数都是前两位数的之和，这样的数列就是斐波那契数列&lt;/p&gt;
&lt;p&gt;那么我们要求这样的数列，就必须要求n-1和n-2位数&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    function getFB(n){
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(n == &lt;span&gt;1&lt;/span&gt; || n == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;){   &lt;br/&gt;　　　　// 这里我们先保持前两位数是1
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
      }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getFB(n-&lt;span&gt;1&lt;/span&gt;) + getFB(n-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
      }
    }
    console.log(getFB(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;求斐波那契数列的第十位   在控制台中打印出来的是 55&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1404918/201808/1404918-20180807211954427-74658389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;那么  第五十位呢？。。。。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;很好，我的浏览器卡死崩溃了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由此我们可知，这样求斐波那契数列实在是太浪费性能了&lt;/p&gt;
&lt;p&gt;既然有问题我们就来解决它&lt;/p&gt;
&lt;p&gt;那么   求斐波那契数列的时候是为什么会浪费性能呢？&lt;/p&gt;

&lt;p&gt;原因就是浏览器求了太多重复项&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; i = 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个变量,用来记录调用getFB()方法的次数&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getFB(n){
      i&lt;/span&gt;++&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(n == 1 || n == 2&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;;
      }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getFB(n-1) + getFB(n-2&lt;span&gt;);
      }
    }
    console.log(getFB(2&lt;/span&gt;0&lt;span&gt;));&lt;/span&gt;// 我的浏览器求不出来这么多项 所以换了小一点的数字
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;    console.log(i);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;求斐波那契数列的第20位会调用13529次函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1404918/201808/1404918-20180807213239269-1064994443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;那么求第30位呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1404918/201808/1404918-20180807213215620-1740920600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;多达16万次&lt;/p&gt;
&lt;p&gt; 第40位呢？第50 位呢？。。。。。。。&lt;/p&gt;
&lt;p&gt; 所以这个样子实在是太浪费性能了&lt;/p&gt;

&lt;p&gt;解决问题的思路：我们把已经求过的项用一个变量保存起来，如果下次还需要用到这个项就直接取出来用，而不是再去调用函数&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; i = 0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个变量i,记录调用getFB这个函数的次数.&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个对象obj,用来保存已经求过的项.&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getFB(n){
      i&lt;/span&gt;++&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;求n位是多少,就先去obj里面看看,之前求过没有,如果之前求过,就直接取出来使用.&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt;(obj[n] !=&lt;span&gt; undefined){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果进到了这里,说明当前这个n位已经求过,已经存进obj里面了&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; obj[n];
      }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果进到这里来了,就说明当前这个n位之前没求过,没求过就求呗.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(n == 1 || n == 2&lt;span&gt;){
          obj[n] &lt;/span&gt;= 1&lt;span&gt;;
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          obj[n] &lt;/span&gt;= getFB(n-1) + getFB(n-2&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; obj[n];
        }
      }
    }

    console.log(getFB(&lt;/span&gt;60&lt;span&gt;));
    console.log(i);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么我们就来看看结果吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1404918/201808/1404918-20180807213814377-480736114.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;斐波那契数列的第60位大的吓人，但是我们却也只调用了117次函数，极大的提高了性能&lt;/p&gt;

</description>
<pubDate>Tue, 07 Aug 2018 13:40:00 +0000</pubDate>
<dc:creator>.智子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mlw1814011067/p/9439651.html</dc:identifier>
</item>
<item>
<title>行内元素和块元素以及行内块元素的特点 - 阿豪的girl</title>
<link>http://www.cnblogs.com/jaelynl/p/9439528.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jaelynl/p/9439528.html</guid>
<description>&lt;h3 id=&quot;h&quot;&gt;一、背景&lt;/h3&gt;
&lt;p&gt;初学html，接触很多标签&lt;code&gt;&amp;lt;h1&amp;gt;、&amp;lt;p&amp;gt;、&amp;lt;span&amp;gt;、&amp;lt;ul&amp;gt;、&amp;lt;em&amp;gt;&lt;/code&gt;等，当写出简单的小页面的时候，例如仅仅是一篇带有标题的文章，标题&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;标签单独一行，不管后面有多大的空间；&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;标签中使用多个&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;给某些词做强调，但是&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;却和&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;中的其他内容同一行，由此，会思考为什么&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;会有这种的不同？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442304/201808/1442304-20180807211802731-28481824.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;h-1&quot;&gt;二、标签的类型（显示模式）&lt;/h3&gt;
&lt;p&gt;想要知道为何不同，得先了解HTML标签的类型。&lt;/p&gt;
&lt;p&gt;HTML标签一般分为块标签和行内标签两种类型，也可以称为&lt;strong&gt;块元素和行内元素&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;上面举例中的&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;标签就是典型的块元素，&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;标签就是一个行内元素。块元素和行内元素的具体特点如下：&lt;/p&gt;
&lt;h3 id=&quot;hblocklevel&quot;&gt;三、块级元素（block-level）&lt;/h3&gt;
&lt;p&gt;块元素会独自占据一整行，或者多行，可以任意设置其大小尺寸，是用于搭建网页布局的必须部分，使网页结构更加紧凑合理。&lt;/p&gt;
&lt;p&gt;块级元素有以下几个特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;总是另起一行（特立独行）&lt;/li&gt;
&lt;li&gt;可以设置其宽度、高度，内外边距&lt;/li&gt;
&lt;li&gt;在不手动设置宽度的情况下，宽度默认为所在容器的100%（即容器宽度）&lt;/li&gt;
&lt;li&gt;可以容纳行内元素和其他块元素。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;常见的块级元素有：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&amp;gt;/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;~&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h6&amp;gt;/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&amp;gt;/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&amp;gt;/&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&amp;gt;等，其中&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&amp;gt;是最常用最典型的块级元素。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;特殊&lt;/strong&gt;：文字类的块级元素不能放块元素，例如&lt;code&gt;&amp;lt;p&amp;gt;/&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;/&amp;lt;dt&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;css language-css hljs&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用以上样式给下面块元素div设置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;html language-html hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&amp;gt;我是块元素2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&amp;gt;我是块元素2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果图见文末。&lt;/p&gt;
&lt;h3 id=&quot;hinlinelevel&quot;&gt;四、行内元素（inline-level）&lt;/h3&gt;
&lt;p&gt;行内元素也称为内联元素，行内元素不占有独立区域，其大小仅仅被动的依赖于自身内容的大小（例如文字和图片），所以一般不能随意设置其宽高、对齐等属性。常用于控制页面中文本的样式。&lt;/p&gt;
&lt;p&gt;行内元素的特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;总是和相邻的行内元素在同一行上（物以类聚）&lt;/li&gt;
&lt;li&gt;设置宽高无效，水平方向的padding和margin属性可以设置，但是垂直方向上的无效。&lt;/li&gt;
&lt;li&gt;默认宽度是他自身内容的宽度。&lt;/li&gt;
&lt;li&gt;行内元素只能容纳其他行内元素或者文本。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;特殊&lt;/strong&gt;：a比较特殊，可以放块级元素，但是链接里面不能再放链接。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;css language-css hljs&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;下面是Html样式&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;html language-html hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;行内元素1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;行内元素2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;行内元素3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;我是行内元素行内元素行内元素4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果图见文末&lt;/p&gt;
&lt;h3 id=&quot;hinlineblock&quot;&gt;五、行内块元素（inline-block）&lt;/h3&gt;
&lt;p&gt;普遍的规则里总有那么几个不一样的，在行内元素中就有那么几个特殊标签，比如&lt;code&gt;&amp;lt;img&amp;gt;/&amp;lt;input&amp;gt;/&amp;lt;td&amp;gt;&lt;/code&gt;,可以给他们设置宽高、对齐属性，我们把这样特殊的一类标签称为行内块元素。行内块元素综合了块元素和行内元素的不同特点。&lt;/p&gt;
&lt;p&gt;行内块元素的特点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;和相邻行内元素在同一行，但是之间会有空白缝隙。&lt;/li&gt;
&lt;li&gt;默认宽度是他本身内容的宽度。&lt;/li&gt;
&lt;li&gt;宽度、高度、行高、外边距以及内边距都可以手动设置。&lt;br/&gt;样式：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code class=&quot;css language-css hljs&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;结构：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;html language-html hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;行内块元素1&quot;&amp;gt; &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;行内块元素行内块元素2行内块元素&quot;&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;综合效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442304/201808/1442304-20180807211751998-1848451680.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;hdisplay&quot;&gt;六、标签显示模式转换（display）&lt;/h3&gt;
&lt;p&gt;既然标签有不同的显示模式，就会有相应的转换办法以应对各种需要。&lt;/p&gt;
&lt;p&gt;display正是我们想要的。&lt;/p&gt;
&lt;p&gt;块元素——&amp;gt;行内元素 ： display:inline;&lt;/p&gt;
&lt;p&gt;行内元素——&amp;gt;块： display:block;&lt;/p&gt;
&lt;p&gt;块、行内元素——&amp;gt;行内块： display: inline-block;&lt;/p&gt;
&lt;h4 id=&quot;h-2&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;总结完他们之间的特点更加清晰，记得更牢，首先在以后遇到当给一个元素设置的宽高无效的时候这就是一个原因，使用display即可解决。&lt;/p&gt;
</description>
<pubDate>Tue, 07 Aug 2018 13:18:00 +0000</pubDate>
<dc:creator>阿豪的girl</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jaelynl/p/9439528.html</dc:identifier>
</item>
</channel>
</rss>