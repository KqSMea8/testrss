<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>spring boot之入门配置（一） - Johnson木木</title>
<link>http://www.cnblogs.com/Johnson-lin/p/8983259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnson-lin/p/8983259.html</guid>
<description>&lt;p&gt;&lt;strong&gt;yml、properties配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　yml相比properties配置文件，yml可以省略不必要的前缀，并且看起来更加的有层次感。推荐使用yml文件。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377046/201805/1377046-20180502231629170-1291885610.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　根据配置文件的配置项获取对应的value，@Value的值必须与配置文件中的配置项一致，使用方法如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377046/201805/1377046-20180502231236995-929587724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;@ConfigurationProperties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　当配置项过多时，可以使用@ConfigurationProperties注解更加的方便。并且可以对不同的配置项进行分组。例如：配置项分为project 和 Johnson两个不同的配置项&lt;/p&gt;
&lt;p&gt;　　@ConfigurationProperties中值对应的前缀。属性名必须与配置项对应。并且实现对应的get、set方法。　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377046/201805/1377046-20180502232547365-1663939338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用方法如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377046/201805/1377046-20180502233030540-2030366638.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Component&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　因为在持久层、业务层和控制层中，分别采用@Repository、@Service和@Controller，因为不清楚这个类是属于哪个层面，又要交给Spring管理，所以就用@Component。&lt;/p&gt;
&lt;p&gt;　　看上图project类和Johnson类可以看到。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多环境配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;在大多数开发中，一般配置项都会把生产环境和测试环境分开。如果都是用同一个配置文件，那么在生产与测试环境之间不断修改配置项会很麻烦，开发效率会很低。&lt;/p&gt;
&lt;p&gt;　　而&lt;strong&gt;spring.profiles.active&lt;/strong&gt;正好可以解决这个问题&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377046/201805/1377046-20180502234055470-1762518234.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：命名需要规范，必须使用符号&quot;-&quot;进行区别文件。&lt;/p&gt;

&lt;p&gt;　　木木只是一个小白，若那里写的不好或者有更好的建议，请留言 或 发到我的QQ邮箱 821312534@qq.com 。谢谢大家啦~(*^▽^*)&lt;/p&gt;
</description>
<pubDate>Wed, 02 May 2018 15:47:00 +0000</pubDate>
<dc:creator>Johnson木木</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Johnson-lin/p/8983259.html</dc:identifier>
</item>
<item>
<title>浮点数据有损压缩算法 附完整C代码 - cpuimage</title>
<link>http://www.cnblogs.com/cpuimage/p/8983236.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cpuimage/p/8983236.html</guid>
<description>&lt;p&gt;在几年前的时候在做修图APP算法的时候，&lt;/p&gt;
&lt;p&gt;曾经一度想过对3D Lut 预设数据进行压缩，&lt;/p&gt;
&lt;p&gt;主要用于提升用户体验。&lt;/p&gt;
&lt;p&gt;关于3d lut算法开源的资源也挺多的，就不多做科普了。&lt;/p&gt;
&lt;p&gt;有兴趣的朋友，可以去查阅下&lt;a href=&quot;https://ffmpeg.org/&quot; target=&quot;_blank&quot;&gt;ffmepg&lt;/a&gt;项目相关实现代码。&lt;/p&gt;
&lt;p&gt;最早接触3d lut算法是2014年逆向 VSCO Cam 胶片算法的时候，&lt;/p&gt;
&lt;p&gt;当然一开始我也不知道它的算法是3d lut，&lt;/p&gt;
&lt;p&gt;是反反复复编写各个版本，算法优化，&lt;/p&gt;
&lt;p&gt;直到有一天我突然想起一个常量特别奇怪，&lt;/p&gt;
&lt;p&gt;后来有一段时间在看3d lut算法资料的时候，觉得算法特别熟悉。&lt;/p&gt;
&lt;p&gt;后来自然也就知道啥情况了。&lt;/p&gt;
&lt;p&gt;那时候在做一款APP，考虑压缩预设资源的时候，&lt;/p&gt;
&lt;p&gt;当时由于项目匆忙，采用LZ压缩算法，自然压缩比并不高。&lt;/p&gt;
&lt;p&gt;导致预设文件偏大，有点占资源体积。&lt;/p&gt;
&lt;p&gt;原来预想要做一下浮点类型的压缩算法的，这一拖，就没后文了。&lt;/p&gt;
&lt;p&gt;很多人很好奇胶片滤镜算法，是怎么实现的，&lt;/p&gt;
&lt;p&gt;网上流传了很多个版本，作为一名资深安全研究员，我就说一下大概情况。&lt;/p&gt;
&lt;p&gt;早期绝大数APP采用了 2d lut去模拟 VSCO Cam的效果，&lt;/p&gt;
&lt;p&gt;思路比较简单，就是做一个2D颜色映射表进行插值实现，一般是512*512*3 的颜色表，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/BradLarson/GPUImage&quot; target=&quot;_blank&quot;&gt;GPUImage&lt;/a&gt;里面有具体实现，感兴趣的可以去看下，这里也不展开了。&lt;/p&gt;
&lt;p&gt;我这边还保留着当年原汁原味的VSCO Cam胶片算法。&lt;/p&gt;
&lt;p&gt;再到近些年，深度学习 神经网络大火，笔者在做手机端前向传播的时候，&lt;/p&gt;
&lt;p&gt;再一次碰到类似的问题。&lt;/p&gt;
&lt;p&gt;模型量化，模型压缩等等。&lt;/p&gt;
&lt;p&gt;模型量化的思路其实也挺简单的，例如32位量化到16位，&lt;/p&gt;
&lt;p&gt;或者量化到8位，通过降低精度获取一定的性能提升和资源压缩。&lt;/p&gt;
&lt;p&gt;就量化一个操作，就可以做到既提升性能又压缩模型体积，&lt;/p&gt;
&lt;p&gt;所以肯定是比较不错的方案。&lt;/p&gt;
&lt;p&gt;当然在IOS下还可以考虑采用内存映射的方式，&lt;/p&gt;
&lt;p&gt;将物理空间映射为内存空间，以减少内存占用之类的。&lt;/p&gt;
&lt;p&gt;当然这种方式必须是操作系统的文件类型支持。&lt;/p&gt;
&lt;p&gt;毫无疑问，再一次碰到浮点数据的压缩问题。&lt;/p&gt;
&lt;p&gt;现在绝大多数深度学习模型都是采用32位浮点进行存储权重的。&lt;/p&gt;
&lt;p&gt;但是很奇怪，好像没看到有谁针对浮点数据进行压缩处理。&lt;/p&gt;

&lt;p&gt;难不成浮点数据真的没法压缩了？！&lt;/p&gt;

&lt;p&gt;不然，不然，在之前做图像算法的时候，俺对频域算法特别感兴趣，&lt;/p&gt;
&lt;p&gt;因为这种转换思维角度的处理方式，的确巧妙。&lt;/p&gt;
&lt;p&gt;看了网上很多资料，感觉没多少人能用通俗的语言解释频域。&lt;/p&gt;
&lt;p&gt;我就大言不惭，大话一番。&lt;/p&gt;
&lt;p&gt;其实频域核心是频，也就是符合一定的频次规律。&lt;/p&gt;
&lt;p&gt;有点像计数法，举个例子：八个8 可以记为88888888 也可以记为88，也可以直接记为8.&lt;/p&gt;
&lt;p&gt;这就是频，而频域是什么？&lt;/p&gt;
&lt;p&gt;频域或者说频率，其实就是一种描述特定频率波率概率乃至频域的表达方式。&lt;/p&gt;
&lt;p&gt;换句更通俗的话来说，就是 基于特定表达标准进行计数。&lt;/p&gt;
&lt;p&gt;而傅里叶变换也好，余弦变换也好，这里的变换其实就是指的一种表达方式。&lt;/p&gt;
&lt;p&gt;有点像，你跟你女朋友约定一种暗号，例如抛个媚眼，表达的是，亲爱的，你懂的。&lt;/p&gt;
&lt;p&gt;好了，解释暂告一段落，往下就有点儿童不宜了。&lt;/p&gt;
&lt;p&gt;而最经典的压缩算法，莫过于jpeg，这个格式已经家喻户晓了。&lt;/p&gt;
&lt;p&gt;虽然也有后起之秀 WebP FLIF 等格式，&lt;/p&gt;
&lt;p&gt;但jpeg跟mp3一样成为一个时代的默认标记。&lt;/p&gt;
&lt;p&gt;而jpeg就是一种基于dct8x8变换的压缩算法。&lt;/p&gt;
&lt;p&gt;具体也不展开了，有兴趣可以去看看jpeg编解码相关。&lt;/p&gt;
&lt;p&gt;例如:&lt;a href=&quot;https://github.com/cpuimage/TinyJPEG&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/TinyJPEG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这铺垫有点长，所以是不是可以基于dct 8x8 对浮点数据进行有损压缩呢？&lt;/p&gt;
&lt;p&gt;答案，没错就是这么简单粗暴。&lt;/p&gt;

&lt;p&gt; 数据长度 :8*8*8&lt;/p&gt;
&lt;p&gt;按照顺序从 0 - 511 填充数据。&lt;/p&gt;
&lt;p&gt;这里给出一个参考数据：&lt;/p&gt;
&lt;p&gt;zlib 压缩:&lt;br/&gt;miniz.c version: 10.0.2&lt;br/&gt;Compressed from 2048 to 730 bytes&lt;br/&gt;Decompressed from 730 to 2048 bytes&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;dct+ zlib 压缩:&lt;br/&gt;miniz.c version: 10.0.2&lt;br/&gt;Compressed from 2048 to 116 bytes&lt;br/&gt;Decompressed from 116 to 2048 bytes&lt;/p&gt;
&lt;p&gt;如果符合一定的DCT 规律，dct+zlib 的压缩比，极高。&lt;/p&gt;
&lt;p&gt;如果填充的数据是没有规律的随机数据，大多数情况下zlib压缩比高一些。&lt;/p&gt;
&lt;p&gt;而jpeg编码中有另一个技巧，就是采用颜色空间，&lt;/p&gt;
&lt;p&gt;RGB转换为YCBCR空间，来获取更高的压缩比。&lt;/p&gt;
&lt;p&gt;当然也会有一定的信息损失，好像说得有点多了。&lt;/p&gt;
&lt;p&gt;打住打住。。&lt;/p&gt;
&lt;p&gt;附上完整示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;

#include &lt;/span&gt;&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdint.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;miniz.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dct.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdint.h&amp;gt;

&lt;span&gt;int&lt;/span&gt; test_miniz(&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;s_pStr, uLong data_len) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; cmp_status;
    uLong src_len &lt;/span&gt;=&lt;span&gt; data_len;
    uLong cmp_len &lt;/span&gt;=&lt;span&gt; compressBound(src_len);
    uLong uncomp_len &lt;/span&gt;=&lt;span&gt; src_len;
    uint8_t &lt;/span&gt;*pCmp, *&lt;span&gt;pUncomp;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;miniz.c version: %s\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MZ_VERSION);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Allocate buffers to hold compressed and uncompressed data.&lt;/span&gt;
    pCmp = (mz_uint8 *) &lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;((size_t) cmp_len);
    pUncomp &lt;/span&gt;= (mz_uint8 *) &lt;span&gt;malloc&lt;/span&gt;&lt;span&gt;((size_t) src_len);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((!pCmp) || (!&lt;span&gt;pUncomp)) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Out of memory!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; EXIT_FAILURE;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Compress the string.&lt;/span&gt;
    cmp_status = compress(pCmp, &amp;amp;cmp_len, (&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;) s_pStr, src_len);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cmp_status !=&lt;span&gt; Z_OK) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;compress() failed!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pCmp);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pUncomp);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; EXIT_FAILURE;
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Compressed from %u to %u bytes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, (mz_uint32) src_len, (mz_uint32) cmp_len);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Decompress.&lt;/span&gt;
    cmp_status = uncompress(pUncomp, &amp;amp;&lt;span&gt;uncomp_len, pCmp, cmp_len);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cmp_status !=&lt;span&gt; Z_OK) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uncompress failed!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pCmp);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pUncomp);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; EXIT_FAILURE;
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Decompressed from %u to %u bytes\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, (mz_uint32) cmp_len, (mz_uint32) uncomp_len);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Ensure uncompress() returned the expected data.&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; ((uncomp_len != src_len) ||&lt;span&gt; (memcmp(pUncomp, s_pStr, (size_t) src_len))) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Decompression failed!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pCmp);
        &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pUncomp);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; EXIT_FAILURE;
    }
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pCmp);
    &lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span&gt;(pUncomp);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Success.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; EXIT_SUCCESS;

}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; test_dct_miniz(&lt;span&gt;float&lt;/span&gt; *&lt;span&gt;data, uLong len) {
    uLong nCount &lt;/span&gt;= len / &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; *in_data =&lt;span&gt; data;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; nCount; i++&lt;span&gt;) {
        DCT(in_data, in_data);
        in_data &lt;/span&gt;+= &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;
    }
    test_miniz((&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *) data, len * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;float&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; *out_data =&lt;span&gt; data;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; nCount; i++&lt;span&gt;) {
        IDCT(out_data, out_data);
        out_data &lt;/span&gt;+= &lt;span&gt;64&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[]) {
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float data loss compression algorithm base DCT 8X8.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DCT implementation by Thomas G. Lane.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;miniz implementation by Rich Geldreich.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;http://developer.download.nvidia.com/SDK/9.5/Samples/vidimaging_samples.html&lt;/span&gt;&lt;span&gt;#gpgpu_dct&lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog:http://cpuimage.cnblogs.com/\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; is_debug_output = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; uLong data_len = &lt;span&gt;8&lt;/span&gt; * &lt;span&gt;8&lt;/span&gt;* &lt;span&gt;8&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; blocksize&lt;/span&gt;
    &lt;span&gt;float&lt;/span&gt;&lt;span&gt; test_for_miniz[data_len];
    &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt; test_for_dct[data_len];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data_len; ++&lt;span&gt;i) {
        test_for_miniz[i] &lt;/span&gt;=&lt;span&gt; i;
    }
    memcpy(test_for_dct, test_for_miniz, data_len &lt;/span&gt;* &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;float&lt;/span&gt;&lt;span&gt;));
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nonly miniz:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    test_miniz((&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *) test_for_miniz, data_len * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;float&lt;/span&gt;&lt;span&gt;));
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nwith dct:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    test_dct_miniz(test_for_dct, data_len);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (is_debug_output) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; data_len; ++&lt;span&gt;i) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (test_for_miniz[i] !=&lt;span&gt; test_for_dct[i]) {
                printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index %d: %f != %f \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i, test_for_miniz[i], test_for_dct[i]);
            }
        }
    }

    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n press any key to exit.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; EXIT_SUCCESS;
}

#ifdef __cplusplus
}
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项目地址:&lt;a href=&quot;https://github.com/cpuimage/DCT_8X8&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/DCT_8X8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外感谢5.1节假日时，某位匿名 网友的一元人民币打赏。&lt;/p&gt;
&lt;p&gt;涓涓细流可成江河~&lt;/p&gt;

&lt;p&gt;若有其他相关问题或者需求也可以邮件联系俺探讨。&lt;/p&gt;

&lt;p&gt;邮箱地址是: &lt;br/&gt;gaozhihan@vip.qq.com&lt;/p&gt;

</description>
<pubDate>Wed, 02 May 2018 15:42:00 +0000</pubDate>
<dc:creator>cpuimage</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cpuimage/p/8983236.html</dc:identifier>
</item>
<item>
<title>深入源码解析类Route - 来分享_share</title>
<link>http://www.cnblogs.com/lgshare/p/8946406.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lgshare/p/8946406.html</guid>
<description>
&lt;p&gt;　　微软官网对这个类的说明是：提供用于定义路由及获取路由相关信息的属性和方法。这个说明已经很简要的说明了这个类的作用，下面我们就从源码的角度来看看这个类的内部是如何工作的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_64032906-80ee-4042-ac76-600a477721fc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_64032906-80ee-4042-ac76-600a477721fc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_64032906-80ee-4042-ac76-600a477721fc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Route : RouteBase {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _url;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ParsedRoute _parsedRoute;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Route(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; url, IRouteHandler routeHandler) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             Url =&lt;span&gt; url;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             RouteHandler =&lt;span&gt; routeHandler;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }      
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RouteValueDictionary Defaults {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IRouteHandler RouteHandler {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Url {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; _url ??&lt;span&gt; String.Empty;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;set&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 _parsedRoute =&lt;span&gt; RouteParser.Parse(value);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 _url =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; RouteData GetRouteData(HttpContextBase httpContext) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;            
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; requestPath = httpContext.Request.AppRelativeCurrentExecutionFilePath.Substring(&lt;span&gt;2&lt;/span&gt;) +&lt;span&gt; httpContext.Request.PathInfo;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;             RouteValueDictionary values =&lt;span&gt; _parsedRoute.Match(requestPath, Defaults);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (values == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;             RouteData routeData = &lt;span&gt;new&lt;/span&gt; RouteData(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, RouteHandler);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ProcessConstraints(httpContext, values, RouteDirection.IncomingRequest)) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; values) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                routeData.Values.Add(value.Key, value.Value);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (DataTokens != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; prop &lt;span&gt;in&lt;/span&gt;&lt;span&gt; DataTokens) {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                     routeData.DataTokens[prop.Key] =&lt;span&gt; prop.Value;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; routeData;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Route部分源码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　上面是类的核心代码，如果在这里对所有的代码都进行列出或学习，则无法突出重点。&lt;/p&gt;
&lt;p&gt;　　主要包括构造函数，几个属性，一个方法。我们从这个类的对象被创建的地方开始，逐步深入理解。&lt;/p&gt;
&lt;p&gt; 　　这个方法会在应用程序启动时被第一个调用，在这里，我们注册了全局的路由信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MvcApplication : System.Web.HttpApplication
    {
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            WebApiConfig.Register(GlobalConfiguration.Configuration);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将全局变量 RouteTable.Routes作为参数传递进方法里，然后向这个全局变&lt;/span&gt;&lt;span&gt;量添加数据。系统定义的路由数据都被存放在这里变量里  &lt;/span&gt;
　　　　　　　&lt;span&gt;RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2从RouteConfig这个类开始,这是创建Mvc项目时，系统自动替我们添加的类，也是很重要的一个类.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_5b15743b-5382-42bf-a8ff-bef021560c92&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b15743b-5382-42bf-a8ff-bef021560c92&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b15743b-5382-42bf-a8ff-bef021560c92&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RouteConfig
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegisterRoutes(RouteCollection routes)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             routes.IgnoreRoute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{resource}.axd/{*pathInfo}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            routes.MapRoute(
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 url: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{controller}/{action}/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 defaults: &lt;span&gt;new&lt;/span&gt; { controller = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, action = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, id =&lt;span&gt; UrlParameter.Optional }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            );
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;RouteConfig-开始的地方&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　在这里类里，系统替我们添加了默认的URL路由并添加了默认值。&lt;/p&gt;
&lt;p&gt;　　这里调用了RouteCollection对象的MapRoute方法进行路由的映射，但是查看RouteCollection这个类，并不能找到MapRoute这个方法。&lt;/p&gt;
&lt;p&gt;　　这个方法的实现，是通过RouteCollection的一个拓展方法进行实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_19322c75-11ea-438d-bcd5-51ba9730dca7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_19322c75-11ea-438d-bcd5-51ba9730dca7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_19322c75-11ea-438d-bcd5-51ba9730dca7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RouteCollectionExtensions
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; IgnoreRoute(&lt;span&gt;this&lt;/span&gt; RouteCollection routes, &lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; constraints)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (routes == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;routes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (url == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             IgnoreRouteInternal route = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IgnoreRouteInternal(url)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 Constraints =&lt;span&gt; CreateRouteValueDictionaryUncached(constraints)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            ConstraintValidation.Validate(route);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            routes.Add(route);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Route MapRoute(&lt;span&gt;this&lt;/span&gt; RouteCollection routes, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;object&lt;/span&gt; defaults, &lt;span&gt;object&lt;/span&gt; constraints, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] namespaces)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (routes == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;routes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (url == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;             Route route = &lt;span&gt;new&lt;/span&gt; Route(url, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MvcRouteHandler())
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 Defaults =&lt;span&gt; CreateRouteValueDictionaryUncached(defaults),
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 Constraints =&lt;span&gt; CreateRouteValueDictionaryUncached(constraints),
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 DataTokens = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary()
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            ConstraintValidation.Validate(route);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((namespaces != &lt;span&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; (namespaces.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 route.DataTokens[RouteDataTokenKeys.Namespaces] =&lt;span&gt; namespaces;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            routes.Add(name, route);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; route;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;RouteCollectionExtensions部分代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　在上面的MapRoute方法里,类Route的对象使用指定的值被创建。这也是在系统中，Route对象最初被创建的对象。在这里，路由被定义。&lt;/p&gt;
&lt;p&gt;其中最核心的就是下面的代码，我们也将重点讲解下面的代码，看我们的路由信息时如何被定义的以及为什么这样定义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;             Route route = &lt;span&gt;new&lt;/span&gt; Route(url, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MvcRouteHandler())
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 Defaults =&lt;span&gt; CreateRouteValueDictionaryUncached(defaults),
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 Constraints =&lt;span&gt; CreateRouteValueDictionaryUncached(constraints),
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                 DataTokens = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary()
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;             };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在第一行中，给Route的构造方法传递了两个参数。&lt;/p&gt;
&lt;p&gt;　　第一个是url&quot;{controller}/{action}/{id}&quot;这样的值,这样的一个值，定义了系统能处理的路由模板，后面每当有请求被处理，&lt;/p&gt;
&lt;p&gt;总是会将请求的http链接与这个路由模板进行匹配，看是否满足我们定义的模板。&lt;/p&gt;
&lt;p&gt;　　第二个参数则是实现了IRouteHandler接口的类MvcRouteHandler。使用该类对象的主要作用是创建实际处理请求的类MvcHandler对象。&lt;/p&gt;
&lt;p&gt;关于这两个类的作用及地位会在其他随笔里介绍，这里仅作了解。&lt;/p&gt;

&lt;p&gt;下面让我们进入类Route的内部，看构造函数里到底发生了什么。也就是本片文章一开始的那段代码。然后在返回看看对Defaults属性的赋值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 　　&lt;span&gt;public&lt;/span&gt; Route(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; url, IRouteHandler routeHandler) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;              Url =&lt;span&gt; url;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;              RouteHandler =&lt;span&gt; routeHandler;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 　　&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Url {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 　　　　&lt;span&gt;get&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 　　　　　　　　&lt;span&gt;return&lt;/span&gt; _url ??&lt;span&gt; String.Empty;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 　　　　　　 &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 　　　　&lt;span&gt;set&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 　　　　　　　　_parsedRoute =&lt;span&gt; RouteParser.Parse(value);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 　　　　　　　　_url =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 　　　　　　 &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 　　}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在构造方法里，将传递进去的连个参数保存在两个属性里，而仅在Url属性中，对url路由模板做了特殊处理。所做的这些特殊处理，也是它可以匹配用户的&lt;/p&gt;
&lt;p&gt;请求连接的关键。我将第10行使用的代码用源代码中拷贝了出来，新建了一个项目，进行测试。返回的_parsedRoute对象如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1374681/201804/1374681-20180426100336407-630198501.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里主要使用了两个类,一个是ContentPathSegment，一个是SeparatorPathSegment(代表URL中的“/”分隔符)。重点解释ContentPathSegment类。上截图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1374681/201804/1374681-20180426102802693-1892299132.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从截图中可以看出，这个类主要存储的是我们定义的url模板切割后子段值。&lt;/p&gt;
&lt;p&gt;下面列出该类的具体代码，可以比较理解.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_80fe554a-c836-45a3-802b-2d2f01df10c0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_80fe554a-c836-45a3-802b-2d2f01df10c0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_80fe554a-c836-45a3-802b-2d2f01df10c0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;代表不是分隔符的网段。 它包含诸如文字和参数的子段。&lt;/span&gt;
    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ContentPathSegment : PathSegment
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ContentPathSegment(IList&amp;lt;PathSubsegment&amp;gt;&lt;span&gt; subsegments)
        {
            Subsegments &lt;/span&gt;=&lt;span&gt; subsegments;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsCatchAll
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt; 
                &lt;span&gt;return&lt;/span&gt; Subsegments.Any&amp;lt;PathSubsegment&amp;gt;(seg =&amp;gt; (seg &lt;span&gt;is&lt;/span&gt; ParameterSubsegment) &amp;amp;&amp;amp;&lt;span&gt; (((ParameterSubsegment)seg).IsCatchAll));
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IList&amp;lt;PathSubsegment&amp;gt;&lt;span&gt; Subsegments
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;类ContentPathSegment&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;至此，Route类构造函数中的结束已经完毕，下面解释另外一个属性的赋值--Defaults。这是属性中存储的是我们给url路由模板指定的默认值，在http请求时，如果只输入了ip，没有指定控制器名称和action时，使用这里的默认值。&lt;/p&gt;
&lt;p&gt; defaults: new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional }&lt;/p&gt;
&lt;pre&gt;
Defaults =&lt;span&gt; CreateRouteValueDictionaryUncached(defaults),&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;下面是经转化后返回的值的截图，该属性返回的是一个RouteValueDictionary字典。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1374681/201804/1374681-20180426154709515-1536280778.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;至此，类Route的创建已经完成，该类的创建工作在应用程序启动时完成，且只会被初始化一次，然后保存在路由集合中。&lt;/p&gt;
&lt;p&gt;有两个重点，1是路由模板经过处理后得到的_parsedRoute对象；2是传递的路由默认值。这两个对象是Route类的核心功能点。&lt;/p&gt;

&lt;p&gt;下面，我们就从这个类的使用角度开始解析。UrlRoutingModule这个类是使用Route开始的地方&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_076fcdef-74b0-4c27-8ad0-c06b423649d2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_076fcdef-74b0-4c27-8ad0-c06b423649d2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_076fcdef-74b0-4c27-8ad0-c06b423649d2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UrlRoutingModule : IHttpModule {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _contextKey = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; _requestDataKey = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; RouteCollection _routeCollection;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RouteCollection RouteCollection {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (_routeCollection == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     _routeCollection =&lt;span&gt; RouteTable.Routes;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _routeCollection;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;set&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 _routeCollection =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose() {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Init(HttpApplication application) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (application.Context.Items[_contextKey] != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; already added to the pipeline&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             application.Context.Items[_contextKey] =&lt;span&gt; _contextKey;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             application.PostResolveRequestCache +=&lt;span&gt; OnApplicationPostResolveRequestCache;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnApplicationPostResolveRequestCache(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             HttpApplication app =&lt;span&gt; (HttpApplication)sender;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             HttpContextBase context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpContextWrapper(app.Context);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            PostResolveRequestCache(context);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PostResolveRequestCache(HttpContextBase context) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Match the incoming URL against the route table&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             RouteData routeData =&lt;span&gt; RouteCollection.GetRouteData(context);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do nothing if no route found&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (routeData == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If a route was found, get an IHttpHandler from the route's RouteHandler&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             IRouteHandler routeHandler =&lt;span&gt; routeData.RouteHandler;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (routeHandler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                    String.Format(
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                        CultureInfo.CurrentCulture,
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                        SR.GetString(SR.UrlRoutingModule_NoRouteHandler)));
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (routeHandler &lt;span&gt;is&lt;/span&gt;&lt;span&gt; StopRoutingHandler) {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             RequestContext requestContext = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RequestContext(context, routeData);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             context.Request.RequestContext =&lt;span&gt; requestContext;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;             IHttpHandler httpHandler =&lt;span&gt; routeHandler.GetHttpHandler(requestContext);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (httpHandler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                    String.Format(
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;                        CultureInfo.CurrentUICulture,
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;                        SR.GetString(SR.UrlRoutingModule_NoHttpHandler),
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;                        routeHandler.GetType()));
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (httpHandler &lt;span&gt;is&lt;/span&gt;&lt;span&gt; UrlAuthFailureHandler) {
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (FormsAuthenticationModule.FormsAuthRequired) {
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                     UrlAuthorizationModule.ReportUrlAuthorizationFailure(HttpContext.Current, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpException(&lt;span&gt;401&lt;/span&gt;&lt;span&gt;, SR.GetString(SR.Assess_Denied_Description3));
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Remap IIS7 to our handler&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt; &lt;span&gt;            context.RemapHandler(httpHandler);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; 
&lt;span&gt;84&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; IHttpModule Members
&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt;&lt;span&gt; IHttpModule.Dispose() {
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;            Dispose();
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; 
&lt;span&gt;89&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt;&lt;span&gt; IHttpModule.Init(HttpApplication application) {
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;            Init(application);
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;93&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UrlRoutingModule部分代码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这是一个路由模块类，在网站启动时，会自动从配置文件中加载这个类。在类的Init方法中，会传递一个HttpApplication对象，然后会注册HttpApplication对象的PostResolveRequestCache事件，关于类HttpApplication&lt;/p&gt;
&lt;p&gt;会在其他随笔中重点的讲解，这里仅做介绍。我们只需知道，每当一个请求到达时，HttpApplication对象的PostResolveRequestCache事件会被出发，进而调用类UrlRoutingModule的PostResolveRequestCache方法。&lt;/p&gt;
&lt;p&gt;在这个方法里，会根据亲求的url链接，去匹配一个系统中已经定义的路由信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; RouteData routeData = RouteCollection.GetRouteData(context);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是PostResolveRequestCache方法的第一行代码，从路由集合中获取一个路由数据。RouteCollection这个属性的真实值就是RouteTable.Routes，这其中的数据，就是本文上半部分介绍的Route被创建后存储的地方。RouteCollection中存储的就是一个个的Route对象，所以上面的一行代码，最终就是遍历这些Route对象，然后调用每一个对象的GetRouteData方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; RouteData GetRouteData(HttpContextBase httpContext) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析传入的URL（我们修剪掉前两个字符，因为它们总是“〜/”）
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析后的字符串类似这样 Home/Index、User/Info 这样的格式&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; requestPath = httpContext.Request.AppRelativeCurrentExecutionFilePath.Substring(&lt;span&gt;2&lt;/span&gt;) +&lt;span&gt; httpContext.Request.PathInfo;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 　　　　　　  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将用户请求的url中的与控制器和Action相关的字符串与我们定义的路由信息进行匹配            &lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 　　　　　　　RouteValueDictionary values =&lt;span&gt; _parsedRoute.Match(requestPath, Defaults);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 　　　　　　　&lt;span&gt;//如果&lt;/span&gt;&lt;span&gt;没有匹配到数据，则返回空值           &lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;  　　　　　　&lt;span&gt;if&lt;/span&gt; (values == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 　　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明请求的url解析成功，则新建一个路由数据对象，且将当前对象及当前对象的一个属性传递给构造函数&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             RouteData routeData = &lt;span&gt;new&lt;/span&gt; RouteData(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, RouteHandler);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将匹配到的路由信息添加到路由数据中&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; values) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                routeData.Values.Add(value.Key, value.Value);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; routeData;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         }        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据此RouteData对象可以获取一个实现了IRouteHandler接口的类(MvcRouteHandler)的对象，而该对象又可以获取一个实现了IHttpHanlder的类(MvcHandler)的对象,&lt;/p&gt;
&lt;p&gt;该对象，是真正处理用于请求的对象，其他所做的一切都只是准备工作。&lt;/p&gt;

&lt;p&gt;结束语：&lt;/p&gt;
&lt;p&gt;　　该类的作用第一是用来存储我们定义的基础路由信息，第二是用来匹配检测用户输入的URL，第三是保存一个实现了IRouteHandler接口的类对象。&lt;/p&gt;

</description>
<pubDate>Wed, 02 May 2018 14:51:00 +0000</pubDate>
<dc:creator>来分享_share</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lgshare/p/8946406.html</dc:identifier>
</item>
<item>
<title>Salesforce的数据权限机制 - butterfly100</title>
<link>http://www.cnblogs.com/butterfly100/p/8981747.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/butterfly100/p/8981747.html</guid>
<description>&lt;p&gt;本文主要介绍了 Salesforce 对于系统中数据的访问控制是如何设计的，然后也了解了下 Alfresco 和 Oracle VPD 的数据权限机制。希望对一些业务系统的数据权限的访问控制设计能有所参考和启发。&lt;/p&gt;
&lt;h2&gt;Salesforce&lt;/h2&gt;
&lt;h3&gt;1. 产品功能&lt;/h3&gt;
&lt;p&gt;salesforce是基于 SaaS 的客户关系管理系统(CRM)，该系统提供的功能覆盖了众多不同的业务领域，例如：客户资料存储，销售业务管理，协同办公等。在此基础上，Salesforce又提供了一个开发平台以帮助其客户根据自身的需求对核心系统进行定制和扩展。&lt;/p&gt;
&lt;h3&gt;2. 数据权限配置&lt;/h3&gt;
&lt;p&gt;在salesforce平台，可以控制哪些用户可以访问哪些 Organization, Objects, Fields, Records 的数据，通过结合不同级别的安全控制，来为成千上万的应用提供恰到好处的数据访问级别。&lt;/p&gt;
&lt;p&gt;例如下面是在salesforce平台上的一个招聘系统，开发者配置的数据权限：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502175359621-1007379907.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Objects-Level Security：对象级别的数据权限，类似DB中的表。例如：面试官只能查看候选人和招聘职位信息，而不能查看offer信息。&lt;/li&gt;
&lt;li&gt;Field-Level Security：列数据权限，类似DB表的列字段。例如：面试官可以查看候选人的姓名、住址，而不能查看电话号码、薪资等敏感信息。&lt;/li&gt;
&lt;li&gt;Record-Level Security：行数据权限，类似DB表中的行记录。例如：面试官只能查看自己所在部门下的候选人信息，而不能查看其它部门下的候选人信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面详细描述 salesforce 中数据的4种安全级别控制：&lt;/p&gt;
&lt;h4&gt;1）Organization 的数据访问控制&lt;/h4&gt;
&lt;p&gt;只有通过认证的员工才能登录到系统，是最广泛的数据保护级别。常用的设定有用户管理、密码登录、登录IP限制等。&lt;/p&gt;
&lt;h4&gt;2）Objects 的数据访问控制&lt;/h4&gt;
&lt;p&gt;Object可以看做表。Object 是由 Records 组成，通过 profile 和 permission sets 来设置 objects 的数据访问权限。一个用户会有一个 profile 和许多 permission sets。&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;profile（简档）：是 salesforce 为每个用户指定的标准配置文件，在创建用户时候指定（不同用户可使用同一profile）。通过一组规则集合，规定了用户对这个系统各方面的权限。分为 settings 和 permissions 两部分：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;permission sets（权限集）：分配给用户额外的权限和访问规则，也由 settings 和 permissions 组成。permission sets 的权限范围和 profile 是类似的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一个用户只能有一个 profile，但可以有多个 permission sets。一般使用 profile 分配给用户最低的权限集合，然后使用 permission sets 补充配置的其他权限。两个联合使用，提供了访问 objects 的灵活性。&lt;/p&gt;
&lt;p&gt;下图是 profile 中对象的权限设定：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502175441061-1148695248.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;3）Fields 的列访问控制&lt;/h4&gt;
&lt;p&gt;Field可看做表中的列。有时，用户可以访问 Objects，但不能访问/修改 Object 的 Fields，例如：身份证信息、薪资信息等。Fields 列权限可通过 profile、permission sets 来控制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502175510831-1381368550.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt; &lt;/p&gt;
&lt;h4&gt;4）Records 的行访问控制&lt;/h4&gt;
&lt;p&gt;Record可看做表中的行记录。用户访问 Objects 时只能访问子集中的一部分 Records。而控制 Records 的数据访问范围有四个方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;① Org-wide defaults：&lt;/strong&gt;组织范围内的默认基础设置。共享设置是数据安全级别的最底层，如果用户在 profiles 或其他地方对某些对象有其他权限设定，则此处的权限设定会被忽略。&lt;/p&gt;
&lt;p&gt;可以对系统中每个对象进行访问权限设置，例如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502175540937-1260330506.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有以下四种策略：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Public Read Only：所有用户可查看 records，但只有拥有者和上级能编辑&lt;/li&gt;
&lt;/ul&gt;&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Public Read/Write：所有用户可以查看、编辑 records&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Controlled by Parent：一个用户可查看、编辑、删除一个 record，那就可对该 record 下面的 record 做同样操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;② Role hierarchies&lt;/strong&gt;：salesforce 的角色是层级结构，类似于一个树，拥有上级角色可以同时拥有这个角色树节点下级的所有角色的 Record 权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;③ Sharing rules&lt;/strong&gt;：将符合规则的一些行数据，赋予符合规则的一些用户。一条共享规则包括：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;基本属性：标签、名字、描述等&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;规则类型：可以设定基于记录所有人，还是基于某些条件&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;被共享的用户：可以设定此共享规则对哪些用户生效。此处的用户分为三种：公用小组、角色、角色及下属&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;被共享用户的访问权限：被共享的用户对于此数据有哪些权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502175608124-1075626818.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;④ Manual sharing&lt;/strong&gt;：手动共享一条记录给其他人。Records 的拥有者给没有 Records 权限的用户授予该 Record 相应的读写权限。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;3. 数据权限校验&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当用户需要进入某条记录、运行报表、搜索等操作时，salesforce 会检查用户的权限。由于 salesforce 有着复杂的权限设定，会在权限设定更改时立即计算数据记录的权限，然后将结果保存起来。这样，当用户对记录操作时，不用在此时进行权限的计算（因为会使效率变慢），而是根据存储好的权限结果直接判断。&lt;/p&gt;
&lt;p&gt;salesforce 主要使用三种数据表来管理各种权限设定：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;对象记录表（Object Record Table）：存储着数据记录&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;对象共享表（Object Sharing Table）：存储着各个对象的共享权限，包括了各种权限设定：Role hierarchies, Sharing rules, Manual sharing等&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;用户组表（Group Maintenance Table）：存储着各个用户和用户组的关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当需要决定某个用户或用户组对于某条记录的权限时，会执行以下步骤：&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在对象记录表中找到这条记录&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在对象共享表中根据这条记录的ID找到存储于其中的共享权限&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在用户组表中根据用户或组的ID找到对应的记录，然后在对象共享表中找到和该用户或组的ID相对应的共享权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上步骤执行完毕后，salesforce 便得到了该用户或用户组对于这条记录的权限。&lt;/p&gt;

&lt;h3&gt;4. 数据定义与存储&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502214454639-828180896.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Metadatas表：存储用户自定义的对象(Record)和对象所包含的字段(Field)的结构信息，不保存具体的数据。Metadata可以保证极大的灵活性，搭配着配置化平台使用。主要有两大类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Objects Metadata表：存储对象的信息，主要字段包括：对象ID(ObjID)，拥有这个对象的租户ID(OrgID)，对象的名称(ObjName)等&lt;/li&gt;
&lt;li&gt;Fields Metadata表：存储对象附带字段的信息，主要字段包括：字段ID(FieldID)，拥有这个字段的租户ID(OrgID)，对象ID(ObjID)，字段的名称(FieldName)，字段的数据类型(DataType)，布尔字段表示这个字段是否需要被检索(IsIndexed)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Data表：存储用户定制的对象和对象所包含字段的数据。主要也是两大类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Data表：存储Metadata表中定义的对象和字段所对应的数据，主要字段包括：全局唯一ID(GUID)，租户ID(OrgID)，对象ID(ObjID)，存放对象名字的 Nature Name（例如：这行与会计对象有关，这行的 Nature Name 就可能是 &quot;Account Name&quot;）。除了这些核心字段外，这个表还有名字从 Value0~Value500 这501个列来存储数据，而且这些列都是 varchar 格式来存储不同类型的数据，这个列也成为 flex 列。&lt;/li&gt;
&lt;li&gt;Clob表：存储那些 CLOD（Character Large Object，字符大对象）数据，对象最大支持 32000 个字符。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Piovt表：也称&quot;数据透视表&quot;，以去规范化格式存储那些用于特殊目的的数据，比如用于检索、唯一性和关系等。主要作用是提升处理这些特殊数据的读取性能。主要有五种Piovt表：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Index Piovt表：由于Data表中数据都是以flex列的形式存储，所有很难在Data表的基础上对数据进行检索，所以引入Index Piovt表来解决这个问题，系统运行时，将需要索引的数据从Data表同步至Index Piovt表中相对应的字段来方便检索。比如数据的类型是日期型的，那么它会被同步至Index Piovt表中的日期字段。&lt;/li&gt;
&lt;li&gt;UniqueFields Piovt表：用于帮助系统在Data表中字段实现唯一性约束&lt;/li&gt;
&lt;li&gt;Relationships Piovt表：提供了&quot;Relationship&quot;这个数据类型来支持定义多个对象之间的关系，此表方便和加速了&quot;Relationship&quot;数据读取的作用&lt;/li&gt;
&lt;li&gt;NameDenorm表：是一个简单的数据表用于存储对象的ID(ObjID)和对象的实例的名字，主要让一些仅需获取名字的查询访问，让一些简单的查询无需访问规模庞大的Data表&lt;/li&gt;
&lt;li&gt;FallbackIndex表：这个表记录所有对象的名字，免去成本高昂的 &quot;UNION&quot; 操作，从而加速查询 &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180502214521515-175536006.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于Data、Objects和Fields表的举例如下：&lt;/p&gt;
&lt;p&gt;Objects Metadata表：定义正常数据库设计的 user 表和 order 表&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ObjID&lt;/td&gt;
&lt;td&gt;OrgID&lt;/td&gt;
&lt;td&gt;ObjName&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;001&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;002&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;order&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Fields Metadata表：定义 user 表和 order 表的字段，user(userId, name, age)，order(orderId, amount)&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;FieldID&lt;/td&gt;
&lt;td&gt;OrgID&lt;/td&gt;
&lt;td&gt;ObjID&lt;/td&gt;
&lt;td&gt;FieldName&lt;/td&gt;
&lt;td&gt;DataType&lt;/td&gt;
&lt;td&gt;IsIndexed&lt;/td&gt;
&lt;td&gt;FieldNum&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;001&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;001&lt;/td&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;002&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;001&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;003&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;001&lt;/td&gt;
&lt;td&gt;age&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;004&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;002&lt;/td&gt;
&lt;td&gt;amount&lt;/td&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;005&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;002&lt;/td&gt;
&lt;td&gt;orderId&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;


&lt;h3&gt; &lt;/h3&gt;


&lt;p&gt;Data表：user 表和 order 表的具体内容。Value0, Value1等值的顺序与Fields中FileldNum相对应，user.userId的FileldNum=0，则Value0存储着userId的具体值&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;GUID&lt;/td&gt;
&lt;td&gt;OrgID&lt;/td&gt;
&lt;td&gt;ObjID&lt;/td&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Value0&lt;/td&gt;
&lt;td&gt;Value1&lt;/td&gt;
&lt;td&gt;Value2&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;Value500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;001&lt;/td&gt;
&lt;td&gt;user name&lt;/td&gt;
&lt;td&gt;uid001&lt;/td&gt;
&lt;td&gt;zhangsan&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1002&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;002&lt;/td&gt;
&lt;td&gt;order name&lt;/td&gt;
&lt;td&gt;oid002&lt;/td&gt;
&lt;td&gt;100.0&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



&lt;h3&gt;5. 参考&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;官网域名：&lt;/strong&gt;&lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;https://login.salesforce.com/&quot; href=&quot;https://login.salesforce.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://login.salesforce.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;https://trailhead.salesforce.com/modules/data_security/units/data_security_overview&quot; href=&quot;https://trailhead.salesforce.com/modules/data_security/units/data_security_overview&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://trailhead.salesforce.com/modules/data_security/units/data_security_overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;https://developer.salesforce.com/docs/atlas.en-us.212.0.securityImplGuide.meta/securityImplGuide/&quot; href=&quot;https://developer.salesforce.com/docs/atlas.en-us.212.0.securityImplGuide.meta/securityImplGuide/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.212.0.securityImplGuide.meta/securityImplGuide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;Salesforce数据安全简介&quot; href=&quot;https://www.jianshu.com/p/bfab4b654183&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Salesforce数据安全简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Salesforce入门》&lt;/p&gt;

&lt;h2&gt;其他系统的数据权限机制&lt;/h2&gt;
&lt;h3&gt;1. Alfresco&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;产品功能：&lt;/strong&gt;Alfresco是一款开源的企业内容管理系统（ECMS），为企业提供了日常的文档管理、协同工作、工作记录管理、知识管理、网络内容管理、图片管理等多种功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据权限：&lt;/strong&gt;可以对每个页面设置用户的访问和操作权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）权限设计：权限粒度细化到对象级别，又将权限分为18种基本权限。在这18种基本权限上，又可以扩展多个权限集。&lt;/p&gt;
&lt;div class=&quot;tableWrapper&quot;&gt;
&lt;table align=&quot;left&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;Read&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;读权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;ReadProperties：读对象的元数据&lt;/p&gt;
&lt;p&gt;ReadChildren：读下级节点&lt;/p&gt;
&lt;p&gt;ReadContent：读对象内容&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;Write&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;写权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;WriteProperties：写对象的元数据&lt;/p&gt;
&lt;p&gt;WriteContent：写对象内容&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;Delete&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;删除权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;DeleteNode：删除对象&lt;/p&gt;
&lt;p&gt;DeleteChildren：删除下级对象&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;AddChildren&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;添加子节点权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;CreateChildren：创建下级对象&lt;/p&gt;
&lt;p&gt;LinkChildren：将其他对象挂接到当前对象下&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;Execute&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;执行权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;ExecuteContent：执行对象内容&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;CheckIn&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;签入权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot;&gt;
&lt;p&gt;Unlock：对象解锁&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;CheckOut&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;签出权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot;&gt;
&lt;p&gt;Lock：对象加锁&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;153px&quot; data-colwidth=&quot;153&quot;&gt;
&lt;p&gt;CancelCheckOut&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;157px&quot; data-colwidth=&quot;157&quot;&gt;
&lt;p&gt;取消签出权限&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;357px&quot; data-colwidth=&quot;357&quot;&gt;
&lt;p&gt;Unlock：对象加锁&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;



















&lt;p&gt;在以上8种常用权限集的基本上，又可以扩展多个角色权限集：&lt;/p&gt;
&lt;div class=&quot;tableWrapper&quot;&gt;
&lt;table align=&quot;left&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Consumer&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;使用者&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot;&gt;
&lt;p&gt;Read&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Editor&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;参与者&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Consumer，Write，CheckOut，ReadPermissions&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Contributor&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;协调员&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Consumer，AddChildren，ReadPermissions&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Collaborator&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;合作者&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot;&gt;
&lt;p&gt;Editor，Contributor&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Coordinator&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;系统管理员&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot;&gt;
&lt;p&gt;所有权限&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Administrator&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;超级管理员&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot;&gt;
&lt;p&gt;所有权限&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;RecordAdministrator&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;158px&quot; data-colwidth=&quot;158&quot;&gt;
&lt;p&gt;记录管理员&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;580px&quot; data-colwidth=&quot;580&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;ReadProperties，ReadChildren，WriteProperties，ReadContent，DeleteChildren，CreateChildren，LinkChildren，DeleteAssociations，CreateAssociations&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;














&lt;p&gt;2）用户、组的设计：用户可以隶属于多个组，一个组也可以包括多个成员（组和用户）&lt;/p&gt;
&lt;p&gt;3）ACL（访问控制表）机制：通过 ACL 机制实现对文档的权限控制。ACL包含多个用户、组的访问权限，如下表：&lt;/p&gt;
&lt;div class=&quot;tableWrapper&quot;&gt;
&lt;table align=&quot;left&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;Group1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114px&quot; data-colwidth=&quot;114&quot;&gt;
&lt;p&gt;Consumer&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;User1&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114px&quot; data-colwidth=&quot;114&quot;&gt;
&lt;p&gt;Editor&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;167px&quot; data-colwidth=&quot;167&quot;&gt;
&lt;p&gt;User2&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;114px&quot; data-colwidth=&quot;114&quot;&gt;
&lt;p&gt;Read&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;







&lt;p&gt;注：Group1组中的所有成员拥有所在组的权限。&lt;/p&gt;
&lt;p&gt;4）权限机制设计：内容库中的每一个对象（文件夹、文件等）都关系一个ACL对象。当用户访问内容库的对象时，先根据该对象对应的 ACL 里查找当前用户拥有的该对象的权限，然后判断当前用户是否拥有操作该对象的相关权限，从而实现内容库对象的权限管理。&lt;/p&gt;
&lt;p&gt;Alfresco中的权限继承机制允许内容库对象继承父级节点的权限，因此，在对象创建的时候不必为每一个对象分配ACL。只要为目录结构分配好权限，在对象创建以后默认继承父级节点权限。通过用户、组、ACL的灵活配置，可以实现复杂的内容安全控制。&lt;/p&gt;
&lt;p&gt;5）权限机制的具体实现：在底层把对象的操作规定了一个接口：NodeService。将对象的各种操作抽象为几种基本方法，如：getProperties(), setProperties()。将这些方法进行拦截，拦截的工作是通过当前操作用户，当前操作的对象id，当前执行的操作，判断是否可以调用该方法，从而实现在底层实现对对象权限的控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mimload.iteye.com/blog/680460&quot; target=&quot;_blank&quot;&gt;Alfresco权限机制&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;id-8OracleVPD&quot;&gt;2. Oracle VPD&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;产品功能：&lt;/strong&gt;VPD（Virtual Private Database）是从数据库层面实现数据访问控制的一种成熟技术，归属 Oracle security框架下。通过 VPD，银行便可以确保客户只看到他们自己的帐户，电信公司可以安全地隔离客户记录，HR应用程序可以支持复杂的员工记录数据访问原则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何使用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VPD 是介于用户 SQL 语句和实际执行对象之间的介质层。SQL 语句在执行前，会自动被拦截并进行额外处理，处理结果往往是在 where 语句中添加特殊的条件式。&lt;/p&gt;
&lt;p&gt;将一个或多个安全策略与表或视图关联，当对带安全策略的表访问（select/insert/update/delete）时，数据库将调用一个实施该策略的函数。策略函数返回一个访问条件（where子句），即谓词。应用程序将它附加到用户的 SQL 语句，从而动态修改用户的数据访问权限。如下面例子所示：如果执行 select * from t_policy 语句，则可以使用 VPD 添加 where t2 not in (10) 子句：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1)建立测试数据表(t_policy):&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; T_POLICY 
(
  T1  &lt;/span&gt;&lt;span&gt;VARCHAR2&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;&lt;span&gt; BYTE), 
  T2  &lt;/span&gt;&lt;span&gt;NUMBER&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) 
); 
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; t_policy &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; t_policy &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; t_policy &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;commit&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(2)建立VPD需要的策略，这里的名字是:Fn_GetPolicy&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;OR&lt;/span&gt; &lt;span&gt;REPLACE&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; Fn_GetPolicy(P_Schema &lt;span&gt;In&lt;/span&gt; &lt;span&gt;Varchar2&lt;/span&gt;,P_Object &lt;span&gt;In&lt;/span&gt; &lt;span&gt;Varchar2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;varchar2&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; 
  Result &lt;/span&gt;&lt;span&gt;varchar2&lt;/span&gt;(&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;&lt;span&gt; 
  Result:&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t2 not in (10)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;     &lt;span&gt;--&lt;/span&gt;&lt;span&gt; t2 != 10&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt;&lt;span&gt;(Result); 
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt; Fn_GetPolicy; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(3)将策略与需要保护的表进行关联:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; 
&lt;span&gt;Begin&lt;/span&gt;&lt;span&gt; 
Dbms_Rls.Add_Policy( 
Object_Schema &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;niegc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;数据表(或视图)所在的Schema名称 &lt;/span&gt;
&lt;span&gt;Object_Name&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;T_Policy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;数据表(或视图)的名称 &lt;/span&gt;
Policy_Name &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;T_TestPolicy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;POLICY的名称，主要用于将来对Policy的管理 &lt;/span&gt;
Function_Schema &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NIEGC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,  &lt;span&gt;--&lt;/span&gt;&lt;span&gt;返回Where子句的函数所在Schema名称 &lt;/span&gt;
Policy_Function &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Fn_GetPolicy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;返回Where子句的函数名称 &lt;/span&gt;
Statement_Types &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Select,Insert,Update,Delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;要使用该Policy的DML类型，如'Select,Insert,Update,Delete' &lt;/span&gt;
Update_Check &lt;span&gt;=&amp;gt;&lt;/span&gt;True, &lt;span&gt;--&lt;/span&gt;&lt;span&gt;仅适用于Statement_Type为'Insert,Update'，值为'True'或'False'. 如果为'True'，则用户插入的值不符合Policy_Function返回条件时，该DML执行返回错误信息。&lt;/span&gt;
Enable &lt;span&gt;=&amp;gt;&lt;/span&gt;True    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;是否启用，值为'True'或'False' &lt;/span&gt;
&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(4)验证VPD效果&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;执行用户SQL：&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; t_policy;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;此时结果会少了t2=10这项&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;Oracle VPD实现数据细粒度访问&quot; href=&quot;https://blog.csdn.net/dnnyyq/article/details/5214641&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Oracle VPD实现数据细粒度访问&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;&quot; class=&quot;ct-link&quot; title=&quot;Oracle VPD详解&quot; href=&quot;https://www.2cto.com/database/201609/549526.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Oracle VPD详解&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Wed, 02 May 2018 14:29:00 +0000</pubDate>
<dc:creator>butterfly100</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/butterfly100/p/8981747.html</dc:identifier>
</item>
<item>
<title>Spring Boot 2.0系列文章(七)：SpringApplication 深入探索 - zhisheng_tian</title>
<link>http://www.cnblogs.com/zhisheng/p/8982845.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhisheng/p/8982845.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqxbkmfds2j31hc0oegze.jpg&quot; alt=&quot;sunset-3325080_1920&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;关注我&quot;&gt;关注我&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转载请务必注明原创地址为：&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/&quot; class=&quot;uri&quot;&gt;http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在 Spring Boot 项目的启动类中常见代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SpringbotApplication {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(SpringbotApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中也就两个比较引人注意的地方：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringApplication.run()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于第一个注解 &lt;code&gt;@SpringBootApplication&lt;/code&gt;，我已经在博客 &lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/&quot;&gt;Spring Boot 2.0系列文章(六)：Spring Boot 2.0中SpringBootApplication注解详解&lt;/a&gt; 中详细的讲解了。接下来就是深入探究第二个了 &lt;code&gt;SpringApplication.run()&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;换个姿势&quot;&gt;换个姿势&lt;/h3&gt;
&lt;p&gt;上面的姿势太简单了，只一行代码就完事了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(SpringbotApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实是支持做一些个性化的设置，接下来我们换个姿势瞧瞧：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SpringbotApplication {  
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication app = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplication&lt;/span&gt;(SpringbotApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 自定义应用程序的配置&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//app.setXxx()&lt;/span&gt;
        app.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(args)
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没错，就是通过一个构造函数，然后设置相关的属性，从而达到定制化服务。有哪些属性呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tttpf2j312618mn4w.jpg&quot; alt=&quot;SpringApplicationFileds&quot;/&gt;&lt;/p&gt;
&lt;p&gt;属性对应的 get／set 方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tz1wmyj31kw1f3qeo.jpg&quot; alt=&quot;springapplication_getset&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到没，还很多呢！&lt;/p&gt;
&lt;p&gt;举个例子：你想把 Spring Boot 项目的默认 Banner 换成你自己的，就需要在这里如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
&lt;span class=&quot;co&quot;&gt;//      SpringApplication.run(Springboot2Application.class, args);&lt;/span&gt;
  SpringApplication application = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplication&lt;/span&gt;(Springboot2Application.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
  application.&lt;span class=&quot;fu&quot;&gt;setBanner&lt;/span&gt;((environment, sourceClass, out) -&amp;gt; {
    &lt;span class=&quot;co&quot;&gt;//这里打印一个logo&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;      _      _       _&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot;     | |    (_)     | |&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot; ____| |__   _  ___ | |__    ___  _ __    __ _&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot;|_  /| '_ &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; | |/ __|| '_ &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  / _ &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;| '_ &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  / _` |&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot; / / | | | || |&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;__ &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;| | | ||  __/| | | || (_| |&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot;/___||_| |_||_||___/|_| |_| &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;___||_| |_| &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;__, |&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot;                                          __/ |&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; +
                       &lt;span class=&quot;st&quot;&gt;&quot;                                         |___/&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;);
  });
  application.&lt;span class=&quot;fu&quot;&gt;setBannerMode&lt;/span&gt;(Banner.&lt;span class=&quot;fu&quot;&gt;Mode&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;CONSOLE&lt;/span&gt;);
  &lt;span class=&quot;co&quot;&gt;//你还可以干其他的定制化初始设置&lt;/span&gt;
  application.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(args);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在重启项目，你就会发现，控制台的 logo 已经换成你自己的了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tuvk6lj31kw1a6qio.jpg&quot; alt=&quot;banner&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然了，你可能会觉得这样写有点复杂，嗯嗯，确实，这样硬编码在代码里确实不太友好。你还可以在&lt;code&gt;src/main/resources&lt;/code&gt;路径下新建一个&lt;code&gt;banner.txt&lt;/code&gt;文件，&lt;code&gt;banner.txt&lt;/code&gt;中填写好需要打印的字符串内容即可。&lt;/p&gt;
&lt;p&gt;从该类中可以看到在 Spring Boot 2 中引入了个新的 WebApplicationType 和 WebEnvironment。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tvo4l3j31ke1fads1.jpg&quot; alt=&quot;springapplication-002&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tyfizgj31be13ujws.jpg&quot; alt=&quot;webapplicationtype&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tmcuslj31im0yigtw.jpg&quot; alt=&quot;springapplication-003&quot;/&gt;&lt;/p&gt;
&lt;p&gt;确实，这也是 Spring Boot 2 中比较大的特性，它是支持响应式编程的。我之前在文章 &lt;a href=&quot;http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/&quot;&gt;Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解&lt;/a&gt; 中也介绍过，以后有机会会介绍它的，这里我先卖个关子。&lt;/p&gt;
&lt;h3 id=&quot;springapplication-初始化&quot;&gt;SpringApplication 初始化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SpringApplication.run()&lt;/code&gt;  的实现才是我们要深入探究的主角，该方法代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//静态方法，可用于使用默认配置运行 SpringApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; ConfigurableApplicationContext &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(Class&amp;lt;?&amp;gt; primarySource,
      String&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;args) {
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[] { primarySource }, args);
}
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; ConfigurableApplicationContext &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(Class&amp;lt;?&amp;gt;[] primarySources,
            String[] args) {
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplication&lt;/span&gt;(primarySources).&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(args);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个静态方法中，创建 SpringApplication 对象，并调用该对象的 run 方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplication&lt;/span&gt;(Class&amp;lt;?&amp;gt;&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;primarySources) {
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;, primarySources);
}
&lt;span class=&quot;co&quot;&gt;//创建一个 SpringApplication 实例，应用上下文会根据指定的主要资源加载 beans ，实例在调用 run 方法之前可以定制化&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;({ &lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt; })
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplication&lt;/span&gt;(ResourceLoader resourceLoader, Class&amp;lt;?&amp;gt;&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;primarySources) {
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt; = resourceLoader;
  Assert.&lt;span class=&quot;fu&quot;&gt;notNull&lt;/span&gt;(primarySources, &lt;span class=&quot;st&quot;&gt;&quot;PrimarySources must not be null&quot;&lt;/span&gt;);
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;primarySources&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;(Arrays.&lt;span class=&quot;fu&quot;&gt;asList&lt;/span&gt;(primarySources));
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;webApplicationType&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;deduceWebApplicationType&lt;/span&gt;();
  &lt;span class=&quot;fu&quot;&gt;setInitializers&lt;/span&gt;((Collection) &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(
    ApplicationContextInitializer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
  &lt;span class=&quot;fu&quot;&gt;setListeners&lt;/span&gt;((Collection) &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(ApplicationListener.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;));
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mainApplicationClass&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;deduceMainApplicationClass&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是进入单个参数的构造方法，然后进入两参数的构造方法（ResourceLoader 为 null），然后进行初始化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、deduceWebApplicationType()&lt;/strong&gt; : 推断应用的类型 ，创建的是一个 SERVLET 应用还是 REACTIVE应用或者是 NONE&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String REACTIVE_WEB_ENVIRONMENT_CLASS = &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.web.reactive.DispatcherHandler&quot;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String MVC_WEB_ENVIRONMENT_CLASS = &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.web.servlet.DispatcherServlet&quot;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String[] WEB_ENVIRONMENT_CLASSES = { &lt;span class=&quot;st&quot;&gt;&quot;javax.servlet.Servlet&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.web.context.ConfigurableWebApplicationContext&quot;&lt;/span&gt; };

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; WebApplicationType &lt;span class=&quot;fu&quot;&gt;deduceWebApplicationType&lt;/span&gt;() {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ClassUtils.&lt;span class=&quot;fu&quot;&gt;isPresent&lt;/span&gt;(REACTIVE_WEB_ENVIRONMENT_CLASS, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
      &amp;amp;&amp;amp; !ClassUtils.&lt;span class=&quot;fu&quot;&gt;isPresent&lt;/span&gt;(MVC_WEB_ENVIRONMENT_CLASS, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; WebApplicationType.&lt;span class=&quot;fu&quot;&gt;REACTIVE&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;//该程序是 REACTIVE 程序&lt;/span&gt;
  }
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String className : WEB_ENVIRONMENT_CLASSES) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!ClassUtils.&lt;span class=&quot;fu&quot;&gt;isPresent&lt;/span&gt;(className, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)) {
      &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; WebApplicationType.&lt;span class=&quot;fu&quot;&gt;NONE&lt;/span&gt;;   &lt;span class=&quot;co&quot;&gt;//该程序为 NONE&lt;/span&gt;
    }
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; WebApplicationType.&lt;span class=&quot;fu&quot;&gt;SERVLET&lt;/span&gt;;    &lt;span class=&quot;co&quot;&gt;//默认返回是 SERVLET 程序&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2、setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class))&lt;/strong&gt;：初始化 classpath 下的所有的可用的 ApplicationContextInitializer。&lt;/p&gt;
&lt;p&gt;1）、getSpringFactoriesInstances()&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; Collection&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(Class&amp;lt;T&amp;gt; type) {
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(type, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[] {});
}
&lt;span class=&quot;co&quot;&gt;//获取所有的 Spring 工厂实例&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; Collection&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(Class&amp;lt;T&amp;gt; type,
Class&amp;lt;?&amp;gt;[] parameterTypes, Object&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;args) {
  ClassLoader classLoader = Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getContextClassLoader&lt;/span&gt;();
  &lt;span class=&quot;co&quot;&gt;// Use names and ensure unique to protect against duplicates&lt;/span&gt;
  Set&amp;lt;String&amp;gt; names = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;(SpringFactoriesLoader.&lt;span class=&quot;fu&quot;&gt;loadFactoryNames&lt;/span&gt;(type, classLoader)); &lt;span class=&quot;co&quot;&gt;//获取所有 Spring Factories 的名字&lt;/span&gt;
  List&amp;lt;T&amp;gt; instances = &lt;span class=&quot;fu&quot;&gt;createSpringFactoriesInstances&lt;/span&gt;(type, parameterTypes,
                                                     classLoader, args, names);
  AnnotationAwareOrderComparator.&lt;span class=&quot;fu&quot;&gt;sort&lt;/span&gt;(instances); &lt;span class=&quot;co&quot;&gt;//Spring 工厂实例排序&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; instances;
}
&lt;span class=&quot;co&quot;&gt;//根据读取到的名字创建对象（Spring 工厂实例）&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;createSpringFactoriesInstances&lt;/span&gt;(Class&amp;lt;T&amp;gt; type,
 Class&amp;lt;?&amp;gt;[] parameterTypes, ClassLoader classLoader, Object[] args, Set&amp;lt;String&amp;gt; names) {
  List&amp;lt;T&amp;gt; instances = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(names.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;());
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String name : names) {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
      Class&amp;lt;?&amp;gt; instanceClass = ClassUtils.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(name, classLoader);
      Assert.&lt;span class=&quot;fu&quot;&gt;isAssignable&lt;/span&gt;(type, instanceClass);
      Constructor&amp;lt;?&amp;gt; constructor = instanceClass.&lt;span class=&quot;fu&quot;&gt;getDeclaredConstructor&lt;/span&gt;(parameterTypes);
      T instance = (T) BeanUtils.&lt;span class=&quot;fu&quot;&gt;instantiateClass&lt;/span&gt;(constructor, args);
      instances.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(instance);
    }
    &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable ex) {
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalArgumentException(
        &lt;span class=&quot;st&quot;&gt;&quot;Cannot instantiate &quot;&lt;/span&gt; + type + &lt;span class=&quot;st&quot;&gt;&quot; : &quot;&lt;/span&gt; + name, ex);
    }
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; instances;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的 SpringFactoriesLoader.loadFactoryNames() ，是从 META-INF/spring.factories 的资源文件中，读取 key 为org.springframework.context.ApplicationContextInitializer 的 value。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fqx6xo1yhjj31kw1cinbe.jpg&quot; alt=&quot;springfactoriesloader&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而 spring.factories 的部分内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tt63ojj31kw0kotk4.jpg&quot; alt=&quot;2018-05-01_22-21-20&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，最近的得到的，是 ConfigurationWarningsApplicationContextInitializer，ContextIdApplicationContextInitializer，DelegatingApplicationContextInitializer，ServerPortInfoApplicationContextInitializer 这四个类的名字。&lt;/p&gt;
&lt;p&gt;2）、setInitializers()：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setInitializers&lt;/span&gt;(
            Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ApplicationContextInitializer&amp;lt;?&amp;gt;&amp;gt; initializers) {
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;initializers&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;initializers&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(initializers);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，这里 setInitializers() 所得到的成员变量 initializers 就被初始化为ConfigurationWarningsApplicationContextInitializer，ContextIdApplicationContextInitializer，DelegatingApplicationContextInitializer，ServerPortInfoApplicationContextInitializer 这四个类的对象组成的 list。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class))&lt;/strong&gt;：初始化 classpath 下的所有的可用的 ApplicationListener。&lt;/p&gt;
&lt;p&gt;1）、getSpringFactoriesInstances() 和上面的类似，但是它是从 META-INF/spring.factories 的资源文件中，获取到 key 为 org.springframework.context.ApplicationListener 的 value。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fqx6ty24gvj31kw0l3n7h.jpg&quot; alt=&quot;2018-05-01_22-33-56&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）、setListeners()：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setListeners&lt;/span&gt;(Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ApplicationListener&amp;lt;?&amp;gt;&amp;gt; listeners) {
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listeners&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listeners&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(listeners);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，这里 setListeners() 所得到的成员变量 listeners 就被初始化为 ClearCachesApplicationListener，ParentContextCloserApplicationListener，FileEncodingApplicationListener，AnsiOutputApplicationListener ，ConfigFileApplicationListener，DelegatingApplicationListener，ClasspathLoggingApplicationListener，LoggingApplicationListener，LiquibaseServiceLocatorApplicationListener 这九个类的对象组成的 list。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、deduceMainApplicationClass()&lt;/strong&gt; ：根据调用栈，推断出 main 方法的类名&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Class&amp;lt;?&amp;gt; &lt;span class=&quot;fu&quot;&gt;deduceMainApplicationClass&lt;/span&gt;() {
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    StackTraceElement[] stackTrace = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; RuntimeException().&lt;span class=&quot;fu&quot;&gt;getStackTrace&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (StackTraceElement stackTraceElement : stackTrace) {
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;main&quot;&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(stackTraceElement.&lt;span class=&quot;fu&quot;&gt;getMethodName&lt;/span&gt;())) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(stackTraceElement.&lt;span class=&quot;fu&quot;&gt;getClassName&lt;/span&gt;());
      }
    }
  }
  &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException ex) {
    &lt;span class=&quot;co&quot;&gt;// Swallow and continue&lt;/span&gt;
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;run-方法背后的秘密&quot;&gt;run 方法背后的秘密&lt;/h3&gt;
&lt;p&gt;上面看完了构造方法后，已经初始化了一个 SpringApplication 对象，接下来调用其 run 方法，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//运行 Spring 应用程序，创建并刷新一个新的 ApplicationContext&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ConfigurableApplicationContext &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(String&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;args) {
        StopWatch stopWatch = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;StopWatch&lt;/span&gt;();
        stopWatch.&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
        ConfigurableApplicationContext context = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        Collection&amp;lt;SpringBootExceptionReporter&amp;gt; exceptionReporters = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
        &lt;span class=&quot;fu&quot;&gt;configureHeadlessProperty&lt;/span&gt;();
        SpringApplicationRunListeners listeners = &lt;span class=&quot;fu&quot;&gt;getRunListeners&lt;/span&gt;(args);
        listeners.&lt;span class=&quot;fu&quot;&gt;starting&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            ApplicationArguments applicationArguments = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DefaultApplicationArguments&lt;/span&gt;(
                    args);
            ConfigurableEnvironment environment = &lt;span class=&quot;fu&quot;&gt;prepareEnvironment&lt;/span&gt;(listeners,
                    applicationArguments);
            &lt;span class=&quot;fu&quot;&gt;configureIgnoreBeanInfo&lt;/span&gt;(environment);
            Banner printedBanner = &lt;span class=&quot;fu&quot;&gt;printBanner&lt;/span&gt;(environment);
            context = &lt;span class=&quot;fu&quot;&gt;createApplicationContext&lt;/span&gt;();
            exceptionReporters = &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(
                    SpringBootExceptionReporter.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Class[] { ConfigurableApplicationContext.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt; }, context);
            &lt;span class=&quot;fu&quot;&gt;prepareContext&lt;/span&gt;(context, environment, listeners, applicationArguments,
                    printedBanner);
            &lt;span class=&quot;fu&quot;&gt;refreshContext&lt;/span&gt;(context);
            &lt;span class=&quot;fu&quot;&gt;afterRefresh&lt;/span&gt;(context, applicationArguments);
            stopWatch.&lt;span class=&quot;fu&quot;&gt;stop&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;logStartupInfo&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;StartupInfoLogger&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mainApplicationClass&lt;/span&gt;)
                        .&lt;span class=&quot;fu&quot;&gt;logStarted&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getApplicationLog&lt;/span&gt;(), stopWatch);
            }
            listeners.&lt;span class=&quot;fu&quot;&gt;started&lt;/span&gt;(context);
            &lt;span class=&quot;fu&quot;&gt;callRunners&lt;/span&gt;(context, applicationArguments);
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable ex) {
            &lt;span class=&quot;fu&quot;&gt;handleRunFailure&lt;/span&gt;(context, ex, exceptionReporters, listeners);
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(ex);
        }
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            listeners.&lt;span class=&quot;fu&quot;&gt;running&lt;/span&gt;(context);
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable ex) {
            &lt;span class=&quot;fu&quot;&gt;handleRunFailure&lt;/span&gt;(context, ex, exceptionReporters, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(ex);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; context;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可变个数参数 args 即是我们整个应用程序的入口 main 方法的参数。StopWatch 是来自 org.springframework.util 的工具类，可以用来方便的记录程序的运行时间。&lt;/p&gt;
&lt;p&gt;再来看看 1.5.12 与 2.0.1 版本的 run 方法 有什么不一样的地方？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fqx6u0khy1j31kw0wuhar.jpg&quot; alt=&quot;difference-1.5-2.0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来好好分析上面新版本（2.0.1）的 run 方法的代码并配合比较旧版本（1.5.12）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、configureHeadlessProperty()&lt;/strong&gt;：设置 headless 模式&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String SYSTEM_PROPERTY_JAVA_AWT_HEADLESS = &lt;span class=&quot;st&quot;&gt;&quot;java.awt.headless&quot;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; headless = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;configureHeadlessProperty&lt;/span&gt;() {
  System.&lt;span class=&quot;fu&quot;&gt;setProperty&lt;/span&gt;(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, System.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(
    SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;headless&lt;/span&gt;)));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际上是就是设置系统属性 java.awt.headless，该属性会被设置为 true。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、getRunListeners()&lt;/strong&gt;：加载 SpringApplicationRunListener 对象&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt; &lt;span class=&quot;co&quot;&gt;//TODO:  xxx&lt;/span&gt;
SpringApplicationRunListeners listeners = &lt;span class=&quot;fu&quot;&gt;getRunListeners&lt;/span&gt;(args);&lt;span class=&quot;co&quot;&gt;//初始化监听器&lt;/span&gt;
listeners.&lt;span class=&quot;fu&quot;&gt;starting&lt;/span&gt;();
&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
  &lt;span class=&quot;fu&quot;&gt;prepareContext&lt;/span&gt;(context, environment, listeners, applicationArguments, printedBanner);
  &lt;span class=&quot;fu&quot;&gt;refreshContext&lt;/span&gt;(context);
  &lt;span class=&quot;fu&quot;&gt;afterRefresh&lt;/span&gt;(context, applicationArguments);
  listeners.&lt;span class=&quot;fu&quot;&gt;started&lt;/span&gt;(context);
  &lt;span class=&quot;fu&quot;&gt;callRunners&lt;/span&gt;(context, applicationArguments);
}
&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
  listeners.&lt;span class=&quot;fu&quot;&gt;running&lt;/span&gt;(context);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; SpringApplicationRunListeners &lt;span class=&quot;fu&quot;&gt;getRunListeners&lt;/span&gt;(String[] args) {
  Class&amp;lt;?&amp;gt;[] types = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[] { SpringApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, String[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt; };
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplicationRunListeners&lt;/span&gt;(logger, &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(
    SpringApplicationRunListener.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, types, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;, args));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、new DefaultApplicationArguments(args)&lt;/strong&gt; ：获取启动时传入参数 args（main 方法传进来的参数） 并初始化为 ApplicationArguments 对象。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DefaultApplicationArguments&lt;/span&gt;(String[] args) {
  Assert.&lt;span class=&quot;fu&quot;&gt;notNull&lt;/span&gt;(args, &lt;span class=&quot;st&quot;&gt;&quot;Args must not be null&quot;&lt;/span&gt;);
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;source&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Source(args);
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;args&lt;/span&gt; = args;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4、prepareEnvironment(listeners, applicationArguments)&lt;/strong&gt;：根据 listeners 和 applicationArguments 配置SpringBoot 应用的环境。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ConfigurableEnvironment &lt;span class=&quot;fu&quot;&gt;prepareEnvironment&lt;/span&gt;(
  SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments) {
  &lt;span class=&quot;co&quot;&gt;// Create and configure the environment&lt;/span&gt;
  ConfigurableEnvironment environment = &lt;span class=&quot;fu&quot;&gt;getOrCreateEnvironment&lt;/span&gt;();
  &lt;span class=&quot;fu&quot;&gt;configureEnvironment&lt;/span&gt;(environment, applicationArguments.&lt;span class=&quot;fu&quot;&gt;getSourceArgs&lt;/span&gt;());
  listeners.&lt;span class=&quot;fu&quot;&gt;environmentPrepared&lt;/span&gt;(environment);
  &lt;span class=&quot;fu&quot;&gt;bindToSpringApplication&lt;/span&gt;(environment);
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;webApplicationType&lt;/span&gt; == WebApplicationType.&lt;span class=&quot;fu&quot;&gt;NONE&lt;/span&gt;) {
    environment = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;EnvironmentConverter&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getClassLoader&lt;/span&gt;())
      .&lt;span class=&quot;fu&quot;&gt;convertToStandardEnvironmentIfNecessary&lt;/span&gt;(environment);
  }
  ConfigurationPropertySources.&lt;span class=&quot;fu&quot;&gt;attach&lt;/span&gt;(environment);
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; environment;
}
&lt;span class=&quot;co&quot;&gt;//如果 environment 不为空，直接 get 到，否则创建&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ConfigurableEnvironment &lt;span class=&quot;fu&quot;&gt;getOrCreateEnvironment&lt;/span&gt;() {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;environment&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;environment&lt;/span&gt;;
  }
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;webApplicationType&lt;/span&gt; == WebApplicationType.&lt;span class=&quot;fu&quot;&gt;SERVLET&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;StandardServletEnvironment&lt;/span&gt;();
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;StandardEnvironment&lt;/span&gt;();
}
&lt;span class=&quot;co&quot;&gt;//配置环境&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;configureEnvironment&lt;/span&gt;(ConfigurableEnvironment environment,String[] args) {
  &lt;span class=&quot;fu&quot;&gt;configurePropertySources&lt;/span&gt;(environment, args);&lt;span class=&quot;co&quot;&gt;//配置要使用的PropertySources&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;configureProfiles&lt;/span&gt;(environment, args);&lt;span class=&quot;co&quot;&gt;//配置要使用的Profiles&lt;/span&gt;
}
&lt;span class=&quot;co&quot;&gt;//将环境绑定到 SpringApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;bindToSpringApplication&lt;/span&gt;(ConfigurableEnvironment environment) {
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    Binder.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(environment).&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;spring.main&quot;&lt;/span&gt;, Bindable.&lt;span class=&quot;fu&quot;&gt;ofInstance&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;));
  }
  &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception ex) {
    &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;st&quot;&gt;&quot;Cannot bind to SpringApplication&quot;&lt;/span&gt;, ex);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5、configureIgnoreBeanInfo(environment)&lt;/strong&gt;：根据环境信息配置要忽略的 bean 信息&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String IGNORE_BEANINFO_PROPERTY_NAME = &lt;span class=&quot;st&quot;&gt;&quot;spring.beaninfo.ignore&quot;&lt;/span&gt;;

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;configureIgnoreBeanInfo&lt;/span&gt;(ConfigurableEnvironment environment) {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (System.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(
    CachedIntrospectionResults.&lt;span class=&quot;fu&quot;&gt;IGNORE_BEANINFO_PROPERTY_NAME&lt;/span&gt;) == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    Boolean ignore = environment.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;spring.beaninfo.ignore&quot;&lt;/span&gt;,
                                             Boolean.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, Boolean.&lt;span class=&quot;fu&quot;&gt;TRUE&lt;/span&gt;);
    System.&lt;span class=&quot;fu&quot;&gt;setProperty&lt;/span&gt;(CachedIntrospectionResults.&lt;span class=&quot;fu&quot;&gt;IGNORE_BEANINFO_PROPERTY_NAME&lt;/span&gt;,
                       ignore.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;());
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;6、printBanner(environment)&lt;/strong&gt;：打印标志，上面我已经说过了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Banner &lt;span class=&quot;fu&quot;&gt;printBanner&lt;/span&gt;(ConfigurableEnvironment environment) {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bannerMode&lt;/span&gt; == Banner.&lt;span class=&quot;fu&quot;&gt;Mode&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;OFF&lt;/span&gt;) { &lt;span class=&quot;co&quot;&gt;//如果设置为 off，不打印 Banner&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
  }
  ResourceLoader resourceLoader = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt;
    : &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DefaultResourceLoader&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getClassLoader&lt;/span&gt;());
  SpringApplicationBannerPrinter bannerPrinter = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringApplicationBannerPrinter&lt;/span&gt;(
    resourceLoader, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;banner&lt;/span&gt;);
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bannerMode&lt;/span&gt; == Mode.&lt;span class=&quot;fu&quot;&gt;LOG&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; bannerPrinter.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;(environment, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mainApplicationClass&lt;/span&gt;, logger);
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; bannerPrinter.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;(environment, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mainApplicationClass&lt;/span&gt;, System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;7、createApplicationContext()&lt;/strong&gt;：根据应用类型来确定该 Spring Boot 项目应该创建什么类型的 ApplicationContext ，默认情况下，如果没有明确设置的应用程序上下文或应用程序上下文类，该方法会在返回合适的默认值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String DEFAULT_WEB_CONTEXT_CLASS = &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext&quot;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String DEFAULT_REACTIVE_WEB_CONTEXT_CLASS = &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext&quot;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String DEFAULT_CONTEXT_CLASS = &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.context.annotation.AnnotationConfigApplicationContext&quot;&lt;/span&gt;;

&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; ConfigurableApplicationContext &lt;span class=&quot;fu&quot;&gt;createApplicationContext&lt;/span&gt;() {
  Class&amp;lt;?&amp;gt; contextClass = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;applicationContextClass&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (contextClass == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;webApplicationType&lt;/span&gt;) {    &lt;span class=&quot;co&quot;&gt;//根据应用程序的类型来初始化容器&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; SERVLET:   &lt;span class=&quot;co&quot;&gt;//servlet 应用程序&lt;/span&gt;
          contextClass = Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(DEFAULT_WEB_CONTEXT_CLASS);
          &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; REACTIVE:  &lt;span class=&quot;co&quot;&gt;//reactive 应用程序&lt;/span&gt;
          contextClass = Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);
          &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:        &lt;span class=&quot;co&quot;&gt;//默认&lt;/span&gt;
          contextClass = Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(DEFAULT_CONTEXT_CLASS);
      }
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException ex) {
  &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(
    &lt;span class=&quot;st&quot;&gt;&quot;Unable create a default ApplicationContext,please specify an           ApplicationContextClass&quot;&lt;/span&gt;,ex);
    }
  }
  &lt;span class=&quot;co&quot;&gt;//最后通过Spring的工具类 BeanUtils 初始化容器类 bean&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (ConfigurableApplicationContext) BeanUtils.&lt;span class=&quot;fu&quot;&gt;instantiateClass&lt;/span&gt;(contextClass);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来看看在 1.5.12 中是怎么样的？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fqx6tx7lchj31kw0nw4gr.jpg&quot; alt=&quot;createApplicationContext&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、exceptionReporters = getSpringFactoriesInstances( SpringBootExceptionReporter.class, new Class[] { ConfigurableApplicationContext.class }, context)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; Collection&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;(Class&amp;lt;T&amp;gt; type,
            Class&amp;lt;?&amp;gt;[] parameterTypes, Object&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;args) {
  ClassLoader classLoader = Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getContextClassLoader&lt;/span&gt;();
  &lt;span class=&quot;co&quot;&gt;// Use names and ensure unique to protect against duplicates&lt;/span&gt;
  Set&amp;lt;String&amp;gt; names = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;(
    SpringFactoriesLoader.&lt;span class=&quot;fu&quot;&gt;loadFactoryNames&lt;/span&gt;(type, classLoader));
  List&amp;lt;T&amp;gt; instances = &lt;span class=&quot;fu&quot;&gt;createSpringFactoriesInstances&lt;/span&gt;(type, parameterTypes,
       classLoader, args, names);&lt;span class=&quot;co&quot;&gt;//根据类型 key 为 SpringBootExceptionReporter 去加载&lt;/span&gt;
  AnnotationAwareOrderComparator.&lt;span class=&quot;fu&quot;&gt;sort&lt;/span&gt;(instances);&lt;span class=&quot;co&quot;&gt;//对实例排序&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; instances;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里也是通过 SpringFactoriesLoader 加载 META-INF/spring.factories 中 key 为 SpringBootExceptionReporter 的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tp9y81j31kw0tfdqv.jpg&quot; alt=&quot;springbootexception&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9、prepareContext(context, environment, listeners, applicationArguments, printedBanner)&lt;/strong&gt;：完成整个容器的创建与启动以及 bean 的注入功能。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//装配 Context&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;prepareContext&lt;/span&gt;(ConfigurableApplicationContext context,
   ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,
   ApplicationArguments applicationArguments, Banner printedBanner) {
  &lt;span class=&quot;co&quot;&gt;//将之前准备好的 environment 设置给创建好的 ApplicationContext 使用&lt;/span&gt;
  context.&lt;span class=&quot;fu&quot;&gt;setEnvironment&lt;/span&gt;(environment);
  &lt;span class=&quot;co&quot;&gt;//1、&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;postProcessApplicationContext&lt;/span&gt;(context);
  &lt;span class=&quot;co&quot;&gt;//2、&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;applyInitializers&lt;/span&gt;(context);
  listeners.&lt;span class=&quot;fu&quot;&gt;contextPrepared&lt;/span&gt;(context);
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;logStartupInfo&lt;/span&gt;) {&lt;span class=&quot;co&quot;&gt;//启动日志&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;logStartupInfo&lt;/span&gt;(context.&lt;span class=&quot;fu&quot;&gt;getParent&lt;/span&gt;() == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
    &lt;span class=&quot;fu&quot;&gt;logStartupProfileInfo&lt;/span&gt;(context);
  }
  &lt;span class=&quot;co&quot;&gt;// Add boot specific singleton beans&lt;/span&gt;
  context.&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;registerSingleton&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;springApplicationArguments&quot;&lt;/span&gt;,
                                             applicationArguments);
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (printedBanner != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    context.&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;registerSingleton&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;springBootBanner&quot;&lt;/span&gt;, printedBanner);
  }
  &lt;span class=&quot;co&quot;&gt;// Load the sources&lt;/span&gt;
  Set&amp;lt;Object&amp;gt; sources = &lt;span class=&quot;fu&quot;&gt;getAllSources&lt;/span&gt;();
  Assert.&lt;span class=&quot;fu&quot;&gt;notEmpty&lt;/span&gt;(sources, &lt;span class=&quot;st&quot;&gt;&quot;Sources must not be empty&quot;&lt;/span&gt;);
  &lt;span class=&quot;co&quot;&gt;//3、&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;load&lt;/span&gt;(context, sources.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]));
  listeners.&lt;span class=&quot;fu&quot;&gt;contextLoaded&lt;/span&gt;(context);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1）、postProcessApplicationContext(context)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String CONFIGURATION_BEAN_NAME_GENERATOR = &lt;span class=&quot;st&quot;&gt;&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;&lt;/span&gt;;

&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;postProcessApplicationContext&lt;/span&gt;(ConfigurableApplicationContext context) {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beanNameGenerator&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    context.&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;registerSingleton&lt;/span&gt;(
      AnnotationConfigUtils.&lt;span class=&quot;fu&quot;&gt;CONFIGURATION_BEAN_NAME_GENERATOR&lt;/span&gt;,
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beanNameGenerator&lt;/span&gt;);
  }
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (context &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; GenericApplicationContext) {
      ((GenericApplicationContext) context)
      .&lt;span class=&quot;fu&quot;&gt;setResourceLoader&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt;);
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (context &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; DefaultResourceLoader) {
      ((DefaultResourceLoader) context)
      .&lt;span class=&quot;fu&quot;&gt;setClassLoader&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClassLoader&lt;/span&gt;());
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法对 context 进行了预设置，设置了 ResourceLoader 和 ClassLoader，并向 bean 工厂中添加了一个beanNameGenerator 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）、applyInitializers(context)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;applyInitializers&lt;/span&gt;(ConfigurableApplicationContext context) {
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (ApplicationContextInitializer initializer : &lt;span class=&quot;fu&quot;&gt;getInitializers&lt;/span&gt;()) {
    Class&amp;lt;?&amp;gt; requiredType = GenericTypeResolver.&lt;span class=&quot;fu&quot;&gt;resolveTypeArgument&lt;/span&gt;(
      initializer.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;(), ApplicationContextInitializer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    Assert.&lt;span class=&quot;fu&quot;&gt;isInstanceOf&lt;/span&gt;(requiredType, context, &lt;span class=&quot;st&quot;&gt;&quot;Unable to call initializer.&quot;&lt;/span&gt;);
    initializer.&lt;span class=&quot;fu&quot;&gt;initialize&lt;/span&gt;(context);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在刷新之前将任何 ApplicationContextInitializer 应用于上下文&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)、load(context, sources.toArray(new Object[0]))&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要是加载各种 beans 到 ApplicationContext 对象中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;load&lt;/span&gt;(ApplicationContext context, Object[] sources) {
  BeanDefinitionLoader loader = &lt;span class=&quot;fu&quot;&gt;createBeanDefinitionLoader&lt;/span&gt;( &lt;span class=&quot;co&quot;&gt;//2&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;getBeanDefinitionRegistry&lt;/span&gt;(context), sources);&lt;span class=&quot;co&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beanNameGenerator&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    loader.&lt;span class=&quot;fu&quot;&gt;setBeanNameGenerator&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beanNameGenerator&lt;/span&gt;);
  }
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    loader.&lt;span class=&quot;fu&quot;&gt;setResourceLoader&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;resourceLoader&lt;/span&gt;);
  }
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;environment&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    loader.&lt;span class=&quot;fu&quot;&gt;setEnvironment&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;environment&lt;/span&gt;);
  }
  loader.&lt;span class=&quot;fu&quot;&gt;load&lt;/span&gt;();&lt;span class=&quot;co&quot;&gt;//3&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(1)、getBeanDefinitionRegistry(context)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取 bean 定义注册表&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; BeanDefinitionRegistry &lt;span class=&quot;fu&quot;&gt;getBeanDefinitionRegistry&lt;/span&gt;(ApplicationContext context) {
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (context &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; BeanDefinitionRegistry) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (BeanDefinitionRegistry) context;
  }
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (context &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; AbstractApplicationContext) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (BeanDefinitionRegistry) ((AbstractApplicationContext) context)
      .&lt;span class=&quot;fu&quot;&gt;getBeanFactory&lt;/span&gt;();
  }
  &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;st&quot;&gt;&quot;Could not locate BeanDefinitionRegistry&quot;&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(2)、createBeanDefinitionLoader()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 BeanDefinitionLoader 的构造方法把参数（注册表、资源）传进去，然后创建 BeanDefinitionLoader。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)、load()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把资源全部加载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10、refreshContext(context)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;refreshContext&lt;/span&gt;(ConfigurableApplicationContext context) {
  &lt;span class=&quot;fu&quot;&gt;refresh&lt;/span&gt;(context);&lt;span class=&quot;co&quot;&gt;//1&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;registerShutdownHook&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
      context.&lt;span class=&quot;fu&quot;&gt;registerShutdownHook&lt;/span&gt;();
    }
    &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (AccessControlException ex) {
      &lt;span class=&quot;co&quot;&gt;// Not allowed in some environments.&lt;/span&gt;
    }
  }
}
&lt;span class=&quot;co&quot;&gt;//刷新底层的 ApplicationContext&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;refresh&lt;/span&gt;(ApplicationContext applicationContext) {
  Assert.&lt;span class=&quot;fu&quot;&gt;isInstanceOf&lt;/span&gt;(AbstractApplicationContext.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, applicationContext);
  ((AbstractApplicationContext) applicationContext).&lt;span class=&quot;fu&quot;&gt;refresh&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;refreshContext(context) 方法又调用了 refresh(context)。在调用了 refresh(context) 方法之后，调用了 registerShutdownHook 方法。继续看它的 refresh 方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;refresh&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; BeansException, IllegalStateException {
  &lt;span class=&quot;kw&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;startupShutdownMonitor&lt;/span&gt;) {
    &lt;span class=&quot;co&quot;&gt;// Prepare this context for refreshing.&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;prepareRefresh&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// Tell the subclass to refresh the internal bean factory.&lt;/span&gt;
    ConfigurableListableBeanFactory beanFactory = &lt;span class=&quot;fu&quot;&gt;obtainFreshBeanFactory&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;// Prepare the bean factory for use in this context.&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;prepareBeanFactory&lt;/span&gt;(beanFactory);
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;co&quot;&gt;// Allows post-processing of the bean factory in context subclasses.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;postProcessBeanFactory&lt;/span&gt;(beanFactory);
      &lt;span class=&quot;co&quot;&gt;// Invoke factory processors registered as beans in the context.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;(beanFactory);
      &lt;span class=&quot;co&quot;&gt;// Register bean processors that intercept bean creation.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;registerBeanPostProcessors&lt;/span&gt;(beanFactory);
      &lt;span class=&quot;co&quot;&gt;// Initialize message source for this context.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;initMessageSource&lt;/span&gt;();
      &lt;span class=&quot;co&quot;&gt;// Initialize event multicaster for this context.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;initApplicationEventMulticaster&lt;/span&gt;();
      &lt;span class=&quot;co&quot;&gt;// Initialize other special beans in specific context subclasses.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;onRefresh&lt;/span&gt;();
      &lt;span class=&quot;co&quot;&gt;// Check for listener beans and register them.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;registerListeners&lt;/span&gt;();
      &lt;span class=&quot;co&quot;&gt;// Instantiate all remaining (non-lazy-init) singletons.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;(beanFactory); &lt;span class=&quot;co&quot;&gt;//1&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// Last step: publish corresponding event.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;finishRefresh&lt;/span&gt;();
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (BeansException ex) {
      。。。
        &lt;span class=&quot;co&quot;&gt;// Destroy already created singletons to avoid dangling resources.&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;destroyBeans&lt;/span&gt;();
      &lt;span class=&quot;co&quot;&gt;// Reset 'active' flag.&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;cancelRefresh&lt;/span&gt;(ex);
      &lt;span class=&quot;co&quot;&gt;// Propagate exception to caller.&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; ex;
    } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
      &lt;span class=&quot;co&quot;&gt;// Reset common introspection caches in Spring's core, since we&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// might not ever need metadata for singleton beans anymore...&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;resetCommonCaches&lt;/span&gt;();
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，我们就看见重点了，仔细看上的注释，正在做各种初始化工作，而今天我们关注的重点就是方法 finishBeanFactoryInitialization(beanFactory)。该方法进行了非懒加载 beans 的初始化工作。现在我们进入该方法内部，一探究竟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fqx6tli7pjj31kw1757h0.jpg&quot; alt=&quot;finishbeanFactoryini&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看上图方法中的最后一步，调用了 beanFactory 的 preInstantiateSingletons() 方法。此处的 beanFactory 是哪个类的实例对象呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fqx6xir0iaj31kw0urjuy.jpg&quot; alt=&quot;2018-05-02_16-17-50&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到 ConfigurableListableBeanFactory 接口的实现类只有 DefaultListableBeanFactory，我们看下实现类中的 preInstantiateSingletons 方法是怎么做的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;preInstantiateSingletons&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; BeansException {
  &lt;span class=&quot;co&quot;&gt;// Iterate over a copy to allow for init methods which in turn register new bean definitions.&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// While this may not be part of the regular factory bootstrap, it does otherwise work fine.&lt;/span&gt;
  List&amp;lt;String&amp;gt; beanNames = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beanDefinitionNames&lt;/span&gt;);

  &lt;span class=&quot;co&quot;&gt;// Trigger initialization of all non-lazy singleton beans...&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String beanName : beanNames) {
    RootBeanDefinition bd = &lt;span class=&quot;fu&quot;&gt;getMergedLocalBeanDefinition&lt;/span&gt;(beanName);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!bd.&lt;span class=&quot;fu&quot;&gt;isAbstract&lt;/span&gt;() &amp;amp;&amp;amp; bd.&lt;span class=&quot;fu&quot;&gt;isSingleton&lt;/span&gt;() &amp;amp;&amp;amp; !bd.&lt;span class=&quot;fu&quot;&gt;isLazyInit&lt;/span&gt;()) {
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;isFactoryBean&lt;/span&gt;(beanName)) {
        Object bean = &lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(FACTORY_BEAN_PREFIX + beanName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (bean &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; FactoryBean) {
          &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; FactoryBean&amp;lt;?&amp;gt; factory = (FactoryBean&amp;lt;?&amp;gt;) bean;
          &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; isEagerInit;
         &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (System.&lt;span class=&quot;fu&quot;&gt;getSecurityManager&lt;/span&gt;() != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; factory &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; SmartFactoryBean){
            isEagerInit = AccessController.&lt;span class=&quot;fu&quot;&gt;doPrivileged&lt;/span&gt;((PrivilegedAction&amp;lt;Boolean&amp;gt;)
             ((SmartFactoryBean&amp;lt;?&amp;gt;) factory)::isEagerInit, &lt;span class=&quot;fu&quot;&gt;getAccessControlContext&lt;/span&gt;());
          } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            isEagerInit = (factory &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; SmartFactoryBean &amp;amp;&amp;amp;
                           ((SmartFactoryBean&amp;lt;?&amp;gt;) factory).&lt;span class=&quot;fu&quot;&gt;isEagerInit&lt;/span&gt;());
          }
          &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (isEagerInit) {
            &lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(beanName);
          }
        }
      } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(beanName);
      }
    }
  }

  &lt;span class=&quot;co&quot;&gt;// Trigger post-initialization callback for all applicable beans...&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String beanName : beanNames) {
    Object singletonInstance = &lt;span class=&quot;fu&quot;&gt;getSingleton&lt;/span&gt;(beanName);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (singletonInstance &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; SmartInitializingSingleton) {
      &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (System.&lt;span class=&quot;fu&quot;&gt;getSecurityManager&lt;/span&gt;() != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        AccessController.&lt;span class=&quot;fu&quot;&gt;doPrivileged&lt;/span&gt;((PrivilegedAction&amp;lt;Object&amp;gt;) () -&amp;gt; {
          smartSingleton.&lt;span class=&quot;fu&quot;&gt;afterSingletonsInstantiated&lt;/span&gt;();
          &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        }, &lt;span class=&quot;fu&quot;&gt;getAccessControlContext&lt;/span&gt;());
      } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        smartSingleton.&lt;span class=&quot;fu&quot;&gt;afterSingletonsInstantiated&lt;/span&gt;();
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的代码中可以看到很多调用了 getBean(beanName) 方法，跟踪此方法进去后，最终发现 getBean 调用了AbstractBeanFactory 类的 doGetBean(xxx) 方法，doGetBean(xxx) 方法中有这么一段代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tr2ukqj31je1fegwm.jpg&quot; alt=&quot;2018-05-02_17-17-39&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqx6xjtn0hj31ja17g15o.jpg&quot; alt=&quot;2018-05-02_17-19-31&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是 createBean() 方法并没有得到实现，实现类在 AbstractAutowireCapableBeanFactory 中。这才是创建 bean 的核心方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fqx6toc4dxj31kw1bana4.jpg&quot; alt=&quot;createBean&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不知不觉，代码看的越来越深，感觉思维都差点回不去 run 方法了，切回大脑的上下文线程到 run 方法去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11、afterRefresh(context, applicationArguments)&lt;/strong&gt;：在上下文刷新后调用该方法，其内部没有做任何操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqx6tnnz8vj31bs0pkgrg.jpg&quot; alt=&quot;2018-05-02_17-43-23&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现没做任何操作了之后，就觉得有点奇怪，所以把当前版本和 1.5.12 对比了下，发现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqx6ts33l2j31kw0witww.jpg&quot; alt=&quot;afterRefresh&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在 1.5.12 中的 afterRefresh() 方法中调用了 callRunners() 方法，但是在 2.0.1 版本中的 run 方法中调用了 callRunners () 方法:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fqx6xmgbpvj31kw0x8hc4.jpg&quot; alt=&quot;2018-05-02_17-57-52&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里不得不说 SpringApplicationRunListeners 在 2.0.1 中的改变：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fqx6tq6fzhj31kw0y5azk.jpg&quot; alt=&quot;2018-05-02_18-28-17&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以发现在 run 方法中，SpringApplicationRunListeners 监听器的状态花生了变化，这也是通过对比不同版本的代码才知道的区别，所以说我们看源码需要多对比着看。&lt;/p&gt;
&lt;p&gt;so，我们来看下这个 SpringApplicationRunListeners 这个接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fqx6xla7afj31kw0unx1j.jpg&quot; alt=&quot;2018-05-02_18-33-20&quot;/&gt;&lt;/p&gt;
&lt;p&gt;started 状态：The context has been refreshed and the application has started but CommandLineRunner and ApplicationRunner have not been called&lt;/p&gt;
&lt;p&gt;running 状态：Called immediately before the run method finishes, when the application context has been refreshed and all CommandLineRunner and ApplicationRunners have been called.&lt;/p&gt;
&lt;h3 id=&quot;相关文章&quot;&gt;相关文章&lt;/h3&gt;
&lt;p&gt;1、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/&quot;&gt;Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/&quot;&gt;Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/&quot;&gt;Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/&quot;&gt;Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/&quot;&gt;Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/&quot;&gt;Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/30/springboot_SpringApplication/&quot;&gt;Spring Boot 2.0系列文章(七)：SpringApplication 深入探索&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;本文从源码级别分析了 Spring Boot 应用程序的启动过程，着重看了 SpringApplication 类中的 run 方法其内部实现，并把涉及到的流程代码都过了一遍。&lt;/p&gt;
&lt;p&gt;感悟：有时候跟代码跟着跟着，发现越陷越深，好难跳出来！后面还需多向别人请教阅读源码的技巧！&lt;/p&gt;
&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;虽然源码很难，但随着不断的探索，源码在你面前将会一览无遗，享受这种探索后的成就感！加油！骚年！&lt;/p&gt;
&lt;p&gt;自己本人能力有限，源码看的不多，上面如有不对的还请留言交流。&lt;/p&gt;
</description>
<pubDate>Wed, 02 May 2018 14:17:00 +0000</pubDate>
<dc:creator>zhisheng_tian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhisheng/p/8982845.html</dc:identifier>
</item>
<item>
<title>NopCommerce开源项目中很基础但是很实用的C# Helper方法 - 码农阿宇</title>
<link>http://www.cnblogs.com/CoderAyu/p/8982842.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CoderAyu/p/8982842.html</guid>
<description>&lt;p&gt;刚过了个五一，在杭州到处看房子，不知道杭州最近怎么了，杭州买房的人这么多，房价涨得太厉害，这几年翻倍翻倍地涨，刚过G20，又要亚运会，让我这样的刚需用户买不起，也买不到房子，搞得人心惶惶，太恐怖了，心好累。&lt;/p&gt;
&lt;p&gt;这几天，因为这件事情感觉人都是懵的，无法静心学习复杂的东西，所以就看看一些基础，学习学习NopCommerce的CommonHelper都写了些啥，看看别人的代码巧在哪里，妙在哪里。&lt;/p&gt;


&lt;p&gt;nopCommerce是最好的开源电子商务购物 系统。nopCommerce免费提供。今天，它是最好和最流行的ASP.NET电子商务软件。它已被下载超过180万次！&lt;/p&gt;
&lt;p&gt;nopCommerce是一个完全可定制的购物系统。它稳定且高度可用。nopCommerce是一个开源的电子商务解决方案，它是基于MS SQL 2008（或更高版本）后端数据库的&lt;strong&gt;ASP.NET（MVC）&lt;/strong&gt;。我们易于使用的购物车解决方案特别适合已经超过现有系统的商家，并可能与您当前的网站托管商或我们的托管合作伙伴一起托管。它拥有开始通过互联网销售物理和数字产品所需的一切。&lt;/p&gt;
&lt;p&gt;以上解释引用自该项目的Github ：&lt;a title=&quot;https://github.com/nopSolutions/nopCommerce&quot; href=&quot;https://github.com/nopSolutions/nopCommerce&quot;&gt;https://github.com/nopSolutions/nopCommerce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为这几天没无法静心学习该项目的架构，所有只拎出该项目的CommonHelper.cs来谈谈。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#region&lt;/span&gt; Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; Regex _emailRegex;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;we use EmailValidator from FluentValidation. So let's keep them sync - &lt;/span&gt;&lt;span&gt;https://github.com/JeremySkinner/FluentValidation/blob/master/src/FluentValidation/Validators/EmailValidator.cs&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _emailExpression = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^((([a-z]|\d|[!#\$%&amp;amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-||_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+([a-z]+|\d|-|\.{0,1}|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])?([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

       

        &lt;span&gt;#region&lt;/span&gt; Methods

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 检查Email(是否为空，是否超长，格式是否规范)
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;email&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The email.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; EnsureSubscriberEmailOrThrow(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; email)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; output =&lt;span&gt; EnsureNotNull(email);
            output &lt;/span&gt;=&lt;span&gt; output.Trim();
            output &lt;/span&gt;= EnsureMaximumLength(output, &lt;span&gt;255&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;IsValidEmail(output))
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NopException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Email is not valid.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; output;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用正则表达式校验Email
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;email&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Email to verify&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;true if the string is a valid e-mail address and false if it's not&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsValidEmail(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; email)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(email))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            email &lt;/span&gt;=&lt;span&gt; email.Trim();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _emailRegex.IsMatch(email);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个E-mial校验的方法基本是可以直接拿过来用的，校验的正则表达式也很全面，需要用的时候可以过来copy。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 检查该字符串是否是可用的Ip地址
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ipAddress&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;IPAddress to verify&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;true if the string is a valid IpAddress and false if it's not&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsValidIpAddress(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; ipAddress)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; IPAddress.TryParse(ipAddress, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; IPAddress _);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接使用了系统自带的IPAddress.TryParse方法，很多小伙伴还不知道吧！&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 产生一个指定长度的随机数据字符串
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;length&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Length&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;Result string&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GenerateRandomDigitCode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;)
                str &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Concat(str, random.Next(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;).ToString());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的话，其实我觉得用stringbuild比直接用string更好一点，尤其是当length比较长的时候，可能用stringbuild效率更高一些。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 产生一个随机数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;min&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Minimum number&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;max&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Maximum number&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; GenerateRandomInteger(&lt;span&gt;int&lt;/span&gt; min = &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; max = &lt;span&gt;int&lt;/span&gt;&lt;span&gt;.MaxValue)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; randomNumberBuffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RNGCryptoServiceProvider().GetBytes(randomNumberBuffer);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Random(BitConverter.ToInt32(randomNumberBuffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)).Next(min, max);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当时不懂Random工作原理的时候，觉得这个方法简直是脱裤子放P，多此一举，搞得这么麻烦干嘛！ 直接Random().Next（min,max）不就产生了一个指定范围的随机数吗？&lt;span&gt;&lt;em&gt;干嘛搞得这么复杂呢？&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;原来，Random是需要一个随机数作为“种子”的，当这个种子相同时，那么产生的随机数也是相同的，有同学肯定会说，我们平时用的时候没有指定“种子”数据，也能产生我想要的随机数啊！ 其实，当我们没有指定“种子”的时候，Random时默认以当前时间作为种子的，当高并发访问的情况下，如果使用时间作为种子数据，这显然就很有可能产生相同的随机数，这显然就不那么“随机”了，所以该方法看似多余的方法都只是为了利用RNGCryptoServiceProvider().GetBytes（）产生一个足够随机的byte[]，然后再把该byte[]转换成数字，那么该数字就能基本不会重复了，也就是”种子”不重复，所以随机数也不会重复了。&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 检查两个数组是否相等
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;a1&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Array 1&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;a2&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Array 2&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; ArraysEqual&amp;lt;T&amp;gt;&lt;span&gt;(T[] a1, T[] a2)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;also see Enumerable.SequenceEqual(a1, a2);&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ReferenceEquals(a1, a2))
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (a1 == &lt;span&gt;null&lt;/span&gt; || a2 == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (a1.Length !=&lt;span&gt; a2.Length)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; comparer = EqualityComparer&amp;lt;T&amp;gt;&lt;span&gt;.Default;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; a1.Length; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!comparer.Equals(a1[i], a2[i])) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜先检测地址引用是否相同，如果相同，肯定时同一个对象，那么相等，然后是检测时否为空…..   代码很简单，就不一一说了，我们比较的时候，容易遗忘一些条件，直接走到了for循环最后一步，其实，不到迫不得已，没不要for循环。&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;给对象的指定属性赋值
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;instance&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The object whose property to set.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;propertyName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The name of the property to set.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The value to set the property to.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetProperty(&lt;span&gt;object&lt;/span&gt; instance, &lt;span&gt;string&lt;/span&gt; propertyName, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (instance == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(instance));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (propertyName == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(propertyName));

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instanceType =&lt;span&gt; instance.GetType();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pi =&lt;span&gt; instanceType.GetProperty(propertyName);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pi == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NopException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No property '{0}' found on the instance of type '{1}'.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, propertyName, instanceType);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;pi.CanWrite)
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NopException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The property '{0}' on the instance of type '{1}' does not have a setter.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, propertyName, instanceType);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;value.GetType().IsAssignableFrom(pi.PropertyType))
                value &lt;/span&gt;=&lt;span&gt; To(value, pi.PropertyType);
            pi.SetValue(instance, value, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我也是第一次知道，居然还能这么玩。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将一个值转换成目标类型。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The value to convert.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;destinationType&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The type to convert the value to.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The converted value.&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; To(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; value, Type destinationType)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; To(value, destinationType, CultureInfo.InvariantCulture);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  将一个值转换成目标类型.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The value to convert.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;destinationType&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The type to convert the value to.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;culture&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Culture&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The converted value.&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; To(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; value, Type destinationType, CultureInfo culture)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sourceType =&lt;span&gt; value.GetType();

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; destinationConverter =&lt;span&gt; TypeDescriptor.GetConverter(destinationType);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (destinationConverter != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; destinationConverter.CanConvertFrom(value.GetType()))
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; destinationConverter.ConvertFrom(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, culture, value);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sourceConverter =&lt;span&gt; TypeDescriptor.GetConverter(sourceType);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sourceConverter != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; sourceConverter.CanConvertTo(destinationType))
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sourceConverter.ConvertTo(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, culture, value, destinationType);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (destinationType.IsEnum &amp;amp;&amp;amp; value &lt;span&gt;is&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Enum.ToObject(destinationType, (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)value);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;destinationType.IsInstanceOfType(value))
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Convert.ChangeType(value, destinationType, culture);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将一个值转换成目标类型
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The value to convert.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The type to convert the value to.&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The converted value.&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; T To&amp;lt;T&amp;gt;(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return (T)Convert.ChangeType(value, typeof(T), CultureInfo.InvariantCulture);&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; (T)To(value, &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T));
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了这个方法，我们就不用傻傻想着用Convent….到底Convernt点什么呢？哈哈，直接To&amp;lt;T&amp;gt;()，是不是很帅？&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  深度优先的递归删除
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;path&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Directory path&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DeleteDirectory(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(path))
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(path);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;find more info about directory deletion
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;and why we use this approach at &lt;/span&gt;&lt;span&gt;https://stackoverflow.com/questions/329355/cannot-delete-directory-with-directory-deletepath-true&lt;/span&gt;

            &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; directory &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Directory.GetDirectories(path))
            {
                DeleteDirectory(directory);
            }

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                Directory.Delete(path, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException)
            {
                Directory.Delete(path, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (UnauthorizedAccessException)
            {
                Directory.Delete(path, &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一开始，我也不明白为什么要弄得这么复杂，要删除目录，直接Directory.Delete（path）就好了不是吗？ 其实不是的，如果目录不为空，会报&lt;code&gt;System.IO.IOException: The directory is not empty.的错误的，所以要递归，层层删除，据说Win系统的资源管理器，删除目录，其实就是这个逻辑实现的。&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取两个时间之间相差的年份
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;startDate&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;endDate&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetDifferenceInYears(DateTime startDate, DateTime endDate)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;source: &lt;/span&gt;&lt;span&gt;http://stackoverflow.com/questions/9/how-do-i-calculate-someones-age-in-c&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;this assumes you are looking for the western idea of age and not using East Asian reckoning.&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; age = endDate.Year -&lt;span&gt; startDate.Year;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (startDate &amp;gt; endDate.AddYears(-&lt;span&gt;age))
                age&lt;/span&gt;--&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对，如果endDate.Year - &lt;span&gt;startDate.Year是不对的，就好像你是去年的8月份出生的，而现在才五月份，那么你现在还不能称为1岁一样的道理。同样的方法还可以用来获取月、日、时、分、秒的间隔。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 映射虚拟路径到物理路径
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;path&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The path to map. E.g. &quot;~/bin&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The physical path. E.g. &quot;c:\inetpub\wwwroot\bin&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MapPath(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
        {
            path &lt;/span&gt;= path.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;).TrimStart(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).Replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
  CommonHelper.BaseDirectory = hostingEnvironment.ContentRootPath;
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;return&lt;/span&gt; Path.Combine(BaseDirectory ?? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty, path);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;大致就是这么多，可能以上方法大家都知道，但是自己写出来可能不够巧妙（老江湖除外），记录下来，希望对大家有所帮助，也用于自我加深映像。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有兴趣的可以去github上下载nopcommerce的源码来看看。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;另外，杭州买房，预算有限，杭州城区估计是买不起了，现在在纠结海宁、安吉、德清、桐乡、桐庐等这样的周边地区，如果有杭州有买房经验的同行大哥希望能给小弟一点指点，哈哈~~&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 02 May 2018 14:16:00 +0000</pubDate>
<dc:creator>码农阿宇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CoderAyu/p/8982842.html</dc:identifier>
</item>
<item>
<title>基于 Java Web 的毕业设计选题管理平台--选题报告与需求规格说明书 - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8982442.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8982442.html</guid>
<description>
&lt;hr/&gt;

&lt;hr/&gt;&lt;h2/&gt;

&lt;h2&gt;1、团队名称——&lt;span&gt;指南者团队&lt;/span&gt;&lt;/h2&gt;

&lt;hr/&gt;
&lt;h2&gt;2、团队成员&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h3&gt;孔潭活：2015034643032&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;何德新：2015034643017&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;吴淑瑶：2015034643018&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;苏咏梅：2015034643025&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;李茵敏：2015034643012&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;&lt;h2/&gt;

&lt;h2&gt; 3、项目名称——&lt;span&gt;基于 Java Web 的毕业设计选题管理平台&lt;/span&gt;&lt;/h2&gt;

&lt;hr/&gt;
&lt;h2&gt; 4、项目描述&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在大多学校中的毕业论文双向选择管理大多都是采用了人工进行管理，但是面对不断增加的高校学生，这样不仅工作量大，而且效率低下容易出错，更加不方便教师查阅和管理，而这个基于 Java Web 的毕业设计选题管理平台可以解决这些问题和缺陷，并且这个平台适应实际的需求变化，为高校毕业学生和导师提供一种可靠的低成本运作模式，并且也可以减少导师不必要的劳动和重复性工作，提高了统计数据的准确性。而该平台基于 Java 的编程给使用者提供了一个直观、易于与用户进行交互的图形界面。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;5、创新与收益&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;创新点：这个平台的运行可以减少不必要的人力，节省更多的资源，并且也可以统计大量的数据，对各个数据库进行分类管理，保证数据的安全性和统一性；所以平台在经济上是可行的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;收益：与高校合作，推荐使用该平台，具体收益暂无法计算。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;6、用户场景分析&lt;a href=&quot;http://www.cnblogs.com/compassblog/p/8982442.html#id5&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;用户：高校毕业生、毕业生导师、高校行政人员、高校管理人员。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;场景分析：这个平台的通过为用户提供一种可靠的低成本运作模式，主要场景为毕业论文双向选择管理的毕业生和导师的双向选择时。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们设想的用户场景：学生A 是需要选择毕业设计题目和导师的学生，通过登录该网站平台，可以快捷的了解到自己所能完成的毕业设计题目和导师，进而惊醒选择。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;7、真实用户调研&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;一个真实的案例：五一期间有两个今年即将毕业的毕业生通过公众号联系到我，一个找我帮忙选毕业设计题目，而另一个则是说选错题，让我指导下如何完成选错的毕业设计。抛开各种原因不说，通过这个案例，足以说明毕业设计双向选择的管理存在的问题和缺陷，并且大多数高校基于人工管理的毕业设计选择的低效，而随着高校生源的不断增加和扩增，基于 Java Web 的毕业设计选题管理这个平台的真实用户的选择可行性。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;真实用户场景：学生A 是需要选择毕业设计题目和导师的学生，通过登录该网站平台，可以快捷的了解到自己所能完成的毕业设计题目和导师，进而惊醒选择。&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;&lt;h2/&gt;
&lt;h2&gt;8、未来市场与竞争&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;未来市场：不断扩招的各种类型的高校。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;竞争：在竞争中成功的本质是用户体验，通过用户体验以及是否成功推销这个指标，在高校市场日益扩充的同时，也必定会有竞争者分一杯羹。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;9、项目导图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201805/1322792-20180502201846255-1897509610.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;10、比例权重&lt;/h2&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;孔潭活（组长）&lt;/td&gt;
&lt;td&gt;何德新&lt;/td&gt;
&lt;td&gt;吴淑谣&lt;/td&gt;
&lt;td&gt;苏咏梅&lt;/td&gt;
&lt;td&gt;李茵敏&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;选题讨论&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;原型&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;项目网页&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;展示答辩&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;提问&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文章&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;最终权重&lt;/td&gt;
&lt;td&gt;60%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;hr/&gt;
&lt;h2&gt;11、总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;是的，老话长谈，合作很重要，但是当你无厘头的做一件事情的时候，自然也就不会有什么成就感。目前指南者团队中 3 人规划教师方向，1 人考研，另一人估计也不会走编程方向，而我自己喜欢编程，仅仅只是兴趣，将来应该也不会走编程方向，那么问题来了，做这个有什么用？&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;hr/&gt;&lt;h3&gt;需求规格说明书文档请点击链接移步 GitHub 查看：&lt;a href=&quot;https://github.com/compassblog/PythonExercise&quot; target=&quot;_blank&quot;&gt;https://github.com/compassblog/PythonExercise&lt;/a&gt;&lt;/h3&gt;
&lt;hr/&gt;
&lt;h2&gt;&lt;strong&gt;1、工作流程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;组长分工——》组员各自完成所分配的工作——》组员向组长提交——》组长整合——》完成任务&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;&lt;strong&gt;2、组员分工&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;孔潭活（组长）：分配文档编写工作，提供原型，整合文档，统筹大局&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;何德新：编写项目引言，包括项目目的、背景、及定义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;吴淑瑶：编写项目概述，包括产品概述，产品功能，一般约束&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;苏咏梅：编写项目具体需求，包括项目原型及类图和项目接口等需求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李茵敏：和组长一起，两人共同编写项目的验收验证标准&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;
&lt;h2&gt;&lt;strong&gt;3、组员工作量比例&lt;/strong&gt; &lt;/h2&gt;
&lt;p&gt;&lt;span&gt;孔潭活（组长）：30%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;何德新：17.5%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;吴淑瑶：17.5%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;苏咏梅：17.5%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李茵敏：17.5%&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;

</description>
<pubDate>Wed, 02 May 2018 14:13:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8982442.html</dc:identifier>
</item>
<item>
<title>Runtime - ③ - 分类Category探究 - 沉江小鱼</title>
<link>http://www.cnblogs.com/chenjiangxiaoyu/p/8658891.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenjiangxiaoyu/p/8658891.html</guid>
<description>&lt;p&gt;&lt;strong&gt;写博客只是为了让自己学的更深刻，参考：https://tech.meituan.com/DiveIntoCategory.html&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分类(Category)是个啥玩意儿这里就不多介绍了，这里主要是研究下，分类的底层实现。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1. 分类中为什么不能添加成员变量？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在Objective-C提供的runtime函数中，确实有一个class_addIvar()函数用于给类添加成员变量，但是文档中特别说明：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;hljs smali&quot;&gt;
&lt;code class=&quot;smali&quot;&gt;This function may only be called after objc_allocateClassPair&lt;span class=&quot;hljs-built_in&quot;&gt; and before objc_registerClassPair. Adding an&lt;span class=&quot;hljs-built_in&quot;&gt; instance variable to an existing class is&lt;span class=&quot;hljs-built_in&quot;&gt; not supported.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;意思是说，这个函数只能在“构建一个类的过程中”调用。一旦完成类定义，就不能再添加成员变量了。经过编译的类在程序启动后就&lt;code&gt;runtime&lt;/code&gt;加载，没有机会调用&lt;code&gt;addIvar&lt;/code&gt;。程序在运行时动态构建的类需要在调用 objc_allocateClassPair 之后，objc_registerClassPair之前才可以被使用，同样没有机会再添加成员变量。那为什么可以在类别中添加方法和属性呢？&lt;br/&gt;因为方法和属性并不“属于”类实例，而成员变量“属于”类实例。我们所说的“类实例”概念，指的是一块内存区域，包含了isa指针和所有的成员变量。所以假如允许动态修改类成员变量布局，已经创建出的类实例就不符合类定义了，变成了无效对象。但方法定义是在objc_class中管理的，不管如何增删类方法，都不影响类实例的内存布局，已经创建出的类实例仍然可正常使用。&lt;/p&gt;
&lt;h3&gt;2. Category 和 Extension(类扩展)&lt;/h3&gt;
&lt;p&gt;Extension是Category的一个实例，被称为匿名分类，可以为一个类添加一些私有变量和方法。但是Extension和有名字的Category完全是两个东西。&lt;/p&gt;
&lt;p&gt;Extension在编译期决定，它就是类的一部分，在编译期和头文件里的@interface和实现文件里的@implement一起形成一个完整的类，它伴随类的产生而产生，消亡而消亡。一般用来隐藏类的私有信息，你必须有一个类的源码才能添加Extension，比如 NSString 系统类就无法添加。&lt;/p&gt;
&lt;p&gt;Category是在运行期决定的，无法添加成员变量，因为在运行期间，对象的内存布局已经确定，如果添加实例变量就会破坏类的内存布局。&lt;/p&gt;
&lt;h3&gt;3. Category 结构&lt;/h3&gt;
&lt;p&gt;所有的对象和类，在runtime层都是由struct表示的，category 也是如此，我们可以下载 runtime 的代码，objc-runtime-new.h 可以看到，category 使用 category_t 进行表示的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
typedef struct category_t {
    const char *name;                               // 类的名字
    classref_t cls;                                 // 类
    struct method_list_t *instanceMethods;          // 实例方法
    struct method_list_t *classMethods;             // 类方法
    struct protocol_list_t *protocols;              // 协议
    struct property_list_t *instanceProperties;     // 所有属性
} category_t;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 下面我新建了一个项目，给NSObject添加了一个分类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
@interface MyClass : NSObject

- (void)printName;

@end


@interface MyClass(MyAddition)

@property(nonatomic, copy) NSString *myName;

- (void)printName;

@end


@implementation MyClass(MyAddition)

- (void)printName{
    NSLog(@&quot;MyAddition&quot;);
}

@end

@implementation MyClass

- (void)printName
{
    NSLog(@&quot;MyClass&quot;);
}

@end
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 然后使用 clang 命令 ：clang -rewirte-objc MyClass.m，生成 .cpp 文件，打开查看，在文件的最下方：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;72&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
// 首先生成了 _OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition 实例方法列表，和 _OBJC_$_PROP_LIST_MyClass_$_MyAddition 属性列表。遵循命名方法：公共前缀+类名+Category&lt;br/&gt;注意：category的名字用来给各种列表以及后面的category结构体本身命名，而且有static来修饰，所以同一个编译单元(文件)，不能有两个相同名字的category，否则会报编译错误。&lt;br/&gt;　　&lt;br/&gt;static struct /*_method_list_t*/ {// 实例方法列表
        unsigned int entsize;  // sizeof(struct _objc_method)
        unsigned int method_count;
        struct _objc_method method_list[1];
} _OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = {
        sizeof(_objc_method),
        1,
        {{(struct objc_selector *)&quot;printName&quot;, &quot;v16@0:8&quot;, (void *)_I_MyClass_MyAddition_printName}}
};

static struct /*_prop_list_t*/ { // 属性列表
        unsigned int entsize;  // sizeof(struct _prop_t)
        unsigned int count_of_properties;
        struct _prop_t prop_list[1];
} _OBJC_$_PROP_LIST_MyClass_$_MyAddition __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = {
        sizeof(_prop_t),
        1,
        {{&quot;myName&quot;,&quot;T@\&quot;NSString\&quot;,C,N&quot;}}
};

extern &quot;C&quot; __declspec(dllexport) struct _class_t OBJC_CLASS_$_MyClass;
&lt;br/&gt;// 然后，生成了Category 本身， _OBJC_$_CATEGORY_MyClass_$_MyAddition ，并用上一步生成的 实例方法列表 和 属性列表 来初始化Category本身。&lt;br/&gt;static struct _category_t _OBJC_$_CATEGORY_MyClass_$_MyAddition __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = 
{
        &quot;MyClass&quot;,
        0, // &amp;amp;OBJC_CLASS_$_MyClass,
        (const struct _method_list_t *)&amp;amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition,
        0,
        0,
        (const struct _prop_list_t *)&amp;amp;_OBJC_$_PROP_LIST_MyClass_$_MyAddition,
};
static void OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition(void ) {
        _OBJC_$_CATEGORY_MyClass_$_MyAddition.cls = &amp;amp;OBJC_CLASS_$_MyClass;
}
#pragma section(&quot;.objc_inithooks$B&quot;, long, read, write)
__declspec(allocate(&quot;.objc_inithooks$B&quot;)) static void *OBJC_CATEGORY_SETUP[] = {
        (void *)&amp;amp;OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition,
};
static struct _class_t *L_OBJC_LABEL_CLASS_$ [1] __attribute__((used, section (&quot;__DATA, __objc_classlist,regular,no_dead_strip&quot;)))= {
        &amp;amp;OBJC_CLASS_$_MyClass,
};&lt;br/&gt;// 最终，编译器在DATA段下的 objc_catlistsection 里，保存了一个大小为1的 category_t 数组，里面那个就是我们刚才生成的Category，用于运行期Category的加载。
static struct _category_t *L_OBJC_LABEL_CATEGORY_$ [1] __attribute__((used, section (&quot;__DATA, __objc_catlist,regular,no_dead_strip&quot;)))= {
        &amp;amp;_OBJC_$_CATEGORY_MyClass_$_MyAddition,
};
static struct IMAGE_INFO { unsigned version; unsigned flag; } _OBJC_IMAGE_INFO = { 0, 2 };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 编译期到此结束，下面我们看一下，是如何加载的。&lt;/p&gt;
&lt;h3&gt;4. Category 如何加载？&lt;/h3&gt;
&lt;p&gt;对于OC运行时，入口方法如下：objc-os.mm文件中&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
void _objc_init(void)
{
    static bool initialized = false;
    if (initialized) return;
    initialized = true;
    
    // fixme defer initialization until an objc-using image is found?
    environ_init();
    tls_init();
    static_init();
    lock_init();
    exception_init();

    _dyld_objc_notify_register(&amp;amp;map_images, load_images, unmap_image);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; Category 被附加到类上是在 map_images 的时候发生的(我们可以点进去看到)，_objc_init里面的调用的map_images最终会调用objc-runtime-new.mm里面的_read_images方法，而在_read_images方法的结尾，有以下的代码片段：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
// Discover categories. 
    for (EACH_HEADER) {&lt;br/&gt;　　　　 // 我们这里拿到的catlist 就是上面编译期间我们生成的category_t数组
        category_t **catlist = 
            _getObjc2CategoryList(hi, &amp;amp;count);
        bool hasClassProperties = hi-&amp;gt;info()-&amp;gt;hasCategoryClassProperties();

        for (i = 0; i &amp;lt; count; i++) {
            category_t *cat = catlist[i];
            Class cls = remapClass(cat-&amp;gt;cls);

            if (!cls) {
                // Category's target class is missing (probably weak-linked).
                // Disavow any knowledge of this category.
                catlist[i] = nil;
                if (PrintConnecting) {
                    _objc_inform(&quot;CLASS: IGNORING category \?\?\?(%s) %p with &quot;
                                 &quot;missing weak-linked target class&quot;, 
                                 cat-&amp;gt;name, cat);
                }
                continue;
            }

            // Process this category. 
            // First, register the category with its target class. 
            // Then, rebuild the class's method lists (etc) if 
            // the class is realized. 
            bool classExists = NO;
            if (cat-&amp;gt;instanceMethods ||  cat-&amp;gt;protocols  
                ||  cat-&amp;gt;instanceProperties) 
            {&lt;br/&gt;　　　　　　　　  // 获取到实例方法列表之后，下面这个方法只是将类和category进行一个关联
                addUnattachedCategoryForClass(cat, cls, hi);
                if (cls-&amp;gt;isRealized()) {&lt;br/&gt;　　　　　　　　　　　　// 最主要的实现代码是在这个方法中
                    remethodizeClass(cls);
                    classExists = YES;
                }
                if (PrintConnecting) {
                    _objc_inform(&quot;CLASS: found category -%s(%s) %s&quot;, 
                                 cls-&amp;gt;nameForLogging(), cat-&amp;gt;name, 
                                 classExists ? &quot;on existing class&quot; : &quot;&quot;);
                }
            }

            if (cat-&amp;gt;classMethods  ||  cat-&amp;gt;protocols  
                ||  (hasClassProperties &amp;amp;&amp;amp; cat-&amp;gt;_classProperties)) 
            {
                addUnattachedCategoryForClass(cat, cls-&amp;gt;ISA(), hi);
                if (cls-&amp;gt;ISA()-&amp;gt;isRealized()) {
                    remethodizeClass(cls-&amp;gt;ISA());
                }
                if (PrintConnecting) {
                    _objc_inform(&quot;CLASS: found category +%s(%s)&quot;, 
                                 cls-&amp;gt;nameForLogging(), cat-&amp;gt;name);
                }
            }
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;略去PrintConnecting这个用于log的东西，这段代码很容易理解：&lt;br/&gt;1)、把category的实例方法、协议以及属性添加到类上&lt;br/&gt;2)、把category的类方法和协议添加到类的metaclass上&lt;/p&gt;
&lt;p&gt;下面我们去探究下真正处理添加事宜的 remethodizeClass 方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
static void remethodizeClass(Class cls)
{
    category_list *cats;
    bool isMeta;

    runtimeLock.assertWriting();

    isMeta = cls-&amp;gt;isMetaClass();

    // Re-methodizing: check for more categories
    if ((cats = unattachedCategoriesForClass(cls, false/*not realizing*/))) {
        if (PrintConnecting) {
            _objc_inform(&quot;CLASS: attaching categories to class '%s' %s&quot;, 
                         cls-&amp;gt;nameForLogging(), isMeta ? &quot;(meta)&quot; : &quot;&quot;);
        }
        
        attachCategories(cls, cats, true /*flush caches*/);        
        free(cats);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好吧，这个方法其实又会去调用attachCategories这个方法，我们去看下attachCategories：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
static void 
attachCategories(Class cls, category_list *cats, bool flush_caches)
{
    if (!cats) return;
    if (PrintReplacedMethods) printReplacements(cls, cats);

    bool isMeta = cls-&amp;gt;isMetaClass();

    // fixme rearrange to remove these intermediate allocations
    method_list_t **mlists = (method_list_t **)
        malloc(cats-&amp;gt;count * sizeof(*mlists));
    property_list_t **proplists = (property_list_t **)
        malloc(cats-&amp;gt;count * sizeof(*proplists));
    protocol_list_t **protolists = (protocol_list_t **)
        malloc(cats-&amp;gt;count * sizeof(*protolists));

    // Count backwards through cats to get newest categories first
    int mcount = 0;
    int propcount = 0;
    int protocount = 0;
    int i = cats-&amp;gt;count;
    bool fromBundle = NO;
    while (i--) {
        auto&amp;amp; entry = cats-&amp;gt;list[i];

        method_list_t *mlist = entry.cat-&amp;gt;methodsForMeta(isMeta);
        if (mlist) {
            mlists[mcount++] = mlist;
            fromBundle |= entry.hi-&amp;gt;isBundle();
        }

        property_list_t *proplist = 
            entry.cat-&amp;gt;propertiesForMeta(isMeta, entry.hi);
        if (proplist) {
            proplists[propcount++] = proplist;
        }

        protocol_list_t *protolist = entry.cat-&amp;gt;protocols;
        if (protolist) {
            protolists[protocount++] = protolist;
        }
    }

    auto rw = cls-&amp;gt;data();

    prepareMethodLists(cls, mlists, mcount, NO, fromBundle);
    rw-&amp;gt;methods.attachLists(mlists, mcount);
    free(mlists);
    if (flush_caches  &amp;amp;&amp;amp;  mcount &amp;gt; 0) flushCaches(cls);

    rw-&amp;gt;properties.attachLists(proplists, propcount);
    free(proplists);

    rw-&amp;gt;protocols.attachLists(protolists, protocount);
    free(protolists);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这个方法的主要任务是，获取所有该类所有的category，然后通过遍历，将所有category的属性，协议，方法分别放到一个大的数组里，然后通过 attachLists 方法添加：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
void attachLists(List* const * addedLists, uint32_t addedCount) {
        if (addedCount == 0) return;

        if (hasArray()) {
            // many lists -&amp;gt; many lists
            uint32_t oldCount = array()-&amp;gt;count;
            uint32_t newCount = oldCount + addedCount;
            setArray((array_t *)realloc(array(), array_t::byteSize(newCount)));
            array()-&amp;gt;count = newCount;
            memmove(array()-&amp;gt;lists + addedCount, array()-&amp;gt;lists, 
                    oldCount * sizeof(array()-&amp;gt;lists[0]));
            memcpy(array()-&amp;gt;lists, addedLists, 
                   addedCount * sizeof(array()-&amp;gt;lists[0]));
        }
        else if (!list  &amp;amp;&amp;amp;  addedCount == 1) {
            // 0 lists -&amp;gt; 1 list
            list = addedLists[0];
        } 
        else {
            // 1 list -&amp;gt; many lists
            List* oldList = list;
            uint32_t oldCount = oldList ? 1 : 0;
            uint32_t newCount = oldCount + addedCount;
            setArray((array_t *)malloc(array_t::byteSize(newCount)));
            array()-&amp;gt;count = newCount;
            if (oldList) array()-&amp;gt;lists[addedCount] = oldList;
            memcpy(array()-&amp;gt;lists, addedLists, 
                   addedCount * sizeof(array()-&amp;gt;lists[0]));
        }
    } 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的有两点：&lt;br/&gt;1)、category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果category和原来类都有methodA，那么category附加完成之后，类的方法列表里会有两个methodA&lt;br/&gt;2)、category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休，殊不知后面可能还有一样名字的方法。&lt;/p&gt;
&lt;p&gt;下面我们也会来验证一下：&lt;/p&gt;
&lt;h3&gt;5. 如何调用到被覆盖的主类的方法？&lt;/h3&gt;
&lt;p&gt;我们已经知道category其实并不是完全替换掉原来类的同名方法，只是category在方法列表的前面而已，所以我们只要顺着方法列表找到最后一个对应名字的方法，就可以调用原来类的方法：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
Class currentClass = [MyClass class];
MyClass *my = [[MyClass alloc] init];

if (currentClass) {
    unsigned int methodCount;
    Method *methodList = class_copyMethodList(currentClass, &amp;amp;methodCount);
    IMP lastImp = NULL;
    SEL lastSel = NULL;
    for (NSInteger i = 0; i &amp;lt; methodCount; i++) {
        Method method = methodList[i];
        NSString *methodName = [NSString stringWithCString:sel_getName(method_getName(method)) 
                                        encoding:NSUTF8StringEncoding];
        if ([@&quot;printName&quot; isEqualToString:methodName]) {
            lastImp = method_getImplementation(method);
            lastSel = method_getName(method);
        }
    }
    typedef void (*fn)(id,SEL);

    if (lastImp != NULL) {
        fn f = (fn)lastImp;
        f(my,lastSel);
    }
    free(methodList);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 6. 为分类添加属性，关联对象&lt;/h3&gt;
&lt;p&gt;如上所见，我们知道在category里面是无法为category添加实例变量的。但是我们很多时候需要在category中添加和对象关联的值，这个时候可以求助关联对象来实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
- (void)setMyName:(NSString *)myName{
    objc_setAssociatedObject(self, @&quot;myName&quot;, myName, OBJC_ASSOCIATION_COPY);
}

-(NSString *)myName{
    return objc_getAssociatedObject(self, @&quot;myName&quot;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这里就不多做介绍了，我们来看下，是如何关联的，去翻一下runtime的源码，在objc-references.mm文件中有个方法_object_set_associative_reference：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
void _object_set_associative_reference(id object, void *key, id value, uintptr_t policy) {
    // retain the new value (if any) outside the lock.
    ObjcAssociation old_association(0, nil);
    id new_value = value ? acquireValue(value, policy) : nil;
    {
        AssociationsManager manager;
        AssociationsHashMap &amp;amp;associations(manager.associations());
        disguised_ptr_t disguised_object = DISGUISE(object);
        if (new_value) {
            // break any existing association.
            AssociationsHashMap::iterator i = associations.find(disguised_object);
            if (i != associations.end()) {
                // secondary table exists
                ObjectAssociationMap *refs = i-&amp;gt;second;
                ObjectAssociationMap::iterator j = refs-&amp;gt;find(key);
                if (j != refs-&amp;gt;end()) {
                    old_association = j-&amp;gt;second;
                    j-&amp;gt;second = ObjcAssociation(policy, new_value);
                } else {
                    (*refs)[key] = ObjcAssociation(policy, new_value);
                }
            } else {
                // create the new association (first time).
                ObjectAssociationMap *refs = new ObjectAssociationMap;
                associations[disguised_object] = refs;
                (*refs)[key] = ObjcAssociation(policy, new_value);
                object-&amp;gt;setHasAssociatedObjects();
            }
        } else {
            // setting the association to nil breaks the association.
            AssociationsHashMap::iterator i = associations.find(disguised_object);
            if (i !=  associations.end()) {
                ObjectAssociationMap *refs = i-&amp;gt;second;
                ObjectAssociationMap::iterator j = refs-&amp;gt;find(key);
                if (j != refs-&amp;gt;end()) {
                    old_association = j-&amp;gt;second;
                    refs-&amp;gt;erase(j);
                }
            }
        }
    }
    // release the old value (outside of the lock).
    if (old_association.hasValue()) ReleaseValue()(old_association);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 我们可以看到，所有的关联对象都是由AssociationsManager 管理，而AssociationsManager的定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
class AssociationsManager {
    // associative references: object pointer -&amp;gt; PtrPtrHashMap.
    static AssociationsHashMap *_map;
public:
    AssociationsManager()   { AssociationsManagerLock.lock(); }
    ~AssociationsManager()  { AssociationsManagerLock.unlock(); }
    
    AssociationsHashMap &amp;amp;associations() {
        if (_map == NULL)
            _map = new AssociationsHashMap();
        return *_map;
    }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AssociationsManager里面有一个静态的 AssociationHashMap 来存储所有的关联对象，这相当于把所有对象的关联对象都放到了一个map里，而map的key是对象的指针地址，而这个map的value又是另外一个 AssociationsHasMap, 里面保存的是关联对象的kv对。&lt;/p&gt;
&lt;p&gt;在对象的销毁方法里面，见objc-runtime-new.mm:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
void *objc_destructInstance(id obj) 
{
    if (obj) {
        // Read all of the flags at once for performance.
        bool cxx = obj-&amp;gt;hasCxxDtor();
        bool assoc = obj-&amp;gt;hasAssociatedObjects();

        // This order is important.
        if (cxx) object_cxxDestruct(obj);
        // 这里判断是否有关联对象，有的话就去清理
        if (assoc) _object_remove_assocations(obj);
        obj-&amp;gt;clearDeallocating();
    }

    return obj;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 嗯。。。主要是参考并学习记录，主要还是看runtime的源码。&lt;/p&gt;
</description>
<pubDate>Wed, 02 May 2018 13:50:00 +0000</pubDate>
<dc:creator>沉江小鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenjiangxiaoyu/p/8658891.html</dc:identifier>
</item>
<item>
<title>VueJs(5)---V-bind指令 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/8982568.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/8982568.html</guid>
<description>
&lt;h2&gt;    &lt;span&gt;一、概述&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;      v-bind  主要用于属性绑定，比方你的class属性，style属性，value属性，href属性等等，只要是属性，就可以用v-bind指令进行绑定。&lt;/p&gt;
&lt;p&gt;      &lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 绑定一个属性 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;v-bind:src&lt;/span&gt;&lt;span&gt;=&quot;imageSrc&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 缩写 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;:src&lt;/span&gt;&lt;span&gt;=&quot;imageSrc&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 内联字符串拼接 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;:src&lt;/span&gt;&lt;span&gt;=&quot;'/path/to/images/' + fileName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; class 绑定 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;:class&lt;/span&gt;&lt;span&gt;=&quot;{ red: isRed }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;:class&lt;/span&gt;&lt;span&gt;=&quot;[classA, classB]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;:class&lt;/span&gt;&lt;span&gt;=&quot;[classA, { classB: isB, classC: isC }]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; style 绑定 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;:style&lt;/span&gt;&lt;span&gt;=&quot;{ fontSize: size + 'px' }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;:style&lt;/span&gt;&lt;span&gt;=&quot;[styleObjectA, styleObjectB]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 绑定一个有属性的对象 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind&lt;/span&gt;&lt;span&gt;=&quot;{ id: someProp, 'other-attr': otherProp }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通过 prop 修饰符绑定 DOM 属性 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:text-content.prop&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; prop 绑定。“prop”必须在 my-component 中声明。&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component &lt;/span&gt;&lt;span&gt;:prop&lt;/span&gt;&lt;span&gt;=&quot;someThing&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通过 $props 将父组件的 props 一起传给子组件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child-component &lt;/span&gt;&lt;span&gt;v-bind&lt;/span&gt;&lt;span&gt;=&quot;$props&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;child-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; XLink &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;svg&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;:xlink:special&lt;/span&gt;&lt;span&gt;=&quot;foo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;svg&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;绑定-HTML-Class&quot;&gt;&lt;span&gt;二、&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;对象语法&quot;&gt;&lt;span&gt;对象语法&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;       我们可以传给&lt;span&gt; &lt;code&gt;v-bind:class&lt;/code&gt;&lt;/span&gt; 一个对象，以动态地切换 class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;{ active: isActive }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      上面的语法表示 &lt;code&gt;active&lt;/code&gt; 这个 class 存在与否将取决于数据属性 &lt;code&gt;isActive&lt;/code&gt; 的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;truthiness&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可以在对象中传入更多属性来动态切换多个 class。此外，&lt;span&gt;&lt;code&gt;v-bind:class&lt;/code&gt;&lt;/span&gt; 指令也可以与普通的 class 属性共存。当有如下模板:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;static&quot;&lt;/span&gt;&lt;span&gt;
     v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;{ active: isActive, 'text-danger': hasError }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        和如下 &lt;span&gt;data&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data: {
  isActive: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  hasError: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       结果渲染为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;static active&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    当&lt;span&gt; &lt;code&gt;isActive&lt;/code&gt;&lt;/span&gt; 或者 &lt;span&gt;&lt;code&gt;hasError&lt;/code&gt; &lt;/span&gt;变化时，&lt;span&gt;class&lt;/span&gt; 列表将相应地更新。例如，如果 &lt;span&gt;&lt;code&gt;hasError&lt;/code&gt; &lt;/span&gt;的值为 &lt;span&gt;&lt;code&gt;true&lt;/code&gt;&lt;/span&gt;，class 列表将变为 &lt;span&gt;&lt;code&gt;&quot;static active text-danger&quot;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt; 绑定的数据对象不必内联定义在模板里&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;classObject&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data: {
  classObject: {
    active: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;'text-danger': &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的&lt;span&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/computed.html&quot;&gt;&lt;span&gt;计算属性&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。这是一个常用且强大的模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;classObject&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data: {
  isActive: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
  error: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;
},
computed: {
  classObject: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      active: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.isActive &amp;amp;&amp;amp; !&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.error,
      &lt;/span&gt;'text-danger': &lt;span&gt;this&lt;/span&gt;.error &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.error.type === 'fatal'&lt;span&gt;
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;数组语法&quot;&gt;&lt;span/&gt;&lt;/h4&gt;
&lt;p&gt;    我们可以把一个数组传给&lt;span&gt; &lt;code&gt;v-bind:class&lt;/code&gt;&lt;/span&gt;，以应用一个 class 列表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;[activeClass, errorClass]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data: {
  activeClass: &lt;/span&gt;'active'&lt;span&gt;,
  errorClass: &lt;/span&gt;'text-danger'&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   渲染为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;active text-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     如果你也想根据条件切换列表中的 &lt;span&gt;class&lt;/span&gt;，可以用三元表达式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;[isActive ? activeClass : '', errorClass]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这样写将始终添加 &lt;span&gt;&lt;code&gt;errorClass&lt;/code&gt;&lt;/span&gt;，但是只有在 &lt;code&gt;isActive&lt;/code&gt; 是 truthy 时才添加 &lt;span&gt;&lt;code&gt;activeClass&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     不过，当有多个条件 &lt;span&gt;class&lt;/span&gt; 时这样写有些繁琐。所以在数组语法中也可以使用对象语法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;[{ active: isActive }, errorClass]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;用在组件上&quot;&gt;&lt;span&gt;三、&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;        当在一个自定义组件上使用&lt;span&gt; &lt;code&gt;class&lt;/code&gt;&lt;/span&gt; 属性时，这些类将被添加到该组件的根元素上面。这个元素上已经存在的类不会被覆盖。&lt;/p&gt;
&lt;p&gt;       例如，如果你声明了这个组件：  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.component('my-component', {
  template: '&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;foo bar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     然后在使用它的时候添加一些 &lt;span&gt;class&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;baz boo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     HTML 将被渲染为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;foo bar baz boo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     对于带数据绑定 class 也同样适用    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component &lt;/span&gt;&lt;span&gt;v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;{ active: isActive }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    当&lt;span&gt; &lt;code&gt;isActive&lt;/code&gt;&lt;/span&gt; 为 truthy时，HTML 将被渲染成为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;foo bar active&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;span&gt;&lt;strong&gt;四、&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;对象语法-1&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;  v-bind:style&lt;/code&gt; &lt;/span&gt;的对象语法十分直观——看着非常像 CSS，但其实是一个 &lt;span&gt;JavaScript&lt;/span&gt; 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名：  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:style&lt;/span&gt;&lt;span&gt;=&quot;{ color: activeColor, fontSize: fontSize + 'px' }&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data: {
  activeColor: &lt;/span&gt;'red'&lt;span&gt;,
  fontSize: &lt;/span&gt;30&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      直接绑定到一个样式对象通常更好，这会让模板更清晰&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:style&lt;/span&gt;&lt;span&gt;=&quot;styleObject&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data: {
  styleObject: {
    color: &lt;/span&gt;'red'&lt;span&gt;,
    fontSize: &lt;/span&gt;'13px'&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    同样的，对象语法常常结合返回对象的计算属性使用&lt;/p&gt;
&lt;h4 id=&quot;数组语法-1&quot; data-scroll-id=&quot;数组语法-1&quot;&gt;&lt;span&gt;    数组语法&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;  &lt;span&gt; v-bind:style&lt;/span&gt;&lt;/code&gt; 的数组语法可以将多个样式对象应用到同一个元素上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-bind:style&lt;/span&gt;&lt;span&gt;=&quot;[baseStyles, overridingStyles]&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;想的太多，做的太少，中间的落差就是烦恼，要么去做，要么别想 &lt;/strong&gt;中尉【14】&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 02 May 2018 13:25:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/8982568.html</dc:identifier>
</item>
<item>
<title>项目微管理17 - 双赢 - 沙场秋点兵</title>
<link>http://www.cnblogs.com/dxy1982/p/8982065.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dxy1982/p/8982065.html</guid>
<description>&lt;p&gt;记得还是在第一次培训的时候，路飞就曾经说过，来这里是想学习一些新的东西。可是学习新东西照样可以在原公司学啊，要知道现在可是信息时代，互联网已经架起了最为方便快捷的知识学习途径，根本不需要通过跳槽来学习一些新东西。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;跳槽的原因&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;关于跳槽，马云曾经说过：“员工的离职原因林林总总，只有两点最真实：1、钱，没给到位；2、心，委屈了。这些归根到底就一条：干得不爽。员工临走还费尽心思找靠谱的理由，就是为给你留面子，不想说穿你的管理有多烂、他对你已失望透顶。 仔细想想，真是人性本善。作为管理者，定要乐于反省。”&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502195123849-1176783154.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代认为从另外一个角度也可以这样来总结：离职的根本原因就是员工和团队只做到了单赢，没能做到双赢！如果是员工赢了，那么他觉得屈才了，所以他要离开，如果是团队赢了，那么员工会觉得团队对不起自己，心里不平衡，所以他要离开。如果是团队和员工双赢的话，那自然就是皆大欢喜了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;一切并非理所当然&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;在四代看来，那些在互联网时代雄起的大公司基本都是崛起于草根，比如谷歌，FaceBook，BAT等。&lt;/p&gt;

&lt;p&gt;这些公司的创建者本人大都精力过人，而且刻苦用功，坚持不懈，这些都是值得四代敬佩的气质。而且由于有这方面的经验，他们大多都很健谈，也很善于给大家画饼，这是创业必备的技能，因为创业之初确实什么条件都没有，所以创业者只能通过描绘将来美好的生活和伟大的成就来拉取外界的支持，不管是融资还是招揽人才。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502195354536-199852244.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;随着公司越来越大，他们渐渐的就会脱离了实际的事务，并且专门成为公司制度和流程的决策者，他们非常重要的一件事就是设定公司的远景和远大的目标，并期望公司的员工都来认同，这本来无可厚非。可是一旦这种事做过了头，变成理所当然的时候，一切就都变了模样。&lt;/p&gt;

&lt;p&gt;四代见过很多创业者或者经历过创业的人，他们对待新人入职后的抱怨时，很自然的一句口头禅就是“他们要是经历过公司以前那艰苦的岁月的话，他们就不会抱怨了”。确实那一阶段的岁月可能是很艰苦，可是这些与新入职的人有一毛钱的关系吗？&lt;/p&gt;

&lt;p&gt;每个人来到到公司，都是为了寻找个人利益的最大化，有句话四代记得大概是这样说的：“什么是专业的团队？专业团队就是在工作中能让大家做到-&lt;strong&gt;士为己者死&lt;/strong&gt;”。对于公司来说，四代认为，公司的责任就是提供相关的支持来帮助个人来找到利益最大化的职位，并同时在这个过程中寻求公司利益的最大化，这就是“双赢”。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502195512674-42606565.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;事实上，在风光无限的阿里公司中，一直有一个隐隐的伤痛就是，除了最初就参与创业的一些人外，很多后来的高层管理者都在阿里上市后，先后的离开了阿里。很多人借此发表感慨：“不是老人儿就是靠不住啊，你看阿里公司，后进去的那些高管后来又都离开了，其实全是朝着钱去的嘛”。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502195643756-1094476301.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;确实从表面上看，事实就是这样子的，老人都留下了，新人来了又走了，所以很多公司的策略就是对老人处处照顾，处处迁就，因为比较忠诚嘛，而对于新人，往往倾向于严格一些，这样新人处处感觉受到歧视或不一样的待遇，那就只能好聚好散了，拿钱走人呗，这种事情还真说不上谁对谁错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;双赢才是硬道理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;说到这里，四代想起了一句经典的句子：“你可以讲你的理想，你可以说你的抱负，你还可以描述你的远景，你甚至可以讲述产品的伟大，对于这些，我只能说，你有你的理想，我有我的生活，如果想让我加入你的理想，你可以通过说服我、收买我，让我可以和你一起努力，OK，没问题，但是千万不要试图用你的理想绑架我！”&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502200636109-1501260329.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;任何时候，聚拢团队讲究的都是利益的分配，不管是精神上虚的，比如成就，荣誉，职称，还是物质上实的，比如福利，工资，股权，当做到了团队和个人之间利益的共赢，这个团队和工作才能长久。所以四代从来不会在不必要的时候，要求员工一切以大局为重，时刻以公司为家，或者是谈工作的时候，就讲理想和报复，谈薪水的时候，只谈奉贤和无私，这样不科学。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502200648957-42296926.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;当然，四代同时也希望团队成员跟自己提要求的时候，也能多谈谈自己的贡献和成就。&lt;/p&gt;

&lt;p&gt;努力做到共赢，这是四代做出每一个决定，处理每一件事情，或提出每一个流程，尤其需要注意的地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;面和心不和？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;不过，人们可以依靠利益来聚合到一起，但是聚到一起后变成“乌合之众”，还是“精锐之师”，那就大有讲究了。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502201640124-688103295.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;不管采用传统的金字塔结构，还是现在的扁平化结构，不管是古希腊那传说中人人负责的“公民兵”制度，还是大秦帝国那名利双收的“爵位制”，对于一个团队，首要的事情就是“交心”，或者说是“沟通”，或者前面说鸣人兄的“嘴遁”。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201805/109061-20180502201700870-1429251506.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;俗话说的好，“首先，心要在一起”。&lt;/p&gt;
</description>
<pubDate>Wed, 02 May 2018 12:25:00 +0000</pubDate>
<dc:creator>沙场秋点兵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dxy1982/p/8982065.html</dc:identifier>
</item>
</channel>
</rss>