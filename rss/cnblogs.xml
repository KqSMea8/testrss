<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Locust学习指导 - bamboo_hua</title>
<link>http://www.cnblogs.com/aeip/p/locust-learn.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aeip/p/locust-learn.html</guid>
<description>&lt;p&gt;　　学习Locust一段时间了，在实际项目中也感受到了它的轻巧便利，对于偏爱代码脚本的朋友用它做性能测试决定是不错的选择；&lt;/p&gt;
&lt;p&gt;　　整理了自己学习的路线，算是给自己做个总结吧：&lt;/p&gt;
&lt;p&gt;　　1.Locust的历史、适用范围&lt;/p&gt;
&lt;p&gt;　　2.入门指导手册&lt;/p&gt;
&lt;p&gt;　　3.局限的场景&lt;/p&gt;
&lt;p&gt;　　4.项目中应用&lt;/p&gt;
&lt;p&gt;　　5.群交流&lt;/p&gt;
&lt;p&gt;　　QQ: 469757891&lt;/p&gt;

&lt;p&gt;     【一期先列个提纲，后续再更新】&lt;/p&gt;

</description>
<pubDate>Thu, 01 Mar 2018 07:42:00 +0000</pubDate>
<dc:creator>bamboo_hua</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aeip/p/locust-learn.html</dc:identifier>
</item>
<item>
<title>深入浅出乘法逆元 - kcfzyhq</title>
<link>http://www.cnblogs.com/kcfzyhq/p/8488243.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kcfzyhq/p/8488243.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#1&quot;&gt;深入浅出乘法逆元&lt;/a&gt;&lt;br/&gt;　&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#1.1&quot;&gt;1.模的运算律&lt;/a&gt;&lt;br/&gt;　&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#1.2&quot;&gt;2.定义&lt;/a&gt;&lt;br/&gt;　&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#1.3&quot;&gt;3.求解&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#3.1&quot;&gt;3.1费马小定理&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#3.2&quot;&gt;3.2扩展欧几里得算法&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8488243.html#3.3&quot;&gt;3.3线性求解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1&quot;&gt;深入浅出乘法逆元&lt;/h2&gt;
&lt;h4 id=&quot;1.1&quot;&gt;模的运算律&lt;/h4&gt;
&lt;p&gt;先来一波模运算律表：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;交换律&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;math inline&quot;&gt;\((a+b)\%p=(b+a)\%p\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\((a\times b)\%p=(b\times a)\%p\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;结合律&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;math inline&quot;&gt;\(((a+b)\%p+c)\%p=(a+(b+c)\%p)\%p\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\(((a\times b)\%p\times c)\%p=(a\times (b\times c)\%p)\%p\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;分配率&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;math inline&quot;&gt;\(((a+b)\%p\times c)\%p=((a\times c)\%p+(b\times c)\%p)\%p\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\((a\times b)\%p=(a\%p\times b\%p)\%p\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\((a+b)\%p=(a\%p+b\%p)\%p\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math inline&quot;&gt;\((a-b)\%p=(a\%p-b\%p)\%p\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;1.1&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;有的时候我们需要对一个数取模，这很简单。但是在取模的过程中出现了除数，那么取模就没这么简单了：&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[\frac{7}{2}\%4=3\%4=3\]&lt;/span&gt;注意：&lt;span class=&quot;math inline&quot;&gt;\(\frac{7\%4}{2}=\frac{3}{2}=1\)&lt;/span&gt;是&lt;span&gt;错误的&lt;/span&gt;&lt;br/&gt;但万一是&lt;span class=&quot;math inline&quot;&gt;\(\frac{7^{10000}}{2}\%4\)&lt;/span&gt;计算机可无法先计算&lt;span class=&quot;math inline&quot;&gt;\(\frac{7^{10000}}{2}\)&lt;/span&gt;再&lt;span class=&quot;math inline&quot;&gt;\(\pmod4\)&lt;/span&gt;，因为数字太大了。&lt;br/&gt;这个时候我们就需要用到乘法逆元了,事实上:&lt;span class=&quot;math inline&quot;&gt;\(\frac{7^{10000}}{2}=(7*3)^{10000}\)&lt;/span&gt;。我们运用模的运算律可以通过边乘边取模即可得到答案，其中3是7在&lt;span class=&quot;math inline&quot;&gt;\(\pmod 4\)&lt;/span&gt;意义下的逆元。&lt;br/&gt;关于逆元的严格定义如下：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(若整数b,m互质,并且b\mid a，则存在整数x，使得a/b\equiv a*x\pmod m，则称x为b的模m乘法逆元，记为b^{-1}\pmod m\)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1.1&quot;&gt;求解&lt;/h4&gt;
&lt;h5 id=&quot;1.1.1&quot;&gt;3.1费马小定理&lt;/h5&gt;
&lt;p&gt;&lt;br/&gt;因为&lt;span class=&quot;math inline&quot;&gt;\(a/b\equiv a*b^{-1}\equiv a/b*b*b^{-1}\pmod m\)&lt;/span&gt;，所以&lt;span class=&quot;math inline&quot;&gt;\(b*b^{-1}\equiv 1\pmod m\)&lt;/span&gt;&lt;br/&gt;如果m是质数(此时我们用符号&lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt;代替&lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;)并且&lt;span class=&quot;math inline&quot;&gt;\(b&amp;lt;p\)&lt;/span&gt;,根据费马小定理&lt;span class=&quot;math inline&quot;&gt;\(b^{p-1}\equiv 1\pmod p\)&lt;/span&gt;，即&lt;span class=&quot;math inline&quot;&gt;\(b*b^{p-2}\equiv1\pmod p\)&lt;/span&gt;。因此，当模数&lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt;为质数时，&lt;span class=&quot;math inline&quot;&gt;\(b^{p-2}\)&lt;/span&gt;为&lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;的乘法逆元。&lt;br/&gt;到最后我们可以用快速幂来迅速求出&lt;span class=&quot;math inline&quot;&gt;\(b^{p-2}\)&lt;/span&gt;。代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ksm(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; b,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; p) {
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ans=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(; b; b&amp;gt;&amp;gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,a=a*a%p)&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(b&amp;amp;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)ans=ans*a%p;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ans;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间复杂度是&lt;span class=&quot;math inline&quot;&gt;\(O(\log n)\)&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h5 id=&quot;1.1.1&quot;&gt;3.2扩展欧几里得算法&lt;/h5&gt;
&lt;br/&gt;扩展欧几里得算法的具体内容参考我写的：&lt;a href=&quot;http://www.cnblogs.com/kcfzyhq/p/8485063.html&quot;&gt;浅析扩展欧几里得算法(exgcd)&lt;/a&gt;&lt;br/&gt;根据逆元的定义我们要求的是&lt;span class=&quot;math inline&quot;&gt;\(a*x\equiv1\pmod m\)&lt;/span&gt;关于x的同余方程，其中x为a在&lt;span class=&quot;math inline&quot;&gt;\(\pmod m\)&lt;/span&gt;意义下的逆元&lt;br/&gt;事实上&lt;span class=&quot;math display&quot;&gt;\[ax=by+1······①\]&lt;/span&gt;也就是&lt;span class=&quot;math inline&quot;&gt;\(ax\div m=y······1\)&lt;/span&gt;&lt;br/&gt;变形①式得：&lt;span class=&quot;math display&quot;&gt;\[ax-by=1\]&lt;/span&gt;&lt;br/&gt;既然&lt;span class=&quot;math inline&quot;&gt;\(a,b\)&lt;/span&gt;都已知，就不难求出&lt;span class=&quot;math inline&quot;&gt;\(x和y\)&lt;/span&gt;了(但要注意&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;的系数&lt;span class=&quot;math inline&quot;&gt;\(-b\)&lt;/span&gt;必须是正整数，因为在计算机计算过程中如果模数是负的将导致结果出错)如果&lt;span class=&quot;math inline&quot;&gt;\(-b\)&lt;/span&gt;不是正整数，我们同时改变&lt;span class=&quot;math inline&quot;&gt;\(a,b\)&lt;/span&gt;的符号即可，&lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;的符号并不影响结果。扩展欧几里得算法代码如下：
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; exgcd(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; b,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &amp;amp;x,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &amp;amp;y) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(b) {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; c=exgcd(a,b,y,x);
        y-=a/b*x;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; c;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        x=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        y=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间复杂度是&lt;span class=&quot;math inline&quot;&gt;\(O(\ln n)\)&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h5 id=&quot;1.1.1&quot;&gt;3.3线性求解&lt;/h5&gt;
&lt;br/&gt;当我们需要求解大量的逆元的时候，前两种的方法时间复杂度都要乘以&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;，时间复杂度都不是很理想。所以我们就用&lt;span class=&quot;math inline&quot;&gt;\(O(n)\)&lt;/span&gt;的时间来快速求解。具体做法如下：假设我们要求x的逆元，那么：&lt;span class=&quot;math display&quot;&gt;\[m=k*x+r\]&lt;/span&gt;&lt;span class=&quot;math display&quot;&gt;\[k*x+r\equiv0\pmod m\]&lt;/span&gt;同乘以&lt;span class=&quot;math inline&quot;&gt;\(x^{-1}*r^{-1}\)&lt;/span&gt;得：&lt;span class=&quot;math display&quot;&gt;\[k*r^{-1}+x^{-1}\equiv0\pmod m······①\]&lt;/span&gt;将②式变形得：&lt;span class=&quot;math display&quot;&gt;\[x^{-1}\equiv-k*r^{-1}\pmod m\]&lt;/span&gt;&lt;br/&gt;所以我们得到:&lt;span class=&quot;math display&quot;&gt;\[x^{-1}=-\lfloor m/x\rfloor*(m\%x)^{-1}\]&lt;/span&gt;&lt;br/&gt;那么只要建一个数组inv，初始值inv[1]=1。所以代码如下：
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;; i&amp;lt;=n; i++)
        inv[i]=-(p/i)*inv[p%i];&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 01 Mar 2018 06:27:00 +0000</pubDate>
<dc:creator>kcfzyhq</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kcfzyhq/p/8488243.html</dc:identifier>
</item>
<item>
<title>[工具]Microsoft To-Do，简约还是简陋？ - dino.c</title>
<link>http://www.cnblogs.com/dino623/p/ToDo.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dino623/p/ToDo.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;1. 简介&lt;/h2&gt;
&lt;p&gt;微软收购奇妙清单后，由奇妙清单的原班人马打造了一个全新的待办事项应用，就叫“To-Do”（简单粗暴，好像新浪微博直接就叫“微博”的感觉）。这个应该刚推出我就从奇妙清单转到To-Do上，使用一段时间后感觉比奇妙清单好用一些。主要功能上感觉没什么区别，一来是因为由原班人马打造，UI感觉相似；二来是因为我本来就不用奇妙清单上有的，而在To-Do上被砍掉的各种高级功能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://products.office.com/zh-cn/microsoft-to-do-list-app&quot;&gt;官方网站&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142311287-62586395.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何使用&quot;&gt;2. 如何使用&lt;/h2&gt;
&lt;p&gt;To-Do主页或&lt;a href=&quot;https://www.microsoft.com/zh-CN/store/p/project-cheshire/9nblggh5r558?rtc=1&quot;&gt;应用商店&lt;/a&gt;就已经把所有功能介绍得清清楚楚。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Microsoft To-Do 是一个轻量和智能的待办清单去帮助您更轻松地计划每一天。无论是工作计划，个人生活或家庭学习，To-Do 的“我的一天”和智能“建议”功能让你能每天更专注地完成最重要的事情。To-Do 支持iPhone、安卓、Windows 10 和网页间无缝同步，让你随时随地访问所有待办事项。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在“添加代办事项”位置输入要添加的待办事项，添加后点击待办事项前的圆点标记为完成：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142319982-1759913960.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双击待办事项可编辑标题、内容并添加提醒：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142333573-1480900247.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加清单并将待办事项加入到清单中：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142347664-1704815583.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用Microsoft Account登陆，可在各个主流平台中同步待办事项：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142411455-1695704358.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可从奇妙清单导入清单和待办事项。&lt;br/&gt;免费。&lt;/p&gt;
&lt;h2 id=&quot;特色功能&quot;&gt;3. 特色功能&lt;/h2&gt;
&lt;p&gt;如果只看上面的介绍的话，To-Do简直弱爆了，已经越过了简约，堪称简陋。刚开始使用To-Do时我也是一脸嫌弃；而现在To-Do已成为我每天必用的应用了。&lt;/p&gt;
&lt;p&gt;是的，和微软声称的一样， Microsoft To-Do确实 是一个轻量和智能的待办清单。&lt;/p&gt;
&lt;p&gt;首先，只需登陆Microsoft Account，它就可以同步我以前所有的待办事项。虽然其它应用也不是不可以同步Outlook的待办事项，但还是微软官方的最放心。&lt;/p&gt;
&lt;p&gt;其次，对比其它同类应用，To-Do真的很简约。在Outlook新建任务是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142429936-1122626261.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而To-Do只需要输入标题即可，不需要关心其它内容，而且双击进去详细页面（在手机版上是直接点击）也只有提醒、截止日期和备注等寥寥几个选项，没有星标、优先级、子任务、文件、分享和评论等，To-Do将用户从这些复杂事务解放出来，只是最纯碎的待办事项，只关心最纯碎的待办事项。&lt;/p&gt;
&lt;p&gt;最后也是最重要的，就是这个“我的一天”清单及里面的建议功能：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142441037-325215723.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为默认内置的清单，待办事项默认会被添加到“我的一天”里。点击“提示”小灯泡可以看到昨天的待办事项以及To-Do筛选出来的，可能今天要处理或过几天就到期的，或者通过其它规则智能地推荐的待办事项，我可以根据这些建议或自己查找需要处理的待办事项添加到“我的一天”里。每天早上整理出当天的待办事项，这非常符合时间管理的理念。&lt;/p&gt;
&lt;blockquote readability=&quot;2.9333333333333&quot;&gt;
&lt;p&gt;关于“我的一天”的更多内容推荐阅读这篇文章：&lt;a href=&quot;https://sspai.com/post/38880&quot;&gt;奇妙清单原班人马打造的轻量任务管理：Microsoft To-Do&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;设计理念&quot;&gt;4. 设计理念&lt;/h2&gt;
&lt;p&gt;To-Do有个很恶心很让人不解的地方是连个回收站都没有，被删除的项目就找不回来了，尤其手机上向左滑屏就会删除待办事项，这十分容易误操作（还好删除后会有个“撤销”的提示）。查了帮助后总算找到怎么恢复待办事项列表（大概被删除的待办事项也可以这样操作）：&lt;/p&gt;
&lt;blockquote readability=&quot;4.9846153846154&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://todosupport.helpshift.com/a/microsoft-to-do/?s=all-about-lists&amp;amp;f=how-can-i-restore-a-deleted-list&amp;amp;l=en&amp;amp;p=winpc&quot;&gt;How can I restore a deleted list?&lt;/a&gt;&lt;br/&gt;-Open Outlook on Windows&lt;br/&gt;-Switch to the Folder List view (CTRL+6) and then expand the Deleted Items folder. You should see your deleted Tasks folder now as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原来这么复杂曲折，还需要用到Outlook，没买Office的就连恢复删除项都做不到，难道这个免费应用就指望着用户去买office，然后靠这样赚钱？&lt;/p&gt;
&lt;p&gt;仔细思考后，这操作让我强烈地联想到《简约之上 - 交互设计四策略》这本书。《简约之上 - 交互设计四策略》全书围绕的都是同一个目标：好的、畅销的设计应该为主流用户设计，而忽略专家型用户。专家型用户不是典型用户，他们的判断会出现偏差，他们不会体验到主流用户遇到的问题，他们追求主流用户根本不在乎的功能。主流用户追求简单易用，容易上手，轻易就能学习、掌控所有功能。&lt;/p&gt;
&lt;p&gt;为了达到简单易用，满足主流用户这个目的，本书介绍了四种策略。这四个策略可以简单地用几张图片阐述完毕（图片我用手机拍的，将就一下；书很不错，建议购买，&lt;strong&gt;现在从 &lt;a href=&quot;https://www.amazon.cn/dp/B004I91HCY/ref=sr_1_1?ie=UTF8&amp;amp;qid=1519439841&amp;amp;sr=8-1&amp;amp;keywords=%E7%AE%80%E7%BA%A6%E8%87%B3%E4%B8%8A&quot;&gt;亚马逊&lt;/a&gt; 购买还可享受满99元送畅销书的优惠&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142501204-227976051.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个遥控器有4、50个按钮。这是面向专家型用户的，有专家型用户所需的所有功能，但绝对不简单易用。书中用四种策略解决这个问题：删除，组织，隐藏，转移。&lt;br/&gt; &lt;br/&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142508812-468093672.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;删除不必要的功能，只保留核心的，真的对用户有用的功能。&lt;br/&gt; &lt;br/&gt;删除不必要的功能可以带来好多好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;减少出错的机会。&lt;/li&gt;
&lt;li&gt;减轻开发人员的负担，让他们专注于核心功能。&lt;/li&gt;
&lt;li&gt;用户不会为过多的功能分心。&lt;/li&gt;
&lt;li&gt;系统能为核心功能分配更多的资源。&lt;br/&gt; &lt;br/&gt;删除同时是破坏力最大的精简方案，为了避免删错功能，应遵守如下原则：&lt;/li&gt;
&lt;li&gt;为功能排定优先级，关注核心功能。&lt;/li&gt;
&lt;li&gt;砍掉容易出错的残缺功能。&lt;/li&gt;
&lt;li&gt;精简文字，尽量使用简单的设计。&lt;/li&gt;
&lt;li&gt;和客户沟通。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To-Do团队认为星标、优先级、子任务、文件、分享和评论等功能都不是代办事项的核心功能，所以To-Do直接将这些功能删除了。&lt;br/&gt; &lt;br/&gt;&lt;strong&gt;组织&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142526604-211640443.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组织是简化设计的另一种重要策略，它是简化设计最常见的一种方式，而且不用太大投入。只是改变下布局不会让设计上有太大困难，而且也不会面临像删除功能那样艰难的选择。&lt;/p&gt;
&lt;p&gt;将所有元素按功能或其它原则分类，视觉上会变得整齐有序，有助于用户迅速找到它。&lt;/p&gt;
&lt;p&gt;To-Do将用户最为关注的待办事项组织到“我的一天”中，在打开应用后首先就能看到当前应该完成的待办事项。&lt;br/&gt; &lt;br/&gt;&lt;strong&gt;隐藏&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142534036-369439039.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;隐藏不会让功能减少，而且会增加层次感。隐藏最难的部分在于给出线索和提示，让用户知道在哪里可以找到更多的功能。右键菜单就是隐藏的一种经典用法，但用户很难知道哪些地方可以使用右键菜单。在现代的UI中，智能手机的下拉通知中心是一种比较合理的做法，只要有通知都会在屏幕顶部出现对应的图标，用户可以下拉出通知中心然后进行操作。&lt;/p&gt;
&lt;p&gt;To-Do的话，点击待办事项可以看到详细内容，不过详细内容都被砍到只剩下几项了。&lt;br/&gt; &lt;br/&gt;&lt;strong&gt;转移&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/38937/201802/38937-20180224142542133-1517326040.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转移也是一种常见的策略，但使用难度较高。&lt;/p&gt;
&lt;p&gt;我正在使用的小米盒子遥控器和图上的遥控器一样只剩下几个按钮。在这个遥控器上输入文字搜索是很难的，为了解决这个问题遥控器提供能语音输入，只要对着遥控器说出想看的节目就可以搜得到。&lt;/p&gt;
&lt;p&gt;运动手表的份额被运动手环抢走了不少。运动手环几乎没有按键，也没有屏幕，它的所有操作都依赖于与它进行蓝牙连接的手机。但在手机上操作数据，比起在运动手表的小屏幕上依靠几个按钮操作方便很多，所以即使运动手环没有任何按键不少用户也觉得它比较好用。&lt;/p&gt;
&lt;p&gt;严格来说上面两个例子中产品本身的功能其实变少了，它们都依赖于外部的设备和技术，产品本身只负责自己擅长的工作。转移走哪些功能不止需要设计师考虑，而且还收到技术的制约，所以转移这个策略难度高于其它的策略。&lt;/p&gt;
&lt;p&gt;To-Do可以依赖桌面版的Outlook，以“反正可以在outlook上操作我就不做了吧”的心态把回收站这么重要的功能及相关的交互都转移到Outlook上，虽然回收站功能是很少用到，但不得不怀疑这是做过头了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;综上所述&lt;/strong&gt;&lt;br/&gt;重新思考过To-Do的设计理念后对它有新的认识。本来我以为To-Do应用是微软的一款全新的代办实现应用，目的是所有待办事项在这里集结。其实To-Do是一款依赖于Outlook数据的，使用Outlook数据的，将Outlook的数据重新整理后呈现给用户的附属/特色应用。这是一个很好的产品思路，虽然数据源支持种种功能，但UI并不提供，只提供最核心的自己认为对用户有价值的功能，并且在这个基础上加入自己的特色。&lt;/p&gt;
&lt;p&gt;其它应用都是越做越复杂，但从奇妙清单到To-Do，功能更少而且更好用了，简直是软件界的一股清流。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;5. 结语&lt;/h2&gt;
&lt;p&gt;To-Do是一款很简约高效的应用，连 &lt;a href=&quot;https://todosupport.helpshift.com/a/microsoft-to-do/?p=winpc&quot;&gt;帮助&lt;/a&gt; 里也没有多少内容。以前的奇妙清单就有十分多的功能，复杂到需要 &lt;a href=&quot;https://sspai.com/tag/%e5%a5%87%e5%a6%99%e6%b8%85%e5%8d%95&quot;&gt;玩转奇妙清单&lt;/a&gt; 这类攻略。而To-Do不希望本应为用户提交效率的工具反而需要用户花费大量时间去学习、去操作。&lt;/p&gt;
&lt;p&gt;虽然很喜欢To-Do的简约，但我对清单这个功能还是有些不爽。&lt;/p&gt;
&lt;p&gt;在我的理解中清单应该是这样：我周末有个烧烤的预定，为了这个预定我建了一个“烧烤”的清单，里面列举了为了烧烤需要完成的待办事项，如订场地，买材料，收拾用到的各种东西；当烧烤结束后我可以将这个清单标记为完成/冻结/非激活，然后让它从清单列表中消失；下次需要烧烤时可以再次找出这个清单，直接参考上面提到的内容完成各种准备。&lt;/p&gt;
&lt;p&gt;但To-Do里的清单明显就是当分类来用嘛，何况这个清单删除了还要用桌面版Outlook来找回。&lt;/p&gt;
&lt;p&gt;另外，以前用WP时我常在OneNote上记录下一些灵感或其它突然想到的东西，现在都用To-Do来记了，因为操作简单许多。这样做相当于把To-Do当成一个全平台同步、可追溯的便签应用来使用了。&lt;/p&gt;
&lt;h2 id=&quot;真心话&quot;&gt;6. 真心话&lt;/h2&gt;
&lt;p&gt;奇妙清单被收购后无所事事爽了两年上头看不过去了就赶紧用Outlook Api做了个超简单的应用出来还美其名曰简约且关注核心功能其实就是懒我好羡慕。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;7. 参考&lt;/h2&gt;
&lt;p&gt;官网里有些主题可以帮助更好地理解To-Do为什么可以工作得很好：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://todosupport.helpshift.com/a/microsoft-to-do/?s=getting-started&amp;amp;f=how-does-microsoft-to-do-help-me-focus-on-what-s-important&amp;amp;l=zh&amp;amp;p=winpc&quot;&gt;这个应用如何帮我更专注处理重要的事情&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;To-Do 让你从新的一页开始每一天； 同时也让你随时追踪所有待办事项 。当你每天打开“ 我的一天 ” ， 你将从空白的一页添加你希望在当天完成的事情。你也可以使用 智能“建议” 直接 添加待办 事项 到“我的一天”。 这样你便可以在处理小待办的同时更集中地处理最重要的任务。如果你不能在今天完成所有写在“我的一天” 上的待办 事项 ，请不要担心 ！它们将被自动储存至“待办事项”清单中并会在明天的“ 建议” 中被提出 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://todosupport.helpshift.com/a/microsoft-to-do/?s=to-do-101&amp;amp;f=productivity-and-microsoft-to-do&amp;amp;l=zh&amp;amp;p=winpc&quot;&gt;生产力和待办事项 (To-Do) 的关系&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;待办事项 (To-Do) 是一种新的生产力方法。To-Do旨在利用现有的行为模式来创造更多的生产力习惯。“我的一天”是我们新产品的核心。当你每天打开“我的一天”的时候，你会有一个清空的空间，以添加你想要当天完成的待办事项。&lt;br/&gt;研究表明，一个人最高峰的认知警觉时间是醒来后大约2-4个小时 - 这是一个完美的时候来识别和写下你最重要的待办事项。&lt;br/&gt;如果你在一天中花费这些时间来确定当天的目标优先级，你将有一个明确的计划。你只需要将你最重要的待办事项添加到我的一天，并随时掌控他们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://todosupport.helpshift.com/a/microsoft-to-do/?s=all-about-lists&amp;amp;f=how-do-suggestions-and-my-day-work&amp;amp;l=zh&amp;amp;p=winpc&quot;&gt;“建议”和“我的一天”是如何工作的？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;有了“建议”和“我的一天”之后，您将更容易集中处理每天的待办事项。当您每天打开 To-Do的时候，您将看到一个全新的“我的一天”。您可以通过智能建议来快捷地安排您的今天的待办事项，或者在“我的一天”中直接创建新的待办事项。&lt;br/&gt;所有“我的一天”中输入的待办事项将被储存在“待办事项”中。如果您今天没有完成“我的一天”中所有的待办事项，请不要担心！我们将继续对它们追踪并于第二天在“建议”中提出。我们也会关注即将到达到期日的任务并建议给您。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其它链接：&lt;br/&gt;&lt;a href=&quot;https://products.office.com/zh-cn/microsoft-to-do-list-app&quot;&gt;待办事项列表应用 - 微软待办&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/office/office365/api/task-rest-operations&quot;&gt;Outlook Task REST API reference&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27284556&quot;&gt;Microsoft To-Do：如何将美好的一天井井有条呢？&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 01 Mar 2018 06:24:00 +0000</pubDate>
<dc:creator>dino.c</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dino623/p/ToDo.html</dc:identifier>
</item>
<item>
<title>5. 跟踪标记 (Trace Flag) 834, 845 对内存页行为的影响 - 张骞</title>
<link>http://www.cnblogs.com/seusoftware/p/8488169.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/seusoftware/p/8488169.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;跟踪标记：&lt;/strong&gt;834&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在64位的windows环境下，为SQL Server开启这个跟踪标记，那么SQL Server 会使用大页(Large pages)为内存缓冲区(buffer pool)分配内存，从而可以提高CPU转换检测缓冲区(TLB: Translation Lookaside Buffer)的效率得以提升性能；&lt;/p&gt;
&lt;p&gt;大页(Large Pages): 正常情况下windows内存是4KB的页，而大页的最小空间是2MB，也就是说分配的时候可能大于2MB；&lt;/p&gt;
&lt;p&gt;转换检测缓冲区(TLB: Translation Lookaside Buffer)：是一个内存管理单元，用于改进虚拟地址到物理地址转换速度；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何开启？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;跟踪标记834只能在启动SQL Server时开启&lt;/p&gt;
&lt;p&gt;1. 打开SQL Server Configuration Manger；&lt;/p&gt;
&lt;p&gt;2. 右击SQL Server实例选择属性(Properties)；&lt;/p&gt;
&lt;p&gt;3. 在启动参数 (Startup Parameters) 里添加-T834；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/57957/201803/57957-20180301140911813-928574837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 保存并重启SQL Server实例的服务以生效；&lt;/p&gt;
&lt;p&gt;5. 开启成功的话，在SQL Server errorlog里可以看到类似字样：Using large pages in the memory manager.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 大页 (Large Pages) 分配只在SQL Server 64位+企业版的SQLOS有效；&lt;/p&gt;
&lt;p&gt;2. 需要为SQL Server开启了Lock Pages In Memory (LPIM)；&lt;/p&gt;
&lt;p&gt;3. 建议只在SQL Server的专用服务器上开启，否则如果内存碎片太多或者内存不足无法分配大页，可能会导致SQL Server无法启动；另外在使用columnstore index的服务器上，也不建议开启这个跟踪标记；&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;跟踪标记：&lt;/strong&gt;845&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Locked Pages In Memory(LPIM)是一个windows特性，用于控制Windows进程不使用虚拟内存；&lt;/p&gt;
&lt;p&gt;在SQL Server 2012前，如果要对SQL Server进程开启这一特性，根据版本不同，可能会需要用到跟踪标记845，详见下表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/57957/201803/57957-20180301141103037-545493411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从&lt;/strong&gt;&lt;strong&gt;SQL Server 2012&lt;/strong&gt;&lt;strong&gt;起，如何开启&lt;/strong&gt;&lt;strong&gt;LPIM&lt;/strong&gt;&lt;strong&gt;？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 开始菜单 - 运行 - 输入gpedit.msc  - 回车，以打开组策略；&lt;/p&gt;
&lt;p&gt;2. 计算机配置 - Windows 设置 - 安全设置 - 本地策略 - 用户权利指派&lt;/p&gt;
&lt;p&gt;3. 双击“锁定内存中的页”，在“本地安全策略设置”对话框中，单击“添加”按钮添加SQL Server服务账号并确认；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/57957/201803/57957-20180301141204977-1495792693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 重启SQL Server服务以使配置生效；&lt;/p&gt;
&lt;p&gt;5. 成功开启LPIM后，在SQL Server errorlog里可以看到类似字样：Using locked pages in the memory manager.；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 不难发现，在SQL Server 2012前，64位的标准版里开启LPIM会可能会用到跟踪标记845，从SQL Server 2012之后就再也不需要了；&lt;/p&gt;
&lt;p&gt;2. 如果同时开启834跟踪标记和LPIM，那么errorlog只会显示：Using large pages in the memory manager.，并不会显示：Using locked pages in the memory manager.，因为开启跟踪标记834的前提是开启了LPIM；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trace Flag 834 and When to Use It&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/sql_server_isv/2010/11/30/temenos-t24-trace-flag-834-and-when-to-use-it/&quot;&gt;https://blogs.technet.microsoft.com/sql_server_isv/2010/11/30/temenos-t24-trace-flag-834-and-when-to-use-it/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tuning options for SQL Server when running in high performance workloads&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/help/920093/tuning-options-for-sql-server-when-running-in-high-performance-workloa&quot;&gt;https://support.microsoft.com/en-us/help/920093/tuning-options-for-sql-server-when-running-in-high-performance-workloa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Server and Large Pages Explained&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/psssql/2009/06/05/sql-server-and-large-pages-explained/&quot;&gt;https://blogs.msdn.microsoft.com/psssql/2009/06/05/sql-server-and-large-pages-explained/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server Memory Server Configuration Options&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-memory-server-configuration-options#lock-pages-in-memory-lpim&quot;&gt;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-memory-server-configuration-options#lock-pages-in-memory-lpim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to enable the &quot;locked pages&quot; feature in SQL Server 2012&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/help/2659143/how-to-enable-the-locked-pages-feature-in-sql-server-2012&quot;&gt;https://support.microsoft.com/en-us/help/2659143/how-to-enable-the-locked-pages-feature-in-sql-server-2012&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DBCC TRACEON - Trace Flags (Transact-SQL)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/t-sql/database-console-commands/dbcc-traceon-trace-flags-transact-sql&quot;&gt;https://docs.microsoft.com/en-us/sql/t-sql/database-console-commands/dbcc-traceon-trace-flags-transact-sql&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 01 Mar 2018 06:14:00 +0000</pubDate>
<dc:creator>张骞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/seusoftware/p/8488169.html</dc:identifier>
</item>
<item>
<title>Entity Framework——记录执行的命令信息 - 甜橙很酸</title>
<link>http://www.cnblogs.com/hdwgxz/p/8487945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hdwgxz/p/8487945.html</guid>
<description>&lt;p&gt;&lt;span&gt;有两种方法可以记录执行的&lt;/span&gt;SQl&lt;span&gt;语句：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;使用&lt;/span&gt;DbContext.Database.Log&lt;span&gt;属性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;实现&lt;/span&gt;IDbCommandInterceptor&lt;span&gt;接口&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一&lt;/span&gt; &lt;span&gt;使用&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;DbContext&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;strong&gt;Log&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;属性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面截图显示了&lt;/span&gt;Database&lt;span&gt;属性和&lt;/span&gt;&lt;span&gt;Log&lt;/span&gt;&lt;span&gt;属性，可以看出这个属性是一个委托，类&lt;/span&gt;&lt;span&gt;型为&lt;/span&gt;Action&amp;lt;string&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1024858/201803/1024858-20180301125947388-1989987847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1024858/201803/1024858-20180301130026782-35640829.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对&lt;/span&gt;Log&lt;span&gt;属性的解释为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Set this property to log the SQL generated by the System.Data.Entity.DbContext to the given delegate. For example, to log to the console, set this property to System.Console.Write(System.String).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;使用方法：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1&lt;span&gt;）在自定义上下文中获得执行的&lt;/span&gt;&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt;相关信息，即在自定上下文的构造函数中使用&lt;/span&gt;&lt;span&gt;Database.Log&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义上下文
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    [DbConfigurationType(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(MySqlEFConfiguration))]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomDbContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomDbContext()
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name=Master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        {
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.Configuration.LazyLoadingEnabled = false;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new DropCreateDatabaseIfModelChanges&amp;lt;CustomDbContext&amp;gt;()
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new DropCreateDatabaseAlways&amp;lt;CustomDbContext&amp;gt;()&lt;/span&gt;
            Database.SetInitializer&amp;lt;CustomDbContext&amp;gt;(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Database.Log =&lt;span&gt; Log;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;User&amp;gt; Users { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnModelCreating(DbModelBuilder modelBuilder)
        {
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnModelCreating(modelBuilder);
            EntityConfiguration.Set(modelBuilder);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Log(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; cmd)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或输出到控制台
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.Write(cmd);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或输出到文件
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;using (StreamWriter sw = new StreamWriter(@&quot;E:\EFCmdLogger.txt&quot;))
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    sw.WriteLine(cmd);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或输出到调试信息窗口&lt;/span&gt;
&lt;span&gt;            Debug.WriteLine(cmd);
        }
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;执行结果如下截图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1024858/201803/1024858-20180301130214005-1332362338.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2）&lt;span&gt;在具体的方法中使用&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EFOPerations
    {
&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ReadUser()
        {
            Stopwatch stw &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();
            stw.Start();
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (CustomDbContext db = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomDbContext())
            {
                db.Database.Log &lt;/span&gt;=&lt;span&gt; Console.WriteLine;
                User user &lt;/span&gt;= db.Users.Find(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = &lt;span&gt;new&lt;/span&gt; { Account =&lt;span&gt; user.Account };
            }
            stw.Stop();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; time =&lt;span&gt; stw.ElapsedMilliseconds;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;db.Database.Log = Console.WriteLine;&lt;span&gt;这条语句的位置；如果将其放到查询语句，即&lt;/span&gt;User user = db.Users.Find(1);&lt;span&gt;之后则无法输出信息！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;还可以改变日志的格式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建继承自&lt;/span&gt;DatabaseLogFormatter&lt;span&gt;的类，实现新的格式化器，然后使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func&amp;lt;System.Data.Entity.DbContext,System.Action&amp;lt;System.String&amp;gt;,System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter&amp;gt;)&lt;/p&gt;
&lt;p&gt;DatabaseLogFormatter&lt;span&gt;的三个方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;LogCommand&lt;span&gt;：在&lt;/span&gt;SQL 语句或存储过程&lt;span&gt;执行前记录它。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;LogParameter&lt;span&gt;：记录参数，默认被&lt;/span&gt;LogCommand&lt;span&gt;调用（未能验证这一点）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;LogResult&lt;span&gt;：记录&lt;/span&gt;SQL 语句或存储过程&lt;span&gt;执行后的一些相关信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这三个方法包含的参数为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DbCommand command&lt;span&gt;：&lt;/span&gt;SQL 语句或存储过程&lt;span&gt;相关的信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DbCommandInterceptionContext&amp;lt;TResult&amp;gt; interceptionContext&lt;span&gt;：执行结果相关的信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;DbParameter parameter&lt;span&gt;：&lt;/span&gt;System.Data.Common.DbCommand 的参数&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重写&lt;/span&gt;LogCommand&lt;span&gt;或&lt;/span&gt;LogResult&lt;span&gt;都可以改变&lt;/span&gt;SQL 语句或存储过程&lt;span&gt;相关信息格式，但是注意这两个方法&lt;/span&gt;interceptionContext&lt;span&gt;参数的值可能会不一样。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;继承&lt;/span&gt;DatabaseLogFormatter&lt;span&gt;，实现格式化器&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomDatabaseLogFormatter : DatabaseLogFormatter
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CustomDatabaseLogFormatter(DbContext context, Action&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; writeAction)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(context, writeAction)
        {
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; LogCommand&amp;lt;TResult&amp;gt;(DbCommand command, DbCommandInterceptionContext&amp;lt;TResult&amp;gt;&lt;span&gt; interceptionContext)
        {

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; LogResult&amp;lt;TResult&amp;gt;(DbCommand command, DbCommandInterceptionContext&amp;lt;TResult&amp;gt;&lt;span&gt; interceptionContext)
        {
            StringBuilder sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; command.Parameters.Count; i++&lt;span&gt;)
            {
                sb.AppendLine(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;参数名称：{0}，值：{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, command.Parameters[&lt;span&gt;0&lt;/span&gt;].ParameterName, command.Parameters[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Value));
            }
            Write(command.CommandText &lt;/span&gt;+&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+ command.CommandTimeout +&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+ command.CommandType +&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+&lt;span&gt; sb.ToString());
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;设置新的格式化器&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomDbConfiguration : MySqlEFConfiguration
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CustomDbConfiguration():&lt;span&gt;base&lt;/span&gt;&lt;span&gt;()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.AddInterceptor(new CommandInterceptor(new Logger()));&lt;/span&gt;
            SetDatabaseLogFormatter((context, writeAction) =&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomDatabaseLogFormatter(context, writeAction));
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;使用自定义&lt;/span&gt;CustomDbConfiguration&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[DbConfigurationType(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(CustomDbConfiguration))]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomDbContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomDbContext()
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name=Master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        {
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.Configuration.LazyLoadingEnabled = false;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new DropCreateDatabaseIfModelChanges&amp;lt;CustomDbContext&amp;gt;()
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new DropCreateDatabaseAlways&amp;lt;CustomDbContext&amp;gt;()&lt;/span&gt;
            Database.SetInitializer&amp;lt;CustomDbContext&amp;gt;(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Database.Log =&lt;span&gt; Log;
        }

        ......

}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二&lt;/span&gt; &lt;span&gt;实现&lt;/span&gt;IDbCommandInterceptor&lt;span&gt;接口&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;IDbCommandInterceptor&lt;span&gt;，同时为了灵活的记录执行信息，定义了日志接口&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CommandInterceptor : IDbCommandInterceptor
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ICommandLogger logger;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CommandInterceptor(ICommandLogger logger)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger =&lt;span&gt; logger;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; NonQueryExecuted(DbCommand command, DbCommandInterceptionContext&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; interceptionContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger.Log&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(command, interceptionContext);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; NonQueryExecuting(DbCommand command, DbCommandInterceptionContext&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; interceptionContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger.Log&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(command, interceptionContext);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ReaderExecuted(DbCommand command, DbCommandInterceptionContext&amp;lt;System.Data.Common.DbDataReader&amp;gt;&lt;span&gt; interceptionContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger.Log&amp;lt;DbDataReader&amp;gt;&lt;span&gt;(command, interceptionContext);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ReaderExecuting(DbCommand command, DbCommandInterceptionContext&amp;lt;System.Data.Common.DbDataReader&amp;gt;&lt;span&gt; interceptionContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger.Log&amp;lt;DbDataReader&amp;gt;&lt;span&gt;(command, interceptionContext);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ScalarExecuted(DbCommand command, DbCommandInterceptionContext&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; interceptionContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger.Log&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;(command, interceptionContext);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ScalarExecuting(DbCommand command, DbCommandInterceptionContext&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; interceptionContext)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.logger.Log&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;(command, interceptionContext);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ICommandLogger
    {
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; Log&amp;lt;T&amp;gt;(DbCommand command, DbCommandInterceptionContext&amp;lt;T&amp;gt;&lt;span&gt; interceptionContext);
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Logger : ICommandLogger
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Log&amp;lt;T&amp;gt;(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&amp;lt;T&amp;gt;&lt;span&gt; interceptionContext)
        {
            StringBuilder sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i =&lt;span&gt;0&lt;/span&gt;;i&amp;lt;command.Parameters.Count;i++&lt;span&gt;)
            {
                sb.AppendLine(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;参数名称：{0}，值：{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, command.Parameters[&lt;span&gt;0&lt;/span&gt;].ParameterName, command.Parameters[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Value));
            }
            
            Debug.WriteLine(command.CommandText&lt;/span&gt;+&lt;span&gt;Environment.NewLine
                &lt;/span&gt;+ command.CommandTimeout +&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+ command.CommandType +&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+&lt;span&gt; Environment.NewLine
                &lt;/span&gt;+&lt;span&gt; sb.ToString());
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何使用这两个类呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1使用配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entityFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;interceptor &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;ConsoleApp_EntityFramework.Interceptor.CommandInterceptor, ConsoleApp_EntityFramework.Interceptor&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entityFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;pre&quot;&gt;&lt;span&gt;但是采用这种方式要对上面的&lt;/span&gt;CommandInterceptor &lt;span&gt;进行改造。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;pre&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public class CommandInterceptor : IDbCommandInterceptor
    {
        private ICommandLogger logger;
        public CommandInterceptor()
        {
            this.logger = new Logger();
        }

    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;pre&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是如果&lt;/span&gt;EF操作的是Mysql那么这种方法不行，抛出异常：&lt;span&gt;无法识别的元素&lt;/span&gt;“interceptors”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2编码方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只有上面两个类还不够，还要定义创建一个继承自&lt;/span&gt;DbConfiguration的配置类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public class CustomDbConfiguration : DbConfiguration
    {
        public CustomDbConfiguration():base()
        {
            this.AddInterceptor(new CommandInterceptor(new Logger()));
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在自定义数据库上下文上使用此特性&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    /// &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    /// 自定义上下文
    /// &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    [DbConfigurationType(typeof(CustomDbConfiguration))]
    public class CustomDbContext : DbContext
    {
        ......
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;一切准备好后运行程序，却抛出异常：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The ADO.NET provider with invariant name 'MySql.Data.MySqlClient' is either not registered in the machine or application config file, or could not be loaded. See the inner exception for details.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;似乎是&lt;/span&gt;MySql.Data.MySqlClient的问题，其实不是！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是&lt;/span&gt;SQL Server则没问题，但这里EF框架操作的是MySql，要是使用MySql.Data.Entity.MySqlEFConfiguration这个类，而不是System.Data.Entity.DbConfiguration，所以CustomDbConfiguration应该派生自MySql.Data.Entity.MySqlEFConfiguration&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomDbConfiguration : MySqlEFConfiguration
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomDbConfiguration()&lt;span&gt;:base()&lt;/span&gt;
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.AddInterceptor(&lt;span&gt;new&lt;/span&gt; CommandInterceptor(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Logger()));
        }
        .....
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样修改后，运行程序得到下面的结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1024858/201803/1024858-20180301131133160-339566310.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到日志打印了两次，这是因为&lt;/span&gt;ReaderExecuting&lt;span&gt;和&lt;/span&gt;&lt;span&gt;ReaderExecuted&lt;/span&gt;&lt;span&gt;各调用了一次，执行的顺序是先&lt;/span&gt;&lt;span&gt;ReaderExecuting&lt;/span&gt;&lt;span&gt;然后&lt;/span&gt;&lt;span&gt;ReaderExecuted&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;-----------------------------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;global-zeroclipboard-html-bridge&quot; class=&quot;global-zeroclipboard-container&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;转载与引用请注明出处。&lt;/p&gt;
&lt;p&gt;时间仓促，水平有限，如有不当之处，欢迎指正。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 01 Mar 2018 05:14:00 +0000</pubDate>
<dc:creator>甜橙很酸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hdwgxz/p/8487945.html</dc:identifier>
</item>
<item>
<title>JavaScript面向对象入门 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8487892.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8487892.html</guid>
<description>&lt;p&gt;我们可以从几个方面去说JavaScript是什么：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;基于对象&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;javaScript中&lt;strong&gt;内置了许多对象&lt;/strong&gt;供我们使用【String、Date、Array】等等&lt;/li&gt;
&lt;li&gt;javaScript也&lt;strong&gt;允许我们自己自定义对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;当用户触发执行某些动作的时候【鼠标单机、鼠标移动】，&lt;strong&gt;javaScript提供了监听这些事件的机制&lt;/strong&gt;。当用户触发的时候，就执行我们自己写的代码。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释性语言&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;[x] javaScript代码是&lt;strong&gt;由浏览器解析的&lt;/strong&gt;，并不需要编译。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于浏览器的动态交互技术&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;既然javaScript是由浏览器解析的，那么它肯定要基于浏览器。 javaScript让网页变得更加“灵活&quot;&quot;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;弱类型&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;[x] 像java、c++等编译型语言，要先定义变量，后使用。javaScript能够&lt;strong&gt;直接使用，不需要先定义&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;javaScript变量可分为三种类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;基本类型【number、string、boolean】&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;javaScript是弱类型语言，在运行的时候才知道具体的类型是什么。所有类型都用var来修饰。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊类型【null、undefined】&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;当定义了变量，没有任何赋值的时候，该变量就是undefined类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合类型【数组、对象、函数】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;在JavaScript中对象的类型可分为4种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;内置对象【String、Math、Array】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义对象【程序员自己创建的对象】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器对象【windows、document、history、status等等与浏览器相关的对象】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ActiveXObject（XMLHttpRequest）对象【异步对象，使用AJAX用到的对象，使用该对象与服务器进行异步交互】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数是属于特殊类型的一种，&lt;strong&gt;在另外一篇博文已经讲解了创建对象、创建类的几种方式，可参考&lt;/strong&gt;：&lt;a href=&quot;http://blog.csdn.net/hon_3y/article/details/69362242&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/hon_3y/article/details/69362242&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是：&lt;strong&gt;javaScript定义函数的时候，参数的类型是不用声明的！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;正常方式&quot;&gt;正常方式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;下面就定义了一个名称为mysum的函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mysum&lt;/span&gt;(num1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;num2)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; num2&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; myresult &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;mysum&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;myresult=&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;myresult)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;function定义&quot;&gt;Function定义&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在JavaScript中， 一切皆是对象，函数也可以用一个对象来代表：Function&lt;/strong&gt;，我们可以使用Function来创建对象：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数参数全都是字符串，最后一个字符串是方法体&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; youresult &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;num1&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;num2&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;return num1+num2&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;( &lt;span class=&quot;at&quot;&gt;youresult&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;) )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于这种方法写起来并不好些，可读性也不太好，因此很少使用【不推荐使用】&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;匿名创建函数&quot;&gt;匿名创建函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;其实这种和第一种差不多，只不过是将一个无名的函数赋值给一个变量。那么这个变量就代表了这个函数。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; theyresult &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(num1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;num2)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; num2&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; 
                         &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;( &lt;span class=&quot;at&quot;&gt;theyresult&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20000&lt;/span&gt;) )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;theyresult这个变量就代表了函数。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;方式&quot;&gt;方式①&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;直接使用new Object()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Object&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;方式-1&quot;&gt;方式②&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用空的{}大括号&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405195513959?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们要为创建的对象增加属性和访问属性的值&lt;/strong&gt;！&lt;/p&gt;
&lt;h2 id=&quot;使用.操作符增加属性&quot;&gt;使用.操作符增加属性&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JavaScript是弱类型的语言，可以动态的添加属性。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试-1&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405195838456?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;使用.操作符访问属性&quot;&gt;使用.操作符访问属性&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; aa &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试-2&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405200359401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;使用操作符访问属性&quot;&gt;使用[]操作符访问属性&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; aa &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [obj[&lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;]]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bb &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [obj[&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;]]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试-3&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405200359401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;方式-2&quot;&gt;方式①&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用function来模拟创建类，function充当了构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//测试函数&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; teacher &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Teacher&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//使用function来模拟类&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Teacher&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试-4&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405201933347?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;方式-3&quot;&gt;方式②&lt;/h2&gt;
&lt;p&gt;上面的function来模拟类很容易和函数混淆。&lt;/p&gt;
&lt;p&gt;我们一般这样做：&lt;strong&gt;用一个变量记住一个匿名的function当做是类，function充当了构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
        &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; teacher &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Teacher&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; Teacher &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;


        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试-5&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405202242786?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;方式-4&quot;&gt;方式③&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用JSON语法来创建类，也就是对象直接量定义方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;

        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;aaa&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试-6&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405203327072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们&lt;strong&gt;创建公有属性应该在类中指定，创建公有方法应该使用原型对象prototype&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prototype定义的属性就类似于Java的静态成员：在原型对象上定义了属性，拥有这个原型对象的function所创建的对象也拥有定义的属性！所以，我们方法中就使用prototype&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Teacher&lt;/span&gt;(name) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_init&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (name) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_init&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;创建两个不同的Teacher对象，name属性是不一样的。而它们共享同一份setName()和getName()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170405220231176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是：&lt;strong&gt;prototype定义的属性只可读的&lt;/strong&gt;。如果你想要&lt;strong&gt;使用具体对象&lt;/strong&gt;写prototype的属性，实际上并不是写，&lt;strong&gt;而是重新为该类定义了一个同名(和prototype同名)的属性&lt;/strong&gt;。在&lt;strong&gt;读取同名属性的时候，优先读取对象上的属性&lt;/strong&gt;，而不是prototype的。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们在Java中，定义私有属性是通过关键字private来修饰的。。&lt;/p&gt;
&lt;p&gt;在JavaScript中是没有这样的关键字的，我们需要这样做：&lt;strong&gt;定义在方法内【也就是function内部，也可以看作成构造函数】的变量，就是私有变量。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Teacher&lt;/span&gt;(name) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//这是私有属性，外界不能访问&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//这是公有属性，外界可以访问&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;co&quot;&gt;//想要访问私有变量age，只能在这里编写方法来访问。其余的地方都不行！&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//我们通常就是在这里编写公有方法来访问私有属性&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在JavaScript中定义静态属性其实就是通过prototype原型对象来定义的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;定义静态的时机：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当类的某个值与&lt;strong&gt;对象无关期望所有位置看到的结果是一样的时候，就可以定义为类静态属性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果类的一个方法做的是&lt;strong&gt;和具体对象无关的操作，而是做一些工作操作的时候，就可以将这个方法定义为静态的类方法&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;//静态属性TYPE&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Book&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; “IT”&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;Book&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Book&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;TYPE&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;在学习AJAX的时候，发现JavaScript中for in循环，&lt;strong&gt;这种循环对于遍历JSON是很好用的&lt;/strong&gt;。于是写下了这篇博文&lt;/p&gt;
&lt;p&gt;for &lt;strong&gt;in循环本质上是forEach循环&lt;/strong&gt;，它主要有两个作用&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;遍历数组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;遍历JavaScript对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;遍历数组&quot;&gt;遍历数组&lt;/h2&gt;
&lt;p&gt;当使用for in来遍历数组的时候，它的&lt;strong&gt;循环计数器是数组元素的索引值&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; a) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(index)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果&quot;&gt;效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170407161311626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;遍历javascript对象&quot;&gt;遍历JavaScript对象&lt;/h2&gt;
&lt;p&gt;当使用for in来遍历对象的时候，它的&lt;strong&gt;循环计数器是对象的属性名&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;//对象json上，包含了两个对象a和b属性&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; json &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}};&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  json)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(name)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;效果-1&quot;&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170407165322118?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在B站中看见了一个JS大气球这么一个教程，才知道原来JS+HTML5+CSS3能那么有趣。但是视频中没并没有给出源码。于是在别人的博客中搜到了对应的源码以及他自己实现的思路，该博主对其进行了改编。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/morang/p/7636148.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/morang/p/7636148.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上的博文有源码的下载。下面我就直接贴上源码了。思路就在博文中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html PUBLIC &quot;-//WAPFORUM//DTD XHTML Mobile 1.0//EN&quot; &quot;http://www.wapforum.org/DTD/xhtml-mobile10.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;气球大战&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;viewport&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;/*CSS3能够将气球描绘出来，使用到了圆形、旋转、阴影等技术*/&lt;/span&gt;
            body&lt;span class=&quot;kw&quot;&gt;{margin:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;padding:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;}&lt;/span&gt;
            &lt;span class=&quot;fl&quot;&gt;#ballDiv&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;}&lt;/span&gt;
            &lt;span class=&quot;fl&quot;&gt;.balloon&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;#f3778d&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;border-radius:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10%&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt;rotate(&lt;span class=&quot;dt&quot;&gt;45deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;box-shadow:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; pink &lt;span class=&quot;dt&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;z-index:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*这里使用到了伪元素，可以不用到html中定义元素就可以实现功能了！*/&lt;/span&gt;
            &lt;span class=&quot;fl&quot;&gt;.balloon&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:after&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-15px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-15px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*这里使用到了伪元素，可以不用到html中定义元素就可以实现功能了！*/&lt;/span&gt;
            &lt;span class=&quot;fl&quot;&gt;.balloon&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;content:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ffc0cb&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-16px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;transform:&lt;/span&gt; rotate(&lt;span class=&quot;dt&quot;&gt;-45deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;gameinfo&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;transform: translateZ(360px);&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                最高连击：&lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'maxDoubleHit'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;               
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                本次游戏：&lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'currentDoubleHit'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;               
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;gamemsg&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;display:none;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;color:red;font-weight:bold;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    Game Over
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; onclick=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javscript:location.reload();&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                    重新开始
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ballDiv&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            
            
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&amp;lt;div class=&quot;balloon&quot;&amp;gt;&amp;lt;/div&amp;gt;--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; maxDoubleHit&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'eliminateCount'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; currentDoubleHit&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//当做一个缓存池，优化性能的。&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bnElements&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//存放所有气球&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; random&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//随机函数&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; wW&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//窗口宽度&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; wH&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//窗口高度&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ballW&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//气球的宽度&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ballH&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//气球的宽度&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; minSpeed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//最小速度，每次向上移动至少3px&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speedNum&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//速度的定量&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; defBnNumber&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//初始化气球&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; moveTimer&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isEnd&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;            
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; jindex&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ballDiv&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ballDiv'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;co&quot;&gt;//初始化           &lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(defBnNumber)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//移动&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;move&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//绑定单击事件&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;bindClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;co&quot;&gt;//游戏信息&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'maxDoubleHit'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;maxDoubleHit
            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;record&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(isEnd)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;clearTimeout&lt;/span&gt;(moveTimer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    bnElements&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gamemsg'&lt;/span&gt;).&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'block'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gameinfo'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'transform: translateZ(360px);position: fixed;top:0;left:0;z-index:999'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'currentDoubleHit'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=++&lt;/span&gt;currentDoubleHit&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(currentDoubleHit&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;maxDoubleHit)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'maxDoubleHit'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;currentDoubleHit&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;localStorage&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setItem&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'eliminateCount'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;currentDoubleHit)
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//初始化气球&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(num)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//创建一个虚拟文档节点&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; docFragment&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createDocumentFragment&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;num&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bnElement&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'balloon'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//速度随机，限定最小值&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;(minSpeed&lt;span class=&quot;op&quot;&gt;,~~&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;speedNum))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'speed'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;speed)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//~~取整 移动速度&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'ball-'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;jindex&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//分散排列&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;~~&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;wW))&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;ballW&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;x)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;                
                    &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;wH&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//露一点出来         &lt;/span&gt;
                    
                    &lt;span class=&quot;co&quot;&gt;//1.先将创建的气球放入创建的虚拟文档节点&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;docFragment&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(bnElement)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(bnElement)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//2.将虚拟文档节点添加到body中&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ballDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(docFragment)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//使用定时器来对气球进行移动。&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;move&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;bl&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; currentElement&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;bnElements[i]
                        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(currentElement&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; offsetTop&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetTop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(offsetTop&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//窗口中&lt;/span&gt;

                            &lt;span class=&quot;co&quot;&gt;//offset就是针对窗口的位置来进行移动的。&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'speed'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;currentElement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;offsetTop&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;speed&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//移除dom节点&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//ballDiv.removeChild(currentElement);&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//移除数组中&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//bnElements.splice(i,1);&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;//init(1);&lt;/span&gt;
                            isEnd&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;at&quot;&gt;record&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                moveTimer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(move&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//对所有的气球进行单击监听事件，不要单独为每个气球来进行监听，这样耗费性能！&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bindClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            
                &lt;span class=&quot;va&quot;&gt;ballDiv&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;clickFunc&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;clickFunc&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;isEnd &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'balloon'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;co&quot;&gt;//这里使用call主动调用，在boom方法中我们就可以使用this指针了。&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;boom&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;at&quot;&gt;record&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;boom&lt;/span&gt;(callback)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//var that=this; //替换了上下文，但是没有使用this的意义.&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'speed'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;--&lt;/span&gt;)
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        callback&lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看了视频也学到了之前一直没有注意的东西:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CSS3很厉害啊，能将方形的div转成是椭圆形的[也就是气球的形状]，还有盒子的阴影设置。&lt;/li&gt;
&lt;li&gt;使用伪元素就可以不用直接在html中设置标签了。配合CSS3也能够做出对应的样式。&lt;/li&gt;
&lt;li&gt;使用实体边框配合CSS3也可以做出不同的形状样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在生成元素的时候，可以先将要生成的元素加入到文档片段中，再使用文档片段来进行一次性添加到body上，这样性能会好很多!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用~~运算符能够取整数&lt;/li&gt;
&lt;li&gt;限定气球的边界就可以使用max和min函数来进行限定。这也是很好用的。&lt;/li&gt;
&lt;li&gt;移动气球我们需要用到定时器。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/Java3y/p/_image/2017-10-09_120234.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用call主动调用方法，把目标对象传递过去的话，我们就可以使用this指针了。&lt;/li&gt;
&lt;li&gt;在定时器中使用bind(this),就可以在定时器中使用this指针的，因为定时器默认是由浏览器window来进行调用的，默认是不能使用this的&lt;/li&gt;
&lt;li&gt;绑定单击事件的时候，不要使用循环来进行绑定，这样太耗费性能了，我们可以使用监听事件来进行一次绑定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在遍历元素数组的时候，条件是元素数组的长度时，我们可以先把该元素数组的长度初始化出来，那么也可以提升性能!不然就每次判断前都要去查询数据的长度!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;array&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 01 Mar 2018 04:46:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8487892.html</dc:identifier>
</item>
<item>
<title>深入java虚拟机学习 -- 类的加载机制(续) - blueskyli</title>
<link>http://www.cnblogs.com/blueskyli/p/8487774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blueskyli/p/8487774.html</guid>
<description>&lt;p&gt;昨晚写 &lt;a href=&quot;https://www.cnblogs.com/blueskyli/p/8486565.html&quot; target=&quot;_blank&quot;&gt;深入java虚拟机学习 -- 类的加载机制&lt;/a&gt; 都到1点半了，由于第二天还要工作，没有将上篇文章中的demo讲解写出来，今天抽时间补上昨晚的例子讲解。&lt;/p&gt;
&lt;p&gt;这里我先把昨天的两份代码贴过来，重新看下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Singleton
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton singleton = &lt;span&gt;new&lt;/span&gt; Singleton(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一份代码的位置&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; counter1;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; counter2=0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton singleton = &lt;span&gt;new&lt;/span&gt; Singleton();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二份代码的位置&lt;/span&gt;

    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Singleton(){
        counter1&lt;/span&gt;++&lt;span&gt;;
        counter2&lt;/span&gt;++&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Singleton getInstance(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; singleton;
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo
{
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
       Singleton singleton&lt;/span&gt;=&lt;span&gt;Singleton.getInstance();
       System.out.println(&lt;/span&gt;&quot;counter1:&quot;+&lt;span&gt;singleton.counter1);
       System.out.println(&lt;/span&gt;&quot;counter2:&quot;+&lt;span&gt;singleton.counter2);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一份代码执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/354604/201803/354604-20180301001159871-1622864790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二份代码执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/354604/201803/354604-20180301001259421-120321815.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;类是如何被加载的&lt;/h2&gt;
&lt;p&gt;让我们再来回顾下上篇文章的加载顺序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/354604/201803/354604-20180301004615630-249763067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们知道Java虚拟机为类的静态变量分配内存，并设置默认的初始值实在&lt;span&gt;准备阶段&lt;/span&gt;开始的，这里所设置的初始值通常情况下是类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。有很多人还是不太明白默认零值和显示赋值到底是什么意思，下面我们距离来说：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sample{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; a=1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码在经过了准备阶段后的结果是：&lt;/p&gt;

&lt;p&gt;大家可能对b=0没有任何疑问，而a=0；就是上面说的“类型默认的零值”，也就是说&lt;span&gt;准备的阶段等号右边的1并不会赋值给a&lt;/span&gt;，不知道这么解释大家能不能明白，而类初始化阶段是类加载过程的最后一步，到了初始化阶段，才真正开始执行类中定义的java程序代码。&lt;span&gt;在初始化阶段，Java虚拟机执行类的初始化语句&lt;/span&gt;，为类的静态变量 赋予正确的初始值。&lt;/p&gt;
&lt;pre&gt;
private static int a=1&lt;span&gt;; 表示a被显式初始化成1；&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
private static int&lt;span&gt; b; 这里的b并没有被显式初始化，所以此时b的值仍然为0；&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;&lt;span&gt;案例分析&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;好了，说了这么多开始分析案例，我们知道类是自上而下执行的，所以第一份代码解析如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/354604/201803/354604-20180301113831576-1647381703.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当Singletom类在准备阶段，由于只是分配数据类型默认值，所以此时的counter1=0、counter2=0；&lt;/li&gt;
&lt;li&gt;当Singletom类在初始化阶段，1调用了Singleton的实例并对counter1和counter2分别进行了++操作，所以此时的counter1=1，counter2=1，由于2中未对counter1进行显式初始化，所以此时的counter1仍然保留值1，而counter2被显式赋值成0，所以counter2在初始化阶段又被改为0&lt;/li&gt;
&lt;li&gt;在经过了准备、初始化阶段后的最终结果就变成了counter1：1、counter2：0&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;第二份代码是将1-&amp;gt;2-&amp;gt;3的顺序修改为2-&amp;gt;3-&amp;gt;1，我们按着上面的思路重新分析发现很清晰的就知道了结果&lt;/p&gt;
&lt;p&gt;准备阶段没有任何变化，counter1=0、counter2=0；&lt;/p&gt;
&lt;p&gt;初始化阶段，counter1没有被显式赋值，所以counter1仍然保留值0，counter2被显式赋值为0，所以counter2=0，到第三步时调用了Singleton()方法，此时执行了++操作&lt;/p&gt;
&lt;p&gt;最终结果 counter1：1、counter2：1&lt;/p&gt;

</description>
<pubDate>Thu, 01 Mar 2018 03:59:00 +0000</pubDate>
<dc:creator>blueskyli</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blueskyli/p/8487774.html</dc:identifier>
</item>
<item>
<title>2017年数据库技术盘点 - 云加社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8487742.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8487742.html</guid>
<description>&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot;&gt;云&lt;/a&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot;&gt;+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦&lt;span lang=&quot;EN-US&quot;&gt;~。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;作者 | 那海蓝蓝，腾讯金融云数据库技术专家&lt;/p&gt;
&lt;p&gt;作者 | 小编0.7，腾讯TDSQL分布式数据库专家&lt;/p&gt;
&lt;p&gt;作者 | 大米，腾讯TDSQL分布式数据库专家&lt;/p&gt;
&lt;p&gt;责编 | 仲培艺&lt;/p&gt;
&lt;p&gt;由腾讯技术工程官方号发布在云+社区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在数据库领域，回顾2017这一年，精彩纷呈，热点不断，而且不乏标志性的事件发生。&lt;/p&gt;
&lt;p&gt;如Oracle提出的自治数据库这样的概念，把数据库技术带入一个新世界。其实AI技术应用于数据库由来已久，如AI技术调优数据库的性能、AI技术优化SQL、AI技术自动创建数据库索引（Learned Index）等。但是能把AI和数据库结合使之进入大众视野的，还非“自治数据库”莫属。&lt;/p&gt;
&lt;p&gt;再如NDBC（中国计算机学会数据库学术年会）庆祝四十华诞、阿里入股MariaDB、国内类Aurora架构的产品争相发布、数据库事务处理等核心技术的原创书籍出版、社区活动遍地开花等等，无一不在彰示着国内数据库界的精彩和繁荣。&lt;/p&gt;
&lt;p&gt;CCF数据库专委会主任杜小勇教授说：客观来说，如今的中国数据库已经处于与世界并跑的位置了!&lt;/p&gt;
&lt;p&gt;现在，让我们一起并跑，沿途中，我们将从学术界、工程界的角度，从国外到国内，从数据库内核技术到数据库运维等多种角度，一起来回顾精彩的2017。&lt;/p&gt;

&lt;p&gt;截至2017年12月，在DB-Engines（https://db-engines.com/en/ranking）上排名的数据库引擎已多达361种。&lt;/p&gt;
&lt;p&gt;从图1可见（对比去年同期数据如图2），Oracle、MySQL和Microsoft SQL Server稳居前三，一路遥遥领先。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/66be0001da47702b8810&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;2017年12月数据库Top5图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p9.pstatp.com/large/66be0001da49800fd444&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;2016年11月数据库Top5图&lt;/p&gt;
&lt;p&gt;但从图3也不难看出，位于成熟期的同时，其成长空间也受到了一定的限制。Oracle虽保持第一，但处于明显下滑趋势；MySQL在17年6月表现出色，几乎与Oracle持平，但后半年开始有所下滑；Microsoft SQL Server自15年9月跌至谷底后一路回升，于17年趋于稳定，但总体仍处于下滑趋势。虽说没有显著上升，但RDBMS三巨头雄踞排行榜top3已然且在不久的将来仍会是事实。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/66c1000092af71166bb9&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;2013-2017数据库top3分值变化图&lt;/p&gt;
&lt;p&gt;再把目光延伸至top20，就会惊人地发现，NoSQL家族正在爆炸式崛起。MongoDB，Redis，Cassandra，Hbase和Hive年轻气盛，一路飙升，从14年到17年均已实现分值翻倍（图4）。稳坐非关系型数据库第一把交椅的MongoDB，从09年的首度推出到现在不过十年，便已跻身top5，其发展潜力让人期待。&lt;/p&gt;
&lt;p&gt;数据库产品的起起伏伏，是数据库工程界的一个风向标，但不是数据库界的全部。2017这一年，数据库的理论界也因AI而亮点多多。接下来，让我们睁眼看看世界，然后瞪大眼睛反观一下国内的情景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/66c000016113373aa455&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;2013-2017NoSQL数据库top5分值变化图&lt;/p&gt;

&lt;p&gt;以前，国内数据库技术一直在跟跑国外的数据库技术，学术研究队伍如此，工程实践队伍也如此。可以说，在数据库技术的世界里，我们前30多年一直在学习、一直在探索。而国际的前沿技术引路者，还在不断引领数据库技术的潮流。2017这一年，世界上重大的一些事件如自治数据库的概念推出、Aurora相关技术的论文发表、Spanner用论文宣告成为了关系型数据库系统等等，都在影响着国内的技术圈子。&lt;/p&gt;
&lt;h2&gt;2.1 Oracle，开启自治数据库时代&lt;/h2&gt;
&lt;p&gt;2017年的Oracle Open World大会上，Oracle总裁拉里·埃里森公布了新杀器，Oracle自治数据库云。这款全球首款“自动驾驶”的数据库，集成了人工智能和自适应的机器学习技术，实现全面的自动化。&lt;/p&gt;
&lt;p&gt;自治数据库云的实现，是基于Oracle Database 18c的。对比目前的Oracle数据库，Oracle 18c在性能、内存优化、可用性、安全性、数据仓库等方面都作出优化提升，向HTAP数据库的目标更进一步。&lt;/p&gt;
&lt;p&gt;Oracle自治数据库云，消除了复杂性、人为错误和人工管理，能够以更低的成本提供更高的可靠性、安全性和运营效率。通过融合机器学习技术，自治数据库云具备这些特点：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;自主驱动：完全自动化的打补丁、升级、备份和可用性架构，可执行所有日常数据库维护任务，无需任何人工干预。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消除人为错误：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;自动恢复功能可自动检测并应用纠正措施，Oracle 自治数据库云将自动实施 Oracle Real Application Clusters (RAC) 和跨区域 Oracle Active Data Guard，确保持续的可用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Oracle SLA确保99.995%的可靠性和可用性，把代价高昂的计划内和计划外停机控制在每年30分钟内。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;无需手动性能调优：采用自适应机器学习技术，自动激活列式缓存、存储索引、压缩和资源优先排序，根据负载所执行的实际工作分配资源，避免代价高昂的过度供应。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Oracle推出Oracle 18c和自治数据库云，正指出了数据库领域的发展趋势：数据库HTAP化，和人工智能结合，机器学习代替人工完成繁琐的数据库操作。放眼看去，如卡内基·梅隆的ottertune，一些开源项目顺应潮流，向智能化、自动化数据库靠近。&lt;/p&gt;
&lt;p&gt;另外，这一年，Oracle发布12c R2版本，也就是12.2.0.1，多方面得到提升，包括：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;可用性方面：数据保护、逻辑复制、在线操作、分片等的表现得到提升，同时简化了升级操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;大数据和数据仓库：完善大数据管理系统结构、提供数据库内的多维度分析、加强查询处理和优化等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;性能方面：优化共享队列，全局共享Oracle云连接池，增强Java虚拟机上Oracle数据库的性能，完善内存数据库，简单支持非结构化数据存取等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;压缩、管理、公有云、安全性、空间和图等特性得到增强。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在数据库的世界里，Oracle依旧是独占鳌头。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.2 AWS Aurora，启动计算与存储分离的热潮&lt;/h2&gt;
&lt;p&gt;2017年，Amazon在SIGMOD上发表了论文《Amazon Aurora: Design Considerations for High Throughput Cloud Native Relational Databases》。&lt;/p&gt;
&lt;p&gt;这篇论文，描述了Amazon的云数据库Aurora的架构。基于MySQL的Aurora对于单点写多点读的主从架构做了进一步的发展，使得事务和存储引擎分离，为数据库架构的发展提供了具有实战意义的已实践用例。其主要特点如下：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;8&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;实践了“日志即数据库”[1]的理念。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;事务引擎和存储引擎分离。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;数据缓冲区提前预热。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;REDO日志从事务引擎中剥离，归并到存储引擎中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;储存层可以有6个副本，多个副本之间通过Gossip协议可以保障数据的“自愈”能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;主备服务的备机可达15份，提供强大的读服务能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;持续可靠的云数据库的服务能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;数据存储跨多个区：提供了多级别容灾能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;数据容灾能力：数据冗余、备份、实时恢复等多种能力集成到云服务，提高的数据的保障能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;万能数据库的概念呼之欲出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而2017年尾，AWS的技术大会上，又爆料称AWS支持：multi write、类TureTime、Serveless等，这些都和最新的趋势紧密相融，前两者对应分布式数据库、后者对应数据库云化。&lt;/p&gt;
&lt;p&gt;Aurora对国内的计算与存储分离的产品研发影响深远，阿里的PolarDB、华为的FusionInsight系列等都在向Aurora对齐。相传，腾讯、京东等都跃跃欲试准备做类Aurora的产品。可见Aurora对国内的影响深远。&lt;/p&gt;
&lt;h2&gt;2.3 Spanner，引领分布式数据库潮流&lt;/h2&gt;
&lt;p&gt;2012年的《Spanner: Google’s Globally-Distributed Database》论文描述了基于KV系统[2]实现的一个半数据库式的“分布式系统”[3]，这个系统具备了大规模的扩展性，具有如下几个方面的特色：可扩展性（scalability）、自动分片（automatic sharding）、容错性（fault tolerance）、一致性复制（consistent replication），外部一致性（external consistency），和数据广域分布（wide-area distribution）。这些特色是通过提供了多行事务（multirow transactions）、外部一致性（external consistency）、跨数据中心的透明故障转移（transparent failover across datacenters）等功能实现的。Spanner开创了NoSQL分布式数据库的新时代，主要解决了如下问题：&lt;/p&gt;
&lt;p&gt;1. 数据分布。&lt;/p&gt;
&lt;p&gt;2. 多副本高可用：failover。&lt;/p&gt;
&lt;p&gt;3. 分布式事务处理：外部一致。&lt;/p&gt;
&lt;p&gt;4. 计算分布（通过F1支持SQL，松耦合结构）。&lt;/p&gt;
&lt;p&gt;5. KV存储模型。&lt;/p&gt;
&lt;p&gt;2017年，Google发表了一篇题为《Spanner: Becoming a SQL System》的论文。这篇论文描述了查询执行的切分（query execution in the presence of resharding）、瞬态故障情况下查询重新执行（query restarts upon transient failures）、驱动查询做路由和索引查找的范围查询（range extraction that drives query routing and index seeks）、以及改进的基于块的列存（the improved blockwisecolumnar storage format）等分布式查询优化技术。&lt;/p&gt;
&lt;p&gt;较之2012年的Spanner，本篇论文提到新增功能为：强类型的模式管理系统 （a strongly-typed schema system）、查询处理器（a SQL query processor）和关系模型存储及列存系统，并论述了2012年以来，Spanner系统向关系型数据库演进的历程，新论文愉快地表示Spanner从一个NoSQL系统已经全面演进为了一个关系型分布式数据库系统。&lt;/p&gt;
&lt;p&gt;这篇论文表明如下几点事实：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;有分布式基因的NoSQL是可以进化为NewSQL的，进化的途径可参考Spanner的发展历程，而Spanner也给出了进化方式的建议（有了分布式处理能力后及早向关系型演进）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;这种进化具有“快乐”的“进步”意义。快乐如论文标题宣称“成为了”一个SQL系统，口气十分地自豪；进步如论文标题宣称Spanner已经是一个“SQL”系统了，即具备了关系存储和关系运算的能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;NewSQL的一个特征是支持混合数据类型存储，如Spanner支持NoSQL也支持关系存储模型。而支持关系模型将是NewSQL系统的一个重要特征。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Spanner的另外一个特征是由松耦合的系统进化到一个高效的紧耦合系统，这样的系统能够处理各种类型的大数据。与此不同的是目前的大数据处理组件因松耦合而导致三难（选型难、使用难、维护难）。这表明大数据处理的技术架构可能从松耦合向紧耦合演进。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;从Spanner的演化，我们可以感知关系型数据库的春天重返故里，而分布式关系型数据库已经踏着数据库前进的节拍走到了我们眼前。现在，已经不是潮流来临，而是在席卷2017年的我们，并继续横扫2018。以此来观察数据库界，这一年，OceanBase、TDSQL、TiDB、CockroachDB等等主流分布式数据库即NewSQL系统正如火如荼地发展着，技术层面不断向Spanner靠拢。&lt;/p&gt;
&lt;h2&gt;2.4 NoSQL、图数据库、流数据库等场景化明显&lt;/h2&gt;
&lt;p&gt;随着互联网web2.0网站的兴起，传统的关系数据库在应付超大规模和高并发的SNS类型的纯动态网站时已经显得力不从心，而NoSQL数据库由于其本身的特点得到了非常迅速的发展。&lt;/p&gt;
&lt;p&gt;NoSQL家族主要分为键值（Key-Value）存储数据库、列存储数据库、文档型数据库和图数据库四大类，其产生就是为了解决大规模数据集合多重数据种类带来的挑战，故场景化也格外明显。&lt;/p&gt;
&lt;p&gt;键值存储数据库适用于内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。&lt;/p&gt;
&lt;p&gt;列存储数据库适用于分布式的文件系统；文档型数据库适用于Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）。&lt;/p&gt;
&lt;p&gt;图数据库适用于社交网络，推荐系统等，专注于构建关系图谱，如果与AI结合起来，我们可以设想一下他们美好的未来。&lt;/p&gt;
&lt;p&gt;NoSQL数据库并没有一个统一的架构，而是各有所长，一个成功的NoSQL必然特别适用于某些场合或者某些应用。&lt;/p&gt;
&lt;p&gt;还有意思的是，Kafka今年终于正式迎来了1.0.0版本，不仅标识着各组件功能的稳定性，还引入了一些新的功能：Kafka Streams API的优化（增加了一些全新的操作算子如cogroup等）；JMX监控指标的完善（引入很多集群健康度检查指标，对Kafka Connect监控体系做了较大程度的补足）；优化SASL认证错误的处理；强化对JBOD磁盘崩溃的处理；幂等producer的优化。此外，Kafka新引入了KSQL引擎，使得其更像一个流数据库而存在。&lt;/p&gt;
&lt;p&gt;2017年，从关系型数据库之外的其他数据库，我们看到，数据库正在朝场景化方向发展，不同类型的数据库适用于不同的场景，数据库产品只有做好自己的场景定位，才能谋取到更大的发展。&lt;/p&gt;
&lt;h2&gt;2.5 一些老牌数据库，在变革中渐渐老去&lt;/h2&gt;
&lt;p&gt;2017年5月，微软还发布了首款全球分布式多模型数据库Azure Cosmos DB，这是一款全球可用的JSON数据库平台。可以看到，关系数据库厂商抢占NoSQL市场的鏖战也将日趋激烈，几年前，PostgreSQL和MySQL已经支持了JSON类型数据，另外还有老牌的Infomix也是如此。&lt;/p&gt;
&lt;p&gt;2017年10月，微软发布了SQL Server2017 CTP2.1正式版。这是SQL Server 历史上首次同时发布Windows和Linux版，并支持Docker部署。从数据库排行榜看，微软占据第三位，遥遥领先第四位PostgreSQL。SQL Server似乎风光依旧。&lt;/p&gt;
&lt;p&gt;但是，在国内，SQL Server已经很难打开高端市场的局面了（几乎就是Oracle和MySQL的天下）。其实在国内，得益于在教育领域的耕耘和出色的产品易用性，SQL Server 有着比较好的群众基础和亲和形象。但一直以来，SQL Server都给大部分人群留下“适用于中小企业”的陈旧印象，再加上缺乏本地技术社区的建设，SQL Server已经渐渐淡出“高端玩家”的视野。若想要反转局面，那么进一步塑造品牌、打造标杆案例、不断提升产品和建设本地技术社区是SQL Server浴火重生的必经之路。&lt;/p&gt;
&lt;p&gt;无独有偶，起源于上世纪80年代的Informix，一个全球市场占有率曾经超过10%的元老级数据库，如今也面临着窘境。一个曾经是世界上最好的关系型数据库，却因为企业自身的经营问题，掩盖了技术上的成功。2001年，Informix被IBM公司接管，虽然一直保持更新，但是销售始终不尽人意。终于在2017年5月1日，印度的HCL公司宣布正式接管Informix研发和支持团队，这将重写Informix与国内三家公司的关系。在此之前，IBM公司将Informix授权给了南大通用、华胜信泰和福建星瑞格这三家中国数据库厂商以期合作。现在变数未定。Informix或许再也不能恢复当年的辉煌，但我们有理由相信，一定能够在众多国内知名数据库里看到Informix的影子，看到它的技术精华被传承下去。&lt;/p&gt;
&lt;p&gt;其实在IBM公司接管Informix期间，就融合了Informix的技术成就了DB2数据库。到了2017年6月22日，DB2已经 发布了V11.1 Mod Pack 2 and Fix Pack2版本，增强了crash recovery和SQL直接对JSON格式的数据进行操作的能力，包含了更多函数的支持。在DB-engines上，DB2也有着排名第六的不错的成绩。相较Informix，DB2显然更受IBM公司的青睐，但这仍掩盖不了DB2在中国销售不佳的事实（主要集中于金融行业）。DB2因其入门慢、市场推广差，往往不是用户的第一、甚至第二选择。&lt;/p&gt;
&lt;p&gt;2017年9月，SAP发布了HANA 2.0 SPS 02最新版本，为支持使用最新内存技术运行业务，主要新增了以下四大功能：一是数据库功能的增强，包括高可用性和灾难恢复等。二是提供了高级分析处理能力，如使用SAP HANA预测分析库（PAL），以简化调用算法的方式加速预测性应用程序开发，并能够使用SAP Web HANA for SAP HANA开发预测性和机器学习模型等。三是应用程序开发和工具增强。四是数据管理功能增强等。但HANA在国内的表现，尚在普通之列。&lt;/p&gt;
&lt;h2&gt;2.6 一些开源的数据库，前途光明灿烂&lt;/h2&gt;
&lt;p&gt;开源，是一种成功的商业模式。在开源社区的支持下，众多开源数据库如百花齐放，前途一片光明灿烂，比较知名的如MySQL，PostgreSQL，MongoDB，HBase，Cassandra和MariaDB等等。&lt;/p&gt;
&lt;p&gt;让我们来看看2017年，开源数据库都有哪些精彩的表现。&lt;/p&gt;
&lt;p&gt;MySQL&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;8&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;10月发布最新的稳定版本5.7.20，修复很多bug，针对审计、Docker、安全、插件、复制、参数配置和管理等方面做了更新和调整。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;日志审计功能增强；安全功能增强；X plugin更新；复制功能增强和更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;修复Docker中MySQL镜像丢失的bug。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;弃用、去除了一些配置参数，比如tx_isolation和tx_read_only将被弃用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;9月发布最新MySQL 8.0.3 RC版本，此版本在账户管理、原子DDL、性能优化、安全等方面做出优化，并且修复了大量bug。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支持角色管理，角色是一系列权限的集合，可以给某个用户授予和回收角色，使用角色可以更方便进行权限管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;InnoDB存储引擎支持原子DDL操作，包括表相关DDL和非表相关DDL。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;采用新的数据字典，所有元数据都用InnoDB引擎存储，以解决DDL的原子性问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;修复历史悠久的bug，8.0版本不再重置auto_increment值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MariaDB&lt;/p&gt;
&lt;p&gt;11月发布最新版本10.2.11，此版本在优化、系统变量、主备复制、存储引擎等方面做出补充和改进。&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;现在InnoDB作为默认存储引擎，添加MyRocks存储引擎的alpha版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入窗口函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更新InnoDB到5.7.18版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更新TokuDB到5.6.7-82.2。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;PostgreSQL&lt;/p&gt;
&lt;p&gt;11月发布新版本10.1，PostgreSQL 10的重磅特性有并行计算、逻辑订阅、FDW pushdown和sharding等。&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持陈述性表分区。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持预写日志支持哈希索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;主备复制，支持逻辑复制，同步复制的仲裁提交。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;性能提升，支持并行位图堆扫描、B-树索引扫描、合并连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TiDB&lt;/p&gt;
&lt;p&gt;10月发布GA版本（TiDB1.0），该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能等方面做了大量的工作：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;SQL查询优化器（调整代价模型，Analyze下推，函数签名下推）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;优化内部数据格式，减小中间结果大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提升MySQL兼容性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持 NO_SQL_CACHE 语法，控制存储引擎对缓存的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;重构 Hash Aggregator 算子，降低内存使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持 Stream Aggregator 算子。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MongoDB&lt;/p&gt;
&lt;p&gt;于2017年10月19日在纳斯达克上市，11月发行最新版本3.6，伴随着MongoDB 3.6的发布，MongoDB Team提供了一个方便开发者的指南社区。新版本主 要提供以下几个功能：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Change stream，通过Oplog监听一个集合的DML事件，用来实现pubsub类型的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Retryable writes，当集群出现换主现象时，写入操作会被自动重试从而保证应用端的透明。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Tunable consistency，MongoDB提供可调的一致性(一致或最终一致)，并在query中定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Greater query and update expressivity，支持操作嵌套数组；提供新的聚合操作符，以及在查询语法中使用聚合表达式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Apache Cassandra&lt;/p&gt;
&lt;p&gt;最新版3.11.1，发布于2017年10月，此版本在完善功能，提高性能等方面做出大量工作，并且修复众多bug：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;sstableloader忽略“ignore”选项。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;实现分区边界的short read protection。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;提升TRUNCATE性能、提升short read protection性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;修复对SuperColumn表的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总体上来看，在DB-Engines 排名top5中，开源数据库就占了三席，分别为MySQL，PostgreSQL和MongoDB。这些开源的数据库，究其成功的根本原因，是在放弃部分著作权的前提下，赢得了三大好处：培养开源社区，获得更大的用户群体；降低该产品和相关产品的技术支持成本；通过开源社区得到更多的衍生作品，提供更好的生态环境。&lt;/p&gt;
&lt;p&gt;我们相信，在2018乃至更长远的未来，开源数据库会越走越好。&lt;/p&gt;
&lt;h2&gt;2.7 CockroachDB，开源NewSQL&lt;/h2&gt;
&lt;p&gt;CockroachDB是一个分布式类Spanner架构的数据库，通过基于时间戳的MVCC技术，完整地支持了ACID语义。在隔离级别层面，支持SSI和SI，且SSI作为默认级别。&lt;/p&gt;
&lt;p&gt;对于SSI，CockroachDB受“write-snapshot isolation[4]”技术影响较大，着力于解决读-写冲突，以实现SSI。&lt;/p&gt;
&lt;p&gt;CockroachDB支持外部一致性，支持有限的线性一致性。&lt;/p&gt;
&lt;p&gt;2017年10月CockroachDB发布1.1版本，引入了快速并发导入数据的功能，主要做了三方面的工作：&lt;/p&gt;
&lt;p&gt;1. 从遗留数据库进行无缝迁移 。&lt;/p&gt;
&lt;p&gt;2. 简化集群管理。&lt;/p&gt;
&lt;p&gt;3. 为云环境提高性能。&lt;/p&gt;
&lt;p&gt;在《What’s Really New with NewSQL?》这篇论文里，如图5，NewSQL被分为了三种类型，CockroachDB、Spanner、TiDB归属第一类NewSQL。&lt;/p&gt;
&lt;p&gt;TDSQL、DRDS等这样的产品归属第二类NewSQL，但是从2017年TDSQL的发展来看，TDSQL从架构上更加靠近第一类NewSQL。&lt;/p&gt;
&lt;p&gt;而Aurora这样的产品，被划分为第三类NewSQL系统。但Aurora公布了multi write之后，其架构是否也会向第一类NewSQL靠近呢？&lt;/p&gt;
&lt;p&gt;未来的世界，我们相信，NewSQL会继续引领数据库的潮流，每种类型的NewSQL会相互借鉴、不断融合、协同发展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/66be0001da4819b7ab22&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;NewSQL类型图&lt;/p&gt;

&lt;h2&gt;3.1 NDBC大会，中国数据库四十年&lt;/h2&gt;
&lt;p&gt;2017年金秋十月，第34届中国数据库学术会议(NDBC 2017)在西子湖畔成功召开，大会聚集了全国数据处理技术领域的前辈、专家、学者、师生。&lt;/p&gt;
&lt;p&gt;今年，恰逢中国数据库学术会议四十华诞，NDBC2017回顾了中国数据库的四十年历程。这一届的NDBC，可谓中国数据库界2017年的最大事。&lt;/p&gt;
&lt;p&gt;在四十年前，即1977年，中国数据库的开山鼻祖，萨师煊老师倡导召开了全国数据库技术研讨大会，中国数据库萌芽，数据库技术的研究和推广就此展开。&lt;/p&gt;
&lt;p&gt;从当初老一辈专家萨师煊、王能斌、罗晓沛、施伯乐等播下数据库技术的火种，到杨冬青、马应章、王珊、尹良滨、冯玉才、李建中、何守才、何新贵、张大洋、张少润、张作民、郑怀远、郑振楣、周立柱、周龙骧、徐秋元、徐洁磐、唐世渭、唐常杰、姚卿达、童頫、董继润、瞿兆荣、岳丽华等专家教授奋发图强，再到新一代杜小勇、崔斌、高宏、李占怀、彭智勇、王国仁、周立柱、王建民、陈红、于戈等教授（还有很多专家教授没能一一列出，他们都是中国数据库的脊梁），中国数据库开始发展兴旺。&lt;/p&gt;
&lt;p&gt;相较世界数据库技术，中国数据库技术从起步、跟踪、追赶，到并跑，凝结了数代老一辈专家的心血。&lt;/p&gt;
&lt;p&gt;四十来，老一辈专家们培养了一批批的中国数据库人，他们或投身工业实践，或专心学术研究，或出国汲取经验，或开创国内数据库产品。这些人，正是中国数据库技术的脊梁，在众多数据库人的努力下，中国的数据库实现了：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;科研国际化：论文发表直逼美国（如图5）、举办国际学术杂志/会议（如CODAS、WAIM、APWEB、DASFAA、PAKDD、WISE、CIKM 、E-R、VLDB等）、国际学术界获奖等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;教学精品化：各种数据库教材层出不穷，引领了国内数据库技术的发展。例如，现在分布式数据库技术非常火热，而NDBC的老专家们1998年就开始研究并出版了一系列的分布式数据库技术书籍，如图所示。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;成果产业化：科研成果转化为实际的产品服务于中国的市场，并为中国数据库界培养了一代又一代的数据库工程实践人才。如国内最早做数据研发的人大金仓、武汉达梦、神舟通用、南大通用等公司，其背后的技术源泉都是来自高校的数据库研究团队。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;现在，活跃在中国的科研、教学一线的数据库、大数据专家们，如数据库领域的杰青包括哈尔滨工业大学的李建中教授、华东师范大学的周傲英教授、东北大学的王国仁教授、清华大学的王建民教授，都成绩斐然；入选国家千人计划的数据库人才如周晓方、樊文飞、张彦春、林学民、文继荣、王晓阳、申恒涛、武新，都领军一方；成为长江学者特聘教授与长江学者讲座教授如冯玲、周傲英、王国仁、崔斌、樊文飞、黄铭钧、熊辉，都成绩卓著。这些杰出的专家教授们，同时又培养出一代又一代的数据库人才。&lt;/p&gt;
&lt;p&gt;现在，活跃在华为、腾讯、阿里、京东等公司的数据库核心研发人员，有很多专家、技术骨干，都是出自人大金仓、武汉达梦、神舟通用、南大通用等公司，从他们身上，我们可以看到NDBC四十年前点燃的星火、四十年里培养浇灌的树苗，现在已经成才，成为国内数据库研发的骨干栋梁。&lt;/p&gt;
&lt;p&gt;NDBC，四十年里，一直在深深地影响着中国的数据库界。NDBC用团结、执着、和谐、潇洒的优良学术文化，熏陶出了一批又一批的具有国际视野、脚踏实地的人才队伍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/66c000016112c0864b4e&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;中国在数据库三大顶级会议发文章数量图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/66c1000092b019326272&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;分布式数据库等书籍封面图&lt;/p&gt;
&lt;h2&gt;3.2 春天里的数据库&lt;/h2&gt;
&lt;p&gt;数据库行业，又迎来了一个春天。春天里，百花开，众多的数据库产品、研发团队、数据服务团队在2017充满生机，各自芬芳。&lt;/p&gt;
&lt;h3&gt;3.2.1 百花齐放的数据库技术大会&lt;/h3&gt;
&lt;p&gt;越来越多的技术人，或专心数据库学术研究，或投身于数据库产品开发，各数据库技术大会在这样的背景下产生，为喜爱和从事数据库研究的技术人提供了交流、提高的平台。&lt;/p&gt;
&lt;p&gt;国内规模较大的数据库学术会议有中国数据库技术学会(NDBC)和中国大数据技术大会(BDTC)：&lt;/p&gt;
&lt;p&gt;中国数据库技术学会(NDBC)：自1977年至今，拥有四十年历史。始终秉承为大陆、港、澳、台和海外华裔数据库研究者、开发者和用户提供大中华数据库论坛，交流成果经验，探讨挑战问题和研究方向的宗旨。近年来，更吸引了海外数据库研究者、开发者投稿和参会。&lt;/p&gt;
&lt;p&gt;中国大数据技术大会(BDTC)，前身是Hadoop中国云计算会议，由中国计算机学会主办，大会内容涵盖数据库、大数据云服务、机器学习和深度学习、知识图谱、区块链等方方面面，是国内最具影响力、规模最大的大数据领域技术盛会。&lt;/p&gt;
&lt;p&gt;国际的学术会议在国内召开：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;DASFAA 2017(The 22nd International Conference on Database Systems for Advanced Applications)，2017年3月在中国苏州召开。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The Asia Pacific Web (APWeb) 和 Web-Age Information Management (WAIM) Joint Conference：2017年6月在北京召开。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;工业界规模较大的数据库技术大会，有中国数据库技术大会(DTCC)，Oracle数据技术大会，中国MySQL用户组年会(ACMUG)和MySQL技术嘉年华(IMG)，PostgreSQL中国用户大会(PCC)等：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;7&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;中国数据库技术大会(DTCC)：2017年DTCC吸引5000多名IT人士参会，是国内影响力最大的数据库技术大会，主题涵盖Oracle、MySQL、NoSQL、云端数据库、智能数据平台、区块链、数据可视化、深度学习等领域的前瞻性话题与技术。为数据库人群、大数据从业人员、广大互联网人士及行业相关人士提供最具价值的交流平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Oracle数据技术大会：2017年11月在北京召开，吸引了千人以上参会交流。拥有高质量、高新尖、高专业的特点，邀请业内顶尖的技术专家、企业客户、分享数据领域内的最新技术进展和实践。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;中国MySQL用户组(ACMUG)年会、MySQL技术嘉年华(IMG)：中国MySQL技术领域两朵花，在2017年12月的同一天，各自在北京和上海绽放。前者国际化意味浓厚，后者追求分享的质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;PostgreSQL中国用户大会(PCC)：是一场汇聚各界PostgreSQL大拿交流最新技术动态和应用案例的盛宴，推动了PostgreSQL在中国的发展，也起到了联系PG中国社区和国外社区的作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这一年，我们还看到，其他的社区活动也精彩不断，CockroachDB社区成立，Redis、HBase等社区活动开展，这些活动为中国工程界的数据库技术增添了亮色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3.2.2 百舸争流的数据库产品&lt;/h3&gt;
&lt;p&gt;一 .传统的数据库产品&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;人大金仓(Kingbase)：2017年8月，KingBaseES通用型数据库产品，成功入驻阿里云市场，具备适应当下云计算环境的数据库特征。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;达梦数据库(DM)：2017年，DM与多省展开合作，为四川地质环境信息建设、广西电子政务等提供数据库服务&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;南大通用(GBASE)：2017年3月，旗下的通用型数据库登录青云App Center2.0平台，提供云化数据库服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;二. 分布式数据库&lt;/p&gt;
&lt;p&gt;国内分布式数据库的代表有腾讯分布式数据库TDSQL、阿里云(DRDS)、OceanBase、TiDB等，这些产品代表了国内分布式数据库的水平：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;11&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;腾讯分布式数据库TDSQL：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;一款企业级面向金融类业务的数据库产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支撑了腾讯自己的计费业务。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;输出到诸如微众银行等企业，稳定运行了三年之久。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;2017年发布了分布式事务、分布式JOIN、多种数据分区、多级数据分区、热点更新等特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;阿里数据库产品家族：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;云栖大会前夕，推出新一代高性能数据库PolarDB、X-Cluster等，均采用分布式存储引擎设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;OceanBase，2017年发布1.4.51版本，提供了副本只读、前后端协议checksum机制、同义词功能和回收站等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TiDB：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;与腾讯云和Ucloud先后达成合作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;发布GA版(TiDB 1.0)，对MySQL兼容性、SQL优化器、系统稳定性、性能等做了大量工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;硅谷Office落地，此举标志着PingCAP进一步在全球布局云计算产业。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SequoiaDB：&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;SequoiaDB 发布v2.8.3企业版。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;3.2.3 百马奔腾的数据库研发团队&lt;/h3&gt;
&lt;p&gt;从萨师煊老师起步，中国数据库已经有了四十年的历史。&lt;/p&gt;
&lt;p&gt;现如今，国内的数据库研发队伍已经颇具规模。&lt;/p&gt;
&lt;p&gt;从拥有200余人规模的阿里数据库技术团队（阿里云、蚂蚁金服和阿里集团数据库事业部），到人数300+的“中国最神秘研究基地”——华为2012高斯实验室，以及腾讯的TEG金融云、腾讯云，百度的搜索架构团队，京东的京东云等，国内数据库研发无不展现出一派生机勃勃的景象。&lt;/p&gt;
&lt;p&gt;这些研发队伍，不仅积极为开源社区添砖加瓦，也大力投入自主研发。&lt;/p&gt;
&lt;p&gt;在此，让我们罗列一下已知的数据库引擎研发团队（尚不完整…），与他们一起见证国产数据库研发的繁荣，也让我们思考一下繁荣的背后，为什么我们还没有世界级产品?&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;11&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;大型通用数据库系列：人大金仓、达梦、神州通用、南大通用&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;腾讯系：TDSQL、TXSQL、Tbase、PhxSQL&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;阿里系三个团队：阿里巴巴集团数据库事业部、阿里云、Oceanbase&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;其他互联网：京东云、百度、小米&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;华为系三个团队：2012高斯、2012分布式实验室、华为云（IT企业产品线）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;DB2中国研发团队（曾经的存在）、EsgynDB中国团队、国家电网、中国移动苏州研究院、中国电信广州团队（尚存在否？）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;NewSQL系列：PingCAP、巨杉&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;PostgreSQL系：亚信南京AntDB、中兴GoldenDB 、Greenplum中国团队、飞象&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;MySQL系列：爱可生、上海热璞、万里开源、MySQL中国区研发成员、OneSQL&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;分析型系列/大数据系列：柏睿数据RapidsDB、酷克数据、偶数科技、Kylin创业团队Kyligence、星环科技&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Informix系列：华胜信泰、福建星瑞格、南大通用（重复）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;其他：Haisql、Highgo db、许继集团SG-RDB、Cedar、上容、天曦TXDB、HHDB、博阳数据管理系统、东方国信、优炫云数据库、新华三、鼎天盛华、Open base、Huayisoft、HUABASE等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;3.3 双11，源自中国的需求大于技术突破的意义&lt;/h2&gt;
&lt;p&gt;每年电商双11大促，中国单一群体的巨量行为（同一文化氛围下的同一种行为相较世界其他民族，有着不可预估的量，是不可预估的群体行为），对阿里、京东等电商的数据库团队都是一次巨大考验。&lt;/p&gt;
&lt;p&gt;经过9年的发展，双十一场景对数据库的稳定性、性能提出非常高的要求，尤其是零点高峰，无论国内国外，都是难得一见的。&lt;/p&gt;
&lt;p&gt;面对交易洪流，阿里集团的数据库扛住一波波洪峰，阿里的OceanBase扛住了交易洪峰，整个阿里交易创建峰值32.5万笔/秒，支付成功峰值25.6万笔/秒，数据库处理峰值4200万次/秒。而京东的交易，也是一路攀升。这些成绩、支撑业务发展的幕后英雄之一是数据库技术。&lt;/p&gt;
&lt;p&gt;双11的成绩，宣告的不仅是商业的胜利，也不仅是数据库技术获得“巨大”突破的胜利（技术的进步有待探讨），而是中国式需求对数据库技术提出的场景考验，这种场景的考验将持续不断地对数据库技术发出新的考题，促使在中国做数据库研发的技术人员“被迫”进步，数据库技术“被迫”创新。互联网场景将引发多行业的创新场景，也许正是国产数据库单点突破所在。&lt;/p&gt;
&lt;h2&gt;3.4 TiDB，国内开源界的一抹亮色&lt;/h2&gt;
&lt;p&gt;这一年，成立近3年的TiDB，亮点颇多（2017年10月份发布了GA V1.0版本、还提供了TiSpark查询方案），已然成为国内鲜有的数据库原创开源代表，甚至在国际上赢得颇多赞许（GitHub stars 11000+, contributors 155+，媲美CockroachDB）。&lt;/p&gt;
&lt;p&gt;TiDB是 PingCAP 公司自主开发的开源分布式数据库产品，模型参考了 Google 的分布式数据库论文(Spanner / F1)，解决了关系型数据库水平扩展的难题，具备水平弹性伸缩，强一致的分布式事务，基于 Raft 算法的多副本复制等特性。作为一个典型的 SQL Above NoSQL 的架构，TiDB底层是一个支持跨行事务和强一致性的分布式 KV 存储引擎，上层是支持SQL 语法和查询的分布式执行引擎，这种存储和计算分层的架构具有更好的灵活性，可以根据不同的业务负载做弹性的水平伸缩。&lt;/p&gt;
&lt;p&gt;从使用者角度来看，TiDB 高度兼容 MySQL 协议，在大多数情况下，应用层不需要修改一行代码，就可以获得支持高并发的扩展能力，同时支持智能的数据调度和故障自恢复功能，用户迁移和维护成本都会非常低。&lt;/p&gt;
&lt;p&gt;未来，TiDB 会在数据库云的多租户和资源隔离、高效实时的查询分析引擎、新硬件下的新技术架构优化、完善智能的调度系统、HTAP等方面发力，为用户带来更多的价值。&lt;/p&gt;
&lt;p&gt;因为有了OceanBase、TDSQL等，有了TiDB，国内数据库界有了“创新”的味道，而TiDB开源可能会使更多的人多方面受益，相较于一些产品从开源到闭源，这一点更有意义。&lt;/p&gt;
&lt;h2&gt;3.5 立言，原创有深度&lt;/h2&gt;
&lt;p&gt;一个领域内的图书出版量和销售量，往往能反映该领域的发展态势。&lt;/p&gt;
&lt;p&gt;一个领域内的出版的图书的质量，往往能反映该领域的深入程度。&lt;/p&gt;
&lt;p&gt;让我们先来看看近几年国内几家出版社的数据库类图书出版量（如下图8），可以发现，数据库类图书虽然在总出版量中占比不大，但还是有逐年上升的趋势，这其中大数据与数据分析类图书占据了相当大一部分，而数据库理论类图书则较低迷。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/66bf0001c5573ea96dd0&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;2013-2017数据库类图书出版量统计图&lt;/p&gt;
&lt;p&gt;再来看看数据库类图书的销售情况。线上销售以亚马逊销售排行榜为例，截至2017年12月，在数据库类实时销售排行榜中，top3分别为《大数据时代:生活、工作与思维的大变革》、《SQL必知必会（第四版）》和《深入浅出数据分析》，而数据库理论类图书中仅《数据库索引设计与优化》与《数据库系统概念》两本跻身top10。这一现象在线下销售中得到了更充分的体现。以新华书店为例，在2017年11月份数据库技术类畅销榜中，大数据与数据分析类图书抢占了top10全部席位，即便是top20中也难得一见理论类图书的影子。&lt;/p&gt;
&lt;p&gt;这难道是数据库领域已经不需要理论知识扎实的人才了么？其实不然。在数据库行业中，刚入门的新手渴求的是一本涵盖全面的工具书，对理论类图书大都是望而却步；而已经摸爬滚打十几年的老手们，凭借丰富的经验和阅历，足以满足企业研发所需，自然就不需要这方面的书了，所以数据库理论类的书籍较少。&lt;/p&gt;
&lt;p&gt;入门菜鸟希望得到老鸟的经验，国内的图书基本满足了入门的需要。&lt;/p&gt;
&lt;p&gt;经验丰富的老鸟希望深入原理、深入代码让自己百尺竿头更进一步，可是这方面的书籍太少。&lt;/p&gt;
&lt;p&gt;国内数据库原创书籍，深入到原理和源码层面的，经典的有《MySQL技术内幕：InnoDB存储引擎》、《PostgreSQL数据库内核分析》、《数据库查询优化器的艺术》这几本书，极高的质量和极佳的口碑为中国数据库界增色不少。&lt;/p&gt;
&lt;p&gt;而2017年出版的数据库图书中，《MySQL运维内参：MySQL、Galera、Inception核心原理与最佳实》销量较好，《数据库事务处理的艺术：事务管理与并发控制》一书则直接深入到数据库最核心的技术——事务处理层面讨论了并发访问控制等核心技术，这种有深度的书籍折射出国内数据库研发的水准在向最核心部分攀登前进。&lt;/p&gt;
&lt;p&gt;站在2017年尾，数据库界更加期盼，未来有更多高质量有深度的数据库原创书籍，来推高国内数据库研发、运维的水准。因为我们看到，国内数据库研发的团队在日渐兴旺。&lt;/p&gt;

&lt;p&gt;本篇是发生在2017年的小故事，故事的选取，有一定的随机性，未必能代表数据库界的整体情况。放在这里，我们希望能通过研发、运维这么几朵小小的浪花，折射几点太阳的光辉。&lt;/p&gt;
&lt;h2&gt;4.1 盖老师深度思考的浪花&lt;/h2&gt;
&lt;p&gt;Oracle 18c，是一个时代的终结。这是盖国强老师在2017年的的感悟。&lt;/p&gt;
&lt;p&gt;2017年10月1日，盖国强老师在旧金山OOW大会现场，感受了Larry Ellison发布Oracle Database 18c产品的盛况，18c被称为数据库领域的第一个自治产品，能够实现自我驱动、自我安全和自我修复，事实上就是最大程度的减少了人工的参与。&lt;/p&gt;
&lt;p&gt;业界在感叹技术进步的同时，也存在一股淡淡的忧虑和哀伤，因为一个重要的岗位 - DBA可能不再重要，或者不再被需要。&lt;/p&gt;
&lt;p&gt;而事实上，盖老师认为更重要的变化是18c这个版本，从12c到18c，Oracle公司改变了数据库的命名策略，以后每年都将发布一个以年为单位的版本，例如19c，20c，这，意味着一个时代的终结。&lt;/p&gt;
&lt;p&gt;传统的商业软件迭代，通常以数年为单位，研发一个目标明确、更新众多的发布版本，而这种方式在快速变化的互联网时代，已经过时，用户习惯了快速看到新的变化、快速感受、快速试错，从产品研发到产品发布，一切都在加速，显然Oracle的这一变化就是在适应时代，期望以快速的迭代降低让用户长时间等待的风险。其实无独有偶，微软也已经宣布Windows 10将是最后一个版本，同样改变了重量级大版本的发布模式，变革为小版本快速革新。传统大规模商业软件的运作方式正在改变，Oracle和微软都在通过云平台去重构两家公司的产品输出形态，当一切都可以通过服务的形态输出之后，商业和开源的界限事实上就已经不存在了。&lt;/p&gt;
&lt;p&gt;基于此，盖老师在思考：在企业级数据库领域，下一个时代是什么？&lt;/p&gt;
&lt;p&gt;盖老师认为下一个时代是自动化、智能化的时代，从靠人去解决问题，过渡到靠产品、靠架构去解决问题，让数据库回归存储的本质，新的时代已经开启。&lt;/p&gt;
&lt;p&gt;这是一朵深度思考的浪花，浪花背后是对产业前进之路的探索。&lt;/p&gt;
&lt;h2&gt;4.2 向MySQL提交bug的小浪花&lt;/h2&gt;
&lt;p&gt;2017年9月，鹅厂实习生晓宇同学向MySQL官方提交了BugID为87637的一个有关缓冲区刷脏页时消耗CPU资源严重的性能bug，并给出一个解决了涵盖多种场景下消耗CPU的patch。&lt;/p&gt;
&lt;p&gt;Bug hunter并未重视这个有场景描述有代码分析有测试数据的bug，反而修改bug状态为“not a bug”，晓宇同学在bug被标识为“not a bug”后，有理有据地指出bug的成因、patch的原理等，然后有礼貌地再次打开bug，请MySQL官方重视。这样的过程，反反复复，反反复复，竟然反复了五次。直到一个月之后，持久的争执引起InnoDB研发老大Sunny Bains的关注，Sunny Bains认同了晓宇同学的patch，这场拉锯战才宣告结束。&lt;/p&gt;
&lt;p&gt;现在，这朵小浪花已经随潮而去，但是这么一朵小小浪花，却能折射出较大的意义：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;国内研发人员的素养和MySQL官方的傲慢形成了对比。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;当世界并没有足够重视国内数据库技术研发的力量时，我们可以用实力说明事实。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;现如今，我们还需要积极参与开源社区，提交Bug与patch，甚至提交有影响力的模块/WorkLog，这样才能逐步扭转“国内数据库尚未被国际认可，尚不达先进水平，发展尚任重道远”这样的现状。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在采访这个小故事结束时，晓宇所在团队TDSQL研发负责人说：TDSQL源自MySQL，我们鼓励TDSQL的组员为社区多做贡献。晓宇的这个故事，是我们团队的一个小事，相信更是中国数据库界的一个小事，但是勿以善小而不为，积善助善为这个世界多做一点好事是有意义的。&lt;/p&gt;
&lt;p&gt;这，应该是一种情怀吧。&lt;/p&gt;
&lt;h2&gt;4.3 规范运维的小浪花&lt;/h2&gt;
&lt;p&gt;数据库运维中会制定各种流程和规范，很多运维同学不以为意，觉得太繁琐，殊不知这些都是在大量的失败经验中总结而来，是运维保障的基石。&lt;/p&gt;
&lt;p&gt;让我们用发生在建荣同学身边的一个故事，一起感受DBA的生活。&lt;/p&gt;
&lt;p&gt;公司每隔一段时间会发布一些活动，来提高人气和热度。&lt;/p&gt;
&lt;p&gt;而发布一个活动的常规流程是这样的：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;开发同学提交了一个DB变更，会打包发布到了ftp中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;DBA会从ftp得到指定的数据压缩包，解压把数据导入数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;测试同学会验证测试，验证后上线活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;业务运营的同学会跟进活动，做活动反馈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;结果有一次却发生了一个诡异的问题。&lt;/p&gt;
&lt;p&gt;活动已经接近尾声，运营的同学才发现数据比以往差了很多，然后测试的同学排查发现导入的数据比预期的少，然后追查到DBA这边，DBA发现数据导入是成功的，然后继续追根溯源，发现开发同学提供的数据更新包和DBA导入的包大小不一致。&lt;/p&gt;
&lt;p&gt;经过一番排查和验证，发现原因就在于开发同学上传到ftp中的文件因为网络的原因，提示上传成功了，但是文件是不完整的，DBA解压的时候就少了很多数据，后续测试，运营跟进活动都会受到影响。&lt;/p&gt;
&lt;p&gt;我们做故障复盘的时候，发现虽然整个流程是完整的，但是很多环节还是没有形成闭环。&lt;/p&gt;
&lt;p&gt;怎么改进呢？&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第一就是使用md5的校验码，能够做到文件校验。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第二就是通过平台化管理来杜绝人为问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第三就是业务的及时跟进。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以说很多问题都不是纯粹的技术问题，要靠一套完整的制度和流程来规范和完善，规范本身虽不能够解决问题，但是能够减少出问题的概率。&lt;/p&gt;

&lt;p&gt;随着云计算产业的发展，数据库云化趋势已经形成，而云化对大规模的数据库群、数据库集群等的运维提出挑战，于是数据库智能运维因需而生，而Oracle在AI火热的环境下，用自治数据库一举点燃了本年度数据库燃爆点。自治数据库已经不再是自动运维的数据库，而是智能运维的云端数据库。&lt;/p&gt;
&lt;p&gt;总结2017，我们看到的不仅仅有技术的创新，也有国内公司在国际化背景下主动出海寻航的思维变革，还有技术沉淀之下的有深度的技术书籍的出版，更有引领中国数据库技术发展的四十华诞的NDBC，这些，都在提高着国内数据库技术的质量，增强了中国数据库技术在世界的影响力，使之上升、使之前进。&lt;/p&gt;
&lt;p&gt;但是，国内数据库的发展，依旧有很多不足，正视不足，中国数据库将轻装前行，且快且稳、不断创新。&lt;/p&gt;
&lt;h2&gt;5.1 2017，前行中有很多不足&lt;/h2&gt;
&lt;p&gt;2017这一年，数据库界热闹的背后，不足更甚。浮光掠影，采摘一小点儿，权作纪念，莫负了这春光里美景。&lt;/p&gt;
&lt;h3&gt;5.1.1 浮夸之风日盛&lt;/h3&gt;
&lt;p&gt;跟跑作为事实，使得很多人渴望突破，这本是好事。&lt;/p&gt;
&lt;p&gt;而国内的一些媒体和自媒体在产品或成果的宣介上，往往用词宏大，举轻若重，笑话不断。如“事务的核心是锁和并发”、“破解世界性技术难题！&lt;/p&gt;
&lt;p&gt;XXX让分布式事务简单高效”等宣讲词，前者对事务的理解不到位，封锁机制是并发控制的技术之一，锁和并发并不能在此语境下处于同等地位；后者则更是夸大其词，夸张的词语之后显露出一颗浮躁的心。&lt;/p&gt;
&lt;p&gt;这样的错误或极其夸大的词在公众中传播，危害甚大。技术来不得半点儿虚假，踏踏实实做技术，如实地说明成绩，以求实为本才是技术人员的本质。&lt;/p&gt;
&lt;p&gt;在2018，期望：数据库界求实地回归技术，回归技术人员的朴实。&lt;/p&gt;
&lt;h3&gt;5.1.2 借东风片面式宣传日盛&lt;/h3&gt;
&lt;p&gt;在这一年，还广为流传过一篇文章《中国数据库四十年历史》，文章借中国数据库发展四十年的时节，借助萨师煊老师的名，宣传了个别公司、个别人。文章以“中国数据库四十年历史”为大背景，涵盖范围却极其有限，用意十分明显且可笑。&lt;/p&gt;
&lt;p&gt;如果熟知中国数据库发展历程，可以看到作者一知半解的数据库知识和数据库历史，很好地在其文、其图中暴露。&lt;/p&gt;
&lt;p&gt;中国数据库技术的发展，源于高校的老专家们、兴于高校科研力量数代的师徒传承，之后才演化出各种研发、运维的力量。&lt;/p&gt;
&lt;p&gt;现在，貌似部分团队做数据库红红火火，但是数据库前辈专家和师徒传承才是根之所在，干之所撑，才有众多团队之花汲养而开；更为本质的，是国内尚没有一个团队真正掌握数据库核心技术、更不用谈有真实的创新之举。&lt;/p&gt;
&lt;p&gt;当我们在讲述自己成绩的时候，应该把自己放到历史的环境当中，放到世界的范围内，寻找到自己的位置，客观地加以描述，方能正确地自我评价。&lt;/p&gt;
&lt;p&gt;德国前总理勃兰特有一句名言：“谁忘记历史，谁就在灵魂上有病”。如果只能看到自己的一点点成绩，蜡烛之光便会变成太阳，尼采便会再生。&lt;/p&gt;
&lt;p&gt;所以，我们需要看到业界的不足，继续倡导求实之风。&lt;/p&gt;
&lt;h3&gt;5.1.3 自说自话的背后&lt;/h3&gt;
&lt;p&gt;2017年12月13日，一个值得纪念的事情，是中国有三家数据库产品进入Gartner的数据库行业报告，这是个喜事，于三家入围的公司形象有益。这也是个好事，代表着国产数据库厂商在商业意识上有所“突破”，入围Gartner的行业报告，毕竟入选需要资金的支持。&lt;/p&gt;
&lt;p&gt;对国产数据库入围，不管花钱与否，可以肯定的是，主动宣传推荐而不夸大不误导是正解所在。&lt;/p&gt;
&lt;p&gt;2017年，国内数据库产品热闹非凡的同时，我们依旧看不到有团队公开自家产品的TPC-C、TPC-H、TPC-D等验证方案以及结果数据。一方面传奇般地宣称自家产品的神奇，另一方面又对一些公认的标准三缄其口、不与国际接轨，这也是一种特色。更有甚者，用Sysbench的部分测试场景而展示特定场景下的特定测试数据，因场景特定而貌似很好的测试数据蒙蔽了大众的眼。&lt;/p&gt;
&lt;p&gt;这些行为，实是不该。&lt;/p&gt;
&lt;p&gt;我们认为，营造一个诚信、诚实的行业范围，是很必要的。如果我们有实力真正做到了世界前列，相信未来必是：你若盛开蝴蝶自来。&lt;/p&gt;
&lt;h3&gt;5.1.4 人才的匮乏&lt;/h3&gt;
&lt;p&gt;国产数据库引擎的研发，貌似数据库研发团队众多，但人才寥寥，所以我们能够感受到跟跑的步伐而不是并跑，能看到产品发布的速度慢而新特性不多，能够看到产品的相似度高是因缺乏创新没有深度人才。&lt;/p&gt;
&lt;p&gt;国产数据库研发，没有大师，只有普通或略微好一点的工程师。真正的大师，不是十年、二十年就能修炼而得的。在数据库这个行业中，内外兼修，坐得了冷板凳者，才有望成为大师。&lt;/p&gt;
&lt;p&gt;而略微好一点的工程师的定义是：基本能独立承担模块的研发。&lt;/p&gt;
&lt;p&gt;搞定个别问题，与掌握数据库内核的核心技术，相距甚远。莫让他人浮躁的言语荼毒坏了听者的耳力。&lt;/p&gt;
&lt;p&gt;人才匮乏，这在很长一段时间内，是一个客观存在。&lt;/p&gt;
&lt;h2&gt;5.2 2018，我们清楚方向在哪里，但需要加速前行&lt;/h2&gt;
&lt;h3&gt;5.2.1 AI对数据库的影响&lt;/h3&gt;
&lt;p&gt;数据库技术的发展，是一个众多技术集成的过程，数据库把编译原理、操作系统等众多技术“集合”在一起，开创了自己的时代。其特点是不断融合新技术到数据库体系内，让业务开发简化。所以，数据库融合人工智能技术，也将是一个趋势。目前，我们可以看到AI将对数据库技术的发展，产生较大影响，比如：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;现有数据库系统的调优，严重依赖DBA的经验。将人工智能应用于数据库调优，可以花费最低的人力，实现数据库最高的效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;现有的数据库系统，须严格遵循语法才能使用。利用自然语言处理技术，用户可以使用自然语言描述查询，经由Query Interface翻译为SQL语法，大大降低用户的学习难度。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;自数据库诞生以来，查询优化始终作为一大研究问题。目前查询优化，只能依靠数据库专家的经验，人工智能技术，能够帮助更广泛地应用查询优化技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;人工智能的技术，能极大地推动数据挖掘的发展，更充分地利用数据库中存储的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;人工智能究竟对数据库有多少益处，不能穷举。但肯定的是，不论是数据库开发还是数据库使用，人工智能都会帮助数据库技术获得长足的进步（除了功能外，架构方面的颠覆可能更甚），且AI技术会不断集成到数据库当中。&lt;/p&gt;
&lt;h3&gt;5.2.2 硬件对数据库的影响&lt;/h3&gt;
&lt;p&gt;云平台对于特定的硬件，可以进行定制。由于云数据库发展迅速，因此可以忽略一部分硬件对数据库的影响。但是，这不代表着硬件将不再会对数据库产生影响。&lt;/p&gt;
&lt;p&gt;相反，硬件技术的发展，对数据库带来的影响，依旧可能是革命性的。如图8所示，我们借用鹅厂内部的一次分享的页面，用NVM等对数据库产生的影响简述如下，一切尽在图之外……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/66be0001da4ae8473148&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;pgc-img-caption&quot;&gt;关系数据库的未来展望-硬件技术图&lt;/p&gt;

&lt;p&gt;写到这里的时候，也该收尾了，一篇冗长而又缺乏喜感还敢说诸多不足的杂文，在一个偌大的背景下以区区万字就想回顾2017实在是螳臂当车之举。就让这些挂一漏万且还惹人烦的言语随着2017远去吧。&lt;/p&gt;
&lt;p&gt;轻轻的，你挥一挥衣袖，作别2017的浮云。&lt;/p&gt;
&lt;p&gt;默默的，你站在2018起头的日子，重重地撸起袖子，低下头去，在实践中求实，口里念叨着我尚不明白的一些词语：YugaByte、BigChainDB、Learned Index……&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;[1] 参考《High performance transactions in deuteronomy》&lt;/p&gt;
&lt;p&gt;[2] 《Bigtable: A Distributed Storage System for Structured Data》&lt;/p&gt;
&lt;p&gt;[3] 《Spanner: Becoming a SQL System》：Spanner is built on ideas from both the systems and database communities.&lt;/p&gt;
&lt;p&gt;[4] 详情参见《数据库事务处理的艺术：事务管理与并发控制》6.3.4节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;转载声明：转自 《程序员》 杂志 2018年 第一期，本文为《程序员》原创文章，未经允许不得转载，更多精彩文章请订阅《程序员》。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0.77884615384615&quot;&gt;
&lt;p&gt;相关阅读：&lt;/p&gt;
&lt;p class=&quot;com-article-panel-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1047240&quot; target=&quot;_blank&quot;&gt;数据库读写分离架构，为什么我不喜欢&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;com-article-panel-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1045217&quot; target=&quot;_blank&quot;&gt;使用orm框架，必须迁就数据库的设计吗？&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;com-article-panel-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1045182&quot; target=&quot;_blank&quot;&gt;移花接木：当泛型方法遇上抽象类----我的“内存数据库”诞生记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p class=&quot;com-article-panel-title&quot;&gt; &lt;/p&gt;
&lt;p&gt;此文已由作者授权云+社区发布，转载请注明&lt;a href=&quot;https://cloud.tencent.com/developer/article/1047725&quot; target=&quot;_blank&quot;&gt;文章&lt;/a&gt;出处&lt;/p&gt;
</description>
<pubDate>Thu, 01 Mar 2018 03:53:00 +0000</pubDate>
<dc:creator>云加社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8487742.html</dc:identifier>
</item>
<item>
<title>如何通过以太坊智能合约来进行众筹（ICO） - Tiny熊</title>
<link>http://www.cnblogs.com/tinyxiong/p/8487348.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tinyxiong/p/8487348.html</guid>
<description>&lt;p&gt;前面我们有两遍文章写了如何发行代币，今天我们讲一下如何使用代币来公开募资，即编写一个募资合约。&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;本文所讲的代币是使用以太坊智能合约创建，阅读本文前，你应该对以太坊、智能合约有所了解，如果你还不了解，建议你先看&lt;a href=&quot;https://learnblockchain.cn/2017/11/20/whatiseth/&quot;&gt;以太坊是什么&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;众筹&quot;&gt;众筹&lt;/h2&gt;
&lt;p&gt;先简单说下众筹的概念：一般是这样的，我一个非常好的想法，但是我没有钱来做这事，于是我把这个想法发给大家看，说：我做这件事需要5百万，大家有没有兴趣投些钱，如果大家在30天内投够了5百万我就开始做，到时大家都是原始股东，如果募资额不到5百万，大家投的钱就还给大家。&lt;/p&gt;
&lt;p&gt;现在ICO众筹已经被各路大佬拿来割韭菜而被玩坏了（不管有无达标，都把钱卷走）。&lt;/p&gt;
&lt;p&gt;其实区块链技术本事非常适合解决众筹的信任问题，借助于智能合约，可以实现当募资额完成时，募资款自动打到指定账户，当募资额未完成时，可退款。这个过程不需要看众筹大佬的人品，不用依靠第三方平台信用担保。&lt;/p&gt;
&lt;h2 id=&quot;代币&quot;&gt;代币&lt;/h2&gt;
&lt;p&gt;传统的众筹在参与之后通常不容易交易（参与之后无法转给其他人），而通过用代币来参与众筹，则很容易进行交易，众筹的参与人可随时进行买卖，待众筹项目实施完成的时候，完全根据代币持有量进行回馈。&lt;/p&gt;
&lt;p&gt;举个例子说明下，大家会更容易理解，有这一个众筹：A有技术做一个能监测健康的指环，为此向公众募资200百万，募资时100块对应一个代币，约定在指环上市之后，代币的持有人可以用一个代币来兑换一个指环。而指环的研发周期是一年，因此在指环还未上市的一年里，众筹的参与人可以随时交易所持有的代币。&lt;/p&gt;
&lt;h2 id=&quot;众筹智能合约代码&quot;&gt;众筹智能合约代码&lt;/h2&gt;
&lt;p&gt;接下来就看看如何实现一个众筹智能合约。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
pragma solidity &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.4.16&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; token &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;transfer&lt;/span&gt;(address receiver&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; uint amount)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

contract Crowdsale &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    address &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; beneficiary&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 募资成功后的收款方&lt;/span&gt;
    uint &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; fundingGoal&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 募资额度&lt;/span&gt;
    uint &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; amountRaised&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 参与数量&lt;/span&gt;
    uint &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; deadline&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// 募资截止期&lt;/span&gt;

    uint &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; price&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//  token 与以太坊的汇率 , token卖多少钱&lt;/span&gt;
    token &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; tokenReward&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 要卖的token&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;mapping&lt;/span&gt;(address &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; uint256) &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; balanceOf&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    bool fundingGoalReached &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 众筹是否达到目标&lt;/span&gt;
    bool crowdsaleClosed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//  众筹是否结束&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 事件可以用来跟踪信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    **/&lt;/span&gt;
    event &lt;span class=&quot;at&quot;&gt;GoalReached&lt;/span&gt;(address recipient&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; uint totalAmountRaised)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    event &lt;span class=&quot;at&quot;&gt;FundTransfer&lt;/span&gt;(address backer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; uint amount&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; bool isContribution)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 构造函数, 设置相关属性&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Crowdsale&lt;/span&gt;(
        address ifSuccessfulSendTo&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        uint fundingGoalInEthers&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        uint durationInMinutes&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        uint finneyCostOfEachToken&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        address addressOfTokenUsedAsReward) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            beneficiary &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ifSuccessfulSendTo&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            fundingGoal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fundingGoalInEthers &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; ether&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            deadline &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; now &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; durationInMinutes &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; minutes&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            price &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; finneyCostOfEachToken &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; finney&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            tokenReward &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;token&lt;/span&gt;(addressOfTokenUsedAsReward)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 传入已发布的 token 合约的地址来创建实例&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 无函数名的Fallback函数，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 在向合约转账时，这个函数会被调用&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () payable &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;crowdsaleClosed)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        uint amount &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        balanceOf[&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; amount&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        amountRaised &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; amount&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;tokenReward&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;transfer&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; amount / price)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;FundTransfer&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; amount&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    *  定义函数修改器modifier（作用和Python的装饰器很相似）&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 用于在函数执行前检查某种前置条件（判断通过之后才会继续执行该方法）&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * _ 表示继续执行之后的代码&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    **/&lt;/span&gt;
    modifier &lt;span class=&quot;at&quot;&gt;afterDeadline&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (now &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; deadline) _&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 判断众筹是否完成融资目标， 这个方法使用了afterDeadline函数修改器&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;checkGoalReached&lt;/span&gt;() afterDeadline &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (amountRaised &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; fundingGoal) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            fundingGoalReached &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;GoalReached&lt;/span&gt;(beneficiary&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; amountRaised)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        crowdsaleClosed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 完成融资目标时，融资款发送到收款方&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 未完成融资目标时，执行退款&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;safeWithdrawal&lt;/span&gt;() afterDeadline &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;fundingGoalReached) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            uint amount &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; balanceOf[&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            balanceOf[&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (amount &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;sender&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;send&lt;/span&gt;(amount)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;FundTransfer&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; amount&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    balanceOf[&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; amount&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (fundingGoalReached &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; beneficiary &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sender&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;beneficiary&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;send&lt;/span&gt;(amountRaised)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;FundTransfer&lt;/span&gt;(beneficiary&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; amountRaised&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//If we fail to send the funds to beneficiary, unlock funders balance&lt;/span&gt;
                fundingGoalReached &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;部署及说明&quot;&gt;部署及说明&lt;/h2&gt;
&lt;p&gt;在部署这个合约之前，我们需要先部署一个代币合约，请参考&lt;a href=&quot;https://learnblockchain.cn/2018/01/12/create_token/&quot;&gt;一步步教你创建自己的数字货币&lt;/a&gt;。&lt;/p&gt;
&lt;ol readability=&quot;8.3372894333844&quot;&gt;&lt;li readability=&quot;8.8121739130435&quot;&gt;
&lt;p&gt;创建众筹合约我们需要提供一下几个参数：&lt;br/&gt;ifSuccessfulSendTo： 募资成功后的收款方（其实这里可以默认为合约创建者）&lt;br/&gt;fundingGoalInEthers： 募资额度， 为了方便我们仅募3个ether&lt;br/&gt;durationInMinutes： 募资时间&lt;br/&gt;finneyCostOfEachToken 每个代币的价格, 这里为了方便使用了&lt;a href=&quot;https://learnblockchain.cn/2018/02/02/solidity-unit/&quot;&gt;单位finney&lt;/a&gt;及值为：1 （1 ether = 1000 finney）&lt;br/&gt;addressOfTokenUsedAsReward： 代币合约地址。&lt;br/&gt;如：&lt;br/&gt;&lt;img src=&quot;https://learnblockchain.cn/images/crowdsale_create.jpeg&quot;/&gt;&lt;br/&gt;本文使用的参数为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;0xc6f9ea59d424733e8e1902c7837ea75e20abfb49&quot;,3, 100, 1,&quot;0xad8972e2b583f580fc52f737b98327eb65d08f8c&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1.9356435643564&quot;&gt;
&lt;p&gt;参与人投资的时候实际购买众筹合约代币，所有需要先向合约预存代币，代币的数量为：募资额度 / 代币的价格 ， 这里为：3 * 1000/1 = 3000 （当能也可以大于3000）。&lt;br/&gt;向合约预存代币可以使用&lt;a href=&quot;https://www.myetherwallet.com/#send-transaction&quot;&gt;myetherwallet&lt;/a&gt;钱包，或在remix中重新加载代币合约，执行代币合约tranfer()函数进行代币转账。如使用myetherwallet转账如图：&lt;br/&gt;&lt;img src=&quot;https://learnblockchain.cn//images/crowdsale_send_token.jpeg&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;参与人投资行为即是向买众筹合约转账，转账时，会执行Fallback回退函数（即无名函数）向其账户打回相应的代币。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;safeWithdrawl() 可以被参与人或收益人执行，如果融资不达标参与人可收回之前投资款，如果融资达标收益人可以拿到所有的融资款。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;扩展&quot;&gt;扩展&lt;/h2&gt;
&lt;p&gt;上面是一个很正规的募资合约。接下来讲两个募资合约的扩展，如何实现无限募资合约及割韭菜合约。&lt;br/&gt;这部分内容独家发布在我的小专栏&lt;a href=&quot;https://xiaozhuanlan.com/blockchaincore&quot;&gt;区块链技术&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你在学习中遇到问题，欢迎到我的&lt;strong&gt;&lt;a href=&quot;https://t.xiaomiquan.com/RfAu7uj&quot;&gt;知识星球&lt;/a&gt;&lt;/strong&gt;提问，作为星球成员福利，成员可加入区块链技术付费交流群。&lt;/p&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://learnblockchain.cn/&quot;&gt;深入浅出区块链&lt;/a&gt; - 系统学习区块链，打造最好的区块链技术博客。&lt;/p&gt;
</description>
<pubDate>Thu, 01 Mar 2018 02:52:00 +0000</pubDate>
<dc:creator>Tiny熊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tinyxiong/p/8487348.html</dc:identifier>
</item>
<item>
<title>利用mock提高效率 - 无梦灬</title>
<link>http://www.cnblogs.com/dreamless/p/8487322.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dreamless/p/8487322.html</guid>
<description>&lt;p&gt;谈到mock，就不得不讲前后端分离。理想情况下前后端不分离，由全栈的人以product和infrastructure的维度进行开发，效率是最高的。近些年来业务的复杂度越来越高，真正的全栈人才极为难招，企业只能退而求其次，对开发进行分工细化，让每个人做自己最擅长的事，前端负责UI显示和交互，后端负责业务的逻辑、性能等，从而架构上达到更高的效率。同时由于分工的细化，导致前后端的沟通成本增加，代码的控制权通常在后端，一次小的修改可能导致前后端反复沟通，降低开发效率，就产生了前后端分离的方案。前后端分离通过约定好协议，使用约定的协议进行并行开发，将沟通最后阶段放在联调，节省了大量的时间。&lt;/p&gt;
&lt;p&gt;分离的表现主要是视图层的控制交给前端，对于一些偏应用类项目，使用ajax请求，前后端各负责自己的部分，直接达到分离状态，而一些展示类系统，受到seo和用户体验的影响，分离只能达到部分分离，如fis方案。不管是哪种状态的分离，都需要进行协议约定，以达到业务的并行开发。对于前端来说，开发的效果更多依赖于数据，想要最大程度的减少联调时间，就需要根据协议生成数据，这也就是mock的需求。&lt;/p&gt;
&lt;h2 id=&quot;使用mock开发流程&quot;&gt;使用mock开发流程&lt;/h2&gt;
&lt;p&gt;这里借用yapi的流程图（yapi表示mock服务）：&lt;br/&gt;&lt;img src=&quot;https://github.com/YMFE/yapi/raw/master/yapi-base-flow.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，前后端进行定制接口，定制完成后各自进行开发。前端的开发者使用mock数据进行开发，开发完成后进行真实环境的联调，找出开发中的问题，再进行测试、上线等流程。&lt;/p&gt;
&lt;h2 id=&quot;常用的mock方式&quot;&gt;常用的mock方式&lt;/h2&gt;
&lt;h3 id=&quot;代码层硬编码&quot;&gt;1. 代码层硬编码&lt;/h3&gt;
&lt;p&gt;直接数据写在代码中（或者独立的文件，代码中手动引入），修改代码跳过接口请求，直接使用数据。这种方式的最大问题是耦合性太强，业务代码中混杂了mock数据，每次正式提交都要保证代码数据指向是正确的，否则会产生神奇的结果。同时不是真正发出网络请求，和真实环境有差异。建议仅在没有其他方式的情况下才使用。&lt;/p&gt;
&lt;h3 id=&quot;代码中针对使用的ajax库拦截&quot;&gt;2. 代码中针对使用的ajax库拦截&lt;/h3&gt;
&lt;p&gt;这种方式分为拦截到本地和拦截到其他服务器。相较于硬编码，拦截式降低了mock数据和业务代码的耦合性，只需要引入拦截的代码，将请求转发至本地，至本地文件或其他服务器。这种方案的主要问题是需要针对代码使用的各种库进行定制插件，初期成本高；同时有部分的代码入侵，需要保证入库代码正确。&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;拦截至数据文件：&lt;br/&gt;最典型的是Mock.js。这种方式实现了自由编写数据，灵活性比较大，而且mock的数据文件可以同步至仓库中，下次开发时。缺点是同样非网络请求，真实性不足。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;拦截并改变请求：&lt;br/&gt;这种方式之所以出现是因为服务器的URL和本机的URL规则不同，需要按照规则进行转换。这种方式与真实情况比较接近，同时产生了跨域，需要服务端提供对应的header。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;为所有接口统一添加前缀&quot;&gt;3. 为所有接口统一添加前缀&lt;/h3&gt;
&lt;p&gt;这种方式在公用文件中直接添加接口前缀，依赖于特定的库功能（或者达到相同效果的代码结构）。同之前的拦截并改变请求类似，但更为简单一些，只改前缀就可以了，同样有代码入侵的问题。&lt;/p&gt;
&lt;h3 id=&quot;使用其他工具&quot;&gt;4. 使用其他工具&lt;/h3&gt;
&lt;p&gt;这种方式分为两种：使用本地或软件数据和代理转发&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;使用本地或软件数据：&lt;br/&gt;最常用的如：fiddler, charles, whistle等，可以将请求返回指定内容。主要问题是配置比较繁琐，所有操作都在本机，同步困难。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;代理转发：&lt;br/&gt;这种方式和真实环境极为接近，毕竟纯静态的文件，在服务端也是需要进行代理转发的。可使用的工具就比较多了，使用支持代理转发的开发工具，或者使用上面提到的工具，同样能够将数据转发出去。这种方式最大的优点是：无跨域、能发出真实请求、与业务代码完全隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;方案对比&quot;&gt;方案对比&lt;/h3&gt;
&lt;p&gt;对比以上几种方案，最优的选用代理转发方式，其次是代码拦截方式。拦截至数据文件有个优势就是可以将mock数据和仓库同步，但在不同分支开发时Mock数据可能会冲突。代理转发和拦截至服务器使用最方便，但它需要mockServer。只视开发情况而定。&lt;/p&gt;
&lt;h2 id=&quot;一些mock用工具&quot;&gt;一些mock用工具&lt;/h2&gt;
&lt;p&gt;mock的实现非常多，基本上每套完善的前端开发工具都是自带mock的机制。近几年随着nodejs的流行，前端可以非常方便的实现自己的mockServer，所以想列举出所有的还是很困难的，这里介绍一些知名字较高的工具。&lt;/p&gt;
&lt;h3 id=&quot;swagger&quot;&gt;1. swagger&lt;/h3&gt;
&lt;p&gt;在设计RESTFUL类型的API极为有用，它没有专门提供mock服务，但可以提供mock服务的server模板代码，可根据模板自行搭建mock-server。此外，还提供相关的API的JSON结构数据，配合相应的工具来实现类似的效果。&lt;/p&gt;
&lt;h3 id=&quot;mock.js&quot;&gt;2. Mock.js&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;地址：&lt;a href=&quot;https://github.com/nuysoft/Mock/tree/refactoring&quot; class=&quot;uri&quot;&gt;https://github.com/nuysoft/Mock/tree/refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;介绍：THX团队出品，本地文件编写mock数据规则，适用于代码库拦截，之前较为流行的一个方案，很多工具都集成了Mockjs语法，目前仓库已经不再更新。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;rap2&quot;&gt;3. rap2&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;地址：&lt;a href=&quot;https://github.com/thx/rap2-delos&quot; class=&quot;uri&quot;&gt;https://github.com/thx/rap2-delos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;介绍：同THX团队出品，是rap0.x的升级版本，使用了nodejs和关系数据库开发，兼容mock.js语法。界面比较简洁，交互友好，支持界面式编辑API。但URL设计与原URL不同，需要使用代码库拦截方式。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;apiary&quot;&gt;4. apiary&lt;/h3&gt;
&lt;h3 id=&quot;easy-mock&quot;&gt;5. easy-mock&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;地址：&lt;a href=&quot;https://easy-mock.com/&quot; class=&quot;uri&quot;&gt;https://easy-mock.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;介绍：搜车出品，rest api模拟，基于mockjs语法，能够从swagger生成简单数据。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;yapi&quot;&gt;6. yapi&lt;/h3&gt;
&lt;h2 id=&quot;rap2和yapi的一些对比&quot;&gt;rap2和yapi的一些对比&lt;/h2&gt;
&lt;h2 id=&quot;接入mockserver&quot;&gt;接入mockServer&lt;/h2&gt;
&lt;p&gt;有了各种极为方便使用的mockServer，想要接入就很简单了。mockServer的一般使用规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;URL相同，直接代理转发即可&lt;/li&gt;
&lt;li&gt;URL后半部分相同，直接加上URL前缀即可&lt;/li&gt;
&lt;li&gt;URL规则不同，或需要身份认证，需要拦截转发&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;拦截式&quot;&gt;拦截式&lt;/h3&gt;
&lt;p&gt;拦截式针对的是使用一些封装过的ajax库，比如jquery、axios，或者使用fetch库。实现的方式各有不同。如果使用的是支持拦截器模式（如axios），拦截代码就比较简单了，直接在拦截器中改变URL指向即可，指向mockServer或mockjs文件。见以下代码（以下代码是摘自rap或rap2等其他库）。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;wrapAxios&lt;/span&gt;(axios) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; oldRequest &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; routePassed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;axios&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (config) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; ROOT &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/mockjsdata/'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; projectId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; url&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      oldRequest &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; config)
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; config&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reject&lt;/span&gt;(error)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;va&quot;&gt;axios&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reject&lt;/span&gt;(error)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于一些不支持拦截器的，或者原生的方法fetch，通过覆盖的方式实现（&lt;a href=&quot;https://github.com/wenlonghuo/rap2-delos/blob/master/public/libs/fetch.rap.js&quot; class=&quot;uri&quot;&gt;https://github.com/wenlonghuo/rap2-delos/blob/master/public/libs/fetch.rap.js&lt;/a&gt;）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (RAP&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; fetch) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;fetch) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'当前环境不支持 fetch'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;RAP) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'请先引入 RAP 插件'&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; next &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fetch
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; find &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (settings) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; repositoryId &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;RAP&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;interfaces&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; itf of &lt;span class=&quot;va&quot;&gt;RAP&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;interfaces&lt;/span&gt;[repositoryId]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;itf&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;method&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toUpperCase&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;settings&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;method&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toUpperCase&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;itf&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;settings&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; itf&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; repositoryId &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; settings) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// ajax(settings)&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      settings &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; url)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;co&quot;&gt;// ajax(url) ajax(url, settings)&lt;/span&gt;
      settings &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; settings&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; match &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(settings)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;match) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(window&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; settings)

    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; redirect &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;RAP&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;RAP&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/app/mock/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;repositoryId&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;settings&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'include'&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;settings&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;settings&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dataType&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'jsonp'&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`Fetch &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;redirect&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(window&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; redirect&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; settings)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)(&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;RAP&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fetch&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用这些插件的方法很简单，直接在html最后添加指向的script标签即可（部分拦截可能需要引入多个标签）。&lt;/p&gt;
&lt;h3 id=&quot;修改全局url式&quot;&gt;修改全局URL式&lt;/h3&gt;
&lt;p&gt;这种情况适合mockServer请求中需要添加baseURL的类型。对于支持baseURL类型的库，设置baseURL即可。如baseURL为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://yapi.demo.qunar.com/mock/1304&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们业务代码中请求的api为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/weather/api&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么我们实际请求的地址是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://yapi.demo.qunar.com/mock/1304/weather/api&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以我们应该这么设置（以axios为例）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export default axios = new Axios({
    baseURL: process.env.NODE_ENV === 'development' ? 'http://yapi.demo.qunar.com/mock/1304' : 
})&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果是不区分环境的情况下，需要在提交前将baseURL设置为空，以免影响仓库代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于不支持baseURL的库，建议封装方法，单独保存baseURL。&lt;/p&gt;
&lt;h3 id=&quot;代理转发式&quot;&gt;代理转发式&lt;/h3&gt;
&lt;p&gt;代理转发实现的前提是你使用的开发工具支持转发，如果不支持，就需要使用Fiddler、charles等工具进行规则重写。下面举一些例子：&lt;/p&gt;
&lt;p&gt;webpack-dev-server中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;proxy&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
proxy&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;changeOrigin&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注：changeOrigin是http-proxy设置选项，表示在请求头中将host转换为目标服务器的地址或IP，解决服务器出现请求地址找不到的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;nginx（应该没人用吧）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;location /api {
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $host;
    proxy_set_header X-Real-Ip $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_pass http://localhost:11011;
    proxy_redirect off;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;fiddler中在右侧的tab页中选择autoResponder标签页。编辑rule分别输入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;REGEX:^https://server\.example\.com/(.*)
http://www.target.com:3838/$1&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;mock的一些问题&quot;&gt;mock的一些问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;mock不能替代联调。尽管mock数据再真实，也无法实现和后端接口一样的逻辑，部分逻辑检查或业务的问题只能联调才能发现。&lt;/li&gt;
&lt;li&gt;mock不能替代测试。mock本身是为了加快开发速度，那些对于代码质量要求比较高的项目，mock服务只能提供一些case。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;使用mock前提是前后端有一个明确的接口协议，利用合适的工具才能提高开发效率。强大的mock服务可以使你对开发的代码更为自信，即使没有后端，新手就可以通过mock熟悉之前的业务界面，或者查看一些表现特殊的界面，最大程度减少对后端的依赖。&lt;/p&gt;
&lt;p&gt;上面介绍的几款mockServer有几种都是使用nodejs开发的。和其他语言开发的mock服务相比，json格式成为书写的主要格式，虽然用起来容易，但书写上并不方便（json5格式在某种程度上增强了书写体验，但相比yaml等格式还是有所不足）。同时业务情况不同，针对性的选择不同的平台，推荐使用rap2和yapi，前者界面更为简洁，操作方便，后者功能更为强大。如果有特殊的需要，可以自己写一个，顺便练练手。&lt;/p&gt;
&lt;h2 id=&quot;搭建一个属于自己的server&quot;&gt;搭建一个属于自己的server&lt;/h2&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;【你是如何构建 Web 前端 Mock Server 的？ - 莫池宇的回答 - 知乎&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/35436669/answer/235608128&quot; class=&quot;uri&quot;&gt;https://www.zhihu.com/question/35436669/answer/235608128&lt;/a&gt;】&lt;/p&gt;
</description>
<pubDate>Thu, 01 Mar 2018 02:48:00 +0000</pubDate>
<dc:creator>无梦灬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dreamless/p/8487322.html</dc:identifier>
</item>
</channel>
</rss>