<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>开发自己的 chart - 每天5分钟玩转 Docker 容器技术（167） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/9030880.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/9030880.html</guid>
<description>&lt;p&gt;&lt;span&gt;Kubernetes 给我们提供了大量官方 chart，不过要部署微服务应用，还是需要开发自己的 chart，下面就来实践这个主题。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;创建 chart&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm create mychart&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的命令创建 chart &lt;/span&gt;&lt;code&gt;&lt;span&gt;mychart&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513063933803-826510655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Helm 会帮我们创建目录 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mychart&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，并生成了各类 chart 文件。这样我们就可以在此基础上开发自己的 chart 了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新建的 chart 默认包含一个 nginx 应用示例，values.yaml 内容如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513063943850-445108616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;开发时建议大家参考官方 chart 中的模板、values.yaml、Chart.yaml，里面包含了大量最佳实践和最常用的函数、流控制，这里就不一一展开了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;调试 chart&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;只要是程序就会有 bug，chart 也不例外。Helm 提供了 debug 的工具：&lt;/span&gt;&lt;code&gt;&lt;span&gt;helm lint&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm install --dry-run --debug&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;helm lint&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 会检测 chart 的语法，报告错误以及给出建议。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;比如我们故意在 values.yaml 的第 8 行漏掉了一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513063954158-1274300065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;helm lint mychart&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 会指出这个语法错误。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513064003219-32651763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;mychart&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 目录被作为参数传递给 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm lint&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。错误修复后则能通过检测。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513064011826-641056397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;helm install --dry-run --debug&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 会模拟安装 chart，并输出每个模板生成的 YAML 内容。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513064021740-66364484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201805/775365-20180513064033391-71845752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以检视这些输出，判断是否与预期相符。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;同样，&lt;/span&gt;&lt;code&gt;&lt;span&gt;mychart&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 目录作为参数传递给 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm install --dry-run --debug&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们讨论如何安装并将 chart 添加到仓库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 22:18:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/9030880.html</dc:identifier>
</item>
<item>
<title>【ASP.NET MVC系列】浅谈ASP.NET MVC八大类扩展(上篇) - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/9032414.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/9032414.html</guid>
<description>&lt;p&gt;&lt;span&gt;lASP.NET MVC系列文章&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10.549872122762&quot;&gt;
&lt;p&gt;&lt;span&gt;【01】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl14_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/6357306.html&quot;&gt;浅谈Google Chrome浏览器（理论篇）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【02】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl13_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/6359000.html&quot;&gt;浅谈Google Chrome浏览器（操作篇）（上）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【03】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl11_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/6801937.html&quot;&gt;浅谈Google Chrome浏览器（操作篇）（下）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【04】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl01_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/8201129.html&quot;&gt;浅谈ASP.NET框架&lt;/a&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【05】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl04_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/8109555.html&quot;&gt;浅谈ASP.NET MVC运行过程&lt;/a&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【06】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl07_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/7101175.html&quot;&gt;浅谈ASP.NET MVC 控制器&lt;/a&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【07】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl08_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/7040843.html&quot;&gt;浅谈ASP.NET MVC 路由&lt;/a&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【08】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl03_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/8111977.html&quot;&gt;浅谈ASP.NET MVC 视图&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【09】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl18_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/7496313.html&quot;&gt;浅谈ASP.NET MVC 视图与控制器传递数据&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【10】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl12_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/7613160.html&quot;&gt;浅谈jqGrid 在ASP.NET MVC中增删改查&lt;/a&gt;     &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【11】&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/6275854.html&quot;&gt;浅谈ASP.NET 页面之间传值的几种方式&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【12】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/8271403.html&quot;&gt;浅谈缓存技术在ASP.NET中的运用&lt;/a&gt;       &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【13】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl02_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/8177821.html&quot;&gt;浅谈NuGet在VS中的运用&lt;/a&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【14】&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl17_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/wangjiming/p/6286045.html&quot;&gt;浅谈ASP.NET 程序发布过程&lt;/a&gt;           &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl17_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/wangjiming/p/8286465.html&quot;&gt;【15】浅谈数据注解和验证&lt;/a&gt;           &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【16】浅谈依赖注入&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【17】浅谈表单和HTML辅助方法&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【18】浅谈基于APS.NET身份验证&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【19】浅谈ASP.NET MVC 模型&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【20】浅谈ASP.NET MVC 单元测试&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【21】浅谈ASP.NET MVC网络安全;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/wangjiming/p/9032414.html&quot;&gt;【22】浅谈ASP.NET MVC八大类扩展&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【23】再谈ASP.NET MVC Routing&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【24】浅谈ASP.NET 高级话题&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【25】浅谈大型ASP.NET MVC项目（含DEMO）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a&gt;【26】下一系列：ASP.NET WebAPI&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180119111916974-764315611.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;一    引入背景&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       我们知道，MVC基架为我们提供了很多基础类，当需要使用时，只需调用即可，以ActionResult为例，其有很多子类，如ContentResult,EmptyResult,FileResult,HttpStatusCodeResult,JavaScriptResult,JsonResult,RedirectResult,RedirectToRouteResult,ViewResultBase,FileContentResult,FilePathResult,FileStreamResult,ViewResult,PartialResult,&lt;/p&gt;
&lt;p&gt;然而，尽管MVC基架提供了众多类供我们调用，但却并不是包括所有功能的类，比如，我需要返回XML格式的数据，或下载CSV格式的数据，此时，MVC基架就没提供相应的类。因此，MVC类的扩展就迫在眉睫了。&lt;/p&gt;
&lt;p&gt;      在本篇文章中，主要讲解MVC比较核心的八大扩展类，一共分为两篇，即浅谈ASP.NET MVC八大类扩展(上篇)和浅谈ASP.NET MVC八大类扩展(下篇)。&lt;/p&gt;
&lt;p&gt;      其中，本篇文章主要讲解MVC基架提供的ActionResult及其子孙类，自定义扩展XMLResult和CsvResult，下篇文章将讲解剩下的七大类自定义扩展：Filter扩展，RazorViewEngine扩展，HtmlHelper扩展，Validator扩展，ModelBinder扩展，ControllerFactory注入扩展，Lambda 树扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180514025409573-1335146213.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二   ASP.NET MVC扩展概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     但凡涉及到架构，我们首先都会关心安全性，稳定性，可扩展性等特征，当然，ASO.NET MVC也不例外，MVC之所以比WebForm流行，不仅仅在于其实现前后端的松耦合，而且其也支持强大的自定义扩展，在本篇文章中，我们就是运用MVC支持自定义扩展这一特性来进行自定义扩展，从而实现个性化项目需求。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三    代码实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（一） ActionResult扩展&lt;/p&gt;
&lt;p&gt;1 AtionResult内置扩展&lt;/p&gt;
&lt;p&gt;ASP.NET MVC提供了如下内置扩展类.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513155646302-1186758688.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.1  上图简要概述&lt;/p&gt;
&lt;p&gt;(1)ActionResult类继承Object类；&lt;/p&gt;
&lt;p&gt;(2)ContentResult,EmptyResult,FileResult,HttpStatusCodeResult,JavaScriptResult,JsonResult,ViewResultBase,RedirectToRouteResult,RedirectResult 九大类继承类ActionResult；&lt;/p&gt;
&lt;p&gt;(3)FileContentResult，FilePathResult，FileStreamResult  三大类继承类FileResult；&lt;/p&gt;
&lt;p&gt;(4)ViewResult,PartialViewResult两大类继承类ViewResultBase;&lt;/p&gt;
&lt;p&gt;1.2 ActionResult讲解&lt;/p&gt;
&lt;p&gt;功能：封装一个操作方法的结果并用于代表该操作方法执行框架级操作。&lt;/p&gt;
&lt;p&gt;在Mvc中，我们对如下代码再熟悉不过了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
 {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;F12查看ActionResult定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('68dff687-1c45-4073-9002-2e7166c568d4')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_68dff687-1c45-4073-9002-2e7166c568d4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_68dff687-1c45-4073-9002-2e7166c568d4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('68dff687-1c45-4073-9002-2e7166c568d4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_68dff687-1c45-4073-9002-2e7166c568d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; System.Web.Mvc
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     表示操作方法的结果。&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ActionResult
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     初始化 System.Web.Mvc.ActionResult 类的新实例。&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ActionResult();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     通过从 System.Web.Mvc.ActionResult 类继承的自定义类型，启用对操作方法结果的处理。
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   context:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     用于执行结果的上下文。上下文信息包括控制器、HTTP 内容、请求上下文和路由数据。&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;不难看出，ActionResult具有如下特征：&lt;/p&gt;
&lt;p&gt;(1)抽象类；&lt;/p&gt;
&lt;p&gt;(2)一个只可继承的构造函数；&lt;/p&gt;
&lt;p&gt;(3)一个未实现的抽象方法；&lt;/p&gt;
&lt;p&gt;1.2.1  ContentResult讲解&lt;/p&gt;
&lt;p&gt;功能：表示用户定义的内容类型，该类型是操作方法的结果。&lt;/p&gt;
&lt;p&gt;定义：查看定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513191004094-40282227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不难看出，ContentResult具有如下特征：&lt;/p&gt;
&lt;p&gt;(1)继承自类ActionResult&lt;/p&gt;
&lt;p&gt;(2)包含一个构造方法，一个重写ActionResultl类的抽象方法ExecuteResult(ControllerContext context)，和三个属性；&lt;/p&gt;
&lt;p&gt;(3)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c3f4f9da-4498-438f-ae7b-57c0f85def4f')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c3f4f9da-4498-438f-ae7b-57c0f85def4f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c3f4f9da-4498-438f-ae7b-57c0f85def4f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c3f4f9da-4498-438f-ae7b-57c0f85def4f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c3f4f9da-4498-438f-ae7b-57c0f85def4f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ContentResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         HttpResponseBase response =&lt;span&gt; context.HttpContext.Response;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentType))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             response.ContentType = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentType;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.ContentEncoding != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             response.ContentEncoding = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentEncoding;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Content != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             response.Write(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Content);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Content { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Encoding ContentEncoding { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ContentType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;(4)我们来看看具体例子：&lt;/p&gt;
&lt;p&gt;如我们向页面输出“Alan_beijing”，可采取如下两种方式。&lt;/p&gt;
&lt;p&gt;方式一：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ContentResult ContextResultTest()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;    &lt;span&gt;return&lt;/span&gt; Content(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513184821343-1391958645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;方式二&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8a8f42fd-b8ad-4208-a29e-229ca48a55c4')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_8a8f42fd-b8ad-4208-a29e-229ca48a55c4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8a8f42fd-b8ad-4208-a29e-229ca48a55c4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8a8f42fd-b8ad-4208-a29e-229ca48a55c4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8a8f42fd-b8ad-4208-a29e-229ca48a55c4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ContentResult ContextResultTest()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;string str =  &quot;&amp;lt;html&amp;gt;&quot; + &quot;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&quot; + &quot;&amp;lt;body&amp;gt;&quot; + &quot;Alan_beijing&quot; + &quot;&amp;lt;/body&amp;gt;&quot; + &quot;&amp;lt;/html&amp;gt;&quot;;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;/body&amp;gt;Alan_beijing&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Content(str);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试结果&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513184830959-725550024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;总之，大家在使用时，可以把ContentResult当作Responce.Write()使用。&lt;/p&gt;

&lt;p&gt; 1.2.2  EmptyResult&lt;/p&gt;
&lt;p&gt;功能：表示一个不执行任何操作的结果，如不返回任何内容的控制器操作方法。&lt;/p&gt;
&lt;p&gt; (1)查看定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513190426142-1609687590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7dc54d5e-b726-4d5c-98c9-ea3ff001f45d')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_7dc54d5e-b726-4d5c-98c9-ea3ff001f45d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7dc54d5e-b726-4d5c-98c9-ea3ff001f45d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7dc54d5e-b726-4d5c-98c9-ea3ff001f45d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7dc54d5e-b726-4d5c-98c9-ea3ff001f45d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EmptyResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; EmptyResult _singleton = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EmptyResult();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; EmptyResult Instance =&amp;gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        _singleton;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;(3)总结&lt;/p&gt;
&lt;p&gt;EmptyResult不执行任何操作，相当于如下功能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ContentResult ContextResultTest()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;    &lt;span&gt;return&lt;/span&gt; Content(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1.2.3  FileResult&lt;/p&gt;
&lt;p&gt;功能：表示一个用于将二进制文件内容发送到响应的基类。&lt;/p&gt;
&lt;p&gt; (1)查看定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513191913386-178756507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513192216465-1658965524.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513192323948-1852898918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1d443c22-d538-4b43-8389-74a2f1029de0')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_1d443c22-d538-4b43-8389-74a2f1029de0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1d443c22-d538-4b43-8389-74a2f1029de0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1d443c22-d538-4b43-8389-74a2f1029de0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1d443c22-d538-4b43-8389-74a2f1029de0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileResult : ActionResult
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _fileDownloadName;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; FileResult(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; contentType)
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(contentType))
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException(MvcResources.Common_NullOrEmpty, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;contentType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.ContentType =&lt;span&gt; contentType;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         HttpResponseBase response =&lt;span&gt; context.HttpContext.Response;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         response.ContentType = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentType;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.FileDownloadName))
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; headerValue = ContentDispositionUtil.GetHeaderValue(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.FileDownloadName);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             context.HttpContext.Response.AddHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Disposition&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, headerValue);
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.WriteFile(response);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; WriteFile(HttpResponseBase response);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ContentType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; 
&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FileDownloadName
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt; =&amp;gt; 
&lt;span&gt; 40&lt;/span&gt;             (&lt;span&gt;this&lt;/span&gt;._fileDownloadName ?? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._fileDownloadName =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Nested Types&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ContentDispositionUtil
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; HexDigits = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789ABCDEF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AddByteToStringBuilder(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt; b, StringBuilder builder)
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             builder.Append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; num =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             AddHexDigitToStringBuilder(num &amp;gt;&amp;gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;, builder);
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             AddHexDigitToStringBuilder(num % &lt;span&gt;0x10&lt;/span&gt;&lt;span&gt;, builder);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AddHexDigitToStringBuilder(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; digit, StringBuilder builder)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             builder.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789ABCDEF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[digit]);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CreateRfc2231HeaderValue(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; filename)
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;             StringBuilder builder = &lt;span&gt;new&lt;/span&gt; StringBuilder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;attachment; filename*=UTF-8''&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;byte&lt;/span&gt; num &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Encoding.UTF8.GetBytes(filename))
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (IsByteValidHeaderValueCharacter(num))
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                     builder.Append((&lt;span&gt;char&lt;/span&gt;&lt;span&gt;) num);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;                    AddByteToStringBuilder(num, builder);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder.ToString();
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetHeaderValue(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; fileName)
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt; ch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fileName)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (ch &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\x007f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; CreateRfc2231HeaderValue(fileName);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;             ContentDisposition disposition = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ContentDisposition {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 FileName =&lt;span&gt; fileName
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; disposition.ToString();
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsByteValidHeaderValueCharacter(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;0x30&lt;/span&gt; &amp;lt;= b) &amp;amp;&amp;amp; (b &amp;lt;= &lt;span&gt;0x39&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;0x61&lt;/span&gt; &amp;lt;= b) &amp;amp;&amp;amp; (b &amp;lt;= &lt;span&gt;0x7a&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;0x41&lt;/span&gt; &amp;lt;= b) &amp;amp;&amp;amp; (b &amp;lt;= &lt;span&gt;90&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (b)
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x3a&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x5f&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x7e&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x24&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x26&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x21&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x2b&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x2d&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0x2e&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;1.2.4  HttpStatusCodeResult&lt;/p&gt;
&lt;p&gt;功能：提供一种用于返回带特定 HTTP 响应状态代码和说明的操作结果的方法。&lt;/p&gt;
&lt;p&gt;(1)定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513193126870-1884842606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2da0b90d-c020-4728-b3af-86ecddc5c0fa')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_2da0b90d-c020-4728-b3af-86ecddc5c0fa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2da0b90d-c020-4728-b3af-86ecddc5c0fa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2da0b90d-c020-4728-b3af-86ecddc5c0fa',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2da0b90d-c020-4728-b3af-86ecddc5c0fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HttpStatusCodeResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; HttpStatusCodeResult(&lt;span&gt;int&lt;/span&gt; statusCode) : &lt;span&gt;this&lt;/span&gt;(statusCode, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; HttpStatusCodeResult(HttpStatusCode statusCode) : &lt;span&gt;this&lt;/span&gt;(statusCode, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; HttpStatusCodeResult(&lt;span&gt;int&lt;/span&gt; statusCode, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; statusDescription)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.StatusCode =&lt;span&gt; statusCode;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.StatusDescription =&lt;span&gt; statusDescription;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; HttpStatusCodeResult(HttpStatusCode statusCode, &lt;span&gt;string&lt;/span&gt; statusDescription) : &lt;span&gt;this&lt;/span&gt;((&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) statusCode, statusDescription)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         context.HttpContext.Response.StatusCode = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.StatusCode;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.StatusDescription != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             context.HttpContext.Response.StatusDescription = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.StatusDescription;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; StatusCode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; StatusDescription { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 1.2.5 JavaScriptResult&lt;/p&gt;
&lt;p&gt;功能：将 JavaScript 内容发送到响应。&lt;/p&gt;
&lt;p&gt; (1)定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513194649875-771537727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fdcec4e4-84ab-4c65-afef-c956e475ac4b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_fdcec4e4-84ab-4c65-afef-c956e475ac4b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fdcec4e4-84ab-4c65-afef-c956e475ac4b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fdcec4e4-84ab-4c65-afef-c956e475ac4b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fdcec4e4-84ab-4c65-afef-c956e475ac4b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JavaScriptResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         HttpResponseBase response =&lt;span&gt; context.HttpContext.Response;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         response.ContentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Script != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             response.Write(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Script);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Script { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.6  JsonResult&lt;/p&gt;
&lt;p&gt;功能：表示一个类，该类用于将 JSON 格式的内容发送到响应。&lt;/p&gt;
&lt;p&gt;(1)定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513194250983-1860603586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fd13a424-c787-47d1-a446-30178a21caa6')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_fd13a424-c787-47d1-a446-30178a21caa6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd13a424-c787-47d1-a446-30178a21caa6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fd13a424-c787-47d1-a446-30178a21caa6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd13a424-c787-47d1-a446-30178a21caa6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JsonResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JsonResult()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.JsonRequestBehavior =&lt;span&gt; JsonRequestBehavior.DenyGet;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;this&lt;/span&gt;.JsonRequestBehavior == JsonRequestBehavior.DenyGet) &amp;amp;&amp;amp; &lt;span&gt;string&lt;/span&gt;.Equals(context.HttpContext.Request.HttpMethod, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(MvcResources.JsonRequest_GetNotAllowed);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         HttpResponseBase response =&lt;span&gt; context.HttpContext.Response;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentType))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             response.ContentType = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentType;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             response.ContentType = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.ContentEncoding != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             response.ContentEncoding = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ContentEncoding;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Data != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             JavaScriptSerializer serializer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JavaScriptSerializer();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.MaxJsonLength.HasValue)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 serializer.MaxJsonLength = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.MaxJsonLength.Value;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.RecursionLimit.HasValue)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 serializer.RecursionLimit = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.RecursionLimit.Value;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             response.Write(serializer.Serialize(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Data));
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Encoding ContentEncoding { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ContentType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Data { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; JsonRequestBehavior JsonRequestBehavior { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? MaxJsonLength { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? RecursionLimit { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;(3)总结&lt;/p&gt;
&lt;p&gt;JsonResult首先将指定的对象序列化为Json字符串，然后将字符串写入到HTTP输出流。&lt;/p&gt;

&lt;p&gt; 1.2.7 RedirectResult&lt;/p&gt;
&lt;p&gt;功能：通过重定向到指定的 URI 来控制对应用程序操作的处理。&lt;/p&gt;
&lt;p&gt;(1)定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513194923501-1957660141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7f0f4e08-1fdf-4ac6-bbb9-31d751756d49')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_7f0f4e08-1fdf-4ac6-bbb9-31d751756d49&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7f0f4e08-1fdf-4ac6-bbb9-31d751756d49&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7f0f4e08-1fdf-4ac6-bbb9-31d751756d49',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7f0f4e08-1fdf-4ac6-bbb9-31d751756d49&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RedirectResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; RedirectResult(&lt;span&gt;string&lt;/span&gt; url) : &lt;span&gt;this&lt;/span&gt;(url, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; RedirectResult(&lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; permanent)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(url))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException(MvcResources.Common_NullOrEmpty, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.Permanent =&lt;span&gt; permanent;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.Url =&lt;span&gt; url;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (context.IsChildAction)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(MvcResources.RedirectAction_CannotRedirectInChildAction);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;string&lt;/span&gt; url = UrlHelper.GenerateContentUrl(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Url, context.HttpContext);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        context.Controller.TempData.Keep();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Permanent)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             context.HttpContext.Response.RedirectPermanent(url, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             context.HttpContext.Response.Redirect(url, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Permanent { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Url { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.8 RedirectToRouteResult&lt;/p&gt;
&lt;p&gt;功能：表示使用指定的路由值字典来执行重定向的结果。&lt;/p&gt;
&lt;p&gt;（1）定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513195130454-1489422983.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b856298d-0abd-4720-932c-c9d1a02dded2')&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_b856298d-0abd-4720-932c-c9d1a02dded2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b856298d-0abd-4720-932c-c9d1a02dded2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b856298d-0abd-4720-932c-c9d1a02dded2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b856298d-0abd-4720-932c-c9d1a02dded2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RedirectToRouteResult : ActionResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; RouteCollection _routes;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; RedirectToRouteResult(RouteValueDictionary routeValues) : &lt;span&gt;this&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, routeValues)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; RedirectToRouteResult(&lt;span&gt;string&lt;/span&gt; routeName, RouteValueDictionary routeValues) : &lt;span&gt;this&lt;/span&gt;(routeName, routeValues, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; RedirectToRouteResult(&lt;span&gt;string&lt;/span&gt; routeName, RouteValueDictionary routeValues, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; permanent)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.Permanent =&lt;span&gt; permanent;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.RouteName = routeName ?? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.RouteValues = routeValues ?? &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (context.IsChildAction)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(MvcResources.RedirectAction_CannotRedirectInChildAction);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;string&lt;/span&gt; str = UrlHelper.GenerateUrl(&lt;span&gt;this&lt;/span&gt;.RouteName, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.RouteValues, &lt;span&gt;this&lt;/span&gt;.Routes, context.RequestContext, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(str))
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvalidOperationException(MvcResources.Common_NoRouteMatched);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        context.Controller.TempData.Keep();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Permanent)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             context.HttpContext.Response.RedirectPermanent(str, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             context.HttpContext.Response.Redirect(str, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Permanent { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; RouteName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt;&lt;span&gt; RouteCollection Routes
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;._routes == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;._routes =&lt;span&gt; RouteTable.Routes;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._routes;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._routes =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; RouteValueDictionary RouteValues { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 1.2.9  ViewResultBase&lt;/p&gt;
&lt;p&gt; 功能：表示一个用于为视图提供模型并向响应呈现视图的基类。&lt;/p&gt;
&lt;p&gt;(1)定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180513195415424-514104272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)完整定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b3df0b2f-e53c-426e-b121-767790851ef3')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b3df0b2f-e53c-426e-b121-767790851ef3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b3df0b2f-e53c-426e-b121-767790851ef3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b3df0b2f-e53c-426e-b121-767790851ef3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b3df0b2f-e53c-426e-b121-767790851ef3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ViewResultBase : ActionResult
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DynamicViewDataDictionary _dynamicViewData;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TempDataDictionary _tempData;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ViewDataDictionary _viewData;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ViewEngineCollection _viewEngineCollection;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _viewName;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ViewResultBase()
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (context == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ViewName))
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.ViewName = context.RouteData.GetRequiredString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         ViewEngineResult result = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.View == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             result = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.FindView(context);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.View =&lt;span&gt; result.View;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         TextWriter output =&lt;span&gt; context.HttpContext.Response.Output;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         ViewContext viewContext = &lt;span&gt;new&lt;/span&gt; ViewContext(context, &lt;span&gt;this&lt;/span&gt;.View, &lt;span&gt;this&lt;/span&gt;.ViewData, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.TempData, output);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.View.Render(viewContext, output);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (result != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             result.ViewEngine.ReleaseView(context, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.View);
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt;&lt;span&gt; ViewEngineResult FindView(ControllerContext context);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Model =&amp;gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ViewData.Model;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TempDataDictionary TempData
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;._tempData == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;._tempData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TempDataDictionary();
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._tempData;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._tempData =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; IView View { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    [Dynamic]
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; ViewBag
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         [&lt;span&gt;return&lt;/span&gt;&lt;span&gt;: Dynamic]
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             Func&amp;lt;ViewDataDictionary&amp;gt; viewDataThunk = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;._dynamicViewData == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (viewDataThunk == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                     viewDataThunk = () =&amp;gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ViewData;
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;._dynamicViewData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DynamicViewDataDictionary(viewDataThunk);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._dynamicViewData;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ViewDataDictionary ViewData
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;._viewData == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;._viewData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ViewDataDictionary();
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._viewData;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._viewData =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ViewEngineCollection ViewEngineCollection
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt; =&amp;gt; 
&lt;span&gt;102&lt;/span&gt;             (&lt;span&gt;this&lt;/span&gt;._viewEngineCollection ??&lt;span&gt; ViewEngines.Engines);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._viewEngineCollection =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ViewName
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt; =&amp;gt; 
&lt;span&gt;112&lt;/span&gt;             (&lt;span&gt;this&lt;/span&gt;._viewName ?? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._viewName =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.10  FileContentResult&lt;/p&gt;
&lt;p&gt;功能：将二进制文件的内容发送到响应&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('02736914-a498-47be-b622-05d06cdf9d51')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_02736914-a498-47be-b622-05d06cdf9d51&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_02736914-a498-47be-b622-05d06cdf9d51&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('02736914-a498-47be-b622-05d06cdf9d51',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_02736914-a498-47be-b622-05d06cdf9d51&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileContentResult : FileResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; FileContentResult(&lt;span&gt;byte&lt;/span&gt;[] fileContents, &lt;span&gt;string&lt;/span&gt; contentType) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(contentType)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (fileContents == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fileContents&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.FileContents =&lt;span&gt; fileContents;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; WriteFile(HttpResponseBase response)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         response.OutputStream.Write(&lt;span&gt;this&lt;/span&gt;.FileContents, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.FileContents.Length);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] FileContents { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.11  FilePathResult&lt;/p&gt;
&lt;p&gt;功能：将文件的内容发送到响应。&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5b8390e5-1377-4394-8c99-775230bf417d')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_5b8390e5-1377-4394-8c99-775230bf417d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b8390e5-1377-4394-8c99-775230bf417d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5b8390e5-1377-4394-8c99-775230bf417d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b8390e5-1377-4394-8c99-775230bf417d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FilePathResult : FileResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; FilePathResult(&lt;span&gt;string&lt;/span&gt; fileName, &lt;span&gt;string&lt;/span&gt; contentType) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(contentType)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(fileName))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException(MvcResources.Common_NullOrEmpty, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fileName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.FileName =&lt;span&gt; fileName;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; WriteFile(HttpResponseBase response)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         response.TransmitFile(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.FileName);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.12  FilestreamResult&lt;/p&gt;
&lt;p&gt;功能：使用Stream&lt;span&gt;实例将二进制内容发送到响应。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a0e350d4-988a-4225-9e1c-ac2774035bf5')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_a0e350d4-988a-4225-9e1c-ac2774035bf5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a0e350d4-988a-4225-9e1c-ac2774035bf5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a0e350d4-988a-4225-9e1c-ac2774035bf5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a0e350d4-988a-4225-9e1c-ac2774035bf5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FileStreamResult : FileResult
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BufferSize = &lt;span&gt;0x1000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; FileStreamResult(Stream fileStream, &lt;span&gt;string&lt;/span&gt; contentType) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(contentType)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (fileStream == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fileStream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.FileStream =&lt;span&gt; fileStream;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; WriteFile(HttpResponseBase response)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Stream outputStream =&lt;span&gt; response.OutputStream;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.FileStream)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] buffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0x1000&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;this&lt;/span&gt;.FileStream.Read(buffer, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0x1000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 outputStream.Write(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, count);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Stream FileStream { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.13  ViewResult&lt;/p&gt;
&lt;p&gt;功能：表示一个类，该类用于使用由IViewEngine&lt;span&gt;对象返回的IView&lt;span&gt;实例来呈现视图。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(1)定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f1ca307c-32eb-4d14-bb29-df2efda86cf6')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_f1ca307c-32eb-4d14-bb29-df2efda86cf6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f1ca307c-32eb-4d14-bb29-df2efda86cf6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f1ca307c-32eb-4d14-bb29-df2efda86cf6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f1ca307c-32eb-4d14-bb29-df2efda86cf6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ViewResult : ViewResultBase
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fields&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _masterName;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; ViewEngineResult FindView(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         ViewEngineResult result = &lt;span&gt;base&lt;/span&gt;.ViewEngineCollection.FindView(context, &lt;span&gt;base&lt;/span&gt;.ViewName, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.MasterName);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (result.View != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         StringBuilder builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt; str &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result.SearchedLocations)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            builder.AppendLine();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            builder.Append(str);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;string&lt;/span&gt;.Format(CultureInfo.CurrentCulture, MvcResources.Common_ViewNotFound, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;[] { &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.ViewName, builder }));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Properties&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; MasterName
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;get&lt;/span&gt; =&amp;gt; 
&lt;span&gt;27&lt;/span&gt;             (&lt;span&gt;this&lt;/span&gt;._masterName ?? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;set&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;._masterName =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;1.2.14  PartialResult&lt;/p&gt;
&lt;p&gt;功能：表示一个用于将分部视图发送到响应的基类。&lt;/p&gt;
&lt;p&gt;(1)定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('347e4d1b-7770-4108-b8ff-d3c53235eefc')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_347e4d1b-7770-4108-b8ff-d3c53235eefc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_347e4d1b-7770-4108-b8ff-d3c53235eefc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('347e4d1b-7770-4108-b8ff-d3c53235eefc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_347e4d1b-7770-4108-b8ff-d3c53235eefc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PartialViewResult : ViewResultBase
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; ViewEngineResult FindView(ControllerContext context)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         ViewEngineResult result = &lt;span&gt;base&lt;/span&gt;.ViewEngineCollection.FindPartialView(context, &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.ViewName);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (result.View != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         StringBuilder builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt; str &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result.SearchedLocations)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            builder.AppendLine();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            builder.Append(str);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;string&lt;/span&gt;.Format(CultureInfo.CurrentCulture, MvcResources.Common_PartialViewNotFound, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;[] { &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.ViewName, builder }));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;2  ActionResult自定义扩展&lt;/p&gt;
&lt;p&gt;关于ActionResult的自定义扩展，满足两个条件&lt;/p&gt;
&lt;p&gt;(1)继承ActionResult&lt;/p&gt;
&lt;p&gt;(2)重写ExecuteResult()方法&lt;/p&gt;
&lt;p&gt;2.1  XMLResult&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; XmlResult : ActionResult
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; _data;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; XmlResult(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; data)
        {
            _data &lt;/span&gt;=&lt;span&gt; data;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ExecuteResult(ControllerContext context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serializer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XmlSerializer(_data.GetType());
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response =&lt;span&gt; context.HttpContext.Response;
            response.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            serializer.Serialize(response.Output, _data);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Controller&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; XmlResult GetEmpInfo()
        {
            EmpInfo empInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EmpInfo()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alan_beijing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Address &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;China-ShangHai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Age&lt;/span&gt;=&lt;span&gt;40&lt;/span&gt;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XmlResult(empInfo);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test Result&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180514021102073-980817434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.2  CsvResult&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 public class CsvResult : FileResult
    {
        private IEnumerable _data;

        public CsvResult(IEnumerable data, string fileName) : base(&quot;text/csv&quot;)
        {
            _data = data;
            FileDownloadName = fileName;
        }

        protected override void WriteFile(HttpResponseBase response)
        {
            var builder = new StringBuilder();
            var strWriter = new StringWriter(builder);

            foreach (var item in _data)
            {
                var properties = item.GetType().GetProperties();
                foreach (var prop in properties)
                {
                    strWriter.Write(GetValue(item, prop.Name));
                    strWriter.Write(&quot;, &quot;);
                }
                strWriter.WriteLine();
            }

            response.Write(builder);
        }

        public static string GetValue(object item, string propName)
        {
            return item.GetType().GetProperty(propName).GetValue(item, null).ToString() ?? &quot;&quot;;
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Controller&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 public CsvResult DownCsvEmpInfo()
        {
            EmpInfo empInfo = new EmpInfo()
            {
                Name = &quot;Alan_beijing&quot;,
                Address = &quot;China-ShangHai&quot;,
                Age = 40
            };
            return new CsvResult(new List&amp;lt;EmpInfo&amp;gt;() { empInfo }, &quot;empInfo&quot;);
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;测试结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180514022208485-1297863126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 四   推荐网址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【01】https://msdn.microsoft.com/zh-cn/library/system.web.mvc.actionresult(v=vs.118).aspx&lt;/p&gt;

&lt;p&gt;&lt;span&gt;五  后续&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;敬请等待下一篇......&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 六  服务区&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有喜欢的朋友，可以看一下，不喜欢的的朋友，勿喷，谢谢！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1066923/201805/1066923-20180514030256489-362501992.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 13 May 2018 19:06:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/9032414.html</dc:identifier>
</item>
<item>
<title>数据库分库分表思路 - butterfly100</title>
<link>http://www.cnblogs.com/butterfly100/p/9034281.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/butterfly100/p/9034281.html</guid>
<description>&lt;h2 id=&quot;一-数据切分&quot; data-anchor-id=&quot;eq2p&quot;&gt;一. 数据切分&lt;/h2&gt;
&lt;p data-anchor-id=&quot;nne9&quot;&gt;关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到1000W或100G以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行切分了，切分的目的就在于减少数据库的负担，缩短查询时间。&lt;/p&gt;
&lt;p data-anchor-id=&quot;5wpb&quot;&gt;&lt;span&gt;数据库分布式核心内容无非就是数据切分（Sharding）&lt;/span&gt;，以及切分后对数据的定位、整合。数据切分就是将数据分散存储到多个数据库中，使得单一数据库中的数据量变小，通过扩充主机的数量缓解单一数据库的性能问题，从而达到提升数据库操作性能的目的。&lt;/p&gt;
&lt;p data-anchor-id=&quot;q9o8&quot;&gt;数据切分根据其切分类型，可以分为两种方式：&lt;span&gt;垂直（纵向）切分和水平（横向）切分&lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;q9o8&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;1垂直纵向切分&quot; data-anchor-id=&quot;ptoh&quot;&gt;1、垂直（纵向）切分&lt;/h3&gt;
&lt;p data-anchor-id=&quot;06w9&quot;&gt;垂直切分常见有垂直分库和垂直分表两种。&lt;/p&gt;
&lt;p data-anchor-id=&quot;10m7&quot;&gt;&lt;span&gt;垂直分库&lt;/span&gt;就是根据业务耦合性，将关联度低的不同表存储在不同的数据库。做法与大系统拆分为多个小系统类似，按业务分类进行独立划分。与&quot;微服务治理&quot;的做法相似，每个微服务使用单独的一个数据库。如图：&lt;/p&gt;
&lt;p data-anchor-id=&quot;10m7&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514014303109-1826311184.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;10m7&quot;&gt;&lt;span&gt;垂直分表&lt;/span&gt;是基于数据库中的&quot;列&quot;进行，某个表字段较多，可以新建一张扩展表，将不经常用或字段长度较大的字段拆分出去到扩展表中。在字段很多的情况下（例如一个大表有100多个字段），通过&quot;大表拆小表&quot;，更便于开发与维护，也能避免跨页问题，MySQL底层是通过数据页存储的，一条记录占用空间过大会导致跨页，造成额外的性能开销。另外数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了磁盘IO，从而提升了数据库性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514014417237-1672001359.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;u3j9&quot;&gt;垂直切分的优点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;xjkp&quot;&gt;&lt;li&gt;解决业务系统层面的耦合，业务清晰&lt;/li&gt;
&lt;li&gt;与微服务的治理类似，也能对不同业务的数据进行分级管理、维护、监控、扩展等&lt;/li&gt;
&lt;li&gt;高并发场景下，垂直切分一定程度的提升IO、数据库连接数、单机硬件资源的瓶颈&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;wy9p&quot;&gt;缺点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;lk8h&quot;&gt;&lt;li&gt;部分表无法join，只能通过接口聚合方式解决，提升了开发的复杂度&lt;/li&gt;
&lt;li&gt;分布式事务处理复杂&lt;/li&gt;
&lt;li&gt;依然存在单表数据量过大的问题（需要水平切分）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2水平横向切分&quot; data-anchor-id=&quot;ux1c&quot;&gt;2、水平（横向）切分&lt;/h3&gt;
&lt;p data-anchor-id=&quot;65hz&quot;&gt;当一个应用难以再细粒度的垂直切分，或切分后数据量行数巨大，存在单库读写、存储性能瓶颈，这时候就需要进行水平切分了。&lt;/p&gt;
&lt;p data-anchor-id=&quot;v57u&quot;&gt;水平切分分为&lt;span&gt;库内分表和分库分表&lt;/span&gt;，是根据表内数据内在的逻辑关系，将同一个表按不同的条件分散到多个数据库或多个表中，每个表中只包含一部分数据，从而使得单个表的数据量变小，达到分布式的效果。如图所示：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;md-section-divider&quot; readability=&quot;22&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514014833061-560502066.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;p data-anchor-id=&quot;tobh&quot;&gt;库内分表只解决了单一表数据量过大的问题，但没有将表分布到不同机器的库上，因此对于减轻MySQL数据库的压力来说，帮助不是很大，大家还是竞争同一个物理机的CPU、内存、网络IO，最好通过分库分表来解决。&lt;/p&gt;
&lt;p data-anchor-id=&quot;yty0&quot;&gt;水平切分的优点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;qixb&quot;&gt;&lt;li&gt;不存在单库数据量过大、高并发的性能瓶颈，提升系统稳定性和负载能力&lt;/li&gt;
&lt;li&gt;应用端改造较小，不需要拆分业务模块&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;lhix&quot;&gt;缺点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;mpv4&quot;&gt;&lt;li&gt;跨分片的事务一致性难以保证&lt;/li&gt;
&lt;li&gt;跨库的join关联查询性能较差&lt;/li&gt;
&lt;li&gt;数据多次扩展难度和维护量极大&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;qbrh&quot;&gt;水平切分后同一张表会出现在多个数据库/表中，每个库/表的内容不同。几种典型的数据分片规则为：&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;zcm5&quot;&gt;&lt;span&gt;1、根据数值范围&lt;/span&gt;&lt;/h4&gt;
&lt;p data-anchor-id=&quot;v7s0&quot;&gt;&lt;span&gt;按照时间区间或ID区间来切分&lt;/span&gt;。例如：按日期将不同月甚至是日的数据分散到不同的库中；将userId为1~9999的记录分到第一个库，10000~20000的分到第二个库，以此类推。某种意义上，某些系统中使用的&quot;&lt;span&gt;冷热数据分离&lt;/span&gt;&quot;，将一些使用较少的历史数据迁移到其他库中，业务功能上只提供热点数据的查询，也是类似的实践。&lt;/p&gt;
&lt;p data-anchor-id=&quot;mao9&quot;&gt;这样的优点在于：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;mbgg&quot;&gt;&lt;li&gt;单表大小可控&lt;/li&gt;
&lt;li&gt;天然便于水平扩展，后期如果想对整个分片集群扩容时，只需要添加节点即可，无需对其他分片的数据进行迁移&lt;/li&gt;
&lt;li&gt;使用分片字段进行范围查找时，连续分片可快速定位分片进行快速查询，有效避免跨分片查询的问题。&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;haum&quot;&gt;缺点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;bj43&quot;&gt;&lt;li&gt;热点数据成为性能瓶颈。连续分片可能存在数据热点，例如按时间字段分片，有些分片存储最近时间段内的数据，可能会被频繁的读写，而有些分片存储的历史数据，则很少被查询&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514015656387-1154395691.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;vx5e&quot;&gt;&lt;span&gt;2、根据数值取模&lt;/span&gt;&lt;/h4&gt;
&lt;p data-anchor-id=&quot;r5ms&quot;&gt;&lt;span&gt;一般采用hash取模mod的切分方式&lt;/span&gt;，例如：将 Customer 表根据 cusno 字段切分到4个库中，余数为0的放到第一个库，余数为1的放到第二个库，以此类推。这样同一个用户的数据会分散到同一个库中，如果查询条件带有cusno字段，则可明确定位到相应库去查询。&lt;/p&gt;
&lt;p data-anchor-id=&quot;47xh&quot;&gt;优点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;e6ln&quot;&gt;&lt;li&gt;数据分片相对比较均匀，不容易出现热点和并发访问的瓶颈&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;7dep&quot;&gt;缺点：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;ru3w&quot;&gt;&lt;li&gt;后期分片集群扩容时，需要迁移旧的数据（使用一致性hash算法能较好的避免这个问题）&lt;/li&gt;
&lt;li&gt;容易面临跨分片查询的复杂问题。比如上例中，如果频繁用到的查询条件中不带cusno时，将会导致无法定位数据库，从而需要同时向4个库发起查询，再在内存中合并数据，取最小集返回给应用，分库反而成为拖累。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514015805333-1409715906.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二-分库分表带来的问题&quot; data-anchor-id=&quot;ftmo&quot;&gt;二. 分库分表带来的问题&lt;/h2&gt;
&lt;p data-anchor-id=&quot;v2eb&quot;&gt;分库分表能有效的环节单机和单库带来的性能瓶颈和压力，突破网络IO、硬件资源、连接数的瓶颈，同时也带来了一些问题。下面将描述这些技术挑战以及对应的解决思路。 &lt;/p&gt;
&lt;h3 id=&quot;1事务一致性问题&quot; data-anchor-id=&quot;ww6y&quot;&gt;1、事务一致性问题&lt;/h3&gt;
&lt;h4 data-anchor-id=&quot;t5gz&quot;&gt;分布式事务&lt;/h4&gt;
&lt;p data-anchor-id=&quot;s2d0&quot;&gt;当更新内容同时分布在不同库中，不可避免会带来跨库事务问题。跨分片事务也是&lt;span&gt;分布式事务，没有简单的方案，一般可使用&quot;XA协议&quot;和&quot;两阶段提交&quot;处理&lt;/span&gt;。&lt;/p&gt;
&lt;p data-anchor-id=&quot;km3j&quot;&gt;分布式事务能最大限度保证了数据库操作的原子性。但在提交事务时需要协调多个节点，推后了提交事务的时间点，延长了事务的执行时间。导致事务在访问共享资源时发生冲突或死锁的概率增高。随着数据库节点的增多，这种趋势会越来越严重，从而成为系统在数据库层面上水平扩展的枷锁。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;bq3t&quot;&gt;最终一致性&lt;/h4&gt;
&lt;p data-anchor-id=&quot;m1xc&quot;&gt;对于那些性能要求很高，但对一致性要求不高的系统，&lt;span&gt;往往不苛求系统的实时一致性，只要在允许的时间段内达到最终一致性即可，可采用事务补偿的方式&lt;/span&gt;。与事务在执行中发生错误后立即回滚的方式不同，事务补偿是一种事后检查补救的措施，一些常见的实现方法有：对数据进行对账检查，基于日志进行对比，定期同标准数据来源进行同步等等。事务补偿还要结合业务系统来考虑。&lt;/p&gt;

&lt;h3 id=&quot;2跨节点关联查询-join-问题&quot; data-anchor-id=&quot;sad2&quot;&gt;2、跨节点关联查询 join 问题&lt;/h3&gt;
&lt;p data-anchor-id=&quot;8fxk&quot;&gt;切分之前，系统中很多列表和详情页所需的数据可以通过sql join来完成。而切分之后，数据可能分布在不同的节点上，此时join带来的问题就比较麻烦了，考虑到性能，尽量避免使用join查询。&lt;/p&gt;
&lt;p data-anchor-id=&quot;d29f&quot;&gt;解决这个问题的一些方法：&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;doi8&quot;&gt;1）全局表&lt;/h4&gt;
&lt;p data-anchor-id=&quot;hy4e&quot;&gt;全局表，也可看做是&quot;数据字典表&quot;，就是系统中所有模块都可能依赖的一些表，为了避免跨库join查询，&lt;span&gt;可以将这类表在每个数据库中都保存一份&lt;/span&gt;。这些数据通常很少会进行修改，所以也不担心一致性的问题。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;mtw0&quot;&gt;2）字段冗余&lt;/h4&gt;
&lt;p data-anchor-id=&quot;aj8i&quot;&gt;一种典型的反范式设计，&lt;span&gt;利用空间换时间&lt;/span&gt;，为了性能而避免join查询。例如：订单表保存userId时候，也将userName冗余保存一份，这样查询订单详情时就不需要再去查询&quot;买家user表&quot;了。&lt;/p&gt;
&lt;p data-anchor-id=&quot;6kve&quot;&gt;但这种方法适用场景也有限，比较适用于依赖字段比较少的情况。而冗余字段的数据一致性也较难保证，就像上面订单表的例子，买家修改了userName后，是否需要在历史订单中同步更新呢？这也要结合实际业务场景进行考虑。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;ivwe&quot;&gt;3）数据组装&lt;/h4&gt;
&lt;p data-anchor-id=&quot;aelq&quot;&gt;在系统层面，&lt;span&gt;分两次查询&lt;/span&gt;，第一次查询的结果集中找出关联数据id，然后根据id发起第二次请求得到关联数据。最后将获得到的数据进行字段拼装。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;4i4v&quot;&gt;4）ER分片&lt;/h4&gt;
&lt;p data-anchor-id=&quot;zrfs&quot;&gt;关系型数据库中，如果可以先确定表之间的关联关系，并&lt;span&gt;将那些存在关联关系的表记录存放在同一个分片上&lt;/span&gt;，那么就能较好的避免跨分片join问题。在1:1或1:n的情况下，通常按照主表的ID主键切分。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514020222377-732069408.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;y9b0&quot;&gt;这样一来，Data Node1上面的order订单表与orderdetail订单详情表就可以通过orderId进行局部的关联查询了，Data Node2上也一样。&lt;/p&gt;

&lt;h3 id=&quot;3跨节点分页排序函数问题&quot; data-anchor-id=&quot;umi8&quot;&gt;3、跨节点分页、排序、函数问题&lt;/h3&gt;
&lt;p data-anchor-id=&quot;p9qu&quot;&gt;跨节点多库进行查询时，会出现limit分页、order by排序等问题。分页需要按照指定字段进行排序，当排序字段就是分片字段时，通过分片规则就比较容易定位到指定的分片；当排序字段非分片字段时，就变得比较复杂了。需要&lt;span&gt;先在不同的分片节点中将数据进行排序并返回，然后将不同分片返回的结果集进行汇总和再次排序，最终返回给用户&lt;/span&gt;。如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514020338000-1035095990.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;1gvq&quot;&gt;上图中只是取第一页的数据，对性能影响还不是很大。但是如果取得页数很大，情况则变得复杂很多，因为各分片节点中的数据可能是随机的，为了排序的准确性，需要将所有节点的前N页数据都排序好做合并，最后再进行整体的排序，这样的操作时很耗费CPU和内存资源的，所以页数越大，系统的性能也会越差。&lt;/p&gt;
&lt;p data-anchor-id=&quot;7spy&quot;&gt;在使用Max、Min、Sum、Count之类的函数进行计算的时候，也需要&lt;span&gt;先在每个分片上执行相应的函数，然后将各个分片的结果集进行汇总和再次计算，最终将结果返回&lt;/span&gt;。如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514020407207-1066476374.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;h3 data-anchor-id=&quot;q6fr&quot;&gt; &lt;/h3&gt;
&lt;h3 id=&quot;4全局主键避重问题&quot; data-anchor-id=&quot;q6fr&quot;&gt;4、全局主键避重问题&lt;/h3&gt;
&lt;p data-anchor-id=&quot;1qxi&quot;&gt;在分库分表环境中，由于表中数据同时存在不同数据库中，主键值平时使用的自增长将无用武之地，某个分区数据库自生成的ID无法保证全局唯一。因此需要单独设计全局主键，以避免跨库主键重复问题。有一些常见的主键生成策略：&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;52ye&quot;&gt;1）UUID&lt;/h4&gt;
&lt;p data-anchor-id=&quot;5bxp&quot;&gt;UUID标准形式包含32个16进制数字，分为5段，形式为8-4-4-4-12的36个字符，例如：550e8400-e29b-41d4-a716-446655440000&lt;/p&gt;
&lt;p data-anchor-id=&quot;h0i7&quot;&gt;UUID是主键是最简单的方案，本地生成，性能高，没有网络耗时。但缺点也很明显，由于UUID非常长，会占用大量的存储空间；另外，作为主键建立索引和基于索引进行查询时都会存在性能问题，在InnoDB下，UUID的无序性会引起数据位置频繁变动，导致分页。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;570p&quot;&gt;2）结合数据库维护主键ID表&lt;/h4&gt;
&lt;p data-anchor-id=&quot;qm2y&quot;&gt;在数据库中建立 sequence 表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `sequence` (  
  `id` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; auto_increment,  
  `stub` &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,  
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;  (`id`),  
  &lt;/span&gt;&lt;span&gt;UNIQUE&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; `stub` (`stub`)  
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;MyISAM;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stub字段设置为唯一索引，同一stub值在sequence表中只有一条记录，可以同时为多张表生成全局ID。sequence表的内容，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----------------+------+  &lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; id                &lt;span&gt;|&lt;/span&gt; stub &lt;span&gt;|&lt;/span&gt;  
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----------------+------+  &lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;72157623227190423&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;    a &lt;span&gt;|&lt;/span&gt;  
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----------------+------+  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 MyISAM 存储引擎而不是 InnoDB，以获取更高的性能。MyISAM使用的是表级别的锁，对表的读写是串行的，所以不用担心在并发时两次读取同一个ID值。&lt;/p&gt;
&lt;p data-anchor-id=&quot;odfw&quot;&gt;当需要全局唯一的64位ID时，执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;REPLACE&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; sequence (stub) &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; LAST_INSERT_ID();  
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-anchor-id=&quot;y6lh&quot;&gt;这两条语句是Connection级别的，select last_insert_id() 必须与 replace into 在同一数据库连接下才能得到刚刚插入的新ID。&lt;/p&gt;
&lt;p data-anchor-id=&quot;w9sn&quot;&gt;使用replace into代替insert into好处是避免了表行数过大，不需要另外定期清理。&lt;/p&gt;
&lt;p data-anchor-id=&quot;q3dx&quot;&gt;此方案较为简单，但缺点也明显：存在单点问题，强依赖DB，当DB异常时，整个系统都不可用。配置主从可以增加可用性，但当主库挂了，主从切换时，数据一致性在特殊情况下难以保证。另外性能瓶颈限制在单台MySQL的读写性能。&lt;/p&gt;
&lt;p data-anchor-id=&quot;do9o&quot;&gt;&lt;span&gt;flickr团队使用的一种主键生成策略，与上面的sequence表方案类似，但更好的解决了单点和性能瓶颈的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;ddoy&quot;&gt;这一方案的整体思想是：建立2个以上的全局ID生成的服务器，每个服务器上只部署一个数据库，每个库有一张sequence表用于记录当前全局ID。表中ID增长的步长是库的数量，起始值依次错开，这样能将ID的生成散列到各个数据库上。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514020903056-1177673891.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;7wzy&quot;&gt;由两个数据库服务器生成ID，设置不同的auto_increment值。第一台sequence的起始值为1，每次步长增长2，另一台的sequence起始值为2，每次步长增长也是2。结果第一台生成的ID都是奇数（1, 3, 5, 7 ...），第二台生成的ID都是偶数（2, 4, 6, 8 ...）。&lt;/p&gt;
&lt;p data-anchor-id=&quot;jddd&quot;&gt;这种方案将生成ID的压力均匀分布在两台机器上。同时提供了系统容错，第一台出现了错误，可以自动切换到第二台机器上获取ID。但有以下几个缺点：系统添加机器，水平扩展时较复杂；每次获取ID都要读写一次DB，DB的压力还是很大，只能靠堆机器来提升性能。&lt;/p&gt;
&lt;p data-anchor-id=&quot;645s&quot;&gt;&lt;span&gt;可以基于flickr的方案继续优化，使用批量的方式降低数据库的写压力，每次获取一段区间的ID号段，用完之后再去数据库获取，可以大大减轻数据库的压力&lt;/span&gt;。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514021005283-2029806965.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;3qt7&quot;&gt;还是使用两台DB保证可用性，数据库中只存储当前的最大ID。ID生成服务每次批量拉取6个ID，先将max_id修改为5，当应用访问ID生成服务时，就不需要访问数据库，从号段缓存中依次派发0~5的ID。当这些ID发完后，再将max_id修改为11，下次就能派发6~11的ID。于是，数据库的压力降低为原来的1/6。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;q1ke&quot;&gt;3）Snowflake分布式自增ID算法&lt;/h4&gt;
&lt;p data-anchor-id=&quot;erje&quot;&gt;Twitter的snowflake算法解决了分布式系统生成全局ID的需求，生成64位的Long型数字，组成部分：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;zquj&quot;&gt;&lt;li&gt;第一位未使用&lt;/li&gt;
&lt;li&gt;接下来41位是毫秒级时间，41位的长度可以表示69年的时间&lt;/li&gt;
&lt;li&gt;5位datacenterId，5位workerId。10位的长度最多支持部署1024个节点&lt;/li&gt;
&lt;li&gt;最后12位是毫秒内的计数，12位的计数顺序号支持每个节点每毫秒产生4096个ID序列&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278254/201805/1278254-20180514021100630-1326514542.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;i8gj&quot;&gt;这样的好处是：毫秒数在高位，生成的ID整体上按时间趋势递增；不依赖第三方系统，稳定性和效率较高，理论上QPS约为409.6w/s（1000*2^12），并且整个分布式系统内不会产生ID碰撞；可根据自身业务灵活分配bit位。&lt;/p&gt;
&lt;p data-anchor-id=&quot;hx1f&quot;&gt;不足就在于：强依赖机器时钟，如果时钟回拨，则可能导致生成ID重复。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;g251&quot;&gt;综上&lt;/h4&gt;
&lt;p data-anchor-id=&quot;d3bo&quot;&gt;结合数据库和snowflake的唯一ID方案，可以参考业界较为成熟的解法：&lt;span&gt;&lt;a href=&quot;https://tech.meituan.com/MT_Leaf.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Leaf——美团点评分布式ID生成系统&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;，并考虑到了高可用、容灾、分布式下时钟等问题。&lt;/p&gt;

&lt;h3 id=&quot;5数据迁移扩容问题&quot; data-anchor-id=&quot;1xzk&quot;&gt;5、数据迁移、扩容问题&lt;/h3&gt;
&lt;p data-anchor-id=&quot;m58l&quot;&gt;当业务高速发展，面临性能和存储的瓶颈时，才会考虑分片设计，此时就不可避免的需要考虑历史数据迁移的问题。一般做法是先读出历史数据，然后按指定的分片规则再将数据写入到各个分片节点中。此外还需要根据当前的数据量和QPS，以及业务发展的速度，进行容量规划，推算出大概需要多少分片（一般建议单个分片上的单表数据量不超过1000W）&lt;/p&gt;
&lt;p data-anchor-id=&quot;mgis&quot;&gt;如果采用数值范围分片，只需要添加节点就可以进行扩容了，不需要对分片数据迁移。如果采用的是数值取模分片，则考虑后期的扩容问题就相对比较麻烦。&lt;/p&gt;
&lt;h2 id=&quot;三-什么时候考虑切分&quot; data-anchor-id=&quot;52rj&quot;&gt;三. 什么时候考虑切分&lt;/h2&gt;
&lt;p data-anchor-id=&quot;axbv&quot;&gt;下面讲述一下什么时候需要考虑做数据切分。&lt;/p&gt;
&lt;h3 data-anchor-id=&quot;fbdy&quot;&gt;1、能不切分尽量不要切分&lt;/h3&gt;
&lt;p data-anchor-id=&quot;iw8e&quot;&gt;并不是所有表都需要进行切分，主要还是看数据的增长速度。切分后会在某种程度上提升业务的复杂度，数据库除了承载数据的存储和查询外，协助业务更好的实现需求也是其重要工作之一。&lt;/p&gt;
&lt;p data-anchor-id=&quot;z7iz&quot;&gt;&lt;span&gt;不到万不得已不用轻易使用分库分表这个大招，避免&quot;过度设计&quot;和&quot;过早优化&quot;&lt;/span&gt;。分库分表之前，不要为分而分，先尽力去做力所能及的事情，例如：升级硬件、升级网络、读写分离、索引优化等等。当数据量达到单表的瓶颈时候，再考虑分库分表。&lt;/p&gt;
&lt;h3 data-anchor-id=&quot;au0i&quot;&gt;2、数据量过大，正常运维影响业务访问&lt;/h3&gt;
&lt;p data-anchor-id=&quot;tlba&quot;&gt;这里说的运维，指：&lt;/p&gt;
&lt;p data-anchor-id=&quot;5660&quot;&gt;1）对数据库备份，如果单表太大，备份时需要大量的磁盘IO和网络IO。例如1T的数据，网络传输占50MB时候，需要20000秒才能传输完毕，整个过程的风险都是比较高的&lt;/p&gt;
&lt;p data-anchor-id=&quot;wgkg&quot;&gt;2）对一个很大的表进行DDL修改时，MySQL会锁住全表，这个时间会很长，这段时间业务不能访问此表，影响很大。如果使用pt-online-schema-change，使用过程中会创建触发器和影子表，也需要很长的时间。在此操作过程中，都算为风险时间。将数据表拆分，总量减少，有助于降低这个风险。&lt;/p&gt;
&lt;p data-anchor-id=&quot;pcrn&quot;&gt;3）大表会经常访问与更新，就更有可能出现锁等待。将数据切分，用空间换时间，变相降低访问压力&lt;/p&gt;
&lt;h3 data-anchor-id=&quot;1nwm&quot;&gt;3、随着业务发展，需要对某些字段垂直拆分&lt;/h3&gt;
&lt;p data-anchor-id=&quot;obqi&quot;&gt;举个例子，假如项目一开始设计的用户表如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
id                   &lt;span&gt;bigint&lt;/span&gt;&lt;span&gt;             #用户的ID
name                 &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;            #用户的名字
last_login_time      &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;           #最近登录时间
personal_info        &lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;               #私人信息
.....                                   #其他信息字段&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在项目初始阶段，这种设计是满足简单的业务需求的，也方便快速迭代开发。而当业务快速发展时，用户量从10w激增到10亿，用户非常的活跃，每次登录会更新 last_login_name 字段，使得 user 表被不断update，压力很大。而其他字段：id, name, personal_info 是不变的或很少更新的，此时在业务角度，就要将 last_login_time 拆分出去，新建一个 user_time 表。&lt;/p&gt;
&lt;p data-anchor-id=&quot;dzyy&quot;&gt;personal_info 属性是更新和查询频率较低的，并且text字段占据了太多的空间。这时候，就要对此垂直拆分出 user_ext 表了。&lt;/p&gt;
&lt;h3 data-anchor-id=&quot;dii1&quot;&gt;4、数据量快速增长&lt;/h3&gt;
&lt;p data-anchor-id=&quot;z8rj&quot;&gt;随着业务的快速发展，单表中的数据量会持续增长，当性能接近瓶颈时，就需要考虑水平切分，做分库分表了。此时一定要选择合适的切分规则，提前预估好数据容量&lt;/p&gt;
&lt;h3 data-anchor-id=&quot;mi08&quot;&gt;5、安全性和可用性&lt;/h3&gt;
&lt;p data-anchor-id=&quot;tg5b&quot;&gt;鸡蛋不要放在一个篮子里。在业务层面上垂直切分，将不相关的业务的数据库分隔，因为每个业务的数据量、访问量都不同，不能因为一个业务把数据库搞挂而牵连到其他业务。利用水平切分，当一个数据库出现问题时，不会影响到100%的用户，每个库只承担业务的一部分数据，这样整体的可用性就能提高。&lt;/p&gt;
&lt;h2 id=&quot;四-案例分析&quot; data-anchor-id=&quot;fl9j&quot;&gt;四. 案例分析&lt;/h2&gt;
&lt;h3 id=&quot;用户中心&quot; data-anchor-id=&quot;qxfo&quot;&gt;1、用户中心业务场景&lt;/h3&gt;
&lt;p data-anchor-id=&quot;yho5&quot;&gt;用户中心是一个非常常见的业务，主要提供用户注册、登录、查询/修改等功能，其核心表为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;User&lt;/span&gt;&lt;span&gt;(uid, login_name, passwd, sex, age, nickname)

uid为用户ID,  主键
login_name, passwd, sex, age, nickname,  用户属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-anchor-id=&quot;sfft&quot;&gt;&lt;span&gt;&lt;code&gt;任何脱离业务的架构设计都是耍流氓&lt;/code&gt;&lt;/span&gt;，在进行分库分表前，需要对业务场景需求进行梳理：&lt;/p&gt;
&lt;ul data-anchor-id=&quot;2x7e&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;用户侧：前台访问，访问量较大，需要保证高可用和高一致性。主要有两类需求：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户登录：通过login_name/phone/email查询用户信息，1%请求属于这种类型&lt;/li&gt;
&lt;li&gt;用户信息查询：登录之后，通过uid来查询用户信息，99%请求属这种类型&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;运营侧：后台访问，支持运营需求，按照年龄、性别、登陆时间、注册时间等进行分页的查询。是内部系统，访问量较低，对可用性、一致性的要求不高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;水平切分方法&quot; data-anchor-id=&quot;wrcs&quot;&gt;2、水平切分方法&lt;/h3&gt;
&lt;p data-anchor-id=&quot;dt7p&quot;&gt;当数据量越来越大时，需要对数据库进行水平切分，上文描述的切分方法有&quot;根据数值范围&quot;和&quot;根据数值取模&quot;。&lt;/p&gt;
&lt;p data-anchor-id=&quot;hgtc&quot;&gt;&lt;span&gt;&quot;根据数值范围&quot;&lt;/span&gt;：以主键uid为划分依据，按uid的范围将数据水平切分到多个数据库上。例如：user-db1存储uid范围为0~1000w的数据，user-db2存储uid范围为1000w~2000wuid数据。&lt;/p&gt;
&lt;ul data-anchor-id=&quot;zcxo&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;优点是：扩容简单，如果容量不够，只要增加新db即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;不足是：请求量不均匀，一般新注册的用户活跃度会比较高，所以新的user-db2会比user-db1负载高，导致服务器利用率不平衡&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;6prl&quot;&gt;&lt;span&gt;&quot;根据数值取模&quot;&lt;/span&gt;：也是以主键uid为划分依据，按uid取模的值将数据水平切分到多个数据库上。例如：user-db1存储uid取模得1的数据，user-db2存储uid取模得0的uid数据。&lt;/p&gt;
&lt;ul data-anchor-id=&quot;8mty&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;优点是：数据量和请求量分布均均匀&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;不足是：扩容麻烦，当容量不够时，新增加db，需要rehash。需要考虑对数据进行平滑的迁移。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;非uid的查询方法&quot; data-anchor-id=&quot;a448&quot;&gt;3、非uid的查询方法&lt;/h3&gt;
&lt;p data-anchor-id=&quot;5b35&quot;&gt;水平切分后，对于按uid查询的需求能很好的满足，可以直接路由到具体数据库。而按非uid的查询，例如login_name，就不知道具体该访问哪个库了，此时需要遍历所有库，性能会降低很多。&lt;/p&gt;
&lt;p data-anchor-id=&quot;fedq&quot;&gt;&lt;span&gt;对于用户侧，可以采用&quot;建立非uid属性到uid的映射关系&quot;的方案；对于运营侧，可以采用&quot;前台与后台分离&quot;的方案&lt;/span&gt;。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;qte3&quot;&gt;3.1、建立非uid属性到uid的映射关系&lt;/h4&gt;
&lt;p data-anchor-id=&quot;tn15&quot;&gt;&lt;span&gt;1）映射关系&lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;djjl&quot;&gt;例如：login_name不能直接定位到数据库，可以&lt;span&gt;建立&lt;code&gt;login_name→uid的映射关系&lt;/code&gt;，用索引表或缓存来存储&lt;/span&gt;。当访问login_name时，先通过映射表查询出login_name对应的uid，再通过uid定位到具体的库。&lt;/p&gt;
&lt;p data-anchor-id=&quot;v9pw&quot;&gt;映射表只有两列，可以承载很多数据，当数据量过大时，也可以对映射表再做水平切分。这类kv格式的索引结构，可以很好的使用cache来优化查询性能，而且映射关系不会频繁变更，缓存命中率会很高。&lt;/p&gt;
&lt;p data-anchor-id=&quot;vsfn&quot;&gt;&lt;span&gt;2）基因法&lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;nb7d&quot;&gt;分库基因：假如通过uid分库，分为16个库，采用uid%16的方式进行路由，此时是由uid的最后4bit来决定这行User数据具体落到哪个库上，那么这4bit可以看为分库基因。&lt;/p&gt;
&lt;p data-anchor-id=&quot;m5db&quot;&gt;上面的映射关系的方法需要额外存储映射表，按非uid字段查询时，还需要多一次数据库或cache的访问。如果想要消除多余的存储和查询，可以通过f函数取login_name的基因作为uid的分库基因。生成uid时，参考上文所述的分布式唯一ID生成方案，再加上最后4位bit值=f(login_name)。当查询login_name时，只需计算f(login_name)%16的值，就可以定位到具体的库。不过这样需要提前做好容量规划，预估未来几年的数据量需要分多少库，要预留一定bit的分库基因。&lt;/p&gt;
&lt;h4 data-anchor-id=&quot;6d8h&quot;&gt;3.2、前台与后台分离&lt;/h4&gt;
&lt;p data-anchor-id=&quot;ahds&quot;&gt;对于用户侧，主要需求是以单行查询为主，需要建立login_name/phone/email到uid的映射关系，可以解决这些字段的查询问题。&lt;/p&gt;
&lt;p data-anchor-id=&quot;8phf&quot;&gt;而对于运营侧，很多批量分页且条件多样的查询，这类查询计算量大，返回数据量大，对数据库的性能消耗较高。此时，如果和用户侧公用同一批服务或数据库，可能因为后台的少量请求，占用大量数据库资源，而导致用户侧访问性能降低或超时。&lt;/p&gt;
&lt;p data-anchor-id=&quot;nyai&quot;&gt;这类业务最好采用&quot;前台与后台分离&quot;的方案，&lt;span&gt;运营侧后台业务抽取独立的service和db，解决和前台业务系统的耦合&lt;/span&gt;。由于运营侧对可用性、一致性的要求不高，可以不访问实时库，而是&lt;span&gt;通过binlog异步同步数据到运营库进行访问。在数据量很大的情况下，还可以使用ES搜索引擎或Hive来满足后台复杂的查询方式。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;五-支持分库分表中间件&quot; data-anchor-id=&quot;3ewh&quot;&gt;五. 支持分库分表中间件&lt;/h2&gt;
&lt;p data-anchor-id=&quot;xm9f&quot;&gt;站在巨人的肩膀上能省力很多，目前分库分表已经有一些较为成熟的开源解决方案：&lt;/p&gt;
&lt;h2 id=&quot;六-参考&quot; data-anchor-id=&quot;73fa&quot;&gt;六. 参考&lt;/h2&gt;
&lt;p data-anchor-id=&quot;nbee&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27871998&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;数据库分布式架构扫盲——分库分表（及银行核心系统适用性思考）&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/jshen/p/7682502.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;分库分表的思想&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/key-steps-and-likely-problems-of-horizontal-split-table&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;水平分库分表的关键步骤以及可能遇到的问题&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;a href=&quot;http://www.ywnds.com/?p=7239&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;从原则、方案、策略及难点阐述分库分表&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;br/&gt;&lt;a href=&quot;https://tech.meituan.com/MT_Leaf.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Leaf——美团点评分布式ID生成系统&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 18:26:00 +0000</pubDate>
<dc:creator>butterfly100</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/butterfly100/p/9034281.html</dc:identifier>
</item>
<item>
<title>Flask构建微电影（一） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/9034167.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/9034167.html</guid>
<description>&lt;h2&gt;第一章、项目介绍&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 1.1.前言   &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;/h3&gt;
&lt;p&gt;       本教程我将带领大家如何使用flask框架开发微电影网站。Flask是python中最受欢迎的轻量级web框架，flask扩展丰富，冗余度小，可自由选择组合各种插件，性能优越。&lt;/p&gt;
&lt;p&gt;相比其他web框架十分轻量级，其优雅的设计哲学，易于学习掌握。小型项目快速开发，大型项目毫无压力。由于flask灵活开发的特点,python高手都会青睐flask,正基于&lt;/p&gt;
&lt;p&gt;此，它被许多公司应用在项目开发中，成为很多创业公司以及个人创业者门追捧的web开发框架，本教程主要使用flask构建一个个性化定制的前台结合后台管理系统的微&lt;/p&gt;
&lt;p&gt;电影网站，项目开发过程严格按照互联网公司的标准流程。让学习者在开发中写出更优雅简练的代码。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 1.2.掌握的技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;通过学习本教程，你将掌握flask框架以下知识：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;学会使用整型、浮点型、路径性、字符串型正则表达式路由转化器&lt;/li&gt;
&lt;li&gt;学会使用ost与get请求、上传文件、cookie获取与响应、404处理&lt;/li&gt;
&lt;li&gt;学会使用模板自动转义、定义过滤器、定义全局上下文处理器、jinja2语法、包含、继承、定义宏&lt;/li&gt;
&lt;li&gt;学会使用flask-wtf定义表单模型、字段类型、字段验证、视图处理表单、模板使用表单&lt;/li&gt;
&lt;li&gt;学会使用flask-sqlalchemy定义数据库模型、添加数据、修改数据、查询数据、删除数据、数据库事件、数据迁移&lt;/li&gt;
&lt;li&gt;学会使用蓝图优化项目结构，实现微电影网站前台于后台业务逻辑&lt;/li&gt;
&lt;li&gt;学会flask的部署方法、安装编译nginx服务、安装编译python3.6服务、安装mysql服务以及通过nginx反向代理对视频流媒体限制下载速率、限制单个IP能发起的播放连接数　　　&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;之后我们通过项目实战，结合各种flask的插件配置及使用，让大家体会flask的看家本领微内核+扩展插件，带领你前所未有的快感。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.3.用到的扩展插件 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;本教程用到的扩展插件有&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;werkzug工具箱&lt;/li&gt;
&lt;li&gt;pymysql数据库驱动&lt;/li&gt;
&lt;li&gt;sqlalchemy数据库orm&lt;/li&gt;
&lt;li&gt;wtforms表单验证工具&lt;/li&gt;
&lt;li&gt;jinjia2模板引擎&lt;/li&gt;
&lt;li&gt;flask-script命令行脚本&lt;/li&gt;
&lt;li&gt;functools定义高阶函数&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.4.视频技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;最后还将学到更实用的视频技术&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;jwplayer播放器插件&lt;/li&gt;
&lt;li&gt;视频限速限IP访问&lt;/li&gt;
&lt;li&gt;flv、MP4视频格式支持&lt;/li&gt;
&lt;li&gt;nginx点播实现&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.5.章节安排&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;接下来介绍详细教程安排，教程一共十一章，大致分为六部分&lt;/p&gt;
&lt;p&gt;（1）教程介绍&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;介绍微电影网站整体开发流程&lt;/li&gt;
&lt;li&gt;flask简介&lt;/li&gt;
&lt;li&gt;学完教程掌握的知识点&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（2）环境搭建与工具&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;搭建开发环境安装依赖包、virtualenv虚拟化环境的使用&lt;/li&gt;
&lt;li&gt;pycharm编辑器的使用、介绍pip下载工具的使用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（3）项目优化与模型设计&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用flask的蓝图Blueprint规划项目结构&lt;/li&gt;
&lt;li&gt;使用flask sqlalchemy定义和业务需求相关的数据库模型&lt;/li&gt;
&lt;li&gt;结合mysql数据库生成数据表&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（4）前端搭建&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实现前台后台html布局页面搭建&lt;/li&gt;
&lt;li&gt;学习jinjia2引擎语法&lt;/li&gt;
&lt;li&gt;引入静态资源文件、404错误页面的处理&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（5）后端开发&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;flask sqlalchemy 结合mysql数据表进行增删改查操作&lt;/li&gt;
&lt;li&gt;flask数据分页查询、路由装饰器定义、模板中变量调用登录会话机制、上传文件&lt;/li&gt;
&lt;li&gt;flask wtforms表单验证、flask自定义应用上下文、自定义权限装饰器对管理系统进行基于权限的访问控制&lt;/li&gt;
&lt;li&gt;flask的多表关联查询、关键字模糊查询等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（6）网站部署&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实现在centos服务器行搭建nginx+mysql+python环境&lt;/li&gt;
&lt;li&gt;使用nginx反向代理多端口多进程部署微电影网站&lt;/li&gt;
&lt;li&gt;配置nginx流媒体访问限制参数&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.6.技术储备要求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;只要你是pythoner，你就应该学会flask，作为一个合格的pytoner,只掌握一个框架是不够的，如果你有过其它python框架，例如django的使用经验，对比不同框架来学习，你将收获更多。多一项技能，就多一分工作机会哦！学习前，希望你符合以下技术储备要求，学习本教程的必备基础是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;有自学能力&lt;/li&gt;
&lt;li&gt;需要掌握python基本语法&lt;/li&gt;
&lt;li&gt;会使用mysql数据库&lt;/li&gt;
&lt;li&gt;会liunx基本操作&lt;/li&gt;
&lt;li&gt;有前端基础知识&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;小伙伴们还在等什么，一起来实战吧！&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.7.系统功能介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;前台&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;会员登录及注册&lt;/li&gt;
&lt;li&gt;会员中心&lt;/li&gt;
&lt;li&gt;电影播放&lt;/li&gt;
&lt;li&gt;电影评论&lt;/li&gt;
&lt;li&gt;收藏电影&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;后台&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;管理员登录&lt;/li&gt;
&lt;li&gt;修改密码&lt;/li&gt;
&lt;li&gt;标签管理&lt;/li&gt;
&lt;li&gt;上映预告管理&lt;/li&gt;
&lt;li&gt;会员管理&lt;/li&gt;
&lt;li&gt;评论管理&lt;/li&gt;
&lt;li&gt;收藏管理&lt;/li&gt;
&lt;li&gt;角色管理&lt;/li&gt;
&lt;li&gt;权限管理&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;开发及生产环境&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;win7&lt;/li&gt;
&lt;li&gt;python3&lt;/li&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;html5&lt;/li&gt;
&lt;li&gt;flask&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;pycharm&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.8.python web框架对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;三种web框架的比较&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Flask 扩展丰富，冗余度小，可自由选择组合各种插件，性能优越，相比其他web框架十分轻量级，其优雅的&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　   设计哲学易于学习掌握，小型项目快速开发，大型项目毫无压力，FLask灵活开发，python高手基本都会喜欢flask&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Django 是重量级全栈型web框架，虽然功能强大，但冗余度高，自带ORM和模板引擎，灵活和自由度不够高&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　    开发小型项目时显得过于臃肿与庞大&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Tornado 是一个强大的、支持协程、高并发且可扩展的web服务器，发布于2009年9月，应用于FriendFeed&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　    Facebook等社交网站。Tornado的强项在于可以利用他的异步协程机制开发高并发的服务器系统&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.9.flask简介&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;flask简单介绍&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;轻量级web应用框架&lt;/li&gt;
&lt;li&gt;WSGI工具箱采用Werkzeug&lt;/li&gt;
&lt;li&gt;模板引擎则使用Jinja2&lt;/li&gt;
&lt;li&gt;Flask使用BSD授权&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.10.“微内核”框架简介&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;微内核&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;称为“microframework”，简单的核心，用extension增加其他功能。&lt;/li&gt;
&lt;li&gt;没有默认的数据库、窗体验证工具&lt;/li&gt;
&lt;li&gt;保留扩展的弹性，可用Flask-extension加入这些功能：ORM、窗体验证工具文件上传、各种开放方式身份验证技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第二章、环境搭建&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;2.1.虚拟环境搭建&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）环境变量设置&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;桌面新建文件夹Envs&lt;/li&gt;
&lt;li&gt;新建环境变量：以后创建虚拟环境会自动保存到这个路径&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180407151455955-1352375689.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）虚拟环境安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pip install virtualenv

pip install virtualenvwrapper-&lt;span&gt;win
  
mkvirtualenv flask_project    #创建虚拟环境
&lt;span readability=&quot;1&quot;&gt;
workon                       #查看有哪些虚拟环境

workon flask_project      #进入创建的虚拟环境
&lt;span readability=&quot;2&quot;&gt;
deactivate.bat      #退出虚拟环境&lt;p&gt;&lt;span&gt;activate.bat        #激活虚拟环境&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.2.第一个flask程序&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）flask的安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install -i https://pypi.douban.com/simple flask
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）创建项目&lt;/p&gt;
&lt;p&gt;创建项目movie_project,然后创建app.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化flask对象&lt;/span&gt;
app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将'/'和函数index的对应关系加到路由中&lt;/span&gt;
@app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器访问：http://127.0.0.1:5000/&lt;/p&gt;

</description>
<pubDate>Sun, 13 May 2018 17:31:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/9034167.html</dc:identifier>
</item>
<item>
<title>基于elk 实现nginx日志收集与数据分析。 - 文成小盆友</title>
<link>http://www.cnblogs.com/wenchengxiaopenyou/p/9034213.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenchengxiaopenyou/p/9034213.html</guid>
<description>&lt;p&gt;一。背景&lt;/p&gt;
&lt;p&gt;      前端web服务器为nginx，采用filebeat + logstash + elasticsearch + granfa 进行数据采集与展示，对客户端ip进行地域统计，监控服务器响应时间等。&lt;/p&gt;

&lt;p&gt;二。业务整体架构：&lt;/p&gt;
&lt;p&gt;      nginx日志落地——》filebear——》logstash——》elasticsearch——》grafna（展示）&lt;/p&gt;
&lt;p&gt;三。先上个效果图，慢慢去一步步实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/933015/201805/933015-20180513233911169-1869389160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上只是简单的几个实用的例子，实际上有多维度的数据之后还可以定制很多需要的内容，如终端ip访问数，国家、地区占比，访问前十的省份，请求方法占比，referer统计，user_agent统计，慢响应时间统计，更有世界地图坐标展示等等，只要有数据就能多维度进行展示。这里提供模板搜索位置大家可以查找参考：&lt;a href=&quot;https://grafana.com/dashboards&quot; target=&quot;_blank&quot;&gt;https://grafana.com/dashboards&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;四，准备条件&lt;/p&gt;
&lt;p&gt;需要具备如下条件：&lt;/p&gt;
&lt;p&gt;1.nginx日志落地，需要主要落地格式，以及各个字段对应的含义。&lt;/p&gt;
&lt;p&gt;2.安装filebeat。 filebeat轻量，功能相比较logstash而言比较单一。&lt;/p&gt;
&lt;p&gt;3.安装logstash 作为中继服务器。这里需要说明一下的是，起初设计阶段并没有计划使用filebeat，而是直接使用logstash发往elasticsearch，但是当前端机数量增加之后logstash数量也随之增加，同时发往elasticsearch的数量增大，logstash则会抛出由于elasticsearch 限制导致的错误，大家遇到后搜索相应错误的代码即可。为此只采用logstash作为中继。&lt;/p&gt;
&lt;p&gt;4.elasticsearch 集群。坑点是index templates的创建会影响新手操作 geoip模块。后文会有。&lt;/p&gt;
&lt;p&gt;5.grafana安装，取代传统的kibana，grafana有更友好、美观的展示界面。&lt;/p&gt;

&lt;p&gt;五。实现过程&lt;/p&gt;
&lt;p&gt;1.nginx日志落地配置&lt;/p&gt;
&lt;p&gt;  nginx日志格式、字段的内容和顺序都是高度可定制化的，将需要收集的字段内容排列好。定义一个log_format&lt;/p&gt;
&lt;p&gt;  定义的形势实际上直接决定了logstash配置中对于字段抽取的模式，这里有两种可用，一种是直接在nginx日志中拼接成json的格式，在logstash中用codec =&amp;gt; &quot;json&quot;来转换，&lt;/p&gt;
&lt;p&gt;  一种是常规的甚至是默认的分隔符的格式，在logstash中需要用到grok来进行匹配，这个会是相对麻烦些。两种方法各有优点。直接拼接成json的操作比较简单，但是在转码过程中&lt;/p&gt;
&lt;p&gt;  会遇到诸如 \x 无法解析的情况。 这里我也遇到过，如有必要后续会详谈。采用grok来匹配的方法相对难操作，但是准确性有提升。我们这里采用的是第一种方法，下面logstash部分&lt;/p&gt;
&lt;p&gt;  也会给出采用grok的例子。   nginx日志中日志格式定义如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
log_format access_json   '{&quot;timestamp&quot;:&quot;$time_iso8601&quot;,'
                        '&quot;hostname&quot;:&quot;$hostname&quot;,'
                        '&quot;ip&quot;:&quot;$remote_addrx&quot;,'
                        '&quot;request_method&quot;:&quot;$request_method&quot;,'
                        '&quot;domain&quot;:&quot;XXXX&quot;,'
                        '&quot;size&quot;:$body_bytes_sent,'
                        '&quot;status&quot;: $status,'
                        '&quot;responsetime&quot;:$request_time,'
                        '&quot;sum&quot;:&quot;1&quot;'
                        '}';
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.filebeat配置文件&lt;/p&gt;
&lt;p&gt;   关于filebeat更多内容请参考&lt;a href=&quot;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   配置文件内容：filebeat.yml  这里应该不会遇到坑。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
filebeat.prospectors:
- input_type: log
  paths:
    - &lt;span&gt;/data0/logs/log_json/*.log      #nginx日志路径&lt;/span&gt;

output.logstash:
    hosts: [&quot;xxxx.xxxx.xxxx.xxx:12121&quot;]   #logstash 服务器地址
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.logstahs配置文件内容：&lt;/p&gt;
&lt;p&gt;这里是针对json已经拼接号，直接进行json转码的情况：&lt;/p&gt;
&lt;p&gt;需要注意如下：&lt;/p&gt;
&lt;p&gt;   1）date模块必须有，否则会造成数据无法回填导致最终的图像出现锯齿状影响稳定性（原因是排列时间并不是日志产生的时间，而是进入logstash的时间）。这里后面的  yyyy-MM-dd'T'HH:mm:ssZZ   需要根据你日志中的日期格式进行匹配匹配规则见：&lt;a href=&quot;https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;　2）需要说明的是我下面去掉了好多的字段（remove_field），原因是我们数据量大，es服务器有限。 可以根据需要随时调整收集的字段。&lt;/p&gt;
&lt;p&gt;　3)  geoip 仅需要指定源ip字段名称即可，fields并不是必须的，我加入的原因还是由于资源有限导致的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
input {
    beats {
    port =&amp;gt; 12121
    host =&amp;gt; &quot;10.13.0.80&quot;
    codec =&amp;gt; &quot;json&quot;
    }
}

filter {
    date {
      match =&amp;gt; [ &quot;timestamp&quot;, &quot;yyyy-MM-dd'T'HH:mm:ssZZ&quot; ]
      #timezone =&amp;gt; &quot;Asia/Shanghai&quot;
      #timezone =&amp;gt; &quot;+00:00&quot;
    }
    mutate {
      convert =&amp;gt; [ &quot;status&quot;,&quot;integer&quot; ]
      convert =&amp;gt; [ &quot;sum&quot;,&quot;integer&quot; ]
      convert =&amp;gt; [ &quot;size&quot;,&quot;integer&quot; ]
      remove_field =&amp;gt; &quot;message&quot;
      remove_field =&amp;gt; &quot;source&quot;
      remove_field =&amp;gt; &quot;tags&quot;
      remove_field =&amp;gt; &quot;beat&quot;
      remove_field =&amp;gt; &quot;offset&quot;
      remove_field =&amp;gt; &quot;type&quot;
      remove_field =&amp;gt; &quot;@source&quot;
      remove_field =&amp;gt; &quot;input_type&quot;
      remove_field =&amp;gt; &quot;@version&quot;
      remove_field =&amp;gt; &quot;host&quot;
      remove_field =&amp;gt; &quot;client&quot;
      #remove_field =&amp;gt; &quot;request_method&quot;
      remove_field =&amp;gt; &quot;size&quot;
      remove_field =&amp;gt; &quot;timestamp&quot;
      #remove_field =&amp;gt; &quot;domain&quot;
      #remove_field =&amp;gt; &quot;ip&quot;
    }
    geoip {
      source =&amp;gt; &quot;ip&quot;
      fields =&amp;gt; [&quot;country_name&quot;, &quot;city_name&quot;, &quot;timezone&quot;,&quot;region_name&quot;,&quot;location&quot;]
    }
}

output {
    elasticsearch {
       hosts =&amp;gt; [&quot;xxx:19200&quot;,&quot;xxx:19200&quot;,&quot;xxx:19200&quot;]
       user =&amp;gt; &quot;xxx&quot;
       password =&amp;gt; &quot;xxx&quot;
       index =&amp;gt; &quot;logstash-suda-alllog-%{+YYYY.MM.dd}&quot;
       flush_size =&amp;gt; 10000
       idle_flush_time =&amp;gt; 35
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面给出一个采用grok的例子：&lt;/p&gt;
&lt;p&gt;       其中match内的内容不用参考我的，需要根据你的字段个数，以及格式来定制。 这里其实是正则表达式。自带了一部分几乎就可以满足所有的需求了无需自己写了，可以参考：&lt;a href=&quot;https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns&quot; target=&quot;_blank&quot;&gt;https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns &lt;/a&gt; 直接用即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;input {
  file {
  type &lt;/span&gt;=&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  path &lt;/span&gt;=&amp;gt; [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/local/nginx/logs/main/*.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
  }
}
 
filter {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [type] == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [message] =~ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
    drop {}
  }
 
 
  grok {
    &lt;span&gt;match &lt;/span&gt;&lt;/span&gt;=&amp;gt; [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\[%{&lt;span&gt;HTTPDATE&lt;/span&gt;:log_timestamp}\] %{&lt;span&gt;HOSTNAME&lt;/span&gt;:server_name} \&quot;%{WORD:request_method} %{NOTSPACE:query_string} HTTP/%{NUMBER:httpversion}\&quot; \&quot;%{GREEDYDATA:http_user_agent}\&quot; %{NUMBER:status} %{IPORHOST:server_addr} \&quot;%{IPORHOST:remote_addr}\&quot; \&quot;%{NOTSPACE:http_referer}\&quot; %{NUMBER:body_bytes_sent} %{NUMBER:time_taken} %{GREEDYDATA:clf_body_bytes_sent} %{NOTSPACE:uri} %{NUMBER:m_request_time}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
  }
 
 
  date {
    match &lt;/span&gt;=&amp;gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log_timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dd/MMM/yyyy:mm:ss:SS Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
    timezone &lt;/span&gt;=&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Etc/UTC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  }
     
  mutate {
  convert &lt;/span&gt;=&amp;gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
  convert &lt;/span&gt;=&amp;gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body_bytes_sent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
  convert &lt;/span&gt;=&amp;gt; [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m_request_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 在提供一个高级的用法：&lt;/p&gt;
&lt;p&gt; ruby：强大的模块， 可以进行诸如时间转换，单位计算等，多个可以用分号隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  ruby {
  code &lt;/span&gt;=&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;event.set('logdateunix',event.get('@timestamp').to_i)&lt;span&gt;;&lt;/span&gt;event.set('request_time', event.get('m_request_time') / 1000000 )&lt;/span&gt;&lt;span&gt;&quot;  &lt;/span&gt;&lt;span&gt;
  }
 
  mutate {
   add_field &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http_host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%{server_name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;request_uri&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%{uri}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在windowns上使用lgostsh需要注意的是：（win上收集iis的日志，我想正常环境是不会用到的，但是我确实用到了。。。。。。）&lt;/p&gt;
&lt;p&gt;path路径一定要采用 linux中的分割符来拼接路径，用win的格式则正则不能实现，大家可以测试下。其他配置则无区别。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;input {
  file {
    type &lt;/span&gt;=&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    path &lt;/span&gt;=&amp;gt; [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:&lt;span&gt;/&lt;/span&gt;WINDOWS&lt;span&gt;/&lt;/span&gt;system32&lt;span&gt;/&lt;/span&gt;LogFiles&lt;span&gt;/&lt;/span&gt;W3SVC614874788&lt;span&gt;/&lt;/span&gt;*.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4.elasticsearch配置，集群的安装以及启动，调优这里不多说（说不完），需要注意的一个是，geoip location的格式，我这里采用的是index templates来实现的如下：&lt;/p&gt;
&lt;p&gt;最重要的是 &lt;strong&gt;&quot;location&quot; 定义 &lt;/strong&gt;（否则geoip_location字段格式有问题，无法拼接成坐标），其他可以根据情况自定：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;58&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
{
  &quot;order&quot;: 0,
  &quot;version&quot;: 50001,
  &quot;index_patterns&quot;: [
    &quot;suda-*&quot;
  ],
  &quot;settings&quot;: {
    &quot;index&quot;: {
      &quot;number_of_shards&quot;: &quot;5&quot;,
      &quot;number_of_replicas&quot;: &quot;1&quot;,
      &quot;refresh_interval&quot;: &quot;200s&quot;
    }
  },
  &quot;mappings&quot;: {
    &quot;_default_&quot;: {
      &quot;dynamic_templates&quot;: [
        {
          &quot;message_field&quot;: {
            &quot;path_match&quot;: &quot;message&quot;,
            &quot;mapping&quot;: {
              &quot;norms&quot;: false,
              &quot;type&quot;: &quot;text&quot;
            },
            &quot;match_mapping_type&quot;: &quot;string&quot;
          }
        },
        {
          &quot;string_fields&quot;: {
            &quot;mapping&quot;: {
              &quot;norms&quot;: false,
              &quot;type&quot;: &quot;text&quot;,
              &quot;fields&quot;: {
                &quot;keyword&quot;: {
                  &quot;ignore_above&quot;: 256,
                  &quot;type&quot;: &quot;keyword&quot;
                }
              }
            },
            &quot;match_mapping_type&quot;: &quot;string&quot;,
            &quot;match&quot;: &quot;*&quot;
          }
        }
      ],
      &quot;properties&quot;: {
        &quot;@timestamp&quot;: {
          &quot;type&quot;: &quot;date&quot;
        },
        &quot;geoip&quot;: {
          &quot;dynamic&quot;: true,
          &quot;properties&quot;: {
            &quot;ip&quot;: {
              &quot;type&quot;: &quot;ip&quot;
            },
            &quot;latitude&quot;: {
              &quot;type&quot;: &quot;half_float&quot;
            },
&lt;strong&gt;&lt;span&gt;            &quot;location&quot;: {
              &quot;type&quot;: &quot;geo_point&quot;
            },&lt;/span&gt;&lt;/strong&gt;
            &quot;longitude&quot;: {
              &quot;type&quot;: &quot;half_float&quot;
            }
          }
        },
        &quot;@version&quot;: {
          &quot;type&quot;: &quot;keyword&quot;
        }
      }
    }
  },
  &quot;aliases&quot;: {}
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5   grafana 安装以及模板创建，这个比较简单，安装完直接写语句即可附一个例子如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/933015/201805/933015-20180514010129109-1239049839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里的变量需要自定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/933015/201805/933015-20180514010452144-1925164311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 通过上面应该能够完成一个完整的收集和展示情况，这里实际上提供了一种可行的方法，并么有太大的具体操作。&lt;/p&gt;
&lt;p&gt; 希望多多交流&lt;/p&gt;
&lt;p&gt;推荐内容：kibana中文指南（有ibook版本，看着挺方便） 三斗室著&lt;/p&gt;
&lt;p&gt;　　　　　https://www.elastic.co/cn/  &lt;/p&gt;
&lt;p&gt;　　　　   https://grafana.com/dashboards&lt;/p&gt;
&lt;p&gt;　　　　   https://grafana.com/&lt;/p&gt;

</description>
<pubDate>Sun, 13 May 2018 17:13:00 +0000</pubDate>
<dc:creator>文成小盆友</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenchengxiaopenyou/p/9034213.html</dc:identifier>
</item>
<item>
<title>hdu-3071 Gcd &amp; Lcm game---质因数分解+状态压缩+线段树 - _努力努力再努力x</title>
<link>http://www.cnblogs.com/fzl194/p/9034201.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fzl194/p/9034201.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;题目链接：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3071&quot; target=&quot;_blank&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=3071&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;给定一个长度为n的序列m次操作，操作的种类一共有三种&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;查询&lt;br/&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;L :查询一个区间的所有的数的最小公倍数&lt;span id=&quot;MathJax-Element-1-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-1&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-2&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-3&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-4&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-5&quot; class=&quot;mi&quot;&gt;d&lt;span id=&quot;MathJax-Span-6&quot; class=&quot;mi&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;G :查询一个区间的所有的数的最大公约数&lt;span id=&quot;MathJax-Element-2-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;p&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-7&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-8&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-9&quot; class=&quot;mi&quot;&gt;m&lt;span id=&quot;MathJax-Span-10&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-11&quot; class=&quot;mi&quot;&gt;d&lt;span id=&quot;MathJax-Span-12&quot; class=&quot;mi&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;修改&lt;br/&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;C :将给定位置的值修改成&lt;span id=&quot;MathJax-Element-3-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-13&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-14&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-15&quot; class=&quot;mi&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;x&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;解题思路：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意数据范围，每个数字不超过100，所以100以内的质因子最多25个，如果直接求解lcm和gcd的话，long long也是存不下的，所以采用存储质因子的指数，但是如果每个节点存25个值，不仅会超内存，还会超时，所以采用位运算来存每个质因子出现的次数，大于10的质因子最多出现一次，所以只需要1位即可，小于10的有2 3 5 7，2最多出现6次，即2的6次方64，3最多出现4次，5最多出现2次，7最多出现2次&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以用3个bit存2的指数，3个bit存3的指数，2个存5，2个存7，其余的只需要1位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pos数组就存的是这些素数的指数具体存在哪一位&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; prime[] = {&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;17&lt;/span&gt;,&lt;span&gt;19&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;29&lt;/span&gt;,&lt;span&gt;31&lt;/span&gt;,&lt;span&gt;37&lt;/span&gt;,&lt;span&gt;41&lt;/span&gt;,&lt;span&gt;43&lt;/span&gt;,&lt;span&gt;47&lt;/span&gt;,&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;59&lt;/span&gt;,&lt;span&gt;61&lt;/span&gt;,&lt;span&gt;67&lt;/span&gt;,&lt;span&gt;71&lt;/span&gt;,&lt;span&gt;73&lt;/span&gt;,&lt;span&gt;79&lt;/span&gt;,&lt;span&gt;83&lt;/span&gt;,&lt;span&gt;89&lt;/span&gt;,&lt;span&gt;97&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; pos[] =   {&lt;span&gt;28&lt;/span&gt;,&lt;span&gt;25&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;21&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;19&lt;/span&gt;,&lt;span&gt;18&lt;/span&gt;,&lt;span&gt;17&lt;/span&gt;,&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;,&lt;span&gt;14&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0000 0000 0000 0000 0000 0000 0000 0000
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   |  | |
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    2   3  5 7
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用这些位表示各个素数出现的次数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;求解gcd和lcm的时候，需要求出不同素因子之间的最大值和最小值，所以需要对2 3 5 7分别求解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其余的由于只有1位可以利用&amp;amp;运算求解，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面自定义了Min和Max函数，求的就是x和y的gcd和lcm，这里的x和y以及求出的解并不是原来的值，而是存储的是素因子的指数表示的值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;宏定义的x和y的括号不能省略，因为参数可能是一个表达式，需要加上括号&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; _min(x, y) ((x) &amp;lt; (y) ? (x) : (y))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写成宏定义更快&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; _max(x, y) ((x) &amp;gt; (y) ? (x) : (y))&lt;span&gt;
inline &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Min(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _min(x&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;) | _min(x&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;) | _min(x&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;) | _min(x&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;) | ((x&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;)&amp;amp;(y&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;&lt;span&gt;));
}
inline &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Max(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _max(x&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;) | _max(x&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;) | _max(x&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;) | _max(x&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;) | ((x&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;)|(y&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;&lt;span&gt;));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;解释一下上面的_min(x&amp;amp;&lt;span data-mce-=&quot;&quot;&gt;0x70000000, y&amp;amp;&lt;span data-mce-=&quot;&quot;&gt;0x70000000)&lt;/span&gt;&lt;/span&gt; 0x70000000 就是16进制的数字，转化成2进制是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;0&lt;span&gt;111&lt;/span&gt; 0000 0000 0000 0000 0000 0000 0000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由上面可知第31位到28位存的是2的指数，也就是上面红色部分，用x&amp;amp;0x70000000，就求出了x中2的指数，而且把其他位全部置成0，y也是一样，在其中取出最小值，也就是x和y的gcd中2的指数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同理求出3 5 7，对于后面的位都是1位，直接用&amp;amp;即可求出最小的指数次数，用 | 求出最大的指数次数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还需要两个函数，一个是将数字x进行分解，将其变成上述的形式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个函数是根据上述形式，求出解并模上p。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
inline &lt;span&gt;int&lt;/span&gt; turn(&lt;span&gt;int&lt;/span&gt; x)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将x质因数分解，并且将指数存在y的每一个bit上&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;25&lt;/span&gt; &amp;amp;&amp;amp; x &amp;gt; &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; cnt = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(x % prime[i] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            x &lt;/span&gt;/=&lt;span&gt; prime[i];
            cnt&lt;/span&gt;++&lt;span&gt;;
        }
        y &lt;/span&gt;|= cnt &amp;lt;&amp;lt;&lt;span&gt; pos[i];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; y;
}
inline &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; back(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; p)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将所存的指数转化成原来的数字，并且模上p&lt;/span&gt;
&lt;span&gt;{
    ll y &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; k = x &amp;gt;&amp;gt; pos[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    x &lt;/span&gt;^= k &amp;lt;&amp;lt; pos[&lt;span&gt;0&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消去2的指数&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;0&lt;/span&gt;] %&lt;span&gt; p;
    k &lt;/span&gt;= x &amp;gt;&amp;gt; pos[&lt;span&gt;1&lt;/span&gt;];    x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;1&lt;/span&gt;];    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;1&lt;/span&gt;] %&lt;span&gt; p;
    k &lt;/span&gt;= x &amp;gt;&amp;gt; pos[&lt;span&gt;2&lt;/span&gt;];    x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;2&lt;/span&gt;];    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;2&lt;/span&gt;] %&lt;span&gt; p;
    k &lt;/span&gt;= x &amp;gt;&amp;gt; pos[&lt;span&gt;3&lt;/span&gt;];    x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;3&lt;/span&gt;];    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;3&lt;/span&gt;] %&lt;span&gt; p;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;4&lt;/span&gt;; i &amp;lt; &lt;span&gt;25&lt;/span&gt;; i++&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x &amp;amp; (&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;pos[i]))y = y * prime[i] %&lt;span&gt; p;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; y %&lt;span&gt; p;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处还要模上p，因为y最开始赋值为1，没有经过while循环的话，就没有模上p，虽然y为1没关系，但是数据中有p=1的时候，此时y没有模上p&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这两个函数很简单，但是题目很坑，有一个小细节没注意到，WA了一个多小时&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就是back函数的最后一句，我本以为每次运算均已经模上了p，后来偷懒就不模上p，但是这导致我一直WA，细想后发现，最开始y = 1，如果进行while里面的乘法的话就会模上p，但是不进行while乘法，就还是原来的1，看了一眼数据范围发现，这个p可以是1，这样的话，答案就是0了，这就是导致WA的原因，为了找错误还写了个生成测试数据的代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;剩下的就是普通的线段树了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里需要注意的是，这道题时间卡的紧，用内联函数更快，上面的back函数可以优化成下面这个样子，这样会更快。（首先就把2 3 5 7 的i次方算出来，这样可以节省300多ms，因为这几个函数调用太频繁了）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; a[]={&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;32&lt;/span&gt;,&lt;span&gt;64&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; b[]={&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;,&lt;span&gt;27&lt;/span&gt;,&lt;span&gt;81&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c[]={&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;25&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; d[]={&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;49&lt;/span&gt;&lt;span&gt;};
inline &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; back(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; p)
{
    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; y=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; k=x&amp;gt;&amp;gt;dpos[&lt;span&gt;0&lt;/span&gt;];y=y*a[k]%p;x^=k&amp;lt;&amp;lt;dpos[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    k&lt;/span&gt;=x&amp;gt;&amp;gt;dpos[&lt;span&gt;1&lt;/span&gt;];y=y*b[k]%p;x^=k&amp;lt;&amp;lt;dpos[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
    k&lt;/span&gt;=x&amp;gt;&amp;gt;dpos[&lt;span&gt;2&lt;/span&gt;];y=y*c[k]%p;x^=k&amp;lt;&amp;lt;dpos[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
    k&lt;/span&gt;=x&amp;gt;&amp;gt;dpos[&lt;span&gt;3&lt;/span&gt;];y=y*d[k]%p;x^=k&amp;lt;&amp;lt;dpos[&lt;span&gt;3&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;4&lt;/span&gt;;i&amp;lt;&lt;span&gt;25&lt;/span&gt;;i++&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x&amp;amp;(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;dpos[i])) y=y*prime[i]%&lt;span&gt;p;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; y;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Gcd和LCM的查询必须分开写，一开始我只写了一个函数，每次都可以求出两个值，但是一下就超时了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后就是这道题的代码啦&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;144&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include&amp;lt;bits/stdc++.h&amp;gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; MID(l, r) (l + (r - l) / 2)
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; lson(o) (o&amp;lt;&amp;lt;1)
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; rson(o) (o&amp;lt;&amp;lt;1|1)
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; _min(x, y) ((x) &amp;lt; (y) ? (x) : (y))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写成宏定义更快&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; _max(x, y) ((x) &amp;gt; (y) ? (x) : (y))
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; typedef &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; ll;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn = 1e6 + &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; prime[] = {&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;17&lt;/span&gt;,&lt;span&gt;19&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;29&lt;/span&gt;,&lt;span&gt;31&lt;/span&gt;,&lt;span&gt;37&lt;/span&gt;,&lt;span&gt;41&lt;/span&gt;,&lt;span&gt;43&lt;/span&gt;,&lt;span&gt;47&lt;/span&gt;,&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;59&lt;/span&gt;,&lt;span&gt;61&lt;/span&gt;,&lt;span&gt;67&lt;/span&gt;,&lt;span&gt;71&lt;/span&gt;,&lt;span&gt;73&lt;/span&gt;,&lt;span&gt;79&lt;/span&gt;,&lt;span&gt;83&lt;/span&gt;,&lt;span&gt;89&lt;/span&gt;,&lt;span&gt;97&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; pos[] =   {&lt;span&gt;28&lt;/span&gt;,&lt;span&gt;25&lt;/span&gt;,&lt;span&gt;23&lt;/span&gt;,&lt;span&gt;21&lt;/span&gt;,&lt;span&gt;20&lt;/span&gt;,&lt;span&gt;19&lt;/span&gt;,&lt;span&gt;18&lt;/span&gt;,&lt;span&gt;17&lt;/span&gt;,&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;,&lt;span&gt;14&lt;/span&gt;,&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;12&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0000 0000 0000 0000 0000 0000 0000 0000
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    |   |  | |
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    2   3  5 7
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用这些位表示各个素数出现的次数&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; inline &lt;span&gt;int&lt;/span&gt; Min(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; _min(x&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;) | _min(x&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;) | _min(x&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;) | _min(x&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;) | ((x&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;)&amp;amp;(y&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; inline &lt;span&gt;int&lt;/span&gt; Max(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; _max(x&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x70000000&lt;/span&gt;) | _max(x&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x0e000000&lt;/span&gt;) | _max(x&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x01800000&lt;/span&gt;) | _max(x&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;, y&amp;amp;&lt;span&gt;0x00600000&lt;/span&gt;) | ((x&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;)|(y&amp;amp;&lt;span&gt;0x001fffff&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; inline &lt;span&gt;int&lt;/span&gt; turn(&lt;span&gt;int&lt;/span&gt; x)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将x质因数分解，并且将指数存在y的每一个bit上&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;25&lt;/span&gt; &amp;amp;&amp;amp; x &amp;gt; &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; cnt = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(x % prime[i] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;             x /=&lt;span&gt; prime[i];
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             cnt++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         y |= cnt &amp;lt;&amp;lt;&lt;span&gt; pos[i];
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; inline &lt;span&gt;int&lt;/span&gt; back(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; p)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将所存的指数转化成原来的数字，并且模上p&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     ll y = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; k = x &amp;gt;&amp;gt; pos[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;0&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消去2的指数&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;0&lt;/span&gt;] %&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     k = x &amp;gt;&amp;gt; pos[&lt;span&gt;1&lt;/span&gt;];    x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;1&lt;/span&gt;];    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;1&lt;/span&gt;] %&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     k = x &amp;gt;&amp;gt; pos[&lt;span&gt;2&lt;/span&gt;];    x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;2&lt;/span&gt;];    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;2&lt;/span&gt;] %&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     k = x &amp;gt;&amp;gt; pos[&lt;span&gt;3&lt;/span&gt;];    x ^= k &amp;lt;&amp;lt; pos[&lt;span&gt;3&lt;/span&gt;];    &lt;span&gt;while&lt;/span&gt;(k--)y = y * prime[&lt;span&gt;3&lt;/span&gt;] %&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;4&lt;/span&gt;; i &amp;lt; &lt;span&gt;25&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(x &amp;amp; (&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;pos[i]))y = y * prime[i] %&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; y %&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处还要模上p，因为y最开始赋值为1，没有经过while循环的话，就没有模上p，虽然y为1没关系，但是数据中有p=1的时候，此时y没有模上p&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; node
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; l, r;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; gcd, lcm;
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;}tree[maxn];
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; a[maxn];
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; build(&lt;span&gt;int&lt;/span&gt; o, &lt;span&gt;int&lt;/span&gt; l, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; r)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;     tree[o].l = l, tree[o].r =&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(l ==&lt;span&gt; r)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         tree[o].gcd = tree[o].lcm =&lt;span&gt; turn(a[l]);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; m = MID(l ,r), lc = lson(o), rc =&lt;span&gt; rson(o);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;    build(lc, l, m);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     build(rc, m + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, r);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;     tree[o].gcd =&lt;span&gt; Min(tree[lc].gcd, tree[rc].gcd);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;     tree[o].lcm =&lt;span&gt; Max(tree[lc].lcm, tree[rc].lcm);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;a[p] = v;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; p, v;
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; o)
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(tree[o].l ==&lt;span&gt; tree[o].r)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         tree[o].lcm = tree[o].gcd =&lt;span&gt; turn(v);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; lc = lson(o), rc =&lt;span&gt; rson(o);
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(p &amp;lt;=&lt;span&gt; tree[lc].r)update(lc);
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt; update(rc);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;     tree[o].gcd =&lt;span&gt; Min(tree[lc].gcd, tree[rc].gcd);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;     tree[o].lcm =&lt;span&gt; Max(tree[lc].lcm, tree[rc].lcm);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Gcd, Lcm;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ql, qr;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; query_gcd(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; o)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ql &amp;lt;= tree[o].l &amp;amp;&amp;amp; qr &amp;gt;=&lt;span&gt; tree[o].r)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         Gcd =&lt;span&gt; Min(Gcd, tree[o].gcd);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Lcm = Max(Lcm, tree[o].lcm);&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; lc = lson(o), rc =&lt;span&gt; rson(o);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ql &amp;lt;=&lt;span&gt; tree[lc].r)query_gcd(lc);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(qr &amp;gt;=&lt;span&gt; tree[rc].l)query_gcd(rc);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; query_lcm(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; o)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ql &amp;lt;= tree[o].l &amp;amp;&amp;amp; qr &amp;gt;=&lt;span&gt; tree[o].r)
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Gcd = Min(Gcd, tree[o].gcd);&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         Lcm =&lt;span&gt; Max(Lcm, tree[o].lcm);
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; lc = lson(o), rc =&lt;span&gt; rson(o);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ql &amp;lt;=&lt;span&gt; tree[lc].r)query_lcm(lc);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(qr &amp;gt;=&lt;span&gt; tree[rc].l)query_lcm(rc);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n, q;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;n, &amp;amp;q) !=&lt;span&gt; EOF)
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= n; i++)scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;a[i]);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         build(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, n);
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt; s[&lt;span&gt;5&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(q--&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             Gcd = &lt;span&gt;0x7fffffff&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;             Lcm = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, s);
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(s[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                 scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;p, &amp;amp;&lt;span&gt;v);
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;                 update(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(s[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;                 scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;ql, &amp;amp;qr, &amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                 query_lcm(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; ans =&lt;span&gt; back(Lcm, p);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;                 printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ans);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(s[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                 scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;ql, &amp;amp;qr, &amp;amp;&lt;span&gt;p);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;                 query_gcd(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; ans =&lt;span&gt; back(Gcd, p);
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                 printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ans);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 13 May 2018 16:58:00 +0000</pubDate>
<dc:creator>_努力努力再努力x</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fzl194/p/9034201.html</dc:identifier>
</item>
<item>
<title>通过jstack与jmap分析一次cpu打满的线上故障 - kingszelda</title>
<link>http://www.cnblogs.com/kingszelda/p/9034191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kingszelda/p/9034191.html</guid>
<description>&lt;p&gt;  下面是线上机器的cpu使用率，可以看到从4月8日开始，随着时间cpu使用率在逐步增高，最终使用率达到100%导致线上服务不可用，后面重启了机器后恢复。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1196330/201805/1196330-20180514003417351-1333416698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;简单分析下可能出问题的地方，分为5个方向：&lt;/p&gt;
&lt;p&gt;1.系统本身代码问题&lt;/p&gt;
&lt;p&gt;2.内部下游系统的问题导致的雪崩效应&lt;/p&gt;
&lt;p&gt;3.上游系统调用量突增&lt;/p&gt;
&lt;p&gt;4.http请求第三方的问题&lt;/p&gt;
&lt;p&gt;5.机器本身的问题&lt;/p&gt;

&lt;p&gt;1.查看日志，没有发现集中的错误日志，&lt;strong&gt;初步排除代码逻辑处理错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.首先联系了内部下游系统观察了他们的监控，发现一起正常。&lt;strong&gt;可以排除下游系统故障对我们的影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.查看provider接口的调用量，对比7天没有突增，&lt;strong&gt;排除业务方调用量的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.查看tcp监控，TCP状态正常，&lt;strong&gt;可以排除是http请求第三方超时带来的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5.查看机器监控，6台机器cpu都在上升，每个机器情况一样。&lt;strong&gt;排除机器故障问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;即通过上述方法没有直接定位到问题。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.重启了6台中问题比较严重的5台机器，先恢复业务。保留一台现场，用来分析问题。&lt;/p&gt;
&lt;p&gt;2.查看当前的tomcat线程pid&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1196330/201805/1196330-20180514004234948-269659542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.查看该pid下线程对应的系统占用情况。top -Hp 384&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; 微信图片_20180409132036.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180409132036.png?version=1&amp;amp;modificationDate=1523253387000&amp;amp;api=v2&quot; alt=&quot;&quot; data-linked-resource-default-alias=&quot;微信图片_20180409132036.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; 微信图片_20180409132036.png&quot; data-linked-resource-id=&quot;194379520&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;690&quot; data-image-src=&quot;/confluence/download/attachments/194379466/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180409132036.png?version=1&amp;amp;modificationDate=1523253387000&amp;amp;api=v2&quot; data-image-height=&quot;841&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.发现pid 4430 4431 4432 4433 线程分别占用了约40%的cpu&lt;/p&gt;
&lt;p&gt;5.将这几个pid转为16进制，分别为114e 114f 1150 1151&lt;/p&gt;
&lt;p&gt;6.下载当前的java线程栈  sudo -u tomcat jstack -l 384&amp;gt;/1.txt&lt;/p&gt;
&lt;p&gt;7.查询5中对应的线程情况，发现都是gc线程导致的&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; gc.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/gc.png?version=1&amp;amp;modificationDate=1523257160000&amp;amp;api=v2&quot; alt=&quot;&quot; data-linked-resource-default-alias=&quot;gc.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; gc.png&quot; data-linked-resource-id=&quot;194379773&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;670&quot; data-image-src=&quot;/confluence/download/attachments/194379466/gc.png?version=1&amp;amp;modificationDate=1523257160000&amp;amp;api=v2&quot; data-image-height=&quot;153&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8.dump java堆数据&lt;/p&gt;
&lt;p&gt;sudo -u tomcat jmap -dump:live,format=b,file=/dump201612271310.dat 384&lt;/p&gt;
&lt;p&gt;9.使用MAT加载堆文件，可以看到javax.crypto.JceSecurity对象占用了95%的内存空间，初步定位到问题。&lt;/p&gt;
&lt;p&gt;MAT下载地址：&lt;a href=&quot;http://www.eclipse.org/mat/&quot;&gt;http://www.eclipse.org/mat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; heap.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/heap.png?version=1&amp;amp;modificationDate=1523257523000&amp;amp;api=v2&quot; alt=&quot;&quot; data-linked-resource-default-alias=&quot;heap.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; heap.png&quot; data-linked-resource-id=&quot;196345886&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;801&quot; data-image-src=&quot;/confluence/download/attachments/194379466/heap.png?version=1&amp;amp;modificationDate=1523257523000&amp;amp;api=v2&quot; data-image-height=&quot;697&quot;/&gt;&lt;/p&gt;
&lt;p&gt;10.查看类的引用树，看到BouncyCastleProvider对象持有过多。即我们代码中对该对象的处理方式是错误的，定位到问题。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; heap1.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/heap1.png?version=1&amp;amp;modificationDate=1523257678000&amp;amp;api=v2&quot; alt=&quot;&quot; data-linked-resource-default-alias=&quot;heap1.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; heap1.png&quot; data-linked-resource-id=&quot;196345897&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;771&quot; data-image-src=&quot;/confluence/download/attachments/194379466/heap1.png?version=1&amp;amp;modificationDate=1523257678000&amp;amp;api=v2&quot; data-image-height=&quot;696&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们代码中有一块是这样写的&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; code.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/code.png?version=1&amp;amp;modificationDate=1523257919000&amp;amp;api=v2&quot; alt=&quot;&quot; height=&quot;250&quot; data-linked-resource-default-alias=&quot;code.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; code.png&quot; data-linked-resource-id=&quot;196345909&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;881&quot; data-image-src=&quot;/confluence/download/attachments/194379466/code.png?version=1&amp;amp;modificationDate=1523257919000&amp;amp;api=v2&quot; data-image-height=&quot;257&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是加解密的功能，每次运行加解密都会new一个BouncyCastleProvider对象,放倒Cipher.getInstance()方法中。&lt;/p&gt;
&lt;p&gt;看下Cipher.getInstance()的实现，这是jdk的底层代码实现，追踪到JceSecurity类中&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; image2018-4-9_15-16-0.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/image2018-4-9_15-16-0.png?version=1&amp;amp;modificationDate=1523258161000&amp;amp;api=v2&quot; alt=&quot;&quot; data-linked-resource-default-alias=&quot;image2018-4-9_15-16-0.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; image2018-4-9_15-16-0.png&quot; data-linked-resource-id=&quot;196345920&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;789&quot; data-image-src=&quot;/confluence/download/attachments/194379466/image2018-4-9_15-16-0.png?version=1&amp;amp;modificationDate=1523258161000&amp;amp;api=v2&quot; data-image-height=&quot;759&quot;/&gt;&lt;/p&gt;
&lt;p&gt;verifyingProviders每次put后都会remove,verificationResults只会put，不会remove.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; image2018-4-9_15-17-52.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/image2018-4-9_15-17-52.png?version=1&amp;amp;modificationDate=1523258272000&amp;amp;api=v2&quot; alt=&quot;&quot; data-linked-resource-default-alias=&quot;image2018-4-9_15-17-52.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; image2018-4-9_15-17-52.png&quot; data-linked-resource-id=&quot;196345925&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;772&quot; data-image-src=&quot;/confluence/download/attachments/194379466/image2018-4-9_15-17-52.png?version=1&amp;amp;modificationDate=1523258272000&amp;amp;api=v2&quot; data-image-height=&quot;370&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到verificationResults是一个static的map，即属于JceSecurity类的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以每次运行到加解密都会向这个map put一个对象，而这个map属于类的维度，所以不会被GC回收。这就导致了大量的new的对象不被回收。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将有问题的对象置为static，每个类持有一个，不会多次新建。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;confluence-embedded-image&quot; title=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; image2018-4-9_15-20-54.png&quot; src=&quot;http://wiki.corp.qunar.com/confluence/download/attachments/194379466/image2018-4-9_15-20-54.png?version=1&amp;amp;modificationDate=1523258455000&amp;amp;api=v2&quot; alt=&quot;&quot; height=&quot;226&quot; data-linked-resource-default-alias=&quot;image2018-4-9_15-20-54.png&quot; data-linked-resource-container-version=&quot;3&quot; data-location=&quot;FinanceBU &amp;gt; 330502-根据jstack与jmap分析线上故障 &amp;gt; image2018-4-9_15-20-54.png&quot; data-linked-resource-id=&quot;196345935&quot; data-linked-resource-version=&quot;1&quot; data-linked-resource-type=&quot;attachment&quot; data-unresolved-comment-count=&quot;0&quot; data-linked-resource-content-type=&quot;image/png&quot; data-base-url=&quot;http://wiki.corp.qunar.com/confluence&quot; data-image-width=&quot;1084&quot; data-image-src=&quot;/confluence/download/attachments/194379466/image2018-4-9_15-20-54.png?version=1&amp;amp;modificationDate=1523258455000&amp;amp;api=v2&quot; data-image-height=&quot;226&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;遇到线上问题不要慌，首先确认排查问题的思路：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;查看日志&lt;/li&gt;
&lt;li&gt;查看CPU情况&lt;/li&gt;
&lt;li&gt;查看TCP情况&lt;/li&gt;
&lt;li&gt;查看java线程，jstack&lt;/li&gt;
&lt;li&gt;查看java堆，jmap&lt;/li&gt;
&lt;li&gt;通过MAT分析堆文件，寻找无法被回收的对象&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Sun, 13 May 2018 16:49:00 +0000</pubDate>
<dc:creator>kingszelda</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kingszelda/p/9034191.html</dc:identifier>
</item>
<item>
<title>ES2015也就是ES6知识点持续更新 - 追~梦</title>
<link>http://www.cnblogs.com/dorseych/p/9034176.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dorseych/p/9034176.html</guid>
<description>&lt;p&gt;      ES6，全名：ECMAScript2015，先扯点其他的，ECMA是一个国际标准化组织，它最重要最重要的作用就是让ECMAScript这门语言标准化，什么意思呢？我们知道，js这门脚本语言是运行在浏览器上的，准确的说是运行在浏览器的渲染引擎上的，毕竟这些语言跟java,C#类似，它不像C/C++这样的语言，可以直接通过编译器转化成计算机可以知晓的语言，就是0和1，js其实跟java一样都是一种解释性的语言，这种解释性的语言需要一个中间的媒介，比如java的虚拟机，js也一样，虽然它是脚本语言，但也是一种解释性的语言，它无法直接编译成计算机可以知晓的二进制代码，所以需要浏览器引擎来解释给编译器知晓，比较出名的浏览器引擎其实不少，最出名的应该就是被移植出来用于node.js运行的google引擎V8，这些就不在扯太远了，了解了js的运行环境，那你其实可以发现，当今可不仅仅就一家谷歌有浏览器，火狐，欧朋，360，IE...N多个浏览器厂商，这么多的引擎，就跟春秋战国一样，各国有各国的货币，各国有各国的语言与交流方式，战国后秦始皇他也发现这个问题了，他怎么做呢？（我觉得这是他最伟大的地方，是我们中华民族大一统的先驱，无论什么民族过来最终只有被我们同化的命，扯太远了...）&lt;/p&gt;
&lt;p&gt;     秦始皇做的事其实很简单，统一标准，统一语言，统一货币，车同轨，书同文，大家一起用小篆吧！而js原来的处境其实很像很像，有了ECMA这个标准化组织，浏览器厂商都遵循他们制定的规则，这就好办了，最简单的例子就是html5的开头，&amp;lt;!DOCTYPE html&amp;gt;就是告诉浏览器你要用标准化给我渲染，别给我扯你原来那个怪异的渲染引擎，那一切其实就简单多了。&lt;/p&gt;

&lt;p&gt;     闲话少扯了，ES6我的学习方式呢，是一个个来，一个个知识点过，就从最最简单的let和var的区别开始，以后有时间这篇博文会不时的更新，有时间就写一点。&lt;/p&gt;
&lt;p&gt;     ①let,var,const的区别：&lt;/p&gt;
&lt;p&gt;        相信熟悉ES5的人用过最多的关键字应该就非var莫属啦，那其实var这个东西啊，是有很多不好的地方的，只是绝大多数情况下不会暴露而已，怎么说呢，咱先来一段代码：&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201805/1043914-20180514000332149-948343813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         这段代码是很简单的一个输出，在我们的设想中应该是打印一个0,1,2，然后var定义的是局部变量，所以这个变量只在for循环里面，外面那个打印“i”编辑器会给你报错对吧？呵呵！&lt;/p&gt;
&lt;p&gt;实际上你错了，由于js异步的机制，for循环会被提前，也就是你实际上执行的代码应该是这样的，&lt;/p&gt;
&lt;p&gt;          &lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201805/1043914-20180514000839731-1085414928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（这真的非常让人难以理解，对吧？当然有很多办法可以实现我们想要的结果）&lt;/p&gt;
&lt;p&gt;       但上面的var还有另一个问题，最后的console.log(i)，按照我们的正常思维应该是for用完了这个变量i，不用了，外面调取不到内部的变量对吧？但实际上你可以去试一下，不会报错，还会帮你把i=3的值打印出来，这里好像没什么大不了的，但如果是很严谨的内存操作时，这就是非常恐怖的内存泄漏问题了，你会莫名其妙多了一堆全局的变量，是不是很恐怖？当然我这里的说法有点夸张（其实造成这一个的根源仅仅是js可以不声明就用变量）。&lt;/p&gt;
&lt;p&gt;但如果你把上面的代码，仅仅是把var换成let，你试下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201805/1043914-20180514001357464-406268103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输出的结果就是很符合我们思维模式的，也比较严谨的改正js内存泄漏这个问题（先声明，再使用）。&lt;/p&gt;
&lt;p&gt;这里总结下：&lt;/p&gt;
&lt;p&gt; let这个东西是跟随代码块的（不想举太多例子），简单来说{let...}外面的代码是访问不到括号里let声明的变量的，这对变量是很好的保护，也就是模块思维，代码被分成一个个的模块，各做各的，除了一些必要的联系（通过接口）其他不会互相影响，不会这里定义的变量莫名其妙在那边可以用了，或者莫名其妙把你之前声明的变量值给改了（这其实是很恐怖的一个东西）而这个相比于原来的var而已显然是一个长足的进步。&lt;/p&gt;
&lt;p&gt;const这个东西呢，跟let一样，只不过它是声明常量（constant缩写）的，而且一声明必须立即赋值，后面怎么赋值是修改不了的（还会报错），就比如这样：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201805/1043914-20180514003022885-325265969.png&quot; alt=&quot;&quot;/&gt;和这样&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043914/201805/1043914-20180514003920476-402400125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;暂时先这么多！后续不断更新ES6带来了怎样的创新与优雅？以及babel编译器（有些浏览器暂时不支持新语法，这个主要是把ES6代码转化成ES5代码以供部分落后浏览器识别）...&lt;/p&gt;

</description>
<pubDate>Sun, 13 May 2018 16:34:00 +0000</pubDate>
<dc:creator>追~梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dorseych/p/9034176.html</dc:identifier>
</item>
<item>
<title>NetCore版RPC框架NewLife.ApiServer - 大石头</title>
<link>http://www.cnblogs.com/nnhy/p/newlife_apiserver.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnhy/p/newlife_apiserver.html</guid>
<description>&lt;p&gt;微服务和消息队列的基础都是RPC框架，比较有名的有WCF、gRPC、Dubbo等，我们的NewLife.ApiServer建立在网络库NewLife.Net之上，&lt;span&gt;&lt;strong&gt;支持.Net Core&lt;/strong&gt;&lt;/span&gt;，追求轻量级和高性能，只有最简单的远程调用功能。&lt;/p&gt;
&lt;p&gt;现在是网络系列文章的第五篇，前面四篇快速过了一遍网络库基本用法，也做了压力测试并给出数字 &lt;strong&gt;&lt;span&gt;2266万tps&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本章正式进入应用层面，&lt;span&gt;&lt;strong&gt;并且采用.Net Core作为例程&lt;/strong&gt;&lt;/span&gt;，说明我们一开始就支持.Net Core，也算是回答了很多支持者的疑问。&lt;/p&gt;

&lt;p&gt;老规矩，先上代码：&lt;a href=&quot;https://github.com/nnhy/NewLife.Net.Tests&quot; target=&quot;_blank&quot;&gt;https://github.com/nnhy/NewLife.Net.Tests&lt;/a&gt; （例程RpcTest）&lt;/p&gt;
&lt;p&gt;ApiServer源码：&lt;a href=&quot;https://github.com/NewLifeX/X/tree/master/NewLife.Core/Remoting&quot; target=&quot;_blank&quot;&gt;https://github.com/NewLifeX/X/tree/master/NewLife.Core/Remoting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ApiServer实在太小了，就让它和Net一起分别作为X组件核心库的一个目录。&lt;/p&gt;


&lt;p&gt;ApiServer开始于2014年，我们为了建立物联网云平台，解决云端、硬件设备端、手机端、网页端相互通信，而建立的一套完整的通信体系。&lt;/p&gt;
&lt;p&gt;公司业务需要，在ApiServer上建立了包括&lt;span&gt;&lt;strong&gt;服务治理、注册发现、负载均衡、设备鉴权、通信加密、压缩、P2SP网络、WebSocket&lt;/strong&gt;&lt;/span&gt;等等一系列模块。&lt;/p&gt;
&lt;p&gt;这一套物联网云平台已经用在很多家公司上，根据NewLife两年解封惯例，大概在2019年开源放出大部分源码。&lt;/p&gt;
&lt;p&gt;本文所指的ApiServer，仅指开源的RPC部分。&lt;/p&gt;
&lt;p&gt;2017年4月1日晚，我们想知道ApiServer的表现，做了一次最大并发数测试，目标是单节点支持100万设备接入。&lt;/p&gt;
&lt;p&gt;租用60台阿里云ECS，&lt;strong&gt;&lt;span&gt;实际测试单节点最大支持84.5万模拟设备接入&lt;/span&gt;&lt;/strong&gt;，设备端的心跳包（5~60s） 拖垮了32核服务端。&lt;/p&gt;


&lt;p&gt;先看看例程最终效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180513225617349-1107654227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ApiServer主要特点如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;支持.Net Core/Net40/Net45&lt;/strong&gt;&lt;/span&gt;，这个最近太热门了，其实X组件绝大部分功能都支持.Net Core&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;多年积累&lt;/strong&gt;&lt;/span&gt;。从2014年起，遇到并解决了很多问题，也去掉了很多可选功能，只保留必要功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;性能尚可&lt;/span&gt;&lt;/strong&gt;。网络库2266tps，ApiServer在40核服务器上单客户端带业务测试得到16万tps&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;简单易用&lt;/span&gt;&lt;/strong&gt;。高仿MVC的Controller风格，支持上下文和执行前后过滤器，客户端直接Invoke，无需生成Stub代码，参数无需完全一致，便于多版本兼容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;容易调试&lt;/span&gt;&lt;/strong&gt;。默认通信参数和返回采用Json封送，打开编码器日志后，远程调用的收发一目了然。（网络库的高性能就是用来给Json浪费的……）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;大包请求&lt;/span&gt;&lt;/strong&gt;。支持收发大数据包（如1M~1000M），特殊服务接口避开Json序列化，直接走二进制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;支持异常&lt;/span&gt;&lt;/strong&gt;。服务接口抛出的异常，能够封装传递到客户端&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;新建.Net Core 2.0项目RpcTest，我们把服务端客户端代码写到一起。&lt;/p&gt;
&lt;p&gt;服务暴露高仿MVC，一个控制器内可以暴露多个服务方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;自定义控制器。包含多个服务&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyController
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;添加，标准业务服务，走Json序列化&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Int32 Add(Int32 x, Int32 y) =&amp;gt; x +&lt;span&gt; y;

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;RC4加解密，高速业务服务，二进制收发不经序列化&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;pk&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Packet RC4(Packet pk)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; pk.ToArray();
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pass = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NewLife&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.GetBytes();

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data.RC4(pass);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里暴露了两个服务，分别是 加法My/Add 和 加密My/RC4 ，控制器名称加上方法名，作为寻址路径。&lt;/p&gt;
&lt;p&gt;不使用Api特性时，控制器类的所有共有方法都将暴露成为服务。&lt;/p&gt;
&lt;p&gt;返回值比较简单支持，该什么类型就什么类型。理论上来说，支持Json序列化的类型，都可以作为参数和返回类型。&lt;/p&gt;

&lt;p&gt;服务方法也可以指定名称，支持方法过滤接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;用户控制器。会话获取，请求过滤&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
[Api(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController : IApi, IActionFilter
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;会话。同一Tcp/Udp会话多次请求共用，执行服务方法前赋值&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; IApiSession Session { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    [Api(nameof(FindByID))]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User FindByID(Int32 uid, Boolean deleted)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Session 用法同Web&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; times = Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Times&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToInt();
        times&lt;/span&gt;++&lt;span&gt;;
        Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Times&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; times;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 故意制造异常&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (times &amp;gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取得当前上下文&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; ctx =&lt;span&gt; ControllerContext.Current;

            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ApiException(&lt;span&gt;507&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[{0}]调用次数过多！Times={1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.F(ctx.ActionName, times));
        }

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User
        {
            ID &lt;/span&gt;=&lt;span&gt; uid,
            Name &lt;/span&gt;= Rand.NextString(&lt;span&gt;8&lt;/span&gt;&lt;span&gt;),
            Enable &lt;/span&gt;=&lt;span&gt; deleted,
            CreateTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
        };

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;本控制器执行前&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;filterContext&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuting(ControllerContext filterContext)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求参数&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; ps =&lt;span&gt; filterContext.Parameters;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 服务参数&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; cs =&lt;span&gt; filterContext.ActionParameters;

        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ps)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cs != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;cs.ContainsKey(item.Key))
                XTrace.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务[{0}]未能找到匹配参数 {1}={2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, filterContext.ActionName, item.Key, item.Value);
        }
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;本控制器执行后，包括异常发生&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;filterContext&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuted(ControllerContext filterContext)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ex =&lt;span&gt; filterContext.Exception;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ex != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;filterContext.ExceptionHandled)
        {
            XTrace.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;控制器拦截到异常：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex.Message);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里控制器和方法都加上了Api特性，特别指定了名称，公开服务 User/FindByID。&lt;/p&gt;
&lt;p&gt;这里有个硬伤，如果不加Api特性，默认会把 OnActionExecuting/OnActionExecuted两个方法也暴露成为服务。&lt;/p&gt;

&lt;p&gt;实现Api接口，是为了得到Session，这个不是必须的，因为控制器上下文ControllerContext.Current也可以得到这个Session。&lt;/p&gt;
&lt;p&gt;这个Session代表着网络会话，可以取得各种跟网络相关的东西，甚至包括直接向客户端发送数据。&lt;/p&gt;
&lt;p&gt;当然，也可以当做Web的Session来使用，内置有一个字典。&lt;/p&gt;
&lt;p&gt;同一客户端的Api多次请求，都共用同一个Session对象，可用于做身份验证，从某种层面上来讲，ApiServer是“有状态”的。&lt;/p&gt;

&lt;p&gt;动作过滤接口IActionFilter，让我们能够在本控制器所有服务执行前后进行拦截，包括参数预处理和异常拦截。&lt;/p&gt;
&lt;p&gt;服务参数采用Json序列化封送，所以客户端服务端可以不必要求严格一致，跟Http类似，这一点在多版本管理上非常重要，不会说你加了个参数就强制要求所有客户端跟着升级。&lt;/p&gt;
&lt;p&gt;服务方法内的各种异常，都将会被拦截并送到客户端，ApiException异常将会得到特殊处理，它包括了一个异常代码，也送到客户端。&lt;/p&gt;
&lt;p&gt;没有异常代码的各种异常，都将使用默认错误代码500.&lt;/p&gt;

&lt;p&gt;最后实例化ApiServer&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestServer()
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化RPC服务端，指定端口，同时在Tcp/Udp/IPv4/IPv6上监听&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; svr = &lt;span&gt;new&lt;/span&gt; ApiServer(&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注册服务控制器&lt;/span&gt;
    svr.Register&amp;lt;MyController&amp;gt;&lt;span&gt;();
    svr.Register&lt;/span&gt;&amp;lt;UserController&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定编码器&lt;/span&gt;
    svr.Encoder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonEncoder();
    svr.EncoderLog &lt;/span&gt;=&lt;span&gt; XTrace.Log;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打开原始数据日志&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; ns = svr.Server &lt;span&gt;as&lt;/span&gt;&lt;span&gt; NetServer;
    ns.Log &lt;/span&gt;=&lt;span&gt; XTrace.Log;
    ns.LogSend &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    ns.LogReceive &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

    svr.Log &lt;/span&gt;=&lt;span&gt; XTrace.Log;
    svr.Start();

    _server &lt;/span&gt;=&lt;span&gt; svr;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定时显示性能数据&lt;/span&gt;
    _timer = &lt;span&gt;new&lt;/span&gt; TimerX(ShowStat, ns, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;中间打开的各种日志，纯属为了便于展示通信过程，实际应用中务必去除！&lt;/p&gt;
&lt;p&gt;ApiServer采用手工注册控制器的方式，避免了复杂的MVC路由系统。&lt;/p&gt;
&lt;p&gt;内置有一个控制器ApiController，它的All服务用于向客户端返回所有可用服务列表。&lt;/p&gt;
&lt;p&gt;服务端建立起来后，可以用码神工具的Api工具调试，（&lt;a href=&quot;https://github.com/NewLifeX/X/tree/master/XCoder&quot; target=&quot;_blank&quot;&gt;https://github.com/NewLifeX/X/tree/master/XCoder&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180513235809139-1022438594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;为了便于使用，封装一个客户端类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;自定义业务客户端&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyClient : ApiClient
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MyClient(String uri) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(uri) { }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;添加，标准业务服务，走Json序列化&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;Int32&amp;gt;&lt;span&gt; AddAsync(Int32 x, Int32 y)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; InvokeAsync&amp;lt;Int32&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;My/Add&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; { x, y });
    }

    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;RC4加解密，高速业务服务，二进制收发不经序列化&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;pk&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;Packet&amp;gt;&lt;span&gt; RC4Async(Packet pk)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; InvokeAsync&amp;lt;Packet&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;My/RC4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, pk);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;User&amp;gt;&lt;span&gt; FindUserAsync(Int32 uid, Boolean enable)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; InvokeAsync&amp;lt;User&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User/FindByID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; { uid, enable });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实这个类不是必须的，看个人喜好吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestClient()
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt; MyClient(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp://127.0.0.1:1234&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指定编码器&lt;/span&gt;
    client.Encoder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonEncoder();
    client.EncoderLog &lt;/span&gt;=&lt;span&gt; XTrace.Log;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打开原始数据日志&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; ns =&lt;span&gt; client.Client;
    ns.Log &lt;/span&gt;=&lt;span&gt; XTrace.Log;
    ns.LogSend &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    ns.LogReceive &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

    client.Log &lt;/span&gt;=&lt;span&gt; XTrace.Log;
    client.Open();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定时显示性能数据&lt;/span&gt;
    _timer = &lt;span&gt;new&lt;/span&gt; TimerX(ShowStat, ns, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标准服务，Json&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; n = &lt;span&gt;await&lt;/span&gt; client.AddAsync(&lt;span&gt;1245&lt;/span&gt;, &lt;span&gt;3456&lt;/span&gt;&lt;span&gt;);
    XTrace.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Add: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, n);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 高速服务，二进制&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; buf = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.GetBytes();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pk = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; client.RC4Async(buf);
    XTrace.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RC4: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, pk.ToHex());

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回对象&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;await&lt;/span&gt; client.FindUserAsync(&lt;span&gt;123&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    XTrace.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FindUser: ID={0} Name={1} Enable={2} CreateTime={3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.ID, user.Name, user.Enable, user.CreateTime);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拦截异常&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        user &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt; client.FindUserAsync(&lt;span&gt;123&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ApiException ex)
    {
        XTrace.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FindUser出错，错误码={0}，内容={1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex.Code, ex.Message);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里做了4次不同调用，模拟了常见场景。&lt;/p&gt;


&lt;p&gt;编译后跑起来就是开头的效果，感兴趣的同学还可以到Linux上试试，也可以新建Net40/Net45项目，同样可用。&lt;/p&gt;
&lt;p&gt;并且，Net40项目还可以在树莓派上跑，基于Mono，码神工具（WinForm）也支持。&lt;/p&gt;

&lt;p&gt;RpcTest例程概括性讲解了ApiServer的用法，大家可以去尝试、扩展。&lt;/p&gt;
&lt;p&gt;实际工作中，我们正准备用于建立一个每天数十亿次调用的微服务系统。&lt;/p&gt;

&lt;p&gt;我是大石头，打1999年起，19年老码农。目前在物流行业从事数据分析架构工作，日常工作都是亿万数据的读写使用。欢迎大家一起C#大数据！&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 16:10:00 +0000</pubDate>
<dc:creator>大石头</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnhy/p/newlife_apiserver.html</dc:identifier>
</item>
<item>
<title>基于Microsoft Graph打造自己的Timeline应用 - 陈希章</title>
<link>http://www.cnblogs.com/chenxizhang/p/9033990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenxizhang/p/9033990.html</guid>
<description>&lt;h4&gt;原文链接：&lt;a title=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/timeline.md&quot; href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/timeline.md&quot;&gt;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/timeline.md&lt;/a&gt; &lt;/h4&gt;

&lt;p&gt;前不久微软正式放出了Windows 10 春季更新（1803），其中有一个非常有特色的应用，就是Windows 10 新增了一个Timeline（时间线）的应用，这个应用可以让用户一目了然地看到最近一段时间所有在Windows中的活动，包括浏览过什么网页，打开过什么文档，设置过什么选项等。下图是一个示范的效果图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-16-10.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-16-10.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请注意，这里看到的信息不是一个静态的图片，每一个卡片都是可以点击的，而且点击之后会通过调用对应的应用程序自动打开这些活动（恢复到之前的状态），就好像时光倒流了一样。&lt;/p&gt;
&lt;p&gt;看起来很酷，不是吗？那么，这样一个应用到底是怎么实现的呢？我们如果也想实现类似的场景，有什么样的思路呢？答案在上周的Microsoft Build 大会上做了揭晓：其实Timeline是一个基于Microsoft Graph实现的应用，只不过他读取的数据，不仅限于Office 365的文档历史，还包括了Windows 10 上面的活动，这也是近年来一个重大的变化：微软已经把Office 365、Windows 10、EMS这三个产品合并为一个——Microsoft 365，将为最终用户提供最佳的体验，他们的能力也将统一通过Microsoft Graph向开发者提供服务。&lt;/p&gt;

&lt;p&gt;首先，从技术上说，要实现这个Timeline应用，用户需要允许相关的活动源将有关信息发送给Microsoft Graph。这里所谓的&lt;code&gt;活动源&lt;/code&gt;，可以是Office客户端，也可以是Windows 10的应用程序。微软一直致力于保护用户的隐私，所以这个Timeline的功能，默认是不开启的，只有用户在被明确告知上述行为并且选择接受的情况下，才会开始收集数据并进行展现。&lt;/p&gt;
&lt;p&gt;其次，除了Windows 10自带的Timeline应用，其实只要几行代码，就能实现一个类似的时间线应用。那么问题就来了，这些&lt;strong&gt;应用之间的数据是不是隔离的&lt;/strong&gt;呢？答案是肯定的，也就是说Windows 10这个Timeline应用只能读取到它在经用户同意的前提下收集的那部分活动数据，而我们自定义的应用也是如此。&lt;/p&gt;
&lt;p&gt;最后，这里面还有一个有意思的概念。一个活动（Activity）可以对应一个或者多个历史记录（History Items）。历史纪录相当于是活动在某个时间点的快照。&lt;/p&gt;
&lt;blockquote readability=&quot;4.6842105263158&quot;&gt;
&lt;p&gt;据说这个技术，最早在内部有一个代码叫做“Project Rome”，现在合并到了Microsoft Graph中，并且已经在V1.0中提供。相关官方文档请参考 &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/docs/concepts/activity-feed-concept-overview&quot;&gt;https://developer.microsoft.com/en-us/graph/docs/concepts/activity-feed-concept-overview&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有了如上概念，我们就闲话少说，撸起袖子加油干吧。因为要访问Microsoft Graph，所以你就必须要注册一个AAD的应用程序。注册这样一个应用程序没有什么特别的，唯一要了解的是，要支持用户活动的读写，需要申请一个UserActivity.ReadWrite.CreatedByApp的委派权限（Delegated Permission），如下图所示&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-47-02.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-47-02.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，这个权限并不需要管理员认可就能工作。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;请注意，目前UserActivity.ReadWrite.CreatedByApp这个权限，仅在国际版的环境中可以用，而且必须在AAD 1.0的环境中实现。AAD 2.0还不支持,国内版（Gallatin）也暂时不支持。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Windows 10自带的Timeline其实是一个UWP应用，不过你可以用你最熟悉的方式来实现自定义的Timeline应用。但抛开这些具体的界面，我们可以快速了解一下如何创建和更新用户活动（Activity）。&lt;/p&gt;
&lt;p&gt;创建或更新Activity的API，请参考 &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_put_activity&quot;&gt;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_put_activity&lt;/a&gt;, 大体上说，这里的关键是用PUT方法操作，同时我们既可以单独创建Activity，也可以在创建Activity的时候同时创建History Item，后者也称为“Deep Insert”。&lt;/p&gt;
&lt;p&gt;为了给大家直观演示效果，我这里简化一下步骤。我将采用官方的Microsoft Graph Explorer来模拟一个客户端，并且直接用REST API来进行操作。如果你对Microsoft Graph Explorer不太熟悉，你可能需要先阅读一下&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/graphexplorer.md&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;正如上一节提到的，你需要确保授予了UserActivity.ReadWrite.CreatedByApp这个权限，请参考下图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-54-13.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-54-13.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我直接用官方给的例子，为当前用户新增一个网络文章浏览的活动，请注意下面的&lt;code&gt;appActivityId&lt;/code&gt;、&lt;code&gt;activitySourceHost&lt;/code&gt;、&lt;code&gt;activationUrl&lt;/code&gt;、&lt;code&gt;visualElements&lt;/code&gt; 是必须的。这个例子的意思是指定义了用户这个活动是浏览了 &lt;code&gt;&lt;a href=&quot;http://www.contoso.com/article?id=12345&quot; class=&quot;uri&quot;&gt;http://www.contoso.com/article?id=12345&lt;/a&gt;&lt;/code&gt; 这个Url所指向的一篇文章。&lt;/p&gt;
&lt;pre&gt;
{&lt;br/&gt;&quot;appActivityId&quot;: &quot;/article?12345&quot;,&lt;br/&gt;&quot;activitySourceHost&quot;: &quot;&lt;a href=&quot;https://www.contoso.com&quot; class=&quot;uri&quot;&gt;https://www.contoso.com&lt;/a&gt;&quot;,&lt;br/&gt;&quot;userTimezone&quot;: &quot;Africa/Casablanca&quot;,&lt;br/&gt;&quot;appDisplayName&quot;: &quot;Contoso, Ltd.&quot;,&lt;br/&gt;&quot;activationUrl&quot;: &quot;&lt;a href=&quot;http://www.contoso.com/article?id=12345&quot; class=&quot;uri&quot;&gt;http://www.contoso.com/article?id=12345&lt;/a&gt;&quot;,&lt;br/&gt;&quot;contentUrl&quot;: &quot;&lt;a href=&quot;http://www.contoso.com/article?id=12345&quot; class=&quot;uri&quot;&gt;http://www.contoso.com/article?id=12345&lt;/a&gt;&quot;,&lt;br/&gt;&quot;fallbackUrl&quot;: &quot;&lt;a href=&quot;http://www.contoso.com/article?id=12345&quot; class=&quot;uri&quot;&gt;http://www.contoso.com/article?id=12345&lt;/a&gt;&quot;,&lt;br/&gt;&quot;contentInfo&quot;: {&lt;br/&gt;&lt;a href=&quot;mailto:%22@context%22&quot;&gt;&quot;@context&quot;&lt;/a&gt;: &quot;&lt;a href=&quot;http://schema.org&quot; class=&quot;uri&quot;&gt;http://schema.org&lt;/a&gt;&quot;,&lt;br/&gt;&lt;a href=&quot;mailto:%22@type%22&quot;&gt;&quot;@type&quot;&lt;/a&gt;: &quot;Article&quot;,&lt;br/&gt;&quot;author&quot;: &quot;Jennifer Booth&quot;,&lt;br/&gt;&quot;name&quot;: &quot;How to Tie a Reef Knot&quot;&lt;br/&gt;},&lt;br/&gt;&quot;visualElements&quot;: {&lt;br/&gt;&quot;attribution&quot;: {&lt;br/&gt;&quot;iconUrl&quot;: &quot;&lt;a href=&quot;http://www.contoso.com/icon&quot; class=&quot;uri&quot;&gt;http://www.contoso.com/icon&lt;/a&gt;&quot;,&lt;br/&gt;&quot;alternateText&quot;: &quot;Contoso, Ltd.&quot;,&lt;br/&gt;&quot;addImageQuery&quot;: &quot;false&quot;,&lt;br/&gt;},&lt;br/&gt;&quot;description&quot;: &quot;How to Tie a Reef Knot. A step-by-step visual guide to the art of nautical knot-tying.&quot;,&lt;br/&gt;&quot;backgroundColor&quot;: &quot;#ff0000&quot;,&lt;br/&gt;&quot;displayText&quot;: &quot;Contoso How-To: How to Tie a Reef Knot&quot;,&lt;br/&gt;&quot;content&quot;: {&lt;br/&gt;&quot;$schema&quot;: &quot;&lt;a href=&quot;http://adaptivecards.io/schemas/adaptive-card.json&quot; class=&quot;uri&quot;&gt;http://adaptivecards.io/schemas/adaptive-card.json&lt;/a&gt;&quot;,&lt;br/&gt;&quot;type&quot;: &quot;AdaptiveCard&quot;,&lt;br/&gt;&quot;body&quot;:&lt;br/&gt;[{&lt;br/&gt;&quot;type&quot;: &quot;TextBlock&quot;,&lt;br/&gt;&quot;text&quot;: &quot;Contoso MainPage&quot;&lt;br/&gt;}]&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;在Microsoft Graph Explorer 中用PUT方法，将上述数据，发送到&lt;code&gt;&lt;a href=&quot;https://graph.microsoft.com/v1.0/me/activities/%2Farticle%3F12345&quot;&gt;https://graph.microsoft.com/v1.0/me/activities/%2Farticle%3F12345&lt;/a&gt;&lt;/code&gt;, 同时记得设置Content-Type为application/json&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-01-36.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-01-36.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果一切正常的话，你将收到一个回复，里面包含了在Microsoft Graph中创建的Activity的信息，这里会返回全局唯一的&lt;code&gt;id&lt;/code&gt;属性。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-03-20.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-03-20.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请注意，如果要更新，也是使用同样的一个命令。而如果要进行删除，则需要用 DELETE 方法，请参考 &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_delete_activity&quot;&gt;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_delete_activity&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有两个接口用来查询用户活动（Activity），分别是&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;获取用户活动（可以获取全部，也可以获取指定筛选条件的活动），如果需要同时包含历史信息，则需要添加查询参数 $expand=historyitems。 详细的API说明，请参考 &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_activities&quot;&gt;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_activities&lt;/a&gt; 。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;获取用户最近的活动。可以理解为上一种的简化版本，Microsoft Graph会查询最近的一个History Items，然后找到它们对应的活动条目。详细的API说明，请参考 &lt;a href=&quot;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_recent_activities&quot;&gt;https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_recent_activities&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面是一个简单的查询例子&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-15-40.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-15-40.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这一篇文章带领大家了解了Windows 10最新版本中Timeline这个功能的实现原理，并且用实例演示了如何使用Microsoft Graph来实现自定义的类似应用，我用Microsoft Graph Explorer做了演示，大家可以一目了然地看到接口的调用和返回值。&lt;/p&gt;
&lt;p&gt;因为这个功能比较新，Microsoft Graph的SDK中，还没有完全包含这个功能，我还发现.NET SDK中存在一点小问题，已经跟产品团队反馈了。所以，如果你现在开始做实践，建议还使用REST API的方式。&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 15:30:00 +0000</pubDate>
<dc:creator>陈希章</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenxizhang/p/9033990.html</dc:identifier>
</item>
</channel>
</rss>