<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>AFNetworking 源码解读 - 咸梅干超人</title>
<link>http://www.cnblogs.com/bigly/p/8511540.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigly/p/8511540.html</guid>
<description>&lt;p&gt;最近开始看第三方库优秀源码的计划，这是第一个，AFNetworking来和大家分享一下。&lt;/p&gt;
&lt;p&gt;AFNetworking 是一个十分优秀的网络框架，简单易用。 在开始之前，最好先了解一下NSURLSession相关的知识。详情可看http://www.cnblogs.com/bigly/p/8476610.html。&lt;/p&gt;
&lt;p&gt;首先，我们来看一下AFNetworking的文件结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1003815/201804/1003815-20180415153150196-1386325581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 从图中我们可以看出，AF大致分为五个模块：&lt;/p&gt;
&lt;p&gt;网络请求模块，　　（AFURLSessionManager, AFHTTPSessionManager）&lt;/p&gt;
&lt;p&gt;网络状态模块，　　　(AFNetworkReachabilityManager)&lt;/p&gt;
&lt;p&gt;安全策略模块，　　　(AFSecurityPolicy)&lt;/p&gt;
&lt;p&gt;序列化反序列化模块，(AFURLRequestSerialization, AFURLResponseSerialization)&lt;/p&gt;
&lt;p&gt;UI相关模块&lt;/p&gt;
&lt;p&gt;其中，最重要的是网络请求模块。&lt;/p&gt;
&lt;p&gt;现在我们来看看AFNetworking怎么使用的，以下是作者git上的源代码：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;网络请求：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
NSURLSessionConfiguration *configuration =&lt;span&gt; [NSURLSessionConfiguration defaultSessionConfiguration];
AFURLSessionManager &lt;/span&gt;*manager =&lt;span&gt; [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];

NSURL &lt;/span&gt;*URL = [NSURL URLWithString:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;http://example.com/download.zip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
NSURLRequest &lt;/span&gt;*request =&lt;span&gt; [NSURLRequest requestWithURL:URL];

NSURLSessionDownloadTask &lt;/span&gt;*downloadTask = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *&lt;span&gt;response) {
    NSURL &lt;/span&gt;*documentsDirectoryURL =&lt;span&gt; [[NSFileManager defaultManager] URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];
} completionHandler:&lt;/span&gt;^(NSURLResponse *response, NSURL *filePath, NSError *&lt;span&gt;error) {
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;File downloaded to: %@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, filePath);
}];
[downloadTask resume];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过这段代码，我们可以看到，AFNetworking 是通过对NSURLSession进行封装来实现的。我们先来看一下AFURLSessionManager的初始化，在初始化方法里AF并没有做太多事，主要是NSURLSession的初始化以及安全策略等初始化。（关于安全策略和序列化我们后面再进行讲解）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
-&lt;span&gt; (instancetype)init {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [self initWithSessionConfiguration:nil];
}

&lt;/span&gt;- (instancetype)initWithSessionConfiguration:(NSURLSessionConfiguration *&lt;span&gt;)configuration {
    self &lt;/span&gt;=&lt;span&gt; [super init];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;self) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil;
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;configuration) {
        configuration &lt;/span&gt;=&lt;span&gt; [NSURLSessionConfiguration defaultSessionConfiguration];
    }

    self.sessionConfiguration &lt;/span&gt;=&lt;span&gt; configuration;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化任务所在队列，且设置并发数为1&lt;/span&gt;
    self.operationQueue =&lt;span&gt; [[NSOperationQueue alloc] init];
    self.operationQueue.maxConcurrentOperationCount &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化NSURLSession&lt;/span&gt;
    self.session = [NSURLSession sessionWithConfiguration:self.sessionConfiguration &lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;:self delegateQueue:self.operationQueue];

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化Serializer&lt;/span&gt;
    self.responseSerializer =&lt;span&gt; [AFJSONResponseSerializer serializer];
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化安全策略&lt;/span&gt;
    self.securityPolicy =&lt;span&gt; [AFSecurityPolicy defaultPolicy];

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化网络监听模块&lt;/span&gt;
&lt;span&gt;#if&lt;/span&gt; !TARGET_OS_WATCH&lt;span&gt;
    self.reachabilityManager &lt;/span&gt;=&lt;span&gt; [AFNetworkReachabilityManager sharedManager];
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化代理相关的字典&lt;/span&gt;
    self.mutableTaskDelegatesKeyedByTaskIdentifier =&lt;span&gt; [[NSMutableDictionary alloc] init];
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化锁&lt;/span&gt;
    self.&lt;span&gt;lock&lt;/span&gt; =&lt;span&gt; [[NSLock alloc] init];
    self.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;.name =&lt;span&gt; AFURLSessionManagerLockName;
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化时获取所有进行中的任务，并将所有代理置空。 正常来说，初始化时应该获取不到任何的task, 事实上也是如此，但在
     进入后台再到前台初始化化时可能会有任务，导致崩溃
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    
    [self.session getTasksWithCompletionHandler:&lt;/span&gt;^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *&lt;span&gt;downloadTasks) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (NSURLSessionDataTask *task &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dataTasks) {
            [self addDelegateForDataTask:task uploadProgress:nil downloadProgress:nil completionHandler:nil];
        }

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (NSURLSessionUploadTask *uploadTask &lt;span&gt;in&lt;/span&gt;&lt;span&gt; uploadTasks) {
            [self addDelegateForUploadTask:uploadTask progress:nil completionHandler:nil];
        }

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (NSURLSessionDownloadTask *downloadTask &lt;span&gt;in&lt;/span&gt;&lt;span&gt; downloadTasks) {
            [self addDelegateForDownloadTask:downloadTask progress:nil destination:nil completionHandler:nil];
        }
    }];

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来看一下NSURLSessionDownloadTask 的获取方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *&lt;span&gt;)request
                                             progress:(&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (^)(NSProgress *&lt;span&gt;downloadProgress)) downloadProgressBlock
                                          destination:(NSURL &lt;/span&gt;* (^)(NSURL *targetPath, NSURLResponse *&lt;span&gt;response))destination
                                    completionHandler:(&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (^)(NSURLResponse *response, NSURL *filePath, NSError *&lt;span&gt;error))completionHandler
{
    __block NSURLSessionDownloadTask &lt;/span&gt;*downloadTask =&lt;span&gt; nil;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步队列生成task&lt;/span&gt;
    url_session_manager_create_task_safely(^&lt;span&gt;{
        downloadTask &lt;/span&gt;=&lt;span&gt; [self.session downloadTaskWithRequest:request];
    });
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加对应的AFURLSessionManagerTaskDelegate&lt;/span&gt;
&lt;span&gt;    [self addDelegateForDownloadTask:downloadTask progress:downloadProgressBlock destination:destination completionHandler:completionHandler];

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; downloadTask;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里有一个比较巧妙的地方，AFURLSessionManader实现了NSURLSession相关的代理方法，然后在每次生成task时，将传入的block以字典形式持有，&lt;/p&gt;
&lt;p&gt;然后在NSURLSession代理方法中调用，这样使用者就不需要去实现相关的代理，只需要传入block，更加简洁。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;)addDelegateForDownloadTask:(NSURLSessionDownloadTask *&lt;span&gt;)downloadTask
                          progress:(&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (^)(NSProgress *&lt;span&gt;downloadProgress)) downloadProgressBlock
                       destination:(NSURL &lt;/span&gt;* (^)(NSURL *targetPath, NSURLResponse *&lt;span&gt;response))destination
                 completionHandler:(&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; (^)(NSURLResponse *response, NSURL *filePath, NSError *&lt;span&gt;error))completionHandler
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建代理对象&lt;/span&gt;
    AFURLSessionManagerTaskDelegate *&lt;span&gt;delegate&lt;/span&gt; =&lt;span&gt; [[AFURLSessionManagerTaskDelegate alloc] initWithTask:downloadTask];
    &lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;.manager =&lt;span&gt; self;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置对应的block&lt;/span&gt;
    &lt;span&gt;delegate&lt;/span&gt;.completionHandler =&lt;span&gt; completionHandler;

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (destination) {
        &lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;.downloadTaskDidFinishDownloading = ^NSURL * (NSURLSession * __unused session, NSURLSessionDownloadTask *task, NSURL *&lt;span&gt;location) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; destination(location, task.response);
        };
    }

    downloadTask.taskDescription &lt;/span&gt;=&lt;span&gt; self.taskDescriptionForSessionTasks;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将代理对象添加到字典中&lt;/span&gt;
    [self setDelegate:&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt; forTask:downloadTask];

    &lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;.downloadProgressBlock =&lt;span&gt; downloadProgressBlock;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此外，在添加代理对象的时候，AF增加了一些额外的监听方法，使用rutime实现，实现方式比较巧妙，有兴趣的可以研究一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;)setDelegate:(AFURLSessionManagerTaskDelegate *)&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;
            forTask:(NSURLSessionTask &lt;/span&gt;*&lt;span&gt;)task
{
    NSParameterAssert(task);
    NSParameterAssert(&lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;);

    [self.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt; &lt;span&gt;lock&lt;/span&gt;&lt;span&gt;];
    self.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)] &lt;/span&gt;= &lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听task，使用runtime来实现&lt;/span&gt;
&lt;span&gt;    [self addNotificationObserverForTask:task];
    [self.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt; unlock];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;获取到NSURLSessionDownloadtask之后直接调用resume方法开始下载，接下来我们看看回调相关的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;)URLSession:(NSURLSession *&lt;span&gt;)session
      downloadTask:(NSURLSessionDownloadTask &lt;/span&gt;*&lt;span&gt;)downloadTask
didFinishDownloadingToURL:(NSURL &lt;/span&gt;*&lt;span&gt;)location
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从字典获取对应的代理对象&lt;/span&gt;
    AFURLSessionManagerTaskDelegate *&lt;span&gt;delegate&lt;/span&gt; =&lt;span&gt; [self delegateForTask:downloadTask];
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果设置了downloadTask处理的block则执行该block
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一般比较少采用这种方式&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (self.downloadTaskDidFinishDownloading) {
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取文件保存路径&lt;/span&gt;
        NSURL *fileURL =&lt;span&gt; self.downloadTaskDidFinishDownloading(session, downloadTask, location);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (fileURL) {
            &lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;.downloadFileURL =&lt;span&gt; fileURL;
            NSError &lt;/span&gt;*error =&lt;span&gt; nil;
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于downloadtask,下载完成后需要将文件拷贝到其他路径否则会被删除&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (![[NSFileManager defaultManager] moveItemAtURL:location toURL:fileURL error:&amp;amp;&lt;span&gt;error]) {
                [[NSNotificationCenter defaultCenter] postNotificationName:AFURLSessionDownloadTaskDidFailToMoveFileNotification &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;:downloadTask userInfo:error.userInfo];
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用代理对象执行对应方法，和手动设置block逻辑一样&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;) {
        [&lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt; URLSession:session downloadTask:downloadTask didFinishDownloadingToURL:location];
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在下载完成的回调方法中，我们看到有两条路径，一个是从字典中获取对应的代理对象，另外一种是直接获取下载完成回调的block,&lt;/p&gt;
&lt;p&gt;这两种方式大同小异，都是在回调方法中做了一层转接，如果要直接使用下载完成的block可以通过以下方法设置。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;)setDownloadTaskDidFinishDownloadingBlock:(nullable NSURL * _Nullable  (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, NSURL *locatio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NSURLSessionDownloadTaskDelegate 还有很多其他回调方法，但原理同上，在此不一一赘述。&lt;/p&gt;
&lt;p&gt;NSURLSessionDataTask，NSURLSessionUploadTask等和NSURLSessionDownLoadTask的使用类似，也不一一讲解。&lt;/p&gt;

&lt;p&gt;关于网络请求，我们可以看到还有一个AFHTTPSessionManager， 顾名思义，这个类是专门为HTTP请求封装的。它继承自AFHTTPSessionManager&lt;/p&gt;
&lt;p&gt;对比一下AFURLSessionManager，我们可以发现，在AFHTTPSessionManager有一个属性是AFURLSessionManager所没有的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@property (nonatomic, strong) AFHTTPRequestSerializer &amp;lt;AFURLRequestSerialization&amp;gt; * requestSerializer;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个类负责构造各种http请求，而实际发送请求的还是在AFURLSessionManger中的相关方法。&lt;/p&gt;

&lt;p&gt;后续讲解AFURLRequestSerialization时会提到。//ps：先占个坑，有时间继续完成&lt;/p&gt;

</description>
<pubDate>Sun, 15 Apr 2018 07:32:00 +0000</pubDate>
<dc:creator>咸梅干超人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bigly/p/8511540.html</dc:identifier>
</item>
<item>
<title>模拟Paxos算法及其简单学习总结 - Qcer</title>
<link>http://www.cnblogs.com/qcblog/p/8727556.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcblog/p/8727556.html</guid>
<description>&lt;h2&gt;一、导读&lt;/h2&gt;
&lt;p&gt;Paxos算法的流程本身不算很难，但是其推导过程和证明比较难懂。在&lt;em&gt;Paxos Made Simple[1]&lt;/em&gt;中虽然也用了尽量简化的流程来解释该算法，但其实还是比较抽象，而且有一些细节问题没有交代，读完也只能了解到算法的一个大致轮廓。在《从Paxos到Zookeeper 分布式一致性原理与实践》[3]中也讲到Paxos算法，但是其行文思路也是延续了原论文，没有一个具体的实例来帮助读者理解。&lt;/p&gt;
&lt;p&gt;第一次我也没看懂，后来觉得，可能是我学习的方式不对。通常而言，都是在已经成熟的问题抽象和逻辑推理之上去理解算法的，理论层面的概念模型为算法赋予灵魂，但往往不够具体因而不易理解；相对而言，恰当的算法模拟可以为赋予算法血肉，理解算法最好的方式就是手动模拟。两方面都很重要，适当结合往往能够理解得更深刻。本文也试图先梳理Paxos算法的流程，然后特意构造一些实例去模拟算法的场景，从实例的角度去理解该算法。&lt;/p&gt;
&lt;p&gt;本文省略掉不必要的基础的介绍，尽量直接的进入主题。内容范围仅限于&lt;em&gt;the&lt;/em&gt; &lt;span class=&quot;fontstyle0&quot;&gt;&lt;em&gt;The Basic Paxos Algorithm&lt;/em&gt;，不讨论Paxos算法家族的其他变种&lt;/span&gt;。接下来的第二节是针对各角色的信息保持、算法流程的梳理和简单约定，在第三节会构造一些实例，并结合算法流程去模拟该算法，第四节会简单总结该算法重要特性，在最后会引入一些参考资料。&lt;/p&gt;
&lt;h2&gt;二、信息保持及算法流程&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 关于提案及Acceptor和Proposer的信息保持&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先这里的提案(proposal)是一个抽象的概念。具体可以是“推选某个节点为Leader”或者“将某个值更新为另一个值”，甚至是“将某个更新操作更写到日志系统中”等等。&lt;/p&gt;
&lt;p&gt;在后面的算法模拟中，提案由一个提案编号和提案值(Value)组成：[N,Value]。Paxos算法以轮次的形式进行，也即每轮以一个全局唯一的自增编号发起。轮次与提案编号呼应，即在第K轮次中，在满足一定条件的情况下会产生编号为K，提案值为VK的提案：[K,VK]。&lt;/p&gt;
&lt;p&gt;如果某个提案在某轮次中被某超过半数的Acceptor批准，则该提案被选定。&lt;/p&gt;
&lt;p&gt;其次Acceptor和Proposer都需要保持一些必要的信息，并会更新这些信息。&lt;/p&gt;
&lt;p&gt;Acceptor保持的信息为：RoP_Max，RoA_Max和Value_Acc。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;RoP_Max含义是某Acceptor参与的最大轮次（the max round of participation），相当于原论文中的&lt;span class=&quot;fontstyle0&quot;&gt;rnd&lt;span class=&quot;fontstyle1&quot;&gt;[&lt;span class=&quot;fontstyle0&quot;&gt;a&lt;span class=&quot;fontstyle1&quot;&gt;]，初始为0。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;RoA_Max的含义是某Acceptor已批准的提案的最大轮次（the max round of acceptance），相当于原论文中的vrnd[a]，初始值为0。&lt;/p&gt;
&lt;p&gt;Value_Acc代表被当前已批准的提案，相当于原论文中的vval[a]，初始为NULL。&lt;/p&gt;
&lt;p&gt;注意：这里参与的含义可能是在P1-B阶段Acceptor对某伦次提案请求的响应，也可能是在P2-B阶段Acceptor批准了某轮次的提案，因此这两个阶段均会更新RoP_Max。&lt;/p&gt;
&lt;p&gt;不难得知，这里的RoA_Max和Value_Acc组合可以得到某伦次被批准的提案：[RoA_Max,Value_Acc]。&lt;/p&gt;
&lt;p&gt;其初始状态如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415101702085-1440469336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Proposer保存的信息为R_Max和Value_Pick。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;R_Max表示某Proposer发起的最大轮次号，相当于原论文中的crnd[c]，初始值为0。&lt;/p&gt;
&lt;p&gt;Value_Pick表示Proposer在P2-A阶段挑选的提案值，相当于原论文中的cval[c]，初始值为NULL。&lt;/p&gt;
&lt;p&gt;R_Max和Value_Pick组合可产生一个提案：[R_Max,Value_Pick]，当然不是每轮都具备条件产生一个提案。&lt;/p&gt;
&lt;p&gt;其初始状态如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415101758941-1158580465.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2原论文中的算法流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在&lt;em&gt;Paxos Made Simple[1]&lt;/em&gt;中算法流程分为两阶段：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 1：&lt;/strong&gt;&lt;br/&gt;(a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors.&lt;strong&gt;--&amp;gt;记作P1-A&lt;/strong&gt;&lt;br/&gt;(b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded,then it responds to the request with a promise not to accept any more proposals numbered less than n and with the highest-numbered proposal (if any) that it has accepted.&lt;strong&gt;--&amp;gt;记作P1-B&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 2：&lt;/strong&gt;&lt;br/&gt;(a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v, where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals.&lt;strong&gt;--&amp;gt;记作P2-A&lt;/strong&gt;&lt;br/&gt;(b) If an acceptor receives an accept request for a proposal numbered n, it accepts the proposal unless it has already responded to a prepare request having a number greater than n.&lt;strong&gt;--&amp;gt;P2-B&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上述四个阶段可以分别简记为：P1-A，P1-B，P2-A，P2-B。&lt;/p&gt;
&lt;p&gt;以上算法流程提供了一个初步的算法轮廓，有很多细节问题没有交代。因此仅仅依靠以上的信息，并不能够完全去模拟出一个具体的算法实例。&lt;/p&gt;
&lt;p&gt;在&lt;em&gt;Fast Paxos[2]&lt;/em&gt;中的&lt;em&gt;Section 2:&lt;/em&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;em&gt;The Classic Paxos Algorithm&lt;/em&gt;中作者给出了一个比较具体的算法流程（少数单词已根据本文语境做替换）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P1-A:&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;If R_Max &amp;lt; i, then proposer starts round i by setting R_Max to i,setting Value_Pick to NULL, and sending a message to each acceptor a requesting that a participate in round i.&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;P1-B:&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;If an acceptor a receives a request to participate in round i and i &amp;gt; RoP_Max, then a sets RoP_Max to i and sends proposer p a message containing the round number i and the current values of RoA_Max and Value_Acc.&lt;/em&gt;&lt;br/&gt;&lt;em&gt;If i &amp;lt;= RoP_Max (so a has begun round i or a higher-numbered round), then a ignores the request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P2-A:&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;If R_Max = i (so p has not begun a higher-numbered round),Value_Pick = NULL (so p has not yet performed phase 2a for this round), and p has received phase 1b messages for round i from a majority of the acceptors; then by a rule described below, p uses the contents of those messages to pick a value v, sets Value_Pick to v,and sends a message to the acceptors requesting that they vote in round i to accept v.&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;P2-B:&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;If an acceptor a receives a request to vote in round i to accept a value v, and i &amp;gt;= RoP_Max and RoA_Max != i; then a votes in round i to accept v, sets RoA_Max and RoP_Max to i, sets Value_Acc to v, and sends a message to all learners announcing its round i vote.&lt;/em&gt;&lt;br/&gt;&lt;em&gt;If i &amp;lt; RoP_Max or RoA_Max = i (so a has begun a higher-numbered round or already voted in this round), then a ignores the request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; 以上流程应该是比较精确的描述，英文本身的内容也不难理解，不再需要过多的翻译。本文也会遵循这个流程去模拟一些实例。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 本文对算法流程的约定。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为方便后文的陈述，对以上各阶段中涉及的过程做恰当的约定，同时尽量与大多数介绍Paxos算法的文章说法保持一致。&lt;/p&gt;
&lt;p&gt;1、为方便起见，各阶段的消息通信以(X)或者(X,[Y,Z])或者([Y,Z])的形式表示，具体视情况而定。&lt;/p&gt;
&lt;p&gt;2、P1-A中Proposer向Acceptor集合发送的提案请求称作Prepare请求，消息内容包括轮次号N：(N)。&lt;/p&gt;
&lt;p&gt;3、P1-B中Acceptor的响应Proposer的过程称作Promise响应，消息内容包含轮次号和某提案（=提案编号+提案值）：(N,[K,VK])。&lt;/p&gt;
&lt;p&gt;其中N的含义是Acceptor向Proposer保证该自己不会批准（Accept）任何编号小于N的提案。&lt;/p&gt;
&lt;p&gt;4、P2-A中Proposer向Acceptor集合发送批准请求称作Accept请求，消息内容是一个提案：([K,VK])。&lt;/p&gt;
&lt;h2&gt;三、实例及算法模拟&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 一个最基础实例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假设有5个Acceptor，1个Proposer。其初始状态下如上文中的列表所示。&lt;/p&gt;
&lt;p&gt;1）按照P1-A约定，Proposer发起轮次为1 的Prepare请求；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415102023495-278553126.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）假设所有Acceptor均收到请求，按照约定P1-B，满足1大于所有Acceptor持有的RoP_Max值的条件，于是将自己的RoP_Max值设置为1，所有的Acceptor均响应Prepare请求，此时所有的Acceptor之前并未批准任何提案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415102248799-1575662051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 3）假设Proposer收到了所有的5个Acceptor的Promise响应，按照P2-A的约定，收到响应的数量已经超过Acceptor集合的半数，同时由于之前并未存在批准的提案，Proposer可以任意选择一个提案值，这里暂且记为选择了V1这个提案，Proposer应该发送Accept请求，希望Acceptor集合批准该提案。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415102502577-1006314517.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4）假设所有Acceptor均收到了Accept请求，按照P2-B的约定，5个Acceptor尚未参与任何编号比1更大的提案（此时只存在一个Proposer且之前只发起了一轮提案），所以所有Acceptor应该批准V1这个提案，批准之后Acceptor的状态如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415102545463-1811905268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，[1,V1]这个提案被半数以上的Acceptor批准，所以[1,V1]是一个被选定（chosen）的提案，V1是被选定的提案值。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 异常情况下算法的工作流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上一小节的基础实例是在理想情况下的情形，而实际情况要复杂很多，例如网络拥塞导致消息延迟或者乱序、网络分化导致消息不可达、Acceptor和Proposer本身宕机等等，这些异常情况要求该算法要有比较好的容错性。实际上整个分布式系统设计讨论的几个核心要点之一就是针对各种异常情况下的系统容错性。&lt;/p&gt;
&lt;p&gt;以下讨论一些典型的异常情况下Paxos算法如何正确的工作。&lt;/p&gt;
&lt;p&gt;仍然假设有5个Acceptor，1个Proposer。&lt;/p&gt;
&lt;p&gt;1）初始状态&lt;/p&gt;
&lt;p&gt;Acceptor集合持有状态：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415102636313-1008723268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; Proposer持有状态：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415102646192-1757508997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 2）Proposer发起第一轮Prepare请求；假设由于暂时网络中断或者网络分化等网络异常，只有Acceptor1和Acceptor5收到了提案请求，这两个Acceptor正常响应Prepare请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415103152600-1656098457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3）Proposer收到了这两个响应，此时根据P2-A的约定，响应数不足半数，不具备发送Accept请求的条件，于是Proposer重新发起第二轮Prepare请求。假定这次有四个Acceptor收到了请求，唯独发往Acceptor1的请求丢失了。成功收到消息的四个Acceptor给予正常响应。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415133643278-1667773488.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4）Proposer也成功收到了四个响应，根据P2-A的约定，Proposer任选一个提案V1发送Accept请求：(2,V1)。但是Acceptor集合中只有Acceptor2和A&lt;span class=&quot;Apple-tab-span&quot;&gt;cceptor3&lt;/span&gt;两个收到了这个Accept请求。此时[2,V1]只被两个Acceptor批准，目前为止仍然没有任何一个提案被选定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415103432414-385972373.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5）Proposer发起第三轮提案Prepare请求，全部的Acceptor收到了提案请求，并给予响应。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415103558594-606092791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6）Proposer收到全部的响应，应该评估这些响应，并从中响应的提案中挑选一个提案值。此时根据P2-A的约定，挑选的应该是最大的RoA_Max所对应的提案值。max{0,2,2,0,0}=2，对应的提案是V1，因此Proposer在本轮挑选的提案值为V1。Proposer向Acceptor集合发送Accept请求:[3,V1]，假设这次有Acceptor1，Acceptor3和Acceptor5收到了Accept请求并批准了该提案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415103838696-19800833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到目前为止，进过3轮，[3,V1]提案已经被超过半数的Acceptor批准，因此被选定。其实上述讨论的过程中，每个过程都有可能存在消息丢失，而消息丢失的原因也可能是多种多样，并不仅仅指因网络原因造成的消息丢失，例如节点短时间宕机也可以归为这里的消息丢失。&lt;/p&gt;
&lt;p&gt;实际上，在网路通信情况较差的情况下，即便进过多轮次，仍然有可能得不到一个选定的提案，无论是3个Acceptor还是5个Acceptor或者说更多的Acceptor构成的集合，可以很容易的构造出这样的场景，关键是Acceptor接受提案的环节（P2-B阶段）直接影响了该算法的最终结果。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 3.3 关于时序问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以上虽然只是讨论了只有一个Proposer的情形，并且是假定了每轮结束后（来自Acceptor的响应不足半数以上或者在Acceptor集合批准某提案后仍然不能选定某个提案）才发起下一轮的提案请求。实际上，两轮提案完全可以允许异步进行，基于该算法Acceptor集合在P1-B和P2-B对提案编号的判定和约束，如果Acceptor在Promise响应（对于P1-B）或者接受（对应P2-B）某轮次为M的提案时，发现自己在之前已经响应了比M更大轮次的提案，则M这一轮次的提案实际上已经失效了，被更高轮次的提案所抢占。所以只要保证一个全局不重复的提案编号（轮次编号），按照该算法的约定，就能够保证该算法的正确性，但可能需要进行更多轮次才能选定一个提案。&lt;/p&gt;
&lt;p&gt;更进一步，如果存在多个Proposer的情况，每个Proposer多都能在任意时间点发起提案请求，似乎有可能出现上面提到的“轮次抢占”的现象。比如多个Proposer如果按照一定的节拍交叠地在P1-B这个阶段轮流“抢占”，会出现所谓的“活锁”现象。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4 “活锁”现象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果允许同一个Proposer交叠的发起提案请求，考虑如下一种情形：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415104216861-1288105806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，不同的颜色代表同一个Proposer在不同时间点发起的不同轮次。所有的轮次均在P2-B阶段被Acceptor集合认为无效，因为在收到该轮次的Accept请求之前不久，Acceptor集合响应了一个更高轮次的提案，导致RoP_Max变大。如果一直按照这个节拍发起后续的轮次，那么陷入一个“死循环”，永远无法选定一个提案了，尽管在真实的场景中这种情况发生的概率很小。&lt;/p&gt;
&lt;p&gt;尽管理论上存在这种情况，但是实际上可以很容易的对Proposer施加约束来规避这种情况。例如可以约定针对某个Proposer发起的某一轮次的提案请求，只有确定该轮次为无效被丢弃后，同一个Proposer才能发起下一轮次的提案请求。&lt;/p&gt;
&lt;p&gt;理解了上述过程，在多个Proposer存在时导致“活锁”现象与之类似，很容易构造一个场景来重现“活锁”现象，只需要让不同的Proposer轮流发起提案请求即可，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415145023091-1445686974.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5 关于Pcik a Value规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假设在第K轮次，提案[K,VK]被超过半数的Acceptor批准，那么这个提案就认为被选定，并且在以后的轮次M（M&amp;gt;K）中，根据挑选Value的规则，在P2-A阶段，Proposer只能够挑选VK，因此只能组成[M,VK]形式的提案希望Acceptor集合批准。&lt;/p&gt;
&lt;p&gt;因此，即使在多轮Paxos算法过程中，有可能会存在多个提案被选定，但是这些被选定的提案值必定是相等的。从某种角度来说，要达到要取得一致意见，达成共识的目的，实际上要求的是针对某提案值Value达成共识，而提案编号为提案值披上了一层外衣，使我们更好的进行算法的处理。&lt;/p&gt;
&lt;p&gt;原论文中关于Pcik a Value的规则如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415104959829-1040203220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pcik a Value&lt;/em&gt;的规则可以说是该算法的核心，也是保证了该算法安全性的关键。&lt;/p&gt;
&lt;p&gt;假设有3个Acceptor，一个Proposer，这次以某一个中间状态开始讨论。&lt;/p&gt;
&lt;p&gt;Acceptor当前状态（达到这种状态是完全有可能的）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415105308290-1040225646.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1）Aroposer以N=3发起第三轮Prepare请求：(3)，Acceptor1和Acceptor3收到请求，并作出响应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415105502904-605983560.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）Proposer成功收到响应，发起Accept请求：[3,V1]，但只有Acceptor1和Acceptor3收到了Accept请求，满足批准条件。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415105747632-1736705292.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;此时，提案[3,V1]已经被Acceptor1和Acceptor3批准，被视为选定的提案。然后如果再以N=4发起新一轮的提案请求，在第4轮的P1-B阶段，Proposer只有在收到2个Promise响应的条件下才具备发起Accept请求的条件。而根据&lt;em&gt;Pick a Value&lt;/em&gt;的规则，无论怎么组合两个Promise响应，其RoA_Max最大值只能是3，其对应的Value只能是V1，只能是V1有资格被挑选出来在P2-A阶段与轮次4组成新的提案:[4,V1]，不可能是V2。V1在第4轮结束后定会被超过半数的Acceptor批准，这一情况无法被改变。&lt;/p&gt;
&lt;p&gt;讨论更一般地情况：&lt;/p&gt;
&lt;p&gt;不失一般性，这里假设在顺利完成第K轮提案之后，提案[K,VK]被超过半数Acceptor批准从而首次被选定，在1到K-1的各轮次中，尚未有一个提案被选定。&lt;/p&gt;
&lt;p&gt;那么在第K轮的P1-B阶段，必定有超过半数的Acceptor响应了Proposer的Prepare请求，响应Prepare请求的集合中每个Acceptor都将自己的RoP_Max更新为K。&lt;/p&gt;
&lt;p&gt;Proposer也必定收到了超过半数的Promise响应，否则无法发起Accept请求。然后Proposer挑选了VK，顺利发起了Accept请求：([k,VK])。（注意：因为前面已经设立了第K轮后VK被选定的题设，故这里Accept请求中必定是VK无疑，VK并非特指某一个提案，可以是任意一个，具有任意性。）&lt;/p&gt;
&lt;p&gt;超过半数的Acceptor收到Accept请求，更新自己的RoP_Max和RoA_Max为K，Value为VK，然后VK被批准的数量超过半数，被选定。&lt;/p&gt;
&lt;p&gt;至此，其实已经有了一些隐含其中的细微逻辑可以发掘。考虑将RoA_Max=K的Acceptor集合记为集合S，将Value=VK的集合记为集合T。显然，两个过半的集合必定有重叠，至少重叠一个。“超过半数”的发现对于接下来的推论其实很重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/653357/201804/653357-20180415111236000-1225943224.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 接下来发起第K+1轮的Prepare请求：(K+1)，假设这一轮也很顺利。&lt;/p&gt;
&lt;p&gt;Proposer收到超过半数Acceptor的Promise响应，记这些半数以上的Acceptor集合为Q。此时可以断定，所有的这些Promise响应中，由RoA_Max组成的集合中最大值必定为K，因为集合S与集合Q的交集必定至少有一个公共元素。同时，这个RoA_Max=K的Promise响应中Value必定为VK，因为这就是在第K轮被集合S中每个Acceptor批准的提案。因此根据P2-A的约定，第K+1轮被挑选出来的Value是VK，该轮产生的提案是[K+1,VK],发送该提案希望Acceptor能够批准，当然在该轮的P2-B阶段，可能没有一个Acceptor批准VK（所有消息均丢失），也有可能某些Acceptor批准了VK。总之，经过第K+1轮之后，批准VK的Acceptor不会比第K轮减少，只会越来越多。&lt;/p&gt;
&lt;p&gt;按照以上的逻辑，继续往更高的轮次推演，超过半数的Acceptor批准VK这个结论已然成立，由此保证该算法的安全性。&lt;/p&gt;
&lt;p&gt;当然以上逻辑只是一个直白的、非正式的推理，但能够说明部分问题。更精准的证明可以看论文。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.6 Learner学习被选定的提案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Learner学习的目的就是需要找出某一个超过半数的Acceptor批准的提案。要实现这一目的，最简单的办法是一旦Acceptor批准了一个提案，就将该批准的提案告知每一个Learner，显然从通信次数的角度来看，这样有点麻烦，至少需要Count(Acceptor)XCount(Learner)次通信才能确定被选定的。&lt;/p&gt;
&lt;p&gt;稍微改进一下，可以选一个主Learner（原文中称作a distinguished learner），Acceptor只需要与这个主Learner通信，再由这个主Learner去通知其他的Learner。这种改进方法存在单点故障，缺乏可靠性。所以通常，需要一个主Learner的集合来解决可靠性的问题。&lt;/p&gt;
&lt;h2&gt;四、一点总结&lt;/h2&gt;
&lt;p&gt;1）Paxos算法在网络通信比较好的情况下能够快速高效的让一个提案被半数以上的Acceptor接受，选定一个提案，从而达成一致意见。&lt;/p&gt;
&lt;p&gt;2）Paxos算法的容错能力是2F+1。即在总共有2F+1个服务端的情况，只要不超过F个服务端同时出现损毁，该算法就能够正常运作。&lt;/p&gt;
&lt;p&gt;2）采用“超过半数”的机制，保证在某轮次只能有一个提案没选定，采用&lt;em&gt;Pick a Value&lt;/em&gt;规则挑选提案值，保证不同的轮次只能有一个提案值被选定。不同的轮次可能有不同的提案被选定，但是这些选定的提案仅仅是提案编号不同，其提案值必定相同。&lt;/p&gt;
&lt;p&gt;4）当某个提案被选定，那么从此以后，所有的Acceptor只能批准该提案值，这是由&lt;em&gt;Pick a Value&lt;/em&gt;的规则保障的。&lt;/p&gt;
&lt;p&gt;5）假设所有的Acceptor都接批准某个提案值，将这些提案值的集合记为S（例如S={V1，V2，V3}），那么，即使现在尚未有提案值被选定，但是可以肯定，在将来被选定的提案值一定是集合S中的某一个提案值，绝不可能是其他的提案值了，保证了一种“封闭”特性。保证这个特性的正是P1-B中Acceptor响应给Proposer时的约束：Acceptor只会将自己曾经批准的提案中最高编号的提案响应给Proposer。举例来说，对于5个Acceptor来说，排除冗余情况，Proposer最多只有三次能够任选提案值的机会（收到所有的Promise响应中均为NULL并且Accept请求存在消息丢失），考虑任选提案值也有可能会选择到相同的提案值，因此集合S最多只能有三个不同的提案值。更一般的，当Acceptor集合的大小为奇数R时，集合S的大小最多为R/2+1。&lt;/p&gt;
&lt;h2&gt;五、 Reference&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/paxos-made-simple/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Fpaxos-simple.pdf&quot; target=&quot;_blank&quot;&gt;Leslie Lamport. Paxos made simple.2001,11,1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/fast-paxos/&quot; target=&quot;_blank&quot;&gt;Leslie Lamport.Fastpaxos. DistributedComputing,19(2):79–103,2006.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] 《从Paxos到Zookeeper 分布式一致性原理与实践》&lt;/p&gt;
&lt;p&gt;[4] 《分布式系统原理介绍 刘杰》&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&quot;http://www.infoq.com/cn/articles/wechat-paxosstore-paxos-algorithm-protocol&quot; target=&quot;_blank&quot;&gt;http://www.infoq.com/cn/articles/wechat-paxosstore-paxos-algorithm-protocol&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 15 Apr 2018 07:18:00 +0000</pubDate>
<dc:creator>Qcer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcblog/p/8727556.html</dc:identifier>
</item>
<item>
<title>Vue还有这种操作？浅析几个新手常常忽略的API - 手撕黄油</title>
<link>http://www.cnblogs.com/caideyipi/p/8840251.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/caideyipi/p/8840251.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一：实现子组件与父组件双向绑定的“sync”：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，我们实现父子组件值的传递通常使用的是【props】和自定义事件【$emit】。父组件通过【props】将值传给子组件，子组件通过【$emit】将值传给父组件，父组件通过【$on】获取子组件传过来的值，如果说想要实现&lt;strong&gt;子组件修改父组件&lt;/strong&gt;传过来的值，最容易的就是这种方法了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
//父组件向子组件传值&lt;br/&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;child-com :value=&quot;text&quot;&amp;gt;&amp;lt;/child-com&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        data(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;{
                 text:&lt;/span&gt;&quot;父组件的值&quot;&lt;span&gt;,
             }
        }   
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;            
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
//子组件向父组件传值&lt;br/&gt;&amp;lt;template&amp;gt;
    &amp;lt;div @click=&quot;post&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        methods:{
            post(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('getChildValue',&quot;子组件的值&quot;&lt;span&gt;)
            }
        }
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时父组件可以通过【$on】获取子组件的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;child-com :value=&quot;text&quot; @getChildValue = &quot;getValue&quot;&amp;gt;&amp;lt;/child-com&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        data(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                text:&lt;/span&gt;&quot;父组件的值&quot;&lt;span&gt;,
            }
        },
        methods:{
            getValue(child_value){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.text =&lt;span&gt; child_value;
            }
        }
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，就可以实现子组件修改父组件的值。&lt;/p&gt;
&lt;p&gt;不过，这种方法有一个弊端——子组件修改父组件的值需要一个传递的过程，或者说，&lt;strong&gt;两个值并不是同步的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;熟悉Vue1.0的朋友应该知道一个叫【.sync】的修饰符，它可以实现父子组件的双向绑定，不过在Vue2.0被移除了，直到2.3.0版本发布后才重新回归，所以一些和我一样从2.0开始使用Vue的朋友很有可能不清楚，事实上，【.sync】可以很轻松的实现子组件同步修改父组件的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
//父组件&lt;br/&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;child-com :value.sync=&quot;text&quot; &amp;gt;&amp;lt;/child-com&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        data(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                text:&lt;/span&gt;&quot;父组件的值&quot;&lt;span&gt;,
            }
        },
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子组件修改父组件的值&lt;/span&gt;
&amp;lt;template&amp;gt;
    &amp;lt;div @click=&quot;post&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        methods:{
            post(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('update:data',&quot;子组件的值&quot;&lt;span&gt;)
            }
        }
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以看到，对于子组件来说，仅仅是自定义事件名做了一点改变，但是就代码底层逻辑来说，子组件和父组件真正实现了&lt;strong&gt;同步的双向绑定&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然，正如文档所说：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;.sync修饰符很方便，但也会导致问题，因为破坏了单向数据流。由于子组件改变 prop 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;二：自定义指令：“directives”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于自定义指令文档其实介绍的比较详细了，而且还举了一个非常详细的例子：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/custom-directive.html&quot; target=&quot;_blank&quot;&gt;自定义指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义指令其实就是Vue为我们提供直接操作dom的一些列方法，虽然大部分开发时间都会面向数据，但说不准什么时候确实需要操作dom本身。&lt;/p&gt;
&lt;p&gt;就我而言，自定义指令最大的用处就是可以引用一些第三方的代码插入到Vue项目中，比如有一个操作dom的函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//当然，真实情况第三方的代码要复杂的多&lt;br/&gt;function&lt;/span&gt;&lt;span&gt; changeColor(dom){
    dom.style.backgroundColor &lt;/span&gt;= &quot;red&quot;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以注册一个全局的指令来为需要执行changeColor方法的dom提供指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Vue.directives('color'&lt;span&gt;,{
    bind:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(el){
        changeColor(el)
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，如果需要这个dom改变颜色的话，只需要这样即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;div v-color&amp;gt;改变颜色&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当日常开发遇到跟dom有关的问题却一筹莫展时，可以想想自定义指令是否有功能可以解决为题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三：&lt;/strong&gt; &lt;strong&gt;inheritAttrs和attrs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面我已经提到过了，父组件通过props可以向子组件传值，但在日常的开发中，还有一种情况很常见，就是父组件给子组件传值，这个值还要从子组件传给它的子组件，所以，我们可能会看到这样的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父组件&lt;/span&gt;
&amp;lt;div&amp;gt;
    &amp;lt;child :text=&quot;text&quot;&amp;gt;&amp;lt;/child&amp;gt;
&amp;lt;/div&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子组件&lt;/span&gt;
&amp;lt;div&amp;gt;
    &amp;lt;my-child :text=&quot;text&quot;&amp;gt;&amp;lt;/my-child&amp;gt;
&amp;lt;/div&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子组件的子组件&lt;/span&gt;
&amp;lt;div&amp;gt;
    &amp;lt;div&amp;gt;{{text}}&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做是非常麻烦而且不易于维护的，通常情况下，我们可以使用vuex来解决。不过，不复杂的项目中如果仅仅为这一个问题就引入vuex实际上是没必要的，Vue提供了【inheritAttrs】和【attrs】两个功能来解决这样的问题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父组件&lt;/span&gt;
&amp;lt;template&amp;gt;
   &amp;lt;div&amp;gt;
     &amp;lt;child :text=&quot;text&quot;  :count=&quot;count&quot;&amp;gt;&amp;lt;/child&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        data(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                text:&lt;/span&gt;&quot;父组件的值&quot;&lt;span&gt;，
                count:&lt;/span&gt;123456&lt;span&gt;，
            }
        }
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//子组件&lt;br/&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;{{text}}&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        props:[&lt;/span&gt;&quot;text&quot;&lt;span&gt;]
    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意，这里父组件的count属性仅仅挂在子组件上，并没有使用。&lt;/strong&gt;此时我们打开浏览器，可以看到子组件的dom上显示的展示了message=&quot;123456&quot;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188624/201804/1188624-20180415134128963-1302747632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，我们可以通过设置inheritAttrs: false来取消这种默认行为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;{
    ......   
  }  
}

inheritAttrs: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;mounted(){&lt;br/&gt;　　console.log(this.$attrs); //{count:123456}&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时再看dom上就没有message属性了。然后，我还打印了this.$attrs的值，值为一个包含着count键值对的Object。&lt;/p&gt;
&lt;p&gt;也就是说，父组件没有props的属性值会被保存在一个名为$attrs中供子组件使用，然而这并没有解决开头&lt;strong&gt;子组件的子组件获取值&lt;/strong&gt;的问题。别急，我们只需要在子组件上加个东西就可以了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;template&amp;gt;
    &amp;lt;div class=&quot;child&quot;&amp;gt;
        &amp;lt;my-child v-bind=&quot;$attrs&quot;&amp;gt;&amp;lt;/my-child&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，子组件的子组件也可以获取这个值了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四：混入——mixins&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实这个功能有些类似于es6中的Object.assign()方法。根据一定的规则合并两个配置，具体的混入策略可以看官方文档：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/mixins.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6%E7%AD%96%E7%95%A5&quot; target=&quot;_blank&quot;&gt;mixins混入策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;混入最大的用处是把一些常用的data或者methods等抽出来，比如在我的项目中有许多个模态框，而关闭模态框的代码逻辑是一模一样的，为此我没有必要在多个组件中重复把关闭模态框的逻辑写入methods中，只需要在外面定义一个mixins，在需要的组件中通过：mixins: [myMin]写入即可。&lt;/p&gt;
</description>
<pubDate>Sun, 15 Apr 2018 06:26:00 +0000</pubDate>
<dc:creator>手撕黄油</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/caideyipi/p/8840251.html</dc:identifier>
</item>
<item>
<title>用js来实现那些数据结构05（栈02-栈的应用） - Zaking</title>
<link>http://www.cnblogs.com/zaking/p/8837056.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zaking/p/8837056.html</guid>
<description>&lt;p&gt;　　上一篇文章我们一起实现了栈，那么这一篇文章我们一起来用栈解决问题。看看如何用栈来解决&lt;strong&gt;进制转换&lt;/strong&gt;，&lt;strong&gt;平衡圆括号&lt;/strong&gt;以及&lt;strong&gt;汉诺塔&lt;/strong&gt;问题，使我们对栈有更为深入的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、进制转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们先来看看&lt;a href=&quot;https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6/393189?fr=aladdin#2&quot; target=&quot;_blank&quot;&gt;十进制如何转换成二进制&lt;/a&gt;，十进制整数转换为二进制整数采用&quot;除2取余，逆序排列&quot;法。具体做法是：用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为0时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。&lt;strong&gt;简单来说就是拿十进制数去除以二，如果整除了，那么余数为0，放入栈中，如果没有整除，余数就是1，放入栈中，直至相除的结果为0。依据所得到的结果，后得到的余数排列在最前面。也就是栈顶元素从左到右排列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们已经知道了十进制如何转换成二进制，那么我们看看代码是怎么实现的吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; decimalToBinary(decNumber) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个stack对象&lt;/span&gt;
  const remStack = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要转换的数字&lt;/span&gt;
  let number =&lt;span&gt; decNumber;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次相除后所得的余数&lt;/span&gt;
&lt;span&gt;  let rem;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换后的二进制字符串&lt;/span&gt;
  let binaryString = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当number为0的时候结束循环&lt;/span&gt;
  &lt;span&gt;while&lt;/span&gt; (number &amp;gt; 0&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对余数向下取整，因为这里不取整的话会出现小数，js没有浮点或者整形这一说。&lt;/span&gt;
    rem = Math.floor(number % 2&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存储当前的余数&lt;/span&gt;
&lt;span&gt;    remStack.push(rem);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为上面对number取余只是拿到了最后余数的结果，number本身并没有除以二，所以这里除以二是为了保证后面可以再一次取余的结果正确性&lt;/span&gt;
    number = Math.floor(number / 2&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的意思是如果栈中还有元素，那么就循环拼接字符串。&lt;/span&gt;
  &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;remStack.isEmpty()) {
    binaryString &lt;/span&gt;+=&lt;span&gt; remStack.pop().toString();
  }

  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; binaryString;
}

console.log(decimalToBinary(&lt;/span&gt;100));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1100100&lt;/span&gt;
console.log(decimalToBinary(1));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
console.log(decimalToBinary(2));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;
console.log(decimalToBinary(111));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1101111&lt;/span&gt;
console.log(decimalToBinary(65));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1000001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　那么上面就实现了十进制转换二进制的方法，那么我想可不可以使它更完善一点，实现十进制转换成二进制，八进制，十六进制等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; baseConverter(decNumber, base) {
  const remStack &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这是转换的对比字典，大家知道在十位以后的禁止转换中，10用A代表，11用B代表。&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;所以当我们在转换的时候需要使余数的数字被字母所替换。&lt;/span&gt;
  const digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'&lt;span&gt;;
  let number &lt;/span&gt;=&lt;span&gt; decNumber;
  let rem;
  let baseString &lt;/span&gt;= ''&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里只做2到36位之间的转换，因为理论上来讲可以进行任何位数之间的互相转换。&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;但是在不同位数之间转换的时候会有更为复杂的情况&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (!(base &amp;gt;= 2 &amp;amp;&amp;amp; base &amp;lt;= 36&lt;span&gt;)) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ''&lt;span&gt;;
  }

  &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (number &amp;gt; 0&lt;span&gt;) {
    rem &lt;/span&gt;= Math.floor(number %&lt;span&gt; base);
    remStack.push(rem);
    number &lt;/span&gt;= Math.floor(number /&lt;span&gt; base);
  }

  &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;remStack.isEmpty()) {
    baseString &lt;/span&gt;+=&lt;span&gt; digits[remStack.pop()];
  }

  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; baseString;
}


console.log(baseConverter(&lt;/span&gt;100,16));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;
console.log(baseConverter(1,16));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
console.log(baseConverter(12,8));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;
console.log(baseConverter(122323123,36));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;20TT4J&lt;/span&gt;
console.log(baseConverter(111111111,28));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6CLF9R&lt;/span&gt;
console.log(baseConverter(99,16));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们发现其实对于十进制转换成其它进制，貌似只是多了一个对照表digits,本质上并没有什么区别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、平衡圆括号&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; parenthesesChecker(symbols) {
  const stack &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
  const opens &lt;/span&gt;= '([{'&lt;span&gt;;
  const closers &lt;/span&gt;= ')]}'&lt;span&gt;;
  let balanced &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
  let index &lt;/span&gt;= 0&lt;span&gt;;
  let symbol;
  let top;
  &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (index &amp;lt; symbols.length &amp;amp;&amp;amp;&lt;span&gt; balanced) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从0开始（index的初始值），给symbol赋值&lt;/span&gt;
    symbol =&lt;span&gt; symbols.charAt(index);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里判断symbol是否在opens中存在，即opens.indexOf的返回值不为负数。&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (opens.indexOf(symbol) &amp;gt;= 0&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果存在，那么说明是开始符号，入栈。&lt;/span&gt;
&lt;span&gt;      stack.push(symbol);
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;那么之前判断了是否存在开始符号，如果不存在的话就不会入栈，所以stack就没有元素，自然stack为空，balanced返回false。&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为如果一开始的第一个符号就是尾部符号一定是无法对称平衡的。&lt;/span&gt;
    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (stack.isEmpty()) {
      balanced &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取栈顶元素并移除&lt;/span&gt;
      top =&lt;span&gt; stack.pop();
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个else其实是当symbols中对应的下标没有值得时候，就说明是closer中的值之一。&lt;/span&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;所以这里的symbol其实是closer，所以获取最近入栈的值进行比较，就能判断出是否是平衡的。&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (!(opens.indexOf(top) ===&lt;span&gt; closers.indexOf(symbol))) {
        balanced &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
      }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 继续循环&lt;/span&gt;
    index++&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里，如果是balanced的，并且stack为空，那么说明我们的所有元素必然是一一对称的。&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为如果不对称是无法完全出栈的&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (balanced &amp;amp;&amp;amp;&lt;span&gt; stack.isEmpty()) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}


console.log(parenthesesChecker(&lt;/span&gt;&quot;(()()())&quot;&lt;span&gt;))
console.log(parenthesesChecker(&lt;/span&gt;&quot;(({})){[&quot;&lt;span&gt;))
console.log(parenthesesChecker(&lt;/span&gt;&quot;{}()[]&quot;&lt;span&gt;))
console.log(parenthesesChecker(&lt;/span&gt;&quot;{{{}}}}&quot;&lt;span&gt;))
console.log(parenthesesChecker(&lt;/span&gt;&quot;[][][][&quot;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;其实这个方法的核心在于，判断当前下标的参数是头部分还是尾部分，头部就入栈，如果是尾部就出栈头部并和当前尾部对比。正是利用了栈的特性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、汉诺塔&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;什么是汉诺塔？我相信很多人小时候都玩过，有图有真相，没图不BB。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1184971/201804/1184971-20180414231926403-1049638947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在开始玩汉诺塔游戏之前，我先给大家说一下&lt;a href=&quot;https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94/3468295?fr=aladdin#3_2https://baijiahao.baidu.com/s?id=1565959085480733&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot;&gt;汉诺塔游戏的规则&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;　　　　规则一：每次操作只能移动一个圈圈，把它从一个柱子移到另一个柱子上。&lt;/p&gt;
&lt;p&gt;　　　　规则二：大圈圈不能架在小圈圈的上面。&lt;/p&gt;
&lt;p&gt;　　这是游戏的规则，那么换作程序的话，规则是这样的：假设这里有三根相邻的柱子，标号为A,B,C，A柱子上由下到上按金字塔状叠放着n个不同大小的圆盘，要把所有盘子一个一个移动到柱子B上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方，请问至少需要移动多少次？&lt;/p&gt;
&lt;p&gt;　　我的理解，1、目的是把这个汉诺塔从一个柱子依照由下到上的顺序完整的移动到另一个柱子上，&lt;/p&gt;
&lt;p&gt;　　　　　　　2、大圈不能在小圈之下，但是可以隔层放置大小圈，比如八号最大，越往上越小，那么在移动的过程中，5号是可以放在7号上面的。&lt;/p&gt;
&lt;p&gt;　　　　　　　3、可以往回放。&lt;/p&gt;
&lt;p&gt;　　如果还有不清楚规则的地方，可以去&lt;a href=&quot;http://www.4399.com/flash/109504_1.htm&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;亲自玩一下这个游戏。&lt;/p&gt;
&lt;p&gt;　　我们已经对汉诺塔有了简单的了解，那么我们看看如何用栈来实现这个游戏吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;plates:盘子数量，source源柱子，helper暂存柱子，dest目标柱子，sourceName源柱子名称，helperName暂存柱子名称，destName目标柱子名称，moves步数（若不传值则默认为一个数组）&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; towerOfHanoi(plates, source, helper, dest, sourceName, helperName, destName, moves =&lt;span&gt; []) {
    console.log(moves.length)
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果盘子的数字不大于0 ，那么直接返回moves,终止递归的条件。&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (plates &amp;lt;= 0) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; moves;

  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (plates === 1&lt;span&gt;) {
    dest.push(source.pop());
    const move &lt;/span&gt;=&lt;span&gt; {};
    move[sourceName] &lt;/span&gt;=&lt;span&gt; source.toString();
    move[helperName] &lt;/span&gt;=&lt;span&gt; helper.toString();
    move[destName] &lt;/span&gt;=&lt;span&gt; dest.toString();
    moves.push(move);
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归调用自身。并且将盘子的数量减少一个，这里交换了dest和helper的位置，是为了dest.push中存入的栈是helper栈，也就是说是为了存入对应的柱子。&lt;/span&gt;
    towerOfHanoi(plates - 1&lt;span&gt;, source, dest, helper, sourceName, destName, helperName, moves);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从源柱子拿出最顶层的一个放入目标柱子（如果dest和helper互换了位置，那么其实这里的dest实际上代表的是helper）&lt;/span&gt;
&lt;span&gt;    dest.push(source.pop());
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明常量，用来存储当前各个柱子的盘子栈况&lt;/span&gt;
    const move =&lt;span&gt; {};
    move[sourceName] &lt;/span&gt;=&lt;span&gt; source.toString();
    move[helperName] &lt;/span&gt;=&lt;span&gt; helper.toString();
    move[destName] &lt;/span&gt;=&lt;span&gt; dest.toString();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存入moves&lt;/span&gt;
&lt;span&gt;    moves.push(move);
    towerOfHanoi(plates &lt;/span&gt;- 1&lt;span&gt;, helper, source, dest, helperName, sourceName, destName, moves);
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; moves;
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; hanoiStack(plates) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建每一个柱子的栈对象，source是最开始拥有所有圈圈的柱子，dest是目标柱子，helper是中间的暂存柱子&lt;/span&gt;
  const source = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
  const dest &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
  const helper &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stack();
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;倒序循环把每一个圈圈序号放入source栈&lt;/span&gt;
  &lt;span&gt;for&lt;/span&gt; (let i = plates; i &amp;gt; 0; i--&lt;span&gt;) {
    source.push(i);
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过return调用towerOfHanoi计算方法。&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; towerOfHanoi(plates, source, helper, dest, 'source', 'helper', 'dest'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个方法是计算在汉诺塔的层数为plates的时候，每一个是从哪个柱子拿到哪个柱子的&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; hanoi(plates, source, helper, dest, moves =&lt;span&gt; []) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (plates &amp;lt;= 0) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; moves;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (plates === 1&lt;span&gt;) {
    moves.push([source, dest]);
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    hanoi(plates &lt;/span&gt;- 1&lt;span&gt;, source, dest, helper, moves);
    moves.push([source, dest]);
    hanoi(plates &lt;/span&gt;- 1&lt;span&gt;, helper, source, dest, moves);
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; moves;
}


console.log(hanoiStack(&lt;/span&gt;2&lt;span&gt;))
console.log(hanoi(&lt;/span&gt;8, 'source', 'helper', 'dest'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到这里，我们对栈有了一定的了解，相信大家在今后无论什么情况下遇到“栈”这个词都不会再陌生和懵懂了。那么对栈的学习到这里就基本结束了。下一篇文章会跟大家一起学习一下队列这个数据结构。&lt;/p&gt;

&lt;p&gt;　　最后，&lt;strong&gt;由于本人水平有限，能力与大神仍相差甚远，若有错误或不明之处，还望大家不吝赐教指正。非常感谢！&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 15 Apr 2018 06:08:00 +0000</pubDate>
<dc:creator>Zaking</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zaking/p/8837056.html</dc:identifier>
</item>
<item>
<title>搭建 springboot 2.0  mybatis 读写分离 配置区分不同环境 - 黄青石</title>
<link>http://www.cnblogs.com/huangqingshi/p/8847182.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangqingshi/p/8847182.html</guid>
<description>&lt;p&gt;　　最近公司打算使用springboot2.0, springboot支持HTTP/2，所以提前先搭建一下环境。网上很多都在springboot1.5实现的，所以还是有些差异的。接下来咱们一块看一下。&lt;/p&gt;
&lt;p&gt;　　文章的主要思路：&lt;/p&gt;
&lt;p&gt;　　1.工程的结构。&lt;/p&gt;
&lt;p&gt;　　2.重要代码说明。&lt;/p&gt;
&lt;p&gt;　　3.运行结果。&lt;/p&gt;
&lt;p&gt;　　4.总结。&lt;/p&gt;

&lt;p&gt;　　1) 我用的开发工具是Idea。工程的结构如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415132617633-1346023723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;工程结构的每个部分的说明：　&lt;/p&gt;
&lt;p&gt;　　config:  用于配置动态数据源的配置，同时使用切面实现数据库读写分离。同时使用ThreadLocal去维护当前线程该用读锁还是写锁。&lt;/p&gt;
&lt;p&gt;　　controller: 用于拦截请求，我在示例里边使用的是rest的请求拦截。&lt;/p&gt;
&lt;p&gt;　　entity: 与数据库对应的实体类。&lt;/p&gt;
&lt;p&gt;　　mapper: 与数据库数据库方法的对应&lt;/p&gt;
&lt;p&gt;　　service: 用于实现控制层到数据层的一个衔接，提供服务。&lt;/p&gt;
&lt;p&gt;　　还有一个启动入口类。　　&lt;/p&gt;
&lt;p&gt;　　resources下面的mapper文件夹是数据库映射的xml文件。&lt;/p&gt;
&lt;p&gt;　　app-config.xml用于添加外部的bean等提前放置的xml文件。需要使用该类时需要加上注解：@ImportResource(&quot;classpath:app-config.xml&quot;)。&lt;/p&gt;
&lt;p&gt;　　application.yml是应用的配置文件。&lt;/p&gt;
&lt;p&gt;　　logback.xml用于日志输出配置。&lt;/p&gt;
&lt;p&gt;　　mybatis-config.xml用于mybatis的一些配置内容。&lt;/p&gt;
&lt;p&gt;　　Testinit.sql用于创建表使用的。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;POM&lt;/strong&gt;文件的包引入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.hqs.demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springboot-mybatis-rw&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springboot2.0.1.RELEASE-mybatis-rw&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;logback.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;logback.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;druid&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-aop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;热部署使用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.jayway.jsonpath&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;json-path&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;logback-classic&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${logback.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;logback-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${logback.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2)  这块内容比较复杂的点应该就是读写库的切换：&lt;/p&gt;
&lt;p&gt;　　　 通过在DataSourceConfig.java里边读取主库从库：&lt;/p&gt;
&lt;p&gt;　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415134538541-765231390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　使用Spring切面编程来拦截需要更改数据库的方法：&lt;/p&gt;
&lt;p&gt;　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415134647503-1414783945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　根据配置的方法放到配置文件，可以将需要读或写的方法放到application.yml文件中：&lt;/p&gt;
&lt;pre&gt;
read: get,select,count,list,query,find&lt;br/&gt;write: add,create,update,delete,remove,insert
&lt;/pre&gt;
&lt;p&gt;　　3)运行结果：&lt;/p&gt;
&lt;p&gt;　　读数据：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415135615424-1585165369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　数据库采用read库&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415135641355-1090949138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　写数据：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415135717111-1575346640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用写库：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1236784/201804/1236784-20180415135849570-1424866446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4）总结：&lt;/p&gt;
&lt;p&gt;　　　1. 通过搭建springboot简单了解到其原理，编写很容易，运行也方便。&lt;/p&gt;
&lt;p&gt;　　　 2. 在搭建的过程中也参考了很多资料，非常感谢，牛人还是很多的。&lt;/p&gt;
&lt;p&gt;　　　 3. 本来打算用最新的&lt;span class=&quot;final-path&quot;&gt;druid-spring-boot-starter 1.1.9,但是没找到太多的资料，所以没有用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　 4. 放上git地址供参考 &lt;a href=&quot;https://github.com/stonehqs/springboot2.0.1.RELEASE-mybatis-rw&quot; target=&quot;_blank&quot;&gt;https://github.com/stonehqs/springboot2.0.1.RELEASE-mybatis-rw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果有不对的地方，还希望同学们给出意见和建议。&lt;/p&gt;

</description>
<pubDate>Sun, 15 Apr 2018 06:07:00 +0000</pubDate>
<dc:creator>黄青石</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangqingshi/p/8847182.html</dc:identifier>
</item>
<item>
<title>C++_进阶之函数模板_类模板 - 我举个栗子</title>
<link>http://www.cnblogs.com/wanghui1234/p/8846881.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wanghui1234/p/8846881.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt; C++_进阶之函数模板_类模板&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　c++提供了函数模板(function template.)所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体制定，用一个虚拟的类型来代表。这个通用函数就成为函数模板。凡是函数体相同的函数都可以用这个模板代替，不必定义多个函数，只需在模板中定义一次即可。在调用函数时系统会根据实参的类型来取代模板中的虚拟类型，从而实现不同函&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）c++提供两种模板机制:函数模板和类模板&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　2）类属 - 类型参数化，又称参数模板&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　使得程序(算法)可以从逻辑上抽象，把被处理的对象(数据)类型作为参数传递。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　1）模板把函数或类要处理的数据类型参数化，表现为参数的多态性，成为类属。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　2）模板用于表达逻辑结构相同，但具体数据元素类型不同的数据对象的通用行为。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201804/1322549-20180415120702888-209337687.png&quot; alt=&quot;&quot; width=&quot;351&quot; height=&quot;271&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;1.函数模板&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1.1为什么要有函数模板&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;需求：写n个函数，交换char类型、int类型、double类型变量的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;案例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_25aa68fa-3a38-482b-9aa9-f090174e8e0f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_25aa68fa-3a38-482b-9aa9-f090174e8e0f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_25aa68fa-3a38-482b-9aa9-f090174e8e0f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;void myswap(int &amp;amp;a, int &amp;amp;b)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    int t = a;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    a = b;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    b = t;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;void myswap(char &amp;amp;a, char &amp;amp;b)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    char t = a;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    a = b;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    b = t;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;template 关键字告诉C++编译器 我要开始泛型了.你不要随便报错  
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据类型T 参数化数据类型&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myswap(T &amp;amp;a, T &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    T t;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     t =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     a =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     b =&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;char a = 'c';&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;  x = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;     y = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     myswap(x, y); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动数据类型 推导的方式 &lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; a = &lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; b = &lt;span&gt;3.0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     myswap(a, b); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动数据类型 推导的方式 &lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     myswap&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;(a, b); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示类型调用 &lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;1.2函数模板语法&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;函数模板定义形式&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;　　template    &amp;lt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;类型形式参数表&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; &amp;gt;    &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　类型形式参数的形式为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　typename&lt;/strong&gt; &lt;em&gt;T&lt;/em&gt;&lt;em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; &lt;em&gt;,  &lt;/em&gt;&lt;strong&gt;typename&lt;/strong&gt;&lt;em&gt; T&lt;/em&gt;&lt;em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; &lt;em&gt;, …… ,&lt;/em&gt; &lt;strong&gt;typename&lt;/strong&gt;&lt;em&gt; T&lt;/em&gt;&lt;em&gt;&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;　　　　　　或 &lt;strong&gt;class&lt;/strong&gt; &lt;em&gt;T&lt;/em&gt;&lt;em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; &lt;em&gt;,  &lt;/em&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;em&gt; T&lt;/em&gt;&lt;em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; &lt;em&gt;, …… ,&lt;/em&gt; &lt;strong&gt;class&lt;/strong&gt;&lt;em&gt; T&lt;/em&gt;&lt;em&gt;&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201804/1322549-20180415122730676-192204702.png&quot; alt=&quot;&quot; width=&quot;458&quot; height=&quot;265&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;函数模板调用&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;　　　　myswap&amp;lt;float&amp;gt;(a, b);  //&lt;span&gt;显示类型调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　myswap(a, b); //&lt;span&gt;自动数据类型推导 &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.3函数模板和模板函数&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt;&lt;a title=&quot;函数模板和模板函数&quot; href=&quot;http://www.cnblogs.com/cxq0017/p/6549549.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;函数模板和模板函数&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201804/1322549-20180415124044228-1122243864.png&quot; alt=&quot;&quot; width=&quot;509&quot; height=&quot;349&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.4函数模板做函数参数&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;&lt;img id=&quot;code_img_closed_3a13cf29-c525-4007-bf1a-d6ac97928d02&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a13cf29-c525-4007-bf1a-d6ac97928d02&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a13cf29-c525-4007-bf1a-d6ac97928d02&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    让你对int行数组 和字符数组排序
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    函数模板本质：类型参数化
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; template &amp;lt;typename T, typename T2&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; mySort(T *array, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (array ==&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (T2 i =&lt;span&gt;0&lt;/span&gt; ;i&amp;lt;size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (T2 j =i+&lt;span&gt;1&lt;/span&gt;; j&amp;lt;size; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (array[i] &amp;gt;&lt;span&gt; array[j])
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                T temp;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 temp =&lt;span&gt; array[i];
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 array[i] =&lt;span&gt; array[j];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 array[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; template &amp;lt;typename T, typename T2&amp;gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; myPrintf(T *&lt;span&gt;array, T2 size)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (T2 i = &lt;span&gt;0&lt;/span&gt;; i&amp;lt;size; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         cout &amp;lt;&amp;lt; array[i] &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main21()
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int类型&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; myarray[] = { &lt;span&gt;22&lt;/span&gt;, &lt;span&gt;33&lt;/span&gt;,&lt;span&gt;44&lt;/span&gt;, &lt;span&gt;43&lt;/span&gt;, &lt;span&gt;56&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;44&lt;/span&gt;, &lt;span&gt;76&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;sizeof&lt;/span&gt;(myarray) / &lt;span&gt;sizeof&lt;/span&gt;(*&lt;span&gt;myarray);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         mySort&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(myarray, size);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;排序之后：\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         myPrintf&amp;lt;&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(myarray, size);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;char类型&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt; buf[] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ggggggghhhhhjjjdfffzzzzvvv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; strlen(buf);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         mySort&amp;lt;&lt;span&gt;char&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(buf, len);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         myPrintf&amp;lt;&lt;span&gt;char&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(buf, len);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;1.5函数模板遇上函数重载&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;函数模板和普通函数区别结论：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（1）函数模板不允许自动类型转化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（2）普通函数能够进行自动类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数模板和普通函数在一起，调用规则：&lt;/strong&gt;&lt;strong&gt;　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1 &lt;span&gt;函数模板可以像普通函数一样被重载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2 C++&lt;span&gt;编译器优先考虑普通函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　3 &lt;span&gt;如果函数模板可以产生一个更好的匹配，那么选择模板&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　4 &lt;span&gt;可以通过空模板实参列表的语法限定编译器只通过模板匹配&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以下代码对上面文字进行说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;案例1：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_4347edee-d3c0-4b85-b818-a0b30304c412&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4347edee-d3c0-4b85-b818-a0b30304c412&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4347edee-d3c0-4b85-b818-a0b30304c412&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myswap(T &amp;amp;a, T &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    T t;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     t =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     a =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     b =&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myswap 模板函数do&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myswap(&lt;span&gt;char&lt;/span&gt; &amp;amp;a, &lt;span&gt;int&lt;/span&gt; &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     t =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     a =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     b =&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myswap 普通函数do&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; cData = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;  iData = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;myswap&amp;lt;int&amp;gt;(cData, iData);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结论 函数模板不提供隐式的数据类型转换  必须是严格的匹配&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    myswap(cData, iData); 
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;myswap(iData, cData);&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     
&lt;span&gt;32&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;案例2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_c8feb4fc-e1ec-49d3-bc1d-943f30978e94&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c8feb4fc-e1ec-49d3-bc1d-943f30978e94&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c8feb4fc-e1ec-49d3-bc1d-943f30978e94&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;让类型参数化---》方便程序员进行编码
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;泛型编程
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;template告诉C++编译器，开始泛型编程，不要随便报错&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myswap(T &amp;amp;a, T &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    T c;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     c =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     a =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     b =&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是模板函数-----》&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myswap(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;char&lt;/span&gt;&lt;span&gt;  c)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是普通函数-----》&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main31()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; c = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     myswap(a,c);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当普通函数调用，可以进行隐式的类型转化&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    myswap(c, a);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     myswap(a, a);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用函数模板，（本质：类型参数化） 将严格进行类型匹配，不会进行类型转化&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;案例3：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_a85e7e18-595d-4543-9eb1-7870ea987aa5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a85e7e18-595d-4543-9eb1-7870ea987aa5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a85e7e18-595d-4543-9eb1-7870ea987aa5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iostream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Max(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int Max(int a, int b)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; a &amp;gt; b ?&lt;span&gt; a : b;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;T Max(T a, T b)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;T Max(T a, T b)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; a &amp;gt; b ?&lt;span&gt; a : b;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;T Max(T a, T b, T c)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;T Max(T a, T b, T c)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Max(Max(a, b), c);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; b = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     cout&amp;lt;&amp;lt;Max(a, b)&amp;lt;&amp;lt;endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当函数模板和普通函数都符合调用时,优先选择普通函数&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     cout&amp;lt;&amp;lt;Max&amp;lt;&amp;gt;(a, b)&amp;lt;&amp;lt;endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若显示使用函数模板,则使用&amp;lt;&amp;gt; 类型列表&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     cout&amp;lt;&amp;lt;Max(&lt;span&gt;3.0&lt;/span&gt;, &lt;span&gt;4.0&lt;/span&gt;)&amp;lt;&amp;lt;endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果 函数模板产生更好的匹配 使用函数模板&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     cout&amp;lt;&amp;lt;Max(&lt;span&gt;5.0&lt;/span&gt;, &lt;span&gt;6.0&lt;/span&gt;, &lt;span&gt;7.0&lt;/span&gt;)&amp;lt;&amp;lt;endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     cout&amp;lt;&amp;lt;Max(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;)&amp;lt;&amp;lt;endl;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用普通函数 可以隐式类型转换 &lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;案例4：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_36d37a5d-d90e-4069-9797-a41ee77ac236&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_36d37a5d-d90e-4069-9797-a41ee77ac236&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_36d37a5d-d90e-4069-9797-a41ee77ac236&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;函数模板和普通函数区别结论：
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    函数模板不允许自动类型转化
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    普通函数能够进行自动类型转换
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;函数模板和普通函数在一起，调用规则：
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    1 函数模板可以像普通函数一样被重载
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    2 C++编译器优先考虑普通函数
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    3 如果函数模板可以产生一个更好的匹配，那么选择模板
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    4 可以通过空模板实参列表的语法限定编译器只通过模板匹配
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iostream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Max(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;int Max(int a, int b)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; a &amp;gt; b ?&lt;span&gt; a : b;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;T Max(T a, T b)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;T Max(T a, T b)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; a &amp;gt; b ?&lt;span&gt; a : b;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;T Max(T a, T b, T c)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;T Max(T a, T b, T c)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Max(Max(a, b), c);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main41()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; b = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     cout &amp;lt;&amp;lt; Max(a, b) &amp;lt;&amp;lt; endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当函数模板和普通函数都符合调用时,优先选择普通函数&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     cout &amp;lt;&amp;lt; Max&amp;lt;&amp;gt;(a, b) &amp;lt;&amp;lt; endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若显示使用函数模板,则使用&amp;lt;&amp;gt; 类型列表&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     cout &amp;lt;&amp;lt; Max(&lt;span&gt;3.0&lt;/span&gt;, &lt;span&gt;4.0&lt;/span&gt;) &amp;lt;&amp;lt; endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果 函数模板产生更好的匹配 使用函数模板&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;     cout &amp;lt;&amp;lt; Max(&lt;span&gt;5.0&lt;/span&gt;, &lt;span&gt;6.0&lt;/span&gt;, &lt;span&gt;7.0&lt;/span&gt;) &amp;lt;&amp;lt; endl; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     cout &amp;lt;&amp;lt; Max(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;) &amp;lt;&amp;lt; endl;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用普通函数 可以隐式类型转换 &lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;1.6C++&lt;span&gt;编译器模板机制剖析&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;思考：为什么函数模板可以和函数重载放在一块。&lt;/span&gt;C++&lt;span&gt;编译器是如何提供函数模板机制的？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.cpp
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;g++ -S 1.cpp -o 1.s    变成汇编语言&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; myswap(T &amp;amp;a, T &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    T c;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     c =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     a =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     b =&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;函数模板的调用，显示类型调用，自动类型推倒&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main51()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         myswap&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(x, y);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;函数模板的显示类型调用&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         
&lt;span&gt;25&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x:%d y:%d \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, x, y);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt; a = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt; b = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         myswap&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt;(a, b);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;函数模板的显示类型调用&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x:%d y:%d \n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, a, b);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    原理：
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    C++编译器会根据你的调用来产生函数，如果是int型的会产生int型的函数
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    ，如果是char会产生，char型的函数，如果有的话，就不会产生了。
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    C++编译器帮我们写了一个函数，经过两次编译，形成的
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;函数模板机制结论
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;编译器并不是把函数模板处理成能够处理任意类的函数
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;编译器从函数模板通过具体类型产生不同的函数
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;编译器会对函数模板进行两次编译
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;在声明的地方对模板代码本身进行编译；在调用的地方对参数替换后的代码进行编译。
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 首先补充一些知识：&lt;/p&gt;
&lt;p&gt;　　编译器编译原理：&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;&lt;span&gt;什么是&lt;/span&gt;gcc &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;gcc（GNU C Compiler）编译器的作者是Richard Stallman，也是GNU项目的奠基者。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;什么是gcc：gcc是GNU Compiler Collection的缩写。最初是作为C语言的编译器（GNU C Compiler），现在已经支持多种语言了，如C、C++、Java、Pascal、Ada、COBOL语言等&lt;/em&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;gcc支持多种硬件平台，甚至对Don Knuth 设计的 MMIX 这类不常见的计算机都提供了完善的支持&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;　　 &lt;/span&gt;&lt;strong&gt;gcc&lt;span&gt;主要特征 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　　　　　　　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;1）gcc是一个可移植的编译器，支持多种硬件平台&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）gcc不仅仅是个本地编译器，它还能跨平台交叉编译。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3）gcc有多种语言前端，用于解析不同的语言。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4）gcc是按模块化设计的，可以加入新语言和新CPU架构的支持&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5）gcc是自由软件&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt; &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　　gcc&lt;span&gt;编译过程 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;预处理（Pre-Processing）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编译（Compiling）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;汇编（Assembling）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;链接（Linking）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Gcc *.c –o 1exe (总的编译步骤)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Gcc –E 1.c –o 1.i  //宏定义 宏展开&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Gcc –S 1.i –o 1.s&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Gcc –c 1.s –o 1.o  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Gcc 1.o –o 1exe&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结论：gcc编译工具是一个工具链。。。。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201804/1322549-20180415130032107-1440934121.png&quot; alt=&quot;&quot; width=&quot;572&quot; height=&quot;122&quot;/&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt; hello程序是一个高级Ｃ语言程序，这种形式容易被人读懂。为了在系统上运行hello.c程序，每条Ｃ语句都必须转化为低级机器指令。然后将这些指令打包成可执行目标文件格式，并以二进制形式存储器于磁盘中。&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;　　　　gcc&lt;span&gt;常用编译选项 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;选项&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot;&gt;
&lt;p&gt;&lt;span&gt;作用&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-o&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;产生目标（.i、.s、.o、可执行文件等）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-c&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;通知gcc取消链接步骤，即编译源码并在最后生成目标文件&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-E&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot;&gt;
&lt;p&gt;&lt;span&gt;只运行C预编译器&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-S&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;告诉编译器产生汇编语言文件后停止编译，产生的汇编语言文件扩展名为.s&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-Wall&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;使gcc对源文件的代码有问题的地方发出警告&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-Idir&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;将dir目录加入搜索头文件的目录路径&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-Ldir&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;将dir目录加入搜索库的目录路径&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-llib&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot;&gt;
&lt;p&gt;&lt;span&gt;链接lib库&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;91&quot;&gt;
&lt;p&gt;&lt;span&gt;-g&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;618&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;在目标文件中嵌入调试信息，以便gdb之类的调试程序调试&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　　　练习&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;710&quot; readability=&quot;17&quot;&gt;
&lt;p&gt;gcc -E hello.c -o hello.i&lt;span&gt;（预处理）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gcc -S hello.i -o hello.s&lt;span&gt;（编译）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gcc -c hello.s -o hello.o&lt;span&gt;（汇编）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gcc hello.o -o hello&lt;span&gt;（链接）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以上四个步骤，可合成一个步骤&lt;/p&gt;
&lt;p&gt;gcc hello.c -o hello&lt;span&gt;（直接编译链接成可执行目标文件）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gcc -c hello.c&lt;span&gt;或&lt;/span&gt;&lt;span&gt;gcc -c hello.c -o hello.o&lt;/span&gt;&lt;span&gt;（编译生成可重定位目标文件）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;710&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;建议初学都加这个选项。下面这个例子如果不加&lt;span&gt;-Wall&lt;/span&gt;&lt;span&gt;选项编译器不报任何错误，但是得到的结果却不是预期的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/p&gt;
&lt;p&gt;int main(void)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;        printf(&quot;2+1 is %f&quot;, 3);&lt;/p&gt;
&lt;p&gt;        return 0;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;710&quot;&gt;
&lt;p&gt;Gcc&lt;span&gt;编译多个&lt;/span&gt;&lt;span&gt;.c&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;710&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;hello_1.h&lt;/p&gt;
&lt;p&gt;hello_1.c&lt;/p&gt;
&lt;p&gt;main.c&lt;/p&gt;
&lt;p&gt;一次性编译&lt;/p&gt;
&lt;p&gt;gcc  hello_1.c main.c –o newhello&lt;/p&gt;
&lt;p&gt;独立编译&lt;/p&gt;
&lt;p&gt;gcc -Wall -c main.c -o main.o&lt;/p&gt;
&lt;p&gt;gcc -Wall -c hello_1.c -o hello_fn.o&lt;/p&gt;
&lt;p&gt;gcc -Wall main.o hello_1.o -o newhello&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　　　模板函数反汇编观察&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　命令：g++ -S 7.cpp -o 7.s&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　汇编语言：略过&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;&lt;img id=&quot;code_img_closed_3bc511bf-2f29-4cc5-bda5-80bf91e40711&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3bc511bf-2f29-4cc5-bda5-80bf91e40711&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3bc511bf-2f29-4cc5-bda5-80bf91e40711&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;163&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt;     .file    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;7.cpp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;    .text
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     .def    __ZL6printfPKcz;    .scl    &lt;span&gt;3&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;__ZL6printfPKcz:
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;LFB264:
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     pushl    %&lt;span&gt;ebx
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;     subl    $&lt;span&gt;36&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     .cfi_offset &lt;span&gt;3&lt;/span&gt;, -&lt;span&gt;12&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     leal    &lt;span&gt;12&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;     movl    %eax, -&lt;span&gt;12&lt;/span&gt;(%&lt;span&gt;ebp)
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     movl    -&lt;span&gt;12&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     movl    %eax, &lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     movl    &lt;span&gt;8&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;     movl    %eax, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    call    ___mingw_vprintf
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     movl    %eax, %&lt;span&gt;ebx
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     movl    %ebx, %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     addl    $&lt;span&gt;36&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     popl    %&lt;span&gt;ebx
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     .cfi_restore &lt;span&gt;3&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;     popl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;LFE264:
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; .lcomm __ZStL8__ioinit,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;     .def    ___main;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     .section .rdata,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;LC0:
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     .ascii &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:%d b:%d \12\0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;LC1:
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     .ascii &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c1:%c c2:%c \12\0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;LC2:
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     .ascii &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause\0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    .text
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    .globl    _main
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     .def    _main;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;_main:
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;LFB1023:
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     .cfi_personality &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,___gxx_personality_v0
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     .cfi_lsda &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,LLSDA1023
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;     andl    $-&lt;span&gt;16&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     subl    $&lt;span&gt;32&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    call    ___main
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     movl    $&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;28&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     movl    $&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;24&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     movb    $&lt;span&gt;97&lt;/span&gt;, &lt;span&gt;23&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;     movb    $&lt;span&gt;98&lt;/span&gt;, &lt;span&gt;22&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;     leal    &lt;span&gt;24&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;     movl    %eax, &lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     leal    &lt;span&gt;28&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     movl    %eax, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     call    __Z6myswapIiEvRT_S1_  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;66  ===&amp;gt;126 &lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     movl    &lt;span&gt;24&lt;/span&gt;(%esp), %&lt;span&gt;edx
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     movl    &lt;span&gt;28&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     movl    %edx, &lt;span&gt;8&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;     movl    %eax, &lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;     movl    $LC0, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;    call    __ZL6printfPKcz
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     leal    &lt;span&gt;22&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;     movl    %eax, &lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;     leal    &lt;span&gt;23&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     movl    %eax, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;     call    __Z6myswapIcEvRT_S1_ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;77 ===&amp;gt;155 &lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;     movzbl    &lt;span&gt;22&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     movsbl    %al, %&lt;span&gt;edx
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;     movzbl    &lt;span&gt;23&lt;/span&gt;(%esp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;     movsbl    %al, %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;     movl    %edx, &lt;span&gt;8&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;     movl    %eax, &lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     movl    $LC1, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    call    __ZL6printfPKcz
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;     movl    $LC2, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;LEHB0:
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;    call    _system
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;LEHE0:
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     movl    $&lt;span&gt;0&lt;/span&gt;, %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    jmp    L7
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;L6:
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     movl    %eax, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;LEHB1:
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    call    __Unwind_Resume
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;LEHE1:
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;L7:
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    leave
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;LFE1023:
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     .def    ___gxx_personality_v0;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;     .section    .gcc_except_table,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;LLSDA1023:
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     .&lt;span&gt;byte&lt;/span&gt;    &lt;span&gt;0xff&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;     .&lt;span&gt;byte&lt;/span&gt;    &lt;span&gt;0xff&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     .&lt;span&gt;byte&lt;/span&gt;    &lt;span&gt;0x1&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;     .uleb128 LLSDACSE1023-&lt;span&gt;LLSDACSB1023
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;LLSDACSB1023:
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     .uleb128 LEHB0-&lt;span&gt;LFB1023
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;     .uleb128 LEHE0-&lt;span&gt;LEHB0
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     .uleb128 L6-&lt;span&gt;LFB1023
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;     .uleb128 &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;     .uleb128 LEHB1-&lt;span&gt;LFB1023
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;     .uleb128 LEHE1-&lt;span&gt;LEHB1
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     .uleb128 &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;     .uleb128 &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;LLSDACSE1023:
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;    .text
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     .section    .text$_Z6myswapIiEvRT_S1_,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;    .linkonce discard
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;    .globl    __Z6myswapIiEvRT_S1_
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;     .def    __Z6myswapIiEvRT_S1_;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; __Z6myswapIiEvRT_S1_:  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;126 &lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;LFB1024:
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;     subl    $&lt;span&gt;16&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;     movl    &lt;span&gt;8&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;     movl    (%eax), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;     movl    %eax, -&lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;ebp)
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;     movl    &lt;span&gt;12&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;     movl    (%eax), %&lt;span&gt;edx
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     movl    &lt;span&gt;8&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;     movl    %edx, (%&lt;span&gt;eax)
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;     movl    &lt;span&gt;12&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;     movl    -&lt;span&gt;4&lt;/span&gt;(%ebp), %&lt;span&gt;edx
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;     movl    %edx, (%&lt;span&gt;eax)
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;    leave
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;LFE1024:
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;     .section    .text$_Z6myswapIcEvRT_S1_,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;    .linkonce discard
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;    .globl    __Z6myswapIcEvRT_S1_
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;     .def    __Z6myswapIcEvRT_S1_;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; __Z6myswapIcEvRT_S1_: &lt;span&gt;//&lt;/span&gt;&lt;span&gt;155 &lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;LFB1025:
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;     subl    $&lt;span&gt;16&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;     movl    &lt;span&gt;8&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;     movzbl    (%eax), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;     movb    %al, -&lt;span&gt;1&lt;/span&gt;(%&lt;span&gt;ebp)
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;     movl    &lt;span&gt;12&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;     movzbl    (%eax), %&lt;span&gt;edx
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;     movl    &lt;span&gt;8&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;     movb    %dl, (%&lt;span&gt;eax)
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;     movl    &lt;span&gt;12&lt;/span&gt;(%ebp), %&lt;span&gt;eax
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;     movzbl    -&lt;span&gt;1&lt;/span&gt;(%ebp), %&lt;span&gt;edx
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;     movb    %dl, (%&lt;span&gt;eax)
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;    leave
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;LFE1025:
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;    .text
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;     .def    ___tcf_0;    .scl    &lt;span&gt;3&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;___tcf_0:
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;LFB1027:
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;     subl    $&lt;span&gt;8&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;     movl    $__ZStL8__ioinit, %&lt;span&gt;ecx
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;    call    __ZNSt8ios_base4InitD1Ev
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;    leave
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;LFE1027:
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt;     .def    __Z41__static_initialization_and_destruction_0ii;    .scl    &lt;span&gt;3&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;__Z41__static_initialization_and_destruction_0ii:
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;LFB1026:
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;     subl    $&lt;span&gt;24&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt;     cmpl    $&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;(%&lt;span&gt;ebp)
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; &lt;span&gt;    jne    L11
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;     cmpl    $&lt;span&gt;65535&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;(%&lt;span&gt;ebp)
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;    jne    L11
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;     movl    $__ZStL8__ioinit, %&lt;span&gt;ecx
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; &lt;span&gt;    call    __ZNSt8ios_base4InitC1Ev
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;     movl    $___tcf_0, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;    call    _atexit
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;L11:
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;    leave
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;220&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; &lt;span&gt;LFE1026:
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;     .def    __GLOBAL__sub_I_main;    .scl    &lt;span&gt;3&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;__GLOBAL__sub_I_main:
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;LFB1028:
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;    .cfi_startproc
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;     pushl    %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;     .cfi_def_cfa_offset &lt;span&gt;8&lt;/span&gt;
&lt;span&gt;230&lt;/span&gt;     .cfi_offset &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;8&lt;/span&gt;
&lt;span&gt;231&lt;/span&gt;     movl    %esp, %&lt;span&gt;ebp
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;     .cfi_def_cfa_register &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;233&lt;/span&gt;     subl    $&lt;span&gt;24&lt;/span&gt;, %&lt;span&gt;esp
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;     movl    $&lt;span&gt;65535&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;(%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;     movl    $&lt;span&gt;1&lt;/span&gt;, (%&lt;span&gt;esp)
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; &lt;span&gt;    call    __Z41__static_initialization_and_destruction_0ii
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;    leave
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;     .cfi_restore &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;239&lt;/span&gt;     .cfi_def_cfa &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;240&lt;/span&gt; &lt;span&gt;    ret
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; &lt;span&gt;    .cfi_endproc
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; &lt;span&gt;LFE1028:
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt;     .section    .ctors,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;244&lt;/span&gt;     .align &lt;span&gt;4&lt;/span&gt;
&lt;span&gt;245&lt;/span&gt;     .&lt;span&gt;long&lt;/span&gt;&lt;span&gt;    __GLOBAL__sub_I_main
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;     .ident    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GCC: (rev2, Built by MinGW-builds project) 4.8.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;247&lt;/span&gt;     .def    ___mingw_vprintf;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;     .def    _system;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;     .def    __Unwind_Resume;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;     .def    __ZNSt8ios_base4InitD1Ev;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;     .def    __ZNSt8ios_base4InitC1Ev;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;&lt;span&gt;;    .endef
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;     .def    _atexit;    .scl    &lt;span&gt;2&lt;/span&gt;;    .type    &lt;span&gt;32&lt;/span&gt;;    .endef
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;1.7函数模板机制结论&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;编译器并不是把函数模板处理成能够处理任意类的函数&lt;/p&gt;
&lt;p&gt;编译器从函数模板通过具体类型产生不同的函数&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编译器会对函数模板进行&lt;strong&gt;两次编译&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在声明的地方对模板代码本身进行编译；在调用的地方对参数替换后的代码进行编译。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2.类模板&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;2.1为什么需要类模板&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;类模板与函数模板的定义和使用类似，我们已经进行了介绍&lt;/span&gt;。 &lt;span&gt;有时，有两个或多个类，其功能是相同的，仅仅是数据类型不同，如下面语句声明了一个类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201804/1322549-20180415131304034-987861138.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;309&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;类模板用于实现类所需数据的类型参数化&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;类模板在表示如数组、表、图等数据结构显得特别重要，&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;    &lt;span&gt;这些&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;数据结构的表示和算法&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;不受所包含的元素类型的影响&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;2.2单个类模板语法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_fd7a7765-2182-47c1-bf60-89f5f5ea27b9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd7a7765-2182-47c1-bf60-89f5f5ea27b9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd7a7765-2182-47c1-bf60-89f5f5ea27b9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;类的类型参数化 抽象的类
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单个类模板&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    A(T t)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;t =&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     T &amp;amp;&lt;span&gt;getT()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    T t;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模板了中如果使用了构造函数,则遵守以前的类的构造函数的调用规则&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;  a(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    a.getT();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    printAA(a);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;2.3继承中的类模板语法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201804/1322549-20180415131608304-372616319.png&quot; alt=&quot;&quot; width=&quot;428&quot; height=&quot;280&quot;/&gt;&lt;/p&gt;









&lt;p&gt;案例1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_fe11a3fe-3883-4560-8120-58db8576842b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fe11a3fe-3883-4560-8120-58db8576842b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fe11a3fe-3883-4560-8120-58db8576842b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;结论: 子类从模板类继承的时候,需要让编译器知道 父类的数据类型具体是什么(数据类型的本质:固定大小内存块的别名)A&amp;lt;int&amp;gt; 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; B : &lt;span&gt;public&lt;/span&gt; A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     B(&lt;span&gt;int&lt;/span&gt; i) : A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(i)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printB()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;t&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模板与上继承
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;怎么样从基类继承  
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若基类只有一个带参数的构造函数,子类是如何启动父类的构造函数&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; pintBB(B &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    b.printB();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; printAA(A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; &amp;amp;a)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;类模板做函数参数 &lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;      &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    a.getT();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;  a(&lt;span&gt;100&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模板了中如果使用了构造函数,则遵守以前的类的构造函数的调用规则 &lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    a.getT();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    printAA(a);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     B b(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    b.printB();
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;案例2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_f689e49a-3175-4206-a99b-97099e7f08b5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f689e49a-3175-4206-a99b-97099e7f08b5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f689e49a-3175-4206-a99b-97099e7f08b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;A编程模板类--类型参数化&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;类模板的定义 类模板的使用 类模板做函数参数
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     A(T a = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;a =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printA()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    T a;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从模板类派生时，需要具体化模板类，C++编译器需要知道父类的数据类型是什么样子的
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要知道父类所占的内存多少&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; B :&lt;span&gt;public&lt;/span&gt; A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     B(&lt;span&gt;int&lt;/span&gt; a =&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; b =&lt;span&gt;20&lt;/span&gt;):A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(a)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;b =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printB()
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从模板类派生模板类&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; C :&lt;span&gt;public&lt;/span&gt; A&amp;lt;T&amp;gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     C(T c,T a) : A&amp;lt;T&amp;gt;&lt;span&gt;(a)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;c =&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printC()
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    T c;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;B b1(1, 2);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;b1.printB();&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;     C&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c1(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    c1.printC();
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;2.4类模板的基础语法&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c83c6e81-b57d-4e9f-a995-c9b82975d275&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c83c6e81-b57d-4e9f-a995-c9b82975d275&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c83c6e81-b57d-4e9f-a995-c9b82975d275&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;A编程模板类--类型参数化&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    类模板的定义 类模板的使用 类模板做函数参数
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     A(T a = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;a =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printA()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    T a;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数 C++编译器具体的类&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; UseA(A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; &amp;amp;&lt;span&gt;a)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    a.printA();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模板类本身就是抽象的，具体的类，具体的变量&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     A&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; a1(&lt;span&gt;11&lt;/span&gt;),a2(&lt;span&gt;22&lt;/span&gt;),a3(&lt;span&gt;33&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模板类是抽象的， 需要类型具体化
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;a1.printA();&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    UseA(a1);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    UseA(a2);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    UseA(a3);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.5类模板语法知识体系梳理&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.所有的类模板函数写在类的内部&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复数类：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_e19ab236-2dd5-4fe6-8677-f0f477408d51&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e19ab236-2dd5-4fe6-8677-f0f477408d51&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e19ab236-2dd5-4fe6-8677-f0f477408d51&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Complex
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     friend Complex MySub(Complex &amp;amp;c1, Complex &amp;amp;&lt;span&gt;c2)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         Complex tmp(c1.a-c2.a, c1.b-&lt;span&gt;c2.b);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     friend ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt; (ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, Complex &amp;amp;&lt;span&gt;c3)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;out&lt;/span&gt; &amp;lt;&amp;lt; c3.a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; c3.b &amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    Complex(T a, T b)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;a =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;b =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     Complex &lt;span&gt;operator&lt;/span&gt;+(Complex &amp;amp;&lt;span&gt;c2)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         Complex tmp(a + c2.a, b +&lt;span&gt; c2.b);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printCom()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; b:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    T a;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    T b;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    重载运算符的正规写法：
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    重载左移&amp;lt;&amp;lt;  右移&amp;gt;&amp;gt; 只能用友元函数，其他的运算符重载都要用成员函数，不要滥用友元函数
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ostream &amp;amp; operator&amp;lt;&amp;lt; (ostream &amp;amp;out, Complex &amp;amp;c3)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    out&amp;lt;&amp;lt; &quot;a:&quot; &amp;lt;&amp;lt; c3.a &amp;lt;&amp;lt; &quot; b:&quot; &amp;lt;&amp;lt; c3.b &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return out;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;     c1(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;     c2(&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c3 = c1 + c2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载加号运算符&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    c3.printCom();
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载左移运算符&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;     cout &amp;lt;&amp;lt; c3 &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c4 =&lt;span&gt; MySub(c1 , c2);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         
&lt;span&gt;62&lt;/span&gt;         cout &amp;lt;&amp;lt; c4 &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;strong&gt;&lt;span&gt;所有的类模板函数写在类的外部，在一个&lt;/span&gt;cpp&lt;span&gt;中&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数 没有问题

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;普通函数 没有问题

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;友元函数：用友元函数重载 &amp;lt;&amp;lt; &amp;gt;&amp;gt;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; friend ostream&amp;amp; operator&amp;lt;&amp;lt; &amp;lt;T&amp;gt; (ostream &amp;amp;out, Complex&amp;lt;T&amp;gt; &amp;amp;c3) ;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;友元函数：友元函数不是实现函数重载（非 &amp;lt;&amp;lt; &amp;gt;&amp;gt;）

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1）需要在类前增加 类的前置声明 函数的前置声明&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
template&amp;lt;typename T&amp;gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Complex;  

template&lt;/span&gt;&amp;lt;typename T&amp;gt;&lt;span&gt;

Complex&lt;/span&gt;&amp;lt;T&amp;gt; mySub(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2）类的内部声明 必须写成:&lt;/span&gt;
&lt;span&gt;
friend Complex&lt;/span&gt;&amp;lt;T&amp;gt; mySub &amp;lt;T&amp;gt; (Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3）友元函数实现 必须写成：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
template&amp;lt;typename T&amp;gt;&lt;span&gt;

  Complex&lt;/span&gt;&amp;lt;T&amp;gt; mySub(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2)

{

Complex&lt;/span&gt;&amp;lt;T&amp;gt; tmp(c1.a - c2.a, c1.b-&lt;span&gt;c2.b);

&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;

}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4）友元函数调用 必须写成&lt;/span&gt;
&lt;span&gt;
Complex&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c4 = mySub&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(c1, c2)；

cout&lt;/span&gt;&amp;lt;&amp;lt;c4;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;结论：友元函数只用来进行&lt;/span&gt; &lt;span&gt;左移&lt;/span&gt; &lt;span&gt;友移操作符重载。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;复数类：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_fcb1a756-af53-45bb-ab10-d5ccfd210401&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fcb1a756-af53-45bb-ab10-d5ccfd210401&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fcb1a756-af53-45bb-ab10-d5ccfd210401&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Complex;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt; 7&lt;/span&gt; Complex&amp;lt;T&amp;gt; mySub(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Complex
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     friend Complex&amp;lt;T&amp;gt; mySub &amp;lt;T&amp;gt;(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     friend ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt; &amp;lt;T&amp;gt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, Complex &amp;amp;&lt;span&gt;c3);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    Complex(T a, T b);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printCom();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     Complex &lt;span&gt;operator&lt;/span&gt;+(Complex &amp;amp;&lt;span&gt;c2);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     Complex &lt;span&gt;operator&lt;/span&gt;-(Complex &amp;amp;&lt;span&gt;c2);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    T a;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    T b;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数的实现，写在了外部&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;29&lt;/span&gt; Complex&amp;lt;T&amp;gt;&lt;span&gt;::Complex(T a, T b)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;-&amp;gt;a =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;-&amp;gt;b =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Complex&amp;lt;T&amp;gt;&lt;span&gt;::printCom()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; b:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;成员函数实现加号运算符重载&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;42&lt;/span&gt; Complex&amp;lt;T&amp;gt; Complex&amp;lt;T&amp;gt;::&lt;span&gt;operator&lt;/span&gt;+(Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     Complex tmp(a + c2.a, b +&lt;span&gt; c2.b);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;48&lt;/span&gt; Complex&amp;lt;T&amp;gt; Complex&amp;lt;T&amp;gt;::&lt;span&gt;operator&lt;/span&gt;-(Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     Complex(a-c2.a,a-&lt;span&gt;c2.b);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;友元函数实现&amp;lt;&amp;lt;左移运算符重载&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;严重性    代码    说明    项目    文件    行    禁止显示状态
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;错误    C2768    “operator &amp;lt;&amp;lt;”: 非法使用显式模板参数    泛型编程课堂操练    
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;错误的本质：两次编译的函数头，第一次编译的函数头，和第二次编译的函数有不一样
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;62&lt;/span&gt; ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt; (ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, Complex&amp;lt;T&amp;gt; &amp;amp;c3)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不加T&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;out&lt;/span&gt; &amp;lt;&amp;lt; c3.a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; c3.b &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;71&lt;/span&gt; Complex&amp;lt;T&amp;gt; mySub(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;     Complex&amp;lt;T&amp;gt; tmp(c1.a - c2.a, c1.b -&lt;span&gt; c2.b);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; 
&lt;span&gt;77&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;     c1(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;     c2(&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c3 = c1 + c2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载加号运算符&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt; 
&lt;span&gt;84&lt;/span&gt; &lt;span&gt;    c3.printCom();
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; 
&lt;span&gt;86&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载左移运算符&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt;     cout &amp;lt;&amp;lt; c3 &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; 
&lt;span&gt;89&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;         Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c4 = mySub&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;(c1, c2);
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; 
&lt;span&gt;92&lt;/span&gt;         cout &amp;lt;&amp;lt; c4 &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;所有的类模板函数写在类的外部，在不同的.h和.cpp中&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;也就是类模板函数说明和类模板实现分开&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//类模板函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;构造函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　普通成员函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;友元函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　用友元函数重载&amp;lt;&amp;lt;&amp;gt;&amp;gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　用友元函数重载非&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　//&lt;span&gt;要包含&lt;/span&gt;&lt;span&gt;.cpp&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;demo_09complex.cpp&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_088ad23f-90e7-420e-a2b3-ec790b06b88d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_088ad23f-90e7-420e-a2b3-ec790b06b88d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_088ad23f-90e7-420e-a2b3-ec790b06b88d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;demo_09complex.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 6&lt;/span&gt; Complex&amp;lt;T&amp;gt;&lt;span&gt;::Complex(T a, T b)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;-&amp;gt;a =&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;-&amp;gt;b =&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Complex&amp;lt;T&amp;gt;&lt;span&gt;::printCom()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; b:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;成员函数实现加号运算符重载&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;19&lt;/span&gt; Complex&amp;lt;T&amp;gt; Complex&amp;lt;T&amp;gt;::&lt;span&gt;operator&lt;/span&gt;+(Complex&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;c2)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     Complex tmp(a + c2.a, b +&lt;span&gt; c2.b);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;template &amp;lt;typename T&amp;gt;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Complex&amp;lt;T&amp;gt; Complex&amp;lt;T&amp;gt;::operator-(Complex&amp;lt;T&amp;gt; &amp;amp;c2)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Complex(a - c2.a, a - c2.b);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return tmp;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;31&lt;/span&gt; ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt; (ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, Complex&amp;lt;T&amp;gt; &amp;amp;c3)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不加T&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;out&lt;/span&gt; &amp;lt;&amp;lt; c3.a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; c3.b &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;template &amp;lt;typename T&amp;gt;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Complex&amp;lt;T&amp;gt; mySub(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;c2)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Complex&amp;lt;T&amp;gt; tmp(c1.a - c2.a, c1.b - c2.b);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return tmp;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;demo_09complex.h&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_c75addf1-c4ea-41af-b064-be253768639f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c75addf1-c4ea-41af-b064-be253768639f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c75addf1-c4ea-41af-b064-be253768639f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; once
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Complex
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;friend Complex&amp;lt;T&amp;gt; mySub &amp;lt;T&amp;gt;(Complex&amp;lt;T&amp;gt; &amp;amp;c1, Complex&amp;lt;T&amp;gt; &amp;amp;c2);&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     friend ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt; &amp;lt;T&amp;gt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, Complex &amp;amp;&lt;span&gt;c3);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    Complex(T a, T b);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printCom();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     Complex &lt;span&gt;operator&lt;/span&gt;+(Complex &amp;amp;&lt;span&gt;c2);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Complex operator-(Complex &amp;amp;c2);&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    T a;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    T b;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;demo_09complex_text.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_ffc9b092-ab10-4e80-baf3-d21768e567cc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ffc9b092-ab10-4e80-baf3-d21768e567cc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ffc9b092-ab10-4e80-baf3-d21768e567cc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;demo_09complex.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;demo_09complex.cpp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;     c1(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;     c2(&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     Complex&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; c3 = c1 + c2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载加号运算符&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    c3.printCom();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载左移运算符&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     cout &amp;lt;&amp;lt; c3 &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        Complex&amp;lt;int&amp;gt; c4 = mySub&amp;lt;int&amp;gt;(c1, c2);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        cout &amp;lt;&amp;lt; c4 &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;2.5总结&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;归纳以上的介绍，可以这样声明和使用类模板：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;1) 先写出一个实际的类。由于其语义明确，含义清楚，一般不会出错。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　2) 将此类中准备改变的类型名(如int要改变为float或char)改用一个自己指定的虚拟类型名(如上例中的numtype)。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　3) 在类声明前面加入一行，格式为：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  　　  template &amp;lt;class 虚拟类型参数&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   　　 template &amp;lt;class numtype&amp;gt; //注意本行末尾无分号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    　　class Compare&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   　　　　 {…}; //类体&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;strong&gt;　4) 用类模板定义对象时用以下形式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   　　 类模板名&amp;lt;实际类型名&amp;gt; 对象名;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    　　类模板名&amp;lt;实际类型名&amp;gt; 对象名(实参表列);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    　　Compare&amp;lt;int&amp;gt; cmp;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    　　Compare&amp;lt;int&amp;gt; cmp(3,7);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;5) 如果在类模板外定义成员函数，应写成类模板形式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  　　 template &amp;lt;class 虚拟类型参数&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  　　 函数类型 类模板名&amp;lt;虚拟类型参数&amp;gt;::成员函数名(函数形参表列) {…}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于类模板的几点说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1) 类模板的类型参数可以有一个或多个，每个类型前面都必须加class，如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    template &amp;lt;class T1,class T2&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    class someclass&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    {…};&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在定义对象时分别代入实际的类型名，如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    someclass&amp;lt;int,double&amp;gt; obj;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2) 和使用类一样，使用类模板时要注意其作用域，只能在其有效作用域内用它定义对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3) 模板可以有层次，一个类模板可以作为基类，派生出派生模板类。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.6类模板中的static关键字&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;从类模板实例化的每个模板类有自己的类模板数据成员，该模板类的所有对象共享一个&lt;/span&gt;static&lt;span&gt;数据成员&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;和非模板类的&lt;/span&gt;static&lt;span&gt;数据成员一样，模板类的&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;数据成员也应该在文件范围定义和初始化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;每个模板类有自己的类模板的&lt;/span&gt;static&lt;span&gt;数据成员副本&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_c29e078b-876a-4367-9ea4-7a0ec94e562c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c29e078b-876a-4367-9ea4-7a0ec94e562c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c29e078b-876a-4367-9ea4-7a0ec94e562c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AA
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt;&lt;span&gt; T m_a;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;12&lt;/span&gt; T AA&amp;lt;T&amp;gt;::m_a =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     AA&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; a1, a2, a3;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     a1.m_a = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     a2.m_a++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     a3.m_a++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     cout &amp;lt;&amp;lt; AA&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;::m_a &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     AA&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt;&lt;span&gt; b1, b2, b3;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     b1.m_a = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     b2.m_a++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     b3.m_a++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     cout &amp;lt;&amp;lt; AA&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt;::m_a &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;m_a是每个类型的类，去使用，手工写两个类 int  char&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;案例2：以下来自：&lt;a title=&quot;c++类模板遇到static&quot; href=&quot;https://blog.csdn.net/ydxlt/article/details/51111654&quot; target=&quot;_blank&quot;&gt;C++类模板遇上static关键字&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_29604244-ca35-4530-851c-0501f9d2946b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_29604244-ca35-4530-851c-0501f9d2946b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_29604244-ca35-4530-851c-0501f9d2946b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Obj{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt;&lt;span&gt; T m_t;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; template&amp;lt;typename T&amp;gt;
&lt;span&gt;11&lt;/span&gt; T Obj&amp;lt;T&amp;gt;::m_t = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main04(){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     Obj&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; i1,i2,i3;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     i1.m_t = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     i2.m_t++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     i3.m_t++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     cout &amp;lt;&amp;lt; Obj&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;::m_t&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     Obj&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;&lt;span&gt; f1,f2,f3;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     f1.m_t = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     f2.m_t++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     f3.m_t++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     cout &amp;lt;&amp;lt; Obj&amp;lt;&lt;span&gt;float&lt;/span&gt;&amp;gt;::m_t&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     Obj&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt;&lt;span&gt; c1,c2,c3;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     c1.m_t = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     c2.m_t++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     c3.m_t++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     cout &amp;lt;&amp;lt; Obj&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt;::m_t&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;当类模板中出现static修饰的静态类成员的时候，我们只要按照正常理解就可以了。static的作用是将类的成员修饰成静态的，所谓的静态类成员就是指类的成员为类级别的，不需要实例化对象就可以使用，而且类的所有对象都共享同一个静态类成员，因为类静态成员是属于类而不是对象。那么，类模板的实现机制是通过二次编译原理实现的。c++编译器并不是在第一个编译类模板的时候就把所有可能出现的类型都分别编译出对应的类（太多组合了），而是在第一个编译的时候编译一部分，遇到泛型不会替换成具体的类型（这个时候编译器还不知道具体的类型），而是在第二次编译的时候再将泛型替换成具体的类型（这个时候编译器知道了具体的类型了）。由于类模板的二次编译原理再加上static关键字修饰的成员，当它们在一起的时候实际上一个类模板会被编译成多个具体类型的类，所以，不同类型的类模板对应的static成员也是不同的（不同的类），但相同类型的类模板的static成员是共享的（同一个类）。&lt;/p&gt;
&lt;p&gt;相关连接：&lt;/p&gt;
&lt;h3 class=&quot;t&quot;&gt;&lt;a title=&quot;C++--类模板中的static关键字 - CSDN博客&quot; href=&quot;https://blog.csdn.net/sum_tw/article/details/53910205&quot; target=&quot;_blank&quot;&gt;C++--类模板中的static关键字 - CSDN博客&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;2.7类模板在项目开发中的应用&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;模板是C++类型参数化的多态工具。C++提供函数模板和类模板。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;模板定义以模板说明开始。类属参数必须在模板定义中至少出现一次。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;同一个类属参数可以用于多个模板。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;类属参数可用于函数的参数类型、返回类型和声明函数中的变量。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;模板由编译器根据实际数据类型实例化，生成可执行代码。实例化的函数。&lt;/span&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;    模板称为模板函数；实例化的类模板称为模板类。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;函数模板可以用多种方式重载。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;类模板可以在类层次中使用 。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;训练题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　&lt;strong&gt;1） 请设计一个数组模板类（ MyVector ），完成对int、char、Teacher类型元素的管理。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      需求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     　　&lt;strong&gt;设计:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　类模板 构造函数 拷贝构造函数 &amp;lt;&amp;lt;  []  重载=操作符&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　　　a2=a1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　实现&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　&lt;strong&gt;　2） 请仔细思考：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　　　a) 如果数组模板类中的元素是Teacher元素时，需要Teacher类做什么工作&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　　　b) 如果数组模板类中的元素是Teacher元素时，Teacher类含有指针属性哪？&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_0a5ec8ac-4467-4fb1-81f2-2371266dc765&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0a5ec8ac-4467-4fb1-81f2-2371266dc765&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0a5ec8ac-4467-4fb1-81f2-2371266dc765&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Teacher
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     friend ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; Teacher &amp;amp;&lt;span&gt;obj);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     Teacher(&lt;span&gt;char&lt;/span&gt; *name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;name, name);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    Teacher()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;age = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;name, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; name[&lt;span&gt;32&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Teacher
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     friend ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; Teacher &amp;amp;&lt;span&gt;obj);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     Teacher(&lt;span&gt;char&lt;/span&gt; *name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;name, name);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    Teacher()
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;age = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;name, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;pname;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　　　结论1： 如果把Teacher放入到MyVector数组中，并且Teacher类的属性含有指针，就是出现深拷贝和浅拷贝的问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　结论2：需要Teacher封装的函数有：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　　　　　1） 重写拷贝构造函数  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　　　　　2） 重载等号操作符  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　　　　　3） 重载左移操作符。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　理论提高：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　所有容器提供的都是值（value）语意，而非引用（reference）语意。&lt;strong&gt;容器执行插入元素的操作时，内部实施拷贝动作。&lt;/strong&gt;所以STL容器内存储的元素必须&lt;strong&gt;能够被拷贝&lt;/strong&gt;（必须提供拷贝构造函数）。&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　&lt;strong&gt;3） 请从数组模板中进行派生&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_93200245-411d-4808-b2fe-ac3649d5e85f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_93200245-411d-4808-b2fe-ac3649d5e85f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_93200245-411d-4808-b2fe-ac3649d5e85f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;演示从模板类 派生 一般类&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyVector.cpp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyArray01 : &lt;span&gt;public&lt;/span&gt; MyVector&amp;lt;&lt;span&gt;double&lt;/span&gt;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     MyArray01(&lt;span&gt;int&lt;/span&gt; len) : MyVector&amp;lt;&lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt;(len)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        ;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;演示从模板类 派生 模板类 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;BoundArray &lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyArray02 : &lt;span&gt;public&lt;/span&gt; MyVector&amp;lt;T&amp;gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     MyArray02(&lt;span&gt;int&lt;/span&gt; len) : MyVector&amp;lt;&lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt;(len)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        ;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;测试案例：
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;演示 从模板类 继承 模板类&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     MyArray02&amp;lt;&lt;span&gt;double&lt;/span&gt;&amp;gt; dArray2(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     dArray2[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;3.15&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;演示 从模板类 继承 一般类&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main11()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     MyArray01 d_array(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;d_array.getLen(); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         d_array[i] = &lt;span&gt;3.15&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;d_array.getLen(); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         cout &amp;lt;&amp;lt; d_array[i] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;     cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;作业：&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;封装你自己的数组类；设计被存储的元素为类对象；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;思考：类对象的类，应该实现的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//1  优化Teacher类, 属性变成 char *panme, 构造函数里面 分配内存&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//2  优化Teacher类,析构函数 释放panme指向的内存空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//3  优化Teacher类,避免浅拷贝 重载= 重写拷贝构造函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//4  优化Teacher类,在Teacher增加 &amp;lt;&amp;lt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;//5  在模板数组类中,存int char Teacher Teacher*(指针类型)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;zuoye.h&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ed9e510b-3c47-4da8-a5c4-5f1c832f78be&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed9e510b-3c47-4da8-a5c4-5f1c832f78be&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed9e510b-3c47-4da8-a5c4-5f1c832f78be&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; once
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyVector
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;friend ostream &amp;amp; operator&amp;lt;&amp;lt; &amp;lt;T&amp;gt;(ostream &amp;amp;out, const MyVector &amp;amp;obj);&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     MyVector(&lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;0&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     MyVector(&lt;span&gt;const&lt;/span&gt; MyVector &amp;amp;obj);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;copy构造函数&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     ~&lt;span&gt;MyVector();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     T&amp;amp; &lt;span&gt;operator&lt;/span&gt; [](&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     MyVector &amp;amp;&lt;span&gt;operator&lt;/span&gt;=(&lt;span&gt;const&lt;/span&gt; MyVector &amp;amp;&lt;span&gt;obj);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getLen()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_len;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     T *&lt;span&gt;m_space;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; m_len;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zuoye_test12.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_5ed115f7-c310-4c72-a1d2-1ce24faadb1c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5ed115f7-c310-4c72-a1d2-1ce24faadb1c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5ed115f7-c310-4c72-a1d2-1ce24faadb1c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zuoye.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zuoye12.cpp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Teacher
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    Teacher()
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         age = &lt;span&gt;33&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         m_p = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         strcpy(m_p, &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;     Teacher(&lt;span&gt;char&lt;/span&gt; *name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age)
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;age =&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         m_p = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[strlen(name)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;m_p, name);
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     Teacher(&lt;span&gt;const&lt;/span&gt; Teacher &amp;amp;&lt;span&gt;obj)
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         m_p = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[strlen(obj.m_p) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;m_p, obj.m_p);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         age =&lt;span&gt; obj.age;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     ~&lt;span&gt;Teacher()
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (m_p!=&lt;span&gt;NULL)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;[] m_p;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             m_p =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printT()
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         cout &amp;lt;&amp;lt; m_p &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载&amp;lt;&amp;lt; ==&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;     friend ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;,Teacher &amp;amp;&lt;span&gt;t);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     Teacher &amp;amp; &lt;span&gt;operator&lt;/span&gt;=(&lt;span&gt;const&lt;/span&gt; Teacher &amp;amp;&lt;span&gt;obj) 
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (m_p!=&lt;span&gt;NULL)
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;[] m_p;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             m_p =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             age = &lt;span&gt;33&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         m_p = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[strlen(obj.m_p) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         age =&lt;span&gt; obj.age;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         strcpy(&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;m_p, obj.m_p);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; *&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;char name[32];&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;m_p;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, Teacher &amp;amp;&lt;span&gt;t)
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;out&lt;/span&gt; &amp;lt;&amp;lt; t.m_p &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; t.age &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;     Teacher t1(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;31&lt;/span&gt;), t2(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;32&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;     MyVector&amp;lt;Teacher *&amp;gt; Tarray(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt;     Tarray[&lt;span&gt;0&lt;/span&gt;] = &amp;amp;&lt;span&gt;t1;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     Tarray[&lt;span&gt;1&lt;/span&gt;] = &amp;amp;&lt;span&gt;t2;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         Teacher *tmp =&lt;span&gt; Tarray[i];
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         tmp-&amp;gt;&lt;span&gt;printT();
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main123()
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;     Teacher t1(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;31&lt;/span&gt;), t2(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;32&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;     MyVector&amp;lt;Teacher&amp;gt; Tarray(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     Tarray[&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; t1;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     Tarray[&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; t2;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;2&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         Teacher tmp =&lt;span&gt; Tarray[i];
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        tmp.printT();
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main112()
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     MyVector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;  myv1(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;     myv1[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     myv1[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     myv1[&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;     myv1[&lt;span&gt;3&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;     myv1[&lt;span&gt;4&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cout &amp;lt;&amp;lt; myv1;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;     MyVector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;  myv2 =&lt;span&gt; myv1;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main111()
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     MyVector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;  myv1(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; myv1.getLen(); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         myv1[i] = i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         cout &amp;lt;&amp;lt; myv1[i] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt;     MyVector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;  myv2 =&lt;span&gt; myv1;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; myv2.getLen(); i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;         myv2[i] = i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         cout &amp;lt;&amp;lt; myv2[i] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cout &amp;lt;&amp;lt; myv2 &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重载左移运算符&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt;     system(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;zuoye12.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_54f4ee58-6510-4131-a411-006c73c5b537&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_54f4ee58-6510-4131-a411-006c73c5b537&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_54f4ee58-6510-4131-a411-006c73c5b537&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zuoye.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt; 6&lt;/span&gt; ostream &amp;amp; &lt;span&gt;operator&lt;/span&gt;&amp;lt;&amp;lt;(ostream &amp;amp;&lt;span&gt;out&lt;/span&gt;, &lt;span&gt;const&lt;/span&gt; MyVector&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;obj)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i&amp;lt;obj.m_len; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;out&lt;/span&gt; &amp;lt;&amp;lt; obj.m_space[i] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;out&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;out&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;17&lt;/span&gt; MyVector&amp;lt;T&amp;gt;::MyVector(&lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     m_space = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; T[size];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     m_len =&lt;span&gt; size;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;MyVector&amp;lt;int&amp;gt;  myv2 = myv1;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;24&lt;/span&gt; MyVector&amp;lt;T&amp;gt;::MyVector(&lt;span&gt;const&lt;/span&gt; MyVector &amp;amp;&lt;span&gt;obj)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据大小分配内存&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     m_len =&lt;span&gt; obj.m_len;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     m_space = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; T[m_len];
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;copy数据&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i&amp;lt;m_len; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         m_space[i] =&lt;span&gt; obj.m_space[i];
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;36&lt;/span&gt; MyVector&amp;lt;T&amp;gt;::~&lt;span&gt;MyVector()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (m_space !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;[] m_space;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         m_space =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         m_len = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;47&lt;/span&gt; T&amp;amp; MyVector&amp;lt;T&amp;gt;::&lt;span&gt;operator&lt;/span&gt; [](&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_space[index];
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; template &amp;lt;typename T&amp;gt;
&lt;span&gt;52&lt;/span&gt; MyVector&amp;lt;T&amp;gt; &amp;amp; MyVector&amp;lt;T&amp;gt;::&lt;span&gt;operator&lt;/span&gt;=(&lt;span&gt;const&lt;/span&gt; MyVector&amp;lt;T&amp;gt; &amp;amp;&lt;span&gt;obj)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先把a2的内存释放掉&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (m_space !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;[] m_space;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         m_space =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         m_len = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据a1分配内存&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;     m_len =&lt;span&gt; obj.m_len;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     m_space = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; T[m_len];
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;copy数据&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i&amp;lt;m_len; i +=&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         m_space[i] =&lt;span&gt; obj.m_space[i];
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; *&lt;span&gt;this&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a2= a1 返回a2的自身&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;参考一些资料，加上一些见解，如果有雷同，纯属巧合。&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;t&quot;&gt;&lt;a href=&quot;https://www.baidu.com/link?url=U5y45oQXmu7z6jFS2iF87Acvri9so2pZGKYYhVmdPI5YsgrfUhNYo6vINcEUfGDQ932UgaJVRH9n0L3mPw4tWq&amp;amp;wd=&amp;amp;eqid=e371bd13000416d5000000035ad2e7e3&quot; target=&quot;_blank&quot; data-click=&quot;{ 'F':'778317EA', 'F1':'9D73F1E4', 'F2':'4CA6DE6B', 'F3':'54E5343F', 'T':'1523771363', 'y':'CE2FECEF' }&quot;&gt;模板类与类模板、函数模板与模板函数等的区别 - wangduo - 博客园&lt;/a&gt;&lt;/h3&gt;
&lt;h3 class=&quot;t&quot;&gt;&lt;a href=&quot;http://www.baidu.com/link?url=DqYeKA27g_I9MoRWyyo03CXZYHt5ttNgiW-szIdO-97FqgawzQxgAg5Fz9vl9-jVsDh9qj5BUZka4kEOjvUd2a&quot; target=&quot;_blank&quot; data-click=&quot;{ 'F':'778317EA', 'F1':'9D73F1E4', 'F2':'4CA6DD6B', 'F3':'54E5343F', 'T':'1523771363', 'y':'EFC1FEFF' }&quot;&gt;C++函数模板与类模板 - CSDN博客&lt;/a&gt;&lt;/h3&gt;

</description>
<pubDate>Sun, 15 Apr 2018 06:01:00 +0000</pubDate>
<dc:creator>我举个栗子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wanghui1234/p/8846881.html</dc:identifier>
</item>
<item>
<title>Flask博客开发——登录验证码 - ik-heu</title>
<link>http://www.cnblogs.com/ik-heu/p/8840518.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ik-heu/p/8840518.html</guid>
<description>&lt;p&gt;这部分为Flask博客的登录页面加个验证码。使用了PIL模块生成验证码图片，并通过Flask的session机制，进行验证码验证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、生成验证码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用string模块：string.ascii_letters+string.digits构造了验证码字符组合。使用的PIL模块，构建了图形对象，并进行划线和高斯模糊处理。字体文件可单独保存到工程里。绘制字符串时，draw.text的前两个参数为字符的位置，可以设置为随机数，使验证码各字符的位置不固定，并且相邻字符略有重合。get_verify_code返回了图形对象和字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; string
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; PIL &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Image, ImageFont, ImageDraw, ImageFilter


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; rndColor():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;随机颜色&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127&lt;span&gt;))

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; gene_text():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;生成4位验证码&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;.join(random.sample(string.ascii_letters+string.digits, 4&lt;span&gt;))

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; draw_lines(draw, num, width, height):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;划线&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; num &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(num):
        x1 &lt;/span&gt;= random.randint(0, width / 2&lt;span&gt;)
        y1 &lt;/span&gt;= random.randint(0, height / 2&lt;span&gt;)
        x2 &lt;/span&gt;=&lt;span&gt; random.randint(0, width)
        y2 &lt;/span&gt;= random.randint(height / 2&lt;span&gt;, height)
        draw.line(((x1, y1), (x2, y2)), fill&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, width=1&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_verify_code():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;生成验证码图形&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    code &lt;/span&gt;=&lt;span&gt; gene_text()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图片大小120×50&lt;/span&gt;
    width, height = 120, 50
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 新图片对象&lt;/span&gt;
    im = Image.new(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;RGB&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,(width, height),&lt;span&gt;'&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 字体&lt;/span&gt;
    font = ImageFont.truetype(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app/static/arial.ttf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 40&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; draw对象&lt;/span&gt;
    draw =&lt;span&gt; ImageDraw.Draw(im)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绘制字符串&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; range(4&lt;span&gt;):&lt;/span&gt;
        draw.text((5+random.randint(-3,3)+23*item, 5+random.randint(-3,3&lt;span&gt;)),
                  text&lt;/span&gt;=code[item], fill=rndColor(),font=&lt;span&gt;font )
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 划线&lt;/span&gt;
    draw_lines(draw, 2&lt;span&gt;, width, height)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 高斯模糊&lt;/span&gt;
    im = im.filter(ImageFilter.GaussianBlur(radius=1.5&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; im, code
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、表单类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为LoginForm增加一个verify_code字段，用来输入验证码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginForm(FlaskForm):
    email &lt;/span&gt;= StringField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, validators=[DataRequired(), Length(1, 64&lt;span&gt;),
                                             Email()],&lt;/span&gt;&lt;span&gt;)
    password &lt;/span&gt;= PasswordField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, validators=&lt;span&gt;[DataRequired()])
    verify_code &lt;/span&gt;= StringField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;VerifyCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, validators=&lt;span&gt;[DataRequired()])
    remember_me &lt;/span&gt;= BooleanField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Keep me logged in&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    submit &lt;/span&gt;= SubmitField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Log In&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、视图函数 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用io.BytesIO对象将验证码图片转化为二进制形式，直接作为响应返回前端。设置首部字段的内容格式，这样二进制的内容就能以图形形式在页面中显示。验证码字符串保存在flask.session对象中，对session的操作就像处理字典一样。程序内部使用设置中的SECRET_KEY对session数据加密后，存储在cookie中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; io &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BytesIO
@auth.route(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_code():
    image, code &lt;/span&gt;=&lt;span&gt; get_verify_code()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图片以二进制形式写入&lt;/span&gt;
    buf =&lt;span&gt; BytesIO()
    image.save(buf, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;jpeg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    buf_str &lt;/span&gt;=&lt;span&gt; buf.getvalue()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把buf_str作为response返回前端，并设置首部字段&lt;/span&gt;
    response =&lt;span&gt; make_response(buf_str)
    response.headers[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;image/gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将验证码字符串储存在session中&lt;/span&gt;
    session[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; code
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; response
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 在登录的视图函数中，添加验证码验证功能。注意一般验证码是不区分大小写的，这里将输入的验证码和session中保存的验证码字符串都转换成小写后再作判断。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
@auth.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login():
    form &lt;/span&gt;=&lt;span&gt; LoginForm()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; form.validate_on_submit():
        user &lt;/span&gt;= User.query.filter_by(email=&lt;span&gt;form.email.data).first()
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).lower() !=&lt;span&gt; form.verify_code.data.lower():
            flash(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Wrong verify code.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;auth/login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, form=&lt;span&gt;form)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; user &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; None &lt;span&gt;and&lt;/span&gt;&lt;span&gt; user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(request.args.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;next&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;or&lt;/span&gt; url_for(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;main.index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        flash(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Invalid username or password.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;auth/login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, form=form)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、前端&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在前端中加入了验证码图形的路径，该路径指定为生成图形响应的视图函数。当点击验证码图片时，验证码会予以更新。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{{ wtf.quick_form(form) }}
&lt;/span&gt;&amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verify_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/auth/code &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;this.src='/auth/code?'+ Math.random()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;调整下布置，最终登录表单会显示成这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1285395/201804/1285395-20180415132533300-2050850541.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是不同方式生成的验证码：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;a. 无特效&lt;/td&gt;
&lt;td&gt;b.增加高斯模糊&lt;/td&gt;
&lt;td&gt;c.增加划线&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1285395/201804/1285395-20180415132802569-1013837806.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1285395/201804/1285395-20180415132822016-497873878.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1285395/201804/1285395-20180415132912616-1234367866.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Sun, 15 Apr 2018 05:46:00 +0000</pubDate>
<dc:creator>ik-heu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ik-heu/p/8840518.html</dc:identifier>
</item>
<item>
<title>项目微管理15 - 首秀 - 沙场秋点兵</title>
<link>http://www.cnblogs.com/dxy1982/p/8846432.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dxy1982/p/8846432.html</guid>
<description>&lt;p&gt;路飞加入团队后，四代就开始考虑团队建设非常重要的一项，就是Team Building，就是大家通常理解的“吃喝玩乐”，也就是狭义上的“团队建设”。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;会玩也是一门手艺&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;这件事对于所有团队来说都是非常困难的事，不是说技术上有多难搞，而是说这是一个长期的活动，需要投入大量的精力和时间，更为关键的是大家都是程序员出生，玩都不知道玩些什么。&lt;/p&gt;

&lt;p&gt;在程序员这一行，会玩可是一门稀缺的手艺，而Team Building，说白了，就是大家一起玩，要玩出激情，还要玩出合作，要玩出默契，还要玩出开心，你说困不困难？难到许多项目经理一提起这件事情，就只会皱眉头，然后把这件事直接交给一个队员，让他去搞，其实问题一点没解决，只不过抛给了别人而已。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415131831963-1026475615.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代曾经专门被委派干过这件事，每次一想到要到Team Building的时间了，要定吃饭的的地方和活动的内容了，四代都会绞尽脑汁，不知所措。&lt;/p&gt;

&lt;p&gt;现在四代也要面对这个问题了？还是像有的项目经理那样，推给组员吗？四代绝对不会，越是这种麻烦事，四代越不会推出去。&lt;/p&gt;

&lt;p&gt;四代觉得，万事开头难，只要第一次团队活动可以顺利进行，那么基于第一次的经验，以后的活动应该就会轻松一点。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415115236750-1571328896.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;团队活动可以有很多的安排，比如吃饭，唱歌，打台球就是团队活动的一些常见的选项。不过，四代觉得这些活动作为第一次可能都不太好，四代浏览了很多大公司的做法后，把目光聚焦到了一项活动上，它叫“Talent Show”，或者叫“达人秀”、“个人秀”。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;个人秀&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;“个人秀”说白了，其实就是让团队中的新人准备好关于自己爱好，习惯，才能等方面的展示，来快速的让团队中的每个人都来认识一下新人。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415115748655-277824499.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代觉得，这个出发点实在是太好了，对于新人来说，可以在一个轻松的环境下和大家认识。而对团队来说，也可以趁机从新人身上寻找一些共同点，这对于团队的融合来说是非常难得的一个机会。而且对于PC团队来说，这是第一次团队活动，大家坐在一起，吃点零食，喝点饮料，谈谈自己的爱好和对将来的期望，不也是一件很惬意的事吗！这绝对是适合于团队第一次活动的不二之选。&lt;/p&gt;

&lt;p&gt;虽然出发点是完美的，但是要正式实施，四代心里其实没底，因为越是看起来完美的事情，往往背后越是会隐藏一些致命的漏洞，四代对塞翁失马的故事是相当熟悉的。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415125512956-268587454.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;所以四代在正式实施“个人秀”之前，在公司的项目经理会议上征求了一下其它项目经理的意见。可是万万没想到，大家居然异口同声，坚定的认为：这个事不靠谱。大家觉的，在陌生人面前，谁会真的跟你交流自己的爱好和习惯呢。大家对这件事的结果普遍持怀疑态度。&lt;/p&gt;

&lt;p&gt;对于这一点，其实四代心里底气也不是太足，不过如果将心比心，让四代在一个新的团队中展示自己的爱好的话，四代还是很乐意的。而且四代一直希望打造的是一个以信任为基石的团队，如果在第一次就不能做到让大家敞开心扉，那么以后如何逐步建立信任关系呢？&lt;/p&gt;

&lt;p&gt;以四代目前对鼬和路飞了解的程度，四代觉得只要自己发出信任的信号，他们会积极的响应的。在经过这次讨论后，四代并没有打消这个念头，一切讨论都是基于自己和别人的猜测，不去试一试怎么知道呢。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415131741561-802676745.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;想通了这一点，四代决定乘着路飞入职的这一周正式启动第一次团队活动，内容就是“个人秀”。&lt;/p&gt;

&lt;p&gt;“个人秀”结束以后，四代觉得可以保持一个Release搞两次活动，可以基于一些特殊的事件，也可以基于一些特殊的时间节点，一般一次在编码结束后，一次在软件发布后，按照一个Release平均两个月的话，频率基本是一个月一次，活动的内容可以到时再议。&lt;/p&gt;

&lt;p&gt;接下来就是确定时间，准备零食饮料，通知鼬和路飞准备材料，四代特意强调一定是与工作和技术无关，一定是自己最想展示的方面。四代带着一丝忐忑，也精心准备了自己的爱好项目，他得拿出自己的诚意来，做好表率来消除他们的内心的疑惑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;动漫三人组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;约定的时间很快就到来，PC团队第一次团队活动正式开始，望着桌上不算丰富的零食，四代刻意放松了神情，招呼他们随意拆开零食和饮料，随意的聊了几句，他们终于放松了下来，然后就是自愿按顺序展示自己准备的PPT。&lt;/p&gt;

&lt;p&gt;第一个上场的是鼬，他上来的第一句话就是对四代说，“我看到你说的是与工作无关的，所以我准备的是动漫方面的，不知道行不行？”&lt;/p&gt;

&lt;p&gt;这是一个非常重要的时刻，这一刻，就是四代和整个团队建立诚信的最为关键的时刻，四代捕捉到了这个时机，四代似乎随意但是肯定的回答到：“当然了，我说过不与工作相关嘛！”。这个时刻，四代想到的是商鞅，想到的是那根立在南门的木头，想到的是那一个搬动木头的人，还有那如约而至的赏金。确实，人与人之间的诚信，总是在一个一个不经意的瞬间建立起来的。&lt;/p&gt;

&lt;p&gt;得到了肯定答案的鼬终于放心，开始了他的“个人秀”。鼬最喜欢的就是“火影忍者”，他描述了火影一些经典的场景，并着重描述了对一个伟大的忍者-鼬的崇拜之情，他聊到了鼬的忍辱负重，聊到了对佐助的爱。谈到“火影”，所有人的话匣子似乎都瞬间打开了，大家你一言我一语的谈论着自己喜欢的人物和那些逆天的技能，非常的轻松。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415130424356-1713458436.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;鼬结束以后，路飞开启了他的首秀，路飞的PPT的主题选择的是全套“海贼王”的人物，这就一下子透露了他最喜爱的东西。他兴高采烈的介绍了主人公路飞的梦想和他对于成为海贼王的努力，虽然四代和鼬对海贼王都不熟悉，不过火影和海贼都属于热血类的动漫，主人公的性格多少是有点相似的，在经过一番热烈的讨论后，路飞结束了自己的分享。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415130441239-478855238.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;接下来就是四代，此时，四代已经完全把心放到了肚子里，活动到目前为止的情况已经远远超出了四代的预期。那种在讨论中质疑的场景并没有出现，大家非常放松的展示了自己，这是四代最期望看到的。既然取得这么好的效果，“个人秀”也因此成为了PC团队新人入职后的例行活动一直延续了下去。&lt;/p&gt;

&lt;p&gt;四代的爱好其实非常广泛，从电视电影，到动漫游戏，从烧烤唱歌，到卡牌棋类，无一不喜欢，但也无一能精通。题材也是从军事历史，到管理励志，从恐怖悬疑，到武侠玄幻，五花八门，任一都不排斥。也算是机缘巧合，火影忍者也是四代最喜欢的动漫之一，四代对许多人物都特别的欣赏，特别是“四代火影”，四次从心里喜欢这个年轻但是闪耀着无比炽热光芒的天才少年，尤其是当他为了村子，毅然选择牺牲自己来封印九尾的那个场景，每次想到那个场景，四代都会特别感动。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415132922392-419712785.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;沟通最重要&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;好吧，到此为止，“动漫团队”，名符其实。&lt;/p&gt;

&lt;p&gt;时间就在这畅快的交谈中飞速的流逝着，不知不觉间，居然两个小时就过去了。在讨论动漫的过程中，大家讨论起火影中最厉害的忍术来，这也是火影迷永远也无法回避的话题。大家想了想，居然一致认为火影中最牛逼的忍术叫“嘴遁”，这是鸣人的专有技能，他靠着这个无比强悍的技能，成功的转化了我爱罗，长门和带土，用孙子兵法讲，这叫“胜敌益强”，同样的，海贼中的路飞也是非常擅长这个能力。&lt;/p&gt;

&lt;p&gt;四代觉得这是一个很好的话题，于是顺带着，四代在描述中透露了团队建设最重要的工作 - 沟通。确实是，“沟通最重要”，“沟通是一切工作的前提”，在这个问题上，动漫团队获取了高度的一致。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/109061/201804/109061-20180415131402411-1265680461.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代觉得接下来的很多工作会比较好开展，因为大家对于沟通的认识是一致的，尤其是大家对动漫中的优秀团队，比如“第七班”，“海贼团队”都有着一致的认同，那就是“优秀的团队必然是由形形色色优秀的个人组成的，每个人都不是全才，但是每个人都能独当一面”，“互联网+”时代的团队就是如此。&lt;/p&gt;

</description>
<pubDate>Sun, 15 Apr 2018 05:32:00 +0000</pubDate>
<dc:creator>沙场秋点兵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dxy1982/p/8846432.html</dc:identifier>
</item>
<item>
<title>设计模式就该这么学：为什么要学设计模式？ - 骑白马的菜鸟</title>
<link>http://www.cnblogs.com/zishengY/p/8847110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zishengY/p/8847110.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;引子：&lt;/strong&gt;想象一下一个厨师，不学菜名如何跟人快速的交流。回锅肉，鱼香肉丝，龙井虾仁，狮子头，叫花鸡。请你换一种方式来介绍试试看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;　　设计模式也是，作为程序员之间的共同语言有必要学习下，别人讲个模式，而你并不懂，尴尬不，沟通成本也变高，当然更为重要的原因是，这是前辈们这么多年摸滚打爬总结总结出来有效经验总结，重要性自然不必多说，在我看来，学习设计模式的必要性就跟1+1=2一样明显。&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;　　笔者就遇到这样的情况，从事java开发工作也快两年了，有时跟同行交流下，直接聊死，因为对于这一块用到不多，知道有23种模式，但只用过几种，其他是一个模糊的概念，故觉得有必要系统的学习了解下，因为网上的文章良莠不齐，所以笔者选择了：【书+实际应用的经历】这种方式来进行学习（后面会介绍到笔者用到的书）。&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;　　这篇文章作为【设计模式就该这么学】系列的第一篇：是用来学习设计模式的预热，主要是谈一下为什么要学习设计模式！&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;　　后续，我会将每个设计模式单独成文，这些文章的的代码和文字将会基于实际的应用例子和书《Head First设计模式》根据自己的理解整理成文写出来，若有偏差，欢迎指正！&lt;/p&gt;
&lt;h2 class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;&lt;strong&gt;一、什么是设计模式？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　&lt;/strong&gt;　比起百度百科的解释，我更喜欢《研磨设计模式》一书中的定义，如下&lt;strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;　　在软件开发领域，经过验证的，用于解决在特定环境下，重复出现的特定问题的解决方案！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　注意上面提到的限定词，现在按我的理解来解释下。&lt;/p&gt;
&lt;h3&gt;　　1、软件开发&lt;/h3&gt;
&lt;p&gt;　　　　其实我觉得各行各业都有模式可以套用，这里的设计模式指的是在软件开发领域。&lt;/p&gt;
&lt;h3&gt;　　2、经过验证的&lt;/h3&gt;
&lt;p&gt;　　　　必须是经过大家公开验证的解决方案才算得上是设计模式，而不是说每个人随便工作解决的问题方案都算&lt;/p&gt;
&lt;h3&gt;　　3、特定环境&lt;/h3&gt;
&lt;p&gt;　　　　个人理解为就是不要脱离特定环境去使用设计模式，拿命令模式来说吧，我们开发中，请求-响应模式的功能非常常见，一般来说，我们会把对请求的响应操作封装到一个方法中，这个封装的方法  　　　　可以称之为命令，但不是命令模式。到底要不要把这种设计上升到模式的高度就要另行考虑了，因为，如果使用命令模式，就要引入调用者、接收者两个角色，原本放在一处的逻辑分散到了三个类 　　　　中，设计时，必须考虑这样的代价是否值得，所以有必要考虑下环境。&lt;/p&gt;
&lt;h3&gt;　　4、重复出现&lt;/h3&gt;
&lt;p&gt;　　　　因为只有重复出现的问题才有必要形成固定方案，下次使用直接套用就是。&lt;/p&gt;
&lt;h3&gt;　　5、特定问题&lt;/h3&gt;
&lt;p&gt;　　　　不要觉得只会一种模式就可以走遍天下，那还要其他的模式做什么卵用，毕竟每种模式是针对特定问题的解决方案。&lt;/p&gt;
&lt;h3&gt;　　每个设计模式的构成如下：&lt;/h3&gt;
&lt;p&gt;　　　　1、模式名称：模式的一个好记的名字&lt;/p&gt;
&lt;p&gt;　　　　2、环境和问题：描述在什么环境下，出现什么特定的问题&lt;/p&gt;
&lt;p&gt;　　　　3、解决方案：描述如何解决问题&lt;/p&gt;
&lt;p&gt;　　　　4、效果：描述应用模式后的效果，以及可能带来的问题&lt;/p&gt;

&lt;h2&gt;二、为什么需要学习设计模式&lt;/h2&gt;
&lt;h3&gt;　　1、避免重复造轮子&lt;/h3&gt;
&lt;p&gt;　　　　前言也提到这是前辈们这么多年摸滚打爬总结总结出来有效经验总结，在特定环境下使用肯定事半功倍。比如我之前用观察者模式就很好地解决了实时解析某个指定目录下文件入库操作，后面会 　　　　介绍&lt;/p&gt;
&lt;h3&gt;　　2、沟通更高效　　　&lt;/h3&gt;
&lt;p&gt;　　　　农民a：这里我用了XXX设计模式&lt;br/&gt;　　　　农民b：那我大致了解你是怎么做的了 &lt;/p&gt;
&lt;p&gt;　　　　中农c：c，我局的你这段代码可以应用XXX设计模式的&lt;/p&gt;
&lt;p&gt;　　　　农民d：以我的理解在这种这个模块下，不适合用这种模式　　　　&lt;/p&gt;
&lt;h3&gt;　　3、易维护&lt;/h3&gt;
&lt;p&gt;　　　　因为遵循一个约定（即设计模式）写了一套代码，那么知道这一套约定的人就很容易理解的你的代码，维护自然更容易。&lt;/p&gt;
&lt;h3&gt;　　4、心法或意识形成　　　　&lt;/h3&gt;
&lt;p&gt;　　　　为什么一个相似的功能，大牛一会儿就搞定，然后悠闲地品着下午茶逛淘宝；而自己加班加点搞到晚十点还做不完。&lt;br/&gt;　　　　为什么大牛写完的程序测试上线后，几乎完美运行，用户无懈可击；而自己的程序bug重重，改好一个却又引出另一个，按下葫芦浮起瓢，几近崩溃。&lt;br/&gt;　　　　这不仅仅是因为大牛们工作比你久，是因为人家脑袋里就有这样的意识，在遇到特定的问题，人家很自然就能冒出这样的想法，同样的功能人家就是写出的代码就死可以比你的更容易维护，&lt;/p&gt;
&lt;p&gt;　　　　系统也就更稳定。而你为什么不能，因为你根本就不知道有设计模式可用。&lt;/p&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt;　　　　&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p class=&quot;Post-Title&quot; data-reactid=&quot;33&quot;&gt; 学习本就是一个不断模仿、练习、再到最后面自己原创的过程。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;虽然可能从来不能写出超越网上通类型同主题博文，但为什么还是要写？&lt;br/&gt;于自己而言，博文主要是自己总结。假设自己有观众，毕竟讲是最好的学（见下图）。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;于读者而言，笔者能在这个过程get到知识点，那就是双赢了。&lt;br/&gt;当然由于笔者能力有限，或许文中存在描述不正确，欢迎指正、补充！&lt;br/&gt;感谢您的阅读。如果本文对您有用，那么请点赞鼓励。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/847059/201804/847059-20180415130414994-55161475.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sun, 15 Apr 2018 05:10:00 +0000</pubDate>
<dc:creator>骑白马的菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zishengY/p/8847110.html</dc:identifier>
</item>
<item>
<title>building a new horizon - rinka</title>
<link>http://www.cnblogs.com/rinka/p/gdg_wtm_building_a_new_horizon.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rinka/p/gdg_wtm_building_a_new_horizon.html</guid>
<description>&lt;p&gt;昨天是4月14日，也是我的23岁生日。正好去参加GDG举办的WTM，这次的主题是building a new horizon。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048999/201804/1048999-20180415113638019-584268042.jpg&quot; alt=&quot;&quot; width=&quot;699&quot; height=&quot;406&quot;/&gt;&lt;/p&gt;

&lt;p&gt;写一下印象深刻的分享者和她们的闪光点。&lt;/p&gt;
&lt;p&gt;1.羡辙-从灵感到落地&lt;/p&gt;
&lt;p&gt;羡辙是在开源社区比较活跃的人，主要在做的是前端可视化的项目。她分享的是如何激发、记录并落地自己的灵感，并将这些落地的项目开源分享出来。主要介绍了自己四个有意思的小项目，分别是与羡辙聊天中、动态水球效果、在线婚礼的小动画以及口红色号的可视化。羡辙是一个比较有脑洞和执行力的人，她希望能有更多人也能和她一样，去落地并分享自己的灵感。&lt;/p&gt;

&lt;p&gt;我一直希望自己有一些影响力，并不是说要大到影响社会，是能够对周围一部分人产生积极的影响。比如现场就有羡辙的粉丝，想要成为羡辙那样的人。我觉得有这种影响力是一件很棒的事情。&lt;/p&gt;


&lt;p&gt;2.尹睿tracy-突破边界&lt;/p&gt;
&lt;p&gt;tracy的工作经历特别丰富，从最开始做记者，到转行互联网，早年在BAT都工作过，现在在美团点评当CMO。tracy厉害的地方在于能够走出自己的舒适区，不断去尝试新的行业，挑战新的领域。记得她中间一段工作在一个福利很好的公司，工作轻松，薪水也很好，还有养老金可以拿，办公楼也很fancy。但是她还是放弃安逸，离开去了更有挑战的地方。还有一个选择是当时tracy小孩还小，有一个工作机会会没有那么多时间陪伴小孩，tracy的丈夫对她说错过了陪伴小孩的时间，就没有办法弥补了。当时tracy想的是，自己错过这个机会，也没有人会补偿自己了。陪伴小孩的确重要，但是自己给小孩做一个榜样更重要。tracy提到了要think big和you only live once, make it count。以及在变化中寻找不变的那一个点。&lt;/p&gt;

&lt;p&gt;可能在短期看，工资多一点或者少一点并不是那么重要的。要think big，看长期的发展和布局。类似“短期投机，长期投资”的概念。然后就是每个人的时间都很宝贵，要尊重自己，做自己认为值得的事情。&lt;/p&gt;


&lt;p&gt;3.裴梦琪-新人设计师如何成为叛逆独角兽&lt;/p&gt;
&lt;p&gt;大琪是个特别有人格魅力的人，让人想和她成为好朋友。她分享了在她大学毕业的那个暑假，她爸爸问了她一个问题“你以后要成为一个怎样的人？”，她当时没有回答上来，于是过了一个无比纠结的暑假，想着上研究生的时候应该会有答案。但是读研后，发现大家的氛围是玩乐，于是在图书馆冥想了一个月想通了一件事。她在一张纸上分别写下“她有什么”和“她要什么”，这中间的差就是她要去做的事情。然后她就跑去实习了，在实习期间每天坚持写公众号，整个人很充实。后来毕业答辩后，面上了阿里。后来在阿里一段时间后，她又面临了一次选择，上海需要人，是否愿意离开杭州总部，去上海分部。她花了很多时间考虑这个事情，问了很多人的意见，最后用“比阿里更大的是什么，是阿外”说服了自己，来到上海。大琪参加了很多的分享会，也有自己主讲过一些分享会，虽然隔行如隔山，但她并不排斥去听关于自己不懂的领域的分享，能听懂多少是多少，她这样认为。&lt;/p&gt;
&lt;p&gt;大琪说解决问题的能力很重要，现在她用设计来解决问题，纯粹是因为她擅长这个，用起来更顺手。所以她不喜欢给自己加title，她说谁也不知道她以后是用什么来解决问题的，可能明天她就当厨子去了呢。&lt;/p&gt;

&lt;p&gt;我记得之前有朋友问过我，工作中应该培养哪些能力，当时我首先说的也是“解决问题的能力”。昨天晚上在WTM的群里，有人问前端技术一直更新，要如何保证自己不被淘汰，是不是要一直去学习新的技术。另一人说自己的学长说他自己老是去追新的技术做得太过，老的技术也可以解决问题。我比较认可的观点就是，能够解决问题的技术就是有效的技术，新和旧不应该成为你用和不用的判断标准。其实人生就是在解决一个又一个的问题，做一次又一次的选择。&lt;/p&gt;


&lt;p&gt;4.其他&lt;/p&gt;
&lt;p&gt;还有一些印象深刻的点就是在一个行业爆发，或者行业内的某个平台爆发的时候，要抓住机会，让自己的产品也得益爆发一下。还有一个是做有意义的事情，赚钱是顺带的，不是最开始的目的。&lt;/p&gt;
</description>
<pubDate>Sun, 15 Apr 2018 05:01:00 +0000</pubDate>
<dc:creator>rinka</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rinka/p/gdg_wtm_building_a_new_horizon.html</dc:identifier>
</item>
</channel>
</rss>