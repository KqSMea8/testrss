<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>通过wireshark抓包来讲解HTTP中Connection: keep-alive头部的作用 - CLAYJJ</title>
<link>http://www.cnblogs.com/CLAYJJ/p/9694067.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CLAYJJ/p/9694067.html</guid>
<description>&lt;p&gt;今天周末时间，有空给大家讲解一个小知识点，即HTTP的keep-alive头部。我使用wireshark来抓取网络包来在实战中讲解。希望能让大家更容易、更直观的理解！&lt;/p&gt;
&lt;p&gt;HTTP中keep-alive头部的作用是为保持TCP连接，这样可以复用TCP连接不需要为每个HTTP请求都建立一个单独的TCP连接。这样既可以节省操作系统资源，也能够保持HTTP请求的高效性。&lt;/p&gt;
&lt;p&gt;我们通过wireshark抓的包来分析一下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;下面的例子中128.14.154.105是HTTP服务器，192.168.1.6是客户端。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当服务器处理完一个HTTP请求时，会主动发起断开连接，如下图所示（四次挥手）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/922229/201809/922229-20180923220114330-1970454242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当服务器最后发送一个ACK包后进入TIME_WAIT状态，此状态将会持续2MSL（Maximum Segment Lifetime）,一个MSL一般为2分钟，所以TIME_WAIT一般持续4分钟。在此期间还是可以接受客户端的数据的。&lt;/p&gt;
&lt;p&gt;此时客户端为了复用TCP连接，将会发送一个心跳包（keep-alive）来保持连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/922229/201809/922229-20180923220948274-488639894.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的例子中，共发送了2次心跳包。如果在此期间还没有新的HTTP请求那么服务器会再次主动断开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/922229/201809/922229-20180923221504808-754749704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此后，客户端不会再发送心跳包了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在最后给大家说下，为什么主动发起断开连接的一方在发送最后一个ACK包后需要进入TIME_WAIT状态2MSL&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1）我们先假设发送完最后一个ACK包后直接断开的话，如果由于某种原因对端没有收到的话，对端会再次发送一个FIN包（TCP的重传机制），由于此时另一端已经关闭了对应的socket，所以TCP协议栈会&lt;/p&gt;
&lt;p&gt;发送一个RST包。这个包表示的是一种错误。（比如，请求的TCP连接的端口没有在监听状态下），那么TCP连接就是因错误而被迫断开，所以TCP中工作没有正常完成。&lt;/p&gt;
&lt;p&gt;2）第二个原因是让老的重复包在网络中消失，解释一下这句话的意思：如果我们的TCP断开之后，立马有一个新的TCP连接和之前的连接的IP和端口都一样的话，那么残留在网络中的包到达后会被误解为是新的&lt;/p&gt;
&lt;p&gt;连接中的包。这样就会出现问题。如果我们使用了TIME_WAIT，在这个状态下是不允许建立新的IP和端口都一样的TCP连接的，而且它会维持2MSL时间， 这足够让网络中的旧包消失掉。&lt;/p&gt;

&lt;p&gt;最后欢迎大家评论指正！^_^&lt;/p&gt;

</description>
<pubDate>Sun, 23 Sep 2018 14:43:00 +0000</pubDate>
<dc:creator>CLAYJJ</dc:creator>
<og:description>今天周末时间，有空给大家讲解一个小知识点，即HTTP的keep-alive头部。我使用wireshark来抓取网络包来在实战中讲解。希望能让大家更容易、更直观的理解！ HTTP中keep-alive头</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CLAYJJ/p/9694067.html</dc:identifier>
</item>
<item>
<title>Qt编写自定义控件属性设计器 - 飞扬青云</title>
<link>http://www.cnblogs.com/feiyangqingyun/p/9694025.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feiyangqingyun/p/9694025.html</guid>
<description>&lt;p&gt;以前做.NET开发中，.NET直接就集成了属性设计器，VS不愧是宇宙第一IDE，你能够想到的都给你封装好了，用起来不要太爽！因为项目需要自从全面转Qt开发已经6年有余，在工业控制领域，有一些应用场景需要自定义绘制一些控件满足特定的需求，比如仪器仪表、组态等，而且需要直接用户通过属性设计的形式生成导出控件及界面数据，下次导入使用，要想从内置控件或者自定义控件拿到对应的属性方法等，首先联想到的就是反射，Qt反射对应的类叫QMetaObject，着实强大，其实整个Qt开发框架也是超级强大的，本人自从转为Qt开发为主后，就深深的爱上了她，在其他跨平台的GUI开发框架平台面前，都会被Qt秒成渣，Qt的跨平台性是毋庸置疑的，几十兆的内存存储空间即可运行，尤其是嵌入式linux这种资源相当紧张的情况下，Qt的性能发挥到极致。&lt;/p&gt;
&lt;p&gt;接下来我们就一步步利用QMetaObject类和QtPropertyBrower（第三方开源属性设计器）来实现自己的控件属性设计器，其中包含了所见即所得的控件属性控制，以及xml数据的导入导出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：获取控件的属性名称集合。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有继承自QObject类的类，都有元对象，都可以通过这个QObject类的元对象&lt;em&gt;metaObject&lt;/em&gt;()获取属性+事件+方法等。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
QPushButton *btn = new QPushButton;
const QMetaObject *metaobject = btn-&amp;gt;metaObject();
int count = metaobject-&amp;gt;propertyCount();
for (int i = 0; i &amp;lt; count; ++i) {
    QMetaProperty metaproperty = metaobject-&amp;gt;property(i);
    const char *name = metaproperty.name();
    QVariant value = btn-&amp;gt;property(name);
    qDebug() &amp;lt;&amp;lt; name &amp;lt;&amp;lt; value;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
objectName QVariant(QString, &quot;&quot;)
modal QVariant(bool, false)
windowModality QVariant(int, 0)
enabled QVariant(bool, true)
geometry QVariant(QRect, QRect(0,0 640x480))
frameGeometry QVariant(QRect, QRect(0,0 639x479))
normalGeometry QVariant(QRect, QRect(0,0 0x0))
省略后面很多…
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到打印了很多父类的属性，这些基本上我们不需要的，那怎么办呢，放心，Qt肯定帮我们考虑好了，该propertyOffset上场了。metaObject-&amp;gt;propertyOffset()表示出了父类外，自己类本身属性的偏移位置即索引开始的位置，这下就好办了。&lt;/p&gt;
&lt;p&gt;代码改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
QPushButton *btn = new QPushButton;
const QMetaObject *metaobject = btn-&amp;gt;metaObject();
int count = metaobject-&amp;gt;propertyCount();
int index = metaobject-&amp;gt;propertyOffset();
for (int i = index; i &amp;lt; count; ++i) {
    QMetaProperty metaproperty = metaobject-&amp;gt;property(i);
    const char *name = metaproperty.name();
    QVariant value = btn-&amp;gt;property(name);
    qDebug() &amp;lt;&amp;lt; name &amp;lt;&amp;lt; value;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是将i的起始位置改为偏移位置即可。&lt;/p&gt;
&lt;p&gt;打印输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
autoDefault QVariant(bool, false)
default QVariant(bool, false)
flat QVariant(bool, false)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个过滤非常有用，因为真实用到的大部分应用场景都是控件类本身的属性，而不是父类的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：将控件类绑定到属性设计器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿到了控件的属性是第一步，接下来就是需要拿到属性所关联的方法等，这里省略，因为QtPropertyBrower这个屌爆了的第三方开源的属性设计器，全部给我们写好了，可以查看Qt帮助文档或者QMetaObject的头文件看到，QMetaObject提供了哪些接口去获取或使用这些元信息。比如classInfo获取类的信息、enumerator获取枚举值信息、method获取方法，property获取属性、superClass获取父类的名称等。&lt;/p&gt;
&lt;p&gt;QtPropertyBrower中提供了ObjectController类，该类继承自QWidget，这样的话我们在界面上拖一个QWidget控件，鼠标右键提升为ObjectController即可。&lt;/p&gt;
&lt;p&gt;这个轮子造的不要太好，我们只需要一行代码就可以让所有属性自动罗列到属性设计器中，代码是&lt;strong&gt;ui&lt;/strong&gt;-&amp;gt;&lt;strong&gt;objectController&lt;/strong&gt;-&amp;gt;setObject(btn);&lt;/p&gt;
&lt;p&gt;看下效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/63094/201809/63094-20180923222804734-43705225.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里是不是很兴奋呢，任意控件都可以这样来展示自己的属性。在右侧动态更改属性会立即应用生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：获取自定义控件的插件的所有控件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来这一步才是最关键的一步，以上举例是Qt自带控件的，如果是自定义控件插件比如就一个DLL文件呢，怎么办？放心，办法肯定是有的。&lt;/p&gt;
&lt;p&gt;该插件类QPluginLoader上场了。通过QPluginLoader载入后的实例，通过QDesignerCustomWidgetCollectionInterface类获取插件容器,然后逐个遍历容器找出单个插件，包括获得类名+图标。&lt;/p&gt;
&lt;p&gt; 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
void frmMain::openPlugin(const QString &amp;amp;fileName)
{
    qDeleteAll(listWidgets);
    listWidgets.clear();
    listNames.clear();
    ui-&amp;gt;listWidget-&amp;gt;clear();
    //加载自定义控件插件集合信息,包括获得类名+图标
    QPluginLoader loader(fileName);
    if (loader.load()) {
        QObject *plugin = loader.instance();
        //获取插件容器,然后逐个遍历容器找出单个插件
        QDesignerCustomWidgetCollectionInterface *interfaces = qobject_cast&amp;lt;QDesignerCustomWidgetCollectionInterface *&amp;gt;(plugin);
        if (interfaces)  {
            listWidgets = interfaces-&amp;gt;customWidgets();
            int count = listWidgets.count();
            for (int i = 0; i &amp;lt; count; i++) {
                QIcon icon = listWidgets.at(i)-&amp;gt;icon();
                QString className = listWidgets.at(i)-&amp;gt;name();
                QListWidgetItem *item = new QListWidgetItem(ui-&amp;gt;listWidget);
                item-&amp;gt;setText(className);
                item-&amp;gt;setIcon(icon);
                listNames &amp;lt;&amp;lt; className;
            }
        }
        //获取所有插件的类名
        const QObjectList objList = plugin-&amp;gt;children();
        foreach (QObject *obj, objList) {
            QString className = obj-&amp;gt;metaObject()-&amp;gt;className();
            //qDebug() &amp;lt;&amp;lt; className;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/63094/201809/63094-20180923222923548-714419166.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步：实例化new出控件并放到窗体。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿到了所有的控件，前面还有个对应控件的小图标，是不是又有点小激动呢，接下来就是怎么双击或者拖动该控件到界面上立马实例化一个控件出来。上一步我们将所有控件放到了一个链表变量&lt;strong&gt;listWidgets&lt;/strong&gt;中，该变量在头文件中定义如下：&lt;/p&gt;
&lt;p&gt;QList&amp;lt;QDesignerCustomWidgetInterface *&amp;gt; &lt;strong&gt;listWidgets&lt;/strong&gt;; &lt;/p&gt;
&lt;p&gt;这里写了个函数，传入列表中控件的索引，即该类的索引位置，和控件默认要放置的坐标，即可在主界面生成该控件。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
void frmMain::newWidget(int row, const QPoint &amp;amp;point)
{
    //列表按照同样的索引生成的,所以这里直接对该行的索引就行
    QWidget *widget = listWidgets.at(row)-&amp;gt;createWidget(ui-&amp;gt;centralwidget);
    widget-&amp;gt;move(point);
    widget-&amp;gt;resize(widget-&amp;gt;sizeHint());
    //实例化选中窗体跟随控件一起
    newSelect(widget);
    //立即执行获取焦点以及设置属性
    widgetPressed(widget);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第五步：动态绑定控件到设计器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步就比较轻松了，上面提到过，直接获取当前界面上选中的是哪个控件，遍历可以得到，然后设置object到属性设计器控件即可。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
void frmMain::clearFocus()
{
    //将原有焦点窗体全部设置成无焦点
    foreach (SelectWidget *widget, selectWidgets) {
        widget-&amp;gt;setDrawPoint(false);
    }
} 

void frmMain::widgetPressed(QWidget *widget)
{
    //清空所有控件的焦点
    clearFocus();
    //设置当前按下的控件有焦点
    foreach (SelectWidget *w, selectWidgets) {
        if (w-&amp;gt;getWidget() == widget) {
            w-&amp;gt;setDrawPoint(true);
            break;
        }
    }
    //设置自动加载该控件的所有属性
    ui-&amp;gt;objectController-&amp;gt;setObject(widget);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;第六步：导入导出控件属性到xml文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步比较难，本人也是花了好几个小时才搞定，前后折腾了好多次，因为遇到好几个棘手的问题，比如有些自定义控件中其实里边封装了Qt自带的控件例如QPushButton等，如果遍历控件设计窗体的所有控件，也会把该控件也遍历进去，所以要做过滤处理。&lt;/p&gt;
&lt;p&gt;导入xml数据自动生成控件代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
void frmMain::openFile(const QString &amp;amp;fileName)
{
    //打开文件
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly | QFile::Text)) {
        return;
    }

    //将文件填充到dom容器
    QDomDocument doc;
    if (!doc.setContent(&amp;amp;file)) {
        file.close();
        return;
    }
    file.close();
    //先清空原有控件
    QList&amp;lt;QWidget *&amp;gt; widgets = ui-&amp;gt;centralwidget-&amp;gt;findChildren&amp;lt;QWidget *&amp;gt;();
    qDeleteAll(widgets);
    widgets.clear();
    //先判断根元素是否正确
    QDomElement docElem = doc.documentElement();
    if (docElem.tagName() == &quot;canvas&quot;) {
        QDomNode node = docElem.firstChild();
        QDomElement element = node.toElement();
        while(!node.isNull()) {
            QString name = element.tagName();
            //存储坐标+宽高
            int x, y, width, height;
            //存储其他自定义控件属性
            QList&amp;lt;QPair&amp;lt;QString, QVariant&amp;gt; &amp;gt; propertys;
            //节点名称不为空才继续
            if (!name.isEmpty()) {
                //遍历节点的属性名称和属性值
                QDomNamedNodeMap attrs = element.attributes();
                for (int i = 0; i &amp;lt; attrs.count(); i++) {
                    QDomNode n = attrs.item(i);
                    QString nodeName = n.nodeName();
                    QString nodeValue = n.nodeValue();
                    //qDebug() &amp;lt;&amp;lt; nodeName &amp;lt;&amp;lt; nodeValue;
                    //优先取出坐标+宽高属性,这几个属性不能通过setProperty实现
                    if (nodeName == &quot;x&quot;) {
                        x = nodeValue.toInt();
                    } else if (nodeName == &quot;y&quot;) {
                        y = nodeValue.toInt();
                    } else if (nodeName == &quot;width&quot;) {
                        width = nodeValue.toInt();
                    } else if (nodeName == &quot;height&quot;) {
                        height = nodeValue.toInt();
                    } else {
                        propertys.append(qMakePair(nodeName, QVariant(nodeValue)));
                    }
                }
            }
            //qDebug() &amp;lt;&amp;lt; name &amp;lt;&amp;lt; x &amp;lt;&amp;lt; y &amp;lt;&amp;lt; width &amp;lt;&amp;lt; height;
            //根据不同的控件类型实例化控件
            int count = listWidgets.count();
            for (int i = 0; i &amp;lt; count; i++) {
                QString className = listWidgets.at(i)-&amp;gt;name();
                if (name == className) {
                    QWidget *widget = listWidgets.at(i)-&amp;gt;createWidget(ui-&amp;gt;centralwidget);

                    //逐个设置自定义控件的属性
                    int count = propertys.count();
                    for (int i = 0; i &amp;lt; count; i++) {
                        QPair&amp;lt;QString, QVariant&amp;gt; property = propertys.at(i);
                        widget-&amp;gt;setProperty(property.first.toLatin1().constData(), property.second);
                    }
                    //设置坐标+宽高
                    widget-&amp;gt;setGeometry(x, y, width, height);
                    //实例化选中窗体跟随控件一起
                    newSelect(widget);
                    break;
                }
            }
            //移动到下一个节点
            node = node.nextSibling();
            element = node.toElement();
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导出所有控件到xml文件代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
void frmMain::saveFile(const QString &amp;amp;fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text | QFile::Truncate)) {
        return;
    }
    //以流的形式输出文件
    QTextStream stream(&amp;amp;file);
    //构建xml数据
    QStringList list;
    //添加固定头部数据
    list &amp;lt;&amp;lt; &quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&amp;gt;&quot;;
    list &amp;lt;&amp;lt; QString(&quot;&amp;lt;canvas width=\&quot;%1\&quot; height=\&quot;%2\&quot;&amp;gt;&quot;)
         .arg(ui-&amp;gt;centralwidget-&amp;gt;width()).arg(ui-&amp;gt;centralwidget-&amp;gt;height());
    //从容器中找到所有控件,根据控件的类名保存该类的所有属性
    QList&amp;lt;QWidget *&amp;gt; widgets = ui-&amp;gt;centralwidget-&amp;gt;findChildren&amp;lt;QWidget *&amp;gt;();
    foreach (QWidget *w, widgets) {
        const QMetaObject *metaObject = w-&amp;gt;metaObject();
        QString className = metaObject-&amp;gt;className();
        QStringList values;
        //如果当前控件的父类不是主窗体则无需导出,有些控件有子控件无需导出
        if (w-&amp;gt;parent() != ui-&amp;gt;centralwidget || className == &quot;SelectWidget&quot;) {
            continue;
        }
        //metaObject-&amp;gt;propertyOffset()表示当前控件的属性开始索引,0开始的是父类的属性
        int index = metaObject-&amp;gt;propertyOffset();
        for (int i = index; i &amp;lt; metaObject-&amp;gt;propertyCount(); i++) {
            QMetaProperty p = metaObject-&amp;gt;property(i);
            QString nodeName = p.name();
            QVariant nodeValue = p.read(w);
            //枚举值要特殊处理,需要以字符串形式写入,不然存储到配置文件数据为int
            if (p.isEnumType()) {
                QMetaEnum enumValue = p.enumerator();
                nodeValue = enumValue.valueToKey(nodeValue.toInt());
            }
            QString temp = nodeValue.toString().toLocal8Bit().constData();
            values &amp;lt;&amp;lt; QString(&quot;%1=\&quot;%2\&quot;&quot;).arg(nodeName).arg(temp);
            //qDebug() &amp;lt;&amp;lt; nodeName &amp;lt;&amp;lt; nodeValue;
        }
        //逐个添加界面上的控件的属性
        QString str = QString(&quot;\t&amp;lt;%1 x=\&quot;%2\&quot; y=\&quot;%3\&quot; width=\&quot;%4\&quot; height=\&quot;%5\&quot; %6/&amp;gt;&quot;)
                      .arg(className).arg(w-&amp;gt;x()).arg(w-&amp;gt;y()).arg(w-&amp;gt;width()).arg(w-&amp;gt;height()).arg(values.join(&quot; &quot;));
        list &amp;lt;&amp;lt; str;
    }
    //添加固定尾部数据
    list &amp;lt;&amp;lt; &quot;&amp;lt;/canvas&amp;gt;&quot;;
    //写入文件
    QString data = list.join(&quot;\n&quot;);
    stream &amp;lt;&amp;lt; data;
    file.close();}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　xml数据格式效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/63094/201809/63094-20180923223212606-1899107717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/63094/201809/63094-20180923223223479-1621112591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后分享一些自己整理好的Qt开发过程中的小技巧，Qt武林秘籍。&lt;/p&gt;
&lt;p&gt;1：当编译发现大量错误的时候，从第一个看起，一个一个的解决，不要急着去看下一个错误，往往后面的错误都是由于前面的错误引起的，第一个解决后很可能都解决了。&lt;/p&gt;
&lt;p&gt;2：定时器是个好东西，学会好使用它，有时候用QTimer::singleShot可以解决意想不到的问题。&lt;/p&gt;
&lt;p&gt;3：打开creator，在构建套件的环境中增加MAKEFLAGS=-j8，可以不用每次设置多线程编译。珍爱时间和生命。&lt;/p&gt;
&lt;p&gt;4：如果你想顺利用QtCreator部署安卓程序，首先你要在AndroidStudio 里面配置成功，把坑全部趟平。&lt;/p&gt;
&lt;p&gt;5：很多时候找到Qt对应封装的方法后，记得多看看该函数的重载，多个参数的，你会发现不一样的世界，有时候会恍然大悟，原来Qt已经帮我们封装好了。&lt;/p&gt;
&lt;p&gt;6：可以在pro文件中写上标记版本号+ico图标&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
VERSION             = 2018.7.25
win32:RC_ICONS      = main0.ico 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7：管理员运行程序，限定在MSVC编译器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
QMAKE_LFLAGS += /MANIFESTUAC:\&quot;level=\'requireAdministrator\' uiAccess=\'false\'\&quot; #以管理员运行
QMAKE_LFLAGS += /SUBSYSTEM:WINDOWS,\&quot;5.01\&quot; #VS2013 在XP运行 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8：运行文件附带调试输出窗口，有时候程序双击了没有反应，这样可以很方便的知道哪里出了问题。&lt;/p&gt;
&lt;p&gt;CONFIG += console pro &lt;/p&gt;
&lt;p&gt;9：绘制平铺背景QPainter::drawTiledPixmap&lt;/p&gt;
&lt;p&gt;绘制圆角矩形QPainter::drawRoundedRect(),而不是QPainter::drawRoundRect(); &lt;/p&gt;
&lt;p&gt;10：移除旧的样式&lt;/p&gt;
&lt;p&gt;style()-&amp;gt;unpolish(ui-&amp;gt;btn);&lt;/p&gt;
&lt;p&gt;重新设置新的该控件的样式。&lt;/p&gt;
&lt;p&gt;style()-&amp;gt;polish(ui-&amp;gt;btn); &lt;/p&gt;
&lt;p&gt;11：获取类的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
const QMetaObject *metaobject = object-&amp;gt;metaObject();
int count = metaobject-&amp;gt;propertyCount();
for (int i = 0; i &amp;lt; count; ++i) {
    QMetaProperty metaproperty = metaobject-&amp;gt;property(i);
    const char *name = metaproperty.name();
    QVariant value = object-&amp;gt;property(name);
    qDebug() &amp;lt;&amp;lt; name &amp;lt;&amp;lt; value;
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12：Qt内置图标封装在QStyle中，总共七十多个，可以直接拿来用。&lt;/p&gt;
&lt;p&gt;QStyle :: SP_TitleBarMenuButton &lt;/p&gt;
&lt;p&gt;13：根据操作系统位数判断加载&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
win32 {
    contains(DEFINES, WIN64) {
        DESTDIR = $${PWD}/../../bin64
    } else {
        DESTDIR = $${PWD}/../../bin32
    }
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14：Qt5增强了很多安全性验证，如果出现setGeometry: Unable to set geometry，请将该控件的可见移到加入布局之后。&lt;/p&gt;
&lt;p&gt;15：可以将控件A添加到布局，然后控件B设置该布局，这种灵活性大大提高了控件的组合度，比如可以在文本框左侧右侧增加一个搜索按钮，按钮设置图标即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
QPushButton *btn = new QPushButton;
btn-&amp;gt;resize(30, ui-&amp;gt;lineEdit-&amp;gt;height());
QHBoxLayout *layout = new QHBoxLayout(ui-&amp;gt;lineEdit);
layout-&amp;gt;setMargin(0);
layout-&amp;gt;addStretch();
layout-&amp;gt;addWidget(btn);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;16：对QLCDNumber控件设置样式，需要将QLCDNumber的segmentstyle设置为flat。&lt;/p&gt;
&lt;p&gt;17：巧妙的使用findChildren可以查找该控件下的所有子控件。findChild为查找单个。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
//查找指定类名objectName的控件
QList&amp;lt;QWidget *&amp;gt; widgets = parentWidget.findChildren&amp;lt;QWidget *&amp;gt;(&quot;widgetname&quot;);
//查找所有QPushButton
QList&amp;lt;QPushButton *&amp;gt; allPButtons = parentWidget.findChildren&amp;lt;QPushButton *&amp;gt;();
//查找一级子控件,不然会一直遍历所有子控件
QList&amp;lt;QPushButton *&amp;gt; childButtons = parentWidget.findChildren&amp;lt;QPushButton *&amp;gt;(QString(), Qt::FindDirectChildrenOnly);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;18：巧妙的使用inherits判断是否属于某种类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:cpp;gutter:true;&quot;&gt;
QTimer *timer = new QTimer;         // QTimer inherits QObject
timer-&amp;gt;inherits(&quot;QTimer&quot;);          // returns true
timer-&amp;gt;inherits(&quot;QObject&quot;);         // returns true
timer-&amp;gt;inherits(&quot;QAbstractButton&quot;); // returns false
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;19：使用弱属性机制，可以存储临时的值用于传递判断。 &lt;/p&gt;
&lt;p&gt;20：如果遇到问题搜索Qt方面找不到答案，试着将关键字用JAVA C# android打头，你会发现别有一番天地，其他人很可能做过！&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 14:34:00 +0000</pubDate>
<dc:creator>飞扬青云</dc:creator>
<og:description>以前做.NET开发中，.NET直接就集成了属性设计器，VS不愧是宇宙第一IDE，你能够想到的都给你封装好了，用起来不要太爽！因为项目需要自从全面转Qt开发已经6年有余，在工业控制领域，有一些应用场景需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feiyangqingyun/p/9694025.html</dc:identifier>
</item>
<item>
<title>Entitiy Framework Core中使用ChangeTracker持久化实体修改历史 - LamondLu</title>
<link>http://www.cnblogs.com/lwqlun/p/9693970.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lwqlun/p/9693970.html</guid>
<description>&lt;p&gt;在我们的日常开发中，有时候需要记录数据库表中值的变化, 这时候我们通常会使用触发器或者使用关系型数据库中临时表(Temporal Table)或数据变更捕获(Change Data Capture)特性来记录数据库表中字段的值变化。原文的作者Gérald Barré讲解了如何使用Entity Freamwork Core上下文中的ChangeTracker来获取并保存实体的变化记录。&lt;/p&gt;
&lt;blockquote readability=&quot;1.140350877193&quot;&gt;
&lt;p&gt;原文链接 &lt;a href=&quot;https://www.meziantou.net/2017/08/14/entity-framework-core-history-audit-table&quot;&gt;Entity Framework Core: History / Audit table&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ChangeTracker是Entity Framework Core记录实体变更的核心对象(这一点和以前版本的Entity Framework一致)。当你使用Entity Framework Core进行获取实体对象、添加实体对象、删除实体对象、更新实体对象、附加实体对象等操作时，ChangeTracker都会记录下来对应的实体引用和对应的实体状态。&lt;br/&gt;我们可以通过&lt;code&gt;ChangeTracker.Entries()&lt;/code&gt;方法, 获取到当前上下文中使用的所有实体对象, 以及每个实体对象的状态属性State。&lt;/p&gt;
&lt;p&gt;Entity Framework Core中可用的实体状态属性有以下几种&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Detached&lt;/li&gt;
&lt;li&gt;Unchanged&lt;/li&gt;
&lt;li&gt;Deleted&lt;/li&gt;
&lt;li&gt;Modified&lt;/li&gt;
&lt;li&gt;Added&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以如果我们要记录实体的变更，只需要从ChangeTracker中取出所有Added, Deleted, Modified状态的实体, 并将其记录到一个日志表中即可。&lt;/p&gt;

&lt;p&gt;我们以下面这个例子为例。&lt;br/&gt;当前我们有一个顾客表Customer和一个日志表Audit, 其对应的实体对象及Entity Framework上下文如下：&lt;/p&gt;
&lt;h4 id=&quot;audit.cs&quot;&gt;Audit.cs&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;    [Table(&quot;Audit&quot;)]
    public class Audit
    {
        [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        public string TableName { get; set; }

        public DateTime DateTime { get; set; }

        public string KeyValues { get; set; }

        public string OldValues { get; set; }

        public string NewValues { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;customer.cs&quot;&gt;Customer.cs&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;    [Table(&quot;Customer&quot;)]
    public class Customer
    {
        [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;samplecontext.cs&quot;&gt;SampleContext.cs&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;    public class SampleContext : DbContext
    {
        public SampleContext()
        {

        }

        public DbSet&amp;lt;Customer&amp;gt; Customers { get; set; }

        public DbSet&amp;lt;Audit&amp;gt; Audits { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们希望当执行以下代码之后, 在Audit表中产生如下数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    class Program
    {
        static void Main(string[] args)
        {
            using (var context = new SampleContext())
            {
                // Insert a row
                var customer = new Customer();
                customer.FirstName = &quot;John&quot;;
                customer.LastName = &quot;doe&quot;;
                context.Customers.Add(customer);
                context.SaveChangesAsync().Wait();

                // Update the first customer
                customer.LastName = &quot;Doe&quot;;
                context.SaveChangesAsync().Wait();

                // Delete the customer
                context.Customers.Remove(customer);
                context.SaveChangesAsync().Wait();
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/65831/201809/65831-20180923221903307-121244645.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;复写上下文savechangeasync方法&quot;&gt;复写上下文SaveChangeAsync方法&lt;/h2&gt;
&lt;p&gt;首先我们添加一个AuditEntry类, 来生成变更记录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class AuditEntry
    {
        public AuditEntry(EntityEntry entry)
        {
            Entry = entry;
        }

        public EntityEntry Entry { get; }
        public string TableName { get; set; }
        public Dictionary&amp;lt;string, object&amp;gt; KeyValues { get; } = new Dictionary&amp;lt;string, object&amp;gt;();
        public Dictionary&amp;lt;string, object&amp;gt; OldValues { get; } = new Dictionary&amp;lt;string, object&amp;gt;();
        public Dictionary&amp;lt;string, object&amp;gt; NewValues { get; } = new Dictionary&amp;lt;string, object&amp;gt;();
        public List&amp;lt;PropertyEntry&amp;gt; TemporaryProperties { get; } = new List&amp;lt;PropertyEntry&amp;gt;();

        public bool HasTemporaryProperties =&amp;gt; TemporaryProperties.Any();

        public Audit ToAudit()
        {
            var audit = new Audit();
            audit.TableName = TableName;
            audit.DateTime = DateTime.UtcNow;
            audit.KeyValues = JsonConvert.SerializeObject(KeyValues);
            audit.OldValues = OldValues.Count == 0 ? null : JsonConvert.SerializeObject(OldValues);
            audit.NewValues = NewValues.Count == 0 ? null : JsonConvert.SerializeObject(NewValues);
            return audit;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释&quot;&gt;代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Entry属性表示变更的实体&lt;/li&gt;
&lt;li&gt;TableName属性表示实体对应的数据库表名&lt;/li&gt;
&lt;li&gt;KeyValues属性表示所有的主键值&lt;/li&gt;
&lt;li&gt;OldValues属性表示当前实体所有变更属性的原始值&lt;/li&gt;
&lt;li&gt;NewValues属性表示当前实体所有变更属性的新值&lt;/li&gt;
&lt;li&gt;TemporaryProperties属性表示当前实体所有由数据库生成的属性集合&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后我们打开SampleContext.cs, 复写方法SaveChangeAsync代码如下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public override async Task&amp;lt;int&amp;gt; SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
    {
        var auditEntries = OnBeforeSaveChanges();
        var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        await OnAfterSaveChanges(auditEntries);
        return result;
    }
    
    private List&amp;lt;AuditEntry&amp;gt; OnBeforeSaveChanges()
    {
        throw new NotImplementedException();
    }

    private Task OnAfterSaveChanges(List&amp;lt;AuditEntry&amp;gt; auditEntries)
    {
        throw new NotImplementedException();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释-1&quot;&gt;代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;这里我们添加了2个方法&lt;code&gt;OnBeforeSaveChange()&lt;/code&gt;和&lt;code&gt;OnAfterSaveChanges&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OnBeforeSaveChanges&lt;/code&gt;是用来获取所有需要记录的实体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OnAfterSaveChanges&lt;/code&gt;是为了获得实体中数据库生成列的新值(例如自增列, 计算列)并持久化变更记录, 这一步必须放置在调用父类&lt;code&gt;SaveChangesAsync&lt;/code&gt;之后，因为只有持久化之后，才能获取自增列和计算列的新值。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;OnBeforeSaveChange&lt;/code&gt;方法之后，&lt;code&gt;OnAfterSaveChanges&lt;/code&gt;方法之前, 我们调用父类的&lt;code&gt;SaveChangesAsync&lt;/code&gt;来保存实体变更。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后我们来修改&lt;code&gt;OnBeforeSaveChanges&lt;/code&gt;方法, 代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    private List&amp;lt;AuditEntry&amp;gt; OnBeforeSaveChanges()
    {
        ChangeTracker.DetectChanges();
        var auditEntries = new List&amp;lt;AuditEntry&amp;gt;();
        foreach (var entry in ChangeTracker.Entries())
        {
            if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                continue;
    
            var auditEntry = new AuditEntry(entry);
            auditEntry.TableName = entry.Metadata.Relational().TableName;
            auditEntries.Add(auditEntry);
    
            foreach (var property in entry.Properties)
            {
                if (property.IsTemporary)
                {
                    // value will be generated by the database, get the value after saving
                    auditEntry.TemporaryProperties.Add(property);
                    continue;
                }
    
                string propertyName = property.Metadata.Name;
                if (property.Metadata.IsPrimaryKey())
                {
                    auditEntry.KeyValues[propertyName] = property.CurrentValue;
                    continue;
                }
    
                switch (entry.State)
                {
                    case EntityState.Added:
                        auditEntry.NewValues[propertyName] = property.CurrentValue;
                        break;
    
                    case EntityState.Deleted:
                        auditEntry.OldValues[propertyName] = property.OriginalValue;
                        break;
    
                    case EntityState.Modified:
                        if (property.IsModified)
                        {
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                        }
                        break;
                }
            }
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释-2&quot;&gt;代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ChangeTracker.DetectChanges()&lt;/code&gt;是强制上下文再做一次变更检查&lt;/li&gt;
&lt;li&gt;由于Audit表也在ChangeTracker的管理中, 所以在&lt;code&gt;OnBeforeSaveChanges&lt;/code&gt;方法中，我们需要将Audit表的实体排除掉，否则会出现死循环&lt;/li&gt;
&lt;li&gt;这里我们只需要操作所有Added, Modified, Deleted状态的实体，所以Detached和Unchanged状态的实体需要排除掉&lt;/li&gt;
&lt;li&gt;ChangeTracker中记录的每个实体都有一个&lt;code&gt;Properties&lt;/code&gt;集合，里面记录的每个实体所有属性的状态, 如果某个属性被修改了，则该属性的&lt;code&gt;IsModified&lt;/code&gt;是true.&lt;/li&gt;
&lt;li&gt;实体属性Property对象中的&lt;code&gt;IsTemporary&lt;/code&gt;属性表明了该字段是不是数据库生成的。 我们将所有数据库生成的属性放到了&lt;code&gt;TemplateProperties&lt;/code&gt;集合中，供&lt;code&gt;OnAfterSaveChanges&lt;/code&gt;方法遍历&lt;/li&gt;
&lt;li&gt;我们可以通过Property对象的&lt;code&gt;Metadata.IsPrimaryKey()&lt;/code&gt;方法来获得当前字段是不是主键字段&lt;/li&gt;
&lt;li&gt;Property对象的CurrentValue属性表示当前字段的新值，OriginalValue属性表示当前字段的原始值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后我们修改一下&lt;code&gt;OnAfterSaveChanges&lt;/code&gt;, 代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    private Task OnAfterSaveChanges(List&amp;lt;AuditEntry&amp;gt; auditEntries)
    {
        if (auditEntries == null || auditEntries.Count == 0)
            return Task.CompletedTask;


        foreach (var auditEntry in auditEntries)
        {
            // Get the final value of the temporary properties
            foreach (var prop in auditEntry.TemporaryProperties)
            {
                if (prop.Metadata.IsPrimaryKey())
                {
                    auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                }
                else
                {
                    auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                }
            }

            // Save the Audit entry
            Audits.Add(auditEntry.ToAudit());
        }

        return SaveChangesAsync();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释-3&quot;&gt;代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;在&lt;code&gt;OnBeforeSaveChanges&lt;/code&gt;中，我们记录下了当前实体所有需要数据库生成的属性。 在调用父类的&lt;code&gt;SaveChangesAsync&lt;/code&gt;方法, 我们可以获取通过property的&lt;code&gt;CurrentValue&lt;/code&gt;属性获得到这些数据库生成属性的新值&lt;/li&gt;
&lt;li&gt;记录下新值，之后我们生成变更实体记录Audit，并添加到上下文中，再次调用SaveChangesAsync方法，将其持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;这个方案中，整个数据库持久化并不在一个原子事务中，我们都知道Entity Framework的SaveChangesAsync方法是自带事务的，但是调用2次SaveChangeAsync就不是一个事务作用域了，可能出现实体保存成功，Audit实体保存失败的情况&lt;/li&gt;
&lt;li&gt;由于调用了2次SaveChangeAsync方法，所以Audit实体中的DateTime属性并不能确切的反映保存实体操作的真正时间, 中间间隔了第一次SaveChangeAsync花费的时间(个人认为在&lt;code&gt;OnBeforeSaveChanges&lt;/code&gt;中就可以生成这个DateTime让时间更精确一些)&lt;/li&gt;
&lt;li&gt;如果所有实体属性值都是预生成的，非数据库生成的，作者这个方案还是非常好的，但是如果有数据库自增列或计算列, 还是使用关系型数据库中临时表(Temporal Table)或数据变更捕获(Change Data Capture)特性比较合理&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/lamondlu/EntityFrameworkCoreAuditSample&quot;&gt;本篇源代码&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 14:33:00 +0000</pubDate>
<dc:creator>LamondLu</dc:creator>
<og:description>背景介绍 在我们的日常开发中，有时候需要记录数据库表中值的变化, 这时候我们通常会使用触发器或者使用关系型数据库中临时表(Temporal Table)或数据变更捕获(Change Data Capt</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lwqlun/p/9693970.html</dc:identifier>
</item>
<item>
<title>试水Spring Cloud Hystrix - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9693980.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9693980.html</guid>
<description>&lt;p&gt;Spring Cloud Hystrix是一个容错库，它实现了断路器模式，使得当服务发生异常时，会自动切断连接，并将请求引导至预设的回调方法。&lt;/p&gt;

&lt;p&gt;在Spring Tool Suite的文件菜单中，点击新建Spring Starter Project。建立一个普通的Restful风格的服务。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923215258956-78120028.png&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@SpringBootApplication
public class SpringcloudHystrixServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringcloudHystrixServerApplication.class, args);
    }

    @RequestMapping(value = &quot;/message&quot;)
    public String getMessage() {
        return &quot;Hello World!&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;application.properties文件中配置服务的端口，&lt;code&gt;server.port=8200&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;服务启动后，可以在浏览器查看相应接口。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923215651314-952625280.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;再建立一个客户端应用程序，在创建时选择Hystrix，Hystrix Dashboard，Actuator和Web模块。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923215832091-1722465998.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目创建完成后，添加一个Service，其中包括调用服务端接口的方法及一个回调方法。注意这里@HystrixCommand的用法。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.net.URI;

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Service
public class MessageService {
    private final RestTemplate restTemplate;

    public MessageService(RestTemplate rest) {
        this.restTemplate = rest;
    }

    @HystrixCommand(fallbackMethod = &quot;reliable&quot;)
    public String getMessage() {
        URI uri = URI.create(&quot;http://localhost:8200/message&quot;);

        return this.restTemplate.getForObject(uri, String.class);
    }

    public String reliable() {
        return &quot;Woo, something wrong!&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在客户端的入口方法加上@EnableCircuitBreaker标记，并把它的端口设为&lt;code&gt;server.port=8300&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@EnableHystrixDashboard
@EnableCircuitBreaker
@RestController
@SpringBootApplication
public class SpringcloudHystrixClientApplication {

    @Autowired
    private MessageService messageService;

    @Bean
    public RestTemplate rest(RestTemplateBuilder builder) {
        return builder.build();
    }

    public static void main(String[] args) {
        SpringApplication.run(SpringcloudHystrixClientApplication.class, args);
    }

    @RequestMapping(&quot;/message&quot;)
    public String getMessge() {
        return messageService.getMessage();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动客户端后，如果在浏览器里看到页面能正常获取服务端的数据，说明当前客户端与服务端运作都是正常的。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923220810280-1346658118.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，停止服务端，让情况出现异常。&lt;/p&gt;
&lt;p&gt;刷新页面，可以看到这次的结果也在预料之内，当客户端调用服务端失败后，通过Hystrix的作用，自动切换至调用预设的回调方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923220953655-851775555.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Hystrix自带可视化仪表盘，在上面的客户端代码中，入口方法除了增加了@EnableCircuitBreaker标记外，还有@EnableHystrixDashboard。这样的设置便可以启用Hystrix的仪表盘。&lt;/p&gt;
&lt;p&gt;不过在application.properties文件还需要加上以下配置，以避免“Unable to connect to Command Metric Stream”错误。&lt;/p&gt;
&lt;pre class=&quot;config&quot;&gt;
&lt;code&gt;management.endpoints.web.exposure.include=hystrix.stream
management.endpoints.web.base-path=/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当客户端被启动后，使用&lt;code&gt;http://localhost:8300/hystrix&lt;/code&gt;路径可以直接访问仪表盘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923221730690-967494680.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后在Hystrix Dashboard下面的地址栏内填上&lt;code&gt;http://localhost:8300/hystrix.stream&lt;/code&gt;，再点击Monitor Stream按钮，监控结果一览无遗。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/991496/201809/991496-20180923222008224-1192985274.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 14:26:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>Spring Cloud Hystrix是一个容错库，它实现了断路器模式，使得当服务发生异常时，会自动切断连接，并将请求引导至预设的回调方法。 服务端 在Spring Tool Suite的文件菜单中</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9693980.html</dc:identifier>
</item>
<item>
<title>Python + Selenium + AutoIt 模拟键盘实现另存为、上传、下载操作详解 - 温一壶清酒</title>
<link>http://www.cnblogs.com/hong-fithing/p/9693865.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hong-fithing/p/9693865.html</guid>
<description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;在web页面中，可以使用selenium的定位方式来识别元素，从而来实现页面中的自动化，但对于页面中弹出的文件选择框，selenium就实现不了了，所以就需引用AutoIt工具来实现。&lt;/p&gt;
&lt;h3&gt;AutoIt介绍&lt;/h3&gt;
&lt;p&gt;AutoIt简单介绍下，AutoIt 目前最新是v3版本，这是一个使用类似BASIC脚本语言的免费软件，它设计用于Windows GUI(图形用户界面)中进行自动化操作。它利用模拟键盘按键，鼠标移动和窗口/控件的组合来实现自动化任务。而这是其它语言不可能做到或无可靠方法实现的(例如VBScript和SendKeys)。&lt;/p&gt;
&lt;h2&gt;实现原理：&lt;/h2&gt;
&lt;p&gt;使用AutoIT下的工具去定位页面外的元素属性值，其次再利用AutoIT下的工具编写合适的脚本，然后将脚本编译成可执行文件，最后在自动化实现时，直接调用此脚本实现文件的上传、下载等操作。&lt;/p&gt;
&lt;p&gt;备注：定位元素、编写脚本和编译，需要借助AutoIT提供的工具，但是脚本编译成可执行文件后，可以直接使用。&lt;/p&gt;
&lt;p&gt;AutoIt的下载与安装就不再赘述，下载地址如下：&lt;a href=&quot;https://www.autoitscript.com/site/autoit/downloads/&quot; target=&quot;_blank&quot;&gt;https://www.autoitscript.com/site/autoit/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装成功后会出现如下菜单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923210132471-1863788000.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;AutoIt工具使用&lt;/h2&gt;
&lt;p&gt;1.AutoIT Window Info用来识别Windows控件，根据识别的控件信息编写脚本；x86为32位&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;2.SciTE Script Editor用来写脚本，并保存为au3格式，按F5可以调试代码，但需要是操作弹框（上传/下载/另存为弹框）开启的情况下&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;3.Complie Script to .exe， 将刚编写的脚本，编译成可执行文件；&lt;/p&gt;
&lt;p&gt;4.编译后在Python代码中调用&lt;/p&gt;
&lt;p&gt;想必介绍到这，或多或少有所了解了，对AutoIT工具下的功能点也清楚了，Run Script是运行脚本的，我们是要到Python代码中调用，所以此处就略过了。&lt;/p&gt;
&lt;h3&gt;实例讲解&lt;/h3&gt;
&lt;p&gt;接下来就用一个实例来讲解下AutoIT工具的具体使用，实例功能是：把百度首页中的百度图片另存为到本地或任意磁盘&lt;/p&gt;
&lt;p&gt;在做这个事情的时候，我们要知道，步骤是先要选中图片，并右击，选择另存为，然后输入文件名以及保存的位置，最后点击保存。人工操作鼠标很简单，但现在是要使用代码来实现该功能，可细化分为四步，如下：&lt;/p&gt;
&lt;p&gt;1.使用Selenium功能弹出右键菜单&lt;/p&gt;
&lt;p&gt;2.利用win32api选择相关菜单&lt;/p&gt;
&lt;p&gt;3.调用AutoIT实现另存为操作&lt;/p&gt;
&lt;p&gt;4.到Python代码中调用&lt;/p&gt;
&lt;p&gt;实现第一步，在浏览器中定位到图片元素，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
context = driver.find_element_by_css_selector(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.index-logo-src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
ActionChains(driver).context_click(context).perform()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现第二步，模拟键盘操作，鼠标移到另存为处，使用win32api操作，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
win32api.keybd_event(40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;13&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;13&lt;span&gt;, 0, win32con.KEYEVENTF_KEYUP, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, win32con.KEYEVENTF_KEYUP, 0)
time.sleep(&lt;/span&gt;1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;win32api的键盘码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923210809792-1970624220.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面代码的13与40按键对应的是回车与下键，在键盘码的图片中很详细&lt;/p&gt;
&lt;p&gt;实现上述两步代码后，会弹出如下所示框，让输入文件名以及保存路径，该对话框已经是页面外的元素了，使用普通的定位时定不到了，所以就需要使用AutoIT工具来实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923211012056-577367678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实现第三步，操作如下：&lt;/p&gt;
&lt;p&gt;①打开autoit工具包下的AutoIT Window Info（x64）工具，版本按自己电脑系统来，界面如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923211038709-458656579.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.1鼠标点中Finder Tool并拖动到输入文件名处，操作如下所示，得到下图结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923211303658-1645558336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.2重复上述定位步骤，定位保存按钮，结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923211532223-1423444252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;②元素定位到了，接下来就是使用AutoIT工具包下的SciTE Script Editor写脚本，并保存为au3格式，注意：此工具中；表注释&lt;/p&gt;
&lt;p&gt;根据定位到的参数值，写如下脚本：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
ControlFocus(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;另存为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Edit1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
WinWait(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[CLASS:#32770]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,10&lt;span&gt;)
ControlSetText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;另存为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Edit1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;G:\201801-\python_code\Demo\autoit\baidu.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Sleep(&lt;/span&gt;2000&lt;span&gt;)
ControlClick(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;另存为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Button2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;代码解释：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第一行：ControlFocus ( &quot;title&quot;, &quot;窗口文本&quot;, controlID) 设置输入焦点到指定窗口的某个控件上；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第二行：WinWait ( &quot;title&quot; , &quot;窗口文本&quot; , 超时时间 ) 暂停脚本的执行直至指定窗口存在（出现） 为止；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第三行：；表注释&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第四行：ControlSetText ( &quot;title&quot;, &quot;窗口文本&quot;, controlID, &quot;新文本&quot; ) 修改指定控件的文本；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第五行：Sleep ( 延迟 ) 使脚本暂停指定时间段；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第六行：ControlClick ( &quot;title&quot;, &quot;窗口文本&quot;, 控件ID , 按钮 , 点击次数 ) 向指定控件发送鼠标点击命令；&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;其中， title即AutoIt Window Info识别出的Title字段， controlID即AutoItWindow Info识别出的Class和Instance的拼接， 如上图拼接后的结果应为：Button2，也就是ClassnameNN的值。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;③使用AutoIT工具包下的Complie Script to .exe工具把刚编写的脚本编译成可执行文件，操作如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923212017609-1319348891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行上步骤后，会出现test.exe可执行文件，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923212138262-677465841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;第四步，到Python代码中调用该可执行文件，操作代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
os.system(os.getcwd() &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\autoit\\test.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行Python代码，在定义的路径下会看到已保存的百度图片，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923212708469-1795286167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;整体代码实现如下，仅供参考：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标操作需要导入ActionChains类，因为鼠标操作的方法封装在该类中&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; selenium.webdriver.common.action_chains &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ActionChains
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; win32con
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; win32api
driver &lt;/span&gt;=&lt;span&gt; webdriver.Chrome()
driver.get(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
driver.maximize_window()
time.sleep(&lt;/span&gt;2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标右击操作，context_click()&lt;/span&gt;
context = driver.find_element_by_css_selector(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.index-logo-src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
ActionChains(driver).context_click(context).perform()
time.sleep(&lt;/span&gt;3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 按下下键&lt;/span&gt;
win32api.keybd_event(40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
win32api.keybd_event(&lt;/span&gt;40&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 按下回车&lt;/span&gt;
win32api.keybd_event(13&lt;span&gt;, 0, 0, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 释放回车键&lt;/span&gt;
win32api.keybd_event(13&lt;span&gt;, 0, win32con.KEYEVENTF_KEYUP, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 释放下键&lt;/span&gt;
win32api.keybd_event(40&lt;span&gt;, 0, win32con.KEYEVENTF_KEYUP, 0)
time.sleep(&lt;/span&gt;1&lt;span&gt;)
os.system(os.getcwd() &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\autoit\\test.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用exe文件后，延时3秒&lt;/span&gt;
time.sleep(3&lt;span&gt;)
driver.quit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 将百度首页中的图片另存为还有一个实现方法，不用win32api操作，直接在AutoIT编写脚本中发送个V，因为选择另存为和按V是一样的作用，AutoIT编写脚本代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Sleep(&lt;/span&gt;1000&lt;span&gt;)
ControlFocus(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;另存为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Edit1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
WinWait(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[CLASS:#32770]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,10&lt;span&gt;)
ControlSetText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;另存为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Edit1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;G:\201801-\python_code\Demo\autoit\baidu1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Sleep(&lt;/span&gt;2000&lt;span&gt;)
ControlClick(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;另存为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Button2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重复编译操作，然后在Pyhton代码中实现如下，仅供参考：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标操作需要导入ActionChains类，因为鼠标操作的方法封装在该类中&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; selenium.webdriver.common.action_chains &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ActionChains
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; win32con
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; win32api

driver &lt;/span&gt;=&lt;span&gt; webdriver.Chrome()
driver.get(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
driver.maximize_window()
time.sleep(&lt;/span&gt;2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 鼠标右击操作，context_click()&lt;/span&gt;
context = driver.find_element_by_css_selector(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.index-logo-src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
ActionChains(driver).context_click(context).perform()
time.sleep(&lt;/span&gt;3&lt;span&gt;)
os.system(os.getcwd() &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\autoit\\test1.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
time.sleep(&lt;/span&gt;3&lt;span&gt;)
driver.quit()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行代码后，图片保存成功，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1242227/201809/1242227-20180923213158301-1799861320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上就是完整的将网页图片另存为的操作，上传/下载的操作一样，把另存为学会，其他两类也就迎刃而解了。&lt;/p&gt;
&lt;h3&gt;总结：&lt;/h3&gt;
&lt;p&gt;在琢磨模拟键盘操作时，有两个错误点，而导致编写的代码与脚本总是运行不成功，后面自己仔细查找原因，以及百度，终于是给解决了，所以故记录下，也好看看自己的进步过程。&lt;/p&gt;
&lt;h2&gt;问题一：&lt;/h2&gt;
&lt;p&gt;模拟按键操作，之前没选对操作方式，这是自己的Python基础薄弱，需要补充，后面找到win32api的方式，并找到键盘图，按键操作就完美解决。&lt;/p&gt;
&lt;h2&gt;问题二：&lt;/h2&gt;
&lt;p&gt;编写autoit的脚本，定位后，controlID没有拼接，而是直接写的Edit，Button，而导致代码调用脚本，但没执行操作，controlID即AutoItWindow Info识别出的Class和Instance的拼接， 如上图拼接后的结果应为：Button2，也就是ClassnameNN的值。&lt;/p&gt;
&lt;h2&gt;问题三：&lt;/h2&gt;
&lt;p&gt;在调用exe文件成功并执行操作后，还没点击保存按钮，浏览器就立马关闭了，后面一想，在调用exe文件后，加个延时就解决了，如果exe文件执行的内容多，延时需要长些，不然driver.quit()会很快关闭浏览器。&lt;/p&gt;
&lt;p&gt;好了，说了这么多，自己需要努力的还有很多，明天中秋，祝大家中秋节快乐啦！&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;23.41935483871&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;本文仅代表作者观点，系作者@温一壶清酒发表。转载请注明出处：&lt;a href=&quot;http://www.cnblogs.com/hong-fithing/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hong-fithing/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 23 Sep 2018 13:45:00 +0000</pubDate>
<dc:creator>温一壶清酒</dc:creator>
<og:description>前言 在web页面中，可以使用selenium的定位方式来识别元素，从而来实现页面中的自动化，但对于页面中弹出的文件选择框，selenium就实现不了了，所以就需引用AutoIt工具来实现。 Auto</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hong-fithing/p/9693865.html</dc:identifier>
</item>
<item>
<title>项目微管理31 - 方向 - 沙场秋点兵</title>
<link>http://www.cnblogs.com/dxy1982/p/9693553.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dxy1982/p/9693553.html</guid>
<description>&lt;p&gt;在四代经历的公司中，绩效考核基本都是一样的，每年年底搞一次，评定一下你的等级，按照分数发个奖金，涨个薪水，然后提一些空洞的需要提高的点，比如开会要多积极发表意见，比如性格更开朗一点，多参加一下团队的活动等等，然后结束。&lt;/p&gt;

&lt;p&gt;下一年呢？还是重复这个过程。基本上算的是：外甥打灯笼-照旧（舅）。&lt;/p&gt;

&lt;div&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923202038884-807971331.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;绩效不完全等同于考核&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;对这里面的学问，四代其实也不懂，只不过当他重新审视了惊喜和期望的关系后，觉的至少在绩效考核这个方面，所有人都应该有个期许。&lt;/p&gt;

&lt;p&gt;于是四代决定要从头开始打造红细胞团队的绩效考核流程，对于管理知识处于一穷二白状态的四代来说，恶补一下是必须的。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923202252300-850950535.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;在四代的知识体系中，做一件事首先要做的就是搞懂做这件事的目的，于是在接受了大量文章的再教育后，四代发现了自己对于绩效考核确实一直存在一种片面的理解：绩效考核是为了给员工一个定位，然后进行利益分配。&lt;/p&gt;

&lt;p&gt;这确实是绩效考核的目的不假，不过这却不是唯一的目的，而且不是最主要的目的。&lt;/p&gt;

&lt;p&gt;那么绩效考核最主要的目的是什么呢？&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923202600905-911930035.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代认为：&lt;span&gt;&lt;strong&gt;绩效考核最主要的目的是为团队中所有人指出努力的方向，然后第二重作用才是考察一定阶段内一个人的努力结果&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;呃，对于指标派来说，第一个作用还好说，可以说那些指标既是考核的数据，也是努力的方向，那对于印象派来说，指向作用体现在哪呢？&lt;/p&gt;

&lt;p&gt;要了解这个问题的答案，就要先说到一个炙手可热的概念：&lt;strong&gt;目标管理&lt;/strong&gt;，和一对争论良久的欢喜冤家：&lt;strong&gt;OKR与KPI&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;目标管理当然关注的是目标&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;“目标管理”的概念是管理专家彼得·德鲁克（Peter Drucker）1954年在其名著《管理实践》 中最先提出的。&lt;/p&gt;

&lt;p&gt;德鲁克认为，并不是有了工作才有目标，而是相反，有了目标才能确定每个人的工作。所以“企业的使命和任务，必须转化为目标”，如果一个领域没有目标，这个领域的工作必然被忽视。因此管理者应该通过目标对下级进行管理，当组织最高层管理者确定了组织目标后，必须对其进行有效分解，转变成各个部门以及各个人的分目标，管理者根据分目标的完成情况对下级进行考核、评价和奖惩。&lt;/p&gt;

&lt;p&gt;目标管理的具体形式各种各样，但其基本内容是一样的。&lt;/p&gt;

&lt;p&gt;所谓目标管理乃是一种程序或过程，它使组织中的上级和下级一起协商，根据组织的使命确定一定时期内组织的总目标，由此决定上、下级的责任和分目标，并把这些目标作为组织经营、评估和奖励每个单位和个人贡献的标准。&lt;/p&gt;

&lt;p&gt;说的直白一点，目标管理就是大家一起制定目标，实施目标和考核目标。&lt;/p&gt;

&lt;div&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923202710092-506937220.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;从上面的描述，四代看到，通常所说的绩效考核其实也是目标管理的一个重要组成部分。&lt;/p&gt;

&lt;p&gt;而根据目标制定的形式不同，目标管理就表现为不同的方式，比如我们这里说的OKR与KPI。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;KPI不完全论述&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;KPI全称是Key Performance Indicator，也就是关键绩效指标。&lt;/p&gt;

&lt;p&gt;KPI是通过对组织内部流程的输入端、输出端的关键参数进行设置、取样、计算、分析，衡量流程绩效的一种目标式量化管理指标，是把企业的战略目标分解为可操作的工作目标的工具，是企业绩效管理的基础。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923202944510-182252539.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;KPI可以使部门主管明确部门的主要责任，并以此为基础，明确部门人员的业绩衡量指标。建立明确的切实可行的KPI体系，是做好绩效管理的关键。关键绩效指标是用于衡量工作人员工作绩效表现的量化指标，是绩效计划的重要组成部分。&lt;/p&gt;

&lt;p&gt;KPI法符合一个重要的管理原理--“二八原理”。在一个企业的价值创造过程中，存在着“80/20”的规律，即20%的骨干人员创造企业80%的价值；而且在每一位员工身上“八二原理”同样适用，即 80%的工作任务是由20%的关键行为完成的。因此，必须抓住20%的关键行为，对之进行分析和衡量，这样就能抓住业绩评价的重心。&lt;/p&gt;

&lt;p&gt;作为最常用的绩效管理工具，KPI-关键绩效指标已盛行多年。&lt;/p&gt;

&lt;p&gt;在企业进入“预算季”时，公司的中高层常常进入痛苦的拉锯战。把战略目标逐层分解为可以量化衡量的绩效指标，跟员工的薪资和奖金挂钩，似乎已成为天经地义的管理动作。往往是中层先把“保守”的数字报上去，高层再把“夸张”的数字压下来，如此往复几次，方能勉强达成协议，一晃两三个月就过去了。&lt;/p&gt;

&lt;p&gt;讽刺的是，前一个“预算季”刚过去，干活还没干多久，下一个“预算季”又开始了，于是不少人感慨：预算把人整得如此之忙，以至于都没有时间干活了！&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923203130068-1573738809.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;在这个剧烈变化的时代，KPI还面临一出台就过时的尴尬。&lt;/p&gt;

&lt;p&gt;万科总裁郁亮说，别乱扯什么战略，谁还能预见几年以后的事情。传统基于三年甚至五年战略规划倒推回来的那些KPI，到了年底就发现要么过低，要么过高。管理层两头不讨好，过低说你计划时太保守，过高下一年更高的KPI又会把你逼死。&lt;/p&gt;

&lt;p&gt;此外，KPI目标明确，对于传统的制造业、实业，或者互联网企业某些岗位来说，比如客服、销售来说，可操作性是非常高的，但是对于程序员、工程师这种智力高度集中的行业来说，缺点就非常明显了。因为这些职位核心的竞争力是智力的密集输出，这个东西是无法量化的，所以关键指标非常难界定。&lt;/p&gt;

&lt;p&gt;比如前面说的代码的各项指标，即使你可以数出代码的行数，可是你能数出代码的质量吗？即使你能数出Bug的数量，可是你能数出软件的质量吗？即使你能数出完成的功能数目，可是你能数出他们对用户的体验吗？这里就更别说什么价值观了。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923203335619-1743550095.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;四代知道，程序员、工程师都是聪明人，会造假的，你需要什么，他们就表面上给你什么！这就是人们应对考核的通常做法，KPI把员工和管理层的关系变成了彻底的博弈关系。你考核什么，他们就重点干什么，而且他们总能“钻研”出更省力的办法做出你要的数字。比如你要考核客户投诉率，他们就想方设法不让客户投诉，或少报投诉。&lt;/p&gt;

&lt;p&gt;这场“猫捉老鼠”的游戏永远没有尽头，而且，一天到晚窝在办公室开会的“领导们”绝对没有实际干活儿的员工们聪明，也就是说，猫一定比老鼠笨。&lt;/p&gt;

&lt;p&gt;针对程序员这样特殊的情况，许多公司的精英们都进行了大量的尝试，他们薅掉了脑袋上为数不多的几根毛都找不到合适的方法，实在没办法，那就按事实说话吧，于是在上个世纪的某一天，Intel的某位仁兄搞出了前面所说的360反馈的考核方法，按照目标管理的过程，这其实是最后一步。&lt;/p&gt;

&lt;p&gt;那么目标管理前面的那些步骤是怎么实施的呢？也有相应的方法，这个方法就是OKR，总的来说，“&lt;strong&gt;&lt;span&gt;OKR+360反馈&lt;/span&gt;&lt;/strong&gt;”就构成了印象派完整的目标管理体系：&lt;strong&gt;OKR完成目标规划，360反馈完成绩效考核&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;OKR不完全论述&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;OKRs全称是Objectives &amp;amp; Key Results，即目标与关键成果。Objective 可以理解为企业目标，Key Results 可以理解为关键结果。浓缩在一起就是“为确保达成企业目标的关键结果分解与实施”。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923203736257-57367338.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;OKRs是一套目标沟通、制定、展示和回顾的流程。它一般以季度为单位，对目标进行管理。&lt;/p&gt;

&lt;p&gt;例如以年度第一个季度Q1为例，具体流程一般如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;1. 每年11月，集思广益，制定下一年以及Q1的目标，然后分系统，分部门内部分享、沟通；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;2. 每年12月，在公司层面沟通并确定下一年及Q1目标，然后员工结合组织的目标，起草个人的目标；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3. 下年1月初，在公司、团队不同层级会议上，团队和个人展示各自设定的目标；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;4. 1月-3月，目标实施和监控；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;5. 3月底，为目标打分并且沟通，同时重复上述过程设定第二季度目标。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923204011746-1122662609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;实施OKRs有一些注意事项，四代把它们与传统的以KPI为代表的绩效管理方式进行了对比：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;OKRs要可量化                                                                   &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这与KPI要求没什么不同。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;OKRs中，最多5个O，每个O最多4个KRs                         &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这与KPI要求也一致，只不过KPI一般可以5-8个。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;公司、团队、个人都有自己的OKRs，而且必须达成一致  &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这与传统KPI类似。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;OKRs每季度都打分，并且公示                                          &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这与传统KPI类似。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;OKRs要是有野心的，有一些挑战的，有些让你不舒服的（按照谷歌的说法，Achieving 65% of the impossible is better than 100% of the ordinary）。正常完成时，以0~1.0分值计分，分数0.6-0.7是比较合适（这被称为“sweet spot”）；如果分数低于0.4，你就该思考，那个项目究竟是不是应该继续进行下去。要注意，0.4以下并不意味着失败，而是明确什么东西不重要及发现问题的方式。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这与KPI要求“跳一跳够得着”看似类似，然而更鼓励设置挑战性目标。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;每个人的OKRs在全公司都是公开透明的                          &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这一点较传统的KPI操作走得更远，传统上，很多企业能够公示考核结果就已经不错了。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;60%的O最初来源于底层                                                   &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这不同于传统KPI操作方式。传统上，我们用KPI“解码”公司战略，更多的是一个自上而下的过程（虽然过程中也会强调自上而下、自下而上的双向沟通）。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;OKRs结果不用于考核                                                       &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;—— 这明显违背了我们传统的“绩效管理”理念。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;被动？主动？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;从上面这些对比可以看出来，相对于传统的KPI方式，OKRs将工作重心从“考核”回归到了“管理”。&lt;/p&gt;

&lt;div&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923204031436-933965359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;以前绩效管理整天围绕着“考核”转，离数字、公式很近，离目标、管理很远；OKRs摇身一变，把大家的目光转移到了真正重要的事情上来：&lt;/p&gt;

&lt;p&gt;1）对于员工而已，OKRs化被动为主动，让员工敢想、敢干。&lt;/p&gt;

&lt;p&gt;以前的操作方式，由于直接涉及到利益，目标设定变成上下级斗智斗勇、尔虞我诈的谈判过程，员工有想法也不一定提。剥离了直接利益因素之后，员工只要认为有利于公司的发展与自身的发展，就会“敢为人先”。&lt;/p&gt;

&lt;p&gt;没有利益纠结的目标管理，反而更能激发员工积极创见和参与。&lt;/p&gt;

&lt;div&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/109061/201809/109061-20180923205908430-513813033.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;2）对于企业目标而言，OKRs化单向发送为主动链接，加强了企业目标的牵引效果。&lt;/p&gt;

&lt;p&gt;通过目标公开、透明管理，让员工的思想和步伐跟得上公司、团队目标。一旦目标公示，在群众的火眼金睛下，哪个员工会消极怠工呢？&lt;/p&gt;

&lt;p&gt;这也为后面的360考核提供了良好的基础。一个人表现如何，直接上级、同事一定看得清清楚楚，把本来就应该他们做得事情还给他们——同级也好、上级也罢，只要评价要求说得明白、评估有依据，总能比较客观的反应实际的。&lt;/p&gt;

&lt;p&gt;不管是采用哪种方式，目标管理都有一个设定目标的过程，这个过程特别需要注意一件事，会是什么呢？&lt;/p&gt;

</description>
<pubDate>Sun, 23 Sep 2018 13:16:00 +0000</pubDate>
<dc:creator>沙场秋点兵</dc:creator>
<og:description>目标管理那些事</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dxy1982/p/9693553.html</dc:identifier>
</item>
<item>
<title>程序员枪击事件引发的背后思考 - 挑战者V</title>
<link>http://www.cnblogs.com/youcong/p/9693616.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youcong/p/9693616.html</guid>
<description>&lt;p&gt;程序员枪击事件在我所关注的知识分享公众号和技术群方面传播的比较广。&lt;/p&gt;
&lt;p&gt;针对该事件我要谈谈我的看法。&lt;/p&gt;

&lt;p&gt;针对该公众号所说的，因注释不写、代码排版差、非驼峰命名和天天git push -f导致该程序员枪击自己的四位同事。&lt;/p&gt;
&lt;p&gt;我个人有如下想法，并列出对应的角度分析。&lt;/p&gt;
&lt;p&gt;从开发角度看:&lt;/p&gt;
&lt;p&gt;注释不写、代码排版差和非驼峰命名的确会导致代码的可维护性差，因为其他同事有的时候根据业务的需求，需要改动你的代码，如果你的代码是这样的，那么就会导致需要改动你代码的同事难以理解你的代码逻辑，从而增加时间成本，也许那一天都在梳理你的代码思路，并打断点debug逆向推导。&lt;/p&gt;
&lt;p&gt;另外我个人也觉得，一家软件公司如果是初创公司，一般都会招有经验的开发者，而那些有经验的开发者们，一般像注释、排版、驼峰命名都会注重的。当然了，由于每个人对业务的理解不一样，导致编写的代码行数也不一样，过长，比如一大堆if-else之类的，反而会降低可读性，过短的话，根据实际情况定，如果像一些逻辑验证判断(比如账户验证之类的，那么该长还是要长的)，还是要的。另外，像初创公司一般情况下，至少会有一个经验丰富的项目经理和项目组长，项目经理一般都会要求项目组长制定开发计划，比如同有关人员商议讨论，编写可行性方案文档，如果该文档由项目经理确定后没问题，下面进入需求分析、概要设计、详细设计、编码、测试、上线。这一个过程就是有名的瀑布模型。现在比较流行的是敏捷开发，敏捷开发总的来说与瀑布模型还是有相同点的，只不过驱动开发的方式不同，比如原型驱动开发(做一个静态模板原型给客户看，客户觉得没问题正是他想要的这样，那么就可以继续开发下去，通常情况下，这种方式的好处是客户基本都能满意，就算不满意的话，成本相对于瀑布模型而言低的多。&lt;/p&gt;

&lt;p&gt;从人际交往的角度看:&lt;/p&gt;
&lt;p&gt;假如是我，如果经常git push -f强制将本地代码提交到远程，那么一定会有同事会说，为什么我之前写的功能没有了，昨天是谁提交的，对于经常性git push -f的人，同事也不是傻子，直接会提醒你不要这么做，会告诉你正常的流程应该是当自己该分支对应的功能开发完毕时，将要提交代码，首先提交到本地仓库 并git merge远程主分支解决对应的冲突，当冲突解决完毕时，再git push 远程仓库master主分支，这是正常流程。如果这位人士真的这么干，那么对于他而言，他将会受到团队的排挤，身处团队不为其他人着想，那么对于他而言，上班将会成为一个地狱，同事的冷眼和领导的批评，最终他的结局将会被开除。&lt;/p&gt;
&lt;p&gt;当然了，如果这位人士心理不平衡的话，的确可能会导致他将自己的不快发泄到其他人身上，从而可能引发某种暴力行为。&lt;/p&gt;

&lt;p&gt;从团队协作的角度看:&lt;/p&gt;
&lt;p&gt;此前我在该篇文章&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/youcong/p/9683054.html&quot;&gt;谈谈运维人员谨慎操作系统环境和管理&lt;/a&gt;说过，开发的要懂测试和运维，测试的要懂开发和运维，运维要懂开发和测试等，彼此都要熟悉彼此的领域和分工，因为这样会提高整个团队的协作能力。当然了，像产品经理对于开发、测试、运维都多少熟悉和了解，那么实际提需求的时候，彼此换位思考也能降低不少开发成本。但是，往往做不到这样，这也是一个公司里，运维时常沦为背锅户，测试说开发，开发说测试，产品说测试，测试说开发，产品说开发等等，最后可能会出现内部斗争，内部斗争势必会造成团队里部分人会因此受到伤害，一切在于协作，再细分，在于沟通。沟通很重要。良好的沟通，利于良好的协作，良好的协作利于项目开发的良性循环。&lt;/p&gt;

&lt;p&gt;从团队领袖的角度看:&lt;/p&gt;
&lt;p&gt;通常一般团队的主要负责人是项目经理，然后再是对应的开发组组长。这里我要说说开发组组长，开发组组长的职责不仅仅是项目使用技术的把关，功能模块分配，文档编写，帮助其成员梳理需求并理解需求和其他开发小组对应的负责人共同商议制定良好的开发规范，还有对团队成员必须要熟悉，这个熟悉不单单等同认识，包括编写代码的风格、技术能力、思考问题的方式还有就是性格等，都要了解。有的时候团队的某个成员图痛快，改其他同事的代码，丝毫不与人家沟通，从而提交到线上，导致影响到该同事的正常功能，从而造成不必要的bug,这时测试人员就会提醒开发人员，而开发人员性格一般比较犟，自己已经写好并在之前测试好的功能突然就不行了，这时可能会与测试人员争论一番或者是开发人员之间开始吵架，作为开发组组长而言，这时一定要公平公正耐心的处理好。否则，一旦愤怒不平的种子埋在心里，将会因为生活中的一点小事导致冲突，这种冲突时常表现的形式就是口头冲突，这种口头冲突时常会转化为暴力行为。这也是为什么这个社会犯罪率上升的原因之一。&lt;/p&gt;

&lt;p&gt; 小结:&lt;/p&gt;
&lt;p&gt;上述列出的四个角度，从开发、人际、团队协作到团队领袖等，有些是本人的亲身体会，有些来自同学们的亲身经历，当然了，还有些来自平时的阅读感触。&lt;/p&gt;
&lt;p&gt;希望能给大家带来帮助。&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 13:01:00 +0000</pubDate>
<dc:creator>挑战者V</dc:creator>
<og:description>程序员枪击事件在我所关注的知识分享公众号和技术群方面传播的比较广。 针对该事件我要谈谈我的看法。 针对该公众号所说的，因注释不写、代码排版差、非驼峰命名和天天git push -f导致该程序员枪击自己</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youcong/p/9693616.html</dc:identifier>
</item>
<item>
<title>ASP.Net Core2.1中的HttpClientFactory系列二：集成Polly处理瞬态故障 - 菠萝吹雪—Code</title>
<link>http://www.cnblogs.com/runningsmallguo/p/9692001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/runningsmallguo/p/9692001.html</guid>
<description>
&lt;p&gt;　　前言：最近，同事在工作中遇到了使用HttpClient,有些请求超时的问题，辅导员让我下去调研一下，HttpClinet的使用方式已经改成了之前博客中提到的方式，问题的原因我已经找到了，就是因为使用了伪异步，导致阻塞主线程。在之前的博客中有园友，建议在使用静态的HttpClinet时务必使用它的Async方法，所以就得从头到尾异步化。这一点在之前的文章中没有提，这里作为补充，也感谢这位园友。关于怎么使用异步编程，在这里我就不聊了，大家可以看看其他的博客，看完公司的代码之后，我想强调的是，在使用异步编程的时候，关于返回值的问题：&lt;/p&gt;
&lt;p&gt;为什么async方法返回的通常都是Task或者Task&amp;lt;T&amp;gt;，而不是T本身？这是因为，Task和Task&amp;lt;T&amp;gt;代表着在将来某一个时刻将会返回T类型的结果。因此，在主线程调用HttpPostWhitStrBody时，实际上你拿到的是一个未来才会发生的预期，也就是未来的某一个时间会得到一个string的结果。如果返回的是一个T本身，那么，在主线程调用时就会因为访问这个需要一段时间才能给出结果，从而阻塞了主线程。因此，如果async方法有返回值，应返回Task&amp;lt;T&amp;gt;。如果没有返回值，应该返回Task。大家如果不太明白的话，建议多了解一下C#中的异步编程。好了，前戏太多了，下面就来聊聊如何集成Polly。&lt;/p&gt;


&lt;p&gt;在聊如何集成Polly前，我们先来看看在异步编程中如何处理异常。当异步操作发生异常的时候，异常会停留在异步方法中，调用方法无法直接看到，因此，我们应该异步方法中处理异常，而不是在调用方法中处理异常。如果我们使用了await修饰了任务，那么，只需要为它包上一层try-catch就可以了。当然了，也可以在调用方法（比如Main方法中）捕捉异常，这就需要异常从异步方法中传播给调用方法。做到这件事是很容易的，只需要两个条件：&lt;/p&gt;
&lt;p&gt;（1）调用方法本身也是async的，并且，在内部调用异步方法，并使用await。&lt;/p&gt;
&lt;p&gt;（2）异步方法返回Task或者Task&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;p&gt;因为C#不允许在Main方法中使用async（在C#7.1中，可以使用async修饰Main方法了），因此，我们不得不再创建一层方法，下面通过代码演示一下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3cb7d18c-bcc8-4ad0-88f6-7bb1ddfd7be3')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3cb7d18c-bcc8-4ad0-88f6-7bb1ddfd7be3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3cb7d18c-bcc8-4ad0-88f6-7bb1ddfd7be3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3cb7d18c-bcc8-4ad0-88f6-7bb1ddfd7be3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3cb7d18c-bcc8-4ad0-88f6-7bb1ddfd7be3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp3
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {

            Caller();


            Console.ReadKey();
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Caller()
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; UseAsync(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (AggregateException e)
            {

                Console.WriteLine(e.Message);
            }
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; UseAsync(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; number)
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;异步方法运行：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt; Thread.CurrentThread.ManagedThreadId);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ret = &lt;span&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;&lt;span&gt; IsPrimeLowAsync(number));

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
        }


        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsPrimeLowAsync(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; number)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (number &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AggregateException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入必须大于0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (number == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; number; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (number % i == &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;一般在处理异常的时候，我们都是采用 try-catch来做处理的，若我们想重试三次，此时我们只能进行循环三次操作。我们只能简单进行处理，自从有了Polly，什么重试机制，超时都不在话下，下面把话题转向Polly。&lt;/p&gt;
&lt;p&gt;在聊下面的话题时，建议大家先认真阅读一下这篇博客，因为博主讲的非常细致：&lt;a href=&quot;https://www.cnblogs.com/CreateMyself/p/7589397.html&quot; target=&quot;_blank&quot;&gt;Polly&lt;/a&gt;&lt;/p&gt;


&lt;p&gt; 　　Polly是一种流行的瞬态故障处理库，它提供了一种机制来定义可在某些故障发生时应用的策略。 最常用的策略之一就是重试策略。 这中策略允许您包装一些代码，如果发生故障，将重试这些代码; 必要时也可以重试多次。 这在您的应用程序需要与外部服务通信的情况下非常有用。 当通过HTTP与服务进行通信时，会出现瞬态故障，这种风险始终存在。 瞬态故障可能会阻碍您的请求完成，但是瞬态故障也可能是暂时性的问题。因此， 这使得在这些情况下重试成为明智的选择。&lt;/p&gt;
&lt;p&gt; 　　除了重试之外，Polly还提供了许多其他类型的策略，其中许多策略可能需要与重试相结合，以构建处理故障的复杂方法。 我将在本文中介绍一些更一般的例子，但是如果你想要更全面的了解，我建议你查看一下&lt;a href=&quot;https://github.com/App-vNext/Polly/wiki&quot; target=&quot;_blank&quot;&gt;Polly wiki&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　使用Polly&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　ASP.NET团队与Polly的主要维护者Dylan和Joel密切合作，使得将Polly策略应用于HttpClient实例非常简单。在开始之前我们先引用下面的两个包：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/896449/201809/896449-20180923171032834-886220326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　这个Microsoft.Extensions.Http.Polly包在IHttpClientBuilder上包含一个名为AddPolicyHandler的扩展方法，我们可以使用它来添加一个handler ，该handler 将使用一个Polly实例，来包装请求。 &lt;/p&gt;
&lt;p&gt;　　我们可以用这个扩展在我们的ConfigureServices 方法中，代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 services.AddHttpClient(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  .AddPolicyHandler(Policy.TimeoutAsync&lt;/span&gt;&amp;lt;HttpResponseMessage&amp;gt;(TimeSpan.FromSeconds(&lt;span&gt;10&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　在这个例子中，我们定义了一个名字为“github”的客户端，并且我们使用AddPolicyHandler 方法来添加了一种处理超时的策略，这里提供的超时策略，必须是IAsyncPolicy&amp;lt;HttpResponseMessage&amp;gt;，这个中策略在任何请求超过10s都会触发。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 　　重试策略&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　如果可能的话，当我们在使用Polly时，最好的尝试是，定义一次策略并在应用相同策略的情况下共享它们，这样要更改策略，只需在一个位置进行更改。此外，它还确保仅分配策略一次。当然了，如果多个使用者希望通过相同的断路器实例运行，则需要共享诸如断路器之类的策略。不太理解，不要紧，下面看代码，体会一下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; retryPolicy = Policy.TimeoutAsync&amp;lt;HttpResponseMessage&amp;gt;(TimeSpan.FromSeconds(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;));

services.AddHttpClient(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  .AddPolicyHandler(retryPolicy);

services.AddHttpClient(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;google&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  .AddPolicyHandler(retryPolicy);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;　　瞬时错误处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理HTTP请求时，我们要处理的最常的问题就是瞬态故障。 由于这是一个常见的要求，Microsoft.Extensions.Http.Polly软件包中包含一个特定的扩展，我们可以使用它来快速设置处理瞬时故障的策略。&lt;/p&gt;
&lt;p&gt;例如，要在指定客户端的请求发生瞬时故障时添加基本重试，我们可以按如下方式注册重试策略：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
services.AddHttpClient(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  .AddTransientHttpErrorPolicy(p &lt;/span&gt;=&amp;gt; p.RetryAsync(&lt;span&gt;3&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;代码的含义是，所以使用命名的HttpClient，发出的请求，只要遇到错误，就会重试三次。这个&lt;strong&gt;AddTransientHttpErrorPolicy&lt;/strong&gt; 方法需要一个&lt;strong&gt;Func&amp;lt;PolicyBuilder&amp;lt;HttpResponseMessage&amp;gt;, IAsyncPolicy&amp;lt;HttpResponseMessage&amp;gt;&amp;gt;&lt;/strong&gt;.类型的参数。此处的PolicyBuilder将预先配置为处理HttpRequestExceptions，任何返回5xx状态代码的响应以及具有408（请求超时）状态代码的任何响应。 这应该适用于许多情况。 如果您要求在其他条件下应用策略，则需要使用不同的重载来传递更具体的策略。&lt;/p&gt;
&lt;p&gt;　　我们需要意识到， 在进行重试时，我们需要考虑幂等性。 重试HTTP GET是一种非常安全的操作。因为HTTP GET本身就是幂等性的， 如果我们调用一个方法但没有收到任何响应，我们可以安全地重试调用而不会有任何危险。 但是，请考虑如果我们重试HTTP POST请求会发生什么？ 在这种情况下，我们必须更加小心，因为您的原始请求可能实际收到，但我们收到的响应却显示失败。 在这种情况下，重试可能导致数据重复或下游系统中存储的数据损坏。 在这里，您需要更多地了解下游服务在多次收到相同请求时将执行的操作。 重试是一种安全操作？ 当您拥有下游服务时，更容易控制它。 例如，您可以使用一些唯一标识符来防止重复的POST。&lt;/p&gt;
&lt;p&gt;　　如果您对下游系统的控制较少，或者您知道重复的POST可能会产生负面影响，则需要更仔细地控制策略。 可能适合的做法是定义不同的命名/类型客户端。 您可以为那些没有副作用的请求创建一个，而为那些有副作用的请求创建另一个。 然后，您可以使用正确的客户端进行操作。 但是，这可能会变得有点难以管理。 更好的选择是使用AddPolicyHandler的重载，它允许我们访问HttpRequestMessage，以便可以有条件地应用策略。 那个重载看起来像这样：&lt;strong&gt;AddPolicyHandler(Func&amp;lt;HttpRequestMessage, IAsyncPolicy&amp;lt;HttpResponseMessage&amp;gt;&amp;gt; policySelector)，您将注意到此处的policySelector委托可以访问HttpRequestMessage，并且应该返回IAsyncPolicy &amp;lt;HttpResponseMessage&amp;gt;。 我们无法访问PolicyBuilder设置来处理瞬态错误，就像我们在前面的示例中所做的那样。 如果我们想要处理常见的瞬态错误，我们需要为我们的策略定义预期条件。 为了简化这一过程，Polly项目包含一个帮助扩展，我们可以使用它来设置一个准备好处理常见瞬态错误的PolicyBuilder。 要使用扩展方法，我们需要从Nuget添加Polly.Extensions.Http包。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　然后，我们可以调用HttpPolicyExtensions.HandleTranisentHttpError（）来获取配置瞬态故障条件的PolicyBuilder。 我们可以使用该PolicyBuilder创建一个合适的重试策略，当请求是HTTP GET时，可以有条件地应用该策略。 在此示例中，任何其他HTTP方法都使用NoOp策略。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; retryPolicy =&lt;span&gt; HttpPolicyExtensions
  .HandleTransientHttpError()
  .RetryAsync(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; noOp = Policy.NoOpAsync().AsAsyncPolicy&amp;lt;HttpResponseMessage&amp;gt;&lt;span&gt;();

services.AddHttpClient(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  .AddPolicyHandler(request &lt;/span&gt;=&amp;gt; request.Method == HttpMethod.Get ? retryPolicy : noOp);
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;　　使用PolicyRegistry&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　我想在本文中介绍的最后一个示例是如何从策略注册表中应用策略。 为了支持策略重用，Polly提供了PolicyRegistry的概念，PolicyRegistry本质上是策略的容器。 这些可以在应用程序启动时通过向注册表添加策略来定义。 然后可以传递注册表并用于按名称访问策略。IHttpClientBuilder上可用的扩展还支持使用注册表将基于Polly的处理程序添加到客户端。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; registry =&lt;span&gt; services.AddPolicyRegistry();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; timeout = Policy.TimeoutAsync&amp;lt;HttpResponseMessage&amp;gt;(TimeSpan.FromSeconds(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; longTimeout = Policy.TimeoutAsync&amp;lt;HttpResponseMessage&amp;gt;(TimeSpan.FromSeconds(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;));

registry.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;regular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, timeout);
registry.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, longTimeout);

services.AddHttpClient(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    .AddPolicyHandlerFromRegistry(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;regular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先，我们必须在DI中注册PolicyRegistry。 Microsoft.Extensions.Http.Polly包中包含一些扩展方法，以简化此操作。 在上面的示例中，我调用AddPolicyRegistry方法，该方法是IServiceCollection的扩展。 这将创建一个新的PolicyRegistry，并在DI中添加注册，作为IPolicyRegistry &amp;lt;string&amp;gt;和IReadOnlyPolicyRegistry &amp;lt;string&amp;gt;的实现。 该方法返回策略，以便我们有权向其添加策略。&lt;/p&gt;
&lt;p&gt; 在此示例中，我们添加了两个超时策略并为其指定了名称。 现在，在注册客户端时，我们可以调用IHttpClientBuilder上的AddPolicyHandlerFromRegistry方法。 这将采用我们想要使用的策略的名称。 当工厂创建此命名客户端的实例时，它将添加适当的处理程序，在“regular”重试策略中包含调用，该策略将从注册表中检索。&lt;/p&gt;

&lt;p&gt;示例项目：新建一个.Net Core 2.1的webapi项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/896449/201809/896449-20180923190752853-1380134398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Startup.cs文件的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {



            services.AddHttpClient(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, client =&amp;gt;&lt;span&gt;
            {
                client.BaseAddress &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Uri(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://api.github.co&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                client.DefaultRequestHeaders.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/vnd.github.v3+json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                client.DefaultRequestHeaders.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HttpClientFactory-Sample&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            })
          .AddTransientHttpErrorPolicy(builder &lt;/span&gt;=&amp;gt; builder.WaitAndRetryAsync(&lt;span&gt;new&lt;/span&gt;&lt;span&gt;[]
          {
            TimeSpan.FromSeconds(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
            TimeSpan.FromSeconds(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;),
            TimeSpan.FromSeconds(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
          }));


            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;pre&gt;
WaitAndRetryAsync参数的意思是：每次重试时等待的睡眠持续时间。
&lt;/pre&gt;
&lt;p&gt;ValuesController的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IHttpClientFactory _httpClientFactory;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValuesController(IHttpClientFactory   httpClientFactory)
        {
            _httpClientFactory &lt;/span&gt;=&lt;span&gt; httpClientFactory;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET api/values&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;  Task&amp;lt;ActionResult&amp;gt;&lt;span&gt; Get()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = _httpClientFactory.CreateClient(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt; client.GetStringAsync(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok(result);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/896449/201809/896449-20180923204347758-1366586988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到没，它在重试。&lt;/p&gt;
&lt;p&gt;  更多的Polly和HttpClinetFactory的集成使用请参考：&lt;/p&gt;
&lt;p&gt;https://github.com/App-vNext/Polly/wiki/Polly-and-HttpClientFactory&lt;/p&gt;
&lt;p&gt;https://www.hanselman.com/blog/AddingResilienceAndTransientFaultHandlingToYourNETCoreHttpClientWithPolly.aspx&lt;/p&gt;


&lt;p&gt;　　注意：AddTransientHttpErrorPolicy方法会自动帮我们处理以下错误：&lt;/p&gt;
&lt;p&gt;　　（1）Network failures (System.Net.Http.HttpRequestException)&lt;/p&gt;
&lt;p&gt;　　（2）HTTP 5XX status codes (server errors)&lt;/p&gt;
&lt;p&gt;　　（3）HTTP 408 status code (request timeout)&lt;/p&gt;

&lt;p&gt;　　通过这些库，您可以轻松地启动并运行能够无缝处理瞬态故障的HttpClient实例。 有关更详细的Polly文档和示例，建议您查看Polly wiki。这里只是聊了关于HttpClientFactory中集成Polly的基础用法，关于更详细的使用请参考：https://www.cnblogs.com/CreateMyself/p/7589397.html，好了今天就聊到这里，该系列文章还有最后一篇，对于Polly我也是刚接触，至于项目中是否使用还要经过辅导员的审核，希望对你有帮助，谢谢。&lt;/p&gt;


&lt;p&gt; 参考文章：&lt;/p&gt;
&lt;p&gt;（翻译）https://www.stevejgordon.co.uk/httpclientfactory-using-polly-for-transient-fault-handling&lt;/p&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;作者：郭峥&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;出处：http://www.cnblogs.com/runningsmallguo/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 23 Sep 2018 12:56:00 +0000</pubDate>
<dc:creator>菠萝吹雪—Code</dc:creator>
<og:description>前言：最近，同事在工作中遇到了使用HttpClient,有些请求超时的问题，辅导员让我下去调研一下，HttpClinet的使用方式已经改成了之前博客中提到的方式，问题的原因我已经找到了，就是因为使用了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/runningsmallguo/p/9692001.html</dc:identifier>
</item>
<item>
<title>JDK1.8简单配置环境变量---两步曲 - 虚若无我</title>
<link>http://www.cnblogs.com/wang-xuan/p/9693739.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wang-xuan/p/9693739.html</guid>
<description>&lt;p&gt;鄙人最近重新装完系统之后，在安装和配置jdk1.8的时候，发现网上许多教程配置jdk环境变量时都还在沿用传统的方式配置，但是随着技术的更新，完全没有必要那么麻烦了。&lt;/p&gt;
&lt;p&gt;下载和安装jdk的教程，在这里就不详细叙述了，网上有好多教程。但是对于新手可能会在安装过程中弹出两次选择安装目录感到迷茫，敝人在这里强调说明下：第一弹出的安装目录是jdk的安装目录，第二次弹出的安装目录是jre的安装目录；两者的具体区别相信各位学习Java的小伙伴都很清楚了（不清楚的伙伴们可以留言哦）！&lt;/p&gt;
&lt;p&gt;下面就是敝人的安装目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421529/201809/1421529-20180923202504945-377236408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装完以后就是大家期待的配置环境变量啦！&lt;/p&gt;
&lt;p&gt;两部曲：&lt;/p&gt;
&lt;p&gt;第一步：&lt;/p&gt;
&lt;p&gt;小伙伴们都应该知道如何配置环境变量吧，预防新手迷茫，鄙人再啰嗦一下：&lt;/p&gt;
&lt;p&gt;“我的电脑”---》右击选择“属性”--》高级系统设置---》环境变量---》新建环境变量&lt;/p&gt;
&lt;p&gt;相同的方式配置JAVA_HOME:自己jdk的安装目录，鄙人的是F:\Java\jdk1.8.0_181 如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421529/201809/1421529-20180923203414626-1409458982.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来和传统的方式一样配置path:%JAVA_HOME%\bin&lt;/p&gt;
&lt;p&gt;注意：要与前面的环境变量进行分割，使用英文下的分号，否则会配置不成功；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421529/201809/1421529-20180923203722792-612947337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此就可以结束了！！！&lt;/p&gt;
&lt;p&gt;不需要在配置jre,CLASS_PATH了，是不是很简单，以后再配置环境变量的时候再也不会担心出错了，也不许百度了哦，简单轻松操作！&lt;/p&gt;
&lt;p&gt;可能会小伙伴们怀疑他是否配置成功呢？？？&lt;/p&gt;
&lt;p&gt;下面验证一下：&lt;/p&gt;
&lt;p&gt;打开cmd操作：输入命令：javac验证是否成功？结果肯定成功啊。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421529/201809/1421529-20180923204450199-286443200.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;刚开始的鄙人也有些担心会出错，所以专门使用命令行操作写了一个简单的程序验证！&lt;/p&gt;
&lt;p&gt;新建一个Hello.java文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421529/201809/1421529-20180923204953183-536341768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入java Hello.java会生成字节码文件.class&lt;/p&gt;
&lt;p&gt;成功输出结果，所以没有任何的错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1421529/201809/1421529-20180923205140651-232937341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果小伙伴们也认为简单的话，希望分享给更多的小伙伴们，尤其是新手哈 ，防止在安装和配置jdk环境变量的时候出错哦！&lt;/p&gt;

</description>
<pubDate>Sun, 23 Sep 2018 12:55:00 +0000</pubDate>
<dc:creator>虚若无我</dc:creator>
<og:description>鄙人最近重新装完系统之后，在安装和配置jdk1.8的时候，发现网上许多教程配置jdk环境变量时都还在沿用传统的方式配置，但是随着技术的更新，完全没有必要那么麻烦了。 下载和安装jdk的教程，在这里就不</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wang-xuan/p/9693739.html</dc:identifier>
</item>
<item>
<title>ByteView和Sink - CloudGeek</title>
<link>http://www.cnblogs.com/cloudgeek/p/9693725.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloudgeek/p/9693725.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFDibOeEGbbRicqmicZTMYhh6bTuw0gq0yh79ewuzNW3MyibOjicZPpric1tXw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.4757630161579892&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;557&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;久违啦米娜桑！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最近有点忙，一月有余没有更新了，实在对不起大家！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上线后看到不少朋友发的私信，感谢大家的赞许与信任，后面我会尽最大的努力按时更新，不断推出更优质的文章！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本来计划最后花1讲的篇幅写完groupcache的源码分析的，今天刷了一下发现量还是有点多，可能得分两三讲；不过不会等到两三周才讲完的，预计趁着这个中秋假期刷完，一天一篇结束这个项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之前我们已经看完了groupcache项目的各个子包，今天要真正开始欣赏groupcache的漂亮代码了！（剧透一下，groupcache.go里面还是发现了一些写的很“漂亮”的代码，几行的内容够琢磨小半天的）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先看一下groupcache这个package的uml图吧：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFy99CCehLMiaJiccdDL0PcN8DefDHicZSqRlPfg5JTZSLDicOA0p2qC8InA/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.46980255516840885&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1722&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从图中我们可以看到一个很重要的interface：Sink和一个很重要的struct：ByteView，为什么说重要呢，我也不知道。。。不过看连线嘛，一堆的struct都与这2个类型产生了关系，于是今天我们围绕着这2个类型展开源码透析！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、byteview.go&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFqDqQpudkYKpw6rv6EFEusvtMdxxwudWt1ia4JRPN1ZnDs4daavlsVicg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;1.0030211480362539&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到这个go文件中只有一个类型ByteView，这个类型有2个属性和一堆绑定的方法，下面我们逐个来看：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFBoEQhkf0CVqicNyVpdHicI7Deia5d6tmKcw2jIVz2ggmDwwEul2Nib34sw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.4757630161579892&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;557&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ByteView的定义很简单，存着一个[]byte类型的b和string类型的s，这个需要牢记，因为其他很多地方都是围绕着这个类型展开的编码！这个文件中涉及的方法总体看还是比较简洁简单，大家参照着中英文注释浏览一遍应该很容易理解：&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;28&quot;&gt;
&lt;code class=&quot;go language-go hljs&quot; readability=&quot;50&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(v.s)&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteSlice&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; []&lt;span class=&quot;hljs-title&quot;&gt;byte&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cloneBytes(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v.s)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.s&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;At&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;byte&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.b[i]&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.s[i]&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(from, to &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteView&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{b: v.b[from:to]}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{s: v.s[from:to]}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SliceFrom&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(from &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteView&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{b: v.b[from:]}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{s: v.s[from:]}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dest []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(dest, v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(dest, v.s)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b2 ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b2.b == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.EqualString(b2.s)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.EqualBytes(b2.b)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EqualString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.s == s&lt;br/&gt;}&lt;br/&gt;l := v.Len()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s) != l {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, bi := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; v.b {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bi != s[i] {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EqualBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b2 []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes.Equal(v.b, b2)&lt;br/&gt;}&lt;br/&gt;l := v.Len()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(b2) != l {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, bi := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; b2 {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bi != v.s[i] {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;ReadSeeker&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes.NewReader(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; strings.NewReader(v.s)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ReadAt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(p []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;, off &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(n &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; off &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;view: invalid offset&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; off &amp;gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;(v.Len()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, io.EOF&lt;br/&gt;}&lt;br/&gt;n = v.SliceFrom(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;(off)).Copy(p)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(p) {&lt;br/&gt;err = io.EOF&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WriteTo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w io.Writer)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(n &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; m &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;m, err = w.Write(v.b)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;m, err = io.WriteString(w, v.s)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; m &amp;lt; v.Len() {&lt;br/&gt;err = io.ErrShortWrite&lt;br/&gt;}&lt;br/&gt;n = &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;ByteView这个struct需要记住，下面我们看Sink，其中很多地方会操作ByteView。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、sinks.go&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面在uml图中已经看到有5个类型实现了Sink接口，我们先看一下sink.go的结构：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFDibicCPKUZq8rp6ibYwuktycsgURxtkCwPicOn7dicbKDG2TNVNdlufibUDQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.9261744966442953&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;298&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;粗看是1个接口5个结构体和一堆函数，我们从Sink入手：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFEXCmFUPwEsABrOVQffGSHx6AR2g9Vy5mcic9cIGrUcPPTb2WM2BwnLg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.644640234948605&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到实现了Sink的结构体应该是用来存储某种数据的，存的时候需要调用到SetXxx()方法，可以通过view()方法获取到一些东西，返回值是上面介绍的ByteView类型的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先看个简单的struct：stringSink&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOF6ziaCfeJDRp7bqwgDG2FbrPvzHBd0Pr5A8ibeSdAh9WicCXu86RzabErg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5702479338842975&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;484&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上图，stringSink只包含2个成员，初始化函数也特别简单，接收一个*string类型的sp，返回值注意一下，是Sink接口类型的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFhUgbyfWoRP8LAc3r7JqakBxnonnQloQHicDbfvmaBYCx9Oks5nNsiaWQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5212765957446809&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;282&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;stringSink有4个方法，刚好实现了Sink接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFkRicvyalU95huhUiby2X1lia0F0TmZYV0j6BT9pp0vvDAG0EQ0mJ33VXw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5370370370370371&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;486&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFKFFtY1wic9rRV0GBUMpDtEjbjLxAy7L3D3VhbHel3Ohibflx7Wu1MicEg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.551094890510949&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;548&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个方法都挺好理解的，名字不同是因为接收的参数不同，但不管接收到什么类型的参数，都是用于设置stringSink的2个成员。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再看2个函数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFlFRHOowE9LuoGagsofRRAEEo3fVLe9ibC1VnfJCb70juCZEbUOPQMtw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.336231884057971&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;345&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个太简单了，就是克隆一个byte切片，不多说了，下面一个函数，，，可就没那么简洁了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOF9RHn0J7kFl9H10AzKsvpVF8PSmHoNeakchVibDqzJ22R3elSyvxZZCQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.738&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个函数内部定义了一个叫做viewSetter的interface类型，这个类型有个setView(v ByteView) error方法，参数还是ByteView类型的。前面我们看过各种Set方法或多或少或操作到ByteView类型的数据，不过一般是分开处理ByteView中的b或者s，这里明显是不需要区分了，直接设置整个ByteView。第一个if判断参数s是否实现了viewSetter接口，如果实现了，则直接调用setView设置v，如果没有实现，则通过Sink的SetXxx()方法设置ByteView。下面贴一波剩下几个struct及绑定方法的代码，每个struct的逻辑大同小异，大家对这注释理解一下，注意上面介绍到的setView方法在下面的部分struct中是如何实现的：&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;44.5&quot;&gt;
&lt;code class=&quot;go language-go hljs&quot; readability=&quot;83&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteViewSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dst *ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;byteViewSink{dst: dst}&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; byteViewSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst *ByteView&lt;/p&gt;&lt;p&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;*s.dst = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *s.dst, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;*s.dst = ByteView{b: b}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;*s.dst = ByteView{b: cloneBytes(b)}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;*s.dst = ByteView{s: v}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ProtoSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;protoSink{&lt;br/&gt;dst: m,&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; protoSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst proto.Message &lt;br/&gt;typ &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p&gt;v ByteView &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.v, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;err := proto.Unmarshal(b, s.dst)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;s.v.b = cloneBytes(b)&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b := []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v)&lt;br/&gt;err := proto.Unmarshal(b, s.dst)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;err = proto.Unmarshal(b, s.dst)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AllocatingByteSliceSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;allocBytesSink{dst: dst}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; allocBytesSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;&lt;br/&gt;v   ByteView&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.v, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;*s.dst = cloneBytes(v.b)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;*s.dst = []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v.s)&lt;br/&gt;}&lt;br/&gt;s.v = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(b)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(cloneBytes(b))&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setBytesOwned&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil AllocatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;*s.dst = cloneBytes(b) &lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil AllocatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;*s.dst = []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v)&lt;br/&gt;s.v.b = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;s.v.s = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TruncatingByteSliceSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;truncBytesSink{dst: dst}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; truncBytesSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;&lt;br/&gt;v   ByteView&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.v, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(b)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(cloneBytes(b))&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setBytesOwned&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil TruncatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;n := &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(*s.dst, b)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(*s.dst) {&lt;br/&gt;*s.dst = (*s.dst)[:n]&lt;br/&gt;}&lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil TruncatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;n := &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(*s.dst, v)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(*s.dst) {&lt;br/&gt;*s.dst = (*s.dst)[:n]&lt;br/&gt;}&lt;br/&gt;s.v.b = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;s.v.s = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;ok，这次先介绍到这里，下一讲我们来看peers.go和http.go中都写了些什么。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AicibUllQlLBhLWj4k70QKTtYwJialqBaaSwODasvwtfq7vWSfrX9iat1Pw49d32E1sT19FPzaMx3xJMeVZ7siahHTA/640?wx_fmt=gif&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7326565143824028&quot; data-type=&quot;gif&quot; data-w=&quot;591&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFDibOeEGbbRicqmicZTMYhh6bTuw0gq0yh79ewuzNW3MyibOjicZPpric1tXw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.4757630161579892&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;557&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;久违啦米娜桑！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最近有点忙，一月有余没有更新了，实在对不起大家！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上线后看到不少朋友发的私信，感谢大家的赞许与信任，后面我会尽最大的努力按时更新，不断推出更优质的文章！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本来计划最后花1讲的篇幅写完groupcache的源码分析的，今天刷了一下发现量还是有点多，可能得分两三讲；不过不会等到两三周才讲完的，预计趁着这个中秋假期刷完，一天一篇结束这个项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之前我们已经看完了groupcache项目的各个子包，今天要真正开始欣赏groupcache的漂亮代码了！（剧透一下，groupcache.go里面还是发现了一些写的很“漂亮”的代码，几行的内容够琢磨小半天的）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先看一下groupcache这个package的uml图吧：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFy99CCehLMiaJiccdDL0PcN8DefDHicZSqRlPfg5JTZSLDicOA0p2qC8InA/640?wx_fmt=png&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.46980255516840885&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1722&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从图中我们可以看到一个很重要的interface：Sink和一个很重要的struct：ByteView，为什么说重要呢，我也不知道。。。不过看连线嘛，一堆的struct都与这2个类型产生了关系，于是今天我们围绕着这2个类型展开源码透析！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、byteview.go&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFqDqQpudkYKpw6rv6EFEusvtMdxxwudWt1ia4JRPN1ZnDs4daavlsVicg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;1.0030211480362539&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到这个go文件中只有一个类型ByteView，这个类型有2个属性和一堆绑定的方法，下面我们逐个来看：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFBoEQhkf0CVqicNyVpdHicI7Deia5d6tmKcw2jIVz2ggmDwwEul2Nib34sw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.4757630161579892&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;557&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ByteView的定义很简单，存着一个[]byte类型的b和string类型的s，这个需要牢记，因为其他很多地方都是围绕着这个类型展开的编码！这个文件中涉及的方法总体看还是比较简洁简单，大家参照着中英文注释浏览一遍应该很容易理解：&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;28&quot;&gt;
&lt;code class=&quot;go language-go hljs&quot; readability=&quot;50&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(v.s)&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteSlice&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; []&lt;span class=&quot;hljs-title&quot;&gt;byte&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cloneBytes(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v.s)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.s&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;At&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;byte&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.b[i]&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.s[i]&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(from, to &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteView&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{b: v.b[from:to]}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{s: v.s[from:to]}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SliceFrom&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(from &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteView&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{b: v.b[from:]}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ByteView{s: v.s[from:]}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dest []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(dest, v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(dest, v.s)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b2 ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b2.b == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.EqualString(b2.s)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.EqualBytes(b2.b)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EqualString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.s == s&lt;br/&gt;}&lt;br/&gt;l := v.Len()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(s) != l {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, bi := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; v.b {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bi != s[i] {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EqualBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b2 []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes.Equal(v.b, b2)&lt;br/&gt;}&lt;br/&gt;l := v.Len()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(b2) != l {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, bi := &lt;span class=&quot;hljs-keyword&quot;&gt;range&lt;/span&gt; b2 {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; bi != v.s[i] {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;ReadSeeker&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes.NewReader(v.b)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; strings.NewReader(v.s)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ReadAt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(p []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;, off &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(n &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; off &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;view: invalid offset&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; off &amp;gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;(v.Len()) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, io.EOF&lt;br/&gt;}&lt;br/&gt;n = v.SliceFrom(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;(off)).Copy(p)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(p) {&lt;br/&gt;err = io.EOF&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WriteTo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(w io.Writer)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(n &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; m &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;m, err = w.Write(v.b)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;m, err = io.WriteString(w, v.s)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; m &amp;lt; v.Len() {&lt;br/&gt;err = io.ErrShortWrite&lt;br/&gt;}&lt;br/&gt;n = &lt;span class=&quot;hljs-keyword&quot;&gt;int64&lt;/span&gt;(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;ByteView这个struct需要记住，下面我们看Sink，其中很多地方会操作ByteView。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、sinks.go&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面在uml图中已经看到有5个类型实现了Sink接口，我们先看一下sink.go的结构：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFDibicCPKUZq8rp6ibYwuktycsgURxtkCwPicOn7dicbKDG2TNVNdlufibUDQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.9261744966442953&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;298&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;粗看是1个接口5个结构体和一堆函数，我们从Sink入手：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFEXCmFUPwEsABrOVQffGSHx6AR2g9Vy5mcic9cIGrUcPPTb2WM2BwnLg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.644640234948605&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到实现了Sink的结构体应该是用来存储某种数据的，存的时候需要调用到SetXxx()方法，可以通过view()方法获取到一些东西，返回值是上面介绍的ByteView类型的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先看个简单的struct：stringSink&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOF6ziaCfeJDRp7bqwgDG2FbrPvzHBd0Pr5A8ibeSdAh9WicCXu86RzabErg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5702479338842975&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;484&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上图，stringSink只包含2个成员，初始化函数也特别简单，接收一个*string类型的sp，返回值注意一下，是Sink接口类型的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFhUgbyfWoRP8LAc3r7JqakBxnonnQloQHicDbfvmaBYCx9Oks5nNsiaWQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5212765957446809&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;282&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;stringSink有4个方法，刚好实现了Sink接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFkRicvyalU95huhUiby2X1lia0F0TmZYV0j6BT9pp0vvDAG0EQ0mJ33VXw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.5370370370370371&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;486&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFKFFtY1wic9rRV0GBUMpDtEjbjLxAy7L3D3VhbHel3Ohibflx7Wu1MicEg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.551094890510949&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;548&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个方法都挺好理解的，名字不同是因为接收的参数不同，但不管接收到什么类型的参数，都是用于设置stringSink的2个成员。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再看2个函数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOFlFRHOowE9LuoGagsofRRAEEo3fVLe9ibC1VnfJCb70juCZEbUOPQMtw/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.336231884057971&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;345&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个太简单了，就是克隆一个byte切片，不多说了，下面一个函数，，，可就没那么简洁了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBiaj4lv13hvIIMry0K1nANOF9RHn0J7kFl9H10AzKsvpVF8PSmHoNeakchVibDqzJ22R3elSyvxZZCQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.738&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个函数内部定义了一个叫做viewSetter的interface类型，这个类型有个setView(v ByteView) error方法，参数还是ByteView类型的。前面我们看过各种Set方法或多或少或操作到ByteView类型的数据，不过一般是分开处理ByteView中的b或者s，这里明显是不需要区分了，直接设置整个ByteView。第一个if判断参数s是否实现了viewSetter接口，如果实现了，则直接调用setView设置v，如果没有实现，则通过Sink的SetXxx()方法设置ByteView。下面贴一波剩下几个struct及绑定方法的代码，每个struct的逻辑大同小异，大家对这注释理解一下，注意上面介绍到的setView方法在下面的部分struct中是如何实现的：&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;44.5&quot;&gt;
&lt;code class=&quot;go language-go hljs&quot; readability=&quot;83&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteViewSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dst *ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;byteViewSink{dst: dst}&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; byteViewSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst *ByteView&lt;/p&gt;&lt;p&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;*s.dst = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *s.dst, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;*s.dst = ByteView{b: b}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;*s.dst = ByteView{b: cloneBytes(b)}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *byteViewSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;*s.dst = ByteView{s: v}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ProtoSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;protoSink{&lt;br/&gt;dst: m,&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; protoSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst proto.Message &lt;br/&gt;typ &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p&gt;v ByteView &lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.v, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;err := proto.Unmarshal(b, s.dst)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;s.v.b = cloneBytes(b)&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b := []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v)&lt;br/&gt;err := proto.Unmarshal(b, s.dst)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *protoSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;err = proto.Unmarshal(b, s.dst)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AllocatingByteSliceSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;allocBytesSink{dst: dst}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; allocBytesSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;&lt;br/&gt;v   ByteView&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.v, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v ByteView)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v.b != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;*s.dst = cloneBytes(v.b)&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;*s.dst = []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v.s)&lt;br/&gt;}&lt;br/&gt;s.v = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(b)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(cloneBytes(b))&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setBytesOwned&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil AllocatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;*s.dst = cloneBytes(b) &lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *allocBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil AllocatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;*s.dst = []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;(v)&lt;br/&gt;s.v.b = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;s.v.s = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TruncatingByteSliceSink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Sink&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;truncBytesSink{dst: dst}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; truncBytesSink &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;br/&gt;dst *[]&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;&lt;br/&gt;v   ByteView&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ByteView, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.v, &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetProto&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(m proto.Message)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b, err := proto.Marshal(m)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(b)&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetBytes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.setBytesOwned(cloneBytes(b))&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setBytesOwned&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil TruncatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;n := &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(*s.dst, b)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(*s.dst) {&lt;br/&gt;*s.dst = (*s.dst)[:n]&lt;br/&gt;}&lt;br/&gt;s.v.b = b&lt;br/&gt;s.v.s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(s *truncBytesSink)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(v &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; s.dst == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nil TruncatingByteSliceSink *[]byte dst&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;n := &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(*s.dst, v)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(*s.dst) {&lt;br/&gt;*s.dst = (*s.dst)[:n]&lt;br/&gt;}&lt;br/&gt;s.v.b = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;s.v.s = v&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;ok，这次先介绍到这里，下一讲我们来看peers.go和http.go中都写了些什么。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AicibUllQlLBhLWj4k70QKTtYwJialqBaaSwODasvwtfq7vWSfrX9iat1Pw49d32E1sT19FPzaMx3xJMeVZ7siahHTA/640?wx_fmt=gif&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7326565143824028&quot; data-type=&quot;gif&quot; data-w=&quot;591&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 23 Sep 2018 12:48:00 +0000</pubDate>
<dc:creator>CloudGeek</dc:creator>
<og:description>久违啦米娜桑！！！ 最近有点忙，一月有余没有更新了，实在对不起大家！！！ 上线后看到不少朋友发的私信，感谢大家的赞许与信任，后面我会尽最大的努力按时更新，不断推出更优质的文章！！！ 本来计划最后花1讲</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloudgeek/p/9693725.html</dc:identifier>
</item>
</channel>
</rss>