<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>python3全栈开发-并发编程的多进程理论 - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/8930818.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/8930818.html</guid>
<description>&lt;h2&gt;一、 什么是进程&lt;/h2&gt;
&lt;p&gt;    进程：正在进行的一个过程或者说一个任务。而负责执行任务则是cpu。&lt;/p&gt;
&lt;p&gt;    举例（单核+多道，实现多个进程的并发执行）：&lt;/p&gt;
&lt;p&gt;    duoduo在一个时间段内有很多任务要做：python备课的任务，写书的任务，交女朋友的任务，王者荣耀上分的任务，　　&lt;/p&gt;
&lt;p&gt;    但duoduo同一时刻只能做一个任务（cpu同一时间只能干一个活），如何才能玩出多个任务并发执行的效果？&lt;/p&gt;
&lt;p&gt;    duoduo备一会课，再去跟女朋友聊聊天，再去打一会王者荣耀....这就保证了每个任务都在进行中.&lt;/p&gt;
&lt;h2&gt;二、 进程与程序的区别&lt;/h2&gt;
&lt;p&gt;程序仅仅只是一堆代码而已，而进程指的是程序的运行过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要强调的是：同一个程序执行两次，那也是两个进程，比如打开暴风影音，虽然都是同一个软件，但是一个可以播放苍井空，一个可以播放饭岛爱。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;三 、并发与并行&lt;/h2&gt;
&lt;p&gt;无论是并行还是并发，在用户看来都是'同时'运行的，不管是进程还是线程，都只是一个任务而已，真是干活的是cpu，cpu来做这些任务，而一个cpu同一时刻只能执行一个任务&lt;/p&gt;
&lt;p&gt;      一 、并发：是伪并行，即看起来是同时运行。单个cpu+多道技术就可以实现并发，（并行也属于并发）&lt;/p&gt;
&lt;p&gt;     二 、并行：同时运行，只有具备多个cpu才能实现并行&lt;/p&gt;
&lt;p&gt;         单核下，可以利用多道技术，多个核，每个核也都可以利用多道技术（&lt;strong&gt;多道技术是针对单核而言的&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;         有四个核，六个任务，这样同一时间有四个任务被执行，假设分别被分配给了cpu1，cpu2，cpu3，cpu4，&lt;/p&gt;
&lt;p&gt;         一旦任务1遇到I/O就被迫中断执行，此时任务5就拿到cpu1的时间片去执行，这就是单核下的多道技术&lt;/p&gt;
&lt;p&gt;         而一旦任务1的I/O结束了，操作系统会重新调用它(&lt;strong&gt;需知进程的调度、分配给哪个cpu运行，由操作系统说了算&lt;/strong&gt;)，可能被分配给四个cpu中的任意一个去执行&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2015.cnblogs.com/blog/1036857/201705/1036857-20170506233723679-411353203.png&quot; alt=&quot;&quot; width=&quot;494&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有现代计算机经常会在同一时间做很多件事，一个用户的PC（无论是单cpu还是多cpu），都可以同时运行多个任务（一个任务可以理解为一个进程）。&lt;/p&gt;
&lt;p&gt;　　　　启动一个进程来杀毒（360软件）&lt;/p&gt;
&lt;p&gt;　　　　启动一个进程来看电影（暴风影音）&lt;/p&gt;
&lt;p&gt;　　　　启动一个进程来聊天（腾讯QQ）&lt;/p&gt;
&lt;p&gt;所有的这些进程都需被管理，于是一个支持多进程的多道程序系统是至关重要的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多道技术概念回顾：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存中同时存入多道（多个）程序，cpu从一个进程快速切换到另外一个，使每个进程各自运行几十或几百毫秒，这样，虽然在某一个瞬间，一个cpu只能执行一个任务，但在1秒内，cpu却可以运行多个进程，这就给人产生了并行的错觉，即伪并发，以此来区分多处理器操作系统的真正硬件并行（多个cpu共享同一个物理内存）&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;四、 同步\异步and阻塞\非阻塞（重点）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;同步：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e9aa0c3d-2f96-495d-8ed3-8d6b6f6f4d9c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9aa0c3d-2f96-495d-8ed3-8d6b6f6f4d9c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9aa0c3d-2f96-495d-8ed3-8d6b6f6f4d9c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e9aa0c3d-2f96-495d-8ed3-8d6b6f6f4d9c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9aa0c3d-2f96-495d-8ed3-8d6b6f6f4d9c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不会返回。按照这个定义，其实绝大多数函数都是同步调用。&lt;/span&gt;
&lt;span&gt;但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;发起同步调用后，就在原地等着任务结束，根本不考虑任务是在计算还是在io阻塞，总之就是一股脑地等任务结束&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;同步详解&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;异步：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7dc30f47-7077-4161-adfb-f970ae55294b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7dc30f47-7077-4161-adfb-f970ae55294b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7dc30f47-7077-4161-adfb-f970ae55294b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7dc30f47-7077-4161-adfb-f970ae55294b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7dc30f47-7077-4161-adfb-f970ae55294b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;异步的概念和同步相对。当一个异步功能调用发出后，调用者不能立刻得到结果。当该异步功能完成后，通过状态、通知或回调来通知调用者。&lt;/span&gt;
&lt;span&gt;如果异步功能用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一 种很严重的错误）。
如果是使用通知的方式，效率则很高，因为异步功能几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;发起异步调用后，并不会等待任务结束才返回，相反，会立即获取一个临时结果（并不是最终的结果，可能是封装好的一个对象）。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;异步详解&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;阻塞：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8f801316-4934-4659-bcb4-8d5c099e3942')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8f801316-4934-4659-bcb4-8d5c099e3942&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8f801316-4934-4659-bcb4-8d5c099e3942&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8f801316-4934-4659-bcb4-8d5c099e3942',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8f801316-4934-4659-bcb4-8d5c099e3942&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;阻塞调用是指调用结果返回之前，当前线程会被挂起（如遇到io操作）。函数只有在得到结果之后才会将阻塞的线程激活。&lt;/span&gt;
&lt;span&gt;有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;举例：&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;1. 同步调用：apply一个累计1亿次的任务，该调用会一直等待，直到任务返回结果为止，但并未阻塞住（即便是被抢走cpu的执行权限，那也是处于就绪态）;&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;2. 阻塞调用：当socket工作在阻塞模式的时候，如果没有数据的情况下调用recv函数，则当前线程就会被挂起，直到有数据为止。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;阻塞详解&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;非阻塞：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('67dbea37-7d93-458d-b17c-6f9e1eda1e47')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_67dbea37-7d93-458d-b17c-6f9e1eda1e47&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_67dbea37-7d93-458d-b17c-6f9e1eda1e47&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('67dbea37-7d93-458d-b17c-6f9e1eda1e47',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_67dbea37-7d93-458d-b17c-6f9e1eda1e47&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前也会立刻返回，同时该函数不会阻塞当前线程。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;非阻塞详解&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('64b2c001-ae5e-4bae-87b6-9bb92adf1f61')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_64b2c001-ae5e-4bae-87b6-9bb92adf1f61&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_64b2c001-ae5e-4bae-87b6-9bb92adf1f61&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('64b2c001-ae5e-4bae-87b6-9bb92adf1f61',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_64b2c001-ae5e-4bae-87b6-9bb92adf1f61&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;1. 同步与异步针对的是函数/任务的调用方式：&lt;/span&gt;
&lt;span&gt;同步就是当一个进程发起一个函数（任务）调用的时候，一直等到函数（任务）完成，而进程继续处于激活状态。
而异步情况下是当一个进程发起一个函数（任务）调用的时候，不会等函数返回，而是继续往下执行当，函数返回的时候通过状态、通知、事件等方式通知进程任务完成。
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;2. 阻塞与非阻塞针对的是进程或线程：阻塞是当请求不能满足的时候就将进程挂起，而非阻塞则不会阻塞当前进程&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;小结&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;五 、进程的创建（了解）&lt;/h2&gt;
&lt;p&gt;　　但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如微波炉中的控制器，一旦启动微波炉，所有的进程都已经存在。&lt;/p&gt;
&lt;p&gt;　　而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式创建新的进程&lt;/p&gt;
&lt;p&gt;　　1. 系统初始化（查看进程linux中用ps命令，windows中用任务管理器，前台进程负责与用户交互，后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮件、web页面、新闻、打印）&lt;/p&gt;
&lt;p&gt;　　2. 一个进程在运行过程中开启了子进程（如nginx开启多进程，os.fork,subprocess.Popen等）&lt;/p&gt;
&lt;p&gt;　　3. 用户的交互式请求，而创建一个新进程（如用户双击暴风影音）&lt;/p&gt;
&lt;p&gt;　　4. 一个批处理作业的初始化（只在大型机的批处理系统中应用）&lt;/p&gt;

&lt;p&gt;　　无论哪一种，新进程的创建都是由一个已经存在的进程执行了一个用于创建进程的系统调用而创建的：&lt;/p&gt;
&lt;p&gt;　　1. 在UNIX中该系统调用是：fork，fork会创建一个与父进程一模一样的副本，二者有相同的存储映像、同样的环境字符串和同样的打开文件（在shell解释器进程中，执行一个命令就会创建一个子进程）&lt;/p&gt;
&lt;p&gt;　　2. 在windows中该系统调用是：CreateProcess，CreateProcess既处理进程的创建，也负责把正确的程序装入新进程。&lt;/p&gt;

&lt;p&gt;　　关于创建的子进程，UNIX和windows&lt;/p&gt;
&lt;p&gt;　　1.相同的是：进程创建后，父进程和子进程有各自不同的地址空间（&lt;strong&gt;多道技术要求物理层面实现进程之间内存的隔离&lt;/strong&gt;），任何一个进程的在其地址空间中的修改都不会影响到另外一个进程。&lt;/p&gt;
&lt;p&gt;　　2.不同的是：在UNIX中，子进程的初始地址空间是父进程的一个副本，提示：子进程和父进程是可以有只读的共享内存区的。但是对于windows系统来说，从一开始父进程与子进程的地址空间就是不同的。&lt;/p&gt;
&lt;h2&gt;六 、进程的终止（了解）&lt;/h2&gt;
&lt;p&gt;　　1. 正常退出（自愿，如用户点击交互式页面的叉号，或程序执行完毕调用发起系统调用正常退出，在linux中用exit，在windows中用ExitProcess）&lt;/p&gt;
&lt;p&gt;　　2. 出错退出（自愿，python a.py中a.py不存在）&lt;/p&gt;
&lt;p&gt;　　3. 严重错误（非自愿，执行非法指令，如引用不存在的内存，1/0等，可以捕捉异常，try...except...）&lt;/p&gt;
&lt;p&gt;　　4. 被其他进程杀死（非自愿，如kill -9）&lt;/p&gt;
&lt;h2&gt;七、 进程的层次结构&lt;/h2&gt;
&lt;p&gt;　　无论UNIX还是windows，进程只有一个父进程，不同的是：&lt;/p&gt;
&lt;p&gt;　　1. 在UNIX中所有的进程，都是以init进程为根，组成树形结构。父子进程共同组成一个进程组，这样，当从键盘发出一个信号时，该信号被送给当前与键盘相关的进程组中的所有成员。&lt;/p&gt;
&lt;p&gt;　　2. 在windows中，没有进程层次的概念，所有的进程都是地位相同的，唯一类似于进程层次的暗示，是在创建进程时，父进程得到一个特别的令牌（&lt;strong&gt;称为句柄&lt;/strong&gt;）,该句柄可以用来控制子进程，但是父进程有权把该句柄传给其他子进程，这样就没有层次了。&lt;/p&gt;
&lt;h2&gt;八 、进程的状态&lt;/h2&gt;
&lt;p&gt;　　tail -f access.log |grep '404'&lt;/p&gt;
&lt;p&gt;　　执行程序tail，开启一个子进程，执行程序grep，开启另外一个子进程，两个进程之间基于管道'|'通讯，将tail的结果作为grep的输入。&lt;/p&gt;
&lt;p&gt;　　进程grep在等待输入（即I/O）时的状态称为阻塞，此时grep命令都无法运行&lt;/p&gt;
&lt;p&gt;　　其实在两种情况下会导致一个进程在逻辑上不能运行，&lt;/p&gt;
&lt;p&gt;　　1. 进程挂起是自身原因，遇到I/O阻塞，便要让出CPU让其他进程去执行，这样保证CPU一直在工作&lt;/p&gt;
&lt;p&gt;　　2. 与进程无关，是操作系统层面，可能会因为一个进程占用时间过多，或者优先级等原因，而调用其他的进程去使用CPU。&lt;/p&gt;
&lt;p&gt;　　因而一个进程由三种状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201712/1036857-20171229144413132-1909478252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;九 、进程并发的实现（了解）&lt;/h3&gt;
&lt;p&gt;　　进程并发的实现在于，硬件中断一个正在运行的进程，把此时进程运行的所有状态保存下来，为此，操作系统维护一张表格，即进程表（process table），每个进程占用一个进程表项（这些表项也称为进程控制块）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1036857/201712/1036857-20171229144430038-509212133.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　该表存放了进程状态的重要信息：程序计数器、堆栈指针、内存分配状况、所有打开文件的状态、帐号和调度信息，以及其他在进程由运行态转为就绪态或阻塞态时，必须保存的信息，从而保证该进程在再次启动时，就像从未被中断过一样。&lt;/p&gt;

</description>
<pubDate>Tue, 24 Apr 2018 07:11:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/8930818.html</dc:identifier>
</item>
<item>
<title>Qone 正式开源，使 javascript 支持 .NET LINQ - 【当耐特】</title>
<link>http://www.cnblogs.com/iamzhanglei/p/8930625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iamzhanglei/p/8930625.html</guid>
<description>&lt;h2 id=&quot;qone&quot;&gt;Qone&lt;/h2&gt;
&lt;p&gt;下一代 Web 查询语言，使 javascript 支持 LINQ&lt;/p&gt;
&lt;p&gt;Github： &lt;a href=&quot;https://github.com/dntzhang/qone&quot; class=&quot;uri&quot;&gt;https://github.com/dntzhang/qone&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;缘由&quot;&gt;缘由&lt;/h2&gt;
&lt;p&gt;最近刚好修改了腾讯文档 Excel 表格公式的一些 bug，主要是修改公式的 parser 。比如下面的脚本怎么转成 javascript 运行？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;IF&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;SUM&lt;/span&gt;(J6&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;J7) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SUM&lt;/span&gt;(J6&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;J7) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A2 是 foo&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A2 不是 foo&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;公式或一些脚本语言的实现包含几个主要步骤:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scanner &amp;gt; lexer &amp;gt; parser &amp;gt; ast &amp;gt; code string&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;得到 code string 之后可以动态运行，比如 js 里使用 eval ，eval 能保留上下文信息，缺点是执行代码包含编译器代码，eval 的安全性等。&lt;br/&gt;得到 code string 之后也可直接使用生成的 code string 运行，缺点是依赖构建工具或者编辑器插件去动态替换源代码。&lt;/p&gt;
&lt;p&gt;比如 wind 同时支持 JIT 和 AOT, qone 的思路和上面类似，但不完全相同， qone 的如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scanner &amp;gt; lexer &amp;gt; parser &amp;gt; ast &amp;gt; method(ast)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个后面写原理时候再细说。&lt;/p&gt;
&lt;p&gt;总的来说，因为腾讯文档公式相关工作、早年的 kmdjs 开发 (uglify2) 和 .NET 开发，所以有了 qone 。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;linq&quot;&gt;LINQ&lt;/h2&gt;
&lt;p&gt;LINQ (语言集成查询) 是 .NET Framework 3.5 版中引入的一项创新功能。在 Visual Studio 中，可以用 Visual Basic 或 C# 为以下数据源编写 LINQ 查询：SQL Server 数据库、XML 文档、ADO.NET 数据集，以及可枚举的 Objects(即 LINQ to Objects)。&lt;/p&gt;
&lt;p&gt;qone 是一款让 Web 前端工程师在 javascript 使用 .NET 平台下类似 LINQ 语法的前端库。qone 让 Web 前端工程师通过字符串的形式实现了 LINQ to Objects 的调用（下面统一叫做 qone to objects），Objects即 JSON 组成的 Array。举个简单的例子(qone 远比下面的例子强大):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linq'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
]

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            where n.age &amp;gt; 18&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            select n&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        `&lt;/span&gt;)

&lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;dntzhang&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与 LINQ 一样，和 SQL 不同，qone 的 from 也在前面，为后面语句能够有智能提示，qone 是基于 string 的实时编译，不是 javasript 的原生语法，所以虽然 from 写在前面但不支持智能提示，但可以专门为 qone 写个编辑器插件去实现智能提示，所以 qone 语法设计上依然把 from 放在前面。&lt;/p&gt;
&lt;p&gt;从根本上说，qone to objects 表示一种新的处理集合的方法。 采用旧方法，您必须编写指定如何从集合检索数据的复杂的 foreach 循环。 而采用 qone 方法，您只需编写描述要检索的内容的声明性代码。&lt;br/&gt;另外，与传统的 foreach 循环相比，qone 查询具有三大优势：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;它们更简明、更易读，尤其在筛选多个条件时&lt;/li&gt;
&lt;li&gt;它们使用最少的应用程序代码提供强大的筛选、排序和分组功能&lt;/li&gt;
&lt;li&gt;无需修改或只需做很小的修改即可将它们移植到其他数据源&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通常，您要对数据执行的操作越复杂，就越能体会到 qone 相较于传统迭代技术的优势。&lt;/p&gt;
&lt;h2 id=&quot;qone-安装&quot;&gt;qone 安装&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;npm&lt;/span&gt; install qone&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;qone-关键字与运算符&quot;&gt;qone 关键字与运算符&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;from&lt;/li&gt;
&lt;li&gt;in&lt;/li&gt;
&lt;li&gt;where&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;orderby&lt;/li&gt;
&lt;li&gt;desc&lt;/li&gt;
&lt;li&gt;asc&lt;/li&gt;
&lt;li&gt;groupby&lt;/li&gt;
&lt;li&gt;limit&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中 from 和 in 一起使用，orderby 和 desc 或者 asc 一起使用。&lt;/p&gt;
&lt;p&gt;from 也可以把子属性作为 dataSource:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; n &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;list&lt;/span&gt;   &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;qone 支持下面三类运算符:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;括号：( )&lt;/li&gt;
&lt;li&gt;比较运算符： = , &amp;gt; , &amp;lt; , &amp;gt;= , &amp;lt;= , !=&lt;/li&gt;
&lt;li&gt;与或非: &amp;amp;&amp;amp; , || , !&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;条件判断语句也支持 null, undefined, true, false。&lt;/p&gt;
&lt;p&gt;通过上面各种组合，你可以写出很复杂的查询条件。比如:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;    from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;    where !(n.age &amp;gt; 17 || n.age &amp;lt; 2) &amp;amp;&amp;amp; n.name != 'dntzhang'&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;    select n&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也支持 bool 类型的查询:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;isBaby&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linq'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        from a in list       &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        where a.isBaby &amp;amp;&amp;amp; n.name = 'qone'&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        select a&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;    `&lt;/span&gt;)

&lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;isBaby&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 isBaby 是 bool 类型，同样的写法:&lt;br/&gt;a.isBaby = true (等同于: a.isBaby)&lt;br/&gt;a.isBaby = false (等同于: !a.isBaby)&lt;/p&gt;
&lt;h2 id=&quot;qone-方法注入&quot;&gt;qone 方法注入&lt;/h2&gt;
&lt;p&gt;通过上面介绍发现 qone 不支持加减乘除位求模运算？怎么才能图灵完备？方法注入搞定一切！如下所示:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Method test 8&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]

    &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'square'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (num) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; num
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

    &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'sqrt'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (num) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sqrt&lt;/span&gt;(num)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; arr &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;      from n in arr   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;      where  sqrt(n) &amp;gt;= 2 &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;      select { squareValue : square(n) }&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;  `&lt;/span&gt;)

    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;squareValue&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;squareValue&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;])
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法也是支持多参数传入，所以可以写出任意的查询条件。其中select, where, orderby, groupby 语句都支持方法注入。&lt;/p&gt;
&lt;h2 id=&quot;qone-select-输出&quot;&gt;qone select 输出&lt;/h2&gt;
&lt;p&gt;通过 select 可以输出各种格式和字段的数据:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Select JSON test&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linq'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                where n.age &amp;lt; 20&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                select {n.age, n.name}&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            `&lt;/span&gt;)

    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;qone&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;linq&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ])

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把所有场景列举一下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;select n&lt;/code&gt; 输出源 item&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select n.name&lt;/code&gt; 输出一维表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select n.name, n.age&lt;/code&gt; 输出二维表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select { n.age, n.name }&lt;/code&gt; 缺省方式输出 JSON Array(key自动使用 age 和 name)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select { a: n.age, b: n.name }&lt;/code&gt; 指定 key 输出 JSON Array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select { a: methodName(n.age), b: n.name }&lt;/code&gt; 注入方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select methodName(n.age), n.name&lt;/code&gt; 注入方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select methodName(n.age, n.name, 1, true, 'abc')&lt;/code&gt; 注入方法并传递参数&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;qone-orderby&quot;&gt;qone orderby&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                where n.age &amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                orderby n.age asc, n.name desc&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                select n&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            `&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有标记 asc 或者 desc，使用默认排序 asc。&lt;/p&gt;
&lt;h2 id=&quot;qone-groupby&quot;&gt;qone groupby&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Simple groupby test 1&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linq'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                where n.age &amp;gt; 18&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                groupby n.age&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            `&lt;/span&gt;)

    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [
        [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;dntzhang1&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;dntzhang2&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;dntzhang3&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]])

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;groupby 可以作为结束语句，不用跟着也不能跟着 select 语句，groupby 也可以支持方法注入。&lt;/p&gt;
&lt;h2 id=&quot;qone-多数据源&quot;&gt;qone 多数据源&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Multi datasource with props condition&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; listA &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linq'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]


    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; listB &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'xx'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'xxx'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; listA&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; listB &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            from a in listA     &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            from b in listB      &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            where a.age = b.age&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            select a, b&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        `&lt;/span&gt;)

    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [[&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;linq&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]])
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多数据源会产生笛卡儿积。&lt;/p&gt;
&lt;h2 id=&quot;qone-嵌套子数据源&quot;&gt;qone 嵌套子数据源&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Multi deep from test &quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'qone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;isBaby&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linq'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;]

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            from a in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            from c in a.colors   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            from d in c.xx  &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            where d === 100&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;            select a.name, c,d&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        `&lt;/span&gt;)

    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [[&lt;span class=&quot;st&quot;&gt;&quot;linq&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;]])
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以和自身的数据源会产生笛卡儿积。&lt;/p&gt;
&lt;h2 id=&quot;qone-limit-与分页查询&quot;&gt;qone limit 与分页查询&lt;/h2&gt;
&lt;p&gt;通过 limit 可以应付最常见的两种查询场景 - top N 和 分页。&lt;/p&gt;
&lt;p&gt;查询top3:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Limit top 3&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang4'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang5'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang6'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang7'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang8'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang9'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang10'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; pageIndex &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        pageSize &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    select n&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    limit 0, 3&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                `&lt;/span&gt;)


    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [

        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ])

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分页查询:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;QUnit&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Limit one page test&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (assert) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang3'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang4'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang5'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang6'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang7'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang8'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang9'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang10'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; pageIndex &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        pageSize &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;qone&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    from n in list   &lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    where n.age &amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    select n&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                    limit &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;pageIndex &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; pageSize&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;pageSize&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;                `&lt;/span&gt;)


    &lt;span class=&quot;va&quot;&gt;assert&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;deepEqual&lt;/span&gt;(result&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang5'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang6'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang7'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'dntzhang8'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;])

&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;star-fork-pr-repl-follow-me&quot;&gt;star &amp;amp; fork &amp;amp; pr &amp;amp; repl &amp;amp; follow me&lt;/h2&gt;
</description>
<pubDate>Tue, 24 Apr 2018 06:59:00 +0000</pubDate>
<dc:creator>【当耐特】</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iamzhanglei/p/8930625.html</dc:identifier>
</item>
<item>
<title>DDCTF 2018线上赛writeup - 蝉时雨</title>
<link>http://www.cnblogs.com/semishigure/p/8930257.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/semishigure/p/8930257.html</guid>
<description>

&lt;p&gt; 第一题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416105832918-113421083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&lt;/p&gt;

&lt;p&gt;解题思路：&lt;/p&gt;
&lt;p&gt;首先尝试各种解密，无果。&lt;/p&gt;
&lt;p&gt;开始研究，分析字符串，首先看看有哪些字符，然后准备分析频率&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import&lt;span&gt; string

cipertext = &quot;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&quot;
for i in&lt;span&gt; string.lowercase:
    if i in&lt;span&gt; cipertext:
        print&lt;span&gt; i
for i in&lt;span&gt; string.digits:
    if i in&lt;span&gt; cipertext:
        print i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印出来发现字符串由a-f 0-9组成，瞬间想到16进制格式，开始向16进制进攻&lt;/p&gt;
&lt;p&gt;len()查看到字符长度为134，16进制一般是两个字符组成一个字节，所以两个两个拆解分开试试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
cipertext = &quot;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&quot;&lt;span&gt;
i =&lt;span&gt; 0
plaintext = &quot;&quot;
while i &amp;lt; 133&lt;span&gt;:
    plaintext += str(int(cipertext[i:i + 2], 16)) + &quot; &quot;&lt;span&gt;
    i += 2
print plaintext&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到212 232 225 244 160 247 225 243 160 230 225 243 244 161 160 212 232 229 160 230 236 225 231 160 233 243 186 160 196 196 195 212 198 251 185 178 178 225 226 185 185 183 180 225 180 183 227 228 179 178 178 227 230 180 179 226 181 176 182 177 176 230 225 229 225 181 253 &lt;/p&gt;
&lt;p&gt;明显看到超出常规ascii范围，考虑尝试凯撒解密，由于ascii有128字符，尝试先减去128&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
cipertext = &quot;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&quot;&lt;span&gt;
i =&lt;span&gt; 0
plaintext = &quot;&quot;
while i &amp;lt; 133&lt;span&gt;:
    asciinum = int(cipertext[i:i + 2], 16)-128&lt;span&gt;
    plaintext +=&lt;span&gt; chr(asciinum)
    i += 2
print plaintext&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到flag&lt;/p&gt;

&lt;p&gt;第二题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416111731284-409201077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开下载的&lt;a href=&quot;https://files.cnblogs.com/files/semishigure/windows.rar&quot; target=&quot;_blank&quot;&gt;windows.jpg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416111800240-435529419.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;非常普通的一张图，看到图片，第一联想到隐写术，自行用binwalk看看图片有没有藏东西&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416111952254-621825897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一大堆东西，尝试提取分离，得到一个zip，打开一看需要密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416112830715-836690674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这里可以用暴力破解，不过花费时间较长，期间可以做一些其他事情，比如去看看图片的详细信息(可能藏东西)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416112940372-1449521115.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在备注找到Pactera，尝试作为密码输入，解压成功Orz...............&lt;/p&gt;
&lt;p&gt;打开file.txt&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416113057568-964654960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进行一顿栅栏，编码等解密，无果。&lt;/p&gt;
&lt;p&gt;破了很久，最后回头看题目看了的提示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180416113430379-670703220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;尝试分析字符频率,然后进行排序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
file1 = open(&quot;file.txt&quot;, &quot;r&quot;&lt;span&gt;)
cipertext =&lt;span&gt; file1.read()
dic1 =&lt;span&gt; {}
for i in&lt;span&gt; cipertext:
    if i not in&lt;span&gt; dic1:
        dic1[i] = 1
    else&lt;span&gt;:
        dic1[i] += 1&lt;span&gt;
z =&lt;span&gt; zip(dic1.values(), dic1.keys())
plaintext = &quot;&quot;
for i in&lt;span&gt; sorted(z):
    plaintext = i[1] +&lt;span&gt; plaintext
print plaintext&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接得到flag&lt;/p&gt;


&lt;p&gt;第三题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417150057894-1350725340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本题差评！！！干扰项太多，不亲切，这里不再赘述踩的坑&lt;/p&gt;

&lt;p&gt;下载得到附件，是一个pcap文件，果断丢入wireshark，把解析的到的文件一次导出&lt;/p&gt;
&lt;p&gt;只有IMF的能导出，分析查看，大概在一个文件比较大的地方，看到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417152229900-218076018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;复制出来，看到是base64，解码，得到一串字符&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417152813439-862070788.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个看到应该是一张图片，所以这里保存成图片看一看。。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#!/usr/bin/env python
# coding=utf-8
import&lt;span&gt; base64

file1 = open(&quot;test&quot;, &quot;r&quot;&lt;span&gt;)
cipertext =&lt;span&gt; file1.read()
file1.close()

plaintext = base64.b64decode(cipertext)  # 读取file1进行base64解码
file2 = open(&quot;testpng.png&quot;, &quot;wb&quot;)  # 以.png写入保存
&lt;span&gt;file2.write(plaintext)
file2.close()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开我们刚才保存的图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417153605024-1654498495.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里就要使用图像识别了，ocr了解一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#!/usr/bin/env python
# coding=utf-8

import&lt;span&gt; base64
import&lt;span&gt; pytesseract
from PIL import&lt;span&gt; Image


def&lt;span&gt; getcode(imgurl):
    &quot;&quot;&quot;识别图片&quot;&quot;&quot;&lt;span&gt;
    image =&lt;span&gt; Image.open(imgurl)
    vcode =&lt;span&gt; pytesseract.image_to_string(image)
    code = base64.b64decode(vcode.encode(&quot;utf-8&quot;&lt;span&gt;))
    return&lt;span&gt; code


temp_imgurl = 'testpng.png'&lt;span&gt;
code =&lt;span&gt; getcode(temp_imgurl)
print code&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里无敌坑，ocr识别准确率不是很高，code得到后还要和图片进行比对检查。&lt;/p&gt;
&lt;p&gt;根据提示，补全RSA&lt;/p&gt;
&lt;p&gt;-----BEGIN RSA PRIVATE KEY-----&lt;br/&gt;MIICXAIBAAKBgQDCm6vZmclJrVH1AAyGuCuSSZ8O+mIQiOUQCvN0HYbj8153JfSQ&lt;br/&gt;LsJIhbRYS7+zZ1oXvPemWQDv/u/tzegt58q4ciNmcVnq1uKiygc6QOtvT7oiSTyO&lt;br/&gt;vMX/q5iE2iClYUIHZEKX3BjjNDxrYvLQzPyGD1EY2DZIO6T45FNKYC2VDwIDAQAB&lt;br/&gt;AoGAbtWUKUkx37lLfRq7B5sqjZVKdpBZe4tL0jg6cX5Djd3Uhk1inR9UXVNw4/y4&lt;br/&gt;QGfzYqOn8+Cq7QSoBysHOeXSiPztW2cL09ktPgSlfTQyN6ELNGuiUOYnaTWYZpp/&lt;br/&gt;QbRcZ/eHBulVQLlk5M6RVs9BLI9X08RAl7EcwumiRfWas6kCQQDvqC0dxl2wIjwN&lt;br/&gt;czILcoWLig2c2u71Nev9DrWjWHU8eHDuzCJWvOUAHIrkexddWEK2VHd+F13GBCOQ&lt;br/&gt;ZCM4prBjAkEAz+ENahsEjBE4+7H1HdIaw0+goe/45d6A2ewO/lYH6dDZTAzTW9z9&lt;br/&gt;kzV8uz+Mmo5163/JtvwYQcKF39DJGGtqZQJBAKa18XR16fQ9TFL64EQwTQ+tYBzN&lt;br/&gt;+04eTWQCmH3haeQ/0Cd9XyHBUveJ42Be8/jeDcIx7dGLxZKajHbEAfBFnAsCQGq1&lt;br/&gt;AnbJ4Z6opJCGu+UP2c8SC8m0bhZJDelPRC8IKE28eB6SotgP61ZqaVmQ+HLJ1/wH&lt;br/&gt;/5pfc3AmEyRdfyx6zwUCQCAH4SLJv/kprRz1a1gx8FR5tj4NeHEFFNEgq1gmiwmH&lt;br/&gt;2STT5qZWzQFz8NRe+/otNOHBR2Xk4e8IS+ehIJ3TvyE=&lt;br/&gt;-----END RSA PRIVATE KEY-----&lt;/p&gt;

&lt;p&gt;看到这个rsa秘钥，自然联想到ssl，搜索一下（ssl了解一下）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417161117207-874220347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到了ssl的通信&lt;/p&gt;
&lt;p&gt;把秘钥导入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417161237756-240328675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;重启wireshark，惊奇地发现在最后多了http&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417161349776-2085270832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;追踪http流&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180417161424225-2113915680.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;第四题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210837/201804/1210837-20180424142232608-1061078297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; Crypto.Cipher &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AES
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; Crypto &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Random


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_padding(rawstr):
    remainder &lt;/span&gt;= len(rawstr) % 16
    &lt;span&gt;if&lt;/span&gt; remainder !=&lt;span&gt; 0:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\x00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; * (16 -&lt;span&gt; remainder)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;


&lt;span&gt;def&lt;/span&gt;&lt;span&gt; aes_encrypt(key, plaintext):
    plaintext &lt;/span&gt;+=&lt;span&gt; get_padding(plaintext)
    aes &lt;/span&gt;=&lt;span&gt; AES.new(key, AES.MODE_ECB)
    cipher_text &lt;/span&gt;= aes.encrypt(plaintext).encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cipher_text


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; generate_hello(key, name, flag):
    message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection for mission: {}, your mission's flag is: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(name, flag)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; aes_encrypt(key, message)


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_input():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; raw_input()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; print_output(message):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(message)
    sys.stdout.flush()


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; handle():
    print_output(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Please enter mission key:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    mission_key &lt;/span&gt;=&lt;span&gt; get_input().rstrip()

    print_output(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Please enter your Agent ID to secure communications:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    agentid &lt;/span&gt;=&lt;span&gt; get_input().rstrip()
    rnd &lt;/span&gt;=&lt;span&gt; Random.new()
    session_key &lt;/span&gt;= rnd.read(16&lt;span&gt;)

    flag &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;secret&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    print_output(generate_hello(session_key, agentid, flag))
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        print_output(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Please send some messages to be encrypted, 'quit' to exit:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        msg &lt;/span&gt;=&lt;span&gt; get_input().rstrip()
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; msg == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;quit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            print_output(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bye!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
        enc &lt;/span&gt;=&lt;span&gt; aes_encrypt(session_key, msg)
        print_output(enc)


&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    handle()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这题算是纯crypto，采用的是MODE_ECB的AES加密。&lt;/p&gt;
&lt;p&gt;题目大概的意思就是明文由agentid和flag组成，随意输入 agentid后明文会被随机产生的&lt;span&gt;key&lt;/span&gt;进行AES加密，由于每一次远程到116.85.48.103时key都是随机产生的，所以我们只能通过后面的加密尝试来猜测出明文&lt;/p&gt;
&lt;p&gt;首先AES了解一下&lt;/p&gt;
&lt;p&gt;ECB加密是分组进行加密的，解密也是分组解密。分组与分组之间的明文产生的密文互相独立，且由于算法的缘故，相同的明文分组在相同的密钥加密下会产生相同的密文&lt;br/&gt;加解密流程如下图所示&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox fancybox.image&quot; href=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/22-50-28.jpg&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/22-50-28.jpg&quot; alt=&quot;22-50-28.jpg&quot;/&gt;&lt;/a&gt;&lt;a class=&quot;fancybox fancybox.image&quot; href=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/22-50-56.jpg&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/22-50-56.jpg&quot; alt=&quot;22-50-56.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而我们要做的事是通过这些个分组且明文加密固定密文的特性猜出flag的每一位来&lt;br/&gt;题中以16字节为一组，我们举例也拿16字节为一组举例&lt;br/&gt;首先我们假设&lt;code&gt;xxxx&lt;/code&gt;是我们可控的输入，一般情况下的加密会是这样的&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox fancybox.image&quot; href=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/ECB1.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/ECB1.png&quot; alt=&quot;ECB1.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是如果我们控制&lt;code&gt;xxx&lt;/code&gt;为十五个固定的字符如十五个&lt;code&gt;A&lt;/code&gt;&lt;br/&gt;则加密过程会变成这样：&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fancybox fancybox.image&quot; href=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/ECB2.png&quot; rel=&quot;group&quot;&gt;&lt;img src=&quot;https://www.wzsite.cn/2018/04/21/%E5%8F%88%E6%98%AF%E4%B8%80%E5%B9%B4DDCTF/ECB2.png&quot; alt=&quot;ECB2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在我们记录下此时的&lt;code&gt;HEX_1，在与密文进行比较，如果一样就记下此时F的值，如此一个一个循环推测&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下是解题代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; string

agentid &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
message &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
flag &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(45&lt;span&gt;):
    agentid &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;def&lt;/span&gt;&lt;span&gt; returnmsg(data):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;发送与接收&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    s.send(data)
    time.sleep(&lt;/span&gt;0.3&lt;span&gt;)
    msg &lt;/span&gt;= s.recv(1024&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg


&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    s &lt;/span&gt;=&lt;span&gt; socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;116.85.48.103&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 5002&lt;span&gt;))

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; returnmsg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2acba569d223cf7d6e48dee88378288a\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 发送题目的mission key&lt;/span&gt;
    cipertext = returnmsg(agentid + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 得到密文&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt; cipertext

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; string.lowercase + string.digits + string.uppercase + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection for mission: {}, your mission's flag is: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(agentid, flag +&lt;span&gt; i)
        info &lt;/span&gt;= returnmsg(message + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; info.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)[0] &lt;span&gt;in&lt;/span&gt; cipertext: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果尝试加密的内容和第一次密文相同,则记下i&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt; info
            flag &lt;/span&gt;+=&lt;span&gt; i
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;find key code: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; i
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;

    &lt;span&gt;print&lt;/span&gt;&lt;span&gt; message
    s.shutdown(&lt;/span&gt;2&lt;span&gt;)
    s.close()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; agentid == &lt;span&gt;&quot;&quot;&lt;/span&gt;: &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每一次猜到keycode后,agentid都要减一位&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        agentid &lt;/span&gt;= agentid[:-1&lt;span&gt;]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; i == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 24 Apr 2018 06:35:00 +0000</pubDate>
<dc:creator>蝉时雨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/semishigure/p/8930257.html</dc:identifier>
</item>
<item>
<title>Docker快速入门 - ZingpLiu</title>
<link>http://www.cnblogs.com/zingp/p/8746449.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zingp/p/8746449.html</guid>
<description>&lt;p&gt;Docker是Go语言开发实现的容器。2013年发布至今，备受推崇。相关文档、学习资料十分详尽。近期公司docker项目要推进，得重新学习一下。博客以笔记。&lt;/p&gt;
&lt;h2&gt;1 容器诞生背景及优势&lt;/h2&gt;
&lt;p&gt;（1）软件开发和运维中，环境部署、配置，不胜其烦。举例说明，Python开发和部署都必须配置Python解释器；运维过程中，有时测试环境能通过，但是到线上却报错，究其原因，是环境不一致。&lt;br/&gt;传统运维过程中，线上有十台机器，每增加一台都需要重新部署一次，简直就是“体力劳动”。&lt;br/&gt;（2）虚拟机在一定程度可以解决这些问题，但是存在几个缺点：&lt;br/&gt;- 资源占用多 虚机启动需要占用几百M的内存。&lt;br/&gt;- 冗余步骤多 系统级别的操作步骤，往往无法跳过，比如用户登录。&lt;br/&gt;- 启动慢，往往几分钟 启动操作系统需要多久，启动虚拟机就需要多久。&lt;/p&gt;
&lt;p&gt;（3）容器优势&lt;br/&gt;容器不是模拟一个操作系统，而是对进程进行隔离。属于进程级别。&lt;br/&gt;- 启动快， 相当于启动本机底层系统的一个进程，而不是虚拟机内部的进程，速度快很多。&lt;br/&gt;- 占用资源少，容器只占用需要的资源，不占用那些没有用到的资源；多个容器可以共享资源，虚拟机是独享资源。&lt;br/&gt;- 体积小，容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。&lt;/p&gt;
&lt;p&gt;传统虚拟化示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986023/201804/986023-20180408154719185-788747055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;docker虚拟化示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986023/201804/986023-20180408154902787-1620366304.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2 Docker 基本概念&lt;/h2&gt;
&lt;p&gt;（1）镜像image&lt;/p&gt;
&lt;p&gt;Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。&lt;br/&gt;image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。&lt;/p&gt;
&lt;p&gt;image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。&lt;br/&gt;为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。&lt;/p&gt;
&lt;p&gt;（2）容器Container&lt;/p&gt;
&lt;p&gt;image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。&lt;/p&gt;
&lt;p&gt;（3）仓库Repository&lt;/p&gt;
&lt;p&gt;镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。&lt;br/&gt;一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。&lt;br/&gt;通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。&lt;/p&gt;
&lt;h2&gt;3 安装docker&lt;/h2&gt;
&lt;p&gt;以CentOS为例：&lt;/p&gt;
&lt;p&gt;Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 &lt;code&gt;overlay2&lt;/code&gt; 存储层驱动）无法使用，并且部分功能可能不太稳定。&lt;/p&gt;
&lt;p&gt;（1）卸载旧版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）安装依赖包&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
yum install -y yum-utils device-mapper-persistent-data lvm2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）安装国内源&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）安装docker-ce&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
yum makecache fast
yum install docker-ce　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以使用脚本自动安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh --mirror Aliyun
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）启动docker-ce&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
systemctl enable docker
systemctl start docker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986023/201804/986023-20180408162717596-180431331.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（6）创建docker用户组&lt;/p&gt;
&lt;p&gt;默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。&lt;/p&gt;
&lt;p&gt;因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# 建立 docker 组：
sudo groupadd docker

# 将当前用户加入 docker 组：
sudo usermod -aG docker $USER

# 退出当前终端并重新登录，进行如下测试　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：本次使用的是root用户。&lt;/p&gt;
&lt;p&gt;（7）测试docker是否安装成功&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker run hello-world　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果出现如下信息表明安装成功了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:bash;collapse:true;;gutter:false;&quot;&gt;
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
ca4f61b1923c: Pull complete
Digest: sha256:97ce6fa4b6cdc0790cda65fe7290b74cfebd9fa0c9b8c38e979330d547d22ce1
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（8）配置内核参数&lt;/p&gt;
&lt;p&gt;默认配置下，如果在 CentOS 使用 Docker CE 看到下面的这些警告信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
WARNING: bridge-nf-call-iptables is disabled
WARNING: bridge-nf-call-ip6tables is disabled
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加内核配置参数以启用这些功能：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
tee -a /etc/sysctl.conf &amp;lt;&amp;lt;EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新加载内核配置&lt;/p&gt;

&lt;h2&gt;4 获取镜像&lt;/h2&gt;
&lt;p&gt;从 Docker 镜像仓库获取镜像的命令是 &lt;code&gt;docker pull&lt;/code&gt;。其命令格式为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的选项可以通过 &lt;code&gt;docker pull --help&lt;/code&gt; 命令看到，这里我们说一下镜像名称的格式。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Docker 镜像仓库地址：地址的格式一般是 &lt;code&gt;&amp;lt;域名/IP&amp;gt;[:端口号]&lt;/code&gt;。默认地址是 Docker Hub。&lt;/li&gt;
&lt;li&gt;仓库名：如之前所说，这里的仓库名是两段式名称，即 &lt;code&gt;&amp;lt;用户名&amp;gt;/&amp;lt;软件名&amp;gt;&lt;/code&gt;。对于 Docker Hub，如果不给出用户名，则默认为 &lt;code&gt;library&lt;/code&gt;，也就是官方镜像。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，从镜像仓库获取nginx：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
2a72cbf407d6: Pull complete
e19f9e910af9: Pull complete
2f3d26a87e79: Pull complete
Digest: sha256:e36d7f5dabf1429d84135bb8a8086908e1150f1a178c75719a9e0e53ebb90353
Status: Downloaded newer image for nginx:latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）上诉命令中没有指定 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。&lt;br/&gt;（2）而镜像名称是 nginx，因此将会获取官方镜像 library/nginx 仓库中标签为 latest 的镜像。&lt;br/&gt;（3）从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。&lt;br/&gt;下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 sha256 的摘要，以确保下载一致性。&lt;br/&gt;（4）官方镜像是一直在维护，你所看到的层 ID 以及 sha256 的摘要可能和此处不一样。&lt;/p&gt;
&lt;p&gt;我们再获取一个官方的Ubuntu镜像看看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker pull ubuntu:16.04
16.04: Pulling from library/ubuntu
22dc81ace0ea: Pull complete
1a8b3c87dba3: Pull complete
91390a1c435a: Pull complete
07844b14977e: Pull complete
b78396653dae: Pull complete
Digest: sha256:e348fbbea0e0a0e73ab0370de151e7800684445c509d46195aef73e090a49bd6
Status: Downloaded newer image for ubuntu:16.04
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以ubuntu镜像为例，运行镜像&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker run -it --rm ubuntu:16.04 bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）docker run 就是运行容器的命令，具体格式可在后面阐述。&lt;br/&gt;（2）-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。&lt;br/&gt;（3）--rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。&lt;br/&gt;（4）ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。&lt;br/&gt;（5）bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。&lt;br/&gt;运行上诉命令后会进入ubuntu镜像示例的的shell界面，我们查看系统，结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
root@a1318dadbea3:/# cat /etc/os-release
NAME=&quot;Ubuntu&quot;
VERSION=&quot;16.04.4 LTS (Xenial Xerus)&quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&quot;Ubuntu 16.04.4 LTS&quot;
VERSION_ID=&quot;16.04&quot;
HOME_URL=&quot;http://www.ubuntu.com/&quot;
SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;
BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;
VERSION_CODENAME=xenial
UBUNTU_CODENAME=xenial
root@a1318dadbea3:/#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exit退出当前容器。&lt;/p&gt;
&lt;h2&gt;5 列出镜像&lt;/h2&gt;
&lt;p&gt;列出镜像的命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker image ls　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        6 days ago          109MB
ubuntu              16.04               f975c5035748        4 weeks ago         112MB
hello-world         latest              f2a91732366c        4 months ago        1.85kB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每列的含义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
REPOSITORY：仓库名 
TAG：标签， 一个镜像可以对应多个标签
IMAGE ID：镜像 ID，是镜像的唯一标识
CREATED：创建时间
SIZE：所占用的空间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：此处看到所占用空间与Docker Hub 上看到的镜像大小不同。&lt;br/&gt;比如，ubuntu:16.04 镜像大小，在这里是 112 MB，但是在 Docker Hub 显示的却是 43 MB。这是因为：&lt;br/&gt;（1）Docker Hub 中显示的体积是压缩后的体积。减小网络传输流量。&lt;br/&gt;（2）docker image ls 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。&lt;br/&gt;（3）docker image ls 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。&lt;br/&gt;由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。&lt;/p&gt;
&lt;h2&gt;6 查看镜像、容器、数据卷所占用的空间&lt;/h2&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker system df
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker system df
TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              3                   2                   221.4MB             112.4MB (50%)
Containers          2                   0                   0B                  0B
Local Volumes       0                   0                   0B                  0B
Build Cache                                                 0B                  0B
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7 虚悬镜像&lt;/h2&gt;
&lt;p&gt;仓库名和标签均为 &amp;lt;none&amp;gt;，这类无标签、无仓库名镜像被称 虚悬镜像(dangling image) 。&lt;/p&gt;
&lt;p&gt;镜像原本是有镜像名和标签的，比如原来为 mongo:3.2，随着官方镜像维护，发布了新版本后，重新 docker pull mongo:3.2 时，mongo:3.2 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 &amp;lt;none&amp;gt;。&lt;br/&gt;除了 docker pull 可能导致这种情况，docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 &amp;lt;none&amp;gt; 的镜像。&lt;/p&gt;
&lt;p&gt;虚悬镜像示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;lt;none&amp;gt;               &amp;lt;none&amp;gt;              00285df0df87        5 days ago          342 MB　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示虚悬镜像命令:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker image ls -f dangling=true　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除虚悬镜像：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker image prune
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;8 中间层镜像&lt;/h2&gt;
&lt;p&gt;为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 docker image ls 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker image ls -a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。&lt;br/&gt;实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。&lt;/p&gt;
&lt;h2&gt;9 按需列出镜像&lt;/h2&gt;
&lt;p&gt;（1）列出部分镜像&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker image ls redis    按仓库名过滤
docker image ls redis:3.2   按仓库名和标签过滤
docker image ls -f since=redis:3.2.11    列出redis:3.2.11之后建立的镜像
docker image ls -f before=redis:3.2      列出redis:3.2之前建立的镜像　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        2 weeks ago         109MB
redis               latest              c5355f8853e4        3 weeks ago         107MB
redis               3.2                 b05c3d76c8b3        5 weeks ago         99.7MB
redis               3.2.11              b05c3d76c8b3        5 weeks ago         99.7MB
ubuntu              16.04               f975c5035748        6 weeks ago         112MB
hello-world         latest              f2a91732366c        5 months ago        1.85kB
[@sjs_123_183 ~]# docker image ls redis
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               latest              c5355f8853e4        3 weeks ago         107MB
redis               3.2                 b05c3d76c8b3        5 weeks ago         99.7MB
redis               3.2.11              b05c3d76c8b3        5 weeks ago         99.7MB
[@sjs_123_183 ~]# docker image ls redis:3.2
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               3.2                 b05c3d76c8b3        5 weeks ago         99.7MB
[@sjs_123_183 ~]# docker image ls -f since=redis:3.2.11
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        2 weeks ago         109MB
redis               latest              c5355f8853e4        3 weeks ago         107MB
[@sjs_123_183 ~]# docker image ls -f before=redis:3.2
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              16.04               f975c5035748        6 weeks ago         112MB
hello-world         latest              f2a91732366c        5 months ago        1.85kB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）自定义输出格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker images --filter  &quot;条件&quot;   按条件过滤　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker images --filter  &quot;since=redis:3.2&quot;
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        2 weeks ago         109MB
redis               latest              c5355f8853e4        3 weeks ago         107MB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）使用go语言模板语法&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker images --format &quot;{{.ID}} &amp;lt;--&amp;gt; {{.Repository}}&quot;              # 按 ID &amp;lt;--&amp;gt; 仓库名格式列出
docker images --format &quot;table {{.ID}}\t{{.Repository}}\t{{.Tag}}&quot;   # 按ID 仓库 标签的格式列出　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker images --format &quot;{{.ID}} &amp;lt;--&amp;gt; {{.Repository}}&quot;
c5c4e8fa2cf7 &amp;lt;--&amp;gt; nginx
c5355f8853e4 &amp;lt;--&amp;gt; redis
b05c3d76c8b3 &amp;lt;--&amp;gt; redis
b05c3d76c8b3 &amp;lt;--&amp;gt; redis
f975c5035748 &amp;lt;--&amp;gt; ubuntu
f2a91732366c &amp;lt;--&amp;gt; hello-world
[@sjs_123_183 ~]# docker images --format &quot;table {{.ID}}\t{{.Repository}}\t{{.Tag}}&quot;
IMAGE ID            REPOSITORY          TAG
c5c4e8fa2cf7        nginx               latest
c5355f8853e4        redis               latest
b05c3d76c8b3        redis               3.2
b05c3d76c8b3        redis               3.2.11
f975c5035748        ubuntu              16.04
f2a91732366c        hello-world         latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用go语言模板：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
.ID                    # 镜像ID
.Repository           # 镜像仓库名
.Tag              # 镜像标签
.Digest           # 镜像摘要
.CreatedSince     # 镜像创建到现在的耗时
.CreatedAt            # 镜像创建时间
.Size             # 镜像大小
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;10 删除镜像&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;10.1 单台删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;删除本地镜像的命令是docker image rm,用法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
 docker image rm [选项] &amp;lt;镜像1&amp;gt; [&amp;lt;镜像2&amp;gt; ...]　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）&amp;lt;镜像&amp;gt; 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要。&lt;br/&gt;（2）也可以使用镜像名，即 &amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt; 删除镜像。&lt;br/&gt;（3）更精确的是使用 镜像摘要 删除镜像。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;删除行为分为两类，一类是 Untagged，另一类是 Deleted。&lt;br/&gt;镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。&lt;br/&gt;因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。&lt;br/&gt;（1）所以首先需要做的是&lt;strong&gt;将满足我们要求的所有镜像标签都取消，这就是我们看到的 Untagged 的信息&lt;/strong&gt;。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 Delete 行为就不会发生。所以并非所有的 docker rmi 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。&lt;br/&gt;（2）当该镜像&lt;strong&gt;所有的标签都被取消了&lt;/strong&gt;，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 docker pull 看到的层数不一样的源。&lt;br/&gt;（3）除了镜像依赖以外，还需要注意的是&lt;strong&gt;容器对镜像的依赖&lt;/strong&gt;。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        2 weeks ago         109MB
redis               latest              c5355f8853e4        3 weeks ago         107MB
redis               3.2                 b05c3d76c8b3        5 weeks ago         99.7MB
redis               3.2.11              b05c3d76c8b3        5 weeks ago         99.7MB
ubuntu              16.04               f975c5035748        6 weeks ago         112MB
hello-world         latest              f2a91732366c        5 months ago        1.85kB
[@sjs_123_183 ~]#
[@sjs_123_183 ~]#
[@sjs_123_183 ~]# docker image rm redis:3.2.11
Untagged: redis:3.2.11
[@sjs_123_183 ~]#
[@sjs_123_183 ~]#
[@sjs_123_183 ~]# docker image rm f97
Untagged: ubuntu:16.04
Untagged: ubuntu@sha256:e348fbbea0e0a0e73ab0370de151e7800684445c509d46195aef73e090a49bd6
Deleted: sha256:f975c50357489439eb9145dbfa16bb7cd06c02c31aa4df45c77de4d2baa4e232
Deleted: sha256:0bd983fc698ee9453dd7d21f8572ea1016ec9255346ceabb0f9e173b4348644f
Deleted: sha256:08fe90e1a1644431accc00cc80f519f4628dbf06a653c76800b116d3333d2b6d
Deleted: sha256:5dc5eef2b94edd185b4d39586e7beb385a54b6bac05d165c9d47494492448235
Deleted: sha256:14a40a140881d18382e13b37588b3aa70097bb4f3fb44085bc95663bdc68fe20
Deleted: sha256:a94e0d5a7c404d0e6fa15d8cd4010e69663bd8813b5117fbad71365a73656df9
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;10.2 批量删除&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;用-docker-image-ls-命令来配合&quot;&gt;用 docker image ls 命令来配合批量删除本地镜像。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
docker image rm $(docker image ls -q redis)                # 删除所有仓库名为 redis 的镜像
docker image rm $(docker image ls -q -f before=mongo:3.2)  # 删除所有在 mongo:3.2 之前的镜像　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
[@sjs_123_183 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        2 weeks ago         109MB
redis               latest              c5355f8853e4        3 weeks ago         107MB
redis               3.2                 b05c3d76c8b3        5 weeks ago         99.7MB
hello-world         latest              f2a91732366c        5 months ago        1.85kB
[@sjs_123_183 ~]# docker image rm $(docker image ls -q redis)
Untagged: redis:latest
Untagged: redis@sha256:6b9f935e89af002225c0dcdadf1fd74245b4cc1e3e91222f7e4769c236cf80d4
Deleted: sha256:c5355f8853e4174a55144edfec23ac37f5bb2200ed838dab53c13c7cc835ab15
Deleted: sha256:65f4f6d6a5f66e424046ccfe359ba5668f2905ec688a8ca62079dfd7946bb989
Deleted: sha256:3f490bf3919344e7ba4acd58824bd24a9479374d6b1d67b59bab7cda118572cf
Deleted: sha256:678c0094f27aa1100c30946b9d55981537a107639e71527b5f54ff3de54c12d7
Untagged: redis:3.2
Untagged: redis@sha256:fd310669f5f1be3d96cfe560264cacd5067d6b03b35764b608ada2db98be6208
Deleted: sha256:b05c3d76c8b3ef3af8974edda3941a4a028d244681cc420e5304a3829519f1b6
Deleted: sha256:c7310f74bc14105a3f09a921aeec7feb031f70a95be81ceacc42690efcdc146d
Deleted: sha256:7d7786b85eeb28eba62636c3088e535ddbe1640a9632aab550f9a58c0c011faa
Deleted: sha256:635b643d26091e3396661ab3b2e08d59110d5ecec236eb100168ced03cf7630b
Deleted: sha256:05ffc1bd56d27d29a8a9c36c77dca93ba19dabc77adaf9d3a1ff44c760c3690d
Deleted: sha256:1df131a973126fb31c35ca41b2071da4bffcbed7ab8456635b699772e9ad0d8b
Deleted: sha256:43efe85a991cac5894f91ee8f45b328bbacd14966d89a8a00b0d06060c64b5ad
[@sjs_123_183 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              c5c4e8fa2cf7        2 weeks ago         109MB
hello-world         latest              f2a91732366c        5 months ago        1.85kB
&lt;/pre&gt;&lt;/div&gt;














</description>
<pubDate>Tue, 24 Apr 2018 06:07:00 +0000</pubDate>
<dc:creator>ZingpLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zingp/p/8746449.html</dc:identifier>
</item>
<item>
<title>关于ajax的content-download时间过慢问题的解决方案与思考 - 毛绒猫猫</title>
<link>http://www.cnblogs.com/maorongmaomao/p/8929655.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/maorongmaomao/p/8929655.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;做前端架构很久很久了，经常到我这里都是些棘手的问题，之前没有养成很好的记录问题的习惯，以后会努力成文，积累。&lt;/p&gt;
&lt;p&gt;于是今天就有个这篇文章。关于ajax的content-download时间过慢问题的解决与思考&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;事件背景：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;开发人员反馈给我一个bug，ajax相应速度很慢，经过定位，速度慢的原因在于，content-download时间过长，在chrome中有2s+的延迟，后证实在我们的手机客户端里也有这一延迟。截图如下：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/354376/201804/354376-20180424134223003-707132119.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;过程分析：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.定位原因：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，看到这一延迟，第一反应这不是前端bug，并反馈给后端同学。but，通过后端定位发现接口反馈时间非常迅速，翻阅国外文献事实证明，这是由于浏览器事件不标准引起的bug。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.bug分析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过对开发同学的沟通，我发现bug有两个特点，第一，这一延迟只存在需要上拉加载而引起ajax请求的情况下，且统一环境和浏览器下延迟时间相似，都在2-3s之间。&lt;/p&gt;
&lt;p&gt;第二，部分上拉加载的组件虽然也触发ajax，但并未有延迟。&lt;/p&gt;

&lt;p&gt;于是开始了前端，原因的定位，首先找想通点：由于我们的项目架构设计，全部的上拉加载都是由一个基础组件pagger 完成的，其部分代码如图所示，原理是通过浏览器的scroll事件和resize事件不停的去检测组件是否在可视区域中，如果是则触发hasMore函数。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/354376/201804/354376-20180424134240671-1883754270.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;其次，查看出现延迟问题的业务页面和不出现延迟的业务页面对这一组件的调用区别。&lt;/p&gt;
&lt;p&gt;通过对比，也没有发现两个组件有何不同。（故这一奥秘，有兴趣的同学可以联系我一起讨论。。。。。我可以把源码发给你）&lt;/p&gt;

&lt;p&gt;经过多次的重现问题，明显看到在pc的chrome，使用touch模式延迟偶尔消失，而使用mousewheel延迟又出现。故将问题定位到mousewheel事件 和其相近对应的 scroll事件中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;bug解决：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;结合上诉原因并通过查看的几个帖子讨论，得出如下结论：&lt;/p&gt;

&lt;p&gt;1.chrome浏览器的mousewheel事件是引起这一延迟的原因（mousewheel事件不是标准事件，不推荐大家使用），当然！代码中我并没有使用mousewheel事件，但是使用scroll事件就可能会引起mousewheel事件的冲突，而在我们特质的手机客户端中的webview不幸的也命中了这一缺陷。&lt;/p&gt;
&lt;p&gt;2.想要解决这个问题，可以尝试监听这一事件（如果浏览器没有这一事件，也不会响应这一监听，没有冲突），并在事件触发的时候，取消其所有默认行为：&lt;/p&gt;
&lt;p&gt;故通过监听其事件模型的 deltaY（鼠标垂直滚动量）当其有垂直位移的时候，触发preventDefault，故代码如下：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; window.addEventListener(&quot;mousewheel&quot;, (e) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (e.deltaY === 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        e.preventDefault();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;将这段代码加入前端基础库的页面初始化代码中，神奇的发现相关的页面content-download延迟问题都得到了解决。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;兼容性问题的本质：    &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;webkit架构中，有一些模块在浏览器中是普遍不共享的，有一些模块在浏览器中是某些特性不共享的，而且可以通过不同的编译配置改变它们的行为。所以，很多使用webkit的浏览器可能会表现出不同的行为。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决这些“神奇”问题，还是需要耐心，协作和另辟蹊径啊&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;参考：&lt;/p&gt;



</description>
<pubDate>Tue, 24 Apr 2018 05:45:00 +0000</pubDate>
<dc:creator>毛绒猫猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/maorongmaomao/p/8929655.html</dc:identifier>
</item>
<item>
<title>Chrome的First Paint - 落花落雨不落叶</title>
<link>http://www.cnblogs.com/hongrunhui/p/8929001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hongrunhui/p/8929001.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;First paint 直译过来的意思就是浏览器第一次渲染(paint)，在First paint之前是白屏，在这个时间点之后用户就能看到（部分）页面内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以研究这个First Paint的触发时机对于优化浏览器页面的首屏渲染时间有很重要的作用。&lt;/p&gt;
&lt;p&gt;在正题开始之前，先说下浏览器的页面的加载流程（大体过程是这样，并不精确，只是为了帮助理解后面内容）：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;浏览器输入url，浏览器发送请求到服务器，服务器将请求的HTML返回给浏览器。&lt;/li&gt;
&lt;li&gt;浏览器下载完成HTML(Finish Loading HTML)之后，便开始从上到下解析。&lt;/li&gt;
&lt;li&gt;解析的过程中碰到css和js外链（其实HTML的下载也是这个流程）都会执行以下过程：
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;Send Request&lt;/code&gt;:表示给这个外链对应的服务器发送请求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Receive Response&lt;/code&gt;: 表示接收响应，这里是表示告诉浏览器可以开始从网络接收数据了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Receive Data&lt;/code&gt;:表示开始接收数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Finish Loading&lt;/code&gt;: 表示已经完成下载数据。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Parse Stylesheet/Evaluate&lt;/code&gt;（默认情况下js下载完成之后执行&lt;code&gt;Evaluate&lt;/code&gt;，css下载完成后会进行&lt;code&gt;Parse Stylesheet&lt;/code&gt;）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;所有的css下载完成后&lt;code&gt;Parse Stylesheet&lt;/code&gt;然后开始构建CSSOM&lt;/li&gt;
&lt;li&gt;DOM（文档对象模型）和 CSSOM（CSS对象模型）会合并生成一个渲染树(&lt;code&gt;Render Tree&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;根据渲染树的内容计算处各个节点在网页中的大小和位置（&lt;code&gt;Layout&lt;/code&gt;，可以理解为“刻章”）&lt;/li&gt;
&lt;li&gt;根据Layout绘制内容在浏览器上（&lt;code&gt;Paint&lt;/code&gt;，可以理解为“盖章”）。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-1.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;正题开始&quot;&gt;正题开始&lt;/h2&gt;
&lt;p&gt;在最新版的Chrome的&lt;code&gt;perfomance&lt;/code&gt;中是能直接看到First Paint这个时间点的，为了方便大家测试，我就直接拿谷歌这个示例页面来做演示:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googlesamples.github.io/web-fundamentals/fundamentals/performance/critical-rendering-path/measure_crp_timing.html&quot;&gt;测试页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用chrome打开上面链接，最好是隐身模式，防止插件乱入影响判断，按F12或者右键检查元素打开控制台先切换到&lt;code&gt;Network&lt;/code&gt;选项,勾选禁用缓存(缓存也会影响到判断)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F1.png&quot; alt=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;切换到&lt;code&gt;Perfomance&lt;/code&gt;，勾选&lt;code&gt;Screenshots&lt;/code&gt;并点击红框进行页面分析（会自动停止的，不用点stop）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-2.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析完后可以看到如下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中的绿色的线就是当前页面第一次出现内容的时间点，可以将鼠标放到&lt;code&gt;Main&lt;/code&gt;上面的&lt;code&gt;Network&lt;/code&gt;中绿色的线附近可以看到在他之前页面空白，在他之后就有内容。&lt;br/&gt;除了绿色的线还有蓝色以及红色的线，这里也解释一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-4.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;简单讲一下&lt;code&gt;DOMContentLoaded&lt;/code&gt;、&lt;code&gt;load&lt;/code&gt;的区别：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;是HTML文档（包括CSS、JS）被加载以及解析完成之后触发（即 &lt;code&gt;HTML-&amp;gt;DOM&lt;/code&gt;的过程完成 ）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt;则是在页面的其他资源如图片、字体、音频、视频加载完成之后触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt;事件一般在&lt;code&gt;DOMContentLoaded&lt;/code&gt;之后才触发（也有可能在它之前哦）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这个时候发现绿色虚线之前有一个浅绿色方块，相应的解释如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-5.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-6.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由图可以得出“浅绿色”代表的是&lt;strong&gt;根据CSSOM计算样式并进行布局绘制&lt;/strong&gt;的过程，这段时间内浏览器做了一下事情：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;Recalculate Style&lt;/code&gt;:重新计算样式，确定DOM元素的样式规则（定规则）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Layout&lt;/code&gt;:根据计算结果进行布局，确定元素的大小和位置（刻章）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Update Layer Tree&lt;/code&gt;: 更新渲染层树&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Paint&lt;/code&gt;: 绘制，根据前面的Layer Tree绘制页面（位置、大小、颜色、边框、阴影等）（盖章）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Composite Layers&lt;/code&gt;： 形成层，浏览器按照合理的顺序合并成一个图层然后输出到屏幕（给别人看）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-8.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那什么时候开始&lt;code&gt;First paint&lt;/code&gt;呢?在浅绿色方块最前面的虚线往前看，发现在灰色虚线之前都会有一个步骤：就是&lt;code&gt;Parse Stylesheet&lt;/code&gt;（调研了很多页面都是如此）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2FfirstPaint-9.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，First Paint的加载流程应该是这样：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;所有的CSS加载完成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Parse Stylesheet&lt;/code&gt;：构建出CSSOM&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Recalculate Style&lt;/code&gt;：重新计算样式，确定DOM元素的样式规则（定规则）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Layout&lt;/code&gt;：根据计算结果进行布局，确定元素的大小和位置（刻章）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Update Layer Tree&lt;/code&gt;：更新渲染层树&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Paint&lt;/code&gt;：绘制，根据前面的Layer Tree绘制页面（位置、大小、颜色、边框、阴影等）（盖章）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Composite Layers&lt;/code&gt;：形成层，浏览器按照合理的顺序合并成一个图层然后输出到屏幕（给别人看）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;但是现在还只是确定了&lt;code&gt;First Paint&lt;/code&gt;的加载流程，也确定了他是在所有CSS执行完&lt;code&gt;Parse Stylesheet&lt;/code&gt;之后才会触发，但是这还是不够准确啊，所以我找了一些CSS和JS的外链来测试，模板如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.css&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/jqueryui/1.12.1/jquery-ui.css&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/vue/2.5.13/vue.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/react/16.4.0-alpha.0911da3/cjs/react.development.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;https://cdn.bootcss.com/angular.js/2.0.0-beta.17/angular2.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'root1'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        1
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'root2'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        2
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'root3'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        3
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们通过改变上面模板里的外链顺序来探究：&lt;/p&gt;
&lt;h3 id=&quot;第一种情况&quot;&gt;第一种情况：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F1%2FSnipaste_2018-04-23_19-29-12.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F1%2FSnipaste_2018-04-23_19-31-12.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现FP发生在最后（实心的蓝色线是按&lt;code&gt;shift&lt;/code&gt;出来的，不是&lt;code&gt;DOMContentLoaded&lt;/code&gt;）,现在还发现不了什么。&lt;/p&gt;
&lt;h3 id=&quot;第二种情况&quot;&gt;第二种情况：&lt;/h3&gt;
&lt;p&gt;调换&lt;code&gt;head&lt;/code&gt;中CSS和JS外链位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F2%2FSnipaste_2018-04-23_19-31-59.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F2%2FSnipaste_2018-04-23_19-33-03.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;仍然发现不了什么&lt;/p&gt;
&lt;h3 id=&quot;第三种情况&quot;&gt;第三种情况&lt;/h3&gt;
&lt;p&gt;把CSS放&lt;code&gt;head&lt;/code&gt;，JS放&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;前&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F3%2FSnipaste_2018-04-23_19-31-59.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F3%2FSnipaste_2018-04-23_19-38-26.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现&lt;code&gt;FP&lt;/code&gt;竟然在蓝色和红色虚线前面出现，通过这点可以确定，&lt;code&gt;FP&lt;/code&gt;还跟JS外链的位置有关，继续:&lt;/p&gt;
&lt;h3 id=&quot;第四种情况&quot;&gt;第四种情况：&lt;/h3&gt;
&lt;p&gt;JS外链放&lt;code&gt;head&lt;/code&gt;，CSS放&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;前&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F4%2FSnipaste_2018-04-23_19-39-23.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F4%2FSnipaste_2018-04-23_19-39-52.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现又跟第一二种情况一样了，所以这种用法是不可取的。&lt;/p&gt;
&lt;h3 id=&quot;第五种情况&quot;&gt;第五种情况：&lt;/h3&gt;
&lt;p&gt;CSS和JS都放&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;前，且CSS紧贴在&lt;code&gt;div&lt;/code&gt;后面，JS在CSS后面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F5%2FSnipaste_2018-04-23_19-40-18.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F5%2FSnipaste_2018-04-23_19-41-21.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以发现&lt;code&gt;FP&lt;/code&gt;居然更快触发，&lt;strong&gt;但是我鼠标hover到绿色虚线后，仍然是白屏，只有等到CSS加载完成执行&lt;code&gt;Parse Stylesheet&lt;/code&gt;之后才显示出内容&lt;/strong&gt;（说明这种用法也不可取），难道body中的CSS也会影响？&lt;/p&gt;
&lt;h3 id=&quot;第六种情况&quot;&gt;第六种情况：&lt;/h3&gt;
&lt;p&gt;掉换一下上面CSS和JS的位置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F6%2FSnipaste_2018-04-23_19-41-55.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F6%2FSnipaste_2018-04-23_19-42-29.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现这次&lt;code&gt;FP&lt;/code&gt;触发而且立马有内容，而等到CSS加载完成之后还会再重新渲染一次，嗯，看来body中的第一个JS脚本有猫腻，接下来的情况对他特殊照顾。&lt;/p&gt;
&lt;h3 id=&quot;第七种情况&quot;&gt;第七种情况：&lt;/h3&gt;
&lt;p&gt;CSS放&lt;code&gt;head&lt;/code&gt;中，JS放在&lt;code&gt;div&lt;/code&gt;节点中间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F7%2FSnipaste_2018-04-23_19-43-08.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2F7%2FSnipaste_2018-04-23_19-43-49.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;哈哈，居然只渲染了12俩字，说明浏览器会渲染body中脚本之前的内容，那会是哪个脚本之前的内容呢？&lt;/p&gt;
&lt;h3 id=&quot;第八种情况&quot;&gt;第八种情况：&lt;/h3&gt;
&lt;p&gt;在div之间都插入脚本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-07-03.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-06-52.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看来浏览器会提前渲染&lt;code&gt;body&lt;/code&gt;中第一个脚本前的内容（&lt;code&gt;我们就把body中的第一个外链脚本叫做【第一脚本】吧&lt;/code&gt;），并且&lt;strong&gt;第一脚本&lt;/strong&gt;还会在FP之后才执行。所以结合之前得出的结论，在CSSOM准备就绪之后，浏览器会提前渲染第一脚本前的内容，我们可以用第九种情况来验证：&lt;/p&gt;
&lt;h3 id=&quot;第九种情况&quot;&gt;第九种情况：&lt;/h3&gt;
&lt;p&gt;这种情况和上种没什么区别，只是增加了一个CSS，这个CSS中还会发出一个请求去加载其他CSS（通过&lt;code&gt;@import url()&lt;/code&gt;的方式），所以CSS的加载时间很长。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-19-44.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-19-35.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过结果可以看出，123在CSS下载完成之后才渲染，而不是单独渲染一个1，所以&lt;code&gt;FP&lt;/code&gt;必须得等到&lt;code&gt;CSSOM&lt;/code&gt;准备就绪之后才会触发，否则即使有第一脚本在也没用。&lt;br/&gt;所以到这里，我们总算可以下结论了：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;FP发生在body中第一个script脚本之前的CSS解析和JS执行完成之后。换句话说就是第一脚本之前的&lt;code&gt;DOM&lt;/code&gt;和&lt;code&gt;CSSOM&lt;/code&gt;准备就绪之后，便会着手渲染第一脚本前的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是...你以为到这里就结束了？其实没有。&lt;/p&gt;
&lt;h3 id=&quot;第十种情况&quot;&gt;第十种情况：&lt;/h3&gt;
&lt;p&gt;这种情况中，&lt;code&gt;head&lt;/code&gt;中既有JS也有CSS，&lt;code&gt;body&lt;/code&gt;中也有第一脚本存在：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-34-55.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-35-11.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意上图中的&lt;code&gt;vue.js&lt;/code&gt;是在&lt;code&gt;head&lt;/code&gt;中的，而后面的JS文件都在&lt;code&gt;body&lt;/code&gt;中，而且，&lt;code&gt;vue.js&lt;/code&gt;加载完成之后，&lt;code&gt;body&lt;/code&gt;中的JS还没下载完成，这个时候我们调换一下&lt;code&gt;vue.js&lt;/code&gt;和&lt;code&gt;angular2.js&lt;/code&gt;的位置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-37-53.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-15-37-46.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看，这个时候又没有提前渲染了，123等到所有JS文件都执行完之后才渲染，这种情况除了验证了第九点的结论，还能补充我们的结论：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;如果第一脚本前的JS和CSS加载完了，&lt;code&gt;body&lt;/code&gt;中的脚本还未下载完成，那么浏览器就会利用构建好的局部&lt;code&gt;CSSOM&lt;/code&gt;和&lt;code&gt;DOM&lt;/code&gt;提前渲染第一脚本前的内容（触发&lt;code&gt;FP&lt;/code&gt;）；如果第一脚本前的JS和CSS都还没下载完成，&lt;code&gt;body&lt;/code&gt;中的脚本就已经下载完了，那么浏览器就会在所有JS脚本都执行完之后才触发FP。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到这里本次探究就结束了，其实还有很多种情况，感兴趣的可以自己去试试。&lt;/p&gt;
&lt;h2 id=&quot;建议&quot;&gt;建议：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;CSS放在head中，JS放在&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;前（如果在head必须放JS，也尽量减少他的大小，把大JS文件放&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;前）。&lt;/li&gt;
&lt;li&gt;减小head中CSS和JS大小（&lt;code&gt;gzip&lt;/code&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012800222&quot;&gt;了解一下？&lt;/a&gt;)，&lt;/li&gt;
&lt;li&gt;优化head中的JS和CSS外链的网络情况，减少&lt;code&gt;Stalled&lt;/code&gt;、&lt;code&gt;TTFB&lt;/code&gt;和&lt;code&gt;Content Download&lt;/code&gt;的时间。&lt;/li&gt;
&lt;li&gt;在第一脚本前使用骨架图，可以减少用户的白屏感知时间（对于使用JS插入模板来渲染的框架，建议将骨架图的路由生成逻辑单独提出来）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;科普一下&quot;&gt;科普一下&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Chrome&lt;/code&gt;会渲染局部&lt;code&gt;CSSOM&lt;/code&gt;和&lt;code&gt;DOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;First Paint&lt;/code&gt;和&lt;code&gt;DOMContentLoaded&lt;/code&gt;、&lt;code&gt;load&lt;/code&gt;事件的触发没有绝对的关系，&lt;code&gt;FP&lt;/code&gt;可能在他们之前，也可能在他们之后，这取决于影响他们触发的因素的各自时间（&lt;code&gt;FP&lt;/code&gt;：&lt;code&gt;第一脚本&lt;/code&gt;前&lt;code&gt;CSSOM&lt;/code&gt;和&lt;code&gt;DOM&lt;/code&gt;的构建速度；&lt;code&gt;DOMContentLoaded&lt;/code&gt;：&lt;code&gt;HTML&lt;/code&gt;文档自身以及&lt;code&gt;HTML&lt;/code&gt;文档中所有&lt;code&gt;JS&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;的加载速度；&lt;code&gt;load&lt;/code&gt;：图片、音频、视频、字体的加载速度）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;和&lt;code&gt;load&lt;/code&gt;事件也没有强制的先后顺序，&lt;code&gt;DOMContentLoaded&lt;/code&gt;一般在&lt;code&gt;load&lt;/code&gt;事件之前触发，但也可能在&lt;code&gt;load&lt;/code&gt;事件之后触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;第一脚本&lt;/code&gt;前的CSS如果还会去加载字体文件，那么即使&lt;code&gt;CSSOM&lt;/code&gt;和&lt;code&gt;DOM&lt;/code&gt;构建完成触发&lt;code&gt;FP&lt;/code&gt;，页面内容也会是空白，只有等到字体文件下载完成才会出现内容（这也是我们在打开一个加载了谷歌字体的网站会白屏很长时间的原因）。&lt;/li&gt;
&lt;li&gt;默认情况下，&lt;code&gt;CSS&lt;/code&gt;外链之间是谁先加载完成谁先解析，但是&lt;code&gt;JS&lt;/code&gt;外链之间即使先加载完成，也得按顺序执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;外链后面紧跟&lt;code&gt;script&lt;/code&gt;外链，须先等&lt;code&gt;link parse&lt;/code&gt;完成之后，&lt;code&gt;script&lt;/code&gt;才会执行，即使&lt;code&gt;script&lt;/code&gt;先下载完成。&lt;code&gt;script&lt;/code&gt;后面紧跟&lt;code&gt;link&lt;/code&gt;，也是一样，会等&lt;code&gt;script&lt;/code&gt;执行完之后，&lt;code&gt;link&lt;/code&gt;才会&lt;code&gt;parse&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;script&lt;/code&gt;之后紧跟几个&lt;code&gt;link&lt;/code&gt;且&lt;code&gt;script&lt;/code&gt;比这几个&lt;code&gt;link&lt;/code&gt;的下载时间都长，那&lt;code&gt;script&lt;/code&gt;执行完成之后&lt;code&gt;link&lt;/code&gt;是按顺序执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RRDL&lt;/code&gt;：
&lt;ul&gt;&lt;li&gt;R：send &lt;strong&gt;R&lt;/strong&gt;equest，发送资源请求&lt;/li&gt;
&lt;li&gt;R：receive &lt;strong&gt;R&lt;/strong&gt;esponse，接收到服务端响应&lt;/li&gt;
&lt;li&gt;D：receive &lt;strong&gt;D&lt;/strong&gt;ata，开始接受服务端数据(一个资源可能执行多次)&lt;/li&gt;
&lt;li&gt;L：finish &lt;strong&gt;L&lt;/strong&gt;oading，完成资源下载&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;浏览器在&lt;code&gt;RRDL&lt;/code&gt;的时候，在&lt;code&gt;D（Receive data）&lt;/code&gt;这个步骤可能执行多次。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TTFB&lt;/code&gt;:&lt;code&gt;Time To First Byte&lt;/code&gt;，第一个字节返回的时间，这个是对应&lt;code&gt;send Request&lt;/code&gt;到&lt;code&gt;receive Response&lt;/code&gt;这段时间。&lt;/li&gt;
&lt;li&gt;浏览器会给HTML中的资源文件进行等级分类（&lt;code&gt;Hightest/High/Meduim/Low/Lowest&lt;/code&gt;）,一般&lt;code&gt;HTML&lt;/code&gt;文档自身、&lt;code&gt;head&lt;/code&gt;中的CSS都是&lt;code&gt;Hightest&lt;/code&gt;，&lt;code&gt;head&lt;/code&gt;中JS一般是&lt;code&gt;High&lt;/code&gt;，而图片一般是&lt;code&gt;Low&lt;/code&gt;，而设置了&lt;code&gt;async/defer&lt;/code&gt;的脚本一般是&lt;code&gt;Low&lt;/code&gt;，&lt;code&gt;gif&lt;/code&gt;图片一般是&lt;code&gt;Lowest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;下图中的资源文件浅色和深色和第二个图画红框的位置是对应的（不信自己计算一下对应的时间）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-16-04-40.jpg&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://eux-blog-static.bj.bcebos.com/fp%2Fnew%2F2018-04-13-16-05-44.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=zh-cn&quot;&gt;分析关键渲染路径性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://harttle.land/2016/11/26/static-dom-render-blocking.html&quot;&gt;CSS/JS对DOM渲染的影响&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amfe/article/issues/47&quot;&gt;CSS Animation性能优化&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 24 Apr 2018 05:14:00 +0000</pubDate>
<dc:creator>落花落雨不落叶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hongrunhui/p/8929001.html</dc:identifier>
</item>
<item>
<title>【js-xlsx和file-saver插件】前端导出数据到excel - 婷风</title>
<link>http://www.cnblogs.com/jtjds/p/8892510.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jtjds/p/8892510.html</guid>
<description>&lt;p&gt;　　最近在做项目，前端进行处理数据，导出excel中，还是遇到不少问题，这里将其进行总结一下，博主是vue框架开发，借用file-saver和xlsx插件进行导出excel,我们来看下代码和效果。地址链接如下：&lt;a href=&quot;https://www.npmjs.com/package/js-xlsx&quot; target=&quot;_blank&quot;&gt;https://www.npmjs.com/package/js-xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　博主自己封装了一个方法xlsx.js，然后在vue中进行调用就行，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
import fs from 'file-saver'&lt;span&gt;
import XLSX from &lt;/span&gt;'xlsx'&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; (json, fields, filename = '测试数据.xlsx') =&amp;gt;&lt;span&gt; {

    json.forEach(item &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; item) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (fields.hasOwnProperty(i)) {
                item[fields[i]] &lt;/span&gt;=&lt;span&gt; item[i];
            }
            &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt; item[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除原先的对象属性&lt;/span&gt;
&lt;span&gt;        }
    })

    let sheetName &lt;/span&gt;= filename &lt;span&gt;//&lt;/span&gt;&lt;span&gt;excel的文件名称&lt;/span&gt;
    let wb = XLSX.utils.book_new()  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;工作簿对象包含一SheetNames数组，以及一个表对象映射表名称到表对象。XLSX.utils.book_new实用函数创建一个新的工作簿对象。&lt;/span&gt;
    let ws = XLSX.utils.json_to_sheet(json, { header: Object.values(fields) }) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将JS对象数组转换为工作表。&lt;/span&gt;
&lt;span&gt;    wb.SheetNames.push(sheetName)
    wb.Sheets[sheetName] &lt;/span&gt;=&lt;span&gt; ws
    const defaultCellStyle &lt;/span&gt;= { font: { name: &quot;Verdana&quot;, sz: 13, color: &quot;FF00FF88&quot; }, fill: { fgColor: { rgb: &quot;FFFFAA00&quot; } } };&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置表格的样式&lt;/span&gt;
    let wopts = { bookType: 'xlsx', bookSST: &lt;span&gt;false&lt;/span&gt;, type: 'binary', cellStyles: &lt;span&gt;true&lt;/span&gt;, defaultCellStyle: defaultCellStyle, showGridLines: &lt;span&gt;false&lt;/span&gt; }  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入的样式&lt;/span&gt;
    let wbout =&lt;span&gt; XLSX.write(wb, wopts)
    let blob &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Blob([s2ab(wbout)], { type: 'application/octet-stream'&lt;span&gt; })
    fs.saveAs(blob, filename &lt;/span&gt;+ '.xlsx'&lt;span&gt;)
}

const s2ab &lt;/span&gt;= s =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; ArrayBuffer !== 'undefined'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buf = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayBuffer(s.length)
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; view = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uint8Array(buf)
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp;amp; 0xff
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; buf
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buf = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array(s.length);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i != s.length; ++i) buf[i] = s.charCodeAt(i) &amp;amp; 0xFF&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; buf;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 调用当时如下，现在vue种引入该js文件，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import xlsx from &quot;../../utils/xlsx.js&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们开始调用该方法，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
　　　　　&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
         * 导出到excel
         *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        exportToExcel() {
            let fields &lt;/span&gt;=&lt;span&gt; {
                test1:&lt;/span&gt;&quot;测试1&quot;&lt;span&gt;,
                test2:&lt;/span&gt;&quot;测试2&quot;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getHeadMapList.forEach(item =&amp;gt;&lt;span&gt; {
                fields[&lt;/span&gt;'_' +item.key] =&lt;span&gt; item.value; //动态生成的头
            });
            fields.totalCommission &lt;/span&gt;= &quot;奖励总数&quot;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处有vue大坑，不能直接使用xlsx(this.getComputedData),必须先转一下&lt;/span&gt;
            let data = JSON.parse(JSON.stringify(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;getComputedData&lt;span&gt;));&lt;br/&gt;　　　　　　　xlsx(data, fields, &lt;/span&gt;&quot;奖励汇总列表&quot;&lt;span&gt;); },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此处有两处大坑，一个是data不能直接使用this.getBuildData ，而要将其转换一下，原因是this.getBuildData是计算&lt;/p&gt;
&lt;p&gt;出来的，vue里面会自动更改它的值，这个bug找了好久才搞定，心塞。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; getComputedData() {
            let itemData &lt;/span&gt;=&lt;span&gt; { };
            let arr &lt;/span&gt;=&lt;span&gt; []
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dataList.map(item =&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.formDataFitTable(
                    item.mapPrdTypeCommission,
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getHeadMapList
                ).map(v &lt;/span&gt;=&amp;gt;&lt;span&gt; {
                    itemData[&lt;/span&gt;'_' + v.key] =&lt;span&gt; v.value;
                });
                itemData.sid &lt;/span&gt;=&lt;span&gt; item.sid;
                itemData.yearMonth &lt;/span&gt;=&lt;span&gt; item.yearMonth;
                itemData.totalCommission &lt;/span&gt;=&lt;span&gt; item.totalCommission;
                arr.push(itemData);
                itemData &lt;/span&gt;= { }; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意要将其清空，然后再重新遍历&lt;/span&gt;
&lt;span&gt;            });
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; arr;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第二个问题是，插入头部的时候，会存在顺序问题，比如业务要求，我就要将测试1放在excel的第一列里面，而实际上，&lt;/p&gt;
&lt;p&gt;　　对象是无序的，如果对象中单纯只包含数字类型的属性，或者字母类型的属性，是没有问题，而如果对象种既包含数字和字母&lt;/p&gt;
&lt;p&gt;的属性，那么对象就会优先将数字排在最前面。先看下导出结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/905548/201804/905548-20180424110820707-1433678136.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　原本我是想将one这一列，放在第一列的位置上，然而结果却是排在最后面，当然因为我的数据格式里面就是既有数字类型，&lt;/p&gt;
&lt;p&gt;又有字母类型的，看下数据格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;test1&quot;:&quot;测试1&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;test2&quot;:&quot;测试2&quot;&lt;span&gt;,
   &lt;/span&gt;1&lt;span&gt;:“测试3”,
   &lt;/span&gt;2:&quot;测试4&quot;&lt;span&gt; ,
   &lt;/span&gt;3&lt;span&gt;:“测试5”,
   &lt;/span&gt;4:&quot;测试6&quot;&lt;span&gt; , 
   &lt;/span&gt;5&lt;span&gt;:“测试7”,
   &lt;/span&gt;6:&quot;测试8&quot;&lt;span&gt; ,
   &lt;/span&gt;7&lt;span&gt;:“测试9”,
   &lt;/span&gt;8:&quot;测试10&quot;&lt;span&gt; , 
   &lt;/span&gt;9&lt;span&gt;:“测试11”,
   &lt;/span&gt;10:&quot;测试12&quot;&lt;span&gt; , 
   &lt;/span&gt;11&lt;span&gt;:“测试13”,
   &lt;/span&gt;12:&quot;测试14&quot;&lt;span&gt; , 
   &lt;/span&gt;13&lt;span&gt;:“测试15”,
   &lt;/span&gt;14:&quot;测试16&quot;&lt;span&gt; ,         
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么导出的结果就会是如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/905548/201804/905548-20180424111821493-411487478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么如何解决呢，其实只要&lt;strong&gt;&lt;span&gt;将数字变为字符类型&lt;/span&gt;&lt;/strong&gt;的就行了，上面代码也可以看出，加一个_就行了。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;2：拼接数据数组，如何导出呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　首先先看下效果，如下所示：这里数据虽然都打上了码，不过应该能明白博主的意思，显然这不是我们要的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/905548/201804/905548-20180424112811173-1214867152.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么我们怎么解决呢？博主这里想到了一个比较笨的方法，欢迎大家指教，就是将其key值变为跟前面几列的相同，如下数据格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;exportToExcel() {
            let field &lt;/span&gt;=&lt;span&gt; {
                test1: &lt;/span&gt;&quot;测试1&quot;&lt;span&gt;,
                test2: &lt;/span&gt;&quot;测试2&quot;&lt;span&gt;,
                test3: &lt;/span&gt;&quot;测试3&quot;&lt;span&gt;,
                test4: &lt;/span&gt;&quot;测试4&quot;&lt;span&gt;
            };
            let r &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.requestData({
                pageIndex: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                pageSize: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
                isNotPaging: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            });
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dispatchDataList(r).then(data =&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data) {
                    let data1&lt;/span&gt;=&lt;span&gt; data.data1;
                    let data2 &lt;/span&gt;=&lt;span&gt; data.data2;
                    let arry &lt;/span&gt;=&lt;span&gt; [
                        {
                            test1:&lt;/span&gt;&quot;&quot;&lt;span&gt;,
                            test2:&lt;/span&gt;&quot;&quot;&lt;span&gt;,
                            test3:&lt;/span&gt;&quot;&quot;&lt;span&gt;,
                            test4:&lt;/span&gt;&quot;&quot;&lt;span&gt;
                        },
                        {
                            test1:&lt;/span&gt;&quot;总状态&quot;&lt;span&gt;,
                            test2:&lt;/span&gt;&quot;总次数&quot;&lt;span&gt;,
                            test3:&lt;/span&gt;&quot;总数量&quot;&lt;span&gt;,
                            test4:&lt;/span&gt;&quot;总奖励&quot;&lt;span&gt;
                        }
                    ];
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(data2){
                        data2.forEach(item&lt;/span&gt;=&amp;gt;&lt;span&gt;{
                            arry.push({
                                test1:item.type,
                                test2:item.rewardCount,
                                test3:item.totalQuality,
                                test3:item.totalCommission
                            })
                        })
                         xlsx( data1.concat(arry), field,&lt;/span&gt;&quot;测试数据工作簿&quot;&lt;span&gt; );  
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                         &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.showTips(&quot;warning&quot;, &quot;无数据，请重新查询！&quot;&lt;span&gt;)
                    } 
                }
            });
        },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　方法比较笨，但是效果是没问题的，有好的方法，欢迎大家指正。其实就是相当于，将其变为某一行数据格式&lt;/p&gt;
&lt;p&gt;插入到第一个数组里面，进行遍历第一个插入空的，是希望能够跟第一个数组隔开，转换之后效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/905548/201804/905548-20180424114200779-2139124384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好啦，前端导入excel差不多就这么多，有好的方法欢迎大家给我留言！&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;strong&gt;作者：婷风&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 出处：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 【js-xlsx和file-saver插件】前端导出数据到excel&quot; href=&quot;http://www.cnblogs.com/jtjds/p/8892510.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.cnblogs.com/jtjds/p/8892510.html&lt;/span&gt;&lt;/a&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 如果您觉得阅读本文对您有帮助，请点一下“推荐”按钮，您的“推荐”将是我最大的写作动力！欢迎各位转载，但是未经作者本人同意 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;转载文章之后必须在 文章页面明显位置给出作者和原文连接否则保留追究法律责任的权利。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;





</description>
<pubDate>Tue, 24 Apr 2018 03:49:00 +0000</pubDate>
<dc:creator>婷风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jtjds/p/8892510.html</dc:identifier>
</item>
<item>
<title>Lua和C#调用探秘 - zblade</title>
<link>http://www.cnblogs.com/zblade/p/8927127.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zblade/p/8927127.html</guid>
<description>&lt;p&gt;转载请标明出处：&lt;a href=&quot;http://www.cnblogs.com/zblade/&quot;&gt;http://www.cnblogs.com/zblade/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在实际的项目中，大部分业务逻辑 程序员只需要负责lua层编写逻辑即可，或者在c#层添加一些静态函数，供lua层调用。那么对于具体的相互之间的交互，又是如何进行的？本文就写一写个人的一些探究笔记吧。本文会写很多代码，我就用截图来展示吧，编辑写代码不大方便，有点蛋疼~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、c#函数的导出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我就从外部接口开始理一遍整体思路吧，想了一下，还是从代码思路来解释比较容易。&lt;/p&gt;
&lt;p&gt;首先我们的工程中都会有一个slua的导出接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201804/656520-20180424113646097-1310409015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的一个接口，是用来将UnityEngine中的类导出的实现API，其整体的思路是：&lt;/p&gt;
&lt;p&gt;1）首先加载UnityEngine这个程序集:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;Assembly assembly = Assembly.Load(&quot;UnityEngine&quot;)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2）然后获取资中的可导出类型：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;Type[] types = assembly.GetExportedTypes();
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3) 做一次过滤，主要是对于某些需要导出的类和不需要导出的类做一次过滤剔除和添加，这个不同项目不一样，不做展示；&lt;/p&gt;
&lt;p&gt;4）将这些过滤后的类型，逐个做一次导出，比如相机类，可以导出为：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-09bcb3811043f1f15b9076b58dbb9eeb_hd.jpg&quot; alt=&quot;&quot; width=&quot;622&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;622&quot; data-rawheight=&quot;64&quot; data-original=&quot;https://pic1.zhimg.com/v2-09bcb3811043f1f15b9076b58dbb9eeb_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-09bcb3811043f1f15b9076b58dbb9eeb_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5）将这些导出的类Lua_xxx合并在一起作为一个Bind， 提供一个静态获取方法GetBindList()&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201804/656520-20180424113703937-1421638097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是第一步，完成对c#和unity中的方法导出，将每个不同程序集中的类中的方法和属性都暴露出来，做一个导出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、导出的c#文件的注册到Lua虚拟机中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分需要结合游戏的启动来理解，在游戏的启动时刻，我们都会启动一个Lua的虚拟机，比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;content_image lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-9c06e856b3116e60a9f09549fd6579fe_hd.jpg&quot; alt=&quot;&quot; width=&quot;301&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;301&quot; data-rawheight=&quot;69&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-9c06e856b3116e60a9f09549fd6579fe_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在启动虚拟机后，需要执行虚拟机的Init操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;m_LuaSvr.init(xxxx)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个函数中，执行Bind的操作：doBind&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201804/656520-20180424113720028-109443367.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中的关键操作为collectBindInfo, 这个函数分为2部分：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）获取当前程序集，以及程序集中设置为LuaBinderAttribute的类型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-bc71ec90196b84c34ae9245bc7f515d0_hd.jpg&quot; alt=&quot;&quot; width=&quot;760&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;760&quot; data-rawheight=&quot;615&quot; data-original=&quot;https://pic4.zhimg.com/v2-bc71ec90196b84c34ae9245bc7f515d0_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bc71ec90196b84c34ae9245bc7f515d0_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）根据获取的类型，逐个反射执行第一部分最后的GetBindList函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201804/656520-20180424113742718-1379909988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这样通过c#的反射，就可以动态的获取前面导出的所有Lua&lt;em&gt;XXX类文件了，回到Bind操作，对&lt;/em&gt;于这些获取的Lua_XXX文件，执行Lua虚拟机的注册操作：&lt;/p&gt;

&lt;p&gt;也就是导出文件中的reg操作：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-670b734c9dc40756188dfee317ecefa4_hd.jpg&quot; alt=&quot;&quot; width=&quot;485&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;485&quot; data-rawheight=&quot;577&quot; data-original=&quot;https://pic4.zhimg.com/v2-670b734c9dc40756188dfee317ecefa4_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-670b734c9dc40756188dfee317ecefa4_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看看其操作，首先是newtable的操作：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-1028141df2d2d24c9f1d2f5251b15e0f_hd.jpg&quot; alt=&quot;&quot; width=&quot;591&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;591&quot; data-rawheight=&quot;197&quot; data-original=&quot;https://pic4.zhimg.com/v2-1028141df2d2d24c9f1d2f5251b15e0f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1028141df2d2d24c9f1d2f5251b15e0f_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建2个table，分别用来做static和instance的填充，然后填充的操作addMember:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201804/656520-20180424112646858-1437077709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于不同的参数，会重载不同的addMember操作，这儿就举例一个，pushValue就是将func注册到该table中：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-9e6ccf34d0661c297202c42d7e37c233_hd.jpg&quot; alt=&quot;&quot; width=&quot;571&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;571&quot; data-rawheight=&quot;114&quot; data-original=&quot;https://pic4.zhimg.com/v2-9e6ccf34d0661c297202c42d7e37c233_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9e6ccf34d0661c297202c42d7e37c233_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-0dd3704bb50d90a5306b706f0e60f0f5_hd.jpg&quot; alt=&quot;&quot; width=&quot;676&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;676&quot; data-rawheight=&quot;161&quot; data-original=&quot;https://pic3.zhimg.com/v2-0dd3704bb50d90a5306b706f0e60f0f5_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-0dd3704bb50d90a5306b706f0e60f0f5_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;LuaDll.lua_pushcclosure(L, function, 0)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是将该函数填充到lua表中，可以通过key名的查找来获取该函数，从而执行相关的调用。&lt;/p&gt;
&lt;p&gt;最后会在该reg操作中为该类创建一个metatable&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-f5fbc1000f6ad2d6437d9a22124756bb_hd.jpg&quot; alt=&quot;&quot; width=&quot;917&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;917&quot; data-rawheight=&quot;76&quot; data-original=&quot;https://pic4.zhimg.com/v2-f5fbc1000f6ad2d6437d9a22124756bb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f5fbc1000f6ad2d6437d9a22124756bb_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201804/656520-20180424112713781-168035857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;回到最初的，不断的循环执行，就可以加载整个c#相关导出类到Lua虚拟机中&lt;/p&gt;
&lt;p&gt;总结：到现在为止，可以知道整个c#函数在导出过程中的操作，在启动时候如何通过程序集和反射来实现动态的加载，最后Lua的虚拟机中都会注册前面导出的类文件的相关函数和属性。&lt;/p&gt;
&lt;p&gt;而我们已经知道，lua文件在执行的时候，是会编译成字节码在lua的虚拟机中执行的，这样lua的字节码和c#的导出文件，都在同一个环境中执行，调用pcall就可以相互的执行和调用了。&lt;/p&gt;
&lt;p&gt;写这篇文章是基于偶然翻看到老外写的一个在unity中用c++做脚本来编写游戏逻辑，并且实现了c#和c++之间的相互交互调用，所以我也翻看了一下c#是如何实现的，当然写的比较简陋，还有很多细节需要推敲，大家可以翻看自己的项目代码，留言讨论&lt;/p&gt;
</description>
<pubDate>Tue, 24 Apr 2018 03:30:00 +0000</pubDate>
<dc:creator>zblade</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zblade/p/8927127.html</dc:identifier>
</item>
<item>
<title>PowerBI 第九篇：修改查询 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4548830.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4548830.html</guid>
<description>&lt;p&gt;在PowerBI的查询编辑器中，用户可以使用M语言修改Query，或修改Query字段的类型，或向Query中添加数据列（Column），对Query进行修改会导致PowerBI相应地更新数据模型（Data Model），这跟使用DAX表达式修改Data Model有本质的区别：前者是修改数据表，后者是修改数据视图，PowerBI通过查询编辑器来修改数据模型，对Query的每一次修改都是一个step，可以随时增加或删除step。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，修改数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个Query都是由一系列的列和行构成的数据表，每一列都有特定的数据类型，数据列的数据类型主要是number和text，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424102815547-2009462584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;123是数字类型，ABC是字符类型。有时，从源中导入数据之后，PowerBI不能确定数据类型，会在列前方同时标记为123和ABC，用户可以通过”Change Type“转换列的数据类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，添加数据列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从主菜单中切换到”Add Column“面板，点击”Custom Column“，根据M公式创建新的数据列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424103744694-1227548806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从左侧可用的列中，添加公式，创建新的数据列：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424103544325-173046751.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，添加排序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在对数据进行排序时，有时不能使用DAX表达式，此时必须使用M公式，例如，对班级（Class）进行排序，使用DAX的IF函数，按照班级（Class）名称新建一个字段（Class Ordinal），&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Class Ordinal = IF(Schools[Class]=&quot;一年级&quot;,1,IF(Schools[Class]=&quot;二年级&quot;,2,3))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置Class按照Class Ordinal排序，PowerBI会抛出错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/628084/201801/628084-20180123172907740-1950554563.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，必须使用M公式，在Schools Query中新增字段：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
= Table.AddColumn(KustoQuery, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Class Ordinal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
each &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [Class]=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;一年级&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; then &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; [Class]=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;二年级&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; then &lt;span&gt;2&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; [Class]=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;三年级&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; then &lt;span&gt;3&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;四，查询的连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把查询连接到一起，可以使用Home菜单中”Merge Queries as New“，通过连接操作（Join）把两个Query合并，生成新的Query。&lt;/p&gt;
&lt;p&gt;PowerBI在进行Merge时，只支持&lt;strong&gt;等值条件&lt;/strong&gt;的连接操作，等相应字段的值相等时，匹配成功。&lt;/p&gt;
&lt;p&gt;例如，选择 EventSoldService 作为其中一个Query，点击EventId，作为连接的条件，第一个表称作左表，第二标称作右表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424110911133-1467100411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也可以选择多个数据列作为连接条件，摁住Ctrl，连续点击EventId，SoldServiceId，就可以把这个字段作为连接：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424111023555-702221827.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在进行Merge操作时，PowerBI提供多种连接的类型，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424110532175-1601734271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，PowerBI会把连接的右表显示为&quot;Table&quot;，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424111431900-1581303149.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户可以点击上方的Icon， 对右表进行扩展（Expand）或聚合（Aggregate）操作，扩展操作是指在最终的查询中显示右表的字段，聚合操作是对右表的相应字段进行聚合操作。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424111718891-1750251584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五，转换操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在查询编辑器中，可以对数据做变换操作（Transform），例如，分组、字符的拆分、透视、逆透视、去重和替换值等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，分组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查询编辑器中设置Group By操作，用于对现有的查询按照特定的列进行分组聚合，产生新的Query。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424112421467-670090652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，拆分字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把一个字符类型Column按照分隔符，或者特定数量的字符，分割成多个数据列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424131719343-168642712.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，透视和逆透视&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pivot Column 用于对数据进行透视操作，Unpivot Column 用于对数据进行逆透视操作，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/628084/201804/628084-20180424132652839-68298056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt211003.aspx&quot; target=&quot;_blank&quot;&gt;Power Query M Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/power-bi/desktop-add-custom-column&quot; target=&quot;_blank&quot;&gt;Add a custom column in Power BI Desktop&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Apr 2018 03:21:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4548830.html</dc:identifier>
</item>
<item>
<title>BigData－‘基于代价优化’究竟是怎么一回事？ - 网易云</title>
<link>http://www.cnblogs.com/163yun/p/8927003.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/163yun/p/8927003.html</guid>
<description>&lt;p&gt;本文由  &lt;a href=&quot;https://www.163yun.com/?channel=M_cnblogs_zq_100&quot; target=&quot;_blank&quot;&gt;网易云&lt;/a&gt; 发布。&lt;/p&gt;

&lt;p&gt;本文具体讨论了Join基础算法的一种优化方案  – Runtime Filter，在本文最后还引申地聊了聊谓词 下推技术。同时，在本文文章开头，笔者引出了两个问题，SQL执行引擎如何知晓参与Join的两波数据集大小？衡量两波数据集 大小的是物理大小还是纪录多少抑或两者都有？这关系到SQL解析器如何正确选择Join算法的问题。好了，这些就是这篇文章要为 大家带来的议题－基于代价优化（Cost-Based Optimization，简称CBO）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CBO基本原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;提到CBO，就不得不提起一位’老熟人’ – 基于规则优化（Rule-Based Optimization，简称RBO）。RBO是一种经验式、启发式 的优化思路，优化规则都已经预先定义好，只需要将SQL往这些规则上套就可以。说白了，RBO就像是一个经验丰富的老司机，基 本套路全都知道。&lt;/p&gt;

&lt;p&gt;然而世界上有一种东西叫做 – 不按套路来，与其说它不按套路来，倒不如说它本身并没有什么套路。最典型的莫过于复杂Join算子 优化，对于这些Join来说，通常有两个选择题要做：&lt;/p&gt;

&lt;p&gt;1. Join应该选择哪种算法策略来执行？BroadcastJoin or ShuffleHashJoin or SortMergeJoin？不同的执行策略对系统的资源要求 不同，执行效率也有天壤之别，同一个SQL，选择到合适的策略执行可能只需要几秒钟，而如果没有选择到合适的执行策略就可能 会导致系统OOM。&lt;/p&gt;
&lt;p&gt;2. 对于雪花模型或者星型模型来讲，多表Join应该选择什么样的顺序执行？不同的Join顺序意味着不同的执行效率，比如A join B join C，A、B表都很大，C表很小，那A join B很显然需要大量的系统资源来运算，执行时间必然不会短。而如果使用A join C join B的执行顺序，因为C表很小，所以A join C会很快得到结果，而且结果集会很小，再使用小的结果集 join B，性能显而易见会好于 前一种方案。&lt;/p&gt;

&lt;p&gt;大家想想，这有什么固定的优化规则么？并没有。说白了，你需要知道更多关于表的基础信息（表大小、表记录总条数等），再通 过一定规则代价评估才能从中选择一条最优的执行计划。CBO意为基于代价优化策略，就是从多个可能的语法树中选择一条代价最 小的语法树来执行，换个说法，CBO的核心在于评估出一条给定语法树的实际代价。比如下面这颗SQL语法树：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111139667-824418887.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;要评估给定整棵树的代价，分而治之只需要评估每个节点执行的代价，最后将所有节点代价累加即可。而要评估单个节点执行实际 代价，又需要知道两点，其一是这种算子的代价规则，每种算子的代价计算规则必然都不同，比如Merge-Sort Join、Shuffle Hash Join、GroupBy都有自己的一套代价计算算法。其二是参与操作的数据集基本信息（大小、总记录条数），比如实际参与 Merge-Sort Join的两表大小，作为节点实际执行代价的一个重要因素，当然非常重要。试想，同样是Table Scan操作，大表和小 表的执行代价必然不同。&lt;/p&gt;

&lt;p&gt;为给定算子的代价进行评估说到底也是一种算法，算法都是死的，暂且不表，下文详述。而参与的数据集基本信息却是活的，为什 么如此说，因为这些数据集都是原始表经过过滤、聚合之后的中间结果，没有规则直接告诉你这个中间结果有多少数据！那中间结 果的基本信息如何评估呢？推导！对，原始表基本信息我们是可以知道的，如果能够一层一层向上推导，是不是就有可能知道所求 中间结果信息！&lt;/p&gt;

&lt;p&gt;这里又将任意节点中间结果信息评估拆分为两个子问题：首先评估叶子节点（原始表）的基本信息，其次一层一层往上推导。评估 原始表基本信息想想总是有办法的，粗暴点就全表扫描，获取记录条数、最大值、最小值，总之是可以做到的。那基本信息如何一 层一层往上推导呢？规则！比如原始表经过 id = 12这个Filter过滤之后的数据集信息（数据集大小等）就可以经过一定的规则推导 出来，不同算子有不同的规则，下文详述！&lt;/p&gt;

&lt;p&gt;1. 基于代价优化（CBO）原理是计算所有执行路径的代价，并挑选代价最小的执行路径。问题转化为：如何计算一条给定执行路径 的代价；&lt;/p&gt;
&lt;p&gt;2. 计算给定路径的执行代价，只需要计算这条路径上每个节点的执行代价，最后相加即可。问题转化为：如何计算其中任意一个节 点的执行代价；&lt;/p&gt;
&lt;p&gt;3. 计算任意节点的执行代价，只需要知道当前节点算子的代价计算规则以及参与计算的数据集（中间结果）基本信息（数据量大 小、数据条数等）。问题转化为：如何计算中间结果的基本信息以及定义算子代价计算规则；&lt;/p&gt;
&lt;p&gt;4. 算子代价计算规则是一种死的规则，可定义。而任意中间结果基本信息需要通过原始表基本信息顺着语法树一层一层往上推导得 出。问题转化为：如何计算原始表基本信息以及定义推导规则。&lt;/p&gt;

&lt;p&gt;很显然，上述过程是思维过程，真正工程实践是反着由下往上一步一步执行，最终得到代价最小的执行路径。现在再把它从一个个 零件组装起来：&lt;/p&gt;

&lt;p&gt;1. 首先采集原始表基本信息；&lt;/p&gt;
&lt;p&gt;2. 再定义每种算子的基数评估规则，即一个数据集经过此算子执行之后基本信息变化规则。这两步完成之后就可以推导出整个执行 计划树上所有中间结果集的数据基本信息；&lt;/p&gt;
&lt;p&gt;3. 定义每种算子的执行代价，结合中间结果集的基本信息，此时可以得出任意节点的执行代价；&lt;/p&gt;
&lt;p&gt;4. 将给定执行路径上所有算子的代价累加得到整棵语法树的代价；&lt;/p&gt;
&lt;p&gt;5. 计算出所有可能语法树代价，并选出一条代价最小的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CBO基本实现思路&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上文从理论层面分析了CBO的实现思路，将完整的CBO功能拆分为了多个子功能，接下来聊聊对每一个子功能的实现。&lt;/p&gt;

&lt;p&gt;第一步，采集原始表基本信息&lt;/p&gt;

&lt;p&gt;这个操作是CBO最基础的一项工作，采集的主要信息包括表级别指标和列级别指标，如下所示，estimatedSize和rowCount为表级 别信息，basicStats和Histograms为列级别信息，后者粒度更细，对优化更加重要。&lt;/p&gt;

&lt;p&gt;estimatedSize: 每个LogicalPlan节点输出数据大小（解压）&lt;/p&gt;
&lt;p&gt;rowCount: 每个LogicalPlan节点输出数据总条数&lt;/p&gt;
&lt;p&gt;basicStats: 基本列信息，包括列类型、Max、Min、number of nulls, number of distinct values, max column length, average column length等&lt;/p&gt;
&lt;p&gt;Histograms: Histograms of columns, i.e., equi-width histogram (for numeric and string types) and equi-height histogram (only for numeric types).&lt;/p&gt;

&lt;p&gt;这里有两个问题值得思考：&lt;/p&gt;

&lt;p&gt;1. 为什么要采集这些信息？每个对象在优化过程中起到什么作用？&lt;/p&gt;
&lt;p&gt;2. 实际工程一般是如何实现这些数据采集的？&lt;/p&gt;

&lt;p&gt;为什么要采集这些信息？很显然，estimatedSize和rowCount这两个值是算子代价评估的直观体现，这两个值越大，给定算子执行 代价必然越大，所以这两个值后续会用来评估实际算子的执行代价。那basicStats和Histograms这俩用来干啥呢，要不忘初心，之 所以采集原始表的这些信息，是为了顺着执行语法树往上一层一层推导出所有中间结果的基本信息，这俩就是来干这个的，至于怎 么实现的，下一小节会举个例子解释。&lt;/p&gt;

&lt;p&gt;实际工程如何实现这些数据采集？一般有两种比较可行的方案：打开所有表扫描一遍，这样最简单，而且统计信息准确，缺点是对 于大表来说代价比较大；针对一些大表，扫描一遍代价太大，可以采用采样（sample）的方式统计计算。&lt;/p&gt;

&lt;p&gt;支持CBO的系统都有命令对原始数据信息进行统计，比如Hive的Analyze命令、Impala的Compute命令、Greenplum的Analyze 命令等，但是需要注意这些命令并不是随时都应该执行的，首先在表数据没有大变动的情况下没必要执行，其次在系统查询高发期 也不应该执行。这里有个最佳实践：尽可能在业务低峰期对表数据有较大变动的表单独执行统计命令，这句话有三个重点，不知道 你看出来没有？&lt;/p&gt;

&lt;p&gt;第二部，定义核心算子的基数推导规则&lt;/p&gt;

&lt;p&gt;规则推导意思是说在当前子节点统计信息的基础上，计算父节点相关统计信息的一套推导规则。对于不同算子，推导规则必然不一 样，比如fliter、group by、limit等等的评估推导是不同的。这里以filter为例进行讲解。先来看看这样一个SQL：select * from A , C where  &lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=http%3A//A.id&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;A.id&lt;/a&gt; = C.c_id and C.c_id &amp;gt; N ，经过RBO之后的语法树如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111150877-281313579.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题定义为：假如现在已经知道表C的基本统计信息（estimatedSize、rowCount、basicStats以及histograms），那么如何推导 出经过C.c_id&amp;gt;N过滤后中间结果的基本统计信息呢？让我们来看看：&lt;/p&gt;

&lt;p&gt;1. 假设已知C列的最小值c_id.Min、最大值c_id.Max以及总行数c_id.Distinct，同时假设数据分布均匀，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111159627-2013129888.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2. 现在分别有三种情况需要说明，其一是N小于c_id.Min，其二是N大于c_id.Max，其三是N介于c_id.Min和c_id.Max之间。前两 种场景是第三种场景的特殊情况，这里简单的针对第三种场景说明。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111207509-1323872751.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在C.c_id&amp;gt;N过滤条件下，c_id.Min会增大到N，c_id.Max保持不变。而过滤后总行数c_id.distinct(after_filter)=(c_id.Max– N)/(c_id.Max–c_id.Min)*c_id.distinct(before_filter)&lt;/p&gt;

&lt;p&gt;简单吧，但是注意哈，上面计算是在假设数据分布均匀的前提下完成的，而实际场景中数据分布很显然不可能均衡。数据分布通常 成概率分布，histograms在这里就要登场了，说白了它就是一个柱状分布图，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111215969-1447379516.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;柱状图横坐标表示列值大小分布，纵坐标表示频率。假设N在如图所示位置，那过滤后总行数c_id.distinct(after_filter)＝ height(&amp;gt;N)/height(All)*c_id.distinct(before_filter)。&lt;/p&gt;

&lt;p&gt;当然，上述所有计算都只是示意性计算，真实算法会复杂很多。另外，如果大家对group by 、limit等谓词的评估规则比较感兴趣 的话，可以阅读SparkSQL CBO的设计文档，这里就不再赘述。至此，通过各种评估规则以及原始表统计信息就可以计算出语法树 中所有中间节点的基本统计信息了，这是万里长征的第二步，也是至关重要的一步。接下来继续往前走，看看如何计算每种核心算 子的实际代价。&lt;/p&gt;

&lt;p&gt;因为实现的原因设置的比较简单，有的会比较复杂。这一节主要来简单聊聊每个节点的执行代价，上文说了，一条执行路径的总代 价就是这条路径上所有节点的代价累加之和。&lt;/p&gt;

&lt;p&gt;通常来讲，节点实际执行代价主要从两个维度来定义：CPU Cost以及IO Cost。为后续讲解方便起见，需要先行定义一些基本参数：&lt;/p&gt;

&lt;p&gt;Hr：从HDFS上读取1byte数据所需代价&lt;/p&gt;
&lt;p&gt;Hw：往HDFS上写入1byte数据所需代价&lt;/p&gt;
&lt;p&gt;Tr：数据总条数（the number of tuples in the relation ）&lt;/p&gt;
&lt;p&gt;Tsz：数据平均大小（Average size of the tuple in the relation&lt;/p&gt;
&lt;p&gt;）&lt;/p&gt;
&lt;p&gt;CPUc ： 两 值 比 较 所 需 CPU 资 源 代 价 （ CPU cost for a comparison in nano seconds ）&lt;/p&gt;
&lt;p&gt;NEt：1byte数据通过网络在集群节点间传输花费代价（the average cost of transferring 1 byte over network in the Hadoop cluster from any node to any node ）&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;上文说过，每种算子的实际执行代价计算方式都不同，在此不可 能列举所有算子，就挑两个比较简单、容易理解的来分析，第一 个是Table Scan算子，第二个是Hash Join算子。&lt;/p&gt;

&lt;p&gt;Table Scan算子 Scan算子一般位于语法树的叶子结点，直观上来讲这类算子只有IO Cost，CPU Cost为0。Table Scan Cost = IO Cost = Tr * Tsz * Hr，很简单，Tr * Tsz表示需要scan的数据总大小，再乘以Hr就是所需代价。OK，很直观，很简单。&lt;/p&gt;

&lt;p&gt;Hash Join算子 以Broadcast Hash Join为例（如果看官对Broadcast Hash Join工作原理还不了解，可戳这里），假设大表分布在n个节点上，每 个 节 点 的 数 据 条 数 \ 平 均 大 小 分 别 为 Tr(R1)\Tsz(R1) ， Tr(R2)\Tsz(R2), … Tr(Rn)\Tsz(Rn) ， 小 表 数 据 条 数 为 Tr(Rsmall)\Tsz(Rsmall)，那么CPU代价和IO代价分别为：&lt;/p&gt;

&lt;p&gt;CPU Cost = 小表构建Hash Table代价 ＋ 大表探测代价 ＝ Tr(Rsmall) * CPUc + (Tr(R1) + Tr(R2) + … + Tr(Rn)) * N * CPUc，此 处假设HashTable构建所需CPU资源远远高于两值简单比较代价，为N * CPUc&lt;/p&gt;

&lt;p&gt;IO Cost = 小表scan代价 ＋ 小表广播代价 ＋ 大表scan代价 ＝ Tr(Rsmall) * Tsz(Rsmall) * Hr + n * Tr(Rsmall) * Tsz(Rsmall) * NEt + (Tr(R1)* Tsz(R1) + … + Tr(Rn) * Tsz(Rn)) * Hr&lt;/p&gt;

&lt;p&gt;很显然，Hash Join算子相比Table Scan算子来讲稍稍复杂了一点，但是无论哪种算子，代价计算都和参与的数据总条数、数据平 均大小等因素直接相关，这也就是为什么在之前两个步骤中要不懈余力地计算中间结果相关详细的真正原因。可谓是步步为营、环 环相扣。这下好了，任意节点的实际代价都能评估出来，那么给定任意执行路径的代价必然也就很简单喽。&lt;/p&gt;

&lt;p&gt;第四步：选择最优执行路径（代价最小执行路径）&lt;/p&gt;

&lt;p&gt;这个思路很容易理解的，经过上述三步的努力，可以很容易地计算出任意一条给定路径的代价。那么你只需要找出所有可行的执行 路径，一个一个计算，就必然能找到一个代价最小的，也就是最优的执行路径。&lt;/p&gt;

&lt;p&gt;这条路看起来确实很简单，但实际做起来却并不那么容易，为什么？所有可行的执行路径实在太多，所有路径都计算一遍，黄花菜 都凉了。那么有什么好的解决方案么？当然，其实看到这个标题－选择代价最小执行路径，就应该很容易想到－动态规划，如果你 没有想到，那只能说明你没有读过《数学之美》、没刷过LeetCode、没玩过ACM，ACM、LeetCode如果觉得太枯燥，那就去看 看《数学之美》，它会告诉你从当前这个你所在的地方开车去北京，如何使用动态规划选择一条最短的路线。在此不再赘述。&lt;/p&gt;

&lt;p&gt;至此，笔者粗线条地介绍了当前主流SQL引擎是如何将CBO这么一个看似高深的技术一步一步落地的。接下来，笔者将会借用 Hive、Impala这两大SQL引擎开启CBO之后的优化效果让大家对CBO有一个更直观的理解。&lt;/p&gt;

&lt;p&gt;3 Hive-CBO优化效果&lt;/p&gt;

&lt;p&gt;Hive本身没有去从头实现一个SQL优化器，而是借助于Apache Calcite，Calcite是一个开源的、基于CBO的企业级SQL查询优化框 架，目前包括Hive、Phoniex、Kylin以及Flink等项目都使用了Calcite作为其执行优化器，这也很好理解，执行优化器本来就可以 抽象成一个系统模块，并没有必要花费大量时间去重复造轮子。&lt;/p&gt;

&lt;p&gt;hortonworks曾经对Hive的CBO特性做了相关的测试，测试结果认为CBO至少对查询有三个重要的影响：Join ordering optimization、Bushy join support以及Join simplification，本文只简单介绍一下Join ordering optimization，有兴趣的同学可 以继续阅读这篇文章(&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//hortonworks.com/blog/hive-0-14-cost-based-optimizer-cbo-technical-overview/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot; data-za-detail-view-id=&quot;1043&quot;&gt;HIVE 0.14 Cost Based Optimizer (CBO) Technical Overview&lt;/a&gt;)来更多地了 解其他两个重要影响。（下面数据以及示意图也来自于该篇文章，特此注明）&lt;/p&gt;

&lt;p&gt;select dt.d_year,&lt;/p&gt;
&lt;p&gt;item.i_brand_id brand_id,&lt;/p&gt;
&lt;p&gt;item.i_brand brand,&lt;/p&gt;
&lt;p&gt;sum(ss_ext_sales_price) sum_agg from&lt;/p&gt;
&lt;p&gt;date_dim dt, store_sales, item where&lt;/p&gt;
&lt;p&gt;dt.d_date_sk = store_sales.ss_sold_date_sk and&lt;/p&gt;
&lt;p&gt;store_sales.ss_item_sk = item.i_item_sk and&lt;/p&gt;
&lt;p&gt;item.i_manufact_id =436 and dt.d_moy =12&lt;/p&gt;
&lt;p&gt;group by dt.d_year , item.i_brand , item.i_brand_id&lt;/p&gt;
&lt;p&gt;order by dt.d_year , sum_agg desc , brand_id limit 10&lt;/p&gt;

&lt;p&gt;上述Query涉及到3张表，一张事实表store_sales（数据量大）和两张维度表（数据量小），三表之间的关系如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111228087-728404502.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里就涉及上文提到的Join顺序问题，从原始表来看，date_dime有73049条记录，而item有462000条记录。很显然，如果没有其 他暗示的话，Join顺序必然是store_sales join date_dim join item。但是，where条件中还带有两个条件，CBO会根据过滤条件对 过滤后的数据进行评估，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111236123-1966212988.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111246701-1990086806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;根据上表所示，过滤后的数据量item明显比date_dim小的多，剧情反转的有点快。于是乎，经过CBO之后Join顺序就变成了 store_sales join item join date_dim，为了进一步确认，可以在开启CBO前后分别记录该SQL的执行计划，如下图所示：&lt;/p&gt;

&lt;p&gt;左图是未开启CBO特性时Q3的执行计划，store_sales先与date_dim进行join，join后的中间结果数据集有140亿条。而再看右图， store_sales先于item进行join，中间结果只有8200w条。很显然，后者执行效率会更高，实践出真知，来看看两者的实际执行时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111255333-1587964798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图很明显的看出Q3在CBO的优化下性能将近提升了1倍，与此同时，CPU资源使用率也降低了一半左右。不得不说，TPCDS中有很多相似的Query，有兴趣的同学可以进一步深入的了解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Impala-CBO优化效果&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;和Hive优化的原理相同，也是针对复杂join的执行顺序、Join的执行策略选择优化等方面进行的优化，本人使用TPC-DS对Impala 在开启CBO特性前后的部分Query进行了性能测试，测试结果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1253350/201804/1253350-20180424111315347-1290425836.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CBO总结&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这篇文章其实很早就开始构思了，前前后后花了将近3个月时间断断续续来写，写了删、删了写，记得第二稿已经写了很多内容， 有天一大早醒来完完整整地看了一遍，发现写的东西并不是自己想要的，准确说，写的缺少那么一些些条理性，改又不好改，索性 就全删了。另一方面，也有因为当前网络上并没有太多关于CBO的完整介绍，倒是找到一些英文资料，但总感觉还是缺乏条理性， 很难理解。本文第一节重点从思维上带大家认识CBO，第二节更多的从实现的视角一步一步将整个原理粗线条地落地，第三节挑选 Hive与Impala两款产品对比介绍开启CBO之后的优化效果，使大家有一个更直观的感受。&lt;/p&gt;

&lt;p&gt;好了，关于Join这个话题，洋洋洒洒前前后后写了三篇文章，能看到这里的只能说是真爱！说实话，笔者并没有完整的看过 RuntimeFilter的代码实现，也没有系统地学过任何一套CBO的代码实现，所写内容大体来自于三个方面：官方博客文档、分析理 解、撸起袖子实践。所以看官可要批判性地去阅读，有错误的地方在所难免，希望能够多多交流指正。后期笔者一定会阅读相关的 代码实现，有新的发现再和大家一起分享～&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;网易有数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;企业级大数据可视化分析平台。面向业务人员的自助式敏捷分析平台，采用PPT模式的报告制作，更加易学易用，具备强大的探索分析功能，真正帮助用户洞察数据发现价值。&lt;/p&gt;
&lt;p&gt;点击这里---&lt;a class=&quot; wrap external&quot; href=&quot;https://link.zhihu.com/?target=https%3A//youdata.163.com/index/apply%3Fchannel%3DM_cnblogs_105&quot; target=&quot;_blank&quot;&gt;免费试用。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;了解 网易云 ：&lt;br/&gt;网易云官网：&lt;a href=&quot;https://www.163yun.com/?channel=M_cnblogs_501&quot; target=&quot;_blank&quot;&gt;https://www.163yun.com/&lt;/a&gt;&lt;br/&gt;新用户大礼包：&lt;a href=&quot;https://www.163yun.com/gift?channel=M_cnblogs_502&quot; target=&quot;_blank&quot;&gt;https://www.163yun.com/gift&lt;/a&gt;&lt;br/&gt;网易云社区：&lt;a href=&quot;https://sq.163yun.com/?channel=M_cnblogs_503&quot; target=&quot;_blank&quot;&gt;https://sq.163yun.com/&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 24 Apr 2018 03:14:00 +0000</pubDate>
<dc:creator>网易云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/163yun/p/8927003.html</dc:identifier>
</item>
</channel>
</rss>