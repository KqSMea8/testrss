<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>lodash源码分析之NaN不是NaN - 对角另一面</title>
<link>http://www.cnblogs.com/hefty/p/8190969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hefty/p/8190969.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;暗恋之纯粹，在于不求结果，完全把自己锁闭在一个单向的关系里面。&lt;/p&gt;
&lt;p&gt;——梁文道《暗恋到偷窥》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文为读 lodash 源码的第五篇，后续文章会更新到这个仓库中，欢迎 star：&lt;a href=&quot;https://github.com/yeyuqiudeng/pocket-lodash&quot;&gt;pocket-lodash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gitbook也会同步仓库的更新，gitbook地址：&lt;a href=&quot;https://www.gitbook.com/book/yeyuqiudeng/pocket-lodash/details&quot;&gt;pocket-lodash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇分析的是 &lt;code&gt;eq&lt;/code&gt; 函数。&lt;/p&gt;
&lt;h2 id=&quot;作用与用法&quot;&gt;作用与用法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;eq&lt;/code&gt; 函数用来比较两个值是否相等。遵循的是 &lt;a href=&quot;http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero&quot;&gt;SameValueZero&lt;/a&gt; 规范。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; obj3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; obj1
&lt;span class=&quot;va&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(obj1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; obj3) &lt;span class=&quot;co&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(obj1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; obj2) &lt;span class=&quot;co&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;_&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NaN&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;几个比较规范&quot;&gt;几个比较规范&lt;/h2&gt;
&lt;h3 id=&quot;samevaluenonnumber&quot;&gt;SameValueNonNumber&lt;/h3&gt;
&lt;p&gt;这个规范规定比较的值 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 都不为 &lt;code&gt;Number&lt;/code&gt; 类型，照抄规范如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 的类型不为 &lt;code&gt;Number&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 的类型与 &lt;code&gt;x&lt;/code&gt; 的类型一致&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;Undefined&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;Null&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;String&lt;/code&gt;，并且 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的长度及编码相同，返回 &lt;code&gt;true&lt;/code&gt;，否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;Boolean&lt;/code&gt; ，并且 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 同为 &lt;code&gt;true&lt;/code&gt; 或同为&lt;code&gt;false&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;，否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;Symbol&lt;/code&gt; ，并且 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 具有相同的 &lt;code&gt;Symbol&lt;/code&gt; 值，返回 &lt;code&gt;true&lt;/code&gt;，否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 指向同一个对象，返回 &lt;code&gt;true&lt;/code&gt;， 否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;strict-equality-comparison&quot;&gt;Strict Equality Comparison&lt;/h3&gt;
&lt;p&gt;js 中的全等（&lt;code&gt;===&lt;/code&gt;）便是遵循这个规范，照搬规范如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的类型不同，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的为 &lt;code&gt;Number&lt;/code&gt; 类型：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;a. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;NaN&lt;/code&gt; ，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b. 如果 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;NaN&lt;/code&gt; ，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;c. 如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的数值一致，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;d. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;+0&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;-0&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;-0&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;+0&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;f. 返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;按照 &lt;a href=&quot;http://ecma-international.org/ecma-262/7.0/#sec-samevaluenonnumber&quot;&gt;SameValueNonNumber&lt;/a&gt; 的结果返回&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;samevalue&quot;&gt;SameValue&lt;/h3&gt;
&lt;p&gt;规范如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的类型不同，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;a. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;NaN&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;NaN&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;+0&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;-0&lt;/code&gt; ，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;c. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;-0&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;+0&lt;/code&gt; ， 返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;d. 如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的数值一致，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e. 返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;按照 &lt;a href=&quot;http://ecma-international.org/ecma-262/7.0/#sec-samevaluenonnumber&quot;&gt;SameValueNonNumber&lt;/a&gt; 的结果返回&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;samevaluezero&quot;&gt;SameValueZero&lt;/h3&gt;
&lt;p&gt;这个是 &lt;code&gt;eq&lt;/code&gt; 遵循的规范，如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的类型不同，返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x&lt;/code&gt; 的类型为 &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;a. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;NaN&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;NaN&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;+0&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;-0&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;c. 如果 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;-0&lt;/code&gt; 并且 &lt;code&gt;y&lt;/code&gt; 为 &lt;code&gt;+0&lt;/code&gt; ， 返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;d. 如果 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的数值一致，返回 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e. 返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;按照 &lt;a href=&quot;http://ecma-international.org/ecma-262/7.0/#sec-samevaluenonnumber&quot;&gt;SameValueNonNumber&lt;/a&gt; 的结果返回&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;小结：&lt;code&gt;SameValueNonNumber&lt;/code&gt; 是基本，&lt;code&gt;Strict Equality Comparison&lt;/code&gt; 、&lt;code&gt;SameValue&lt;/code&gt; 和 &lt;code&gt;SameValueZero&lt;/code&gt; 只是在对待 &lt;code&gt;+0&lt;/code&gt;、&lt;code&gt;-0&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 上有区别。&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;源码分析&lt;/h2&gt;
&lt;p&gt;来看下 &lt;code&gt;eq&lt;/code&gt; 的源码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; other) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; other &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (value &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; other &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; other)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实&lt;code&gt;eq&lt;/code&gt; 的源码其实就只有这么一句。&lt;/p&gt;
&lt;p&gt;既然 &lt;code&gt;eq&lt;/code&gt; 遵循的是 &lt;code&gt;SameValueZero&lt;/code&gt; 规范，那就将源码来拆解一下，看它是怎样符合规范的。&lt;/p&gt;
&lt;p&gt;首先，看第一部分：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;value &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; other&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是这么一段，符合的是 &lt;code&gt;Strict Equality Comparison&lt;/code&gt; 规范，通过对比可以发现， &lt;code&gt;Strict Equality Comparison&lt;/code&gt; 和 &lt;code&gt;SameValueZero&lt;/code&gt; 只在对待 &lt;code&gt;NaN&lt;/code&gt; 上有区别。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Strict Equality Comparison&lt;/code&gt; 规定就算 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 都为 &lt;code&gt;NaN&lt;/code&gt; 时，返回的是 &lt;code&gt;false&lt;/code&gt;， &lt;code&gt;NaN === NaN&lt;/code&gt; 返回的就是 &lt;code&gt;false&lt;/code&gt;。但是 &lt;code&gt;SameValueZero&lt;/code&gt; 返回的是规定 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 都为 &lt;code&gt;NaN&lt;/code&gt; 时返回的是 &lt;code&gt;true&lt;/code&gt;。因此只需要在 &lt;code&gt;Strict Equality Comparison&lt;/code&gt; 的基础上处理 &lt;code&gt;NaN&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;下面这段便是处理 &lt;code&gt;NaN&lt;/code&gt; 的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;(value &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; other &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; other)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 js 中，只有 &lt;code&gt;NaN&lt;/code&gt; 和自身是不相等的，当两个需要比较的值都是和自身不相等时，表明这两个值都为 &lt;code&gt;NaN&lt;/code&gt;，返回 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这样便遵循了 &lt;code&gt;SameValueZero&lt;/code&gt; 的比较实现。&lt;/p&gt;
&lt;h2 id=&quot;可以用object.is吗&quot;&gt;可以用Object.is()吗？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Object.is(NaN, NaN)&lt;/code&gt; 返回的是 &lt;code&gt;true&lt;/code&gt; ，所以 &lt;code&gt;eq&lt;/code&gt; 同样可以改成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; other) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; other &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;is&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; other)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Object.is&lt;/code&gt; 同样是比较两个值是否一样，但是 &lt;code&gt;Object.is(+0, -0)&lt;/code&gt; 返回的是 &lt;code&gt;false&lt;/code&gt;， 它遵循是的 &lt;code&gt;SameValue&lt;/code&gt; 规范，因此不可以直接用 &lt;code&gt;Object.is&lt;/code&gt; 替代 &lt;code&gt;eq&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;可以用isnan吗&quot;&gt;可以用isNaN()吗？&lt;/h3&gt;
&lt;p&gt;还有个 &lt;code&gt;isNaN&lt;/code&gt; 的全局方法，可以用来判断一个值是否为 &lt;code&gt;NaN&lt;/code&gt;。例如 &lt;code&gt;isNaN(NaN)&lt;/code&gt; 会返回 &lt;code&gt;true&lt;/code&gt; ，那 &lt;code&gt;eq&lt;/code&gt; 是否可以改成以下形式呢？&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; other) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; other &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;isNaN&lt;/span&gt;(value) &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;isNaN&lt;/span&gt;(other))
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案是：不可以！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isNaN&lt;/code&gt; 有一个很怪异的行为，如果传入的参数不为 &lt;code&gt;Number&lt;/code&gt; 类型，会尝试转换成 &lt;code&gt;Number&lt;/code&gt; 类型之后再做是否为 &lt;code&gt;NaN&lt;/code&gt; 的判断。所以类似 &lt;code&gt;isNaN('notNaN')&lt;/code&gt; 返回的也是 &lt;code&gt;true&lt;/code&gt; ，因为字符串 &lt;code&gt;notNaN&lt;/code&gt; 会先被转换成 &lt;code&gt;NaN&lt;/code&gt; 再做判断，这不是我们想要的结果。&lt;/p&gt;
&lt;h3 id=&quot;可以用number.isnan吗&quot;&gt;可以用Number.isNaN()吗&lt;/h3&gt;
&lt;p&gt;为了修复 &lt;code&gt;isNaN&lt;/code&gt; 的缺陷，&lt;code&gt;es6&lt;/code&gt; 在 &lt;code&gt;Number&lt;/code&gt; 对象上扩展了 &lt;code&gt;isNaN&lt;/code&gt; 方法，只有是 &lt;code&gt;NaN&lt;/code&gt; 时才会返回 &lt;code&gt;true&lt;/code&gt;，因此用 &lt;code&gt;Number.isNaN&lt;/code&gt; 来判断是安全的。所以 &lt;code&gt;eq&lt;/code&gt; 同样可以改成以下形式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;eq&lt;/span&gt;(value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; other) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; other &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isNaN&lt;/span&gt;(value) &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isNaN&lt;/span&gt;(other))
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://ecma-international.org/ecma-262/7.0/#sec-samevaluenonnumber&quot;&gt;ECMAScript® 2016 Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;MDN:Number.isNaN()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN&quot;&gt;MDN:isNaN()&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际 (CC BY-NC-ND 4.0)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，所有文章都会同步发送到微信公众号上，欢迎关注,欢迎提意见： &lt;img src=&quot;https://raw.githubusercontent.com/yeyuqiudeng/resource/master/images/qrcode_front-end-article.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作者：对角另一面&lt;/p&gt;
</description>
<pubDate>Wed, 03 Jan 2018 23:39:00 +0000</pubDate>
<dc:creator>对角另一面</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hefty/p/8190969.html</dc:identifier>
</item>
<item>
<title>[数据清洗]- Pandas 清洗“脏”数据（二） - Boyce Yang</title>
<link>http://www.cnblogs.com/BoyceYang/p/8186033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BoyceYang/p/8186033.html</guid>
<description>&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;了解数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析数据问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清洗数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整合代码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;了解数据&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在处理任何数据之前，我们的第一任务是理解数据以及数据是干什么用的。我们尝试去理解数据的列/行、记录、数据格式、语义错误、缺失的条目以及错误的格式，这样我们就可以大概了解数据分析之前要做哪些“清理”工作。&lt;/p&gt;
&lt;p&gt;本次我们需要一个 patient_heart_rate.csv （链接：&lt;a href=&quot;https://pan.baidu.com/s/1geX8oYf&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1geX8oYf&lt;/a&gt; 密码：odj0）的数据文件，这个数据很小，可以让我们一目了然。这个数据是 csv 格式。数据是描述不同个体在不同时间的心跳情况。数据的列信息包括人的年龄、体重、性别和不同时间的心率。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
df &lt;/span&gt;= pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../data/patient_heart_rate.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
df.head()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103220408674-1410303823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;分析数据问题&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;没有列头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个列有多个参数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列数据的单位不统一&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺失值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重复数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非&lt;/strong&gt; &lt;strong&gt;ASCII&lt;/strong&gt; &lt;strong&gt;字符&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有些列头应该是数据，而不应该是列名参数&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 data-block=&quot;true&quot; data-editor=&quot;72u4u&quot; data-offset-key=&quot;cm64i-0-0&quot;&gt;清洗数据&lt;/h2&gt;
&lt;p&gt;下面我们就针对上面的问题一一击破。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;没有列头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们拿到的数据像上面的数据一样没有列头，Pandas 在读取 csv 提供了自定义列头的参数。下面我们就通过手动设置列头参数来读取 csv，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 增加列头&lt;/span&gt;
column_names= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m0006&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m0612&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m1218&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f0006&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f0612&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1218&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
df &lt;/span&gt;= pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../data/patient_heart_rate.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, names =&lt;span&gt; column_names)
df.head()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103220609471-1763297125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面的结果展示了我们自定义的列头。我们只是在这次读取 csv 的时候，多了传了一个参数 names = column_names，这个就是告诉 Pandas 使用我们提供的列头。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;一个列有多个参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数据中不难发现，Name 列包含了两个参数 Firtname 和 Lastname。为了达到数据整洁目的，我们决定将 name 列拆分成 Firstname 和 Lastname&lt;/p&gt;
&lt;p&gt;从技术角度，我们可以使用 split 方法，完成拆分工作。&lt;/p&gt;
&lt;p&gt;我们使用 str.split(expand=True),将列表拆成新的列，再将原来的 Name 列删除&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切分名字，删除源数据列&lt;/span&gt;
df[[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]] = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].str.split(expand=&lt;span&gt;True)
df.drop(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, axis=1, inplace=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103220656284-1905315486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面就是执行执行代码之后的结果。&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;列数据的单位不统一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果仔细观察数据集可以发现 Weight 列的单位不统一。有的单位是 kgs，有的单位是 lbs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取 weight 数据列中单位为 lbs 的数据&lt;/span&gt;
rows_with_lbs = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lbs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).fillna(False)
df[rows_with_lbs]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103220754518-1658573169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题，将单位统一，我们将单位是 lbs 的数据转换成 kgs。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将 lbs 的数据转换为 kgs 数据&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; i,lbs_row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; df[rows_with_lbs].iterrows():
weight &lt;/span&gt;= int(float(lbs_row[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][:-3])/2.2&lt;span&gt;)
df.at[i,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}kgs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(weight) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103220900362-125712117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;缺失值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数据集中有些年龄、体重、心率是缺失的。我们又遇到了数据清洗最常见的问题——数据缺失。一般是因为没有收集到这些信息。我们可以咨询行业专家的意见。典型的处理缺失数据的方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;空行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仔细对比会发现我们的数据中一行空行，除了 index 之外，全部的值都是 NaN。&lt;/p&gt;
&lt;p&gt;Pandas 的 read_csv() 并没有可选参数来忽略空行，这样，我们就需要在数据被读入之后再使用 dropna() 进行处理，删除空行.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除全空的行&lt;/span&gt;
df.dropna(how=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,inplace=True) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103221139299-1229089781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 重复数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的时候数据集中会有一些重复的数据。在我们的数据集中也添加了重复的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103221214503-1020233158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先我们校验一下是否存在重复记录。如果存在重复记录，就使用 Pandas 提供的 drop_duplicates() 来删除重复数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除重复数据行&lt;/span&gt;
df.drop_duplicates([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],inplace=True)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; &lt;strong&gt;非&lt;/strong&gt; &lt;strong&gt;ASCII&lt;/strong&gt; &lt;strong&gt;字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数据集中 Fristname 和 Lastname 有一些非 ASCII 的字符。&lt;/p&gt;
&lt;p&gt;处理非 ASCII 数据方式有多种&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;删除&lt;/li&gt;
&lt;li&gt;替换&lt;/li&gt;
&lt;li&gt;仅仅提示一下&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们使用删除的方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除非 ASCII 字符&lt;/span&gt;
df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].replace({r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[^\x00-\x7F]+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;}, regex=True, inplace=&lt;span&gt;True)
df[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].replace({r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[^\x00-\x7F]+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;}, regex=True, inplace=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103221305612-1873548181.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; &lt;strong&gt;有些列头应该是数据，而不应该是列名参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一些列头是有性别和时间范围组成的，这些数据有可能是在处理收集的过程中进行了行列转换，或者收集器的固定命名规则。这些值应该被分解为性别（m,f），小时单位的时间范围（00-06，06-12，12-18）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切分 sex_hour 列为 sex 列和 hour 列&lt;/span&gt;
sorted_columns = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
df &lt;/span&gt;=&lt;span&gt; pd.melt(df,
id_vars&lt;/span&gt;=sorted_columns,var_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex_hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,value_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;puls_rate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).sort_values(sorted_columns)
df[[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]] = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex_hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].apply(&lt;span&gt;lambda&lt;/span&gt; x:pd.Series(([x[:1],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}-{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(x[1:3],x[3:])])))[[0,1&lt;span&gt;]]
df.drop(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex_hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, axis=1, inplace=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除没有心率的数据&lt;/span&gt;
row_with_dashes = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;puls_rate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).fillna(False)
df.drop(df[row_with_dashes].index,
inplace&lt;/span&gt;=True)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/331267/201801/331267-20180103222047440-721085782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 data-block=&quot;true&quot; data-editor=&quot;72u4u&quot; data-offset-key=&quot;90vq0-0-0&quot;&gt; 整合代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 增加列头&lt;/span&gt;
column_names= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m0006&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m0612&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m1218&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f0006&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f0612&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f1218&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
df &lt;/span&gt;= pd.read_csv(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../data/patient_heart_rate.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, names =&lt;span&gt; column_names)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切分名字，删除源数据列&lt;/span&gt;
df[[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]] = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].str.split(expand=&lt;span&gt;True)
df.drop(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, axis=1, inplace=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取 weight 数据列中单位为 lbs 的数据&lt;/span&gt;
rows_with_lbs = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lbs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).fillna(False)
df[rows_with_lbs]
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将 lbs 的数据转换为 kgs 数据&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; i,lbs_row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; df[rows_with_lbs].iterrows():
weight &lt;/span&gt;= int(float(lbs_row[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][:-3])/2.2&lt;span&gt;)
df.at[i,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}kgs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(weight)
 
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除全空的行&lt;/span&gt;
df.dropna(how=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,inplace=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除重复数据行&lt;/span&gt;
df.drop_duplicates([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],inplace=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除非 ASCII 字符&lt;/span&gt;
df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].replace({r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[^\x00-\x7F]+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;}, regex=True, inplace=&lt;span&gt;True)
df[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].replace({r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[^\x00-\x7F]+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;''&lt;/span&gt;}, regex=True, inplace=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切分 sex_hour 列为 sex 列和 hour 列&lt;/span&gt;
sorted_columns = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
df &lt;/span&gt;=&lt;span&gt; pd.melt(df,
id_vars&lt;/span&gt;=sorted_columns,var_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex_hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,value_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;puls_rate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).sort_values(sorted_columns)
df[[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]] = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex_hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].apply(&lt;span&gt;lambda&lt;/span&gt; x:pd.Series(([x[:1],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{}-{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(x[1:3],x[3:])])))[[0,1&lt;span&gt;]]
df.drop(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex_hour&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, axis=1, inplace=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除没有心率的数据&lt;/span&gt;
row_with_dashes = df[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;puls_rate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].str.contains(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).fillna(False)
df.drop(df[row_with_dashes].index,
inplace&lt;/span&gt;=&lt;span&gt;True)
​
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 重置索引，不做也没关系，主要是为了看着美观一点&lt;/span&gt;
df = df.reset_index(drop=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(df)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;还有一些问题在本例中没有提及内容，下面有两个比较重要，也比较通用的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;日期的处理&lt;/li&gt;
&lt;li&gt;字符编码的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次又介绍了一些关于 Pandas 清洗数据的技能。至少用这几次介绍的处理方法，应该可以对数据做很多清洗工作。&lt;/p&gt;
&lt;p&gt;更多关于数据清洗的内容可以关注知乎上的专栏“&lt;a href=&quot;https://zhuanlan.zhihu.com/dataclean&quot; target=&quot;_blank&quot; data-offset-key=&quot;6evme-1-0&quot; data-editable=&quot;true&quot;&gt;数据清洗&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://zhuanlan.zhihu.com/p/32601421&quot; target=&quot;_blank&quot;&gt;知乎数据清洗- Pandas 清洗“脏”数据（二）&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 23:20:00 +0000</pubDate>
<dc:creator>Boyce Yang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BoyceYang/p/8186033.html</dc:identifier>
</item>
<item>
<title>手撕vue-cli配置文件——config篇 - 手撕黄油</title>
<link>http://www.cnblogs.com/caideyipi/p/8187656.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/caideyipi/p/8187656.html</guid>
<description>&lt;p&gt;最近一直在研究webpack，突然想看看vue-cli中的webpack是如何配置，查阅了很多相关的文章，所以也想出几篇关于vue-cli配置的东西。正所谓“工欲善其事必先利其器”嘛！这一篇主要是分析vue中关于&lt;span&gt;&lt;strong&gt;config文件夹中的相关代码&lt;/strong&gt;&lt;/span&gt;；&lt;/p&gt;
&lt;p&gt;首先我们先看一下config的文件结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
|-&lt;span&gt;config
&lt;/span&gt;|---&lt;span&gt;dev.env.js
&lt;/span&gt;|---&lt;span&gt;index.js
&lt;/span&gt;|---prod.env.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开我们的vue项目文件夹我们可以清楚的看到文件夹下的三个文件，&lt;strong&gt;“dev.env.js”&lt;/strong&gt;，&lt;strong&gt;“index.js”&lt;/strong&gt;，&lt;strong&gt;“prod.env.js”&lt;/strong&gt;，我们先打开prod.env.js的文件，看里面的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;
module.exports &lt;/span&gt;=&lt;span&gt; {
  NODE_ENV: &lt;/span&gt;'&quot;production&quot;'&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;prod.env.js的内容非常简单，仅仅是导出了一个对象，里面写明了执行环境是“production（生产环境）”；我们接下来看与之对应的“dev.env.js”文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
'use strict'
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入webpack-merge模块&lt;/span&gt;
const merge = require('webpack-merge'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入刚才打开的prod.env.js&lt;/span&gt;
const prodEnv = require('./prod.env'&lt;span&gt;)

module.exports &lt;/span&gt;=&lt;span&gt; merge(prodEnv, {
     NODE_ENV: &lt;/span&gt;'&quot;development&quot;'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在“dev.env.js”中，先引入了webpack-merge这个模块。这个模块的作用是来合并两个配置文件对象并生成一个新的配置文件，有点儿类似于es6的object.assign();&lt;/p&gt;
&lt;p&gt;vue-cli中将一些通用的配置抽出来放在一个文件内，在对不同的环境配置不同的代码，最后使用webpack-merge来进行合并，减少重复代码，正如文档中所说，“&lt;span&gt;&lt;strong&gt;webpack遵循不重复原则(Don't repeat yourself - DRY)，不会再不同的环境中配置相同的代码&lt;/strong&gt;&lt;/span&gt;”&lt;/p&gt;
&lt;p&gt;当然，关于webpack-merge的内容还远不止这些，想了解更多关于这个模块的朋友请访问 https://www.npmjs.com/package/webpack-merge&lt;/p&gt;
&lt;p&gt;好，让我们接着回到代码中来，引入webpack-merge后这个文件又引入了prod.env.js，接着就将prod.env.js的配置和新的配置，即指明开发环境（development）进行了merge。（我有点儿不太理解为什么要这样做，如果不merge直接写module.exports={NODE_ENV:'&quot;development'}也是可以的，难道是为了优雅降级？）&lt;/p&gt;
&lt;p&gt;还有一点需要注意是的，&lt;span&gt;development和production一定要加双引号，不然会报错！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后，我们来看index.js：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
'use strict'
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Template version: 1.2.4&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; see http://vuejs-templates.github.io/webpack for documentation.&lt;/span&gt;
&lt;span&gt;
const path &lt;/span&gt;= require('path'&lt;span&gt;)

module.exports &lt;/span&gt;=&lt;span&gt; {
  dev: {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Paths&lt;/span&gt;
    assetsSubDirectory: 'static'&lt;span&gt;,
    assetsPublicPath: &lt;/span&gt;'/'&lt;span&gt;,
    proxyTable: {},

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Various Dev Server settings&lt;/span&gt;
    host: 'localhost', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; can be overwritten by process.env.HOST&lt;/span&gt;
    port: 8080, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; can be overwritten by process.env.PORT, if port is in use, a free one will be determined&lt;/span&gt;
    autoOpenBrowser: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    errorOverlay: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    notifyOnErrors: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    poll: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-&lt;/span&gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use Eslint Loader?&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If true, your code will be linted during bundling and&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; linting errors and warnings will be shown in the console.&lt;/span&gt;
    useEslint: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If true, eslint errors and warnings will also be shown in the error overlay&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; in the browser.&lt;/span&gt;
    showEslintErrorsInOverlay: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Source Maps
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; https://webpack.js.org/configuration/devtool/#development&lt;/span&gt;
    devtool: 'eval-source-map'&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If you have problems debugging vue-files in devtools,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; set this to false - it *may* help&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; https://vue-loader.vuejs.org/en/options.html#cachebusting&lt;/span&gt;
    cacheBusting: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; with this option, according to the CSS-Loader README&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (https://github.com/webpack/css-loader#sourcemaps)&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; In our experience, they generally work as expected,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; just be aware of this issue when enabling this option.&lt;/span&gt;
    cssSourceMap: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
  },

  build: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Template for index.html&lt;/span&gt;
    index: path.resolve(__dirname, '../dist/index.html'&lt;span&gt;),

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Paths&lt;/span&gt;
    assetsRoot: path.resolve(__dirname, '../dist'&lt;span&gt;),
    assetsSubDirectory: &lt;/span&gt;'static'&lt;span&gt;,
    assetsPublicPath: &lt;/span&gt;'/'&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Source Maps
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    productionSourceMap: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; https://webpack.js.org/configuration/devtool/#production&lt;/span&gt;
    devtool: '#source-map'&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gzip off by default as many popular static hosts such as&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Surge or Netlify already gzip all static assets for you.&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Before setting to `true`, make sure to:&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; npm install --save-dev compression-webpack-plugin&lt;/span&gt;
    productionGzip: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    productionGzipExtensions: [&lt;/span&gt;'js', 'css'&lt;span&gt;],

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Run the build command with an extra argument to&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; View the bundle analyzer report after build finishes:&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; `npm run build --report`&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set to `true` or `false` to always turn it on or off&lt;/span&gt;
&lt;span&gt;    bundleAnalyzerReport: process.env.npm_config_report
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开头引入了node中的path模块，&lt;/p&gt;
&lt;p&gt;然后我们先来看dev下的配置内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;assetsSubDirectory指的是静态资源文件夹，默认“static”，

assetsPublicPath指的是发布路径，

proxyTable是我们常用来配置代理API的地方，后面的host和port相信大家都知道，我就不细说了，

autoOpenBrowser是否自动打开浏览器

errorOverlay查询错误

notifyOnErrors通知错误
，
poll是跟devserver相关的一个配置，webpack为我们提供的devserver是可以监控文件改动的，但在有些情况下却不能工作，我们可以设置一个轮询（poll）来解决

useEslint是否使用eslint

showEslintErrorsInOverlay是否展示eslint的错误提示

devtool webpack提供的用来方便调试的配置，它有四种模式，可以查看webpack文档了解更多

cacheBusting 一个配合devtool的配置，当给文件名插入新的hash导致清楚缓存时是否生成souce maps，默认在开发环境下为true，不过文档中还写了一句话：“Turning &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; off can help &lt;span&gt;with&lt;/span&gt;&lt;span&gt; source map debugging.”额。。。

cssSourceMap 是否开启cssSourceMap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们再来看build下的配置内容:&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
index 编译后index.html的路径，path.resolve(__dirname, '../dist'&lt;span&gt;)中

path.resolve(__dirname）指的是index.js所在的绝对路径，再去找“..&lt;/span&gt;/dist”这个路径（node相关的知识），
&lt;span&gt;
assetsRoot打包后的文件根路径，至于assetsSubDirectory和assetsPublicPath跟dev中的一样，

productionSourceMap是否开启source&lt;/span&gt;-&lt;span&gt;map，

devtool同dev，

productionGzip是否压缩，

productionGzipExtensions gzip模式下需要压缩的文件的扩展名，设置后会对相应扩展名的文件进行压缩

bundleAnalyzerReport 是否开启打包后的分析报告&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;&lt;span&gt;截止到这儿，config文件夹下的内容基本上就过完了，正如名字告诉我们的，这三个文件仅仅是写死的配置文件，截止目前还没遇到太多关于webpack的东西，不过随着我们接下来对build文件夹得内容进行分析后，我们就会对vue的配置有了更深的了解，也更能体会到vue配置的厉害之处！&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 03 Jan 2018 17:08:00 +0000</pubDate>
<dc:creator>手撕黄油</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/caideyipi/p/8187656.html</dc:identifier>
</item>
<item>
<title>一、源代码-面向CLR的编译器-托管模块-(元数据&amp;IL代码) - 郑小超</title>
<link>http://www.cnblogs.com/GreenLeaves/p/8186473.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GreenLeaves/p/8186473.html</guid>
<description>&lt;p&gt;本文脉络图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/772156/201801/772156-20180104000422143-1292139030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、CLR(Common Language Runtime)公共语言运行时简介&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/772156/201801/772156-20180102112444534-548068021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(1)、公共语言运行时是一种可由多种编程语言一起使用的&quot;运行时&quot;.&lt;/p&gt;
&lt;p&gt;(2)、CLR的核心功能可由面向CLR的所有语言使用,例如:&quot;运行时&quot;使用异常来报告错误,因此面向CLR的所有语言都使用异常来报告错误.另外,CLR允许创建线程,所以所有面向CLR的编程语言都允许创建线程.&lt;/p&gt;
&lt;p&gt;(3)、运行时,CLR并不关心程序使用的是哪种语言,只要该语言是面向CLR的就行.&lt;/p&gt;

&lt;p&gt;2、面向CLR的语言编译器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/772156/201801/772156-20180102145944034-1100108910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、面向CLR的语言编译器编译源代码的过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/772156/201801/772156-20180102175700971-1446330515.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用任何面向CLR的语言创建源文件,然后用对应的编译器去检查语法和源代码,无论选择哪个编译器,通过编译器编译后生成的都是托管模块((IL)中间语言和元数据的组合).&lt;/p&gt;
&lt;p&gt;本地代码编译器(native code compilers)生成的是面向特定CPU架构(比如X86、X64、ARM)的代码。相反,面向CLR的每个编译器生成的都是IL(中间语言)代码(IL代码有时被称为托管代码,因为CLR管理它们的执行),除了生成IL(中间语言),面向CLR的每个托管模块中生成完整的元数据.&lt;/p&gt;
&lt;p&gt;(1)、托管模块&lt;/p&gt;
&lt;p&gt;托管模块简介&lt;/p&gt;
&lt;p&gt;        标准的32位Microsoft Windows可移植执行体(PE32)文件&lt;/p&gt;
&lt;p&gt;        标准的64位Microsoft Windows可移植执行体(PE32+)文件&lt;/p&gt;
&lt;p&gt;它们都需要CLR才能执行.&lt;/p&gt;
&lt;p&gt;注:托管模块总是利用Windows的数据执行保护(Data Execution Prevention,DEP)和地址空间布局随机化(Adress Space Layout Ramdomization),这两个功能旨在增强整个系统的安全性.&lt;/p&gt;
&lt;p&gt;托管模块构成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/772156/201801/772156-20180102172019706-166439387.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PE32或PE32+头：&lt;/strong&gt;标准Windows PE文件头,类似于&quot;公共文件对象格式&quot;(Common Object Format,COFF)头。&lt;/p&gt;
&lt;p&gt;注:如果文件头使用PE32格式,文件能在Windows的32位版本和64位版本上运行,如果文件头是PE32+格式,那么该文件只能在Windows64位版本上运行.&lt;/p&gt;
&lt;p&gt;文件头还标识了文件类型,包括GUI、CUI或者DLL,并包含一个时间标记来指出文件的生成时间.对于只包含IL代码的模块,PE32+头的大多数信息会被忽视.如果是包含本机CPU代码的模块,这个头包含与CPU代码有关的信息.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CLR头：&lt;/strong&gt;包含使这个模块成为托管模块的信息(可由CLR和一些实用程序进行解释),头中包含要求的CLR版本,一些标志(flag),托管模块入口方法(Main方法)的MethodDef元数据token以及模块的元数据、资源、强名称、一些标志项及其他一些不太重要的数据项的位置/大小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元数据：&lt;/strong&gt;每个托管模块都包含元数据表.主要有两种表:一种表描述源代码中定义的类型和成员,另一种描述源代码中引用的类型和成员.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IL(中间语言)代码：&lt;/strong&gt;编译器编译源代码时生成的代码.在运行时,CLR将IL编译成本机CPU指令.&lt;/p&gt;

&lt;p&gt;(2)、元数据详解&lt;/p&gt;
&lt;p&gt;元数据简介:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元数据大致构成:包括com的&quot;类型库&quot;和&quot;接口定义语言&quot;(Interface Definition Language,IDL)文件,但CLR数据远比它们全面.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:元数据总是嵌入和代码相同的EXE/DLL文件中,这使两者密不可分,由于编译器和源代码同时生成元数据和代码,把它们绑定到一起,并嵌入到最终生成的托管模块,所以元数据和IL代码永远不会失去同步.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;元数据的用途:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/772156/201801/772156-20180103231438924-505651469.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、元数据避免了对原生C/C++头和库文件的需求,因为在实现类型/成员的IL代码中,已经包含了有关引用类型/成员的全部信息,所以编译器直接从托管模块中读取元数据即可.&lt;/p&gt;
&lt;p&gt;2、visual stdio的智能提示通过解析元数据的方式,来告诉我们一个类型有哪些属性、方法、字段、事件,来提高我们的开发效率.&lt;/p&gt;
&lt;p&gt;3、CLR的代码验证过程中确保代码只执行类型安全的操作.&lt;/p&gt;
&lt;p&gt;4、元数据允许将对象的字段序列化到内存中,在发送到另外一台机器,进行反序列化,重塑对象的状态.&lt;/p&gt;
&lt;p&gt;5、元数据允许垃圾回收器跟踪对象生存期,垃圾回收器能判断任何对象的类型,并从元数据中知道那个对象的哪个字段引用了那个类型.&lt;/p&gt;


&lt;p&gt;Microsoft的C#、Visual Basic,F#和IL汇编器总是生成包含托管代码(IL)和托管数据(可进行垃圾回收的数据类型)的模块。为了执行包含托管代码以及/或者托管数据的模块,最终用户必须在自己的电脑上安装CLR(目前作为.Net Framework的一部分提供)&lt;/p&gt;
&lt;p&gt;C++编译器默认生成包含非托管(native)代码的EXE/DLL模块,并在运行时操纵非托管数据(native 内存),这些模块不需要CLR即可执行,通过命令行开关,C++编译器就更能生成包含托管代码的模块,当然用户必须安装CLR才能执行这种代码,在前面提到的所有的Microsoft编译器中,Misrosoft C++编译器是独一无二的,只有它才允许开发人员同时写托管代码和非托管代码,并生成到同一个模块中,它也是惟一一个允许开发人员在源代码中定义托管非托管数据类型的Microsoft编译器.它的灵活性是其他编译器无法比拟的,因为它允许开发人员在托管代码中使用原生C/C++代码,时机成熟之后在使用托管类型.&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 16:10:00 +0000</pubDate>
<dc:creator>郑小超</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GreenLeaves/p/8186473.html</dc:identifier>
</item>
<item>
<title>QT串口通信 - 菜头大大</title>
<link>http://www.cnblogs.com/wurenzhong/p/8186437.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wurenzhong/p/8186437.html</guid>
<description>&lt;p&gt;前言：如果用qt写程序作为上位机，让后通过和usb和下位机通信的时候，就需要用到qt中的串口通信了。&lt;/p&gt;
&lt;p&gt;使用qt中的串口通信的时候需要用到的两个头文件分别为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#include &amp;lt;QtSerialPort/QSerialPort&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QtSerialPort/QSerialPortInfo&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了加上面两个头文件之外，还需要在工程文件中加下面一行代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
QT       += serialport
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们一般都需要先定义一个全局的串口对象，记得在自己的头文件中添加上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
QSerialPort *serial;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;到这里我们就可以调用qt串口通信中的函数了，一般来讲qt串口通信需要经过7步:&lt;/p&gt;
&lt;p&gt;1、设置串口名（如COM1）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 serial = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QSerialPort;
 serial&lt;/span&gt;-&amp;gt;setPortName(ui-&amp;gt;PortBox-&amp;gt;currentText());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我使用自动寻找可用串口的方法，直接自动设置了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; QSerialPortInfo &amp;amp;&lt;span&gt;info,QSerialPortInfo::availablePorts())
    {
        QSerialPort serial;
        serial.setPort(info);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(serial.open(QIODevice::ReadWrite))
        {
            ui&lt;/span&gt;-&amp;gt;PortBox-&amp;gt;&lt;span&gt;addItem(serial.portName());
            serial.close();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、打开串口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
serial-&amp;gt;open(QIODevice::ReadWrite);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、设置波特率（如115200）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 serial-&amp;gt;setBaudRate(QSerialPort::Baud115200);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置波特率为115200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、设置数据位（如8）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 serial-&amp;gt;setDataBits(QSerialPort::Data8);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置数据位8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、设置校验位（如0）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
serial-&amp;gt;setParity(QSerialPort::NoParity); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验位设置为0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6、设置停止位（如1）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 serial-&amp;gt;setStopBits(QSerialPort::OneStop);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;停止位设置为1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7、设置流控制&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 serial-&amp;gt;setFlowControl(QSerialPort::NoFlowControl);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置为无流控制&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;到这里串口通信的设置就完成了，下面我们需要实现对数据的发送和接收&lt;/p&gt;
&lt;p&gt;1、连接数据接收槽函数，下位机中一有数据发送过来的时候就会响应这个槽函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
QObject::connect(serial,&amp;amp;QSerialPort::readyRead,&lt;span&gt;this&lt;/span&gt;,&amp;amp;MainWindow::ReadData);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、从上位机发送数据到下位机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
serial-&amp;gt;write(ui-&amp;gt;textEdit_2-&amp;gt;toPlainText().toLatin1());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;主要使用的函数就这些了，我们来看看代码：&lt;/p&gt;
&lt;p&gt;1、工程文件SerialPortTool.pro&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_0f9a138f-4df8-48d4-bed6-955952d5db06&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0f9a138f-4df8-48d4-bed6-955952d5db06&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0f9a138f-4df8-48d4-bed6-955952d5db06&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #-------------------------------------------------
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; # Project created by QtCreator &lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt;-17T15:&lt;span&gt;43&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; #-------------------------------------------------
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; QT       +=&lt;span&gt; core gui
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; QT       +=&lt;span&gt; serialport
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; greaterThan(QT_MAJOR_VERSION, &lt;span&gt;4&lt;/span&gt;): QT +=&lt;span&gt; widgets
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; TARGET =&lt;span&gt; SerialPortTool
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; TEMPLATE =&lt;span&gt; app
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; # The following define makes your compiler emit warnings &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you use
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; # any feature of Qt which &lt;span&gt;as&lt;/span&gt; been marked &lt;span&gt;as&lt;/span&gt;&lt;span&gt; deprecated (the exact warnings
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;# depend on your compiler). Please consult the documentation of the
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; # deprecated API &lt;span&gt;in&lt;/span&gt; order to know how to port your code away &lt;span&gt;from&lt;/span&gt;&lt;span&gt; it.
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; DEFINES +=&lt;span&gt; QT_DEPRECATED_WARNINGS
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; # You can also make your code fail to compile &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you use deprecated APIs.
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; # In order to &lt;span&gt;do&lt;/span&gt;&lt;span&gt; so, uncomment the following line.
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; # You can also &lt;span&gt;select&lt;/span&gt;&lt;span&gt; to disable deprecated APIs only up to a certain version of Qt.
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; #DEFINES += QT_DISABLE_DEPRECATED_BEFORE=&lt;span&gt;0x060000&lt;/span&gt;    # disables all the APIs deprecated before Qt &lt;span&gt;6.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; SOURCES +=&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        main.cpp \
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        mainwindow.cpp
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; HEADERS +=&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        mainwindow.h
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; FORMS +=&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         mainwindow.ui
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;2、头文件mainwindow.h&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_612e2850-f459-4d68-b460-e5629459c14b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_612e2850-f459-4d68-b460-e5629459c14b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_612e2850-f459-4d68-b460-e5629459c14b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #ifndef MAINWINDOW_H
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; MAINWINDOW_H
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;QMainWindow&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;QDebug&amp;gt;
&lt;span&gt; 6&lt;/span&gt; #include &amp;lt;QtSerialPort/QSerialPort&amp;gt;
&lt;span&gt; 7&lt;/span&gt; #include &amp;lt;QtSerialPort/QSerialPortInfo&amp;gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ui {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainWindow;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MainWindow : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QMainWindow
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    Q_OBJECT
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;explicit&lt;/span&gt; MainWindow(QWidget *parent = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     ~&lt;span&gt;MainWindow();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; slots:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; on_OpenSerialButton_clicked();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ReadData();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; on_SendButton_clicked();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     Ui::MainWindow *&lt;span&gt;ui;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     QSerialPort *&lt;span&gt;serial;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; MAINWINDOW_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;3、源文件mainwindow.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_d5caaf34-5008-4427-918c-8d2b5c1d93a8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d5caaf34-5008-4427-918c-8d2b5c1d93a8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d5caaf34-5008-4427-918c-8d2b5c1d93a8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mainwindow.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_mainwindow.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; MainWindow::MainWindow(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    QMainWindow(parent),
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui::MainWindow)
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找可用的串口&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; QSerialPortInfo &amp;amp;&lt;span&gt;info,QSerialPortInfo::availablePorts())
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;        QSerialPort serial;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;        serial.setPort(info);
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(serial.open(QIODevice::ReadWrite))
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             ui-&amp;gt;PortBox-&amp;gt;&lt;span&gt;addItem(serial.portName());
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;            serial.close();
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置波特率下拉菜单默认显示第0项&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     ui-&amp;gt;BaudBox-&amp;gt;setCurrentIndex(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; MainWindow::~&lt;span&gt;MainWindow()
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    delete ui;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MainWindow::on_OpenSerialButton_clicked()
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;OpenSerialButton-&amp;gt;text() == tr(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;打开串口&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         serial = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QSerialPort;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置串口名&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;         serial-&amp;gt;setPortName(ui-&amp;gt;PortBox-&amp;gt;&lt;span&gt;currentText());
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开串口&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         serial-&amp;gt;&lt;span&gt;open(QIODevice::ReadWrite);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置波特率&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         serial-&amp;gt;setBaudRate(QSerialPort::Baud115200);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置波特率为115200
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置数据位数&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt; (ui-&amp;gt;BitBox-&amp;gt;&lt;span&gt;currentIndex())
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             serial-&amp;gt;setDataBits(QSerialPort::Data8);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置数据位8&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置校验位&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt; (ui-&amp;gt;ParityBox-&amp;gt;&lt;span&gt;currentIndex())
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             serial-&amp;gt;&lt;span&gt;setParity(QSerialPort::NoParity);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置停止位&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;switch&lt;/span&gt; (ui-&amp;gt;BitBox-&amp;gt;&lt;span&gt;currentIndex())
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             serial-&amp;gt;setStopBits(QSerialPort::OneStop);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;停止位设置为1&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             serial-&amp;gt;&lt;span&gt;setStopBits(QSerialPort::TwoStop);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置流控制&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         serial-&amp;gt;setFlowControl(QSerialPort::NoFlowControl);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置为无流控制
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭设置菜单使能&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;         ui-&amp;gt;PortBox-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         ui-&amp;gt;BaudBox-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         ui-&amp;gt;BitBox-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         ui-&amp;gt;ParityBox-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         ui-&amp;gt;StopBox-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         ui-&amp;gt;OpenSerialButton-&amp;gt;setText(tr(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;关闭串口&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接信号槽&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;         QObject::connect(serial,&amp;amp;QSerialPort::readyRead,&lt;span&gt;this&lt;/span&gt;,&amp;amp;&lt;span&gt;MainWindow::ReadData);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭串口&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         serial-&amp;gt;&lt;span&gt;clear();
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         serial-&amp;gt;&lt;span&gt;close();
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         serial-&amp;gt;&lt;span&gt;deleteLater();
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;恢复设置使能&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;         ui-&amp;gt;PortBox-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         ui-&amp;gt;BaudBox-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         ui-&amp;gt;BitBox-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         ui-&amp;gt;ParityBox-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         ui-&amp;gt;StopBox-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         ui-&amp;gt;OpenSerialButton-&amp;gt;setText(tr(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;打开串口&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取接收到的信息&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MainWindow::ReadData()
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;    QByteArray buf;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     buf = serial-&amp;gt;&lt;span&gt;readAll();
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;buf.isEmpty())
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;         QString str = ui-&amp;gt;textEdit-&amp;gt;&lt;span&gt;toPlainText();
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         str+=&lt;span&gt;tr(buf);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         ui-&amp;gt;textEdit-&amp;gt;&lt;span&gt;clear();
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         ui-&amp;gt;textEdit-&amp;gt;&lt;span&gt;append(str);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;    buf.clear();
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送按钮槽函数&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MainWindow::on_SendButton_clicked()
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;     serial-&amp;gt;write(ui-&amp;gt;textEdit_2-&amp;gt;&lt;span&gt;toPlainText().toLatin1());
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;4、界面文件mainwindow.ui&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dbee2223-29f5-4fd2-b236-07e37569f1e7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dbee2223-29f5-4fd2-b236-07e37569f1e7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dbee2223-29f5-4fd2-b236-07e37569f1e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt;  2&lt;/span&gt; &amp;lt;ui version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  3&lt;/span&gt;  &amp;lt;&lt;span&gt;class&lt;/span&gt;&amp;gt;MainWindow&amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;  4&lt;/span&gt;  &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QMainWindow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MainWindow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  5&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  6&lt;/span&gt;    &amp;lt;rect&amp;gt;
&lt;span&gt;  7&lt;/span&gt;     &amp;lt;x&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;  8&lt;/span&gt;     &amp;lt;y&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;  9&lt;/span&gt;     &amp;lt;width&amp;gt;&lt;span&gt;547&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 10&lt;/span&gt;     &amp;lt;height&amp;gt;&lt;span&gt;470&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 11&lt;/span&gt;    &amp;lt;/rect&amp;gt;
&lt;span&gt; 12&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 13&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;windowTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 14&lt;/span&gt;    &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;MainWindow&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 15&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 16&lt;/span&gt;   &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;centralWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 17&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 18&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 19&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt; 20&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;10&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 21&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;50&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 22&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;54&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 23&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;12&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 24&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt; 25&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 26&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 27&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;串口&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 28&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 29&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt; 30&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 31&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 32&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt; 33&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;10&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 34&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;90&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 35&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;54&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 36&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;12&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 37&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt; 38&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 39&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 40&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;波特率&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 41&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 42&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt; 43&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label_3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 44&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 45&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt; 46&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;10&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 47&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;130&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 48&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;54&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 49&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;12&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 50&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt; 51&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 52&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 53&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;数据位&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 54&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 55&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt; 56&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PortBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 57&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 58&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt; 59&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 60&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;50&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 61&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;69&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 62&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;22&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 63&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt; 64&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 65&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt; 66&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BaudBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 67&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 68&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt; 69&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 70&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;90&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 71&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;69&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 72&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;22&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 73&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt; 74&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 75&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;currentIndex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 76&lt;/span&gt;      &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 77&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt; 78&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 79&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 80&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;9600&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 81&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt; 82&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt; 83&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 84&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 85&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;19200&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 86&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt; 87&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt; 88&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 89&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 90&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;38400&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 91&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt; 92&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt; 93&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 94&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 95&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;57600&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 96&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt; 97&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt; 98&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 99&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;100&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;115200&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;101&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt;102&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;103&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;104&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BitBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;105&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;106&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;107&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;108&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;120&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;109&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;69&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;110&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;22&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;111&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;112&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;113&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;currentIndex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;114&lt;/span&gt;      &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;115&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;116&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;117&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;118&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;8&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;119&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt;120&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;121&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;122&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParityBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;123&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;124&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;125&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;126&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;160&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;127&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;69&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;128&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;22&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;129&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;130&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;131&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;132&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;133&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;134&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt;135&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;136&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;137&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label_4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;138&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;139&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;140&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;10&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;141&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;160&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;142&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;61&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;143&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;16&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;144&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;145&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;146&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;147&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;校验位&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;148&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;149&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;150&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label_6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;151&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;152&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;153&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;10&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;154&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;200&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;155&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;54&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;156&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;12&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;157&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;158&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;159&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;160&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;停止位&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;161&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;162&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;163&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StopBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;164&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;165&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;166&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;167&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;200&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;168&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;69&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;169&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;22&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;170&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;171&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;172&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;173&lt;/span&gt;      &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;174&lt;/span&gt;       &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;175&lt;/span&gt;      &amp;lt;/property&amp;gt;
&lt;span&gt;176&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;177&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;178&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OpenSerialButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;179&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;180&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;181&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;182&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;240&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;183&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;71&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;184&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;23&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;185&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;186&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;187&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;188&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;打开串口&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;189&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;190&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;191&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QTextEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;textEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;192&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;193&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;194&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;200&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;195&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;30&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;196&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;221&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;197&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;291&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;198&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;199&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;200&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;201&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QTextEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;textEdit_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;202&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;203&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;204&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;200&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;205&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;330&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;206&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;221&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;207&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;31&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;208&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;209&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;210&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;211&lt;/span&gt;    &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;212&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;213&lt;/span&gt;      &amp;lt;rect&amp;gt;
&lt;span&gt;214&lt;/span&gt;       &amp;lt;x&amp;gt;&lt;span&gt;430&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;215&lt;/span&gt;       &amp;lt;y&amp;gt;&lt;span&gt;330&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;216&lt;/span&gt;       &amp;lt;width&amp;gt;&lt;span&gt;75&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;217&lt;/span&gt;       &amp;lt;height&amp;gt;&lt;span&gt;31&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;218&lt;/span&gt;      &amp;lt;/rect&amp;gt;
&lt;span&gt;219&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;220&lt;/span&gt;     &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;221&lt;/span&gt;      &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;发送&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;222&lt;/span&gt;     &amp;lt;/property&amp;gt;
&lt;span&gt;223&lt;/span&gt;    &amp;lt;/widget&amp;gt;
&lt;span&gt;224&lt;/span&gt;   &amp;lt;/widget&amp;gt;
&lt;span&gt;225&lt;/span&gt;   &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QMenuBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menuBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;226&lt;/span&gt;    &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;227&lt;/span&gt;     &amp;lt;rect&amp;gt;
&lt;span&gt;228&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;229&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;230&lt;/span&gt;      &amp;lt;width&amp;gt;&lt;span&gt;547&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;231&lt;/span&gt;      &amp;lt;height&amp;gt;&lt;span&gt;23&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;232&lt;/span&gt;     &amp;lt;/rect&amp;gt;
&lt;span&gt;233&lt;/span&gt;    &amp;lt;/property&amp;gt;
&lt;span&gt;234&lt;/span&gt;   &amp;lt;/widget&amp;gt;
&lt;span&gt;235&lt;/span&gt;   &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QToolBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mainToolBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;236&lt;/span&gt;    &amp;lt;attribute name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;toolBarArea&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;237&lt;/span&gt;     &amp;lt;&lt;span&gt;enum&lt;/span&gt;&amp;gt;TopToolBarArea&amp;lt;/&lt;span&gt;enum&lt;/span&gt;&amp;gt;
&lt;span&gt;238&lt;/span&gt;    &amp;lt;/attribute&amp;gt;
&lt;span&gt;239&lt;/span&gt;    &amp;lt;attribute name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;toolBarBreak&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;240&lt;/span&gt;     &amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;false&lt;/span&gt;&amp;lt;/&lt;span&gt;bool&lt;/span&gt;&amp;gt;
&lt;span&gt;241&lt;/span&gt;    &amp;lt;/attribute&amp;gt;
&lt;span&gt;242&lt;/span&gt;   &amp;lt;/widget&amp;gt;
&lt;span&gt;243&lt;/span&gt;   &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QStatusBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;statusBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;244&lt;/span&gt;  &amp;lt;/widget&amp;gt;
&lt;span&gt;245&lt;/span&gt;  &amp;lt;layoutdefault spacing=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;246&lt;/span&gt;  &amp;lt;resources/&amp;gt;
&lt;span&gt;247&lt;/span&gt;  &amp;lt;connections/&amp;gt;
&lt;span&gt;248&lt;/span&gt; &amp;lt;/ui&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;效果图如下，自己设置对应下位机的波特率就可以实现数据收发了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1206191/201801/1206191-20180103235549456-1964989079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 15:58:00 +0000</pubDate>
<dc:creator>菜头大大</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wurenzhong/p/8186437.html</dc:identifier>
</item>
<item>
<title>Golang 网络爬虫框架gocolly/colly 四 - majianguo</title>
<link>http://www.cnblogs.com/majianguo/p/8186429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/majianguo/p/8186429.html</guid>
<description>&lt;p&gt;       爬虫靠演技，表演得越像浏览器，抓取数据越容易，这是我多年爬虫经验的感悟。回顾下个人的爬虫经历，共分三个阶段：第一阶段，09年左右开始接触爬虫，那时由于项目需要，要访问各大国际社交网站，Facebook，myspace，filcker，youtube等等，国际上叫得上名字的社交网站都爬过，大部分网站提供restful api，有些功能没有api，就只能用http抓包工具分析协议，自己爬；国内的优酷、土豆、校内网、web版qq、网页邮箱等等也都爬过；那时候先用C#写demo，项目是C++的，所以还要转换成托管C++的代码。第一阶段的主要心得是cookie管理，比较难搞的cookie就借助于webbrowser控件。&lt;/p&gt;
&lt;p&gt;      第二阶段是13年左右，做的是金融数据分析类软件和网络机器人，爬虫编程语言依然借助于C# ，发包收包全靠HttpWebRequest和HttpWebResponse，cookie管理靠CookieContainer，HTML分析靠HtmlAgilityPack，验证码识别靠自己预处理封装过的tesseract，协议分析靠fiddler，元素选择靠浏览器调试器，这套功夫在手基本可以畅游网络，实现的机器人随意游走于博客、微博，自动留言、发帖、评论；各大金融网站、上交所、深交所、巨潮网络、互动平台等等数据任爬。&lt;/p&gt;
&lt;p&gt;      第三阶段就是现在了。四年多过去了，重新学习审视爬虫技术，发现武器更强大了：go语言，goquery，colly，chromedp，webloop等，强大的语言及工具使爬虫更简单、更高效。&lt;/p&gt;
&lt;p&gt;      多年的爬虫经验总结了开头那句话。已知的爬虫手段无外乎三大类：一，分析HTTP协议，构造请求；二，利用浏览器控件，获取cookie、页面元素、调用js脚本等；phantomjs、webloop属于此类；第三类是直接操作浏览器，chromedp属于此类；微软还提供了操纵ie浏览器的com接口，很早以前用C++写过，比较难用，代码写起来很恶心，需要较多的条件判断。构造请求直接快速，浏览器控件和操纵浏览器可靠安全，可以省去很多不必要的协议分析、js脚本分析，但速度慢，加载了很多无用的数据、图片等；第二、三种与第一种混用效果更佳，只要表演地越像浏览器就越安全可靠，或者干脆操纵浏览器，只要不超过服务器的人类操作阈值判定，ip基本不会被封。单ip不够用时，就设置代理来切换。&lt;/p&gt;
&lt;p&gt;      学无止境，不断用新的武器武装自己。下面贡献一个小例子，爬取上交所的AB股股票列表，简单地show下演技。（哈哈哈）&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1116963/201801/1116963-20180103233403862-1668434955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;     该页面提供了下载功能，A股的下载地址 http://query.sse.com.cn/security/stock/downloadStockListFile.do?csrcCode=&amp;amp;stockCode=&amp;amp;areaName=&amp;amp;stockType=1&lt;/p&gt;
&lt;p&gt;     B股的下载地址  http://query.sse.com.cn/security/stock/downloadStockListFile.do?csrcCode=&amp;amp;stockCode=&amp;amp;areaName=&amp;amp;stockType=2&lt;/p&gt;
&lt;p&gt;     拿到了这个地址就开始Visit了&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
c.Visit(&quot;http://query.sse.com.cn/security/stock/downloadStockListFile.do?csrcCode=&amp;amp;stockCode=&amp;amp;areaName=&amp;amp;stockType=1&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   UserAgent设置成了Chrome&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
     c.UserAgent = &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　发现不行，程序会报错，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2018&lt;/span&gt;/&lt;span&gt;01&lt;/span&gt;/&lt;span&gt;03&lt;/span&gt; &lt;span&gt;23&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;27&lt;/span&gt; Forbidden
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把这个网址直接在浏览器地址栏中打开也是不行的，会报告“Error 403: SRVE0190E: 找不到文件：/error/error_cn.jsp”&lt;/p&gt;
&lt;p&gt;服务端做了些限制，打开fiddler看下协议&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1116963/201801/1116963-20180103234410081-969945780.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;请求中有一大堆cookie，第一感觉是可能没有加cookie的缘故，于是利用chromedp打开页面，再调用ajax去请求，刚开始ajax没有带cookie也请求成功了，&lt;/p&gt;
&lt;p&gt;后来发现关键在于请求头中的“Referer”，有了Referer就行了。&lt;/p&gt;
&lt;p&gt;干脆把所有的头补全，更像浏览器些，这不会吃亏：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;44&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
     c.OnRequest(func(r *colly.Request) {
                r.Headers.Set(&quot;Host&quot;, &quot;query.sse.com.cn&quot;)
                r.Headers.Set(&quot;Connection&quot;, &quot;keep-alive&quot;)
                r.Headers.Set(&quot;Accept&quot;, &quot;*/*&quot;)
                r.Headers.Set(&quot;Origin&quot;, &quot;http://www.sse.com.cn&quot;)
                r.Headers.Set(&quot;Referer&quot;, &quot;http://www.sse.com.cn/assortment/stock/list/share/&quot;) //关键头 如果没有 则返回 错误
                r.Headers.Set(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;)
                r.Headers.Set(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.9&quot;)
        })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;附上完整的代码，将股票保存到CSV文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;63&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
package sse

import (
        &quot;encoding/csv&quot;
        &quot;os&quot;
        &quot;strings&quot;

        &quot;github.com/gocolly/colly&quot;
)

/*GetStockListA 获取上海证券交易所股票列表
A股
*/
func GetStockListA(saveFile string) (err error) {

        stocks, err := getStockList(&quot;http://query.sse.com.cn/security/stock/downloadStockListFile.do?csrcCode=&amp;amp;stockCode=&amp;amp;areaName=&amp;amp;stockType=1&quot;)
        if err != nil {
                return err
        }

        err = saveStockList2CSV(stocks, saveFile)
        return
}

/*GetStockListB 获取上海证券交易所股票列表
B股
*/
func GetStockListB(saveFile string) (err error) {
        stocks, err := getStockList(&quot;http://query.sse.com.cn/security/stock/downloadStockListFile.do?csrcCode=&amp;amp;stockCode=&amp;amp;areaName=&amp;amp;stockType=2&quot;)
        if err != nil {
                return err
        }
        err = saveStockList2CSV(stocks, saveFile)
        return
}
func saveStockList2CSV(stockList string, file string) (err error) {

        vals := strings.Split(stockList, &quot;\n&quot;)

        f, err := os.Create(file)
        if err != nil {
                return err
        }
        defer f.Close()
        fw := csv.NewWriter(f)

        for _, row := range vals {

                rSplits := strings.Split(row, &quot;\t&quot;)

                rSplitsRslt := make([]string, 0)
                for _, sp := range rSplits {
                        trimSp := strings.Trim(sp, &quot; &quot;)
                        if len(trimSp) &amp;gt; 0 {
                                rSplitsRslt = append(rSplitsRslt, trimSp)
                        }
                }
                if len(rSplitsRslt) &amp;gt; 0 {
                        err = fw.Write(rSplitsRslt)
                        if err != nil {
                                return err
                        }
                }
        }
        fw.Flush()

        return
}

func getStockList(url string) (stockList string, err error) {

        //GET http://query.sse.com.cn/security/stock/downloadStockListFile.do?csrcCode=&amp;amp;stockCode=&amp;amp;areaName=&amp;amp;stockType=1 HTTP/1.1
        //Host: query.sse.com.cn
        //Connection: keep-alive
        //Accept: */*
        //Origin: http://www.sse.com.cn
        //User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36
        //Referer: http://www.sse.com.cn/assortment/stock/list/share/
        //Accept-Encoding: gzip, deflate
        //Accept-Language: zh-CN,zh;q=0.9`

        c := colly.NewCollector()

        c.UserAgent = &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36&quot;
        c.OnRequest(func(r *colly.Request) {
                r.Headers.Set(&quot;Host&quot;, &quot;query.sse.com.cn&quot;)
                r.Headers.Set(&quot;Connection&quot;, &quot;keep-alive&quot;)
                r.Headers.Set(&quot;Accept&quot;, &quot;*/*&quot;)
                r.Headers.Set(&quot;Origin&quot;, &quot;http://www.sse.com.cn&quot;)
                r.Headers.Set(&quot;Referer&quot;, &quot;http://www.sse.com.cn/assortment/stock/list/share/&quot;) //关键头 如果没有 则返回 错误
                r.Headers.Set(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;)
                r.Headers.Set(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.9&quot;)
        })
        c.OnResponse(func(resp *colly.Response) {
                stockList = string(resp.Body)
        })

        c.OnError(func(resp *colly.Response, errHttp error) {
                err = errHttp
        })

        err = c.Visit(url)

        return
}
&lt;/pre&gt;&lt;/div&gt;



&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
func main() {

        var err error
        err = sse.GetStockListA(&quot;e:\\sseA.csv&quot;)
        if err != nil {
                log.Fatal(err)
        }
        err = sse.GetStockListB(&quot;e:\\sseB.csv&quot;)
        if err != nil {
                log.Fatal(err)
        }

}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 转载请注明出处：  http://www.cnblogs.com/majianguo/p/8186429.html&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 15:54:00 +0000</pubDate>
<dc:creator>majianguo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/majianguo/p/8186429.html</dc:identifier>
</item>
<item>
<title>Siamese Network理解 - 笨兔勿应</title>
<link>http://www.cnblogs.com/bentuwuying/p/8186364.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bentuwuying/p/8186364.html</guid>
<description>&lt;p&gt;提起siamese network一般都会引用这两篇文章： &lt;/p&gt;
&lt;p&gt;《Learning a similarity metric discriminatively, with application to face verification》和《 Hamming Distance Metric Learning》。&lt;/p&gt;
&lt;p&gt;本文主要通过论文《Learning a Similarity Metric Discriminatively, with Application to Face Verification》来理解siamese网络。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Siamese网络是一种相似性度量方法，当类别数多，但每个类别的样本数量少的情况下可用于类别的识别、分类等。传统的用于区分的分类方法是需要确切的知道每个样本属于哪个类，需要针对每个样本有确切的标签。而且相对来说标签的数量是不会太多的。当类别数量过多，每个类别的样本数量又相对较少的情况下，这些方法就不那么适用了。其实也很好理解，对于整个数据集来说，我们的数据量是有的，但是对于每个类别来说，可以只有几个样本，那么用分类算法去做的话，由于每个类别的样本太少，我们根本训练不出什么好的结果，所以只能去找个新的方法来对这种数据集进行训练，从而提出了siamese网络。siamese网络从数据中去学习一个相似性度量，用这个学习出来的度量去比较和匹配新的未知类别的样本。这个方法能被应用于那些类别数多或者整个训练样本无法用于之前方法训练的分类问题。&lt;/p&gt;
&lt;h2 id=&quot;主要思想&quot;&gt;主要思想&lt;/h2&gt;
&lt;p&gt;主要思想是通过一个函数将输入映射到目标空间，在目标空间使用简单的距离（欧式距离等）进行对比相似度。在训练阶段去最小化来自相同类别的一对样本的损失函数值，最大化来自不同类别的一堆样本的损失函数值。给定一组映射函数&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202163818009?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;,其中参数为W，我们的目的就是去找一组参数W。使得当&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202163910877?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;和&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202163955253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;属于同一个类别的时候，相似性度量&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164115060?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;是一个较小的值，当&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164143910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;和&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164207847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;属于不同的类别的时候，相似性度量&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164231629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;较大。这个系统是用训练集中的成对样本进行训练。当&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164258723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;和&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164317266?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;来自相同类别的时候，最小化损失函数&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164806102?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;，当&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164837209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;和&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164858041?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;来自不同类别的时候，最大化&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164918647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;。这里的&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202164941288?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;除了需要可微外不需要任何的前提假设，因为针对成对样本输入，这里两个相同的函数G，拥有一份相同的参数W，即这个结构是对称的，我们将它叫做siamese architecture。 &lt;br/&gt;在这篇论文中，作者用这个网络去做面部识别，比较两幅图片是不是同一个人，而且这个网络的一个优势是可以去区分那些新的没有经过训练的类别的样本。&lt;/p&gt;
&lt;p&gt;Siamese也算是降维方法的一种。常见的降维方法有PCA、LDA、Kernel-PCA、MDS、LLE、LB、ISOmap、FA等不做具体介绍。&lt;/p&gt;
&lt;h2 id=&quot;网络结构&quot;&gt;网络结构&lt;/h2&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202162540980?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;上图是论文中的网络结构图，左右两边两个网络是完全相同的网络结构，它们共享相同的权值W，输入数据为一对图片（X1,X2,Y）,其中Y=0表示X1和X2属于同一个人的脸，Y=1则表示不为同一个人。即相同对为（X1,X2,0）,欺骗对为（X1,X2’,1）针对两个不同的输入X1和X2，分别输出低维空间结果为&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165039679?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;和&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165104616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;，它们是由&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165128070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;和&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165144669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;经过网络映射得到的。然后将得到的这两个输出结果使用能量函数&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165205373?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;进行比较。 &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165228358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;损失函数定义&quot;&gt;损失函数定义&lt;/h2&gt;
&lt;p&gt;我们假设损失函数只和输入和参数有关，那么我们损失函数的形式为： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202162649258?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;其中&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202162835528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;是第i个样本，是由一对图片和一个标签组成的，其中LG是只计算相同类别对图片的损失函数，LI是只计算不相同类别对图片的损失函数。P是训练的样本数。通过这样分开设计，可以达到当我们要最小化损失函数的时候，可以减少相同类别对的能量，增加不相同对的能量。很简单直观的方法是实现这个的话，我们只要将LG设计成单调增加，让LI单调递减就可以了，但是我们要保证一个前提就是，不相同的图片对距离肯定要比相同图片对的距离小，那么就是要满足： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202162908557?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;所以论文中用了一个 &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202162934029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;作为总的损失函数，可以满足这个condition1。论文中进行了各种假设的证明已经单调性的证明，这里不再重复。 &lt;br/&gt;最后给出一个精确的对单个样本的损失函数： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165705598?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;其中 &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202163016043?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;,Q是一个常量。 &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202163032887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;上图说明了收敛性。&lt;/p&gt;
&lt;h2 id=&quot;总结思想&quot;&gt;总结思想&lt;/h2&gt;
&lt;p&gt;其实讲了这么多，主要思想就是三点： &lt;br/&gt;1、输入不再是单个样本，而是一对样本，不再给单个的样本确切的标签，而且给定一对样本是否来自同一个类的标签，是就是0，不是就是1 &lt;br/&gt;2、设计了两个一模一样的网络，网络共享权值W，对输出进行了距离度量，可以说l1、l2等。 &lt;br/&gt;3、针对输入的样本对是否来自同一个类别设计了损失函数，损失函数形式有点类似交叉熵损失： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165807340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;最后使用获得的损失函数，使用梯度反传去更新两个网络共享的权值W。&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;p&gt;这个网络主要的优点是淡化了标签，使得网络具有很好的扩展性，可以对那些没有训练过的类别进行分类，这点是优于很多算法的。而且这个算法对一些小数据量的数据集也适用，变相的增加了整个数据集的大小，使得数据量相对较小的数据集也能用深度网络训练出不错的效果。&lt;/p&gt;
&lt;h2 id=&quot;实验设计&quot;&gt;实验设计&lt;/h2&gt;
&lt;p&gt;实验的时候要注意，输入数据最好打乱，由于这样去设计数据集后，相同类的样本对肯定比不相同的样本对数量少，在进行训练的时候最后将两者的数据量设置成相同数量。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文解释的只是最早提出的siamese网络结构，提出的是一种网络结构思想，具体的使用的网络形式完全可以自己定义。包括损失函数，相似度距离的定义等。比如将损失函数的&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170202165859325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3hmMTA2MTkyNjk1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;用hige loss代替等。 &lt;br/&gt;《Hamming Distance Metric Learning》这篇论文对siamese进一步改进，提出了一个triple net，主要贡献是将成对样本改成了三个样本，输入由（X1,X2,Y）变成了（X1，X2，X1’），表示X1和X1’是相同类别的样本，X1和x2是不同样本的类别。 &lt;br/&gt;《Learning to Compare Image Patches via Convolutional Neural Networks》这篇论文写得也很好，将两个网络进行合并，输入的成对标签直接同时输入同一个网络。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Shicoder/DeepLearning_Demo/tree/master/siamese_tf_mnist&quot; target=&quot;_blank&quot;&gt;使用tensorflow在mnist上实现的siamese net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norouzi/hdml&quot; target=&quot;_blank&quot;&gt;参考文献2的官方code&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://yann.lecun.com/exdb/publis/pdf/chopra-05.pdf&quot; target=&quot;_blank&quot;&gt;S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity metric discriminatively, with application to face verification. In Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on, volume 1, pages 539–546. IEEE, 2005.&lt;/a&gt; &lt;br/&gt;[2] &lt;a href=&quot;http://www.cs.toronto.edu/~norouzi/research/papers/hdml.pdf&quot; target=&quot;_blank&quot;&gt;Mohammad Norouzi, David J. Fleet, Ruslan Salakhutdinov, Hamming Distance Metric Learning, Neural Information Processing Systems (NIPS), 2012.&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 15:26:00 +0000</pubDate>
<dc:creator>笨兔勿应</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bentuwuying/p/8186364.html</dc:identifier>
</item>
<item>
<title>UWP Windows历史上最漂亮的UWP框架出炉！！！ - 星期八再娶你</title>
<link>http://www.cnblogs.com/hupo376787/p/8186228.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hupo376787/p/8186228.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;UWP Windows历史上最漂亮的UWP框架出炉！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;本框架基于微软的开源项目WTS开发，并在其基础上增加了FDS（流畅设计元素，高光、亚克力等）、多语言系统、沉浸式体验（扩展内容到标题栏）&lt;/p&gt;
&lt;p&gt;同时又保留了WTS的强大扩展性，你可以添加你所需要的页面，来快速定制自己个性化的App。&lt;/p&gt;

&lt;p&gt;先看图，有图有真相！（点开图看原图更清晰）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Light Mode:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/298986/201801/298986-20180103214519643-1369810260.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;645&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/298986/201801/298986-20180103214542440-1036620968.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Dark mode:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/298986/201801/298986-20180103214550753-712797184.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;简介：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;0、App.xaml(.cs)&lt;/p&gt;
&lt;p&gt;　　启动App的引导，包含了类似C语言的Main()函数一样&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、ShellPage.xaml(.cs)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　App的运行壳，修改其xaml可同意定制App的外观，同时包含了左侧导航菜单，右侧的Content。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这二者都运用了Fluent Design System元素，所以App才显得这么漂亮&lt;/span&gt;😜&lt;/p&gt;
&lt;p&gt;2、MainPage.xaml(.cs)&lt;/p&gt;
&lt;p&gt;　　主界面，即打开App要呈现给用户的界面&lt;/p&gt;
&lt;p&gt;3、FirstRunDialog.xaml(.cs)&lt;/p&gt;
&lt;p&gt;　　第一次运行时展现给用户的信息，比如介绍一下你的App。可以通过修改资源文件中的FirstRun_Body.Text来实现&lt;/p&gt;
&lt;p&gt;4、WhatsNewDialog.xaml(.cs)&lt;/p&gt;
&lt;p&gt;　　后续每次更新提供的更新日志等，可以通过修改资源文件中的AfterUpdate_Body.Text来实现&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、SettingsPage.xaml(.cs)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　设置面板，我增加了多语言选项，你基于本框架，还可以添加更多的语言。但是不要忘记在strings文件夹添加对应的资源文件&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;当然，光上面介绍的页面不能够满足对用户层面的需要，那么你可以使用WTS向导，添加需要的页面/功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/298986/201801/298986-20180103220553424-5428939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在你添加了新的页面后，进入ShellPage.xaml.cs中，添加上对应的代码，实现菜单导航。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　 private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PopulateNavItems()
        {
            _primaryItems.Clear();
            _secondaryItems.Clear();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO WTS: Change the symbols for each item as appropriate for your app
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; More on Segoe UI Symbol icons: &lt;/span&gt;&lt;span&gt;https://docs.microsoft.com/windows/uwp/style/segoe-ui-symbol-font&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Or to use an IconElement instead of a Symbol see &lt;/span&gt;&lt;span&gt;https://github.com/Microsoft/WindowsTemplateStudio/blob/master/docs/projectTypes/navigationpane.md&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Edit String/en-US/Resources.resw: Add a menu item title for each page&lt;/span&gt;
            _primaryItems.Add(ShellNavigationItem.FromType&amp;lt;MainPage&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Shell_Main&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.GetLocalized(), Symbol.Document));

            _secondaryItems.Add(ShellNavigationItem.FromType&lt;/span&gt;&amp;lt;SettingsPage&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Shell_Settings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.GetLocalized(), Symbol.Setting));
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在拓展内容到标题栏的时候，需要区分一下桌面版和手机版代码略不同&lt;/p&gt;
&lt;p&gt;手机版不需要设置标题栏，所以需要把标题栏所在的那一行行高设置为0（必选），并且进入全屏模式（可选）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　if&lt;/span&gt; (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Windows.UI.ViewManagement.StatusBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Hide default title bar.&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; coreTitleBar =&lt;span&gt; CoreApplication.GetCurrentView().TitleBar;
                coreTitleBar.ExtendViewIntoTitleBar &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                UpdateTitleBarLayout(coreTitleBar);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set XAML element as a draggable region.&lt;/span&gt;
&lt;span&gt;                Window.Current.SetTitleBar(AppTitleBar);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; view =&lt;span&gt; ApplicationView.GetForCurrentView();
                view.TitleBar.ButtonBackgroundColor &lt;/span&gt;=&lt;span&gt; Colors.Transparent;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register a handler for when the size of the overlaid caption control changes.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For example, when the app moves to a screen with a different DPI.&lt;/span&gt;
                coreTitleBar.LayoutMetricsChanged +=&lt;span&gt; CoreTitleBar_LayoutMetricsChanged;

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register a handler for when the title bar visibility changes.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For example, when the title bar is invoked in full screen mode.&lt;/span&gt;
                coreTitleBar.IsVisibleChanged +=&lt;span&gt; CoreTitleBar_IsVisibleChanged;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                rowTitleBar.Height &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; GridLength(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; view =&lt;span&gt; ApplicationView.GetForCurrentView();
                view.TryEnterFullScreenMode();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有一点必须注意的是，AppTitleBar背景色必须设置透明，否则标题栏不能移动双击等操作，切记！！！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;Grid x:Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppTitleBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Background=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于设置里面的多语言，我选择了存储在本地&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; comboBoxLanguage_SelectionChanged(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, SelectionChangedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; temp =&lt;span&gt; comboBoxLanguage.SelectedItem.ToString();
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] tempArr = temp.Split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            ApplicationData.Current.LocalSettings.Values[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;strCurrentLanguage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = tempArr[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你也可以存储在RoamSettings里面来漫游设置，这样可以实现设置跨Win 10平台。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注意：本框架最低系统要求是创意者更新Build15063（Creators Update），目标系统是秋季创意者更新Build16299（Fall Creators Update）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;项目开源地址：&lt;a href=&quot;https://github.com/hupo376787/A-Beautiful-UWP-Frame.git&quot; target=&quot;_blank&quot;&gt;https://github.com/hupo376787/A-Beautiful-UWP-Frame.git&lt;/a&gt;&lt;/p&gt;



&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt; 👇&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;彩&lt;/span&gt;&lt;span&gt;蛋&lt;/span&gt;&lt;/span&gt;：敢不敢把ShellPage.xaml中的最外层的Grid fcu:Background 画笔刷子换成 &lt;span&gt;SystemControlBackgroundAccentRevealBorderBrush &lt;/span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/298986/201801/298986-20180103222623581-1670387484.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 03 Jan 2018 14:42:00 +0000</pubDate>
<dc:creator>星期八再娶你</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hupo376787/p/8186228.html</dc:identifier>
</item>
<item>
<title>Mysql 索引优化分析 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/8146439.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/8146439.html</guid>
<description>&lt;p&gt;为什么你写的sql查询慢？为什么你建的索引常失效？通过本章内容，你将学会MySQL性能下降的原因，索引的简介，索引创建的原则，explain命令的使用，以及explain输出字段的意义。助你了解索引，分析索引，使用索引，从而写出更高性能的sql语句。还在等啥子？撸起袖子就是干！&lt;/p&gt;
&lt;h2 id=&quot;案例分析&quot;&gt;案例分析&lt;/h2&gt;
&lt;p&gt;我们先简单了解一下&lt;strong&gt;非关系型数据库&lt;/strong&gt;和&lt;strong&gt;关系型数据库&lt;/strong&gt;的区别。&lt;br/&gt;MongoDB是NoSQL中的一种。NoSQL的全称是Not only SQL，非关系型数据库。它的特点是&lt;strong&gt;性能高&lt;/strong&gt;，&lt;strong&gt;扩张性强&lt;/strong&gt;，&lt;strong&gt;模式灵活&lt;/strong&gt;，在高并发场景表现得尤为突出。但目前它还只是关系型数据库的补充，它在数据的一致性，数据的安全性，查询的复杂性问题上和关系型数据库还存在一定差距。&lt;br/&gt;MySQL是关系性数据库中的一种，&lt;strong&gt;查询功能强&lt;/strong&gt;，&lt;strong&gt;数据一致性高&lt;/strong&gt;，&lt;strong&gt;数据安全性高&lt;/strong&gt;，&lt;strong&gt;支持二级索引&lt;/strong&gt;。但性能方面稍逊与MongoDB，特别是百万级别以上的数据，很容易出现查询慢的现象。这时候需要分析查询慢的原因，一般情况下是程序员sql写的烂，或者是没有键索引，或者是索引失效等原因导致的。&lt;br/&gt;公司ERP系统数据库主要是MongoDB（最接近关系型数据的NoSQL），其次是Redis，MySQL只占很少的部分。现在又重新使用MySQL，归功于阿里巴巴的奇门系统和聚石塔系统。考虑到订单数量已经是百万级以上，对MySQL的性能分析也就显得格外重要。&lt;/p&gt;
&lt;p&gt;我们先通过两个简单的例子来入门。后面会详细介绍各个参数的作用和意义。&lt;br/&gt;说明：需要用到的sql已经放在了github上了，喜欢的同学可以点一下star，哈哈。&lt;a href=&quot;https://github.com/ITDragonBlog/daydayup/tree/master/MySQL/&quot; class=&quot;uri&quot;&gt;https://github.com/ITDragonBlog/daydayup/tree/master/MySQL/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;场景一订单导入通过交易号避免重复导单&quot;&gt;场景一：订单导入，通过交易号避免重复导单&lt;/h3&gt;
&lt;p&gt;业务逻辑：订单导入时，为了避免重复导单，一般会通过交易号去数据库中查询，判断该订单是否已经存在。&lt;/p&gt;
&lt;h4 id=&quot;最基础的sql语句&quot;&gt;最基础的sql语句&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; transaction_id = &lt;span class=&quot;ot&quot;&gt;&quot;81X97310V32236260E&quot;&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;-------+--------------------+-------+------+----------+--------------+----------+------------------+-------------+-------------+------------+---------------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;    | transaction_id     | gross | net  | stock_id | order_status | descript | finance_descript | create_type | order_level | input_user | input_date          |
+&lt;span class=&quot;co&quot;&gt;-------+--------------------+-------+------+----------+--------------+----------+------------------+-------------+-------------+------------+---------------------+&lt;/span&gt;
| &lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt; | 81X97310V32236260E |   &lt;span class=&quot;fl&quot;&gt;6.6&lt;/span&gt; | &lt;span class=&quot;fl&quot;&gt;6.13&lt;/span&gt; |        &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; |           &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; | ok       | ok               | auto        |           &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | itdragon   | &lt;span class=&quot;dv&quot;&gt;2017-08-18&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;:01:49&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;-------+--------------------+-------+------+----------+--------------+----------+------------------+-------------+-------------+------------+---------------------+&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; transaction_id = &lt;span class=&quot;ot&quot;&gt;&quot;81X97310V32236260E&quot;&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; | possible_keys | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;  | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra       |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+-------------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | &lt;span class=&quot;kw&quot;&gt;ALL&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;          | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;    | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; |    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; |    &lt;span class=&quot;fl&quot;&gt;33.33&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+-------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询的本身没有任何问题，在线下的测试环境也没有任何问题。可是，功能一旦上线，查询慢的问题就迎面而来。几百上千万的订单，用全表扫描？啊？哼!&lt;br/&gt;怎么知道该sql是全表扫描呢？通过explain命令可以清楚MySQL是如何处理sql语句的。打印的内容分别表示：&lt;br/&gt;&lt;strong&gt;id&lt;/strong&gt; : 查询序列号为1。&lt;br/&gt;&lt;strong&gt;select_type&lt;/strong&gt; : 查询类型是简单查询，简单的select语句没有union和子查询。&lt;br/&gt;&lt;strong&gt;table&lt;/strong&gt; : 表是 itdragon_order_list。&lt;br/&gt;&lt;strong&gt;partitions&lt;/strong&gt; : 没有分区。&lt;br/&gt;&lt;strong&gt;type&lt;/strong&gt; : 连接类型，all表示采用全表扫描的方式。&lt;br/&gt;&lt;strong&gt;possible_keys&lt;/strong&gt; : 可能用到索引为null。&lt;br/&gt;&lt;strong&gt;key&lt;/strong&gt; : 实际用到索引是null。&lt;br/&gt;&lt;strong&gt;key_len&lt;/strong&gt; : 索引长度当然也是null。&lt;br/&gt;&lt;strong&gt;ref&lt;/strong&gt; : 没有哪个列或者参数和key一起被使用。&lt;br/&gt;&lt;strong&gt;Extra&lt;/strong&gt; : 使用了where查询。&lt;br/&gt;因为数据库中只有三条数据，所以rows和filtered的信息作用不大。这里需要重点了解的是type为ALL，全表扫描的性能是最差的，假设数据库中有几百万条数据，在没有索引的帮助下会异常卡顿。&lt;/p&gt;
&lt;h4 id=&quot;初步优化为transaction_id创建索引&quot;&gt;初步优化：为transaction_id创建索引&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; idx_order_transaID &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; itdragon_order_list (transaction_id);
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; transaction_id = &lt;span class=&quot;ot&quot;&gt;&quot;81X97310V32236260E&quot;&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+--------------------+--------------------+---------+-------+------+----------+-------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt;  | possible_keys      | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;                | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;   | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+--------------------+--------------------+---------+-------+------+----------+-------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | const | idx_order_transaID | idx_order_transaID | &lt;span class=&quot;dv&quot;&gt;453&lt;/span&gt;     | const |    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;  |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+--------------------+--------------------+---------+-------+------+----------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里创建的索引是唯一索引，而非普通索引。&lt;br/&gt;唯一索引打印的type值是const。表示通过索引一次就可以找到。即找到值就结束扫描返回查询结果。&lt;br/&gt;普通索引打印的type值是ref。表示非唯一性索引扫描。找到值还要继续扫描，直到将索引文件扫描完为止。(这里没有贴出代码)&lt;br/&gt;显而易见，const的性能要远高于ref。并且根据业务逻辑来判断，创建唯一索引是合情合理的。&lt;/p&gt;
&lt;h4 id=&quot;再次优化覆盖索引&quot;&gt;再次优化：覆盖索引&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; transaction_id &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; transaction_id = &lt;span class=&quot;ot&quot;&gt;&quot;81X97310V32236260E&quot;&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+--------------------+--------------------+---------+-------+------+----------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt;  | possible_keys      | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;                | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;   | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra       |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+--------------------+--------------------+---------+-------+------+----------+-------------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | const | idx_order_transaID | idx_order_transaID | &lt;span class=&quot;dv&quot;&gt;453&lt;/span&gt;     | const |    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+--------------------+--------------------+---------+-------+------+----------+-------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里将&lt;code&gt;select * from&lt;/code&gt; 改为了 &lt;code&gt;select transaction_id from&lt;/code&gt; 后&lt;br/&gt;Extra 显示 Using index，表示该查询使用了覆盖索引，这是一个非常好的消息，说明该sql语句的性能很好。若提示的是Using filesort(使用内部排序)和Using temporary(使用临时表)则表明该sql需要立即优化了。&lt;br/&gt;根据业务逻辑来的，查询结构返回transaction_id 是可以满足业务逻辑要求的。&lt;/p&gt;
&lt;h3 id=&quot;场景二订单管理页面通过订单级别和订单录入时间排序&quot;&gt;场景二，订单管理页面，通过订单级别和订单录入时间排序&lt;/h3&gt;
&lt;p&gt;业务逻辑：优先处理订单级别高，录入时间长的订单。&lt;br/&gt;既然是排序，首先想到的应该是order by， 还有一个可怕的 Using filesort 等着你。&lt;/p&gt;
&lt;h4 id=&quot;最基础的sql语句-1&quot;&gt;最基础的sql语句&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;by&lt;/span&gt; order_level,input_date;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+----------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; | possible_keys | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;  | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra          |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+----------------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | &lt;span class=&quot;kw&quot;&gt;ALL&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;          | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;    | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; |    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Using&lt;/span&gt; filesort |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+----------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先，采用全表扫描就不合理，还使用了文件排序Using filesort，更加拖慢了性能。&lt;br/&gt;MySQL在4.1版本之前文件排序是采用双路排序的算法，由于两次扫描磁盘，I/O耗时太长。后优化成单路排序算法。其本质就是用空间换时间，但如果数据量太大，buffer的空间不足，会导致多次I/O的情况。其效果反而更差。与其找运维同事修改MySQL配置，还不如自己乖乖地建索引。&lt;/p&gt;
&lt;h4 id=&quot;初步优化为order_levelinput_date-创建复合索引&quot;&gt;初步优化：为order_level,input_date 创建复合索引&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; idx_order_levelDate &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; itdragon_order_list (order_level,input_date);
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;by&lt;/span&gt; order_level,input_date;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+----------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; | possible_keys | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;  | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra          |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+----------------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | &lt;span class=&quot;kw&quot;&gt;ALL&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;          | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;    | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; |    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Using&lt;/span&gt; filesort |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------+------+---------+------+------+----------+----------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建复合索引后你会惊奇的发现，和没创建索引一样？？？都是全表扫描，都用到了文件排序。是索引失效？还是索引创建失败？我们试着看看下面打印情况&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; order_level,input_date &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;by&lt;/span&gt; order_level,input_date;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt;  | possible_keys | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;                 | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra       |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;          | idx_order_levelDate | &lt;span class=&quot;dv&quot;&gt;68&lt;/span&gt;      | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; |    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将&lt;code&gt;select * from&lt;/code&gt; 换成了 &lt;code&gt;select order_level,input_date from&lt;/code&gt; 后。type从all升级为index，表示（full index scan）全索引文件扫描，Extra也显示使用了覆盖索引。可是不对啊！！！！检索虽然快了，但返回的内容只有order_level和input_date 两个字段，让业务同事怎么用？难道把每个字段都建一个复合索引？&lt;br/&gt;MySQL没有这么笨，可以使用force index 强制指定索引。在原来的sql语句上修改 &lt;code&gt;force index(idx_order_levelDate)&lt;/code&gt; 即可。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt;(idx_order_levelDate) &lt;span class=&quot;kw&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;by&lt;/span&gt; order_level,input_date;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+---------------+---------------------+---------+------+------+----------+-------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt;  | possible_keys | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;                 | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+---------------+---------------------+---------+------+------+----------+-------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;          | idx_order_levelDate | &lt;span class=&quot;dv&quot;&gt;68&lt;/span&gt;      | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; |    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;  |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+-------+---------------+---------------------+---------+------+------+----------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;再次优化订单级别真的要排序么&quot;&gt;再次优化：订单级别真的要排序么？&lt;/h4&gt;
&lt;p&gt;其实给订单级别排序意义并不大，给订单级别添加索引意义也不大。因为order_level的值可能只有，低，中，高，加急，这四种。对于这种重复且分布平均的字段，排序和加索引的作用不大。&lt;br/&gt;我们能否先固定 order_level 的值，然后再给 input_date 排序？如果查询效果明显，是可以推荐业务同事使用该查询方式。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; itdragon_order_list &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; order_level=&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;by&lt;/span&gt; input_date;
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------------+---------------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt;               | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; | possible_keys       | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;                 | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;   | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra                 |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------------+---------------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; | SIMPLE      | itdragon_order_list | &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;       | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | idx_order_levelDate | idx_order_levelDate | &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;       | const |    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; |      &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; condition |
+&lt;span class=&quot;co&quot;&gt;----+-------------+---------------------+------------+------+---------------------+---------------------+---------+-------+------+----------+-----------------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和之前的sql比起来，type从index 升级为 ref(非唯一性索引扫描)。索引的长度从68变成了5，说明只用了一个索引。ref也是一个常量。Extra 为Using index condition 表示自动根据临界值，选择索引扫描还是全表扫描。总的来说性能远胜于之前的sql。&lt;/p&gt;
&lt;p&gt;上面两个案例只是快速入门，我们需严记一点：优化是基于业务逻辑来的。绝对不能为了优化而擅自修改业务逻辑。如果能修改当然是最好的。&lt;/p&gt;
&lt;h2 id=&quot;索引简介&quot;&gt;索引简介&lt;/h2&gt;
&lt;p&gt;官方定义：索引（Index） 是帮助MySQL高效获取数据的数据结构。&lt;br/&gt;大家一定很好奇，索引为什么是一种数据结构，它又是怎么提高查询的速度？我们拿最常用的二叉树来分析索引的工作原理。看下面的图片：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180103215956799-1078068423.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建索引的优势&lt;br/&gt;1 提高数据的检索速度，降低数据库IO成本：使用索引的意义就是通过缩小表中需要查询的记录的数目从而加快搜索的速度。&lt;br/&gt;2 降低数据排序的成本，降低CPU消耗：索引之所以查的快，是因为先将数据排好序，若该字段正好需要排序，则真好降低了排序的成本。&lt;/p&gt;
&lt;p&gt;创建索引的劣势&lt;br/&gt;1 占用存储空间：索引实际上也是一张表，记录了主键与索引字段，一般以索引文件的形式存储在磁盘上。&lt;br/&gt;2 降低更新表的速度：表的数据发生了变化，对应的索引也需要一起变更，从而减低的更新速度。否则索引指向的物理数据可能不对，这也是索引失效的原因之一。&lt;br/&gt;3 优质索引创建难：索引的创建并非一日之功，也并非一直不变。需要频繁根据用户的行为和具体的业务逻辑去创建最佳的索引。&lt;/p&gt;
&lt;h2 id=&quot;索引分类&quot;&gt;索引分类&lt;/h2&gt;
&lt;p&gt;我们常说的索引一般指的是BTree（多路搜索树）结构组织的索引。其中还有聚合索引，次要索引，复合索引，前缀索引，唯一索引，统称索引，当然除了B+树外，还有哈希索引（hash index）等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单值索引&lt;/strong&gt;：一个索引只包含单个列，一个表可以有多个单列索引&lt;br/&gt;&lt;strong&gt;唯一索引&lt;/strong&gt;：索引列的值必须唯一，但允许有空值&lt;br/&gt;&lt;strong&gt;复合索引&lt;/strong&gt;：一个索引包含多个列，实际开发中推荐使用&lt;br/&gt;实际开发中推荐使用复合索引，并且单表创建的索引个数建议不要超过五个&lt;/p&gt;
&lt;p&gt;基本语法：&lt;br/&gt;创建：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;unique&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; indexName &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; tableName (columnName...)
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; tableName &lt;span class=&quot;kw&quot;&gt;add&lt;/span&gt; [&lt;span class=&quot;kw&quot;&gt;unique&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; [indexName] &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; (columnName...)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; [indexName] &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; tableName&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;show &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; tableName&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哪些情况需要建索引：&lt;br/&gt;1 主键，唯一索引&lt;br/&gt;2 经常用作查询条件的字段需要创建索引&lt;br/&gt;3 经常需要排序、分组和统计的字段需要建立索引&lt;br/&gt;4 查询中与其他表关联的字段，外键关系建立索引&lt;/p&gt;
&lt;p&gt;哪些情况不要建索引：&lt;br/&gt;1 表的记录太少，百万级以下的数据不需要创建索引&lt;br/&gt;2 经常增删改的表不需要创建索引&lt;br/&gt;3 数据重复且分布平均的字段不需要创建索引，如 true,false 之类。&lt;br/&gt;4 频发更新的字段不适合创建索引&lt;br/&gt;5 where条件里用不到的字段不需要创建索引&lt;/p&gt;
&lt;h2 id=&quot;性能分析&quot;&gt;性能分析&lt;/h2&gt;
&lt;h3 id=&quot;mysql-自身瓶颈&quot;&gt;MySQL 自身瓶颈&lt;/h3&gt;
&lt;p&gt;MySQL自身参见的性能问题有磁盘空间不足，磁盘I/O太大，服务器硬件性能低。&lt;br/&gt;1 CPU：CPU 在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候&lt;br/&gt;2 IO：磁盘I/O 瓶颈发生在装入数据远大于内存容量的时候&lt;br/&gt;3 服务器硬件的性能瓶颈：top,free,iostat 和 vmstat来查看系统的性能状态&lt;/p&gt;
&lt;h3 id=&quot;explain-分析sql语句&quot;&gt;explain 分析sql语句&lt;/h3&gt;
&lt;p&gt;使用explain关键字可以模拟优化器执行sql查询语句，从而得知MySQL 是如何处理sql语句。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;+&lt;span class=&quot;co&quot;&gt;----+-------------+-------+------------+------+---------------+-----+---------+------+------+----------+-------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | select_type | &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;partitions&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; | possible_keys | &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; | key_len | &lt;span class=&quot;fu&quot;&gt;ref&lt;/span&gt;  | &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; | filtered | Extra |
+&lt;span class=&quot;co&quot;&gt;----+-------------+-------+------------+------+---------------+-----+---------+------+------+----------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;id&quot;&gt;id&lt;/h4&gt;
&lt;p&gt;select 查询的序列号，包含一组可以重复的数字，表示查询中执行sql语句的顺序。一般有三种情况：&lt;br/&gt;第一种：id全部相同，sql的执行顺序是由上至下；&lt;br/&gt;第二种：id全部不同，sql的执行顺序是根据id大的优先执行；&lt;br/&gt;第三种：id既存在相同，又存在不同的。先根据id大的优先执行，再根据相同id从上至下的执行。&lt;/p&gt;
&lt;h4 id=&quot;select_type&quot;&gt;select_type&lt;/h4&gt;
&lt;p&gt;select 查询的类型，主要是用于区别普通查询，联合查询，嵌套的复杂查询&lt;br/&gt;&lt;strong&gt;simple&lt;/strong&gt;：简单的select 查询，查询中不包含子查询或者union&lt;br/&gt;&lt;strong&gt;primary&lt;/strong&gt;：查询中若包含任何复杂的子查询，最外层查询则被标记为primary&lt;br/&gt;&lt;strong&gt;subquery&lt;/strong&gt;：在select或where 列表中包含了子查询&lt;br/&gt;&lt;strong&gt;derived&lt;/strong&gt;：在from列表中包含的子查询被标记为derived（衍生）MySQL会递归执行这些子查询，把结果放在临时表里。&lt;br/&gt;&lt;strong&gt;union&lt;/strong&gt;：若第二个select出现在union之后，则被标记为union，若union包含在from子句的子查询中，外层select将被标记为：derived&lt;br/&gt;&lt;strong&gt;union result&lt;/strong&gt;：从union表获取结果的select&lt;/p&gt;
&lt;h4 id=&quot;partitions&quot;&gt;partitions&lt;/h4&gt;
&lt;p&gt;表所使用的分区，如果要统计十年公司订单的金额，可以把数据分为十个区，每一年代表一个区。这样可以大大的提高查询效率。&lt;/p&gt;
&lt;h4 id=&quot;type&quot;&gt;type&lt;/h4&gt;
&lt;p&gt;这是一个非常重要的参数，连接类型，常见的有：all , index , range , ref , eq_ref , const , system , null 八个级别。&lt;br/&gt;性能从最优到最差的排序：system &amp;gt; const &amp;gt; eq_ref &amp;gt; ref &amp;gt; range &amp;gt; index &amp;gt; all&lt;br/&gt;对java程序员来说，若保证查询至少达到range级别或者最好能达到ref则算是一个优秀而又负责的程序员。&lt;br/&gt;&lt;strong&gt;all&lt;/strong&gt;：（full table scan）全表扫描无疑是最差，若是百万千万级数据量，全表扫描会非常慢。&lt;br/&gt;&lt;strong&gt;index&lt;/strong&gt;：（full index scan）全索引文件扫描比all好很多，毕竟从索引树中找数据，比从全表中找数据要快。&lt;br/&gt;&lt;strong&gt;range&lt;/strong&gt;：只检索给定范围的行，使用索引来匹配行。范围缩小了，当然比全表扫描和全索引文件扫描要快。sql语句中一般会有between，in，&amp;gt;，&amp;lt; 等查询。&lt;br/&gt;&lt;strong&gt;ref&lt;/strong&gt;：非唯一性索引扫描，本质上也是一种索引访问，返回所有匹配某个单独值的行。比如查询公司所有属于研发团队的同事，匹配的结果是多个并非唯一值。&lt;br/&gt;&lt;strong&gt;eq_ref&lt;/strong&gt;：唯一性索引扫描，对于每个索引键，表中有一条记录与之匹配。比如查询公司的CEO，匹配的结果只可能是一条记录，&lt;br/&gt;&lt;strong&gt;const&lt;/strong&gt;：表示通过索引一次就可以找到，const用于比较primary key 或者unique索引。因为只匹配一行数据，所以很快，若将主键至于where列表中，MySQL就能将该查询转换为一个常量。&lt;br/&gt;&lt;strong&gt;system&lt;/strong&gt;：表只有一条记录（等于系统表），这是const类型的特列，平时不会出现，了解即可&lt;/p&gt;
&lt;h4 id=&quot;possible_keys&quot;&gt;possible_keys&lt;/h4&gt;
&lt;p&gt;显示查询语句可能用到的索引(一个或多个或为null)，不一定被查询实际使用。仅供参考使用。&lt;/p&gt;
&lt;h4 id=&quot;key&quot;&gt;key&lt;/h4&gt;
&lt;p&gt;显示查询语句实际使用的索引。若为null，则表示没有使用索引。&lt;/p&gt;
&lt;h4 id=&quot;key_len&quot;&gt;key_len&lt;/h4&gt;
&lt;p&gt;显示索引中使用的字节数，可通过key_len计算查询中使用的索引长度。在不损失精确性的情况下索引长度越短越好。key_len 显示的值为索引字段的最可能长度，并非实际使用长度，即key_len是根据表定义计算而得，并不是通过表内检索出的。&lt;/p&gt;
&lt;h4 id=&quot;ref&quot;&gt;ref&lt;/h4&gt;
&lt;p&gt;显示索引的哪一列或常量被用于查找索引列上的值。&lt;/p&gt;
&lt;h4 id=&quot;rows&quot;&gt;rows&lt;/h4&gt;
&lt;p&gt;根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，值越大越不好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using filesort&lt;/strong&gt;： 说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序” 。出现这个就要立刻优化sql。&lt;br/&gt;&lt;strong&gt;Using temporary&lt;/strong&gt;： 使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序 order by 和 分组查询 group by。 出现这个更要立刻优化sql。&lt;br/&gt;&lt;strong&gt;Using index&lt;/strong&gt;： 表示相应的select 操作中使用了覆盖索引（Covering index），避免访问了表的数据行，效果不错！如果同时出现Using where，表明索引被用来执行索引键值的查找。如果没有同时出现Using where，表示索引用来读取数据而非执行查找动作。&lt;br/&gt;覆盖索引（Covering Index） ：也叫索引覆盖，就是select 的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select 列表中的字段，而不必根据索引再次读取数据文件。&lt;br/&gt;&lt;strong&gt;Using index condition&lt;/strong&gt;： 在5.6版本后加入的新特性，优化器会在索引存在的情况下，通过符合RANGE范围的条数 和 总数的比例来选择是使用索引还是进行全表遍历。&lt;br/&gt;&lt;strong&gt;Using where&lt;/strong&gt;： 表明使用了where 过滤&lt;br/&gt;&lt;strong&gt;Using join buffer&lt;/strong&gt;： 表明使用了连接缓存&lt;br/&gt;&lt;strong&gt;impossible where&lt;/strong&gt;： where 语句的值总是false，不可用，不能用来获取任何元素&lt;br/&gt;&lt;strong&gt;distinct&lt;/strong&gt;： 优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作。&lt;/p&gt;
&lt;h4 id=&quot;filtered&quot;&gt;filtered&lt;/h4&gt;
&lt;p&gt;一个百分比的值，和rows 列的值一起使用，可以估计出查询执行计划(QEP)中的前一个表的结果集，从而确定join操作的循环次数。小表驱动大表，减轻连接的次数。&lt;/p&gt;
&lt;p&gt;通过explain的参数介绍，我们可以得知:&lt;br/&gt;1 表的读取顺序(id)&lt;br/&gt;2 数据读取操作的操作类型(type)&lt;br/&gt;3 哪些索引被实际使用(key)&lt;br/&gt;4 表之间的引用(ref)&lt;br/&gt;5 每张表有多少行被优化器查询(rows)&lt;/p&gt;
&lt;h2 id=&quot;性能下降的原因&quot;&gt;性能下降的原因&lt;/h2&gt;
&lt;p&gt;从程序员的角度&lt;br/&gt;1 查询语句写的不好&lt;br/&gt;2 没建索引，索引建的不合理或索引失效&lt;br/&gt;3 关联查询有太多的join&lt;br/&gt;从服务器的角度&lt;br/&gt;1 服务器磁盘空间不足&lt;br/&gt;2 服务器调优配置参数设置不合理&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;1 索引是排好序且快速查找的数据结构。其目的是为了提高查询的效率。&lt;br/&gt;2 创建索引后，查询数据变快，但更新数据变慢。&lt;br/&gt;3 性能下降的原因很可能是索引失效导致。&lt;br/&gt;4 索引创建的原则，经常查询的字段适合创建索引，频繁需要更新的数据不适合创建索引。&lt;br/&gt;5 索引字段频繁更新，或者表数据物理删除容易造成索引失效。&lt;br/&gt;6 擅用 explain 分析sql语句&lt;br/&gt;7 除了优化sql语句外，还可以优化表的设计。如尽量做成单表查询，减少表之间的关联。设计归档表等。&lt;/p&gt;
&lt;p&gt;到这里，MySQL的索引优化分析就结束了，有什么不对的地方，大家可以提出来。如果觉得不错可以点一下推荐。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;MySQL order by排序优化： &lt;a href=&quot;http://blog.51cto.com/ustb80/1073352&quot; class=&quot;uri&quot;&gt;http://blog.51cto.com/ustb80/1073352&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 03 Jan 2018 14:11:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/8146439.html</dc:identifier>
</item>
<item>
<title>前端学数据结构之树 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8184989.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8184989.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　前面介绍过一种非顺序数据结构是&lt;a href=&quot;https://www.cnblogs.com/xiaohuochai/p/8183020.html#anchor2&quot; target=&quot;_blank&quot;&gt;散列表&lt;/a&gt;，本文将详细介绍另一种非顺序数据结构——树，它对于存储需要快速查找的数据非常有用&lt;/p&gt;

&lt;h3&gt;数据结构&lt;/h3&gt;
&lt;p&gt;　　树是一种分层数据的抽象模型。现实生活中最常见的树的例子是家谱，或是公司的组织架构图&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree1.png&quot; alt=&quot;tree1&quot; width=&quot;807&quot; height=&quot;465&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点（除了顶部的第一个 节点）以及零个或多个子节点&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree2.png&quot; alt=&quot;tree2&quot; width=&quot;715&quot; height=&quot;411&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　位于树顶部的节点叫作根节点（11）。它没有父节点。树中的每个元素都叫作节点，节点分为内部节点和外部节点。至少有一个子节点的节点称为内部节点（7、5、9、15、13和20是内部节点）。没有子元素的节点称为外部节点或叶节点（3、6、8、10、12、14、18和25是叶节点）。&lt;/p&gt;
&lt;p&gt;　　一个节点可以有祖先和后代。一个节点（除了根节点）的祖先包括父节点、祖父节点、曾祖父节点等。一个节点的后代包括子节点、孙子节点、曾孙节点等。例如，节点5的祖先有节点7和节点11，后代有节点3和节点6。&lt;/p&gt;
&lt;p&gt;　　有关树的另一个术语是子树。子树由节点和它的后代构成。例如，节点13、12和14构成了上图中树的一棵子树。&lt;/p&gt;
&lt;p&gt;　　节点的一个属性是深度，节点的深度取决于它的祖先节点的数量。比如，节点3有3个祖先节点（5、7和11），它的深度为3。&lt;/p&gt;
&lt;p&gt;　　树的高度取决于所有节点深度的最大值。一棵树也可以被分解成层级。根节点在第0层，它的子节点在第1层，以此类推。上图中的树的高度为3（最大高度已在图中表示——第3层）&lt;/p&gt;

&lt;h3&gt;二叉树&lt;/h3&gt;
&lt;p&gt;　　二叉树中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点。这些定义有助于我们写出更高效的向/从树中插入、查找和删除节点的算法。二叉树在计算机科学中的应用非常广泛。&lt;/p&gt;
&lt;p&gt;　　二叉搜索树（BST）是二叉树的一种，但是它只允许你在左侧节点存储（比父节点）小的值，在右侧节点存储（比父节点）大（或者等于）的值。上面的图中就展现了一棵二叉搜索树&lt;/p&gt;
&lt;p&gt;【创建BinarySearchTree类】&lt;/p&gt;
&lt;p&gt;　　现在开始创建自己的BinarySearchTree类。首先，声明它的结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function BinarySearchTree() {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Node = function(key){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1} &lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.left = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;; 
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.right = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
  };
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; root = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下图展现了二叉搜索树数据结构的组织方式：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree3.png&quot; alt=&quot;tree3&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　和链表一样，将通过指针来表示节点之间的关系（术语称其为边）。在双向链表中，每个节点包含两个指针，一个指向下一个节点，另一个指向上一个节点。对于树，使用同样的方式（也使用两个指针）。但是，一个指向左侧子节点，另一个指向右侧子节点。因此，将声明一个Node类来表示树中的每个节点（行{1}）。值得注意的一个小细节是，不同于将节点本身称作节点或项，我们将会称其为键。键是树相关的术语中对节点的称呼。&lt;/p&gt;
&lt;p&gt;　　我们将会遵循和LinkedList类中相同的模式，这表示也将声明一个变量以控制此数据结构的第一个节点。在树中，它不再是头节点，而是根元素（行{2}）。然后，我们需要实现一些方法。下面是将要在树类中实现的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert(key)：向树中插入一个新的键。
search(key)：在树中查找一个键，如果节点存在，则返回true；如果不存在，则返回 &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;。
inOrderTraverse：通过中序遍历方式遍历所有节点。
preOrderTraverse：通过先序遍历方式遍历所有节点。
postOrderTraverse：通过后序遍历方式遍历所有节点。
min：返回树中最小的值&lt;/span&gt;/&lt;span&gt;键。
max：返回树中最大的值&lt;/span&gt;/&lt;span&gt;键。
remove(key)：从树中移除某个键。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【insert】&lt;/p&gt;
&lt;p&gt;　　下面的代码是用来向树插入一个新键的算法的第一部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.insert =&lt;span&gt; function(key){ 
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newNode = &lt;span&gt;new&lt;/span&gt; Node(key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1} &lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (root === &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}     &lt;/span&gt;
    root =&lt;span&gt; newNode;   
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {     
    insertNode(root,newNode); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}   &lt;/span&gt;
&lt;span&gt;  } 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要向树中插入一个新的节点（或项），要经历三个步骤&lt;/p&gt;
&lt;p&gt;　　第一步是创建用来表示新节点的Node类实例（行{1}）。只需要向构造函数传递我们想用来插入树的节点值，它的左指针和右指针的值会由构造函数自动设置为null&lt;/p&gt;
&lt;p&gt;　　第二步要验证这个插入操作是否为一种特殊情况。这个特殊情况就是我们要插入的节点是树的第一个节点（行{2}）。如果是，就将根节点指向新节点&lt;/p&gt;
&lt;p&gt;　　第三步是将节点加在非根节点的其他位置。这种情况下，需要一个私有的辅助函数（行{3}），函数定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; insertNode =&lt;span&gt; function(node, newNode){   
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newNode.key &amp;lt; node.key){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{4}     &lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (node.left === &lt;span&gt;null&lt;/span&gt;){   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5}       &lt;/span&gt;
      node.left = newNode;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{6}    &lt;/span&gt;
    } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {       
      insertNode(node.left, newNode); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{7}     &lt;/span&gt;
&lt;span&gt;    }   
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {     
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.right === &lt;span&gt;null&lt;/span&gt;){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{8}       &lt;/span&gt;
      node.right = newNode;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{9}     &lt;/span&gt;
    } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {      
      insertNode(node.right, newNode); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{10}     &lt;/span&gt;
&lt;span&gt;    }   
  } 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　insertNode函数会帮助我们找到新节点应该插入的正确位置。下面是这个函数实现的步骤&lt;/p&gt;
&lt;p&gt;　　1、如果树非空，需要找到插入新节点的位置。因此，在调用insertNode方法时要通过参数传入树的根节点和要插入的节点&lt;/p&gt;
&lt;p&gt;　　2、如果新节点的键小于当前节点的键（现在，当前节点就是根节点）（行{4}），那么需要检查当前节点的左侧子节点。如果它没有左侧子节点（行{5}），就在那里插入新的节点。如果有左侧子节点，需要通过递归调用insertNode方法（行{7}）继续找到树的下一层。在这里，下次将要比较的节点将会是当前节点的左侧子节点&lt;/p&gt;
&lt;p&gt;　　3、如果节点的键比当前节点的键大，同时当前节点没有右侧子节点（行{8}），就在那里插入新的节点（行{9}）。如果有右侧子节点，同样需要递归调用insertNode方法，但是要用来和新节点比较的节点将会是右侧子节点&lt;/p&gt;
&lt;p&gt;　　考虑下面的情景：我们有一个新的树，并且想要向它插入第一个值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; tree = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BinarySearchTree(); 
tree.insert(&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这种情况下，树中有一个单独的节点，根指针将会指向它。源代码的行{2}将会执行。现在，来考虑下图所示树结构的情况：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree4.png&quot; alt=&quot;tree4&quot; width=&quot;614&quot; height=&quot;381&quot;/&gt;&lt;/div&gt;

&lt;p&gt;　　创建上图所示的树的代码如下，它们接着上面一段代码（插入了键为11的节点）之后输入执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
tree.insert(&lt;span&gt;7&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;);
tree.insert(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;); 
tree.insert(&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　同时我们想要插入一个值为6的键，执行下面的代码： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
tree.insert(&lt;span&gt;6&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面的步骤将会被执行&lt;/p&gt;
&lt;p&gt;　　1、树不是空的，行{3}的代码将会执行。insertNode方法将会被调用（root, key[6]）&lt;/p&gt;
&lt;p&gt;　　2、算法将会检测行{4}（key[6] &amp;lt; root[11]为真），并继续检测行{5}（node.left[7]不是null），然后将到达行{7}并调用insertNode（node.left[7], key[6]）&lt;/p&gt;
&lt;p&gt;　　3、将再次进入insertNode方法内部，但是使用了不同的参数。它会再次检测行{4}（key[6] &amp;lt; node[7]为真），然后再检测行{5}（node.left[5]不是null），接着到达行{7}，调用insertNode（node.left[5], key[6]）&lt;/p&gt;
&lt;p&gt;　　4、将再一次进入insertNode方法内部。它会再次检测行{4}（key[6] &amp;lt; node[5]为假）， 然后到达行{8}（node.right是null——节点5没有任何右侧的子节点），然后将会执行行{9}， 在节点5的右侧子节点位置插入键6&lt;/p&gt;
&lt;p&gt;　　5、然后，方法调用会依次出栈，代码执行过程结束&lt;/p&gt;
&lt;p&gt;　　这是插入键6后的结果：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree5.png&quot; alt=&quot;tree5&quot; width=&quot;637&quot; height=&quot;393&quot;/&gt;&lt;/div&gt;

&lt;h3&gt;树的遍历&lt;/h3&gt;
&lt;p&gt;　　遍历一棵树是指访问树的每个节点并对它们进行某种操作的过程。但是我们应该怎么去做呢？应该从树的顶端还是底端开始呢？从左开始还是从右开始呢？访问树的所有节点有三种方式：中序、先序和后序。下面将详细介绍这三种遍历方式的用法和实现&lt;/p&gt;
&lt;p&gt;【中序遍历】&lt;/p&gt;
&lt;p&gt;　　中序遍历是一种以上行顺序访问BST所有节点的遍历方式，也就是以从最小到最大的顺序访问所有节点。中序遍历的一种应用就是对树进行排序操作。我们来看它的实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.inOrderTraverse =&lt;span&gt; function(callback){               
  inOrderTraverseNode(root, callback); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1} &lt;/span&gt;
}; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　inOrderTraverse方法接收一个回调函数作为参数。回调函数用来定义我们对遍历到的每个节点进行的操作（这也叫作访问者模式）。由于我们在BST中最常实现的算法是递归，这里使用了一个私有的辅助函数，来接收一个节点和对应的回调函数作为参数（行{1}）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; inOrderTraverseNode =&lt;span&gt; function (node, callback) { 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node !== &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}&lt;/span&gt;
    inOrderTraverseNode(node.left, callback); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3} &lt;/span&gt;
    callback(node.key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{4} &lt;/span&gt;
    inOrderTraverseNode(node.right, callback); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5}&lt;/span&gt;
&lt;span&gt;  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要通过中序遍历的方法遍历一棵树，首先要检查以参数形式传入的节点是否为null（这就是停止递归继续执行的判断条件——行{2}——递归算法的基本条件）。然后，递归调用相同的函数来访问左侧子节点（行{3}）。接着对这个节点进行一些操作（callback），然后再访问右侧子节点（行{5}）&lt;/p&gt;
&lt;p&gt;　　试着在之前展示的树上执行下面的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
function printNode(value){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{6}&lt;/span&gt;
&lt;span&gt;  console.log(value);
}
tree.inOrderTraverse(printNode);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{7}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　但首先，需要创建一个回调函数（行{6}）。要做的是在浏览器的控制台上输出节点的值。然后，调用inOrderTraverse方法并将回调函数作为参数传入（行{7}）。当执行上面的代码后，下面的结果将会在控制台上输出（每个数字将会输出在不同的行）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;6&lt;/span&gt; &lt;span&gt;7&lt;/span&gt; &lt;span&gt;8&lt;/span&gt; &lt;span&gt;9&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;11&lt;/span&gt; &lt;span&gt;12&lt;/span&gt; &lt;span&gt;13&lt;/span&gt; &lt;span&gt;14&lt;/span&gt; &lt;span&gt;15&lt;/span&gt; &lt;span&gt;18&lt;/span&gt; &lt;span&gt;20&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面的图描绘了inOrderTraverse方法的访问路径：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree6.png&quot; alt=&quot;tree6&quot; width=&quot;662&quot; height=&quot;402&quot;/&gt;&lt;/div&gt;
&lt;p&gt;【先序遍历】&lt;/p&gt;
&lt;p&gt;　　先序遍历是以优先于后代节点的顺序访问每个节点的。先序遍历的一种应用是打印一个结构化的文档。下面来看实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.preOrderTraverse =&lt;span&gt; function(callback){ 
  preOrderTraverseNode(root, callback);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　preOrderTraverseNode方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; preOrderTraverseNode =&lt;span&gt; function (node, callback) { 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    callback(node.key); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1} &lt;/span&gt;
    preOrderTraverseNode(node.left, callback); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2} &lt;/span&gt;
    preOrderTraverseNode(node.right, callback); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}&lt;/span&gt;
&lt;span&gt;  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　先序遍历和中序遍历的不同点是，先序遍历会先访问节点本身（行{1}），然后再访问它的左侧子节点（行{2}），最后是右侧子节点（行{3}），而中序遍历的执行顺序是：{2}、{1}和{3}&lt;/p&gt;
&lt;p&gt;　　下面是控制台上的输出结果（每个数字将会输出在不同的行）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;7&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;6&lt;/span&gt; &lt;span&gt;9&lt;/span&gt; &lt;span&gt;8&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;15&lt;/span&gt; &lt;span&gt;13&lt;/span&gt; &lt;span&gt;12&lt;/span&gt; &lt;span&gt;14&lt;/span&gt; &lt;span&gt;20&lt;/span&gt; &lt;span&gt;18&lt;/span&gt; &lt;span&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面的图描绘了preOrderTraverse方法的访问路径： &lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree7.png&quot; alt=&quot;tree7&quot; width=&quot;625&quot; height=&quot;443&quot;/&gt;&lt;/div&gt;
&lt;p&gt;【后序遍历】&lt;/p&gt;
&lt;p&gt;　　后序遍历则是先访问节点的后代节点，再访问节点本身。后序遍历的一种应用是计算一个目录和它的子目录中所有文件所占空间的大小。下面来看它的实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.postOrderTraverse =&lt;span&gt; function(callback){ 
  postOrderTraverseNode(root, callback);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　postOrderTraverseNode方法的实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; postOrderTraverseNode =&lt;span&gt; function (node, callback) { 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
    postOrderTraverseNode(node.left, callback); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1} &lt;/span&gt;
    postOrderTraverseNode(node.right, callback); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2} &lt;/span&gt;
    callback(node.key);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}&lt;/span&gt;
&lt;span&gt;  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个例子中，后序遍历会先访问左侧子节点（行{1}），然后是右侧子节点（行{2}），最后是父节点本身（行{3}）&lt;/p&gt;
&lt;p&gt;　　中序、先序和后序遍历的实现方式是很相似的，唯一不同的是行{1}、{2}和{3} 的执行顺序。下面是控制台的输出结果（每个数字将会输出在不同行）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;6&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;8&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;9&lt;/span&gt; &lt;span&gt;7&lt;/span&gt; &lt;span&gt;12&lt;/span&gt; &lt;span&gt;14&lt;/span&gt; &lt;span&gt;13&lt;/span&gt; &lt;span&gt;18&lt;/span&gt; &lt;span&gt;25&lt;/span&gt; &lt;span&gt;20&lt;/span&gt; &lt;span&gt;15&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree8.png&quot; alt=&quot;tree8&quot; width=&quot;635&quot; height=&quot;389&quot;/&gt;&lt;/div&gt;

&lt;h3&gt;树的搜索&lt;/h3&gt;
&lt;p&gt;　　在树中，有三种经常执行的搜索类型：1、最小值；2、最大值；3、搜索特定的值。下面将详细介绍这三种搜索类型&lt;/p&gt;
&lt;p&gt;【最值】&lt;/p&gt;
&lt;p&gt;　　使用下面的树作为示例：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree9.png&quot; alt=&quot;tree9&quot; width=&quot;611&quot; height=&quot;375&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　如果看一眼树最后一层最左侧的节点，会发现它的值为3，这是这棵树中最小的键。如果再看一眼树最右端的节点（同样是树的最后一层），会发现它的值为25，这是这棵树中最大的键。这条信息在我们实现搜索树节点的最小值和最大值的方法时能给予我们很大的帮助&lt;/p&gt;
&lt;p&gt;　　首先来看寻找树的最小键的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; function() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; minNode(root); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1}&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　min方法将会暴露给用户。这个方法调用了minNode方法（行{1}）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; minNode =&lt;span&gt; function (node) { 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (node){
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node &amp;amp;&amp;amp; node.left !== &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2} &lt;/span&gt;
      node = node.left;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node.key;
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{4}&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　minNode方法允许我们从树中任意一个节点开始寻找最小的键。我们可以使用它来找到一棵树或它的子树中最小的键。因此，我们在调用minNode方法的时候传入树的根节点（行{1}），因为我们想要找到整棵树的最小键。在minNode内部，我们会遍历树的左边（行{2}和行{3}）直到找到树的最下层（最左端）&lt;/p&gt;
&lt;p&gt;　　以相似的方式，可以实现max方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; function() {   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; maxNode(root); 
}; 
 
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxNode =&lt;span&gt; function (node) {   
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (node){     
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node &amp;amp;&amp;amp; node.right !== &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5}       &lt;/span&gt;
      node =&lt;span&gt; node.right;     
    } 
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node.key;   
  }   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;; 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要找到最大的键，我们要沿着树的右边进行遍历（行{5}）直到找到最右端的节点。 因此，对于寻找最小值，总是沿着树的左边；而对于寻找最大值，总是沿着树的右边&lt;/p&gt;
&lt;p&gt;【特定值】&lt;/p&gt;
&lt;p&gt;　　下面来看搜索特定值的实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.search =&lt;span&gt; function(key){   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; searchNode(root, key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1} &lt;/span&gt;
&lt;span&gt;}; 
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchNode =&lt;span&gt; function(node, key){ 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}     &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;   
  } 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key &amp;lt; node.key){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}     &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; searchNode(node.left, key);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{4} &lt;/span&gt;
  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (key &amp;gt; node.key){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5}     &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; searchNode(node.right, key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{6} &lt;/span&gt;
  } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {     
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{7}   &lt;/span&gt;
&lt;span&gt;  } 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们要做的第一件事，是声明search方法。和BST中声明的其他方法的模式相同，我们将会使用一个辅助函数（行{1}）。searchNode方法可以用来寻找一棵树或它的任意子树中的一个特定的值。这也是为什么在行{1}中调用它的时候传入树的根节点作为参数。&lt;/p&gt;
&lt;p&gt;　　在开始算法之前，先要验证作为参数传入的node是否合法（不是null）。如果是null的话，说明要找的键没有找到，返回false。如果传入的节点不是null，需要继续验证。如果要找的键比当前的节点小（行{3}），那么继续在左侧的子树上搜索（行{4}）。如果要找的键比当前的节点大，那么就从右侧子节点开始继续搜索（行{6}），否则就说明要找的键和当前节点的键相等，就返回true来表示找到了这个键（行{7}）。&lt;/p&gt;
&lt;p&gt;　　可以通过下面的代码来测试这个方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
console.log(tree.search(&lt;span&gt;1&lt;/span&gt;) ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Key 1 found.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Key 1 not found.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;); &lt;br/&gt;console.log(tree.search(&lt;span&gt;8&lt;/span&gt;) ? &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Key 8 found.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; : &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Key 8 not found.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Value &lt;span&gt;1&lt;/span&gt;&lt;span&gt; not found. 
Value &lt;/span&gt;&lt;span&gt;8&lt;/span&gt; found.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面来详细介绍查找1这个键的时候方法是如何执行的&lt;/p&gt;
&lt;p&gt;　　1、调用searchNode方法，传入根节点作为参数（行{1}）。（node[root[11]]）不是null（行{2}），因此我们执行到行{3}&lt;/p&gt;
&lt;p&gt;　　2、（key[1]&amp;lt;node[11]）为ture（行{3}），因此来到行{4}并再次调用searchNode方法，传入（node[7],key[1]）作为参数&lt;/p&gt;
&lt;p&gt;　　3、（node[7]）不是null（{2}），因此继续执行行{3}&lt;/p&gt;
&lt;p&gt;　　4、（key[1]&amp;lt;node[7]）为ture（行{3}），因此来到行{4}并再次调用searchNode方法，传入（node[5],key[1]）作为参数&lt;/p&gt;
&lt;p&gt;　　5、（node[5]）不是null（行{2}），因此继续执行行{3}&lt;/p&gt;
&lt;p&gt;　　6、（key[1]&amp;lt;node[5]）为ture（行{3}），因此来到行{4}并再次调用searchNode方法，传入（node[3],key[1]）作为参数&lt;/p&gt;
&lt;p&gt;　　7、（node[3]）不是null（行{2}），因此来到行{3}&lt;/p&gt;
&lt;p&gt;　　8、（key[1]&amp;lt;node[3]）为真（行{3}），因此来到行{4}并再次调用searchNode方法，传入（null,key[1]）作为参数。null被作为参数传入是因为node[3]是一个叶节点（它没有子节点，所以它的左侧子节点的值为null）&lt;/p&gt;
&lt;p&gt;　　9、节点（null）的值为null（行{2}，这时要搜索的节点为null），因此返回false&lt;/p&gt;
&lt;p&gt;　　10、然后，方法调用会依次出栈，代码执行过程结束&lt;/p&gt;
&lt;p&gt;　　下面再来查找值为8的节点：&lt;/p&gt;
&lt;p&gt;　　1、调用searchNode方法，传入root作为参数（行{1}）。（node[root[11]]）不是null（行{2}），因此我们来到行{3}&lt;/p&gt;
&lt;p&gt;　　2、（key[8]&amp;lt;node[11]）为真（行{3}），因此执行到行{4}并再次调用searchNode方法，传入（node[7],key[8]）作为参数。（node[7]）不是null，因此来到行{3}&lt;/p&gt;
&lt;p&gt;　　3、（key[8]&amp;lt;node[7]）为假（行{3}），因此来到行{5}&lt;/p&gt;
&lt;p&gt;　　4、（key[8]&amp;gt;node[7]）为真（行{5}），因此来到行{6}并再次调用searchNode方法，传入（node[9],key[8]）作为参数。（node[9]）不是null（行{2}），因此来到行{3}&lt;/p&gt;
&lt;p&gt;　　5、（key[8]&amp;lt;node[9]）为真（行{3}），因此来到行{4}并再次调用searchNode方法，传入（node[8],key[8]）作为参数。（node[8]）不是null（行{2}），因此来到行{3}&lt;/p&gt;
&lt;p&gt;　　6、（key[8]&amp;lt;node[8]）为假（行{3}），因此来到行{5}&lt;/p&gt;
&lt;p&gt;　　7、（key[8]&amp;gt;node[8]）为假（行{5}），因此来到行{7}并返回true，因为node[8]就是要找的键&lt;/p&gt;
&lt;p&gt;　　8、然后，方法调用会依次出栈，代码执行过程结束&lt;/p&gt;
&lt;p&gt;【移除一个节点】&lt;/p&gt;
&lt;p&gt;　　先创建这个remove方法，使它能够在树的实例上被调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.remove =&lt;span&gt; function(key){
  root &lt;/span&gt;= removeNode(root, key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{1}&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个方法接收要移除的键并且它调用了removeNode方法，传入root和要移除的键作为参数（行{1}）。要注意的是，root被赋值为removeNode方法的返回值&lt;/p&gt;
&lt;p&gt;　　removeNode方法的复杂之处在于我们要处理不同的运行场景，当然也包括它同样是通过递归来实现的。下面来看removeNode方法的实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; removeNode =&lt;span&gt; function(node, key){ 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{2}     &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;   
  } 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key &amp;lt; node.key){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{3}     &lt;/span&gt;
    node.left = removeNode(node.left, key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{4} &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; node; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{5} &lt;/span&gt;
  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (key &amp;gt; node.key){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{6}    &lt;/span&gt;
    node.right = removeNode(node.right, key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{7}     &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; node; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{8} &lt;/span&gt;
  } &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;键等于node.key 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一种情况——一个叶节点     &lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (node.left === &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; node.right === &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{9}      &lt;/span&gt;
      node = &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{10}       &lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; node; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{11}     &lt;/span&gt;
&lt;span&gt;    } 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二种情况——一个只有一个子节点的节点     &lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (node.left === &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{12}       &lt;/span&gt;
      node = node.right; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{13}&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; node; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{14} &lt;/span&gt;
    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (node.right === &lt;span&gt;null&lt;/span&gt;){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{15}       &lt;/span&gt;
      node = node.left; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{16}       &lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; node; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{17}     &lt;/span&gt;
&lt;span&gt;    } 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三种情况——一个有两个子节点的节点     &lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; aux = findMinNode(node.right); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{18}     &lt;/span&gt;
    node.key = aux.key; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{19}     &lt;/span&gt;
    node.right = removeNode(node.right, aux.key); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{20}     &lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; node; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{21}   &lt;/span&gt;
&lt;span&gt;  } 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面来看行{2}，如果正在检测的节点是null，那么说明键不存在于树中，所以返回null。然后要做的第一件事，就是在树中找到要移除的节点。因此，如果要找的键比当前节点的值小（行{3}），就沿着树的左边找到下一个节点（行{4}）。如果要找的键比当前节点的值大（行{6}），那么就沿着树的右边找到下一个节点（行{7}）。如果找到了要找的键（键和node.key相等），就需要处理三种不同的情况&lt;/p&gt;
&lt;p&gt;　　findMinNode方法如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; findMinNode =&lt;span&gt; function(node){   
  &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node &amp;amp;&amp;amp; node.left !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {     
    node &lt;/span&gt;=&lt;span&gt; node.left;   
  }   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node; 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1、移除一个叶节点&lt;/p&gt;
&lt;p&gt;　　第一种情况是该节点是一个没有左侧或右侧子节点的叶节点——行{9}。在这种情况下，要做的就是给这个节点赋予null值来移除它（行{9}）。但是仅仅赋一个null值是不够的，还需要处理指针。在这里，这个节点没有任何子节点，但是它有一个父节点，需要通过返回null来将对应的父节点指针赋予null值（行{11}）&lt;/p&gt;
&lt;p&gt;　　现在节点的值已经是null了，父节点指向它的指针也会接收到这个值，这也是我们要在函数中返回节点的值的原因。父节点总是会接收到函数的返回值。另一种可行的办法是将父节点和节点本身都作为参数传入方法内部&lt;/p&gt;
&lt;p&gt;　　如果回头来看方法的第一行代码，会发现我们在行{4}和行{7}更新了节点左右指针的值，同样也在行{5}和行{8}返回了更新后的节点。下图展现了移除一个叶节点的过程：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree10.png&quot; alt=&quot;tree10&quot; width=&quot;711&quot; height=&quot;437&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　2、移除有一个左侧或右侧子节点的节点&lt;/p&gt;
&lt;p&gt;　　现在来看第二种情况，移除有一个左侧子节点或右侧子节点的节点。这种情况下，需要跳过这个节点，直接将父节点指向它的指针指向子节点。如果这个节点没有左侧子节点（行{12}），也就是说它有一个右侧子节点。因此我们把对它的引用改为对它右侧子节点的引用（行{13}）并返回更新后的节点（行{14}）。如果这个节点没有右侧子节点，也是一样——把对它的引用改为对它左侧子节点的引用（行{16}）并返回更新后的值（行{17}）&lt;/p&gt;
&lt;p&gt;　　下图展现了移除只有一个左侧子节点或右侧子节点的节点的过程：&lt;/p&gt;
&lt;div readability=&quot;118.5&quot;&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree11.png&quot; alt=&quot;tree11&quot; width=&quot;589&quot; height=&quot;363&quot;/&gt;　
&lt;p&gt;　　3、移除有两个子节点的节点&lt;/p&gt;
&lt;p&gt;　　现在是第三种情况，也是最复杂的情况，那就是要移除的节点有两个子节点——左侧子节点和右侧子节点。要移除有两个子节点的节点，需要执行四个步骤。(1)当找到了需要移除的节点后，需要找到它右边子树中最小的节点（它的继承者——行{18}）；(2)然后，用它右侧子树中最小节点的键去更新这个节点的值（行{19}）。通过这一步，改变了这个节点的键，也就是说它被移除了；(3)但是，这样在树中就有两个拥有相同键的节点了，这是不行的。要继续把右侧子树中的最小节点移除，毕竟它已经被移至要移除的节点的位置了（行{20}）；(4)最后，向它的父节点返回更新后节点的引用（行{21}）&lt;/p&gt;
&lt;p&gt;　　findMinNode方法的实现和min方法的实现方式是一样的。唯一不同之处在于，在min方法中只返回键，而在findMinNode中返回了节点。下图展现了移除有两个子节点的节点的过程：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree12.png&quot; alt=&quot;tree12&quot; width=&quot;646&quot; height=&quot;356&quot;/&gt;&lt;/div&gt;
&lt;p&gt;【完整代码】&lt;/p&gt;
&lt;p&gt;　　二叉搜索树BST的完整代码如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function BinarySearchTree() {

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Node =&lt;span&gt; function(key){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.left = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.right = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; root = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.insert =&lt;span&gt; function(key){

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newNode = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(key);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;special case - first element&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (root === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            root &lt;/span&gt;=&lt;span&gt; newNode;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            insertNode(root,newNode);
        }
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; insertNode =&lt;span&gt; function(node, newNode){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newNode.key &amp;lt;&lt;span&gt; node.key){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.left === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                node.left &lt;/span&gt;=&lt;span&gt; newNode;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                insertNode(node.left, newNode);
            }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.right === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                node.right &lt;/span&gt;=&lt;span&gt; newNode;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                insertNode(node.right, newNode);
            }
        }
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getRoot =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.search =&lt;span&gt; function(key){

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; searchNode(root, key);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; searchNode =&lt;span&gt; function(node, key){

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key &amp;lt;&lt;span&gt; node.key){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; searchNode(node.left, key);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (key &amp;gt;&lt;span&gt; node.key){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; searchNode(node.right, key);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;element is equal to node.item&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.inOrderTraverse =&lt;span&gt; function(callback){
        inOrderTraverseNode(root, callback);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; inOrderTraverseNode =&lt;span&gt; function (node, callback) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            inOrderTraverseNode(node.left, callback);
            callback(node.key);
            inOrderTraverseNode(node.right, callback);
        }
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.preOrderTraverse =&lt;span&gt; function(callback){
        preOrderTraverseNode(root, callback);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; preOrderTraverseNode =&lt;span&gt; function (node, callback) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            callback(node.key);
            preOrderTraverseNode(node.left, callback);
            preOrderTraverseNode(node.right, callback);
        }
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.postOrderTraverse =&lt;span&gt; function(callback){
        postOrderTraverseNode(root, callback);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postOrderTraverseNode =&lt;span&gt; function (node, callback) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            postOrderTraverseNode(node.left, callback);
            postOrderTraverseNode(node.right, callback);
            callback(node.key);
        }
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; function() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; minNode(root);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; minNode =&lt;span&gt; function (node) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (node){
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node &amp;amp;&amp;amp; node.left !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                node &lt;/span&gt;=&lt;span&gt; node.left;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node.key;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; function() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; maxNode(root);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxNode =&lt;span&gt; function (node) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (node){
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node &amp;amp;&amp;amp; node.right !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                node &lt;/span&gt;=&lt;span&gt; node.right;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node.key;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.remove =&lt;span&gt; function(element){
        root &lt;/span&gt;=&lt;span&gt; removeNode(root, element);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; findMinNode =&lt;span&gt; function(node){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (node &amp;amp;&amp;amp; node.left !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            node &lt;/span&gt;=&lt;span&gt; node.left;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; removeNode =&lt;span&gt; function(node, element){

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.key){
            node.left &lt;/span&gt;=&lt;span&gt; removeNode(node.left, element);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.key){
            node.right &lt;/span&gt;=&lt;span&gt; removeNode(node.right, element);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;element is equal to node.item

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;handle 3 special conditions
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 - a leaf node
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 - a node with only 1 child
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3 - a node with 2 children

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case 1&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (node.left === &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; node.right === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                node &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case 2&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (node.left === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                node &lt;/span&gt;=&lt;span&gt; node.right;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;

            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (node.right === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                node &lt;/span&gt;=&lt;span&gt; node.left;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;case 3&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; aux =&lt;span&gt; findMinNode(node.right);
            node.key &lt;/span&gt;=&lt;span&gt; aux.key;
            node.right &lt;/span&gt;=&lt;span&gt; removeNode(node.right, aux.key);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
        }
    };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;自平衡树&lt;/h3&gt;
&lt;p&gt;　　二叉树BST存在一个问题：取决于添加的节点数，树的一条边可能会非常深；也就是说，树的一条分支会有很多层，而其他的分支却只有几层，如下图所示：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree13.png&quot; alt=&quot;tree13&quot; width=&quot;620&quot; height=&quot;569&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　这会在需要在某条边上添加、移除和搜索某个节点时引起一些性能问题。为了解决这个问题，有一种树叫作阿德尔森-维尔斯和兰迪斯树（AVL树）。AVL树是一种自平衡二叉搜索树，意思是任何一个节点左右两侧子树的高度之差最多为1。也就是说这种树会在添加或移除节点时尽量试着成为一棵完全树&lt;/p&gt;
&lt;p&gt;　　AVL树是一种自平衡树。添加或移除节点时，AVL树会尝试自平衡。任意一个节点（不论深度）的左子树和右子树高度最多相差1。添加或移除节点时，AVL树会尽可能尝试转换为完全树。&lt;/p&gt;
&lt;p&gt;　　在AVL树中插入或移除节点和BST完全相同。然而，AVL树的不同之处在于我们需要检验它的平衡因子，如果有需要，则将其逻辑应用于树的自平衡。&lt;/p&gt;
&lt;p&gt;　　下面的代码是向AVL树插入新节点的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; insertNode =&lt;span&gt; function(node, element) {   
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {     
    node &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(element);   
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.key) {     
    node.left &lt;/span&gt;=&lt;span&gt; insertNode(node.left, element); 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.left !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {       
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 确认是否需要平衡 {1}     &lt;/span&gt;
&lt;span&gt;    }   
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.key) {    
    node.right &lt;/span&gt;=&lt;span&gt; insertNode(node.right, element); 
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.right !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {       
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 确认是否需要平衡 {2}    &lt;/span&gt;
&lt;span&gt;    }   
  }   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node; 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然而，插入新节点时，还要检查是否需要平衡树（行{1}和行{2}）。 &lt;/p&gt;
&lt;p&gt;【计算平衡因子】&lt;/p&gt;
&lt;p&gt;　　在AVL树中，需要对每个节点计算右子树高度（hr）和左子树高度（hl）的差值，该值 （hr－hl）应为0、1或-1。如果结果不是这三个值之一，则需要平衡该AVL树。这就是平衡因子的概念&lt;/p&gt;
&lt;p&gt;　　下图举例说明了一些树的平衡因子（所有的树都是平衡的）：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree14.png&quot; alt=&quot;tree14&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　计算节点高度的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; heightNode =&lt;span&gt; function(node) {   
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node  === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {     
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; 
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Math.max(heightNode(node.left),     
    heightNode(node.right)) &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;   
  } 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因此，向左子树插入新节点时，需要计算其高度；如果高度大于1（即不为-1、0和1之一）， 就需要平衡左子树。代码如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 替换insertNode方法的行{1} &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; ((heightNode(node.left) - heightNode(node.right)) &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {   
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 旋转 {3} &lt;/span&gt;
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　向右子树插入新节点时，应用同样的逻辑，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 替换insertNode方法的行{2} &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; ((heightNode(node.right) - heightNode(node.left)) &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {   
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 旋转 {4} &lt;/span&gt;
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【AVL旋转】&lt;/p&gt;
&lt;p&gt;　　向AVL树插入节点时，可以执行单旋转或双旋转两种平衡操作，分别对应四种场景： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;、右-&lt;span&gt;右（RR）：向左的单旋转
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;、左-&lt;span&gt;左（LL）：向右的单旋转
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;、左-&lt;span&gt;右（LR）：向右的双旋转
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;、右-左（RL）：向左的双旋转 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面来依次看看它们是如何工作的&lt;/p&gt;
&lt;p&gt;　　右-右（RR）：向左的单旋转。如下图所示：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree15.png&quot; alt=&quot;tree15&quot; width=&quot;830&quot; height=&quot;319&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　假设向AVL树插入节点90，这会造成树失衡（节点50 -Y高度为+2），因此需要恢复树的平衡。下面是执行的操作：&lt;/p&gt;
&lt;p&gt;　　1、与平衡操作相关的节点有三个（X、Y、Z），将节点X置于节点Y（平衡因子为-2）所在的位置（行{1}）&lt;/p&gt;
&lt;p&gt;　　2、节点X的右子树保持不变&lt;/p&gt;
&lt;p&gt;　　3、将节点Y的右子节点置为节点X的左子节点Z（行{2}）&lt;/p&gt;
&lt;p&gt;　　4、将节点X的左子节点置为节点Y（行{3}）&lt;/p&gt;
&lt;p&gt;　　下面的代码举例说明了整个过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; rotationRR =&lt;span&gt; function(node) {   
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp = node.right;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {1}   &lt;/span&gt;
  node.right = tmp.left; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {2}   &lt;/span&gt;
  tmp.left = node;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {3}   &lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp; 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　左-左（LL）：向右的单旋转。如下图所示： &lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree16.png&quot; alt=&quot;tree16&quot; width=&quot;796&quot; height=&quot;318&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　假设向AVL树插入节点5，这会造成树失衡（节点50 -Y高度为+2），需要恢复树的平衡。下面是我们执行的操作：&lt;/p&gt;
&lt;p&gt;　　1、与平衡操作相关的节点有三个（X、Y、Z），将节点X置于节点Y（平衡因子为+2）所在的位置（行{1}）&lt;/p&gt;
&lt;p&gt;　　2、节点X的左子树保持不变&lt;/p&gt;
&lt;p&gt;　　3、将节点Y的左子节点置为节点X的右子节点Z（行{2}）&lt;/p&gt;
&lt;p&gt;　　4、将节点X的右子节点置为节点Y（行{3}）&lt;/p&gt;
&lt;p&gt;　　下面的代码举例说明了整个过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; rotationLL =&lt;span&gt; function(node) {   
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp = node.left;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {1}   &lt;/span&gt;
  node.left = tmp.right; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {2}   &lt;/span&gt;
  tmp.right = node;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {3}   &lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp; 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　左-右（LR）：向右的双旋转。如下图所示： &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree17.png&quot; alt=&quot;tree17&quot; width=&quot;751&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　假设向AVL树插入节点35，这会造成树失衡（节点50 -Y高度为+2），需要恢复树的平衡。下面是执行的操作：&lt;/p&gt;
&lt;p&gt;　　1、将节点X置于节点Y（平衡因子为+2）所在的位置&lt;/p&gt;
&lt;p&gt;　　2、将节点Y的左子节点置为节点X的右子节点&lt;/p&gt;
&lt;p&gt;　　3、将节点Z的右子节点置为节点X的左子节点&lt;/p&gt;
&lt;p&gt;　　4、将节点X的右子节点置为节点Y&lt;/p&gt;
&lt;p&gt;　　5、将节点X的左子节点置为节点Z&lt;/p&gt;
&lt;p&gt;　　基本上，就是先做一次RR旋转，再做一次LL旋转。下面的代码举例说明了整个过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; rotationLR =&lt;span&gt; function(node) {   
  node.left &lt;/span&gt;=&lt;span&gt; rotationRR(node.left);   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rotationLL(node); 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　右-左（RL）：向左的双旋转。如下图所示： &lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/dataStructureTree18.png&quot; alt=&quot;tree18&quot; width=&quot;736&quot; height=&quot;318&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　假设向AVL树插入节点75，这会造成树失衡（节点70 -Y高度为-2），需要恢复树的平衡。下面是我们执行的操作：&lt;/p&gt;
&lt;p&gt;　　1、将节点X置于节点Y（平衡因子为-2）所在的位置&lt;/p&gt;
&lt;p&gt;　　2、节点Z的左子节点置为节点X的右子节点&lt;/p&gt;
&lt;p&gt;　　3、将节点Y的右子节点置为节点X的左子节点&lt;/p&gt;
&lt;p&gt;　　4、将节点X的左子节点置为节点Y&lt;/p&gt;
&lt;p&gt;　　5、将节点X的右子节点置为节点Z&lt;/p&gt;
&lt;p&gt;　　基本上，就是先做一次LL旋转，再做一次RR旋转。下面的代码举例说明了整个过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; rotationRL =&lt;span&gt; function(node) {   
  node.right &lt;/span&gt;=&lt;span&gt; rotationLL(node.right);   
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rotationRR(node); 
}; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　确认树需要平衡后，就需要对每种情况分别应用正确的旋转&lt;/p&gt;
&lt;p&gt;　　向左子树插入新节点，且节点的值小于其左子节点时，应进行LL旋转。否则，进行LR旋转。该过程的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 替换insertNode方法的行{1} &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; ((heightNode(node.left) - heightNode(node.right)) &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;){   
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 旋转 {3}   &lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.left.key){     
    node &lt;/span&gt;=&lt;span&gt; rotationLL(node);   
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {     
    node &lt;/span&gt;=&lt;span&gt; rotationLR(node);   
  } 
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　向右子树插入新节点，且节点的值大于其右子节点时，应进行RR旋转。否则，进行RL旋转。 该过程的代码如下： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 替换insertNode方法的行{2} &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; ((heightNode(node.right) - heightNode(node.left)) &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;){   
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 旋转 {4}   &lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.right.key){    
    node &lt;/span&gt;=&lt;span&gt; rotationRR(node);   
  } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {     
    node &lt;/span&gt;=&lt;span&gt; rotationRL(node);   
  } 
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【完整代码】&lt;/p&gt;
&lt;p&gt;　　AVL树的完整代码如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function AVLTree() {

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Node =&lt;span&gt; function(key){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.left = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.right = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; root = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getRoot =&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; heightNode =&lt;span&gt; function(node) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Math.max(heightNode(node.left), heightNode(node.right)) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rotationLL =&lt;span&gt; function(node) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp =&lt;span&gt; node.left;
        node.left &lt;/span&gt;=&lt;span&gt; tmp.right;
        tmp.right &lt;/span&gt;=&lt;span&gt; node;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rotationRR =&lt;span&gt; function(node) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp =&lt;span&gt; node.right;
        node.right &lt;/span&gt;=&lt;span&gt; tmp.left;
        tmp.left &lt;/span&gt;=&lt;span&gt; node;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tmp;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rotationLR =&lt;span&gt; function(node) {
        node.left &lt;/span&gt;=&lt;span&gt; rotationRR(node.left);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rotationLL(node);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rotationRL =&lt;span&gt; function(node) {
        node.right &lt;/span&gt;=&lt;span&gt; rotationLL(node.right);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rotationRR(node);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; insertNode =&lt;span&gt; function(node, element) {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            node &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(element);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.key) {

            node.left &lt;/span&gt;=&lt;span&gt; insertNode(node.left, element);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.left !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((heightNode(node.left) - heightNode(node.right)) &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.left.key){
                        node &lt;/span&gt;=&lt;span&gt; rotationLL(node);
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        node &lt;/span&gt;=&lt;span&gt; rotationLR(node);
                    }
                }
            }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.key) {

            node.right &lt;/span&gt;=&lt;span&gt; insertNode(node.right, element);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.right !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((heightNode(node.right) - heightNode(node.left)) &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;){

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.right.key){
                        node &lt;/span&gt;=&lt;span&gt; rotationRR(node);
                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        node &lt;/span&gt;=&lt;span&gt; rotationRL(node);
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.insert =&lt;span&gt; function(element) {
        root &lt;/span&gt;=&lt;span&gt; insertNode(root, element);
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; parentNode;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; nodeToBeDeleted;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; removeNode =&lt;span&gt; function(node, element) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        parentNode &lt;/span&gt;=&lt;span&gt; node;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.key) {
            node.left &lt;/span&gt;=&lt;span&gt; removeNode(node.left, element);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            nodeToBeDeleted &lt;/span&gt;=&lt;span&gt; node;
            node.right &lt;/span&gt;=&lt;span&gt; removeNode(node.right, element);
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === parentNode) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;remove node&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (nodeToBeDeleted !== &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; element ===&lt;span&gt; nodeToBeDeleted.key) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nodeToBeDeleted ===&lt;span&gt; parentNode) {
                    node &lt;/span&gt;=&lt;span&gt; node.left;
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tmp =&lt;span&gt; nodeToBeDeleted.key;
                    nodeToBeDeleted.key &lt;/span&gt;=&lt;span&gt; parentNode.key;
                    parentNode.key &lt;/span&gt;=&lt;span&gt; tmp;
                    node &lt;/span&gt;=&lt;span&gt; node.right;
                }
            }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;do balancing&lt;/span&gt;

            &lt;span&gt;if&lt;/span&gt; (node.left === undefined) node.left = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node.right === undefined) node.right = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((heightNode(node.left) - heightNode(node.right)) === &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.left.key) {
                    node &lt;/span&gt;=&lt;span&gt; rotationLR(node);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    node &lt;/span&gt;=&lt;span&gt; rotationLL(node);
                }
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((heightNode(node.right) - heightNode(node.left)) === &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.right.key) {
                    node &lt;/span&gt;=&lt;span&gt; rotationRL(node);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    node &lt;/span&gt;=&lt;span&gt; rotationRR(node);
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.remove =&lt;span&gt; function(element) {
        parentNode &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        nodeToBeDeleted &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        root &lt;/span&gt;=&lt;span&gt; removeNode(root, element);
    };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　尽管AVL树是自平衡的，其插入或移除节点的性能并不总是最好的。更好的选择是红黑树。红黑树可以高效有序地遍历其节点&lt;/p&gt;
&lt;p&gt;【红黑树】&lt;/p&gt;
&lt;p&gt;　　红黑树的完整代码如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function RedBlackTree() {

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Colors =&lt;span&gt; {
        RED: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
        BLACK: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Node =&lt;span&gt; function (key, color) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.left = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.right = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.flipColor =&lt;span&gt; function(){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.color ===&lt;span&gt; Colors.RED) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; Colors.BLACK;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; Colors.RED;
            }
        };
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; root = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getRoot =&lt;span&gt; function () {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isRed =&lt;span&gt; function(node){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;node){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; node.color ===&lt;span&gt; Colors.RED;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; flipColors =&lt;span&gt; function(node){
        node.left.flipColor();
        node.right.flipColor();
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rotateLeft =&lt;span&gt; function(node){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp =&lt;span&gt; node.right;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (temp !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            node.right &lt;/span&gt;=&lt;span&gt; temp.left;
            temp.left &lt;/span&gt;=&lt;span&gt; node;
            temp.color &lt;/span&gt;=&lt;span&gt; node.color;
            node.color &lt;/span&gt;=&lt;span&gt; Colors.RED;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rotateRight =&lt;span&gt; function (node) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp =&lt;span&gt; node.left;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (temp !== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            node.left &lt;/span&gt;=&lt;span&gt; temp.right;
            temp.right &lt;/span&gt;=&lt;span&gt; node;
            temp.color &lt;/span&gt;=&lt;span&gt; node.color;
            node.color &lt;/span&gt;=&lt;span&gt; Colors.RED;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; temp;
    };

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; insertNode =&lt;span&gt; function(node, element) {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(element, Colors.RED);
        }

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newRoot =&lt;span&gt; node;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (element &amp;lt;&lt;span&gt; node.key) {

            node.left &lt;/span&gt;=&lt;span&gt; insertNode(node.left, element);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (element &amp;gt;&lt;span&gt; node.key) {

            node.right &lt;/span&gt;=&lt;span&gt; insertNode(node.right, element);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            node.key &lt;/span&gt;=&lt;span&gt; element;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isRed(node.right) &amp;amp;&amp;amp; !&lt;span&gt;isRed(node.left)) {
            newRoot &lt;/span&gt;=&lt;span&gt; rotateLeft(node);
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isRed(node.left) &amp;amp;&amp;amp;&lt;span&gt; isRed(node.left.left)) {
            newRoot &lt;/span&gt;=&lt;span&gt; rotateRight(node);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isRed(node.left) &amp;amp;&amp;amp;&lt;span&gt; isRed(node.right)) {
            flipColors(node);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; newRoot;
    };

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.insert =&lt;span&gt; function(element) {
        root &lt;/span&gt;=&lt;span&gt; insertNode(root, element);
        root.color &lt;/span&gt;=&lt;span&gt; Colors.BLACK;
    };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 03 Jan 2018 14:05:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8184989.html</dc:identifier>
</item>
</channel>
</rss>