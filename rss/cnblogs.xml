<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Elasticsearch Query DSL 整理总结（二）——  要搞懂 Match Query，看这篇就够了 - ReyCG</title>
<link>http://www.cnblogs.com/reycg-blog/p/10002794.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/reycg-blog/p/10002794.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;

&lt;p&gt;昨天是感恩节，上幼儿园的女儿在老师的叮嘱下，晚上为我和老婆洗了脚(形式上的^_^)，还给我们每人端了一杯水。看着孩子一天天的长大，懂事，感觉很开心，话说咱们程序员这么辛苦是为了什么？不就是为了老婆，孩子，热炕头，有一个温暖幸福的家庭，再捎带着用代码改变一下世界吗？想到这里，顿时觉得学习，创作博客的劲头也的更足了。哈哈，扯远了，书归正传，今天我们来聊聊 Match Query。&lt;/p&gt;
&lt;p&gt;Match Query 是最常用的 Full Text Query 。无论需要查询什么字段， &lt;code&gt;match&lt;/code&gt; 查询都应该会是首选的查询方式。它既能处理全文字段，又能处理精确字段。&lt;/p&gt;

&lt;p&gt;为了能够在后面能深入理解 Match Query 中的各个属性的意义，我们先构建一个 index 示例(有兴趣的同学只要将下面字段粘贴到 &lt;a href=&quot;https://www.elastic.co/guide/en/sense/current/introduction.html&quot;&gt;sense&lt;/a&gt; 中就可以创建)。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;PUT matchtest
{ 
}

PUT matchtest/_mapping/people
{
  &quot;properties&quot;: {
    &quot;age&quot;: {
      &quot;type&quot;: &quot;integer&quot;
    },
    &quot;hobbies&quot;: {
      &quot;type&quot;: &quot;text&quot;
    },
    &quot;name&quot;: {
      &quot;type&quot;: &quot;keyword&quot;
    }
  }
}

PUT matchtest/people/1
{
  &quot;name&quot; : &quot;Jim&quot;,
  &quot;age&quot;: 10,
  &quot;hobbies&quot;: &quot;football, basketball, pingpang&quot;
}


PUT matchtest/people/2
{
  &quot;name&quot; : &quot;Tom&quot;,
  &quot;age&quot;: 12,
  &quot;hobbies&quot;: &quot;swimming, football&quot;
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;operator-参数&quot;&gt;operator 参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt; 查询是一种 &lt;code&gt;bool&lt;/code&gt; 类型的查询。什么意思呢？举个例子，查询 people type 的 hobbies 为 &lt;code&gt;football basketball&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest/people/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;hobbies&quot;: &quot;football basketball&quot;
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会将上面的两个文档都搜索出来。为什么？上面的查询其实隐藏了一个默认参数&lt;code&gt;operator&lt;/code&gt; ， 它的默认值是 &lt;code&gt;or&lt;/code&gt; ，也就是说上面的查询也可以写成这种形式&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest/people/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;hobbies&quot;: {
        &quot;query&quot;: &quot;football basketball&quot;,
        &quot;operator&quot;: &quot;or&quot;
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就比较容易理解了，既然是 &lt;code&gt;or&lt;/code&gt; 操作符，就表示只要查询的文档的 &lt;code&gt;hobbies&lt;/code&gt; 字段中含有 &lt;code&gt;football&lt;/code&gt; 和 &lt;code&gt;basketball&lt;/code&gt; 任意一个，就可以被匹配到。&lt;/p&gt;
&lt;p&gt;如果将 &lt;code&gt;operator&lt;/code&gt; 操作符的值改为 &lt;code&gt;and&lt;/code&gt; ，则表示需要同时包含 &lt;code&gt;football&lt;/code&gt; 和 &lt;code&gt;basketball&lt;/code&gt; ， 得到的结果就只能是 文档 1 Jim 小朋友了。&lt;/p&gt;
&lt;h2 id=&quot;analyzer&quot;&gt;analyzer&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;analyzer&lt;/code&gt; 属性是指在对查询文本分析时的分析器&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果没有指定则会使用字段mapping 时指定的分析器&lt;/li&gt;
&lt;li&gt;如果字段在 mapping 时也没有明显指定，则会使用默认的 search analyzer。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里我们也没有指定，就会使用默认的，就不举例了，在后面文章讲解 analyzer 时再拓展。&lt;/p&gt;
&lt;h2 id=&quot;lenient-参数&quot;&gt;lenient 参数&lt;/h2&gt;
&lt;p&gt;默认值是 &lt;code&gt;false&lt;/code&gt; ， 表示用来在查询时如果数据类型不匹配且无法转换时会报错。如果设置成 &lt;code&gt;true&lt;/code&gt; 会忽略错误。&lt;/p&gt;
&lt;p&gt;例如， 例子中的 &lt;code&gt;age&lt;/code&gt; 是 &lt;code&gt;integer&lt;/code&gt; 类型的，如果查询 &lt;code&gt;age=xxy&lt;/code&gt; ，就会导致无法转换而报错。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;age&quot; : {
        &quot;query&quot;: &quot;xxx&quot;
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而如果将 &lt;code&gt;lenient&lt;/code&gt; 参数设置为 &lt;code&gt;true&lt;/code&gt; ，就会忽略这个错误&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;age&quot; : {
        &quot;query&quot;: &quot;xxx&quot;,
        &quot;lenient&quot;: true
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，如果将 &lt;code&gt;age&lt;/code&gt; 字段的值设置为字符串 &quot;10&quot;, 来查询，由于能够转换成整数，这时 elastic 内部会将 字符串先转换成整数再做查询，不会报错。&lt;/p&gt;

&lt;h2 id=&quot;fuzzniess-参数&quot;&gt;fuzzniess 参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fuzziness&lt;/code&gt; 参数可以是查询的字段具有模糊搜索的特性。来先了解下什么是模糊搜索。&lt;/p&gt;
&lt;h3 id=&quot;什么是模糊搜索&quot;&gt;什么是模糊搜索？&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;模糊搜索是指系统允许被搜索信息和搜索提问之间存在一定的差异，这种差异就是“模糊”在搜索中的含义。例如，查找名字Smith时，就会找出与之相似的Smithe， Smythe， Smyth， Smitt等。&lt;/p&gt;
&lt;p&gt;——百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过模糊搜索可以查询出存在一定相似度的单词，那么怎么计算两个单词是否有相似度以及相似度的大小呢？这就要了解下另外一个概念：&lt;a href=&quot;http://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein Edit Distance&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;levenshtein-edit-distance&quot;&gt;Levenshtein Edit Distance&lt;/h3&gt;
&lt;blockquote readability=&quot;6.3935018050542&quot;&gt;
&lt;p&gt;Levenshtein Edit Distance 叫做莱文斯坦距离**，是&lt;a href=&quot;https://baike.baidu.com/item/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB&quot;&gt;编辑距离&lt;/a&gt;的一种。指两个&lt;a href=&quot;https://baike.baidu.com/item/%E5%AD%97%E4%B8%B2&quot;&gt;字串&lt;/a&gt;之间，由一个转成另一个所需的最少编辑操作次数。允许的编辑操作包括将一个字符替换成另一个字符，插入一个&lt;a href=&quot;https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6&quot;&gt;字符&lt;/a&gt;，删除一个字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，单词 &quot;god&quot; 只需要插入一个 'o' 字符就可以变为 &quot;good&quot;，因此它们之间的编辑距离为 1。&lt;/p&gt;
&lt;h3 id=&quot;fuzziness-参数取值规则&quot;&gt;fuzziness 参数取值规则&lt;/h3&gt;
&lt;p&gt;了解了上面两个概念，回过头再来看下 &lt;code&gt;fuzziness&lt;/code&gt; 参数。&lt;/p&gt;
&lt;p&gt;在查询 &lt;code&gt;text&lt;/code&gt; 或者 &lt;code&gt;keyword&lt;/code&gt; 类型的字段时, &lt;code&gt;fuzziness&lt;/code&gt; 可以看做是莱文斯坦距离。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fuzziness&lt;/code&gt; 参数的取值如下&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;0,1,2&lt;/code&gt; 表示最大可允许的莱文斯坦距离&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;code&gt;AUTO&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会根据词项的长度来产生可编辑距离，它还有两个可选参数，形式为&lt;code&gt;AUTO:[low],[high]&lt;/code&gt;， 分别表示短距离参数和长距离参数；如果没有指定，默认值是 &lt;code&gt;AUTO:3,6&lt;/code&gt; 表示的意义如下&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;0..2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;单词长度为 0 到 2 之间时必须要精确匹配，这其实很好理解，单词长度太短是没有相似度可言的，例如 'a' 和 'b'。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;3..5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;单词长度 3 到 5 个字母时，最大编辑距离为 1&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;单词长度大于 5 个字母时，最大编辑距离为 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;最佳实践: &lt;code&gt;fuzziness&lt;/code&gt; 在绝大多数场合都应该设置成 &lt;code&gt;AUTO&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果不设置 &lt;code&gt;fuziness&lt;/code&gt; 参数，查询是精确匹配的。&lt;/p&gt;
&lt;p&gt;来看例子，上面创建了一个 doc&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;PUT matchtest/people/1
{
  &quot;name&quot; : &quot;Jim&quot;,
  &quot;age&quot;: 10,
  &quot;hobbies&quot;: &quot;football, basketball, pingpang&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;设置 &lt;code&gt;fuzziness&lt;/code&gt; 为 &lt;code&gt;AUTO&lt;/code&gt; ，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;其中 &lt;code&gt;hobbies&lt;/code&gt; 字段的值 &lt;code&gt;football&lt;/code&gt; 长度 &amp;gt; 5, 此时我们找一个编辑距离为 2 的单词 &lt;code&gt;footba22&lt;/code&gt; 来查询，应该匹配到&lt;/li&gt;
&lt;li&gt;其中 &lt;code&gt;name&lt;/code&gt; 字段的值 &lt;code&gt;jim&lt;/code&gt; 长度在 3 和 5 之间，此时找一个编辑距离为 1 的单词 &lt;code&gt;jiO&lt;/code&gt; 应匹配到，而编辑距离为 2 的 &lt;code&gt;jOO&lt;/code&gt; 就不应匹配到。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;来，验证下&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;hobbies&quot;: {
        &quot;query&quot;: &quot;footba22&quot;,
        &quot;fuzziness&quot;: &quot;AUTO&quot;
      }
    }
  }
}

GET matchtest/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;name&quot;: {
        &quot;query&quot;: &quot;jiO&quot;,
        &quot;fuzziness&quot;: &quot;AUTO&quot;
      }
    }
  }
}


GET matchtest/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;name&quot;: {
        &quot;query&quot;: &quot;jOO&quot;,
        &quot;fuzziness&quot;: &quot;AUTO&quot;
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;prefix_length&quot;&gt;prefix_length&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;prefix_length&lt;/code&gt; 表示不能没模糊化的初始字符数。由于大部分的拼写错误发生在词的结尾，而不是词的开始，使用 &lt;code&gt;prefix_length&lt;/code&gt; 就可以完成优化。注意 &lt;code&gt;prefix_length&lt;/code&gt; 必须结合 &lt;code&gt;fuzziness&lt;/code&gt; 参数使用。&lt;/p&gt;
&lt;p&gt;例如，在查询 &lt;code&gt;hobbies&lt;/code&gt; 中的 &lt;code&gt;football&lt;/code&gt; 时，将 &lt;code&gt;prefix_length&lt;/code&gt; 参数设置为 3,这时 &lt;code&gt;foatball&lt;/code&gt; 将不能被匹配。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;hobbies&quot;: {
        &quot;query&quot;: &quot;foatball&quot;,
        &quot;fuzziness&quot;: &quot;AUTO&quot;,
        &quot;prefix_length&quot;: 3
      }
    }
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;TODO（max_expansions 参数对于 match 查询而言，没理解表示的意义，如果您知道这个参数的用法，请给我留言告知，不胜感谢！ ）&lt;/p&gt;

&lt;p&gt;先看例子, 先创建一个文档 &lt;code&gt;zero_terms_query_test&lt;/code&gt; 其中 &lt;code&gt;message&lt;/code&gt; 字段使用 &lt;code&gt;stop&lt;/code&gt; 分析器，这个分析器会将 stop words 停用词在索引时全都去掉。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;PUT matchtest1

PUT matchtest1/_mapping/zero_terms_query_test
{
  &quot;properties&quot;: {
    &quot;message&quot;: {
      &quot;type&quot;: &quot;text&quot;,
      &quot;analyzer&quot;: &quot;stop&quot;
    }
  }
}


PUT matchtest1/zero_terms_query_test/1
{
  &quot;message&quot;: &quot;to be or not to be&quot;
}

GET matchtest1/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;message&quot;: {
        &quot;query&quot;: &quot;to be or not to be&quot;,
        &quot;operator&quot;: &quot;and&quot;,
        &quot;zero_terms_query&quot;: &quot;none&quot;
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么就像 message 字段中的 &lt;code&gt;to be or not to be&lt;/code&gt; 这个短语中全部都是停止词，一过滤，就什么也没有了,得不到任何 tokens, 那搜索时岂不什么都搜不到。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;POST _analyze
{
  &quot;analyzer&quot;: &quot;stop&quot;,
  &quot;text&quot;: &quot;to be or not to be&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;zero_terms_query&lt;/code&gt; 就是为了解决这个问题而生的。它的默认值是 &lt;code&gt;none&lt;/code&gt; ,就是搜不到停止词（对 stop 分析器字段而言）,如果设置成 &lt;code&gt;all&lt;/code&gt; ，它的效果就和 &lt;code&gt;match_all&lt;/code&gt; 类似，就可以搜到了。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;GET matchtest1/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;message&quot;: {
        &quot;query&quot;: &quot;to be or not to be&quot;,
        &quot;operator&quot;: &quot;and&quot;,
        &quot;zero_terms_query&quot;: &quot;all&quot;
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;查询字符串时的词项会分成低频词（更重要）和高频词（次重要）两类，像前面所说的停用词 （stop word）就属于高频词，它虽然出现频率较高，但在匹配时可能并不太相关。实际上，&lt;strong&gt;我们往往是想要文档能尽可能的匹配那些低频词，也就是更重要的词项&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要实现这个需求，只要在查询时配置 &lt;code&gt;cutoff_frequency&lt;/code&gt; 参数就可以了。假设我们将 &lt;code&gt;cutoff_frequency&lt;/code&gt; 设置成 &lt;code&gt;0.01&lt;/code&gt; 就表示&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;任何词项在文档中超过 1%， 被认为是高频词&lt;/li&gt;
&lt;li&gt;其他的词项会被认为低频词&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从而将高频词（次重要的词）挪到可选子查询中，让它们只参与评分，而不参与匹配；高频词（更重要的词）参与匹配和评分。&lt;/p&gt;
&lt;p&gt;这样一来，就不再需要 stopwords 停用词文件了，从而变成了动态生成停用词: 高频词就会被看做是停用词。这种配置只是对于词项比较多的场合如 email body，文章等适用，文字太少， &lt;code&gt;cutoff_frequency&lt;/code&gt; 选项设置的意义就不大了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cutoff_frequency&lt;/code&gt; 配置有两种形式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;指定为一个分数（ &lt;code&gt;0.01&lt;/code&gt; ）表示出现频率&lt;/li&gt;
&lt;li&gt;指定为一个正整数（ &lt;code&gt;5&lt;/code&gt; ）则表示出现次数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面给个例子, 在创建的 3 个文档中都包含 &quot;be &quot; 的单词，在查询时将 &lt;code&gt;cutoff_frequency&lt;/code&gt; 参数设置为 2， 表示 &quot;be&quot; 就是高频词，只会参与评分，但在匹配时不做考虑。&lt;/p&gt;
&lt;p&gt;此时查询的内容为 &quot;to be key&quot; ，由于 &quot;be&quot; 词项是高频词，因为在文档中必须要存在 &quot;to&quot; 或者 &quot;key&quot; 才能匹配，因此文档 3 不能匹配。&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;PUT /matchtest2

PUT matchtest2/_mapping/cutoff_frequency_test
{
  &quot;properties&quot;: {
    &quot;message&quot;: {
      &quot;type&quot;: &quot;text&quot;
    }
  }
}

PUT matchtest2/cutoff_frequency_test/1
{
  &quot;message&quot;: &quot;to be or not to be to be or&quot;
}

PUT matchtest2/cutoff_frequency_test/2
{
  &quot;message&quot;: &quot;be key or abc&quot;
}

PUT matchtest2/cutoff_frequency_test/3
{
  &quot;message&quot;: &quot;or to be or to to be or&quot;
}

GET matchtest2/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;message&quot;: {
        &quot;query&quot;: &quot;to be key&quot;,
        &quot;cutoff_frequency&quot;: 2
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;synonyms 是指同义词，只要索引和字段中配置了同义词过滤器，match 查询是支持多词条的同义词扩展的。在应用过滤器后，解析器会对每个多次条同义词创建一个语句查询。&lt;/p&gt;
&lt;p&gt;例如，同义词 &lt;code&gt;USA, united states of America&lt;/code&gt; 就会构建出 &lt;code&gt;(USA OR (&quot;united states of America&quot;))&lt;/code&gt;。看下面例子：&lt;/p&gt;
&lt;pre class=&quot;json&quot;&gt;
&lt;code&gt;PUT /matchtest4
{
    &quot;settings&quot;: {
        &quot;index&quot; : {
            &quot;analysis&quot; : {
                &quot;analyzer&quot; : {
                    &quot;synonym&quot; : {
                        &quot;tokenizer&quot; : &quot;whitespace&quot;,
                        &quot;filter&quot; : [&quot;synonym&quot;]
                    }
                },
                &quot;filter&quot; : {
                    &quot;synonym&quot; : {
                        &quot;type&quot; : &quot;synonym&quot;,
                        &quot;synonyms&quot; : [
                            &quot;USA, united states of America&quot;
                        ]
                    }
                }
            }
        }
    }
}

PUT /matchtest4/_mapping/synonyms_test
{
  &quot;properties&quot;: {
    &quot;message&quot;: {
      &quot;type&quot;: &quot;text&quot;,
      &quot;analyzer&quot;: &quot;synonym&quot;
    }
  }
}

PUT /matchtest4/synonyms_test/1
{
  &quot;message&quot;: &quot;united states of America people&quot;
}


GET /matchtest4/_search
{
  &quot;query&quot;: {
    &quot;match&quot;: {
      &quot;message&quot;: {
        &quot;query&quot;: &quot;USA&quot;
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;本文以代码实例的方式完整的讲解了 Match Query 的各种使用场景和参数意义。下篇会讲解 Match Phrase Query 敬请期待。&lt;/p&gt;
</description>
<pubDate>Thu, 22 Nov 2018 23:26:00 +0000</pubDate>
<dc:creator>ReyCG</dc:creator>
<og:description>昨天是感恩节，上幼儿园的女儿在老师的叮嘱下，晚上为我和老婆洗了脚(形式上的^_^)，还给我们每人端了一杯水。看着孩子一天天的长大，懂事，感觉很开心。话说咱们程序员这么辛苦是为了什么？不就是为了老婆，孩</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/reycg-blog/p/10002794.html</dc:identifier>
</item>
<item>
<title>要想学好Java编程，构造器、方法重载、this关键字、垃圾回收机制，这4关一定要过！ - 沉默王二</title>
<link>http://www.cnblogs.com/qing-gee/p/10005401.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qing-gee/p/10005401.html</guid>
<description>&lt;p&gt;有人说，你应该关注时事、财经，甚至流行的电影、电视剧，才有可能趁着热点写出爆文；有人说，你别再写“无聊”的技术文了，因为程序员的圈子真的很小，即便是像鸿祥那样的招牌大牛，文章是那么的干货，浏览量有多少？不到万吧；有人说，你别妄想在写作上面知识变现了，因为你写的文章真的很不优秀，我都不爱看！&lt;/p&gt;
&lt;p&gt;我想说，你们说的话我都不爱听！我也懒得反驳，因为我没有成功，也就没有话语权，多说无益。我只想做一名执拗的程序员，静静地写文，哪怕只有一个读者——&lt;strong&gt;有时候，做一件事，并不是想要结果，仅仅只是因为心底那种狂热的喜欢。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天，我打算聊聊Java编程中的初始化。&lt;/p&gt;
&lt;h3 id=&quot;h01&quot;&gt;01、使用构造器来确保对象初始化&lt;/h3&gt;
&lt;p&gt;在Java编程中，无论是对象，还是基本类型，都不允许在未经初始化的情况下使用它们；否则，Java编译器就会热情地提醒你——请初始化后再使用。&lt;/p&gt;
&lt;p&gt;那，Java是通过什么机制来确保对象初始化呢？&lt;/p&gt;
&lt;p&gt;答案就是“&lt;strong&gt;构造器&lt;/strong&gt;”——类的对象要被正确的初始化，就必须先过构造器这一关。&lt;/p&gt;
&lt;p&gt;程序清单1-1：一个带有构造器的简单类&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Writer {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Writer&lt;span class=&quot;hljs-params&quot; readability=&quot;1&quot;&gt;() {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot; readability=&quot;2&quot;&gt;&quot;我是一名写作爱好者&quot;);&lt;br/&gt;}&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当使用关键字new来创建一个对象Writer时，就会调用构造器（与类名Writer相同的方法&lt;code&gt;Writer()&lt;/code&gt;）进行初始化，因此上述程序就会输出“我是一名写作爱好者”。&lt;/p&gt;
&lt;p&gt;构造方法&lt;code&gt;Writer()&lt;/code&gt;没有参数，因此被称为无参构造器；事实上，无参构造器是可以省略的——编译器会自动创建一个无参构造器，被称为“默认构造器”（Java设计者真的无比明智啊——帮助程序员省去了创建默认构造器的麻烦）。&lt;/p&gt;
&lt;p&gt;程序清单1-2：默认构造器&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Writer {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认构造器并不会一直“默认”存在，如果已经定义了一个构造器，无论有参还是无参，编译器将不再自动创建默认构造器。&lt;/p&gt;
&lt;p&gt;程序清单1-3：不会一直存在的默认构造器&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Writer {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Writer&lt;span class=&quot;hljs-params&quot; readability=&quot;1&quot;&gt;(String name) {&lt;br/&gt;System.out.println(name + &lt;span class=&quot;hljs-string&quot; readability=&quot;2&quot;&gt;&quot;是一名写作爱好者&quot;);&lt;br/&gt;}&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一旦定义了一个有参构造器，那么在创建对象的时候就必须传递构造器需要的参数，否则编译器会提示“The constructor Writer() is undefined”（使用&lt;code&gt;new Writer()&lt;/code&gt;创建对象对）——这样做的好处就是，确保对象在初始化的时候符合类设计的初衷（上例中，Writer需要指定作者姓名，所以你在创建Writer对象时不能不传递作者姓名）。&lt;/p&gt;
&lt;h3 id=&quot;h02&quot;&gt;02、参差不齐乃幸福本源&lt;/h3&gt;
&lt;p&gt;读王小波的《沉默的大多数》，我喜欢上了一句话：“参差不齐乃幸福本源”。王小波的意思可能是想说：一个能容忍不同观点与不同的生活方式的社会，才是一个幸福的社会。那么，在Java的世界里，也有一个幸福的社会。&lt;/p&gt;
&lt;p&gt;由于构造器的特殊性（不能与其他成员方法的名字冲突），导致构造器的名字必须和类名保持一致，也就是说，一个类，只能有一个构造器名。这似乎局限了构造器的使用方式。但其实不然，Java允许方法重载——可以只有一个方法名，但方法的参数列表可不尽相同；哎，问题就这么巧妙的解决了。&lt;/p&gt;
&lt;p&gt;程序清单2-1：构造方法的重载&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Writer {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;6&quot;&gt;private String name;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;12&quot;&gt;private String bookName;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Writer&lt;span class=&quot;hljs-params&quot;&gt;(String name) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.name = name;&lt;br/&gt;System.out.println(name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;是一名写作爱好者&quot;);&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Writer&lt;span class=&quot;hljs-params&quot;&gt;(String name, String bookName) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.name = name;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.bookName = bookName;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;System.out.println(name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;不仅是一名写作爱好者，还出版了书籍&quot; + bookName);&lt;br/&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王二&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;沉默王三&quot;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;《Web全栈开发进阶之路》&quot;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你看，沉默王二没出版书籍，可以是一名写作爱好者；沉默王三虽然出版了书籍《Web全栈开发进阶之路》，但仍然和王二是好兄弟，并没有看不起王二（从来没说过：“王二，你个渣渣，连本书都没有出版，好意思说自己是写作爱好者？”）。是不是很和谐？&lt;/p&gt;
&lt;p&gt;Java该如何区分重载方法（毕竟参数名相同）呢？上例中，你也看到了，参数个数的不同就可以区分；另外，参数的类型和顺序（不建议使用，因为这样做会让代码难以维护，见下例）也可以用来作为区分的条件。&lt;/p&gt;
&lt;p&gt;程序清单2-2：难以维护的方法重载（靠顺序，别这样！）&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Writer {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String name;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;3&quot;&gt;private &lt;span class=&quot;hljs-keyword&quot; readability=&quot;6&quot;&gt;int age;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Writer&lt;span class=&quot;hljs-params&quot;&gt;(String name, &lt;span class=&quot;hljs-keyword&quot;&gt;int age) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.name = name;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.age = age;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-title&quot;&gt;Writer&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int age, String name) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.age = age;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.name = name;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h03this&quot;&gt;03、返回当前对象引用的this关键字&lt;/h3&gt;
&lt;p&gt;在很长一段时间里，我对this关键字都避而不见，因为我搞不懂它到底在干嘛，我所使用它的场合仅限于程序清单2-1（this.name指的是类的成员变量，而name指的是当前方法的参数）。直到我遇见了jQuery（一个快速、简洁的JavaScript框架）的链式调用。&lt;/p&gt;
&lt;p&gt;程序清单3-1：jQuery的链式调用&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;js language-js hljs javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#canvas&quot;).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我是一块抹布&quot;)&lt;br/&gt;.show();&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法后面还能再紧跟一个方法，就好像一个胯下运球再接一个后仰跳投，超自然超连贯超燃的一连串动作，令人心情感到愉悦。这背后是什么原理呢？&lt;/p&gt;
&lt;p&gt;程序清单3-2：jQuery的链式调用的背后&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;js language-js hljs javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var MyJQ = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;){&lt;br/&gt;}&lt;br/&gt;MyJQ.prototype = {&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;append : &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;content){&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;添加内容&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-keyword&quot;&gt;this;&lt;br/&gt;},&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;show : &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;){&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;将元素显示&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-keyword&quot;&gt;this;&lt;br/&gt;}&lt;br/&gt;};&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var myjq = &lt;span class=&quot;hljs-keyword&quot;&gt;new MyJQ();&lt;br/&gt;myjq.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我是一块抹布&quot;).show();&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看完程序清单3-2之后，你就会恍然大悟，原来方法的内部返回了一个this，而这个this就是当前对象的引用；也就是说，&lt;code&gt;myjq.append(&quot;我是一块抹布&quot;).show();&lt;/code&gt;就相当于：&lt;code&gt;myjq.append(&quot;我是一块抹布&quot;);myjq.show();&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;理解了jQuery的链式调用，我们来模拟一下Java当中的链式调用（写作者做完运动后去睡觉）。&lt;/p&gt;
&lt;p&gt;程序清单3-3：Java的链式调用&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Writer {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Writer &lt;span class=&quot;hljs-title&quot;&gt;sleep&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;睡一觉&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;2&quot;&gt;return &lt;span class=&quot;hljs-keyword&quot; readability=&quot;4&quot;&gt;this;&lt;br/&gt;}&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Writer &lt;span class=&quot;hljs-title&quot;&gt;ml&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;做运动&quot;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-keyword&quot;&gt;this;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main&lt;span class=&quot;hljs-params&quot;&gt;(String[] args) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new Writer().ml().sleep();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h04java&quot;&gt;04、理想国中的Java垃圾回收&lt;/h3&gt;
&lt;p&gt;对象要想被正确使用，必须先被初始化，这是一切的开端；那么，当对象不再被使用后，它就需要被清理掉，要善始善终。假如你遇到一个面试官，他要“强行”问你关于Java垃圾回收的一些问题，你可以提前做好下面这些准备。&lt;/p&gt;
&lt;p&gt;Q：为什么要进行垃圾回收？&lt;br/&gt;A：如果不进行垃圾回收，内存迟早都会被消耗空。除非内存无限大，我们可以任性的分配而不回收，但是事实并非如此。所以，垃圾回收是必须的。&lt;/p&gt;
&lt;p&gt;Q：哪些内存需要回收？&lt;br/&gt;A：所谓“要回收的垃圾”无非就是那些不可能再被任何途径使用的对象。&lt;/p&gt;
&lt;p&gt;Q：Java是如何回收垃圾的？&lt;br/&gt;A：&lt;a href=&quot;https://www.cnblogs.com/andy-zcx/p/5522836.html&quot;&gt;深入理解 Java 垃圾回收机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过，在我的印象里，有一副爆笑的动态图令我印象深刻，它隐喻的是Java的垃圾回收机制。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1542873579747&amp;amp;di=75e0440e24561fee2c8ebe6e10b46952&amp;amp;imgtype=0&amp;amp;src=http://img.mp.itc.cn/upload/20170715/0ea67854bf144a4090ed9cacc68de907_th.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;【写在最后】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;喜欢就推荐分享，因为你的参与让我在写作的道路上不再感到孤单。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 22 Nov 2018 23:22:00 +0000</pubDate>
<dc:creator>沉默王二</dc:creator>
<og:description>有人说，你应该关注时事、财经，甚至流行的电影、电视剧，才有可能趁着热点写出爆文；有人说，你别再写“无聊”的技术文了，因为程序员的圈子真的很小，即便是像鸿祥那样的招牌大牛，文章是那么的干货，浏览量有多少</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qing-gee/p/10005401.html</dc:identifier>
</item>
<item>
<title>python 爬虫 入门 commit by commit -- commit2 - 一心一怿</title>
<link>http://www.cnblogs.com/ZXYloveFR/p/10004638.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ZXYloveFR/p/10004638.html</guid>
<description>&lt;p&gt;&lt;span data-slate-fragment=&quot;JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJTVDJTIyJUU2JUFGJThGJUU0JUI4JTgwJUU0JUI4JUFBY29tbWl0JUU5JTgzJUJEJUU2JTk4JUFGJUU3JUE4JThCJUU1JUJBJThGJUU1JTkxJTk4JUU3JTlBJTg0JUU1JUJGJTgzJUU5JTg1JUI4JUVGJUJDJThDJUU1JTkzJUE2JUU0JUI4JThEJUVGJUJDJThDJUU1JUJGJTgzJUU4JUI3JUFGJUU1JThFJTg2JUU3JUE4JThCJUU3JTlBJTg0JUU2JTlDJTgwJUU1JUE1JUJEJUU1JUIxJTk1JUU3JUE0JUJBJUUzJTgwJTgyJTVDJTIyJTIwLS0lMjBieSUyMCVFNiU4OCU5MSVFOCU4NyVBQSVFNSVCNyVCMSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE&quot;&gt;&quot;每一个commit都是程序员的心酸，哦不，心路历程的最好展示。&quot; -- by 我自己&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-slate-fragment=&quot;JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJTVDJTIyJUU2JUFGJThGJUU0JUI4JTgwJUU0JUI4JUFBY29tbWl0JUU5JTgzJUJEJUU2JTk4JUFGJUU3JUE4JThCJUU1JUJBJThGJUU1JTkxJTk4JUU3JTlBJTg0JUU1JUJGJTgzJUU5JTg1JUI4JUVGJUJDJThDJUU1JTkzJUE2JUU0JUI4JThEJUVGJUJDJThDJUU1JUJGJTgzJUU4JUI3JUFGJUU1JThFJTg2JUU3JUE4JThCJUU3JTlBJTg0JUU2JTlDJTgwJUU1JUE1JUJEJUU1JUIxJTk1JUU3JUE0JUJBJUUzJTgwJTgyJTVDJTIyJTIwLS0lMjBieSUyMCVFNiU4OCU5MSVFOCU4NyVBQSVFNSVCNyVCMSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE&quot;&gt;最近写好了一组文章，来这里，当然一如我以前一样，主要是宣传。但是，最近发现gitbook老是挂掉，除了宣传，我觉得，在这里全部贴一遍，这样就算是gitbook那边不稳定，至少这里还能看到。不过说实话，如果有兴趣的话，我还是推荐去gitbook那边看，因为博客园的结构，貌似不适合这种系列型的文章。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-slate-fragment=&quot;JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJTVDJTIyJUU2JUFGJThGJUU0JUI4JTgwJUU0JUI4JUFBY29tbWl0JUU5JTgzJUJEJUU2JTk4JUFGJUU3JUE4JThCJUU1JUJBJThGJUU1JTkxJTk4JUU3JTlBJTg0JUU1JUJGJTgzJUU5JTg1JUI4JUVGJUJDJThDJUU1JTkzJUE2JUU0JUI4JThEJUVGJUJDJThDJUU1JUJGJTgzJUU4JUI3JUFGJUU1JThFJTg2JUU3JUE4JThCJUU3JTlBJTg0JUU2JTlDJTgwJUU1JUE1JUJEJUU1JUIxJTk1JUU3JUE0JUJBJUUzJTgwJTgyJTVDJTIyJTIwLS0lMjBieSUyMCVFNiU4OCU5MSVFOCU4NyVBQSVFNSVCNyVCMSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE&quot;&gt;目前所有完结版本都已经可以在https://rogerzhu.gitbooks.io/python-commit-by-commit/content/ 看到，因为博客园一天只能贴一篇首页的文章，所以我可能需要一点时间把所有的都贴完。当然，你可以去gitbook上看已经完结的。而代码，我放在了&lt;a href=&quot;https://github.com/rogerzhu/relwarcDJ&quot; target=&quot;_blank&quot;&gt;https://github.com/rogerzhu/relwarcDJ&lt;/a&gt; ，里面有我完整的commit记录。有兴趣的话可以尽情star。 而且我觉得这里扯淡和准备篇的文字我就不贴了，有兴趣可以从上面的gitbook地址看到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-slate-fragment=&quot;JTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMmtpbmQlMjIlM0ElMjJibG9jayUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIydHlwZSUyMiUzQSUyMnBhcmFncmFwaCUyMiUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2luZCUyMiUzQSUyMnRleHQlMjIlMkMlMjJyYW5nZXMlMjIlM0ElNUIlN0IlMjJraW5kJTIyJTNBJTIycmFuZ2UlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyJTVDJTIyJUU2JUFGJThGJUU0JUI4JTgwJUU0JUI4JUFBY29tbWl0JUU5JTgzJUJEJUU2JTk4JUFGJUU3JUE4JThCJUU1JUJBJThGJUU1JTkxJTk4JUU3JTlBJTg0JUU1JUJGJTgzJUU5JTg1JUI4JUVGJUJDJThDJUU1JTkzJUE2JUU0JUI4JThEJUVGJUJDJThDJUU1JUJGJTgzJUU4JUI3JUFGJUU1JThFJTg2JUU3JUE4JThCJUU3JTlBJTg0JUU2JTlDJTgwJUU1JUE1JUJEJUU1JUIxJTk1JUU3JUE0JUJBJUUzJTgwJTgyJTVDJTIyJTIwLS0lMjBieSUyMCVFNiU4OCU5MSVFOCU4NyVBQSVFNSVCNyVCMSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE&quot;&gt;废话少说，搬运工作开始：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;“程序员是最不会伪装但是又是最会伪装的群体”--by 我自己&lt;/p&gt;
&lt;p&gt;在运行了第一个commit的程序我估计也就三分钟之内，你会觉得索然无味。图书的标题和链接到底有什么用呢？当然，我也有同样的疑问，所以，我决定在第二个commit中爬取这个首页我觉得我最关心的信息，那就是钱——图书的价格。&lt;/p&gt;
&lt;p&gt;对于这个commit，当你输入如下命令开始运行时：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231444983-1786514190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你应该能看到如下的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231451866-387405612.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有了第一个commit中的三板斧，我感觉我已经信心与感觉并存，动力与技术齐飞了。于是我熟练的使用了选取工具，选到了价格的方框。火狐的工具给我显示了，价格是在class名为p-price的div之内的。照葫芦画瓢一般的，使用BeautifulSoup的find，直接找到每个li中的这个div，熟练的保存好文件，开始用python运行。现实狠狠的给我了一个耳光，无论我怎么输出，这个价格都是拿不到的。&lt;/p&gt;
&lt;p&gt;为什么？我对着屏幕思考了3分钟，毕竟如果思考再长的时间的话那只能说明我的拖延症犯了。我重新回到我需要的页面上，刷新了下页面，会看到价格信息会比其他的信息后出来，我又试了几次，这不是偶然，每次都不是同时出来的。这个时候凭借着我对web编程的一点粗浅的了解，我已经知道了，至少价格这个信息不是和html信息一起返回的。用在任何软件语言里都有的概念，这里一点存在有回调——callback。其实我在初学c++的时候对于这个概念不是很理解，但是如果你是第一次听到这个概念，在这里就特别形象，在某一件事情做完之后，又回头调用了一个什么接口或者文件等等来取得结果。&lt;/p&gt;
&lt;p&gt;到了这一步，就需要一点大胆猜测小心求证的哲学了，当然，还有得知道一点webapi的基本概念。其实简单的说，就是调用一个url来获得返回的结果，这个url中可以使用&amp;amp;传入参数，而结果是一个文件的方式传到客户端。而继续前面所说的赠人玫瑰，手有余香的逻辑，你要爬取的这个网站的程序员们也要考虑维护问题，加上业界对于某些反复会出现的东西一定会有一套约定俗成的模式。说了这么多，到底想表达什么？既然我说webapi一般都是以文件的方式返回结果，那么怎么看到这些从服务器返回的文件呢？很完美的事，这件事，又可以使用F12来解决。&lt;/p&gt;
&lt;p&gt;当你按下F12的时候会有很多tab，其中有一个叫network，这个下面会记录客户端与服务器端交互的所有内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231505091-740674390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;既然是所有，那么确实有点多，而且在大多数情况下，他会在不停的滚动，让人很难操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231554574-944863458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候只要你稍微网上看一点，就会发现，这些工具一定都会带有搜索功能的，毕竟，任何没有搜索功能的列表都是耍流氓。那么这个时候就到了大胆发挥猜想的时候了，按照我前面的说的，写程序的人为了维护一定会有某种比较共通的模式，既然价格是靠回调取出来的，那么不妨试试callback作为关键词？或者这个是价格，用price作为关键词？我选择用callback，没啥原因，只是因为我脑海里第一反应是想用这个。于是我得到如下的结果，但是很明显，一个网站上不可能只有一个callback。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231629333-48969229.png&quot; alt=&quot;&quot; width=&quot;854&quot; height=&quot;305&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是这已经少多了，最差的结果一个一个暴力寻找，找什么呢？找返回值，也就是右边有的response的tab，找什么返回值？因为每个callback当然都有返回值。当然找价格的数字了，既然你都能看到价格是多少钱，那么response中含有这个价格当然就是你需要的webapi的地址啦。而很明显，所有的callback返回的都是json字符串，如果你实在没有听过json，也没有关系，最简单的你可以把他理解成是一个带有格式的文本，这个文本的格式就是以逗号隔开的key，value字符串。于是我就这样暴力寻找，还真知道一个respons里面带有p:正确价格的字符串。这个时候可以再回头自己验证一下，怎么验证？我的方法就是看看这个请求的url，验证的方法还是本着良心程序员一定会把接口设计的另外一个程序员一看就懂的模式，吹的大一点，代码即文档。如果你看下这个请求的url，很明显，有个关键词告诉你，啊！这就是你要找的，那就是price,你可以在request URL中看到。你还可以再大胆的进一步，在这条记录上右键，所有的F12工具都有copy url的功能，拷贝下这个地址，放在浏览器上，回车，你会发现，你可以看到一条返回的json字符串。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231638133-1593883837.png&quot; alt=&quot;&quot; width=&quot;928&quot; height=&quot;147&quot;/&gt;&lt;/p&gt;
&lt;p&gt;仔细看看这些分会的字符串，虽然都是缩写，但是大概都能猜到是什么意思，比如p后面是价格，id后面是标识，至于op和m的意思，我猜是什么会员价和原价?不过没关系，这里面已经有了我们想要的信息了。那么想拿到价格的方法也很简单了，按照前面了的路子，只要访问这个网址然后拿到输出传给BeautifulSoup对象，就能完成解析了。但是，我们目前的想法是以一个书目，也就是一个list为一个Item，这个json字符串似乎一次性传回了很多个条目的价格。当然，可以通过字符串处理然后选取合适的容器来取出每个图书Item的价格。但这和我们的程序设计逻辑不搭，这东西就和写文章一样，行文逻辑不一致，会让读的人感到非常困难。放到代码上就是难以维护，那么，有什么办法可以一条一条的取出价格就好了。&lt;/p&gt;
&lt;p&gt;这个时候，不妨回头看看获取到这个json返回值的url，因为webapi，参数就在url上，真正的谜底就在谜面上。你想想，我们想获取一个条目的价格，那么如果你写程序，一定是把这个条目的标识传进去，然后获取到价格。而我们现在使用的这个url有点长。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/159614/201811/159614-20181122231711394-1580580678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


















</description>
<pubDate>Thu, 22 Nov 2018 22:45:00 +0000</pubDate>
<dc:creator>一心一怿</dc:creator>
<og:description>&quot;每一个commit都是程序员的心酸，哦不，心路历程的最好展示。&quot; -- by 我自己 最近写好了一组文章，来这里，当然一如我以前一样，主要是宣传。但是，最近发现gitbook老是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ZXYloveFR/p/10004638.html</dc:identifier>
</item>
<item>
<title>毕业这两年 - OKevin</title>
<link>http://www.cnblogs.com/yulinfeng/p/10005291.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yulinfeng/p/10005291.html</guid>
<description>&lt;p&gt;        一直以来都希望把自己毕业这两年的经历分享出来，从毕业那年因为考研没有参加15年秋招，到考研失败面临16年春招，再到春招好不容易找到一个看起来不错的公司，结果发现不尽人意努力了一年多跳槽到大厂所经历的起起伏伏。&lt;br/&gt;        我的大学是一个普普通通的“双非”普通二本院校（尽管在目前当年所在的专业已经升为一本招生），非985211，没有任何名校名校加持。我很清楚这样一所学校，并不是某些特殊的邮电类“双非”大学，所接触到的视野以及所学的知识、思想远不及“好”的大学，所以当时决定考研放弃了秋招的黄金时期，连简历都没有投出去一封，我很清楚我考研的动机并不是自己找不到工作，并不是自己需要一个更高的文凭来美化我的学历背景，我需要的是能学习到更多，视野更加广阔，最起码参加学校组织的宣讲会时并不是培训班打广告，而是真正的大咖，当然这个经历可以再写一篇“我的大学四年”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;春招&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        我相信大家都知道秋招和春招的区别，16年的春招稍知名的公司基本已不再招聘16年毕业的本科生，那时候的招聘大厂基本已招满剩下的也不过是一些在秋招没有招到人的小公司（这当然不绝对），况且还要面临考验失败的、考公务员失败的，另外还得准备毕业论文。&lt;br/&gt;我印象特别深的是我去参加了一加公司的招聘在期望薪资上写了5.5k，面试官对我说这个价有点高，我问他，有没有可能拿到，他说有可能但是目前还没有人拿到。在后来我才知道一所985的学校在成都一个班的平均薪资大约是7-8k左右，而在我们学校能拿到5.5k基本上就可以是比较完满了。&lt;br/&gt;        春招的时候大大小小的公司面了不少，从我的学校跑到其他学校也参加过双选会，总之都没有满意的公司，其实我那个时候对薪资并没有一个很明确的概念，我甚至对我自己的要求——找一个好的公司，也并不知道到底是“好”在哪里，就这么一直在找，一直没找到合适的。同样印象深刻的去了一所985学校的双选会，当时TCL公司的位置上排着长队，收简历的挨个问现在有没有offer，在校排名等等，他手里的简历大约已有5cm厚。&lt;br/&gt;        那时候的情绪几近崩溃，可以说已经崩溃。每次面试回来都会回忆问了什么问题，把《Thinking in Java》拿出来又再敲了代码，反复琢磨有关多线程、IO等面试常问的一些问题。&lt;br/&gt;最后，自己决定参加最后一家公司的面试，如果再面不上，进随便去一个吧。至于过程的曲折，也许大概也能写一篇“我的校招之旅”，只是在当时我和我的朋友都在等公司的通知，那天我们在一个写满诗公园，从秦汉到近代的诗歌读了一遍，徒步走了很长的路。&lt;br/&gt;当然最后，拿到了offer，薪资达到了985毕业的平均水平。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一年&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        满怀着期待参加了公司的新人培训、新人拓展等等一系列的活动，面对“大公司”（第一家公司实际上从规模和业界知名度上不低）的一切好“福利”，都显得那么的自豪，公司节日的定制大礼包也总是会晒到朋友圈。&lt;br/&gt;        那一年我所做过3个月的国际化，所谓的国际化，是把一些中文字符串替换成key，然后填充中英文，还需要调整页面，那一度让我怀疑我这是程序员吗，我发现了我和同期毕业的同学慢慢的在拉开差距。其他人在用git版本控制，在用maven做项目管理，我们却仍然使用着复制粘贴到WEB-INF的方式在引用jar包。其他人在快速迭代不断更新上线新版本的时候，我们却仍然在和测试扯皮这个到底是不是bug。其他人改完一个bug就能快速让测试回归的时候，我们却需要等待一周甚至两周才能让测试重新部署一个版本。哦，我们的部署方式并不是jenkins，我们的打包方式很特别，需要在公司指定的一个部门去编译，然后从一个指定的ftp地址取出来，再从我们的内网环境，通过一个指定人传输到外网让测试在Linux机器上安装。这让我实在受不了，受不了的并不是效率低下的问题，而是对未来的职业发展感到一丝“惶恐”和不安。&lt;br/&gt;        我需要的是技术和竞争力，但这家公司的主营业务却是一家做交换机、路由器的通信公司，我虽然在互联网部门从事Java开发，但由于因为是通信公司的基因，以及通信相关的业务，并没有互联网公司所为的高并发等一切牛逼轰轰的业务场景。我甚至一度非常后悔来这里，有一种被“欺骗”的感觉，差不多也就是入职几个月开始重新思考自己的职业规划，首先以我目前的工作经验并不会为我以后带来更高的溢价能力，其次以我学校的背景也并不能为我以后带来溢价能力。这让我陷入了一个两难的境地，要么选择尽量早点走，但面临的是刚毕业就跳槽会有不稳定以及以上两点的问题；要么选择待2-3年一个合适的时机跳槽，但以目前所学所接触的知识、技术，这个经验实际上仅仅是工作年限的增加（当然并不是学不到东西），也许反而陷入一种待的越久越走不掉的困境。当即决定我需要“包装”我自己，当然是用知识来“包装”，第一家公司基本是996，每天到家差不多是十点，但仍然决定每天坚持看书，写博客，就这样，我真的坚持了下来了，哪怕过年过节我仍然会写博客会学习，目的就是为了用知识来“包装”我自己。&lt;br/&gt;        当然，我并不赞同在这里学不到东西，我也并不是瞧不起不愿意做很“低级”的开发工作。而是我对未来的职业发展不抱任何希望。所以在职期间，我和同学一起讨论一个技术问题到凌晨3点，我在博客园写博客，和博友们留言、邮件交流，学习其他的互联网常用常见的技术，并选择了尽量早点走的决定，而不是工作2-3年再作打算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳槽&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        工作了1年多，慢慢地开始尝试投递简历。&lt;br/&gt;        当时所考虑到的问题确实出现了，要么觉得我工作经验太少，要么觉得我的学历背景不好。投简历屡屡受挫，面试也屡屡受挫。我和一起进公司的同事有着明显的对比，他在招聘软件更新了简历，直接收到了很多大厂的面试邀约，他毕业自国内知名的985大学计算机学院，我投大厂基本上没有任何回应，主动来邀约的全是外包公司，无一例外。&lt;br/&gt;随着面试进行到白热化，我已发现可投简历的公司所剩无几，招聘软件上仍然没有人回应我，回应我的也仍然是各种各样的外包公司。前前后后一共改了十几版简历，不断地修改措辞，修改版式。资料我打印了有好几厘米厚，每个电话面试我都开了自动录音，在电面过后我会重新再听一遍看看自己出现的问题在哪里，是我紧张了该回答上的没回答上，还是这就是自己的硬伤本身就没有遭遇过这种业务场景，还是自己的思路出现了问题。&lt;br/&gt;        一年多的学习给我带来了很大的正面效应，一方面本身是知识和技术的积累，另一方面也有大厂看到我的博客联系我要简历的。我仍然和我的朋友谈及博客不光是对自己所学知识的积累和总结，也是让更多的人了解你，你需要付出的只是时间而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再出发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        前几天写了《再出发》，是因为如愿以偿跳到了自己非常满意的一家大厂后再无更新博客，学习也少之更少。原因也思考了多方面的，再出发的原因不再追求“包装”自己跳槽到更好更大的公司，更多的希望能习惯一直优秀下去。&lt;/p&gt;

</description>
<pubDate>Thu, 22 Nov 2018 17:26:00 +0000</pubDate>
<dc:creator>OKevin</dc:creator>
<og:description>一直以来都希望把自己毕业这两年的经历分享出来，从毕业那年因为考研没有参加15年秋招，到考研失败面临16年春招，再到春招好不容易找到一个看起来不错的公司，结果发现不尽人意努力了一年多跳槽到大厂所经历的起</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yulinfeng/p/10005291.html</dc:identifier>
</item>
<item>
<title>django+mysql的使用 - 初一丶</title>
<link>http://www.cnblogs.com/wyl-0120/p/10005289.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyl-0120/p/10005289.html</guid>
<description>&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Django中每一个模型model都对应于数据库中的一张表，每个模型中的字段都对应于数据库表的列。方便的是，django可以自动生成这些create table, alter table, drop table的操作。其次Django为咱们也提供了后台管理模块(Django-Admin),主要功能是通过后台管理来实现客户端的功能，可以对数据进行增删改查。也可以通过该功能进行二次开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hdjangomysql&quot;&gt;Django中的mysql配置&lt;/h2&gt;
&lt;p&gt;在上期内容，我们了解了settings.py配置信息的内容，其中DATABASES是用来管理数据库配置的，默认是sqlite3数据库，所以我们需要将其修改成mysql数据库。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot;/&gt;
&lt;/pre&gt;
&lt;p&gt;字段名称代码中都添加了相应说明，ENGINE为MYSQL数据库引擎，这个当然不会凭空出现，需要我们去安装&lt;/p&gt;
&lt;h5 id=&quot;hpymysql&quot;&gt;安装pymysql&lt;/h5&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;pip3 install pymysql&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;项目中配置&lt;/p&gt;
&lt;p&gt;在最开始的项目包下的&lt;strong&gt;init&lt;/strong&gt;.py中进行如下配置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;setting中的配置默认为sqlite3数据库 当需要修改成MySql时&lt;br/&gt;并且在setting.py的同级目录的__init__.py 加入如下配置&lt;br/&gt;否则会报错： Error loading MySQLdb module.&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import pymysql&lt;br/&gt;pymysql.install_as_MySQLdb()&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果mysql配置信息错误(用户名、密码、host等)控制台会报如下异常&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs vbscript&quot;&gt;pymysql.&lt;span class=&quot;hljs-built_in&quot;&gt;err.OperationalError: (&lt;span class=&quot;hljs-number&quot;&gt;1045, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Access denied for user 'ROOT'@'localhost' (using password: YES)&quot;)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在app文件的models.py文件中 创建Student(学生信息)和StudentUnion(社团信息)&lt;/p&gt;
&lt;p&gt;models.py：数据模块，用于数据库设计&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;创建学生信息表模型&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;5&quot;&gt;from django.db &lt;span class=&quot;hljs-keyword&quot; readability=&quot;10&quot;&gt;import models&lt;p&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;该类是用来生成数据库的 必须要继承models.Model&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Student&lt;span class=&quot;hljs-params&quot;&gt;(models.Model):&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;创建如下几个表的字段&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;学生社团信息表&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;studentUnion&lt;span class=&quot;hljs-params&quot;&gt;(models.Model):&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Meta:&lt;br/&gt;db_table = &lt;span class=&quot;hljs-string&quot;&gt;'student_union'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;OneToOneField： 一对一&lt;br/&gt;ForeignKey: 一对多&lt;br/&gt;ManyToManyField： 多对多(没有ondelete 属性)&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在利用models.py文件生成数据库表之前，我们需要手动的先创建数据库：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;mysql&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;create &lt;span class=&quot;hljs-selector-tag&quot;&gt;database &lt;span class=&quot;hljs-selector-tag&quot;&gt;django_mysql;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;Query &lt;span class=&quot;hljs-selector-tag&quot;&gt;OK, 1 &lt;span class=&quot;hljs-selector-tag&quot;&gt;row &lt;span class=&quot;hljs-selector-tag&quot;&gt;affected (0&lt;span class=&quot;hljs-selector-class&quot;&gt;.01 &lt;span class=&quot;hljs-selector-tag&quot;&gt;sec)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建完django_msql库之后，我们在终端执行如下命令，他的作用是将models文件生成一个迁移文件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;python3 &lt;span class=&quot;hljs-selector-tag&quot;&gt;manage&lt;span class=&quot;hljs-selector-class&quot;&gt;.py &lt;span class=&quot;hljs-selector-tag&quot;&gt;makemigrations&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img title=&quot;在这里插入图片描述&quot; src=&quot;https://img-blog.csdnimg.cn/20181123011103571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5OTYyNg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;在这里插入图片描述&lt;br/&gt;迁移文件生成完毕，执行&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;python3 &lt;span class=&quot;hljs-selector-tag&quot;&gt;manage&lt;span class=&quot;hljs-selector-class&quot;&gt;.py &lt;span class=&quot;hljs-selector-tag&quot;&gt;migrate&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会将迁移文件的内容作用到数据库中，生成表或者修改字段属性&lt;/p&gt;
&lt;p&gt;控制台输出如下，则表示执行成功&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;(django_venv) xxxxxdeAir:djangoDemo xxxxx$ python3 manage.py migrate&lt;br/&gt;Operations to perform:&lt;br/&gt;Apply all migrations: admin, app_demo, auth, contenttypes, sessions&lt;br/&gt;Running migrations:&lt;br/&gt;Applying contenttypes&lt;span class=&quot;hljs-number&quot;&gt;.0001_initial... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0001_initial... OK&lt;br/&gt;Applying admin&lt;span class=&quot;hljs-number&quot;&gt;.0001_initial... OK&lt;br/&gt;Applying admin&lt;span class=&quot;hljs-number&quot;&gt;.0002_logentry_remove_auto_add... OK&lt;br/&gt;Applying admin&lt;span class=&quot;hljs-number&quot;&gt;.0003_logentry_add_action_flag_choices... OK&lt;br/&gt;Applying app_demo&lt;span class=&quot;hljs-number&quot;&gt;.0001_initial... OK&lt;br/&gt;Applying contenttypes&lt;span class=&quot;hljs-number&quot;&gt;.0002_remove_content_type_name... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0002_alter_permission_name_max_length... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0003_alter_user_email_max_length... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0004_alter_user_username_opts... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0005_alter_user_last_login_null... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0006_require_contenttypes_0002... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0007_alter_validators_add_error_messages... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0008_alter_user_username_max_length... OK&lt;br/&gt;Applying auth&lt;span class=&quot;hljs-number&quot;&gt;.0009_alter_user_last_name_max_length... OK&lt;br/&gt;Applying sessions&lt;span class=&quot;hljs-number&quot;&gt;.0001_initial... OK&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看我们的django_mysql数据库，其中student和student_union就是用models文件生成的表，其他的表是项目自动生成的，暂时可以先不用管&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs ruby&quot; readability=&quot;5&quot;&gt;mysql&amp;gt; use django_mysql&lt;br/&gt;Database changed&lt;p&gt;mysql&amp;gt; show tables;&lt;br/&gt;+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| Tables_in_django_mysql     |&lt;br/&gt;+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| auth_group                 |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| auth_group_permissions     |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| auth_permission            |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| auth_user                  |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| auth_user_groups           |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| auth_user_user_permissions |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| django_admin_log           |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| django_content_type        |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| django_migrations          |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| django_session             |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| student                    |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| student_union              |&lt;br/&gt;+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;12 rows &lt;span class=&quot;hljs-keyword&quot;&gt;in set (&lt;span class=&quot;hljs-number&quot;&gt;0.&lt;span class=&quot;hljs-number&quot;&gt;00 sec)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;h&quot;&gt;表结构&lt;/h5&gt;
&lt;p&gt;desc查看表结构&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;mysql&amp;gt; desc student;&lt;br/&gt;+------------+-------------+------+-----+---------+-------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| Field      | Type        &lt;span class=&quot;hljs-params&quot;&gt;| Null | Key &lt;span class=&quot;hljs-params&quot;&gt;| Default | Extra &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;+------------+-------------+------+-----+---------+-------+&lt;br/&gt;| studentNum &lt;span class=&quot;hljs-params&quot;&gt;| varchar(15) | NO   &lt;span class=&quot;hljs-params&quot;&gt;| PRI | NULL    &lt;span class=&quot;hljs-params&quot;&gt;|       |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| name       | varchar(&lt;span class=&quot;hljs-number&quot;&gt;20) &lt;span class=&quot;hljs-params&quot;&gt;| NO   |     &lt;span class=&quot;hljs-params&quot;&gt;| NULL    |       &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;| age        &lt;span class=&quot;hljs-params&quot;&gt;| int(11)     | NO   &lt;span class=&quot;hljs-params&quot;&gt;|     | NULL    &lt;span class=&quot;hljs-params&quot;&gt;|       |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| sex        | tinyint(&lt;span class=&quot;hljs-number&quot;&gt;1)  &lt;span class=&quot;hljs-params&quot;&gt;| NO   |     &lt;span class=&quot;hljs-params&quot;&gt;| NULL    |       &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;| mobile     &lt;span class=&quot;hljs-params&quot;&gt;| varchar(15) | NO   &lt;span class=&quot;hljs-params&quot;&gt;| UNI | NULL    &lt;span class=&quot;hljs-params&quot;&gt;|       |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| createTime | datetime(&lt;span class=&quot;hljs-number&quot;&gt;6) &lt;span class=&quot;hljs-params&quot;&gt;| NO   |     &lt;span class=&quot;hljs-params&quot;&gt;| NULL    |       &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;| modifyTime &lt;span class=&quot;hljs-params&quot;&gt;| datetime(6) | NO   &lt;span class=&quot;hljs-params&quot;&gt;|     | NULL    &lt;span class=&quot;hljs-params&quot;&gt;|       |&lt;br/&gt;+------------+-------------+------+-----+---------+-------+&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7 rows &lt;span class=&quot;hljs-keyword&quot;&gt;in set (&lt;span class=&quot;hljs-number&quot;&gt;0.&lt;span class=&quot;hljs-number&quot;&gt;00 sec)&lt;br/&gt;mysql&amp;gt; desc student_union;&lt;br/&gt;+--------------+-------------+------+-----+---------+-------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| Field        | Type        &lt;span class=&quot;hljs-params&quot;&gt;| Null | Key &lt;span class=&quot;hljs-params&quot;&gt;| Default | Extra &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;+--------------+-------------+------+-----+---------+-------+&lt;br/&gt;| id           &lt;span class=&quot;hljs-params&quot;&gt;| int(11)     | NO   &lt;span class=&quot;hljs-params&quot;&gt;| PRI | NULL    &lt;span class=&quot;hljs-params&quot;&gt;|       |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| unionName    | varchar(&lt;span class=&quot;hljs-number&quot;&gt;20) &lt;span class=&quot;hljs-params&quot;&gt;| NO   |     &lt;span class=&quot;hljs-params&quot;&gt;| NULL    |       &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;| unionNum     &lt;span class=&quot;hljs-params&quot;&gt;| int(11)     | NO   &lt;span class=&quot;hljs-params&quot;&gt;|     | NULL    &lt;span class=&quot;hljs-params&quot;&gt;|       |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| unionRoot_id | varchar(&lt;span class=&quot;hljs-number&quot;&gt;15) &lt;span class=&quot;hljs-params&quot;&gt;| NO   | UNI &lt;span class=&quot;hljs-params&quot;&gt;| NULL    |       &lt;span class=&quot;hljs-params&quot;&gt;|&lt;br/&gt;+--------------+-------------+------+-----+---------+-------+&lt;br/&gt;4 rows &lt;span class=&quot;hljs-keyword&quot;&gt;in set (0.00 sec)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此Django利用models文件创建数据库表的功能已经完毕。接下来用代码的方式演示一下Django如何进行增删改查&lt;/p&gt;
&lt;h3 id=&quot;h-1&quot;&gt;增加数据&lt;/h3&gt;
&lt;p&gt;为了提供一些测试数据，这里用for循环批量的加了几条简单的数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from app_demo.models &lt;span class=&quot;hljs-keyword&quot;&gt;import Student&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import random&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;插入测试数据&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;insert&lt;span class=&quot;hljs-params&quot;&gt;(request):&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;urls.py 文件中 urlpatterns中配置&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;url(&lt;span class=&quot;hljs-string&quot;&gt;r'^insert/', views.insert)&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器中访问http://localhost:8000/insert/ 浏览器显示‘数据插入完毕’&lt;/p&gt;
&lt;p&gt;查询数据库，发现有5天数据，也就是插入成功&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;mysql&amp;gt; select * from student;&lt;br/&gt;+------------+------+-----+-----+------------+----------------------------+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| studentNum | name &lt;span class=&quot;hljs-params&quot;&gt;| age | sex &lt;span class=&quot;hljs-params&quot;&gt;| mobile     | createTime                 &lt;span class=&quot;hljs-params&quot;&gt;| modifyTime                 |&lt;br/&gt;+------------+------+-----+-----+------------+----------------------------+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| 1352687635 | tom2 &lt;span class=&quot;hljs-params&quot;&gt;|  15 |   &lt;span class=&quot;hljs-number&quot;&gt;1 &lt;span class=&quot;hljs-params&quot;&gt;| 941807449  | &lt;span class=&quot;hljs-number&quot;&gt;2018-&lt;span class=&quot;hljs-number&quot;&gt;11-08 09&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40.226856 &lt;span class=&quot;hljs-params&quot;&gt;| 2018-11-08 09:58:40.227002 |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| 5554311867 | tom&lt;span class=&quot;hljs-number&quot;&gt;0 &lt;span class=&quot;hljs-params&quot;&gt;|  15 |   &lt;span class=&quot;hljs-number&quot;&gt;0 &lt;span class=&quot;hljs-params&quot;&gt;| 1598619027 | &lt;span class=&quot;hljs-number&quot;&gt;2018-&lt;span class=&quot;hljs-number&quot;&gt;11-08 09&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40.203807 &lt;span class=&quot;hljs-params&quot;&gt;| 2018-11-08 09:58:40.203960 |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| 7302510986 | tom4 &lt;span class=&quot;hljs-params&quot;&gt;|  15 |   &lt;span class=&quot;hljs-number&quot;&gt;0 &lt;span class=&quot;hljs-params&quot;&gt;| 9602601619 | &lt;span class=&quot;hljs-number&quot;&gt;2018-&lt;span class=&quot;hljs-number&quot;&gt;11-08 09&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40.251479 &lt;span class=&quot;hljs-params&quot;&gt;| 2018-11-08 09:58:40.251682 |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| 847849420  | tom3 &lt;span class=&quot;hljs-params&quot;&gt;|  15 |   &lt;span class=&quot;hljs-number&quot;&gt;0 &lt;span class=&quot;hljs-params&quot;&gt;| 195276039  | &lt;span class=&quot;hljs-number&quot;&gt;2018-&lt;span class=&quot;hljs-number&quot;&gt;11-08 09&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40.238601 &lt;span class=&quot;hljs-params&quot;&gt;| 2018-11-08 09:58:40.238928 |&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| 9962892430 | tom1 &lt;span class=&quot;hljs-params&quot;&gt;|  15 |   &lt;span class=&quot;hljs-number&quot;&gt;0 &lt;span class=&quot;hljs-params&quot;&gt;| 3265013828 | &lt;span class=&quot;hljs-number&quot;&gt;2018-&lt;span class=&quot;hljs-number&quot;&gt;11-08 09&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40.215488 &lt;span class=&quot;hljs-params&quot;&gt;| 2018-11-08 09:58:40.216106 |&lt;br/&gt;+------------+------+-----+-----+------------+----------------------------+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5 rows &lt;span class=&quot;hljs-keyword&quot;&gt;in set (&lt;span class=&quot;hljs-number&quot;&gt;0.&lt;span class=&quot;hljs-number&quot;&gt;00 sec)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-2&quot;&gt;查询数据&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;查询&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;find&lt;span class=&quot;hljs-params&quot;&gt;(request):&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置urls，浏览器访问localhost:8000/find/&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;在这里插入图片描述&quot; src=&quot;https://img-blog.csdnimg.cn/20181123011329972.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;在这里插入图片描述&lt;/p&gt;
&lt;h3 id=&quot;h-3&quot;&gt;修改数据&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;修改&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;modify&lt;span class=&quot;hljs-params&quot;&gt;(request, studentNum):&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;setting文件中的配置如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;url(&lt;span class=&quot;hljs-string&quot;&gt;r'^modify/(?P&amp;lt;studentNum&amp;gt;\d+)', views.modify),&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改学号847849420的name为jack&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;在这里插入图片描述&quot; src=&quot;https://img-blog.csdnimg.cn/20181123011436573.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;在这里插入图片描述&lt;br/&gt;再次查询mysql数据库，发现name已经被更新成了jack&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;mysql&amp;gt; select * from student where studentNum=&lt;span class=&quot;hljs-string&quot;&gt;'847849420';&lt;br/&gt;+------------+------+-----+-----+-----------+----------------------------+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| studentNum | name &lt;span class=&quot;hljs-params&quot;&gt;| age | sex &lt;span class=&quot;hljs-params&quot;&gt;| mobile    | createTime                 &lt;span class=&quot;hljs-params&quot;&gt;| modifyTime                 |&lt;br/&gt;+------------+------+-----+-----+-----------+----------------------------+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-params&quot;&gt;| 847849420  | jack &lt;span class=&quot;hljs-params&quot;&gt;|  15 |   &lt;span class=&quot;hljs-number&quot;&gt;0 &lt;span class=&quot;hljs-params&quot;&gt;| 195276039 | &lt;span class=&quot;hljs-number&quot;&gt;2018-&lt;span class=&quot;hljs-number&quot;&gt;11-08 09&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;58&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40.238601 &lt;span class=&quot;hljs-params&quot;&gt;| 2018-11-08 10:22:46.403147 |&lt;br/&gt;+------------+------+-----+-----+-----------+----------------------------+----------------------------+&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1 row &lt;span class=&quot;hljs-keyword&quot;&gt;in set (&lt;span class=&quot;hljs-number&quot;&gt;0.&lt;span class=&quot;hljs-number&quot;&gt;00 sec)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-4&quot;&gt;删除数据&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;删除&lt;br/&gt;&quot;&quot;&quot;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def &lt;span class=&quot;hljs-title&quot;&gt;delete&lt;span class=&quot;hljs-params&quot;&gt;(request, studentNum):&lt;br/&gt;student = Student.objects.get(studentNum=studentNum)&lt;br/&gt;student.delete()&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return HttpResponse(&lt;span class=&quot;hljs-string&quot;&gt;'删除成功.')&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;settings.py中urlpatterns的配置如下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;url(&lt;span class=&quot;hljs-string&quot;&gt;r'^delete/(?P&amp;lt;studentNum&amp;gt;.+)', views.delete)&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;.+ 表示匹配多个字符（不包括换行等字符）&lt;/p&gt;
&lt;p&gt;浏览器请求该视图&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;在这里插入图片描述&quot; src=&quot;https://img-blog.csdnimg.cn/20181123011524497.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;在这里插入图片描述&lt;br/&gt;查询数据库,发现该数据已经被删除&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;hljs vbnet&quot;&gt;mysql&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;select * &lt;span class=&quot;hljs-keyword&quot;&gt;from student &lt;span class=&quot;hljs-keyword&quot;&gt;where studentNum=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;关注公众号「程序员共成长」(id: finishbug)。给新加入的小伙伴准备了丰厚的见面礼，包括但不限于：Python、Java、Linux、大数据、人工智能、前端等21个技术方向，后台回复&quot;礼包&quot;即可领取。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 22 Nov 2018 17:19:00 +0000</pubDate>
<dc:creator>初一丶</dc:creator>
<og:description>Django中每一个模型model都对应于数据库中的一张表，每个模型中的字段都对应于数据库表的列。方便的是，django可以自动生成这些create table, alter table, drop</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyl-0120/p/10005289.html</dc:identifier>
</item>
<item>
<title>Linux入门基础介绍 - MrChengs</title>
<link>http://www.cnblogs.com/Mrchengs/p/10005261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mrchengs/p/10005261.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;概述:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. linux是一个开源、免费的操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多企业级的项目        都会部署到Linux/unix系统上。&lt;/p&gt;
&lt;p&gt;2. 常见的操作系统(win7、IOS、Android、Mac）&lt;/p&gt;
&lt;p&gt;3.创始人 -linux 林纳斯  &lt;/p&gt;
&lt;p&gt;4.主要发行版本&lt;/p&gt;
&lt;p&gt;    Ubuntu(乌班图)、RedHat(红帽)、CentOS、Debain[蝶变]、Fedora、SuSE、OpenSUSE&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123003736859-1785389647.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;

&lt;p&gt; Linux和Windows比较&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123003808451-456456085.png&quot; alt=&quot;&quot; width=&quot;634&quot; height=&quot;306&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; VM和Linux系统安装&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.安装VM和Centos&lt;/p&gt;
&lt;p&gt;   学习Linux需要一个环境，需要创建一个虚拟机，然后在虚拟机上安装一个Centos系统来学习&lt;/p&gt;
&lt;p&gt;   1.先安装Virtual machine , vm12&lt;/p&gt;
&lt;p&gt;   2.在进行安装Linux（Centos）&lt;/p&gt;
&lt;p&gt;   3.原理示意图&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123003835563-340316275.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;2.安装vm和CentosCentos下载地址:CentOS下载地址：&lt;/p&gt;



&lt;p&gt;3.Vm的安装&lt;/p&gt;
&lt;p&gt;  去BIOS里修改设置开启虚拟化设备支持（f2, f1&lt;/p&gt;
&lt;p&gt;不同系列的电脑的情况可能不一致&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123003856705-1072172908.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;4.CentOS安装的&lt;/p&gt;
&lt;p&gt;具体的安装可以参考网上其他博主的教程即可&lt;/p&gt;
&lt;p&gt;下图说的是虚拟机的三种网络形式：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123003932728-123346914.png&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;199&quot;/&gt; &lt;/p&gt;

&lt;p&gt;5.安装后的配置&lt;/p&gt;
&lt;p&gt;    1.终端的使用，鼠标右击，即可打开终端&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123004130112-1048683159.png&quot; alt=&quot;&quot; width=&quot;453&quot; height=&quot;326&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  2.配置网络&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123004146922-2052661990.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;312&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;安装vmtools&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以直接粘贴复制命令在windows和centos系统之间&lt;/p&gt;
&lt;p&gt;可以设置window和centos的共享问价夹&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vmtools安装和使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装vmtools的步骤:&lt;/p&gt;
&lt;p&gt;1. 进入centos&lt;/p&gt;
&lt;p&gt;2. 点击vm菜单的-&amp;gt;install vmware tools&lt;/p&gt;
&lt;p&gt;3. centos会出现一个vm的安装包&lt;/p&gt;
&lt;p&gt;4. 点击右键解压, 得到一个安装文件&lt;/p&gt;
&lt;p&gt;5. 进入该vm解压的目录 ，该文件在 /root/桌面/vmware-tools-distrib/下&lt;/p&gt;
&lt;p&gt;6. 安装 ./vmware-install.pl&lt;/p&gt;
&lt;p&gt;7. 全部使用默认设置即可&lt;/p&gt;
&lt;p&gt;8. 需要reboot重新启动即可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设置共享文件夹：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1) 为了方便，可以设置一个共享文件夹，比如d:/share&lt;/p&gt;
&lt;p&gt;2) windows 和 contos 就可以共享文件了，&lt;span&gt;但是在实际公司开发中，文件的上传下载是需要使用 远程方式完成的，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3) 远程方式登录，我们后面会具体讲解&lt;/p&gt;

&lt;p&gt;具体步骤:1) 菜单-&amp;gt;vm-&amp;gt;setting, 如图设置即可注意:设置选项为always enable ,这样可以读写了&lt;/p&gt;
&lt;p&gt;2) windows和centos可共享 d:/share目录可以读写文件了&lt;/p&gt;
&lt;p&gt;3)在centos的 /mnt/hgfs/&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123004340518-850827704.png&quot; alt=&quot;&quot; width=&quot;491&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;文件目录结构：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;基本介绍：&lt;/p&gt;
&lt;p&gt;linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此&lt;/p&gt;
&lt;p&gt;目录下再创建其他的目录。&lt;/p&gt;
&lt;p&gt;深刻理解linux树状文件目录是非常重要的，这里我给大家说明一下。&lt;/p&gt;
&lt;p&gt;记住一句经典的话：&lt;strong&gt;&lt;span&gt;在Linux世界里，一切皆文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123004435325-1250200627.png&quot; alt=&quot;&quot; width=&quot;613&quot; height=&quot;273&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181123004451603-222606846.png&quot; alt=&quot;&quot; width=&quot;499&quot; height=&quot;312&quot;/&gt;&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;bin [重点]&lt;/span&gt; (/usr/bin 、 /usr/local/bin)&lt;/p&gt;
&lt;p&gt;    • 是Binary的缩写, 这个目录存放着最经常使用的命令&lt;/p&gt;
&lt;p&gt;/sbin (/usr/sbin 、 /usr/local/sbin)&lt;/p&gt;
&lt;p&gt;    • s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;home [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;root [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 该目录为系统管理员，也称作超级权限者的用户主&lt;/p&gt;
&lt;p&gt;/lib&lt;/p&gt;
&lt;p&gt;    • 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享        库。&lt;/p&gt;
&lt;p&gt;/lost+found&lt;/p&gt;
&lt;p&gt;    • 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件&lt;/p&gt;
&lt;p&gt;&lt;span&gt;/etc [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 所有的系统管理所需要的配置文件和子目录 my.conf&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;usr [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;boot [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件&lt;/p&gt;
&lt;p&gt;/proc&lt;/p&gt;
&lt;p&gt;    • 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息&lt;/p&gt;
&lt;p&gt;/srv&lt;/p&gt;
&lt;p&gt;    • service缩写，该目录存放一些服务启动之后需要提取的数据&lt;/p&gt;
&lt;p&gt;/sys&lt;/p&gt;
&lt;p&gt;    • 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统&lt;/p&gt;
&lt;p&gt;/tmp&lt;/p&gt;
&lt;p&gt;    • 这个目录是用来存放一些临时文&lt;/p&gt;
&lt;p&gt;/dev&lt;/p&gt;
&lt;p&gt;    • 类似于windows的设备管理器，把所有的硬件用文件的形式存储。&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;media [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;mnt [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查            看        里的内容了。 d:/myshare&lt;/p&gt;
&lt;p&gt;/opt&lt;/p&gt;
&lt;p&gt;    • 这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下。默认为空&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;usr/local [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。&lt;/p&gt;
&lt;p&gt;/&lt;span&gt;var [重点]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    • 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。&lt;/p&gt;
&lt;p&gt;/selinux [security-enhanced linux] 360&lt;/p&gt;
&lt;p&gt;    • SELinux是一种安全子系统,它能控制程序只能访问特定文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Linux的目录中有且只有一个根目录   /&lt;/p&gt;
&lt;p&gt;2.Linux的各个mukluk存放的内容是预先规划好的，不能乱放&lt;/p&gt;
&lt;p&gt;2.Linux是以文件的形式来管理我们的设备，&lt;strong&gt;&lt;span&gt;因此Linux系统，一切皆为文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.Linux每个文件下的目录都要有一个基本的认识&lt;/p&gt;
&lt;p&gt;5.脑海中因该要有一个Linux目录树&lt;/p&gt;

</description>
<pubDate>Thu, 22 Nov 2018 16:47:00 +0000</pubDate>
<dc:creator>MrChengs</dc:creator>
<og:description>概述: 1. linux是一个开源、免费的操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多企业级的项目 都会部署到Linux/unix系统上。 2. 常见的操作系统(win7、IOS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mrchengs/p/10005261.html</dc:identifier>
</item>
<item>
<title>有趣的赫夫曼树 - 滴水微澜</title>
<link>http://www.cnblogs.com/zhou--fei/p/10005253.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhou--fei/p/10005253.html</guid>
<description>&lt;p&gt;美国有个数学家叫赫夫曼，60年前他根据数据的使用概率，发明了一个二叉树叫赫夫曼树。&lt;/p&gt;
&lt;p&gt;这个赫夫曼树被用在了数据压缩上，被称为赫夫曼编码，这是后来压缩的基础。&lt;/p&gt;

&lt;p&gt;他解决的问题主要思想是：根据元素出现的概率，获得最优解。&lt;/p&gt;

&lt;div readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;span&gt;举例如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;学生考试成绩出来后，会根据考试成绩分等级，极优秀，优秀，中等，及格，不及格。如果我们按照普通逻辑进行判断时，通常是：&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
    if (Score &amp;lt; 60) {
        printf(&quot;不及格&quot;);
    } else if (Score &amp;lt; 70) {
        printf(&quot;及格&quot;);
    } else if (Score &amp;lt; 80) {
        printf(&quot;中等&quot;);
    } else if (Score &amp;lt; 90) {
        printf(&quot;优秀&quot;);
    } else if (Score &amp;lt; 100) {
        printf(&quot;极优秀&quot;);
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;21.5&quot;&gt;
&lt;p&gt;但是按照分数的分布概率，优秀：30%，中等：40%，及格：15%，极优秀：10%，不及格：5%&lt;/p&gt;
&lt;p&gt;如果先判断优秀，中等，再判断极优秀，极优秀，不及格，则可以提高很多效率。&lt;/p&gt;
&lt;p&gt;赫夫曼树就是根据概率来生成的二叉树。&lt;/p&gt;
&lt;p&gt;转换成二叉树区别如下：&lt;/p&gt;

&lt;div readability=&quot;18&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201811/826860-20181123003308040-1975454592.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;从根节点出发，遍历每一个叶子节点，是的到达节点时走的链接树乘以节点(nodeLinkNum * weight)对应的权重之和最小&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;sum = 1*5+2*15+3*40+4*30+4*10&lt;/p&gt;
&lt;p&gt;显然，左图和右图总和不一样，左图的和大于右图.&lt;/p&gt;

&lt;div readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;strong&gt;那给你一组数字，怎么构造一个赫夫曼树呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.先把所有的数据节点，从小到大依次排列，成为一个有序列表&lt;/p&gt;
&lt;p&gt;2.取出前面两个节点，让这两个节点的权重数据相加得到一个和，令这个和为根节点，这个两个节点的小的为其左孩子，大的为其右孩子&lt;/p&gt;
&lt;p&gt;3.令这个和节点替换掉前面的两个节点，并重新排序，生成一个有序列表&lt;/p&gt;
&lt;p&gt;4.不断重复第二步，第三步。直到所有的节点都被用完，得到一个排序结果，此时生成的二叉树，就是赫夫曼树。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201811/826860-20181123003455490-992582857.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;赫夫曼树的实际应用：压缩数据&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据在计算机的表示形式是0，1，那么一串字符串的表示是怎么样的呢&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如ABCDEF编码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;19&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201811/826860-20181123003624159-405777388.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span&gt;那么要表示字符串“BADCADFEED”的二进制为：“001000011010000011101100100011”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是ABCDEF做为基本字符，在这串字符串中的出现概率是不一样的，那么我们是否可以以概率做为字符权重，对字符生成赫夫曼树呢&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假设六个字母的频率为A 27，B 8，C 15，D15，E 30，F 5，合起来正好是100%。那就意味着，我们完全可以重新按照赫夫曼树来规划它们。&lt;/p&gt;

&lt;div readability=&quot;17&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/826860/201811/826860-20181123003655271-1051362684.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;将权值左分支改为0，右分支改为1后的赫夫曼树。&lt;/p&gt;

&lt;p&gt;根据重新编码后为：&lt;/p&gt;
&lt;p&gt;1001010010101001000111100（共25个字符）&lt;/p&gt;
&lt;p&gt;而原来的字符编码为：&lt;/p&gt;
&lt;p&gt;“001000011010000011101100100011”（共30个字符）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;压缩了近17%&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解压时，按照同样的规则，还原原字符串。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
 &lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 22 Nov 2018 16:38:00 +0000</pubDate>
<dc:creator>滴水微澜</dc:creator>
<og:description>美国有个数学家叫赫夫曼，60年前他根据数据的使用概率，发明了一个二叉树叫赫夫曼树。 这个赫夫曼树被用在了数据压缩上，被称为赫夫曼编码，这是后来压缩的基础。 他解决的问题主要思想是：根据元素出现的概率，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhou--fei/p/10005253.html</dc:identifier>
</item>
<item>
<title>Dora.Interception，为.NET Core度身打造的AOP框架 [3]：多样化拦截器应用方式 - Artech</title>
<link>http://www.cnblogs.com/artech/p/dora-interception-03.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/artech/p/dora-interception-03.html</guid>
<description>&lt;p&gt;在《&lt;a href=&quot;https://www.cnblogs.com/artech/p/dora-interception-02.html&quot;&gt;以约定的方式定义拦截器&lt;/a&gt;》中，我们通过对拦截器的介绍了Dora.Interception的两种拦截机制，即针对接口的“&lt;strong&gt;&lt;span&gt;实例拦截&lt;/span&gt;&lt;/strong&gt;”针对虚方法的“&lt;span&gt;&lt;strong&gt;类型拦截&lt;/strong&gt;&lt;/span&gt;”。我们介绍了拦截器的本质以及基于约定的拦截器定义方式，接下来我们将着重关注拦截器的应用问题。&lt;/p&gt;

&lt;p&gt;和有些AOP框架不同，Dora.Interception在设计刻意地将拦截器和拦截器应用刻意地分开。不仅如此，在拦截器和拦截器应用之间，我们还分离出“&lt;span&gt;&lt;strong&gt;拦截器管道的构建&lt;/strong&gt;&lt;/span&gt;”：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;拦截器：旨在完成单一拦截功能的实现；&lt;/li&gt;
&lt;li&gt;拦截器管道的构建：将多个拦截器按照指定的顺序构建一个管道；&lt;/li&gt;
&lt;li&gt;拦截器的应用：将构建的拦截器管道应用到被拦截的某个方法上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拦截器管道的构建由IInterceptorChainBuilder来完成，它类似于ASP.NET Core的IApplicationBuilder接口，后者利用注册的中间件来构建一个中间件管道，而IInterceptorChainBuilder则采用类似的方式将注册的拦截器构建成一个拦截器管道。如下面的代码片段所示，我们利用Use方法将表示拦截器的InterceptorDelegate 的委托对象提供给IInterceptorChainBuilder，该方法的order参数表示提供的拦截器最终在拦截器链条上的位置。拦截器管道的构建最终由Build方法来完成，构建的管道也体现为一个InterceptorDelegate类型的委托。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IInterceptorChainBuilder
{
    InterceptorDelegate Build();
    IInterceptorChainBuilder New();
    IInterceptorChainBuilder Use(InterceptorDelegate interceptor, &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; order);

    IServiceProvider ServiceProvider { &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于Dora.Interception是为.NET Core度身定制的，而.NET Core总是离不开通过通过IServiceProvider表示的DI容器，所以我们将IServiceProvider整合到IInterceptorChainBuilder中，我们在构建拦截器管道过程中所需的任何一个依赖服务都可以利用它来提取。IInterceptorChainBuilder的New方法用来创建一个新的IInterceptorChainBuilder对象，当我们开始构建一个管道的时候需要调用此方法。&lt;/p&gt;
&lt;p&gt;虽然Dora.Interception最终总是利用InterceptorDelegate对象来表示拦截器，但是我们推荐应用程序采用我们约定的方式将拦截器定义成一个POCO类型，所谓我们为IInterceptorChainBuilder定义了如下几个扩展方法来注册一次方式定义的拦截器类型。如果调用第一个和第三个Use方法提供拦截器类型（第二个Use方法直接提供的是拦截器对象），我们最终需要利用作为DI容器的IServiceProvider对象来创建对应的实例。如果构造函数中所有的参数都是预选注册的服务，我们无需提供任何的参数，否则就需要利用arguments来提供它们。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InterceptorChainBuilderExtensions
{    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IInterceptorChainBuilder Use&amp;lt;TInterceptor&amp;gt;(&lt;span&gt;this&lt;/span&gt; IInterceptorChainBuilder builder, &lt;span&gt;int&lt;/span&gt; order, &lt;span&gt;params&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;[] arguments);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IInterceptorChainBuilder Use(&lt;span&gt;this&lt;/span&gt; IInterceptorChainBuilder builder, &lt;span&gt;object&lt;/span&gt; interceptor, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; order);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IInterceptorChainBuilder Use(&lt;span&gt;this&lt;/span&gt; IInterceptorChainBuilder builder, Type interceptorType, &lt;span&gt;int&lt;/span&gt; order, &lt;span&gt;params&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;[] arguments);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;IInterceptorChainBuilder仅仅是一个用来构建拦截器管道的工具而已，最终向它提供原材料（拦截器）的是一个IInterceptorProvider对象。一般来说一个拦截器类型对应一个IInterceptorProvider实现（也可可以是多个）。如下面的代码片段所示，IInterceptorProvider同样定义了一个Use方法，该方法将上面这个IInterceptorChainBuilder作为参数。在具体的实现中，我们一般会调用IInterceptorChainBuilder的Use方法来注册对应的拦截器类型。IInterceptorProvider还具有一个AllowMultiple属性表示当前类型的多个拦截器实例能够同时存在于管道中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IInterceptorProvider
{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Use(IInterceptorChainBuilder builder);
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; AllowMultiple { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IInterceptorProvider接口实际上体现了拦截器的注册方法，因为所谓的拦截器注册本质上体现为如何向IInterceptorChainBuilder提供拦截器的问题。由于标准Attribute是我们推荐的注册方式，我们为它们定义了如下这个名为InterceptorAttribute的基类。InterceptorAttribute可以标注到类型、属性和方法上，它的AllowMultiple属性与标注到该Attribute上的AttributeUsageAttribute的AllowMultiple属性一致，默认值为False。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
[AttributeUsage((AttributeTargets) (AttributeTargets.Property | AttributeTargets.Method | AttributeTargets.Class), AllowMultiple=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InterceptorAttribute : Attribute, IInterceptorProvider,
{   
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Use(IInterceptorChainBuilder builder);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; AllowMultiple { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Order { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如在前面一章中，我们定义了如下这么一个典型的Interceptor类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FoobarInterceptor
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IFoo Foo { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Baz { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }  
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FoobarInterceptor(IFoo foo, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; baz)
    {
        Foo &lt;/span&gt;=&lt;span&gt; foo;
        Baz &lt;/span&gt;=&lt;span&gt; baz;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task InvokeAsync(InvocationContext context, IBar bar)
    {
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; Foo.DoSomethingAsync();
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; bar.DoSomethingAsync();
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.ProceedAsync();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以为它定义如下这么一个类型为FoobarInterceptorAttribute 的IInterceptorProvider的实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[AttributeUsage(AttributeTargets.Class|&lt;span&gt; AttributeTargets.Method)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FoobarInterceptorAttribute : InterceptorAttribute
{     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Baz { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FoobarInterceptorAttribute(&lt;span&gt;string&lt;/span&gt; baz) =&amp;gt; Baz =&lt;span&gt; baz;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Use(IInterceptorChainBuilder builder) =&amp;gt; builder.Use&amp;lt;FoobarInterceptor&amp;gt;&lt;span&gt;(Order, Baz);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然Dora.Interception是将Interceptor和IInterceptorProvider区分开来，但是应用程序可以采用如下的方式将它们&lt;span&gt;&lt;strong&gt;合二为一&lt;/strong&gt;&lt;/span&gt;。其实将它们分而治之还有一个好处，那就是我可以为IInterceptorProvider起一个不同的名称，比如第一篇演示的实例中我们将拦截器命名为CachingInterceptor，但是对应的IInterceptorProvider实现类型则定义成CacheReturnValueAttribute。还有另一个好处就是可以为同一个拦截器名类型定义多一个不同的IInterceptorProvider实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FoobarInterceptorAttribute : InterceptorAttribute
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Baz { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FoobarInterceptorAttribute(&lt;span&gt;string&lt;/span&gt; baz) =&amp;gt; Baz =&lt;span&gt; baz;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task InvokeAsync(InvocationContext context, IFoo foo, IBar bar)
    {
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; foo.DoSomethingAsync();
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; bar.DoSomethingAsync();
        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.ProceedAsync();
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Use(IInterceptorChainBuilder builder) =&amp;gt; builder.Use(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, Order);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最终针对拦截器的应用体现在IInterceptorProviderResolver对象上。IInterceptorProvider其实帮助我们解决了一个核心问题：&lt;strong&gt;提供具体的拦截器并将它存放到对应的位置（即在最终构建的拦截器管道中的Order）&lt;/strong&gt;。那么针对拦截器的应用最终体现为：&lt;strong&gt;针对一个类型或者其成员（方法或者属性），能够提供怎样的IInterceptorProvider&lt;/strong&gt;。如下面的代码片段所示，IInterceptorProviderResolver提供了三个方法来解析应用到类型、方法和属性（Get、Set或者Both）的IInterceptorProvider。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IInterceptorProviderResolver
{
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;?&lt;span&gt; WillIntercept(Type targetType);

    IInterceptorProvider[] GetInterceptorProvidersForMethod(Type targetType, MethodInfo targetMethod);
    IInterceptorProvider[] GetInterceptorProvidersForProperty(Type targetType, PropertyInfo targetProperty, PropertyMethod getOrSet);
    IInterceptorProvider[] GetInterceptorProvidersForType(Type targetType);   
}

[Flags]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; PropertyMethod
{
    Get  &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    Set  &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
    Both &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们说标注Attribute仅仅体现为针对拦截器的一种注册方式而已，因为在Dora.Interception我们为它定义了如下这么一个&lt;strong&gt;AttributeInterceptorProviderResolver&lt;/strong&gt;，它是默认注册的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AttributeInterceptorProviderResolver : IInterceptorProviderResolver
{   
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IInterceptorProvider[] GetInterceptorProvidersForMethod(Type targetType, MethodInfo method);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IInterceptorProvider[] GetInterceptorProvidersForProperty(Type targetType, PropertyInfo property, PropertyMethod propertyMethod);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IInterceptorProvider[] GetInterceptorProvidersForType(Type type);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;?&lt;span&gt; WillIntercept(Type type);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;?&lt;span&gt; WillIntercept(Type targetType, MethodInfo method);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;?&lt;span&gt; WillIntercept(Type targetType, PropertyInfo property);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果我们觉得基于Attribute的实现不能满足你的需求，只需要自行实现上面这个IInterceptorProviderResolver接口就可以了。比如我们可以定义如下这个“&lt;strong&gt;&lt;span&gt;万能&lt;/span&gt;&lt;/strong&gt;”的IInterceptorProviderResolver实现，因为我将针对IInterceptorProvider对象与目标方法的匹配规则定义成一个Func&amp;lt;MethodInfo, bool&amp;gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InterceptorRegistry : IInterceptorProviderResolver
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IInterceptorProvider[] _empty = &lt;span&gt;new&lt;/span&gt; IInterceptorProvider[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Dictionary&amp;lt;IInterceptorProvider, Func&amp;lt;MethodInfo, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; _policies = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;IInterceptorProvider, Func&amp;lt;MethodInfo, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IInterceptorProvider[] GetInterceptorProvidersForMethod(Type targetType, MethodInfo targetMethod)
    &lt;/span&gt;=&amp;gt; _policies.Where(it =&amp;gt; it.Value(targetMethod)).Select(it =&amp;gt;&lt;span&gt; it.Key).ToArray();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IInterceptorProvider[] GetInterceptorProvidersForProperty(Type targetType, PropertyInfo targetProperty, PropertyMethod getOrSet)
    {
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (getOrSet)
        {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; PropertyMethod.Get:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetInterceptorProvidersForMethod(targetType, targetProperty.GetMethod);
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; PropertyMethod.Set:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetInterceptorProvidersForMethod(targetType, targetProperty.SetMethod);
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetInterceptorProvidersForMethod(targetType, targetProperty.GetMethod)
                    .Union(GetInterceptorProvidersForMethod(targetType, targetProperty.SetMethod))
                    .ToArray();
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IInterceptorProvider[] GetInterceptorProvidersForType(Type targetType) =&amp;gt;&lt;span&gt; _empty;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;?&lt;span&gt; WillIntercept(Type targetType)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (targetType.GetCustomAttributes&amp;lt;NonInterceptableAttribute&amp;gt;&lt;span&gt;().Any())
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; InterceptorRegistry Add(IInterceptorProvider interceptorProvider, Func&amp;lt;MethodInfo, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt; filter)
    {
        _policies.Add(interceptorProvider, filter);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的自定义IInterceptorProviderResolver（InterceptorRegistry ）可以采用如下的方式进行注册。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; registry = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InterceptorRegistry()
            .Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; CacheReturnValueAttribute(), method =&amp;gt; method.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetCurrentTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; method.DeclaringType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(SystemClock));
        services.AddInterception(builder&lt;/span&gt;=&amp;gt;builder.InterceptorProviderResolvers.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;policy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,registry));
    }
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IServiceProvider ConfigureServices(IServiceCollection services)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; registry = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InterceptorRegistry()
            .Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; CacheReturnValueAttribute(), method =&amp;gt; method.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetCurrentTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; method.DeclaringType == &lt;span&gt;typeof&lt;/span&gt;(SystemClock));
&lt;/pre&gt;
&lt;pre&gt;
         &lt;span&gt;return&lt;/span&gt; services.BuildInterceptableServiceProvider(builder=&amp;gt;builder.InterceptorProviderResolvers.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;policy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,registry));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过自定义IInterceptorProviderResolver可以帮助我们实现任意形式的拦截器注册方式，但是千万不能滥用。我个人的观点是：这种用于注册拦截器的规则必需是&lt;strong&gt;&lt;span&gt;明确&lt;/span&gt;&lt;/strong&gt;的，我们必需非常确切地知道拦截器最终应用到了哪个方法上。如果定义的规则太过模糊，比如针对方法名称进行注册，那么我们的拦截器极有可能应用到某个我们并不希望的方法上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/dora-interception-01.html&quot;&gt;[1]：更加简练的编程体验&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/dora-interception-02.html&quot;&gt;[2]：基于约定的拦截器定义方式&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/dora-interception-03.html&quot;&gt;[3]：多样性的拦截器应用方式&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/dora-interception-04.html&quot;&gt;[4]：与依赖注入框架的深度整合&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/artech/p/dora-interception-05.html&quot;&gt;[5]：对拦截机制的灵活定制&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 22 Nov 2018 15:49:00 +0000</pubDate>
<dc:creator>Artech</dc:creator>
<og:description>在《以约定的方式定义拦截器》中，我们通过对拦截器的介绍了Dora.Interception的两种拦截机制，即针对接口的“实例拦截”针对虚方法的“类型拦截”。我们介绍了拦截器的本质以及基于约定的拦截器定</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/artech/p/dora-interception-03.html</dc:identifier>
</item>
<item>
<title>python面向对象学习（七）单例 - 张风闲</title>
<link>http://www.cnblogs.com/zhangfengxian/p/python-single-instance.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangfengxian/p/python-single-instance.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;h2 id=&quot;单例设计模式&quot;&gt;1. 单例设计模式&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;设计模式
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;设计模式&lt;/strong&gt; 是 &lt;strong&gt;前人工作的总结和提炼&lt;/strong&gt;，通常，被人们广泛流传的设计模式都是针对 &lt;strong&gt;某一特定问题&lt;/strong&gt;的成熟的解决方案&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;设计模式&lt;/strong&gt; 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;单例设计模式
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt; —— 让 &lt;strong&gt;类&lt;/strong&gt; 创建的对象，在系统中 &lt;strong&gt;只有&lt;/strong&gt; &lt;strong&gt;唯一的一个实例&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每一次执行 &lt;code&gt;类名()&lt;/code&gt; 返回的对象，&lt;strong&gt;内存地址是相同的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;单例设计模式的应用场景&quot;&gt;单例设计模式的应用场景&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;音乐播放&lt;/strong&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回收站&lt;/strong&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打印机&lt;/strong&gt; 对象&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;new__-方法&quot;&gt;2. &lt;code&gt;__new__&lt;/code&gt; 方法&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;使用 &lt;strong&gt;类名()&lt;/strong&gt; 创建对象时，&lt;code&gt;Python&lt;/code&gt; 的解释器 &lt;strong&gt;首先&lt;/strong&gt; 会 调用 &lt;code&gt;__new__&lt;/code&gt; 方法为对象 &lt;strong&gt;分配空间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__new__&lt;/code&gt; 是一个 由 &lt;code&gt;object&lt;/code&gt; 基类提供的 &lt;strong&gt;内置的静态方法&lt;/strong&gt;，主要作用有两个：
&lt;ul&gt;&lt;li&gt;1) 在内存中为对象 &lt;strong&gt;分配空间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;2) &lt;strong&gt;返回&lt;/strong&gt; 对象的引用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt; 的解释器获得对象的 &lt;strong&gt;引用&lt;/strong&gt; 后，将引用作为 &lt;strong&gt;第一个参数&lt;/strong&gt;，传递给 &lt;code&gt;__init__&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;重写 &lt;code&gt;__new__&lt;/code&gt; 方法 的代码非常固定！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;重写 &lt;code&gt;__new__&lt;/code&gt; 方法 &lt;strong&gt;一定要&lt;/strong&gt; &lt;code&gt;return super().__new__(cls)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则 Python 的解释器 &lt;strong&gt;得不到&lt;/strong&gt; 分配了空间的 &lt;strong&gt;对象引用&lt;/strong&gt;，&lt;strong&gt;就不会调用对象的初始化方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注意：&lt;code&gt;__new__&lt;/code&gt; 是一个静态方法，在调用时需要 &lt;strong&gt;主动传递&lt;/strong&gt; &lt;code&gt;cls&lt;/code&gt; 参数&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MusicPlayer(object):

    def __new__(cls, *args, **kwargs):

        print(&quot;执行__new__&quot;)

        instance = super().__new__(cls)

        return instance

    def __init__(self):

        print(&quot;执行__init__&quot;)


mp1 = MusicPlayer()

print(mp1)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;python-中的单例&quot;&gt;3. Python 中的单例&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;单例&lt;/strong&gt; —— 让 &lt;strong&gt;类&lt;/strong&gt; 创建的对象，在系统中 &lt;strong&gt;只有&lt;/strong&gt; &lt;strong&gt;唯一的一个实例&lt;/strong&gt;
&lt;ol&gt;&lt;li&gt;定义一个 &lt;strong&gt;类属性&lt;/strong&gt;，初始值是 &lt;code&gt;None&lt;/code&gt;，用于记录 &lt;strong&gt;单例对象的引用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;重写 &lt;code&gt;__new__&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;类属性&lt;/strong&gt; &lt;code&gt;is None&lt;/code&gt;，调用父类方法分配空间，并在类属性中记录结果&lt;/li&gt;
&lt;li&gt;返回 &lt;strong&gt;类属性&lt;/strong&gt; 中记录的 &lt;strong&gt;对象引用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MusicPlayer(object):

    instance = None

    def __new__(cls, *args, **kwargs):

        if cls.instance is None:
            cls.instance = super().__new__(cls)

        return cls.instance


mp1 = MusicPlayer()
print(mp1)

mp2 = MusicPlayer()
print(mp2)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;只执行一次初始化工作&quot;&gt;只执行一次初始化工作&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;在每次使用 &lt;code&gt;类名()&lt;/code&gt; 创建对象时，&lt;code&gt;Python&lt;/code&gt; 的解释器都会自动调用两个方法：
&lt;ul&gt;&lt;li&gt;&lt;code&gt;__new__&lt;/code&gt; 分配空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt; 对象初始化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在上一小节对 &lt;code&gt;__new__&lt;/code&gt; 方法改造之后，每次都会得到 &lt;strong&gt;第一次被创建对象的引用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但是：&lt;strong&gt;初始化方法还会被再次调用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;让 &lt;strong&gt;初始化动作&lt;/strong&gt; 只被 &lt;strong&gt;执行一次&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;定义一个类属性 &lt;code&gt;init_flag&lt;/code&gt; 标记是否 &lt;strong&gt;执行过初始化动作&lt;/strong&gt;，初始值为 &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;__init__&lt;/code&gt; 方法中，判断 &lt;code&gt;init_flag&lt;/code&gt;，如果为 &lt;code&gt;False&lt;/code&gt; 就执行初始化动作&lt;/li&gt;
&lt;li&gt;然后将 &lt;code&gt;init_flag&lt;/code&gt; 设置为 &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这样，再次 &lt;strong&gt;自动&lt;/strong&gt; 调用 &lt;code&gt;__init__&lt;/code&gt; 方法时，&lt;strong&gt;初始化动作就不会被再次执行&lt;/strong&gt; 了&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;class MusicPlayer(object):

    instance = None
    init_flag = False

    def __new__(cls, *args, **kwargs):

        if cls.instance is None:
            cls.instance = super().__new__(cls)

        return cls.instance

    def __init__(self):

        if not MusicPlayer.init_flag:

            print(&quot;初始化音乐播放器&quot;)

            MusicPlayer.init_flag = True


mp1 = MusicPlayer()
print(mp1)

mp2 = MusicPlayer()
print(mp2)
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 22 Nov 2018 15:47:00 +0000</pubDate>
<dc:creator>张风闲</dc:creator>
<og:description>[TOC] 1. 单例设计模式 设计模式 设计模式 是 前人工作的总结和提炼 ，通常，被人们广泛流传的设计模式都是针对 某一特定问题 的成熟的解决方案 使用 设计模式 是为了可重用代码、让代码更容易被</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangfengxian/p/python-single-instance.html</dc:identifier>
</item>
<item>
<title>公司内网离线环境搭建Android Studio - 魔法瞬间</title>
<link>http://www.cnblogs.com/yxliu/p/10004765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yxliu/p/10004765.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;缘由何起 &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;↓&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么要在离线环境里搭建？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、搭建过程中所需SDK、Gradle等资源下载速度太慢。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、公司内部环境不允许使用外网。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下是我在公司内网环境搭建的辛酸历程，特此总结于此！&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、离线搭建Android Studio开发环境：安装过程详细步骤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lilang_9920/article/details/81005345&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/lilang_9920/article/details/81005345&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、AndroidStudio中的内网开发离线配置：解决Gradle编译不通过问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yuhaihua529/article/details/77651301#commentBox&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/yuhaihua529/article/details/77651301#commentBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、解决包文件夹路径转换问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Could not download javassist.jar(org.javassist:javassist:3.23.1-GA):No cached version available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wannaconquer/article/details/83041756&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/wannaconquer/article/details/83041756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、解决虚拟机安装问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt;emulator&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; ERROR&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; x86 emulation currently requires hardware acceleration&lt;span class=&quot;pun&quot;&gt;!&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;typ&quot;&gt;Please&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;ensure&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;typ&quot;&gt;Intel&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; HAXM&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;is&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; properly installed&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;and&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; usable&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt;CPU acceleration status&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; HAX kernel&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;module&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;is&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;not&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; installed&lt;span class=&quot;pun&quot;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/springxie/p/4742100.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/springxie/p/4742100.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;对此特别感谢以上四位博主分享的经验，以此来借花献佛，希望能帮助到需要的人以节省大量的时间做更有意义事！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如有得罪请多多包涵！&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 22 Nov 2018 15:37:00 +0000</pubDate>
<dc:creator>魔法瞬间</dc:creator>
<og:description>缘由何起 ↓ 为什么要在离线环境里搭建？ 1、搭建过程中所需SDK、Gradle等资源下载速度太慢。 2、公司内部环境不允许使用外网。 以下是我在公司内网环境搭建的辛酸历程，特此总结于此！ 一、离线搭</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yxliu/p/10004765.html</dc:identifier>
</item>
</channel>
</rss>